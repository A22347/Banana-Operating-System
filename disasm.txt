
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 42 f6 00 00       	call   c000f662 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 82 02 00       	call   c00282e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 3c 8f 02 c0       	mov    ebx,0xc0028f3c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 48 8f 02 c0    	cmp    ebx,0xc0028f48
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 cd 02 c0       	mov    eax,0xc002cd18
c0000049:	3d 18 cd 02 c0       	cmp    eax,0xc002cd18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 cd 02 c0       	push   0xc002cd18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 cd 02 c0       	mov    eax,0xc002cd18
c0000075:	2d 18 cd 02 c0       	sub    eax,0xc002cd18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 cd 02 c0       	push   0xc002cd18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 d3 02 c0 00 	cmp    BYTE PTR ds:0xc002d348,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 50 8f 02 c0       	mov    ebx,0xc0028f50
c00000bb:	81 eb 4c 8f 02 c0    	sub    ebx,0xc0028f4c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 4c 8f 02 c0       	mov    esi,0xc0028f4c
c00000ca:	a1 4c d3 02 c0       	mov    eax,ds:0xc002d34c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c d3 02 c0       	mov    ds:0xc002d34c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c d3 02 c0       	mov    eax,ds:0xc002d34c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 cd 02 c0       	push   0xc002cd18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 d3 02 c0 01 	mov    BYTE PTR ds:0xc002d348,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 d3 02 c0       	push   0xc002d350
c000012c:	68 18 cd 02 c0       	push   0xc002cd18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 1d ce 01 00       	call   c001d1c0 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 28 20 01 00       	call   c00123e3 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 fb cd 01 00       	call   c001d1c0 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 a3 d2 01 00       	call   c001d687 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 b9 d8 01 00       	call   c001dca6 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 90 d7 02 c0 	lgdtd  ds:0xc002d790
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 21 3d 01 00       	call   c0014303 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 68 d3 02 c0       	mov    ds:0xc002d368,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 68 d3 02 c0    	mov    DWORD PTR ds:0xc002d368,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 68 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d368
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 8f 02 c0 02 	test   BYTE PTR [edx-0x3ffd70a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 8f 02 c0 08 	test   BYTE PTR [edx-0x3ffd70a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 8f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd70a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 8f 02 c0 01 	test   BYTE PTR [edx-0x3ffd70a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 80 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d380
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 80 d3 02 c0    	mov    DWORD PTR ds:0xc002d380,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 84 d3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2c7c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 84 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c7c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 80 d3 02 c0    	mov    DWORD PTR ds:0xc002d380,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 ac d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ac,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d bc d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d3bc
c0000e38:	c7 42 0c b4 d3 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d3b4
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 bc d3 02 c0    	mov    DWORD PTR ds:0xc002d3bc,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 ac d3 02 c0    	mov    DWORD PTR ds:0xc002d3ac,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 80 d3 02 c0 02 	test   BYTE PTR ds:0xc002d380,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 80 d3 02 c0    	mov    edi,DWORD PTR ds:0xc002d380
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 84 d3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2c7c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 84 d3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2c7c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 b4 d3 02 c0 	lea    edx,[eax*8-0x3ffd2c4c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d c0 d3 02 c0    	mov    ebx,DWORD PTR ds:0xc002d3c0
c00011ba:	81 fb b4 d3 02 c0    	cmp    ebx,0xc002d3b4
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d b4 d3 02 c0       	cmp    eax,0xc002d3b4
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d b0 d3 02 c0    	cmp    DWORD PTR ds:0xc002d3b0,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 bc d3 02 c0       	mov    ds:0xc002d3bc,eax
c00011f6:	a3 c0 d3 02 c0       	mov    ds:0xc002d3c0,eax
c00011fb:	a3 b0 d3 02 c0       	mov    ds:0xc002d3b0,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 b4 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d3b4
c0001209:	c7 40 0c b4 d3 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d3b4
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 c0 d3 02 c0       	mov    ds:0xc002d3c0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 b4 d3 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d3b4
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 78 d3 02 c0 	lea    ebp,[edx*4-0x3ffd2c88]
c000125a:	8b 14 95 80 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c80]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 80 d3 02 c0 	lea    ecx,[edx*4-0x3ffd2c80]
c0001275:	8b 14 95 80 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2c80]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd b4 d6 02 c0 	or     DWORD PTR [edi*4-0x3ffd294c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 b4 d3 02 c0 	lea    eax,[eax*8-0x3ffd2c4c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d bc d3 02 c0    	mov    DWORD PTR ds:0xc002d3bc,ecx
c000132f:	89 0d c0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3c0,ecx
c0001335:	c7 41 08 b4 d3 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d3b4
c000133c:	c7 41 0c b4 d3 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d3b4
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd ac d3 02 c0 	lea    edx,[ecx*8-0x3ffd2c54]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d b4 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd294c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d b4 d6 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd294c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 ac d3 02 c0 	lea    edx,[eax*4-0x3ffd2c54]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d b4 d6 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd294c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d bc d3 02 c0    	mov    DWORD PTR ds:0xc002d3bc,edi
c0001402:	89 3d c0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3c0,edi
c0001408:	c7 47 08 b4 d3 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d3b4
c000140f:	c7 47 0c b4 d3 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d3b4
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d b0 d3 02 c0    	mov    DWORD PTR ds:0xc002d3b0,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 ac d3 02 c0       	mov    eax,ds:0xc002d3ac
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d ac d3 02 c0    	mov    DWORD PTR ds:0xc002d3ac,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 80 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d380,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d d4 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6d4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 d4 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6d4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d d4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 ac d3 02 c0    	cmp    DWORD PTR ds:0xc002d3ac,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d ac d3 02 c0    	mov    DWORD PTR ds:0xc002d3ac,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 80 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d380,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 dc d6 02 c0    	push   DWORD PTR ds:0xc002d6dc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 80 d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d380,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 dc d6 02 c0       	mov    eax,ds:0xc002d6dc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d ac d3 02 c0 00 	cmp    DWORD PTR ds:0xc002d3ac,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 ac d3 02 c0       	mov    eax,ds:0xc002d3ac
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 84 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c7c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 b4 d3 02 c0       	mov    eax,0xc002d3b4
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d ac d6 02 c0       	cmp    eax,0xc002d6ac
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 e8 d6 02 c0       	mov    eax,ds:0xc002d6e8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 d0 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6d0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 e4 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6e4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 f4 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6f4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 90 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6f9c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 80 d3 02 c0       	mov    eax,ds:0xc002d380
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 80 d3 02 c0       	mov    ds:0xc002d380,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d c4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d c8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6c8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 d4 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6d4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 40 0e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf1c0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 e4 ea 01 00       	jmp    c00206d6 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 40 0e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf1c0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 15 eb 01 00       	jmp    c002071d <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 40 0e 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf1c0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 3d eb 01 00       	jmp    c0020764 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 3a 47 02 00       	call   c0026644 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 91 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6e80]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 91 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6e80]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 90 02 c0       	mov    edx,0xc0029080
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 91 02 c0       	mov    edx,0xc00291a0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 54 bc 02 c0       	mov    edx,0xc002bc54
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 91 02 c0       	mov    edx,0xc00291ac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 91 02 c0       	mov    edx,0xc0029190
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 20 d7 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd28e0]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 00 d7 02 c0    	mov    ax,ds:0xc002d700
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 00 d7 02 c0    	mov    ds:0xc002d700,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 37 35 02 00       	call   c0026644 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 91 02 c0       	mov    eax,0xc00291b2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6f00]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 91 02 c0       	mov    eax,0xc00291bb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 91 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6e80]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 02 1f 02 00       	call   c0026644 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 91 02 c0       	mov    edx,0xc0029190
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 90 02 c0       	mov    edx,0xc0029080
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 90 02 c0       	mov    edx,0xc0029090
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 20 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd28e0]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 20 d7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd28e0],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 c9 08 02 00       	call   c0026644 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 af 08 02 00       	call   c0026644 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 90 02 c0       	mov    eax,0xc00290d7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 90 02 c0       	mov    eax,0xc00290d0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 20 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd28e0]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 90 02 c0       	mov    esi,0xc00290c0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 f2 ef 01 00       	call   c0026644 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 91 02 c0       	mov    edx,0xc00291a0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 90 02 c0       	mov    edx,0xc00290b0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 91 02 c0       	mov    edx,0xc00291c2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 91 02 c0       	mov    edx,0xc00291ce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 91 02 c0       	mov    edx,0xc00291e2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 33 71 00 00       	call   c000f59c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2d 71 00 00       	call   c000f5ac <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029500
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029500
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 93 02 c0       	mov    eax,0xc0029300
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 92 02 c0       	mov    eax,0xc0029240
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6e00]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 72 6e 00 00       	call   c000f5ac <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 5c 6e 00 00       	call   c000f5ac <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 46 f9 01 00       	call   c0028117 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 09 f9 01 00       	call   c00280f9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 dd f8 01 00       	call   c0028117 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 90 ef 01 00       	call   c002781c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 12 fa 01 00       	call   c00282b0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 57 f8 01 00       	call   c0028117 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 99 f7 01 00       	call   c0028117 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 66 f7 01 00       	call   c00280f9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 53 f6 01 00       	call   c0028117 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 1b f6 01 00       	call   c00280f9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 3b 6a 00 00       	call   c000f5cc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d6 69 00 00       	call   c000f5ac <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 96 02 c0       	mov    eax,0xc0029600
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 27 f4 01 00       	call   c0028117 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 ec f3 01 00       	call   c00280f9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 fc f0 01 00       	call   c0027eab <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 7a ea 01 00       	call   c0027848 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 36 f3 01 00       	call   c002811b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 24 f4 01 00       	call   c002823f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 0e ea 01 00       	call   c0027848 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 b9 f2 01 00       	call   c0028115 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 9a f2 01 00       	call   c0028119 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 30 f4 01 00       	call   c00282d0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 da ef 01 00       	call   c0027eab <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 58 e9 01 00       	call   c0027848 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 14 f2 01 00       	call   c002811b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 02 f3 01 00       	call   c002823f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 ec e8 01 00       	call   c0027848 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 97 f1 01 00       	call   c0028115 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 77 f1 01 00       	call   c0028119 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 0c f3 01 00       	call   c00282d0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 b2 f0 01 00       	call   c0028117 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 70 f0 01 00       	call   c00280f9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 58 f0 01 00       	call   c0028117 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ca ed 01 00       	call   c0027eab <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 cc e0 01 00       	call   c00271cb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 2f e7 01 00       	call   c0027848 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 81 ed 01 00       	call   c0027eab <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 87 e0 01 00       	call   c00271cb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 56 ed 01 00       	call   c0027eab <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 a6 ef 01 00       	call   c0028115 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 83 e6 01 00       	call   c002781c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 05 f1 01 00       	call   c00282b0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 2c ef 01 00       	call   c00280f9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 27 e6 01 00       	call   c002781c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 a5 ec 01 00       	call   c0027eab <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 28 e6 01 00       	call   c0027848 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 7a ec 01 00       	call   c0027eab <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 e1 e8 01 00       	call   c0027b2c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 60 df 01 00       	call   c00271cb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 c0 d8 01 00       	call   c0026b60 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 97 ef 01 00       	call   c002823f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 80 e5 01 00       	call   c0027848 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 67 ef 01 00       	call   c002823f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 d9 de 01 00       	call   c00271cb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 12 ee 01 00       	call   c002811b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 fa e7 01 00       	call   c0027b2c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 80 de 01 00       	call   c00271cb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 6e ef 01 00       	call   c00282d0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 40 eb 01 00       	call   c0027eab <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 97 e4 01 00       	call   c002781c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 76 ed 01 00       	call   c0028117 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 0f de 01 00       	call   c00271cb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 3b e4 01 00       	call   c002781c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 dd ee 01 00       	call   c00282d0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 8e ea 01 00       	call   c0027eab <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 0b e4 01 00       	call   c0027848 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 5e ea 01 00       	call   c0027eab <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 64 dd 01 00       	call   c00271cb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 34 ea 01 00       	call   c0027eab <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 86 ec 01 00       	call   c0028117 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 5d e3 01 00       	call   c002781c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 df ed 01 00       	call   c00282b0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 06 ec 01 00       	call   c00280f9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 00 e3 01 00       	call   c002781c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 7e e9 01 00       	call   c0027eab <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 01 e3 01 00       	call   c0027848 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 53 e9 01 00       	call   c0027eab <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 ba e5 01 00       	call   c0027b2c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 39 dc 01 00       	call   c00271cb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 89 d5 01 00       	call   c0026b60 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 60 ec 01 00       	call   c002823f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 49 e2 01 00       	call   c0027848 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 30 ec 01 00       	call   c002823f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 a2 db 01 00       	call   c00271cb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 db ea 01 00       	call   c002811b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 c2 e4 01 00       	call   c0027b2c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 41 db 01 00       	call   c00271cb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 2f ec 01 00       	call   c00282d0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 01 e8 01 00       	call   c0027eab <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 58 e1 01 00       	call   c002781c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 37 ea 01 00       	call   c0028117 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 d0 da 01 00       	call   c00271cb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 fc e0 01 00       	call   c002781c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 71 e7 01 00       	call   c0027eab <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 77 da 01 00       	call   c00271cb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 9a 02 c0       	mov    eax,0xc0029ac0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 9a 02 c0       	mov    eax,0xc0029ad4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6f 5d 00 00       	call   c000f5ac <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 71 5d 00 00       	call   c000f5cc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 ec e5 01 00       	call   c0027eab <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 6a df 01 00       	call   c0027848 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 fc d1 01 00       	call   c0026b60 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 d3 e8 01 00       	call   c002823f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 bc de 01 00       	call   c0027848 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 9f e8 01 00       	call   c002823f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 11 d8 01 00       	call   c00271cb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 71 e8 01 00       	call   c002823f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 60 de 01 00       	call   c0027848 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 c9 d7 01 00       	call   c00271cb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ea d0 01 00       	call   c0026b60 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 c1 e7 01 00       	call   c002823f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 aa dd 01 00       	call   c0027848 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 8d e7 01 00       	call   c002823f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 ff d6 01 00       	call   c00271cb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 5f e7 01 00       	call   c002823f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 4e dd 01 00       	call   c0027848 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 b7 d6 01 00       	call   c00271cb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 95 d6 01 00       	call   c00271cb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 71 cf 01 00       	call   c0026b60 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 48 e6 01 00       	call   c002823f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 31 dc 01 00       	call   c0027848 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 14 e6 01 00       	call   c002823f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 86 d5 01 00       	call   c00271cb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 e6 e5 01 00       	call   c002823f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 cf db 01 00       	call   c0027848 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 38 d5 01 00       	call   c00271cb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 98 e5 01 00       	call   c002823f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 81 db 01 00       	call   c0027848 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ea d4 01 00       	call   c00271cb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 ff cd 01 00       	call   c0026b60 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 d6 e4 01 00       	call   c002823f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 bf da 01 00       	call   c0027848 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 a6 e4 01 00       	call   c002823f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 18 d4 01 00       	call   c00271cb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 78 e4 01 00       	call   c002823f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 61 da 01 00       	call   c0027848 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ca d3 01 00       	call   c00271cb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 2a e4 01 00       	call   c002823f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 13 da 01 00       	call   c0027848 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 7c d3 01 00       	call   c00271cb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 50 d3 01 00       	call   c00271cb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 ad d9 01 00       	call   c0027848 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 69 e2 01 00       	call   c002811b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 f8 d2 01 00       	call   c00271cb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 55 d9 01 00       	call   c0027848 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 11 e2 01 00       	call   c002811b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 8b cb 01 00       	call   c0026b60 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 62 e2 01 00       	call   c002823f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 4b d8 01 00       	call   c0027848 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 2e e2 01 00       	call   c002823f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 a0 d1 01 00       	call   c00271cb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 00 e2 01 00       	call   c002823f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 e9 d7 01 00       	call   c0027848 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 52 d1 01 00       	call   c00271cb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 b2 e1 01 00       	call   c002823f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 9b d7 01 00       	call   c0027848 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 04 d1 01 00       	call   c00271cb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 64 e1 01 00       	call   c002823f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 4d d7 01 00       	call   c0027848 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 b6 d0 01 00       	call   c00271cb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 16 e1 01 00       	call   c002823f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 ff d6 01 00       	call   c0027848 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 68 d0 01 00       	call   c00271cb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 6a c9 01 00       	call   c0026b60 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 41 e0 01 00       	call   c002823f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 2a d6 01 00       	call   c0027848 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 11 e0 01 00       	call   c002823f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 83 cf 01 00       	call   c00271cb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 e3 df 01 00       	call   c002823f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 cc d5 01 00       	call   c0027848 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 35 cf 01 00       	call   c00271cb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 95 df 01 00       	call   c002823f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 7e d5 01 00       	call   c0027848 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 e7 ce 01 00       	call   c00271cb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 47 df 01 00       	call   c002823f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 30 d5 01 00       	call   c0027848 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 99 ce 01 00       	call   c00271cb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 f9 de 01 00       	call   c002823f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 e2 d4 01 00       	call   c0027848 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 4b ce 01 00       	call   c00271cb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 1f ce 01 00       	call   c00271cb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 7c d4 01 00       	call   c0027848 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 38 dd 01 00       	call   c002811b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 c7 cd 01 00       	call   c00271cb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 24 d4 01 00       	call   c0027848 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 e0 dc 01 00       	call   c002811b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 6e cd 01 00       	call   c00271cb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 cb d3 01 00       	call   c0027848 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 87 dc 01 00       	call   c002811b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 15 cd 01 00       	call   c00271cb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 72 d3 01 00       	call   c0027848 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 2e dc 01 00       	call   c002811b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 8c c5 01 00       	call   c0026b60 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 63 dc 01 00       	call   c002823f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 4c d2 01 00       	call   c0027848 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 2f dc 01 00       	call   c002823f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 a1 cb 01 00       	call   c00271cb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 01 dc 01 00       	call   c002823f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ea d1 01 00       	call   c0027848 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 53 cb 01 00       	call   c00271cb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 b3 db 01 00       	call   c002823f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 9c d1 01 00       	call   c0027848 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 05 cb 01 00       	call   c00271cb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 65 db 01 00       	call   c002823f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 4e d1 01 00       	call   c0027848 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 b7 ca 01 00       	call   c00271cb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 17 db 01 00       	call   c002823f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 00 d1 01 00       	call   c0027848 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 69 ca 01 00       	call   c00271cb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 c9 da 01 00       	call   c002823f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 b2 d0 01 00       	call   c0027848 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 18 ca 01 00       	call   c00271cb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 78 da 01 00       	call   c002823f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 61 d0 01 00       	call   c0027848 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ca c9 01 00       	call   c00271cb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 c4 c2 01 00       	call   c0026b60 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 9b d9 01 00       	call   c002823f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 84 cf 01 00       	call   c0027848 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 64 d9 01 00       	call   c002823f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 d6 c8 01 00       	call   c00271cb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 36 d9 01 00       	call   c002823f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 1f cf 01 00       	call   c0027848 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 88 c8 01 00       	call   c00271cb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 e8 d8 01 00       	call   c002823f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 d1 ce 01 00       	call   c0027848 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 3a c8 01 00       	call   c00271cb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 9a d8 01 00       	call   c002823f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 83 ce 01 00       	call   c0027848 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 ec c7 01 00       	call   c00271cb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 4c d8 01 00       	call   c002823f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 35 ce 01 00       	call   c0027848 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 9e c7 01 00       	call   c00271cb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 fe d7 01 00       	call   c002823f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 e7 cd 01 00       	call   c0027848 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 4d c7 01 00       	call   c00271cb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 ad d7 01 00       	call   c002823f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 96 cd 01 00       	call   c0027848 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 05 c7 01 00       	call   c00271cb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 de c6 01 00       	call   c00271cb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 3c cd 01 00       	call   c0027848 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 f8 d5 01 00       	call   c002811b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 87 c6 01 00       	call   c00271cb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 e5 cc 01 00       	call   c0027848 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 a1 d5 01 00       	call   c002811b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 2f c6 01 00       	call   c00271cb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 8d cc 01 00       	call   c0027848 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 49 d5 01 00       	call   c002811b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 d7 c5 01 00       	call   c00271cb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 35 cc 01 00       	call   c0027848 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 f1 d4 01 00       	call   c002811b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 7f c5 01 00       	call   c00271cb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 dd cb 01 00       	call   c0027848 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 99 d4 01 00       	call   c002811b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 2d c5 01 00       	call   c00271cb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 8b cb 01 00       	call   c0027848 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 47 d4 01 00       	call   c002811b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 5b bd 01 00       	call   c0026b60 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 32 d4 01 00       	call   c002823f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 1b ca 01 00       	call   c0027848 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 02 d4 01 00       	call   c002823f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 74 c3 01 00       	call   c00271cb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd64fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 a8 d3 01 00       	call   c002823f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 91 c9 01 00       	call   c0027848 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 fc c2 01 00       	call   c00271cb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 49 d3 01 00       	call   c002823f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 32 c9 01 00       	call   c0027848 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 9d c2 01 00       	call   c00271cb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ea d2 01 00       	call   c002823f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 d3 c8 01 00       	call   c0027848 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 3e c2 01 00       	call   c00271cb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 8b d2 01 00       	call   c002823f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 74 c8 01 00       	call   c0027848 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 df c1 01 00       	call   c00271cb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 2c d2 01 00       	call   c002823f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 15 c8 01 00       	call   c0027848 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 80 c1 01 00       	call   c00271cb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 cd d1 01 00       	call   c002823f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 b6 c7 01 00       	call   c0027848 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 21 c1 01 00       	call   c00271cb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 6e d1 01 00       	call   c002823f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 57 c7 01 00       	call   c0027848 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 c2 c0 01 00       	call   c00271cb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 0f d1 01 00       	call   c002823f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 f8 c6 01 00       	call   c0027848 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 63 c0 01 00       	call   c00271cb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 6d b9 01 00       	call   c0026b60 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 44 d0 01 00       	call   c002823f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 2d c6 01 00       	call   c0027848 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 14 d0 01 00       	call   c002823f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 86 bf 01 00       	call   c00271cb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd64e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 b9 cf 01 00       	call   c002823f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 a2 c5 01 00       	call   c0027848 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 0d bf 01 00       	call   c00271cb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 59 cf 01 00       	call   c002823f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 42 c5 01 00       	call   c0027848 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 ad be 01 00       	call   c00271cb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 f9 ce 01 00       	call   c002823f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 e2 c4 01 00       	call   c0027848 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 4d be 01 00       	call   c00271cb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 99 ce 01 00       	call   c002823f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 82 c4 01 00       	call   c0027848 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 ed bd 01 00       	call   c00271cb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 39 ce 01 00       	call   c002823f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 22 c4 01 00       	call   c0027848 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 8d bd 01 00       	call   c00271cb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 d9 cd 01 00       	call   c002823f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 c2 c3 01 00       	call   c0027848 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 2d bd 01 00       	call   c00271cb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 79 cd 01 00       	call   c002823f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 62 c3 01 00       	call   c0027848 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 cd bc 01 00       	call   c00271cb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 19 cd 01 00       	call   c002823f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 02 c3 01 00       	call   c0027848 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 6d bc 01 00       	call   c00271cb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd64c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 12 bc 01 00       	call   c00271cb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 6f c2 01 00       	call   c0027848 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 2b cb 01 00       	call   c002811b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 b5 bb 01 00       	call   c00271cb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 12 c2 01 00       	call   c0027848 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ce ca 01 00       	call   c002811b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 58 bb 01 00       	call   c00271cb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 b5 c1 01 00       	call   c0027848 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 71 ca 01 00       	call   c002811b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 fb ba 01 00       	call   c00271cb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 58 c1 01 00       	call   c0027848 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 14 ca 01 00       	call   c002811b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 9e ba 01 00       	call   c00271cb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 fb c0 01 00       	call   c0027848 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 b7 c9 01 00       	call   c002811b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 41 ba 01 00       	call   c00271cb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 9e c0 01 00       	call   c0027848 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 5a c9 01 00       	call   c002811b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 e4 b9 01 00       	call   c00271cb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 41 c0 01 00       	call   c0027848 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 fd c8 01 00       	call   c002811b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 87 b9 01 00       	call   c00271cb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 e4 bf 01 00       	call   c0027848 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 a0 c8 01 00       	call   c002811b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 9c bf 01 00       	call   c0027848 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 14 ca 01 00       	jmp    c00282d0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 7e c6 01 00       	call   c0028117 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 3c c6 01 00       	call   c00280f9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 d3 c3 01 00       	call   c0027eab <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 d4 b6 01 00       	call   c00271cb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 a3 c3 01 00       	call   c0027eab <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 0a c0 01 00       	call   c0027b2c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 a9 c5 01 00       	call   c00280f9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 ac c5 01 00       	call   c0028117 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 7f c5 01 00       	call   c0028117 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 78 bf 01 00       	call   c0027b2c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 02 c7 01 00       	call   c00282d0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 dd c6 01 00       	call   c00282d0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 af c2 01 00       	call   c0027eab <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 06 bc 01 00       	call   c002781c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 e5 c4 01 00       	call   c0028117 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 7e b5 01 00       	call   c00271cb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 a2 bb 01 00       	call   c002781c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 44 c6 01 00       	call   c00282d0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 7c be 01 00       	call   c0027b2c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 f9 b4 01 00       	call   c00271cb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 25 c1 01 00       	call   c0027eab <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 25 b4 01 00       	call   c00271cb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 05 b4 01 00       	call   c00271cb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 d5 c0 01 00       	call   c0027eab <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 25 c3 01 00       	call   c0028115 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 04 ba 01 00       	call   c002781c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 86 c4 01 00       	call   c00282b0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 ad c2 01 00       	call   c00280f9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 ab b9 01 00       	call   c002781c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 29 c0 01 00       	call   c0027eab <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 ac b9 01 00       	call   c0027848 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 fe bf 01 00       	call   c0027eab <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 65 bc 01 00       	call   c0027b2c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 e4 b2 01 00       	call   c00271cb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ae bf 01 00       	call   c0027eab <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 fa c1 01 00       	call   c0028117 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 ef b8 01 00       	call   c0027848 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 c1 b8 01 00       	call   c0027848 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 fa be 01 00       	call   c0027eab <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 5e bb 01 00       	call   c0027b2c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 26 bb 01 00       	call   c0027b2c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 a5 b1 01 00       	call   c00271cb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 92 c2 01 00       	call   c00282d0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 64 be 01 00       	call   c0027eab <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 bb b7 01 00       	call   c002781c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 9a c0 01 00       	call   c0028117 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 32 b1 01 00       	call   c00271cb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 56 b7 01 00       	call   c002781c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 f8 c1 01 00       	call   c00282d0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 b9 bf 01 00       	call   c0028117 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 77 bf 01 00       	call   c00280f9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 0e bd 01 00       	call   c0027eab <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 0f b0 01 00       	call   c00271cb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 de bc 01 00       	call   c0027eab <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 45 b9 01 00       	call   c0027b2c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 e4 be 01 00       	call   c00280f9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 e7 be 01 00       	call   c0028117 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 ba be 01 00       	call   c0028117 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 b3 b8 01 00       	call   c0027b2c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 3d c0 01 00       	call   c00282d0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 18 c0 01 00       	call   c00282d0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ea bb 01 00       	call   c0027eab <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 41 b5 01 00       	call   c002781c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 20 be 01 00       	call   c0028117 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 b9 ae 01 00       	call   c00271cb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 dd b4 01 00       	call   c002781c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 7f bf 01 00       	call   c00282d0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 b7 b7 01 00       	call   c0027b2c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 34 ae 01 00       	call   c00271cb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 5f ba 01 00       	call   c0027eab <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 5f ad 01 00       	call   c00271cb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 3f ad 01 00       	call   c00271cb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 0f ba 01 00       	call   c0027eab <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 5f bc 01 00       	call   c0028115 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 3d b3 01 00       	call   c002781c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 bf bd 01 00       	call   c00282b0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 e6 bb 01 00       	call   c00280f9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 e3 b2 01 00       	call   c002781c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 61 b9 01 00       	call   c0027eab <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 e4 b2 01 00       	call   c0027848 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 36 b9 01 00       	call   c0027eab <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 9d b5 01 00       	call   c0027b2c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 1c ac 01 00       	call   c00271cb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 e6 b8 01 00       	call   c0027eab <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 32 bb 01 00       	call   c0028117 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 27 b2 01 00       	call   c0027848 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 f9 b1 01 00       	call   c0027848 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 30 b8 01 00       	call   c0027eab <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 94 b4 01 00       	call   c0027b2c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 61 b4 01 00       	call   c0027b2c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 e0 aa 01 00       	call   c00271cb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 cd bb 01 00       	call   c00282d0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 9f b7 01 00       	call   c0027eab <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 f6 b0 01 00       	call   c002781c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 d5 b9 01 00       	call   c0028117 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 6d aa 01 00       	call   c00271cb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 91 b0 01 00       	call   c002781c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 33 bb 01 00       	call   c00282d0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 f4 b8 01 00       	call   c0028117 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 b2 b8 01 00       	call   c00280f9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 49 b6 01 00       	call   c0027eab <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 4a a9 01 00       	call   c00271cb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 19 b6 01 00       	call   c0027eab <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 80 b2 01 00       	call   c0027b2c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 1f b8 01 00       	call   c00280f9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 22 b8 01 00       	call   c0028117 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 f5 b7 01 00       	call   c0028117 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ee b1 01 00       	call   c0027b2c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 78 b9 01 00       	call   c00282d0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 53 b9 01 00       	call   c00282d0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 25 b5 01 00       	call   c0027eab <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 7c ae 01 00       	call   c002781c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 5b b7 01 00       	call   c0028117 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 f4 a7 01 00       	call   c00271cb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 18 ae 01 00       	call   c002781c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 ba b8 01 00       	call   c00282d0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 f2 b0 01 00       	call   c0027b2c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 6f a7 01 00       	call   c00271cb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 9a b3 01 00       	call   c0027eab <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 9a a6 01 00       	call   c00271cb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 7a a6 01 00       	call   c00271cb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 4a b3 01 00       	call   c0027eab <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 9a b5 01 00       	call   c0028115 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 78 ac 01 00       	call   c002781c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 fa b6 01 00       	call   c00282b0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 21 b5 01 00       	call   c00280f9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 1e ac 01 00       	call   c002781c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 9c b2 01 00       	call   c0027eab <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 1f ac 01 00       	call   c0027848 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 71 b2 01 00       	call   c0027eab <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 d8 ae 01 00       	call   c0027b2c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 57 a5 01 00       	call   c00271cb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 21 b2 01 00       	call   c0027eab <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 6d b4 01 00       	call   c0028117 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 62 ab 01 00       	call   c0027848 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 34 ab 01 00       	call   c0027848 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 6b b1 01 00       	call   c0027eab <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 cf ad 01 00       	call   c0027b2c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 9c ad 01 00       	call   c0027b2c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 1b a4 01 00       	call   c00271cb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 08 b5 01 00       	call   c00282d0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 da b0 01 00       	call   c0027eab <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 31 aa 01 00       	call   c002781c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 10 b3 01 00       	call   c0028117 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 a8 a3 01 00       	call   c00271cb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 cc a9 01 00       	call   c002781c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 6e b4 01 00       	call   c00282d0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 2f b2 01 00       	call   c0028117 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 ed b1 01 00       	call   c00280f9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 84 af 01 00       	call   c0027eab <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 85 a2 01 00       	call   c00271cb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 54 af 01 00       	call   c0027eab <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 bb ab 01 00       	call   c0027b2c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 5a b1 01 00       	call   c00280f9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 5d b1 01 00       	call   c0028117 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 30 b1 01 00       	call   c0028117 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 29 ab 01 00       	call   c0027b2c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 b3 b2 01 00       	call   c00282d0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 8e b2 01 00       	call   c00282d0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 60 ae 01 00       	call   c0027eab <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 b7 a7 01 00       	call   c002781c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 96 b0 01 00       	call   c0028117 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 2f a1 01 00       	call   c00271cb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 53 a7 01 00       	call   c002781c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 f5 b1 01 00       	call   c00282d0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 2d aa 01 00       	call   c0027b2c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 aa a0 01 00       	call   c00271cb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 d5 ac 01 00       	call   c0027eab <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 d5 9f 01 00       	call   c00271cb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 b5 9f 01 00       	call   c00271cb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 85 ac 01 00       	call   c0027eab <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 d5 ae 01 00       	call   c0028115 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 b3 a5 01 00       	call   c002781c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 35 b0 01 00       	call   c00282b0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 5c ae 01 00       	call   c00280f9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 59 a5 01 00       	call   c002781c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 d7 ab 01 00       	call   c0027eab <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 5a a5 01 00       	call   c0027848 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 ac ab 01 00       	call   c0027eab <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 13 a8 01 00       	call   c0027b2c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 92 9e 01 00       	call   c00271cb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 5c ab 01 00       	call   c0027eab <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 a8 ad 01 00       	call   c0028117 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 9d a4 01 00       	call   c0027848 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 6f a4 01 00       	call   c0027848 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 a6 aa 01 00       	call   c0027eab <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 0a a7 01 00       	call   c0027b2c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 d7 a6 01 00       	call   c0027b2c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 56 9d 01 00       	call   c00271cb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 43 ae 01 00       	call   c00282d0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 15 aa 01 00       	call   c0027eab <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 6c a3 01 00       	call   c002781c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 4b ac 01 00       	call   c0028117 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 e3 9c 01 00       	call   c00271cb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 07 a3 01 00       	call   c002781c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 a9 ad 01 00       	call   c00282d0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 67 ab 01 00       	call   c0028117 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 25 ab 01 00       	call   c00280f9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 bc a8 01 00       	call   c0027eab <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 bd 9b 01 00       	call   c00271cb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 8c a8 01 00       	call   c0027eab <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 f3 a4 01 00       	call   c0027b2c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 92 aa 01 00       	call   c00280f9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 95 aa 01 00       	call   c0028117 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 68 aa 01 00       	call   c0028117 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 61 a4 01 00       	call   c0027b2c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 eb ab 01 00       	call   c00282d0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 c2 ab 01 00       	call   c00282d0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 94 a7 01 00       	call   c0027eab <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 eb a0 01 00       	call   c002781c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ca a9 01 00       	call   c0028117 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 63 9a 01 00       	call   c00271cb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 8b a0 01 00       	call   c002781c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 2d ab 01 00       	call   c00282d0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 66 a3 01 00       	call   c0027b2c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 e3 99 01 00       	call   c00271cb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 0f a6 01 00       	call   c0027eab <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 0f 99 01 00       	call   c00271cb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 ef 98 01 00       	call   c00271cb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 bf a5 01 00       	call   c0027eab <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 f3 a7 01 00       	call   c00280f9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ea 9e 01 00       	call   c002781c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 6c a9 01 00       	call   c00282b0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 93 a7 01 00       	call   c00280f9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 8d 9e 01 00       	call   c002781c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 0b a5 01 00       	call   c0027eab <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 8e 9e 01 00       	call   c0027848 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 e0 a4 01 00       	call   c0027eab <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 47 a1 01 00       	call   c0027b2c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 c6 97 01 00       	call   c00271cb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 90 a4 01 00       	call   c0027eab <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 dc a6 01 00       	call   c0028117 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 d1 9d 01 00       	call   c0027848 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 a3 9d 01 00       	call   c0027848 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 e7 a3 01 00       	call   c0027eab <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 4e a0 01 00       	call   c0027b2c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 37 9d 01 00       	call   c0027848 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 f3 a5 01 00       	call   c002811b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 e6 9f 01 00       	call   c0027b2c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 65 96 01 00       	call   c00271cb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 52 a7 01 00       	call   c00282d0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 24 a3 01 00       	call   c0027eab <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 7b 9c 01 00       	call   c002781c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 5a a5 01 00       	call   c0028117 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 f2 95 01 00       	call   c00271cb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 1a 9c 01 00       	call   c002781c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 bc a6 01 00       	call   c00282d0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd649c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 35 19 00 00       	call   c000f5ac <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 6f a3 01 00       	call   c0028117 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 2d a3 01 00       	call   c00280f9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 19 a3 01 00       	call   c0028117 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 8b a0 01 00       	call   c0027eab <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 09 9a 01 00       	call   c0027848 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 5b a0 01 00       	call   c0027eab <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 61 93 01 00       	call   c00271cb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 30 a0 01 00       	call   c0027eab <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 80 a2 01 00       	call   c0028115 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 61 99 01 00       	call   c002781c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 e3 a3 01 00       	call   c00282b0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 0a a2 01 00       	call   c00280f9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 09 99 01 00       	call   c002781c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 87 9f 01 00       	call   c0027eab <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 0a 99 01 00       	call   c0027848 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 5c 9f 01 00       	call   c0027eab <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 c3 9b 01 00       	call   c0027b2c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 42 92 01 00       	call   c00271cb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 6a 9b 01 00       	call   c0027b2c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 f0 91 01 00       	call   c00271cb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 de a2 01 00       	call   c00282d0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 b0 9e 01 00       	call   c0027eab <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 07 98 01 00       	call   c002781c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 e6 a0 01 00       	call   c0028117 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 7f 91 01 00       	call   c00271cb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 ab 97 01 00       	call   c002781c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 4d a2 01 00       	call   c00282d0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 fa 9d 01 00       	call   c0027eab <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 77 97 01 00       	call   c0027848 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 c8 9d 01 00       	call   c0027eab <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ce 90 01 00       	call   c00271cb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 9e 9d 01 00       	call   c0027eab <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 f2 9f 01 00       	call   c0028119 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 cb 96 01 00       	call   c002781c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 4d a1 01 00       	call   c00282b0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 74 9f 01 00       	call   c00280f9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 72 96 01 00       	call   c002781c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 f0 9c 01 00       	call   c0027eab <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 73 96 01 00       	call   c0027848 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 c5 9c 01 00       	call   c0027eab <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 2c 99 01 00       	call   c0027b2c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 ab 8f 01 00       	call   c00271cb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 c7 98 01 00       	call   c0027b2c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 46 8f 01 00       	call   c00271cb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 34 a0 01 00       	call   c00282d0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 06 9c 01 00       	call   c0027eab <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 5d 95 01 00       	call   c002781c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 3c 9e 01 00       	call   c0028117 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 d5 8e 01 00       	call   c00271cb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 01 95 01 00       	call   c002781c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 72 9b 01 00       	call   c0027eab <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 78 8e 01 00       	call   c00271cb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e 9c 02 c0       	mov    eax,0xc0029c7e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f 9c 02 c0       	mov    eax,0xc0029c8f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 77 11 00 00       	call   c000f5ac <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 79 11 00 00       	call   c000f5cc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f3 10 00 00       	jmp    c000f59c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0e 11 00 00       	jmp    c000f5bc <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c000e4e3:	ff 05 a4 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca4
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d a0 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030ca0,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c000e50d:	e8 e3 f3 00 00       	call   c001d8f5 <schedule()>
c000e512:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000e517:	48                   	dec    eax
c000e518:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 f0 d8 02 c0       	mov    eax,ds:0xc002d8f0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 9c 02 c0       	push   0xc0029cc6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 88 d7 02 c0       	mov    eax,0xc002d788
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf 9c 02 c0       	push   0xc0029ccf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 44 66 02 c0       	mov    eax,0xc0026644
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 9c 02 c0       	push   0xc0029cd9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 78 63 02 c0       	mov    eax,0xc0026378
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 9c 02 c0       	push   0xc0029ce2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 44 67 02 c0       	mov    eax,0xc0026744
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec 9c 02 c0       	push   0xc0029cec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 c4 64 02 c0       	mov    eax,0xc00264c4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 9c 02 c0       	push   0xc0029cf5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 8c d7 02 c0       	mov    eax,0xc002d78c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 9d 02 c0       	push   0xc0029d02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 8d d7 02 c0       	mov    eax,0xc002d78d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 53 55 00 00       	call   c0013bc0 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f 9d 02 c0       	push   0xc0029d0f
c000e69e:	e8 53 0f 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ed 0e 00 00       	call   c000f59c <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c000e6be:	68 28 9d 02 c0       	push   0xc0029d28
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 0d ee 00 00       	call   c001d4d8 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 f0 ef 00 00       	call   c001d6d0 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 b4 e0 01 c0       	push   0xc001e0b4
c000e6e9:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c000e6ef:	e8 dc ef 00 00       	call   c001d6d0 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 88 0c 03 c0       	mov    ds:0xc0030c88,eax
c000e6fc:	68 0c 9e 02 c0       	push   0xc0029e0c
c000e701:	c6 05 8d d7 02 c0 01 	mov    BYTE PTR ds:0xc002d78d,0x1
c000e708:	e8 e9 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 4d fd 00 00       	call   c001e45f <Vm::initialise8086()>
c000e712:	e8 71 42 00 00       	call   c0012988 <Fs::initVFS()>
c000e717:	c7 04 24 35 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d35
c000e71e:	e8 d3 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e723:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 0c 9e 02 c0       	push   0xc0029e0c
c000e742:	e8 af 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e747:	e8 17 d6 00 00       	call   c001bd63 <Sys::loadSyscalls()>
c000e74c:	e8 0f b5 00 00       	call   c0019c60 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f 9d 02 c0       	push   0xc0029d4f
c000e75b:	68 58 9d 02 c0       	push   0xc0029d58
c000e760:	e8 c0 c3 00 00       	call   c001ab25 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 0b 4d 00 00       	call   c0013478 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 30 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e30
c000e774:	e8 7d 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 f6 53 00 00       	call   c0013b80 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d60
c000e791:	e8 60 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e796:	e8 2d b0 00 00       	call   c00197c8 <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d7a
c000e7a2:	e8 4f 0e 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b 9d 02 c0       	push   0xc0029d8b
c000e7b6:	e8 78 e7 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 9d e9 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 fa f2 00 00       	call   c001dacb <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 9d 02 c0       	push   0xc0029da7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 4f 54 00 00       	call   c0013c3a <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 7c 9e 02 c0       	mov    edx,0xc0029e7c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 a1 d7 02 c0 04 	test   BYTE PTR ds:0xc002d7a1,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 87 79 01 00       	call   c0026306 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 a0 9d 00 00       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 79 9d 00 00       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 57 9d 00 00       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 35 9d 00 00       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 a0 d7 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d7a0,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 43 9c 00 00       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 1e 9c 00 00       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 f1 77 01 00       	call   c00262c0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 ae 77 01 00       	call   c00262a0 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 3a 9c 00 00       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 b0 9d 02 c0       	push   0xc0029db0
c000eb62:	e8 02 b2 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 b6 9d 02 c0       	push   0xc0029db6
c000eb9a:	e8 ca b1 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 50 9e 02 c0       	push   0xc0029e50
c000ebf0:	e8 01 0a 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 a0 d7 02 c0 04 	test   BYTE PTR ds:0xc002d7a0,0x4
c000ec03:	0f 94 05 c0 c6 02 c0 	sete   BYTE PTR ds:0xc002c6c0
c000ec0a:	e8 8d 09 00 00       	call   c000f59c <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 b5 8d 00 00       	call   c00179ce <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 0e 4e 00 00       	call   c0013a36 <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 60 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d60
c000ec41:	e8 b0 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 4a 09 00 00       	call   c000f59c <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 b6 9b 00 00       	call   c0018812 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 cb 4d 00 00       	call   c0013a36 <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 47 53 00 00       	call   c0013fce <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 9b 4d 00 00       	call   c0013a36 <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 bc 9d 02 c0       	push   0xc0029dbc
c000ecb8:	e8 39 09 00 00       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 29 eb 00 00       	call   c001d7f2 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 d7 9d 02 c0       	push   0xc0029dd7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 e6 38 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 e8 9d 02 c0       	push   0xc0029de8
c000ed34:	e8 30 b0 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 f5 9d 02 c0       	push   0xc0029df5
c000ed49:	e8 1b b0 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 ff 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dff
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 04 b0 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 92 d7 02 c0       	mov    ds:0xc002d792,eax
c000ee21:	66 89 15 90 d7 02 c0 	mov    WORD PTR ds:0xc002d790,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000ef38:	48                   	dec    eax
c000ef39:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 c1 93 01 00       	call   c0028350 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 b8 93 01 00       	call   c0028350 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 98 d7 02 c0 ff 07 	mov    WORD PTR ds:0xc002d798,0x7ff
c000f085:	a3 9a d7 02 c0       	mov    ds:0xc002d79a,eax
c000f08a:	0f 01 1d 98 d7 02 c0 	lidtd  ds:0xc002d798
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c000f37c:	e8 25 27 00 00       	call   c0011aa6 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0d 02 00 00       	call   c000f59c <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 6d 17 00 00       	call   c0010b0c <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 9e 17 00 00       	call   c0010b4c <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 5c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c55c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 5c c5 02 c0       	mov    eax,ds:0xc002c55c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 a0 9e 02 c0       	push   0xc0029ea0
c000f455:	e8 a3 31 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 5c c5 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c55c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c000f481:	8b 2d 5c c5 02 c0    	mov    ebp,DWORD PTR ds:0xc002c55c
c000f487:	e8 b4 04 00 00       	call   c000f940 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 e9 24 00 00       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 5c c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c55c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 d0 9e 02 c0       	push   0xc0029ed0
c000f50d:	e8 57 a8 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 d5 9e 02 c0       	push   0xc0029ed5
c000f523:	e8 41 a8 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000f543:	48                   	dec    eax
c000f544:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	68 01 08 00 00       	push   0x801
c000f55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55e:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c000f564:	e8 3d 25 00 00       	call   c0011aa6 <VAS::allocatePages(int, int)>
c000f569:	83 c4 1c             	add    esp,0x1c
c000f56c:	c3                   	ret    

c000f56d <liballoc_free(void*, int)>:
c000f56d:	83 ec 14             	sub    esp,0x14
c000f570:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f574:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c000f57a:	e8 af 21 00 00       	call   c001172e <VAS::freeAllocatedPages(unsigned long)>
c000f57f:	b8 00 00 00 00       	mov    eax,0x0
c000f584:	83 c4 1c             	add    esp,0x1c
c000f587:	c3                   	ret    

c000f588 <realloc>:
c000f588:	83 ec 14             	sub    esp,0x14
c000f58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f593:	e8 94 20 ff ff       	call   c000162c <dlrealloc>
c000f598:	83 c4 1c             	add    esp,0x1c
c000f59b:	c3                   	ret    

c000f59c <malloc>:
c000f59c:	83 ec 18             	sub    esp,0x18
c000f59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a3:	e8 47 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a8:	83 c4 1c             	add    esp,0x1c
c000f5ab:	c3                   	ret    

c000f5ac <free>:
c000f5ac:	83 ec 18             	sub    esp,0x18
c000f5af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b3:	e8 dc 17 ff ff       	call   c0000d94 <dlfree>
c000f5b8:	83 c4 1c             	add    esp,0x1c
c000f5bb:	c3                   	ret    

c000f5bc <rfree>:
c000f5bc:	83 ec 18             	sub    esp,0x18
c000f5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c3:	e8 cc 17 ff ff       	call   c0000d94 <dlfree>
c000f5c8:	83 c4 1c             	add    esp,0x1c
c000f5cb:	c3                   	ret    

c000f5cc <calloc>:
c000f5cc:	56                   	push   esi
c000f5cd:	53                   	push   ebx
c000f5ce:	83 ec 10             	sub    esp,0x10
c000f5d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5da:	53                   	push   ebx
c000f5db:	e8 bc ff ff ff       	call   c000f59c <malloc>
c000f5e0:	89 c6                	mov    esi,eax
c000f5e2:	83 c4 0c             	add    esp,0xc
c000f5e5:	53                   	push   ebx
c000f5e6:	6a 00                	push   0x0
c000f5e8:	50                   	push   eax
c000f5e9:	e8 62 11 ff ff       	call   c0000750 <memset>
c000f5ee:	89 f0                	mov    eax,esi
c000f5f0:	83 c4 14             	add    esp,0x14
c000f5f3:	5b                   	pop    ebx
c000f5f4:	5e                   	pop    esi
c000f5f5:	c3                   	ret    

c000f5f6 <Krnl::setBootMessage(char const*)>:
c000f5f6:	57                   	push   edi
c000f5f7:	56                   	push   esi
c000f5f8:	53                   	push   ebx
c000f5f9:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5ff:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f606:	68 9e 00 00 00       	push   0x9e
c000f60b:	6a 00                	push   0x0
c000f60d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f611:	56                   	push   esi
c000f612:	e8 39 11 ff ff       	call   c0000750 <memset>
c000f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f61a:	e8 4d 11 ff ff       	call   c000076c <strlen>
c000f61f:	ba 50 00 00 00       	mov    edx,0x50
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	29 c2                	sub    edx,eax
c000f629:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62d:	d1 ea                	shr    edx,1
c000f62f:	84 c0                	test   al,al
c000f631:	74 19                	je     c000f64c <Krnl::setBootMessage(char const*)+0x56>
c000f633:	01 d2                	add    edx,edx
c000f635:	43                   	inc    ebx
c000f636:	01 f2                	add    edx,esi
c000f638:	80 cc 0f             	or     ah,0xf
c000f63b:	83 c2 02             	add    edx,0x2
c000f63e:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f642:	43                   	inc    ebx
c000f643:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f648:	84 c0                	test   al,al
c000f64a:	75 ec                	jne    c000f638 <Krnl::setBootMessage(char const*)+0x42>
c000f64c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f651:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f658:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65e:	5b                   	pop    ebx
c000f65f:	5e                   	pop    esi
c000f660:	5f                   	pop    edi
c000f661:	c3                   	ret    

c000f662 <kernel_main>:
c000f662:	57                   	push   edi
c000f663:	bf f9 03 00 00       	mov    edi,0x3f9
c000f668:	56                   	push   esi
c000f669:	89 fa                	mov    edx,edi
c000f66b:	53                   	push   ebx
c000f66c:	31 f6                	xor    esi,esi
c000f66e:	83 ec 2c             	sub    esp,0x2c
c000f671:	89 f0                	mov    eax,esi
c000f673:	ee                   	out    dx,al
c000f674:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f679:	b0 80                	mov    al,0x80
c000f67b:	89 da                	mov    edx,ebx
c000f67d:	ee                   	out    dx,al
c000f67e:	b1 03                	mov    cl,0x3
c000f680:	ba f8 03 00 00       	mov    edx,0x3f8
c000f685:	88 c8                	mov    al,cl
c000f687:	ee                   	out    dx,al
c000f688:	89 f0                	mov    eax,esi
c000f68a:	89 fa                	mov    edx,edi
c000f68c:	ee                   	out    dx,al
c000f68d:	88 c8                	mov    al,cl
c000f68f:	89 da                	mov    edx,ebx
c000f691:	ee                   	out    dx,al
c000f692:	b0 c7                	mov    al,0xc7
c000f694:	ba fa 03 00 00       	mov    edx,0x3fa
c000f699:	ee                   	out    dx,al
c000f69a:	b0 0b                	mov    al,0xb
c000f69c:	ba fc 03 00 00       	mov    edx,0x3fc
c000f6a1:	ee                   	out    dx,al
c000f6a2:	68 dc 9e 02 c0       	push   0xc0029edc
c000f6a7:	e8 51 2f 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000f6ac:	e8 5d 09 00 00       	call   c001000e <installVgaTextImplementation()>
c000f6b1:	0f b6 05 60 c5 02 c0 	movzx  eax,BYTE PTR ds:0xc002c560
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	84 c0                	test   al,al
c000f6bd:	74 6c                	je     c000f72b <kernel_main+0xc9>
c000f6bf:	31 db                	xor    ebx,ebx
c000f6c1:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c6:	be 05 00 00 00       	mov    esi,0x5
c000f6cb:	31 c9                	xor    ecx,ecx
c000f6cd:	eb 2a                	jmp    c000f6f9 <kernel_main+0x97>
c000f6cf:	3c 0d                	cmp    al,0xd
c000f6d1:	74 1a                	je     c000f6ed <kernel_main+0x8b>
c000f6d3:	3c 0a                	cmp    al,0xa
c000f6d5:	74 40                	je     c000f717 <kernel_main+0xb5>
c000f6d7:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6da:	80 cc 0e             	or     ah,0xe
c000f6dd:	c1 e2 04             	shl    edx,0x4
c000f6e0:	01 ca                	add    edx,ecx
c000f6e2:	41                   	inc    ecx
c000f6e3:	01 fa                	add    edx,edi
c000f6e5:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ed:	43                   	inc    ebx
c000f6ee:	0f b6 83 60 c5 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3aa0]
c000f6f5:	84 c0                	test   al,al
c000f6f7:	74 32                	je     c000f72b <kernel_main+0xc9>
c000f6f9:	80 b9 96 c5 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3a6a],0xdb
c000f700:	75 cd                	jne    c000f6cf <kernel_main+0x6d>
c000f702:	0f b6 91 95 c5 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3a6b]
c000f709:	83 e2 fe             	and    edx,0xfffffffe
c000f70c:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f712:	75 bb                	jne    c000f6cf <kernel_main+0x6d>
c000f714:	47                   	inc    edi
c000f715:	eb b8                	jmp    c000f6cf <kernel_main+0x6d>
c000f717:	43                   	inc    ebx
c000f718:	46                   	inc    esi
c000f719:	31 c9                	xor    ecx,ecx
c000f71b:	0f b6 83 60 c5 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3aa0]
c000f722:	bf 0a 00 00 00       	mov    edi,0xa
c000f727:	84 c0                	test   al,al
c000f729:	75 ce                	jne    c000f6f9 <kernel_main+0x97>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 f4 9e 02 c0       	push   0xc0029ef4
c000f733:	e8 be fe ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c000f738:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73d:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c000f742:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f747:	05 ff 0f 00 00       	add    eax,0xfff
c000f74c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f751:	89 04 24             	mov    DWORD PTR [esp],eax
c000f754:	e8 49 03 00 00       	call   c000faa2 <Phys::physicalMemorySetup(unsigned int)>
c000f759:	e8 26 1c 00 00       	call   c0011384 <Virt::virtualMemorySetup()>
c000f75e:	58                   	pop    eax
c000f75f:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f763:	53                   	push   ebx
c000f764:	e8 ed 1d 00 00       	call   c0011556 <VAS::VAS()>
c000f769:	89 1d f0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8f0,ebx
c000f76f:	e8 ac 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f774:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f77b:	e8 1c fe ff ff       	call   c000f59c <malloc>
c000f780:	89 04 24             	mov    DWORD PTR [esp],eax
c000f783:	89 c6                	mov    esi,eax
c000f785:	e8 4c f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f78a:	6a 00                	push   0x0
c000f78c:	89 35 88 d7 02 c0    	mov    DWORD PTR ds:0xc002d788,esi
c000f792:	6a 00                	push   0x0
c000f794:	6a 00                	push   0x0
c000f796:	56                   	push   esi
c000f797:	e8 46 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f79c:	83 c4 14             	add    esp,0x14
c000f79f:	53                   	push   ebx
c000f7a0:	e8 61 20 00 00       	call   c0011806 <VAS::~VAS()>
c000f7a5:	83 c4 30             	add    esp,0x30
c000f7a8:	5b                   	pop    ebx
c000f7a9:	5e                   	pop    esi
c000f7aa:	5f                   	pop    edi
c000f7ab:	c3                   	ret    

c000f7ac <Phys::allocateDMA(unsigned long)>:
c000f7ac:	55                   	push   ebp
c000f7ad:	31 d2                	xor    edx,edx
c000f7af:	57                   	push   edi
c000f7b0:	31 ed                	xor    ebp,ebp
c000f7b2:	56                   	push   esi
c000f7b3:	31 c9                	xor    ecx,ecx
c000f7b5:	53                   	push   ebx
c000f7b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7ba:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c0:	31 c0                	xor    eax,eax
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x23>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d0                	mov    eax,edx
c000f7cf:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7d2:	39 de                	cmp    esi,ebx
c000f7d4:	74 20                	je     c000f7f6 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 d9                	mov    ecx,ebx
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x43>
c000f7de:	80 ba e0 d7 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2820],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x32>
c000f7ef:	5b                   	pop    ebx
c000f7f0:	31 c0                	xor    eax,eax
c000f7f2:	5e                   	pop    esi
c000f7f3:	5f                   	pop    edi
c000f7f4:	5d                   	pop    ebp
c000f7f5:	c3                   	ret    
c000f7f6:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f9:	89 d7                	mov    edi,edx
c000f7fb:	4f                   	dec    edi
c000f7fc:	79 03                	jns    c000f801 <Phys::allocateDMA(unsigned long)+0x55>
c000f7fe:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f801:	c1 ff 04             	sar    edi,0x4
c000f804:	89 c2                	mov    edx,eax
c000f806:	c1 fa 04             	sar    edx,0x4
c000f809:	39 fa                	cmp    edx,edi
c000f80b:	75 2f                	jne    c000f83c <Phys::allocateDMA(unsigned long)+0x90>
c000f80d:	85 db                	test   ebx,ebx
c000f80f:	74 1a                	je     c000f82b <Phys::allocateDMA(unsigned long)+0x7f>
c000f811:	be e0 d7 02 c0       	mov    esi,0xc002d7e0
c000f816:	8d 90 e0 d7 02 c0    	lea    edx,[eax-0x3ffd2820]
c000f81c:	f7 d6                	not    esi
c000f81e:	29 c6                	sub    esi,eax
c000f820:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f823:	42                   	inc    edx
c000f824:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f827:	39 d9                	cmp    ecx,ebx
c000f829:	7f f5                	jg     c000f820 <Phys::allocateDMA(unsigned long)+0x74>
c000f82b:	85 ff                	test   edi,edi
c000f82d:	74 13                	je     c000f842 <Phys::allocateDMA(unsigned long)+0x96>
c000f82f:	5b                   	pop    ebx
c000f830:	05 50 20 0c 00       	add    eax,0xc2050
c000f835:	5e                   	pop    esi
c000f836:	c1 e0 0c             	shl    eax,0xc
c000f839:	5f                   	pop    edi
c000f83a:	5d                   	pop    ebp
c000f83b:	c3                   	ret    
c000f83c:	89 ea                	mov    edx,ebp
c000f83e:	31 c9                	xor    ecx,ecx
c000f840:	eb a7                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x3d>
c000f842:	5b                   	pop    ebx
c000f843:	c1 e0 0c             	shl    eax,0xc
c000f846:	5e                   	pop    esi
c000f847:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f84c:	5f                   	pop    edi
c000f84d:	5d                   	pop    ebp
c000f84e:	c3                   	ret    

c000f84f <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f853:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f857:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85d:	c1 e9 0c             	shr    ecx,0xc
c000f860:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f865:	76 25                	jbe    c000f88c <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f867:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f86c:	c1 e8 0c             	shr    eax,0xc
c000f86f:	8d 50 10             	lea    edx,[eax+0x10]
c000f872:	85 c9                	test   ecx,ecx
c000f874:	74 15                	je     c000f88b <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f876:	8d 82 e0 d7 02 c0    	lea    eax,[edx-0x3ffd2820]
c000f87c:	8d 94 11 e0 d7 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2820]
c000f883:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f886:	40                   	inc    eax
c000f887:	39 d0                	cmp    eax,edx
c000f889:	75 f8                	jne    c000f883 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f88b:	c3                   	ret    
c000f88c:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f892:	c1 ea 0c             	shr    edx,0xc
c000f895:	eb db                	jmp    c000f872 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f897 <Phys::setPageState(unsigned long, bool)>:
c000f897:	56                   	push   esi
c000f898:	ba 01 00 00 00       	mov    edx,0x1
c000f89d:	53                   	push   ebx
c000f89e:	8b 35 a4 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6a4
c000f8a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8ac:	89 c8                	mov    eax,ecx
c000f8ae:	83 e1 07             	and    ecx,0x7
c000f8b1:	c1 e8 03             	shr    eax,0x3
c000f8b4:	d3 e3                	shl    ebx,cl
c000f8b6:	01 c6                	add    esi,eax
c000f8b8:	d3 e2                	shl    edx,cl
c000f8ba:	f7 d2                	not    edx
c000f8bc:	20 16                	and    BYTE PTR [esi],dl
c000f8be:	03 05 a4 c6 02 c0    	add    eax,DWORD PTR ds:0xc002c6a4
c000f8c4:	08 18                	or     BYTE PTR [eax],bl
c000f8c6:	5b                   	pop    ebx
c000f8c7:	5e                   	pop    esi
c000f8c8:	c3                   	ret    

c000f8c9 <Phys::getPageState(unsigned long)>:
c000f8c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8cd:	8b 15 a4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a4
c000f8d3:	89 c8                	mov    eax,ecx
c000f8d5:	83 e1 07             	and    ecx,0x7
c000f8d8:	c1 e8 03             	shr    eax,0x3
c000f8db:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8df:	d3 f8                	sar    eax,cl
c000f8e1:	83 e0 01             	and    eax,0x1
c000f8e4:	c3                   	ret    

c000f8e5 <Phys::freePage(unsigned long)>:
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 08             	sub    esp,0x8
c000f8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ed:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8f2:	76 3a                	jbe    c000f92e <Phys::freePage(unsigned long)+0x49>
c000f8f4:	c1 e8 0c             	shr    eax,0xc
c000f8f7:	50                   	push   eax
c000f8f8:	89 c3                	mov    ebx,eax
c000f8fa:	e8 ca ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f8ff:	5a                   	pop    edx
c000f900:	84 c0                	test   al,al
c000f902:	74 19                	je     c000f91d <Phys::freePage(unsigned long)+0x38>
c000f904:	83 ec 08             	sub    esp,0x8
c000f907:	ff 0d d0 d7 02 c0    	dec    DWORD PTR ds:0xc002d7d0
c000f90d:	6a 00                	push   0x0
c000f90f:	53                   	push   ebx
c000f910:	e8 82 ff ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f915:	83 c4 10             	add    esp,0x10
c000f918:	83 c4 08             	add    esp,0x8
c000f91b:	5b                   	pop    ebx
c000f91c:	c3                   	ret    
c000f91d:	c7 44 24 10 13 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f13
c000f925:	83 c4 08             	add    esp,0x8
c000f928:	5b                   	pop    ebx
c000f929:	e9 3b a4 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c000f92e:	68 00 10 00 00       	push   0x1000
c000f933:	50                   	push   eax
c000f934:	e8 16 ff ff ff       	call   c000f84f <Phys::freeDMA(unsigned long, unsigned long)>
c000f939:	59                   	pop    ecx
c000f93a:	5b                   	pop    ebx
c000f93b:	83 c4 08             	add    esp,0x8
c000f93e:	5b                   	pop    ebx
c000f93f:	c3                   	ret    

c000f940 <Phys::allocatePage()>:
c000f940:	56                   	push   esi
c000f941:	53                   	push   ebx
c000f942:	51                   	push   ecx
c000f943:	8b 35 c4 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d7c4
c000f949:	89 f3                	mov    ebx,esi
c000f94b:	eb 0a                	jmp    c000f957 <Phys::allocatePage()+0x17>
c000f94d:	89 1d c4 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c4,ebx
c000f953:	39 de                	cmp    esi,ebx
c000f955:	74 24                	je     c000f97b <Phys::allocatePage()+0x3b>
c000f957:	53                   	push   ebx
c000f958:	e8 6c ff ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f95d:	5a                   	pop    edx
c000f95e:	84 c0                	test   al,al
c000f960:	74 76                	je     c000f9d8 <Phys::allocatePage()+0x98>
c000f962:	43                   	inc    ebx
c000f963:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f969:	75 e2                	jne    c000f94d <Phys::allocatePage()+0xd>
c000f96b:	31 db                	xor    ebx,ebx
c000f96d:	c7 05 c4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7c4,0x0
c000f977:	39 de                	cmp    esi,ebx
c000f979:	75 dc                	jne    c000f957 <Phys::allocatePage()+0x17>
c000f97b:	83 ec 0c             	sub    esp,0xc
c000f97e:	68 42 9f 02 c0       	push   0xc0029f42
c000f983:	e8 75 2c 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000f988:	59                   	pop    ecx
c000f989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f98e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f991:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f997:	e8 5c 29 00 00       	call   c00122f8 <VAS::scanForEviction()>
c000f99c:	83 c4 10             	add    esp,0x10
c000f99f:	85 c0                	test   eax,eax
c000f9a1:	75 67                	jne    c000fa0a <Phys::allocatePage()+0xca>
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	68 00 10 00 00       	push   0x1000
c000f9ab:	e8 fc fd ff ff       	call   c000f7ac <Phys::allocateDMA(unsigned long)>
c000f9b0:	83 c4 10             	add    esp,0x10
c000f9b3:	85 c0                	test   eax,eax
c000f9b5:	75 53                	jne    c000fa0a <Phys::allocatePage()+0xca>
c000f9b7:	83 ec 0c             	sub    esp,0xc
c000f9ba:	68 5a 9f 02 c0       	push   0xc0029f5a
c000f9bf:	e8 a5 a3 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000f9c4:	83 c4 10             	add    esp,0x10
c000f9c7:	8b 1d c4 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7c4
c000f9cd:	53                   	push   ebx
c000f9ce:	e8 f6 fe ff ff       	call   c000f8c9 <Phys::getPageState(unsigned long)>
c000f9d3:	5a                   	pop    edx
c000f9d4:	84 c0                	test   al,al
c000f9d6:	75 8a                	jne    c000f962 <Phys::allocatePage()+0x22>
c000f9d8:	6a 01                	push   0x1
c000f9da:	53                   	push   ebx
c000f9db:	e8 b7 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000f9e0:	83 ec 0c             	sub    esp,0xc
c000f9e3:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c000f9e8:	ff 35 d4 d7 02 c0    	push   DWORD PTR ds:0xc002d7d4
c000f9ee:	40                   	inc    eax
c000f9ef:	50                   	push   eax
c000f9f0:	a3 d0 d7 02 c0       	mov    ds:0xc002d7d0,eax
c000f9f5:	68 29 9f 02 c0       	push   0xc0029f29
c000f9fa:	e8 fe 2b 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000f9ff:	a1 c4 d7 02 c0       	mov    eax,ds:0xc002d7c4
c000fa04:	83 c4 20             	add    esp,0x20
c000fa07:	c1 e0 0c             	shl    eax,0xc
c000fa0a:	5a                   	pop    edx
c000fa0b:	5b                   	pop    ebx
c000fa0c:	5e                   	pop    esi
c000fa0d:	c3                   	ret    

c000fa0e <Phys::allocateContiguousPages(int)>:
c000fa0e:	57                   	push   edi
c000fa0f:	56                   	push   esi
c000fa10:	53                   	push   ebx
c000fa11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa15:	fa                   	cli    
c000fa16:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c000fa1c:	31 db                	xor    ebx,ebx
c000fa1e:	85 db                	test   ebx,ebx
c000fa20:	75 11                	jne    c000fa33 <Phys::allocateContiguousPages(int)+0x25>
c000fa22:	e8 19 ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa27:	83 fe 01             	cmp    esi,0x1
c000fa2a:	89 c7                	mov    edi,eax
c000fa2c:	74 21                	je     c000fa4f <Phys::allocateContiguousPages(int)+0x41>
c000fa2e:	bb 01 00 00 00       	mov    ebx,0x1
c000fa33:	e8 08 ff ff ff       	call   c000f940 <Phys::allocatePage()>
c000fa38:	89 da                	mov    edx,ebx
c000fa3a:	c1 e2 0c             	shl    edx,0xc
c000fa3d:	01 fa                	add    edx,edi
c000fa3f:	39 c2                	cmp    edx,eax
c000fa41:	74 20                	je     c000fa63 <Phys::allocateContiguousPages(int)+0x55>
c000fa43:	bb 01 00 00 00       	mov    ebx,0x1
c000fa48:	89 c7                	mov    edi,eax
c000fa4a:	83 fe 01             	cmp    esi,0x1
c000fa4d:	75 e4                	jne    c000fa33 <Phys::allocateContiguousPages(int)+0x25>
c000fa4f:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000fa54:	48                   	dec    eax
c000fa55:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000fa5a:	75 01                	jne    c000fa5d <Phys::allocateContiguousPages(int)+0x4f>
c000fa5c:	fb                   	sti    
c000fa5d:	89 f8                	mov    eax,edi
c000fa5f:	5b                   	pop    ebx
c000fa60:	5e                   	pop    esi
c000fa61:	5f                   	pop    edi
c000fa62:	c3                   	ret    
c000fa63:	43                   	inc    ebx
c000fa64:	39 f3                	cmp    ebx,esi
c000fa66:	75 b6                	jne    c000fa1e <Phys::allocateContiguousPages(int)+0x10>
c000fa68:	eb e5                	jmp    c000fa4f <Phys::allocateContiguousPages(int)+0x41>

c000fa6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa70:	39 1d c8 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7c8,ebx
c000fa76:	73 06                	jae    c000fa7e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa78:	89 1d c8 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c8,ebx
c000fa7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa82:	c1 eb 0c             	shr    ebx,0xc
c000fa85:	c1 e8 0c             	shr    eax,0xc
c000fa88:	39 d8                	cmp    eax,ebx
c000fa8a:	73 13                	jae    c000fa9f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa8c:	6a 00                	push   0x0
c000fa8e:	8d 70 01             	lea    esi,[eax+0x1]
c000fa91:	50                   	push   eax
c000fa92:	e8 00 fe ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fa97:	5a                   	pop    edx
c000fa98:	89 f0                	mov    eax,esi
c000fa9a:	59                   	pop    ecx
c000fa9b:	39 f3                	cmp    ebx,esi
c000fa9d:	75 ed                	jne    c000fa8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa9f:	5b                   	pop    ebx
c000faa0:	5e                   	pop    esi
c000faa1:	c3                   	ret    

c000faa2 <Phys::physicalMemorySetup(unsigned int)>:
c000faa2:	55                   	push   ebp
c000faa3:	57                   	push   edi
c000faa4:	56                   	push   esi
c000faa5:	53                   	push   ebx
c000faa6:	31 db                	xor    ebx,ebx
c000faa8:	83 ec 40             	sub    esp,0x40
c000faab:	6a 30                	push   0x30
c000faad:	6a 00                	push   0x0
c000faaf:	68 e0 d7 02 c0       	push   0xc002d7e0
c000fab4:	e8 97 0c ff ff       	call   c0000750 <memset>
c000fab9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fabd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fac2:	05 00 10 00 00       	add    eax,0x1000
c000fac7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000facb:	5a                   	pop    edx
c000facc:	59                   	pop    ecx
c000facd:	50                   	push   eax
c000face:	68 68 9f 02 c0       	push   0xc0029f68
c000fad3:	e8 25 2b 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	83 ec 08             	sub    esp,0x8
c000fade:	6a 01                	push   0x1
c000fae0:	53                   	push   ebx
c000fae1:	43                   	inc    ebx
c000fae2:	e8 b0 fd ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000faf0:	75 e9                	jne    c000fadb <Phys::physicalMemorySetup(unsigned int)+0x39>
c000faf2:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000faf9:	66 85 c0             	test   ax,ax
c000fafc:	0f 84 b5 01 00 00    	je     c000fcb7 <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fb02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb06:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fb0c:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fb11:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000fb17:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000fb1d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000fb21:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fb25:	01 c1                	add    ecx,eax
c000fb27:	11 d3                	adc    ebx,edx
c000fb29:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb2d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb31:	31 ff                	xor    edi,edi
c000fb33:	89 d3                	mov    ebx,edx
c000fb35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb39:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb3f:	09 cb                	or     ebx,ecx
c000fb41:	0f 85 80 01 00 00    	jne    c000fcc7 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb47:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb4b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb53:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb58:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb5c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb64:	eb 49                	jmp    c000fbaf <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb6a:	83 c3 18             	add    ebx,0x18
c000fb6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb75:	39 d0                	cmp    eax,edx
c000fb77:	0f 84 4a 01 00 00    	je     c000fcc7 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb7d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb80:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb83:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb86:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb88:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb90:	01 c6                	add    esi,eax
c000fb92:	89 d5                	mov    ebp,edx
c000fb94:	11 d7                	adc    edi,edx
c000fb96:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb9a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb9e:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fba1:	31 ff                	xor    edi,edi
c000fba3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fba7:	09 cd                	or     ebp,ecx
c000fba9:	0f 85 18 01 00 00    	jne    c000fcc7 <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fbaf:	89 f1                	mov    ecx,esi
c000fbb1:	83 f1 01             	xor    ecx,0x1
c000fbb4:	09 f9                	or     ecx,edi
c000fbb6:	75 ae                	jne    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbb8:	be 00 00 08 00       	mov    esi,0x80000
c000fbbd:	89 cf                	mov    edi,ecx
c000fbbf:	39 c6                	cmp    esi,eax
c000fbc1:	19 d7                	sbb    edi,edx
c000fbc3:	0f 82 98 00 00 00    	jb     c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbc9:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fbcd:	89 cd                	mov    ebp,ecx
c000fbcf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbd7:	19 fd                	sbb    ebp,edi
c000fbd9:	0f 83 82 00 00 00    	jae    c000fc61 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbdf:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbe4:	39 f0                	cmp    eax,esi
c000fbe6:	19 f9                	sbb    ecx,edi
c000fbe8:	0f 82 03 01 00 00    	jb     c000fcf1 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbee:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbf7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbfb:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fc01:	83 d7 ff             	adc    edi,0xffffffff
c000fc04:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fc08:	31 c0                	xor    eax,eax
c000fc0a:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fc0e:	39 f2                	cmp    edx,esi
c000fc10:	89 c2                	mov    edx,eax
c000fc12:	19 fa                	sbb    edx,edi
c000fc14:	0f 83 4c ff ff ff    	jae    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc1a:	b8 00 00 08 00       	mov    eax,0x80000
c000fc1f:	83 ec 08             	sub    esp,0x8
c000fc22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc26:	50                   	push   eax
c000fc27:	e8 3e fe ff ff       	call   c000fa6a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc34:	83 c4 0c             	add    esp,0xc
c000fc37:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc3b:	03 05 d4 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d7d4
c000fc41:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc48:	a3 d4 d7 02 c0       	mov    ds:0xc002d7d4,eax
c000fc4d:	52                   	push   edx
c000fc4e:	50                   	push   eax
c000fc4f:	68 8e 9f 02 c0       	push   0xc0029f8e
c000fc54:	e8 a4 29 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c000fc59:	83 c4 10             	add    esp,0x10
c000fc5c:	e9 05 ff ff ff       	jmp    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc61:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc69:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc6d:	39 ee                	cmp    esi,ebp
c000fc6f:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc73:	0f 82 ed fe ff ff    	jb     c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc79:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc7e:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc82:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc86:	0f 83 da fe ff ff    	jae    c000fb66 <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc8c:	39 e8                	cmp    eax,ebp
c000fc8e:	89 d1                	mov    ecx,edx
c000fc90:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc94:	73 89                	jae    c000fc1f <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc9e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fca2:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fca6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcb2:	e9 68 ff ff ff       	jmp    c000fc1f <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fcb7:	83 ec 0c             	sub    esp,0xc
c000fcba:	68 80 9f 02 c0       	push   0xc0029f80
c000fcbf:	e8 a5 a0 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000fcc4:	83 c4 10             	add    esp,0x10
c000fcc7:	bb 40 01 00 00       	mov    ebx,0x140
c000fccc:	83 ec 08             	sub    esp,0x8
c000fccf:	6a 00                	push   0x0
c000fcd1:	53                   	push   ebx
c000fcd2:	43                   	inc    ebx
c000fcd3:	e8 bf fb ff ff       	call   c000f897 <Phys::setPageState(unsigned long, bool)>
c000fcd8:	ff 05 d4 d7 02 c0    	inc    DWORD PTR ds:0xc002d7d4
c000fcde:	83 c4 10             	add    esp,0x10
c000fce1:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fce7:	75 e3                	jne    c000fccc <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fce9:	83 c4 3c             	add    esp,0x3c
c000fcec:	5b                   	pop    ebx
c000fced:	5e                   	pop    esi
c000fcee:	5f                   	pop    edi
c000fcef:	5d                   	pop    ebp
c000fcf0:	c3                   	ret    
c000fcf1:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcf9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd01:	e9 e8 fe ff ff       	jmp    c000fbee <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fd06 <Pipe::isAtty()>:
c000fd06:	31 c0                	xor    eax,eax
c000fd08:	c3                   	ret    
c000fd09:	90                   	nop

c000fd0a <Pipe::~Pipe()>:
c000fd0a:	83 ec 0c             	sub    esp,0xc
c000fd0d:	ba ec 9f 02 c0       	mov    edx,0xc0029fec
c000fd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd16:	89 10                	mov    DWORD PTR [eax],edx
c000fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	50                   	push   eax
c000fd20:	e8 3f 12 00 00       	call   c0010f64 <UnixFile::~UnixFile()>
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	90                   	nop
c000fd29:	83 c4 0c             	add    esp,0xc
c000fd2c:	c3                   	ret    
c000fd2d:	90                   	nop

c000fd2e <Pipe::~Pipe()>:
c000fd2e:	83 ec 0c             	sub    esp,0xc
c000fd31:	83 ec 0c             	sub    esp,0xc
c000fd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd38:	e8 cd ff ff ff       	call   c000fd0a <Pipe::~Pipe()>
c000fd3d:	83 c4 10             	add    esp,0x10
c000fd40:	83 ec 08             	sub    esp,0x8
c000fd43:	6a 20                	push   0x20
c000fd45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd49:	e8 d7 27 00 00       	call   c0012525 <operator delete(void*, unsigned long)>
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	83 c4 0c             	add    esp,0xc
c000fd54:	c3                   	ret    
c000fd55:	90                   	nop

c000fd56 <Pipe::read(unsigned long long, void*, int*)>:
c000fd56:	55                   	push   ebp
c000fd57:	57                   	push   edi
c000fd58:	56                   	push   esi
c000fd59:	53                   	push   ebx
c000fd5a:	83 ec 1c             	sub    esp,0x1c
c000fd5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd61:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd69:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd6c:	89 c8                	mov    eax,ecx
c000fd6e:	99                   	cdq    
c000fd6f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd73:	74 24                	je     c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd75:	39 f9                	cmp    ecx,edi
c000fd77:	89 d1                	mov    ecx,edx
c000fd79:	19 f1                	sbb    ecx,esi
c000fd7b:	73 1c                	jae    c000fd99 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd7d:	fa                   	cli    
c000fd7e:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c000fd84:	e8 6c db 00 00       	call   c001d8f5 <schedule()>
c000fd89:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c000fd8e:	48                   	dec    eax
c000fd8f:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c000fd94:	75 d3                	jne    c000fd69 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd96:	fb                   	sti    
c000fd97:	eb d0                	jmp    c000fd69 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd99:	39 f8                	cmp    eax,edi
c000fd9b:	89 d1                	mov    ecx,edx
c000fd9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fda0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fda4:	19 f1                	sbb    ecx,esi
c000fda6:	73 07                	jae    c000fdaf <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fda8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fdaf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdb2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdb5:	29 f7                	sub    edi,esi
c000fdb7:	89 f8                	mov    eax,edi
c000fdb9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdbd:	99                   	cdq    
c000fdbe:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fdc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc5:	19 d0                	sbb    eax,edx
c000fdc7:	73 07                	jae    c000fdd0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fdc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fdcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdd0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdd3:	89 ea                	mov    edx,ebp
c000fdd5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdd9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdde:	74 0d                	je     c000fded <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fde0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fde3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fde7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fded:	85 d2                	test   edx,edx
c000fdef:	74 11                	je     c000fe02 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdf5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdf8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdfc:	89 d1                	mov    ecx,edx
c000fdfe:	89 c7                	mov    edi,eax
c000fe00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe05:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe08:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe0b:	99                   	cdq    
c000fe0c:	89 f7                	mov    edi,esi
c000fe0e:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe11:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe15:	c1 ff 1f             	sar    edi,0x1f
c000fe18:	57                   	push   edi
c000fe19:	56                   	push   esi
c000fe1a:	52                   	push   edx
c000fe1b:	50                   	push   eax
c000fe1c:	e8 23 69 01 00       	call   c0026744 <__umoddi3>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe27:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe2c:	75 10                	jne    c000fe3e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe2e:	83 ec 0c             	sub    esp,0xc
c000fe31:	68 aa 9f 02 c0       	push   0xc0029faa
c000fe36:	e8 2e 9f 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe45:	89 10                	mov    DWORD PTR [eax],edx
c000fe47:	83 c4 1c             	add    esp,0x1c
c000fe4a:	31 c0                	xor    eax,eax
c000fe4c:	5b                   	pop    ebx
c000fe4d:	5e                   	pop    esi
c000fe4e:	5f                   	pop    edi
c000fe4f:	5d                   	pop    ebp
c000fe50:	c3                   	ret    
c000fe51:	90                   	nop

c000fe52 <Pipe::write(unsigned long long, void*, int*)>:
c000fe52:	55                   	push   ebp
c000fe53:	57                   	push   edi
c000fe54:	56                   	push   esi
c000fe55:	53                   	push   ebx
c000fe56:	83 ec 1c             	sub    esp,0x1c
c000fe59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe61:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe64:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe68:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe6f:	89 d8                	mov    eax,ebx
c000fe71:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe74:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe78:	89 d6                	mov    esi,edx
c000fe7a:	89 d7                	mov    edi,edx
c000fe7c:	c1 ff 1f             	sar    edi,0x1f
c000fe7f:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe82:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe86:	c1 f8 1f             	sar    eax,0x1f
c000fe89:	39 f3                	cmp    ebx,esi
c000fe8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe93:	19 f8                	sbb    eax,edi
c000fe95:	b8 01 00 00 00       	mov    eax,0x1
c000fe9a:	72 6e                	jb     c000ff0a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe9c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe9f:	01 d0                	add    eax,edx
c000fea1:	99                   	cdq    
c000fea2:	f7 fb                	idiv   ebx
c000fea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea8:	29 d3                	sub    ebx,edx
c000feaa:	89 d7                	mov    edi,edx
c000feac:	89 de                	mov    esi,ebx
c000feae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000feb1:	c1 fb 1f             	sar    ebx,0x1f
c000feb4:	39 f2                	cmp    edx,esi
c000feb6:	19 d8                	sbb    eax,ebx
c000feb8:	b8 00 00 00 00       	mov    eax,0x0
c000febd:	72 04                	jb     c000fec3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000febf:	89 d0                	mov    eax,edx
c000fec1:	29 f0                	sub    eax,esi
c000fec3:	89 d3                	mov    ebx,edx
c000fec5:	29 c3                	sub    ebx,eax
c000fec7:	74 0b                	je     c000fed4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fec9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fecc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fed0:	89 d9                	mov    ecx,ebx
c000fed2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fed4:	85 c0                	test   eax,eax
c000fed6:	74 0d                	je     c000fee5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000fed8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fedc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fedf:	89 de                	mov    esi,ebx
c000fee1:	89 c1                	mov    ecx,eax
c000fee3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fee8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000feed:	75 10                	jne    c000feff <Pipe::write(unsigned long long, void*, int*)+0xad>
c000feef:	83 ec 0c             	sub    esp,0xc
c000fef2:	68 c6 9f 02 c0       	push   0xc0029fc6
c000fef7:	e8 6d 9e 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c000fefc:	83 c4 10             	add    esp,0x10
c000feff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff03:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff06:	89 08                	mov    DWORD PTR [eax],ecx
c000ff08:	31 c0                	xor    eax,eax
c000ff0a:	83 c4 1c             	add    esp,0x1c
c000ff0d:	5b                   	pop    ebx
c000ff0e:	5e                   	pop    esi
c000ff0f:	5f                   	pop    edi
c000ff10:	5d                   	pop    ebp
c000ff11:	c3                   	ret    

c000ff12 <Pipe::Pipe(int)>:
c000ff12:	83 ec 0c             	sub    esp,0xc
c000ff15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff19:	83 ec 08             	sub    esp,0x8
c000ff1c:	6a 00                	push   0x0
c000ff1e:	50                   	push   eax
c000ff1f:	e8 5e 0e 00 00       	call   c0010d82 <UnixFile::UnixFile(int)>
c000ff24:	83 c4 10             	add    esp,0x10
c000ff27:	ba ec 9f 02 c0       	mov    edx,0xc0029fec
c000ff2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff30:	89 10                	mov    DWORD PTR [eax],edx
c000ff32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff3a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff41:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff57:	83 ec 0c             	sub    esp,0xc
c000ff5a:	50                   	push   eax
c000ff5b:	e8 3c f6 ff ff       	call   c000f59c <malloc>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	89 c2                	mov    edx,eax
c000ff65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff70:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff74:	90                   	nop
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <VgaText::isAtty()>:
c000ff7a:	b0 01                	mov    al,0x1
c000ff7c:	c3                   	ret    
c000ff7d:	90                   	nop

c000ff7e <VgaText::~VgaText()>:
c000ff7e:	83 ec 0c             	sub    esp,0xc
c000ff81:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c000ff86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8a:	89 10                	mov    DWORD PTR [eax],edx
c000ff8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff90:	83 ec 0c             	sub    esp,0xc
c000ff93:	50                   	push   eax
c000ff94:	e8 cb 0f 00 00       	call   c0010f64 <UnixFile::~UnixFile()>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	90                   	nop
c000ff9d:	83 c4 0c             	add    esp,0xc
c000ffa0:	c3                   	ret    
c000ffa1:	90                   	nop

c000ffa2 <VgaText::~VgaText()>:
c000ffa2:	83 ec 0c             	sub    esp,0xc
c000ffa5:	83 ec 0c             	sub    esp,0xc
c000ffa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffac:	e8 cd ff ff ff       	call   c000ff7e <VgaText::~VgaText()>
c000ffb1:	83 c4 10             	add    esp,0x10
c000ffb4:	83 ec 08             	sub    esp,0x8
c000ffb7:	68 c4 02 00 00       	push   0x2c4
c000ffbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffc0:	e8 60 25 00 00       	call   c0012525 <operator delete(void*, unsigned long)>
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	83 c4 0c             	add    esp,0xc
c000ffcb:	c3                   	ret    

c000ffcc <VgaText::read(unsigned long long, void*, int*)>:
c000ffcc:	83 ec 10             	sub    esp,0x10
c000ffcf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffdb:	e8 e4 5a 00 00       	call   c0015ac4 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffe0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffe4:	89 02                	mov    DWORD PTR [edx],eax
c000ffe6:	31 c0                	xor    eax,eax
c000ffe8:	83 c4 1c             	add    esp,0x1c
c000ffeb:	c3                   	ret    

c000ffec <setTerminalScrollLock(bool)>:
c000ffec:	c3                   	ret    

c000ffed <addToTerminalCycle(VgaText*)>:
c000ffed:	8b 15 40 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d840
c000fff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff7:	85 d2                	test   edx,edx
c000fff9:	75 09                	jne    c0010004 <addToTerminalCycle(VgaText*)+0x17>
c000fffb:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000fffe:	a3 40 d8 02 c0       	mov    ds:0xc002d840,eax
c0010003:	c3                   	ret    
c0010004:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010007:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001000a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001000d:	c3                   	ret    

c001000e <installVgaTextImplementation()>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	6a 20                	push   0x20
c0010013:	6a 00                	push   0x0
c0010015:	68 20 d8 02 c0       	push   0xc002d820
c001001a:	e8 31 07 ff ff       	call   c0000750 <memset>
c001001f:	83 c4 1c             	add    esp,0x1c
c0010022:	c3                   	ret    

c0010023 <scrollTerminalScrollLock(int)>:
c0010023:	c3                   	ret    

c0010024 <VgaText::updateTitle()>:
c0010024:	53                   	push   ebx
c0010025:	31 c0                	xor    eax,eax
c0010027:	83 ec 58             	sub    esp,0x58
c001002a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001002e:	89 e1                	mov    ecx,esp
c0010030:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010034:	40                   	inc    eax
c0010035:	83 f8 50             	cmp    eax,0x50
c0010038:	75 f6                	jne    c0010030 <VgaText::updateTitle()+0xc>
c001003a:	31 c0                	xor    eax,eax
c001003c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010043:	84 db                	test   bl,bl
c0010045:	74 06                	je     c001004d <VgaText::updateTitle()+0x29>
c0010047:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001004a:	40                   	inc    eax
c001004b:	eb ef                	jmp    c001003c <VgaText::updateTitle()+0x18>
c001004d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010050:	85 c0                	test   eax,eax
c0010052:	74 09                	je     c001005d <VgaText::updateTitle()+0x39>
c0010054:	53                   	push   ebx
c0010055:	53                   	push   ebx
c0010056:	51                   	push   ecx
c0010057:	52                   	push   edx
c0010058:	ff d0                	call   eax
c001005a:	83 c4 10             	add    esp,0x10
c001005d:	83 c4 58             	add    esp,0x58
c0010060:	5b                   	pop    ebx
c0010061:	c3                   	ret    

c0010062 <VgaText::load()>:
c0010062:	53                   	push   ebx
c0010063:	31 c0                	xor    eax,eax
c0010065:	83 ec 58             	sub    esp,0x58
c0010068:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001006c:	89 e2                	mov    edx,esp
c001006e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010072:	40                   	inc    eax
c0010073:	83 f8 50             	cmp    eax,0x50
c0010076:	75 f6                	jne    c001006e <VgaText::load()+0xc>
c0010078:	31 c0                	xor    eax,eax
c001007a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010081:	84 c9                	test   cl,cl
c0010083:	74 06                	je     c001008b <VgaText::load()+0x29>
c0010085:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010088:	40                   	inc    eax
c0010089:	eb ef                	jmp    c001007a <VgaText::load()+0x18>
c001008b:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001008e:	85 c0                	test   eax,eax
c0010090:	74 09                	je     c001009b <VgaText::load()+0x39>
c0010092:	51                   	push   ecx
c0010093:	51                   	push   ecx
c0010094:	52                   	push   edx
c0010095:	53                   	push   ebx
c0010096:	ff d0                	call   eax
c0010098:	83 c4 10             	add    esp,0x10
c001009b:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001009e:	85 c0                	test   eax,eax
c00100a0:	74 09                	je     c00100ab <VgaText::load()+0x49>
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	53                   	push   ebx
c00100a6:	ff d0                	call   eax
c00100a8:	83 c4 10             	add    esp,0x10
c00100ab:	83 c4 58             	add    esp,0x58
c00100ae:	5b                   	pop    ebx
c00100af:	c3                   	ret    

c00100b0 <VgaText::updateCursor()>:
c00100b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b4:	39 05 44 d8 02 c0    	cmp    DWORD PTR ds:0xc002d844,eax
c00100ba:	75 09                	jne    c00100c5 <VgaText::updateCursor()+0x15>
c00100bc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00100bf:	85 c0                	test   eax,eax
c00100c1:	74 02                	je     c00100c5 <VgaText::updateCursor()+0x15>
c00100c3:	ff e0                	jmp    eax
c00100c5:	c3                   	ret    

c00100c6 <VgaText::doANSI_SGR(int)>:
c00100c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ce:	85 d2                	test   edx,edx
c00100d0:	75 0b                	jne    c00100dd <VgaText::doANSI_SGR(int)+0x17>
c00100d2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100d5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100db:	eb 59                	jmp    c0010136 <VgaText::doANSI_SGR(int)+0x70>
c00100dd:	83 fa 07             	cmp    edx,0x7
c00100e0:	75 0b                	jne    c00100ed <VgaText::doANSI_SGR(int)+0x27>
c00100e2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100e5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100e8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100eb:	eb 49                	jmp    c0010136 <VgaText::doANSI_SGR(int)+0x70>
c00100ed:	83 fa 1b             	cmp    edx,0x1b
c00100f0:	74 e0                	je     c00100d2 <VgaText::doANSI_SGR(int)+0xc>
c00100f2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100f5:	83 f9 07             	cmp    ecx,0x7
c00100f8:	77 09                	ja     c0010103 <VgaText::doANSI_SGR(int)+0x3d>
c00100fa:	8b 14 8d e0 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3920]
c0010101:	eb 20                	jmp    c0010123 <VgaText::doANSI_SGR(int)+0x5d>
c0010103:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010106:	83 f9 07             	cmp    ecx,0x7
c0010109:	77 09                	ja     c0010114 <VgaText::doANSI_SGR(int)+0x4e>
c001010b:	8b 14 8d e0 c6 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3920]
c0010112:	eb 22                	jmp    c0010136 <VgaText::doANSI_SGR(int)+0x70>
c0010114:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010117:	83 f9 07             	cmp    ecx,0x7
c001011a:	77 0b                	ja     c0010127 <VgaText::doANSI_SGR(int)+0x61>
c001011c:	8b 14 95 98 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a68]
c0010123:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010126:	c3                   	ret    
c0010127:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001012a:	83 f9 07             	cmp    ecx,0x7
c001012d:	77 0a                	ja     c0010139 <VgaText::doANSI_SGR(int)+0x73>
c001012f:	8b 14 95 70 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a90]
c0010136:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010139:	c3                   	ret    

c001013a <VgaText::setDefaultBgColour(VgaColour)>:
c001013a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001013e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010142:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010145:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010148:	c3                   	ret    
c0010149:	90                   	nop

c001014a <VgaText::setDefaultFgColour(VgaColour)>:
c001014a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001014e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010152:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010155:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010158:	c3                   	ret    
c0010159:	90                   	nop

c001015a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001015a:	53                   	push   ebx
c001015b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001015f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010163:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010167:	51                   	push   ecx
c0010168:	e8 cd ff ff ff       	call   c001013a <VgaText::setDefaultBgColour(VgaColour)>
c001016d:	58                   	pop    eax
c001016e:	5a                   	pop    edx
c001016f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010173:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010177:	5b                   	pop    ebx
c0010178:	eb d0                	jmp    c001014a <VgaText::setDefaultFgColour(VgaColour)>

c001017a <VgaText::setTitleTextColour(VgaColour)>:
c001017a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010182:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010185:	e9 9a fe ff ff       	jmp    c0010024 <VgaText::updateTitle()>

c001018a <VgaText::setTitleColour(VgaColour)>:
c001018a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001018e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010192:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010195:	e9 8a fe ff ff       	jmp    c0010024 <VgaText::updateTitle()>

c001019a <VgaText::setTitle(char*)>:
c001019a:	53                   	push   ebx
c001019b:	83 ec 10             	sub    esp,0x10
c001019e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101a6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101ac:	50                   	push   eax
c00101ad:	e8 5a 06 ff ff       	call   c000080c <strcpy>
c00101b2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101b6:	83 c4 18             	add    esp,0x18
c00101b9:	5b                   	pop    ebx
c00101ba:	e9 65 fe ff ff       	jmp    c0010024 <VgaText::updateTitle()>
c00101bf:	90                   	nop

c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00101c0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00101c4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101c9:	83 e0 0f             	and    eax,0xf
c00101cc:	c1 e2 04             	shl    edx,0x4
c00101cf:	09 d0                	or     eax,edx
c00101d1:	c3                   	ret    

c00101d2 <VgaText::scrollScreen()>:
c00101d2:	55                   	push   ebp
c00101d3:	b9 01 00 00 00       	mov    ecx,0x1
c00101d8:	57                   	push   edi
c00101d9:	56                   	push   esi
c00101da:	53                   	push   ebx
c00101db:	83 ec 0c             	sub    esp,0xc
c00101de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101e2:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101e8:	31 ff                	xor    edi,edi
c00101ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101ed:	83 f9 17             	cmp    ecx,0x17
c00101f0:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101f3:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101fa:	75 27                	jne    c0010223 <VgaText::scrollScreen()+0x51>
c00101fc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101ff:	01 f5                	add    ebp,esi
c0010201:	f7 c7 01 00 00 00    	test   edi,0x1
c0010207:	74 16                	je     c001021f <VgaText::scrollScreen()+0x4d>
c0010209:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001020d:	50                   	push   eax
c001020e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010212:	50                   	push   eax
c0010213:	e8 a8 ff ff ff       	call   c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010218:	5a                   	pop    edx
c0010219:	5a                   	pop    edx
c001021a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001021d:	eb 04                	jmp    c0010223 <VgaText::scrollScreen()+0x51>
c001021f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010223:	47                   	inc    edi
c0010224:	46                   	inc    esi
c0010225:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001022b:	75 bd                	jne    c00101ea <VgaText::scrollScreen()+0x18>
c001022d:	41                   	inc    ecx
c001022e:	83 f9 18             	cmp    ecx,0x18
c0010231:	75 af                	jne    c00101e2 <VgaText::scrollScreen()+0x10>
c0010233:	39 1d 44 d8 02 c0    	cmp    DWORD PTR ds:0xc002d844,ebx
c0010239:	75 1b                	jne    c0010256 <VgaText::scrollScreen()+0x84>
c001023b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001023f:	74 05                	je     c0010246 <VgaText::scrollScreen()+0x74>
c0010241:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010244:	eb 10                	jmp    c0010256 <VgaText::scrollScreen()+0x84>
c0010246:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010249:	85 c0                	test   eax,eax
c001024b:	74 09                	je     c0010256 <VgaText::scrollScreen()+0x84>
c001024d:	83 ec 0c             	sub    esp,0xc
c0010250:	53                   	push   ebx
c0010251:	ff d0                	call   eax
c0010253:	83 c4 10             	add    esp,0x10
c0010256:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001025a:	83 c4 0c             	add    esp,0xc
c001025d:	5b                   	pop    ebx
c001025e:	5e                   	pop    esi
c001025f:	5f                   	pop    edi
c0010260:	5d                   	pop    ebp
c0010261:	e9 4a fe ff ff       	jmp    c00100b0 <VgaText::updateCursor()>

c0010266 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010266:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001026b:	c1 e0 08             	shl    eax,0x8
c001026e:	89 c2                	mov    edx,eax
c0010270:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010275:	09 d0                	or     eax,edx
c0010277:	c3                   	ret    

c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010278:	56                   	push   esi
c0010279:	53                   	push   ebx
c001027a:	51                   	push   ecx
c001027b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001027f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010284:	50                   	push   eax
c0010285:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001028a:	50                   	push   eax
c001028b:	e8 30 ff ff ff       	call   c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010290:	5b                   	pop    ebx
c0010291:	0f b6 c0             	movzx  eax,al
c0010294:	5e                   	pop    esi
c0010295:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001029a:	50                   	push   eax
c001029b:	53                   	push   ebx
c001029c:	e8 c5 ff ff ff       	call   c0010266 <VgaText::combineCharAndColour(char, unsigned char)>
c00102a1:	5a                   	pop    edx
c00102a2:	5e                   	pop    esi
c00102a3:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102a6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102ac:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102b0:	0f b7 d2             	movzx  edx,dx
c00102b3:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102b7:	39 0d 44 d8 02 c0    	cmp    DWORD PTR ds:0xc002d844,ecx
c00102bd:	75 10                	jne    c00102cf <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102bf:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00102c2:	85 c0                	test   eax,eax
c00102c4:	74 09                	je     c00102cf <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00102c6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102ca:	5a                   	pop    edx
c00102cb:	5b                   	pop    ebx
c00102cc:	5e                   	pop    esi
c00102cd:	ff e0                	jmp    eax
c00102cf:	58                   	pop    eax
c00102d0:	5b                   	pop    ebx
c00102d1:	5e                   	pop    esi
c00102d2:	c3                   	ret    
c00102d3:	90                   	nop

c00102d4 <VgaText::getCursorX()>:
c00102d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102db:	c3                   	ret    

c00102dc <VgaText::getCursorY()>:
c00102dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102e3:	c3                   	ret    

c00102e4 <VgaText::setCursor(int, int)>:
c00102e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ec:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102f6:	e9 b5 fd ff ff       	jmp    c00100b0 <VgaText::updateCursor()>

c00102fb <setActiveTerminal(VgaText*)>:
c00102fb:	53                   	push   ebx
c00102fc:	83 ec 08             	sub    esp,0x8
c00102ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010303:	85 db                	test   ebx,ebx
c0010305:	75 11                	jne    c0010318 <setActiveTerminal(VgaText*)+0x1d>
c0010307:	c7 44 24 10 00 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a000
c001030f:	83 c4 08             	add    esp,0x8
c0010312:	5b                   	pop    ebx
c0010313:	e9 51 9a 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c0010318:	a1 44 d8 02 c0       	mov    eax,ds:0xc002d844
c001031d:	85 c0                	test   eax,eax
c001031f:	74 0c                	je     c001032d <setActiveTerminal(VgaText*)+0x32>
c0010321:	83 ec 0c             	sub    esp,0xc
c0010324:	50                   	push   eax
c0010325:	e8 86 fd ff ff       	call   c00100b0 <VgaText::updateCursor()>
c001032a:	83 c4 10             	add    esp,0x10
c001032d:	89 1d 44 d8 02 c0    	mov    DWORD PTR ds:0xc002d844,ebx
c0010333:	51                   	push   ecx
c0010334:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010337:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001033a:	53                   	push   ebx
c001033b:	e8 a4 ff ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010347:	75 07                	jne    c0010350 <setActiveTerminal(VgaText*)+0x55>
c0010349:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010350:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010354:	83 c4 08             	add    esp,0x8
c0010357:	5b                   	pop    ebx
c0010358:	e9 05 fd ff ff       	jmp    c0010062 <VgaText::load()>

c001035d <doTerminalCycle()>:
c001035d:	83 ec 18             	sub    esp,0x18
c0010360:	a1 40 d8 02 c0       	mov    eax,ds:0xc002d840
c0010365:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010368:	50                   	push   eax
c0010369:	a3 40 d8 02 c0       	mov    ds:0xc002d840,eax
c001036e:	e8 88 ff ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c0010373:	83 c4 1c             	add    esp,0x1c
c0010376:	c3                   	ret    
c0010377:	90                   	nop

c0010378 <VgaText::setCursorX(int)>:
c0010378:	83 ec 10             	sub    esp,0x10
c001037b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001037f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010386:	50                   	push   eax
c0010387:	e8 58 ff ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c001038c:	83 c4 1c             	add    esp,0x1c
c001038f:	c3                   	ret    

c0010390 <VgaText::setCursorY(int)>:
c0010390:	83 ec 10             	sub    esp,0x10
c0010393:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001039b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001039e:	50                   	push   eax
c001039f:	e8 40 ff ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c00103a4:	83 c4 1c             	add    esp,0x1c
c00103a7:	c3                   	ret    

c00103a8 <VgaText::incrementCursor(bool)>:
c00103a8:	56                   	push   esi
c00103a9:	53                   	push   ebx
c00103aa:	51                   	push   ecx
c00103ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103b6:	40                   	inc    eax
c00103b7:	83 f8 50             	cmp    eax,0x50
c00103ba:	74 05                	je     c00103c1 <VgaText::incrementCursor(bool)+0x19>
c00103bc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00103bf:	eb 24                	jmp    c00103e5 <VgaText::incrementCursor(bool)+0x3d>
c00103c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00103c4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103cb:	8d 50 01             	lea    edx,[eax+0x1]
c00103ce:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103d1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103d4:	75 0f                	jne    c00103e5 <VgaText::incrementCursor(bool)+0x3d>
c00103d6:	83 ec 0c             	sub    esp,0xc
c00103d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103dc:	53                   	push   ebx
c00103dd:	e8 f0 fd ff ff       	call   c00101d2 <VgaText::scrollScreen()>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 f0                	mov    eax,esi
c00103e7:	84 c0                	test   al,al
c00103e9:	74 0c                	je     c00103f7 <VgaText::incrementCursor(bool)+0x4f>
c00103eb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ef:	5a                   	pop    edx
c00103f0:	5b                   	pop    ebx
c00103f1:	5e                   	pop    esi
c00103f2:	e9 b9 fc ff ff       	jmp    c00100b0 <VgaText::updateCursor()>
c00103f7:	58                   	pop    eax
c00103f8:	5b                   	pop    ebx
c00103f9:	5e                   	pop    esi
c00103fa:	c3                   	ret    
c00103fb:	90                   	nop

c00103fc <VgaText::decrementCursor(bool)>:
c00103fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010400:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010404:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010407:	85 c0                	test   eax,eax
c0010409:	74 04                	je     c001040f <VgaText::decrementCursor(bool)+0x13>
c001040b:	48                   	dec    eax
c001040c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001040f:	84 c9                	test   cl,cl
c0010411:	74 09                	je     c001041c <VgaText::decrementCursor(bool)+0x20>
c0010413:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010417:	e9 94 fc ff ff       	jmp    c00100b0 <VgaText::updateCursor()>
c001041c:	c3                   	ret    
c001041d:	90                   	nop

c001041e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001041e:	53                   	push   ebx
c001041f:	83 ec 08             	sub    esp,0x8
c0010422:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010426:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001042a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001042e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010432:	3c 07                	cmp    al,0x7
c0010434:	75 2a                	jne    c0010460 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010436:	a1 f8 d8 02 c0       	mov    eax,ds:0xc002d8f8
c001043b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010443:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001044b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010453:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010457:	83 c4 08             	add    esp,0x8
c001045a:	5b                   	pop    ebx
c001045b:	e9 aa 2f 00 00       	jmp    c001340a <Buzzer::beep(int, int, bool)>
c0010460:	3c 0d                	cmp    al,0xd
c0010462:	75 09                	jne    c001046d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010464:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001046b:	eb 2c                	jmp    c0010499 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001046d:	3c 0a                	cmp    al,0xa
c001046f:	75 31                	jne    c00104a2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010471:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010474:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001047b:	8d 50 01             	lea    edx,[eax+0x1]
c001047e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010481:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010484:	75 0f                	jne    c0010495 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010486:	83 ec 0c             	sub    esp,0xc
c0010489:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001048c:	53                   	push   ebx
c001048d:	e8 40 fd ff ff       	call   c00101d2 <VgaText::scrollScreen()>
c0010492:	83 c4 10             	add    esp,0x10
c0010495:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010499:	83 c4 08             	add    esp,0x8
c001049c:	5b                   	pop    ebx
c001049d:	e9 0e fc ff ff       	jmp    c00100b0 <VgaText::updateCursor()>
c00104a2:	3c 08                	cmp    al,0x8
c00104a4:	75 25                	jne    c00104cb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104a6:	50                   	push   eax
c00104a7:	50                   	push   eax
c00104a8:	6a 01                	push   0x1
c00104aa:	53                   	push   ebx
c00104ab:	e8 4c ff ff ff       	call   c00103fc <VgaText::decrementCursor(bool)>
c00104b0:	5a                   	pop    edx
c00104b1:	59                   	pop    ecx
c00104b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104b8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104bb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00104be:	6a 20                	push   0x20
c00104c0:	53                   	push   ebx
c00104c1:	e8 b2 fd ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104c6:	83 c4 28             	add    esp,0x28
c00104c9:	5b                   	pop    ebx
c00104ca:	c3                   	ret    
c00104cb:	83 ec 08             	sub    esp,0x8
c00104ce:	0f be c0             	movsx  eax,al
c00104d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104d4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104d7:	51                   	push   ecx
c00104d8:	52                   	push   edx
c00104d9:	50                   	push   eax
c00104da:	53                   	push   ebx
c00104db:	e8 98 fd ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104e0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104ec:	83 c4 28             	add    esp,0x28
c00104ef:	5b                   	pop    ebx
c00104f0:	e9 b3 fe ff ff       	jmp    c00103a8 <VgaText::incrementCursor(bool)>
c00104f5:	90                   	nop

c00104f6 <VgaText::doUpdate()>:
c00104f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104fa:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104fd:	85 c0                	test   eax,eax
c00104ff:	74 02                	je     c0010503 <VgaText::doUpdate()+0xd>
c0010501:	ff e0                	jmp    eax
c0010503:	c3                   	ret    

c0010504 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010504:	55                   	push   ebp
c0010505:	31 ed                	xor    ebp,ebp
c0010507:	57                   	push   edi
c0010508:	56                   	push   esi
c0010509:	53                   	push   ebx
c001050a:	83 ec 1c             	sub    esp,0x1c
c001050d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010511:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010516:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001051d:	50                   	push   eax
c001051e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010523:	50                   	push   eax
c0010524:	e8 97 fc ff ff       	call   c00101c0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010529:	59                   	pop    ecx
c001052a:	0f b6 c0             	movzx  eax,al
c001052d:	5e                   	pop    esi
c001052e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010533:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010537:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001053a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001053e:	0f b7 f6             	movzx  esi,si
c0010541:	01 f6                	add    esi,esi
c0010543:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010546:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010549:	84 c0                	test   al,al
c001054b:	0f 84 fd 00 00 00    	je     c001064e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010551:	3c 0d                	cmp    al,0xd
c0010553:	75 0c                	jne    c0010561 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010555:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001055c:	e9 e7 00 00 00       	jmp    c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010561:	3c 0a                	cmp    al,0xa
c0010563:	75 47                	jne    c00105ac <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010565:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010568:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001056f:	8d 48 01             	lea    ecx,[eax+0x1]
c0010572:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010575:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010578:	75 0f                	jne    c0010589 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c001057a:	83 ec 0c             	sub    esp,0xc
c001057d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010580:	53                   	push   ebx
c0010581:	e8 4c fc ff ff       	call   c00101d2 <VgaText::scrollScreen()>
c0010586:	83 c4 10             	add    esp,0x10
c0010589:	83 ec 0c             	sub    esp,0xc
c001058c:	31 ed                	xor    ebp,ebp
c001058e:	53                   	push   ebx
c001058f:	e8 1c fb ff ff       	call   c00100b0 <VgaText::updateCursor()>
c0010594:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001059f:	0f b7 f6             	movzx  esi,si
c00105a2:	01 f6                	add    esi,esi
c00105a4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105a7:	e9 9c 00 00 00       	jmp    c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105ac:	3c 08                	cmp    al,0x8
c00105ae:	75 35                	jne    c00105e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105b0:	56                   	push   esi
c00105b1:	56                   	push   esi
c00105b2:	6a 01                	push   0x1
c00105b4:	53                   	push   ebx
c00105b5:	e8 42 fe ff ff       	call   c00103fc <VgaText::decrementCursor(bool)>
c00105ba:	58                   	pop    eax
c00105bb:	5a                   	pop    edx
c00105bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105bf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105c2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00105c5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105c8:	6a 20                	push   0x20
c00105ca:	53                   	push   ebx
c00105cb:	e8 a8 fc ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105d0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105d5:	83 c4 20             	add    esp,0x20
c00105d8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105db:	0f b7 f6             	movzx  esi,si
c00105de:	01 f6                	add    esi,esi
c00105e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105e3:	eb 63                	jmp    c0010648 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105e5:	51                   	push   ecx
c00105e6:	51                   	push   ecx
c00105e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105eb:	50                   	push   eax
c00105ec:	e8 75 fc ff ff       	call   c0010266 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	66 89 06             	mov    WORD PTR [esi],ax
c00105f7:	39 1d 44 d8 02 c0    	cmp    DWORD PTR ds:0xc002d844,ebx
c00105fd:	75 21                	jne    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105ff:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010602:	85 c0                	test   eax,eax
c0010604:	74 1a                	je     c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010606:	52                   	push   edx
c0010607:	52                   	push   edx
c0010608:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001060b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001060e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010612:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010616:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010619:	51                   	push   ecx
c001061a:	53                   	push   ebx
c001061b:	ff d0                	call   eax
c001061d:	83 c4 20             	add    esp,0x20
c0010620:	83 c6 02             	add    esi,0x2
c0010623:	50                   	push   eax
c0010624:	50                   	push   eax
c0010625:	6a 00                	push   0x0
c0010627:	53                   	push   ebx
c0010628:	e8 7b fd ff ff       	call   c00103a8 <VgaText::incrementCursor(bool)>
c001062d:	83 c4 10             	add    esp,0x10
c0010630:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010634:	75 0d                	jne    c0010643 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010636:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001063b:	0f b7 f6             	movzx  esi,si
c001063e:	01 f6                	add    esi,esi
c0010640:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010643:	bd 01 00 00 00       	mov    ebp,0x1
c0010648:	47                   	inc    edi
c0010649:	e9 f8 fe ff ff       	jmp    c0010546 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	53                   	push   ebx
c0010652:	e8 59 fa ff ff       	call   c00100b0 <VgaText::updateCursor()>
c0010657:	83 c4 10             	add    esp,0x10
c001065a:	89 e8                	mov    eax,ebp
c001065c:	84 c0                	test   al,al
c001065e:	74 0c                	je     c001066c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010660:	83 ec 0c             	sub    esp,0xc
c0010663:	53                   	push   ebx
c0010664:	e8 8d fe ff ff       	call   c00104f6 <VgaText::doUpdate()>
c0010669:	83 c4 10             	add    esp,0x10
c001066c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010673:	83 c4 1c             	add    esp,0x1c
c0010676:	5b                   	pop    ebx
c0010677:	5e                   	pop    esi
c0010678:	5f                   	pop    edi
c0010679:	5d                   	pop    ebp
c001067a:	c3                   	ret    
c001067b:	90                   	nop

c001067c <VgaText::clearScreen()>:
c001067c:	57                   	push   edi
c001067d:	56                   	push   esi
c001067e:	31 f6                	xor    esi,esi
c0010680:	53                   	push   ebx
c0010681:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010685:	52                   	push   edx
c0010686:	6a 00                	push   0x0
c0010688:	6a 00                	push   0x0
c001068a:	53                   	push   ebx
c001068b:	e8 54 fc ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c0010690:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010697:	83 c4 10             	add    esp,0x10
c001069a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001069d:	7e 20                	jle    c00106bf <VgaText::clearScreen()+0x43>
c001069f:	31 ff                	xor    edi,edi
c00106a1:	50                   	push   eax
c00106a2:	50                   	push   eax
c00106a3:	56                   	push   esi
c00106a4:	57                   	push   edi
c00106a5:	47                   	inc    edi
c00106a6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106a9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106ac:	6a 20                	push   0x20
c00106ae:	53                   	push   ebx
c00106af:	e8 c4 fb ff ff       	call   c0010278 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106b4:	83 c4 20             	add    esp,0x20
c00106b7:	83 ff 50             	cmp    edi,0x50
c00106ba:	75 e5                	jne    c00106a1 <VgaText::clearScreen()+0x25>
c00106bc:	46                   	inc    esi
c00106bd:	eb db                	jmp    c001069a <VgaText::clearScreen()+0x1e>
c00106bf:	83 ec 0c             	sub    esp,0xc
c00106c2:	53                   	push   ebx
c00106c3:	e8 2e fe ff ff       	call   c00104f6 <VgaText::doUpdate()>
c00106c8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cf:	83 c4 10             	add    esp,0x10
c00106d2:	5b                   	pop    ebx
c00106d3:	5e                   	pop    esi
c00106d4:	5f                   	pop    edi
c00106d5:	c3                   	ret    

c00106d6 <VgaText::putchar(char)>:
c00106d6:	56                   	push   esi
c00106d7:	53                   	push   ebx
c00106d8:	83 ec 14             	sub    esp,0x14
c00106db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106e3:	3c 5b                	cmp    al,0x5b
c00106e5:	75 18                	jne    c00106ff <VgaText::putchar(char)+0x29>
c00106e7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106eb:	74 1f                	je     c001070c <VgaText::putchar(char)+0x36>
c00106ed:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106f3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106fa:	e9 bd 00 00 00       	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c00106ff:	3c 1b                	cmp    al,0x1b
c0010701:	75 09                	jne    c001070c <VgaText::putchar(char)+0x36>
c0010703:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010707:	e9 b0 00 00 00       	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c001070c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001070f:	84 c9                	test   cl,cl
c0010711:	0f 84 92 00 00 00    	je     c00107a9 <VgaText::putchar(char)+0xd3>
c0010717:	8d 50 c0             	lea    edx,[eax-0x40]
c001071a:	80 fa 3e             	cmp    dl,0x3e
c001071d:	77 76                	ja     c0010795 <VgaText::putchar(char)+0xbf>
c001071f:	3c 6d                	cmp    al,0x6d
c0010721:	75 47                	jne    c001076a <VgaText::putchar(char)+0x94>
c0010723:	31 f6                	xor    esi,esi
c0010725:	31 d2                	xor    edx,edx
c0010727:	31 c0                	xor    eax,eax
c0010729:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001072c:	7e 2d                	jle    c001075b <VgaText::putchar(char)+0x85>
c001072e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010733:	80 fa 3b             	cmp    dl,0x3b
c0010736:	75 17                	jne    c001074f <VgaText::putchar(char)+0x79>
c0010738:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001073c:	50                   	push   eax
c001073d:	53                   	push   ebx
c001073e:	e8 83 f9 ff ff       	call   c00100c6 <VgaText::doANSI_SGR(int)>
c0010743:	59                   	pop    ecx
c0010744:	31 d2                	xor    edx,edx
c0010746:	58                   	pop    eax
c0010747:	31 c0                	xor    eax,eax
c0010749:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001074d:	eb 09                	jmp    c0010758 <VgaText::putchar(char)+0x82>
c001074f:	6b c0 0a             	imul   eax,eax,0xa
c0010752:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010756:	88 ca                	mov    dl,cl
c0010758:	46                   	inc    esi
c0010759:	eb ce                	jmp    c0010729 <VgaText::putchar(char)+0x53>
c001075b:	84 d2                	test   dl,dl
c001075d:	74 2e                	je     c001078d <VgaText::putchar(char)+0xb7>
c001075f:	50                   	push   eax
c0010760:	53                   	push   ebx
c0010761:	e8 60 f9 ff ff       	call   c00100c6 <VgaText::doANSI_SGR(int)>
c0010766:	58                   	pop    eax
c0010767:	5a                   	pop    edx
c0010768:	eb 23                	jmp    c001078d <VgaText::putchar(char)+0xb7>
c001076a:	3c 4a                	cmp    al,0x4a
c001076c:	75 1f                	jne    c001078d <VgaText::putchar(char)+0xb7>
c001076e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010772:	75 19                	jne    c001078d <VgaText::putchar(char)+0xb7>
c0010774:	83 ec 0c             	sub    esp,0xc
c0010777:	53                   	push   ebx
c0010778:	e8 ff fe ff ff       	call   c001067c <VgaText::clearScreen()>
c001077d:	83 c4 0c             	add    esp,0xc
c0010780:	6a 00                	push   0x0
c0010782:	6a 00                	push   0x0
c0010784:	53                   	push   ebx
c0010785:	e8 5a fb ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c001078a:	83 c4 10             	add    esp,0x10
c001078d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010793:	eb 27                	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c0010795:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010798:	83 fa 0e             	cmp    edx,0xe
c001079b:	7f 1f                	jg     c00107bc <VgaText::putchar(char)+0xe6>
c001079d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107a0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107a3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107a7:	eb 13                	jmp    c00107bc <VgaText::putchar(char)+0xe6>
c00107a9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107ac:	0f be c0             	movsx  eax,al
c00107af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107b2:	50                   	push   eax
c00107b3:	53                   	push   ebx
c00107b4:	e8 65 fc ff ff       	call   c001041e <VgaText::putchar(char, VgaColour, VgaColour)>
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	83 c4 14             	add    esp,0x14
c00107bf:	5b                   	pop    ebx
c00107c0:	5e                   	pop    esi
c00107c1:	c3                   	ret    

c00107c2 <VgaText::putx(unsigned int)>:
c00107c2:	57                   	push   edi
c00107c3:	b9 11 00 00 00       	mov    ecx,0x11
c00107c8:	56                   	push   esi
c00107c9:	be 0e a0 02 c0       	mov    esi,0xc002a00e
c00107ce:	53                   	push   ebx
c00107cf:	83 ec 20             	sub    esp,0x20
c00107d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107d6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107da:	fc                   	cld    
c00107db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107dd:	be 08 00 00 00       	mov    esi,0x8
c00107e2:	50                   	push   eax
c00107e3:	50                   	push   eax
c00107e4:	89 d8                	mov    eax,ebx
c00107e6:	c1 e3 04             	shl    ebx,0x4
c00107e9:	c1 e8 1c             	shr    eax,0x1c
c00107ec:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107f1:	50                   	push   eax
c00107f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107f6:	e8 db fe ff ff       	call   c00106d6 <VgaText::putchar(char)>
c00107fb:	83 c4 10             	add    esp,0x10
c00107fe:	4e                   	dec    esi
c00107ff:	75 e1                	jne    c00107e2 <VgaText::putx(unsigned int)+0x20>
c0010801:	83 c4 20             	add    esp,0x20
c0010804:	5b                   	pop    ebx
c0010805:	5e                   	pop    esi
c0010806:	5f                   	pop    edi
c0010807:	c3                   	ret    

c0010808 <VgaText::puts(char const*)>:
c0010808:	53                   	push   ebx
c0010809:	83 ec 08             	sub    esp,0x8
c001080c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010810:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010813:	84 c0                	test   al,al
c0010815:	74 12                	je     c0010829 <VgaText::puts(char const*)+0x21>
c0010817:	43                   	inc    ebx
c0010818:	51                   	push   ecx
c0010819:	51                   	push   ecx
c001081a:	50                   	push   eax
c001081b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001081f:	e8 b2 fe ff ff       	call   c00106d6 <VgaText::putchar(char)>
c0010824:	83 c4 10             	add    esp,0x10
c0010827:	eb e7                	jmp    c0010810 <VgaText::puts(char const*)+0x8>
c0010829:	83 c4 08             	add    esp,0x8
c001082c:	5b                   	pop    ebx
c001082d:	c3                   	ret    

c001082e <VgaText::VgaText(char const*)>:
c001082e:	57                   	push   edi
c001082f:	56                   	push   esi
c0010830:	53                   	push   ebx
c0010831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010835:	83 ec 08             	sub    esp,0x8
c0010838:	6a 00                	push   0x0
c001083a:	50                   	push   eax
c001083b:	e8 42 05 00 00       	call   c0010d82 <UnixFile::UnixFile(int)>
c0010840:	83 c4 10             	add    esp,0x10
c0010843:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c0010848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001084c:	89 10                	mov    DWORD PTR [eax],edx
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010868:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001086c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010870:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010878:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001087f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010883:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001088a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010899:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	8d 50 60             	lea    edx,[eax+0x60]
c00108a7:	bb 20 d8 02 c0       	mov    ebx,0xc002d820
c00108ac:	b8 08 00 00 00       	mov    eax,0x8
c00108b1:	fc                   	cld    
c00108b2:	89 d7                	mov    edi,edx
c00108b4:	89 de                	mov    esi,ebx
c00108b6:	89 c1                	mov    ecx,eax
c00108b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108be:	05 82 00 00 00       	add    eax,0x82
c00108c3:	83 ec 08             	sub    esp,0x8
c00108c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ca:	50                   	push   eax
c00108cb:	e8 3c ff fe ff       	call   c000080c <strcpy>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108de:	83 ec 0c             	sub    esp,0xc
c00108e1:	6a 01                	push   0x1
c00108e3:	e8 dd 08 00 00       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	89 c2                	mov    edx,eax
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108f4:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010901:	89 c6                	mov    esi,eax
c0010903:	e8 38 f0 ff ff       	call   c000f940 <Phys::allocatePage()>
c0010908:	6a 05                	push   0x5
c001090a:	56                   	push   esi
c001090b:	50                   	push   eax
c001090c:	53                   	push   ebx
c001090d:	e8 70 10 00 00       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010919:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001091c:	83 ec 04             	sub    esp,0x4
c001091f:	68 00 0f 00 00       	push   0xf00
c0010924:	6a 00                	push   0x0
c0010926:	50                   	push   eax
c0010927:	e8 24 fe fe ff       	call   c0000750 <memset>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	83 ec 04             	sub    esp,0x4
c0010932:	6a 00                	push   0x0
c0010934:	6a 07                	push   0x7
c0010936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001093a:	e8 1b f8 ff ff       	call   c001015a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001093f:	83 c4 10             	add    esp,0x10
c0010942:	83 ec 04             	sub    esp,0x4
c0010945:	6a 00                	push   0x0
c0010947:	6a 00                	push   0x0
c0010949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001094d:	e8 92 f9 ff ff       	call   c00102e4 <VgaText::setCursor(int, int)>
c0010952:	83 c4 10             	add    esp,0x10
c0010955:	83 ec 0c             	sub    esp,0xc
c0010958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001095c:	e8 1b fd ff ff       	call   c001067c <VgaText::clearScreen()>
c0010961:	83 c4 10             	add    esp,0x10
c0010964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010968:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001096c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010970:	05 02 01 00 00       	add    eax,0x102
c0010975:	83 ec 04             	sub    esp,0x4
c0010978:	68 96 00 00 00       	push   0x96
c001097d:	6a 00                	push   0x0
c001097f:	50                   	push   eax
c0010980:	e8 cb fd fe ff       	call   c0000750 <memset>
c0010985:	83 c4 10             	add    esp,0x10
c0010988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098c:	05 98 01 00 00       	add    eax,0x198
c0010991:	83 ec 04             	sub    esp,0x4
c0010994:	68 2c 01 00 00       	push   0x12c
c0010999:	6a 00                	push   0x0
c001099b:	50                   	push   eax
c001099c:	e8 af fd fe ff       	call   c0000750 <memset>
c00109a1:	83 c4 10             	add    esp,0x10
c00109a4:	90                   	nop
c00109a5:	5b                   	pop    ebx
c00109a6:	5e                   	pop    esi
c00109a7:	5f                   	pop    edi
c00109a8:	c3                   	ret    
c00109a9:	90                   	nop

c00109aa <VgaText::receiveKey(unsigned char)>:
c00109aa:	55                   	push   ebp
c00109ab:	57                   	push   edi
c00109ac:	56                   	push   esi
c00109ad:	53                   	push   ebx
c00109ae:	83 ec 1c             	sub    esp,0x1c
c00109b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109b9:	84 db                	test   bl,bl
c00109bb:	0f 84 c9 00 00 00    	je     c0010a8a <VgaText::receiveKey(unsigned char)+0xe0>
c00109c1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00109c7:	80 fb 08             	cmp    bl,0x8
c00109ca:	75 2c                	jne    c00109f8 <VgaText::receiveKey(unsigned char)+0x4e>
c00109cc:	83 ec 0c             	sub    esp,0xc
c00109cf:	57                   	push   edi
c00109d0:	e8 97 fd fe ff       	call   c000076c <strlen>
c00109d5:	83 c4 10             	add    esp,0x10
c00109d8:	85 c0                	test   eax,eax
c00109da:	74 41                	je     c0010a1d <VgaText::receiveKey(unsigned char)+0x73>
c00109dc:	50                   	push   eax
c00109dd:	50                   	push   eax
c00109de:	6a 08                	push   0x8
c00109e0:	56                   	push   esi
c00109e1:	e8 f0 fc ff ff       	call   c00106d6 <VgaText::putchar(char)>
c00109e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109e9:	e8 7e fd fe ff       	call   c000076c <strlen>
c00109ee:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109f6:	eb 22                	jmp    c0010a1a <VgaText::receiveKey(unsigned char)+0x70>
c00109f8:	0f be c3             	movsx  eax,bl
c00109fb:	52                   	push   edx
c00109fc:	52                   	push   edx
c00109fd:	50                   	push   eax
c00109fe:	56                   	push   esi
c00109ff:	e8 d2 fc ff ff       	call   c00106d6 <VgaText::putchar(char)>
c0010a04:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a08:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a0d:	59                   	pop    ecx
c0010a0e:	5d                   	pop    ebp
c0010a0f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a13:	50                   	push   eax
c0010a14:	57                   	push   edi
c0010a15:	e8 32 ff fe ff       	call   c000094c <strcat>
c0010a1a:	83 c4 10             	add    esp,0x10
c0010a1d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a24:	75 05                	jne    c0010a2b <VgaText::receiveKey(unsigned char)+0x81>
c0010a26:	80 fb 0a             	cmp    bl,0xa
c0010a29:	75 53                	jne    c0010a7e <VgaText::receiveKey(unsigned char)+0xd4>
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a34:	53                   	push   ebx
c0010a35:	e8 32 fd fe ff       	call   c000076c <strlen>
c0010a3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a3d:	89 c5                	mov    ebp,eax
c0010a3f:	e8 28 fd fe ff       	call   c000076c <strlen>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a4b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a50:	76 10                	jbe    c0010a62 <VgaText::receiveKey(unsigned char)+0xb8>
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	68 1f a0 02 c0       	push   0xc002a01f
c0010a5a:	e8 0a 93 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	50                   	push   eax
c0010a63:	50                   	push   eax
c0010a64:	57                   	push   edi
c0010a65:	53                   	push   ebx
c0010a66:	e8 e1 fe fe ff       	call   c000094c <strcat>
c0010a6b:	83 c4 0c             	add    esp,0xc
c0010a6e:	68 96 00 00 00       	push   0x96
c0010a73:	6a 00                	push   0x0
c0010a75:	57                   	push   edi
c0010a76:	e8 d5 fc fe ff       	call   c0000750 <memset>
c0010a7b:	83 c4 10             	add    esp,0x10
c0010a7e:	83 ec 0c             	sub    esp,0xc
c0010a81:	56                   	push   esi
c0010a82:	e8 6f fa ff ff       	call   c00104f6 <VgaText::doUpdate()>
c0010a87:	83 c4 10             	add    esp,0x10
c0010a8a:	83 c4 1c             	add    esp,0x1c
c0010a8d:	5b                   	pop    ebx
c0010a8e:	5e                   	pop    esi
c0010a8f:	5f                   	pop    edi
c0010a90:	5d                   	pop    ebp
c0010a91:	c3                   	ret    

c0010a92 <VgaText::write(unsigned long long, void*, int*)>:
c0010a92:	55                   	push   ebp
c0010a93:	57                   	push   edi
c0010a94:	56                   	push   esi
c0010a95:	53                   	push   ebx
c0010a96:	83 ec 0c             	sub    esp,0xc
c0010a99:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a9d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010aa1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aa5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010aac:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010aaf:	39 eb                	cmp    ebx,ebp
c0010ab1:	74 13                	je     c0010ac6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ab3:	43                   	inc    ebx
c0010ab4:	50                   	push   eax
c0010ab5:	50                   	push   eax
c0010ab6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010aba:	50                   	push   eax
c0010abb:	56                   	push   esi
c0010abc:	e8 15 fc ff ff       	call   c00106d6 <VgaText::putchar(char)>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	eb e9                	jmp    c0010aaf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ac6:	83 ec 0c             	sub    esp,0xc
c0010ac9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010ad0:	56                   	push   esi
c0010ad1:	e8 20 fa ff ff       	call   c00104f6 <VgaText::doUpdate()>
c0010ad6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ada:	89 38                	mov    DWORD PTR [eax],edi
c0010adc:	83 c4 1c             	add    esp,0x1c
c0010adf:	31 c0                	xor    eax,eax
c0010ae1:	5b                   	pop    ebx
c0010ae2:	5e                   	pop    esi
c0010ae3:	5f                   	pop    edi
c0010ae4:	5d                   	pop    ebp
c0010ae5:	c3                   	ret    

c0010ae6 <newTerminal(char*)>:
c0010ae6:	83 ec 28             	sub    esp,0x28
c0010ae9:	68 c4 02 00 00       	push   0x2c4
c0010aee:	e8 a9 ea ff ff       	call   c000f59c <malloc>
c0010af3:	5a                   	pop    edx
c0010af4:	59                   	pop    ecx
c0010af5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010af9:	50                   	push   eax
c0010afa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010afe:	e8 2b fd ff ff       	call   c001082e <VgaText::VgaText(char const*)>
c0010b03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b07:	83 c4 2c             	add    esp,0x2c
c0010b0a:	c3                   	ret    
c0010b0b:	90                   	nop

c0010b0c <TSS::TSS()>:
c0010b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b17:	90                   	nop
c0010b18:	c3                   	ret    
c0010b19:	90                   	nop

c0010b1a <TSS::setESP(unsigned long)>:
c0010b1a:	55                   	push   ebp
c0010b1b:	89 e5                	mov    ebp,esp
c0010b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b26:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b29:	90                   	nop
c0010b2a:	5d                   	pop    ebp
c0010b2b:	c3                   	ret    

c0010b2c <TSS::flush()>:
c0010b2c:	55                   	push   ebp
c0010b2d:	89 e5                	mov    ebp,esp
c0010b2f:	83 ec 10             	sub    esp,0x10
c0010b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b37:	83 c8 03             	or     eax,0x3
c0010b3a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b3e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b42:	66 89 d0             	mov    ax,dx
c0010b45:	0f 00 d8             	ltr    ax
c0010b48:	90                   	nop
c0010b49:	c9                   	leave  
c0010b4a:	c3                   	ret    
c0010b4b:	90                   	nop

c0010b4c <TSS::setup(unsigned long, unsigned long)>:
c0010b4c:	55                   	push   ebp
c0010b4d:	89 e5                	mov    ebp,esp
c0010b4f:	83 ec 18             	sub    esp,0x18
c0010b52:	83 ec 0c             	sub    esp,0xc
c0010b55:	6a 68                	push   0x68
c0010b57:	e8 40 ea ff ff       	call   c000f59c <malloc>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	89 c2                	mov    edx,eax
c0010b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b6d:	83 ec 04             	sub    esp,0x4
c0010b70:	6a 68                	push   0x68
c0010b72:	6a 00                	push   0x0
c0010b74:	50                   	push   eax
c0010b75:	e8 d6 fb fe ff       	call   c0000750 <memset>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b83:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b9b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bb3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bcb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bf2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bfe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c07:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c14:	0f 20 da             	mov    edx,cr3
c0010c17:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c1a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c1d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c26:	83 ec 08             	sub    esp,0x8
c0010c29:	50                   	push   eax
c0010c2a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c2d:	50                   	push   eax
c0010c2e:	e8 5f e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c33:	83 c4 10             	add    esp,0x10
c0010c36:	83 ec 08             	sub    esp,0x8
c0010c39:	6a 68                	push   0x68
c0010c3b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c3e:	50                   	push   eax
c0010c3f:	e8 6a e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c44:	83 c4 10             	add    esp,0x10
c0010c47:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c4b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c4e:	83 e0 0f             	and    eax,0xf
c0010c51:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c54:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c57:	83 c8 40             	or     eax,0x40
c0010c5a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c5d:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0010c62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c68:	05 78 01 00 00       	add    eax,0x178
c0010c6d:	83 ec 04             	sub    esp,0x4
c0010c70:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c73:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c76:	50                   	push   eax
c0010c77:	e8 66 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	89 c2                	mov    edx,eax
c0010c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c84:	89 10                	mov    DWORD PTR [eax],edx
c0010c86:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0010c8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c91:	05 78 01 00 00       	add    eax,0x178
c0010c96:	83 ec 0c             	sub    esp,0xc
c0010c99:	50                   	push   eax
c0010c9a:	e8 6d e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ca7:	c9                   	leave  
c0010ca8:	c3                   	ret    
c0010ca9:	90                   	nop

c0010caa <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cb5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cba:	75 08                	jne    c0010cc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cbc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010cc2:	eb 38                	jmp    c0010cfc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010cc4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010cc9:	75 17                	jne    c0010ce2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ccb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cd0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cd3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cdf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010ce2:	89 c1                	mov    ecx,eax
c0010ce4:	83 e1 fd             	and    ecx,0xfffffffd
c0010ce7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ced:	74 cd                	je     c0010cbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cef:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010cf4:	83 e0 ef             	and    eax,0xffffffef
c0010cf7:	83 f8 08             	cmp    eax,0x8
c0010cfa:	76 c0                	jbe    c0010cbc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cfc:	31 c0                	xor    eax,eax
c0010cfe:	c3                   	ret    
c0010cff:	90                   	nop

c0010d00 <ReservedFilename::isAtty()>:
c0010d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d04:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d07:	31 c0                	xor    eax,eax
c0010d09:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d0f:	74 09                	je     c0010d1a <ReservedFilename::isAtty()+0x1a>
c0010d11:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d17:	0f 94 c0             	sete   al
c0010d1a:	c3                   	ret    
c0010d1b:	90                   	nop

c0010d1c <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d2b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d30:	75 08                	jne    c0010d3a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d32:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d38:	eb 3d                	jmp    c0010d77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d3f:	75 17                	jne    c0010d58 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d55:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d58:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d5d:	75 04                	jne    c0010d63 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d5f:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d61:	eb 14                	jmp    c0010d77 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d63:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d68:	74 c8                	je     c0010d32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d6a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d6f:	83 e0 ef             	and    eax,0xffffffef
c0010d72:	83 f8 08             	cmp    eax,0x8
c0010d75:	76 bb                	jbe    c0010d32 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d77:	31 c0                	xor    eax,eax
c0010d79:	c3                   	ret    

c0010d7a <UnixFile::getFileDescriptor()>:
c0010d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	c3                   	ret    

c0010d82 <UnixFile::UnixFile(int)>:
c0010d82:	53                   	push   ebx
c0010d83:	83 ec 28             	sub    esp,0x28
c0010d86:	ba 3c a1 02 c0       	mov    edx,0xc002a13c
c0010d8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d8f:	89 10                	mov    DWORD PTR [eax],edx
c0010d91:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d99:	0f 8f 8c 01 00 00    	jg     c0010f2b <UnixFile::UnixFile(int)+0x1a9>
c0010d9f:	a1 20 c7 02 c0       	mov    eax,ds:0xc002c720
c0010da4:	8d 50 01             	lea    edx,[eax+0x1]
c0010da7:	89 15 20 c7 02 c0    	mov    DWORD PTR ds:0xc002c720,edx
c0010dad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010db1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010db4:	83 ec 08             	sub    esp,0x8
c0010db7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010dbb:	68 d8 d8 02 c0       	push   0xc002d8d8
c0010dc0:	e8 f1 75 01 00       	call   c00283b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	a0 d4 d8 02 c0       	mov    al,ds:0xc002d8d4
c0010dcd:	83 f0 01             	xor    eax,0x1
c0010dd0:	84 c0                	test   al,al
c0010dd2:	0f 84 54 01 00 00    	je     c0010f2c <UnixFile::UnixFile(int)+0x1aa>
c0010dd8:	c6 05 d4 d8 02 c0 01 	mov    BYTE PTR ds:0xc002d8d4,0x1
c0010ddf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010de7:	83 ec 0c             	sub    esp,0xc
c0010dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dee:	e8 a9 e7 ff ff       	call   c000f59c <malloc>
c0010df3:	83 c4 10             	add    esp,0x10
c0010df6:	89 c3                	mov    ebx,eax
c0010df8:	83 ec 08             	sub    esp,0x8
c0010dfb:	68 03 ff ff 0f       	push   0xfffff03
c0010e00:	53                   	push   ebx
c0010e01:	e8 2c 01 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e06:	83 c4 10             	add    esp,0x10
c0010e09:	89 1d cc d8 02 c0    	mov    DWORD PTR ds:0xc002d8cc,ebx
c0010e0f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1e:	e8 79 e7 ff ff       	call   c000f59c <malloc>
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	89 c3                	mov    ebx,eax
c0010e28:	83 ec 08             	sub    esp,0x8
c0010e2b:	68 01 ff ff 0f       	push   0xfffff01
c0010e30:	53                   	push   ebx
c0010e31:	e8 fc 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	89 1d d0 d8 02 c0    	mov    DWORD PTR ds:0xc002d8d0,ebx
c0010e3f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e4e:	e8 49 e7 ff ff       	call   c000f59c <malloc>
c0010e53:	83 c4 10             	add    esp,0x10
c0010e56:	89 c3                	mov    ebx,eax
c0010e58:	83 ec 08             	sub    esp,0x8
c0010e5b:	68 00 ff ff 0f       	push   0xfffff00
c0010e60:	53                   	push   ebx
c0010e61:	e8 cc 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e66:	83 c4 10             	add    esp,0x10
c0010e69:	89 1d c4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c4,ebx
c0010e6f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e7e:	e8 19 e7 ff ff       	call   c000f59c <malloc>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	89 c3                	mov    ebx,eax
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	68 02 ff ff 0f       	push   0xfffff02
c0010e90:	53                   	push   ebx
c0010e91:	e8 9c 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010e96:	83 c4 10             	add    esp,0x10
c0010e99:	89 1d c8 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c8,ebx
c0010e9f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ea7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010eac:	7f 7e                	jg     c0010f2c <UnixFile::UnixFile(int)+0x1aa>
c0010eae:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010eb6:	83 ec 0c             	sub    esp,0xc
c0010eb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ebd:	e8 da e6 ff ff       	call   c000f59c <malloc>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	89 c3                	mov    ebx,eax
c0010ec7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ecb:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010ed0:	83 ec 08             	sub    esp,0x8
c0010ed3:	50                   	push   eax
c0010ed4:	53                   	push   ebx
c0010ed5:	e8 58 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010eda:	83 c4 10             	add    esp,0x10
c0010edd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee1:	89 1c 85 a0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2760],ebx
c0010ee8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ef0:	83 ec 0c             	sub    esp,0xc
c0010ef3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ef7:	e8 a0 e6 ff ff       	call   c000f59c <malloc>
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	89 c3                	mov    ebx,eax
c0010f01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f05:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f0a:	83 ec 08             	sub    esp,0x8
c0010f0d:	50                   	push   eax
c0010f0e:	53                   	push   ebx
c0010f0f:	e8 1e 00 00 00       	call   c0010f32 <ReservedFilename::ReservedFilename(int)>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1b:	89 1c 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],ebx
c0010f22:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f26:	e9 7c ff ff ff       	jmp    c0010ea7 <UnixFile::UnixFile(int)+0x125>
c0010f2b:	90                   	nop
c0010f2c:	83 c4 28             	add    esp,0x28
c0010f2f:	5b                   	pop    ebx
c0010f30:	c3                   	ret    
c0010f31:	90                   	nop

c0010f32 <ReservedFilename::ReservedFilename(int)>:
c0010f32:	83 ec 0c             	sub    esp,0xc
c0010f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f39:	83 ec 08             	sub    esp,0x8
c0010f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f40:	50                   	push   eax
c0010f41:	e8 3c fe ff ff       	call   c0010d82 <UnixFile::UnixFile(int)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c0010f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f52:	89 10                	mov    DWORD PTR [eax],edx
c0010f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f5f:	90                   	nop
c0010f60:	83 c4 0c             	add    esp,0xc
c0010f63:	c3                   	ret    

c0010f64 <UnixFile::~UnixFile()>:
c0010f64:	83 ec 1c             	sub    esp,0x1c
c0010f67:	ba 3c a1 02 c0       	mov    edx,0xc002a13c
c0010f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f70:	89 10                	mov    DWORD PTR [eax],edx
c0010f72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f79:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f7e:	7f 73                	jg     c0010ff3 <UnixFile::~UnixFile()+0x8f>
c0010f80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	68 d8 d8 02 c0       	push   0xc002d8d8
c0010f90:	e8 f5 74 01 00       	call   c002848a <LinkedList<UnixFile>::getFirstElement()>
c0010f95:	83 c4 10             	add    esp,0x10
c0010f98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f9c:	83 ec 0c             	sub    esp,0xc
c0010f9f:	68 d8 d8 02 c0       	push   0xc002d8d8
c0010fa4:	e8 e9 74 01 00       	call   c0028492 <LinkedList<UnixFile>::removeFirst()>
c0010fa9:	83 c4 10             	add    esp,0x10
c0010fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010fb0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010fb4:	74 40                	je     c0010ff6 <UnixFile::~UnixFile()+0x92>
c0010fb6:	83 ec 08             	sub    esp,0x8
c0010fb9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fbd:	68 d8 d8 02 c0       	push   0xc002d8d8
c0010fc2:	e8 ef 73 01 00       	call   c00283b6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010fc7:	83 c4 10             	add    esp,0x10
c0010fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fce:	8d 50 01             	lea    edx,[eax+0x1]
c0010fd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fd5:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fda:	0f 94 c0             	sete   al
c0010fdd:	84 c0                	test   al,al
c0010fdf:	74 a7                	je     c0010f88 <UnixFile::~UnixFile()+0x24>
c0010fe1:	83 ec 0c             	sub    esp,0xc
c0010fe4:	68 14 a1 02 c0       	push   0xc002a114
c0010fe9:	e8 7b 8d 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	eb 95                	jmp    c0010f88 <UnixFile::~UnixFile()+0x24>
c0010ff3:	90                   	nop
c0010ff4:	eb 01                	jmp    c0010ff7 <UnixFile::~UnixFile()+0x93>
c0010ff6:	90                   	nop
c0010ff7:	90                   	nop
c0010ff8:	83 c4 1c             	add    esp,0x1c
c0010ffb:	c3                   	ret    

c0010ffc <UnixFile::~UnixFile()>:
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	83 ec 0c             	sub    esp,0xc
c0011002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011006:	e8 59 ff ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c001100b:	83 c4 10             	add    esp,0x10
c001100e:	83 ec 08             	sub    esp,0x8
c0011011:	6a 0c                	push   0xc
c0011013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011017:	e8 09 15 00 00       	call   c0012525 <operator delete(void*, unsigned long)>
c001101c:	83 c4 10             	add    esp,0x10
c001101f:	83 c4 0c             	add    esp,0xc
c0011022:	c3                   	ret    
c0011023:	90                   	nop

c0011024 <ReservedFilename::~ReservedFilename()>:
c0011024:	83 ec 0c             	sub    esp,0xc
c0011027:	ba 58 a1 02 c0       	mov    edx,0xc002a158
c001102c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011030:	89 10                	mov    DWORD PTR [eax],edx
c0011032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011036:	83 ec 0c             	sub    esp,0xc
c0011039:	50                   	push   eax
c001103a:	e8 25 ff ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	90                   	nop
c0011043:	83 c4 0c             	add    esp,0xc
c0011046:	c3                   	ret    
c0011047:	90                   	nop

c0011048 <ReservedFilename::~ReservedFilename()>:
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	83 ec 0c             	sub    esp,0xc
c001104e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011052:	e8 cd ff ff ff       	call   c0011024 <ReservedFilename::~ReservedFilename()>
c0011057:	83 c4 10             	add    esp,0x10
c001105a:	83 ec 08             	sub    esp,0x8
c001105d:	6a 0c                	push   0xc
c001105f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011063:	e8 bd 14 00 00       	call   c0012525 <operator delete(void*, unsigned long)>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	83 c4 0c             	add    esp,0xc
c001106e:	c3                   	ret    

c001106f <getFromFileDescriptor(int)>:
c001106f:	53                   	push   ebx
c0011070:	83 ec 08             	sub    esp,0x8
c0011073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011077:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001107d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011083:	7f 2c                	jg     c00110b1 <getFromFileDescriptor(int)+0x42>
c0011085:	83 ec 0c             	sub    esp,0xc
c0011088:	68 d8 d8 02 c0       	push   0xc002d8d8
c001108d:	e8 f8 73 01 00       	call   c002848a <LinkedList<UnixFile>::getFirstElement()>
c0011092:	83 c4 10             	add    esp,0x10
c0011095:	85 c0                	test   eax,eax
c0011097:	75 04                	jne    c001109d <getFromFileDescriptor(int)+0x2e>
c0011099:	31 c0                	xor    eax,eax
c001109b:	eb 6e                	jmp    c001110b <getFromFileDescriptor(int)+0x9c>
c001109d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110a0:	74 69                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110a2:	52                   	push   edx
c00110a3:	52                   	push   edx
c00110a4:	50                   	push   eax
c00110a5:	68 d8 d8 02 c0       	push   0xc002d8d8
c00110aa:	e8 85 74 01 00       	call   c0028534 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110af:	eb e1                	jmp    c0011092 <getFromFileDescriptor(int)+0x23>
c00110b1:	a1 cc d8 02 c0       	mov    eax,ds:0xc002d8cc
c00110b6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110bc:	74 4d                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110be:	a1 d0 d8 02 c0       	mov    eax,ds:0xc002d8d0
c00110c3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110c9:	74 40                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110cb:	a1 c8 d8 02 c0       	mov    eax,ds:0xc002d8c8
c00110d0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110d6:	74 33                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110d8:	a1 c4 d8 02 c0       	mov    eax,ds:0xc002d8c4
c00110dd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110e3:	74 26                	je     c001110b <getFromFileDescriptor(int)+0x9c>
c00110e5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110eb:	83 f8 08             	cmp    eax,0x8
c00110ee:	77 09                	ja     c00110f9 <getFromFileDescriptor(int)+0x8a>
c00110f0:	8b 04 85 a0 d8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2760]
c00110f7:	eb 12                	jmp    c001110b <getFromFileDescriptor(int)+0x9c>
c00110f9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110ff:	83 fb 08             	cmp    ebx,0x8
c0011102:	77 95                	ja     c0011099 <getFromFileDescriptor(int)+0x2a>
c0011104:	8b 04 9d 60 d8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd27a0]
c001110b:	83 c4 08             	add    esp,0x8
c001110e:	5b                   	pop    ebx
c001110f:	c3                   	ret    

c0011110 <__static_initialization_and_destruction_0(int, int)>:
c0011110:	83 ec 0c             	sub    esp,0xc
c0011113:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011118:	75 34                	jne    c001114e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001111a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011122:	75 2a                	jne    c001114e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011124:	83 ec 0c             	sub    esp,0xc
c0011127:	68 d8 d8 02 c0       	push   0xc002d8d8
c001112c:	e8 43 72 01 00       	call   c0028374 <LinkedList<UnixFile>::LinkedList()>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	83 ec 04             	sub    esp,0x4
c0011137:	68 58 c5 02 c0       	push   0xc002c558
c001113c:	68 d8 d8 02 c0       	push   0xc002d8d8
c0011141:	68 72 83 02 c0       	push   0xc0028372
c0011146:	e8 54 13 00 00       	call   c001249f <__cxa_atexit>
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	90                   	nop
c001114f:	83 c4 0c             	add    esp,0xc
c0011152:	c3                   	ret    

c0011153 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011153:	83 ec 0c             	sub    esp,0xc
c0011156:	83 ec 08             	sub    esp,0x8
c0011159:	68 ff ff 00 00       	push   0xffff
c001115e:	6a 01                	push   0x1
c0011160:	e8 ab ff ff ff       	call   c0011110 <__static_initialization_and_destruction_0(int, int)>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	83 c4 0c             	add    esp,0xc
c001116b:	c3                   	ret    

c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001116c:	53                   	push   ebx
c001116d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011171:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011175:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001117b:	89 c8                	mov    eax,ecx
c001117d:	d1 e8                	shr    eax,1
c001117f:	03 05 28 c7 02 c0    	add    eax,DWORD PTR ds:0xc002c728
c0011185:	83 e1 01             	and    ecx,0x1
c0011188:	8a 10                	mov    dl,BYTE PTR [eax]
c001118a:	75 09                	jne    c0011195 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001118c:	83 e2 f0             	and    edx,0xfffffff0
c001118f:	09 da                	or     edx,ebx
c0011191:	88 10                	mov    BYTE PTR [eax],dl
c0011193:	5b                   	pop    ebx
c0011194:	c3                   	ret    
c0011195:	c1 e3 04             	shl    ebx,0x4
c0011198:	83 e2 0f             	and    edx,0xf
c001119b:	09 da                	or     edx,ebx
c001119d:	88 10                	mov    BYTE PTR [eax],dl
c001119f:	5b                   	pop    ebx
c00111a0:	c3                   	ret    

c00111a1 <Virt::getPageState(unsigned long)>:
c00111a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111a5:	8b 0d 28 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c728
c00111ab:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111b1:	89 d0                	mov    eax,edx
c00111b3:	d1 e8                	shr    eax,1
c00111b5:	83 e2 01             	and    edx,0x1
c00111b8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111bb:	75 04                	jne    c00111c1 <Virt::getPageState(unsigned long)+0x20>
c00111bd:	83 e0 0f             	and    eax,0xf
c00111c0:	c3                   	ret    
c00111c1:	c0 e8 04             	shr    al,0x4
c00111c4:	c3                   	ret    

c00111c5 <Virt::allocateKernelVirtualPages(int)>:
c00111c5:	55                   	push   ebp
c00111c6:	31 ed                	xor    ebp,ebp
c00111c8:	57                   	push   edi
c00111c9:	56                   	push   esi
c00111ca:	53                   	push   ebx
c00111cb:	31 db                	xor    ebx,ebx
c00111cd:	83 ec 1c             	sub    esp,0x1c
c00111d0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111d4:	8b 3d 24 c7 02 c0    	mov    edi,DWORD PTR ds:0xc002c724
c00111da:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111df:	57                   	push   edi
c00111e0:	e8 bc ff ff ff       	call   c00111a1 <Virt::getPageState(unsigned long)>
c00111e5:	5a                   	pop    edx
c00111e6:	84 c0                	test   al,al
c00111e8:	75 3a                	jne    c0011224 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111ea:	85 db                	test   ebx,ebx
c00111ec:	75 02                	jne    c00111f0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111ee:	89 fd                	mov    ebp,edi
c00111f0:	43                   	inc    ebx
c00111f1:	39 f3                	cmp    ebx,esi
c00111f3:	74 5a                	je     c001124f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111f5:	47                   	inc    edi
c00111f6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111fc:	76 31                	jbe    c001122f <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111fe:	c7 05 24 c7 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c724,0xc8000
c0011208:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001120d:	75 28                	jne    c0011237 <Virt::allocateKernelVirtualPages(int)+0x72>
c001120f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011214:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011219:	57                   	push   edi
c001121a:	e8 82 ff ff ff       	call   c00111a1 <Virt::getPageState(unsigned long)>
c001121f:	5a                   	pop    edx
c0011220:	84 c0                	test   al,al
c0011222:	74 c6                	je     c00111ea <Virt::allocateKernelVirtualPages(int)+0x25>
c0011224:	31 db                	xor    ebx,ebx
c0011226:	47                   	inc    edi
c0011227:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001122d:	77 cf                	ja     c00111fe <Virt::allocateKernelVirtualPages(int)+0x39>
c001122f:	89 3d 24 c7 02 c0    	mov    DWORD PTR ds:0xc002c724,edi
c0011235:	eb a8                	jmp    c00111df <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011237:	83 ec 0c             	sub    esp,0xc
c001123a:	68 6c a1 02 c0       	push   0xc002a16c
c001123f:	e8 25 8b 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0011244:	8b 3d 24 c7 02 c0    	mov    edi,DWORD PTR ds:0xc002c724
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	eb 90                	jmp    c00111df <Virt::allocateKernelVirtualPages(int)+0x1a>
c001124f:	89 2d 24 c7 02 c0    	mov    DWORD PTR ds:0xc002c724,ebp
c0011255:	4b                   	dec    ebx
c0011256:	74 5f                	je     c00112b7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011258:	85 f6                	test   esi,esi
c001125a:	74 3d                	je     c0011299 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001125c:	89 e8                	mov    eax,ebp
c001125e:	31 db                	xor    ebx,ebx
c0011260:	8d 7e ff             	lea    edi,[esi-0x1]
c0011263:	eb 14                	jmp    c0011279 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011265:	6a 01                	push   0x1
c0011267:	43                   	inc    ebx
c0011268:	50                   	push   eax
c0011269:	e8 fe fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126e:	58                   	pop    eax
c001126f:	39 f3                	cmp    ebx,esi
c0011271:	5a                   	pop    edx
c0011272:	74 25                	je     c0011299 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011274:	a1 24 c7 02 c0       	mov    eax,ds:0xc002c724
c0011279:	8d 50 01             	lea    edx,[eax+0x1]
c001127c:	85 db                	test   ebx,ebx
c001127e:	89 15 24 c7 02 c0    	mov    DWORD PTR ds:0xc002c724,edx
c0011284:	74 20                	je     c00112a6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011286:	39 df                	cmp    edi,ebx
c0011288:	75 db                	jne    c0011265 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001128a:	6a 03                	push   0x3
c001128c:	43                   	inc    ebx
c001128d:	50                   	push   eax
c001128e:	e8 d9 fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011293:	59                   	pop    ecx
c0011294:	39 f3                	cmp    ebx,esi
c0011296:	58                   	pop    eax
c0011297:	75 db                	jne    c0011274 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011299:	83 c4 1c             	add    esp,0x1c
c001129c:	89 e8                	mov    eax,ebp
c001129e:	5b                   	pop    ebx
c001129f:	c1 e0 0c             	shl    eax,0xc
c00112a2:	5e                   	pop    esi
c00112a3:	5f                   	pop    edi
c00112a4:	5d                   	pop    ebp
c00112a5:	c3                   	ret    
c00112a6:	6a 02                	push   0x2
c00112a8:	bb 01 00 00 00       	mov    ebx,0x1
c00112ad:	50                   	push   eax
c00112ae:	e8 b9 fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112b3:	58                   	pop    eax
c00112b4:	5a                   	pop    edx
c00112b5:	eb bd                	jmp    c0011274 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112b7:	6a 04                	push   0x4
c00112b9:	8d 45 01             	lea    eax,[ebp+0x1]
c00112bc:	55                   	push   ebp
c00112bd:	a3 24 c7 02 c0       	mov    ds:0xc002c724,eax
c00112c2:	e8 a5 fe ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c7:	59                   	pop    ecx
c00112c8:	89 e8                	mov    eax,ebp
c00112ca:	5b                   	pop    ebx
c00112cb:	c1 e0 0c             	shl    eax,0xc
c00112ce:	83 c4 1c             	add    esp,0x1c
c00112d1:	5b                   	pop    ebx
c00112d2:	5e                   	pop    esi
c00112d3:	5f                   	pop    edi
c00112d4:	5d                   	pop    ebp
c00112d5:	c3                   	ret    

c00112d6 <Virt::freeSwapfilePage(unsigned long)>:
c00112d6:	53                   	push   ebx
c00112d7:	8b 15 ec d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8ec
c00112dd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112e1:	b8 01 00 00 00       	mov    eax,0x1
c00112e6:	89 cb                	mov    ebx,ecx
c00112e8:	d3 e0                	shl    eax,cl
c00112ea:	c1 eb 05             	shr    ebx,0x5
c00112ed:	f7 d0                	not    eax
c00112ef:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112f2:	5b                   	pop    ebx
c00112f3:	c3                   	ret    

c00112f4 <Virt::swapIDToSector(unsigned long)>:
c00112f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112f8:	0f af 05 2c c7 02 c0 	imul   eax,DWORD PTR ds:0xc002c72c
c00112ff:	03 05 34 c7 02 c0    	add    eax,DWORD PTR ds:0xc002c734
c0011305:	c3                   	ret    

c0011306 <Virt::allocateSwapfilePage()>:
c0011306:	55                   	push   ebp
c0011307:	31 d2                	xor    edx,edx
c0011309:	57                   	push   edi
c001130a:	56                   	push   esi
c001130b:	53                   	push   ebx
c001130c:	83 ec 0c             	sub    esp,0xc
c001130f:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0011315:	a1 30 c7 02 c0       	mov    eax,ds:0xc002c730
c001131a:	f7 f1                	div    ecx
c001131c:	39 0d 30 c7 02 c0    	cmp    DWORD PTR ds:0xc002c730,ecx
c0011322:	72 2d                	jb     c0011351 <Virt::allocateSwapfilePage()+0x4b>
c0011324:	8b 35 ec d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8ec
c001132a:	8b 16                	mov    edx,DWORD PTR [esi]
c001132c:	f6 c2 01             	test   dl,0x1
c001132f:	74 3c                	je     c001136d <Virt::allocateSwapfilePage()+0x67>
c0011331:	31 c9                	xor    ecx,ecx
c0011333:	bf 01 00 00 00       	mov    edi,0x1
c0011338:	eb 12                	jmp    c001134c <Virt::allocateSwapfilePage()+0x46>
c001133a:	89 fd                	mov    ebp,edi
c001133c:	89 ca                	mov    edx,ecx
c001133e:	d3 e5                	shl    ebp,cl
c0011340:	c1 ea 05             	shr    edx,0x5
c0011343:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011346:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011348:	85 ea                	test   edx,ebp
c001134a:	74 2a                	je     c0011376 <Virt::allocateSwapfilePage()+0x70>
c001134c:	41                   	inc    ecx
c001134d:	39 c8                	cmp    eax,ecx
c001134f:	77 e9                	ja     c001133a <Virt::allocateSwapfilePage()+0x34>
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	68 f3 a2 02 c0       	push   0xc002a2f3
c0011359:	e8 0b 8a 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	31 c9                	xor    ecx,ecx
c0011363:	83 c4 0c             	add    esp,0xc
c0011366:	89 c8                	mov    eax,ecx
c0011368:	5b                   	pop    ebx
c0011369:	5e                   	pop    esi
c001136a:	5f                   	pop    edi
c001136b:	5d                   	pop    ebp
c001136c:	c3                   	ret    
c001136d:	89 f3                	mov    ebx,esi
c001136f:	bd 01 00 00 00       	mov    ebp,0x1
c0011374:	31 c9                	xor    ecx,ecx
c0011376:	09 ea                	or     edx,ebp
c0011378:	89 c8                	mov    eax,ecx
c001137a:	89 13                	mov    DWORD PTR [ebx],edx
c001137c:	83 c4 0c             	add    esp,0xc
c001137f:	5b                   	pop    ebx
c0011380:	5e                   	pop    esi
c0011381:	5f                   	pop    edi
c0011382:	5d                   	pop    ebp
c0011383:	c3                   	ret    

c0011384 <Virt::virtualMemorySetup()>:
c0011384:	53                   	push   ebx
c0011385:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001138a:	6a 0f                	push   0xf
c001138c:	53                   	push   ebx
c001138d:	43                   	inc    ebx
c001138e:	e8 d9 fd ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011393:	58                   	pop    eax
c0011394:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001139a:	5a                   	pop    edx
c001139b:	75 ed                	jne    c001138a <Virt::virtualMemorySetup()+0x6>
c001139d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113a2:	6a 00                	push   0x0
c00113a4:	53                   	push   ebx
c00113a5:	43                   	inc    ebx
c00113a6:	e8 c1 fd ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ab:	59                   	pop    ecx
c00113ac:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113b2:	58                   	pop    eax
c00113b3:	75 ed                	jne    c00113a2 <Virt::virtualMemorySetup()+0x1e>
c00113b5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113ba:	6a 0f                	push   0xf
c00113bc:	53                   	push   ebx
c00113bd:	43                   	inc    ebx
c00113be:	e8 a9 fd ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113c3:	58                   	pop    eax
c00113c4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113ca:	5a                   	pop    edx
c00113cb:	75 ed                	jne    c00113ba <Virt::virtualMemorySetup()+0x36>
c00113cd:	5b                   	pop    ebx
c00113ce:	c3                   	ret    

c00113cf <Virt::setupPageSwapping(int)>:
c00113cf:	57                   	push   edi
c00113d0:	56                   	push   esi
c00113d1:	53                   	push   ebx
c00113d2:	83 ec 1c             	sub    esp,0x1c
c00113d5:	68 14 01 00 00       	push   0x114
c00113da:	e8 bd e1 ff ff       	call   c000f59c <malloc>
c00113df:	83 c4 0c             	add    esp,0xc
c00113e2:	89 c6                	mov    esi,eax
c00113e4:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c00113ea:	68 0a a3 02 c0       	push   0xc002a30a
c00113ef:	50                   	push   eax
c00113f0:	e8 67 17 00 00       	call   c0012b5c <File::File(char const*, Process*)>
c00113f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f8:	e8 3b 19 00 00       	call   c0012d38 <File::unlink()>
c00113fd:	58                   	pop    eax
c00113fe:	5a                   	pop    edx
c00113ff:	6a 12                	push   0x12
c0011401:	56                   	push   esi
c0011402:	e8 b9 17 00 00       	call   c0012bc0 <File::open(FileOpenMode)>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	85 c0                	test   eax,eax
c001140c:	0f 85 2f 01 00 00    	jne    c0011541 <Virt::setupPageSwapping(int)+0x172>
c0011412:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011416:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001141e:	c1 e3 08             	shl    ebx,0x8
c0011421:	83 ec 0c             	sub    esp,0xc
c0011424:	68 00 00 01 00       	push   0x10000
c0011429:	e8 6e e1 ff ff       	call   c000f59c <malloc>
c001142e:	83 c4 0c             	add    esp,0xc
c0011431:	89 c7                	mov    edi,eax
c0011433:	68 00 00 01 00       	push   0x10000
c0011438:	68 ee 00 00 00       	push   0xee
c001143d:	50                   	push   eax
c001143e:	e8 0d f3 fe ff       	call   c0000750 <memset>
c0011443:	83 c4 10             	add    esp,0x10
c0011446:	85 db                	test   ebx,ebx
c0011448:	79 03                	jns    c001144d <Virt::setupPageSwapping(int)+0x7e>
c001144a:	83 c3 0f             	add    ebx,0xf
c001144d:	c1 fb 04             	sar    ebx,0x4
c0011450:	4b                   	dec    ebx
c0011451:	83 fb ff             	cmp    ebx,0xffffffff
c0011454:	74 41                	je     c0011497 <Virt::setupPageSwapping(int)+0xc8>
c0011456:	83 ec 0c             	sub    esp,0xc
c0011459:	8b 06                	mov    eax,DWORD PTR [esi]
c001145b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001145f:	52                   	push   edx
c0011460:	57                   	push   edi
c0011461:	6a 00                	push   0x0
c0011463:	68 00 00 01 00       	push   0x10000
c0011468:	56                   	push   esi
c0011469:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001146c:	83 c4 20             	add    esp,0x20
c001146f:	85 c0                	test   eax,eax
c0011471:	0f 85 b5 00 00 00    	jne    c001152c <Virt::setupPageSwapping(int)+0x15d>
c0011477:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c001147f:	74 cf                	je     c0011450 <Virt::setupPageSwapping(int)+0x81>
c0011481:	83 ec 0c             	sub    esp,0xc
c0011484:	4b                   	dec    ebx
c0011485:	68 3c a3 02 c0       	push   0xc002a33c
c001148a:	e8 da 88 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	83 fb ff             	cmp    ebx,0xffffffff
c0011495:	75 bf                	jne    c0011456 <Virt::setupPageSwapping(int)+0x87>
c0011497:	83 ec 0c             	sub    esp,0xc
c001149a:	56                   	push   esi
c001149b:	e8 7e 17 00 00       	call   c0012c1e <File::close()>
c00114a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114a3:	e8 14 e1 ff ff       	call   c000f5bc <rfree>
c00114a8:	83 c4 10             	add    esp,0x10
c00114ab:	85 f6                	test   esi,esi
c00114ad:	74 0c                	je     c00114bb <Virt::setupPageSwapping(int)+0xec>
c00114af:	83 ec 0c             	sub    esp,0xc
c00114b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00114b4:	56                   	push   esi
c00114b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	83 ec 08             	sub    esp,0x8
c00114be:	a1 88 dd 02 c0       	mov    eax,ds:0xc002dd88
c00114c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00114cb:	68 0a a3 02 c0       	push   0xc002a30a
c00114d0:	50                   	push   eax
c00114d1:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d8:	c6 05 38 c7 02 c0 43 	mov    BYTE PTR ds:0xc002c738,0x43
c00114df:	c1 e2 0b             	shl    edx,0xb
c00114e2:	a3 34 c7 02 c0       	mov    ds:0xc002c734,eax
c00114e7:	89 15 30 c7 02 c0    	mov    DWORD PTR ds:0xc002c730,edx
c00114ed:	c7 05 2c c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x8
c00114f7:	c1 ea 08             	shr    edx,0x8
c00114fa:	89 14 24             	mov    DWORD PTR [esp],edx
c00114fd:	e8 9a e0 ff ff       	call   c000f59c <malloc>
c0011502:	83 c4 0c             	add    esp,0xc
c0011505:	89 c1                	mov    ecx,eax
c0011507:	a3 ec d8 02 c0       	mov    ds:0xc002d8ec,eax
c001150c:	31 d2                	xor    edx,edx
c001150e:	a1 30 c7 02 c0       	mov    eax,ds:0xc002c730
c0011513:	f7 35 2c c7 02 c0    	div    DWORD PTR ds:0xc002c72c
c0011519:	c1 e8 05             	shr    eax,0x5
c001151c:	50                   	push   eax
c001151d:	6a 00                	push   0x0
c001151f:	51                   	push   ecx
c0011520:	e8 2b f2 fe ff       	call   c0000750 <memset>
c0011525:	83 c4 20             	add    esp,0x20
c0011528:	5b                   	pop    ebx
c0011529:	5e                   	pop    esi
c001152a:	5f                   	pop    edi
c001152b:	c3                   	ret    
c001152c:	83 ec 0c             	sub    esp,0xc
c001152f:	68 3c a3 02 c0       	push   0xc002a33c
c0011534:	e8 30 88 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	e9 36 ff ff ff       	jmp    c0011477 <Virt::setupPageSwapping(int)+0xa8>
c0011541:	83 ec 0c             	sub    esp,0xc
c0011544:	68 21 a3 02 c0       	push   0xc002a321
c0011549:	e8 1b 88 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	e9 bc fe ff ff       	jmp    c0011412 <Virt::setupPageSwapping(int)+0x43>

c0011556 <VAS::VAS()>:
c0011556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011565:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001156c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011570:	a3 f0 d8 02 c0       	mov    ds:0xc002d8f0,eax
c0011575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011579:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001157d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011581:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011588:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001158f:	90                   	nop
c0011590:	c3                   	ret    
c0011591:	90                   	nop

c0011592 <VAS::VAS(VAS*)>:
c0011592:	83 ec 0c             	sub    esp,0xc
c0011595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011599:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115ab:	83 ec 0c             	sub    esp,0xc
c00115ae:	68 8c a1 02 c0       	push   0xc002a18c
c00115b3:	e8 b1 87 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c00115b8:	83 c4 10             	add    esp,0x10
c00115bb:	90                   	nop
c00115bc:	83 c4 0c             	add    esp,0xc
c00115bf:	c3                   	ret    

c00115c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00115c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115c4:	89 c2                	mov    edx,eax
c00115c6:	c1 e8 0a             	shr    eax,0xa
c00115c9:	c1 ea 16             	shr    edx,0x16
c00115cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115d1:	19 c9                	sbb    ecx,ecx
c00115d3:	c1 e2 0c             	shl    edx,0xc
c00115d6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115dc:	25 fc 0f 00 00       	and    eax,0xffc
c00115e1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115e8:	01 d0                	add    eax,edx
c00115ea:	c3                   	ret    
c00115eb:	90                   	nop

c00115ec <VAS::getPageTableEntry(unsigned long)>:
c00115ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115f0:	89 ca                	mov    edx,ecx
c00115f2:	c1 e9 0a             	shr    ecx,0xa
c00115f5:	c1 ea 16             	shr    edx,0x16
c00115f8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115fe:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011604:	c1 e0 0c             	shl    eax,0xc
c0011607:	8d 04 08             	lea    eax,[eax+ecx*1]
c001160a:	c3                   	ret    

c001160b <Virt::freeKernelVirtualPages(unsigned long)>:
c001160b:	57                   	push   edi
c001160c:	56                   	push   esi
c001160d:	be 01 00 00 00       	mov    esi,0x1
c0011612:	53                   	push   ebx
c0011613:	83 ec 10             	sub    esp,0x10
c0011616:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001161a:	c1 eb 0c             	shr    ebx,0xc
c001161d:	eb 3f                	jmp    c001165e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001161f:	83 ec 08             	sub    esp,0x8
c0011622:	57                   	push   edi
c0011623:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c0011629:	e8 be ff ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	8b 00                	mov    eax,DWORD PTR [eax]
c0011633:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011637:	f6 c4 04             	test   ah,0x4
c001163a:	75 5f                	jne    c001169b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001163c:	80 fa 04             	cmp    dl,0x4
c001163f:	74 78                	je     c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011641:	80 fa 02             	cmp    dl,0x2
c0011644:	0f 84 88 00 00 00    	je     c00116d2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001164a:	80 fa 03             	cmp    dl,0x3
c001164d:	0f 84 ad 00 00 00    	je     c0011700 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011653:	fe ca                	dec    dl
c0011655:	0f 84 92 00 00 00    	je     c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001165b:	43                   	inc    ebx
c001165c:	31 f6                	xor    esi,esi
c001165e:	53                   	push   ebx
c001165f:	89 df                	mov    edi,ebx
c0011661:	e8 3b fb ff ff       	call   c00111a1 <Virt::getPageState(unsigned long)>
c0011666:	c1 e7 0c             	shl    edi,0xc
c0011669:	59                   	pop    ecx
c001166a:	84 c0                	test   al,al
c001166c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011670:	75 ad                	jne    c001161f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011672:	83 ec 0c             	sub    esp,0xc
c0011675:	68 42 a3 02 c0       	push   0xc002a342
c001167a:	e8 ea 86 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c001167f:	58                   	pop    eax
c0011680:	5a                   	pop    edx
c0011681:	57                   	push   edi
c0011682:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c0011688:	e8 5f ff ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	8b 00                	mov    eax,DWORD PTR [eax]
c0011692:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011696:	f6 c4 04             	test   ah,0x4
c0011699:	74 c0                	je     c001165b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001169b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001169f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	50                   	push   eax
c00116a8:	e8 38 e2 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00116ad:	83 c4 10             	add    esp,0x10
c00116b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116b4:	80 fa 04             	cmp    dl,0x4
c00116b7:	75 88                	jne    c0011641 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116b9:	89 f0                	mov    eax,esi
c00116bb:	84 c0                	test   al,al
c00116bd:	75 47                	jne    c0011706 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00116bf:	c7 44 24 20 b0 a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a1b0
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	5b                   	pop    ebx
c00116cb:	5e                   	pop    esi
c00116cc:	5f                   	pop    edi
c00116cd:	e9 97 86 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c00116d2:	89 f0                	mov    eax,esi
c00116d4:	84 c0                	test   al,al
c00116d6:	75 15                	jne    c00116ed <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116d8:	83 ec 0c             	sub    esp,0xc
c00116db:	68 5e a3 02 c0       	push   0xc002a35e
c00116e0:	e8 84 86 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c00116e5:	83 c4 10             	add    esp,0x10
c00116e8:	e9 6e ff ff ff       	jmp    c001165b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116ed:	83 ec 08             	sub    esp,0x8
c00116f0:	6a 00                	push   0x0
c00116f2:	53                   	push   ebx
c00116f3:	e8 74 fa ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	e9 5b ff ff ff       	jmp    c001165b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011700:	89 f0                	mov    eax,esi
c0011702:	84 c0                	test   al,al
c0011704:	75 15                	jne    c001171b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011706:	83 ec 08             	sub    esp,0x8
c0011709:	6a 00                	push   0x0
c001170b:	53                   	push   ebx
c001170c:	e8 5b fa ff ff       	call   c001116c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011711:	83 c4 10             	add    esp,0x10
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	5b                   	pop    ebx
c0011718:	5e                   	pop    esi
c0011719:	5f                   	pop    edi
c001171a:	c3                   	ret    
c001171b:	c7 44 24 20 7a a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a37a
c0011723:	83 c4 10             	add    esp,0x10
c0011726:	5b                   	pop    ebx
c0011727:	5e                   	pop    esi
c0011728:	5f                   	pop    edi
c0011729:	e9 3b 86 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>

c001172e <VAS::freeAllocatedPages(unsigned long)>:
c001172e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011736:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001173a:	74 09                	je     c0011745 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001173c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011740:	e9 c6 fe ff ff       	jmp    c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011745:	c7 44 24 04 d4 a1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a1d4
c001174d:	e9 ab 0e 00 00       	jmp    c00125fd <Dbg::kprintf(char const*, ...)>

c0011752 <VAS::virtualToPhysical(unsigned long)>:
c0011752:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011756:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001175a:	e8 8d fe ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001175f:	5a                   	pop    edx
c0011760:	8b 00                	mov    eax,DWORD PTR [eax]
c0011762:	59                   	pop    ecx
c0011763:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011768:	c3                   	ret    
c0011769:	90                   	nop

c001176a <VAS::reflagRange(unsigned long, int, int, int)>:
c001176a:	55                   	push   ebp
c001176b:	57                   	push   edi
c001176c:	56                   	push   esi
c001176d:	53                   	push   ebx
c001176e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011772:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011776:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001177a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001177e:	85 db                	test   ebx,ebx
c0011780:	7e 22                	jle    c00117a4 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011782:	c1 e3 0c             	shl    ebx,0xc
c0011785:	01 f3                	add    ebx,esi
c0011787:	56                   	push   esi
c0011788:	81 c6 00 10 00 00    	add    esi,0x1000
c001178e:	55                   	push   ebp
c001178f:	e8 58 fe ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0011794:	5a                   	pop    edx
c0011795:	59                   	pop    ecx
c0011796:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011798:	21 f9                	and    ecx,edi
c001179a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001179e:	39 f3                	cmp    ebx,esi
c00117a0:	89 08                	mov    DWORD PTR [eax],ecx
c00117a2:	75 e3                	jne    c0011787 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117a4:	5b                   	pop    ebx
c00117a5:	5e                   	pop    esi
c00117a6:	5f                   	pop    edi
c00117a7:	5d                   	pop    ebp
c00117a8:	c3                   	ret    
c00117a9:	90                   	nop

c00117aa <VAS::setToWriteCombining(unsigned long, int)>:
c00117aa:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00117af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117b5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117bc:	75 01                	jne    c00117bf <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00117be:	c3                   	ret    
c00117bf:	68 80 00 00 00       	push   0x80
c00117c4:	6a ff                	push   0xffffffff
c00117c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117d2:	e8 93 ff ff ff       	call   c001176a <VAS::reflagRange(unsigned long, int, int, int)>
c00117d7:	83 c4 14             	add    esp,0x14
c00117da:	c3                   	ret    
c00117db:	90                   	nop

c00117dc <VAS::mapOtherVASIn(bool, VAS*)>:
c00117dc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ec:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117ef:	19 c0                	sbb    eax,eax
c00117f1:	83 ca 03             	or     edx,0x3
c00117f4:	83 e0 fc             	and    eax,0xfffffffc
c00117f7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117fe:	0f 20 d8             	mov    eax,cr3
c0011801:	0f 22 d8             	mov    cr3,eax
c0011804:	c3                   	ret    
c0011805:	90                   	nop

c0011806 <VAS::~VAS()>:
c0011806:	83 ec 2c             	sub    esp,0x2c
c0011809:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011811:	fa                   	cli    
c0011812:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0011817:	40                   	inc    eax
c0011818:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001181d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011822:	8b 00                	mov    eax,DWORD PTR [eax]
c0011824:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011827:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001182d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011831:	6a 01                	push   0x1
c0011833:	50                   	push   eax
c0011834:	e8 a3 ff ff ff       	call   c00117dc <VAS::mapOtherVASIn(bool, VAS*)>
c0011839:	83 c4 0c             	add    esp,0xc
c001183c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011844:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001184c:	0f 8f d4 00 00 00    	jg     c0011926 <VAS::~VAS()+0x120>
c0011852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011859:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001185d:	c1 e2 02             	shl    edx,0x2
c0011860:	01 d0                	add    eax,edx
c0011862:	8b 00                	mov    eax,DWORD PTR [eax]
c0011864:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186c:	83 e0 01             	and    eax,0x1
c001186f:	0f 84 a8 00 00 00    	je     c001191d <VAS::~VAS()+0x117>
c0011875:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001187d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011885:	7f 72                	jg     c00118f9 <VAS::~VAS()+0xf3>
c0011887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001188b:	c1 e0 0a             	shl    eax,0xa
c001188e:	89 c2                	mov    edx,eax
c0011890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011894:	01 d0                	add    eax,edx
c0011896:	c1 e0 0c             	shl    eax,0xc
c0011899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001189d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118a7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118b1:	6a 01                	push   0x1
c00118b3:	50                   	push   eax
c00118b4:	e8 07 fd ff ff       	call   c00115c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118b9:	83 c4 0c             	add    esp,0xc
c00118bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ce:	25 01 04 00 00       	and    eax,0x401
c00118d3:	3d 01 04 00 00       	cmp    eax,0x401
c00118d8:	75 19                	jne    c00118f3 <VAS::~VAS()+0xed>
c00118da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118de:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e3:	83 ec 0c             	sub    esp,0xc
c00118e6:	50                   	push   eax
c00118e7:	e8 f9 df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118f7:	eb 84                	jmp    c001187d <VAS::~VAS()+0x77>
c00118f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118fd:	25 00 04 00 00       	and    eax,0x400
c0011902:	74 19                	je     c001191d <VAS::~VAS()+0x117>
c0011904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011908:	25 00 f0 ff ff       	and    eax,0xfffff000
c001190d:	83 ec 0c             	sub    esp,0xc
c0011910:	50                   	push   eax
c0011911:	e8 cf df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011916:	83 c4 10             	add    esp,0x10
c0011919:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001191d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011921:	e9 1e ff ff ff       	jmp    c0011844 <VAS::~VAS()+0x3e>
c0011926:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001192a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001192d:	83 ec 0c             	sub    esp,0xc
c0011930:	50                   	push   eax
c0011931:	e8 d5 fc ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001193d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011940:	83 ec 0c             	sub    esp,0xc
c0011943:	50                   	push   eax
c0011944:	e8 9c df ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c0011949:	83 c4 10             	add    esp,0x10
c001194c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011950:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011954:	c1 e0 02             	shl    eax,0x2
c0011957:	83 ec 08             	sub    esp,0x8
c001195a:	50                   	push   eax
c001195b:	68 f8 a1 02 c0       	push   0xc002a1f8
c0011960:	e8 98 0c 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001196d:	48                   	dec    eax
c001196e:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0011973:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0011978:	85 c0                	test   eax,eax
c001197a:	75 01                	jne    c001197d <VAS::~VAS()+0x177>
c001197c:	fb                   	sti    
c001197d:	90                   	nop
c001197e:	83 c4 2c             	add    esp,0x2c
c0011981:	c3                   	ret    

c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011982:	55                   	push   ebp
c0011983:	57                   	push   edi
c0011984:	56                   	push   esi
c0011985:	53                   	push   ebx
c0011986:	83 ec 1c             	sub    esp,0x1c
c0011989:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001198d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011991:	f7 44 24 3c 00 08 00 00 	test   DWORD PTR [esp+0x3c],0x800
c0011999:	0f 85 86 00 00 00    	jne    c0011a25 <VAS::mapPage(unsigned long, unsigned long, int)+0xa3>
c001199f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119a5:	77 08                	ja     c00119af <VAS::mapPage(unsigned long, unsigned long, int)+0x2d>
c00119a7:	0f 20 d8             	mov    eax,cr3
c00119aa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119ad:	75 47                	jne    c00119f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x74>
c00119af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119b3:	09 d8                	or     eax,ebx
c00119b5:	a9 ff 0f 00 00       	test   eax,0xfff
c00119ba:	75 57                	jne    c0011a13 <VAS::mapPage(unsigned long, unsigned long, int)+0x91>
c00119bc:	89 de                	mov    esi,ebx
c00119be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119c1:	c1 ee 16             	shr    esi,0x16
c00119c4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119cb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00119cf:	74 69                	je     c0011a3a <VAS::mapPage(unsigned long, unsigned long, int)+0xb8>
c00119d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119d5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119db:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119df:	c1 e6 0c             	shl    esi,0xc
c00119e2:	c1 eb 0a             	shr    ebx,0xa
c00119e5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119eb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	5b                   	pop    ebx
c00119f2:	5e                   	pop    esi
c00119f3:	5f                   	pop    edi
c00119f4:	5d                   	pop    ebp
c00119f5:	c3                   	ret    
c00119f6:	83 ec 0c             	sub    esp,0xc
c00119f9:	68 18 a2 02 c0       	push   0xc002a218
c00119fe:	e8 fa 0b 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0011a03:	83 c4 10             	add    esp,0x10
c0011a06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a0a:	09 d8                	or     eax,ebx
c0011a0c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a11:	74 a9                	je     c00119bc <VAS::mapPage(unsigned long, unsigned long, int)+0x3a>
c0011a13:	83 ec 0c             	sub    esp,0xc
c0011a16:	68 80 a2 02 c0       	push   0xc002a280
c0011a1b:	e8 49 83 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0011a20:	83 c4 10             	add    esp,0x10
c0011a23:	eb 97                	jmp    c00119bc <VAS::mapPage(unsigned long, unsigned long, int)+0x3a>
c0011a25:	83 ec 0c             	sub    esp,0xc
c0011a28:	68 94 a3 02 c0       	push   0xc002a394
c0011a2d:	e8 cb 0b 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	e9 65 ff ff ff       	jmp    c001199f <VAS::mapPage(unsigned long, unsigned long, int)+0x1d>
c0011a3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a3e:	e8 fd de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011a43:	83 ec 0c             	sub    esp,0xc
c0011a46:	89 c5                	mov    ebp,eax
c0011a48:	8b 0d f0 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8f0
c0011a4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a52:	6a 01                	push   0x1
c0011a54:	e8 6c f7 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011a59:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a60:	6a 01                	push   0x1
c0011a62:	50                   	push   eax
c0011a63:	55                   	push   ebp
c0011a64:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a6a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a6e:	51                   	push   ecx
c0011a6f:	e8 26 02 00 00       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a74:	83 c4 1c             	add    esp,0x1c
c0011a77:	68 00 10 00 00       	push   0x1000
c0011a7c:	6a 00                	push   0x0
c0011a7e:	50                   	push   eax
c0011a7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a83:	e8 c8 ec fe ff       	call   c0000750 <memset>
c0011a88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a8c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a8f:	e8 77 fb ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011a94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a98:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a9b:	83 c4 10             	add    esp,0x10
c0011a9e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011aa1:	e9 2b ff ff ff       	jmp    c00119d1 <VAS::mapPage(unsigned long, unsigned long, int)+0x4f>

c0011aa6 <VAS::allocatePages(int, int)>:
c0011aa6:	55                   	push   ebp
c0011aa7:	57                   	push   edi
c0011aa8:	56                   	push   esi
c0011aa9:	53                   	push   ebx
c0011aaa:	83 ec 1c             	sub    esp,0x1c
c0011aad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ab1:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011ab6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011abc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ac2:	83 e0 01             	and    eax,0x1
c0011ac5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ac9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011acd:	0f 85 cc 00 00 00    	jne    c0011b9f <VAS::allocatePages(int, int)+0xf9>
c0011ad3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ad6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ada:	85 c0                	test   eax,eax
c0011adc:	0f 84 a1 00 00 00    	je     c0011b83 <VAS::allocatePages(int, int)+0xdd>
c0011ae2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ae6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aea:	c1 e6 0c             	shl    esi,0xc
c0011aed:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011af1:	85 c0                	test   eax,eax
c0011af3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011af6:	7e 33                	jle    c0011b2b <VAS::allocatePages(int, int)+0x85>
c0011af8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011afc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b00:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b06:	e8 35 de ff ff       	call   c000f940 <Phys::allocatePage()>
c0011b0b:	55                   	push   ebp
c0011b0c:	53                   	push   ebx
c0011b0d:	50                   	push   eax
c0011b0e:	57                   	push   edi
c0011b0f:	e8 6e fe ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b14:	83 c4 10             	add    esp,0x10
c0011b17:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b1c:	74 03                	je     c0011b21 <VAS::allocatePages(int, int)+0x7b>
c0011b1e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b21:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b27:	39 de                	cmp    esi,ebx
c0011b29:	75 db                	jne    c0011b06 <VAS::allocatePages(int, int)+0x60>
c0011b2b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b30:	75 12                	jne    c0011b44 <VAS::allocatePages(int, int)+0x9e>
c0011b32:	0f 20 d8             	mov    eax,cr3
c0011b35:	0f 22 d8             	mov    cr3,eax
c0011b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b3c:	83 c4 1c             	add    esp,0x1c
c0011b3f:	5b                   	pop    ebx
c0011b40:	5e                   	pop    esi
c0011b41:	5f                   	pop    edi
c0011b42:	5d                   	pop    ebp
c0011b43:	c3                   	ret    
c0011b44:	c1 ee 0a             	shr    esi,0xa
c0011b47:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b4b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b51:	c1 eb 0a             	shr    ebx,0xa
c0011b54:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b5a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b60:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b66:	39 c3                	cmp    ebx,eax
c0011b68:	77 ce                	ja     c0011b38 <VAS::allocatePages(int, int)+0x92>
c0011b6a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b6d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b73:	39 d8                	cmp    eax,ebx
c0011b75:	73 f3                	jae    c0011b6a <VAS::allocatePages(int, int)+0xc4>
c0011b77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b7b:	83 c4 1c             	add    esp,0x1c
c0011b7e:	5b                   	pop    ebx
c0011b7f:	5e                   	pop    esi
c0011b80:	5f                   	pop    edi
c0011b81:	5d                   	pop    ebp
c0011b82:	c3                   	ret    
c0011b83:	83 ec 0c             	sub    esp,0xc
c0011b86:	68 a4 a2 02 c0       	push   0xc002a2a4
c0011b8b:	e8 d9 81 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0011b90:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b97:	83 c4 10             	add    esp,0x10
c0011b9a:	e9 43 ff ff ff       	jmp    c0011ae2 <VAS::allocatePages(int, int)+0x3c>
c0011b9f:	83 ec 0c             	sub    esp,0xc
c0011ba2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ba6:	e8 1a f6 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011bab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bb7:	0f 87 9b 00 00 00    	ja     c0011c58 <VAS::allocatePages(int, int)+0x1b2>
c0011bbd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011bc1:	85 d2                	test   edx,edx
c0011bc3:	7e 3c                	jle    c0011c01 <VAS::allocatePages(int, int)+0x15b>
c0011bc5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011bc9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011bcd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bd1:	c1 e5 0c             	shl    ebp,0xc
c0011bd4:	81 ce 00 04 00 00    	or     esi,0x400
c0011bda:	01 dd                	add    ebp,ebx
c0011bdc:	e8 5f dd ff ff       	call   c000f940 <Phys::allocatePage()>
c0011be1:	56                   	push   esi
c0011be2:	53                   	push   ebx
c0011be3:	50                   	push   eax
c0011be4:	57                   	push   edi
c0011be5:	e8 98 fd ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bf2:	74 03                	je     c0011bf7 <VAS::allocatePages(int, int)+0x151>
c0011bf4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bfd:	39 dd                	cmp    ebp,ebx
c0011bff:	75 db                	jne    c0011bdc <VAS::allocatePages(int, int)+0x136>
c0011c01:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c06:	0f 84 26 ff ff ff    	je     c0011b32 <VAS::allocatePages(int, int)+0x8c>
c0011c0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c10:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c14:	89 d3                	mov    ebx,edx
c0011c16:	c1 e0 0c             	shl    eax,0xc
c0011c19:	c1 eb 0a             	shr    ebx,0xa
c0011c1c:	01 d0                	add    eax,edx
c0011c1e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c24:	c1 e8 0a             	shr    eax,0xa
c0011c27:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c2d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c32:	2d 00 00 40 00       	sub    eax,0x400000
c0011c37:	39 c3                	cmp    ebx,eax
c0011c39:	0f 87 f9 fe ff ff    	ja     c0011b38 <VAS::allocatePages(int, int)+0x92>
c0011c3f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c42:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c48:	39 d8                	cmp    eax,ebx
c0011c4a:	73 f3                	jae    c0011c3f <VAS::allocatePages(int, int)+0x199>
c0011c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c50:	83 c4 1c             	add    esp,0x1c
c0011c53:	5b                   	pop    ebx
c0011c54:	5e                   	pop    esi
c0011c55:	5f                   	pop    edi
c0011c56:	5d                   	pop    ebp
c0011c57:	c3                   	ret    
c0011c58:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011c5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c63:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c6a:	0f 84 4d ff ff ff    	je     c0011bbd <VAS::allocatePages(int, int)+0x117>
c0011c70:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c78:	e9 40 ff ff ff       	jmp    c0011bbd <VAS::allocatePages(int, int)+0x117>
c0011c7d:	90                   	nop

c0011c7e <VAS::setCPUSpecific(unsigned long)>:
c0011c7e:	83 ec 0c             	sub    esp,0xc
c0011c81:	6a 05                	push   0x5
c0011c83:	68 00 00 40 c2       	push   0xc2400000
c0011c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c90:	e8 ed fc ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c95:	83 c4 1c             	add    esp,0x1c
c0011c98:	c3                   	ret    
c0011c99:	90                   	nop

c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c9a:	55                   	push   ebp
c0011c9b:	57                   	push   edi
c0011c9c:	56                   	push   esi
c0011c9d:	53                   	push   ebx
c0011c9e:	83 ec 1c             	sub    esp,0x1c
c0011ca1:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011ca6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011caa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cb0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cb4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cba:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cbe:	83 e0 01             	and    eax,0x1
c0011cc1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011cc5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cc9:	85 c0                	test   eax,eax
c0011ccb:	7e 39                	jle    c0011d06 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011ccd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cd1:	89 f3                	mov    ebx,esi
c0011cd3:	c1 e0 0c             	shl    eax,0xc
c0011cd6:	01 f0                	add    eax,esi
c0011cd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cdc:	55                   	push   ebp
c0011cdd:	53                   	push   ebx
c0011cde:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ce2:	29 f0                	sub    eax,esi
c0011ce4:	01 d8                	add    eax,ebx
c0011ce6:	50                   	push   eax
c0011ce7:	57                   	push   edi
c0011ce8:	e8 95 fc ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cf5:	74 03                	je     c0011cfa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cf7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cfa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d00:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d04:	75 d6                	jne    c0011cdc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d06:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d0b:	75 10                	jne    c0011d1d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d0d:	0f 20 d8             	mov    eax,cr3
c0011d10:	0f 22 d8             	mov    cr3,eax
c0011d13:	83 c4 1c             	add    esp,0x1c
c0011d16:	89 f0                	mov    eax,esi
c0011d18:	5b                   	pop    ebx
c0011d19:	5e                   	pop    esi
c0011d1a:	5f                   	pop    edi
c0011d1b:	5d                   	pop    ebp
c0011d1c:	c3                   	ret    
c0011d1d:	89 f3                	mov    ebx,esi
c0011d1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d23:	c1 eb 0a             	shr    ebx,0xa
c0011d26:	c1 e0 0c             	shl    eax,0xc
c0011d29:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d2f:	01 f0                	add    eax,esi
c0011d31:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d37:	c1 e8 0a             	shr    eax,0xa
c0011d3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d3f:	2d 00 00 40 00       	sub    eax,0x400000
c0011d44:	39 c3                	cmp    ebx,eax
c0011d46:	77 cb                	ja     c0011d13 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d48:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d4b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d51:	39 d8                	cmp    eax,ebx
c0011d53:	73 f3                	jae    c0011d48 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d55:	83 c4 1c             	add    esp,0x1c
c0011d58:	89 f0                	mov    eax,esi
c0011d5a:	5b                   	pop    ebx
c0011d5b:	5e                   	pop    esi
c0011d5c:	5f                   	pop    edi
c0011d5d:	5d                   	pop    ebp
c0011d5e:	c3                   	ret    
c0011d5f:	90                   	nop

c0011d60 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d60:	55                   	push   ebp
c0011d61:	57                   	push   edi
c0011d62:	56                   	push   esi
c0011d63:	53                   	push   ebx
c0011d64:	83 ec 1c             	sub    esp,0x1c
c0011d67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d6b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d6f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d73:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d77:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d7c:	75 4a                	jne    c0011dc8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d7e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d82:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d85:	c1 eb 16             	shr    ebx,0x16
c0011d88:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d8f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d93:	74 4d                	je     c0011de2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d99:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d9d:	c1 e8 0a             	shr    eax,0xa
c0011da0:	80 fa 01             	cmp    dl,0x1
c0011da3:	19 d2                	sbb    edx,edx
c0011da5:	c1 e3 0c             	shl    ebx,0xc
c0011da8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011dac:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011db2:	25 fc 0f 00 00       	and    eax,0xffc
c0011db7:	01 d8                	add    eax,ebx
c0011db9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011dc0:	83 c4 1c             	add    esp,0x1c
c0011dc3:	5b                   	pop    ebx
c0011dc4:	5e                   	pop    esi
c0011dc5:	5f                   	pop    edi
c0011dc6:	5d                   	pop    ebp
c0011dc7:	c3                   	ret    
c0011dc8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011dcc:	83 ec 0c             	sub    esp,0xc
c0011dcf:	68 d0 a2 02 c0       	push   0xc002a2d0
c0011dd4:	e8 90 7f 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0011dd9:	83 c4 10             	add    esp,0x10
c0011ddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011de0:	eb 9c                	jmp    c0011d7e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011de2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011de6:	e8 55 db ff ff       	call   c000f940 <Phys::allocatePage()>
c0011deb:	83 ec 0c             	sub    esp,0xc
c0011dee:	89 c5                	mov    ebp,eax
c0011df0:	8b 0d f0 d8 02 c0    	mov    ecx,DWORD PTR ds:0xc002d8f0
c0011df6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dfa:	6a 01                	push   0x1
c0011dfc:	e8 c4 f3 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011e01:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e08:	6a 01                	push   0x1
c0011e0a:	50                   	push   eax
c0011e0b:	55                   	push   ebp
c0011e0c:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e12:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e16:	51                   	push   ecx
c0011e17:	e8 7e fe ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e1c:	83 c4 1c             	add    esp,0x1c
c0011e1f:	68 00 10 00 00       	push   0x1000
c0011e24:	6a 00                	push   0x0
c0011e26:	50                   	push   eax
c0011e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e2b:	e8 20 e9 fe ff       	call   c0000750 <memset>
c0011e30:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e34:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e37:	e8 cf f7 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0011e3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e49:	e9 47 ff ff ff       	jmp    c0011d95 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e4e <VAS::VAS(bool)>:
c0011e4e:	53                   	push   ebx
c0011e4f:	83 ec 28             	sub    esp,0x28
c0011e52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e56:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e69:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e74:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e78:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e7b:	e8 c0 da ff ff       	call   c000f940 <Phys::allocatePage()>
c0011e80:	89 c2                	mov    edx,eax
c0011e82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e86:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e89:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c0011e8f:	83 ec 0c             	sub    esp,0xc
c0011e92:	6a 01                	push   0x1
c0011e94:	e8 2c f3 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0011e99:	83 c4 10             	add    esp,0x10
c0011e9c:	89 c2                	mov    edx,eax
c0011e9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ea5:	83 ec 0c             	sub    esp,0xc
c0011ea8:	6a 03                	push   0x3
c0011eaa:	6a 01                	push   0x1
c0011eac:	52                   	push   edx
c0011ead:	50                   	push   eax
c0011eae:	53                   	push   ebx
c0011eaf:	e8 e6 fd ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eb4:	83 c4 20             	add    esp,0x20
c0011eb7:	89 c2                	mov    edx,eax
c0011eb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ebd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ec0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ec8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011ed0:	7f 1c                	jg     c0011eee <VAS::VAS(bool)+0xa0>
c0011ed2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ed9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011edd:	c1 e2 02             	shl    edx,0x2
c0011ee0:	01 d0                	add    eax,edx
c0011ee2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011ee8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011eec:	eb da                	jmp    c0011ec8 <VAS::VAS(bool)+0x7a>
c0011eee:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011ef6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011efe:	7f 7a                	jg     c0011f7a <VAS::VAS(bool)+0x12c>
c0011f00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f04:	2d 00 02 00 00       	sub    eax,0x200
c0011f09:	c1 e0 0c             	shl    eax,0xc
c0011f0c:	83 c8 03             	or     eax,0x3
c0011f0f:	89 c2                	mov    edx,eax
c0011f11:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011f16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f1c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f22:	83 e0 10             	and    eax,0x10
c0011f25:	84 c0                	test   al,al
c0011f27:	74 07                	je     c0011f30 <VAS::VAS(bool)+0xe2>
c0011f29:	b8 00 01 00 00       	mov    eax,0x100
c0011f2e:	eb 05                	jmp    c0011f35 <VAS::VAS(bool)+0xe7>
c0011f30:	b8 00 00 00 00       	mov    eax,0x0
c0011f35:	09 d0                	or     eax,edx
c0011f37:	89 c1                	mov    ecx,eax
c0011f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f44:	c1 e2 02             	shl    edx,0x2
c0011f47:	01 d0                	add    eax,edx
c0011f49:	89 ca                	mov    edx,ecx
c0011f4b:	89 10                	mov    DWORD PTR [eax],edx
c0011f4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f51:	2d 40 03 00 00       	sub    eax,0x340
c0011f56:	83 f8 7f             	cmp    eax,0x7f
c0011f59:	77 16                	ja     c0011f71 <VAS::VAS(bool)+0x123>
c0011f5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f66:	c1 e2 02             	shl    edx,0x2
c0011f69:	01 d0                	add    eax,edx
c0011f6b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f71:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f75:	e9 7c ff ff ff       	jmp    c0011ef6 <VAS::VAS(bool)+0xa8>
c0011f7a:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011f7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f85:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f8b:	83 e0 10             	and    eax,0x10
c0011f8e:	84 c0                	test   al,al
c0011f90:	74 07                	je     c0011f99 <VAS::VAS(bool)+0x14b>
c0011f92:	b8 03 41 00 00       	mov    eax,0x4103
c0011f97:	eb 05                	jmp    c0011f9e <VAS::VAS(bool)+0x150>
c0011f99:	b8 03 40 00 00       	mov    eax,0x4003
c0011f9e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fa2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fa5:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fab:	89 02                	mov    DWORD PTR [edx],eax
c0011fad:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011fb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fb8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011fbe:	83 ec 08             	sub    esp,0x8
c0011fc1:	50                   	push   eax
c0011fc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fc6:	e8 b3 fc ff ff       	call   c0011c7e <VAS::setCPUSpecific(unsigned long)>
c0011fcb:	83 c4 10             	add    esp,0x10
c0011fce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fd2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011fd5:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0011fda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fe0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fe6:	83 e0 10             	and    eax,0x10
c0011fe9:	84 c0                	test   al,al
c0011feb:	74 07                	je     c0011ff4 <VAS::VAS(bool)+0x1a6>
c0011fed:	b8 00 01 00 00       	mov    eax,0x100
c0011ff2:	eb 05                	jmp    c0011ff9 <VAS::VAS(bool)+0x1ab>
c0011ff4:	b8 00 00 00 00       	mov    eax,0x0
c0011ff9:	09 c2                	or     edx,eax
c0011ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012002:	05 fc 0f 00 00       	add    eax,0xffc
c0012007:	83 ca 03             	or     edx,0x3
c001200a:	89 10                	mov    DWORD PTR [eax],edx
c001200c:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0012011:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012017:	83 ec 0c             	sub    esp,0xc
c001201a:	50                   	push   eax
c001201b:	e8 16 1d 00 00       	call   c0013d36 <Device::getName()>
c0012020:	83 c4 10             	add    esp,0x10
c0012023:	83 ec 08             	sub    esp,0x8
c0012026:	68 ad a3 02 c0       	push   0xc002a3ad
c001202b:	50                   	push   eax
c001202c:	e8 67 e8 fe ff       	call   c0000898 <strcmp>
c0012031:	83 c4 10             	add    esp,0x10
c0012034:	85 c0                	test   eax,eax
c0012036:	0f 94 c0             	sete   al
c0012039:	84 c0                	test   al,al
c001203b:	0f 84 87 00 00 00    	je     c00120c8 <VAS::VAS(bool)+0x27a>
c0012041:	fa                   	cli    
c0012042:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0012047:	40                   	inc    eax
c0012048:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001204d:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0012052:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012058:	05 7c 09 00 00       	add    eax,0x97c
c001205d:	83 ec 0c             	sub    esp,0xc
c0012060:	50                   	push   eax
c0012061:	e8 b8 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	25 00 f0 ff ff       	and    eax,0xfffff000
c001206e:	89 c3                	mov    ebx,eax
c0012070:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0012075:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001207b:	05 7c 09 00 00       	add    eax,0x97c
c0012080:	83 ec 0c             	sub    esp,0xc
c0012083:	50                   	push   eax
c0012084:	e8 95 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	83 ec 08             	sub    esp,0x8
c001208f:	50                   	push   eax
c0012090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012094:	e8 53 f5 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	8b 00                	mov    eax,DWORD PTR [eax]
c001209e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a3:	6a 11                	push   0x11
c00120a5:	53                   	push   ebx
c00120a6:	50                   	push   eax
c00120a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120ab:	e8 d2 f8 ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120b0:	83 c4 10             	add    esp,0x10
c00120b3:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00120b8:	48                   	dec    eax
c00120b9:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c00120be:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00120c3:	85 c0                	test   eax,eax
c00120c5:	75 01                	jne    c00120c8 <VAS::VAS(bool)+0x27a>
c00120c7:	fb                   	sti    
c00120c8:	90                   	nop
c00120c9:	83 c4 28             	add    esp,0x28
c00120cc:	5b                   	pop    ebx
c00120cd:	c3                   	ret    

c00120ce <VAS::evict(unsigned long)>:
c00120ce:	55                   	push   ebp
c00120cf:	57                   	push   edi
c00120d0:	56                   	push   esi
c00120d1:	53                   	push   ebx
c00120d2:	83 ec 1c             	sub    esp,0x1c
c00120d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120e1:	e8 20 f2 ff ff       	call   c0011306 <Virt::allocateSwapfilePage()>
c00120e6:	89 c7                	mov    edi,eax
c00120e8:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c00120ed:	85 c0                	test   eax,eax
c00120ef:	7e 3d                	jle    c001212e <VAS::evict(unsigned long)+0x60>
c00120f1:	89 ee                	mov    esi,ebp
c00120f3:	31 db                	xor    ebx,ebx
c00120f5:	83 ec 0c             	sub    esp,0xc
c00120f8:	57                   	push   edi
c00120f9:	e8 f6 f1 ff ff       	call   c00112f4 <Virt::swapIDToSector(unsigned long)>
c00120fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0012101:	01 d8                	add    eax,ebx
c0012103:	6a 01                	push   0x1
c0012105:	31 d2                	xor    edx,edx
c0012107:	43                   	inc    ebx
c0012108:	52                   	push   edx
c0012109:	81 c6 00 02 00 00    	add    esi,0x200
c001210f:	50                   	push   eax
c0012110:	0f be 05 38 c7 02 c0 	movsx  eax,BYTE PTR ds:0xc002c738
c0012117:	ff 34 85 7c dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd2384]
c001211e:	e8 9b 3e 00 00       	call   c0015fbe <LogicalDisk::write(unsigned long long, int, void*)>
c0012123:	83 c4 20             	add    esp,0x20
c0012126:	39 1d 2c c7 02 c0    	cmp    DWORD PTR ds:0xc002c72c,ebx
c001212c:	7f c7                	jg     c00120f5 <VAS::evict(unsigned long)+0x27>
c001212e:	83 ec 08             	sub    esp,0x8
c0012131:	c1 e7 0b             	shl    edi,0xb
c0012134:	55                   	push   ebp
c0012135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012139:	e8 ae f4 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001213e:	83 c4 0c             	add    esp,0xc
c0012141:	8b 10                	mov    edx,DWORD PTR [eax]
c0012143:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012149:	09 d7                	or     edi,edx
c001214b:	89 38                	mov    DWORD PTR [eax],edi
c001214d:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c0012152:	40                   	inc    eax
c0012153:	a3 e8 d8 02 c0       	mov    ds:0xc002d8e8,eax
c0012158:	0f 20 da             	mov    edx,cr3
c001215b:	0f 22 da             	mov    cr3,edx
c001215e:	50                   	push   eax
c001215f:	55                   	push   ebp
c0012160:	68 bb a3 02 c0       	push   0xc002a3bb
c0012165:	e8 93 04 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001216a:	a1 e4 d8 02 c0       	mov    eax,ds:0xc002d8e4
c001216f:	c7 44 24 40 d0 a3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a3d0
c0012177:	8d 50 01             	lea    edx,[eax+0x1]
c001217a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001217e:	89 15 e4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8e4,edx
c0012184:	83 c4 2c             	add    esp,0x2c
c0012187:	5b                   	pop    ebx
c0012188:	5e                   	pop    esi
c0012189:	5f                   	pop    edi
c001218a:	5d                   	pop    ebp
c001218b:	e9 6d 04 00 00       	jmp    c00125fd <Dbg::kprintf(char const*, ...)>

c0012190 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012190:	55                   	push   ebp
c0012191:	57                   	push   edi
c0012192:	56                   	push   esi
c0012193:	53                   	push   ebx
c0012194:	83 ec 14             	sub    esp,0x14
c0012197:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001219b:	68 e1 a3 02 c0       	push   0xc002a3e1
c00121a0:	e8 58 04 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00121a5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00121a9:	5e                   	pop    esi
c00121aa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121b0:	5f                   	pop    edi
c00121b1:	53                   	push   ebx
c00121b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00121b6:	e8 31 f4 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c00121bb:	5d                   	pop    ebp
c00121bc:	89 c6                	mov    esi,eax
c00121be:	5a                   	pop    edx
c00121bf:	ff 30                	push   DWORD PTR [eax]
c00121c1:	68 f4 a3 02 c0       	push   0xc002a3f4
c00121c6:	e8 32 04 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	85 db                	test   ebx,ebx
c00121d0:	74 1c                	je     c00121ee <VAS::tryLoadBackOffDisk(unsigned long)+0x5e>
c00121d2:	8b 3e                	mov    edi,DWORD PTR [esi]
c00121d4:	31 c0                	xor    eax,eax
c00121d6:	89 fa                	mov    edx,edi
c00121d8:	81 e2 01 04 00 00    	and    edx,0x401
c00121de:	81 fa 00 04 00 00    	cmp    edx,0x400
c00121e4:	74 12                	je     c00121f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x68>
c00121e6:	83 c4 0c             	add    esp,0xc
c00121e9:	5b                   	pop    ebx
c00121ea:	5e                   	pop    esi
c00121eb:	5f                   	pop    edi
c00121ec:	5d                   	pop    ebp
c00121ed:	c3                   	ret    
c00121ee:	83 c4 0c             	add    esp,0xc
c00121f1:	31 c0                	xor    eax,eax
c00121f3:	5b                   	pop    ebx
c00121f4:	5e                   	pop    esi
c00121f5:	5f                   	pop    edi
c00121f6:	5d                   	pop    ebp
c00121f7:	c3                   	ret    
c00121f8:	e8 43 d7 ff ff       	call   c000f940 <Phys::allocatePage()>
c00121fd:	c1 ef 0b             	shr    edi,0xb
c0012200:	83 ec 08             	sub    esp,0x8
c0012203:	89 c5                	mov    ebp,eax
c0012205:	50                   	push   eax
c0012206:	68 02 a4 02 c0       	push   0xc002a402
c001220b:	e8 ed 03 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0012210:	8b 16                	mov    edx,DWORD PTR [esi]
c0012212:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012218:	09 ea                	or     edx,ebp
c001221a:	81 ca 01 08 00 00    	or     edx,0x801
c0012220:	89 16                	mov    DWORD PTR [esi],edx
c0012222:	c7 04 24 0f a4 02 c0 	mov    DWORD PTR [esp],0xc002a40f
c0012229:	e8 cf 03 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001222e:	83 c4 10             	add    esp,0x10
c0012231:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0012237:	85 c9                	test   ecx,ecx
c0012239:	7e 3d                	jle    c0012278 <VAS::tryLoadBackOffDisk(unsigned long)+0xe8>
c001223b:	89 dd                	mov    ebp,ebx
c001223d:	31 f6                	xor    esi,esi
c001223f:	83 ec 0c             	sub    esp,0xc
c0012242:	57                   	push   edi
c0012243:	e8 ac f0 ff ff       	call   c00112f4 <Virt::swapIDToSector(unsigned long)>
c0012248:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001224b:	01 f0                	add    eax,esi
c001224d:	6a 01                	push   0x1
c001224f:	31 d2                	xor    edx,edx
c0012251:	46                   	inc    esi
c0012252:	52                   	push   edx
c0012253:	81 c5 00 02 00 00    	add    ebp,0x200
c0012259:	50                   	push   eax
c001225a:	0f be 05 38 c7 02 c0 	movsx  eax,BYTE PTR ds:0xc002c738
c0012261:	ff 34 85 7c dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd2384]
c0012268:	e8 e5 3c 00 00       	call   c0015f52 <LogicalDisk::read(unsigned long long, int, void*)>
c001226d:	83 c4 20             	add    esp,0x20
c0012270:	39 35 2c c7 02 c0    	cmp    DWORD PTR ds:0xc002c72c,esi
c0012276:	7f c7                	jg     c001223f <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c0012278:	a1 e8 d8 02 c0       	mov    eax,ds:0xc002d8e8
c001227d:	48                   	dec    eax
c001227e:	52                   	push   edx
c001227f:	a3 e8 d8 02 c0       	mov    ds:0xc002d8e8,eax
c0012284:	50                   	push   eax
c0012285:	53                   	push   ebx
c0012286:	68 1f a4 02 c0       	push   0xc002a41f
c001228b:	e8 6d 03 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0012290:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012293:	e8 3e f0 ff ff       	call   c00112d6 <Virt::freeSwapfilePage(unsigned long)>
c0012298:	c7 04 24 34 a4 02 c0 	mov    DWORD PTR [esp],0xc002a434
c001229f:	e8 59 03 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00122a4:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	48                   	dec    eax
c00122ad:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c00122b2:	85 c0                	test   eax,eax
c00122b4:	74 2d                	je     c00122e3 <VAS::tryLoadBackOffDisk(unsigned long)+0x153>
c00122b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00122ba:	25 ff 0f 00 00       	and    eax,0xfff
c00122bf:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00122c4:	77 20                	ja     c00122e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>
c00122c6:	0f 20 d8             	mov    eax,cr3
c00122c9:	0f 22 d8             	mov    cr3,eax
c00122cc:	83 ec 0c             	sub    esp,0xc
c00122cf:	68 5a a4 02 c0       	push   0xc002a45a
c00122d4:	e8 24 03 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	b0 01                	mov    al,0x1
c00122de:	e9 03 ff ff ff       	jmp    c00121e6 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c00122e3:	fb                   	sti    
c00122e4:	eb d0                	jmp    c00122b6 <VAS::tryLoadBackOffDisk(unsigned long)+0x126>
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	68 4a a4 02 c0       	push   0xc002a44a
c00122ee:	e8 0a 03 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00122f3:	83 c4 10             	add    esp,0x10
c00122f6:	eb ce                	jmp    c00122c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x136>

c00122f8 <VAS::scanForEviction()>:
c00122f8:	56                   	push   esi
c00122f9:	53                   	push   ebx
c00122fa:	83 ec 14             	sub    esp,0x14
c00122fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012301:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012304:	83 ec 08             	sub    esp,0x8
c0012307:	53                   	push   ebx
c0012308:	68 68 a4 02 c0       	push   0xc002a468
c001230d:	e8 eb 02 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0012312:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001231e:	75 0e                	jne    c001232e <VAS::scanForEviction()+0x36>
c0012320:	89 da                	mov    edx,ebx
c0012322:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012325:	c1 ea 16             	shr    edx,0x16
c0012328:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001232c:	74 5d                	je     c001238b <VAS::scanForEviction()+0x93>
c001232e:	83 ec 08             	sub    esp,0x8
c0012331:	53                   	push   ebx
c0012332:	56                   	push   esi
c0012333:	e8 b4 f2 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c0012338:	83 c4 10             	add    esp,0x10
c001233b:	8b 10                	mov    edx,DWORD PTR [eax]
c001233d:	89 d1                	mov    ecx,edx
c001233f:	81 e1 01 08 00 00    	and    ecx,0x801
c0012345:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001234b:	74 2f                	je     c001237c <VAS::scanForEviction()+0x84>
c001234d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012353:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012359:	77 05                	ja     c0012360 <VAS::scanForEviction()+0x68>
c001235b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001235e:	eb a4                	jmp    c0012304 <VAS::scanForEviction()+0xc>
c0012360:	83 ec 0c             	sub    esp,0xc
c0012363:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001236a:	68 a1 a4 02 c0       	push   0xc002a4a1
c001236f:	e8 89 02 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0012374:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	eb 88                	jmp    c0012304 <VAS::scanForEviction()+0xc>
c001237c:	f6 c2 20             	test   dl,0x20
c001237f:	74 2b                	je     c00123ac <VAS::scanForEviction()+0xb4>
c0012381:	83 e2 df             	and    edx,0xffffffdf
c0012384:	89 10                	mov    DWORD PTR [eax],edx
c0012386:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012389:	eb c2                	jmp    c001234d <VAS::scanForEviction()+0x55>
c001238b:	83 ec 0c             	sub    esp,0xc
c001238e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012394:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012397:	68 7f a4 02 c0       	push   0xc002a47f
c001239c:	e8 5c 02 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00123a1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	e9 58 ff ff ff       	jmp    c0012304 <VAS::scanForEviction()+0xc>
c00123ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123b0:	83 ec 0c             	sub    esp,0xc
c00123b3:	68 94 a4 02 c0       	push   0xc002a494
c00123b8:	e8 40 02 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00123bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00123c1:	8b 18                	mov    ebx,DWORD PTR [eax]
c00123c3:	58                   	pop    eax
c00123c4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123ca:	5a                   	pop    edx
c00123cb:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00123ce:	56                   	push   esi
c00123cf:	e8 fa fc ff ff       	call   c00120ce <VAS::evict(unsigned long)>
c00123d4:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00123db:	89 d8                	mov    eax,ebx
c00123dd:	83 c4 24             	add    esp,0x24
c00123e0:	5b                   	pop    ebx
c00123e1:	5e                   	pop    esi
c00123e2:	c3                   	ret    

c00123e3 <mapVASFirstTime>:
c00123e3:	55                   	push   ebp
c00123e4:	57                   	push   edi
c00123e5:	56                   	push   esi
c00123e6:	53                   	push   ebx
c00123e7:	83 ec 0c             	sub    esp,0xc
c00123ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123ef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00123f2:	4a                   	dec    edx
c00123f3:	0f 84 8e 00 00 00    	je     c0012487 <mapVASFirstTime+0xa4>
c00123f9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00123fc:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00123ff:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012404:	c1 e5 15             	shl    ebp,0x15
c0012407:	be 00 90 e7 01       	mov    esi,0x1e79000
c001240c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012412:	29 eb                	sub    ebx,ebp
c0012414:	29 ee                	sub    esi,ebp
c0012416:	e8 25 d5 ff ff       	call   c000f940 <Phys::allocatePage()>
c001241b:	83 ec 0c             	sub    esp,0xc
c001241e:	68 03 04 00 00       	push   0x403
c0012423:	6a 01                	push   0x1
c0012425:	53                   	push   ebx
c0012426:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001242c:	50                   	push   eax
c001242d:	57                   	push   edi
c001242e:	e8 67 f8 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012433:	83 c4 20             	add    esp,0x20
c0012436:	39 f3                	cmp    ebx,esi
c0012438:	75 dc                	jne    c0012416 <mapVASFirstTime+0x33>
c001243a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001243f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012444:	29 ee                	sub    esi,ebp
c0012446:	29 e8                	sub    eax,ebp
c0012448:	89 c5                	mov    ebp,eax
c001244a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001244e:	19 db                	sbb    ebx,ebx
c0012450:	e8 eb d4 ff ff       	call   c000f940 <Phys::allocatePage()>
c0012455:	83 e3 04             	and    ebx,0x4
c0012458:	83 ec 0c             	sub    esp,0xc
c001245b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012461:	53                   	push   ebx
c0012462:	6a 01                	push   0x1
c0012464:	56                   	push   esi
c0012465:	81 ee 00 10 00 00    	sub    esi,0x1000
c001246b:	50                   	push   eax
c001246c:	57                   	push   edi
c001246d:	e8 28 f8 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012472:	83 c4 20             	add    esp,0x20
c0012475:	39 f5                	cmp    ebp,esi
c0012477:	75 d1                	jne    c001244a <mapVASFirstTime+0x67>
c0012479:	0f 20 d8             	mov    eax,cr3
c001247c:	0f 22 d8             	mov    cr3,eax
c001247f:	83 c4 0c             	add    esp,0xc
c0012482:	5b                   	pop    ebx
c0012483:	5e                   	pop    esi
c0012484:	5f                   	pop    edi
c0012485:	5d                   	pop    ebp
c0012486:	c3                   	ret    
c0012487:	83 ec 0c             	sub    esp,0xc
c001248a:	68 b2 a4 02 c0       	push   0xc002a4b2
c001248f:	e8 69 01 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0012494:	83 c4 10             	add    esp,0x10
c0012497:	83 c4 0c             	add    esp,0xc
c001249a:	5b                   	pop    ebx
c001249b:	5e                   	pop    esi
c001249c:	5f                   	pop    edi
c001249d:	5d                   	pop    ebp
c001249e:	c3                   	ret    

c001249f <__cxa_atexit>:
c001249f:	31 c0                	xor    eax,eax
c00124a1:	c3                   	ret    

c00124a2 <__cxa_finalize>:
c00124a2:	c3                   	ret    

c00124a3 <__stack_chk_fail>:
c00124a3:	55                   	push   ebp
c00124a4:	89 e5                	mov    ebp,esp
c00124a6:	83 ec 14             	sub    esp,0x14
c00124a9:	68 cb a4 02 c0       	push   0xc002a4cb
c00124ae:	e8 4a 01 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00124b3:	58                   	pop    eax
c00124b4:	5a                   	pop    edx
c00124b5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00124b8:	68 1b a5 02 c0       	push   0xc002a51b
c00124bd:	e8 3b 01 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00124c2:	59                   	pop    ecx
c00124c3:	58                   	pop    eax
c00124c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124c7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124ca:	68 1b a5 02 c0       	push   0xc002a51b
c00124cf:	e8 29 01 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00124d4:	5a                   	pop    edx
c00124d5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124d8:	59                   	pop    ecx
c00124d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00124db:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124de:	68 1b a5 02 c0       	push   0xc002a51b
c00124e3:	e8 15 01 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00124e8:	5a                   	pop    edx
c00124e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00124ec:	59                   	pop    ecx
c00124ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00124ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00124f1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00124f4:	68 1b a5 02 c0       	push   0xc002a51b
c00124f9:	e8 ff 00 00 00       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00124fe:	c7 04 24 23 a5 02 c0 	mov    DWORD PTR [esp],0xc002a523
c0012505:	e8 5f 78 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c001250a:	83 c4 10             	add    esp,0x10
c001250d:	c9                   	leave  
c001250e:	c3                   	ret    

c001250f <__cxa_pure_virtual>:
c001250f:	83 ec 18             	sub    esp,0x18
c0012512:	68 3b a5 02 c0       	push   0xc002a53b
c0012517:	e8 4d 78 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c001251c:	83 c4 1c             	add    esp,0x1c
c001251f:	c3                   	ret    

c0012520 <operator new[](unsigned long)>:
c0012520:	e9 77 d0 ff ff       	jmp    c000f59c <malloc>

c0012525 <operator delete(void*, unsigned long)>:
c0012525:	e9 92 d0 ff ff       	jmp    c000f5bc <rfree>

c001252a <operator delete[](void*)>:
c001252a:	e9 8d d0 ff ff       	jmp    c000f5bc <rfree>

c001252f <operator delete[](void*, unsigned long)>:
c001252f:	e9 88 d0 ff ff       	jmp    c000f5bc <rfree>

c0012534 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012534:	55                   	push   ebp
c0012535:	b9 11 00 00 00       	mov    ecx,0x11
c001253a:	57                   	push   edi
c001253b:	56                   	push   esi
c001253c:	be 0e a0 02 c0       	mov    esi,0xc002a00e
c0012541:	53                   	push   ebx
c0012542:	83 ec 20             	sub    esp,0x20
c0012545:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012549:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001254d:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012551:	fc                   	cld    
c0012552:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012554:	89 ee                	mov    esi,ebp
c0012556:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001255a:	eb 02                	jmp    c001255e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c001255c:	89 c6                	mov    esi,eax
c001255e:	31 d2                	xor    edx,edx
c0012560:	41                   	inc    ecx
c0012561:	89 f0                	mov    eax,esi
c0012563:	f7 f3                	div    ebx
c0012565:	39 de                	cmp    esi,ebx
c0012567:	73 f3                	jae    c001255c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c0012569:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001256c:	eb 02                	jmp    c0012570 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c001256e:	89 c5                	mov    ebp,eax
c0012570:	31 d2                	xor    edx,edx
c0012572:	49                   	dec    ecx
c0012573:	89 e8                	mov    eax,ebp
c0012575:	f7 f3                	div    ebx
c0012577:	39 dd                	cmp    ebp,ebx
c0012579:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001257d:	88 11                	mov    BYTE PTR [ecx],dl
c001257f:	73 ed                	jae    c001256e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012585:	83 c4 20             	add    esp,0x20
c0012588:	5b                   	pop    ebx
c0012589:	5e                   	pop    esi
c001258a:	5f                   	pop    edi
c001258b:	5d                   	pop    ebp
c001258c:	c3                   	ret    

c001258d <Dbg::logc(char)>:
c001258d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012591:	ba fd 03 00 00       	mov    edx,0x3fd
c0012596:	ec                   	in     al,dx
c0012597:	a8 20                	test   al,0x20
c0012599:	74 fb                	je     c0012596 <Dbg::logc(char)+0x9>
c001259b:	ba f8 03 00 00       	mov    edx,0x3f8
c00125a0:	88 c8                	mov    al,cl
c00125a2:	ee                   	out    dx,al
c00125a3:	c3                   	ret    

c00125a4 <Dbg::logs(char*)>:
c00125a4:	53                   	push   ebx
c00125a5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00125a9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125ac:	84 c0                	test   al,al
c00125ae:	74 0f                	je     c00125bf <Dbg::logs(char*)+0x1b>
c00125b0:	50                   	push   eax
c00125b1:	43                   	inc    ebx
c00125b2:	e8 d6 ff ff ff       	call   c001258d <Dbg::logc(char)>
c00125b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00125ba:	5a                   	pop    edx
c00125bb:	84 c0                	test   al,al
c00125bd:	75 f1                	jne    c00125b0 <Dbg::logs(char*)+0xc>
c00125bf:	5b                   	pop    ebx
c00125c0:	c3                   	ret    

c00125c1 <Dbg::logWriteInt(unsigned int)>:
c00125c1:	83 ec 10             	sub    esp,0x10
c00125c4:	6a 0a                	push   0xa
c00125c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125ca:	50                   	push   eax
c00125cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125cf:	e8 60 ff ff ff       	call   c0012534 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125d4:	50                   	push   eax
c00125d5:	e8 ca ff ff ff       	call   c00125a4 <Dbg::logs(char*)>
c00125da:	83 c4 20             	add    esp,0x20
c00125dd:	c3                   	ret    

c00125de <Dbg::logWriteIntBase(unsigned int, int)>:
c00125de:	83 ec 10             	sub    esp,0x10
c00125e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125e5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00125e9:	50                   	push   eax
c00125ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125ee:	e8 41 ff ff ff       	call   c0012534 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00125f3:	50                   	push   eax
c00125f4:	e8 ab ff ff ff       	call   c00125a4 <Dbg::logs(char*)>
c00125f9:	83 c4 20             	add    esp,0x20
c00125fc:	c3                   	ret    

c00125fd <Dbg::kprintf(char const*, ...)>:
c00125fd:	55                   	push   ebp
c00125fe:	57                   	push   edi
c00125ff:	56                   	push   esi
c0012600:	53                   	push   ebx
c0012601:	83 ec 0c             	sub    esp,0xc
c0012604:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012608:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001260c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012610:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012613:	84 c0                	test   al,al
c0012615:	74 4a                	je     c0012661 <Dbg::kprintf(char const*, ...)+0x64>
c0012617:	31 db                	xor    ebx,ebx
c0012619:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001261c:	3c 25                	cmp    al,0x25
c001261e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012621:	0f 85 e4 00 00 00    	jne    c001270b <Dbg::kprintf(char const*, ...)+0x10e>
c0012627:	83 c3 02             	add    ebx,0x2
c001262a:	8a 07                	mov    al,BYTE PTR [edi]
c001262c:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001262f:	83 e8 25             	sub    eax,0x25
c0012632:	3c 53                	cmp    al,0x53
c0012634:	0f 87 ba 00 00 00    	ja     c00126f4 <Dbg::kprintf(char const*, ...)+0xf7>
c001263a:	0f b6 c0             	movzx  eax,al
c001263d:	ff 24 85 50 a5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5ab0]
c0012644:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012648:	89 c8                	mov    eax,ecx
c001264a:	83 c1 04             	add    ecx,0x4
c001264d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012651:	ff 30                	push   DWORD PTR [eax]
c0012653:	e8 69 ff ff ff       	call   c00125c1 <Dbg::logWriteInt(unsigned int)>
c0012658:	5f                   	pop    edi
c0012659:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001265d:	84 c0                	test   al,al
c001265f:	75 b8                	jne    c0012619 <Dbg::kprintf(char const*, ...)+0x1c>
c0012661:	83 c4 0c             	add    esp,0xc
c0012664:	5b                   	pop    ebx
c0012665:	5e                   	pop    esi
c0012666:	5f                   	pop    edi
c0012667:	5d                   	pop    ebp
c0012668:	c3                   	ret    
c0012669:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001266d:	89 c8                	mov    eax,ecx
c001266f:	83 c1 04             	add    ecx,0x4
c0012672:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012676:	ff 30                	push   DWORD PTR [eax]
c0012678:	e8 27 ff ff ff       	call   c00125a4 <Dbg::logs(char*)>
c001267d:	58                   	pop    eax
c001267e:	eb d9                	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c0012680:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012684:	89 d0                	mov    eax,edx
c0012686:	83 c2 04             	add    edx,0x4
c0012689:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001268d:	ff 30                	push   DWORD PTR [eax]
c001268f:	e8 2d ff ff ff       	call   c00125c1 <Dbg::logWriteInt(unsigned int)>
c0012694:	58                   	pop    eax
c0012695:	eb c2                	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c0012697:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001269b:	89 d0                	mov    eax,edx
c001269d:	83 c2 04             	add    edx,0x4
c00126a0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00126a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126a7:	50                   	push   eax
c00126a8:	e8 e0 fe ff ff       	call   c001258d <Dbg::logc(char)>
c00126ad:	58                   	pop    eax
c00126ae:	eb a9                	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c00126b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126b4:	89 c8                	mov    eax,ecx
c00126b6:	83 c1 04             	add    ecx,0x4
c00126b9:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126bd:	6a 10                	push   0x10
c00126bf:	ff 30                	push   DWORD PTR [eax]
c00126c1:	e8 18 ff ff ff       	call   c00125de <Dbg::logWriteIntBase(unsigned int, int)>
c00126c6:	59                   	pop    ecx
c00126c7:	5f                   	pop    edi
c00126c8:	eb 8f                	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c00126ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126ce:	89 d0                	mov    eax,edx
c00126d0:	83 c2 08             	add    edx,0x8
c00126d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126d7:	6a 10                	push   0x10
c00126d9:	ff 30                	push   DWORD PTR [eax]
c00126db:	e8 fe fe ff ff       	call   c00125de <Dbg::logWriteIntBase(unsigned int, int)>
c00126e0:	58                   	pop    eax
c00126e1:	5a                   	pop    edx
c00126e2:	e9 72 ff ff ff       	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c00126e7:	6a 25                	push   0x25
c00126e9:	e8 9f fe ff ff       	call   c001258d <Dbg::logc(char)>
c00126ee:	58                   	pop    eax
c00126ef:	e9 65 ff ff ff       	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c00126f4:	6a 25                	push   0x25
c00126f6:	e8 92 fe ff ff       	call   c001258d <Dbg::logc(char)>
c00126fb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00126fe:	50                   	push   eax
c00126ff:	e8 89 fe ff ff       	call   c001258d <Dbg::logc(char)>
c0012704:	5a                   	pop    edx
c0012705:	59                   	pop    ecx
c0012706:	e9 4e ff ff ff       	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c001270b:	50                   	push   eax
c001270c:	89 eb                	mov    ebx,ebp
c001270e:	e8 7a fe ff ff       	call   c001258d <Dbg::logc(char)>
c0012713:	89 fd                	mov    ebp,edi
c0012715:	58                   	pop    eax
c0012716:	e9 3e ff ff ff       	jmp    c0012659 <Dbg::kprintf(char const*, ...)+0x5c>
c001271b:	90                   	nop

c001271c <File::read(unsigned long long, void*, int*)>:
c001271c:	53                   	push   ebx
c001271d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012721:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012725:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001272c:	3c 19                	cmp    al,0x19
c001272e:	77 35                	ja     c0012765 <File::read(unsigned long long, void*, int*)+0x49>
c0012730:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c0012737:	85 c0                	test   eax,eax
c0012739:	74 2a                	je     c0012765 <File::read(unsigned long long, void*, int*)+0x49>
c001273b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012741:	85 c0                	test   eax,eax
c0012743:	74 20                	je     c0012765 <File::read(unsigned long long, void*, int*)+0x49>
c0012745:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012749:	74 21                	je     c001276c <File::read(unsigned long long, void*, int*)+0x50>
c001274b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001274d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012751:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001275b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001275f:	5b                   	pop    ebx
c0012760:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012763:	ff e0                	jmp    eax
c0012765:	b8 0b 00 00 00       	mov    eax,0xb
c001276a:	eb 05                	jmp    c0012771 <File::read(unsigned long long, void*, int*)+0x55>
c001276c:	b8 05 00 00 00       	mov    eax,0x5
c0012771:	5b                   	pop    ebx
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <File::write(unsigned long long, void*, int*)>:
c0012774:	53                   	push   ebx
c0012775:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012779:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001277d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012784:	3c 19                	cmp    al,0x19
c0012786:	77 35                	ja     c00127bd <File::write(unsigned long long, void*, int*)+0x49>
c0012788:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c001278f:	85 c0                	test   eax,eax
c0012791:	74 2a                	je     c00127bd <File::write(unsigned long long, void*, int*)+0x49>
c0012793:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012799:	85 c0                	test   eax,eax
c001279b:	74 20                	je     c00127bd <File::write(unsigned long long, void*, int*)+0x49>
c001279d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127a1:	74 21                	je     c00127c4 <File::write(unsigned long long, void*, int*)+0x50>
c00127a3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127a5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127a9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127b7:	5b                   	pop    ebx
c00127b8:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00127bb:	ff e0                	jmp    eax
c00127bd:	b8 0b 00 00 00       	mov    eax,0xb
c00127c2:	eb 05                	jmp    c00127c9 <File::write(unsigned long long, void*, int*)+0x55>
c00127c4:	b8 05 00 00 00       	mov    eax,0x5
c00127c9:	5b                   	pop    ebx
c00127ca:	c3                   	ret    
c00127cb:	90                   	nop

c00127cc <Directory::read(unsigned long long, void*, int*)>:
c00127cc:	53                   	push   ebx
c00127cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127d5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127dc:	3c 19                	cmp    al,0x19
c00127de:	77 35                	ja     c0012815 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127e0:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c00127e7:	85 c0                	test   eax,eax
c00127e9:	74 2a                	je     c0012815 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127eb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127f1:	85 c0                	test   eax,eax
c00127f3:	74 20                	je     c0012815 <Directory::read(unsigned long long, void*, int*)+0x49>
c00127f5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127f9:	74 21                	je     c001281c <Directory::read(unsigned long long, void*, int*)+0x50>
c00127fb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127fd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012801:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012807:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001280b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001280f:	5b                   	pop    ebx
c0012810:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012813:	ff e0                	jmp    eax
c0012815:	b8 0b 00 00 00       	mov    eax,0xb
c001281a:	eb 05                	jmp    c0012821 <Directory::read(unsigned long long, void*, int*)+0x55>
c001281c:	b8 05 00 00 00       	mov    eax,0x5
c0012821:	5b                   	pop    ebx
c0012822:	c3                   	ret    
c0012823:	90                   	nop

c0012824 <Directory::write(unsigned long long, void*, int*)>:
c0012824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012828:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001282f:	b8 0b 00 00 00       	mov    eax,0xb
c0012834:	80 fa 19             	cmp    dl,0x19
c0012837:	77 18                	ja     c0012851 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012839:	8b 14 95 80 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2280]
c0012840:	85 d2                	test   edx,edx
c0012842:	74 0d                	je     c0012851 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012844:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001284b:	19 c0                	sbb    eax,eax
c001284d:	83 e0 0a             	and    eax,0xa
c0012850:	40                   	inc    eax
c0012851:	c3                   	ret    

c0012852 <File::isAtty()>:
c0012852:	31 c0                	xor    eax,eax
c0012854:	c3                   	ret    
c0012855:	90                   	nop

c0012856 <Directory::isAtty()>:
c0012856:	31 c0                	xor    eax,eax
c0012858:	c3                   	ret    
c0012859:	90                   	nop

c001285a <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001285a:	b8 0a 00 00 00       	mov    eax,0xa
c001285f:	c3                   	ret    

c0012860 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012860:	b8 0a 00 00 00       	mov    eax,0xa
c0012865:	c3                   	ret    

c0012866 <Filesystem::getFileFirstSector(char const*)>:
c0012866:	31 c0                	xor    eax,eax
c0012868:	31 d2                	xor    edx,edx
c001286a:	c3                   	ret    
c001286b:	90                   	nop

c001286c <File::~File()>:
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	ba 10 a7 02 c0       	mov    edx,0xc002a710
c0012874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012878:	89 10                	mov    DWORD PTR [eax],edx
c001287a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001287e:	83 ec 0c             	sub    esp,0xc
c0012881:	50                   	push   eax
c0012882:	e8 dd e6 ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c0012887:	83 c4 10             	add    esp,0x10
c001288a:	90                   	nop
c001288b:	83 c4 0c             	add    esp,0xc
c001288e:	c3                   	ret    
c001288f:	90                   	nop

c0012890 <File::~File()>:
c0012890:	83 ec 0c             	sub    esp,0xc
c0012893:	83 ec 0c             	sub    esp,0xc
c0012896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001289a:	e8 cd ff ff ff       	call   c001286c <File::~File()>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	83 ec 08             	sub    esp,0x8
c00128a5:	68 14 01 00 00       	push   0x114
c00128aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128ae:	e8 72 fc ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c00128b3:	83 c4 10             	add    esp,0x10
c00128b6:	83 c4 0c             	add    esp,0xc
c00128b9:	c3                   	ret    

c00128ba <Directory::~Directory()>:
c00128ba:	83 ec 0c             	sub    esp,0xc
c00128bd:	ba 2c a7 02 c0       	mov    edx,0xc002a72c
c00128c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128c6:	89 10                	mov    DWORD PTR [eax],edx
c00128c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128cc:	83 ec 0c             	sub    esp,0xc
c00128cf:	50                   	push   eax
c00128d0:	e8 8f e6 ff ff       	call   c0010f64 <UnixFile::~UnixFile()>
c00128d5:	83 c4 10             	add    esp,0x10
c00128d8:	90                   	nop
c00128d9:	83 c4 0c             	add    esp,0xc
c00128dc:	c3                   	ret    
c00128dd:	90                   	nop

c00128de <Directory::~Directory()>:
c00128de:	83 ec 0c             	sub    esp,0xc
c00128e1:	83 ec 0c             	sub    esp,0xc
c00128e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e8:	e8 cd ff ff ff       	call   c00128ba <Directory::~Directory()>
c00128ed:	83 c4 10             	add    esp,0x10
c00128f0:	83 ec 08             	sub    esp,0x8
c00128f3:	68 14 01 00 00       	push   0x114
c00128f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128fc:	e8 24 fc ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0012901:	83 c4 10             	add    esp,0x10
c0012904:	83 c4 0c             	add    esp,0xc
c0012907:	c3                   	ret    

c0012908 <Filesystem::Filesystem()>:
c0012908:	ba a8 a6 02 c0       	mov    edx,0xc002a6a8
c001290d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012911:	89 10                	mov    DWORD PTR [eax],edx
c0012913:	8b 15 f4 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d8f4
c0012919:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001291d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012924:	a3 f4 d8 02 c0       	mov    ds:0xc002d8f4,eax
c0012929:	90                   	nop
c001292a:	c3                   	ret    
c001292b:	90                   	nop

c001292c <Filesystem::~Filesystem()>:
c001292c:	ba a8 a6 02 c0       	mov    edx,0xc002a6a8
c0012931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012935:	89 10                	mov    DWORD PTR [eax],edx
c0012937:	90                   	nop
c0012938:	c3                   	ret    
c0012939:	90                   	nop

c001293a <Filesystem::~Filesystem()>:
c001293a:	83 ec 0c             	sub    esp,0xc
c001293d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012941:	e8 e6 ff ff ff       	call   c001292c <Filesystem::~Filesystem()>
c0012946:	83 c4 04             	add    esp,0x4
c0012949:	83 ec 08             	sub    esp,0x8
c001294c:	6a 08                	push   0x8
c001294e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012952:	e8 ce fb ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	83 c4 0c             	add    esp,0xc
c001295d:	c3                   	ret    

c001295e <Fs::getcwd(Process*, char*, int)>:
c001295e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012962:	31 c0                	xor    eax,eax
c0012964:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012967:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001296b:	7d 15                	jge    c0012982 <Fs::getcwd(Process*, char*, int)+0x24>
c001296d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012971:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012978:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001297b:	84 c9                	test   cl,cl
c001297d:	74 06                	je     c0012985 <Fs::getcwd(Process*, char*, int)+0x27>
c001297f:	40                   	inc    eax
c0012980:	eb e2                	jmp    c0012964 <Fs::getcwd(Process*, char*, int)+0x6>
c0012982:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012985:	31 c0                	xor    eax,eax
c0012987:	c3                   	ret    

c0012988 <Fs::initVFS()>:
c0012988:	83 ec 18             	sub    esp,0x18
c001298b:	6a 08                	push   0x8
c001298d:	e8 0a cc ff ff       	call   c000f59c <malloc>
c0012992:	89 04 24             	mov    DWORD PTR [esp],eax
c0012995:	e8 ce de 00 00       	call   c0020868 <FAT::FAT()>
c001299a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00129a1:	e8 f6 cb ff ff       	call   c000f59c <malloc>
c00129a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00129a9:	e8 c6 f0 00 00       	call   c0021a74 <ISO9660::ISO9660()>
c00129ae:	83 c4 1c             	add    esp,0x1c
c00129b1:	c3                   	ret    

c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00129b2:	55                   	push   ebp
c00129b3:	57                   	push   edi
c00129b4:	56                   	push   esi
c00129b5:	53                   	push   ebx
c00129b6:	81 ec 10 04 00 00    	sub    esp,0x410
c00129bc:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00129c3:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00129ca:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00129d1:	68 00 04 00 00       	push   0x400
c00129d6:	6a 00                	push   0x0
c00129d8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00129dc:	56                   	push   esi
c00129dd:	e8 6e dd fe ff       	call   c0000750 <memset>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00129e9:	75 0b                	jne    c00129f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00129eb:	50                   	push   eax
c00129ec:	50                   	push   eax
c00129ed:	57                   	push   edi
c00129ee:	56                   	push   esi
c00129ef:	e8 18 de fe ff       	call   c000080c <strcpy>
c00129f4:	eb 41                	jmp    c0012a37 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00129f6:	8a 07                	mov    al,BYTE PTR [edi]
c00129f8:	3c 5c                	cmp    al,0x5c
c00129fa:	74 04                	je     c0012a00 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00129fc:	3c 2f                	cmp    al,0x2f
c00129fe:	75 18                	jne    c0012a18 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012a00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a03:	3c 60                	cmp    al,0x60
c0012a05:	7e 03                	jle    c0012a0a <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012a07:	83 e8 20             	sub    eax,0x20
c0012a0a:	88 04 24             	mov    BYTE PTR [esp],al
c0012a0d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a14:	50                   	push   eax
c0012a15:	50                   	push   eax
c0012a16:	eb 18                	jmp    c0012a30 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a18:	50                   	push   eax
c0012a19:	50                   	push   eax
c0012a1a:	55                   	push   ebp
c0012a1b:	56                   	push   esi
c0012a1c:	e8 eb dd fe ff       	call   c000080c <strcpy>
c0012a21:	5a                   	pop    edx
c0012a22:	59                   	pop    ecx
c0012a23:	68 8a b9 02 c0       	push   0xc002b98a
c0012a28:	56                   	push   esi
c0012a29:	e8 1e df fe ff       	call   c000094c <strcat>
c0012a2e:	5d                   	pop    ebp
c0012a2f:	58                   	pop    eax
c0012a30:	57                   	push   edi
c0012a31:	56                   	push   esi
c0012a32:	e8 15 df fe ff       	call   c000094c <strcat>
c0012a37:	83 c4 10             	add    esp,0x10
c0012a3a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a3d:	3c 60                	cmp    al,0x60
c0012a3f:	7e 03                	jle    c0012a44 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012a41:	83 e8 20             	sub    eax,0x20
c0012a44:	88 04 24             	mov    BYTE PTR [esp],al
c0012a47:	88 03                	mov    BYTE PTR [ebx],al
c0012a49:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a50:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012a56:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012a5a:	bf 03 00 00 00       	mov    edi,0x3
c0012a5f:	b8 03 00 00 00       	mov    eax,0x3
c0012a64:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012a67:	84 d2                	test   dl,dl
c0012a69:	0f 84 91 00 00 00    	je     c0012b00 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012a6f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012a72:	80 fa 5c             	cmp    dl,0x5c
c0012a75:	74 05                	je     c0012a7c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012a77:	80 fa 2f             	cmp    dl,0x2f
c0012a7a:	75 12                	jne    c0012a8e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a7c:	89 c5                	mov    ebp,eax
c0012a7e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a83:	74 09                	je     c0012a8e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012a85:	40                   	inc    eax
c0012a86:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012a8a:	89 cf                	mov    edi,ecx
c0012a8c:	eb d6                	jmp    c0012a64 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012a8e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012a93:	75 5b                	jne    c0012af0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a95:	80 fa 2e             	cmp    dl,0x2e
c0012a98:	75 56                	jne    c0012af0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012a9a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012a9e:	74 19                	je     c0012ab9 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012aa0:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012aa5:	74 53                	je     c0012afa <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012aa7:	89 f9                	mov    ecx,edi
c0012aa9:	41                   	inc    ecx
c0012aaa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012aad:	80 fa 2f             	cmp    dl,0x2f
c0012ab0:	74 f7                	je     c0012aa9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ab2:	80 fa 5c             	cmp    dl,0x5c
c0012ab5:	74 f2                	je     c0012aa9 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ab7:	eb d1                	jmp    c0012a8a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ab9:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012abe:	74 3a                	je     c0012afa <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ac0:	83 f8 03             	cmp    eax,0x3
c0012ac3:	74 c5                	je     c0012a8a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ac5:	41                   	inc    ecx
c0012ac6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012ac9:	80 fa 2f             	cmp    dl,0x2f
c0012acc:	74 f7                	je     c0012ac5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ace:	80 fa 5c             	cmp    dl,0x5c
c0012ad1:	74 f2                	je     c0012ac5 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ad3:	48                   	dec    eax
c0012ad4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ad8:	75 06                	jne    c0012ae0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ada:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ade:	eb f3                	jmp    c0012ad3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012ae0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ae4:	74 07                	je     c0012aed <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ae6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012aea:	48                   	dec    eax
c0012aeb:	eb f3                	jmp    c0012ae0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012aed:	40                   	inc    eax
c0012aee:	eb 9a                	jmp    c0012a8a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012af0:	80 fa 2f             	cmp    dl,0x2f
c0012af3:	74 95                	je     c0012a8a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012af5:	80 fa 5c             	cmp    dl,0x5c
c0012af8:	74 90                	je     c0012a8a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012afa:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012afd:	40                   	inc    eax
c0012afe:	eb 8a                	jmp    c0012a8a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b00:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b04:	83 ec 0c             	sub    esp,0xc
c0012b07:	53                   	push   ebx
c0012b08:	e8 5f dc fe ff       	call   c000076c <strlen>
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b15:	75 26                	jne    c0012b3d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b17:	83 ec 0c             	sub    esp,0xc
c0012b1a:	53                   	push   ebx
c0012b1b:	e8 4c dc fe ff       	call   c000076c <strlen>
c0012b20:	83 c4 10             	add    esp,0x10
c0012b23:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b28:	74 26                	je     c0012b50 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b2a:	83 ec 0c             	sub    esp,0xc
c0012b2d:	53                   	push   ebx
c0012b2e:	e8 39 dc fe ff       	call   c000076c <strlen>
c0012b33:	83 c4 10             	add    esp,0x10
c0012b36:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b3b:	eb c7                	jmp    c0012b04 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012b3d:	83 ec 0c             	sub    esp,0xc
c0012b40:	53                   	push   ebx
c0012b41:	e8 26 dc fe ff       	call   c000076c <strlen>
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b4e:	74 c7                	je     c0012b17 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012b50:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012b56:	5b                   	pop    ebx
c0012b57:	5e                   	pop    esi
c0012b58:	5f                   	pop    edi
c0012b59:	5d                   	pop    ebp
c0012b5a:	c3                   	ret    
c0012b5b:	90                   	nop

c0012b5c <File::File(char const*, Process*)>:
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b63:	83 ec 08             	sub    esp,0x8
c0012b66:	6a 00                	push   0x0
c0012b68:	50                   	push   eax
c0012b69:	e8 14 e2 ff ff       	call   c0010d82 <UnixFile::UnixFile(int)>
c0012b6e:	83 c4 10             	add    esp,0x10
c0012b71:	ba 10 a7 02 c0       	mov    edx,0xc002a710
c0012b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7a:	89 10                	mov    DWORD PTR [eax],edx
c0012b7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b80:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b8a:	83 c0 0d             	add    eax,0xd
c0012b8d:	83 ec 04             	sub    esp,0x4
c0012b90:	52                   	push   edx
c0012b91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b95:	50                   	push   eax
c0012b96:	e8 17 fe ff ff       	call   c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ba5:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bac:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bb6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012bba:	90                   	nop
c0012bbb:	83 c4 0c             	add    esp,0xc
c0012bbe:	c3                   	ret    
c0012bbf:	90                   	nop

c0012bc0 <File::open(FileOpenMode)>:
c0012bc0:	53                   	push   ebx
c0012bc1:	b8 0b 00 00 00       	mov    eax,0xb
c0012bc6:	83 ec 08             	sub    esp,0x8
c0012bc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bcd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012bd4:	80 fa 19             	cmp    dl,0x19
c0012bd7:	77 40                	ja     c0012c19 <File::open(FileOpenMode)+0x59>
c0012bd9:	8b 14 95 80 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2280]
c0012be0:	85 d2                	test   edx,edx
c0012be2:	74 35                	je     c0012c19 <File::open(FileOpenMode)+0x59>
c0012be4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012bea:	85 d2                	test   edx,edx
c0012bec:	74 2b                	je     c0012c19 <File::open(FileOpenMode)+0x59>
c0012bee:	b8 06 00 00 00       	mov    eax,0x6
c0012bf3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012bf7:	75 20                	jne    c0012c19 <File::open(FileOpenMode)+0x59>
c0012bf9:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bfb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c05:	51                   	push   ecx
c0012c06:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c09:	51                   	push   ecx
c0012c0a:	52                   	push   edx
c0012c0b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c0e:	83 c4 10             	add    esp,0x10
c0012c11:	85 c0                	test   eax,eax
c0012c13:	75 04                	jne    c0012c19 <File::open(FileOpenMode)+0x59>
c0012c15:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c19:	83 c4 08             	add    esp,0x8
c0012c1c:	5b                   	pop    ebx
c0012c1d:	c3                   	ret    

c0012c1e <File::close()>:
c0012c1e:	53                   	push   ebx
c0012c1f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c24:	83 ec 08             	sub    esp,0x8
c0012c27:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c2b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c32:	80 fa 19             	cmp    dl,0x19
c0012c35:	77 41                	ja     c0012c78 <File::close()+0x5a>
c0012c37:	8b 1c 95 80 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2280]
c0012c3e:	85 db                	test   ebx,ebx
c0012c40:	74 36                	je     c0012c78 <File::close()+0x5a>
c0012c42:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012c49:	74 2d                	je     c0012c78 <File::close()+0x5a>
c0012c4b:	b8 05 00 00 00       	mov    eax,0x5
c0012c50:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c54:	74 22                	je     c0012c78 <File::close()+0x5a>
c0012c56:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012c5a:	8b 04 95 80 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2280]
c0012c61:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c67:	53                   	push   ebx
c0012c68:	53                   	push   ebx
c0012c69:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c6b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c71:	50                   	push   eax
c0012c72:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	83 c4 08             	add    esp,0x8
c0012c7b:	5b                   	pop    ebx
c0012c7c:	c3                   	ret    
c0012c7d:	90                   	nop

c0012c7e <File::seek(unsigned long long)>:
c0012c7e:	56                   	push   esi
c0012c7f:	53                   	push   ebx
c0012c80:	b8 0b 00 00 00       	mov    eax,0xb
c0012c85:	51                   	push   ecx
c0012c86:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c8a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c8e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012c95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c99:	80 fa 19             	cmp    dl,0x19
c0012c9c:	77 31                	ja     c0012ccf <File::seek(unsigned long long)+0x51>
c0012c9e:	8b 14 95 80 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2280]
c0012ca5:	85 d2                	test   edx,edx
c0012ca7:	74 26                	je     c0012ccf <File::seek(unsigned long long)+0x51>
c0012ca9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012caf:	85 d2                	test   edx,edx
c0012cb1:	74 1c                	je     c0012ccf <File::seek(unsigned long long)+0x51>
c0012cb3:	b8 05 00 00 00       	mov    eax,0x5
c0012cb8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012cbc:	74 11                	je     c0012ccf <File::seek(unsigned long long)+0x51>
c0012cbe:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cc0:	53                   	push   ebx
c0012cc1:	51                   	push   ecx
c0012cc2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012cc8:	52                   	push   edx
c0012cc9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ccc:	83 c4 10             	add    esp,0x10
c0012ccf:	5a                   	pop    edx
c0012cd0:	5b                   	pop    ebx
c0012cd1:	5e                   	pop    esi
c0012cd2:	c3                   	ret    
c0012cd3:	90                   	nop

c0012cd4 <File::tell(unsigned long long*)>:
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	b8 0b 00 00 00       	mov    eax,0xb
c0012cdc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ce0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ce7:	80 fa 19             	cmp    dl,0x19
c0012cea:	77 34                	ja     c0012d20 <File::tell(unsigned long long*)+0x4c>
c0012cec:	8b 14 95 80 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2280]
c0012cf3:	85 d2                	test   edx,edx
c0012cf5:	74 29                	je     c0012d20 <File::tell(unsigned long long*)+0x4c>
c0012cf7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cfd:	85 d2                	test   edx,edx
c0012cff:	74 1f                	je     c0012d20 <File::tell(unsigned long long*)+0x4c>
c0012d01:	b8 05 00 00 00       	mov    eax,0x5
c0012d06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d0a:	74 14                	je     c0012d20 <File::tell(unsigned long long*)+0x4c>
c0012d0c:	50                   	push   eax
c0012d0d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d19:	52                   	push   edx
c0012d1a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d1d:	83 c4 10             	add    esp,0x10
c0012d20:	83 c4 0c             	add    esp,0xc
c0012d23:	c3                   	ret    

c0012d24 <File::rewind()>:
c0012d24:	83 ec 10             	sub    esp,0x10
c0012d27:	6a 00                	push   0x0
c0012d29:	6a 00                	push   0x0
c0012d2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d2f:	e8 4a ff ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c0012d34:	83 c4 1c             	add    esp,0x1c
c0012d37:	c3                   	ret    

c0012d38 <File::unlink()>:
c0012d38:	83 ec 0c             	sub    esp,0xc
c0012d3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d4b:	80 f9 19             	cmp    cl,0x19
c0012d4e:	77 2f                	ja     c0012d7f <File::unlink()+0x47>
c0012d50:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0012d57:	85 c9                	test   ecx,ecx
c0012d59:	74 24                	je     c0012d7f <File::unlink()+0x47>
c0012d5b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d61:	85 c9                	test   ecx,ecx
c0012d63:	74 1a                	je     c0012d7f <File::unlink()+0x47>
c0012d65:	b8 06 00 00 00       	mov    eax,0x6
c0012d6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d6e:	75 0f                	jne    c0012d7f <File::unlink()+0x47>
c0012d70:	83 c2 0d             	add    edx,0xd
c0012d73:	50                   	push   eax
c0012d74:	50                   	push   eax
c0012d75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d77:	52                   	push   edx
c0012d78:	51                   	push   ecx
c0012d79:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	83 c4 0c             	add    esp,0xc
c0012d82:	c3                   	ret    
c0012d83:	90                   	nop

c0012d84 <File::rename(char const*)>:
c0012d84:	83 ec 0c             	sub    esp,0xc
c0012d87:	b8 0b 00 00 00       	mov    eax,0xb
c0012d8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d97:	80 f9 19             	cmp    cl,0x19
c0012d9a:	77 32                	ja     c0012dce <File::rename(char const*)+0x4a>
c0012d9c:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0012da3:	85 c9                	test   ecx,ecx
c0012da5:	74 27                	je     c0012dce <File::rename(char const*)+0x4a>
c0012da7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dad:	85 c9                	test   ecx,ecx
c0012daf:	74 1d                	je     c0012dce <File::rename(char const*)+0x4a>
c0012db1:	b8 06 00 00 00       	mov    eax,0x6
c0012db6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dba:	75 12                	jne    c0012dce <File::rename(char const*)+0x4a>
c0012dbc:	83 c2 0d             	add    edx,0xd
c0012dbf:	50                   	push   eax
c0012dc0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dc6:	52                   	push   edx
c0012dc7:	51                   	push   ecx
c0012dc8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	83 c4 0c             	add    esp,0xc
c0012dd1:	c3                   	ret    

c0012dd2 <File::chfatattr(unsigned char, unsigned char)>:
c0012dd2:	57                   	push   edi
c0012dd3:	b8 0b 00 00 00       	mov    eax,0xb
c0012dd8:	56                   	push   esi
c0012dd9:	53                   	push   ebx
c0012dda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012de2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012de9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ded:	80 f9 19             	cmp    cl,0x19
c0012df0:	77 37                	ja     c0012e29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012df2:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0012df9:	85 c9                	test   ecx,ecx
c0012dfb:	74 2c                	je     c0012e29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012dfd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e03:	85 c9                	test   ecx,ecx
c0012e05:	74 22                	je     c0012e29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e07:	b8 06 00 00 00       	mov    eax,0x6
c0012e0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e10:	75 17                	jne    c0012e29 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e12:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e14:	89 f0                	mov    eax,esi
c0012e16:	83 c2 0d             	add    edx,0xd
c0012e19:	0f b6 f0             	movzx  esi,al
c0012e1c:	0f b6 db             	movzx  ebx,bl
c0012e1f:	56                   	push   esi
c0012e20:	53                   	push   ebx
c0012e21:	52                   	push   edx
c0012e22:	51                   	push   ecx
c0012e23:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e26:	83 c4 10             	add    esp,0x10
c0012e29:	5b                   	pop    ebx
c0012e2a:	5e                   	pop    esi
c0012e2b:	5f                   	pop    edi
c0012e2c:	c3                   	ret    
c0012e2d:	90                   	nop

c0012e2e <File::exists()>:
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	31 c0                	xor    eax,eax
c0012e33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e37:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e3e:	80 f9 19             	cmp    cl,0x19
c0012e41:	77 24                	ja     c0012e67 <File::exists()+0x39>
c0012e43:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0012e4a:	85 c9                	test   ecx,ecx
c0012e4c:	74 19                	je     c0012e67 <File::exists()+0x39>
c0012e4e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e54:	85 c9                	test   ecx,ecx
c0012e56:	74 0f                	je     c0012e67 <File::exists()+0x39>
c0012e58:	83 c2 0d             	add    edx,0xd
c0012e5b:	50                   	push   eax
c0012e5c:	50                   	push   eax
c0012e5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e5f:	52                   	push   edx
c0012e60:	51                   	push   ecx
c0012e61:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e64:	83 c4 10             	add    esp,0x10
c0012e67:	83 c4 0c             	add    esp,0xc
c0012e6a:	c3                   	ret    
c0012e6b:	90                   	nop

c0012e6c <File::stat(unsigned long long*, bool*)>:
c0012e6c:	56                   	push   esi
c0012e6d:	53                   	push   ebx
c0012e6e:	50                   	push   eax
c0012e6f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e78:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e87:	80 f9 19             	cmp    cl,0x19
c0012e8a:	77 3d                	ja     c0012ec9 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e8c:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0012e93:	85 c9                	test   ecx,ecx
c0012e95:	74 32                	je     c0012ec9 <File::stat(unsigned long long*, bool*)+0x5d>
c0012e97:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e9d:	85 c9                	test   ecx,ecx
c0012e9f:	74 28                	je     c0012ec9 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ea1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ea3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ea7:	74 13                	je     c0012ebc <File::stat(unsigned long long*, bool*)+0x50>
c0012ea9:	83 ec 04             	sub    esp,0x4
c0012eac:	56                   	push   esi
c0012ead:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012eb3:	51                   	push   ecx
c0012eb4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012eb7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012eba:	eb 0a                	jmp    c0012ec6 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ebc:	53                   	push   ebx
c0012ebd:	83 c2 0d             	add    edx,0xd
c0012ec0:	56                   	push   esi
c0012ec1:	52                   	push   edx
c0012ec2:	51                   	push   ecx
c0012ec3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ec6:	83 c4 10             	add    esp,0x10
c0012ec9:	5a                   	pop    edx
c0012eca:	5b                   	pop    ebx
c0012ecb:	5e                   	pop    esi
c0012ecc:	c3                   	ret    

c0012ecd <Fs::setcwd(Process*, char*)>:
c0012ecd:	55                   	push   ebp
c0012ece:	57                   	push   edi
c0012ecf:	56                   	push   esi
c0012ed0:	53                   	push   ebx
c0012ed1:	81 ec 20 02 00 00    	sub    esp,0x220
c0012ed7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012ede:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012ee4:	57                   	push   edi
c0012ee5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012eec:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012ef0:	56                   	push   esi
c0012ef1:	e8 bc fa ff ff       	call   c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ef6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ef9:	e8 6e d8 fe ff       	call   c000076c <strlen>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	83 f8 02             	cmp    eax,0x2
c0012f04:	77 17                	ja     c0012f1d <Fs::setcwd(Process*, char*)+0x50>
c0012f06:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f0b:	83 e8 41             	sub    eax,0x41
c0012f0e:	83 f8 19             	cmp    eax,0x19
c0012f11:	76 24                	jbe    c0012f37 <Fs::setcwd(Process*, char*)+0x6a>
c0012f13:	b8 03 00 00 00       	mov    eax,0x3
c0012f18:	e9 e0 00 00 00       	jmp    c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	56                   	push   esi
c0012f21:	e8 46 d8 fe ff       	call   c000076c <strlen>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	83 f8 03             	cmp    eax,0x3
c0012f2c:	75 34                	jne    c0012f62 <Fs::setcwd(Process*, char*)+0x95>
c0012f2e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012f33:	75 2d                	jne    c0012f62 <Fs::setcwd(Process*, char*)+0x95>
c0012f35:	eb cf                	jmp    c0012f06 <Fs::setcwd(Process*, char*)+0x39>
c0012f37:	8b 14 85 80 dd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2280]
c0012f3e:	b8 05 00 00 00       	mov    eax,0x5
c0012f43:	85 d2                	test   edx,edx
c0012f45:	0f 84 b2 00 00 00    	je     c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012f4b:	b8 06 00 00 00       	mov    eax,0x6
c0012f50:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012f57:	0f 85 92 00 00 00    	jne    c0012fef <Fs::setcwd(Process*, char*)+0x122>
c0012f5d:	e9 9b 00 00 00       	jmp    c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	68 14 01 00 00       	push   0x114
c0012f6a:	e8 2d c6 ff ff       	call   c000f59c <malloc>
c0012f6f:	83 c4 0c             	add    esp,0xc
c0012f72:	89 c3                	mov    ebx,eax
c0012f74:	55                   	push   ebp
c0012f75:	56                   	push   esi
c0012f76:	50                   	push   eax
c0012f77:	e8 e0 fb ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c0012f7c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012f81:	83 c4 0c             	add    esp,0xc
c0012f84:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012f88:	50                   	push   eax
c0012f89:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f8d:	50                   	push   eax
c0012f8e:	53                   	push   ebx
c0012f8f:	e8 d8 fe ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	83 f8 02             	cmp    eax,0x2
c0012f9a:	74 04                	je     c0012fa0 <Fs::setcwd(Process*, char*)+0xd3>
c0012f9c:	85 c0                	test   eax,eax
c0012f9e:	74 1c                	je     c0012fbc <Fs::setcwd(Process*, char*)+0xef>
c0012fa0:	b8 01 00 00 00       	mov    eax,0x1
c0012fa5:	85 db                	test   ebx,ebx
c0012fa7:	74 54                	je     c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012fa9:	83 ec 0c             	sub    esp,0xc
c0012fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fae:	53                   	push   ebx
c0012faf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fb2:	83 c4 10             	add    esp,0x10
c0012fb5:	b8 01 00 00 00       	mov    eax,0x1
c0012fba:	eb 41                	jmp    c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012fbc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012fc1:	75 1c                	jne    c0012fdf <Fs::setcwd(Process*, char*)+0x112>
c0012fc3:	b8 02 00 00 00       	mov    eax,0x2
c0012fc8:	85 db                	test   ebx,ebx
c0012fca:	74 31                	je     c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fd1:	53                   	push   ebx
c0012fd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	b8 02 00 00 00       	mov    eax,0x2
c0012fdd:	eb 1e                	jmp    c0012ffd <Fs::setcwd(Process*, char*)+0x130>
c0012fdf:	85 db                	test   ebx,ebx
c0012fe1:	74 0c                	je     c0012fef <Fs::setcwd(Process*, char*)+0x122>
c0012fe3:	83 ec 0c             	sub    esp,0xc
c0012fe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fe8:	53                   	push   ebx
c0012fe9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fec:	83 c4 10             	add    esp,0x10
c0012fef:	50                   	push   eax
c0012ff0:	50                   	push   eax
c0012ff1:	56                   	push   esi
c0012ff2:	57                   	push   edi
c0012ff3:	e8 14 d8 fe ff       	call   c000080c <strcpy>
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	31 c0                	xor    eax,eax
c0012ffd:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013003:	5b                   	pop    ebx
c0013004:	5e                   	pop    esi
c0013005:	5f                   	pop    edi
c0013006:	5d                   	pop    ebp
c0013007:	c3                   	ret    

c0013008 <Directory::Directory(char const*, Process*)>:
c0013008:	83 ec 0c             	sub    esp,0xc
c001300b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001300f:	83 ec 08             	sub    esp,0x8
c0013012:	6a 00                	push   0x0
c0013014:	50                   	push   eax
c0013015:	e8 68 dd ff ff       	call   c0010d82 <UnixFile::UnixFile(int)>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	ba 2c a7 02 c0       	mov    edx,0xc002a72c
c0013022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013026:	89 10                	mov    DWORD PTR [eax],edx
c0013028:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001302c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013036:	83 c0 0d             	add    eax,0xd
c0013039:	83 ec 04             	sub    esp,0x4
c001303c:	52                   	push   edx
c001303d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013041:	50                   	push   eax
c0013042:	e8 6b f9 ff ff       	call   c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013047:	83 c4 10             	add    esp,0x10
c001304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013051:	8d 50 bf             	lea    edx,[eax-0x41]
c0013054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013058:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001305e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013062:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013066:	90                   	nop
c0013067:	83 c4 0c             	add    esp,0xc
c001306a:	c3                   	ret    
c001306b:	90                   	nop

c001306c <Directory::open()>:
c001306c:	53                   	push   ebx
c001306d:	b8 0b 00 00 00       	mov    eax,0xb
c0013072:	83 ec 08             	sub    esp,0x8
c0013075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013079:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013080:	80 fa 19             	cmp    dl,0x19
c0013083:	77 3d                	ja     c00130c2 <Directory::open()+0x56>
c0013085:	8b 14 95 80 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2280]
c001308c:	85 d2                	test   edx,edx
c001308e:	74 32                	je     c00130c2 <Directory::open()+0x56>
c0013090:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013096:	85 d2                	test   edx,edx
c0013098:	74 28                	je     c00130c2 <Directory::open()+0x56>
c001309a:	b8 06 00 00 00       	mov    eax,0x6
c001309f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00130a3:	75 1d                	jne    c00130c2 <Directory::open()+0x56>
c00130a5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00130ab:	50                   	push   eax
c00130ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00130ae:	51                   	push   ecx
c00130af:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00130b2:	51                   	push   ecx
c00130b3:	52                   	push   edx
c00130b4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	85 c0                	test   eax,eax
c00130bc:	75 04                	jne    c00130c2 <Directory::open()+0x56>
c00130be:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00130c2:	83 c4 08             	add    esp,0x8
c00130c5:	5b                   	pop    ebx
c00130c6:	c3                   	ret    
c00130c7:	90                   	nop

c00130c8 <Directory::close()>:
c00130c8:	53                   	push   ebx
c00130c9:	b8 0b 00 00 00       	mov    eax,0xb
c00130ce:	83 ec 08             	sub    esp,0x8
c00130d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130d5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130dc:	80 fa 19             	cmp    dl,0x19
c00130df:	77 41                	ja     c0013122 <Directory::close()+0x5a>
c00130e1:	8b 1c 95 80 dd 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2280]
c00130e8:	85 db                	test   ebx,ebx
c00130ea:	74 36                	je     c0013122 <Directory::close()+0x5a>
c00130ec:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00130f3:	74 2d                	je     c0013122 <Directory::close()+0x5a>
c00130f5:	b8 05 00 00 00       	mov    eax,0x5
c00130fa:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130fe:	74 22                	je     c0013122 <Directory::close()+0x5a>
c0013100:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013104:	8b 04 95 80 dd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2280]
c001310b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013111:	53                   	push   ebx
c0013112:	53                   	push   ebx
c0013113:	8b 10                	mov    edx,DWORD PTR [eax]
c0013115:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001311b:	50                   	push   eax
c001311c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	83 c4 08             	add    esp,0x8
c0013125:	5b                   	pop    ebx
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <Directory::unlink()>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	b8 0b 00 00 00       	mov    eax,0xb
c0013130:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013134:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001313b:	80 f9 19             	cmp    cl,0x19
c001313e:	77 2f                	ja     c001316f <Directory::unlink()+0x47>
c0013140:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0013147:	85 c9                	test   ecx,ecx
c0013149:	74 24                	je     c001316f <Directory::unlink()+0x47>
c001314b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013151:	85 c9                	test   ecx,ecx
c0013153:	74 1a                	je     c001316f <Directory::unlink()+0x47>
c0013155:	b8 06 00 00 00       	mov    eax,0x6
c001315a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001315e:	75 0f                	jne    c001316f <Directory::unlink()+0x47>
c0013160:	83 c2 0d             	add    edx,0xd
c0013163:	50                   	push   eax
c0013164:	50                   	push   eax
c0013165:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013167:	52                   	push   edx
c0013168:	51                   	push   ecx
c0013169:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001316c:	83 c4 10             	add    esp,0x10
c001316f:	83 c4 0c             	add    esp,0xc
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <Directory::rename(char const*)>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	b8 0b 00 00 00       	mov    eax,0xb
c001317c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013180:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013187:	80 f9 19             	cmp    cl,0x19
c001318a:	77 32                	ja     c00131be <Directory::rename(char const*)+0x4a>
c001318c:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c0013193:	85 c9                	test   ecx,ecx
c0013195:	74 27                	je     c00131be <Directory::rename(char const*)+0x4a>
c0013197:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001319d:	85 c9                	test   ecx,ecx
c001319f:	74 1d                	je     c00131be <Directory::rename(char const*)+0x4a>
c00131a1:	b8 06 00 00 00       	mov    eax,0x6
c00131a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131aa:	75 12                	jne    c00131be <Directory::rename(char const*)+0x4a>
c00131ac:	83 c2 0d             	add    edx,0xd
c00131af:	50                   	push   eax
c00131b0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131b6:	52                   	push   edx
c00131b7:	51                   	push   ecx
c00131b8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131bb:	83 c4 10             	add    esp,0x10
c00131be:	83 c4 0c             	add    esp,0xc
c00131c1:	c3                   	ret    

c00131c2 <Directory::exists()>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	31 c0                	xor    eax,eax
c00131c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131cb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131d2:	80 f9 19             	cmp    cl,0x19
c00131d5:	77 24                	ja     c00131fb <Directory::exists()+0x39>
c00131d7:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c00131de:	85 c9                	test   ecx,ecx
c00131e0:	74 19                	je     c00131fb <Directory::exists()+0x39>
c00131e2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131e8:	85 c9                	test   ecx,ecx
c00131ea:	74 0f                	je     c00131fb <Directory::exists()+0x39>
c00131ec:	83 c2 0d             	add    edx,0xd
c00131ef:	50                   	push   eax
c00131f0:	50                   	push   eax
c00131f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131f3:	52                   	push   edx
c00131f4:	51                   	push   ecx
c00131f5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	83 c4 0c             	add    esp,0xc
c00131fe:	c3                   	ret    
c00131ff:	90                   	nop

c0013200 <Directory::read(dirent*)>:
c0013200:	83 ec 1c             	sub    esp,0x1c
c0013203:	b8 0b 00 00 00       	mov    eax,0xb
c0013208:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001320c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013213:	80 fa 19             	cmp    dl,0x19
c0013216:	77 30                	ja     c0013248 <Directory::read(dirent*)+0x48>
c0013218:	8b 14 95 80 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2280]
c001321f:	85 d2                	test   edx,edx
c0013221:	74 25                	je     c0013248 <Directory::read(dirent*)+0x48>
c0013223:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001322a:	74 1c                	je     c0013248 <Directory::read(dirent*)+0x48>
c001322c:	83 ec 0c             	sub    esp,0xc
c001322f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013231:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013235:	52                   	push   edx
c0013236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001323a:	6a 00                	push   0x0
c001323c:	68 10 01 00 00       	push   0x110
c0013241:	51                   	push   ecx
c0013242:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013245:	83 c4 20             	add    esp,0x20
c0013248:	83 c4 1c             	add    esp,0x1c
c001324b:	c3                   	ret    

c001324c <Directory::create()>:
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	b8 0b 00 00 00       	mov    eax,0xb
c0013254:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013258:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001325f:	80 f9 19             	cmp    cl,0x19
c0013262:	77 2f                	ja     c0013293 <Directory::create()+0x47>
c0013264:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c001326b:	85 c9                	test   ecx,ecx
c001326d:	74 24                	je     c0013293 <Directory::create()+0x47>
c001326f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013275:	85 c9                	test   ecx,ecx
c0013277:	74 1a                	je     c0013293 <Directory::create()+0x47>
c0013279:	b8 06 00 00 00       	mov    eax,0x6
c001327e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013282:	75 0f                	jne    c0013293 <Directory::create()+0x47>
c0013284:	83 c2 0d             	add    edx,0xd
c0013287:	50                   	push   eax
c0013288:	50                   	push   eax
c0013289:	8b 01                	mov    eax,DWORD PTR [ecx]
c001328b:	52                   	push   edx
c001328c:	51                   	push   ecx
c001328d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013290:	83 c4 10             	add    esp,0x10
c0013293:	83 c4 0c             	add    esp,0xc
c0013296:	c3                   	ret    
c0013297:	90                   	nop

c0013298 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013298:	b8 0a 00 00 00       	mov    eax,0xa
c001329d:	c3                   	ret    

c001329e <Bus::Bus(char const*)>:
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a5:	83 ec 08             	sub    esp,0x8
c00132a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ac:	50                   	push   eax
c00132ad:	e8 88 09 00 00       	call   c0013c3a <Device::Device(char const*)>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c00132ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132be:	89 10                	mov    DWORD PTR [eax],edx
c00132c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00132ce:	90                   	nop
c00132cf:	83 c4 0c             	add    esp,0xc
c00132d2:	c3                   	ret    
c00132d3:	90                   	nop

c00132d4 <Bus::~Bus()>:
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c00132dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e0:	89 10                	mov    DWORD PTR [eax],edx
c00132e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e6:	83 ec 0c             	sub    esp,0xc
c00132e9:	50                   	push   eax
c00132ea:	e8 15 06 00 00       	call   c0013904 <Device::~Device()>
c00132ef:	83 c4 10             	add    esp,0x10
c00132f2:	90                   	nop
c00132f3:	83 c4 0c             	add    esp,0xc
c00132f6:	c3                   	ret    
c00132f7:	90                   	nop

c00132f8 <Bus::~Bus()>:
c00132f8:	83 ec 0c             	sub    esp,0xc
c00132fb:	83 ec 0c             	sub    esp,0xc
c00132fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013302:	e8 cd ff ff ff       	call   c00132d4 <Bus::~Bus()>
c0013307:	83 c4 10             	add    esp,0x10
c001330a:	83 ec 08             	sub    esp,0x8
c001330d:	68 58 01 00 00       	push   0x158
c0013312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013316:	e8 0a f2 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c001331b:	83 c4 10             	add    esp,0x10
c001331e:	83 c4 0c             	add    esp,0xc
c0013321:	c3                   	ret    

c0013322 <Buzzer::Buzzer(char const*)>:
c0013322:	83 ec 0c             	sub    esp,0xc
c0013325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013329:	83 ec 08             	sub    esp,0x8
c001332c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013330:	50                   	push   eax
c0013331:	e8 04 09 00 00       	call   c0013c3a <Device::Device(char const*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	ba 74 a7 02 c0       	mov    edx,0xc002a774
c001333e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013342:	89 10                	mov    DWORD PTR [eax],edx
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013356:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013360:	90                   	nop
c0013361:	83 c4 0c             	add    esp,0xc
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <Buzzer::~Buzzer()>:
c0013366:	83 ec 0c             	sub    esp,0xc
c0013369:	ba 74 a7 02 c0       	mov    edx,0xc002a774
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	89 10                	mov    DWORD PTR [eax],edx
c0013374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013378:	83 ec 0c             	sub    esp,0xc
c001337b:	50                   	push   eax
c001337c:	e8 83 05 00 00       	call   c0013904 <Device::~Device()>
c0013381:	83 c4 10             	add    esp,0x10
c0013384:	90                   	nop
c0013385:	83 c4 0c             	add    esp,0xc
c0013388:	c3                   	ret    
c0013389:	90                   	nop

c001338a <Buzzer::~Buzzer()>:
c001338a:	83 ec 0c             	sub    esp,0xc
c001338d:	83 ec 0c             	sub    esp,0xc
c0013390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013394:	e8 cd ff ff ff       	call   c0013366 <Buzzer::~Buzzer()>
c0013399:	83 c4 10             	add    esp,0x10
c001339c:	83 ec 08             	sub    esp,0x8
c001339f:	68 5c 01 00 00       	push   0x15c
c00133a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a8:	e8 78 f1 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c00133ad:	83 c4 10             	add    esp,0x10
c00133b0:	83 c4 0c             	add    esp,0xc
c00133b3:	c3                   	ret    

c00133b4 <Buzzer::stop()>:
c00133b4:	83 ec 14             	sub    esp,0x14
c00133b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00133bd:	6a 00                	push   0x0
c00133bf:	50                   	push   eax
c00133c0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00133c3:	83 c4 1c             	add    esp,0x1c
c00133c6:	c3                   	ret    

c00133c7 <beepThread(void*)>:
c00133c7:	53                   	push   ebx
c00133c8:	83 ec 08             	sub    esp,0x8
c00133cb:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00133d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133d4:	48                   	dec    eax
c00133d5:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c00133da:	75 01                	jne    c00133dd <beepThread(void*)+0x16>
c00133dc:	fb                   	sti    
c00133dd:	50                   	push   eax
c00133de:	50                   	push   eax
c00133df:	b8 40 42 0f 00       	mov    eax,0xf4240
c00133e4:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00133ea:	52                   	push   edx
c00133eb:	50                   	push   eax
c00133ec:	e8 de a7 00 00       	call   c001dbcf <nanoSleep(unsigned long long)>
c00133f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133f4:	e8 bb ff ff ff       	call   c00133b4 <Buzzer::stop()>
c00133f9:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013401:	83 c4 18             	add    esp,0x18
c0013404:	5b                   	pop    ebx
c0013405:	e9 c1 a6 00 00       	jmp    c001dacb <blockTask(TaskState)>

c001340a <Buzzer::beep(int, int, bool)>:
c001340a:	57                   	push   edi
c001340b:	56                   	push   esi
c001340c:	53                   	push   ebx
c001340d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013411:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013419:	52                   	push   edx
c001341a:	52                   	push   edx
c001341b:	8b 06                	mov    eax,DWORD PTR [esi]
c001341d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013421:	56                   	push   esi
c0013422:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013425:	83 c4 10             	add    esp,0x10
c0013428:	89 f8                	mov    eax,edi
c001342a:	84 c0                	test   al,al
c001342c:	74 1f                	je     c001344d <Buzzer::beep(int, int, bool)+0x43>
c001342e:	50                   	push   eax
c001342f:	50                   	push   eax
c0013430:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013436:	99                   	cdq    
c0013437:	52                   	push   edx
c0013438:	50                   	push   eax
c0013439:	e8 91 a7 00 00       	call   c001dbcf <nanoSleep(unsigned long long)>
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013445:	5b                   	pop    ebx
c0013446:	5e                   	pop    esi
c0013447:	5f                   	pop    edi
c0013448:	e9 67 ff ff ff       	jmp    c00133b4 <Buzzer::stop()>
c001344d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013453:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0013458:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013460:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013464:	c7 44 24 14 c7 33 01 c0 	mov    DWORD PTR [esp+0x14],0xc00133c7
c001346c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013470:	5b                   	pop    ebx
c0013471:	5e                   	pop    esi
c0013472:	5f                   	pop    edi
c0013473:	e9 58 a2 00 00       	jmp    c001d6d0 <Process::createThread(void (*)(void*), void*, int)>

c0013478 <User::loadClockSettings(int)>:
c0013478:	53                   	push   ebx
c0013479:	83 ec 14             	sub    esp,0x14
c001347c:	68 14 01 00 00       	push   0x114
c0013481:	e8 16 c1 ff ff       	call   c000f59c <malloc>
c0013486:	83 c4 0c             	add    esp,0xc
c0013489:	89 c3                	mov    ebx,eax
c001348b:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c0013491:	68 9c a7 02 c0       	push   0xc002a79c
c0013496:	50                   	push   eax
c0013497:	e8 c0 f6 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001349c:	58                   	pop    eax
c001349d:	5a                   	pop    edx
c001349e:	6a 01                	push   0x1
c00134a0:	53                   	push   ebx
c00134a1:	e8 1a f7 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c00134a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134a9:	e8 70 f7 ff ff       	call   c0012c1e <File::close()>
c00134ae:	83 c4 10             	add    esp,0x10
c00134b1:	85 db                	test   ebx,ebx
c00134b3:	74 0f                	je     c00134c4 <User::loadClockSettings(int)+0x4c>
c00134b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00134bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00134be:	83 c4 08             	add    esp,0x8
c00134c1:	5b                   	pop    ebx
c00134c2:	ff e0                	jmp    eax
c00134c4:	83 c4 08             	add    esp,0x8
c00134c7:	5b                   	pop    ebx
c00134c8:	c3                   	ret    
c00134c9:	90                   	nop

c00134ca <Clock::Clock(char const*)>:
c00134ca:	83 ec 0c             	sub    esp,0xc
c00134cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d1:	83 ec 08             	sub    esp,0x8
c00134d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d8:	50                   	push   eax
c00134d9:	e8 5c 07 00 00       	call   c0013c3a <Device::Device(char const*)>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	ba c4 a7 02 c0       	mov    edx,0xc002a7c4
c00134e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ea:	89 10                	mov    DWORD PTR [eax],edx
c00134ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134f0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00134fa:	90                   	nop
c00134fb:	83 c4 0c             	add    esp,0xc
c00134fe:	c3                   	ret    
c00134ff:	90                   	nop

c0013500 <Clock::~Clock()>:
c0013500:	83 ec 0c             	sub    esp,0xc
c0013503:	ba c4 a7 02 c0       	mov    edx,0xc002a7c4
c0013508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350c:	89 10                	mov    DWORD PTR [eax],edx
c001350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013512:	83 ec 0c             	sub    esp,0xc
c0013515:	50                   	push   eax
c0013516:	e8 e9 03 00 00       	call   c0013904 <Device::~Device()>
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	90                   	nop
c001351f:	83 c4 0c             	add    esp,0xc
c0013522:	c3                   	ret    
c0013523:	90                   	nop

c0013524 <Clock::~Clock()>:
c0013524:	83 ec 0c             	sub    esp,0xc
c0013527:	83 ec 0c             	sub    esp,0xc
c001352a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352e:	e8 cd ff ff ff       	call   c0013500 <Clock::~Clock()>
c0013533:	83 c4 10             	add    esp,0x10
c0013536:	83 ec 08             	sub    esp,0x8
c0013539:	68 58 01 00 00       	push   0x158
c001353e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013542:	e8 de ef ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	83 c4 0c             	add    esp,0xc
c001354d:	c3                   	ret    

c001354e <Clock::timeInSecondsLocal()>:
c001354e:	53                   	push   ebx
c001354f:	83 ec 14             	sub    esp,0x14
c0013552:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013556:	8b 10                	mov    edx,DWORD PTR [eax]
c0013558:	50                   	push   eax
c0013559:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001355c:	0f b6 0d fc d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d8fc
c0013563:	03 0d 00 d9 02 c0    	add    ecx,DWORD PTR ds:0xc002d900
c0013569:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001356f:	89 cb                	mov    ebx,ecx
c0013571:	c1 fb 1f             	sar    ebx,0x1f
c0013574:	01 c8                	add    eax,ecx
c0013576:	11 da                	adc    edx,ebx
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	31 c9                	xor    ecx,ecx
c001357d:	80 3d fd d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8fd,0x0
c0013584:	74 05                	je     c001358b <Clock::timeInSecondsLocal()+0x3d>
c0013586:	b9 08 07 00 00       	mov    ecx,0x708
c001358b:	31 db                	xor    ebx,ebx
c001358d:	01 c8                	add    eax,ecx
c001358f:	11 da                	adc    edx,ebx
c0013591:	83 c4 08             	add    esp,0x8
c0013594:	5b                   	pop    ebx
c0013595:	c3                   	ret    

c0013596 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013596:	57                   	push   edi
c0013597:	56                   	push   esi
c0013598:	53                   	push   ebx
c0013599:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001359d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135a7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135aa:	0f b6 05 fc d8 02 c0 	movzx  eax,BYTE PTR ds:0xc002d8fc
c00135b1:	03 05 00 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d900
c00135b7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00135bd:	99                   	cdq    
c00135be:	29 c6                	sub    esi,eax
c00135c0:	19 d7                	sbb    edi,edx
c00135c2:	89 f0                	mov    eax,esi
c00135c4:	89 fa                	mov    edx,edi
c00135c6:	31 f6                	xor    esi,esi
c00135c8:	80 3d fd d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8fd,0x0
c00135cf:	74 05                	je     c00135d6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00135d1:	be 08 07 00 00       	mov    esi,0x708
c00135d6:	31 ff                	xor    edi,edi
c00135d8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00135dc:	29 f0                	sub    eax,esi
c00135de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00135e2:	19 fa                	sbb    edx,edi
c00135e4:	89 d8                	mov    eax,ebx
c00135e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00135ea:	5b                   	pop    ebx
c00135eb:	5e                   	pop    esi
c00135ec:	5f                   	pop    edi
c00135ed:	ff e0                	jmp    eax

c00135ef <datetimeToSeconds(datetime_t)>:
c00135ef:	55                   	push   ebp
c00135f0:	57                   	push   edi
c00135f1:	56                   	push   esi
c00135f2:	53                   	push   ebx
c00135f3:	83 ec 14             	sub    esp,0x14
c00135f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00135fa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00135fe:	89 d3                	mov    ebx,edx
c0013600:	0f b6 c6             	movzx  eax,dh
c0013603:	c1 eb 10             	shr    ebx,0x10
c0013606:	48                   	dec    eax
c0013607:	66 81 eb 6c 07       	sub    bx,0x76c
c001360c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013610:	0f b6 f5             	movzx  esi,ch
c0013613:	89 cf                	mov    edi,ecx
c0013615:	6b f6 3c             	imul   esi,esi,0x3c
c0013618:	c1 ef 10             	shr    edi,0x10
c001361b:	0f b6 c9             	movzx  ecx,cl
c001361e:	89 f8                	mov    eax,edi
c0013620:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013626:	0f b6 f8             	movzx  edi,al
c0013629:	0f b6 d2             	movzx  edx,dl
c001362c:	01 fe                	add    esi,edi
c001362e:	01 f1                	add    ecx,esi
c0013630:	0f b7 f3             	movzx  esi,bx
c0013633:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013637:	c1 f9 1f             	sar    ecx,0x1f
c001363a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001363f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013643:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013648:	8b 0c 8d 00 a8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5800]
c001364f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013653:	76 29                	jbe    c001367e <datetimeToSeconds(datetime_t)+0x8f>
c0013655:	f6 c3 03             	test   bl,0x3
c0013658:	75 24                	jne    c001367e <datetimeToSeconds(datetime_t)+0x8f>
c001365a:	31 d2                	xor    edx,edx
c001365c:	bf 64 00 00 00       	mov    edi,0x64
c0013661:	89 d8                	mov    eax,ebx
c0013663:	66 f7 f7             	div    di
c0013666:	66 85 d2             	test   dx,dx
c0013669:	75 12                	jne    c001367d <datetimeToSeconds(datetime_t)+0x8e>
c001366b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013671:	bf 90 01 00 00       	mov    edi,0x190
c0013676:	99                   	cdq    
c0013677:	f7 ff                	idiv   edi
c0013679:	85 d2                	test   edx,edx
c001367b:	75 01                	jne    c001367e <datetimeToSeconds(datetime_t)+0x8f>
c001367d:	41                   	inc    ecx
c001367e:	66 83 fb 46          	cmp    bx,0x46
c0013682:	76 45                	jbe    c00136c9 <datetimeToSeconds(datetime_t)+0xda>
c0013684:	bb 46 00 00 00       	mov    ebx,0x46
c0013689:	bf 64 00 00 00       	mov    edi,0x64
c001368e:	bd 90 01 00 00       	mov    ebp,0x190
c0013693:	b8 6d 01 00 00       	mov    eax,0x16d
c0013698:	f6 c3 03             	test   bl,0x3
c001369b:	75 23                	jne    c00136c0 <datetimeToSeconds(datetime_t)+0xd1>
c001369d:	89 d8                	mov    eax,ebx
c001369f:	99                   	cdq    
c00136a0:	f7 ff                	idiv   edi
c00136a2:	b8 6e 01 00 00       	mov    eax,0x16e
c00136a7:	85 d2                	test   edx,edx
c00136a9:	75 15                	jne    c00136c0 <datetimeToSeconds(datetime_t)+0xd1>
c00136ab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136b1:	99                   	cdq    
c00136b2:	f7 fd                	idiv   ebp
c00136b4:	83 fa 01             	cmp    edx,0x1
c00136b7:	19 c0                	sbb    eax,eax
c00136b9:	f7 d0                	not    eax
c00136bb:	05 6e 01 00 00       	add    eax,0x16e
c00136c0:	01 c1                	add    ecx,eax
c00136c2:	43                   	inc    ebx
c00136c3:	39 f3                	cmp    ebx,esi
c00136c5:	7c cc                	jl     c0013693 <datetimeToSeconds(datetime_t)+0xa4>
c00136c7:	eb 35                	jmp    c00136fe <datetimeToSeconds(datetime_t)+0x10f>
c00136c9:	74 33                	je     c00136fe <datetimeToSeconds(datetime_t)+0x10f>
c00136cb:	b8 45 00 00 00       	mov    eax,0x45
c00136d0:	89 c2                	mov    edx,eax
c00136d2:	83 e2 03             	and    edx,0x3
c00136d5:	39 f0                	cmp    eax,esi
c00136d7:	7e 0f                	jle    c00136e8 <datetimeToSeconds(datetime_t)+0xf9>
c00136d9:	83 fa 01             	cmp    edx,0x1
c00136dc:	19 d2                	sbb    edx,edx
c00136de:	48                   	dec    eax
c00136df:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00136e6:	eb e8                	jmp    c00136d0 <datetimeToSeconds(datetime_t)+0xe1>
c00136e8:	b8 6d 01 00 00       	mov    eax,0x16d
c00136ed:	85 d2                	test   edx,edx
c00136ef:	75 0b                	jne    c00136fc <datetimeToSeconds(datetime_t)+0x10d>
c00136f1:	66 83 fb 01          	cmp    bx,0x1
c00136f5:	19 c0                	sbb    eax,eax
c00136f7:	05 6e 01 00 00       	add    eax,0x16e
c00136fc:	29 c1                	sub    ecx,eax
c00136fe:	b8 80 51 01 00       	mov    eax,0x15180
c0013703:	f7 e9                	imul   ecx
c0013705:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013709:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001370d:	83 c4 14             	add    esp,0x14
c0013710:	5b                   	pop    ebx
c0013711:	5e                   	pop    esi
c0013712:	5f                   	pop    edi
c0013713:	5d                   	pop    ebp
c0013714:	c3                   	ret    
c0013715:	90                   	nop

c0013716 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013716:	57                   	push   edi
c0013717:	56                   	push   esi
c0013718:	53                   	push   ebx
c0013719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001371d:	8b 06                	mov    eax,DWORD PTR [esi]
c001371f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013722:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013726:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001372a:	e8 c0 fe ff ff       	call   c00135ef <datetimeToSeconds(datetime_t)>
c001372f:	59                   	pop    ecx
c0013730:	0f b6 0d fc d8 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d8fc
c0013737:	5b                   	pop    ebx
c0013738:	03 0d 00 d9 02 c0    	add    ecx,DWORD PTR ds:0xc002d900
c001373e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013744:	89 cb                	mov    ebx,ecx
c0013746:	c1 fb 1f             	sar    ebx,0x1f
c0013749:	29 c8                	sub    eax,ecx
c001374b:	19 da                	sbb    edx,ebx
c001374d:	31 c9                	xor    ecx,ecx
c001374f:	80 3d fd d8 02 c0 00 	cmp    BYTE PTR ds:0xc002d8fd,0x0
c0013756:	74 05                	je     c001375d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013758:	b9 08 07 00 00       	mov    ecx,0x708
c001375d:	31 db                	xor    ebx,ebx
c001375f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013763:	29 c8                	sub    eax,ecx
c0013765:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013769:	19 da                	sbb    edx,ebx
c001376b:	89 f8                	mov    eax,edi
c001376d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013771:	5b                   	pop    ebx
c0013772:	5e                   	pop    esi
c0013773:	5f                   	pop    edi
c0013774:	ff e0                	jmp    eax

c0013776 <secondsToDatetime(unsigned long long)>:
c0013776:	55                   	push   ebp
c0013777:	57                   	push   edi
c0013778:	56                   	push   esi
c0013779:	53                   	push   ebx
c001377a:	83 ec 1c             	sub    esp,0x1c
c001377d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013781:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013785:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013789:	6a 00                	push   0x0
c001378b:	68 80 51 01 00       	push   0x15180
c0013790:	55                   	push   ebp
c0013791:	57                   	push   edi
c0013792:	e8 ad 2e 01 00       	call   c0026644 <__udivdi3>
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137a4:	6a 00                	push   0x0
c00137a6:	68 80 51 01 00       	push   0x15180
c00137ab:	55                   	push   ebp
c00137ac:	57                   	push   edi
c00137ad:	bf 10 0e 00 00       	mov    edi,0xe10
c00137b2:	e8 8d 2f 01 00       	call   c0026744 <__umoddi3>
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	99                   	cdq    
c00137bb:	f7 ff                	idiv   edi
c00137bd:	bf 3c 00 00 00       	mov    edi,0x3c
c00137c2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00137c5:	89 d0                	mov    eax,edx
c00137c7:	99                   	cdq    
c00137c8:	f7 ff                	idiv   edi
c00137ca:	85 db                	test   ebx,ebx
c00137cc:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00137cf:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00137d2:	79 11                	jns    c00137e5 <secondsToDatetime(unsigned long long)+0x6f>
c00137d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137d8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00137de:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137e3:	eb 07                	jmp    c00137ec <secondsToDatetime(unsigned long long)+0x76>
c00137e5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00137ea:	89 d8                	mov    eax,ebx
c00137ec:	bf b4 05 00 00       	mov    edi,0x5b4
c00137f1:	99                   	cdq    
c00137f2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00137f7:	f7 f9                	idiv   ecx
c00137f9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00137fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013802:	31 d2                	xor    edx,edx
c0013804:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001380c:	01 c3                	add    ebx,eax
c001380e:	89 d8                	mov    eax,ebx
c0013810:	f7 f1                	div    ecx
c0013812:	31 d2                	xor    edx,edx
c0013814:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013817:	89 d8                	mov    eax,ebx
c0013819:	f7 f7                	div    edi
c001381b:	31 d2                	xor    edx,edx
c001381d:	29 c1                	sub    ecx,eax
c001381f:	89 d8                	mov    eax,ebx
c0013821:	f7 f5                	div    ebp
c0013823:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013828:	29 c1                	sub    ecx,eax
c001382a:	31 d2                	xor    edx,edx
c001382c:	89 c8                	mov    eax,ecx
c001382e:	f7 f5                	div    ebp
c0013830:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013839:	31 d2                	xor    edx,edx
c001383b:	89 c8                	mov    eax,ecx
c001383d:	f7 f5                	div    ebp
c001383f:	31 d2                	xor    edx,edx
c0013841:	01 c3                	add    ebx,eax
c0013843:	89 c8                	mov    eax,ecx
c0013845:	f7 f7                	div    edi
c0013847:	bf 99 00 00 00       	mov    edi,0x99
c001384c:	29 c3                	sub    ebx,eax
c001384e:	31 d2                	xor    edx,edx
c0013850:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013858:	29 c3                	sub    ebx,eax
c001385a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001385d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013860:	bb 05 00 00 00       	mov    ebx,0x5
c0013865:	83 c1 02             	add    ecx,0x2
c0013868:	89 c8                	mov    eax,ecx
c001386a:	f7 f7                	div    edi
c001386c:	31 d2                	xor    edx,edx
c001386e:	89 c7                	mov    edi,eax
c0013870:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013876:	83 c0 02             	add    eax,0x2
c0013879:	f7 f3                	div    ebx
c001387b:	89 eb                	mov    ebx,ebp
c001387d:	29 c3                	sub    ebx,eax
c001387f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013885:	88 1e                	mov    BYTE PTR [esi],bl
c0013887:	19 c0                	sbb    eax,eax
c0013889:	31 d2                	xor    edx,edx
c001388b:	83 e0 0c             	and    eax,0xc
c001388e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013892:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001389a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001389e:	83 f9 01             	cmp    ecx,0x1
c00138a1:	0f 96 c2             	setbe  dl
c00138a4:	41                   	inc    ecx
c00138a5:	01 d0                	add    eax,edx
c00138a7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138aa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138ae:	83 c4 1c             	add    esp,0x1c
c00138b1:	89 f0                	mov    eax,esi
c00138b3:	5b                   	pop    ebx
c00138b4:	5e                   	pop    esi
c00138b5:	5f                   	pop    edi
c00138b6:	5d                   	pop    ebp
c00138b7:	c2 04 00             	ret    0x4

c00138ba <Clock::timeInDatetimeLocal()>:
c00138ba:	53                   	push   ebx
c00138bb:	83 ec 14             	sub    esp,0x14
c00138be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138c2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138c6:	e8 83 fc ff ff       	call   c001354e <Clock::timeInSecondsLocal()>
c00138cb:	83 c4 0c             	add    esp,0xc
c00138ce:	52                   	push   edx
c00138cf:	50                   	push   eax
c00138d0:	53                   	push   ebx
c00138d1:	e8 a0 fe ff ff       	call   c0013776 <secondsToDatetime(unsigned long long)>
c00138d6:	89 d8                	mov    eax,ebx
c00138d8:	83 c4 14             	add    esp,0x14
c00138db:	5b                   	pop    ebx
c00138dc:	c2 04 00             	ret    0x4
c00138df:	90                   	nop

c00138e0 <Device::hibernate()>:
c00138e0:	c3                   	ret    
c00138e1:	90                   	nop

c00138e2 <Device::wake()>:
c00138e2:	c3                   	ret    
c00138e3:	90                   	nop

c00138e4 <Device::detect()>:
c00138e4:	c3                   	ret    
c00138e5:	90                   	nop

c00138e6 <Device::disableLegacy()>:
c00138e6:	c3                   	ret    
c00138e7:	90                   	nop

c00138e8 <Device::powerSaving(PowerSavingLevel)>:
c00138e8:	c3                   	ret    
c00138e9:	90                   	nop

c00138ea <DriverlessDevice::close(int, int, void*)>:
c00138ea:	31 c0                	xor    eax,eax
c00138ec:	c3                   	ret    
c00138ed:	90                   	nop

c00138ee <DriverlessDevice::detect()>:
c00138ee:	c3                   	ret    
c00138ef:	90                   	nop

c00138f0 <DriverlessDevice::open(int, int, void*)>:
c00138f0:	83 ec 18             	sub    esp,0x18
c00138f3:	68 30 a8 02 c0       	push   0xc002a830
c00138f8:	e8 6c 64 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c00138fd:	83 c8 ff             	or     eax,0xffffffff
c0013900:	83 c4 1c             	add    esp,0x1c
c0013903:	c3                   	ret    

c0013904 <Device::~Device()>:
c0013904:	ba 90 a8 02 c0       	mov    edx,0xc002a890
c0013909:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001390d:	89 10                	mov    DWORD PTR [eax],edx
c001390f:	90                   	nop
c0013910:	c3                   	ret    
c0013911:	90                   	nop

c0013912 <Device::~Device()>:
c0013912:	83 ec 0c             	sub    esp,0xc
c0013915:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013919:	e8 e6 ff ff ff       	call   c0013904 <Device::~Device()>
c001391e:	83 c4 04             	add    esp,0x4
c0013921:	83 ec 08             	sub    esp,0x8
c0013924:	68 58 01 00 00       	push   0x158
c0013929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392d:	e8 f3 eb ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0013932:	83 c4 10             	add    esp,0x10
c0013935:	83 c4 0c             	add    esp,0xc
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <Device::findAndLoadDriver()>:
c001393a:	c7 44 24 04 4e a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a84e
c0013942:	e9 b6 ec ff ff       	jmp    c00125fd <Dbg::kprintf(char const*, ...)>
c0013947:	90                   	nop

c0013948 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013948:	57                   	push   edi
c0013949:	b9 09 00 00 00       	mov    ecx,0x9
c001394e:	56                   	push   esi
c001394f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013953:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013957:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013961:	81 c7 18 01 00 00    	add    edi,0x118
c0013967:	fc                   	cld    
c0013968:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001396a:	5e                   	pop    esi
c001396b:	5f                   	pop    edi
c001396c:	c3                   	ret    
c001396d:	90                   	nop

c001396e <Device::preOpenACPI(void*, char*, char*)>:
c001396e:	57                   	push   edi
c001396f:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013974:	56                   	push   esi
c0013975:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013979:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001397d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013987:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001398d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013993:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013997:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013999:	b9 0e 00 00 00       	mov    ecx,0xe
c001399e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00139a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00139a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139aa:	5e                   	pop    esi
c00139ab:	5f                   	pop    edi
c00139ac:	c3                   	ret    
c00139ad:	90                   	nop

c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00139ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139b2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00139b7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00139be:	75 0b                	jne    c00139cb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00139c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00139c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00139c9:	eb 1e                	jmp    c00139e9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00139cb:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00139d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00139d6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00139dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00139e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139e6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00139e9:	ff e0                	jmp    eax
c00139eb:	90                   	nop

c00139ec <Device::getParent()>:
c00139ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139f0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00139f6:	c3                   	ret    
c00139f7:	90                   	nop

c00139f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00139f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139fc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a01:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a08:	75 0b                	jne    c0013a15 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a0c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a10:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a13:	eb 1e                	jmp    c0013a33 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a15:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0013a1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a20:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a26:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a28:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a30:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a33:	ff e0                	jmp    eax
c0013a35:	90                   	nop

c0013a36 <Device::addChild(Device*)>:
c0013a36:	53                   	push   ebx
c0013a37:	83 ec 08             	sub    esp,0x8
c0013a3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a42:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a48:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a4e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a50:	85 d2                	test   edx,edx
c0013a52:	74 04                	je     c0013a58 <Device::addChild(Device*)+0x22>
c0013a54:	89 d3                	mov    ebx,edx
c0013a56:	eb f6                	jmp    c0013a4e <Device::addChild(Device*)+0x18>
c0013a58:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013a5b:	83 ec 0c             	sub    esp,0xc
c0013a5e:	6a 08                	push   0x8
c0013a60:	e8 37 bb ff ff       	call   c000f59c <malloc>
c0013a65:	89 03                	mov    DWORD PTR [ebx],eax
c0013a67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a74:	83 c4 18             	add    esp,0x18
c0013a77:	5b                   	pop    ebx
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Device::removeAllChildren()>:
c0013a7a:	56                   	push   esi
c0013a7b:	53                   	push   ebx
c0013a7c:	52                   	push   edx
c0013a7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a81:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013a87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a8a:	74 17                	je     c0013aa3 <Device::removeAllChildren()+0x29>
c0013a8c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a8f:	85 c0                	test   eax,eax
c0013a91:	74 0c                	je     c0013a9f <Device::removeAllChildren()+0x25>
c0013a93:	83 ec 0c             	sub    esp,0xc
c0013a96:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a98:	50                   	push   eax
c0013a99:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013aa1:	eb e4                	jmp    c0013a87 <Device::removeAllChildren()+0xd>
c0013aa3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013aaf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013ab5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013abc:	58                   	pop    eax
c0013abd:	5b                   	pop    ebx
c0013abe:	5e                   	pop    esi
c0013abf:	c3                   	ret    

c0013ac0 <Device::hibernateAll()>:
c0013ac0:	53                   	push   ebx
c0013ac1:	83 ec 14             	sub    esp,0x14
c0013ac4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ac8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013aca:	53                   	push   ebx
c0013acb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013ace:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ad4:	83 c4 10             	add    esp,0x10
c0013ad7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ada:	74 0f                	je     c0013aeb <Device::hibernateAll()+0x2b>
c0013adc:	83 ec 0c             	sub    esp,0xc
c0013adf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ae2:	e8 d9 ff ff ff       	call   c0013ac0 <Device::hibernateAll()>
c0013ae7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae9:	eb e9                	jmp    c0013ad4 <Device::hibernateAll()+0x14>
c0013aeb:	83 c4 08             	add    esp,0x8
c0013aee:	5b                   	pop    ebx
c0013aef:	c3                   	ret    

c0013af0 <Device::wakeAll()>:
c0013af0:	53                   	push   ebx
c0013af1:	83 ec 14             	sub    esp,0x14
c0013af4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013af8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013afa:	53                   	push   ebx
c0013afb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013afe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b04:	83 c4 10             	add    esp,0x10
c0013b07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b0a:	74 0f                	je     c0013b1b <Device::wakeAll()+0x2b>
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b12:	e8 d9 ff ff ff       	call   c0013af0 <Device::wakeAll()>
c0013b17:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b19:	eb e9                	jmp    c0013b04 <Device::wakeAll()+0x14>
c0013b1b:	83 c4 08             	add    esp,0x8
c0013b1e:	5b                   	pop    ebx
c0013b1f:	c3                   	ret    

c0013b20 <Device::detectAll()>:
c0013b20:	53                   	push   ebx
c0013b21:	83 ec 14             	sub    esp,0x14
c0013b24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b2a:	53                   	push   ebx
c0013b2b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b3a:	74 0f                	je     c0013b4b <Device::detectAll()+0x2b>
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b42:	e8 d9 ff ff ff       	call   c0013b20 <Device::detectAll()>
c0013b47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b49:	eb e9                	jmp    c0013b34 <Device::detectAll()+0x14>
c0013b4b:	83 c4 08             	add    esp,0x8
c0013b4e:	5b                   	pop    ebx
c0013b4f:	c3                   	ret    

c0013b50 <Device::disableLegacyAll()>:
c0013b50:	53                   	push   ebx
c0013b51:	83 ec 14             	sub    esp,0x14
c0013b54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b5a:	53                   	push   ebx
c0013b5b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013b5e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b64:	83 c4 10             	add    esp,0x10
c0013b67:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b6a:	74 0f                	je     c0013b7b <Device::disableLegacyAll()+0x2b>
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b72:	e8 d9 ff ff ff       	call   c0013b50 <Device::disableLegacyAll()>
c0013b77:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b79:	eb e9                	jmp    c0013b64 <Device::disableLegacyAll()+0x14>
c0013b7b:	83 c4 08             	add    esp,0x8
c0013b7e:	5b                   	pop    ebx
c0013b7f:	c3                   	ret    

c0013b80 <Device::loadDriversForAll()>:
c0013b80:	53                   	push   ebx
c0013b81:	83 ec 08             	sub    esp,0x8
c0013b84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b88:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013b8f:	75 0c                	jne    c0013b9d <Device::loadDriversForAll()+0x1d>
c0013b91:	83 ec 0c             	sub    esp,0xc
c0013b94:	53                   	push   ebx
c0013b95:	e8 a0 fd ff ff       	call   c001393a <Device::findAndLoadDriver()>
c0013b9a:	83 c4 10             	add    esp,0x10
c0013b9d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ba3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ba6:	74 12                	je     c0013bba <Device::loadDriversForAll()+0x3a>
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bae:	e8 cd ff ff ff       	call   c0013b80 <Device::loadDriversForAll()>
c0013bb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bb5:	83 c4 10             	add    esp,0x10
c0013bb8:	eb e9                	jmp    c0013ba3 <Device::loadDriversForAll()+0x23>
c0013bba:	83 c4 08             	add    esp,0x8
c0013bbd:	5b                   	pop    ebx
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <Device::closeAll()>:
c0013bc0:	53                   	push   ebx
c0013bc1:	83 ec 08             	sub    esp,0x8
c0013bc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bca:	6a 00                	push   0x0
c0013bcc:	6a 00                	push   0x0
c0013bce:	6a 00                	push   0x0
c0013bd0:	53                   	push   ebx
c0013bd1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bda:	83 c4 10             	add    esp,0x10
c0013bdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013be0:	74 0f                	je     c0013bf1 <Device::closeAll()+0x31>
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013be8:	e8 d3 ff ff ff       	call   c0013bc0 <Device::closeAll()>
c0013bed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bef:	eb e9                	jmp    c0013bda <Device::closeAll()+0x1a>
c0013bf1:	83 c4 08             	add    esp,0x8
c0013bf4:	5b                   	pop    ebx
c0013bf5:	c3                   	ret    

c0013bf6 <Device::powerSavingAll(PowerSavingLevel)>:
c0013bf6:	56                   	push   esi
c0013bf7:	53                   	push   ebx
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013bff:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c05:	56                   	push   esi
c0013c06:	53                   	push   ebx
c0013c07:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c0a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c10:	83 c4 10             	add    esp,0x10
c0013c13:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c16:	74 0f                	je     c0013c27 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c18:	52                   	push   edx
c0013c19:	52                   	push   edx
c0013c1a:	56                   	push   esi
c0013c1b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c1e:	e8 d3 ff ff ff       	call   c0013bf6 <Device::powerSavingAll(PowerSavingLevel)>
c0013c23:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c25:	eb e9                	jmp    c0013c10 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c27:	58                   	pop    eax
c0013c28:	5b                   	pop    ebx
c0013c29:	5e                   	pop    esi
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Device::setName(char const*)>:
c0013c2c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c34:	e9 d3 cb fe ff       	jmp    c000080c <strcpy>
c0013c39:	90                   	nop

c0013c3a <Device::Device(char const*)>:
c0013c3a:	83 ec 1c             	sub    esp,0x1c
c0013c3d:	ba 90 a8 02 c0       	mov    edx,0xc002a890
c0013c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c46:	89 10                	mov    DWORD PTR [eax],edx
c0013c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c4c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c5a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c68:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c76:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c80:	83 ec 08             	sub    esp,0x8
c0013c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c8b:	e8 9c ff ff ff       	call   c0013c2c <Device::setName(char const*)>
c0013c90:	83 c4 10             	add    esp,0x10
c0013c93:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013c9b:	83 ec 0c             	sub    esp,0xc
c0013c9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ca2:	e8 f5 b8 ff ff       	call   c000f59c <malloc>
c0013ca7:	83 c4 10             	add    esp,0x10
c0013caa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cb0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cb7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013cbb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cc5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ccb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cd5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cdb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cfc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d0a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d18:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d26:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013d30:	90                   	nop
c0013d31:	83 c4 1c             	add    esp,0x1c
c0013d34:	c3                   	ret    
c0013d35:	90                   	nop

c0013d36 <Device::getName()>:
c0013d36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d3a:	05 d0 00 00 00       	add    eax,0xd0
c0013d3f:	c3                   	ret    

c0013d40 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d40:	83 ec 0c             	sub    esp,0xc
c0013d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d47:	83 ec 08             	sub    esp,0x8
c0013d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d4e:	50                   	push   eax
c0013d4f:	e8 e6 fe ff ff       	call   c0013c3a <Device::Device(char const*)>
c0013d54:	83 c4 10             	add    esp,0x10
c0013d57:	ba bc a8 02 c0       	mov    edx,0xc002a8bc
c0013d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d60:	89 10                	mov    DWORD PTR [eax],edx
c0013d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d66:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d70:	90                   	nop
c0013d71:	83 c4 0c             	add    esp,0xc
c0013d74:	c3                   	ret    
c0013d75:	90                   	nop

c0013d76 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d76:	57                   	push   edi
c0013d77:	56                   	push   esi
c0013d78:	53                   	push   ebx
c0013d79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d7d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d85:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013d8b:	75 0c                	jne    c0013d99 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013d8d:	52                   	push   edx
c0013d8e:	52                   	push   edx
c0013d8f:	53                   	push   ebx
c0013d90:	56                   	push   esi
c0013d91:	e8 ea 47 01 00       	call   c0028580 <LinkedList<Device>::addElement(Device*)>
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da2:	74 12                	je     c0013db6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013da4:	50                   	push   eax
c0013da5:	57                   	push   edi
c0013da6:	56                   	push   esi
c0013da7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013daa:	e8 c7 ff ff ff       	call   c0013d76 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013daf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013db1:	83 c4 10             	add    esp,0x10
c0013db4:	eb e9                	jmp    c0013d9f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013db6:	5b                   	pop    ebx
c0013db7:	5e                   	pop    esi
c0013db8:	5f                   	pop    edi
c0013db9:	c3                   	ret    

c0013dba <getDevicesOfType(DeviceType)>:
c0013dba:	53                   	push   ebx
c0013dbb:	83 ec 14             	sub    esp,0x14
c0013dbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc2:	53                   	push   ebx
c0013dc3:	e8 94 48 01 00       	call   c002865c <LinkedList<Device>::LinkedList()>
c0013dc8:	83 c4 0c             	add    esp,0xc
c0013dcb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dcf:	53                   	push   ebx
c0013dd0:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c0013dd6:	e8 9b ff ff ff       	call   c0013d76 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ddb:	89 d8                	mov    eax,ebx
c0013ddd:	83 c4 18             	add    esp,0x18
c0013de0:	5b                   	pop    ebx
c0013de1:	c2 04 00             	ret    0x4

c0013de4 <HardDiskController::HardDiskController(char const*)>:
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013deb:	83 ec 08             	sub    esp,0x8
c0013dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013df2:	50                   	push   eax
c0013df3:	e8 42 fe ff ff       	call   c0013c3a <Device::Device(char const*)>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	ba e8 a8 02 c0       	mov    edx,0xc002a8e8
c0013e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e04:	89 10                	mov    DWORD PTR [eax],edx
c0013e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e14:	90                   	nop
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	c3                   	ret    
c0013e19:	90                   	nop

c0013e1a <HardDiskController::~HardDiskController()>:
c0013e1a:	83 ec 0c             	sub    esp,0xc
c0013e1d:	ba e8 a8 02 c0       	mov    edx,0xc002a8e8
c0013e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e26:	89 10                	mov    DWORD PTR [eax],edx
c0013e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2c:	83 ec 0c             	sub    esp,0xc
c0013e2f:	50                   	push   eax
c0013e30:	e8 cf fa ff ff       	call   c0013904 <Device::~Device()>
c0013e35:	83 c4 10             	add    esp,0x10
c0013e38:	90                   	nop
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <HardDiskController::~HardDiskController()>:
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	83 ec 0c             	sub    esp,0xc
c0013e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e48:	e8 cd ff ff ff       	call   c0013e1a <HardDiskController::~HardDiskController()>
c0013e4d:	83 c4 10             	add    esp,0x10
c0013e50:	83 ec 08             	sub    esp,0x8
c0013e53:	68 58 01 00 00       	push   0x158
c0013e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e5c:	e8 c4 e6 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	83 c4 0c             	add    esp,0xc
c0013e67:	c3                   	ret    

c0013e68 <PhysicalDisk::eject()>:
c0013e68:	83 c8 ff             	or     eax,0xffffffff
c0013e6b:	c3                   	ret    

c0013e6c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e73:	83 ec 08             	sub    esp,0x8
c0013e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e7a:	50                   	push   eax
c0013e7b:	e8 ba fd ff ff       	call   c0013c3a <Device::Device(char const*)>
c0013e80:	83 c4 10             	add    esp,0x10
c0013e83:	ba 14 a9 02 c0       	mov    edx,0xc002a914
c0013e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e8c:	89 10                	mov    DWORD PTR [eax],edx
c0013e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e92:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e9d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ece:	90                   	nop
c0013ecf:	83 c4 0c             	add    esp,0xc
c0013ed2:	c3                   	ret    
c0013ed3:	90                   	nop

c0013ed4 <PhysicalDisk::startCache()>:
c0013ed4:	56                   	push   esi
c0013ed5:	53                   	push   ebx
c0013ed6:	83 ec 10             	sub    esp,0x10
c0013ed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013edd:	6a 44                	push   0x44
c0013edf:	e8 b8 b6 ff ff       	call   c000f59c <malloc>
c0013ee4:	89 c6                	mov    esi,eax
c0013ee6:	58                   	pop    eax
c0013ee7:	5a                   	pop    edx
c0013ee8:	53                   	push   ebx
c0013ee9:	56                   	push   esi
c0013eea:	e8 71 28 00 00       	call   c0016760 <VCache::VCache(PhysicalDisk*)>
c0013eef:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ef5:	83 c4 14             	add    esp,0x14
c0013ef8:	5b                   	pop    ebx
c0013ef9:	5e                   	pop    esi
c0013efa:	c3                   	ret    
c0013efb:	90                   	nop

c0013efc <PhysicalDisk::~PhysicalDisk()>:
c0013efc:	83 ec 0c             	sub    esp,0xc
c0013eff:	ba 14 a9 02 c0       	mov    edx,0xc002a914
c0013f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f08:	89 10                	mov    DWORD PTR [eax],edx
c0013f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f0e:	83 ec 0c             	sub    esp,0xc
c0013f11:	50                   	push   eax
c0013f12:	e8 ed f9 ff ff       	call   c0013904 <Device::~Device()>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	90                   	nop
c0013f1b:	83 c4 0c             	add    esp,0xc
c0013f1e:	c3                   	ret    
c0013f1f:	90                   	nop

c0013f20 <PhysicalDisk::~PhysicalDisk()>:
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	83 ec 0c             	sub    esp,0xc
c0013f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f2a:	e8 cd ff ff ff       	call   c0013efc <PhysicalDisk::~PhysicalDisk()>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	83 ec 08             	sub    esp,0x8
c0013f35:	68 6c 01 00 00       	push   0x16c
c0013f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f3e:	e8 e2 e5 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	83 c4 0c             	add    esp,0xc
c0013f49:	c3                   	ret    

c0013f4a <FPU::FPU(char const*)>:
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f51:	83 ec 08             	sub    esp,0x8
c0013f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f58:	50                   	push   eax
c0013f59:	e8 dc fc ff ff       	call   c0013c3a <Device::Device(char const*)>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c0013f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6a:	89 10                	mov    DWORD PTR [eax],edx
c0013f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f70:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f7a:	90                   	nop
c0013f7b:	83 c4 0c             	add    esp,0xc
c0013f7e:	c3                   	ret    
c0013f7f:	90                   	nop

c0013f80 <FPU::~FPU()>:
c0013f80:	83 ec 0c             	sub    esp,0xc
c0013f83:	ba 58 a9 02 c0       	mov    edx,0xc002a958
c0013f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8c:	89 10                	mov    DWORD PTR [eax],edx
c0013f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f92:	83 ec 0c             	sub    esp,0xc
c0013f95:	50                   	push   eax
c0013f96:	e8 69 f9 ff ff       	call   c0013904 <Device::~Device()>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	90                   	nop
c0013f9f:	83 c4 0c             	add    esp,0xc
c0013fa2:	c3                   	ret    
c0013fa3:	90                   	nop

c0013fa4 <FPU::~FPU()>:
c0013fa4:	83 ec 0c             	sub    esp,0xc
c0013fa7:	83 ec 0c             	sub    esp,0xc
c0013faa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fae:	e8 cd ff ff ff       	call   c0013f80 <FPU::~FPU()>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	83 ec 08             	sub    esp,0x8
c0013fb9:	68 58 01 00 00       	push   0x158
c0013fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fc2:	e8 5e e5 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0013fc7:	83 c4 10             	add    esp,0x10
c0013fca:	83 c4 0c             	add    esp,0xc
c0013fcd:	c3                   	ret    

c0013fce <setupFPU()>:
c0013fce:	53                   	push   ebx
c0013fcf:	83 ec 08             	sub    esp,0x8
c0013fd2:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c0013fd8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fdf:	74 19                	je     c0013ffa <setupFPU()+0x2c>
c0013fe1:	83 ec 0c             	sub    esp,0xc
c0013fe4:	68 58 01 00 00       	push   0x158
c0013fe9:	e8 ae b5 ff ff       	call   c000f59c <malloc>
c0013fee:	89 c3                	mov    ebx,eax
c0013ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ff3:	e8 c8 11 01 00       	call   c00251c0 <AVX::AVX()>
c0013ff8:	eb 5b                	jmp    c0014055 <setupFPU()+0x87>
c0013ffa:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014000:	84 c0                	test   al,al
c0014002:	79 19                	jns    c001401d <setupFPU()+0x4f>
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	68 58 01 00 00       	push   0x158
c001400c:	e8 8b b5 ff ff       	call   c000f59c <malloc>
c0014011:	89 c3                	mov    ebx,eax
c0014013:	89 04 24             	mov    DWORD PTR [esp],eax
c0014016:	e8 cb 12 01 00       	call   c00252e6 <SSE::SSE()>
c001401b:	eb 38                	jmp    c0014055 <setupFPU()+0x87>
c001401d:	a8 20                	test   al,0x20
c001401f:	74 19                	je     c001403a <setupFPU()+0x6c>
c0014021:	83 ec 0c             	sub    esp,0xc
c0014024:	68 58 01 00 00       	push   0x158
c0014029:	e8 6e b5 ff ff       	call   c000f59c <malloc>
c001402e:	89 c3                	mov    ebx,eax
c0014030:	89 04 24             	mov    DWORD PTR [esp],eax
c0014033:	e8 18 12 01 00       	call   c0025250 <MMX::MMX()>
c0014038:	eb 1b                	jmp    c0014055 <setupFPU()+0x87>
c001403a:	a8 10                	test   al,0x10
c001403c:	74 1c                	je     c001405a <setupFPU()+0x8c>
c001403e:	83 ec 0c             	sub    esp,0xc
c0014041:	68 58 01 00 00       	push   0x158
c0014046:	e8 51 b5 ff ff       	call   c000f59c <malloc>
c001404b:	89 c3                	mov    ebx,eax
c001404d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014050:	e8 1f 13 01 00       	call   c0025374 <x87::x87()>
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	eb 24                	jmp    c001407e <setupFPU()+0xb0>
c001405a:	83 e0 ef             	and    eax,0xffffffef
c001405d:	83 ec 0c             	sub    esp,0xc
c0014060:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014066:	68 44 a9 02 c0       	push   0xc002a944
c001406b:	e8 8d e5 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014070:	0f 20 c0             	mov    eax,cr0
c0014073:	83 c8 04             	or     eax,0x4
c0014076:	0f 22 c0             	mov    cr0,eax
c0014079:	31 db                	xor    ebx,ebx
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	89 d8                	mov    eax,ebx
c0014080:	83 c4 08             	add    esp,0x8
c0014083:	5b                   	pop    ebx
c0014084:	c3                   	ret    
c0014085:	90                   	nop

c0014086 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001408a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001408e:	c1 e0 04             	shl    eax,0x4
c0014091:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014095:	8d 50 10             	lea    edx,[eax+0x10]
c0014098:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001409e:	74 08                	je     c00140a8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140a0:	83 c0 04             	add    eax,0x4
c00140a3:	39 d0                	cmp    eax,edx
c00140a5:	75 f1                	jne    c0014098 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140a7:	c3                   	ret    
c00140a8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140b2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140bc:	eb e2                	jmp    c00140a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140be <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140be:	57                   	push   edi
c00140bf:	31 c0                	xor    eax,eax
c00140c1:	56                   	push   esi
c00140c2:	53                   	push   ebx
c00140c3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140cb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140cf:	89 da                	mov    edx,ebx
c00140d1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140d5:	c1 e2 04             	shl    edx,0x4
c00140d8:	01 ca                	add    edx,ecx
c00140da:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00140e2:	74 16                	je     c00140fa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00140e4:	40                   	inc    eax
c00140e5:	83 f8 04             	cmp    eax,0x4
c00140e8:	75 f0                	jne    c00140da <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00140ea:	c7 44 24 10 88 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a988
c00140f2:	5b                   	pop    ebx
c00140f3:	5e                   	pop    esi
c00140f4:	5f                   	pop    edi
c00140f5:	e9 6f 5c 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c00140fa:	8d 04 98             	lea    eax,[eax+ebx*4]
c00140fd:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014100:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014106:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001410c:	5b                   	pop    ebx
c001410d:	5e                   	pop    esi
c001410e:	5f                   	pop    edi
c001410f:	c3                   	ret    

c0014110 <doubleFault(regs*, void*)>:
c0014110:	55                   	push   ebp
c0014111:	89 e5                	mov    ebp,esp
c0014113:	83 ec 08             	sub    esp,0x8
c0014116:	83 ec 0c             	sub    esp,0xc
c0014119:	68 95 a9 02 c0       	push   0xc002a995
c001411e:	e8 46 5c 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0014123:	83 c4 10             	add    esp,0x10
c0014126:	90                   	nop
c0014127:	c9                   	leave  
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001412a:	56                   	push   esi
c001412b:	53                   	push   ebx
c001412c:	50                   	push   eax
c001412d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014131:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014135:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001413a:	75 35                	jne    c0014171 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001413c:	8d 43 20             	lea    eax,[ebx+0x20]
c001413f:	31 d2                	xor    edx,edx
c0014141:	89 c1                	mov    ecx,eax
c0014143:	c1 e1 04             	shl    ecx,0x4
c0014146:	01 f1                	add    ecx,esi
c0014148:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014150:	74 3e                	je     c0014190 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014152:	42                   	inc    edx
c0014153:	83 fa 04             	cmp    edx,0x4
c0014156:	75 f0                	jne    c0014148 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	68 af a9 02 c0       	push   0xc002a9af
c0014160:	e8 04 5c 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001416d:	5a                   	pop    edx
c001416e:	5b                   	pop    ebx
c001416f:	5e                   	pop    esi
c0014170:	c3                   	ret    
c0014171:	83 ec 0c             	sub    esp,0xc
c0014174:	56                   	push   esi
c0014175:	e8 bc fb ff ff       	call   c0013d36 <Device::getName()>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014180:	75 ba                	jne    c001413c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014182:	83 fb 0f             	cmp    ebx,0xf
c0014185:	7f 29                	jg     c00141b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014187:	0f b6 9b e0 c9 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3620]
c001418e:	eb ac                	jmp    c001413c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014190:	8d 04 82             	lea    eax,[edx+eax*4]
c0014193:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014197:	8d 04 86             	lea    eax,[esi+eax*4]
c001419a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141a4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141aa:	89 d8                	mov    eax,ebx
c00141ac:	5a                   	pop    edx
c00141ad:	5b                   	pop    ebx
c00141ae:	5e                   	pop    esi
c00141af:	c3                   	ret    
c00141b0:	83 ec 0c             	sub    esp,0xc
c00141b3:	68 a2 a9 02 c0       	push   0xc002a9a2
c00141b8:	e8 ac 5b 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c00141bd:	83 c4 10             	add    esp,0x10
c00141c0:	e9 77 ff ff ff       	jmp    c001413c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141c5:	90                   	nop

c00141c6 <InterruptController::clearAllHandlers(int, bool)>:
c00141c6:	56                   	push   esi
c00141c7:	53                   	push   ebx
c00141c8:	52                   	push   edx
c00141c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141d1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141d6:	75 61                	jne    c0014239 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141d8:	8d 46 20             	lea    eax,[esi+0x20]
c00141db:	c1 e6 04             	shl    esi,0x4
c00141de:	c1 e0 04             	shl    eax,0x4
c00141e1:	01 de                	add    esi,ebx
c00141e3:	01 d8                	add    eax,ebx
c00141e5:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00141ef:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00141f9:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014203:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001420d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014217:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014221:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001422b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014235:	58                   	pop    eax
c0014236:	5b                   	pop    ebx
c0014237:	5e                   	pop    esi
c0014238:	c3                   	ret    
c0014239:	83 ec 0c             	sub    esp,0xc
c001423c:	53                   	push   ebx
c001423d:	e8 f4 fa ff ff       	call   c0013d36 <Device::getName()>
c0014242:	83 c4 10             	add    esp,0x10
c0014245:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014248:	75 8e                	jne    c00141d8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001424a:	83 fe 0f             	cmp    esi,0xf
c001424d:	7f 09                	jg     c0014258 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001424f:	0f b6 b6 e0 c9 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3620]
c0014256:	eb 80                	jmp    c00141d8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	68 bc a9 02 c0       	push   0xc002a9bc
c0014260:	e8 04 5b 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0014265:	83 c4 10             	add    esp,0x10
c0014268:	e9 6b ff ff ff       	jmp    c00141d8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001426d:	90                   	nop

c001426e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001426e:	56                   	push   esi
c001426f:	53                   	push   ebx
c0014270:	52                   	push   edx
c0014271:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014275:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014279:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001427e:	75 3a                	jne    c00142ba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014280:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014284:	8d 50 20             	lea    edx,[eax+0x20]
c0014287:	c1 e2 04             	shl    edx,0x4
c001428a:	8d 04 16             	lea    eax,[esi+edx*1]
c001428d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014291:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014297:	74 0b                	je     c00142a4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014299:	83 c0 04             	add    eax,0x4
c001429c:	39 d0                	cmp    eax,edx
c001429e:	75 f1                	jne    c0014291 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142a0:	58                   	pop    eax
c00142a1:	5b                   	pop    ebx
c00142a2:	5e                   	pop    esi
c00142a3:	c3                   	ret    
c00142a4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142ae:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142b8:	eb df                	jmp    c0014299 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142ba:	83 ec 0c             	sub    esp,0xc
c00142bd:	56                   	push   esi
c00142be:	e8 73 fa ff ff       	call   c0013d36 <Device::getName()>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142c9:	75 b5                	jne    c0014280 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142cb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142d0:	7f 11                	jg     c00142e3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142d6:	0f b6 80 e0 c9 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3620]
c00142dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142e1:	eb 9d                	jmp    c0014280 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142e3:	83 ec 0c             	sub    esp,0xc
c00142e6:	68 c9 a9 02 c0       	push   0xc002a9c9
c00142eb:	e8 79 5a 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	eb 8b                	jmp    c0014280 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00142f5 <nmiHandler(regs*, void*)>:
c00142f5:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00142fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142fe:	e9 fd a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014303 <int_handler>:
c0014303:	55                   	push   ebp
c0014304:	57                   	push   edi
c0014305:	56                   	push   esi
c0014306:	53                   	push   ebx
c0014307:	83 ec 0c             	sub    esp,0xc
c001430a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001430e:	80 3d c4 02 03 c0 00 	cmp    BYTE PTR ds:0xc00302c4,0x0
c0014315:	74 0b                	je     c0014322 <int_handler+0x1f>
c0014317:	fa                   	cli    
c0014318:	f4                   	hlt    
c0014319:	80 3d c4 02 03 c0 00 	cmp    BYTE PTR ds:0xc00302c4,0x0
c0014320:	75 f5                	jne    c0014317 <int_handler+0x14>
c0014322:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0014327:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001432a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014330:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014336:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014339:	83 f8 17             	cmp    eax,0x17
c001433c:	77 13                	ja     c0014351 <int_handler+0x4e>
c001433e:	83 ec 08             	sub    esp,0x8
c0014341:	8b 17                	mov    edx,DWORD PTR [edi]
c0014343:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014346:	0f b6 c0             	movzx  eax,al
c0014349:	50                   	push   eax
c001434a:	57                   	push   edi
c001434b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	83 c3 15             	add    ebx,0x15
c0014354:	c1 e3 04             	shl    ebx,0x4
c0014357:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001435b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014362:	31 db                	xor    ebx,ebx
c0014364:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014368:	85 c0                	test   eax,eax
c001436a:	74 13                	je     c001437f <int_handler+0x7c>
c001436c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001436f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014373:	74 1c                	je     c0014391 <int_handler+0x8e>
c0014375:	83 ec 08             	sub    esp,0x8
c0014378:	52                   	push   edx
c0014379:	56                   	push   esi
c001437a:	ff d0                	call   eax
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	43                   	inc    ebx
c0014380:	83 fb 04             	cmp    ebx,0x4
c0014383:	75 df                	jne    c0014364 <int_handler+0x61>
c0014385:	83 c4 0c             	add    esp,0xc
c0014388:	31 c0                	xor    eax,eax
c001438a:	5b                   	pop    ebx
c001438b:	31 d2                	xor    edx,edx
c001438d:	5e                   	pop    esi
c001438e:	5f                   	pop    edi
c001438f:	5d                   	pop    ebp
c0014390:	c3                   	ret    
c0014391:	83 ec 08             	sub    esp,0x8
c0014394:	52                   	push   edx
c0014395:	56                   	push   esi
c0014396:	ff d0                	call   eax
c0014398:	83 c4 10             	add    esp,0x10
c001439b:	83 c4 0c             	add    esp,0xc
c001439e:	5b                   	pop    ebx
c001439f:	5e                   	pop    esi
c00143a0:	5f                   	pop    edi
c00143a1:	5d                   	pop    ebp
c00143a2:	c3                   	ret    
c00143a3:	90                   	nop

c00143a4 <InterruptController::InterruptController(char const*)>:
c00143a4:	83 ec 1c             	sub    esp,0x1c
c00143a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ab:	83 ec 08             	sub    esp,0x8
c00143ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143b2:	50                   	push   eax
c00143b3:	e8 82 f8 ff ff       	call   c0013c3a <Device::Device(char const*)>
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c00143c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143c4:	89 10                	mov    DWORD PTR [eax],edx
c00143c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ca:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143dc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00143e4:	7f 5e                	jg     c0014444 <InterruptController::InterruptController(char const*)+0xa0>
c00143e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00143ee:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00143f3:	7f 49                	jg     c001443e <InterruptController::InterruptController(char const*)+0x9a>
c00143f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00143fd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014404:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014408:	01 ca                	add    edx,ecx
c001440a:	83 c2 54             	add    edx,0x54
c001440d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014419:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001441d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014424:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014428:	01 ca                	add    edx,ecx
c001442a:	81 c2 54 04 00 00    	add    edx,0x454
c0014430:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014438:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001443c:	eb b0                	jmp    c00143ee <InterruptController::InterruptController(char const*)+0x4a>
c001443e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014442:	eb 98                	jmp    c00143dc <InterruptController::InterruptController(char const*)+0x38>
c0014444:	90                   	nop
c0014445:	83 c4 1c             	add    esp,0x1c
c0014448:	c3                   	ret    
c0014449:	90                   	nop

c001444a <InterruptController::~InterruptController()>:
c001444a:	83 ec 0c             	sub    esp,0xc
c001444d:	ba 84 ac 02 c0       	mov    edx,0xc002ac84
c0014452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014456:	89 10                	mov    DWORD PTR [eax],edx
c0014458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445c:	83 ec 0c             	sub    esp,0xc
c001445f:	50                   	push   eax
c0014460:	e8 9f f4 ff ff       	call   c0013904 <Device::~Device()>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	90                   	nop
c0014469:	83 c4 0c             	add    esp,0xc
c001446c:	c3                   	ret    
c001446d:	90                   	nop

c001446e <InterruptController::~InterruptController()>:
c001446e:	83 ec 0c             	sub    esp,0xc
c0014471:	83 ec 0c             	sub    esp,0xc
c0014474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014478:	e8 cd ff ff ff       	call   c001444a <InterruptController::~InterruptController()>
c001447d:	83 c4 10             	add    esp,0x10
c0014480:	83 ec 08             	sub    esp,0x8
c0014483:	68 58 21 00 00       	push   0x2158
c0014488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001448c:	e8 94 e0 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0014491:	83 c4 10             	add    esp,0x10
c0014494:	83 c4 0c             	add    esp,0xc
c0014497:	c3                   	ret    

c0014498 <displayDebugInfo(regs*)>:
c0014498:	55                   	push   ebp
c0014499:	57                   	push   edi
c001449a:	56                   	push   esi
c001449b:	53                   	push   ebx
c001449c:	83 ec 24             	sub    esp,0x24
c001449f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144a3:	0f 20 c2             	mov    edx,cr0
c00144a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144aa:	0f 20 d7             	mov    edi,cr2
c00144ad:	0f 20 de             	mov    esi,cr3
c00144b0:	0f 20 e5             	mov    ebp,cr4
c00144b3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144b6:	68 d6 a9 02 c0       	push   0xc002a9d6
c00144bb:	e8 3d e1 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00144c0:	59                   	pop    ecx
c00144c1:	58                   	pop    eax
c00144c2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144c5:	68 e1 a9 02 c0       	push   0xc002a9e1
c00144ca:	e8 2e e1 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00144cf:	58                   	pop    eax
c00144d0:	5a                   	pop    edx
c00144d1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144d4:	68 ec a9 02 c0       	push   0xc002a9ec
c00144d9:	e8 1f e1 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00144de:	59                   	pop    ecx
c00144df:	58                   	pop    eax
c00144e0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00144e3:	68 f7 a9 02 c0       	push   0xc002a9f7
c00144e8:	e8 10 e1 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00144ed:	58                   	pop    eax
c00144ee:	5a                   	pop    edx
c00144ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00144f2:	68 02 aa 02 c0       	push   0xc002aa02
c00144f7:	e8 01 e1 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00144fc:	59                   	pop    ecx
c00144fd:	58                   	pop    eax
c00144fe:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014501:	68 0d aa 02 c0       	push   0xc002aa0d
c0014506:	e8 f2 e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001450b:	58                   	pop    eax
c001450c:	5a                   	pop    edx
c001450d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014510:	68 18 aa 02 c0       	push   0xc002aa18
c0014515:	e8 e3 e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001451a:	59                   	pop    ecx
c001451b:	58                   	pop    eax
c001451c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001451f:	68 23 aa 02 c0       	push   0xc002aa23
c0014524:	e8 d4 e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014529:	58                   	pop    eax
c001452a:	5a                   	pop    edx
c001452b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001452e:	68 2e aa 02 c0       	push   0xc002aa2e
c0014533:	e8 c5 e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014538:	59                   	pop    ecx
c0014539:	58                   	pop    eax
c001453a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001453d:	68 3d aa 02 c0       	push   0xc002aa3d
c0014542:	e8 b6 e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014547:	58                   	pop    eax
c0014548:	5a                   	pop    edx
c0014549:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001454c:	68 48 aa 02 c0       	push   0xc002aa48
c0014551:	e8 a7 e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014556:	59                   	pop    ecx
c0014557:	58                   	pop    eax
c0014558:	57                   	push   edi
c0014559:	68 53 aa 02 c0       	push   0xc002aa53
c001455e:	e8 9a e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014563:	58                   	pop    eax
c0014564:	5a                   	pop    edx
c0014565:	56                   	push   esi
c0014566:	68 5e aa 02 c0       	push   0xc002aa5e
c001456b:	e8 8d e0 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014570:	59                   	pop    ecx
c0014571:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014576:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001457c:	e8 7a bd ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c0014581:	58                   	pop    eax
c0014582:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014585:	5a                   	pop    edx
c0014586:	c1 e0 05             	shl    eax,0x5
c0014589:	05 40 c7 02 c0       	add    eax,0xc002c740
c001458e:	50                   	push   eax
c001458f:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014594:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001459a:	e8 69 c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001459f:	59                   	pop    ecx
c00145a0:	58                   	pop    eax
c00145a1:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00145a6:	68 69 aa 02 c0       	push   0xc002aa69
c00145ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b1:	e8 52 c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00145b6:	58                   	pop    eax
c00145b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145bc:	5a                   	pop    edx
c00145bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145c0:	83 c0 0c             	add    eax,0xc
c00145c3:	50                   	push   eax
c00145c4:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00145c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145cf:	e8 34 c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00145d4:	59                   	pop    ecx
c00145d5:	58                   	pop    eax
c00145d6:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00145db:	68 72 aa 02 c0       	push   0xc002aa72
c00145e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e6:	e8 1d c2 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00145eb:	58                   	pop    eax
c00145ec:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00145f1:	5a                   	pop    edx
c00145f2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145f5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fb:	e8 c2 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014600:	59                   	pop    ecx
c0014601:	58                   	pop    eax
c0014602:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014607:	68 7a aa 02 c0       	push   0xc002aa7a
c001460c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014612:	e8 f1 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014617:	58                   	pop    eax
c0014618:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001461d:	5a                   	pop    edx
c001461e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014621:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014627:	e8 96 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001462c:	59                   	pop    ecx
c001462d:	58                   	pop    eax
c001462e:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014633:	68 82 aa 02 c0       	push   0xc002aa82
c0014638:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463e:	e8 c5 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014643:	58                   	pop    eax
c0014644:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014649:	5a                   	pop    edx
c001464a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001464d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014653:	e8 6a c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014658:	59                   	pop    ecx
c0014659:	58                   	pop    eax
c001465a:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001465f:	68 8a aa 02 c0       	push   0xc002aa8a
c0014664:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001466a:	e8 99 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001466f:	58                   	pop    eax
c0014670:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014675:	5a                   	pop    edx
c0014676:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014679:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467f:	e8 3e c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014684:	59                   	pop    ecx
c0014685:	58                   	pop    eax
c0014686:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001468b:	68 92 aa 02 c0       	push   0xc002aa92
c0014690:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014696:	e8 6d c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001469b:	58                   	pop    eax
c001469c:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00146a1:	5a                   	pop    edx
c00146a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ab:	e8 12 c1 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00146b0:	59                   	pop    ecx
c00146b1:	58                   	pop    eax
c00146b2:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00146b7:	68 9a aa 02 c0       	push   0xc002aa9a
c00146bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c2:	e8 41 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00146c7:	58                   	pop    eax
c00146c8:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00146cd:	5a                   	pop    edx
c00146ce:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d7:	e8 e6 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00146dc:	59                   	pop    ecx
c00146dd:	58                   	pop    eax
c00146de:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00146e3:	68 a2 aa 02 c0       	push   0xc002aaa2
c00146e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ee:	e8 15 c1 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00146f3:	58                   	pop    eax
c00146f4:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00146f9:	5a                   	pop    edx
c00146fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00146fe:	52                   	push   edx
c00146ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014705:	e8 b8 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001470a:	59                   	pop    ecx
c001470b:	58                   	pop    eax
c001470c:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014711:	68 ab aa 02 c0       	push   0xc002aaab
c0014716:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001471c:	e8 e7 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014721:	58                   	pop    eax
c0014722:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014727:	5a                   	pop    edx
c0014728:	57                   	push   edi
c0014729:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472f:	e8 8e c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014734:	59                   	pop    ecx
c0014735:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001473a:	5f                   	pop    edi
c001473b:	68 b3 aa 02 c0       	push   0xc002aab3
c0014740:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014746:	e8 bd c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001474b:	58                   	pop    eax
c001474c:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014751:	5a                   	pop    edx
c0014752:	56                   	push   esi
c0014753:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014759:	e8 64 c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001475e:	59                   	pop    ecx
c001475f:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014764:	5e                   	pop    esi
c0014765:	68 bb aa 02 c0       	push   0xc002aabb
c001476a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014770:	e8 93 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014775:	5f                   	pop    edi
c0014776:	58                   	pop    eax
c0014777:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001477c:	55                   	push   ebp
c001477d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014783:	e8 3a c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014788:	58                   	pop    eax
c0014789:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001478e:	5a                   	pop    edx
c001478f:	68 c3 aa 02 c0       	push   0xc002aac3
c0014794:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479a:	e8 69 c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001479f:	0f 21 c0             	mov    eax,db0
c00147a2:	59                   	pop    ecx
c00147a3:	5e                   	pop    esi
c00147a4:	50                   	push   eax
c00147a5:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00147aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b0:	e8 0d c0 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00147b5:	5f                   	pop    edi
c00147b6:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00147bb:	5d                   	pop    ebp
c00147bc:	68 cc aa 02 c0       	push   0xc002aacc
c00147c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c7:	e8 3c c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00147cc:	0f 21 c8             	mov    eax,db1
c00147cf:	5a                   	pop    edx
c00147d0:	59                   	pop    ecx
c00147d1:	50                   	push   eax
c00147d2:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00147d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147dd:	e8 e0 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c00147e2:	5e                   	pop    esi
c00147e3:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00147e8:	5f                   	pop    edi
c00147e9:	68 d4 aa 02 c0       	push   0xc002aad4
c00147ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147f4:	e8 0f c0 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00147f9:	0f 21 d0             	mov    eax,db2
c00147fc:	5d                   	pop    ebp
c00147fd:	5a                   	pop    edx
c00147fe:	50                   	push   eax
c00147ff:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014804:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480a:	e8 b3 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001480f:	59                   	pop    ecx
c0014810:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014815:	5e                   	pop    esi
c0014816:	68 dc aa 02 c0       	push   0xc002aadc
c001481b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014821:	e8 e2 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014826:	0f 21 d8             	mov    eax,db3
c0014829:	5f                   	pop    edi
c001482a:	5d                   	pop    ebp
c001482b:	50                   	push   eax
c001482c:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014831:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014837:	e8 86 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001483c:	58                   	pop    eax
c001483d:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0014842:	5a                   	pop    edx
c0014843:	68 e4 aa 02 c0       	push   0xc002aae4
c0014848:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001484e:	e8 b5 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014853:	0f 21 f0             	mov    eax,db6
c0014856:	59                   	pop    ecx
c0014857:	5e                   	pop    esi
c0014858:	50                   	push   eax
c0014859:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001485e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014864:	e8 59 bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014869:	5f                   	pop    edi
c001486a:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001486f:	5d                   	pop    ebp
c0014870:	68 ec aa 02 c0       	push   0xc002aaec
c0014875:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487b:	e8 88 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0014880:	0f 21 f8             	mov    eax,db7
c0014883:	5a                   	pop    edx
c0014884:	59                   	pop    ecx
c0014885:	50                   	push   eax
c0014886:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001488b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014891:	e8 2c bf ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014896:	5e                   	pop    esi
c0014897:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001489a:	e8 43 86 00 00       	call   c001cee2 <Thr::getDriverNameFromAddress(unsigned long)>
c001489f:	83 c4 10             	add    esp,0x10
c00148a2:	85 c0                	test   eax,eax
c00148a4:	74 7d                	je     c0014923 <displayDebugInfo(regs*)+0x48b>
c00148a6:	89 c6                	mov    esi,eax
c00148a8:	50                   	push   eax
c00148a9:	50                   	push   eax
c00148aa:	56                   	push   esi
c00148ab:	68 f4 aa 02 c0       	push   0xc002aaf4
c00148b0:	e8 48 dd ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00148b5:	5a                   	pop    edx
c00148b6:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00148bb:	59                   	pop    ecx
c00148bc:	68 02 ab 02 c0       	push   0xc002ab02
c00148c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c7:	e8 3c bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00148cc:	5f                   	pop    edi
c00148cd:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00148d2:	5d                   	pop    ebp
c00148d3:	56                   	push   esi
c00148d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148da:	e8 29 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00148df:	58                   	pop    eax
c00148e0:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00148e5:	5a                   	pop    edx
c00148e6:	68 0e ab 02 c0       	push   0xc002ab0e
c00148eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f1:	e8 12 bf ff ff       	call   c0010808 <VgaText::puts(char const*)>
c00148f6:	59                   	pop    ecx
c00148f7:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00148fc:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014902:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014905:	e8 0f 86 00 00       	call   c001cf19 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001490a:	5b                   	pop    ebx
c001490b:	5d                   	pop    ebp
c001490c:	50                   	push   eax
c001490d:	57                   	push   edi
c001490e:	e8 af be ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0014913:	58                   	pop    eax
c0014914:	5a                   	pop    edx
c0014915:	56                   	push   esi
c0014916:	68 1a ab 02 c0       	push   0xc002ab1a
c001491b:	e8 dd dc ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014920:	83 c4 10             	add    esp,0x10
c0014923:	fa                   	cli    
c0014924:	f4                   	hlt    
c0014925:	eb fe                	jmp    c0014925 <displayDebugInfo(regs*)+0x48d>

c0014927 <x87EmulHandler(regs*, void*)>:
c0014927:	83 ec 0c             	sub    esp,0xc
c001492a:	0f 20 c2             	mov    edx,cr0
c001492d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014932:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014936:	75 4b                	jne    c0014983 <x87EmulHandler(regs*, void*)+0x5c>
c0014938:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001493d:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014943:	85 c0                	test   eax,eax
c0014945:	74 05                	je     c001494c <x87EmulHandler(regs*, void*)+0x25>
c0014947:	83 e2 08             	and    edx,0x8
c001494a:	75 17                	jne    c0014963 <x87EmulHandler(regs*, void*)+0x3c>
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014953:	e8 5d a9 00 00       	call   c001f2b5 <Vm::x87Handler(regs*)>
c0014958:	83 c4 10             	add    esp,0x10
c001495b:	84 c0                	test   al,al
c001495d:	74 24                	je     c0014983 <x87EmulHandler(regs*, void*)+0x5c>
c001495f:	83 c4 0c             	add    esp,0xc
c0014962:	c3                   	ret    
c0014963:	83 ec 0c             	sub    esp,0xc
c0014966:	68 40 ab 02 c0       	push   0xc002ab40
c001496b:	e8 8d dc ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014970:	0f 06                	clts   
c0014972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014977:	83 c4 10             	add    esp,0x10
c001497a:	a3 08 d9 02 c0       	mov    ds:0xc002d908,eax
c001497f:	83 c4 0c             	add    esp,0xc
c0014982:	c3                   	ret    
c0014983:	83 ec 0c             	sub    esp,0xc
c0014986:	68 2a ab 02 c0       	push   0xc002ab2a
c001498b:	e8 6d dc ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014990:	5a                   	pop    edx
c0014991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014995:	e8 fe fa ff ff       	call   c0014498 <displayDebugInfo(regs*)>

c001499a <gpFault(regs*, void*)>:
c001499a:	53                   	push   ebx
c001499b:	83 ec 14             	sub    esp,0x14
c001499e:	c7 05 04 d9 02 c0 8e e7 01 c0 	mov    DWORD PTR ds:0xc002d904,0xc001e78e
c00149a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149ac:	53                   	push   ebx
c00149ad:	e8 dc 9d 00 00       	call   c001e78e <Vm::faultHandler(regs*)>
c00149b2:	83 c4 10             	add    esp,0x10
c00149b5:	84 c0                	test   al,al
c00149b7:	74 05                	je     c00149be <gpFault(regs*, void*)+0x24>
c00149b9:	83 c4 08             	add    esp,0x8
c00149bc:	5b                   	pop    ebx
c00149bd:	c3                   	ret    
c00149be:	83 ec 0c             	sub    esp,0xc
c00149c1:	68 4d ab 02 c0       	push   0xc002ab4d
c00149c6:	e8 32 dc ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00149cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149ce:	e8 c5 fa ff ff       	call   c0014498 <displayDebugInfo(regs*)>

c00149d3 <pgFault(regs*, void*)>:
c00149d3:	83 ec 18             	sub    esp,0x18
c00149d6:	68 68 ab 02 c0       	push   0xc002ab68
c00149db:	e8 1d dc ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00149e0:	0f 20 d0             	mov    eax,cr2
c00149e3:	5a                   	pop    edx
c00149e4:	59                   	pop    ecx
c00149e5:	50                   	push   eax
c00149e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149ee:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00149f4:	e8 97 d7 ff ff       	call   c0012190 <VAS::tryLoadBackOffDisk(unsigned long)>
c00149f9:	83 c4 10             	add    esp,0x10
c00149fc:	84 c0                	test   al,al
c00149fe:	74 04                	je     c0014a04 <pgFault(regs*, void*)+0x31>
c0014a00:	83 c4 0c             	add    esp,0xc
c0014a03:	c3                   	ret    
c0014a04:	83 ec 0c             	sub    esp,0xc
c0014a07:	68 72 ab 02 c0       	push   0xc002ab72
c0014a0c:	e8 ec db ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014a11:	58                   	pop    eax
c0014a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a16:	e8 7d fa ff ff       	call   c0014498 <displayDebugInfo(regs*)>

c0014a1b <otherISRHandler(regs*, void*)>:
c0014a1b:	53                   	push   ebx
c0014a1c:	83 ec 0c             	sub    esp,0xc
c0014a1f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a23:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a26:	50                   	push   eax
c0014a27:	50                   	push   eax
c0014a28:	68 7f ab 02 c0       	push   0xc002ab7f
c0014a2d:	e8 cb db ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a35:	e8 5e fa ff ff       	call   c0014498 <displayDebugInfo(regs*)>

c0014a3a <opcodeFault(regs*, void*)>:
c0014a3a:	55                   	push   ebp
c0014a3b:	89 e5                	mov    ebp,esp
c0014a3d:	56                   	push   esi
c0014a3e:	53                   	push   ebx
c0014a3f:	83 ec 40             	sub    esp,0x40
c0014a42:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0014a47:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a4d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014a53:	84 c0                	test   al,al
c0014a55:	74 24                	je     c0014a7b <opcodeFault(regs*, void*)+0x41>
c0014a57:	83 ec 0c             	sub    esp,0xc
c0014a5a:	68 9c ab 02 c0       	push   0xc002ab9c
c0014a5f:	e8 99 db ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014a64:	83 c4 10             	add    esp,0x10
c0014a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a6d:	8d 50 19             	lea    edx,[eax+0x19]
c0014a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a76:	e9 d5 05 00 00       	jmp    c0015050 <opcodeFault(regs*, void*)+0x616>
c0014a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a81:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a84:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014a88:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a92:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014a95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a98:	8a 00                	mov    al,BYTE PTR [eax]
c0014a9a:	3c f0                	cmp    al,0xf0
c0014a9c:	75 17                	jne    c0014ab5 <opcodeFault(regs*, void*)+0x7b>
c0014a9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0014aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab0:	e9 da 00 00 00       	jmp    c0014b8f <opcodeFault(regs*, void*)+0x155>
c0014ab5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab8:	8a 00                	mov    al,BYTE PTR [eax]
c0014aba:	3c f2                	cmp    al,0xf2
c0014abc:	74 09                	je     c0014ac7 <opcodeFault(regs*, void*)+0x8d>
c0014abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac3:	3c f3                	cmp    al,0xf3
c0014ac5:	75 1b                	jne    c0014ae2 <opcodeFault(regs*, void*)+0xa8>
c0014ac7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014acb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad4:	8d 50 01             	lea    edx,[eax+0x1]
c0014ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ada:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014add:	e9 ad 00 00 00       	jmp    c0014b8f <opcodeFault(regs*, void*)+0x155>
c0014ae2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ae5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ae7:	3c 66                	cmp    al,0x66
c0014ae9:	75 1f                	jne    c0014b0a <opcodeFault(regs*, void*)+0xd0>
c0014aeb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aef:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014af3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014afc:	8d 50 01             	lea    edx,[eax+0x1]
c0014aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b05:	e9 85 00 00 00       	jmp    c0014b8f <opcodeFault(regs*, void*)+0x155>
c0014b0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0f:	3c 67                	cmp    al,0x67
c0014b11:	75 18                	jne    c0014b2b <opcodeFault(regs*, void*)+0xf1>
c0014b13:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b20:	8d 50 01             	lea    edx,[eax+0x1]
c0014b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b26:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b29:	eb 64                	jmp    c0014b8f <opcodeFault(regs*, void*)+0x155>
c0014b2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b30:	3c 2e                	cmp    al,0x2e
c0014b32:	74 09                	je     c0014b3d <opcodeFault(regs*, void*)+0x103>
c0014b34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b37:	8a 00                	mov    al,BYTE PTR [eax]
c0014b39:	3c 3e                	cmp    al,0x3e
c0014b3b:	75 18                	jne    c0014b55 <opcodeFault(regs*, void*)+0x11b>
c0014b3d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b41:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b47:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b4a:	8d 50 01             	lea    edx,[eax+0x1]
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b53:	eb 3a                	jmp    c0014b8f <opcodeFault(regs*, void*)+0x155>
c0014b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b58:	8a 00                	mov    al,BYTE PTR [eax]
c0014b5a:	3c 36                	cmp    al,0x36
c0014b5c:	74 1b                	je     c0014b79 <opcodeFault(regs*, void*)+0x13f>
c0014b5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b61:	8a 00                	mov    al,BYTE PTR [eax]
c0014b63:	3c 26                	cmp    al,0x26
c0014b65:	74 12                	je     c0014b79 <opcodeFault(regs*, void*)+0x13f>
c0014b67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6c:	3c 64                	cmp    al,0x64
c0014b6e:	74 09                	je     c0014b79 <opcodeFault(regs*, void*)+0x13f>
c0014b70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b73:	8a 00                	mov    al,BYTE PTR [eax]
c0014b75:	3c 65                	cmp    al,0x65
c0014b77:	75 16                	jne    c0014b8f <opcodeFault(regs*, void*)+0x155>
c0014b79:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b7d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b86:	8d 50 01             	lea    edx,[eax+0x1]
c0014b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b8c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b92:	8a 00                	mov    al,BYTE PTR [eax]
c0014b94:	3c 0f                	cmp    al,0xf
c0014b96:	0f 85 ad 00 00 00    	jne    c0014c49 <opcodeFault(regs*, void*)+0x20f>
c0014b9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9f:	40                   	inc    eax
c0014ba0:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba2:	3c c2                	cmp    al,0xc2
c0014ba4:	74 0e                	je     c0014bb4 <opcodeFault(regs*, void*)+0x17a>
c0014ba6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba9:	40                   	inc    eax
c0014baa:	8a 00                	mov    al,BYTE PTR [eax]
c0014bac:	3c c3                	cmp    al,0xc3
c0014bae:	0f 85 95 00 00 00    	jne    c0014c49 <opcodeFault(regs*, void*)+0x20f>
c0014bb4:	83 ec 0c             	sub    esp,0xc
c0014bb7:	68 bf ab 02 c0       	push   0xc002abbf
c0014bbc:	e8 3c da ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014bc1:	83 c4 10             	add    esp,0x10
c0014bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bca:	8d 50 01             	lea    edx,[eax+0x1]
c0014bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bd3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd9:	8a 00                	mov    al,BYTE PTR [eax]
c0014bdb:	8d 50 fe             	lea    edx,[eax-0x2]
c0014bde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be1:	88 10                	mov    BYTE PTR [eax],dl
c0014be3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014be6:	50                   	push   eax
c0014be7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014bea:	50                   	push   eax
c0014beb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014bee:	50                   	push   eax
c0014bef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014bf2:	e8 8b 48 00 00       	call   c0019482 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014bf7:	83 c4 10             	add    esp,0x10
c0014bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c00:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c03:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c06:	01 d0                	add    eax,edx
c0014c08:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c11:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c14:	48                   	dec    eax
c0014c15:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c24:	83 ec 04             	sub    esp,0x4
c0014c27:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c2a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c2d:	50                   	push   eax
c0014c2e:	e8 81 b5 fe ff       	call   c00001b4 <voodooXADD>
c0014c33:	83 c4 10             	add    esp,0x10
c0014c36:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c39:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c3c:	01 c2                	add    edx,eax
c0014c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c41:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c44:	e9 07 04 00 00       	jmp    c0015050 <opcodeFault(regs*, void*)+0x616>
c0014c49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014c4e:	3c 0f                	cmp    al,0xf
c0014c50:	0f 85 8b 01 00 00    	jne    c0014de1 <opcodeFault(regs*, void*)+0x3a7>
c0014c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c59:	40                   	inc    eax
c0014c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5c:	3c c7                	cmp    al,0xc7
c0014c5e:	0f 86 7d 01 00 00    	jbe    c0014de1 <opcodeFault(regs*, void*)+0x3a7>
c0014c64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c67:	40                   	inc    eax
c0014c68:	8a 00                	mov    al,BYTE PTR [eax]
c0014c6a:	3c cf                	cmp    al,0xcf
c0014c6c:	0f 87 6f 01 00 00    	ja     c0014de1 <opcodeFault(regs*, void*)+0x3a7>
c0014c72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c75:	40                   	inc    eax
c0014c76:	8a 00                	mov    al,BYTE PTR [eax]
c0014c78:	83 c0 38             	add    eax,0x38
c0014c7b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014c7e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c82:	75 0b                	jne    c0014c8f <opcodeFault(regs*, void*)+0x255>
c0014c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c87:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014c8a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c8d:	eb 75                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014c8f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c93:	75 0b                	jne    c0014ca0 <opcodeFault(regs*, void*)+0x266>
c0014c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014c9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c9e:	eb 64                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014ca0:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014ca4:	75 0b                	jne    c0014cb1 <opcodeFault(regs*, void*)+0x277>
c0014ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014cac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014caf:	eb 53                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014cb1:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014cb5:	75 0b                	jne    c0014cc2 <opcodeFault(regs*, void*)+0x288>
c0014cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014cbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cc0:	eb 42                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014cc2:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cc6:	75 0b                	jne    c0014cd3 <opcodeFault(regs*, void*)+0x299>
c0014cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014cce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cd1:	eb 31                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014cd3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cd7:	75 0b                	jne    c0014ce4 <opcodeFault(regs*, void*)+0x2aa>
c0014cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014cdf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce2:	eb 20                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014ce4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014ce8:	75 0b                	jne    c0014cf5 <opcodeFault(regs*, void*)+0x2bb>
c0014cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ced:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014cf0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cf3:	eb 0f                	jmp    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014cf5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cf9:	75 09                	jne    c0014d04 <opcodeFault(regs*, void*)+0x2ca>
c0014cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d04:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d08:	74 10                	je     c0014d1a <opcodeFault(regs*, void*)+0x2e0>
c0014d0a:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d11:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d18:	eb 2d                	jmp    c0014d47 <opcodeFault(regs*, void*)+0x30d>
c0014d1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d1d:	c1 e0 18             	shl    eax,0x18
c0014d20:	89 c2                	mov    edx,eax
c0014d22:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d25:	c1 e0 08             	shl    eax,0x8
c0014d28:	25 00 00 ff 00       	and    eax,0xff0000
c0014d2d:	09 c2                	or     edx,eax
c0014d2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d32:	c1 e8 08             	shr    eax,0x8
c0014d35:	25 00 ff 00 00       	and    eax,0xff00
c0014d3a:	09 c2                	or     edx,eax
c0014d3c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d3f:	c1 e8 18             	shr    eax,0x18
c0014d42:	09 d0                	or     eax,edx
c0014d44:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d47:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d4b:	75 0b                	jne    c0014d58 <opcodeFault(regs*, void*)+0x31e>
c0014d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d50:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d53:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014d56:	eb 75                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014d58:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d5c:	75 0b                	jne    c0014d69 <opcodeFault(regs*, void*)+0x32f>
c0014d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d61:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d64:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014d67:	eb 64                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014d69:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d6d:	75 0b                	jne    c0014d7a <opcodeFault(regs*, void*)+0x340>
c0014d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d72:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d75:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014d78:	eb 53                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014d7a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d7e:	75 0b                	jne    c0014d8b <opcodeFault(regs*, void*)+0x351>
c0014d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d83:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d86:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014d89:	eb 42                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014d8b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d8f:	75 0b                	jne    c0014d9c <opcodeFault(regs*, void*)+0x362>
c0014d91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d94:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014d97:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014d9a:	eb 31                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014d9c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014da0:	75 0b                	jne    c0014dad <opcodeFault(regs*, void*)+0x373>
c0014da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014da8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014dab:	eb 20                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014dad:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014db1:	75 0b                	jne    c0014dbe <opcodeFault(regs*, void*)+0x384>
c0014db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014db9:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014dbc:	eb 0f                	jmp    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014dbe:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014dc2:	75 09                	jne    c0014dcd <opcodeFault(regs*, void*)+0x393>
c0014dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd3:	8d 50 02             	lea    edx,[eax+0x2]
c0014dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ddc:	e9 6f 02 00 00       	jmp    c0015050 <opcodeFault(regs*, void*)+0x616>
c0014de1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de4:	8a 00                	mov    al,BYTE PTR [eax]
c0014de6:	3c 0f                	cmp    al,0xf
c0014de8:	0f 85 8d 01 00 00    	jne    c0014f7b <opcodeFault(regs*, void*)+0x541>
c0014dee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014df1:	40                   	inc    eax
c0014df2:	8a 00                	mov    al,BYTE PTR [eax]
c0014df4:	3c c7                	cmp    al,0xc7
c0014df6:	0f 85 7f 01 00 00    	jne    c0014f7b <opcodeFault(regs*, void*)+0x541>
c0014dfc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e02:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e05:	8d 50 01             	lea    edx,[eax+0x1]
c0014e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e0e:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e11:	50                   	push   eax
c0014e12:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e15:	50                   	push   eax
c0014e16:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e19:	50                   	push   eax
c0014e1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e1d:	e8 60 46 00 00       	call   c0019482 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e22:	83 c4 10             	add    esp,0x10
c0014e25:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e28:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e2b:	83 f0 01             	xor    eax,0x1
c0014e2e:	84 c0                	test   al,al
c0014e30:	0f 84 45 01 00 00    	je     c0014f7b <opcodeFault(regs*, void*)+0x541>
c0014e36:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e39:	3c 01                	cmp    al,0x1
c0014e3b:	0f 85 3a 01 00 00    	jne    c0014f7b <opcodeFault(regs*, void*)+0x541>
c0014e41:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e44:	83 f0 01             	xor    eax,0x1
c0014e47:	84 c0                	test   al,al
c0014e49:	0f 84 2c 01 00 00    	je     c0014f7b <opcodeFault(regs*, void*)+0x541>
c0014e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e52:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e55:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e58:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014e5f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e62:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e65:	89 c2                	mov    edx,eax
c0014e67:	b8 00 00 00 00       	mov    eax,0x0
c0014e6c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e6f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e75:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e78:	ba 00 00 00 00       	mov    edx,0x0
c0014e7d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014e80:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e86:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e89:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014e8c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014e93:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e96:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e99:	89 c2                	mov    edx,eax
c0014e9b:	b8 00 00 00 00       	mov    eax,0x0
c0014ea0:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ea3:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014eac:	ba 00 00 00 00       	mov    edx,0x0
c0014eb1:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014eb4:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014eb7:	fa                   	cli    
c0014eb8:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0014ebd:	40                   	inc    eax
c0014ebe:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0014ec3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014ec6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014ec9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ecb:	89 c1                	mov    ecx,eax
c0014ecd:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014ed0:	89 cb                	mov    ebx,ecx
c0014ed2:	89 d0                	mov    eax,edx
c0014ed4:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014ed7:	89 c6                	mov    esi,eax
c0014ed9:	89 f0                	mov    eax,esi
c0014edb:	09 d8                	or     eax,ebx
c0014edd:	85 c0                	test   eax,eax
c0014edf:	75 21                	jne    c0014f02 <opcodeFault(regs*, void*)+0x4c8>
c0014ee1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014ee4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014ee7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014eea:	89 01                	mov    DWORD PTR [ecx],eax
c0014eec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ef5:	83 c8 40             	or     eax,0x40
c0014ef8:	89 c2                	mov    edx,eax
c0014efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f00:	eb 3e                	jmp    c0014f40 <opcodeFault(regs*, void*)+0x506>
c0014f02:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f05:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f08:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f0a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f0d:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f10:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f16:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f19:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f1c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f1f:	89 d0                	mov    eax,edx
c0014f21:	31 d2                	xor    edx,edx
c0014f23:	89 c3                	mov    ebx,eax
c0014f25:	89 d6                	mov    esi,edx
c0014f27:	89 da                	mov    edx,ebx
c0014f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f35:	83 e0 bf             	and    eax,0xffffffbf
c0014f38:	89 c2                	mov    edx,eax
c0014f3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f40:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0014f45:	48                   	dec    eax
c0014f46:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0014f4b:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0014f50:	85 c0                	test   eax,eax
c0014f52:	75 01                	jne    c0014f55 <opcodeFault(regs*, void*)+0x51b>
c0014f54:	fb                   	sti    
c0014f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f5b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f5e:	01 c2                	add    edx,eax
c0014f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f63:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f66:	83 ec 0c             	sub    esp,0xc
c0014f69:	68 ce ab 02 c0       	push   0xc002abce
c0014f6e:	e8 8a d6 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	e9 d5 00 00 00       	jmp    c0015050 <opcodeFault(regs*, void*)+0x616>
c0014f7b:	83 ec 0c             	sub    esp,0xc
c0014f7e:	68 e1 ab 02 c0       	push   0xc002abe1
c0014f83:	e8 75 d6 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f97:	c1 e0 04             	shl    eax,0x4
c0014f9a:	01 d0                	add    eax,edx
c0014f9c:	83 c0 03             	add    eax,0x3
c0014f9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa1:	0f b6 d8             	movzx  ebx,al
c0014fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa7:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fb0:	c1 e0 04             	shl    eax,0x4
c0014fb3:	01 d0                	add    eax,edx
c0014fb5:	83 c0 02             	add    eax,0x2
c0014fb8:	8a 00                	mov    al,BYTE PTR [eax]
c0014fba:	0f b6 c8             	movzx  ecx,al
c0014fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fc9:	c1 e0 04             	shl    eax,0x4
c0014fcc:	01 d0                	add    eax,edx
c0014fce:	40                   	inc    eax
c0014fcf:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd1:	0f b6 d0             	movzx  edx,al
c0014fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fe0:	c1 e0 04             	shl    eax,0x4
c0014fe3:	01 f0                	add    eax,esi
c0014fe5:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe7:	0f b6 c0             	movzx  eax,al
c0014fea:	83 ec 0c             	sub    esp,0xc
c0014fed:	53                   	push   ebx
c0014fee:	51                   	push   ecx
c0014fef:	52                   	push   edx
c0014ff0:	50                   	push   eax
c0014ff1:	68 f4 ab 02 c0       	push   0xc002abf4
c0014ff6:	e8 02 d6 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0014ffb:	83 c4 20             	add    esp,0x20
c0014ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015001:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015004:	83 c0 03             	add    eax,0x3
c0015007:	8a 00                	mov    al,BYTE PTR [eax]
c0015009:	0f b6 d8             	movzx  ebx,al
c001500c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015012:	83 c0 02             	add    eax,0x2
c0015015:	8a 00                	mov    al,BYTE PTR [eax]
c0015017:	0f b6 c8             	movzx  ecx,al
c001501a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015020:	40                   	inc    eax
c0015021:	8a 00                	mov    al,BYTE PTR [eax]
c0015023:	0f b6 d0             	movzx  edx,al
c0015026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015029:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001502c:	8a 00                	mov    al,BYTE PTR [eax]
c001502e:	0f b6 c0             	movzx  eax,al
c0015031:	83 ec 0c             	sub    esp,0xc
c0015034:	53                   	push   ebx
c0015035:	51                   	push   ecx
c0015036:	52                   	push   edx
c0015037:	50                   	push   eax
c0015038:	68 1c ac 02 c0       	push   0xc002ac1c
c001503d:	e8 bb d5 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0015042:	83 c4 20             	add    esp,0x20
c0015045:	83 ec 0c             	sub    esp,0xc
c0015048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001504b:	e8 48 f4 ff ff       	call   c0014498 <displayDebugInfo(regs*)>
c0015050:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015053:	5b                   	pop    ebx
c0015054:	5e                   	pop    esi
c0015055:	5d                   	pop    ebp
c0015056:	c3                   	ret    

c0015057 <displayProgramFault(char const*)>:
c0015057:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001505c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001505f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015065:	85 c0                	test   eax,eax
c0015067:	74 15                	je     c001507e <displayProgramFault(char const*)+0x27>
c0015069:	83 ec 0c             	sub    esp,0xc
c001506c:	6a 04                	push   0x4
c001506e:	6a 0f                	push   0xf
c0015070:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015074:	50                   	push   eax
c0015075:	e8 8a b4 ff ff       	call   c0010504 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001507a:	83 c4 1c             	add    esp,0x1c
c001507d:	c3                   	ret    
c001507e:	c3                   	ret    

c001507f <setupInterruptController()>:
c001507f:	55                   	push   ebp
c0015080:	89 e5                	mov    ebp,esp
c0015082:	53                   	push   ebx
c0015083:	83 ec 24             	sub    esp,0x24
c0015086:	b8 00 00 00 00       	mov    eax,0x0
c001508b:	85 c0                	test   eax,eax
c001508d:	0f 95 c0             	setne  al
c0015090:	84 c0                	test   al,al
c0015092:	74 5b                	je     c00150ef <setupInterruptController()+0x70>
c0015094:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001509b:	83 ec 0c             	sub    esp,0xc
c001509e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00150a1:	e8 f6 a4 ff ff       	call   c000f59c <malloc>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	89 c3                	mov    ebx,eax
c00150ab:	83 ec 0c             	sub    esp,0xc
c00150ae:	53                   	push   ebx
c00150af:	e8 fe 04 01 00       	call   c00255b2 <APIC::APIC()>
c00150b4:	83 c4 10             	add    esp,0x10
c00150b7:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00150ba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00150bd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c2:	83 c0 08             	add    eax,0x8
c00150c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150c7:	6a 00                	push   0x0
c00150c9:	6a 00                	push   0x0
c00150cb:	6a 00                	push   0x0
c00150cd:	52                   	push   edx
c00150ce:	ff d0                	call   eax
c00150d0:	83 c4 10             	add    esp,0x10
c00150d3:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00150d8:	83 ec 08             	sub    esp,0x8
c00150db:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150de:	50                   	push   eax
c00150df:	e8 52 e9 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c00150e4:	83 c4 10             	add    esp,0x10
c00150e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150ea:	e9 79 03 00 00       	jmp    c0015468 <setupInterruptController()+0x3e9>
c00150ef:	a0 00 01 03 c0       	mov    al,ds:0xc0030100
c00150f4:	84 c0                	test   al,al
c00150f6:	75 14                	jne    c001510c <setupInterruptController()+0x8d>
c00150f8:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00150fd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015103:	83 e2 fe             	and    edx,0xfffffffe
c0015106:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001510c:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0015111:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015117:	83 e0 01             	and    eax,0x1
c001511a:	84 c0                	test   al,al
c001511c:	0f 95 c0             	setne  al
c001511f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015122:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015129:	83 ec 0c             	sub    esp,0xc
c001512c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001512f:	e8 68 a4 ff ff       	call   c000f59c <malloc>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	89 c3                	mov    ebx,eax
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	53                   	push   ebx
c001513d:	e8 c8 09 01 00       	call   c0025b0a <PIC::PIC()>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015148:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001514b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001514e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015150:	83 c0 08             	add    eax,0x8
c0015153:	8b 00                	mov    eax,DWORD PTR [eax]
c0015155:	6a 00                	push   0x0
c0015157:	6a 00                	push   0x0
c0015159:	6a 00                	push   0x0
c001515b:	52                   	push   edx
c001515c:	ff d0                	call   eax
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015165:	74 73                	je     c00151da <setupInterruptController()+0x15b>
c0015167:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001516a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001516d:	8b 00                	mov    eax,DWORD PTR [eax]
c001516f:	83 c0 0c             	add    eax,0xc
c0015172:	8b 00                	mov    eax,DWORD PTR [eax]
c0015174:	6a 00                	push   0x0
c0015176:	6a 00                	push   0x0
c0015178:	6a 00                	push   0x0
c001517a:	52                   	push   edx
c001517b:	ff d0                	call   eax
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015184:	74 15                	je     c001519b <setupInterruptController()+0x11c>
c0015186:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015189:	8b 00                	mov    eax,DWORD PTR [eax]
c001518b:	83 c0 04             	add    eax,0x4
c001518e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015190:	83 ec 0c             	sub    esp,0xc
c0015193:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015196:	ff d0                	call   eax
c0015198:	83 c4 10             	add    esp,0x10
c001519b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00151a2:	83 ec 0c             	sub    esp,0xc
c00151a5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00151a8:	e8 ef a3 ff ff       	call   c000f59c <malloc>
c00151ad:	83 c4 10             	add    esp,0x10
c00151b0:	89 c3                	mov    ebx,eax
c00151b2:	83 ec 0c             	sub    esp,0xc
c00151b5:	53                   	push   ebx
c00151b6:	e8 f7 03 01 00       	call   c00255b2 <APIC::APIC()>
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00151c1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00151c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c9:	83 c0 08             	add    eax,0x8
c00151cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ce:	6a 00                	push   0x0
c00151d0:	6a 00                	push   0x0
c00151d2:	6a 00                	push   0x0
c00151d4:	52                   	push   edx
c00151d5:	ff d0                	call   eax
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00151df:	83 ec 08             	sub    esp,0x8
c00151e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151e5:	50                   	push   eax
c00151e6:	e8 4b e8 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c00151eb:	83 c4 10             	add    esp,0x10
c00151ee:	c7 05 08 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d908,0x0
c00151f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	83 c0 24             	add    eax,0x24
c0015200:	8b 00                	mov    eax,DWORD PTR [eax]
c0015202:	6a 00                	push   0x0
c0015204:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015209:	6a 00                	push   0x0
c001520b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001520e:	ff d0                	call   eax
c0015210:	83 c4 10             	add    esp,0x10
c0015213:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015216:	8b 00                	mov    eax,DWORD PTR [eax]
c0015218:	83 c0 24             	add    eax,0x24
c001521b:	8b 00                	mov    eax,DWORD PTR [eax]
c001521d:	6a 00                	push   0x0
c001521f:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015224:	6a 01                	push   0x1
c0015226:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015229:	ff d0                	call   eax
c001522b:	83 c4 10             	add    esp,0x10
c001522e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015231:	8b 00                	mov    eax,DWORD PTR [eax]
c0015233:	83 c0 24             	add    eax,0x24
c0015236:	8b 00                	mov    eax,DWORD PTR [eax]
c0015238:	6a 00                	push   0x0
c001523a:	68 f5 42 01 c0       	push   0xc00142f5
c001523f:	6a 02                	push   0x2
c0015241:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015244:	ff d0                	call   eax
c0015246:	83 c4 10             	add    esp,0x10
c0015249:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001524c:	8b 00                	mov    eax,DWORD PTR [eax]
c001524e:	83 c0 24             	add    eax,0x24
c0015251:	8b 00                	mov    eax,DWORD PTR [eax]
c0015253:	6a 00                	push   0x0
c0015255:	68 1b 4a 01 c0       	push   0xc0014a1b
c001525a:	6a 03                	push   0x3
c001525c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525f:	ff d0                	call   eax
c0015261:	83 c4 10             	add    esp,0x10
c0015264:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015267:	8b 00                	mov    eax,DWORD PTR [eax]
c0015269:	83 c0 24             	add    eax,0x24
c001526c:	8b 00                	mov    eax,DWORD PTR [eax]
c001526e:	6a 00                	push   0x0
c0015270:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015275:	6a 04                	push   0x4
c0015277:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527a:	ff d0                	call   eax
c001527c:	83 c4 10             	add    esp,0x10
c001527f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015282:	8b 00                	mov    eax,DWORD PTR [eax]
c0015284:	83 c0 24             	add    eax,0x24
c0015287:	8b 00                	mov    eax,DWORD PTR [eax]
c0015289:	6a 00                	push   0x0
c001528b:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015290:	6a 05                	push   0x5
c0015292:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015295:	ff d0                	call   eax
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001529d:	8b 00                	mov    eax,DWORD PTR [eax]
c001529f:	83 c0 24             	add    eax,0x24
c00152a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a4:	6a 00                	push   0x0
c00152a6:	68 3a 4a 01 c0       	push   0xc0014a3a
c00152ab:	6a 06                	push   0x6
c00152ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b0:	ff d0                	call   eax
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ba:	83 c0 24             	add    eax,0x24
c00152bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152bf:	6a 00                	push   0x0
c00152c1:	68 27 49 01 c0       	push   0xc0014927
c00152c6:	6a 07                	push   0x7
c00152c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cb:	ff d0                	call   eax
c00152cd:	83 c4 10             	add    esp,0x10
c00152d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	83 c0 24             	add    eax,0x24
c00152d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152da:	6a 00                	push   0x0
c00152dc:	68 10 41 01 c0       	push   0xc0014110
c00152e1:	6a 08                	push   0x8
c00152e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e6:	ff d0                	call   eax
c00152e8:	83 c4 10             	add    esp,0x10
c00152eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f0:	83 c0 24             	add    eax,0x24
c00152f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f5:	6a 00                	push   0x0
c00152f7:	68 1b 4a 01 c0       	push   0xc0014a1b
c00152fc:	6a 09                	push   0x9
c00152fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015301:	ff d0                	call   eax
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015309:	8b 00                	mov    eax,DWORD PTR [eax]
c001530b:	83 c0 24             	add    eax,0x24
c001530e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015310:	6a 00                	push   0x0
c0015312:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015317:	6a 0a                	push   0xa
c0015319:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001531c:	ff d0                	call   eax
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015324:	8b 00                	mov    eax,DWORD PTR [eax]
c0015326:	83 c0 24             	add    eax,0x24
c0015329:	8b 00                	mov    eax,DWORD PTR [eax]
c001532b:	6a 00                	push   0x0
c001532d:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015332:	6a 0b                	push   0xb
c0015334:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015337:	ff d0                	call   eax
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001533f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015341:	83 c0 24             	add    eax,0x24
c0015344:	8b 00                	mov    eax,DWORD PTR [eax]
c0015346:	6a 00                	push   0x0
c0015348:	68 1b 4a 01 c0       	push   0xc0014a1b
c001534d:	6a 0c                	push   0xc
c001534f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015352:	ff d0                	call   eax
c0015354:	83 c4 10             	add    esp,0x10
c0015357:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535a:	8b 00                	mov    eax,DWORD PTR [eax]
c001535c:	83 c0 24             	add    eax,0x24
c001535f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015361:	6a 00                	push   0x0
c0015363:	68 9a 49 01 c0       	push   0xc001499a
c0015368:	6a 0d                	push   0xd
c001536a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001536d:	ff d0                	call   eax
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015375:	8b 00                	mov    eax,DWORD PTR [eax]
c0015377:	83 c0 24             	add    eax,0x24
c001537a:	8b 00                	mov    eax,DWORD PTR [eax]
c001537c:	6a 00                	push   0x0
c001537e:	68 d3 49 01 c0       	push   0xc00149d3
c0015383:	6a 0e                	push   0xe
c0015385:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015388:	ff d0                	call   eax
c001538a:	83 c4 10             	add    esp,0x10
c001538d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015390:	8b 00                	mov    eax,DWORD PTR [eax]
c0015392:	83 c0 24             	add    eax,0x24
c0015395:	8b 00                	mov    eax,DWORD PTR [eax]
c0015397:	6a 00                	push   0x0
c0015399:	68 1b 4a 01 c0       	push   0xc0014a1b
c001539e:	6a 0f                	push   0xf
c00153a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a3:	ff d0                	call   eax
c00153a5:	83 c4 10             	add    esp,0x10
c00153a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ad:	83 c0 24             	add    eax,0x24
c00153b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b2:	6a 00                	push   0x0
c00153b4:	68 1b 4a 01 c0       	push   0xc0014a1b
c00153b9:	6a 10                	push   0x10
c00153bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153be:	ff d0                	call   eax
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c8:	83 c0 24             	add    eax,0x24
c00153cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153cd:	6a 00                	push   0x0
c00153cf:	68 1b 4a 01 c0       	push   0xc0014a1b
c00153d4:	6a 11                	push   0x11
c00153d6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d9:	ff d0                	call   eax
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e3:	83 c0 24             	add    eax,0x24
c00153e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e8:	6a 00                	push   0x0
c00153ea:	68 1b 4a 01 c0       	push   0xc0014a1b
c00153ef:	6a 12                	push   0x12
c00153f1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f4:	ff d0                	call   eax
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fe:	83 c0 24             	add    eax,0x24
c0015401:	8b 00                	mov    eax,DWORD PTR [eax]
c0015403:	6a 00                	push   0x0
c0015405:	68 1b 4a 01 c0       	push   0xc0014a1b
c001540a:	6a 13                	push   0x13
c001540c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001540f:	ff d0                	call   eax
c0015411:	83 c4 10             	add    esp,0x10
c0015414:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015417:	8b 00                	mov    eax,DWORD PTR [eax]
c0015419:	83 c0 24             	add    eax,0x24
c001541c:	8b 00                	mov    eax,DWORD PTR [eax]
c001541e:	6a 00                	push   0x0
c0015420:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015425:	6a 14                	push   0x14
c0015427:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542a:	ff d0                	call   eax
c001542c:	83 c4 10             	add    esp,0x10
c001542f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015432:	8b 00                	mov    eax,DWORD PTR [eax]
c0015434:	83 c0 24             	add    eax,0x24
c0015437:	8b 00                	mov    eax,DWORD PTR [eax]
c0015439:	6a 00                	push   0x0
c001543b:	68 1b 4a 01 c0       	push   0xc0014a1b
c0015440:	6a 1e                	push   0x1e
c0015442:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015445:	ff d0                	call   eax
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544d:	8b 00                	mov    eax,DWORD PTR [eax]
c001544f:	83 c0 24             	add    eax,0x24
c0015452:	8b 00                	mov    eax,DWORD PTR [eax]
c0015454:	6a 00                	push   0x0
c0015456:	68 58 bf 01 c0       	push   0xc001bf58
c001545b:	6a 60                	push   0x60
c001545d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015460:	ff d0                	call   eax
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015468:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001546b:	c9                   	leave  
c001546c:	c3                   	ret    
c001546d:	90                   	nop

c001546e <InterruptController::convertLegacyIRQNumber(int)>:
c001546e:	55                   	push   ebp
c001546f:	89 e5                	mov    ebp,esp
c0015471:	83 ec 08             	sub    esp,0x8
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	83 ec 0c             	sub    esp,0xc
c001547a:	50                   	push   eax
c001547b:	e8 b6 e8 ff ff       	call   c0013d36 <Device::getName()>
c0015480:	83 c4 10             	add    esp,0x10
c0015483:	8a 00                	mov    al,BYTE PTR [eax]
c0015485:	3c 41                	cmp    al,0x41
c0015487:	0f 94 c0             	sete   al
c001548a:	84 c0                	test   al,al
c001548c:	74 28                	je     c00154b6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001548e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015492:	7f 12                	jg     c00154a6 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015494:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015497:	05 e0 c9 02 c0       	add    eax,0xc002c9e0
c001549c:	8a 00                	mov    al,BYTE PTR [eax]
c001549e:	0f b6 c0             	movzx  eax,al
c00154a1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00154a4:	eb 10                	jmp    c00154b6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	68 44 ac 02 c0       	push   0xc002ac44
c00154ae:	e8 b6 48 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00154b9:	c9                   	leave  
c00154ba:	c3                   	ret    
c00154bb:	90                   	nop

c00154bc <startGUI(void*)>:
c00154bc:	55                   	push   ebp
c00154bd:	89 e5                	mov    ebp,esp
c00154bf:	53                   	push   ebx
c00154c0:	83 ec 04             	sub    esp,0x4
c00154c3:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00154c8:	48                   	dec    eax
c00154c9:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c00154ce:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00154d3:	85 c0                	test   eax,eax
c00154d5:	75 01                	jne    c00154d8 <startGUI(void*)+0x1c>
c00154d7:	fb                   	sti    
c00154d8:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c00154de:	83 ec 08             	sub    esp,0x8
c00154e1:	6a 01                	push   0x1
c00154e3:	68 c4 ac 02 c0       	push   0xc002acc4
c00154e8:	e8 46 7a 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c00154ed:	83 c4 10             	add    esp,0x10
c00154f0:	83 ec 08             	sub    esp,0x8
c00154f3:	53                   	push   ebx
c00154f4:	50                   	push   eax
c00154f5:	e8 67 7c 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c0015503:	83 ec 08             	sub    esp,0x8
c0015506:	6a 01                	push   0x1
c0015508:	68 de ac 02 c0       	push   0xc002acde
c001550d:	e8 21 7a 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	83 ec 08             	sub    esp,0x8
c0015518:	53                   	push   ebx
c0015519:	50                   	push   eax
c001551a:	e8 42 7c 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	90                   	nop
c0015523:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015526:	c9                   	leave  
c0015527:	c3                   	ret    

c0015528 <startGUIVESA(void*)>:
c0015528:	55                   	push   ebp
c0015529:	89 e5                	mov    ebp,esp
c001552b:	53                   	push   ebx
c001552c:	83 ec 04             	sub    esp,0x4
c001552f:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0015534:	48                   	dec    eax
c0015535:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001553a:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001553f:	85 c0                	test   eax,eax
c0015541:	75 01                	jne    c0015544 <startGUIVESA(void*)+0x1c>
c0015543:	fb                   	sti    
c0015544:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c001554a:	83 ec 08             	sub    esp,0x8
c001554d:	6a 01                	push   0x1
c001554f:	68 f8 ac 02 c0       	push   0xc002acf8
c0015554:	e8 da 79 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c0015559:	83 c4 10             	add    esp,0x10
c001555c:	83 ec 08             	sub    esp,0x8
c001555f:	53                   	push   ebx
c0015560:	50                   	push   eax
c0015561:	e8 fb 7b 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c001556f:	83 ec 08             	sub    esp,0x8
c0015572:	6a 01                	push   0x1
c0015574:	68 de ac 02 c0       	push   0xc002acde
c0015579:	e8 b5 79 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	83 ec 08             	sub    esp,0x8
c0015584:	53                   	push   ebx
c0015585:	50                   	push   eax
c0015586:	e8 d6 7b 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	90                   	nop
c001558f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015592:	c9                   	leave  
c0015593:	c3                   	ret    

c0015594 <sendKeyToTerminal(unsigned char)>:
c0015594:	55                   	push   ebp
c0015595:	89 e5                	mov    ebp,esp
c0015597:	83 ec 28             	sub    esp,0x28
c001559a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00155a0:	a1 44 d8 02 c0       	mov    eax,ds:0xc002d844
c00155a5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00155a9:	83 ec 08             	sub    esp,0x8
c00155ac:	52                   	push   edx
c00155ad:	50                   	push   eax
c00155ae:	e8 f7 b3 ff ff       	call   c00109aa <VgaText::receiveKey(unsigned char)>
c00155b3:	83 c4 10             	add    esp,0x10
c00155b6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00155ba:	0f 85 8f 00 00 00    	jne    c001564f <sendKeyToTerminal(unsigned char)+0xbb>
c00155c0:	fa                   	cli    
c00155c1:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c00155c6:	40                   	inc    eax
c00155c7:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c00155cc:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c00155d1:	40                   	inc    eax
c00155d2:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c00155d7:	a1 20 d9 02 c0       	mov    eax,ds:0xc002d920
c00155dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155df:	c7 05 20 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d920,0x0
c00155e9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155ed:	74 1f                	je     c001560e <sendKeyToTerminal(unsigned char)+0x7a>
c00155ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00155f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00155fe:	83 ec 0c             	sub    esp,0xc
c0015601:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015604:	e8 6f 87 00 00       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c0015609:	83 c4 10             	add    esp,0x10
c001560c:	eb db                	jmp    c00155e9 <sendKeyToTerminal(unsigned char)+0x55>
c001560e:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c0015613:	48                   	dec    eax
c0015614:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c0015619:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001561e:	85 c0                	test   eax,eax
c0015620:	75 18                	jne    c001563a <sendKeyToTerminal(unsigned char)+0xa6>
c0015622:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c0015627:	85 c0                	test   eax,eax
c0015629:	74 0f                	je     c001563a <sendKeyToTerminal(unsigned char)+0xa6>
c001562b:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c0015635:	e8 bb 82 00 00       	call   c001d8f5 <schedule()>
c001563a:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001563f:	48                   	dec    eax
c0015640:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0015645:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001564a:	85 c0                	test   eax,eax
c001564c:	75 01                	jne    c001564f <sendKeyToTerminal(unsigned char)+0xbb>
c001564e:	fb                   	sti    
c001564f:	90                   	nop
c0015650:	c9                   	leave  
c0015651:	c3                   	ret    

c0015652 <sendKeyboardToken(KeyboardToken)>:
c0015652:	55                   	push   ebp
c0015653:	89 e5                	mov    ebp,esp
c0015655:	83 ec 18             	sub    esp,0x18
c0015658:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001565b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565e:	0f b7 c0             	movzx  eax,ax
c0015661:	83 f2 01             	xor    edx,0x1
c0015664:	88 90 40 d9 02 c0    	mov    BYTE PTR [eax-0x3ffd26c0],dl
c001566a:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c001566f:	85 c0                	test   eax,eax
c0015671:	74 24                	je     c0015697 <sendKeyboardToken(KeyboardToken)+0x45>
c0015673:	8b 0d 28 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d928
c0015679:	83 ec 04             	sub    esp,0x4
c001567c:	68 40 d9 02 c0       	push   0xc002d940
c0015681:	83 ec 08             	sub    esp,0x8
c0015684:	89 e2                	mov    edx,esp
c0015686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015689:	89 02                	mov    DWORD PTR [edx],eax
c001568b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001568e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015692:	ff d1                	call   ecx
c0015694:	83 c4 10             	add    esp,0x10
c0015697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569a:	66 3d 03 02          	cmp    ax,0x203
c001569e:	75 07                	jne    c00156a7 <sendKeyboardToken(KeyboardToken)+0x55>
c00156a0:	a0 40 da 02 c0       	mov    al,ds:0xc002da40
c00156a5:	84 c0                	test   al,al
c00156a7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00156ab:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00156ae:	a0 48 dd 02 c0       	mov    al,ds:0xc002dd48
c00156b3:	38 c2                	cmp    dl,al
c00156b5:	74 1c                	je     c00156d3 <sendKeyboardToken(KeyboardToken)+0x81>
c00156b7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00156ba:	a2 48 dd 02 c0       	mov    ds:0xc002dd48,al
c00156bf:	a0 48 dd 02 c0       	mov    al,ds:0xc002dd48
c00156c4:	0f b6 c0             	movzx  eax,al
c00156c7:	83 ec 0c             	sub    esp,0xc
c00156ca:	50                   	push   eax
c00156cb:	e8 1c a9 ff ff       	call   c000ffec <setTerminalScrollLock(bool)>
c00156d0:	83 c4 10             	add    esp,0x10
c00156d3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00156d6:	84 c0                	test   al,al
c00156d8:	0f 84 ae 00 00 00    	je     c001578c <sendKeyboardToken(KeyboardToken)+0x13a>
c00156de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e1:	66 3d 10 03          	cmp    ax,0x310
c00156e5:	75 06                	jne    c00156ed <sendKeyboardToken(KeyboardToken)+0x9b>
c00156e7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00156ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f0:	66 3d 11 03          	cmp    ax,0x311
c00156f4:	75 06                	jne    c00156fc <sendKeyboardToken(KeyboardToken)+0xaa>
c00156f6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00156fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ff:	66 3d 12 03          	cmp    ax,0x312
c0015703:	75 06                	jne    c001570b <sendKeyboardToken(KeyboardToken)+0xb9>
c0015705:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001570b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570e:	66 3d 13 03          	cmp    ax,0x313
c0015712:	75 06                	jne    c001571a <sendKeyboardToken(KeyboardToken)+0xc8>
c0015714:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001571a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571d:	66 3d 14 03          	cmp    ax,0x314
c0015721:	75 06                	jne    c0015729 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015723:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	66 3d 15 03          	cmp    ax,0x315
c0015730:	75 06                	jne    c0015738 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015732:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573b:	66 3d 16 03          	cmp    ax,0x316
c001573f:	75 06                	jne    c0015747 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015741:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574a:	66 3d 17 03          	cmp    ax,0x317
c001574e:	75 06                	jne    c0015756 <sendKeyboardToken(KeyboardToken)+0x104>
c0015750:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015759:	66 3d 18 03          	cmp    ax,0x318
c001575d:	75 06                	jne    c0015765 <sendKeyboardToken(KeyboardToken)+0x113>
c001575f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015768:	66 3d 19 03          	cmp    ax,0x319
c001576c:	75 06                	jne    c0015774 <sendKeyboardToken(KeyboardToken)+0x122>
c001576e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015777:	66 3d 1a 03          	cmp    ax,0x31a
c001577b:	0f 85 c9 00 00 00    	jne    c001584a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015781:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015787:	e9 be 00 00 00       	jmp    c001584a <sendKeyboardToken(KeyboardToken)+0x1f8>
c001578c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578f:	66 3d 10 03          	cmp    ax,0x310
c0015793:	75 0a                	jne    c001579f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015795:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001579b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001579f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a2:	66 3d 11 03          	cmp    ax,0x311
c00157a6:	75 0a                	jne    c00157b2 <sendKeyboardToken(KeyboardToken)+0x160>
c00157a8:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00157ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b5:	66 3d 12 03          	cmp    ax,0x312
c00157b9:	75 0a                	jne    c00157c5 <sendKeyboardToken(KeyboardToken)+0x173>
c00157bb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00157c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c8:	66 3d 13 03          	cmp    ax,0x313
c00157cc:	75 0a                	jne    c00157d8 <sendKeyboardToken(KeyboardToken)+0x186>
c00157ce:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00157d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157db:	66 3d 14 03          	cmp    ax,0x314
c00157df:	75 0a                	jne    c00157eb <sendKeyboardToken(KeyboardToken)+0x199>
c00157e1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00157e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	66 3d 15 03          	cmp    ax,0x315
c00157f2:	75 0a                	jne    c00157fe <sendKeyboardToken(KeyboardToken)+0x1ac>
c00157f4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00157fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015801:	66 3d 16 03          	cmp    ax,0x316
c0015805:	75 0a                	jne    c0015811 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015807:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001580d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015814:	66 3d 17 03          	cmp    ax,0x317
c0015818:	75 0a                	jne    c0015824 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001581a:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015820:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015827:	66 3d 18 03          	cmp    ax,0x318
c001582b:	75 0a                	jne    c0015837 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001582d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015833:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583a:	66 3d 19 03          	cmp    ax,0x319
c001583e:	75 0a                	jne    c001584a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015840:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015846:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	66 3d 00 02          	cmp    ax,0x200
c0015851:	75 2c                	jne    c001587f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015853:	a0 40 dd 02 c0       	mov    al,ds:0xc002dd40
c0015858:	83 f0 01             	xor    eax,0x1
c001585b:	84 c0                	test   al,al
c001585d:	74 20                	je     c001587f <sendKeyboardToken(KeyboardToken)+0x22d>
c001585f:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0015864:	6a 01                	push   0x1
c0015866:	6a 00                	push   0x0
c0015868:	68 bc 54 01 c0       	push   0xc00154bc
c001586d:	50                   	push   eax
c001586e:	e8 5d 7e 00 00       	call   c001d6d0 <Process::createThread(void (*)(void*), void*, int)>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	c6 05 40 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd40,0x1
c001587d:	eb 33                	jmp    c00158b2 <sendKeyboardToken(KeyboardToken)+0x260>
c001587f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015882:	66 3d 01 02          	cmp    ax,0x201
c0015886:	75 2a                	jne    c00158b2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015888:	a0 40 dd 02 c0       	mov    al,ds:0xc002dd40
c001588d:	83 f0 01             	xor    eax,0x1
c0015890:	84 c0                	test   al,al
c0015892:	74 1e                	je     c00158b2 <sendKeyboardToken(KeyboardToken)+0x260>
c0015894:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0015899:	6a 01                	push   0x1
c001589b:	6a 00                	push   0x0
c001589d:	68 28 55 01 c0       	push   0xc0015528
c00158a2:	50                   	push   eax
c00158a3:	e8 28 7e 00 00       	call   c001d6d0 <Process::createThread(void (*)(void*), void*, int)>
c00158a8:	83 c4 10             	add    esp,0x10
c00158ab:	c6 05 40 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd40,0x1
c00158b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b5:	66 3d 1d 03          	cmp    ax,0x31d
c00158b9:	75 06                	jne    c00158c1 <sendKeyboardToken(KeyboardToken)+0x26f>
c00158bb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00158c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c4:	66 3d 1c 03          	cmp    ax,0x31c
c00158c8:	75 06                	jne    c00158d0 <sendKeyboardToken(KeyboardToken)+0x27e>
c00158ca:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00158d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d3:	66 3d 1b 03          	cmp    ax,0x31b
c00158d7:	75 06                	jne    c00158df <sendKeyboardToken(KeyboardToken)+0x28d>
c00158d9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00158df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e2:	66 3d 1e 03          	cmp    ax,0x31e
c00158e6:	75 06                	jne    c00158ee <sendKeyboardToken(KeyboardToken)+0x29c>
c00158e8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00158ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f1:	66 3d 1f 03          	cmp    ax,0x31f
c00158f5:	75 06                	jne    c00158fd <sendKeyboardToken(KeyboardToken)+0x2ab>
c00158f7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00158fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015900:	66 3d 1a 03          	cmp    ax,0x31a
c0015904:	75 06                	jne    c001590c <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015906:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001590c:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015910:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015913:	83 f0 01             	xor    eax,0x1
c0015916:	84 c0                	test   al,al
c0015918:	74 77                	je     c0015991 <sendKeyboardToken(KeyboardToken)+0x33f>
c001591a:	a0 41 da 02 c0       	mov    al,ds:0xc002da41
c001591f:	84 c0                	test   al,al
c0015921:	74 41                	je     c0015964 <sendKeyboardToken(KeyboardToken)+0x312>
c0015923:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015927:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001592b:	74 2b                	je     c0015958 <sendKeyboardToken(KeyboardToken)+0x306>
c001592d:	8b 15 44 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd44
c0015933:	89 d0                	mov    eax,edx
c0015935:	c1 e0 02             	shl    eax,0x2
c0015938:	01 d0                	add    eax,edx
c001593a:	01 c0                	add    eax,eax
c001593c:	a3 44 dd 02 c0       	mov    ds:0xc002dd44,eax
c0015941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015944:	0f b7 c0             	movzx  eax,ax
c0015947:	8d 50 d0             	lea    edx,[eax-0x30]
c001594a:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c001594f:	01 d0                	add    eax,edx
c0015951:	a3 44 dd 02 c0       	mov    ds:0xc002dd44,eax
c0015956:	eb 6d                	jmp    c00159c5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015958:	c7 05 44 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd44,0x0
c0015962:	eb 61                	jmp    c00159c5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015964:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c0015969:	85 c0                	test   eax,eax
c001596b:	74 18                	je     c0015985 <sendKeyboardToken(KeyboardToken)+0x333>
c001596d:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c0015972:	0f b6 c0             	movzx  eax,al
c0015975:	83 ec 0c             	sub    esp,0xc
c0015978:	50                   	push   eax
c0015979:	e8 16 fc ff ff       	call   c0015594 <sendKeyToTerminal(unsigned char)>
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015985:	c7 05 44 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd44,0x0
c001598f:	eb 34                	jmp    c00159c5 <sendKeyboardToken(KeyboardToken)+0x373>
c0015991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015994:	66 3d 01 01          	cmp    ax,0x101
c0015998:	75 2b                	jne    c00159c5 <sendKeyboardToken(KeyboardToken)+0x373>
c001599a:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c001599f:	85 c0                	test   eax,eax
c00159a1:	74 18                	je     c00159bb <sendKeyboardToken(KeyboardToken)+0x369>
c00159a3:	a1 44 dd 02 c0       	mov    eax,ds:0xc002dd44
c00159a8:	0f b6 c0             	movzx  eax,al
c00159ab:	83 ec 0c             	sub    esp,0xc
c00159ae:	50                   	push   eax
c00159af:	e8 e0 fb ff ff       	call   c0015594 <sendKeyToTerminal(unsigned char)>
c00159b4:	83 c4 10             	add    esp,0x10
c00159b7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159bb:	c7 05 44 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd44,0x0
c00159c5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00159c8:	83 f0 01             	xor    eax,0x1
c00159cb:	84 c0                	test   al,al
c00159cd:	74 4c                	je     c0015a1b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159cf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159d2:	83 f0 01             	xor    eax,0x1
c00159d5:	84 c0                	test   al,al
c00159d7:	74 42                	je     c0015a1b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159d9:	a0 40 da 02 c0       	mov    al,ds:0xc002da40
c00159de:	83 f0 01             	xor    eax,0x1
c00159e1:	84 c0                	test   al,al
c00159e3:	74 36                	je     c0015a1b <sendKeyboardToken(KeyboardToken)+0x3c9>
c00159e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e8:	66 83 f8 1f          	cmp    ax,0x1f
c00159ec:	76 09                	jbe    c00159f7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00159ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f1:	66 83 f8 7e          	cmp    ax,0x7e
c00159f5:	76 12                	jbe    c0015a09 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00159f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fa:	66 83 f8 0a          	cmp    ax,0xa
c00159fe:	74 09                	je     c0015a09 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a03:	66 83 f8 08          	cmp    ax,0x8
c0015a07:	75 12                	jne    c0015a1b <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0c:	0f b6 c0             	movzx  eax,al
c0015a0f:	83 ec 0c             	sub    esp,0xc
c0015a12:	50                   	push   eax
c0015a13:	e8 7c fb ff ff       	call   c0015594 <sendKeyToTerminal(unsigned char)>
c0015a18:	83 c4 10             	add    esp,0x10
c0015a1b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a1e:	83 f0 01             	xor    eax,0x1
c0015a21:	84 c0                	test   al,al
c0015a23:	74 4f                	je     c0015a74 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a25:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a28:	83 f0 01             	xor    eax,0x1
c0015a2b:	84 c0                	test   al,al
c0015a2d:	74 45                	je     c0015a74 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a2f:	a0 40 da 02 c0       	mov    al,ds:0xc002da40
c0015a34:	84 c0                	test   al,al
c0015a36:	74 3c                	je     c0015a74 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3b:	66 83 f8 3f          	cmp    ax,0x3f
c0015a3f:	76 33                	jbe    c0015a74 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a44:	66 83 f8 7f          	cmp    ax,0x7f
c0015a48:	77 2a                	ja     c0015a74 <sendKeyboardToken(KeyboardToken)+0x422>
c0015a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4d:	88 c2                	mov    dl,al
c0015a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a52:	66 83 f8 5f          	cmp    ax,0x5f
c0015a56:	76 04                	jbe    c0015a5c <sendKeyboardToken(KeyboardToken)+0x40a>
c0015a58:	b0 20                	mov    al,0x20
c0015a5a:	eb 02                	jmp    c0015a5e <sendKeyboardToken(KeyboardToken)+0x40c>
c0015a5c:	b0 00                	mov    al,0x0
c0015a5e:	29 c2                	sub    edx,eax
c0015a60:	88 d0                	mov    al,dl
c0015a62:	83 e8 40             	sub    eax,0x40
c0015a65:	0f b6 c0             	movzx  eax,al
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	50                   	push   eax
c0015a6c:	e8 23 fb ff ff       	call   c0015594 <sendKeyToTerminal(unsigned char)>
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a77:	66 3d 00 03          	cmp    ax,0x300
c0015a7b:	75 0f                	jne    c0015a8c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a7d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a80:	83 f0 01             	xor    eax,0x1
c0015a83:	84 c0                	test   al,al
c0015a85:	74 05                	je     c0015a8c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015a87:	e8 d1 a8 ff ff       	call   c001035d <doTerminalCycle()>
c0015a8c:	90                   	nop
c0015a8d:	c9                   	leave  
c0015a8e:	c3                   	ret    

c0015a8f <clearInternalKeybuffer(VgaText*)>:
c0015a8f:	55                   	push   ebp
c0015a90:	89 e5                	mov    ebp,esp
c0015a92:	83 ec 08             	sub    esp,0x8
c0015a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a98:	05 98 01 00 00       	add    eax,0x198
c0015a9d:	83 ec 0c             	sub    esp,0xc
c0015aa0:	50                   	push   eax
c0015aa1:	e8 c6 ac fe ff       	call   c000076c <strlen>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015aac:	81 c2 98 01 00 00    	add    edx,0x198
c0015ab2:	83 ec 04             	sub    esp,0x4
c0015ab5:	50                   	push   eax
c0015ab6:	6a 00                	push   0x0
c0015ab8:	52                   	push   edx
c0015ab9:	e8 92 ac fe ff       	call   c0000750 <memset>
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	90                   	nop
c0015ac2:	c9                   	leave  
c0015ac3:	c3                   	ret    

c0015ac4 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015ac4:	55                   	push   ebp
c0015ac5:	89 e5                	mov    ebp,esp
c0015ac7:	83 ec 18             	sub    esp,0x18
c0015aca:	a1 28 d9 02 c0       	mov    eax,ds:0xc002d928
c0015acf:	85 c0                	test   eax,eax
c0015ad1:	74 2a                	je     c0015afd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015ad3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015ad9:	8b 0d 28 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d928
c0015adf:	83 ec 04             	sub    esp,0x4
c0015ae2:	68 40 d9 02 c0       	push   0xc002d940
c0015ae7:	83 ec 08             	sub    esp,0x8
c0015aea:	89 e2                	mov    edx,esp
c0015aec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015aef:	89 02                	mov    DWORD PTR [edx],eax
c0015af1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015af4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015af8:	ff d1                	call   ecx
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	fb                   	sti    
c0015afe:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015b05:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015b09:	0f 84 a1 00 00 00    	je     c0015bb0 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b12:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b18:	84 c0                	test   al,al
c0015b1a:	75 28                	jne    c0015b44 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015b1c:	fa                   	cli    
c0015b1d:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0015b22:	40                   	inc    eax
c0015b23:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0015b28:	e8 c8 7d 00 00       	call   c001d8f5 <schedule()>
c0015b2d:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0015b32:	48                   	dec    eax
c0015b33:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0015b38:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0015b3d:	85 c0                	test   eax,eax
c0015b3f:	75 ce                	jne    c0015b0f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b41:	fb                   	sti    
c0015b42:	eb cb                	jmp    c0015b0f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015b44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b47:	8d 50 01             	lea    edx,[eax+0x1]
c0015b4a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b50:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015b56:	88 10                	mov    BYTE PTR [eax],dl
c0015b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015b61:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b67:	05 98 01 00 00       	add    eax,0x198
c0015b6c:	83 ec 0c             	sub    esp,0xc
c0015b6f:	50                   	push   eax
c0015b70:	e8 f7 ab fe ff       	call   c000076c <strlen>
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b7b:	81 c2 98 01 00 00    	add    edx,0x198
c0015b81:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015b84:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b87:	81 c2 98 01 00 00    	add    edx,0x198
c0015b8d:	83 ec 04             	sub    esp,0x4
c0015b90:	50                   	push   eax
c0015b91:	51                   	push   ecx
c0015b92:	52                   	push   edx
c0015b93:	e8 f0 aa fe ff       	call   c0000688 <memmove>
c0015b98:	83 c4 10             	add    esp,0x10
c0015b9b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015b9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015ba1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015ba5:	0f 85 5a ff ff ff    	jne    c0015b05 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015bab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bae:	eb 03                	jmp    c0015bb3 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015bb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb3:	c9                   	leave  
c0015bb4:	c3                   	ret    
c0015bb5:	90                   	nop

c0015bb6 <Keyboard::Keyboard(char const*)>:
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bbd:	83 ec 08             	sub    esp,0x8
c0015bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bc4:	50                   	push   eax
c0015bc5:	e8 70 e0 ff ff       	call   c0013c3a <Device::Device(char const*)>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0015bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bd6:	89 10                	mov    DWORD PTR [eax],edx
c0015bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bdc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015be6:	c6 05 24 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d924,0x1
c0015bed:	90                   	nop
c0015bee:	83 c4 0c             	add    esp,0xc
c0015bf1:	c3                   	ret    

c0015bf2 <Keyboard::~Keyboard()>:
c0015bf2:	83 ec 0c             	sub    esp,0xc
c0015bf5:	ba 1c ad 02 c0       	mov    edx,0xc002ad1c
c0015bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bfe:	89 10                	mov    DWORD PTR [eax],edx
c0015c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c04:	83 ec 0c             	sub    esp,0xc
c0015c07:	50                   	push   eax
c0015c08:	e8 f7 dc ff ff       	call   c0013904 <Device::~Device()>
c0015c0d:	83 c4 10             	add    esp,0x10
c0015c10:	90                   	nop
c0015c11:	83 c4 0c             	add    esp,0xc
c0015c14:	c3                   	ret    
c0015c15:	90                   	nop

c0015c16 <Keyboard::~Keyboard()>:
c0015c16:	83 ec 0c             	sub    esp,0xc
c0015c19:	83 ec 0c             	sub    esp,0xc
c0015c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c20:	e8 cd ff ff ff       	call   c0015bf2 <Keyboard::~Keyboard()>
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	83 ec 08             	sub    esp,0x8
c0015c2b:	68 5c 01 00 00       	push   0x15c
c0015c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c34:	e8 ec c8 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	83 c4 0c             	add    esp,0xc
c0015c3f:	c3                   	ret    

c0015c40 <LogicalDisk::close(int, int, void*)>:
c0015c40:	83 c8 ff             	or     eax,0xffffffff
c0015c43:	c3                   	ret    

c0015c44 <LogicalDisk::~LogicalDisk()>:
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	ba 94 ad 02 c0       	mov    edx,0xc002ad94
c0015c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c50:	89 10                	mov    DWORD PTR [eax],edx
c0015c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c56:	83 ec 0c             	sub    esp,0xc
c0015c59:	50                   	push   eax
c0015c5a:	e8 a5 dc ff ff       	call   c0013904 <Device::~Device()>
c0015c5f:	83 c4 10             	add    esp,0x10
c0015c62:	90                   	nop
c0015c63:	83 c4 0c             	add    esp,0xc
c0015c66:	c3                   	ret    
c0015c67:	90                   	nop

c0015c68 <LogicalDisk::~LogicalDisk()>:
c0015c68:	83 ec 0c             	sub    esp,0xc
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c72:	e8 cd ff ff ff       	call   c0015c44 <LogicalDisk::~LogicalDisk()>
c0015c77:	83 c4 10             	add    esp,0x10
c0015c7a:	83 ec 08             	sub    esp,0x8
c0015c7d:	68 74 01 00 00       	push   0x174
c0015c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c86:	e8 9a c8 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0015c8b:	83 c4 10             	add    esp,0x10
c0015c8e:	83 c4 0c             	add    esp,0xc
c0015c91:	c3                   	ret    

c0015c92 <LogicalDisk::open(int, int, void*)>:
c0015c92:	83 ec 18             	sub    esp,0x18
c0015c95:	68 48 ad 02 c0       	push   0xc002ad48
c0015c9a:	e8 ca 40 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0015c9f:	83 c8 ff             	or     eax,0xffffffff
c0015ca2:	83 c4 1c             	add    esp,0x1c
c0015ca5:	c3                   	ret    

c0015ca6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ca6:	53                   	push   ebx
c0015ca7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015cab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015caf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cb3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015cb9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015cbf:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015cc5:	77 10                	ja     c0015cd7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015cc7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015ccd:	89 d3                	mov    ebx,edx
c0015ccf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015cd5:	72 05                	jb     c0015cdc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015cd7:	83 c8 ff             	or     eax,0xffffffff
c0015cda:	89 c2                	mov    edx,eax
c0015cdc:	5b                   	pop    ebx
c0015cdd:	c3                   	ret    

c0015cde <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015cde:	56                   	push   esi
c0015cdf:	83 c8 ff             	or     eax,0xffffffff
c0015ce2:	53                   	push   ebx
c0015ce3:	89 c2                	mov    edx,eax
c0015ce5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015ce9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015ced:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015cf1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cf7:	77 27                	ja     c0015d20 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015cf9:	89 d8                	mov    eax,ebx
c0015cfb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015d01:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015d07:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d0c:	89 c2                	mov    edx,eax
c0015d0e:	73 10                	jae    c0015d20 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d10:	89 c8                	mov    eax,ecx
c0015d12:	89 da                	mov    edx,ebx
c0015d14:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015d1a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015d20:	5b                   	pop    ebx
c0015d21:	5e                   	pop    esi
c0015d22:	c3                   	ret    
c0015d23:	90                   	nop

c0015d24 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d24:	83 ec 1c             	sub    esp,0x1c
c0015d27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4a:	83 ec 08             	sub    esp,0x8
c0015d4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d51:	50                   	push   eax
c0015d52:	e8 e3 de ff ff       	call   c0013c3a <Device::Device(char const*)>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	ba 94 ad 02 c0       	mov    edx,0xc002ad94
c0015d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d63:	89 10                	mov    DWORD PTR [eax],edx
c0015d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d69:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d74:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d7f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015d89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d95:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015d9b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015da1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015da5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015da8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dac:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015db2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015dc0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dca:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015dd4:	90                   	nop
c0015dd5:	83 c4 1c             	add    esp,0x1c
c0015dd8:	c3                   	ret    
c0015dd9:	90                   	nop

c0015dda <LogicalDisk::assignDriveLetter()>:
c0015dda:	55                   	push   ebp
c0015ddb:	57                   	push   edi
c0015ddc:	56                   	push   esi
c0015ddd:	53                   	push   ebx
c0015dde:	83 ec 14             	sub    esp,0x14
c0015de1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015de5:	8b 3d 60 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd60
c0015deb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015df1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015df5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015dfb:	8b 3d 64 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd64
c0015e01:	3c 01                	cmp    al,0x1
c0015e03:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015e07:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015e0b:	19 c0                	sbb    eax,eax
c0015e0d:	83 e0 02             	and    eax,0x2
c0015e10:	83 c0 41             	add    eax,0x41
c0015e13:	0f be e8             	movsx  ebp,al
c0015e16:	3c 43                	cmp    al,0x43
c0015e18:	75 10                	jne    c0015e2a <LogicalDisk::assignDriveLetter()+0x50>
c0015e1a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015e21:	75 5d                	jne    c0015e80 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e23:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e28:	75 56                	jne    c0015e80 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e2a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e2d:	ba 01 00 00 00       	mov    edx,0x1
c0015e32:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e36:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e3a:	d3 e2                	shl    edx,cl
c0015e3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e40:	89 d7                	mov    edi,edx
c0015e42:	89 d6                	mov    esi,edx
c0015e44:	c1 ff 1f             	sar    edi,0x1f
c0015e47:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e4b:	21 f9                	and    ecx,edi
c0015e4d:	09 d1                	or     ecx,edx
c0015e4f:	75 2f                	jne    c0015e80 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e51:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e59:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e5f:	09 f2                	or     edx,esi
c0015e61:	89 15 60 dd 02 c0    	mov    DWORD PTR ds:0xc002dd60,edx
c0015e67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e6b:	09 fa                	or     edx,edi
c0015e6d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015e71:	89 15 64 dd 02 c0    	mov    DWORD PTR ds:0xc002dd64,edx
c0015e77:	89 1c bd 80 dd 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2280],ebx
c0015e7e:	eb 08                	jmp    c0015e88 <LogicalDisk::assignDriveLetter()+0xae>
c0015e80:	45                   	inc    ebp
c0015e81:	40                   	inc    eax
c0015e82:	3c 5b                	cmp    al,0x5b
c0015e84:	75 90                	jne    c0015e16 <LogicalDisk::assignDriveLetter()+0x3c>
c0015e86:	31 c0                	xor    eax,eax
c0015e88:	83 c4 14             	add    esp,0x14
c0015e8b:	5b                   	pop    ebx
c0015e8c:	5e                   	pop    esi
c0015e8d:	5f                   	pop    edi
c0015e8e:	5d                   	pop    ebp
c0015e8f:	c3                   	ret    

c0015e90 <LogicalDisk::mount()>:
c0015e90:	56                   	push   esi
c0015e91:	53                   	push   ebx
c0015e92:	53                   	push   ebx
c0015e93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e97:	8b 1d f4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f4
c0015e9d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015ea7:	85 db                	test   ebx,ebx
c0015ea9:	74 27                	je     c0015ed2 <LogicalDisk::mount()+0x42>
c0015eab:	51                   	push   ecx
c0015eac:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015eb3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015eb5:	83 e8 41             	sub    eax,0x41
c0015eb8:	50                   	push   eax
c0015eb9:	56                   	push   esi
c0015eba:	53                   	push   ebx
c0015ebb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ebe:	83 c4 10             	add    esp,0x10
c0015ec1:	84 c0                	test   al,al
c0015ec3:	74 08                	je     c0015ecd <LogicalDisk::mount()+0x3d>
c0015ec5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015ecb:	eb 07                	jmp    c0015ed4 <LogicalDisk::mount()+0x44>
c0015ecd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ed0:	eb d5                	jmp    c0015ea7 <LogicalDisk::mount()+0x17>
c0015ed2:	31 c0                	xor    eax,eax
c0015ed4:	5a                   	pop    edx
c0015ed5:	5b                   	pop    ebx
c0015ed6:	5e                   	pop    esi
c0015ed7:	c3                   	ret    

c0015ed8 <LogicalDisk::unmount()>:
c0015ed8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015edc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015ee6:	c3                   	ret    
c0015ee7:	90                   	nop

c0015ee8 <LogicalDisk::eject()>:
c0015ee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015ef2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ef4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ef8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015efb:	90                   	nop

c0015efc <LogicalDisk::unassignDriveLetter()>:
c0015efc:	57                   	push   edi
c0015efd:	56                   	push   esi
c0015efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f02:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015f09:	84 c9                	test   cl,cl
c0015f0b:	75 0f                	jne    c0015f1c <LogicalDisk::unassignDriveLetter()+0x20>
c0015f0d:	c7 44 24 0c 6c ad 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ad6c
c0015f15:	5e                   	pop    esi
c0015f16:	5f                   	pop    edi
c0015f17:	e9 4d 3e 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c0015f1c:	83 e9 41             	sub    ecx,0x41
c0015f1f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f26:	b8 01 00 00 00       	mov    eax,0x1
c0015f2b:	c7 04 8d 80 dd 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2280],0x0
c0015f36:	d3 e0                	shl    eax,cl
c0015f38:	89 c7                	mov    edi,eax
c0015f3a:	f7 d0                	not    eax
c0015f3c:	c1 ff 1f             	sar    edi,0x1f
c0015f3f:	21 05 60 dd 02 c0    	and    DWORD PTR ds:0xc002dd60,eax
c0015f45:	89 fe                	mov    esi,edi
c0015f47:	f7 d6                	not    esi
c0015f49:	21 35 64 dd 02 c0    	and    DWORD PTR ds:0xc002dd64,esi
c0015f4f:	5e                   	pop    esi
c0015f50:	5f                   	pop    edi
c0015f51:	c3                   	ret    

c0015f52 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f52:	57                   	push   edi
c0015f53:	56                   	push   esi
c0015f54:	53                   	push   ebx
c0015f55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015f59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f5d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f65:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f6b:	77 41                	ja     c0015fae <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015f6d:	99                   	cdq    
c0015f6e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f74:	01 c8                	add    eax,ecx
c0015f76:	11 da                	adc    edx,ebx
c0015f78:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f7e:	19 d7                	sbb    edi,edx
c0015f80:	72 33                	jb     c0015fb5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015f82:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f88:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f92:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f96:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f9c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fa2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fa6:	5b                   	pop    ebx
c0015fa7:	5e                   	pop    esi
c0015fa8:	5f                   	pop    edi
c0015fa9:	e9 cc 0a 00 00       	jmp    c0016a7a <VCache::read(unsigned long long, int, void*)>
c0015fae:	b8 05 00 00 00       	mov    eax,0x5
c0015fb3:	eb 05                	jmp    c0015fba <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015fb5:	b8 07 00 00 00       	mov    eax,0x7
c0015fba:	5b                   	pop    ebx
c0015fbb:	5e                   	pop    esi
c0015fbc:	5f                   	pop    edi
c0015fbd:	c3                   	ret    

c0015fbe <LogicalDisk::write(unsigned long long, int, void*)>:
c0015fbe:	57                   	push   edi
c0015fbf:	56                   	push   esi
c0015fc0:	53                   	push   ebx
c0015fc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fc9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fd1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fd7:	77 41                	ja     c001601a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015fd9:	99                   	cdq    
c0015fda:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fe0:	01 c8                	add    eax,ecx
c0015fe2:	11 da                	adc    edx,ebx
c0015fe4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fea:	19 d7                	sbb    edi,edx
c0015fec:	72 33                	jb     c0016021 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015fee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ff4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ffa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ffe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016002:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016008:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001600e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016012:	5b                   	pop    ebx
c0016013:	5e                   	pop    esi
c0016014:	5f                   	pop    edi
c0016015:	e9 76 09 00 00       	jmp    c0016990 <VCache::write(unsigned long long, int, void*)>
c001601a:	b8 05 00 00 00       	mov    eax,0x5
c001601f:	eb 05                	jmp    c0016026 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016021:	b8 07 00 00 00       	mov    eax,0x7
c0016026:	5b                   	pop    ebx
c0016027:	5e                   	pop    esi
c0016028:	5f                   	pop    edi
c0016029:	c3                   	ret    

c001602a <Mouse::Mouse(char const*)>:
c001602a:	83 ec 0c             	sub    esp,0xc
c001602d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016031:	83 ec 08             	sub    esp,0x8
c0016034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016038:	50                   	push   eax
c0016039:	e8 fc db ff ff       	call   c0013c3a <Device::Device(char const*)>
c001603e:	83 c4 10             	add    esp,0x10
c0016041:	ba c0 ad 02 c0       	mov    edx,0xc002adc0
c0016046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604a:	89 10                	mov    DWORD PTR [eax],edx
c001604c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016050:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001605a:	90                   	nop
c001605b:	83 c4 0c             	add    esp,0xc
c001605e:	c3                   	ret    
c001605f:	90                   	nop

c0016060 <Mouse::~Mouse()>:
c0016060:	83 ec 0c             	sub    esp,0xc
c0016063:	ba c0 ad 02 c0       	mov    edx,0xc002adc0
c0016068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001606c:	89 10                	mov    DWORD PTR [eax],edx
c001606e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016072:	83 ec 0c             	sub    esp,0xc
c0016075:	50                   	push   eax
c0016076:	e8 89 d8 ff ff       	call   c0013904 <Device::~Device()>
c001607b:	83 c4 10             	add    esp,0x10
c001607e:	90                   	nop
c001607f:	83 c4 0c             	add    esp,0xc
c0016082:	c3                   	ret    
c0016083:	90                   	nop

c0016084 <Mouse::~Mouse()>:
c0016084:	83 ec 0c             	sub    esp,0xc
c0016087:	83 ec 0c             	sub    esp,0xc
c001608a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001608e:	e8 cd ff ff ff       	call   c0016060 <Mouse::~Mouse()>
c0016093:	83 c4 10             	add    esp,0x10
c0016096:	83 ec 08             	sub    esp,0x8
c0016099:	68 58 01 00 00       	push   0x158
c001609e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160a2:	e8 7e c4 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c00160a7:	83 c4 10             	add    esp,0x10
c00160aa:	83 c4 0c             	add    esp,0xc
c00160ad:	c3                   	ret    

c00160ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160ae:	55                   	push   ebp
c00160af:	57                   	push   edi
c00160b0:	56                   	push   esi
c00160b1:	53                   	push   ebx
c00160b2:	81 ec 28 01 00 00    	sub    esp,0x128
c00160b8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00160bf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00160c6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00160cd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00160d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00160d8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00160dc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00160e3:	e8 4e dc ff ff       	call   c0013d36 <Device::getName()>
c00160e8:	5a                   	pop    edx
c00160e9:	59                   	pop    ecx
c00160ea:	50                   	push   eax
c00160eb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00160ef:	55                   	push   ebp
c00160f0:	e8 17 a7 fe ff       	call   c000080c <strcpy>
c00160f5:	5b                   	pop    ebx
c00160f6:	58                   	pop    eax
c00160f7:	68 e4 ad 02 c0       	push   0xc002ade4
c00160fc:	55                   	push   ebp
c00160fd:	e8 4a a8 fe ff       	call   c000094c <strcat>
c0016102:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016109:	e8 8e 94 ff ff       	call   c000f59c <malloc>
c001610e:	83 c4 0c             	add    esp,0xc
c0016111:	89 c3                	mov    ebx,eax
c0016113:	57                   	push   edi
c0016114:	56                   	push   esi
c0016115:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016119:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001611d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016124:	55                   	push   ebp
c0016125:	50                   	push   eax
c0016126:	e8 f9 fb ff ff       	call   c0015d24 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001612b:	83 c4 14             	add    esp,0x14
c001612e:	53                   	push   ebx
c001612f:	e8 a6 fc ff ff       	call   c0015dda <LogicalDisk::assignDriveLetter()>
c0016134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016137:	e8 54 fd ff ff       	call   c0015e90 <LogicalDisk::mount()>
c001613c:	58                   	pop    eax
c001613d:	5a                   	pop    edx
c001613e:	53                   	push   ebx
c001613f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016146:	e8 eb d8 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c001614b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016151:	5b                   	pop    ebx
c0016152:	5e                   	pop    esi
c0016153:	5f                   	pop    edi
c0016154:	5d                   	pop    ebp
c0016155:	c3                   	ret    

c0016156 <createPartitionsForDisk(PhysicalDisk*)>:
c0016156:	55                   	push   ebp
c0016157:	57                   	push   edi
c0016158:	56                   	push   esi
c0016159:	53                   	push   ebx
c001615a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016160:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016167:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001616d:	3d 00 02 00 00       	cmp    eax,0x200
c0016172:	74 27                	je     c001619b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016174:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001617a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016180:	83 ec 10             	sub    esp,0x10
c0016183:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016187:	99                   	cdq    
c0016188:	c1 e6 0a             	shl    esi,0xa
c001618b:	52                   	push   edx
c001618c:	89 fd                	mov    ebp,edi
c001618e:	50                   	push   eax
c001618f:	55                   	push   ebp
c0016190:	56                   	push   esi
c0016191:	e8 ae 04 01 00       	call   c0026644 <__udivdi3>
c0016196:	e9 b1 00 00 00       	jmp    c001624c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001619b:	83 ec 0c             	sub    esp,0xc
c001619e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161a0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00161a4:	56                   	push   esi
c00161a5:	6a 01                	push   0x1
c00161a7:	6a 00                	push   0x0
c00161a9:	6a 00                	push   0x0
c00161ab:	53                   	push   ebx
c00161ac:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00161af:	83 c4 20             	add    esp,0x20
c00161b2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00161ba:	75 0a                	jne    c00161c6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00161bc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00161c4:	74 2c                	je     c00161f2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00161c6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00161cc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00161d2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00161d8:	83 ec 10             	sub    esp,0x10
c00161db:	0f a4 c2 0a          	shld   edx,eax,0xa
c00161df:	89 f7                	mov    edi,esi
c00161e1:	c1 e0 0a             	shl    eax,0xa
c00161e4:	c1 ff 1f             	sar    edi,0x1f
c00161e7:	57                   	push   edi
c00161e8:	56                   	push   esi
c00161e9:	52                   	push   edx
c00161ea:	50                   	push   eax
c00161eb:	e8 54 04 01 00       	call   c0026644 <__udivdi3>
c00161f0:	eb 5a                	jmp    c001624c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161f2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00161f9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016200:	83 e1 7f             	and    ecx,0x7f
c0016203:	83 e0 7f             	and    eax,0x7f
c0016206:	01 c1                	add    ecx,eax
c0016208:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001620f:	83 e0 7f             	and    eax,0x7f
c0016212:	01 c1                	add    ecx,eax
c0016214:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001621b:	83 e0 7f             	and    eax,0x7f
c001621e:	00 c1                	add    cl,al
c0016220:	74 41                	je     c0016263 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016222:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016228:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001622e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016234:	83 ec 10             	sub    esp,0x10
c0016237:	0f a4 c2 0a          	shld   edx,eax,0xa
c001623b:	89 f7                	mov    edi,esi
c001623d:	c1 e0 0a             	shl    eax,0xa
c0016240:	c1 ff 1f             	sar    edi,0x1f
c0016243:	57                   	push   edi
c0016244:	56                   	push   esi
c0016245:	52                   	push   edx
c0016246:	50                   	push   eax
c0016247:	e8 f8 03 01 00       	call   c0026644 <__udivdi3>
c001624c:	83 c4 14             	add    esp,0x14
c001624f:	52                   	push   edx
c0016250:	50                   	push   eax
c0016251:	6a 00                	push   0x0
c0016253:	6a 00                	push   0x0
c0016255:	53                   	push   ebx
c0016256:	e8 53 fe ff ff       	call   c00160ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001625b:	83 c4 20             	add    esp,0x20
c001625e:	e9 79 01 00 00       	jmp    c00163dc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016263:	89 f0                	mov    eax,esi
c0016265:	31 f6                	xor    esi,esi
c0016267:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001626e:	75 02                	jne    c0016272 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016270:	89 f1                	mov    ecx,esi
c0016272:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016279:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016280:	c1 e2 08             	shl    edx,0x8
c0016283:	c1 e7 10             	shl    edi,0x10
c0016286:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001628e:	09 fa                	or     edx,edi
c0016290:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016298:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001629f:	83 c0 10             	add    eax,0x10
c00162a2:	09 fa                	or     edx,edi
c00162a4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00162ab:	c1 e7 18             	shl    edi,0x18
c00162ae:	09 fa                	or     edx,edi
c00162b0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00162b7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00162bb:	c1 e7 10             	shl    edi,0x10
c00162be:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00162c5:	c1 e2 08             	shl    edx,0x8
c00162c8:	09 fa                	or     edx,edi
c00162ca:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00162d1:	09 fa                	or     edx,edi
c00162d3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00162da:	c1 e7 18             	shl    edi,0x18
c00162dd:	09 fa                	or     edx,edi
c00162df:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00162e3:	46                   	inc    esi
c00162e4:	83 fe 04             	cmp    esi,0x4
c00162e7:	0f 85 7a ff ff ff    	jne    c0016267 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00162ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f1:	83 f0 01             	xor    eax,0x1
c00162f4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00162f8:	75 57                	jne    c0016351 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00162fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162fe:	83 f0 01             	xor    eax,0x1
c0016301:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016305:	75 4a                	jne    c0016351 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016307:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001630b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016313:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001631b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016321:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016327:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001632d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016331:	89 f7                	mov    edi,esi
c0016333:	c1 e0 0a             	shl    eax,0xa
c0016336:	c1 ff 1f             	sar    edi,0x1f
c0016339:	57                   	push   edi
c001633a:	56                   	push   esi
c001633b:	52                   	push   edx
c001633c:	50                   	push   eax
c001633d:	e8 02 03 01 00       	call   c0026644 <__udivdi3>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016349:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001634d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016351:	84 c9                	test   cl,cl
c0016353:	74 53                	je     c00163a8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016355:	0f b6 c9             	movzx  ecx,cl
c0016358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016360:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016364:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016368:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001636c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016370:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016374:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016378:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001637c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016388:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001638c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016390:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016394:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016398:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001639c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163a0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00163a4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00163a8:	31 ed                	xor    ebp,ebp
c00163aa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00163ae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00163b2:	89 f8                	mov    eax,edi
c00163b4:	09 f0                	or     eax,esi
c00163b6:	74 1e                	je     c00163d6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00163b8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00163bc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00163c0:	89 d1                	mov    ecx,edx
c00163c2:	09 c1                	or     ecx,eax
c00163c4:	74 10                	je     c00163d6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00163c6:	83 ec 0c             	sub    esp,0xc
c00163c9:	57                   	push   edi
c00163ca:	56                   	push   esi
c00163cb:	52                   	push   edx
c00163cc:	50                   	push   eax
c00163cd:	53                   	push   ebx
c00163ce:	e8 db fc ff ff       	call   c00160ae <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163d3:	83 c4 20             	add    esp,0x20
c00163d6:	45                   	inc    ebp
c00163d7:	83 fd 04             	cmp    ebp,0x4
c00163da:	75 ce                	jne    c00163aa <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00163dc:	81 c4 5c 02 00 00    	add    esp,0x25c
c00163e2:	5b                   	pop    ebx
c00163e3:	5e                   	pop    esi
c00163e4:	5f                   	pop    edi
c00163e5:	5d                   	pop    ebp
c00163e6:	c3                   	ret    
c00163e7:	90                   	nop

c00163e8 <Serial::Serial(char const*)>:
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ef:	83 ec 08             	sub    esp,0x8
c00163f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163f6:	50                   	push   eax
c00163f7:	e8 3e d8 ff ff       	call   c0013c3a <Device::Device(char const*)>
c00163fc:	83 c4 10             	add    esp,0x10
c00163ff:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0016404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016408:	89 10                	mov    DWORD PTR [eax],edx
c001640a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001640e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016418:	90                   	nop
c0016419:	83 c4 0c             	add    esp,0xc
c001641c:	c3                   	ret    
c001641d:	90                   	nop

c001641e <Serial::~Serial()>:
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	ba f8 ad 02 c0       	mov    edx,0xc002adf8
c0016426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001642a:	89 10                	mov    DWORD PTR [eax],edx
c001642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	50                   	push   eax
c0016434:	e8 cb d4 ff ff       	call   c0013904 <Device::~Device()>
c0016439:	83 c4 10             	add    esp,0x10
c001643c:	90                   	nop
c001643d:	83 c4 0c             	add    esp,0xc
c0016440:	c3                   	ret    
c0016441:	90                   	nop

c0016442 <Serial::~Serial()>:
c0016442:	83 ec 0c             	sub    esp,0xc
c0016445:	83 ec 0c             	sub    esp,0xc
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	e8 cd ff ff ff       	call   c001641e <Serial::~Serial()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	83 ec 08             	sub    esp,0x8
c0016457:	68 58 01 00 00       	push   0x158
c001645c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016460:	e8 c0 c0 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	83 c4 0c             	add    esp,0xc
c001646b:	c3                   	ret    

c001646c <Timer::Timer(char const*)>:
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016473:	83 ec 08             	sub    esp,0x8
c0016476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647a:	50                   	push   eax
c001647b:	e8 ba d7 ff ff       	call   c0013c3a <Device::Device(char const*)>
c0016480:	83 c4 10             	add    esp,0x10
c0016483:	ba 3c ae 02 c0       	mov    edx,0xc002ae3c
c0016488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648c:	89 10                	mov    DWORD PTR [eax],edx
c001648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016492:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001649c:	90                   	nop
c001649d:	83 c4 0c             	add    esp,0xc
c00164a0:	c3                   	ret    
c00164a1:	90                   	nop

c00164a2 <Timer::~Timer()>:
c00164a2:	83 ec 0c             	sub    esp,0xc
c00164a5:	ba 3c ae 02 c0       	mov    edx,0xc002ae3c
c00164aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ae:	89 10                	mov    DWORD PTR [eax],edx
c00164b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	50                   	push   eax
c00164b8:	e8 47 d4 ff ff       	call   c0013904 <Device::~Device()>
c00164bd:	83 c4 10             	add    esp,0x10
c00164c0:	90                   	nop
c00164c1:	83 c4 0c             	add    esp,0xc
c00164c4:	c3                   	ret    
c00164c5:	90                   	nop

c00164c6 <Timer::~Timer()>:
c00164c6:	83 ec 0c             	sub    esp,0xc
c00164c9:	83 ec 0c             	sub    esp,0xc
c00164cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d0:	e8 cd ff ff ff       	call   c00164a2 <Timer::~Timer()>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	83 ec 08             	sub    esp,0x8
c00164db:	68 5c 01 00 00       	push   0x15c
c00164e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e4:	e8 3c c0 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c00164e9:	83 c4 10             	add    esp,0x10
c00164ec:	83 c4 0c             	add    esp,0xc
c00164ef:	c3                   	ret    

c00164f0 <Timer::read()>:
c00164f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00164fa:	c3                   	ret    

c00164fb <timerHandler(unsigned long long)>:
c00164fb:	55                   	push   ebp
c00164fc:	57                   	push   edi
c00164fd:	56                   	push   esi
c00164fe:	53                   	push   ebx
c00164ff:	83 ec 0c             	sub    esp,0xc
c0016502:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016506:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001650a:	01 35 f0 dd 02 c0    	add    DWORD PTR ds:0xc002ddf0,esi
c0016510:	11 3d f4 dd 02 c0    	adc    DWORD PTR ds:0xc002ddf4,edi
c0016516:	80 3d 8d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d78d,0x0
c001651d:	0f 84 42 01 00 00    	je     c0016665 <timerHandler(unsigned long long)+0x16a>
c0016523:	fa                   	cli    
c0016524:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001652a:	83 ec 0c             	sub    esp,0xc
c001652d:	ff 05 a4 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca4
c0016533:	68 b8 0c 03 c0       	push   0xc0030cb8
c0016538:	e8 61 21 01 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001653d:	83 c4 10             	add    esp,0x10
c0016540:	84 c0                	test   al,al
c0016542:	0f 85 a2 00 00 00    	jne    c00165ea <timerHandler(unsigned long long)+0xef>
c0016548:	83 ec 0c             	sub    esp,0xc
c001654b:	68 b8 0c 03 c0       	push   0xc0030cb8
c0016550:	e8 65 21 01 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016555:	83 c4 10             	add    esp,0x10
c0016558:	89 c3                	mov    ebx,eax
c001655a:	83 ec 0c             	sub    esp,0xc
c001655d:	68 b8 0c 03 c0       	push   0xc0030cb8
c0016562:	e8 53 21 01 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016567:	c7 04 24 b8 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cb8
c001656e:	89 c5                	mov    ebp,eax
c0016570:	e8 4d 21 01 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016575:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016578:	83 c4 10             	add    esp,0x10
c001657b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001657e:	39 15 f0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddf0,edx
c0016584:	a1 f4 dd 02 c0       	mov    eax,ds:0xc002ddf4
c0016589:	19 c8                	sbb    eax,ecx
c001658b:	72 21                	jb     c00165ae <timerHandler(unsigned long long)+0xb3>
c001658d:	83 ec 0c             	sub    esp,0xc
c0016590:	55                   	push   ebp
c0016591:	e8 e2 77 00 00       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c0016596:	83 c4 10             	add    esp,0x10
c0016599:	39 eb                	cmp    ebx,ebp
c001659b:	75 21                	jne    c00165be <timerHandler(unsigned long long)+0xc3>
c001659d:	83 ec 0c             	sub    esp,0xc
c00165a0:	68 b8 0c 03 c0       	push   0xc0030cb8
c00165a5:	e8 10 21 01 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165aa:	89 c3                	mov    ebx,eax
c00165ac:	eb 0d                	jmp    c00165bb <timerHandler(unsigned long long)+0xc0>
c00165ae:	50                   	push   eax
c00165af:	50                   	push   eax
c00165b0:	55                   	push   ebp
c00165b1:	68 b8 0c 03 c0       	push   0xc0030cb8
c00165b6:	e8 b5 21 01 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165bb:	83 c4 10             	add    esp,0x10
c00165be:	83 ec 0c             	sub    esp,0xc
c00165c1:	68 b8 0c 03 c0       	push   0xc0030cb8
c00165c6:	e8 d3 20 01 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	84 c0                	test   al,al
c00165d0:	75 18                	jne    c00165ea <timerHandler(unsigned long long)+0xef>
c00165d2:	83 ec 0c             	sub    esp,0xc
c00165d5:	68 b8 0c 03 c0       	push   0xc0030cb8
c00165da:	e8 db 20 01 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	39 d8                	cmp    eax,ebx
c00165e4:	0f 85 70 ff ff ff    	jne    c001655a <timerHandler(unsigned long long)+0x5f>
c00165ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165ef:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00165f3:	74 3d                	je     c0016632 <timerHandler(unsigned long long)+0x137>
c00165f5:	80 3d 8c d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d78c,0x0
c00165fc:	74 34                	je     c0016632 <timerHandler(unsigned long long)+0x137>
c00165fe:	fa                   	cli    
c00165ff:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c0016605:	31 d2                	xor    edx,edx
c0016607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001660c:	89 f9                	mov    ecx,edi
c001660e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016616:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016619:	39 c6                	cmp    esi,eax
c001661b:	19 d1                	sbb    ecx,edx
c001661d:	72 05                	jb     c0016624 <timerHandler(unsigned long long)+0x129>
c001661f:	e8 d1 72 00 00       	call   c001d8f5 <schedule()>
c0016624:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0016629:	48                   	dec    eax
c001662a:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001662f:	75 01                	jne    c0016632 <timerHandler(unsigned long long)+0x137>
c0016631:	fb                   	sti    
c0016632:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c0016637:	48                   	dec    eax
c0016638:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001663d:	75 18                	jne    c0016657 <timerHandler(unsigned long long)+0x15c>
c001663f:	83 3d a0 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030ca0,0x0
c0016646:	74 0f                	je     c0016657 <timerHandler(unsigned long long)+0x15c>
c0016648:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c0016652:	e8 9e 72 00 00       	call   c001d8f5 <schedule()>
c0016657:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001665c:	48                   	dec    eax
c001665d:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c0016662:	75 01                	jne    c0016665 <timerHandler(unsigned long long)+0x16a>
c0016664:	fb                   	sti    
c0016665:	83 c4 0c             	add    esp,0xc
c0016668:	5b                   	pop    ebx
c0016669:	5e                   	pop    esi
c001666a:	5f                   	pop    edi
c001666b:	5d                   	pop    ebp
c001666c:	c3                   	ret    

c001666d <setupTimer(int)>:
c001666d:	57                   	push   edi
c001666e:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0016673:	56                   	push   esi
c0016674:	53                   	push   ebx
c0016675:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016679:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001667f:	83 ec 0c             	sub    esp,0xc
c0016682:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016688:	e8 a9 d6 ff ff       	call   c0013d36 <Device::getName()>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016693:	0f 85 8d 00 00 00    	jne    c0016726 <setupTimer(int)+0xb9>
c0016699:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001669e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00166a5:	74 7f                	je     c0016726 <setupTimer(int)+0xb9>
c00166a7:	83 ec 0c             	sub    esp,0xc
c00166aa:	68 5c 01 00 00       	push   0x15c
c00166af:	e8 e8 8e ff ff       	call   c000f59c <malloc>
c00166b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00166b7:	89 c3                	mov    ebx,eax
c00166b9:	e8 56 fb 00 00       	call   c0026214 <PIT::PIT()>
c00166be:	59                   	pop    ecx
c00166bf:	5f                   	pop    edi
c00166c0:	53                   	push   ebx
c00166c1:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c00166c7:	e8 6a d3 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c00166cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166ce:	6a 00                	push   0x0
c00166d0:	6a 00                	push   0x0
c00166d2:	56                   	push   esi
c00166d3:	53                   	push   ebx
c00166d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166d7:	83 c4 14             	add    esp,0x14
c00166da:	68 60 01 00 00       	push   0x160
c00166df:	e8 b8 8e ff ff       	call   c000f59c <malloc>
c00166e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00166e7:	89 c7                	mov    edi,eax
c00166e9:	e8 d6 f9 00 00       	call   c00260c4 <APICTimer::APICTimer()>
c00166ee:	6a 00                	push   0x0
c00166f0:	6a 00                	push   0x0
c00166f2:	56                   	push   esi
c00166f3:	57                   	push   edi
c00166f4:	e8 cd f8 00 00       	call   c0025fc6 <APICTimer::open(int, int, void*)>
c00166f9:	83 c4 20             	add    esp,0x20
c00166fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166fe:	6a 00                	push   0x0
c0016700:	6a 00                	push   0x0
c0016702:	6a 00                	push   0x0
c0016704:	53                   	push   ebx
c0016705:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016708:	58                   	pop    eax
c0016709:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001670e:	5a                   	pop    edx
c001670f:	57                   	push   edi
c0016710:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016716:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001671c:	e8 15 d3 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	eb 33                	jmp    c0016759 <setupTimer(int)+0xec>
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	68 5c 01 00 00       	push   0x15c
c001672e:	e8 69 8e ff ff       	call   c000f59c <malloc>
c0016733:	89 04 24             	mov    DWORD PTR [esp],eax
c0016736:	89 c3                	mov    ebx,eax
c0016738:	e8 d7 fa 00 00       	call   c0026214 <PIT::PIT()>
c001673d:	58                   	pop    eax
c001673e:	5a                   	pop    edx
c001673f:	53                   	push   ebx
c0016740:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c0016746:	e8 eb d2 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c001674b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001674d:	6a 00                	push   0x0
c001674f:	6a 00                	push   0x0
c0016751:	56                   	push   esi
c0016752:	53                   	push   ebx
c0016753:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016756:	83 c4 20             	add    esp,0x20
c0016759:	89 d8                	mov    eax,ebx
c001675b:	5b                   	pop    ebx
c001675c:	5e                   	pop    esi
c001675d:	5f                   	pop    edi
c001675e:	c3                   	ret    
c001675f:	90                   	nop

c0016760 <VCache::VCache(PhysicalDisk*)>:
c0016760:	53                   	push   ebx
c0016761:	83 ec 18             	sub    esp,0x18
c0016764:	ba 6c ae 02 c0       	mov    edx,0xc002ae6c
c0016769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001676d:	89 10                	mov    DWORD PTR [eax],edx
c001676f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016773:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001677a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016789:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016790:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001679b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00167a2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00167a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ad:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00167b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00167c7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00167ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00167d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167da:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00167de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00167e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167ea:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00167f1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167f9:	83 ec 0c             	sub    esp,0xc
c00167fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016800:	e8 97 8d ff ff       	call   c000f59c <malloc>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	89 c3                	mov    ebx,eax
c001680a:	83 ec 0c             	sub    esp,0xc
c001680d:	53                   	push   ebx
c001680e:	e8 ab 6e 00 00       	call   c001d6be <Mutex::Mutex()>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001681a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001681d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016821:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016825:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001682c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016833:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016837:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001683d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016841:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016844:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016848:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001684e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016854:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016858:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001685b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001685e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016862:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016866:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001686a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016870:	05 00 01 00 00       	add    eax,0x100
c0016875:	c1 e0 04             	shl    eax,0x4
c0016878:	83 ec 0c             	sub    esp,0xc
c001687b:	50                   	push   eax
c001687c:	e8 1b 8d ff ff       	call   c000f59c <malloc>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	89 c2                	mov    edx,eax
c0016886:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001688d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016891:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001689c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00168a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00168aa:	c1 e0 07             	shl    eax,0x7
c00168ad:	83 ec 0c             	sub    esp,0xc
c00168b0:	50                   	push   eax
c00168b1:	e8 e6 8c ff ff       	call   c000f59c <malloc>
c00168b6:	83 c4 10             	add    esp,0x10
c00168b9:	89 c2                	mov    edx,eax
c00168bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168bf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00168c2:	90                   	nop
c00168c3:	83 c4 18             	add    esp,0x18
c00168c6:	5b                   	pop    ebx
c00168c7:	c3                   	ret    

c00168c8 <VCache::invalidateReadBuffer()>:
c00168c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00168cc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00168d2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00168d6:	c3                   	ret    
c00168d7:	90                   	nop

c00168d8 <VCache::writeWriteBuffer()>:
c00168d8:	53                   	push   ebx
c00168d9:	83 ec 14             	sub    esp,0x14
c00168dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00168e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00168e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00168ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00168f1:	50                   	push   eax
c00168f2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00168f5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00168fc:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016903:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016907:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001690e:	83 c4 28             	add    esp,0x28
c0016911:	5b                   	pop    ebx
c0016912:	c3                   	ret    
c0016913:	90                   	nop

c0016914 <VCache::~VCache()>:
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	ba 6c ae 02 c0       	mov    edx,0xc002ae6c
c001691c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016920:	89 10                	mov    DWORD PTR [eax],edx
c0016922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016926:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016929:	84 c0                	test   al,al
c001692b:	74 0f                	je     c001693c <VCache::~VCache()+0x28>
c001692d:	83 ec 0c             	sub    esp,0xc
c0016930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016934:	e8 9f ff ff ff       	call   c00168d8 <VCache::writeWriteBuffer()>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016940:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016943:	83 ec 0c             	sub    esp,0xc
c0016946:	50                   	push   eax
c0016947:	e8 60 8c ff ff       	call   c000f5ac <free>
c001694c:	83 c4 10             	add    esp,0x10
c001694f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016953:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016956:	83 ec 0c             	sub    esp,0xc
c0016959:	50                   	push   eax
c001695a:	e8 4d 8c ff ff       	call   c000f5ac <free>
c001695f:	83 c4 10             	add    esp,0x10
c0016962:	90                   	nop
c0016963:	83 c4 0c             	add    esp,0xc
c0016966:	c3                   	ret    
c0016967:	90                   	nop

c0016968 <VCache::~VCache()>:
c0016968:	83 ec 0c             	sub    esp,0xc
c001696b:	83 ec 0c             	sub    esp,0xc
c001696e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016972:	e8 9d ff ff ff       	call   c0016914 <VCache::~VCache()>
c0016977:	83 c4 10             	add    esp,0x10
c001697a:	83 ec 08             	sub    esp,0x8
c001697d:	6a 44                	push   0x44
c001697f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016983:	e8 9d bb ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0016988:	83 c4 10             	add    esp,0x10
c001698b:	83 c4 0c             	add    esp,0xc
c001698e:	c3                   	ret    
c001698f:	90                   	nop

c0016990 <VCache::write(unsigned long long, int, void*)>:
c0016990:	55                   	push   ebp
c0016991:	57                   	push   edi
c0016992:	56                   	push   esi
c0016993:	53                   	push   ebx
c0016994:	83 ec 18             	sub    esp,0x18
c0016997:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001699b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001699f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00169a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169a6:	e8 59 72 00 00       	call   c001dc04 <Semaphore::acquire()>
c00169ab:	83 c4 10             	add    esp,0x10
c00169ae:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00169b2:	74 0c                	je     c00169c0 <VCache::write(unsigned long long, int, void*)+0x30>
c00169b4:	83 ec 0c             	sub    esp,0xc
c00169b7:	53                   	push   ebx
c00169b8:	e8 0b ff ff ff       	call   c00168c8 <VCache::invalidateReadBuffer()>
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00169c4:	74 5c                	je     c0016a22 <VCache::write(unsigned long long, int, void*)+0x92>
c00169c6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00169c9:	89 e8                	mov    eax,ebp
c00169cb:	99                   	cdq    
c00169cc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00169cf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00169d2:	89 c1                	mov    ecx,eax
c00169d4:	89 d0                	mov    eax,edx
c00169d6:	31 f1                	xor    ecx,esi
c00169d8:	31 f8                	xor    eax,edi
c00169da:	09 c1                	or     ecx,eax
c00169dc:	75 38                	jne    c0016a16 <VCache::write(unsigned long long, int, void*)+0x86>
c00169de:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00169e3:	75 31                	jne    c0016a16 <VCache::write(unsigned long long, int, void*)+0x86>
c00169e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169e8:	89 ef                	mov    edi,ebp
c00169ea:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00169f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169f4:	0f af f9             	imul   edi,ecx
c00169f7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00169fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169ff:	40                   	inc    eax
c0016a00:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016a03:	83 c0 80             	add    eax,0xffffff80
c0016a06:	75 5c                	jne    c0016a64 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	53                   	push   ebx
c0016a0c:	e8 c7 fe ff ff       	call   c00168d8 <VCache::writeWriteBuffer()>
c0016a11:	83 c4 10             	add    esp,0x10
c0016a14:	eb 4e                	jmp    c0016a64 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a16:	83 ec 0c             	sub    esp,0xc
c0016a19:	53                   	push   ebx
c0016a1a:	e8 b9 fe ff ff       	call   c00168d8 <VCache::writeWriteBuffer()>
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a25:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016a2a:	7f 22                	jg     c0016a4e <VCache::write(unsigned long long, int, void*)+0xbe>
c0016a2c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016a2f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016a32:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016a36:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a3a:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016a3d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016a40:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a46:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a4c:	eb 16                	jmp    c0016a64 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016a4e:	83 ec 0c             	sub    esp,0xc
c0016a51:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a53:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016a5b:	57                   	push   edi
c0016a5c:	56                   	push   esi
c0016a5d:	50                   	push   eax
c0016a5e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a61:	83 c4 20             	add    esp,0x20
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a6a:	e8 f1 77 00 00       	call   c001e260 <Semaphore::release()>
c0016a6f:	83 c4 1c             	add    esp,0x1c
c0016a72:	31 c0                	xor    eax,eax
c0016a74:	5b                   	pop    ebx
c0016a75:	5e                   	pop    esi
c0016a76:	5f                   	pop    edi
c0016a77:	5d                   	pop    ebp
c0016a78:	c3                   	ret    
c0016a79:	90                   	nop

c0016a7a <VCache::read(unsigned long long, int, void*)>:
c0016a7a:	55                   	push   ebp
c0016a7b:	57                   	push   edi
c0016a7c:	56                   	push   esi
c0016a7d:	53                   	push   ebx
c0016a7e:	83 ec 28             	sub    esp,0x28
c0016a81:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016a85:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016a89:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016a8d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016a91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a94:	e8 6b 71 00 00       	call   c001dc04 <Semaphore::acquire()>
c0016a99:	83 c4 10             	add    esp,0x10
c0016a9c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016aa0:	74 0c                	je     c0016aae <VCache::read(unsigned long long, int, void*)+0x34>
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	53                   	push   ebx
c0016aa6:	e8 2d fe ff ff       	call   c00168d8 <VCache::writeWriteBuffer()>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	83 fd 01             	cmp    ebp,0x1
c0016ab1:	0f 85 80 00 00 00    	jne    c0016b37 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016ab7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016aba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016abe:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ac5:	75 70                	jne    c0016b37 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016ac7:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016aca:	89 e9                	mov    ecx,ebp
c0016acc:	f7 d9                	neg    ecx
c0016ace:	89 c8                	mov    eax,ecx
c0016ad0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ad4:	c1 f8 1f             	sar    eax,0x1f
c0016ad7:	21 f1                	and    ecx,esi
c0016ad9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016add:	89 c8                	mov    eax,ecx
c0016adf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ae3:	21 f9                	and    ecx,edi
c0016ae5:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ae9:	89 ca                	mov    edx,ecx
c0016aeb:	74 0a                	je     c0016af7 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016aed:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016af0:	75 05                	jne    c0016af7 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016af2:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016af5:	74 23                	je     c0016b1a <VCache::read(unsigned long long, int, void*)+0xa0>
c0016af7:	83 ec 0c             	sub    esp,0xc
c0016afa:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016afe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016b02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016b05:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016b08:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016b0a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016b0d:	55                   	push   ebp
c0016b0e:	52                   	push   edx
c0016b0f:	50                   	push   eax
c0016b10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b14:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016b17:	83 c4 20             	add    esp,0x20
c0016b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b1d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b21:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b27:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b2a:	48                   	dec    eax
c0016b2b:	21 c6                	and    esi,eax
c0016b2d:	0f af f1             	imul   esi,ecx
c0016b30:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016b33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b35:	eb 1d                	jmp    c0016b54 <VCache::read(unsigned long long, int, void*)+0xda>
c0016b37:	83 ec 0c             	sub    esp,0xc
c0016b3a:	53                   	push   ebx
c0016b3b:	e8 88 fd ff ff       	call   c00168c8 <VCache::invalidateReadBuffer()>
c0016b40:	5a                   	pop    edx
c0016b41:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b4a:	55                   	push   ebp
c0016b4b:	57                   	push   edi
c0016b4c:	56                   	push   esi
c0016b4d:	50                   	push   eax
c0016b4e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016b51:	83 c4 20             	add    esp,0x20
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b5a:	e8 01 77 00 00       	call   c001e260 <Semaphore::release()>
c0016b5f:	83 c4 2c             	add    esp,0x2c
c0016b62:	31 c0                	xor    eax,eax
c0016b64:	5b                   	pop    ebx
c0016b65:	5e                   	pop    esi
c0016b66:	5f                   	pop    edi
c0016b67:	5d                   	pop    ebp
c0016b68:	c3                   	ret    
c0016b69:	90                   	nop

c0016b6a <Video::putrect(int, int, int, int, unsigned int)>:
c0016b6a:	55                   	push   ebp
c0016b6b:	57                   	push   edi
c0016b6c:	56                   	push   esi
c0016b6d:	53                   	push   ebx
c0016b6e:	83 ec 1c             	sub    esp,0x1c
c0016b71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016b75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b79:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016b7d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016b81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b89:	01 df                	add    edi,ebx
c0016b8b:	39 fb                	cmp    ebx,edi
c0016b8d:	7d 1f                	jge    c0016bae <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016b8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b93:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016b97:	7d 12                	jge    c0016bab <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016b99:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016b9f:	53                   	push   ebx
c0016ba0:	55                   	push   ebp
c0016ba1:	45                   	inc    ebp
c0016ba2:	56                   	push   esi
c0016ba3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ba6:	83 c4 10             	add    esp,0x10
c0016ba9:	eb e8                	jmp    c0016b93 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016bab:	43                   	inc    ebx
c0016bac:	eb dd                	jmp    c0016b8b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016bae:	83 c4 1c             	add    esp,0x1c
c0016bb1:	5b                   	pop    ebx
c0016bb2:	5e                   	pop    esi
c0016bb3:	5f                   	pop    edi
c0016bb4:	5d                   	pop    ebp
c0016bb5:	c3                   	ret    

c0016bb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016bb6:	55                   	push   ebp
c0016bb7:	57                   	push   edi
c0016bb8:	31 ff                	xor    edi,edi
c0016bba:	56                   	push   esi
c0016bbb:	53                   	push   ebx
c0016bbc:	83 ec 1c             	sub    esp,0x1c
c0016bbf:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016bc3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016bc7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016bce:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016bd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bd7:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016bdb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016bdf:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016be2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016be6:	01 f9                	add    ecx,edi
c0016be8:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016bec:	7d 2f                	jge    c0016c1d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016bee:	31 f6                	xor    esi,esi
c0016bf0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016bf4:	01 f2                	add    edx,esi
c0016bf6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016bfa:	7d 1a                	jge    c0016c16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016bfc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016bff:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016c02:	46                   	inc    esi
c0016c03:	51                   	push   ecx
c0016c04:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016c08:	52                   	push   edx
c0016c09:	55                   	push   ebp
c0016c0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c14:	eb da                	jmp    c0016bf0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016c16:	47                   	inc    edi
c0016c17:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016c1b:	eb c5                	jmp    c0016be2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016c1d:	83 c4 1c             	add    esp,0x1c
c0016c20:	5b                   	pop    ebx
c0016c21:	5e                   	pop    esi
c0016c22:	5f                   	pop    edi
c0016c23:	5d                   	pop    ebp
c0016c24:	c3                   	ret    
c0016c25:	90                   	nop

c0016c26 <Video::blit(unsigned int*, int, int, int, int)>:
c0016c26:	55                   	push   ebp
c0016c27:	57                   	push   edi
c0016c28:	56                   	push   esi
c0016c29:	53                   	push   ebx
c0016c2a:	83 ec 1c             	sub    esp,0x1c
c0016c2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c35:	85 c0                	test   eax,eax
c0016c37:	79 02                	jns    c0016c3b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016c39:	31 c0                	xor    eax,eax
c0016c3b:	c1 e0 02             	shl    eax,0x2
c0016c3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c46:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016c4a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016c4e:	39 d8                	cmp    eax,ebx
c0016c50:	7e 49                	jle    c0016c9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c52:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016c58:	7c 41                	jl     c0016c9b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016c5a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016c5e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c62:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c66:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016c6a:	39 f9                	cmp    ecx,edi
c0016c6c:	7e 22                	jle    c0016c90 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016c6e:	83 c5 04             	add    ebp,0x4
c0016c71:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016c77:	7c 14                	jl     c0016c8d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016c79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016c7b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016c7e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c82:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c86:	56                   	push   esi
c0016c87:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	47                   	inc    edi
c0016c8e:	eb d2                	jmp    c0016c62 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c94:	43                   	inc    ebx
c0016c95:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016c99:	eb ab                	jmp    c0016c46 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016c9b:	83 c4 1c             	add    esp,0x1c
c0016c9e:	5b                   	pop    ebx
c0016c9f:	5e                   	pop    esi
c0016ca0:	5f                   	pop    edi
c0016ca1:	5d                   	pop    ebp
c0016ca2:	c3                   	ret    
c0016ca3:	90                   	nop

c0016ca4 <Video::clearScreen(unsigned int)>:
c0016ca4:	57                   	push   edi
c0016ca5:	56                   	push   esi
c0016ca6:	53                   	push   ebx
c0016ca7:	31 db                	xor    ebx,ebx
c0016ca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cad:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016cb3:	7e 1f                	jle    c0016cd4 <Video::clearScreen(unsigned int)+0x30>
c0016cb5:	31 ff                	xor    edi,edi
c0016cb7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016cbd:	7e 12                	jle    c0016cd1 <Video::clearScreen(unsigned int)+0x2d>
c0016cbf:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016cc5:	53                   	push   ebx
c0016cc6:	57                   	push   edi
c0016cc7:	47                   	inc    edi
c0016cc8:	56                   	push   esi
c0016cc9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ccc:	83 c4 10             	add    esp,0x10
c0016ccf:	eb e6                	jmp    c0016cb7 <Video::clearScreen(unsigned int)+0x13>
c0016cd1:	43                   	inc    ebx
c0016cd2:	eb d9                	jmp    c0016cad <Video::clearScreen(unsigned int)+0x9>
c0016cd4:	5b                   	pop    ebx
c0016cd5:	5e                   	pop    esi
c0016cd6:	5f                   	pop    edi
c0016cd7:	c3                   	ret    

c0016cd8 <Video::putpixel(int, int, unsigned int)>:
c0016cd8:	c7 44 24 04 74 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ae74
c0016ce0:	e9 84 30 00 00       	jmp    c0019d69 <Krnl::panic(char const*)>
c0016ce5:	90                   	nop

c0016ce6 <Video::Video(char const*)>:
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ced:	83 ec 08             	sub    esp,0x8
c0016cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf4:	50                   	push   eax
c0016cf5:	e8 40 cf ff ff       	call   c0013c3a <Device::Device(char const*)>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c0016d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d06:	89 10                	mov    DWORD PTR [eax],edx
c0016d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016d16:	90                   	nop
c0016d17:	83 c4 0c             	add    esp,0xc
c0016d1a:	c3                   	ret    
c0016d1b:	90                   	nop

c0016d1c <Video::~Video()>:
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	ba e4 ae 02 c0       	mov    edx,0xc002aee4
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	89 10                	mov    DWORD PTR [eax],edx
c0016d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	50                   	push   eax
c0016d32:	e8 cd cb ff ff       	call   c0013904 <Device::~Device()>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	90                   	nop
c0016d3b:	83 c4 0c             	add    esp,0xc
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Video::~Video()>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4a:	e8 cd ff ff ff       	call   c0016d1c <Video::~Video()>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	83 ec 08             	sub    esp,0x8
c0016d55:	68 64 01 00 00       	push   0x164
c0016d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5e:	e8 c2 b7 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 c4 0c             	add    esp,0xc
c0016d69:	c3                   	ret    

c0016d6a <Video::isMonochrome()>:
c0016d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d6e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016d74:	c3                   	ret    
c0016d75:	90                   	nop

c0016d76 <Video::getWidth()>:
c0016d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d80:	c3                   	ret    
c0016d81:	90                   	nop

c0016d82 <Video::getHeight()>:
c0016d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d8c:	c3                   	ret    
c0016d8d:	90                   	nop

c0016d8e <Video::drawCursor(int, int, unsigned char*, int)>:
c0016d8e:	55                   	push   ebp
c0016d8f:	57                   	push   edi
c0016d90:	56                   	push   esi
c0016d91:	53                   	push   ebx
c0016d92:	83 ec 2c             	sub    esp,0x2c
c0016d95:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d99:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d9d:	83 f8 01             	cmp    eax,0x1
c0016da0:	19 c9                	sbb    ecx,ecx
c0016da2:	31 db                	xor    ebx,ebx
c0016da4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016da8:	89 cd                	mov    ebp,ecx
c0016daa:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016db2:	f7 d5                	not    ebp
c0016db4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016dba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016dbe:	01 d8                	add    eax,ebx
c0016dc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dc4:	56                   	push   esi
c0016dc5:	e8 b8 ff ff ff       	call   c0016d82 <Video::getHeight()>
c0016dca:	59                   	pop    ecx
c0016dcb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016dcf:	7e 70                	jle    c0016e41 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016dd1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016dd5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dd9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016ddc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016de0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016de4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016deb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016def:	89 f8                	mov    eax,edi
c0016df1:	83 c0 20             	add    eax,0x20
c0016df4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016df8:	56                   	push   esi
c0016df9:	e8 78 ff ff ff       	call   c0016d76 <Video::getWidth()>
c0016dfe:	5a                   	pop    edx
c0016dff:	39 c7                	cmp    edi,eax
c0016e01:	7d 34                	jge    c0016e37 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016e03:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016e08:	74 05                	je     c0016e0f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016e0a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e0c:	55                   	push   ebp
c0016e0d:	eb 0d                	jmp    c0016e1c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016e0f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016e14:	74 12                	je     c0016e28 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016e16:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e20:	57                   	push   edi
c0016e21:	56                   	push   esi
c0016e22:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e25:	83 c4 10             	add    esp,0x10
c0016e28:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016e2c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016e30:	47                   	inc    edi
c0016e31:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016e35:	75 c1                	jne    c0016df8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016e37:	43                   	inc    ebx
c0016e38:	83 fb 20             	cmp    ebx,0x20
c0016e3b:	0f 85 79 ff ff ff    	jne    c0016dba <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016e41:	83 c4 2c             	add    esp,0x2c
c0016e44:	5b                   	pop    ebx
c0016e45:	5e                   	pop    esi
c0016e46:	5f                   	pop    edi
c0016e47:	5d                   	pop    ebp
c0016e48:	c3                   	ret    
c0016e49:	90                   	nop

c0016e4a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016e4a:	55                   	push   ebp
c0016e4b:	57                   	push   edi
c0016e4c:	56                   	push   esi
c0016e4d:	53                   	push   ebx
c0016e4e:	83 ec 28             	sub    esp,0x28
c0016e51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016e55:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016e59:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016e5d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016e61:	c1 e6 08             	shl    esi,0x8
c0016e64:	01 c6                	add    esi,eax
c0016e66:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016e6a:	c1 e0 08             	shl    eax,0x8
c0016e6d:	01 d0                	add    eax,edx
c0016e6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e77:	0f af c6             	imul   eax,esi
c0016e7a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016e81:	50                   	push   eax
c0016e82:	e8 15 87 ff ff       	call   c000f59c <malloc>
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	89 c7                	mov    edi,eax
c0016e8c:	85 c0                	test   eax,eax
c0016e8e:	75 10                	jne    c0016ea0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016e90:	83 ec 0c             	sub    esp,0xc
c0016e93:	68 95 ae 02 c0       	push   0xc002ae95
c0016e98:	e8 cc 2e 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0016e9d:	83 c4 10             	add    esp,0x10
c0016ea0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016ea3:	ba 12 00 00 00       	mov    edx,0x12
c0016ea8:	84 c0                	test   al,al
c0016eaa:	74 11                	je     c0016ebd <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016eac:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016eb0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016eb4:	c1 fa 03             	sar    edx,0x3
c0016eb7:	0f af d1             	imul   edx,ecx
c0016eba:	83 c2 12             	add    edx,0x12
c0016ebd:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016ec1:	74 04                	je     c0016ec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016ec3:	85 f6                	test   esi,esi
c0016ec5:	75 12                	jne    c0016ed9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016ec7:	83 ec 0c             	sub    esp,0xc
c0016eca:	68 a5 ae 02 c0       	push   0xc002aea5
c0016ecf:	e8 29 b7 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0016ed4:	e9 b8 00 00 00       	jmp    c0016f91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016ed9:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016edd:	80 f9 02             	cmp    cl,0x2
c0016ee0:	0f 85 96 00 00 00    	jne    c0016f7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016ee6:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016eeb:	75 0e                	jne    c0016efb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016eed:	84 c0                	test   al,al
c0016eef:	75 0a                	jne    c0016efb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016ef1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ef4:	83 e8 18             	sub    eax,0x18
c0016ef7:	a8 f7                	test   al,0xf7
c0016ef9:	74 0a                	je     c0016f05 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016efb:	83 ec 0c             	sub    esp,0xc
c0016efe:	68 ba ae 02 c0       	push   0xc002aeba
c0016f03:	eb 7f                	jmp    c0016f84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016f05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016f0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f15:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016f19:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016f21:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016f25:	75 0c                	jne    c0016f33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016f27:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016f2c:	c1 e0 18             	shl    eax,0x18
c0016f2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f33:	45                   	inc    ebp
c0016f34:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016f39:	c1 e1 10             	shl    ecx,0x10
c0016f3c:	89 c8                	mov    eax,ecx
c0016f3e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016f43:	c1 e1 08             	shl    ecx,0x8
c0016f46:	09 c1                	or     ecx,eax
c0016f48:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016f4c:	09 c1                	or     ecx,eax
c0016f4e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016f52:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016f56:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016f5a:	c1 f8 03             	sar    eax,0x3
c0016f5d:	01 c2                	add    edx,eax
c0016f5f:	89 e8                	mov    eax,ebp
c0016f61:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016f65:	39 c6                	cmp    esi,eax
c0016f67:	7f b0                	jg     c0016f19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016f69:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016f6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f71:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016f74:	7e 22                	jle    c0016f98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016f76:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016f7a:	eb 99                	jmp    c0016f15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016f7c:	50                   	push   eax
c0016f7d:	50                   	push   eax
c0016f7e:	51                   	push   ecx
c0016f7f:	68 c8 ae 02 c0       	push   0xc002aec8
c0016f84:	e8 74 b6 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0016f89:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f8c:	e8 1b 86 ff ff       	call   c000f5ac <free>
c0016f91:	83 c4 10             	add    esp,0x10
c0016f94:	31 ff                	xor    edi,edi
c0016f96:	eb 0f                	jmp    c0016fa7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f9c:	89 30                	mov    DWORD PTR [eax],esi
c0016f9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fa2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016fa5:	89 30                	mov    DWORD PTR [eax],esi
c0016fa7:	83 c4 1c             	add    esp,0x1c
c0016faa:	89 f8                	mov    eax,edi
c0016fac:	5b                   	pop    ebx
c0016fad:	5e                   	pop    esi
c0016fae:	5f                   	pop    edi
c0016faf:	5d                   	pop    ebp
c0016fb0:	c3                   	ret    
c0016fb1:	90                   	nop

c0016fb2 <Video::putTGA(int, int, unsigned char*, int)>:
c0016fb2:	55                   	push   ebp
c0016fb3:	57                   	push   edi
c0016fb4:	56                   	push   esi
c0016fb5:	53                   	push   ebx
c0016fb6:	83 ec 28             	sub    esp,0x28
c0016fb9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016fbd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fc1:	50                   	push   eax
c0016fc2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fc6:	50                   	push   eax
c0016fc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fcb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016fcf:	56                   	push   esi
c0016fd0:	e8 75 fe ff ff       	call   c0016e4a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016fd5:	83 c4 20             	add    esp,0x20
c0016fd8:	85 c0                	test   eax,eax
c0016fda:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fde:	74 35                	je     c0017015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fe0:	89 c7                	mov    edi,eax
c0016fe2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fe6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016fea:	39 d8                	cmp    eax,ebx
c0016fec:	7e 27                	jle    c0017015 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016fee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ff2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ff6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016ffa:	39 e8                	cmp    eax,ebp
c0016ffc:	7e 14                	jle    c0017012 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016ffe:	8b 06                	mov    eax,DWORD PTR [esi]
c0017000:	83 c7 04             	add    edi,0x4
c0017003:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017006:	53                   	push   ebx
c0017007:	55                   	push   ebp
c0017008:	45                   	inc    ebp
c0017009:	56                   	push   esi
c001700a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001700d:	83 c4 10             	add    esp,0x10
c0017010:	eb e0                	jmp    c0016ff2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017012:	43                   	inc    ebx
c0017013:	eb cd                	jmp    c0016fe2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017015:	83 c4 1c             	add    esp,0x1c
c0017018:	5b                   	pop    ebx
c0017019:	5e                   	pop    esi
c001701a:	5f                   	pop    edi
c001701b:	5d                   	pop    ebp
c001701c:	c3                   	ret    
c001701d:	90                   	nop

c001701e <ACPI::close(int, int, void*)>:
c001701e:	83 ec 1c             	sub    esp,0x1c
c0017021:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017029:	74 0a                	je     c0017035 <ACPI::close(int, int, void*)+0x17>
c001702b:	b8 00 00 00 00       	mov    eax,0x0
c0017030:	e9 8a 00 00 00       	jmp    c00170bf <ACPI::close(int, int, void*)+0xa1>
c0017035:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001703a:	75 27                	jne    c0017063 <ACPI::close(int, int, void*)+0x45>
c001703c:	a1 28 fe 02 c0       	mov    eax,ds:0xc002fe28
c0017041:	85 c0                	test   eax,eax
c0017043:	74 07                	je     c001704c <ACPI::close(int, int, void*)+0x2e>
c0017045:	a1 28 fe 02 c0       	mov    eax,ds:0xc002fe28
c001704a:	ff d0                	call   eax
c001704c:	83 ec 0c             	sub    esp,0xc
c001704f:	68 24 af 02 c0       	push   0xc002af24
c0017054:	e8 10 2d 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0017059:	83 c4 10             	add    esp,0x10
c001705c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017061:	eb 5c                	jmp    c00170bf <ACPI::close(int, int, void*)+0xa1>
c0017063:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017068:	75 50                	jne    c00170ba <ACPI::close(int, int, void*)+0x9c>
c001706a:	a1 24 fe 02 c0       	mov    eax,ds:0xc002fe24
c001706f:	85 c0                	test   eax,eax
c0017071:	74 07                	je     c001707a <ACPI::close(int, int, void*)+0x5c>
c0017073:	a1 24 fe 02 c0       	mov    eax,ds:0xc002fe24
c0017078:	ff d0                	call   eax
c001707a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001707f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017084:	83 e0 02             	and    eax,0x2
c0017087:	74 1c                	je     c00170a5 <ACPI::close(int, int, void*)+0x87>
c0017089:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017094:	89 c2                	mov    edx,eax
c0017096:	ec                   	in     al,dx
c0017097:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001709b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001709f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00170a3:	eb da                	jmp    c001707f <ACPI::close(int, int, void*)+0x61>
c00170a5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00170ac:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00170b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00170b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170b9:	ee                   	out    dx,al
c00170ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00170bf:	83 c4 1c             	add    esp,0x1c
c00170c2:	c3                   	ret    

c00170c3 <findRSDP()>:
c00170c3:	83 ec 1c             	sub    esp,0x1c
c00170c6:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00170cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170d1:	83 e0 04             	and    eax,0x4
c00170d4:	84 c0                	test   al,al
c00170d6:	75 07                	jne    c00170df <findRSDP()+0x1c>
c00170d8:	b8 00 00 00 00       	mov    eax,0x0
c00170dd:	eb 6a                	jmp    c0017149 <findRSDP()+0x86>
c00170df:	a1 d4 d7 02 c0       	mov    eax,ds:0xc002d7d4
c00170e4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00170e9:	7f 1b                	jg     c0017106 <findRSDP()+0x43>
c00170eb:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00170f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00170f6:	83 e2 fb             	and    edx,0xfffffffb
c00170f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00170ff:	b8 00 00 00 00       	mov    eax,0x0
c0017104:	eb 43                	jmp    c0017149 <findRSDP()+0x86>
c0017106:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001710e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017116:	77 2c                	ja     c0017144 <findRSDP()+0x81>
c0017118:	83 ec 04             	sub    esp,0x4
c001711b:	6a 08                	push   0x8
c001711d:	68 bf af 02 c0       	push   0xc002afbf
c0017122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017126:	e8 21 95 fe ff       	call   c000064c <memcmp>
c001712b:	83 c4 10             	add    esp,0x10
c001712e:	85 c0                	test   eax,eax
c0017130:	0f 94 c0             	sete   al
c0017133:	84 c0                	test   al,al
c0017135:	74 06                	je     c001713d <findRSDP()+0x7a>
c0017137:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001713b:	eb 0c                	jmp    c0017149 <findRSDP()+0x86>
c001713d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017142:	eb ca                	jmp    c001710e <findRSDP()+0x4b>
c0017144:	b8 00 00 00 00       	mov    eax,0x0
c0017149:	83 c4 1c             	add    esp,0x1c
c001714c:	c3                   	ret    

c001714d <loadACPITables(unsigned char*)>:
c001714d:	57                   	push   edi
c001714e:	56                   	push   esi
c001714f:	53                   	push   ebx
c0017150:	83 ec 60             	sub    esp,0x60
c0017153:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017158:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001715e:	83 e0 04             	and    eax,0x4
c0017161:	84 c0                	test   al,al
c0017163:	0f 84 33 02 00 00    	je     c001739c <loadACPITables(unsigned char*)+0x24f>
c0017169:	a0 40 00 03 c0       	mov    al,ds:0xc0030040
c001716e:	84 c0                	test   al,al
c0017170:	74 75                	je     c00171e7 <loadACPITables(unsigned char*)+0x9a>
c0017172:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017176:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001717a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001717e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017181:	83 e8 24             	sub    eax,0x24
c0017184:	c1 e8 03             	shr    eax,0x3
c0017187:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001718b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017193:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017197:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001719b:	0f 8d b2 00 00 00    	jge    c0017253 <loadACPITables(unsigned char*)+0x106>
c00171a1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171a5:	83 c0 24             	add    eax,0x24
c00171a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00171ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00171b0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00171b4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00171b8:	c1 e0 03             	shl    eax,0x3
c00171bb:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00171bf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00171c3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00171c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00171c8:	89 c1                	mov    ecx,eax
c00171ca:	a1 2c fe 02 c0       	mov    eax,ds:0xc002fe2c
c00171cf:	8d 50 01             	lea    edx,[eax+0x1]
c00171d2:	89 15 2c fe 02 c0    	mov    DWORD PTR ds:0xc002fe2c,edx
c00171d8:	89 ca                	mov    edx,ecx
c00171da:	89 14 c5 44 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd01bc],edx
c00171e1:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00171e5:	eb ac                	jmp    c0017193 <loadACPITables(unsigned char*)+0x46>
c00171e7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00171eb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00171ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00171f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171f6:	83 e8 24             	sub    eax,0x24
c00171f9:	c1 e8 02             	shr    eax,0x2
c00171fc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017200:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017208:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001720c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017210:	7d 41                	jge    c0017253 <loadACPITables(unsigned char*)+0x106>
c0017212:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017216:	83 c0 24             	add    eax,0x24
c0017219:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001721d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017221:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017225:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017229:	c1 e0 02             	shl    eax,0x2
c001722c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017230:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017234:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017236:	a1 2c fe 02 c0       	mov    eax,ds:0xc002fe2c
c001723b:	8d 50 01             	lea    edx,[eax+0x1]
c001723e:	89 15 2c fe 02 c0    	mov    DWORD PTR ds:0xc002fe2c,edx
c0017244:	89 ca                	mov    edx,ecx
c0017246:	89 14 c5 44 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd01bc],edx
c001724d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017251:	eb b5                	jmp    c0017208 <loadACPITables(unsigned char*)+0xbb>
c0017253:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001725b:	a1 2c fe 02 c0       	mov    eax,ds:0xc002fe2c
c0017260:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017264:	0f 8d 33 01 00 00    	jge    c001739d <loadACPITables(unsigned char*)+0x250>
c001726a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001726e:	8b 04 c5 44 fe 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd01bc]
c0017275:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017279:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001727d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017285:	25 ff 0f 00 00       	and    eax,0xfff
c001728a:	89 c6                	mov    esi,eax
c001728c:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c0017292:	83 ec 0c             	sub    esp,0xc
c0017295:	6a 01                	push   0x1
c0017297:	e8 29 9f ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c001729c:	83 c4 10             	add    esp,0x10
c001729f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172a3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00172a9:	83 ec 0c             	sub    esp,0xc
c00172ac:	6a 01                	push   0x1
c00172ae:	6a 01                	push   0x1
c00172b0:	50                   	push   eax
c00172b1:	52                   	push   edx
c00172b2:	53                   	push   ebx
c00172b3:	e8 e2 a9 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00172b8:	83 c4 20             	add    esp,0x20
c00172bb:	09 f0                	or     eax,esi
c00172bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00172c5:	c1 e0 03             	shl    eax,0x3
c00172c8:	05 40 fe 02 c0       	add    eax,0xc002fe40
c00172cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00172d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00172d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172d9:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00172e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00172f5:	89 c6                	mov    esi,eax
c00172f7:	89 d7                	mov    edi,edx
c00172f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172fb:	89 c8                	mov    eax,ecx
c00172fd:	89 fa                	mov    edx,edi
c00172ff:	89 f3                	mov    ebx,esi
c0017301:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017305:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017309:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001730d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017311:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017314:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017318:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001731c:	05 00 10 00 00       	add    eax,0x1000
c0017321:	c1 e8 0c             	shr    eax,0xc
c0017324:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001732c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017330:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017334:	25 ff 0f 00 00       	and    eax,0xfff
c0017339:	89 c6                	mov    esi,eax
c001733b:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c0017341:	83 ec 0c             	sub    esp,0xc
c0017344:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017348:	e8 78 9e ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c001734d:	83 c4 10             	add    esp,0x10
c0017350:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017354:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001735a:	83 ec 0c             	sub    esp,0xc
c001735d:	6a 01                	push   0x1
c001735f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017363:	50                   	push   eax
c0017364:	52                   	push   edx
c0017365:	53                   	push   ebx
c0017366:	e8 2f a9 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001736b:	83 c4 20             	add    esp,0x20
c001736e:	09 f0                	or     eax,esi
c0017370:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017378:	83 ec 0c             	sub    esp,0xc
c001737b:	50                   	push   eax
c001737c:	e8 8a a2 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c0017381:	83 c4 10             	add    esp,0x10
c0017384:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017388:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001738c:	89 14 c5 44 fe 02 c0 	mov    DWORD PTR [eax*8-0x3ffd01bc],edx
c0017393:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017397:	e9 bf fe ff ff       	jmp    c001725b <loadACPITables(unsigned char*)+0x10e>
c001739c:	90                   	nop
c001739d:	83 c4 60             	add    esp,0x60
c00173a0:	5b                   	pop    ebx
c00173a1:	5e                   	pop    esi
c00173a2:	5f                   	pop    edi
c00173a3:	c3                   	ret    

c00173a4 <findRSDT(unsigned char*)>:
c00173a4:	57                   	push   edi
c00173a5:	56                   	push   esi
c00173a6:	53                   	push   ebx
c00173a7:	83 ec 50             	sub    esp,0x50
c00173aa:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00173af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173b5:	83 e0 04             	and    eax,0x4
c00173b8:	84 c0                	test   al,al
c00173ba:	75 0a                	jne    c00173c6 <findRSDT(unsigned char*)+0x22>
c00173bc:	b8 00 00 00 00       	mov    eax,0x0
c00173c1:	e9 21 01 00 00       	jmp    c00174e7 <findRSDT(unsigned char*)+0x143>
c00173c6:	89 e0                	mov    eax,esp
c00173c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00173cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00173d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00173d4:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00173dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00173ec:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00173f0:	89 c6                	mov    esi,eax
c00173f2:	89 d7                	mov    edi,edx
c00173f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173f6:	89 c8                	mov    eax,ecx
c00173f8:	89 fa                	mov    edx,edi
c00173fa:	89 f3                	mov    ebx,esi
c00173fc:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017400:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017404:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017408:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001740c:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017410:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017418:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001741c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017420:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017428:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001742c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017430:	25 ff 0f 00 00       	and    eax,0xfff
c0017435:	89 c6                	mov    esi,eax
c0017437:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c001743d:	83 ec 0c             	sub    esp,0xc
c0017440:	6a 02                	push   0x2
c0017442:	e8 7e 9d ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0017447:	83 c4 10             	add    esp,0x10
c001744a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001744e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017454:	83 ec 0c             	sub    esp,0xc
c0017457:	6a 01                	push   0x1
c0017459:	6a 02                	push   0x2
c001745b:	50                   	push   eax
c001745c:	52                   	push   edx
c001745d:	53                   	push   ebx
c001745e:	e8 37 a8 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017463:	83 c4 20             	add    esp,0x20
c0017466:	09 f0                	or     eax,esi
c0017468:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001746c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017470:	25 ff 0f 00 00       	and    eax,0xfff
c0017475:	89 c6                	mov    esi,eax
c0017477:	8b 1d f0 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f0
c001747d:	83 ec 0c             	sub    esp,0xc
c0017480:	6a 02                	push   0x2
c0017482:	e8 3e 9d ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001748e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017494:	83 ec 0c             	sub    esp,0xc
c0017497:	6a 01                	push   0x1
c0017499:	6a 02                	push   0x2
c001749b:	50                   	push   eax
c001749c:	52                   	push   edx
c001749d:	53                   	push   ebx
c001749e:	e8 f7 a7 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00174a3:	83 c4 20             	add    esp,0x20
c00174a6:	09 f0                	or     eax,esi
c00174a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174ac:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00174b1:	75 11                	jne    c00174c4 <findRSDT(unsigned char*)+0x120>
c00174b3:	c6 05 40 00 03 c0 00 	mov    BYTE PTR ds:0xc0030040,0x0
c00174ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174c2:	eb 1f                	jmp    c00174e3 <findRSDT(unsigned char*)+0x13f>
c00174c4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00174c9:	75 11                	jne    c00174dc <findRSDT(unsigned char*)+0x138>
c00174cb:	c6 05 40 00 03 c0 01 	mov    BYTE PTR ds:0xc0030040,0x1
c00174d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174da:	eb 07                	jmp    c00174e3 <findRSDT(unsigned char*)+0x13f>
c00174dc:	b8 00 00 00 00       	mov    eax,0x0
c00174e1:	eb 04                	jmp    c00174e7 <findRSDT(unsigned char*)+0x143>
c00174e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00174e7:	83 c4 50             	add    esp,0x50
c00174ea:	5b                   	pop    ebx
c00174eb:	5e                   	pop    esi
c00174ec:	5f                   	pop    edi
c00174ed:	c3                   	ret    

c00174ee <findDataTable(unsigned char*, char*)>:
c00174ee:	83 ec 1c             	sub    esp,0x1c
c00174f1:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00174f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174fc:	83 e0 04             	and    eax,0x4
c00174ff:	84 c0                	test   al,al
c0017501:	75 07                	jne    c001750a <findDataTable(unsigned char*, char*)+0x1c>
c0017503:	b8 00 00 00 00       	mov    eax,0x0
c0017508:	eb 52                	jmp    c001755c <findDataTable(unsigned char*, char*)+0x6e>
c001750a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017512:	a1 2c fe 02 c0       	mov    eax,ds:0xc002fe2c
c0017517:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001751b:	7d 3a                	jge    c0017557 <findDataTable(unsigned char*, char*)+0x69>
c001751d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017521:	c1 e0 03             	shl    eax,0x3
c0017524:	05 40 fe 02 c0       	add    eax,0xc002fe40
c0017529:	83 ec 04             	sub    esp,0x4
c001752c:	6a 04                	push   0x4
c001752e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017532:	50                   	push   eax
c0017533:	e8 14 91 fe ff       	call   c000064c <memcmp>
c0017538:	83 c4 10             	add    esp,0x10
c001753b:	85 c0                	test   eax,eax
c001753d:	0f 94 c0             	sete   al
c0017540:	84 c0                	test   al,al
c0017542:	74 0d                	je     c0017551 <findDataTable(unsigned char*, char*)+0x63>
c0017544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017548:	8b 04 c5 44 fe 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd01bc]
c001754f:	eb 0b                	jmp    c001755c <findDataTable(unsigned char*, char*)+0x6e>
c0017551:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017555:	eb bb                	jmp    c0017512 <findDataTable(unsigned char*, char*)+0x24>
c0017557:	b8 00 00 00 00       	mov    eax,0x0
c001755c:	83 c4 1c             	add    esp,0x1c
c001755f:	c3                   	ret    

c0017560 <scanMADT()>:
c0017560:	53                   	push   ebx
c0017561:	83 ec 38             	sub    esp,0x38
c0017564:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017569:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001756f:	83 e0 04             	and    eax,0x4
c0017572:	84 c0                	test   al,al
c0017574:	0f 84 4a 04 00 00    	je     c00179c4 <scanMADT()+0x464>
c001757a:	e8 44 fb ff ff       	call   c00170c3 <findRSDP()>
c001757f:	a3 4c 00 03 c0       	mov    ds:0xc003004c,eax
c0017584:	a1 4c 00 03 c0       	mov    eax,ds:0xc003004c
c0017589:	85 c0                	test   eax,eax
c001758b:	75 19                	jne    c00175a6 <scanMADT()+0x46>
c001758d:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017592:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017598:	83 e2 fb             	and    edx,0xfffffffb
c001759b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175a1:	e9 22 04 00 00       	jmp    c00179c8 <scanMADT()+0x468>
c00175a6:	a1 4c 00 03 c0       	mov    eax,ds:0xc003004c
c00175ab:	83 ec 0c             	sub    esp,0xc
c00175ae:	50                   	push   eax
c00175af:	e8 f0 fd ff ff       	call   c00173a4 <findRSDT(unsigned char*)>
c00175b4:	83 c4 10             	add    esp,0x10
c00175b7:	a3 48 00 03 c0       	mov    ds:0xc0030048,eax
c00175bc:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c00175c1:	85 c0                	test   eax,eax
c00175c3:	75 19                	jne    c00175de <scanMADT()+0x7e>
c00175c5:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00175ca:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00175d0:	83 e2 fb             	and    edx,0xfffffffb
c00175d3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00175d9:	e9 ea 03 00 00       	jmp    c00179c8 <scanMADT()+0x468>
c00175de:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c00175e3:	83 ec 0c             	sub    esp,0xc
c00175e6:	50                   	push   eax
c00175e7:	e8 61 fb ff ff       	call   c001714d <loadACPITables(unsigned char*)>
c00175ec:	83 c4 10             	add    esp,0x10
c00175ef:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c00175f4:	83 ec 08             	sub    esp,0x8
c00175f7:	68 c8 af 02 c0       	push   0xc002afc8
c00175fc:	50                   	push   eax
c00175fd:	e8 ec fe ff ff       	call   c00174ee <findDataTable(unsigned char*, char*)>
c0017602:	83 c4 10             	add    esp,0x10
c0017605:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017609:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001760e:	75 19                	jne    c0017629 <scanMADT()+0xc9>
c0017610:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017615:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001761b:	83 e2 fe             	and    edx,0xfffffffe
c001761e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017624:	e9 9f 03 00 00       	jmp    c00179c8 <scanMADT()+0x468>
c0017629:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017631:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017635:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017638:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001763c:	0f 87 86 03 00 00    	ja     c00179c8 <scanMADT()+0x468>
c0017642:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001764a:	0f 87 78 03 00 00    	ja     c00179c8 <scanMADT()+0x468>
c0017650:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017654:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001765c:	8d 50 01             	lea    edx,[eax+0x1]
c001765f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017663:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017667:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001766b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001766f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017673:	8d 50 01             	lea    edx,[eax+0x1]
c0017676:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001767a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001767e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017682:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017686:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001768b:	0f 86 36 03 00 00    	jbe    c00179c7 <scanMADT()+0x467>
c0017691:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017696:	75 57                	jne    c00176ef <scanMADT()+0x18f>
c0017698:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769c:	8d 50 01             	lea    edx,[eax+0x1]
c001769f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176a3:	8a 15 40 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030240
c00176a9:	0f b6 d2             	movzx  edx,dl
c00176ac:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176b0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176b4:	88 82 80 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfd80],al
c00176ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176be:	8d 50 01             	lea    edx,[eax+0x1]
c00176c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176c5:	8a 15 40 02 03 c0    	mov    dl,BYTE PTR ds:0xc0030240
c00176cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00176ce:	88 0d 40 02 03 c0    	mov    BYTE PTR ds:0xc0030240,cl
c00176d4:	0f b6 d2             	movzx  edx,dl
c00176d7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00176db:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00176df:	88 82 60 02 03 c0    	mov    BYTE PTR [edx-0x3ffcfda0],al
c00176e5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176ea:	e9 c1 02 00 00       	jmp    c00179b0 <scanMADT()+0x450>
c00176ef:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00176f4:	0f 85 14 01 00 00    	jne    c001780e <scanMADT()+0x2ae>
c00176fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176fe:	8d 50 01             	lea    edx,[eax+0x1]
c0017701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017705:	8a 15 00 01 03 c0    	mov    dl,BYTE PTR ds:0xc0030100
c001770b:	0f b6 d2             	movzx  edx,dl
c001770e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017712:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017716:	88 82 20 01 03 c0    	mov    BYTE PTR [edx-0x3ffcfee0],al
c001771c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017720:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017724:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017728:	01 d0                	add    eax,edx
c001772a:	83 c0 2c             	add    eax,0x2c
c001772d:	8a 00                	mov    al,BYTE PTR [eax]
c001772f:	0f b6 d0             	movzx  edx,al
c0017732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017736:	8d 48 01             	lea    ecx,[eax+0x1]
c0017739:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001773d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017741:	0f b6 c0             	movzx  eax,al
c0017744:	c1 e0 08             	shl    eax,0x8
c0017747:	89 d1                	mov    ecx,edx
c0017749:	09 c1                	or     ecx,eax
c001774b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001774f:	8d 50 02             	lea    edx,[eax+0x2]
c0017752:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017756:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001775a:	0f b6 c0             	movzx  eax,al
c001775d:	c1 e0 10             	shl    eax,0x10
c0017760:	09 c1                	or     ecx,eax
c0017762:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017766:	8d 50 03             	lea    edx,[eax+0x3]
c0017769:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001776d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017771:	0f b6 c0             	movzx  eax,al
c0017774:	c1 e0 18             	shl    eax,0x18
c0017777:	09 c1                	or     ecx,eax
c0017779:	89 ca                	mov    edx,ecx
c001777b:	a0 00 01 03 c0       	mov    al,ds:0xc0030100
c0017780:	0f b6 c0             	movzx  eax,al
c0017783:	89 14 85 40 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfec0],edx
c001778a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001778f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017793:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017797:	01 d0                	add    eax,edx
c0017799:	83 c0 2c             	add    eax,0x2c
c001779c:	8a 00                	mov    al,BYTE PTR [eax]
c001779e:	0f b6 d0             	movzx  edx,al
c00177a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00177a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177ac:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177b0:	0f b6 c0             	movzx  eax,al
c00177b3:	c1 e0 08             	shl    eax,0x8
c00177b6:	89 d1                	mov    ecx,edx
c00177b8:	09 c1                	or     ecx,eax
c00177ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177be:	8d 50 02             	lea    edx,[eax+0x2]
c00177c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177c9:	0f b6 c0             	movzx  eax,al
c00177cc:	c1 e0 10             	shl    eax,0x10
c00177cf:	09 c1                	or     ecx,eax
c00177d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177d5:	8d 50 03             	lea    edx,[eax+0x3]
c00177d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177dc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177e0:	0f b6 c0             	movzx  eax,al
c00177e3:	c1 e0 18             	shl    eax,0x18
c00177e6:	09 c1                	or     ecx,eax
c00177e8:	89 ca                	mov    edx,ecx
c00177ea:	a0 00 01 03 c0       	mov    al,ds:0xc0030100
c00177ef:	0f b6 c0             	movzx  eax,al
c00177f2:	89 14 85 c0 01 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfe40],edx
c00177f9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177fe:	a0 00 01 03 c0       	mov    al,ds:0xc0030100
c0017803:	40                   	inc    eax
c0017804:	a2 00 01 03 c0       	mov    ds:0xc0030100,al
c0017809:	e9 a2 01 00 00       	jmp    c00179b0 <scanMADT()+0x450>
c001780e:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017813:	0f 85 e9 00 00 00    	jne    c0017902 <scanMADT()+0x3a2>
c0017819:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781d:	8d 50 01             	lea    edx,[eax+0x1]
c0017820:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017824:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017828:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001782c:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017834:	8d 50 01             	lea    edx,[eax+0x1]
c0017837:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001783b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017843:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017847:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001784b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784f:	01 d0                	add    eax,edx
c0017851:	83 c0 2c             	add    eax,0x2c
c0017854:	8a 00                	mov    al,BYTE PTR [eax]
c0017856:	0f b6 d0             	movzx  edx,al
c0017859:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001785d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017860:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017864:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017868:	0f b6 c0             	movzx  eax,al
c001786b:	c1 e0 08             	shl    eax,0x8
c001786e:	89 d1                	mov    ecx,edx
c0017870:	09 c1                	or     ecx,eax
c0017872:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017876:	8d 50 02             	lea    edx,[eax+0x2]
c0017879:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017881:	0f b6 c0             	movzx  eax,al
c0017884:	c1 e0 10             	shl    eax,0x10
c0017887:	09 c1                	or     ecx,eax
c0017889:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788d:	8d 50 03             	lea    edx,[eax+0x3]
c0017890:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017894:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017898:	0f b6 c0             	movzx  eax,al
c001789b:	c1 e0 18             	shl    eax,0x18
c001789e:	09 c8                	or     eax,ecx
c00178a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178a4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178b1:	01 d0                	add    eax,edx
c00178b3:	83 c0 2c             	add    eax,0x2c
c00178b6:	8a 00                	mov    al,BYTE PTR [eax]
c00178b8:	0f b6 c0             	movzx  eax,al
c00178bb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00178bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00178c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178c6:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00178ca:	0f b6 d2             	movzx  edx,dl
c00178cd:	c1 e2 08             	shl    edx,0x8
c00178d0:	09 d0                	or     eax,edx
c00178d2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00178d7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00178dc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00178e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178e5:	88 90 e0 c9 02 c0    	mov    BYTE PTR [eax-0x3ffd3620],dl
c00178eb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00178f0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00178f5:	66 89 84 12 e0 00 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcff20],ax
c00178fd:	e9 ae 00 00 00       	jmp    c00179b0 <scanMADT()+0x450>
c0017902:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017907:	0f 85 97 00 00 00    	jne    c00179a4 <scanMADT()+0x444>
c001790d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017911:	8d 50 01             	lea    edx,[eax+0x1]
c0017914:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017918:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001791c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017920:	0f b6 c0             	movzx  eax,al
c0017923:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017927:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001792b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792f:	01 d0                	add    eax,edx
c0017931:	83 c0 2c             	add    eax,0x2c
c0017934:	8a 00                	mov    al,BYTE PTR [eax]
c0017936:	0f b6 d0             	movzx  edx,al
c0017939:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001793d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017940:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017944:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017948:	0f b6 c0             	movzx  eax,al
c001794b:	c1 e0 08             	shl    eax,0x8
c001794e:	09 d0                	or     eax,edx
c0017950:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017954:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017959:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001795d:	8d 50 01             	lea    edx,[eax+0x1]
c0017960:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017964:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017968:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001796c:	0f b6 c0             	movzx  eax,al
c001796f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017977:	c1 e0 08             	shl    eax,0x8
c001797a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001797e:	89 c1                	mov    ecx,eax
c0017980:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017984:	c1 e0 18             	shl    eax,0x18
c0017987:	89 c3                	mov    ebx,eax
c0017989:	a1 50 00 03 c0       	mov    eax,ds:0xc0030050
c001798e:	8d 50 01             	lea    edx,[eax+0x1]
c0017991:	89 15 50 00 03 c0    	mov    DWORD PTR ds:0xc0030050,edx
c0017997:	09 d9                	or     ecx,ebx
c0017999:	89 ca                	mov    edx,ecx
c001799b:	89 14 85 60 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcffa0],edx
c00179a2:	eb 0c                	jmp    c00179b0 <scanMADT()+0x450>
c00179a4:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00179a9:	75 05                	jne    c00179b0 <scanMADT()+0x450>
c00179ab:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00179b0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00179b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179b9:	01 d0                	add    eax,edx
c00179bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00179bf:	e9 6d fc ff ff       	jmp    c0017631 <scanMADT()+0xd1>
c00179c4:	90                   	nop
c00179c5:	eb 01                	jmp    c00179c8 <scanMADT()+0x468>
c00179c7:	90                   	nop
c00179c8:	83 c4 38             	add    esp,0x38
c00179cb:	5b                   	pop    ebx
c00179cc:	c3                   	ret    
c00179cd:	90                   	nop

c00179ce <ACPI::ACPI()>:
c00179ce:	83 ec 0c             	sub    esp,0xc
c00179d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179d5:	83 ec 08             	sub    esp,0x8
c00179d8:	68 cd af 02 c0       	push   0xc002afcd
c00179dd:	50                   	push   eax
c00179de:	e8 57 c2 ff ff       	call   c0013c3a <Device::Device(char const*)>
c00179e3:	83 c4 10             	add    esp,0x10
c00179e6:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c00179eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179ef:	89 10                	mov    DWORD PTR [eax],edx
c00179f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00179fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a00:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a0e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017a18:	e8 43 fb ff ff       	call   c0017560 <scanMADT()>
c0017a1d:	90                   	nop
c0017a1e:	83 c4 0c             	add    esp,0xc
c0017a21:	c3                   	ret    

c0017a22 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017a22:	83 ec 2c             	sub    esp,0x2c
c0017a25:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017a29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a2d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017a31:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017a35:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017a3a:	88 d0                	mov    al,dl
c0017a3c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a40:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017a45:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a51:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a57:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017a5b:	0f 8d 97 00 00 00    	jge    c0017af8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017a61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a69:	83 c2 2a             	add    edx,0x2a
c0017a6c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017a70:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017a75:	75 78                	jne    c0017aef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a7f:	83 c2 2a             	add    edx,0x2a
c0017a82:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017a86:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017a8a:	75 63                	jne    c0017aef <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017a8c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a91:	74 3a                	je     c0017acd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017a93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a9b:	83 c2 2a             	add    edx,0x2a
c0017a9e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017aa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa9:	39 c2                	cmp    edx,eax
c0017aab:	74 10                	je     c0017abd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017aad:	83 ec 0c             	sub    esp,0xc
c0017ab0:	68 48 af 02 c0       	push   0xc002af48
c0017ab5:	e8 af 22 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0017aba:	83 c4 10             	add    esp,0x10
c0017abd:	83 ec 0c             	sub    esp,0xc
c0017ac0:	68 d2 af 02 c0       	push   0xc002afd2
c0017ac5:	e8 9f 22 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0017aca:	83 c4 10             	add    esp,0x10
c0017acd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ad1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ad5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ad9:	83 c2 2a             	add    edx,0x2a
c0017adc:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017ae0:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ae2:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ae5:	89 01                	mov    DWORD PTR [ecx],eax
c0017ae7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017aea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017aef:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017af3:	e9 55 ff ff ff       	jmp    c0017a4d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017af8:	90                   	nop
c0017af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017afd:	83 c4 2c             	add    esp,0x2c
c0017b00:	c2 04 00             	ret    0x4
c0017b03:	90                   	nop

c0017b04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017b04:	83 ec 1c             	sub    esp,0x1c
c0017b07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b0b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017b0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b13:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017b18:	88 c8                	mov    al,cl
c0017b1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017b1e:	88 d0                	mov    al,dl
c0017b20:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b28:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b32:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b35:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017b39:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b4b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b52:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b61:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017b65:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b6c:	83 c2 2a             	add    edx,0x2a
c0017b6f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b77:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b81:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017b84:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b88:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b90:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b96:	8d 50 01             	lea    edx,[eax+0x1]
c0017b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b9d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017ba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ba7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bad:	3d 00 02 00 00       	cmp    eax,0x200
c0017bb2:	75 10                	jne    c0017bc4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017bb4:	83 ec 0c             	sub    esp,0xc
c0017bb7:	68 e1 af 02 c0       	push   0xc002afe1
c0017bbc:	e8 a8 21 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0017bc1:	83 c4 10             	add    esp,0x10
c0017bc4:	90                   	nop
c0017bc5:	83 c4 1c             	add    esp,0x1c
c0017bc8:	c3                   	ret    
c0017bc9:	90                   	nop

c0017bca <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017bca:	b8 00 00 00 00       	mov    eax,0x0
c0017bcf:	c3                   	ret    

c0017bd0 <ACPI::detectPCI()>:
c0017bd0:	53                   	push   ebx
c0017bd1:	83 ec 28             	sub    esp,0x28
c0017bd4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017bd9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017bde:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017be3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017be9:	83 e0 04             	and    eax,0x4
c0017bec:	84 c0                	test   al,al
c0017bee:	74 2b                	je     c0017c1b <ACPI::detectPCI()+0x4b>
c0017bf0:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c0017bf5:	83 ec 08             	sub    esp,0x8
c0017bf8:	68 fe af 02 c0       	push   0xc002affe
c0017bfd:	50                   	push   eax
c0017bfe:	e8 eb f8 ff ff       	call   c00174ee <findDataTable(unsigned char*, char*)>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c0a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017c0f:	74 0a                	je     c0017c1b <ACPI::detectPCI()+0x4b>
c0017c11:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c16:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c1b:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017c23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c27:	8a 00                	mov    al,BYTE PTR [eax]
c0017c29:	3c 01                	cmp    al,0x1
c0017c2b:	75 0c                	jne    c0017c39 <ACPI::detectPCI()+0x69>
c0017c2d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c32:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c37:	eb 26                	jmp    c0017c5f <ACPI::detectPCI()+0x8f>
c0017c39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c3d:	8a 00                	mov    al,BYTE PTR [eax]
c0017c3f:	3c 02                	cmp    al,0x2
c0017c41:	75 1c                	jne    c0017c5f <ACPI::detectPCI()+0x8f>
c0017c43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c48:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c4d:	74 10                	je     c0017c5f <ACPI::detectPCI()+0x8f>
c0017c4f:	83 ec 0c             	sub    esp,0xc
c0017c52:	68 78 af 02 c0       	push   0xc002af78
c0017c57:	e8 0d 21 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017c63:	83 f0 01             	xor    eax,0x1
c0017c66:	84 c0                	test   al,al
c0017c68:	74 3f                	je     c0017ca9 <ACPI::detectPCI()+0xd9>
c0017c6a:	e8 e1 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017c6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017c78:	75 0c                	jne    c0017c86 <ACPI::detectPCI()+0xb6>
c0017c7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c7f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017c84:	eb 23                	jmp    c0017ca9 <ACPI::detectPCI()+0xd9>
c0017c86:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017c8b:	75 1c                	jne    c0017ca9 <ACPI::detectPCI()+0xd9>
c0017c8d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c92:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c97:	74 10                	je     c0017ca9 <ACPI::detectPCI()+0xd9>
c0017c99:	83 ec 0c             	sub    esp,0xc
c0017c9c:	68 78 af 02 c0       	push   0xc002af78
c0017ca1:	e8 c3 20 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0017ca6:	83 c4 10             	add    esp,0x10
c0017ca9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017cae:	74 7e                	je     c0017d2e <ACPI::detectPCI()+0x15e>
c0017cb0:	83 ec 0c             	sub    esp,0xc
c0017cb3:	68 03 b0 02 c0       	push   0xc002b003
c0017cb8:	e8 39 79 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017cbd:	83 c4 10             	add    esp,0x10
c0017cc0:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017cc8:	83 ec 0c             	sub    esp,0xc
c0017ccb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ccf:	e8 c8 78 ff ff       	call   c000f59c <malloc>
c0017cd4:	83 c4 10             	add    esp,0x10
c0017cd7:	89 c3                	mov    ebx,eax
c0017cd9:	83 ec 0c             	sub    esp,0xc
c0017cdc:	53                   	push   ebx
c0017cdd:	e8 ac a5 00 00       	call   c002228e <PCI::PCI()>
c0017ce2:	83 c4 10             	add    esp,0x10
c0017ce5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017ce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ced:	83 ec 08             	sub    esp,0x8
c0017cf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cf4:	50                   	push   eax
c0017cf5:	e8 3c bd ff ff       	call   c0013a36 <Device::addChild(Device*)>
c0017cfa:	83 c4 10             	add    esp,0x10
c0017cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d01:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d03:	83 c0 08             	add    eax,0x8
c0017d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d08:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d0d:	74 07                	je     c0017d16 <ACPI::detectPCI()+0x146>
c0017d0f:	ba 01 00 00 00       	mov    edx,0x1
c0017d14:	eb 05                	jmp    c0017d1b <ACPI::detectPCI()+0x14b>
c0017d16:	ba 02 00 00 00       	mov    edx,0x2
c0017d1b:	6a 00                	push   0x0
c0017d1d:	6a 00                	push   0x0
c0017d1f:	52                   	push   edx
c0017d20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d24:	ff d0                	call   eax
c0017d26:	83 c4 10             	add    esp,0x10
c0017d29:	e9 9e 00 00 00       	jmp    c0017dcc <ACPI::detectPCI()+0x1fc>
c0017d2e:	83 ec 0c             	sub    esp,0xc
c0017d31:	68 1b b0 02 c0       	push   0xc002b01b
c0017d36:	e8 c2 a8 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0017d3b:	83 c4 10             	add    esp,0x10
c0017d3e:	83 ec 0c             	sub    esp,0xc
c0017d41:	68 26 b0 02 c0       	push   0xc002b026
c0017d46:	e8 ab 78 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017d4b:	83 c4 10             	add    esp,0x10
c0017d4e:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017d55:	83 ec 0c             	sub    esp,0xc
c0017d58:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d5c:	e8 3b 78 ff ff       	call   c000f59c <malloc>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	89 c3                	mov    ebx,eax
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	53                   	push   ebx
c0017d6a:	e8 89 b0 00 00       	call   c0022df8 <IDE::IDE()>
c0017d6f:	83 c4 10             	add    esp,0x10
c0017d72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017d76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d7a:	83 ec 08             	sub    esp,0x8
c0017d7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d81:	50                   	push   eax
c0017d82:	e8 af bc ff ff       	call   c0013a36 <Device::addChild(Device*)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d8e:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d9c:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017da5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017da9:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017db2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db8:	83 c0 08             	add    eax,0x8
c0017dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dbd:	6a 00                	push   0x0
c0017dbf:	6a 00                	push   0x0
c0017dc1:	6a 00                	push   0x0
c0017dc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dc7:	ff d0                	call   eax
c0017dc9:	83 c4 10             	add    esp,0x10
c0017dcc:	90                   	nop
c0017dcd:	83 c4 28             	add    esp,0x28
c0017dd0:	5b                   	pop    ebx
c0017dd1:	c3                   	ret    

c0017dd2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017dd2:	83 ec 1c             	sub    esp,0x1c
c0017dd5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dd9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ddc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017de0:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017de5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017dea:	83 ec 08             	sub    esp,0x8
c0017ded:	52                   	push   edx
c0017dee:	50                   	push   eax
c0017def:	e8 bc 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017dfb:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0017e00:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017e05:	83 ec 04             	sub    esp,0x4
c0017e08:	6a 01                	push   0x1
c0017e0a:	52                   	push   edx
c0017e0b:	50                   	push   eax
c0017e0c:	e8 d1 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e11:	83 c4 10             	add    esp,0x10
c0017e14:	90                   	nop
c0017e15:	83 c4 1c             	add    esp,0x1c
c0017e18:	c3                   	ret    
c0017e19:	90                   	nop

c0017e1a <ACPI::sleep()>:
c0017e1a:	83 ec 0c             	sub    esp,0xc
c0017e1d:	a1 20 fe 02 c0       	mov    eax,ds:0xc002fe20
c0017e22:	85 c0                	test   eax,eax
c0017e24:	74 07                	je     c0017e2d <ACPI::sleep()+0x13>
c0017e26:	a1 20 fe 02 c0       	mov    eax,ds:0xc002fe20
c0017e2b:	ff d0                	call   eax
c0017e2d:	90                   	nop
c0017e2e:	83 c4 0c             	add    esp,0xc
c0017e31:	c3                   	ret    

c0017e32 <ACPI::open(int, int, void*)>:
c0017e32:	57                   	push   edi
c0017e33:	56                   	push   esi
c0017e34:	53                   	push   ebx
c0017e35:	81 ec 60 01 00 00    	sub    esp,0x160
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017e45:	e8 86 fd ff ff       	call   c0017bd0 <ACPI::detectPCI()>
c0017e4a:	83 c4 10             	add    esp,0x10
c0017e4d:	83 ec 0c             	sub    esp,0xc
c0017e50:	68 a0 af 02 c0       	push   0xc002afa0
c0017e55:	e8 9c 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	83 ec 0c             	sub    esp,0xc
c0017e60:	68 3b b0 02 c0       	push   0xc002b03b
c0017e65:	e8 52 46 00 00       	call   c001c4bc <Thr::loadKernelSymbolTable(char const*)>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	83 ec 0c             	sub    esp,0xc
c0017e70:	68 59 b0 02 c0       	push   0xc002b059
c0017e75:	e8 7c 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017e7a:	83 c4 10             	add    esp,0x10
c0017e7d:	83 ec 04             	sub    esp,0x4
c0017e80:	6a 0c                	push   0xc
c0017e82:	68 74 b0 02 c0       	push   0xc002b074
c0017e87:	68 85 b0 02 c0       	push   0xc002b085
c0017e8c:	e8 94 2c 00 00       	call   c001ab25 <Reg::readIntWithDefault(char*, char*, int)>
c0017e91:	83 c4 10             	add    esp,0x10
c0017e94:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017e9b:	83 ec 0c             	sub    esp,0xc
c0017e9e:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017ea5:	e8 25 95 ff ff       	call   c00113cf <Virt::setupPageSwapping(int)>
c0017eaa:	83 c4 10             	add    esp,0x10
c0017ead:	83 ec 0c             	sub    esp,0xc
c0017eb0:	68 35 9d 02 c0       	push   0xc0029d35
c0017eb5:	e8 3c 77 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0017eba:	83 c4 10             	add    esp,0x10
c0017ebd:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c0017ec3:	83 ec 08             	sub    esp,0x8
c0017ec6:	6a 01                	push   0x1
c0017ec8:	68 8c b0 02 c0       	push   0xc002b08c
c0017ecd:	e8 61 50 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	83 ec 08             	sub    esp,0x8
c0017ed8:	53                   	push   ebx
c0017ed9:	50                   	push   eax
c0017eda:	e8 82 52 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c0017edf:	83 c4 10             	add    esp,0x10
c0017ee2:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017ee9:	83 ec 08             	sub    esp,0x8
c0017eec:	6a 12                	push   0x12
c0017eee:	50                   	push   eax
c0017eef:	e8 c6 be ff ff       	call   c0013dba <getDevicesOfType(DeviceType)>
c0017ef4:	83 c4 0c             	add    esp,0xc
c0017ef7:	83 ec 0c             	sub    esp,0xc
c0017efa:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f01:	50                   	push   eax
c0017f02:	e8 8d 09 01 00       	call   c0028894 <LinkedList<Device>::isEmpty()>
c0017f07:	83 c4 10             	add    esp,0x10
c0017f0a:	83 f0 01             	xor    eax,0x1
c0017f0d:	84 c0                	test   al,al
c0017f0f:	0f 84 43 01 00 00    	je     c0018058 <ACPI::open(int, int, void*)+0x226>
c0017f15:	83 ec 0c             	sub    esp,0xc
c0017f18:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f1f:	50                   	push   eax
c0017f20:	e8 8b 09 01 00       	call   c00288b0 <LinkedList<Device>::getFirstElement()>
c0017f25:	83 c4 10             	add    esp,0x10
c0017f28:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017f2f:	83 ec 0c             	sub    esp,0xc
c0017f32:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f39:	50                   	push   eax
c0017f3a:	e8 79 09 01 00       	call   c00288b8 <LinkedList<Device>::removeFirst()>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017f49:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017f50:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017f57:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017f5b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017f61:	ba 09 00 00 00       	mov    edx,0x9
c0017f66:	fc                   	cld    
c0017f67:	89 c7                	mov    edi,eax
c0017f69:	89 de                	mov    esi,ebx
c0017f6b:	89 d1                	mov    ecx,edx
c0017f6d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f6f:	83 ec 08             	sub    esp,0x8
c0017f72:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017f76:	50                   	push   eax
c0017f77:	83 ec 24             	sub    esp,0x24
c0017f7a:	89 e0                	mov    eax,esp
c0017f7c:	89 c3                	mov    ebx,eax
c0017f7e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017f82:	ba 09 00 00 00       	mov    edx,0x9
c0017f87:	89 df                	mov    edi,ebx
c0017f89:	89 c6                	mov    esi,eax
c0017f8b:	89 d1                	mov    ecx,edx
c0017f8d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017f8f:	e8 d8 a7 00 00       	call   c002276c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017f94:	83 c4 30             	add    esp,0x30
c0017f97:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017f9e:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017fa6:	0f 84 4b ff ff ff    	je     c0017ef7 <ACPI::open(int, int, void*)+0xc5>
c0017fac:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017fb7:	83 ec 0c             	sub    esp,0xc
c0017fba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017fc1:	e8 d6 75 ff ff       	call   c000f59c <malloc>
c0017fc6:	83 c4 10             	add    esp,0x10
c0017fc9:	89 c3                	mov    ebx,eax
c0017fcb:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0017fd0:	83 ec 04             	sub    esp,0x4
c0017fd3:	50                   	push   eax
c0017fd4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017fdb:	53                   	push   ebx
c0017fdc:	e8 7b ab ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017feb:	83 ec 0c             	sub    esp,0xc
c0017fee:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017ff5:	e8 34 ae ff ff       	call   c0012e2e <File::exists()>
c0017ffa:	83 c4 10             	add    esp,0x10
c0017ffd:	84 c0                	test   al,al
c0017fff:	74 27                	je     c0018028 <ACPI::open(int, int, void*)+0x1f6>
c0018001:	83 ec 08             	sub    esp,0x8
c0018004:	6a 01                	push   0x1
c0018006:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001800d:	e8 21 4f 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c0018012:	83 c4 10             	add    esp,0x10
c0018015:	83 ec 08             	sub    esp,0x8
c0018018:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001801f:	50                   	push   eax
c0018020:	e8 3c 51 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c0018025:	83 c4 10             	add    esp,0x10
c0018028:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018030:	0f 84 c1 fe ff ff    	je     c0017ef7 <ACPI::open(int, int, void*)+0xc5>
c0018036:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001803d:	8b 00                	mov    eax,DWORD PTR [eax]
c001803f:	83 c0 08             	add    eax,0x8
c0018042:	8b 00                	mov    eax,DWORD PTR [eax]
c0018044:	83 ec 0c             	sub    esp,0xc
c0018047:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001804e:	ff d0                	call   eax
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	e9 9f fe ff ff       	jmp    c0017ef7 <ACPI::open(int, int, void*)+0xc5>
c0018058:	83 ec 0c             	sub    esp,0xc
c001805b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018062:	50                   	push   eax
c0018063:	e8 2a 08 01 00       	call   c0028892 <LinkedList<Device>::~LinkedList()>
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c0018071:	83 ec 08             	sub    esp,0x8
c0018074:	6a 01                	push   0x1
c0018076:	68 a7 b0 02 c0       	push   0xc002b0a7
c001807b:	e8 b3 4e 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c0018080:	83 c4 10             	add    esp,0x10
c0018083:	83 ec 08             	sub    esp,0x8
c0018086:	53                   	push   ebx
c0018087:	50                   	push   eax
c0018088:	e8 d4 50 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	8b 1d 88 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d788
c0018096:	83 ec 08             	sub    esp,0x8
c0018099:	6a 01                	push   0x1
c001809b:	68 c4 b0 02 c0       	push   0xc002b0c4
c00180a0:	e8 8e 4e 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c00180a5:	83 c4 10             	add    esp,0x10
c00180a8:	83 ec 08             	sub    esp,0x8
c00180ab:	53                   	push   ebx
c00180ac:	50                   	push   eax
c00180ad:	e8 af 50 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c00180b2:	83 c4 10             	add    esp,0x10
c00180b5:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00180ba:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00180c0:	83 e0 04             	and    eax,0x4
c00180c3:	84 c0                	test   al,al
c00180c5:	0f 84 0d 01 00 00    	je     c00181d8 <ACPI::open(int, int, void*)+0x3a6>
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	68 e1 b0 02 c0       	push   0xc002b0e1
c00180d3:	e8 1e 75 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00180e6:	83 ec 0c             	sub    esp,0xc
c00180e9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00180f0:	e8 a7 74 ff ff       	call   c000f59c <malloc>
c00180f5:	83 c4 10             	add    esp,0x10
c00180f8:	89 c3                	mov    ebx,eax
c00180fa:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c00180ff:	83 ec 04             	sub    esp,0x4
c0018102:	50                   	push   eax
c0018103:	68 fe b0 02 c0       	push   0xc002b0fe
c0018108:	53                   	push   ebx
c0018109:	e8 4e aa ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001810e:	83 c4 10             	add    esp,0x10
c0018111:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018118:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018120:	74 1a                	je     c001813c <ACPI::open(int, int, void*)+0x30a>
c0018122:	83 ec 0c             	sub    esp,0xc
c0018125:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001812c:	e8 fd ac ff ff       	call   c0012e2e <File::exists()>
c0018131:	83 c4 10             	add    esp,0x10
c0018134:	84 c0                	test   al,al
c0018136:	74 04                	je     c001813c <ACPI::open(int, int, void*)+0x30a>
c0018138:	b0 01                	mov    al,0x1
c001813a:	eb 02                	jmp    c001813e <ACPI::open(int, int, void*)+0x30c>
c001813c:	b0 00                	mov    al,0x0
c001813e:	84 c0                	test   al,al
c0018140:	74 25                	je     c0018167 <ACPI::open(int, int, void*)+0x335>
c0018142:	83 ec 08             	sub    esp,0x8
c0018145:	6a 01                	push   0x1
c0018147:	68 fe b0 02 c0       	push   0xc002b0fe
c001814c:	e8 e2 4d 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	83 ec 08             	sub    esp,0x8
c0018157:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001815e:	50                   	push   eax
c001815f:	e8 fd 4f 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001816f:	74 27                	je     c0018198 <ACPI::open(int, int, void*)+0x366>
c0018171:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018179:	74 1d                	je     c0018198 <ACPI::open(int, int, void*)+0x366>
c001817b:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018182:	8b 00                	mov    eax,DWORD PTR [eax]
c0018184:	83 c0 08             	add    eax,0x8
c0018187:	8b 00                	mov    eax,DWORD PTR [eax]
c0018189:	83 ec 0c             	sub    esp,0xc
c001818c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018193:	ff d0                	call   eax
c0018195:	83 c4 10             	add    esp,0x10
c0018198:	a1 48 00 03 c0       	mov    eax,ds:0xc0030048
c001819d:	83 ec 08             	sub    esp,0x8
c00181a0:	68 1b b1 02 c0       	push   0xc002b11b
c00181a5:	50                   	push   eax
c00181a6:	e8 43 f3 ff ff       	call   c00174ee <findDataTable(unsigned char*, char*)>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00181b5:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00181bd:	74 19                	je     c00181d8 <ACPI::open(int, int, void*)+0x3a6>
c00181bf:	83 ec 08             	sub    esp,0x8
c00181c2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00181c9:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00181d0:	e8 fd fb ff ff       	call   c0017dd2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	b8 00 00 00 00       	mov    eax,0x0
c00181dd:	81 c4 60 01 00 00    	add    esp,0x160
c00181e3:	5b                   	pop    ebx
c00181e4:	5e                   	pop    esi
c00181e5:	5f                   	pop    edi
c00181e6:	c3                   	ret    
c00181e7:	90                   	nop

c00181e8 <CPU::close(int, int, void*)>:
c00181e8:	31 c0                	xor    eax,eax
c00181ea:	c3                   	ret    
c00181eb:	90                   	nop

c00181ec <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00181ec:	55                   	push   ebp
c00181ed:	57                   	push   edi
c00181ee:	56                   	push   esi
c00181ef:	53                   	push   ebx
c00181f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181f8:	89 ce                	mov    esi,ecx
c00181fa:	89 d5                	mov    ebp,edx
c00181fc:	80 f9 04             	cmp    cl,0x4
c00181ff:	75 28                	jne    c0018229 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018201:	8d 42 f9             	lea    eax,[edx-0x7]
c0018204:	3c 03                	cmp    al,0x3
c0018206:	0f 86 63 01 00 00    	jbe    c001836f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001820c:	80 fa 03             	cmp    dl,0x3
c001820f:	0f 84 5a 01 00 00    	je     c001836f <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018215:	8d 7a f2             	lea    edi,[edx-0xe]
c0018218:	b8 b0 cb 02 c0       	mov    eax,0xc002cbb0
c001821d:	89 fb                	mov    ebx,edi
c001821f:	80 fb 01             	cmp    bl,0x1
c0018222:	77 4e                	ja     c0018272 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018224:	e9 52 01 00 00       	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018229:	80 f9 05             	cmp    cl,0x5
c001822c:	75 4d                	jne    c001827b <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001822e:	b8 c0 cb 02 c0       	mov    eax,0xc002cbc0
c0018233:	80 fa 03             	cmp    dl,0x3
c0018236:	0f 86 3f 01 00 00    	jbe    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823c:	8d 7a fa             	lea    edi,[edx-0x6]
c001823f:	b8 d0 cb 02 c0       	mov    eax,0xc002cbd0
c0018244:	89 fb                	mov    ebx,edi
c0018246:	80 fb 01             	cmp    bl,0x1
c0018249:	0f 86 2c 01 00 00    	jbe    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001824f:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c0018254:	80 fa 08             	cmp    dl,0x8
c0018257:	0f 84 1e 01 00 00    	je     c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001825d:	89 d7                	mov    edi,edx
c001825f:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c0018264:	83 e7 fb             	and    edi,0xfffffffb
c0018267:	89 fb                	mov    ebx,edi
c0018269:	80 fb 09             	cmp    bl,0x9
c001826c:	0f 84 09 01 00 00    	je     c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018272:	31 c0                	xor    eax,eax
c0018274:	89 eb                	mov    ebx,ebp
c0018276:	0f b6 fb             	movzx  edi,bl
c0018279:	eb 30                	jmp    c00182ab <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001827b:	31 c0                	xor    eax,eax
c001827d:	80 f9 06             	cmp    cl,0x6
c0018280:	75 f2                	jne    c0018274 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018282:	80 fa 0a             	cmp    dl,0xa
c0018285:	77 ed                	ja     c0018274 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018287:	bf de 05 00 00       	mov    edi,0x5de
c001828c:	0f a3 d7             	bt     edi,edx
c001828f:	73 e3                	jae    c0018274 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018291:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018296:	e9 e0 00 00 00       	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001829b:	39 c7                	cmp    edi,eax
c001829d:	0f 84 d3 00 00 00    	je     c0018376 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182a3:	40                   	inc    eax
c00182a4:	3d d0 00 00 00       	cmp    eax,0xd0
c00182a9:	74 09                	je     c00182b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00182ab:	89 f3                	mov    ebx,esi
c00182ad:	80 fb 0f             	cmp    bl,0xf
c00182b0:	75 f1                	jne    c00182a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00182b2:	eb e7                	jmp    c001829b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00182b4:	80 f9 10             	cmp    cl,0x10
c00182b7:	75 14                	jne    c00182cd <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00182b9:	8d 42 fc             	lea    eax,[edx-0x4]
c00182bc:	83 e0 fb             	and    eax,0xfffffffb
c00182bf:	3c 02                	cmp    al,0x2
c00182c1:	76 34                	jbe    c00182f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00182c3:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00182c8:	80 fa 02             	cmp    dl,0x2
c00182cb:	eb 24                	jmp    c00182f1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00182cd:	80 f9 11             	cmp    cl,0x11
c00182d0:	75 13                	jne    c00182e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00182d2:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00182d7:	80 fa 03             	cmp    dl,0x3
c00182da:	0f 85 9b 00 00 00    	jne    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182e0:	e9 91 00 00 00       	jmp    c0018376 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00182e5:	80 f9 12             	cmp    cl,0x12
c00182e8:	75 14                	jne    c00182fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00182ea:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00182ef:	fe ca                	dec    dl
c00182f1:	0f 85 84 00 00 00    	jne    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f7:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c00182fc:	eb 7d                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182fe:	80 f9 14             	cmp    cl,0x14
c0018301:	75 12                	jne    c0018315 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018303:	4a                   	dec    edx
c0018304:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c0018309:	80 fa 01             	cmp    dl,0x1
c001830c:	77 6d                	ja     c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001830e:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c0018313:	eb 66                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018315:	80 f9 15             	cmp    cl,0x15
c0018318:	75 31                	jne    c001834b <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001831a:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c001831f:	80 fa 01             	cmp    dl,0x1
c0018322:	74 57                	je     c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018324:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c0018329:	80 fa 13             	cmp    dl,0x13
c001832c:	76 0c                	jbe    c001833a <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001832e:	80 fa 30             	cmp    dl,0x30
c0018331:	75 48                	jne    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018333:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c0018338:	eb 41                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001833a:	b9 04 00 09 00       	mov    ecx,0x90004
c001833f:	0f a3 d1             	bt     ecx,edx
c0018342:	73 37                	jae    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018344:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c0018349:	eb 30                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001834b:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c0018350:	80 f9 16             	cmp    cl,0x16
c0018353:	75 26                	jne    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018355:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c001835a:	84 d2                	test   dl,dl
c001835c:	74 1d                	je     c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001835e:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c0018363:	80 fa 30             	cmp    dl,0x30
c0018366:	75 13                	jne    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018368:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c001836d:	eb 0c                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001836f:	b8 a0 cb 02 c0       	mov    eax,0xc002cba0
c0018374:	eb 05                	jmp    c001837b <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018376:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c001837b:	5b                   	pop    ebx
c001837c:	5e                   	pop    esi
c001837d:	5f                   	pop    edi
c001837e:	5d                   	pop    ebp
c001837f:	c3                   	ret    

c0018380 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018380:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018388:	80 f9 04             	cmp    cl,0x4
c001838b:	75 6b                	jne    c00183f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001838d:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c0018392:	80 fa 01             	cmp    dl,0x1
c0018395:	0f 86 92 02 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001839b:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c00183a0:	80 fa 02             	cmp    dl,0x2
c00183a3:	0f 84 84 02 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a9:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00183ae:	80 fa 03             	cmp    dl,0x3
c00183b1:	0f 84 76 02 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b7:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c00183bc:	80 fa 04             	cmp    dl,0x4
c00183bf:	0f 84 68 02 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183c5:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c00183ca:	80 fa 05             	cmp    dl,0x5
c00183cd:	0f 84 5a 02 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183d3:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c00183d8:	80 fa 07             	cmp    dl,0x7
c00183db:	0f 84 4c 02 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e1:	83 ea 08             	sub    edx,0x8
c00183e4:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00183e9:	80 fa 01             	cmp    dl,0x1
c00183ec:	0f 87 3b 02 00 00    	ja     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183f2:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c00183f7:	c3                   	ret    
c00183f8:	80 f9 05             	cmp    cl,0x5
c00183fb:	75 45                	jne    c0018442 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00183fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018400:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c0018405:	80 f9 02             	cmp    cl,0x2
c0018408:	0f 86 1f 02 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001840e:	80 fa 04             	cmp    dl,0x4
c0018411:	0f 84 f3 01 00 00    	je     c001860a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018417:	80 fa 07             	cmp    dl,0x7
c001841a:	0f 84 0d 02 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018420:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c0018425:	80 fa 08             	cmp    dl,0x8
c0018428:	0f 84 ff 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001842e:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c0018433:	80 fa 09             	cmp    dl,0x9
c0018436:	0f 85 f1 01 00 00    	jne    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001843c:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c0018441:	c3                   	ret    
c0018442:	80 f9 06             	cmp    cl,0x6
c0018445:	0f 85 85 01 00 00    	jne    c00185d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001844b:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c0018450:	80 fa 01             	cmp    dl,0x1
c0018453:	0f 84 d4 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018459:	8d 42 fb             	lea    eax,[edx-0x5]
c001845c:	3c 01                	cmp    al,0x1
c001845e:	0f 86 ac 01 00 00    	jbe    c0018610 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018464:	80 fa 03             	cmp    dl,0x3
c0018467:	0f 84 a3 01 00 00    	je     c0018610 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001846d:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018470:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c0018475:	80 f9 01             	cmp    cl,0x1
c0018478:	0f 86 af 01 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847e:	80 fa 09             	cmp    dl,0x9
c0018481:	0f 84 8f 01 00 00    	je     c0018616 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018487:	8d 4a f6             	lea    ecx,[edx-0xa]
c001848a:	80 f9 01             	cmp    cl,0x1
c001848d:	0f 86 9a 01 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018493:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018498:	80 fa 0d             	cmp    dl,0xd
c001849b:	0f 84 8c 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a1:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c00184a6:	80 fa 0e             	cmp    dl,0xe
c00184a9:	0f 84 7e 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184af:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c00184b4:	80 fa 0f             	cmp    dl,0xf
c00184b7:	0f 84 70 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184bd:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c00184c2:	80 fa 15             	cmp    dl,0x15
c00184c5:	0f 84 62 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184cb:	8d 4a ea             	lea    ecx,[edx-0x16]
c00184ce:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c00184d3:	80 f9 01             	cmp    cl,0x1
c00184d6:	0f 86 51 01 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184dc:	80 fa 1a             	cmp    dl,0x1a
c00184df:	0f 84 37 01 00 00    	je     c001861c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00184e5:	80 fa 1c             	cmp    dl,0x1c
c00184e8:	0f 84 34 01 00 00    	je     c0018622 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00184ee:	80 fa 1d             	cmp    dl,0x1d
c00184f1:	0f 84 36 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f7:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c00184fc:	80 fa 25             	cmp    dl,0x25
c00184ff:	0f 84 28 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018505:	8d 4a da             	lea    ecx,[edx-0x26]
c0018508:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c001850d:	80 f9 01             	cmp    cl,0x1
c0018510:	0f 86 17 01 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018516:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c001851b:	80 fa 2a             	cmp    dl,0x2a
c001851e:	0f 84 09 01 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018524:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c0018529:	80 fa 2c             	cmp    dl,0x2c
c001852c:	0f 84 fb 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018532:	b8 20 cb 02 c0       	mov    eax,0xc002cb20
c0018537:	80 fa 2d             	cmp    dl,0x2d
c001853a:	0f 84 ed 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018540:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c0018545:	80 fa 2e             	cmp    dl,0x2e
c0018548:	0f 84 df 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854e:	b8 10 cb 02 c0       	mov    eax,0xc002cb10
c0018553:	80 fa 2f             	cmp    dl,0x2f
c0018556:	0f 84 d1 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855c:	8d 4a cb             	lea    ecx,[edx-0x35]
c001855f:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0018564:	80 f9 01             	cmp    cl,0x1
c0018567:	0f 86 c0 00 00 00    	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001856d:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c0018572:	80 fa 37             	cmp    dl,0x37
c0018575:	0f 84 b2 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001857b:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c0018580:	80 fa 3a             	cmp    dl,0x3a
c0018583:	0f 84 a4 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018589:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c001858e:	80 fa 3c             	cmp    dl,0x3c
c0018591:	0f 84 96 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018597:	b8 60 cb 02 c0       	mov    eax,0xc002cb60
c001859c:	80 fa 3d             	cmp    dl,0x3d
c001859f:	0f 84 88 00 00 00    	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a5:	b8 40 cb 02 c0       	mov    eax,0xc002cb40
c00185aa:	80 fa 3e             	cmp    dl,0x3e
c00185ad:	74 7e                	je     c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185af:	8d 42 bb             	lea    eax,[edx-0x45]
c00185b2:	3c 01                	cmp    al,0x1
c00185b4:	76 72                	jbe    c0018628 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00185b6:	80 fa 3f             	cmp    dl,0x3f
c00185b9:	74 6d                	je     c0018628 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00185bb:	80 fa 4a             	cmp    dl,0x4a
c00185be:	74 0a                	je     c00185ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00185c0:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00185c5:	80 fa 4d             	cmp    dl,0x4d
c00185c8:	75 63                	jne    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ca:	b8 30 cb 02 c0       	mov    eax,0xc002cb30
c00185cf:	c3                   	ret    
c00185d0:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00185d5:	80 f9 0b             	cmp    cl,0xb
c00185d8:	75 0a                	jne    c00185e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00185da:	fe ca                	dec    dl
c00185dc:	75 4f                	jne    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185de:	b8 70 cb 02 c0       	mov    eax,0xc002cb70
c00185e3:	c3                   	ret    
c00185e4:	80 f9 0f             	cmp    cl,0xf
c00185e7:	75 44                	jne    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e9:	b8 80 cb 02 c0       	mov    eax,0xc002cb80
c00185ee:	80 fa 02             	cmp    dl,0x2
c00185f1:	76 3a                	jbe    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f3:	8d 42 fd             	lea    eax,[edx-0x3]
c00185f6:	3c 01                	cmp    al,0x1
c00185f8:	76 0a                	jbe    c0018604 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00185fa:	b8 a1 b2 02 c0       	mov    eax,0xc002b2a1
c00185ff:	80 fa 06             	cmp    dl,0x6
c0018602:	75 29                	jne    c001862d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018604:	b8 90 cb 02 c0       	mov    eax,0xc002cb90
c0018609:	c3                   	ret    
c001860a:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c001860f:	c3                   	ret    
c0018610:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c0018615:	c3                   	ret    
c0018616:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c001861b:	c3                   	ret    
c001861c:	b8 f0 ca 02 c0       	mov    eax,0xc002caf0
c0018621:	c3                   	ret    
c0018622:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0018627:	c3                   	ret    
c0018628:	b8 50 cb 02 c0       	mov    eax,0xc002cb50
c001862d:	c3                   	ret    

c001862e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001862e:	60                   	pusha  
c001862f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018633:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001863b:	9c                   	pushf  
c001863c:	fa                   	cli    
c001863d:	0f 09                	wbinvd 
c001863f:	0f 30                	wrmsr  
c0018641:	9d                   	popf   
c0018642:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018646:	89 02                	mov    DWORD PTR [edx],eax
c0018648:	61                   	popa   
c0018649:	c3                   	ret    

c001864a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001864a:	60                   	pusha  
c001864b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001864f:	9c                   	pushf  
c0018650:	fa                   	cli    
c0018651:	0f 09                	wbinvd 
c0018653:	31 c0                	xor    eax,eax
c0018655:	31 d2                	xor    edx,edx
c0018657:	0f 32                	rdmsr  
c0018659:	9d                   	popf   
c001865a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001865e:	89 02                	mov    DWORD PTR [edx],eax
c0018660:	61                   	popa   
c0018661:	c3                   	ret    

c0018662 <CPU::AMD_K6_writeback(int, int, int)>:
c0018662:	56                   	push   esi
c0018663:	53                   	push   ebx
c0018664:	83 ec 10             	sub    esp,0x10
c0018667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001866b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018670:	75 5d                	jne    c00186cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018672:	83 f8 08             	cmp    eax,0x8
c0018675:	75 09                	jne    c0018680 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018677:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001867c:	7e 13                	jle    c0018691 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001867e:	eb 30                	jmp    c00186b0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018680:	83 f8 06             	cmp    eax,0x6
c0018683:	7c 4a                	jl     c00186cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018685:	83 f8 07             	cmp    eax,0x7
c0018688:	7e 07                	jle    c0018691 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001868a:	83 f8 09             	cmp    eax,0x9
c001868d:	74 21                	je     c00186b0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001868f:	eb 3e                	jmp    c00186cf <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018691:	89 e6                	mov    esi,esp
c0018693:	8b 1d c8 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7c8
c0018699:	56                   	push   esi
c001869a:	c1 eb 15             	shr    ebx,0x15
c001869d:	68 82 00 00 c0       	push   0xc0000082
c00186a2:	83 e3 7e             	and    ebx,0x7e
c00186a5:	e8 a0 ff ff ff       	call   c001864a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00186aa:	56                   	push   esi
c00186ab:	6a 00                	push   0x0
c00186ad:	53                   	push   ebx
c00186ae:	eb 12                	jmp    c00186c2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00186b0:	89 e3                	mov    ebx,esp
c00186b2:	53                   	push   ebx
c00186b3:	68 82 00 00 c0       	push   0xc0000082
c00186b8:	e8 8d ff ff ff       	call   c001864a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00186bd:	53                   	push   ebx
c00186be:	6a 00                	push   0x0
c00186c0:	6a 00                	push   0x0
c00186c2:	68 82 00 00 c0       	push   0xc0000082
c00186c7:	e8 62 ff ff ff       	call   c001862e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00186cc:	83 c4 18             	add    esp,0x18
c00186cf:	83 c4 10             	add    esp,0x10
c00186d2:	5b                   	pop    ebx
c00186d3:	5e                   	pop    esi
c00186d4:	c3                   	ret    
c00186d5:	90                   	nop

c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00186d6:	55                   	push   ebp
c00186d7:	57                   	push   edi
c00186d8:	56                   	push   esi
c00186d9:	53                   	push   ebx
c00186da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186de:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00186e2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00186e6:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00186ea:	39 05 a0 cc 02 c0    	cmp    DWORD PTR ds:0xc002cca0,eax
c00186f0:	75 23                	jne    c0018715 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00186f2:	a1 ac 02 03 c0       	mov    eax,ds:0xc00302ac
c00186f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186fb:	89 06                	mov    DWORD PTR [esi],eax
c00186fd:	a1 a8 02 03 c0       	mov    eax,ds:0xc00302a8
c0018702:	89 07                	mov    DWORD PTR [edi],eax
c0018704:	a1 a4 02 03 c0       	mov    eax,ds:0xc00302a4
c0018709:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001870c:	a1 a0 02 03 c0       	mov    eax,ds:0xc00302a0
c0018711:	89 02                	mov    DWORD PTR [edx],eax
c0018713:	eb 3f                	jmp    c0018754 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018715:	31 c9                	xor    ecx,ecx
c0018717:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001871b:	0f a2                	cpuid  
c001871d:	89 06                	mov    DWORD PTR [esi],eax
c001871f:	89 1f                	mov    DWORD PTR [edi],ebx
c0018721:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018725:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018728:	89 10                	mov    DWORD PTR [eax],edx
c001872a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001872e:	a3 a0 cc 02 c0       	mov    ds:0xc002cca0,eax
c0018733:	8b 06                	mov    eax,DWORD PTR [esi]
c0018735:	a3 ac 02 03 c0       	mov    ds:0xc00302ac,eax
c001873a:	8b 07                	mov    eax,DWORD PTR [edi]
c001873c:	a3 a8 02 03 c0       	mov    ds:0xc00302a8,eax
c0018741:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018744:	a3 a4 02 03 c0       	mov    ds:0xc00302a4,eax
c0018749:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001874d:	8b 00                	mov    eax,DWORD PTR [eax]
c001874f:	a3 a0 02 03 c0       	mov    ds:0xc00302a0,eax
c0018754:	5b                   	pop    ebx
c0018755:	5e                   	pop    esi
c0018756:	5f                   	pop    edi
c0018757:	5d                   	pop    ebp
c0018758:	c3                   	ret    
c0018759:	90                   	nop

c001875a <CPU::cpuidCheckEDX(unsigned int)>:
c001875a:	83 ec 10             	sub    esp,0x10
c001875d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018761:	50                   	push   eax
c0018762:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018766:	50                   	push   eax
c0018767:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001876b:	50                   	push   eax
c001876c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018770:	50                   	push   eax
c0018771:	6a 01                	push   0x1
c0018773:	e8 5e ff ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018778:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001877c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018780:	0f 95 c0             	setne  al
c0018783:	83 c4 24             	add    esp,0x24
c0018786:	c3                   	ret    
c0018787:	90                   	nop

c0018788 <CPU::cpuidCheckECX(unsigned int)>:
c0018788:	83 ec 10             	sub    esp,0x10
c001878b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001878f:	50                   	push   eax
c0018790:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018794:	50                   	push   eax
c0018795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018799:	50                   	push   eax
c001879a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001879e:	50                   	push   eax
c001879f:	6a 01                	push   0x1
c00187a1:	e8 30 ff ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00187ae:	0f 95 c0             	setne  al
c00187b1:	83 c4 24             	add    esp,0x24
c00187b4:	c3                   	ret    
c00187b5:	90                   	nop

c00187b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00187b6:	83 ec 10             	sub    esp,0x10
c00187b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187bd:	50                   	push   eax
c00187be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c2:	50                   	push   eax
c00187c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187c7:	50                   	push   eax
c00187c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187cc:	50                   	push   eax
c00187cd:	6a 07                	push   0x7
c00187cf:	e8 02 ff ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187d8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00187dc:	0f 95 c0             	setne  al
c00187df:	83 c4 24             	add    esp,0x24
c00187e2:	c3                   	ret    
c00187e3:	90                   	nop

c00187e4 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00187e4:	83 ec 10             	sub    esp,0x10
c00187e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187eb:	50                   	push   eax
c00187ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187f0:	50                   	push   eax
c00187f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187f5:	50                   	push   eax
c00187f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187fa:	50                   	push   eax
c00187fb:	6a 07                	push   0x7
c00187fd:	e8 d4 fe ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018806:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001880a:	0f 95 c0             	setne  al
c001880d:	83 c4 24             	add    esp,0x24
c0018810:	c3                   	ret    
c0018811:	90                   	nop

c0018812 <CPU::CPU()>:
c0018812:	83 ec 0c             	sub    esp,0xc
c0018815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018819:	83 ec 08             	sub    esp,0x8
c001881c:	68 a1 b2 02 c0       	push   0xc002b2a1
c0018821:	50                   	push   eax
c0018822:	e8 13 b4 ff ff       	call   c0013c3a <Device::Device(char const*)>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	ba 78 b3 02 c0       	mov    edx,0xc002b378
c001882f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018833:	89 10                	mov    DWORD PTR [eax],edx
c0018835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018839:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018847:	05 78 01 00 00       	add    eax,0x178
c001884c:	83 ec 0c             	sub    esp,0xc
c001884f:	50                   	push   eax
c0018850:	e8 77 65 ff ff       	call   c000edcc <GDT::GDT()>
c0018855:	83 c4 10             	add    esp,0x10
c0018858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885c:	05 7c 09 00 00       	add    eax,0x97c
c0018861:	83 ec 0c             	sub    esp,0xc
c0018864:	50                   	push   eax
c0018865:	e8 b2 67 ff ff       	call   c000f01c <IDT::IDT()>
c001886a:	83 c4 10             	add    esp,0x10
c001886d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018871:	05 7c 11 00 00       	add    eax,0x117c
c0018876:	83 ec 0c             	sub    esp,0xc
c0018879:	50                   	push   eax
c001887a:	e8 8d 82 ff ff       	call   c0010b0c <TSS::TSS()>
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018886:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001888d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018891:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001889b:	90                   	nop
c001889c:	83 c4 0c             	add    esp,0xc
c001889f:	c3                   	ret    

c00188a0 <CPU::displayFeatures()>:
c00188a0:	c3                   	ret    
c00188a1:	90                   	nop

c00188a2 <CPU::detectFeatures()>:
c00188a2:	55                   	push   ebp
c00188a3:	57                   	push   edi
c00188a4:	56                   	push   esi
c00188a5:	53                   	push   ebx
c00188a6:	83 ec 50             	sub    esp,0x50
c00188a9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00188ad:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00188b7:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00188be:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00188c4:	6a 0d                	push   0xd
c00188c6:	6a 00                	push   0x0
c00188c8:	55                   	push   ebp
c00188c9:	e8 82 7e fe ff       	call   c0000750 <memset>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00188d6:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00188dd:	0f 84 22 09 00 00    	je     c0019205 <CPU::detectFeatures()+0x963>
c00188e3:	83 ec 0c             	sub    esp,0xc
c00188e6:	89 ef                	mov    edi,ebp
c00188e8:	6a 10                	push   0x10
c00188ea:	e8 6b fe ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c00188ef:	83 e0 01             	and    eax,0x1
c00188f2:	8d 14 00             	lea    edx,[eax+eax*1]
c00188f5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188fb:	83 e0 fd             	and    eax,0xfffffffd
c00188fe:	09 d0                	or     eax,edx
c0018900:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018906:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001890d:	e8 48 fe ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c0018912:	83 e0 01             	and    eax,0x1
c0018915:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001891c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018922:	83 e0 fb             	and    eax,0xfffffffb
c0018925:	09 d0                	or     eax,edx
c0018927:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001892d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018934:	e8 21 fe ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c0018939:	83 e0 01             	and    eax,0x1
c001893c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018943:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018949:	83 e0 f7             	and    eax,0xfffffff7
c001894c:	09 d0                	or     eax,edx
c001894e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018954:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001895b:	e8 fa fd ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c0018960:	83 e0 01             	and    eax,0x1
c0018963:	c1 e0 04             	shl    eax,0x4
c0018966:	88 c2                	mov    dl,al
c0018968:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001896e:	83 e0 ef             	and    eax,0xffffffef
c0018971:	09 d0                	or     eax,edx
c0018973:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018979:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018980:	e8 d5 fd ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c0018985:	83 e0 01             	and    eax,0x1
c0018988:	c1 e0 05             	shl    eax,0x5
c001898b:	88 c2                	mov    dl,al
c001898d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018993:	83 e0 df             	and    eax,0xffffffdf
c0018996:	09 d0                	or     eax,edx
c0018998:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001899e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00189a5:	e8 b0 fd ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c00189aa:	83 e0 01             	and    eax,0x1
c00189ad:	8d 14 00             	lea    edx,[eax+eax*1]
c00189b0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189b6:	83 e0 fd             	and    eax,0xfffffffd
c00189b9:	09 d0                	or     eax,edx
c00189bb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00189c1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00189c8:	e8 8d fd ff ff       	call   c001875a <CPU::cpuidCheckEDX(unsigned int)>
c00189cd:	83 e0 01             	and    eax,0x1
c00189d0:	c1 e0 06             	shl    eax,0x6
c00189d3:	88 c2                	mov    dl,al
c00189d5:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00189db:	83 e0 bf             	and    eax,0xffffffbf
c00189de:	09 d0                	or     eax,edx
c00189e0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00189e6:	58                   	pop    eax
c00189e7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189eb:	50                   	push   eax
c00189ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189f0:	50                   	push   eax
c00189f1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00189f5:	56                   	push   esi
c00189f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189fa:	50                   	push   eax
c00189fb:	6a 00                	push   0x0
c00189fd:	e8 d4 fc ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a02:	b8 04 00 00 00       	mov    eax,0x4
c0018a07:	89 c1                	mov    ecx,eax
c0018a09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a0b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018a11:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018a15:	89 c1                	mov    ecx,eax
c0018a17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a19:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018a1f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018a23:	89 c1                	mov    ecx,eax
c0018a25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a27:	83 c4 18             	add    esp,0x18
c0018a2a:	68 4c b1 02 c0       	push   0xc002b14c
c0018a2f:	55                   	push   ebp
c0018a30:	e8 63 7e fe ff       	call   c0000898 <strcmp>
c0018a35:	83 c4 10             	add    esp,0x10
c0018a38:	85 c0                	test   eax,eax
c0018a3a:	75 0f                	jne    c0018a4b <CPU::detectFeatures()+0x1a9>
c0018a3c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a46:	e9 22 02 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018a4b:	50                   	push   eax
c0018a4c:	50                   	push   eax
c0018a4d:	68 59 b1 02 c0       	push   0xc002b159
c0018a52:	55                   	push   ebp
c0018a53:	e8 40 7e fe ff       	call   c0000898 <strcmp>
c0018a58:	83 c4 10             	add    esp,0x10
c0018a5b:	85 c0                	test   eax,eax
c0018a5d:	74 dd                	je     c0018a3c <CPU::detectFeatures()+0x19a>
c0018a5f:	50                   	push   eax
c0018a60:	50                   	push   eax
c0018a61:	68 66 b1 02 c0       	push   0xc002b166
c0018a66:	55                   	push   ebp
c0018a67:	e8 2c 7e fe ff       	call   c0000898 <strcmp>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	85 c0                	test   eax,eax
c0018a71:	74 2a                	je     c0018a9d <CPU::detectFeatures()+0x1fb>
c0018a73:	50                   	push   eax
c0018a74:	50                   	push   eax
c0018a75:	68 73 b1 02 c0       	push   0xc002b173
c0018a7a:	55                   	push   ebp
c0018a7b:	e8 18 7e fe ff       	call   c0000898 <strcmp>
c0018a80:	83 c4 10             	add    esp,0x10
c0018a83:	85 c0                	test   eax,eax
c0018a85:	74 16                	je     c0018a9d <CPU::detectFeatures()+0x1fb>
c0018a87:	50                   	push   eax
c0018a88:	50                   	push   eax
c0018a89:	68 80 b1 02 c0       	push   0xc002b180
c0018a8e:	55                   	push   ebp
c0018a8f:	e8 04 7e fe ff       	call   c0000898 <strcmp>
c0018a94:	83 c4 10             	add    esp,0x10
c0018a97:	85 c0                	test   eax,eax
c0018a99:	74 48                	je     c0018ae3 <CPU::detectFeatures()+0x241>
c0018a9b:	eb 0f                	jmp    c0018aac <CPU::detectFeatures()+0x20a>
c0018a9d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018aa7:	e9 c1 01 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018aac:	50                   	push   eax
c0018aad:	50                   	push   eax
c0018aae:	68 8d b1 02 c0       	push   0xc002b18d
c0018ab3:	55                   	push   ebp
c0018ab4:	e8 df 7d fe ff       	call   c0000898 <strcmp>
c0018ab9:	83 c4 10             	add    esp,0x10
c0018abc:	85 c0                	test   eax,eax
c0018abe:	74 23                	je     c0018ae3 <CPU::detectFeatures()+0x241>
c0018ac0:	57                   	push   edi
c0018ac1:	57                   	push   edi
c0018ac2:	68 9a b1 02 c0       	push   0xc002b19a
c0018ac7:	55                   	push   ebp
c0018ac8:	e8 cb 7d fe ff       	call   c0000898 <strcmp>
c0018acd:	83 c4 10             	add    esp,0x10
c0018ad0:	85 c0                	test   eax,eax
c0018ad2:	75 1e                	jne    c0018af2 <CPU::detectFeatures()+0x250>
c0018ad4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018ade:	e9 8a 01 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018ae3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018aed:	e9 7b 01 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018af2:	56                   	push   esi
c0018af3:	56                   	push   esi
c0018af4:	68 a7 b1 02 c0       	push   0xc002b1a7
c0018af9:	55                   	push   ebp
c0018afa:	e8 99 7d fe ff       	call   c0000898 <strcmp>
c0018aff:	83 c4 10             	add    esp,0x10
c0018b02:	85 c0                	test   eax,eax
c0018b04:	75 0f                	jne    c0018b15 <CPU::detectFeatures()+0x273>
c0018b06:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018b10:	e9 58 01 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018b15:	51                   	push   ecx
c0018b16:	51                   	push   ecx
c0018b17:	68 66 b1 02 c0       	push   0xc002b166
c0018b1c:	55                   	push   ebp
c0018b1d:	e8 76 7d fe ff       	call   c0000898 <strcmp>
c0018b22:	83 c4 10             	add    esp,0x10
c0018b25:	85 c0                	test   eax,eax
c0018b27:	75 0f                	jne    c0018b38 <CPU::detectFeatures()+0x296>
c0018b29:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018b33:	e9 35 01 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018b38:	52                   	push   edx
c0018b39:	52                   	push   edx
c0018b3a:	68 b4 b1 02 c0       	push   0xc002b1b4
c0018b3f:	55                   	push   ebp
c0018b40:	e8 53 7d fe ff       	call   c0000898 <strcmp>
c0018b45:	83 c4 10             	add    esp,0x10
c0018b48:	85 c0                	test   eax,eax
c0018b4a:	75 0f                	jne    c0018b5b <CPU::detectFeatures()+0x2b9>
c0018b4c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b56:	e9 12 01 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018b5b:	50                   	push   eax
c0018b5c:	50                   	push   eax
c0018b5d:	68 c1 b1 02 c0       	push   0xc002b1c1
c0018b62:	55                   	push   ebp
c0018b63:	e8 30 7d fe ff       	call   c0000898 <strcmp>
c0018b68:	83 c4 10             	add    esp,0x10
c0018b6b:	85 c0                	test   eax,eax
c0018b6d:	75 0f                	jne    c0018b7e <CPU::detectFeatures()+0x2dc>
c0018b6f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018b79:	e9 ef 00 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018b7e:	50                   	push   eax
c0018b7f:	50                   	push   eax
c0018b80:	68 ce b1 02 c0       	push   0xc002b1ce
c0018b85:	55                   	push   ebp
c0018b86:	e8 0d 7d fe ff       	call   c0000898 <strcmp>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	85 c0                	test   eax,eax
c0018b90:	75 0f                	jne    c0018ba1 <CPU::detectFeatures()+0x2ff>
c0018b92:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b9c:	e9 cc 00 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018ba1:	50                   	push   eax
c0018ba2:	50                   	push   eax
c0018ba3:	68 db b1 02 c0       	push   0xc002b1db
c0018ba8:	55                   	push   ebp
c0018ba9:	e8 ea 7c fe ff       	call   c0000898 <strcmp>
c0018bae:	83 c4 10             	add    esp,0x10
c0018bb1:	85 c0                	test   eax,eax
c0018bb3:	75 0f                	jne    c0018bc4 <CPU::detectFeatures()+0x322>
c0018bb5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018bbf:	e9 a9 00 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018bc4:	50                   	push   eax
c0018bc5:	50                   	push   eax
c0018bc6:	68 e8 b1 02 c0       	push   0xc002b1e8
c0018bcb:	55                   	push   ebp
c0018bcc:	e8 c7 7c fe ff       	call   c0000898 <strcmp>
c0018bd1:	83 c4 10             	add    esp,0x10
c0018bd4:	85 c0                	test   eax,eax
c0018bd6:	75 0f                	jne    c0018be7 <CPU::detectFeatures()+0x345>
c0018bd8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018be2:	e9 86 00 00 00       	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018be7:	50                   	push   eax
c0018be8:	50                   	push   eax
c0018be9:	68 f5 b1 02 c0       	push   0xc002b1f5
c0018bee:	55                   	push   ebp
c0018bef:	e8 a4 7c fe ff       	call   c0000898 <strcmp>
c0018bf4:	83 c4 10             	add    esp,0x10
c0018bf7:	85 c0                	test   eax,eax
c0018bf9:	75 0c                	jne    c0018c07 <CPU::detectFeatures()+0x365>
c0018bfb:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018c05:	eb 66                	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018c07:	50                   	push   eax
c0018c08:	50                   	push   eax
c0018c09:	68 02 b2 02 c0       	push   0xc002b202
c0018c0e:	55                   	push   ebp
c0018c0f:	e8 84 7c fe ff       	call   c0000898 <strcmp>
c0018c14:	83 c4 10             	add    esp,0x10
c0018c17:	85 c0                	test   eax,eax
c0018c19:	75 0c                	jne    c0018c27 <CPU::detectFeatures()+0x385>
c0018c1b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018c25:	eb 46                	jmp    c0018c6d <CPU::detectFeatures()+0x3cb>
c0018c27:	57                   	push   edi
c0018c28:	57                   	push   edi
c0018c29:	68 0f b2 02 c0       	push   0xc002b20f
c0018c2e:	55                   	push   ebp
c0018c2f:	e8 64 7c fe ff       	call   c0000898 <strcmp>
c0018c34:	83 c4 10             	add    esp,0x10
c0018c37:	85 c0                	test   eax,eax
c0018c39:	74 e0                	je     c0018c1b <CPU::detectFeatures()+0x379>
c0018c3b:	56                   	push   esi
c0018c3c:	56                   	push   esi
c0018c3d:	68 1c b2 02 c0       	push   0xc002b21c
c0018c42:	55                   	push   ebp
c0018c43:	e8 50 7c fe ff       	call   c0000898 <strcmp>
c0018c48:	83 c4 10             	add    esp,0x10
c0018c4b:	85 c0                	test   eax,eax
c0018c4d:	74 cc                	je     c0018c1b <CPU::detectFeatures()+0x379>
c0018c4f:	51                   	push   ecx
c0018c50:	51                   	push   ecx
c0018c51:	68 29 b2 02 c0       	push   0xc002b229
c0018c56:	55                   	push   ebp
c0018c57:	e8 3c 7c fe ff       	call   c0000898 <strcmp>
c0018c5c:	83 c4 10             	add    esp,0x10
c0018c5f:	85 c0                	test   eax,eax
c0018c61:	74 b8                	je     c0018c1b <CPU::detectFeatures()+0x379>
c0018c63:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018c6d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018c72:	0f 86 be 00 00 00    	jbe    c0018d36 <CPU::detectFeatures()+0x494>
c0018c78:	83 ec 0c             	sub    esp,0xc
c0018c7b:	68 80 00 00 00       	push   0x80
c0018c80:	e8 31 fb ff ff       	call   c00187b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c85:	83 e0 01             	and    eax,0x1
c0018c88:	c1 e0 06             	shl    eax,0x6
c0018c8b:	88 c2                	mov    dl,al
c0018c8d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c93:	83 e0 bf             	and    eax,0xffffffbf
c0018c96:	09 d0                	or     eax,edx
c0018c98:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c9e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018ca5:	e8 0c fb ff ff       	call   c00187b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018caa:	83 e0 01             	and    eax,0x1
c0018cad:	c1 e0 04             	shl    eax,0x4
c0018cb0:	88 c2                	mov    dl,al
c0018cb2:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018cb8:	83 e0 ef             	and    eax,0xffffffef
c0018cbb:	09 d0                	or     eax,edx
c0018cbd:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018cc3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018cca:	e8 e7 fa ff ff       	call   c00187b6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018ccf:	c1 e0 07             	shl    eax,0x7
c0018cd2:	88 c2                	mov    dl,al
c0018cd4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cda:	83 e0 7f             	and    eax,0x7f
c0018cdd:	09 d0                	or     eax,edx
c0018cdf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ce5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018cec:	e8 f3 fa ff ff       	call   c00187e4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018cf1:	83 e0 01             	and    eax,0x1
c0018cf4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018cfb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d01:	83 e0 f7             	and    eax,0xfffffff7
c0018d04:	09 d0                	or     eax,edx
c0018d06:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d0c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018d13:	e8 cc fa ff ff       	call   c00187e4 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d18:	83 c4 10             	add    esp,0x10
c0018d1b:	83 e0 01             	and    eax,0x1
c0018d1e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d25:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d2b:	83 e0 fb             	and    eax,0xfffffffb
c0018d2e:	09 d0                	or     eax,edx
c0018d30:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d36:	83 ec 0c             	sub    esp,0xc
c0018d39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d3d:	50                   	push   eax
c0018d3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d42:	50                   	push   eax
c0018d43:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d47:	56                   	push   esi
c0018d48:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d4c:	50                   	push   eax
c0018d4d:	6a 01                	push   0x1
c0018d4f:	e8 82 f9 ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d54:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d58:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d5e:	88 ca                	mov    dl,cl
c0018d60:	83 e0 f0             	and    eax,0xfffffff0
c0018d63:	83 e2 0f             	and    edx,0xf
c0018d66:	09 d0                	or     eax,edx
c0018d68:	88 ca                	mov    dl,cl
c0018d6a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d70:	c0 ea 04             	shr    dl,0x4
c0018d73:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018d77:	0f b6 c2             	movzx  eax,dl
c0018d7a:	83 c4 20             	add    esp,0x20
c0018d7d:	c1 e0 06             	shl    eax,0x6
c0018d80:	89 c7                	mov    edi,eax
c0018d82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d88:	66 25 3f c0          	and    ax,0xc03f
c0018d8c:	09 f8                	or     eax,edi
c0018d8e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d95:	89 c8                	mov    eax,ecx
c0018d97:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018d9e:	c1 e8 08             	shr    eax,0x8
c0018da1:	83 e5 3f             	and    ebp,0x3f
c0018da4:	83 e0 0f             	and    eax,0xf
c0018da7:	89 c7                	mov    edi,eax
c0018da9:	c1 e7 06             	shl    edi,0x6
c0018dac:	09 ef                	or     edi,ebp
c0018dae:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018db5:	89 fa                	mov    edx,edi
c0018db7:	83 e5 c0             	and    ebp,0xffffffc0
c0018dba:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018dc0:	88 c2                	mov    dl,al
c0018dc2:	c0 ea 02             	shr    dl,0x2
c0018dc5:	89 d7                	mov    edi,edx
c0018dc7:	09 ef                	or     edi,ebp
c0018dc9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018dcf:	89 fa                	mov    edx,edi
c0018dd1:	83 e5 cf             	and    ebp,0xffffffcf
c0018dd4:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018dda:	89 cf                	mov    edi,ecx
c0018ddc:	c1 ef 0c             	shr    edi,0xc
c0018ddf:	83 e7 03             	and    edi,0x3
c0018de2:	c1 e7 04             	shl    edi,0x4
c0018de5:	09 ef                	or     edi,ebp
c0018de7:	3c 06                	cmp    al,0x6
c0018de9:	89 fa                	mov    edx,edi
c0018deb:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018df1:	74 04                	je     c0018df7 <CPU::detectFeatures()+0x555>
c0018df3:	3c 0f                	cmp    al,0xf
c0018df5:	75 5c                	jne    c0018e53 <CPU::detectFeatures()+0x5b1>
c0018df7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018dfb:	89 cf                	mov    edi,ecx
c0018dfd:	c1 ef 10             	shr    edi,0x10
c0018e00:	c1 e7 04             	shl    edi,0x4
c0018e03:	09 fa                	or     edx,edi
c0018e05:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018e0b:	0f b6 d2             	movzx  edx,dl
c0018e0e:	66 81 e7 3f c0       	and    di,0xc03f
c0018e13:	c1 e2 06             	shl    edx,0x6
c0018e16:	09 fa                	or     edx,edi
c0018e18:	3c 0f                	cmp    al,0xf
c0018e1a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018e21:	75 30                	jne    c0018e53 <CPU::detectFeatures()+0x5b1>
c0018e23:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018e29:	c1 e9 14             	shr    ecx,0x14
c0018e2c:	83 e0 3f             	and    eax,0x3f
c0018e2f:	83 c1 0f             	add    ecx,0xf
c0018e32:	88 ca                	mov    dl,cl
c0018e34:	c0 e9 02             	shr    cl,0x2
c0018e37:	c1 e2 06             	shl    edx,0x6
c0018e3a:	09 d0                	or     eax,edx
c0018e3c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e42:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e48:	83 e0 c0             	and    eax,0xffffffc0
c0018e4b:	09 c1                	or     ecx,eax
c0018e4d:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e53:	83 ec 0c             	sub    esp,0xc
c0018e56:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e5d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e61:	50                   	push   eax
c0018e62:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e66:	55                   	push   ebp
c0018e67:	56                   	push   esi
c0018e68:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018e6c:	57                   	push   edi
c0018e6d:	68 00 00 00 80       	push   0x80000000
c0018e72:	e8 5f f8 ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e77:	83 c4 20             	add    esp,0x20
c0018e7a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018e82:	76 22                	jbe    c0018ea6 <CPU::detectFeatures()+0x604>
c0018e84:	83 ec 0c             	sub    esp,0xc
c0018e87:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e8b:	50                   	push   eax
c0018e8c:	55                   	push   ebp
c0018e8d:	56                   	push   esi
c0018e8e:	57                   	push   edi
c0018e8f:	68 01 00 00 80       	push   0x80000001
c0018e94:	e8 3d f8 ff ff       	call   c00186d6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e99:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018ea3:	83 c4 20             	add    esp,0x20
c0018ea6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018eac:	83 f8 01             	cmp    eax,0x1
c0018eaf:	75 6f                	jne    c0018f20 <CPU::detectFeatures()+0x67e>
c0018eb1:	51                   	push   ecx
c0018eb2:	51                   	push   ecx
c0018eb3:	68 35 b2 02 c0       	push   0xc002b235
c0018eb8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018ebc:	56                   	push   esi
c0018ebd:	e8 4a 79 fe ff       	call   c000080c <strcpy>
c0018ec2:	5f                   	pop    edi
c0018ec3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ec9:	5d                   	pop    ebp
c0018eca:	66 c1 e8 06          	shr    ax,0x6
c0018ece:	0f b6 c0             	movzx  eax,al
c0018ed1:	50                   	push   eax
c0018ed2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ed8:	c1 e8 0e             	shr    eax,0xe
c0018edb:	0f b6 c0             	movzx  eax,al
c0018ede:	50                   	push   eax
c0018edf:	e8 9c f4 ff ff       	call   c0018380 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018ee4:	5a                   	pop    edx
c0018ee5:	59                   	pop    ecx
c0018ee6:	50                   	push   eax
c0018ee7:	56                   	push   esi
c0018ee8:	e8 5f 7a fe ff       	call   c000094c <strcat>
c0018eed:	5f                   	pop    edi
c0018eee:	5d                   	pop    ebp
c0018eef:	56                   	push   esi
c0018ef0:	53                   	push   ebx
c0018ef1:	e8 36 ad ff ff       	call   c0013c2c <Device::setName(char const*)>
c0018ef6:	58                   	pop    eax
c0018ef7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018efd:	5a                   	pop    edx
c0018efe:	68 3c b2 02 c0       	push   0xc002b23c
c0018f03:	50                   	push   eax
c0018f04:	e8 8f 79 fe ff       	call   c0000898 <strcmp>
c0018f09:	83 c4 10             	add    esp,0x10
c0018f0c:	85 c0                	test   eax,eax
c0018f0e:	0f 85 71 03 00 00    	jne    c0019285 <CPU::detectFeatures()+0x9e3>
c0018f14:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018f1b:	e9 65 03 00 00       	jmp    c0019285 <CPU::detectFeatures()+0x9e3>
c0018f20:	83 f8 02             	cmp    eax,0x2
c0018f23:	0f 85 b5 00 00 00    	jne    c0018fde <CPU::detectFeatures()+0x73c>
c0018f29:	57                   	push   edi
c0018f2a:	57                   	push   edi
c0018f2b:	68 4e b2 02 c0       	push   0xc002b24e
c0018f30:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f34:	56                   	push   esi
c0018f35:	e8 d2 78 fe ff       	call   c000080c <strcpy>
c0018f3a:	5d                   	pop    ebp
c0018f3b:	58                   	pop    eax
c0018f3c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f42:	66 c1 e8 06          	shr    ax,0x6
c0018f46:	0f b6 c0             	movzx  eax,al
c0018f49:	50                   	push   eax
c0018f4a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f50:	c1 e8 0e             	shr    eax,0xe
c0018f53:	0f b6 c0             	movzx  eax,al
c0018f56:	50                   	push   eax
c0018f57:	e8 90 f2 ff ff       	call   c00181ec <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f5c:	5a                   	pop    edx
c0018f5d:	59                   	pop    ecx
c0018f5e:	50                   	push   eax
c0018f5f:	56                   	push   esi
c0018f60:	e8 e7 79 fe ff       	call   c000094c <strcat>
c0018f65:	5f                   	pop    edi
c0018f66:	5d                   	pop    ebp
c0018f67:	56                   	push   esi
c0018f68:	53                   	push   ebx
c0018f69:	e8 be ac ff ff       	call   c0013c2c <Device::setName(char const*)>
c0018f6e:	58                   	pop    eax
c0018f6f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f75:	5a                   	pop    edx
c0018f76:	68 53 b2 02 c0       	push   0xc002b253
c0018f7b:	50                   	push   eax
c0018f7c:	e8 17 79 fe ff       	call   c0000898 <strcmp>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	85 c0                	test   eax,eax
c0018f86:	75 20                	jne    c0018fa8 <CPU::detectFeatures()+0x706>
c0018f88:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c0018f8e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018f94:	a8 01                	test   al,0x1
c0018f96:	74 10                	je     c0018fa8 <CPU::detectFeatures()+0x706>
c0018f98:	83 e0 fe             	and    eax,0xfffffffe
c0018f9b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018fa1:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018fa8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fae:	c1 e8 0e             	shr    eax,0xe
c0018fb1:	3c 05                	cmp    al,0x5
c0018fb3:	0f 85 cc 02 00 00    	jne    c0019285 <CPU::detectFeatures()+0x9e3>
c0018fb9:	56                   	push   esi
c0018fba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018fc0:	83 e0 0f             	and    eax,0xf
c0018fc3:	50                   	push   eax
c0018fc4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fca:	66 c1 e8 06          	shr    ax,0x6
c0018fce:	0f b6 c0             	movzx  eax,al
c0018fd1:	50                   	push   eax
c0018fd2:	6a 05                	push   0x5
c0018fd4:	e8 89 f6 ff ff       	call   c0018662 <CPU::AMD_K6_writeback(int, int, int)>
c0018fd9:	e9 1f 02 00 00       	jmp    c00191fd <CPU::detectFeatures()+0x95b>
c0018fde:	8d 50 fd             	lea    edx,[eax-0x3]
c0018fe1:	83 fa 01             	cmp    edx,0x1
c0018fe4:	76 09                	jbe    c0018fef <CPU::detectFeatures()+0x74d>
c0018fe6:	83 f8 06             	cmp    eax,0x6
c0018fe9:	0f 85 91 01 00 00    	jne    c0019180 <CPU::detectFeatures()+0x8de>
c0018fef:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ff5:	c1 ea 0e             	shr    edx,0xe
c0018ff8:	80 fa 05             	cmp    dl,0x5
c0018ffb:	75 7b                	jne    c0019078 <CPU::detectFeatures()+0x7d6>
c0018ffd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019003:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019008:	66 81 fa 00 01       	cmp    dx,0x100
c001900d:	75 0c                	jne    c001901b <CPU::detectFeatures()+0x779>
c001900f:	51                   	push   ecx
c0019010:	51                   	push   ecx
c0019011:	68 5a b2 02 c0       	push   0xc002b25a
c0019016:	e9 dc 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c001901b:	66 81 fa 00 02       	cmp    dx,0x200
c0019020:	75 0c                	jne    c001902e <CPU::detectFeatures()+0x78c>
c0019022:	52                   	push   edx
c0019023:	52                   	push   edx
c0019024:	68 6d b2 02 c0       	push   0xc002b26d
c0019029:	e9 c9 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c001902e:	66 81 fa 40 02       	cmp    dx,0x240
c0019033:	75 0c                	jne    c0019041 <CPU::detectFeatures()+0x79f>
c0019035:	50                   	push   eax
c0019036:	50                   	push   eax
c0019037:	68 7f b2 02 c0       	push   0xc002b27f
c001903c:	e9 b6 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c0019041:	83 f8 06             	cmp    eax,0x6
c0019044:	75 0c                	jne    c0019052 <CPU::detectFeatures()+0x7b0>
c0019046:	50                   	push   eax
c0019047:	50                   	push   eax
c0019048:	68 91 b2 02 c0       	push   0xc002b291
c001904d:	e9 a5 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c0019052:	83 f8 04             	cmp    eax,0x4
c0019055:	75 0c                	jne    c0019063 <CPU::detectFeatures()+0x7c1>
c0019057:	50                   	push   eax
c0019058:	50                   	push   eax
c0019059:	68 9d b2 02 c0       	push   0xc002b29d
c001905e:	e9 94 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c0019063:	83 f8 03             	cmp    eax,0x3
c0019066:	0f 85 19 02 00 00    	jne    c0019285 <CPU::detectFeatures()+0x9e3>
c001906c:	50                   	push   eax
c001906d:	50                   	push   eax
c001906e:	68 a5 b2 02 c0       	push   0xc002b2a5
c0019073:	e9 7f 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c0019078:	80 fa 06             	cmp    dl,0x6
c001907b:	0f 85 db 00 00 00    	jne    c001915c <CPU::detectFeatures()+0x8ba>
c0019081:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019087:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001908c:	66 81 fa 80 01       	cmp    dx,0x180
c0019091:	75 0c                	jne    c001909f <CPU::detectFeatures()+0x7fd>
c0019093:	50                   	push   eax
c0019094:	50                   	push   eax
c0019095:	68 b0 b2 02 c0       	push   0xc002b2b0
c001909a:	e9 58 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c001909f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00190a5:	66 f7 c1 80 ff       	test   cx,0xff80
c00190aa:	75 0c                	jne    c00190b8 <CPU::detectFeatures()+0x816>
c00190ac:	50                   	push   eax
c00190ad:	50                   	push   eax
c00190ae:	68 c0 b2 02 c0       	push   0xc002b2c0
c00190b3:	e9 3f 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00190b8:	66 81 fa 40 02       	cmp    dx,0x240
c00190bd:	75 0c                	jne    c00190cb <CPU::detectFeatures()+0x829>
c00190bf:	55                   	push   ebp
c00190c0:	55                   	push   ebp
c00190c1:	68 c7 b2 02 c0       	push   0xc002b2c7
c00190c6:	e9 2c 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00190cb:	66 81 fa 80 02       	cmp    dx,0x280
c00190d0:	75 0c                	jne    c00190de <CPU::detectFeatures()+0x83c>
c00190d2:	57                   	push   edi
c00190d3:	57                   	push   edi
c00190d4:	68 d0 b2 02 c0       	push   0xc002b2d0
c00190d9:	e9 19 01 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00190de:	66 81 fa 40 03       	cmp    dx,0x340
c00190e3:	74 ed                	je     c00190d2 <CPU::detectFeatures()+0x830>
c00190e5:	66 81 fa c0 03       	cmp    dx,0x3c0
c00190ea:	75 0c                	jne    c00190f8 <CPU::detectFeatures()+0x856>
c00190ec:	56                   	push   esi
c00190ed:	56                   	push   esi
c00190ee:	68 d7 b2 02 c0       	push   0xc002b2d7
c00190f3:	e9 ff 00 00 00       	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00190f8:	83 f8 06             	cmp    eax,0x6
c00190fb:	0f 84 45 ff ff ff    	je     c0019046 <CPU::detectFeatures()+0x7a4>
c0019101:	83 f8 04             	cmp    eax,0x4
c0019104:	0f 84 4d ff ff ff    	je     c0019057 <CPU::detectFeatures()+0x7b5>
c001910a:	83 f8 03             	cmp    eax,0x3
c001910d:	0f 85 72 01 00 00    	jne    c0019285 <CPU::detectFeatures()+0x9e3>
c0019113:	51                   	push   ecx
c0019114:	51                   	push   ecx
c0019115:	68 e0 b2 02 c0       	push   0xc002b2e0
c001911a:	53                   	push   ebx
c001911b:	e8 0c ab ff ff       	call   c0013c2c <Device::setName(char const*)>
c0019120:	b1 c1                	mov    cl,0xc1
c0019122:	88 c8                	mov    al,cl
c0019124:	e6 22                	out    0x22,al
c0019126:	e4 23                	in     al,0x23
c0019128:	88 c2                	mov    dl,al
c001912a:	88 c8                	mov    al,cl
c001912c:	e6 22                	out    0x22,al
c001912e:	88 d0                	mov    al,dl
c0019130:	83 c8 10             	or     eax,0x10
c0019133:	e6 23                	out    0x23,al
c0019135:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001913c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001913f:	89 d0                	mov    eax,edx
c0019141:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019147:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001914b:	40                   	inc    eax
c001914c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019152:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019157:	e9 a1 00 00 00       	jmp    c00191fd <CPU::detectFeatures()+0x95b>
c001915c:	83 f8 06             	cmp    eax,0x6
c001915f:	0f 84 e1 fe ff ff    	je     c0019046 <CPU::detectFeatures()+0x7a4>
c0019165:	83 f8 04             	cmp    eax,0x4
c0019168:	0f 84 e9 fe ff ff    	je     c0019057 <CPU::detectFeatures()+0x7b5>
c001916e:	83 f8 03             	cmp    eax,0x3
c0019171:	0f 85 0e 01 00 00    	jne    c0019285 <CPU::detectFeatures()+0x9e3>
c0019177:	52                   	push   edx
c0019178:	52                   	push   edx
c0019179:	68 eb b2 02 c0       	push   0xc002b2eb
c001917e:	eb 77                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c0019180:	83 f8 07             	cmp    eax,0x7
c0019183:	75 09                	jne    c001918e <CPU::detectFeatures()+0x8ec>
c0019185:	50                   	push   eax
c0019186:	50                   	push   eax
c0019187:	68 f5 b2 02 c0       	push   0xc002b2f5
c001918c:	eb 69                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c001918e:	83 f8 0a             	cmp    eax,0xa
c0019191:	75 09                	jne    c001919c <CPU::detectFeatures()+0x8fa>
c0019193:	50                   	push   eax
c0019194:	50                   	push   eax
c0019195:	68 00 b3 02 c0       	push   0xc002b300
c001919a:	eb 5b                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c001919c:	83 f8 0b             	cmp    eax,0xb
c001919f:	75 09                	jne    c00191aa <CPU::detectFeatures()+0x908>
c00191a1:	50                   	push   eax
c00191a2:	50                   	push   eax
c00191a3:	68 08 b3 02 c0       	push   0xc002b308
c00191a8:	eb 4d                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00191aa:	83 f8 08             	cmp    eax,0x8
c00191ad:	75 09                	jne    c00191b8 <CPU::detectFeatures()+0x916>
c00191af:	50                   	push   eax
c00191b0:	50                   	push   eax
c00191b1:	68 11 b3 02 c0       	push   0xc002b311
c00191b6:	eb 3f                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00191b8:	83 f8 09             	cmp    eax,0x9
c00191bb:	75 09                	jne    c00191c6 <CPU::detectFeatures()+0x924>
c00191bd:	50                   	push   eax
c00191be:	50                   	push   eax
c00191bf:	68 19 b3 02 c0       	push   0xc002b319
c00191c4:	eb 31                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00191c6:	83 f8 05             	cmp    eax,0x5
c00191c9:	75 09                	jne    c00191d4 <CPU::detectFeatures()+0x932>
c00191cb:	50                   	push   eax
c00191cc:	50                   	push   eax
c00191cd:	68 21 b3 02 c0       	push   0xc002b321
c00191d2:	eb 23                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00191d4:	83 f8 0c             	cmp    eax,0xc
c00191d7:	75 09                	jne    c00191e2 <CPU::detectFeatures()+0x940>
c00191d9:	55                   	push   ebp
c00191da:	55                   	push   ebp
c00191db:	68 2f b3 02 c0       	push   0xc002b32f
c00191e0:	eb 15                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00191e2:	83 f8 0d             	cmp    eax,0xd
c00191e5:	75 09                	jne    c00191f0 <CPU::detectFeatures()+0x94e>
c00191e7:	57                   	push   edi
c00191e8:	57                   	push   edi
c00191e9:	68 3a b3 02 c0       	push   0xc002b33a
c00191ee:	eb 07                	jmp    c00191f7 <CPU::detectFeatures()+0x955>
c00191f0:	56                   	push   esi
c00191f1:	56                   	push   esi
c00191f2:	68 4e b3 02 c0       	push   0xc002b34e
c00191f7:	53                   	push   ebx
c00191f8:	e8 2f aa ff ff       	call   c0013c2c <Device::setName(char const*)>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	e9 80 00 00 00       	jmp    c0019285 <CPU::detectFeatures()+0x9e3>
c0019205:	51                   	push   ecx
c0019206:	51                   	push   ecx
c0019207:	68 9a b1 02 c0       	push   0xc002b19a
c001920c:	55                   	push   ebp
c001920d:	e8 fa 75 fe ff       	call   c000080c <strcpy>
c0019212:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001921c:	e8 8d 70 fe ff       	call   c00002ae <is486>
c0019221:	83 c4 10             	add    esp,0x10
c0019224:	85 c0                	test   eax,eax
c0019226:	74 2b                	je     c0019253 <CPU::detectFeatures()+0x9b1>
c0019228:	52                   	push   edx
c0019229:	52                   	push   edx
c001922a:	68 5a b3 02 c0       	push   0xc002b35a
c001922f:	53                   	push   ebx
c0019230:	e8 f7 a9 ff ff       	call   c0013c2c <Device::setName(char const*)>
c0019235:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001923c:	0f 20 c0             	mov    eax,cr0
c001923f:	83 e0 14             	and    eax,0x14
c0019242:	83 c4 10             	add    esp,0x10
c0019245:	83 f8 04             	cmp    eax,0x4
c0019248:	75 1f                	jne    c0019269 <CPU::detectFeatures()+0x9c7>
c001924a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019251:	eb 32                	jmp    c0019285 <CPU::detectFeatures()+0x9e3>
c0019253:	50                   	push   eax
c0019254:	50                   	push   eax
c0019255:	68 65 b3 02 c0       	push   0xc002b365
c001925a:	53                   	push   ebx
c001925b:	e8 cc a9 ff ff       	call   c0013c2c <Device::setName(char const*)>
c0019260:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019267:	eb d3                	jmp    c001923c <CPU::detectFeatures()+0x99a>
c0019269:	e8 1b 70 fe ff       	call   c0000289 <hasLegacyFPU>
c001926e:	83 e0 01             	and    eax,0x1
c0019271:	8d 14 00             	lea    edx,[eax+eax*1]
c0019274:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001927a:	83 e0 fd             	and    eax,0xfffffffd
c001927d:	09 d0                	or     eax,edx
c001927f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019285:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001928c:	83 c4 4c             	add    esp,0x4c
c001928f:	5b                   	pop    ebx
c0019290:	5e                   	pop    esi
c0019291:	5f                   	pop    edi
c0019292:	5d                   	pop    ebp
c0019293:	c3                   	ret    

c0019294 <CPU::setupSMEP()>:
c0019294:	0f 20 e0             	mov    eax,cr4
c0019297:	0d 00 00 10 00       	or     eax,0x100000
c001929c:	0f 22 e0             	mov    cr4,eax
c001929f:	c3                   	ret    

c00192a0 <CPU::setupUMIP()>:
c00192a0:	0f 20 e0             	mov    eax,cr4
c00192a3:	80 cc 08             	or     ah,0x8
c00192a6:	0f 22 e0             	mov    cr4,eax
c00192a9:	c3                   	ret    

c00192aa <CPU::setupTSC()>:
c00192aa:	0f 20 e0             	mov    eax,cr4
c00192ad:	83 c8 04             	or     eax,0x4
c00192b0:	0f 22 e0             	mov    cr4,eax
c00192b3:	c3                   	ret    

c00192b4 <CPU::setupLargePages()>:
c00192b4:	0f 20 e0             	mov    eax,cr4
c00192b7:	83 c8 10             	or     eax,0x10
c00192ba:	0f 22 e0             	mov    cr4,eax
c00192bd:	c3                   	ret    

c00192be <CPU::setupPAT()>:
c00192be:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00192c3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00192ca:	74 2c                	je     c00192f8 <CPU::setupPAT()+0x3a>
c00192cc:	53                   	push   ebx
c00192cd:	83 ec 10             	sub    esp,0x10
c00192d0:	68 77 02 00 00       	push   0x277
c00192d5:	50                   	push   eax
c00192d6:	e8 65 58 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00192db:	83 e2 f8             	and    edx,0xfffffff8
c00192de:	83 ca 01             	or     edx,0x1
c00192e1:	52                   	push   edx
c00192e2:	50                   	push   eax
c00192e3:	68 77 02 00 00       	push   0x277
c00192e8:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c00192ee:	e8 79 58 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00192f3:	83 c4 28             	add    esp,0x28
c00192f6:	5b                   	pop    ebx
c00192f7:	c3                   	ret    
c00192f8:	c3                   	ret    
c00192f9:	90                   	nop

c00192fa <CPU::setupMTRR()>:
c00192fa:	c3                   	ret    
c00192fb:	90                   	nop

c00192fc <CPU::setupGlobalPages()>:
c00192fc:	0f 20 e0             	mov    eax,cr4
c00192ff:	0c 80                	or     al,0x80
c0019301:	0f 22 e0             	mov    cr4,eax
c0019304:	c3                   	ret    
c0019305:	90                   	nop

c0019306 <CPU::allowUsermodeDataAccess()>:
c0019306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001930a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019311:	74 03                	je     c0019316 <CPU::allowUsermodeDataAccess()+0x10>
c0019313:	0f 01 cb             	stac   
c0019316:	c3                   	ret    
c0019317:	90                   	nop

c0019318 <CPU::prohibitUsermodeDataAccess()>:
c0019318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001931c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019323:	74 03                	je     c0019328 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019325:	0f 01 ca             	clac   
c0019328:	c3                   	ret    
c0019329:	90                   	nop

c001932a <CPU::setupSMAP()>:
c001932a:	0f 20 e0             	mov    eax,cr4
c001932d:	0d 00 00 20 00       	or     eax,0x200000
c0019332:	0f 22 e0             	mov    cr4,eax
c0019335:	eb e1                	jmp    c0019318 <CPU::prohibitUsermodeDataAccess()>
c0019337:	90                   	nop

c0019338 <CPU::setupFeatures()>:
c0019338:	83 ec 0c             	sub    esp,0xc
c001933b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001933f:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019346:	74 07                	je     c001934f <CPU::setupFeatures()+0x17>
c0019348:	52                   	push   edx
c0019349:	e8 46 ff ff ff       	call   c0019294 <CPU::setupSMEP()>
c001934e:	58                   	pop    eax
c001934f:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019356:	74 07                	je     c001935f <CPU::setupFeatures()+0x27>
c0019358:	52                   	push   edx
c0019359:	e8 cc ff ff ff       	call   c001932a <CPU::setupSMAP()>
c001935e:	58                   	pop    eax
c001935f:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019366:	74 07                	je     c001936f <CPU::setupFeatures()+0x37>
c0019368:	52                   	push   edx
c0019369:	e8 32 ff ff ff       	call   c00192a0 <CPU::setupUMIP()>
c001936e:	58                   	pop    eax
c001936f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019376:	74 07                	je     c001937f <CPU::setupFeatures()+0x47>
c0019378:	52                   	push   edx
c0019379:	e8 2c ff ff ff       	call   c00192aa <CPU::setupTSC()>
c001937e:	58                   	pop    eax
c001937f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019386:	74 07                	je     c001938f <CPU::setupFeatures()+0x57>
c0019388:	52                   	push   edx
c0019389:	e8 26 ff ff ff       	call   c00192b4 <CPU::setupLargePages()>
c001938e:	59                   	pop    ecx
c001938f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019396:	74 07                	je     c001939f <CPU::setupFeatures()+0x67>
c0019398:	52                   	push   edx
c0019399:	e8 5e ff ff ff       	call   c00192fc <CPU::setupGlobalPages()>
c001939e:	58                   	pop    eax
c001939f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00193a6:	74 0c                	je     c00193b4 <CPU::setupFeatures()+0x7c>
c00193a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00193ac:	83 c4 0c             	add    esp,0xc
c00193af:	e9 0a ff ff ff       	jmp    c00192be <CPU::setupPAT()>
c00193b4:	83 c4 0c             	add    esp,0xc
c00193b7:	c3                   	ret    

c00193b8 <CPU::open(int, int, void*)>:
c00193b8:	57                   	push   edi
c00193b9:	56                   	push   esi
c00193ba:	53                   	push   ebx
c00193bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193bf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193c3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00193c9:	83 ec 0c             	sub    esp,0xc
c00193cc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00193d2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00193d8:	50                   	push   eax
c00193d9:	e8 50 5a ff ff       	call   c000ee2e <GDT::setup()>
c00193de:	83 c4 0c             	add    esp,0xc
c00193e1:	6a 00                	push   0x0
c00193e3:	68 ef be ad de       	push   0xdeadbeef
c00193e8:	57                   	push   edi
c00193e9:	e8 5e 77 ff ff       	call   c0010b4c <TSS::setup(unsigned long, unsigned long)>
c00193ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c00193f1:	e8 36 77 ff ff       	call   c0010b2c <TSS::flush()>
c00193f6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00193fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00193ff:	e8 8e 5c ff ff       	call   c000f092 <IDT::setup()>
c0019404:	b8 00 04 00 00       	mov    eax,0x400
c0019409:	0f 23 f8             	mov    db7,eax
c001940c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019416:	e8 25 65 ff ff       	call   c000f940 <Phys::allocatePage()>
c001941b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019421:	89 30                	mov    DWORD PTR [eax],esi
c0019423:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019429:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001942c:	58                   	pop    eax
c001942d:	5a                   	pop    edx
c001942e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019434:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019438:	e8 41 88 ff ff       	call   c0011c7e <VAS::setCPUSpecific(unsigned long)>
c001943d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019440:	e8 5d f4 ff ff       	call   c00188a2 <CPU::detectFeatures()>
c0019445:	e8 35 bc ff ff       	call   c001507f <setupInterruptController()>
c001944a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019450:	a1 a0 d7 02 c0       	mov    eax,ds:0xc002d7a0
c0019455:	83 e0 10             	and    eax,0x10
c0019458:	83 f8 01             	cmp    eax,0x1
c001945b:	19 c0                	sbb    eax,eax
c001945d:	83 e0 46             	and    eax,0x46
c0019460:	83 c0 1e             	add    eax,0x1e
c0019463:	89 04 24             	mov    DWORD PTR [esp],eax
c0019466:	e8 02 d2 ff ff       	call   c001666d <setupTimer(int)>
c001946b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019471:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019474:	e8 bf fe ff ff       	call   c0019338 <CPU::setupFeatures()>
c0019479:	83 c4 10             	add    esp,0x10
c001947c:	31 c0                	xor    eax,eax
c001947e:	5b                   	pop    ebx
c001947f:	5e                   	pop    esi
c0019480:	5f                   	pop    edi
c0019481:	c3                   	ret    

c0019482 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019482:	57                   	push   edi
c0019483:	56                   	push   esi
c0019484:	53                   	push   ebx
c0019485:	51                   	push   ecx
c0019486:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001948a:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001948d:	0f 02 c0             	lar    eax,ax
c0019490:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019493:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019497:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001949a:	88 ca                	mov    dl,cl
c001949c:	c0 ea 06             	shr    dl,0x6
c001949f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00194a3:	89 ca                	mov    edx,ecx
c00194a5:	66 c1 ea 03          	shr    dx,0x3
c00194a9:	83 e2 07             	and    edx,0x7
c00194ac:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00194b1:	88 17                	mov    BYTE PTR [edi],dl
c00194b3:	0f 84 a6 01 00 00    	je     c001965f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00194b9:	83 e1 07             	and    ecx,0x7
c00194bc:	80 f9 04             	cmp    cl,0x4
c00194bf:	0f 84 98 00 00 00    	je     c001955d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00194c5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00194ca:	0f 95 c0             	setne  al
c00194cd:	80 f9 05             	cmp    cl,0x5
c00194d0:	0f 95 c2             	setne  dl
c00194d3:	08 c2                	or     dl,al
c00194d5:	74 79                	je     c0019550 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00194d7:	84 c9                	test   cl,cl
c00194d9:	75 05                	jne    c00194e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00194db:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194de:	eb 3c                	jmp    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194e0:	80 f9 01             	cmp    cl,0x1
c00194e3:	75 05                	jne    c00194ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00194e5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00194e8:	eb 32                	jmp    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194ea:	80 f9 02             	cmp    cl,0x2
c00194ed:	75 05                	jne    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00194ef:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00194f2:	eb 28                	jmp    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00194f4:	31 c0                	xor    eax,eax
c00194f6:	80 f9 03             	cmp    cl,0x3
c00194f9:	75 05                	jne    c0019500 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00194fb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00194fe:	eb 1c                	jmp    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019500:	80 f9 05             	cmp    cl,0x5
c0019503:	75 05                	jne    c001950a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019505:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019508:	eb 12                	jmp    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001950a:	80 f9 06             	cmp    cl,0x6
c001950d:	75 05                	jne    c0019514 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001950f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019512:	eb 08                	jmp    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019514:	80 f9 07             	cmp    cl,0x7
c0019517:	75 03                	jne    c001951c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019519:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001951c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019521:	75 10                	jne    c0019533 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019523:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019527:	b9 03 00 00 00       	mov    ecx,0x3
c001952c:	01 d0                	add    eax,edx
c001952e:	e9 37 01 00 00       	jmp    c001966a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019533:	b9 02 00 00 00       	mov    ecx,0x2
c0019538:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001953d:	0f 85 27 01 00 00    	jne    c001966a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019543:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019546:	b9 06 00 00 00       	mov    ecx,0x6
c001954b:	e9 1a 01 00 00       	jmp    c001966a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019550:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019553:	b9 06 00 00 00       	mov    ecx,0x6
c0019558:	e9 0f 01 00 00       	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001955d:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019560:	88 ca                	mov    dl,cl
c0019562:	c0 ea 06             	shr    dl,0x6
c0019565:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019569:	89 ca                	mov    edx,ecx
c001956b:	66 c1 ea 03          	shr    dx,0x3
c001956f:	83 e2 07             	and    edx,0x7
c0019572:	80 e1 07             	and    cl,0x7
c0019575:	75 05                	jne    c001957c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019577:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001957a:	eb 4c                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001957c:	80 f9 01             	cmp    cl,0x1
c001957f:	75 05                	jne    c0019586 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019581:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019584:	eb 42                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019586:	80 f9 02             	cmp    cl,0x2
c0019589:	75 05                	jne    c0019590 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001958b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001958e:	eb 38                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019590:	80 f9 03             	cmp    cl,0x3
c0019593:	75 05                	jne    c001959a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019595:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019598:	eb 2e                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001959a:	80 f9 04             	cmp    cl,0x4
c001959d:	75 12                	jne    c00195b1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001959f:	f6 c4 60             	test   ah,0x60
c00195a2:	75 08                	jne    c00195ac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00195a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00195a7:	8d 78 14             	lea    edi,[eax+0x14]
c00195aa:	eb 1c                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195ac:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00195af:	eb 17                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195b1:	80 f9 05             	cmp    cl,0x5
c00195b4:	75 05                	jne    c00195bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00195b6:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00195b9:	eb 0d                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195bb:	80 f9 06             	cmp    cl,0x6
c00195be:	75 05                	jne    c00195c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00195c0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00195c3:	eb 03                	jmp    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195c5:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00195c8:	84 d2                	test   dl,dl
c00195ca:	75 05                	jne    c00195d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00195cc:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195cf:	eb 3c                	jmp    c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195d1:	80 fa 01             	cmp    dl,0x1
c00195d4:	75 05                	jne    c00195db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00195d6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00195d9:	eb 32                	jmp    c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195db:	80 fa 02             	cmp    dl,0x2
c00195de:	75 05                	jne    c00195e5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00195e0:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195e3:	eb 28                	jmp    c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195e5:	80 fa 03             	cmp    dl,0x3
c00195e8:	75 05                	jne    c00195ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00195ea:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195ed:	eb 1e                	jmp    c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195ef:	31 c0                	xor    eax,eax
c00195f1:	80 fa 04             	cmp    dl,0x4
c00195f4:	74 17                	je     c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195f6:	80 fa 05             	cmp    dl,0x5
c00195f9:	75 05                	jne    c0019600 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00195fb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195fe:	eb 0d                	jmp    c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019600:	80 fa 06             	cmp    dl,0x6
c0019603:	75 05                	jne    c001960a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019605:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019608:	eb 03                	jmp    c001960d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001960a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001960d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019612:	0f 94 c2             	sete   dl
c0019615:	80 f9 05             	cmp    cl,0x5
c0019618:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001961c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019621:	d3 e0                	shl    eax,cl
c0019623:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019627:	74 0a                	je     c0019633 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019629:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001962c:	b9 07 00 00 00       	mov    ecx,0x7
c0019631:	eb 37                	jmp    c001966a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019633:	01 f8                	add    eax,edi
c0019635:	b9 03 00 00 00       	mov    ecx,0x3
c001963a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001963f:	74 2b                	je     c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019641:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019646:	75 0d                	jne    c0019655 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019648:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001964c:	01 c8                	add    eax,ecx
c001964e:	b9 04 00 00 00       	mov    ecx,0x4
c0019653:	eb 17                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019655:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019658:	b9 07 00 00 00       	mov    ecx,0x7
c001965d:	eb 0d                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001965f:	b9 02 00 00 00       	mov    ecx,0x2
c0019664:	b2 01                	mov    dl,0x1
c0019666:	31 c0                	xor    eax,eax
c0019668:	eb 02                	jmp    c001966c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001966a:	31 d2                	xor    edx,edx
c001966c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019670:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019672:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019676:	88 11                	mov    BYTE PTR [ecx],dl
c0019678:	5a                   	pop    edx
c0019679:	5b                   	pop    ebx
c001967a:	5e                   	pop    esi
c001967b:	5f                   	pop    edi
c001967c:	c3                   	ret    

c001967d <Krnl::smpEntry()>:
c001967d:	eb fe                	jmp    c001967d <Krnl::smpEntry()>

c001967f <Krnl::startCPU(int)>:
c001967f:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0019684:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001968b:	0f 84 36 01 00 00    	je     c00197c7 <Krnl::startCPU(int)+0x148>
c0019691:	53                   	push   ebx
c0019692:	83 ec 10             	sub    esp,0x10
c0019695:	fa                   	cli    
c0019696:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001969c:	6a 1b                	push   0x1b
c001969e:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c00196a4:	e8 97 54 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00196a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00196ae:	89 c3                	mov    ebx,eax
c00196b0:	58                   	pop    eax
c00196b1:	5a                   	pop    edx
c00196b2:	53                   	push   ebx
c00196b3:	68 9c b3 02 c0       	push   0xc002b39c
c00196b8:	e8 40 8f ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00196bd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196cb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196d5:	c1 e0 18             	shl    eax,0x18
c00196d8:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c00196de:	83 c4 10             	add    esp,0x10
c00196e1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00196e7:	09 c2                	or     edx,eax
c00196e9:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00196ef:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00196f5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00196fb:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019701:	80 cd c5             	or     ch,0xc5
c0019704:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001970a:	f3 90                	pause  
c001970c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001970e:	0f ba e1 0c          	bt     ecx,0xc
c0019712:	72 f6                	jb     c001970a <Krnl::startCPU(int)+0x8b>
c0019714:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001971a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019720:	09 c1                	or     ecx,eax
c0019722:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019728:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001972e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019734:	80 cd 85             	or     ch,0x85
c0019737:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001973d:	f3 90                	pause  
c001973f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019741:	0f ba e1 0c          	bt     ecx,0xc
c0019745:	72 f6                	jb     c001973d <Krnl::startCPU(int)+0xbe>
c0019747:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019751:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019757:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001975d:	09 c1                	or     ecx,eax
c001975f:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019765:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001976b:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019771:	81 c9 02 06 00 00    	or     ecx,0x602
c0019777:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001977d:	f3 90                	pause  
c001977f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019781:	0f ba e1 0c          	bt     ecx,0xc
c0019785:	72 f6                	jb     c001977d <Krnl::startCPU(int)+0xfe>
c0019787:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019791:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019797:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001979d:	09 c8                	or     eax,ecx
c001979f:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00197a5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00197ab:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00197b0:	0d 02 06 00 00       	or     eax,0x602
c00197b5:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00197bb:	f3 90                	pause  
c00197bd:	8b 02                	mov    eax,DWORD PTR [edx]
c00197bf:	0f ba e0 0c          	bt     eax,0xc
c00197c3:	72 f6                	jb     c00197bb <Krnl::startCPU(int)+0x13c>
c00197c5:	eb fe                	jmp    c00197c5 <Krnl::startCPU(int)+0x146>
c00197c7:	c3                   	ret    

c00197c8 <Krnl::startCPUs()>:
c00197c8:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00197cd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00197d3:	88 c2                	mov    dl,al
c00197d5:	83 e2 0a             	and    edx,0xa
c00197d8:	80 fa 0a             	cmp    dl,0xa
c00197db:	75 09                	jne    c00197e6 <Krnl::startCPUs()+0x1e>
c00197dd:	a8 01                	test   al,0x1
c00197df:	74 05                	je     c00197e6 <Krnl::startCPUs()+0x1e>
c00197e1:	e9 b5 69 fe ff       	jmp    c000019b <prepareTramp>
c00197e6:	c3                   	ret    
c00197e7:	90                   	nop

c00197e8 <EnvVarContainer::getEnv(char const*)>:
c00197e8:	57                   	push   edi
c00197e9:	56                   	push   esi
c00197ea:	53                   	push   ebx
c00197eb:	31 db                	xor    ebx,ebx
c00197ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197f1:	39 1e                	cmp    DWORD PTR [esi],ebx
c00197f3:	7e 2b                	jle    c0019820 <EnvVarContainer::getEnv(char const*)+0x38>
c00197f5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00197fc:	50                   	push   eax
c00197fd:	50                   	push   eax
c00197fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019801:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019808:	e8 8b 70 fe ff       	call   c0000898 <strcmp>
c001980d:	83 c4 10             	add    esp,0x10
c0019810:	85 c0                	test   eax,eax
c0019812:	75 09                	jne    c001981d <EnvVarContainer::getEnv(char const*)+0x35>
c0019814:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019817:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001981b:	eb 05                	jmp    c0019822 <EnvVarContainer::getEnv(char const*)+0x3a>
c001981d:	43                   	inc    ebx
c001981e:	eb d1                	jmp    c00197f1 <EnvVarContainer::getEnv(char const*)+0x9>
c0019820:	31 c0                	xor    eax,eax
c0019822:	5b                   	pop    ebx
c0019823:	5e                   	pop    esi
c0019824:	5f                   	pop    edi
c0019825:	c3                   	ret    

c0019826 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019826:	55                   	push   ebp
c0019827:	57                   	push   edi
c0019828:	56                   	push   esi
c0019829:	53                   	push   ebx
c001982a:	83 ec 28             	sub    esp,0x28
c001982d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019831:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019835:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019839:	56                   	push   esi
c001983a:	e8 2d 6f fe ff       	call   c000076c <strlen>
c001983f:	40                   	inc    eax
c0019840:	89 04 24             	mov    DWORD PTR [esp],eax
c0019843:	e8 54 5d ff ff       	call   c000f59c <malloc>
c0019848:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001984b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001984f:	e8 18 6f fe ff       	call   c000076c <strlen>
c0019854:	40                   	inc    eax
c0019855:	89 04 24             	mov    DWORD PTR [esp],eax
c0019858:	e8 3f 5d ff ff       	call   c000f59c <malloc>
c001985d:	89 34 24             	mov    DWORD PTR [esp],esi
c0019860:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019864:	e8 03 6f fe ff       	call   c000076c <strlen>
c0019869:	83 c4 0c             	add    esp,0xc
c001986c:	40                   	inc    eax
c001986d:	50                   	push   eax
c001986e:	6a 00                	push   0x0
c0019870:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019874:	e8 d7 6e fe ff       	call   c0000750 <memset>
c0019879:	89 34 24             	mov    DWORD PTR [esp],esi
c001987c:	e8 eb 6e fe ff       	call   c000076c <strlen>
c0019881:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019885:	8d 48 01             	lea    ecx,[eax+0x1]
c0019888:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001988a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001988d:	89 de                	mov    esi,ebx
c001988f:	e8 d8 6e fe ff       	call   c000076c <strlen>
c0019894:	83 c4 0c             	add    esp,0xc
c0019897:	40                   	inc    eax
c0019898:	50                   	push   eax
c0019899:	6a 00                	push   0x0
c001989b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001989f:	e8 ac 6e fe ff       	call   c0000750 <memset>
c00198a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198a7:	e8 c0 6e fe ff       	call   c000076c <strlen>
c00198ac:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00198b0:	8d 48 01             	lea    ecx,[eax+0x1]
c00198b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00198b8:	40                   	inc    eax
c00198b9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00198bc:	c1 e0 03             	shl    eax,0x3
c00198bf:	5a                   	pop    edx
c00198c0:	59                   	pop    ecx
c00198c1:	50                   	push   eax
c00198c2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00198c5:	e8 be 5c ff ff       	call   c000f588 <realloc>
c00198ca:	8d 74 24 18          	lea    esi,[esp+0x18]
c00198ce:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00198d1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00198d4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00198d8:	b9 08 00 00 00       	mov    ecx,0x8
c00198dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00198df:	83 c4 2c             	add    esp,0x2c
c00198e2:	5b                   	pop    ebx
c00198e3:	5e                   	pop    esi
c00198e4:	5f                   	pop    edi
c00198e5:	5d                   	pop    ebp
c00198e6:	c3                   	ret    
c00198e7:	90                   	nop

c00198e8 <EnvVarContainer::deleteEnv(char const*)>:
c00198e8:	c3                   	ret    
c00198e9:	90                   	nop

c00198ea <EnvVarContainer::loadFrom(char const*, char const*)>:
c00198ea:	55                   	push   ebp
c00198eb:	57                   	push   edi
c00198ec:	56                   	push   esi
c00198ed:	53                   	push   ebx
c00198ee:	81 ec 38 01 00 00    	sub    esp,0x138
c00198f4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00198fb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019902:	68 14 01 00 00       	push   0x114
c0019907:	e8 90 5c ff ff       	call   c000f59c <malloc>
c001990c:	83 c4 0c             	add    esp,0xc
c001990f:	89 c3                	mov    ebx,eax
c0019911:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019914:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001991b:	50                   	push   eax
c001991c:	e8 3b 92 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c0019921:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019924:	e8 05 95 ff ff       	call   c0012e2e <File::exists()>
c0019929:	83 c4 10             	add    esp,0x10
c001992c:	84 c0                	test   al,al
c001992e:	75 31                	jne    c0019961 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019930:	50                   	push   eax
c0019931:	50                   	push   eax
c0019932:	6a 12                	push   0x12
c0019934:	53                   	push   ebx
c0019935:	e8 86 92 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001993a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001993c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001993f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019942:	e8 25 6e fe ff       	call   c000076c <strlen>
c0019947:	5a                   	pop    edx
c0019948:	31 d2                	xor    edx,edx
c001994a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001994e:	51                   	push   ecx
c001994f:	56                   	push   esi
c0019950:	52                   	push   edx
c0019951:	50                   	push   eax
c0019952:	53                   	push   ebx
c0019953:	ff d7                	call   edi
c0019955:	83 c4 14             	add    esp,0x14
c0019958:	53                   	push   ebx
c0019959:	e8 c0 92 ff ff       	call   c0012c1e <File::close()>
c001995e:	83 c4 10             	add    esp,0x10
c0019961:	56                   	push   esi
c0019962:	31 f6                	xor    esi,esi
c0019964:	68 00 01 00 00       	push   0x100
c0019969:	6a 00                	push   0x0
c001996b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001996f:	50                   	push   eax
c0019970:	e8 db 6d fe ff       	call   c0000750 <memset>
c0019975:	5f                   	pop    edi
c0019976:	58                   	pop    eax
c0019977:	6a 01                	push   0x1
c0019979:	53                   	push   ebx
c001997a:	e8 41 92 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001997f:	83 c4 10             	add    esp,0x10
c0019982:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001998a:	83 ec 0c             	sub    esp,0xc
c001998d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001998f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019993:	51                   	push   ecx
c0019994:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019998:	52                   	push   edx
c0019999:	6a 00                	push   0x0
c001999b:	6a 01                	push   0x1
c001999d:	53                   	push   ebx
c001999e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199a1:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00199a5:	83 c4 20             	add    esp,0x20
c00199a8:	3c 0d                	cmp    al,0xd
c00199aa:	0f 84 09 01 00 00    	je     c0019ab9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00199b5:	0f 84 ef 00 00 00    	je     c0019aaa <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00199bb:	3c 0a                	cmp    al,0xa
c00199bd:	74 13                	je     c00199d2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00199bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199c4:	74 0c                	je     c00199d2 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00199c6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00199cc:	0f 8e d8 00 00 00    	jle    c0019aaa <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00199d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199d6:	83 ec 0c             	sub    esp,0xc
c00199d9:	8d 78 01             	lea    edi,[eax+0x1]
c00199dc:	57                   	push   edi
c00199dd:	e8 ba 5b ff ff       	call   c000f59c <malloc>
c00199e2:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00199e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00199ea:	8d 56 04             	lea    edx,[esi+0x4]
c00199ed:	89 14 24             	mov    DWORD PTR [esp],edx
c00199f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00199f4:	e8 a3 5b ff ff       	call   c000f59c <malloc>
c00199f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00199fd:	83 c4 0c             	add    esp,0xc
c0019a00:	57                   	push   edi
c0019a01:	6a 00                	push   0x0
c0019a03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019a07:	e8 44 6d fe ff       	call   c0000750 <memset>
c0019a0c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019a10:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019a14:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019a18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a1a:	83 c4 0c             	add    esp,0xc
c0019a1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a21:	52                   	push   edx
c0019a22:	6a 00                	push   0x0
c0019a24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a28:	e8 23 6d fe ff       	call   c0000750 <memset>
c0019a2d:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019a31:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019a35:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a38:	e8 2f 6d fe ff       	call   c000076c <strlen>
c0019a3d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019a41:	89 c1                	mov    ecx,eax
c0019a43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a48:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019a4b:	40                   	inc    eax
c0019a4c:	83 c4 10             	add    esp,0x10
c0019a4f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a52:	85 d2                	test   edx,edx
c0019a54:	75 0c                	jne    c0019a62 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	6a 08                	push   0x8
c0019a5b:	e8 3c 5b ff ff       	call   c000f59c <malloc>
c0019a60:	eb 0c                	jmp    c0019a6e <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019a62:	c1 e0 03             	shl    eax,0x3
c0019a65:	51                   	push   ecx
c0019a66:	51                   	push   ecx
c0019a67:	50                   	push   eax
c0019a68:	52                   	push   edx
c0019a69:	e8 1a 5b ff ff       	call   c000f588 <realloc>
c0019a6e:	83 c4 10             	add    esp,0x10
c0019a71:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a74:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a77:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019a7a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a7e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a82:	b9 08 00 00 00       	mov    ecx,0x8
c0019a87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a89:	31 f6                	xor    esi,esi
c0019a8b:	50                   	push   eax
c0019a8c:	68 00 01 00 00       	push   0x100
c0019a91:	6a 00                	push   0x0
c0019a93:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a97:	50                   	push   eax
c0019a98:	e8 b3 6c fe ff       	call   c0000750 <memset>
c0019a9d:	83 c4 10             	add    esp,0x10
c0019aa0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019aa8:	eb 0f                	jmp    c0019ab9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019aaa:	3c 3d                	cmp    al,0x3d
c0019aac:	74 07                	je     c0019ab5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019aae:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019ab2:	46                   	inc    esi
c0019ab3:	eb 04                	jmp    c0019ab9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019ab5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019ab9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019abe:	0f 85 c6 fe ff ff    	jne    c001998a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019ac4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019aca:	5b                   	pop    ebx
c0019acb:	5e                   	pop    esi
c0019acc:	5f                   	pop    edi
c0019acd:	5d                   	pop    ebp
c0019ace:	c3                   	ret    
c0019acf:	90                   	nop

c0019ad0 <EnvVarContainer::__loadSystem()>:
c0019ad0:	83 ec 10             	sub    esp,0x10
c0019ad3:	68 c0 cc 02 c0       	push   0xc002ccc0
c0019ad8:	68 ad b3 02 c0       	push   0xc002b3ad
c0019add:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ae1:	e8 04 fe ff ff       	call   c00198ea <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ae6:	83 c4 1c             	add    esp,0x1c
c0019ae9:	c3                   	ret    

c0019aea <EnvVarContainer::__loadUser()>:
c0019aea:	c3                   	ret    
c0019aeb:	90                   	nop

c0019aec <EnvVarContainer::EnvVarContainer(Process*)>:
c0019aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019afa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019afe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019b0c:	90                   	nop
c0019b0d:	c3                   	ret    

c0019b0e <EnvVarContainer::~EnvVarContainer()>:
c0019b0e:	83 ec 0c             	sub    esp,0xc
c0019b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b18:	85 c0                	test   eax,eax
c0019b1a:	74 1d                	je     c0019b39 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b22:	85 c0                	test   eax,eax
c0019b24:	74 13                	je     c0019b39 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b2d:	83 ec 0c             	sub    esp,0xc
c0019b30:	50                   	push   eax
c0019b31:	e8 76 5a ff ff       	call   c000f5ac <free>
c0019b36:	83 c4 10             	add    esp,0x10
c0019b39:	90                   	nop
c0019b3a:	83 c4 0c             	add    esp,0xc
c0019b3d:	c3                   	ret    

c0019b3e <Krnl::getEnv(Process*, char const*)>:
c0019b3e:	53                   	push   ebx
c0019b3f:	83 ec 08             	sub    esp,0x8
c0019b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b4a:	39 05 d0 0c 03 c0    	cmp    DWORD PTR ds:0xc0030cd0,eax
c0019b50:	74 04                	je     c0019b56 <Krnl::getEnv(Process*, char const*)+0x18>
c0019b52:	85 c0                	test   eax,eax
c0019b54:	75 0b                	jne    c0019b61 <Krnl::getEnv(Process*, char const*)+0x23>
c0019b56:	a1 b4 02 03 c0       	mov    eax,ds:0xc00302b4
c0019b5b:	85 c0                	test   eax,eax
c0019b5d:	75 19                	jne    c0019b78 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019b5f:	eb 27                	jmp    c0019b88 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019b61:	52                   	push   edx
c0019b62:	52                   	push   edx
c0019b63:	53                   	push   ebx
c0019b64:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019b6a:	e8 79 fc ff ff       	call   c00197e8 <EnvVarContainer::getEnv(char const*)>
c0019b6f:	83 c4 10             	add    esp,0x10
c0019b72:	85 c0                	test   eax,eax
c0019b74:	75 28                	jne    c0019b9e <Krnl::getEnv(Process*, char const*)+0x60>
c0019b76:	eb de                	jmp    c0019b56 <Krnl::getEnv(Process*, char const*)+0x18>
c0019b78:	52                   	push   edx
c0019b79:	52                   	push   edx
c0019b7a:	53                   	push   ebx
c0019b7b:	50                   	push   eax
c0019b7c:	e8 67 fc ff ff       	call   c00197e8 <EnvVarContainer::getEnv(char const*)>
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	85 c0                	test   eax,eax
c0019b86:	75 16                	jne    c0019b9e <Krnl::getEnv(Process*, char const*)+0x60>
c0019b88:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019b8c:	a1 b8 02 03 c0       	mov    eax,ds:0xc00302b8
c0019b91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019b95:	83 c4 08             	add    esp,0x8
c0019b98:	5b                   	pop    ebx
c0019b99:	e9 4a fc ff ff       	jmp    c00197e8 <EnvVarContainer::getEnv(char const*)>
c0019b9e:	83 c4 08             	add    esp,0x8
c0019ba1:	5b                   	pop    ebx
c0019ba2:	c3                   	ret    

c0019ba3 <Krnl::setEnvSystem(char const*, char const*)>:
c0019ba3:	83 ec 10             	sub    esp,0x10
c0019ba6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019baa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bae:	ff 35 b8 02 03 c0    	push   DWORD PTR ds:0xc00302b8
c0019bb4:	e8 6d fc ff ff       	call   c0019826 <EnvVarContainer::setEnv(char const*, char const*)>
c0019bb9:	83 c4 1c             	add    esp,0x1c
c0019bbc:	c3                   	ret    

c0019bbd <Krnl::setEnvUser(char const*, char const*)>:
c0019bbd:	a1 b4 02 03 c0       	mov    eax,ds:0xc00302b4
c0019bc2:	85 c0                	test   eax,eax
c0019bc4:	74 15                	je     c0019bdb <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019bc6:	83 ec 10             	sub    esp,0x10
c0019bc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019bd1:	50                   	push   eax
c0019bd2:	e8 4f fc ff ff       	call   c0019826 <EnvVarContainer::setEnv(char const*, char const*)>
c0019bd7:	83 c4 1c             	add    esp,0x1c
c0019bda:	c3                   	ret    
c0019bdb:	c3                   	ret    

c0019bdc <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be0:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019be6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019bea:	e9 37 fc ff ff       	jmp    c0019826 <EnvVarContainer::setEnv(char const*, char const*)>

c0019bef <Krnl::deleteEnvSystem(char const*)>:
c0019bef:	c3                   	ret    

c0019bf0 <Krnl::deleteEnvUser(char const*)>:
c0019bf0:	c3                   	ret    

c0019bf1 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019bf1:	c3                   	ret    

c0019bf2 <Krnl::newProcessEnv(Process*)>:
c0019bf2:	83 ec 28             	sub    esp,0x28
c0019bf5:	6a 0c                	push   0xc
c0019bf7:	e8 a0 59 ff ff       	call   c000f59c <malloc>
c0019bfc:	5a                   	pop    edx
c0019bfd:	59                   	pop    ecx
c0019bfe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019c02:	50                   	push   eax
c0019c03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c07:	e8 e0 fe ff ff       	call   c0019aec <EnvVarContainer::EnvVarContainer(Process*)>
c0019c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c10:	83 c4 2c             	add    esp,0x2c
c0019c13:	c3                   	ret    

c0019c14 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019c14:	57                   	push   edi
c0019c15:	56                   	push   esi
c0019c16:	53                   	push   ebx
c0019c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c1b:	83 ec 0c             	sub    esp,0xc
c0019c1e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019c24:	6a 0c                	push   0xc
c0019c26:	e8 71 59 ff ff       	call   c000f59c <malloc>
c0019c2b:	89 c3                	mov    ebx,eax
c0019c2d:	58                   	pop    eax
c0019c2e:	5a                   	pop    edx
c0019c2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c33:	53                   	push   ebx
c0019c34:	e8 b3 fe ff ff       	call   c0019aec <EnvVarContainer::EnvVarContainer(Process*)>
c0019c39:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c3b:	89 03                	mov    DWORD PTR [ebx],eax
c0019c3d:	c1 e0 03             	shl    eax,0x3
c0019c40:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c43:	e8 54 59 ff ff       	call   c000f59c <malloc>
c0019c48:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019c4b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019c4d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019c50:	c1 e1 03             	shl    ecx,0x3
c0019c53:	89 c7                	mov    edi,eax
c0019c55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c57:	83 c4 10             	add    esp,0x10
c0019c5a:	89 d8                	mov    eax,ebx
c0019c5c:	5b                   	pop    ebx
c0019c5d:	5e                   	pop    esi
c0019c5e:	5f                   	pop    edi
c0019c5f:	c3                   	ret    

c0019c60 <Krnl::loadSystemEnv()>:
c0019c60:	53                   	push   ebx
c0019c61:	83 ec 14             	sub    esp,0x14
c0019c64:	6a 0c                	push   0xc
c0019c66:	e8 31 59 ff ff       	call   c000f59c <malloc>
c0019c6b:	89 c3                	mov    ebx,eax
c0019c6d:	58                   	pop    eax
c0019c6e:	5a                   	pop    edx
c0019c6f:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c0019c75:	53                   	push   ebx
c0019c76:	e8 71 fe ff ff       	call   c0019aec <EnvVarContainer::EnvVarContainer(Process*)>
c0019c7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c7e:	89 1d b8 02 03 c0    	mov    DWORD PTR ds:0xc00302b8,ebx
c0019c84:	e8 47 fe ff ff       	call   c0019ad0 <EnvVarContainer::__loadSystem()>
c0019c89:	83 c4 18             	add    esp,0x18
c0019c8c:	5b                   	pop    ebx
c0019c8d:	c3                   	ret    

c0019c8e <Krnl::loadUserEnv()>:
c0019c8e:	53                   	push   ebx
c0019c8f:	83 ec 14             	sub    esp,0x14
c0019c92:	6a 0c                	push   0xc
c0019c94:	e8 03 59 ff ff       	call   c000f59c <malloc>
c0019c99:	89 c3                	mov    ebx,eax
c0019c9b:	58                   	pop    eax
c0019c9c:	5a                   	pop    edx
c0019c9d:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c0019ca3:	53                   	push   ebx
c0019ca4:	e8 43 fe ff ff       	call   c0019aec <EnvVarContainer::EnvVarContainer(Process*)>
c0019ca9:	89 1d b4 02 03 c0    	mov    DWORD PTR ds:0xc00302b4,ebx
c0019caf:	83 c4 18             	add    esp,0x18
c0019cb2:	5b                   	pop    ebx
c0019cb3:	c3                   	ret    

c0019cb4 <Krnl::flushEnv()>:
c0019cb4:	c3                   	ret    

c0019cb5 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019cb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb9:	8b 15 b4 02 03 c0    	mov    edx,DWORD PTR ds:0xc00302b4
c0019cbf:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019cc5:	a1 b8 02 03 c0       	mov    eax,ds:0xc00302b8
c0019cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ccc:	03 01                	add    eax,DWORD PTR [ecx]
c0019cce:	85 d2                	test   edx,edx
c0019cd0:	74 02                	je     c0019cd4 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019cd2:	03 02                	add    eax,DWORD PTR [edx]
c0019cd4:	c3                   	ret    

c0019cd5 <Krnl::getProcessEnvPair(Process*, int)>:
c0019cd5:	57                   	push   edi
c0019cd6:	56                   	push   esi
c0019cd7:	8b 35 b4 02 03 c0    	mov    esi,DWORD PTR ds:0xc00302b4
c0019cdd:	53                   	push   ebx
c0019cde:	85 f6                	test   esi,esi
c0019ce0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019ce4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019ce8:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019cee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cf2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019cf4:	75 16                	jne    c0019d0c <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019cf6:	39 c2                	cmp    edx,eax
c0019cf8:	7c 16                	jl     c0019d10 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019cfa:	8b 0d b8 02 03 c0    	mov    ecx,DWORD PTR ds:0xc00302b8
c0019d00:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019d02:	01 c6                	add    esi,eax
c0019d04:	39 d6                	cmp    esi,edx
c0019d06:	7e 3c                	jle    c0019d44 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019d08:	29 c2                	sub    edx,eax
c0019d0a:	eb 04                	jmp    c0019d10 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019d0c:	39 c2                	cmp    edx,eax
c0019d0e:	7d 05                	jge    c0019d15 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019d10:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019d13:	eb 20                	jmp    c0019d35 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019d15:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019d17:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019d1a:	39 d1                	cmp    ecx,edx
c0019d1c:	7e 04                	jle    c0019d22 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019d1e:	29 c2                	sub    edx,eax
c0019d20:	eb 10                	jmp    c0019d32 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019d22:	8b 35 b8 02 03 c0    	mov    esi,DWORD PTR ds:0xc00302b8
c0019d28:	03 0e                	add    ecx,DWORD PTR [esi]
c0019d2a:	39 d1                	cmp    ecx,edx
c0019d2c:	7e 16                	jle    c0019d44 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019d2e:	29 c2                	sub    edx,eax
c0019d30:	29 fa                	sub    edx,edi
c0019d32:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d35:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019d38:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d3a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019d3d:	89 03                	mov    DWORD PTR [ebx],eax
c0019d3f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019d42:	eb 1d                	jmp    c0019d61 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019d44:	83 ec 0c             	sub    esp,0xc
c0019d47:	68 cf b3 02 c0       	push   0xc002b3cf
c0019d4c:	e8 18 00 00 00       	call   c0019d69 <Krnl::panic(char const*)>
c0019d51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019d57:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d5e:	83 c4 10             	add    esp,0x10
c0019d61:	89 d8                	mov    eax,ebx
c0019d63:	5b                   	pop    ebx
c0019d64:	5e                   	pop    esi
c0019d65:	5f                   	pop    edi
c0019d66:	c2 04 00             	ret    0x4

c0019d69 <Krnl::panic(char const*)>:
c0019d69:	55                   	push   ebp
c0019d6a:	89 e5                	mov    ebp,esp
c0019d6c:	53                   	push   ebx
c0019d6d:	83 ec 10             	sub    esp,0x10
c0019d70:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019d73:	fa                   	cli    
c0019d74:	c6 05 c4 02 03 c0 01 	mov    BYTE PTR ds:0xc00302c4,0x1
c0019d7b:	53                   	push   ebx
c0019d7c:	e8 75 58 ff ff       	call   c000f5f6 <Krnl::setBootMessage(char const*)>
c0019d81:	58                   	pop    eax
c0019d82:	c6 05 c0 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6c0,0x0
c0019d89:	5a                   	pop    edx
c0019d8a:	53                   	push   ebx
c0019d8b:	68 e9 b3 02 c0       	push   0xc002b3e9
c0019d90:	e8 68 88 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0019d95:	59                   	pop    ecx
c0019d96:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019d9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da1:	e8 55 65 ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c0019da6:	83 c4 0c             	add    esp,0xc
c0019da9:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019dae:	6a 01                	push   0x1
c0019db0:	6a 0f                	push   0xf
c0019db2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db8:	e8 9d 63 ff ff       	call   c001015a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019dbd:	58                   	pop    eax
c0019dbe:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019dc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc9:	e8 ae 68 ff ff       	call   c001067c <VgaText::clearScreen()>
c0019dce:	58                   	pop    eax
c0019dcf:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019dd4:	5a                   	pop    edx
c0019dd5:	68 02 b4 02 c0       	push   0xc002b402
c0019dda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de0:	e8 23 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019de5:	59                   	pop    ecx
c0019de6:	58                   	pop    eax
c0019de7:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019dec:	68 a8 b4 02 c0       	push   0xc002b4a8
c0019df1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019df7:	e8 0c 6a ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019dfc:	58                   	pop    eax
c0019dfd:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019e02:	5a                   	pop    edx
c0019e03:	68 1e b4 02 c0       	push   0xc002b41e
c0019e08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e0e:	e8 f5 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e13:	59                   	pop    ecx
c0019e14:	58                   	pop    eax
c0019e15:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019e1a:	53                   	push   ebx
c0019e1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e21:	e8 e2 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e26:	58                   	pop    eax
c0019e27:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019e2c:	5a                   	pop    edx
c0019e2d:	68 3e b4 02 c0       	push   0xc002b43e
c0019e32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e38:	e8 cb 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e3d:	a1 c0 02 03 c0       	mov    eax,ds:0xc00302c0
c0019e42:	83 c4 10             	add    esp,0x10
c0019e45:	85 c0                	test   eax,eax
c0019e47:	74 02                	je     c0019e4b <Krnl::panic(char const*)+0xe2>
c0019e49:	ff d0                	call   eax
c0019e4b:	83 ec 0c             	sub    esp,0xc
c0019e4e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e51:	e8 8c 30 00 00       	call   c001cee2 <Thr::getDriverNameFromAddress(unsigned long)>
c0019e56:	83 c4 10             	add    esp,0x10
c0019e59:	89 c3                	mov    ebx,eax
c0019e5b:	85 c0                	test   eax,eax
c0019e5d:	0f 84 4e 02 00 00    	je     c001a0b1 <Krnl::panic(char const*)+0x348>
c0019e63:	83 ec 08             	sub    esp,0x8
c0019e66:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019e6b:	68 e4 b4 02 c0       	push   0xc002b4e4
c0019e70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e76:	e8 8d 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e7b:	58                   	pop    eax
c0019e7c:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019e81:	5a                   	pop    edx
c0019e82:	68 1e b4 02 c0       	push   0xc002b41e
c0019e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8d:	e8 76 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019e92:	59                   	pop    ecx
c0019e93:	58                   	pop    eax
c0019e94:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019e99:	53                   	push   ebx
c0019e9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea0:	e8 63 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019ea5:	83 c4 10             	add    esp,0x10
c0019ea8:	83 ec 08             	sub    esp,0x8
c0019eab:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019eb0:	68 3d b4 02 c0       	push   0xc002b43d
c0019eb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ebb:	e8 48 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019ec0:	58                   	pop    eax
c0019ec1:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019ec6:	5a                   	pop    edx
c0019ec7:	68 3c b5 02 c0       	push   0xc002b53c
c0019ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed2:	e8 31 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019ed7:	59                   	pop    ecx
c0019ed8:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019edd:	5b                   	pop    ebx
c0019ede:	68 7c b5 02 c0       	push   0xc002b57c
c0019ee3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee9:	e8 1a 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019eee:	58                   	pop    eax
c0019eef:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019ef4:	5a                   	pop    edx
c0019ef5:	68 29 b4 02 c0       	push   0xc002b429
c0019efa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f00:	e8 03 69 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f05:	59                   	pop    ecx
c0019f06:	5b                   	pop    ebx
c0019f07:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f0a:	68 41 b4 02 c0       	push   0xc002b441
c0019f0f:	e8 e9 86 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0019f14:	58                   	pop    eax
c0019f15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f18:	5a                   	pop    edx
c0019f19:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019f1c:	68 4a b4 02 c0       	push   0xc002b44a
c0019f21:	e8 d7 86 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0019f26:	59                   	pop    ecx
c0019f27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f2a:	5b                   	pop    ebx
c0019f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f2d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019f30:	68 53 b4 02 c0       	push   0xc002b453
c0019f35:	e8 c3 86 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0019f3a:	58                   	pop    eax
c0019f3b:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019f40:	5a                   	pop    edx
c0019f41:	68 c0 b5 02 c0       	push   0xc002b5c0
c0019f46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f4c:	e8 b7 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f51:	59                   	pop    ecx
c0019f52:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019f57:	5b                   	pop    ebx
c0019f58:	68 5c b4 02 c0       	push   0xc002b45c
c0019f5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f63:	e8 a0 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f68:	0f 20 c0             	mov    eax,cr0
c0019f6b:	5a                   	pop    edx
c0019f6c:	59                   	pop    ecx
c0019f6d:	50                   	push   eax
c0019f6e:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019f73:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f79:	e8 44 68 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019f7e:	5b                   	pop    ebx
c0019f7f:	58                   	pop    eax
c0019f80:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019f85:	68 66 b4 02 c0       	push   0xc002b466
c0019f8a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f90:	e8 73 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019f95:	0f 20 d0             	mov    eax,cr2
c0019f98:	5a                   	pop    edx
c0019f99:	59                   	pop    ecx
c0019f9a:	50                   	push   eax
c0019f9b:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019fa0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa6:	e8 17 68 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019fab:	5b                   	pop    ebx
c0019fac:	58                   	pop    eax
c0019fad:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019fb2:	68 70 b4 02 c0       	push   0xc002b470
c0019fb7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fbd:	e8 46 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019fc2:	0f 20 d8             	mov    eax,cr3
c0019fc5:	5a                   	pop    edx
c0019fc6:	59                   	pop    ecx
c0019fc7:	50                   	push   eax
c0019fc8:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019fcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fd3:	e8 ea 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c0019fd8:	5b                   	pop    ebx
c0019fd9:	58                   	pop    eax
c0019fda:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019fdf:	68 83 b4 02 c0       	push   0xc002b483
c0019fe4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fea:	e8 19 68 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c0019fef:	0f 20 e0             	mov    eax,cr4
c0019ff2:	5a                   	pop    edx
c0019ff3:	59                   	pop    ecx
c0019ff4:	50                   	push   eax
c0019ff5:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0019ffa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a000:	e8 bd 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001a005:	5b                   	pop    ebx
c001a006:	58                   	pop    eax
c001a007:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a00c:	68 8d b4 02 c0       	push   0xc002b48d
c001a011:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a017:	e8 ec 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a01c:	5a                   	pop    edx
c001a01d:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a022:	59                   	pop    ecx
c001a023:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a029:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a02c:	50                   	push   eax
c001a02d:	e8 90 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001a032:	5b                   	pop    ebx
c001a033:	58                   	pop    eax
c001a034:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a039:	68 a4 b4 02 c0       	push   0xc002b4a4
c001a03e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a044:	e8 bf 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a049:	5a                   	pop    edx
c001a04a:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a04f:	59                   	pop    ecx
c001a050:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a056:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a059:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a05c:	50                   	push   eax
c001a05d:	e8 60 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001a062:	5b                   	pop    ebx
c001a063:	58                   	pop    eax
c001a064:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a069:	68 a4 b4 02 c0       	push   0xc002b4a4
c001a06e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a074:	e8 8f 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a079:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a07e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a081:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a087:	8b 12                	mov    edx,DWORD PTR [edx]
c001a089:	59                   	pop    ecx
c001a08a:	5b                   	pop    ebx
c001a08b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a08e:	50                   	push   eax
c001a08f:	e8 2e 67 ff ff       	call   c00107c2 <VgaText::putx(unsigned int)>
c001a094:	83 c4 10             	add    esp,0x10
c001a097:	b2 fe                	mov    dl,0xfe
c001a099:	e4 60                	in     al,0x60
c001a09b:	3c 1c                	cmp    al,0x1c
c001a09d:	74 04                	je     c001a0a3 <Krnl::panic(char const*)+0x33a>
c001a09f:	3c 5a                	cmp    al,0x5a
c001a0a1:	75 f6                	jne    c001a099 <Krnl::panic(char const*)+0x330>
c001a0a3:	e4 64                	in     al,0x64
c001a0a5:	a8 02                	test   al,0x2
c001a0a7:	75 fa                	jne    c001a0a3 <Krnl::panic(char const*)+0x33a>
c001a0a9:	88 d0                	mov    al,dl
c001a0ab:	e6 64                	out    0x64,al
c001a0ad:	fa                   	cli    
c001a0ae:	f4                   	hlt    
c001a0af:	eb e8                	jmp    c001a099 <Krnl::panic(char const*)+0x330>
c001a0b1:	50                   	push   eax
c001a0b2:	50                   	push   eax
c001a0b3:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a0b8:	68 10 b5 02 c0       	push   0xc002b510
c001a0bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c3:	e8 40 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a0c8:	58                   	pop    eax
c001a0c9:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a0ce:	5a                   	pop    edx
c001a0cf:	68 1e b4 02 c0       	push   0xc002b41e
c001a0d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0da:	e8 29 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a0df:	59                   	pop    ecx
c001a0e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a0e5:	5b                   	pop    ebx
c001a0e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a0e9:	83 c0 0c             	add    eax,0xc
c001a0ec:	50                   	push   eax
c001a0ed:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001a0f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f8:	e8 0b 67 ff ff       	call   c0010808 <VgaText::puts(char const*)>
c001a0fd:	83 c4 10             	add    esp,0x10
c001a100:	e9 a3 fd ff ff       	jmp    c0019ea8 <Krnl::panic(char const*)+0x13f>

c001a105 <Net::switchEndian16(unsigned short)>:
c001a105:	83 ec 04             	sub    esp,0x4
c001a108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a10c:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a110:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a114:	c1 f8 08             	sar    eax,0x8
c001a117:	89 c2                	mov    edx,eax
c001a119:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a11d:	c1 e0 08             	shl    eax,0x8
c001a120:	09 d0                	or     eax,edx
c001a122:	83 c4 04             	add    esp,0x4
c001a125:	c3                   	ret    

c001a126 <Net::switchEndian32(unsigned int)>:
c001a126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a12a:	c1 e8 18             	shr    eax,0x18
c001a12d:	89 c2                	mov    edx,eax
c001a12f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a133:	c1 e0 08             	shl    eax,0x8
c001a136:	25 00 00 ff 00       	and    eax,0xff0000
c001a13b:	09 c2                	or     edx,eax
c001a13d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a141:	c1 e8 08             	shr    eax,0x8
c001a144:	25 00 ff 00 00       	and    eax,0xff00
c001a149:	09 c2                	or     edx,eax
c001a14b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a14f:	c1 e0 18             	shl    eax,0x18
c001a152:	09 d0                	or     eax,edx
c001a154:	c3                   	ret    

c001a155 <Net::crc32Calc(unsigned char*, int)>:
c001a155:	83 ec 10             	sub    esp,0x10
c001a158:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a15d:	75 07                	jne    c001a166 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a15f:	b8 00 00 00 00       	mov    eax,0x0
c001a164:	eb 7c                	jmp    c001a1e2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a166:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a16b:	7f 07                	jg     c001a174 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a16d:	b8 00 00 00 00       	mov    eax,0x0
c001a172:	eb 6e                	jmp    c001a1e2 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a174:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a17c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a188:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a18c:	7d 4e                	jge    c001a1dc <Net::crc32Calc(unsigned char*, int)+0x87>
c001a18e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a192:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a196:	01 d0                	add    eax,edx
c001a198:	8a 00                	mov    al,BYTE PTR [eax]
c001a19a:	0f b6 c0             	movzx  eax,al
c001a19d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a1a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a1a9:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a1ae:	7f 26                	jg     c001a1d6 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1b4:	83 e0 01             	and    eax,0x1
c001a1b7:	74 0d                	je     c001a1c6 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a1b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1bd:	d1 e8                	shr    eax,1
c001a1bf:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a1c4:	eb 06                	jmp    c001a1cc <Net::crc32Calc(unsigned char*, int)+0x77>
c001a1c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ca:	d1 e8                	shr    eax,1
c001a1cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1d0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a1d4:	eb d3                	jmp    c001a1a9 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a1d6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a1da:	eb a8                	jmp    c001a184 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a1dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e0:	f7 d0                	not    eax
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	c3                   	ret    

c001a1e6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a1e6:	57                   	push   edi
c001a1e7:	56                   	push   esi
c001a1e8:	53                   	push   ebx
c001a1e9:	83 ec 60             	sub    esp,0x60
c001a1ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1f3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a1f7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a1ff:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a204:	7f 1a                	jg     c001a220 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a206:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a20d:	8d 50 01             	lea    edx,[eax+0x1]
c001a210:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a217:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a21a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a21e:	eb df                	jmp    c001a1ff <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a220:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a227:	8d 50 01             	lea    edx,[eax+0x1]
c001a22a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a231:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a234:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a23b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a23f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a243:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a247:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a24f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a25b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a25f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a263:	89 c6                	mov    esi,eax
c001a265:	89 d7                	mov    edi,edx
c001a267:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a269:	89 c8                	mov    eax,ecx
c001a26b:	89 fa                	mov    edx,edi
c001a26d:	89 f3                	mov    ebx,esi
c001a26f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a273:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a277:	89 04 24             	mov    DWORD PTR [esp],eax
c001a27a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a282:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a289:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a28d:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a291:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a295:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a29d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a2a9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a2ad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a2b1:	89 c6                	mov    esi,eax
c001a2b3:	89 d7                	mov    edi,edx
c001a2b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2b7:	89 c8                	mov    eax,ecx
c001a2b9:	89 fa                	mov    edx,edi
c001a2bb:	89 f3                	mov    ebx,esi
c001a2bd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a2c1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a2c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2c9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a2d1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a2d8:	0f b7 c0             	movzx  eax,ax
c001a2db:	c1 f8 08             	sar    eax,0x8
c001a2de:	89 c1                	mov    ecx,eax
c001a2e0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2e7:	8d 50 01             	lea    edx,[eax+0x1]
c001a2ea:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2f1:	88 ca                	mov    dl,cl
c001a2f3:	88 10                	mov    BYTE PTR [eax],dl
c001a2f5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a2fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a303:	8d 48 01             	lea    ecx,[eax+0x1]
c001a306:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a30d:	88 10                	mov    BYTE PTR [eax],dl
c001a30f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a313:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a317:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a31e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a322:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a32a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a32e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a332:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a336:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a33a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a33e:	89 c6                	mov    esi,eax
c001a340:	89 d7                	mov    edi,edx
c001a342:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a344:	89 c8                	mov    eax,ecx
c001a346:	89 fa                	mov    edx,edi
c001a348:	89 f3                	mov    ebx,esi
c001a34a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a34e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a352:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a356:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a35a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a361:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a368:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a36c:	50                   	push   eax
c001a36d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a371:	e8 df fd ff ff       	call   c001a155 <Net::crc32Calc(unsigned char*, int)>
c001a376:	83 c4 08             	add    esp,0x8
c001a379:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a37d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a381:	c1 e8 18             	shr    eax,0x18
c001a384:	89 c1                	mov    ecx,eax
c001a386:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a38d:	8d 50 01             	lea    edx,[eax+0x1]
c001a390:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a397:	88 ca                	mov    dl,cl
c001a399:	88 10                	mov    BYTE PTR [eax],dl
c001a39b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a39f:	c1 e8 10             	shr    eax,0x10
c001a3a2:	89 c1                	mov    ecx,eax
c001a3a4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3ab:	8d 50 01             	lea    edx,[eax+0x1]
c001a3ae:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3b5:	88 ca                	mov    dl,cl
c001a3b7:	88 10                	mov    BYTE PTR [eax],dl
c001a3b9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a3bd:	c1 e8 08             	shr    eax,0x8
c001a3c0:	89 c1                	mov    ecx,eax
c001a3c2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3c9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3cc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3d3:	88 ca                	mov    dl,cl
c001a3d5:	88 10                	mov    BYTE PTR [eax],dl
c001a3d7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3de:	8d 50 01             	lea    edx,[eax+0x1]
c001a3e1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3e8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a3ec:	88 10                	mov    BYTE PTR [eax],dl
c001a3ee:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3f2:	83 c4 60             	add    esp,0x60
c001a3f5:	5b                   	pop    ebx
c001a3f6:	5e                   	pop    esi
c001a3f7:	5f                   	pop    edi
c001a3f8:	c3                   	ret    

c001a3f9 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a3f9:	57                   	push   edi
c001a3fa:	56                   	push   esi
c001a3fb:	53                   	push   ebx
c001a3fc:	83 ec 70             	sub    esp,0x70
c001a3ff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a406:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a40a:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a412:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a419:	83 c0 0e             	add    eax,0xe
c001a41c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a420:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a427:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a42b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a437:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a43b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a43f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a443:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a447:	89 c6                	mov    esi,eax
c001a449:	89 d7                	mov    edi,edx
c001a44b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a44d:	89 c8                	mov    eax,ecx
c001a44f:	89 fa                	mov    edx,edi
c001a451:	89 f3                	mov    ebx,esi
c001a453:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a457:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a45b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a45f:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a467:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a46e:	83 c0 08             	add    eax,0x8
c001a471:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a475:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a47c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a480:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a488:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a48c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a490:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a494:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a498:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a49c:	89 c6                	mov    esi,eax
c001a49e:	89 d7                	mov    edi,edx
c001a4a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4a2:	89 c8                	mov    eax,ecx
c001a4a4:	89 fa                	mov    edx,edi
c001a4a6:	89 f3                	mov    ebx,esi
c001a4a8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a4ac:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a4b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4b4:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a4bc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4c3:	8d 50 01             	lea    edx,[eax+0x1]
c001a4c6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4cd:	8a 00                	mov    al,BYTE PTR [eax]
c001a4cf:	0f b6 c0             	movzx  eax,al
c001a4d2:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a4d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4de:	8d 50 01             	lea    edx,[eax+0x1]
c001a4e1:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4e8:	8a 00                	mov    al,BYTE PTR [eax]
c001a4ea:	0f b6 c0             	movzx  eax,al
c001a4ed:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a4f2:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a4f7:	c1 e0 08             	shl    eax,0x8
c001a4fa:	89 c2                	mov    edx,eax
c001a4fc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a500:	09 d0                	or     eax,edx
c001a502:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a509:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a50d:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a515:	75 46                	jne    c001a55d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a517:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a51e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a521:	66 3d dc 05          	cmp    ax,0x5dc
c001a525:	77 16                	ja     c001a53d <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a527:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a52e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a531:	0f b7 c0             	movzx  eax,ax
c001a534:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a53b:	eb 20                	jmp    c001a55d <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a53d:	83 ec 0c             	sub    esp,0xc
c001a540:	68 e8 b5 02 c0       	push   0xc002b5e8
c001a545:	e8 b3 80 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001a54a:	83 c4 10             	add    esp,0x10
c001a54d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a554:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a558:	e9 17 01 00 00       	jmp    c001a674 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a55d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a564:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a56b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a56d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a571:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a578:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a57c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a584:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a588:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a58c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a590:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a594:	89 c6                	mov    esi,eax
c001a596:	89 d7                	mov    edi,edx
c001a598:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a59a:	89 c8                	mov    eax,ecx
c001a59c:	89 fa                	mov    edx,edi
c001a59e:	89 f3                	mov    ebx,esi
c001a5a0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a5a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a5a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5ab:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a5b2:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a5b9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5c0:	8d 50 01             	lea    edx,[eax+0x1]
c001a5c3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5ca:	8a 00                	mov    al,BYTE PTR [eax]
c001a5cc:	0f b6 c0             	movzx  eax,al
c001a5cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a5d3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5da:	8d 50 01             	lea    edx,[eax+0x1]
c001a5dd:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5e4:	8a 00                	mov    al,BYTE PTR [eax]
c001a5e6:	0f b6 c0             	movzx  eax,al
c001a5e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a5ed:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a5f7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a5fe:	8a 00                	mov    al,BYTE PTR [eax]
c001a600:	0f b6 c0             	movzx  eax,al
c001a603:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a607:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a60e:	8d 50 01             	lea    edx,[eax+0x1]
c001a611:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a618:	8a 00                	mov    al,BYTE PTR [eax]
c001a61a:	0f b6 c0             	movzx  eax,al
c001a61d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a621:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a625:	c1 e0 18             	shl    eax,0x18
c001a628:	89 c2                	mov    edx,eax
c001a62a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a62e:	c1 e0 10             	shl    eax,0x10
c001a631:	09 c2                	or     edx,eax
c001a633:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a637:	c1 e0 08             	shl    eax,0x8
c001a63a:	09 d0                	or     eax,edx
c001a63c:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a640:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a644:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a64b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a64f:	83 e8 04             	sub    eax,0x4
c001a652:	83 ec 08             	sub    esp,0x8
c001a655:	50                   	push   eax
c001a656:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a65a:	e8 f6 fa ff ff       	call   c001a155 <Net::crc32Calc(unsigned char*, int)>
c001a65f:	83 c4 10             	add    esp,0x10
c001a662:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a666:	0f 94 c2             	sete   dl
c001a669:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a670:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a673:	90                   	nop
c001a674:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a67b:	83 c4 70             	add    esp,0x70
c001a67e:	5b                   	pop    ebx
c001a67f:	5e                   	pop    esi
c001a680:	5f                   	pop    edi
c001a681:	c2 04 00             	ret    0x4

c001a684 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a684:	55                   	push   ebp
c001a685:	57                   	push   edi
c001a686:	56                   	push   esi
c001a687:	53                   	push   ebx
c001a688:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a68e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a695:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a697:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a69a:	80 fb 40             	cmp    bl,0x40
c001a69d:	75 1b                	jne    c001a6ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a69f:	8a 16                	mov    dl,BYTE PTR [esi]
c001a6a1:	84 d2                	test   dl,dl
c001a6a3:	0f 84 f1 00 00 00    	je     c001a79a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6a9:	8d 46 01             	lea    eax,[esi+0x1]
c001a6ac:	80 fa 3a             	cmp    dl,0x3a
c001a6af:	74 04                	je     c001a6b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a6b1:	89 c6                	mov    esi,eax
c001a6b3:	eb ea                	jmp    c001a69f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a6b5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a6b8:	89 c6                	mov    esi,eax
c001a6ba:	50                   	push   eax
c001a6bb:	6a 40                	push   0x40
c001a6bd:	6a 00                	push   0x0
c001a6bf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a6c3:	50                   	push   eax
c001a6c4:	e8 87 60 fe ff       	call   c0000750 <memset>
c001a6c9:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a6d0:	31 c0                	xor    eax,eax
c001a6d2:	83 c4 10             	add    esp,0x10
c001a6d5:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a6d7:	84 c9                	test   cl,cl
c001a6d9:	0f 84 bb 00 00 00    	je     c001a79a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6df:	3d c7 00 00 00       	cmp    eax,0xc7
c001a6e4:	0f 8f b0 00 00 00    	jg     c001a79a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6ea:	80 f9 0a             	cmp    cl,0xa
c001a6ed:	0f 85 98 00 00 00    	jne    c001a78b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a6f3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a6f8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a6fc:	a8 df                	test   al,0xdf
c001a6fe:	0f 94 c1             	sete   cl
c001a701:	3c 23                	cmp    al,0x23
c001a703:	0f 94 c2             	sete   dl
c001a706:	08 d1                	or     cl,dl
c001a708:	75 4a                	jne    c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a70a:	8d 50 f7             	lea    edx,[eax-0x9]
c001a70d:	80 fa 01             	cmp    dl,0x1
c001a710:	76 42                	jbe    c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a712:	3c 5b                	cmp    al,0x5b
c001a714:	75 42                	jne    c001a758 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a716:	80 fb 40             	cmp    bl,0x40
c001a719:	75 39                	jne    c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a71b:	83 ec 0c             	sub    esp,0xc
c001a71e:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a722:	52                   	push   edx
c001a723:	e8 44 60 fe ff       	call   c000076c <strlen>
c001a728:	83 c4 10             	add    esp,0x10
c001a72b:	83 f8 3f             	cmp    eax,0x3f
c001a72e:	77 6a                	ja     c001a79a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a730:	50                   	push   eax
c001a731:	50                   	push   eax
c001a732:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a736:	52                   	push   edx
c001a737:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a73b:	52                   	push   edx
c001a73c:	e8 cb 60 fe ff       	call   c000080c <strcpy>
c001a741:	58                   	pop    eax
c001a742:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a746:	52                   	push   edx
c001a747:	e8 20 60 fe ff       	call   c000076c <strlen>
c001a74c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	31 d2                	xor    edx,edx
c001a756:	eb 3a                	jmp    c001a792 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a758:	80 fb 40             	cmp    bl,0x40
c001a75b:	74 06                	je     c001a763 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a75d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a761:	eb 20                	jmp    c001a783 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a763:	50                   	push   eax
c001a764:	50                   	push   eax
c001a765:	55                   	push   ebp
c001a766:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a76a:	50                   	push   eax
c001a76b:	e8 28 61 fe ff       	call   c0000898 <strcmp>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	85 c0                	test   eax,eax
c001a775:	75 dd                	jne    c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a777:	eb e4                	jmp    c001a75d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a779:	8d 50 01             	lea    edx,[eax+0x1]
c001a77c:	80 f9 3d             	cmp    cl,0x3d
c001a77f:	74 1d                	je     c001a79e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a781:	89 d0                	mov    eax,edx
c001a783:	8a 08                	mov    cl,BYTE PTR [eax]
c001a785:	84 c9                	test   cl,cl
c001a787:	75 f0                	jne    c001a779 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a789:	eb 0f                	jmp    c001a79a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a78b:	8d 50 01             	lea    edx,[eax+0x1]
c001a78e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a792:	47                   	inc    edi
c001a793:	89 d0                	mov    eax,edx
c001a795:	e9 3b ff ff ff       	jmp    c001a6d5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a79a:	31 c0                	xor    eax,eax
c001a79c:	eb 33                	jmp    c001a7d1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a79e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a7a2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a7a5:	50                   	push   eax
c001a7a6:	50                   	push   eax
c001a7a7:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a7ab:	50                   	push   eax
c001a7ac:	56                   	push   esi
c001a7ad:	e8 e6 60 fe ff       	call   c0000898 <strcmp>
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	85 c0                	test   eax,eax
c001a7b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7bb:	75 97                	jne    c001a754 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7bd:	51                   	push   ecx
c001a7be:	51                   	push   ecx
c001a7bf:	52                   	push   edx
c001a7c0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a7c7:	e8 40 60 fe ff       	call   c000080c <strcpy>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	b0 01                	mov    al,0x1
c001a7d1:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a7d7:	5b                   	pop    ebx
c001a7d8:	5e                   	pop    esi
c001a7d9:	5f                   	pop    edi
c001a7da:	5d                   	pop    ebp
c001a7db:	c3                   	ret    

c001a7dc <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a7dc:	57                   	push   edi
c001a7dd:	56                   	push   esi
c001a7de:	53                   	push   ebx
c001a7df:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7e5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a7ec:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a7f3:	53                   	push   ebx
c001a7f4:	e8 73 5f fe ff       	call   c000076c <strlen>
c001a7f9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7fc:	89 c7                	mov    edi,eax
c001a7fe:	e8 69 5f fe ff       	call   c000076c <strlen>
c001a803:	83 c4 10             	add    esp,0x10
c001a806:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a80a:	3d ff 00 00 00       	cmp    eax,0xff
c001a80f:	0f 87 d3 00 00 00    	ja     c001a8e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a815:	57                   	push   edi
c001a816:	57                   	push   edi
c001a817:	56                   	push   esi
c001a818:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a81c:	56                   	push   esi
c001a81d:	e8 ea 5f fe ff       	call   c000080c <strcpy>
c001a822:	58                   	pop    eax
c001a823:	5a                   	pop    edx
c001a824:	68 8a b9 02 c0       	push   0xc002b98a
c001a829:	56                   	push   esi
c001a82a:	e8 1d 61 fe ff       	call   c000094c <strcat>
c001a82f:	59                   	pop    ecx
c001a830:	5f                   	pop    edi
c001a831:	53                   	push   ebx
c001a832:	56                   	push   esi
c001a833:	e8 14 61 fe ff       	call   c000094c <strcat>
c001a838:	58                   	pop    eax
c001a839:	5a                   	pop    edx
c001a83a:	68 34 b6 02 c0       	push   0xc002b634
c001a83f:	56                   	push   esi
c001a840:	e8 07 61 fe ff       	call   c000094c <strcat>
c001a845:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a84c:	e8 4b 4d ff ff       	call   c000f59c <malloc>
c001a851:	83 c4 0c             	add    esp,0xc
c001a854:	89 c3                	mov    ebx,eax
c001a856:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c001a85c:	56                   	push   esi
c001a85d:	50                   	push   eax
c001a85e:	e8 f9 82 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	85 db                	test   ebx,ebx
c001a868:	74 7e                	je     c001a8e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a86a:	51                   	push   ecx
c001a86b:	51                   	push   ecx
c001a86c:	6a 01                	push   0x1
c001a86e:	53                   	push   ebx
c001a86f:	e8 4c 83 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	85 c0                	test   eax,eax
c001a879:	74 08                	je     c001a883 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a87b:	83 ec 0c             	sub    esp,0xc
c001a87e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a880:	53                   	push   ebx
c001a881:	eb 5f                	jmp    c001a8e2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a883:	52                   	push   edx
c001a884:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a888:	50                   	push   eax
c001a889:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a88d:	50                   	push   eax
c001a88e:	53                   	push   ebx
c001a88f:	e8 d8 85 ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c001a894:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a898:	83 c4 10             	add    esp,0x10
c001a89b:	89 c1                	mov    ecx,eax
c001a89d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a8a1:	74 31                	je     c001a8d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a8a3:	83 ec 0c             	sub    esp,0xc
c001a8a6:	50                   	push   eax
c001a8a7:	e8 f0 4c ff ff       	call   c000f59c <malloc>
c001a8ac:	89 c6                	mov    esi,eax
c001a8ae:	58                   	pop    eax
c001a8af:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8b1:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a8b5:	52                   	push   edx
c001a8b6:	56                   	push   esi
c001a8b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a8bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a8bf:	53                   	push   ebx
c001a8c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8c3:	83 c4 20             	add    esp,0x20
c001a8c6:	85 c0                	test   eax,eax
c001a8c8:	75 0a                	jne    c001a8d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a8ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8ce:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a8d2:	74 18                	je     c001a8ec <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	53                   	push   ebx
c001a8d8:	e8 41 83 ff ff       	call   c0012c1e <File::close()>
c001a8dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8e5:	83 c4 10             	add    esp,0x10
c001a8e8:	31 c0                	xor    eax,eax
c001a8ea:	eb 3b                	jmp    c001a927 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	53                   	push   ebx
c001a8f0:	e8 29 83 ff ff       	call   c0012c1e <File::close()>
c001a8f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a8fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8fd:	83 c4 0c             	add    esp,0xc
c001a900:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a907:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a90e:	56                   	push   esi
c001a90f:	e8 70 fd ff ff       	call   c001a684 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a914:	89 34 24             	mov    DWORD PTR [esp],esi
c001a917:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a91b:	e8 8c 4c ff ff       	call   c000f5ac <free>
c001a920:	83 c4 10             	add    esp,0x10
c001a923:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a927:	81 c4 20 01 00 00    	add    esp,0x120
c001a92d:	5b                   	pop    ebx
c001a92e:	5e                   	pop    esi
c001a92f:	5f                   	pop    edi
c001a930:	c3                   	ret    

c001a931 <Reg::getLine(char*, char*, char*)>:
c001a931:	57                   	push   edi
c001a932:	56                   	push   esi
c001a933:	53                   	push   ebx
c001a934:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a938:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a93c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a940:	57                   	push   edi
c001a941:	56                   	push   esi
c001a942:	53                   	push   ebx
c001a943:	68 39 b6 02 c0       	push   0xc002b639
c001a948:	e8 8f fe ff ff       	call   c001a7dc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a94d:	83 c4 10             	add    esp,0x10
c001a950:	84 c0                	test   al,al
c001a952:	75 10                	jne    c001a964 <Reg::getLine(char*, char*, char*)+0x33>
c001a954:	57                   	push   edi
c001a955:	56                   	push   esi
c001a956:	53                   	push   ebx
c001a957:	68 5e b6 02 c0       	push   0xc002b65e
c001a95c:	e8 7b fe ff ff       	call   c001a7dc <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a961:	83 c4 10             	add    esp,0x10
c001a964:	5b                   	pop    ebx
c001a965:	5e                   	pop    esi
c001a966:	5f                   	pop    edi
c001a967:	c3                   	ret    

c001a968 <Reg::readInt(char*, char*, int*)>:
c001a968:	55                   	push   ebp
c001a969:	57                   	push   edi
c001a96a:	56                   	push   esi
c001a96b:	53                   	push   ebx
c001a96c:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a972:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a976:	57                   	push   edi
c001a977:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a97e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a985:	e8 a7 ff ff ff       	call   c001a931 <Reg::getLine(char*, char*, char*)>
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	84 c0                	test   al,al
c001a98f:	0f 84 b3 00 00 00    	je     c001aa48 <Reg::readInt(char*, char*, int*)+0xe0>
c001a995:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a999:	80 fa 2b             	cmp    dl,0x2b
c001a99c:	74 0c                	je     c001a9aa <Reg::readInt(char*, char*, int*)+0x42>
c001a99e:	80 fa 2d             	cmp    dl,0x2d
c001a9a1:	75 0e                	jne    c001a9b1 <Reg::readInt(char*, char*, int*)+0x49>
c001a9a3:	ba 01 00 00 00       	mov    edx,0x1
c001a9a8:	eb 0b                	jmp    c001a9b5 <Reg::readInt(char*, char*, int*)+0x4d>
c001a9aa:	ba 01 00 00 00       	mov    edx,0x1
c001a9af:	eb 02                	jmp    c001a9b3 <Reg::readInt(char*, char*, int*)+0x4b>
c001a9b1:	31 d2                	xor    edx,edx
c001a9b3:	31 c0                	xor    eax,eax
c001a9b5:	be 0a 00 00 00       	mov    esi,0xa
c001a9ba:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a9bf:	75 20                	jne    c001a9e1 <Reg::readInt(char*, char*, int*)+0x79>
c001a9c1:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a9c5:	80 f9 78             	cmp    cl,0x78
c001a9c8:	75 0a                	jne    c001a9d4 <Reg::readInt(char*, char*, int*)+0x6c>
c001a9ca:	83 c2 02             	add    edx,0x2
c001a9cd:	be 10 00 00 00       	mov    esi,0x10
c001a9d2:	eb 0d                	jmp    c001a9e1 <Reg::readInt(char*, char*, int*)+0x79>
c001a9d4:	80 f9 62             	cmp    cl,0x62
c001a9d7:	75 08                	jne    c001a9e1 <Reg::readInt(char*, char*, int*)+0x79>
c001a9d9:	83 c2 02             	add    edx,0x2
c001a9dc:	be 02 00 00 00       	mov    esi,0x2
c001a9e1:	01 d7                	add    edi,edx
c001a9e3:	31 d2                	xor    edx,edx
c001a9e5:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a9e7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a9eb:	80 fb 0d             	cmp    bl,0xd
c001a9ee:	0f 94 c3             	sete   bl
c001a9f1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a9f6:	0f 94 c1             	sete   cl
c001a9f9:	08 cb                	or     bl,cl
c001a9fb:	75 3a                	jne    c001aa37 <Reg::readInt(char*, char*, int*)+0xcf>
c001a9fd:	0f af d6             	imul   edx,esi
c001aa00:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aa05:	83 fe 10             	cmp    esi,0x10
c001aa08:	75 26                	jne    c001aa30 <Reg::readInt(char*, char*, int*)+0xc8>
c001aa0a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aa0e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aa11:	89 e9                	mov    ecx,ebp
c001aa13:	80 f9 05             	cmp    cl,0x5
c001aa16:	77 06                	ja     c001aa1e <Reg::readInt(char*, char*, int*)+0xb6>
c001aa18:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aa1c:	eb 16                	jmp    c001aa34 <Reg::readInt(char*, char*, int*)+0xcc>
c001aa1e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aa22:	83 e9 61             	sub    ecx,0x61
c001aa25:	80 f9 05             	cmp    cl,0x5
c001aa28:	77 06                	ja     c001aa30 <Reg::readInt(char*, char*, int*)+0xc8>
c001aa2a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aa2e:	eb 04                	jmp    c001aa34 <Reg::readInt(char*, char*, int*)+0xcc>
c001aa30:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aa34:	47                   	inc    edi
c001aa35:	eb ae                	jmp    c001a9e5 <Reg::readInt(char*, char*, int*)+0x7d>
c001aa37:	84 c0                	test   al,al
c001aa39:	74 02                	je     c001aa3d <Reg::readInt(char*, char*, int*)+0xd5>
c001aa3b:	f7 da                	neg    edx
c001aa3d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aa44:	89 10                	mov    DWORD PTR [eax],edx
c001aa46:	88 d8                	mov    al,bl
c001aa48:	81 c4 ec 00 00 00    	add    esp,0xec
c001aa4e:	5b                   	pop    ebx
c001aa4f:	5e                   	pop    esi
c001aa50:	5f                   	pop    edi
c001aa51:	5d                   	pop    ebp
c001aa52:	c3                   	ret    

c001aa53 <Reg::readString(char*, char*, char*, int)>:
c001aa53:	57                   	push   edi
c001aa54:	56                   	push   esi
c001aa55:	53                   	push   ebx
c001aa56:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aa5c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aa63:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001aa67:	57                   	push   edi
c001aa68:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa6f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001aa76:	e8 b6 fe ff ff       	call   c001a931 <Reg::getLine(char*, char*, char*)>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	89 c6                	mov    esi,eax
c001aa80:	84 c0                	test   al,al
c001aa82:	74 44                	je     c001aac8 <Reg::readString(char*, char*, char*, int)+0x75>
c001aa84:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001aa8b:	31 c0                	xor    eax,eax
c001aa8d:	4a                   	dec    edx
c001aa8e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001aa91:	84 c9                	test   cl,cl
c001aa93:	74 0f                	je     c001aaa4 <Reg::readString(char*, char*, char*, int)+0x51>
c001aa95:	39 c2                	cmp    edx,eax
c001aa97:	7e 0b                	jle    c001aaa4 <Reg::readString(char*, char*, char*, int)+0x51>
c001aa99:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aa9c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aaa1:	40                   	inc    eax
c001aaa2:	eb ea                	jmp    c001aa8e <Reg::readString(char*, char*, char*, int)+0x3b>
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	53                   	push   ebx
c001aaa8:	e8 bf 5c fe ff       	call   c000076c <strlen>
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aab5:	75 11                	jne    c001aac8 <Reg::readString(char*, char*, char*, int)+0x75>
c001aab7:	83 ec 0c             	sub    esp,0xc
c001aaba:	53                   	push   ebx
c001aabb:	e8 ac 5c fe ff       	call   c000076c <strlen>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001aac8:	81 c4 d0 00 00 00    	add    esp,0xd0
c001aace:	89 f0                	mov    eax,esi
c001aad0:	5b                   	pop    ebx
c001aad1:	5e                   	pop    esi
c001aad2:	5f                   	pop    edi
c001aad3:	c3                   	ret    

c001aad4 <Reg::readBool(char*, char*, bool*)>:
c001aad4:	83 ec 20             	sub    esp,0x20
c001aad7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aadb:	50                   	push   eax
c001aadc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aae4:	e8 7f fe ff ff       	call   c001a968 <Reg::readInt(char*, char*, int*)>
c001aae9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aaee:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aaf2:	0f 95 02             	setne  BYTE PTR [edx]
c001aaf5:	83 c4 2c             	add    esp,0x2c
c001aaf8:	c3                   	ret    

c001aaf9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aaf9:	53                   	push   ebx
c001aafa:	83 ec 1c             	sub    esp,0x1c
c001aafd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ab01:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab05:	50                   	push   eax
c001ab06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab0e:	e8 c1 ff ff ff       	call   c001aad4 <Reg::readBool(char*, char*, bool*)>
c001ab13:	83 c4 10             	add    esp,0x10
c001ab16:	84 c0                	test   al,al
c001ab18:	74 04                	je     c001ab1e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ab1a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ab1e:	88 d8                	mov    al,bl
c001ab20:	83 c4 18             	add    esp,0x18
c001ab23:	5b                   	pop    ebx
c001ab24:	c3                   	ret    

c001ab25 <Reg::readIntWithDefault(char*, char*, int)>:
c001ab25:	53                   	push   ebx
c001ab26:	83 ec 1c             	sub    esp,0x1c
c001ab29:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ab2d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab31:	50                   	push   eax
c001ab32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab3a:	e8 29 fe ff ff       	call   c001a968 <Reg::readInt(char*, char*, int*)>
c001ab3f:	83 c4 10             	add    esp,0x10
c001ab42:	84 c0                	test   al,al
c001ab44:	74 04                	je     c001ab4a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ab46:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ab4a:	89 d8                	mov    eax,ebx
c001ab4c:	83 c4 18             	add    esp,0x18
c001ab4f:	5b                   	pop    ebx
c001ab50:	c3                   	ret    

c001ab51 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ab51:	57                   	push   edi
c001ab52:	56                   	push   esi
c001ab53:	56                   	push   esi
c001ab54:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ab58:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ab5c:	56                   	push   esi
c001ab5d:	57                   	push   edi
c001ab5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab66:	e8 e8 fe ff ff       	call   c001aa53 <Reg::readString(char*, char*, char*, int)>
c001ab6b:	83 c4 10             	add    esp,0x10
c001ab6e:	84 c0                	test   al,al
c001ab70:	75 1a                	jne    c001ab8c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ab72:	51                   	push   ecx
c001ab73:	56                   	push   esi
c001ab74:	6a 00                	push   0x0
c001ab76:	57                   	push   edi
c001ab77:	e8 d4 5b fe ff       	call   c0000750 <memset>
c001ab7c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ab7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ab83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab85:	83 c4 10             	add    esp,0x10
c001ab88:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ab8c:	89 f8                	mov    eax,edi
c001ab8e:	5a                   	pop    edx
c001ab8f:	5e                   	pop    esi
c001ab90:	5f                   	pop    edi
c001ab91:	c3                   	ret    

c001ab92 <Sys::eject(regs*)>:
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	83 ca ff             	or     edx,0xffffffff
c001ab98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ab9f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aba4:	83 e9 41             	sub    ecx,0x41
c001aba7:	83 f9 19             	cmp    ecx,0x19
c001abaa:	77 18                	ja     c001abc4 <Sys::eject(regs*)+0x32>
c001abac:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c001abb3:	85 c9                	test   ecx,ecx
c001abb5:	74 0d                	je     c001abc4 <Sys::eject(regs*)+0x32>
c001abb7:	83 ec 0c             	sub    esp,0xc
c001abba:	51                   	push   ecx
c001abbb:	e8 28 b3 ff ff       	call   c0015ee8 <LogicalDisk::eject()>
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	99                   	cdq    
c001abc4:	83 c4 0c             	add    esp,0xc
c001abc7:	c3                   	ret    

c001abc8 <Sys::exit(regs*)>:
c001abc8:	83 ec 18             	sub    esp,0x18
c001abcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abcf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001abd2:	e8 be 35 00 00       	call   c001e195 <terminateTask(int)>
c001abd7:	83 c8 ff             	or     eax,0xffffffff
c001abda:	83 c4 1c             	add    esp,0x1c
c001abdd:	89 c2                	mov    edx,eax
c001abdf:	c3                   	ret    

c001abe0 <Sys::getCwd(regs*)>:
c001abe0:	83 ec 10             	sub    esp,0x10
c001abe3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001abe7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001abea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001abed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abf2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001abf5:	e8 64 7d ff ff       	call   c001295e <Fs::getcwd(Process*, char*, int)>
c001abfa:	83 c4 1c             	add    esp,0x1c
c001abfd:	99                   	cdq    
c001abfe:	c3                   	ret    

c001abff <Sys::getPID(regs*)>:
c001abff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac04:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac09:	99                   	cdq    
c001ac0a:	c3                   	ret    

c001ac0b <Sys::getRAMData(regs*)>:
c001ac0b:	8b 0d d4 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d7d4
c001ac11:	6b 05 d0 d7 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d7d0,0x64
c001ac18:	99                   	cdq    
c001ac19:	f7 f9                	idiv   ecx
c001ac1b:	c1 e0 18             	shl    eax,0x18
c001ac1e:	09 c8                	or     eax,ecx
c001ac20:	99                   	cdq    
c001ac21:	c3                   	ret    

c001ac22 <Sys::getVGAPtr(regs*)>:
c001ac22:	55                   	push   ebp
c001ac23:	57                   	push   edi
c001ac24:	56                   	push   esi
c001ac25:	53                   	push   ebx
c001ac26:	83 ec 18             	sub    esp,0x18
c001ac29:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac2d:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ac30:	e8 ac 30 00 00       	call   c001dce1 <Thr::processFromPID(int)>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	89 c1                	mov    ecx,eax
c001ac3a:	b8 01 00 00 00       	mov    eax,0x1
c001ac3f:	85 c9                	test   ecx,ecx
c001ac41:	74 59                	je     c001ac9c <Sys::getVGAPtr(regs*)+0x7a>
c001ac43:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ac49:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ac4d:	74 0c                	je     c001ac5b <Sys::getVGAPtr(regs*)+0x39>
c001ac4f:	83 ec 0c             	sub    esp,0xc
c001ac52:	53                   	push   ebx
c001ac53:	e8 a3 56 ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ac5e:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ac61:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ac66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac68:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ac6b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac6e:	81 c3 82 00 00 00    	add    ebx,0x82
c001ac74:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ac7a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac7d:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ac80:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ac86:	50                   	push   eax
c001ac87:	50                   	push   eax
c001ac88:	53                   	push   ebx
c001ac89:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ac8c:	05 a8 0f 00 00       	add    eax,0xfa8
c001ac91:	50                   	push   eax
c001ac92:	e8 75 5b fe ff       	call   c000080c <strcpy>
c001ac97:	83 c4 10             	add    esp,0x10
c001ac9a:	31 c0                	xor    eax,eax
c001ac9c:	83 c4 0c             	add    esp,0xc
c001ac9f:	31 d2                	xor    edx,edx
c001aca1:	5b                   	pop    ebx
c001aca2:	5e                   	pop    esi
c001aca3:	5f                   	pop    edi
c001aca4:	5d                   	pop    ebp
c001aca5:	c3                   	ret    

c001aca6 <Sys::loadDLL(regs*)>:
c001aca6:	56                   	push   esi
c001aca7:	53                   	push   ebx
c001aca8:	31 d2                	xor    edx,edx
c001acaa:	51                   	push   ecx
c001acab:	b8 01 00 00 00       	mov    eax,0x1
c001acb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001acb4:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001acb8:	0f 84 8c 00 00 00    	je     c001ad4a <Sys::loadDLL(regs*)+0xa4>
c001acbe:	83 ec 0c             	sub    esp,0xc
c001acc1:	68 14 01 00 00       	push   0x114
c001acc6:	e8 d1 48 ff ff       	call   c000f59c <malloc>
c001accb:	83 c4 0c             	add    esp,0xc
c001acce:	89 c3                	mov    ebx,eax
c001acd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acd5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acd8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001acdb:	53                   	push   ebx
c001acdc:	e8 7b 7e ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001ace1:	83 c4 10             	add    esp,0x10
c001ace4:	31 d2                	xor    edx,edx
c001ace6:	b8 02 00 00 00       	mov    eax,0x2
c001aceb:	85 db                	test   ebx,ebx
c001aced:	74 5b                	je     c001ad4a <Sys::loadDLL(regs*)+0xa4>
c001acef:	83 ec 0c             	sub    esp,0xc
c001acf2:	53                   	push   ebx
c001acf3:	e8 36 81 ff ff       	call   c0012e2e <File::exists()>
c001acf8:	83 c4 10             	add    esp,0x10
c001acfb:	84 c0                	test   al,al
c001acfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001acff:	75 11                	jne    c001ad12 <Sys::loadDLL(regs*)+0x6c>
c001ad01:	83 ec 0c             	sub    esp,0xc
c001ad04:	53                   	push   ebx
c001ad05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad08:	83 c4 10             	add    esp,0x10
c001ad0b:	b8 03 00 00 00       	mov    eax,0x3
c001ad10:	eb 36                	jmp    c001ad48 <Sys::loadDLL(regs*)+0xa2>
c001ad12:	83 ec 0c             	sub    esp,0xc
c001ad15:	53                   	push   ebx
c001ad16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad19:	58                   	pop    eax
c001ad1a:	5a                   	pop    edx
c001ad1b:	6a 00                	push   0x0
c001ad1d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad20:	e8 0e 22 00 00       	call   c001cf33 <Thr::loadDLL(char const*, bool)>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	89 c1                	mov    ecx,eax
c001ad2a:	31 d2                	xor    edx,edx
c001ad2c:	b8 04 00 00 00       	mov    eax,0x4
c001ad31:	85 c9                	test   ecx,ecx
c001ad33:	74 15                	je     c001ad4a <Sys::loadDLL(regs*)+0xa4>
c001ad35:	53                   	push   ebx
c001ad36:	53                   	push   ebx
c001ad37:	ff 35 88 d7 02 c0    	push   DWORD PTR ds:0xc002d788
c001ad3d:	51                   	push   ecx
c001ad3e:	e8 1e 24 00 00       	call   c001d161 <Thr::executeDLL(unsigned long, void*)>
c001ad43:	83 c4 10             	add    esp,0x10
c001ad46:	31 c0                	xor    eax,eax
c001ad48:	31 d2                	xor    edx,edx
c001ad4a:	59                   	pop    ecx
c001ad4b:	5b                   	pop    ebx
c001ad4c:	5e                   	pop    esi
c001ad4d:	c3                   	ret    

c001ad4e <Sys::read(regs*)>:
c001ad4e:	57                   	push   edi
c001ad4f:	56                   	push   esi
c001ad50:	53                   	push   ebx
c001ad51:	83 ec 10             	sub    esp,0x10
c001ad54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ad5b:	83 f8 02             	cmp    eax,0x2
c001ad5e:	77 10                	ja     c001ad70 <Sys::read(regs*)+0x22>
c001ad60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad65:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad68:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ad6e:	eb 0e                	jmp    c001ad7e <Sys::read(regs*)+0x30>
c001ad70:	83 ec 0c             	sub    esp,0xc
c001ad73:	50                   	push   eax
c001ad74:	e8 f6 62 ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	89 c1                	mov    ecx,eax
c001ad7e:	83 c8 ff             	or     eax,0xffffffff
c001ad81:	85 c9                	test   ecx,ecx
c001ad83:	89 c2                	mov    edx,eax
c001ad85:	74 28                	je     c001adaf <Sys::read(regs*)+0x61>
c001ad87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad8f:	31 ff                	xor    edi,edi
c001ad91:	83 ec 0c             	sub    esp,0xc
c001ad94:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad96:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ad9a:	52                   	push   edx
c001ad9b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad9e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ada1:	57                   	push   edi
c001ada2:	56                   	push   esi
c001ada3:	51                   	push   ecx
c001ada4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ada7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001adab:	83 c4 20             	add    esp,0x20
c001adae:	99                   	cdq    
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	5b                   	pop    ebx
c001adb3:	5e                   	pop    esi
c001adb4:	5f                   	pop    edi
c001adb5:	c3                   	ret    

c001adb6 <Sys::sbrk(regs*)>:
c001adb6:	56                   	push   esi
c001adb7:	53                   	push   ebx
c001adb8:	50                   	push   eax
c001adb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001adc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adc5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001adc8:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001adce:	85 db                	test   ebx,ebx
c001add0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001add3:	74 02                	je     c001add7 <Sys::sbrk(regs*)+0x21>
c001add5:	79 06                	jns    c001addd <Sys::sbrk(regs*)+0x27>
c001add7:	89 f0                	mov    eax,esi
c001add9:	31 d2                	xor    edx,edx
c001addb:	eb 2a                	jmp    c001ae07 <Sys::sbrk(regs*)+0x51>
c001addd:	83 c8 ff             	or     eax,0xffffffff
c001ade0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ade6:	89 c2                	mov    edx,eax
c001ade8:	77 1d                	ja     c001ae07 <Sys::sbrk(regs*)+0x51>
c001adea:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001adf0:	50                   	push   eax
c001adf1:	c1 ea 0c             	shr    edx,0xc
c001adf4:	68 07 0c 00 00       	push   0xc07
c001adf9:	52                   	push   edx
c001adfa:	51                   	push   ecx
c001adfb:	e8 a6 6c ff ff       	call   c0011aa6 <VAS::allocatePages(int, int)>
c001ae00:	89 f0                	mov    eax,esi
c001ae02:	31 d2                	xor    edx,edx
c001ae04:	83 c4 10             	add    esp,0x10
c001ae07:	59                   	pop    ecx
c001ae08:	5b                   	pop    ebx
c001ae09:	5e                   	pop    esi
c001ae0a:	c3                   	ret    

c001ae0b <Sys::setCwd(regs*)>:
c001ae0b:	83 ec 14             	sub    esp,0x14
c001ae0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae1a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae1d:	e8 ab 80 ff ff       	call   c0012ecd <Fs::setcwd(Process*, char*)>
c001ae22:	83 c4 1c             	add    esp,0x1c
c001ae25:	99                   	cdq    
c001ae26:	c3                   	ret    

c001ae27 <Sys::setTime(regs*)>:
c001ae27:	55                   	push   ebp
c001ae28:	31 c9                	xor    ecx,ecx
c001ae2a:	57                   	push   edi
c001ae2b:	bd 0c 00 00 00       	mov    ebp,0xc
c001ae30:	56                   	push   esi
c001ae31:	53                   	push   ebx
c001ae32:	31 db                	xor    ebx,ebx
c001ae34:	83 ec 10             	sub    esp,0x10
c001ae37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae3b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ae3e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ae41:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ae44:	89 c2                	mov    edx,eax
c001ae46:	66 81 ef 6c 07       	sub    di,0x76c
c001ae4b:	83 e2 1f             	and    edx,0x1f
c001ae4e:	c1 e7 10             	shl    edi,0x10
c001ae51:	42                   	inc    edx
c001ae52:	c1 e8 05             	shr    eax,0x5
c001ae55:	88 d1                	mov    cl,dl
c001ae57:	31 d2                	xor    edx,edx
c001ae59:	f7 f5                	div    ebp
c001ae5b:	89 dd                	mov    ebp,ebx
c001ae5d:	88 d5                	mov    ch,dl
c001ae5f:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ae65:	0f b7 c1             	movzx  eax,cx
c001ae68:	31 d2                	xor    edx,edx
c001ae6a:	09 f8                	or     eax,edi
c001ae6c:	bf 3c 00 00 00       	mov    edi,0x3c
c001ae71:	89 c1                	mov    ecx,eax
c001ae73:	89 f0                	mov    eax,esi
c001ae75:	f7 f7                	div    edi
c001ae77:	c1 e2 10             	shl    edx,0x10
c001ae7a:	09 d5                	or     ebp,edx
c001ae7c:	31 d2                	xor    edx,edx
c001ae7e:	89 eb                	mov    ebx,ebp
c001ae80:	f7 f7                	div    edi
c001ae82:	bf 10 0e 00 00       	mov    edi,0xe10
c001ae87:	88 d7                	mov    bh,dl
c001ae89:	89 f0                	mov    eax,esi
c001ae8b:	31 d2                	xor    edx,edx
c001ae8d:	f7 f7                	div    edi
c001ae8f:	bf 18 00 00 00       	mov    edi,0x18
c001ae94:	31 d2                	xor    edx,edx
c001ae96:	f7 f7                	div    edi
c001ae98:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001ae9d:	88 d3                	mov    bl,dl
c001ae9f:	53                   	push   ebx
c001aea0:	51                   	push   ecx
c001aea1:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001aea7:	e8 6a 88 ff ff       	call   c0013716 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001aeac:	83 c4 1c             	add    esp,0x1c
c001aeaf:	83 f0 01             	xor    eax,0x1
c001aeb2:	5b                   	pop    ebx
c001aeb3:	0f b6 c0             	movzx  eax,al
c001aeb6:	5e                   	pop    esi
c001aeb7:	31 d2                	xor    edx,edx
c001aeb9:	5f                   	pop    edi
c001aeba:	5d                   	pop    ebp
c001aebb:	c3                   	ret    

c001aebc <Sys::timezone(regs*)>:
c001aebc:	53                   	push   ebx
c001aebd:	83 ec 08             	sub    esp,0x8
c001aec0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aec4:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001aec8:	75 17                	jne    c001aee1 <Sys::timezone(regs*)+0x25>
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	68 79 b6 02 c0       	push   0xc002b679
c001aed2:	e8 26 77 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001aed7:	83 c8 ff             	or     eax,0xffffffff
c001aeda:	83 c4 10             	add    esp,0x10
c001aedd:	89 c2                	mov    edx,eax
c001aedf:	eb 20                	jmp    c001af01 <Sys::timezone(regs*)+0x45>
c001aee1:	83 ec 0c             	sub    esp,0xc
c001aee4:	68 8e b6 02 c0       	push   0xc002b68e
c001aee9:	e8 0f 77 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001aeee:	58                   	pop    eax
c001aeef:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aef2:	e8 81 85 ff ff       	call   c0013478 <User::loadClockSettings(int)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	b8 01 00 00 00       	mov    eax,0x1
c001aeff:	31 d2                	xor    edx,edx
c001af01:	83 c4 08             	add    esp,0x8
c001af04:	5b                   	pop    ebx
c001af05:	c3                   	ret    

c001af06 <Sys::write(regs*)>:
c001af06:	57                   	push   edi
c001af07:	56                   	push   esi
c001af08:	53                   	push   ebx
c001af09:	83 ec 10             	sub    esp,0x10
c001af0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af10:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af13:	83 f8 02             	cmp    eax,0x2
c001af16:	77 10                	ja     c001af28 <Sys::write(regs*)+0x22>
c001af18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af1d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af20:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af26:	eb 0e                	jmp    c001af36 <Sys::write(regs*)+0x30>
c001af28:	83 ec 0c             	sub    esp,0xc
c001af2b:	50                   	push   eax
c001af2c:	e8 3e 61 ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	89 c1                	mov    ecx,eax
c001af36:	83 c8 ff             	or     eax,0xffffffff
c001af39:	85 c9                	test   ecx,ecx
c001af3b:	89 c2                	mov    edx,eax
c001af3d:	74 28                	je     c001af67 <Sys::write(regs*)+0x61>
c001af3f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af47:	31 ff                	xor    edi,edi
c001af49:	83 ec 0c             	sub    esp,0xc
c001af4c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af4e:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af52:	52                   	push   edx
c001af53:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af56:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af59:	57                   	push   edi
c001af5a:	56                   	push   esi
c001af5b:	51                   	push   ecx
c001af5c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001af5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af63:	83 c4 20             	add    esp,0x20
c001af66:	99                   	cdq    
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	5b                   	pop    ebx
c001af6b:	5e                   	pop    esi
c001af6c:	5f                   	pop    edi
c001af6d:	c3                   	ret    

c001af6e <Sys::wsbe(regs*)>:
c001af6e:	57                   	push   edi
c001af6f:	b9 0b 00 00 00       	mov    ecx,0xb
c001af74:	56                   	push   esi
c001af75:	be cd b6 02 c0       	mov    esi,0xc002b6cd
c001af7a:	53                   	push   ebx
c001af7b:	83 ec 30             	sub    esp,0x30
c001af7e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001af82:	fc                   	cld    
c001af83:	83 ec 0c             	sub    esp,0xc
c001af86:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001af88:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001af8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af94:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001af9a:	8b 06                	mov    eax,DWORD PTR [esi]
c001af9c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001af9f:	57                   	push   edi
c001afa0:	e8 c7 57 fe ff       	call   c000076c <strlen>
c001afa5:	5a                   	pop    edx
c001afa6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001afaa:	52                   	push   edx
c001afab:	31 d2                	xor    edx,edx
c001afad:	57                   	push   edi
c001afae:	52                   	push   edx
c001afaf:	50                   	push   eax
c001afb0:	56                   	push   esi
c001afb1:	ff d3                	call   ebx
c001afb3:	83 c4 14             	add    esp,0x14
c001afb6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001afba:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001afbd:	e8 d3 31 00 00       	call   c001e195 <terminateTask(int)>
c001afc2:	83 c4 40             	add    esp,0x40
c001afc5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001afca:	5b                   	pop    ebx
c001afcb:	31 d2                	xor    edx,edx
c001afcd:	5e                   	pop    esi
c001afce:	5f                   	pop    edi
c001afcf:	c3                   	ret    

c001afd0 <Sys::yield(regs*)>:
c001afd0:	57                   	push   edi
c001afd1:	56                   	push   esi
c001afd2:	53                   	push   ebx
c001afd3:	fa                   	cli    
c001afd4:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001afda:	e8 16 29 00 00       	call   c001d8f5 <schedule()>
c001afdf:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001afe4:	48                   	dec    eax
c001afe5:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001afea:	75 01                	jne    c001afed <Sys::yield(regs*)+0x1d>
c001afec:	fb                   	sti    
c001afed:	8b 35 f0 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002ddf0
c001aff3:	8b 3d f4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002ddf4
c001aff9:	89 f0                	mov    eax,esi
c001affb:	89 fb                	mov    ebx,edi
c001affd:	89 f1                	mov    ecx,esi
c001afff:	c1 e0 07             	shl    eax,0x7
c001b002:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b006:	25 80 30 0f 00       	and    eax,0xf3080
c001b00b:	c1 eb 17             	shr    ebx,0x17
c001b00e:	31 c8                	xor    eax,ecx
c001b010:	89 da                	mov    edx,ebx
c001b012:	5b                   	pop    ebx
c001b013:	5e                   	pop    esi
c001b014:	5f                   	pop    edi
c001b015:	c3                   	ret    

c001b016 <sysCallSeekDir(regs*)>:
c001b016:	31 c0                	xor    eax,eax
c001b018:	31 d2                	xor    edx,edx
c001b01a:	c3                   	ret    

c001b01b <sysCallTellDir(regs*)>:
c001b01b:	31 c0                	xor    eax,eax
c001b01d:	31 d2                	xor    edx,edx
c001b01f:	c3                   	ret    

c001b020 <sysCallVerify(regs*)>:
c001b020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b024:	31 d2                	xor    edx,edx
c001b026:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b029:	c3                   	ret    

c001b02a <sysCallGetArgc(regs*)>:
c001b02a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b02f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b032:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b038:	99                   	cdq    
c001b039:	c3                   	ret    

c001b03a <sysFormatDisk(regs*)>:
c001b03a:	56                   	push   esi
c001b03b:	53                   	push   ebx
c001b03c:	53                   	push   ebx
c001b03d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b041:	8b 1d f4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8f4
c001b047:	eb 25                	jmp    c001b06e <sysFormatDisk(regs*)+0x34>
c001b049:	83 ec 0c             	sub    esp,0xc
c001b04c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b04f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b051:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b054:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b057:	50                   	push   eax
c001b058:	ff 34 85 80 dd 02 c0 	push   DWORD PTR [eax*4-0x3ffd2280]
c001b05f:	53                   	push   ebx
c001b060:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b063:	83 c4 20             	add    esp,0x20
c001b066:	83 f8 08             	cmp    eax,0x8
c001b069:	75 12                	jne    c001b07d <sysFormatDisk(regs*)+0x43>
c001b06b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b06e:	85 db                	test   ebx,ebx
c001b070:	75 d7                	jne    c001b049 <sysFormatDisk(regs*)+0xf>
c001b072:	59                   	pop    ecx
c001b073:	b8 03 00 00 00       	mov    eax,0x3
c001b078:	31 d2                	xor    edx,edx
c001b07a:	5b                   	pop    ebx
c001b07b:	5e                   	pop    esi
c001b07c:	c3                   	ret    
c001b07d:	85 c0                	test   eax,eax
c001b07f:	74 1b                	je     c001b09c <sysFormatDisk(regs*)+0x62>
c001b081:	83 f8 09             	cmp    eax,0x9
c001b084:	74 0b                	je     c001b091 <sysFormatDisk(regs*)+0x57>
c001b086:	59                   	pop    ecx
c001b087:	b8 02 00 00 00       	mov    eax,0x2
c001b08c:	31 d2                	xor    edx,edx
c001b08e:	5b                   	pop    ebx
c001b08f:	5e                   	pop    esi
c001b090:	c3                   	ret    
c001b091:	59                   	pop    ecx
c001b092:	b8 01 00 00 00       	mov    eax,0x1
c001b097:	31 d2                	xor    edx,edx
c001b099:	5b                   	pop    ebx
c001b09a:	5e                   	pop    esi
c001b09b:	c3                   	ret    
c001b09c:	59                   	pop    ecx
c001b09d:	31 c0                	xor    eax,eax
c001b09f:	31 d2                	xor    edx,edx
c001b0a1:	5b                   	pop    ebx
c001b0a2:	5e                   	pop    esi
c001b0a3:	c3                   	ret    

c001b0a4 <sysSetDiskVolumeLabel(regs*)>:
c001b0a4:	56                   	push   esi
c001b0a5:	53                   	push   ebx
c001b0a6:	53                   	push   ebx
c001b0a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0ab:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b0ae:	83 f8 19             	cmp    eax,0x19
c001b0b1:	77 29                	ja     c001b0dc <sysSetDiskVolumeLabel(regs*)+0x38>
c001b0b3:	8b 0c 85 80 dd 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2280]
c001b0ba:	85 c9                	test   ecx,ecx
c001b0bc:	74 1e                	je     c001b0dc <sysSetDiskVolumeLabel(regs*)+0x38>
c001b0be:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b0c1:	85 d2                	test   edx,edx
c001b0c3:	74 17                	je     c001b0dc <sysSetDiskVolumeLabel(regs*)+0x38>
c001b0c5:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b0cb:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b0cd:	52                   	push   edx
c001b0ce:	50                   	push   eax
c001b0cf:	51                   	push   ecx
c001b0d0:	53                   	push   ebx
c001b0d1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	99                   	cdq    
c001b0d8:	59                   	pop    ecx
c001b0d9:	5b                   	pop    ebx
c001b0da:	5e                   	pop    esi
c001b0db:	c3                   	ret    
c001b0dc:	59                   	pop    ecx
c001b0dd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0e7:	5b                   	pop    ebx
c001b0e8:	5e                   	pop    esi
c001b0e9:	c3                   	ret    

c001b0ea <sysGetDiskVolumeLabel(regs*)>:
c001b0ea:	57                   	push   edi
c001b0eb:	56                   	push   esi
c001b0ec:	53                   	push   ebx
c001b0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0f1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b0f4:	83 fa 19             	cmp    edx,0x19
c001b0f7:	77 34                	ja     c001b12d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b0f9:	8b 0c 95 80 dd 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2280]
c001b100:	85 c9                	test   ecx,ecx
c001b102:	74 29                	je     c001b12d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b104:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b107:	85 db                	test   ebx,ebx
c001b109:	74 22                	je     c001b12d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b10b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b10e:	85 c0                	test   eax,eax
c001b110:	74 1b                	je     c001b12d <sysGetDiskVolumeLabel(regs*)+0x43>
c001b112:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b11d:	50                   	push   eax
c001b11e:	53                   	push   ebx
c001b11f:	52                   	push   edx
c001b120:	51                   	push   ecx
c001b121:	56                   	push   esi
c001b122:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b125:	83 c4 20             	add    esp,0x20
c001b128:	99                   	cdq    
c001b129:	5b                   	pop    ebx
c001b12a:	5e                   	pop    esi
c001b12b:	5f                   	pop    edi
c001b12c:	c3                   	ret    
c001b12d:	5b                   	pop    ebx
c001b12e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b133:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b138:	5e                   	pop    esi
c001b139:	5f                   	pop    edi
c001b13a:	c3                   	ret    

c001b13b <sysShutdown(regs*)>:
c001b13b:	83 ec 0c             	sub    esp,0xc
c001b13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b142:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b145:	85 c0                	test   eax,eax
c001b147:	74 18                	je     c001b161 <sysShutdown(regs*)+0x26>
c001b149:	83 f8 01             	cmp    eax,0x1
c001b14c:	74 38                	je     c001b186 <sysShutdown(regs*)+0x4b>
c001b14e:	83 f8 02             	cmp    eax,0x2
c001b151:	74 24                	je     c001b177 <sysShutdown(regs*)+0x3c>
c001b153:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b158:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b15d:	83 c4 0c             	add    esp,0xc
c001b160:	c3                   	ret    
c001b161:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001b166:	8b 10                	mov    edx,DWORD PTR [eax]
c001b168:	6a 00                	push   0x0
c001b16a:	6a 00                	push   0x0
c001b16c:	6a 00                	push   0x0
c001b16e:	50                   	push   eax
c001b16f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	eb dc                	jmp    c001b153 <sysShutdown(regs*)+0x18>
c001b177:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001b17c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b17e:	6a 00                	push   0x0
c001b180:	6a 00                	push   0x0
c001b182:	6a 01                	push   0x1
c001b184:	eb e8                	jmp    c001b16e <sysShutdown(regs*)+0x33>
c001b186:	a1 20 fe 02 c0       	mov    eax,ds:0xc002fe20
c001b18b:	85 c0                	test   eax,eax
c001b18d:	74 02                	je     c001b191 <sysShutdown(regs*)+0x56>
c001b18f:	ff d0                	call   eax
c001b191:	31 c0                	xor    eax,eax
c001b193:	31 d2                	xor    edx,edx
c001b195:	83 c4 0c             	add    esp,0xc
c001b198:	c3                   	ret    

c001b199 <sysCallRealpath(regs*)>:
c001b199:	83 ec 0c             	sub    esp,0xc
c001b19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b1a3:	85 d2                	test   edx,edx
c001b1a5:	74 07                	je     c001b1ae <sysCallRealpath(regs*)+0x15>
c001b1a7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b1aa:	85 c0                	test   eax,eax
c001b1ac:	75 0b                	jne    c001b1b9 <sysCallRealpath(regs*)+0x20>
c001b1ae:	b8 01 00 00 00       	mov    eax,0x1
c001b1b3:	31 d2                	xor    edx,edx
c001b1b5:	83 c4 0c             	add    esp,0xc
c001b1b8:	c3                   	ret    
c001b1b9:	51                   	push   ecx
c001b1ba:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b1c0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b1c3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b1c9:	51                   	push   ecx
c001b1ca:	52                   	push   edx
c001b1cb:	50                   	push   eax
c001b1cc:	e8 e1 77 ff ff       	call   c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b1d1:	83 c4 10             	add    esp,0x10
c001b1d4:	31 c0                	xor    eax,eax
c001b1d6:	31 d2                	xor    edx,edx
c001b1d8:	83 c4 0c             	add    esp,0xc
c001b1db:	c3                   	ret    

c001b1dc <sysCallReadDir(regs*)>:
c001b1dc:	53                   	push   ebx
c001b1dd:	83 ec 18             	sub    esp,0x18
c001b1e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1e4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b1e7:	83 f8 02             	cmp    eax,0x2
c001b1ea:	76 60                	jbe    c001b24c <sysCallReadDir(regs*)+0x70>
c001b1ec:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b1f3:	77 48                	ja     c001b23d <sysCallReadDir(regs*)+0x61>
c001b1f5:	83 ec 0c             	sub    esp,0xc
c001b1f8:	50                   	push   eax
c001b1f9:	e8 71 5e ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	85 c0                	test   eax,eax
c001b203:	74 38                	je     c001b23d <sysCallReadDir(regs*)+0x61>
c001b205:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b20d:	83 ec 0c             	sub    esp,0xc
c001b210:	8b 10                	mov    edx,DWORD PTR [eax]
c001b212:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b216:	51                   	push   ecx
c001b217:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b21a:	6a 00                	push   0x0
c001b21c:	68 10 01 00 00       	push   0x110
c001b221:	50                   	push   eax
c001b222:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b225:	83 c4 20             	add    esp,0x20
c001b228:	85 c0                	test   eax,eax
c001b22a:	74 29                	je     c001b255 <sysCallReadDir(regs*)+0x79>
c001b22c:	83 f8 07             	cmp    eax,0x7
c001b22f:	74 1b                	je     c001b24c <sysCallReadDir(regs*)+0x70>
c001b231:	b8 02 00 00 00       	mov    eax,0x2
c001b236:	31 d2                	xor    edx,edx
c001b238:	83 c4 18             	add    esp,0x18
c001b23b:	5b                   	pop    ebx
c001b23c:	c3                   	ret    
c001b23d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b242:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b247:	83 c4 18             	add    esp,0x18
c001b24a:	5b                   	pop    ebx
c001b24b:	c3                   	ret    
c001b24c:	b8 01 00 00 00       	mov    eax,0x1
c001b251:	31 d2                	xor    edx,edx
c001b253:	eb e3                	jmp    c001b238 <sysCallReadDir(regs*)+0x5c>
c001b255:	31 c0                	xor    eax,eax
c001b257:	31 d2                	xor    edx,edx
c001b259:	eb dd                	jmp    c001b238 <sysCallReadDir(regs*)+0x5c>

c001b25b <sysCallIsATTY(regs*)>:
c001b25b:	83 ec 0c             	sub    esp,0xc
c001b25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b262:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b265:	83 f8 02             	cmp    eax,0x2
c001b268:	76 07                	jbe    c001b271 <sysCallIsATTY(regs*)+0x16>
c001b26a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b26f:	75 26                	jne    c001b297 <sysCallIsATTY(regs*)+0x3c>
c001b271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b276:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b279:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b27f:	85 c0                	test   eax,eax
c001b281:	74 24                	je     c001b2a7 <sysCallIsATTY(regs*)+0x4c>
c001b283:	83 ec 0c             	sub    esp,0xc
c001b286:	8b 10                	mov    edx,DWORD PTR [eax]
c001b288:	50                   	push   eax
c001b289:	ff 12                	call   DWORD PTR [edx]
c001b28b:	31 d2                	xor    edx,edx
c001b28d:	0f b6 c0             	movzx  eax,al
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	83 c4 0c             	add    esp,0xc
c001b296:	c3                   	ret    
c001b297:	83 ec 0c             	sub    esp,0xc
c001b29a:	50                   	push   eax
c001b29b:	e8 cf 5d ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b2a0:	83 c4 10             	add    esp,0x10
c001b2a3:	85 c0                	test   eax,eax
c001b2a5:	75 dc                	jne    c001b283 <sysCallIsATTY(regs*)+0x28>
c001b2a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2b1:	83 c4 0c             	add    esp,0xc
c001b2b4:	c3                   	ret    

c001b2b5 <sysCallSeek(regs*)>:
c001b2b5:	53                   	push   ebx
c001b2b6:	83 ec 08             	sub    esp,0x8
c001b2b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2c0:	8d 50 fd             	lea    edx,[eax-0x3]
c001b2c3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b2c9:	77 32                	ja     c001b2fd <sysCallSeek(regs*)+0x48>
c001b2cb:	83 ec 0c             	sub    esp,0xc
c001b2ce:	50                   	push   eax
c001b2cf:	e8 9b 5d ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b2d4:	83 c4 0c             	add    esp,0xc
c001b2d7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b2da:	31 db                	xor    ebx,ebx
c001b2dc:	53                   	push   ebx
c001b2dd:	51                   	push   ecx
c001b2de:	50                   	push   eax
c001b2df:	e8 9a 79 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001b2e4:	83 c4 10             	add    esp,0x10
c001b2e7:	85 c0                	test   eax,eax
c001b2e9:	0f 95 c0             	setne  al
c001b2ec:	31 d2                	xor    edx,edx
c001b2ee:	0f b6 c0             	movzx  eax,al
c001b2f1:	f7 d8                	neg    eax
c001b2f3:	83 d2 00             	adc    edx,0x0
c001b2f6:	83 c4 08             	add    esp,0x8
c001b2f9:	f7 da                	neg    edx
c001b2fb:	5b                   	pop    ebx
c001b2fc:	c3                   	ret    
c001b2fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b302:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b307:	83 c4 08             	add    esp,0x8
c001b30a:	5b                   	pop    ebx
c001b30b:	c3                   	ret    

c001b30c <sysCallTell(regs*)>:
c001b30c:	53                   	push   ebx
c001b30d:	83 ec 08             	sub    esp,0x8
c001b310:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b314:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b317:	83 f8 02             	cmp    eax,0x2
c001b31a:	76 4d                	jbe    c001b369 <sysCallTell(regs*)+0x5d>
c001b31c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b321:	76 19                	jbe    c001b33c <sysCallTell(regs*)+0x30>
c001b323:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b326:	31 d2                	xor    edx,edx
c001b328:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b32e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b335:	31 c0                	xor    eax,eax
c001b337:	83 c4 08             	add    esp,0x8
c001b33a:	5b                   	pop    ebx
c001b33b:	c3                   	ret    
c001b33c:	83 ec 0c             	sub    esp,0xc
c001b33f:	50                   	push   eax
c001b340:	e8 2a 5d ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b345:	5a                   	pop    edx
c001b346:	59                   	pop    ecx
c001b347:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b34a:	50                   	push   eax
c001b34b:	e8 84 79 ff ff       	call   c0012cd4 <File::tell(unsigned long long*)>
c001b350:	83 c4 10             	add    esp,0x10
c001b353:	85 c0                	test   eax,eax
c001b355:	0f 95 c0             	setne  al
c001b358:	31 d2                	xor    edx,edx
c001b35a:	0f b6 c0             	movzx  eax,al
c001b35d:	f7 d8                	neg    eax
c001b35f:	83 d2 00             	adc    edx,0x0
c001b362:	83 c4 08             	add    esp,0x8
c001b365:	f7 da                	neg    edx
c001b367:	5b                   	pop    ebx
c001b368:	c3                   	ret    
c001b369:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b36e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b373:	83 c4 08             	add    esp,0x8
c001b376:	5b                   	pop    ebx
c001b377:	c3                   	ret    

c001b378 <sysCallSize(regs*)>:
c001b378:	53                   	push   ebx
c001b379:	83 ec 18             	sub    esp,0x18
c001b37c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b380:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b383:	83 f8 02             	cmp    eax,0x2
c001b386:	76 53                	jbe    c001b3db <sysCallSize(regs*)+0x63>
c001b388:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b38d:	76 19                	jbe    c001b3a8 <sysCallSize(regs*)+0x30>
c001b38f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b392:	31 d2                	xor    edx,edx
c001b394:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b39a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3a1:	31 c0                	xor    eax,eax
c001b3a3:	83 c4 18             	add    esp,0x18
c001b3a6:	5b                   	pop    ebx
c001b3a7:	c3                   	ret    
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	50                   	push   eax
c001b3ac:	e8 be 5c ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b3b1:	83 c4 0c             	add    esp,0xc
c001b3b4:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b3b8:	52                   	push   edx
c001b3b9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b3bc:	50                   	push   eax
c001b3bd:	e8 aa 7a ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c001b3c2:	83 c4 10             	add    esp,0x10
c001b3c5:	85 c0                	test   eax,eax
c001b3c7:	0f 95 c0             	setne  al
c001b3ca:	31 d2                	xor    edx,edx
c001b3cc:	0f b6 c0             	movzx  eax,al
c001b3cf:	f7 d8                	neg    eax
c001b3d1:	83 d2 00             	adc    edx,0x0
c001b3d4:	83 c4 18             	add    esp,0x18
c001b3d7:	f7 da                	neg    edx
c001b3d9:	5b                   	pop    ebx
c001b3da:	c3                   	ret    
c001b3db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3e5:	83 c4 18             	add    esp,0x18
c001b3e8:	5b                   	pop    ebx
c001b3e9:	c3                   	ret    

c001b3ea <sysCallSizeFromFilename(regs*)>:
c001b3ea:	57                   	push   edi
c001b3eb:	56                   	push   esi
c001b3ec:	53                   	push   ebx
c001b3ed:	83 ec 20             	sub    esp,0x20
c001b3f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b3f4:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b3f7:	83 fb 02             	cmp    ebx,0x2
c001b3fa:	0f 86 88 00 00 00    	jbe    c001b488 <sysCallSizeFromFilename(regs*)+0x9e>
c001b400:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b406:	76 1b                	jbe    c001b423 <sysCallSizeFromFilename(regs*)+0x39>
c001b408:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b40b:	31 d2                	xor    edx,edx
c001b40d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b413:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b41a:	83 c4 20             	add    esp,0x20
c001b41d:	31 c0                	xor    eax,eax
c001b41f:	5b                   	pop    ebx
c001b420:	5e                   	pop    esi
c001b421:	5f                   	pop    edi
c001b422:	c3                   	ret    
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	68 14 01 00 00       	push   0x114
c001b42b:	e8 6c 41 ff ff       	call   c000f59c <malloc>
c001b430:	83 c4 0c             	add    esp,0xc
c001b433:	89 c7                	mov    edi,eax
c001b435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b43a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b43d:	53                   	push   ebx
c001b43e:	57                   	push   edi
c001b43f:	e8 18 77 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001b444:	83 c4 0c             	add    esp,0xc
c001b447:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b44b:	50                   	push   eax
c001b44c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b44f:	57                   	push   edi
c001b450:	e8 17 7a ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	85 ff                	test   edi,edi
c001b45a:	74 14                	je     c001b470 <sysCallSizeFromFilename(regs*)+0x86>
c001b45c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b460:	8b 17                	mov    edx,DWORD PTR [edi]
c001b462:	83 ec 0c             	sub    esp,0xc
c001b465:	57                   	push   edi
c001b466:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b469:	83 c4 10             	add    esp,0x10
c001b46c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b470:	85 c0                	test   eax,eax
c001b472:	0f 95 c0             	setne  al
c001b475:	31 d2                	xor    edx,edx
c001b477:	0f b6 c0             	movzx  eax,al
c001b47a:	f7 d8                	neg    eax
c001b47c:	83 d2 00             	adc    edx,0x0
c001b47f:	83 c4 20             	add    esp,0x20
c001b482:	f7 da                	neg    edx
c001b484:	5b                   	pop    ebx
c001b485:	5e                   	pop    esi
c001b486:	5f                   	pop    edi
c001b487:	c3                   	ret    
c001b488:	83 c4 20             	add    esp,0x20
c001b48b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b490:	5b                   	pop    ebx
c001b491:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b496:	5e                   	pop    esi
c001b497:	5f                   	pop    edi
c001b498:	c3                   	ret    

c001b499 <sysCallClose(regs*)>:
c001b499:	53                   	push   ebx
c001b49a:	83 ec 08             	sub    esp,0x8
c001b49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4a4:	83 f8 02             	cmp    eax,0x2
c001b4a7:	76 41                	jbe    c001b4ea <sysCallClose(regs*)+0x51>
c001b4a9:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b4af:	83 fa 01             	cmp    edx,0x1
c001b4b2:	76 2d                	jbe    c001b4e1 <sysCallClose(regs*)+0x48>
c001b4b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4b9:	77 2f                	ja     c001b4ea <sysCallClose(regs*)+0x51>
c001b4bb:	83 ec 0c             	sub    esp,0xc
c001b4be:	50                   	push   eax
c001b4bf:	e8 ab 5b ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b4c4:	89 c3                	mov    ebx,eax
c001b4c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4c9:	e8 50 77 ff ff       	call   c0012c1e <File::close()>
c001b4ce:	83 c4 10             	add    esp,0x10
c001b4d1:	85 db                	test   ebx,ebx
c001b4d3:	74 0c                	je     c001b4e1 <sysCallClose(regs*)+0x48>
c001b4d5:	83 ec 0c             	sub    esp,0xc
c001b4d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4da:	53                   	push   ebx
c001b4db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4de:	83 c4 10             	add    esp,0x10
c001b4e1:	31 c0                	xor    eax,eax
c001b4e3:	31 d2                	xor    edx,edx
c001b4e5:	83 c4 08             	add    esp,0x8
c001b4e8:	5b                   	pop    ebx
c001b4e9:	c3                   	ret    
c001b4ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4f4:	83 c4 08             	add    esp,0x8
c001b4f7:	5b                   	pop    ebx
c001b4f8:	c3                   	ret    

c001b4f9 <sysCallOpenDir(regs*)>:
c001b4f9:	56                   	push   esi
c001b4fa:	53                   	push   ebx
c001b4fb:	53                   	push   ebx
c001b4fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b500:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b503:	85 f6                	test   esi,esi
c001b505:	74 59                	je     c001b560 <sysCallOpenDir(regs*)+0x67>
c001b507:	83 ec 0c             	sub    esp,0xc
c001b50a:	68 14 01 00 00       	push   0x114
c001b50f:	e8 88 40 ff ff       	call   c000f59c <malloc>
c001b514:	83 c4 0c             	add    esp,0xc
c001b517:	89 c6                	mov    esi,eax
c001b519:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b51e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b521:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b524:	56                   	push   esi
c001b525:	e8 de 7a ff ff       	call   c0013008 <Directory::Directory(char const*, Process*)>
c001b52a:	83 c4 10             	add    esp,0x10
c001b52d:	85 f6                	test   esi,esi
c001b52f:	74 2f                	je     c001b560 <sysCallOpenDir(regs*)+0x67>
c001b531:	83 ec 0c             	sub    esp,0xc
c001b534:	56                   	push   esi
c001b535:	e8 32 7b ff ff       	call   c001306c <Directory::open()>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	85 c0                	test   eax,eax
c001b53f:	75 1f                	jne    c001b560 <sysCallOpenDir(regs*)+0x67>
c001b541:	83 ec 0c             	sub    esp,0xc
c001b544:	56                   	push   esi
c001b545:	e8 30 58 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001b54a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b54d:	83 c4 10             	add    esp,0x10
c001b550:	89 02                	mov    DWORD PTR [edx],eax
c001b552:	c1 f8 1f             	sar    eax,0x1f
c001b555:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b558:	31 c0                	xor    eax,eax
c001b55a:	59                   	pop    ecx
c001b55b:	31 d2                	xor    edx,edx
c001b55d:	5b                   	pop    ebx
c001b55e:	5e                   	pop    esi
c001b55f:	c3                   	ret    
c001b560:	59                   	pop    ecx
c001b561:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b566:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b56b:	5b                   	pop    ebx
c001b56c:	5e                   	pop    esi
c001b56d:	c3                   	ret    

c001b56e <sysCallCloseDir(regs*)>:
c001b56e:	53                   	push   ebx
c001b56f:	83 ec 08             	sub    esp,0x8
c001b572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b576:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b579:	8d 50 fd             	lea    edx,[eax-0x3]
c001b57c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b582:	77 2f                	ja     c001b5b3 <sysCallCloseDir(regs*)+0x45>
c001b584:	83 ec 0c             	sub    esp,0xc
c001b587:	50                   	push   eax
c001b588:	e8 e2 5a ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b58d:	89 c3                	mov    ebx,eax
c001b58f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b592:	e8 31 7b ff ff       	call   c00130c8 <Directory::close()>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	85 db                	test   ebx,ebx
c001b59c:	74 0c                	je     c001b5aa <sysCallCloseDir(regs*)+0x3c>
c001b59e:	83 ec 0c             	sub    esp,0xc
c001b5a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5a3:	53                   	push   ebx
c001b5a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5a7:	83 c4 10             	add    esp,0x10
c001b5aa:	31 c0                	xor    eax,eax
c001b5ac:	31 d2                	xor    edx,edx
c001b5ae:	83 c4 08             	add    esp,0x8
c001b5b1:	5b                   	pop    ebx
c001b5b2:	c3                   	ret    
c001b5b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5bd:	83 c4 08             	add    esp,0x8
c001b5c0:	5b                   	pop    ebx
c001b5c1:	c3                   	ret    

c001b5c2 <sysCallMakeDir(regs*)>:
c001b5c2:	56                   	push   esi
c001b5c3:	53                   	push   ebx
c001b5c4:	83 ec 10             	sub    esp,0x10
c001b5c7:	68 14 01 00 00       	push   0x114
c001b5cc:	e8 cb 3f ff ff       	call   c000f59c <malloc>
c001b5d1:	83 c4 0c             	add    esp,0xc
c001b5d4:	89 c3                	mov    ebx,eax
c001b5d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5db:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b5e2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5e5:	53                   	push   ebx
c001b5e6:	e8 1d 7a ff ff       	call   c0013008 <Directory::Directory(char const*, Process*)>
c001b5eb:	83 c4 10             	add    esp,0x10
c001b5ee:	85 db                	test   ebx,ebx
c001b5f0:	74 32                	je     c001b624 <sysCallMakeDir(regs*)+0x62>
c001b5f2:	83 ec 0c             	sub    esp,0xc
c001b5f5:	53                   	push   ebx
c001b5f6:	e8 51 7c ff ff       	call   c001324c <Directory::create()>
c001b5fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5fe:	89 c6                	mov    esi,eax
c001b600:	e8 c3 7a ff ff       	call   c00130c8 <Directory::close()>
c001b605:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b607:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b60a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	31 c0                	xor    eax,eax
c001b612:	59                   	pop    ecx
c001b613:	85 f6                	test   esi,esi
c001b615:	5b                   	pop    ebx
c001b616:	0f 95 c0             	setne  al
c001b619:	5e                   	pop    esi
c001b61a:	31 d2                	xor    edx,edx
c001b61c:	f7 d8                	neg    eax
c001b61e:	83 d2 00             	adc    edx,0x0
c001b621:	f7 da                	neg    edx
c001b623:	c3                   	ret    
c001b624:	59                   	pop    ecx
c001b625:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b62a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b62f:	5b                   	pop    ebx
c001b630:	5e                   	pop    esi
c001b631:	c3                   	ret    

c001b632 <sysCallWait(regs*)>:
c001b632:	83 ec 10             	sub    esp,0x10
c001b635:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b639:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b63c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b63f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b642:	e8 b1 24 00 00       	call   c001daf8 <waitTask(int, int*, int)>
c001b647:	83 c4 1c             	add    esp,0x1c
c001b64a:	99                   	cdq    
c001b64b:	c3                   	ret    

c001b64c <sysCallNotImpl(regs*)>:
c001b64c:	83 ec 18             	sub    esp,0x18
c001b64f:	68 f9 b6 02 c0       	push   0xc002b6f9
c001b654:	e8 10 e7 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001b659:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b65e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b663:	83 c4 1c             	add    esp,0x1c
c001b666:	c3                   	ret    

c001b667 <sysPanic(regs*)>:
c001b667:	83 ec 18             	sub    esp,0x18
c001b66a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b66e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b671:	e8 f3 e6 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001b676:	b8 01 00 00 00       	mov    eax,0x1
c001b67b:	31 d2                	xor    edx,edx
c001b67d:	83 c4 1c             	add    esp,0x1c
c001b680:	c3                   	ret    

c001b681 <sysCallRmdir(regs*)>:
c001b681:	56                   	push   esi
c001b682:	53                   	push   ebx
c001b683:	83 ec 20             	sub    esp,0x20
c001b686:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b68a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b68d:	68 14 01 00 00       	push   0x114
c001b692:	e8 05 3f ff ff       	call   c000f59c <malloc>
c001b697:	83 c4 0c             	add    esp,0xc
c001b69a:	89 c3                	mov    ebx,eax
c001b69c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6a4:	56                   	push   esi
c001b6a5:	53                   	push   ebx
c001b6a6:	e8 b1 74 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001b6ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6ae:	e8 85 76 ff ff       	call   c0012d38 <File::unlink()>
c001b6b3:	83 c4 10             	add    esp,0x10
c001b6b6:	85 db                	test   ebx,ebx
c001b6b8:	74 14                	je     c001b6ce <sysCallRmdir(regs*)+0x4d>
c001b6ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6be:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6c0:	83 ec 0c             	sub    esp,0xc
c001b6c3:	53                   	push   ebx
c001b6c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6c7:	83 c4 10             	add    esp,0x10
c001b6ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6ce:	85 c0                	test   eax,eax
c001b6d0:	0f 95 c0             	setne  al
c001b6d3:	31 d2                	xor    edx,edx
c001b6d5:	0f b6 c0             	movzx  eax,al
c001b6d8:	f7 d8                	neg    eax
c001b6da:	83 d2 00             	adc    edx,0x0
c001b6dd:	83 c4 14             	add    esp,0x14
c001b6e0:	f7 da                	neg    edx
c001b6e2:	5b                   	pop    ebx
c001b6e3:	5e                   	pop    esi
c001b6e4:	c3                   	ret    

c001b6e5 <sysCallUnlink(regs*)>:
c001b6e5:	56                   	push   esi
c001b6e6:	53                   	push   ebx
c001b6e7:	83 ec 20             	sub    esp,0x20
c001b6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6ee:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b6f1:	68 14 01 00 00       	push   0x114
c001b6f6:	e8 a1 3e ff ff       	call   c000f59c <malloc>
c001b6fb:	83 c4 0c             	add    esp,0xc
c001b6fe:	89 c3                	mov    ebx,eax
c001b700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b705:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b708:	56                   	push   esi
c001b709:	53                   	push   ebx
c001b70a:	e8 4d 74 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001b70f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b712:	e8 21 76 ff ff       	call   c0012d38 <File::unlink()>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	85 db                	test   ebx,ebx
c001b71c:	74 14                	je     c001b732 <sysCallUnlink(regs*)+0x4d>
c001b71e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b722:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b724:	83 ec 0c             	sub    esp,0xc
c001b727:	53                   	push   ebx
c001b728:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b732:	85 c0                	test   eax,eax
c001b734:	0f 95 c0             	setne  al
c001b737:	31 d2                	xor    edx,edx
c001b739:	0f b6 c0             	movzx  eax,al
c001b73c:	f7 d8                	neg    eax
c001b73e:	83 d2 00             	adc    edx,0x0
c001b741:	83 c4 14             	add    esp,0x14
c001b744:	f7 da                	neg    edx
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	c3                   	ret    

c001b749 <sysCallGetArgv(regs*)>:
c001b749:	83 ec 0c             	sub    esp,0xc
c001b74c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b750:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b753:	85 c0                	test   eax,eax
c001b755:	78 2b                	js     c001b782 <sysCallGetArgv(regs*)+0x39>
c001b757:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b75d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b760:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b766:	7d 1a                	jge    c001b782 <sysCallGetArgv(regs*)+0x39>
c001b768:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b76f:	85 c0                	test   eax,eax
c001b771:	74 17                	je     c001b78a <sysCallGetArgv(regs*)+0x41>
c001b773:	83 ec 08             	sub    esp,0x8
c001b776:	50                   	push   eax
c001b777:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b77a:	e8 8d 50 fe ff       	call   c000080c <strcpy>
c001b77f:	83 c4 10             	add    esp,0x10
c001b782:	31 c0                	xor    eax,eax
c001b784:	31 d2                	xor    edx,edx
c001b786:	83 c4 0c             	add    esp,0xc
c001b789:	c3                   	ret    
c001b78a:	b8 01 00 00 00       	mov    eax,0x1
c001b78f:	31 d2                	xor    edx,edx
c001b791:	83 c4 0c             	add    esp,0xc
c001b794:	c3                   	ret    

c001b795 <sysCallTTYName(regs*)>:
c001b795:	56                   	push   esi
c001b796:	53                   	push   ebx
c001b797:	53                   	push   ebx
c001b798:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b79c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b79f:	85 c0                	test   eax,eax
c001b7a1:	74 5f                	je     c001b802 <sysCallTTYName(regs*)+0x6d>
c001b7a3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7a6:	83 f8 02             	cmp    eax,0x2
c001b7a9:	77 3e                	ja     c001b7e9 <sysCallTTYName(regs*)+0x54>
c001b7ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7b3:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b7b9:	85 db                	test   ebx,ebx
c001b7bb:	74 45                	je     c001b802 <sysCallTTYName(regs*)+0x6d>
c001b7bd:	83 ec 0c             	sub    esp,0xc
c001b7c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7c2:	53                   	push   ebx
c001b7c3:	ff 10                	call   DWORD PTR [eax]
c001b7c5:	83 c4 10             	add    esp,0x10
c001b7c8:	84 c0                	test   al,al
c001b7ca:	74 41                	je     c001b80d <sysCallTTYName(regs*)+0x78>
c001b7cc:	83 ec 08             	sub    esp,0x8
c001b7cf:	81 c3 82 00 00 00    	add    ebx,0x82
c001b7d5:	53                   	push   ebx
c001b7d6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7d9:	e8 2e 50 fe ff       	call   c000080c <strcpy>
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	31 c0                	xor    eax,eax
c001b7e3:	59                   	pop    ecx
c001b7e4:	31 d2                	xor    edx,edx
c001b7e6:	5b                   	pop    ebx
c001b7e7:	5e                   	pop    esi
c001b7e8:	c3                   	ret    
c001b7e9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7ee:	74 bb                	je     c001b7ab <sysCallTTYName(regs*)+0x16>
c001b7f0:	83 ec 0c             	sub    esp,0xc
c001b7f3:	50                   	push   eax
c001b7f4:	e8 76 58 ff ff       	call   c001106f <getFromFileDescriptor(int)>
c001b7f9:	83 c4 10             	add    esp,0x10
c001b7fc:	89 c3                	mov    ebx,eax
c001b7fe:	85 db                	test   ebx,ebx
c001b800:	75 bb                	jne    c001b7bd <sysCallTTYName(regs*)+0x28>
c001b802:	59                   	pop    ecx
c001b803:	b8 01 00 00 00       	mov    eax,0x1
c001b808:	31 d2                	xor    edx,edx
c001b80a:	5b                   	pop    ebx
c001b80b:	5e                   	pop    esi
c001b80c:	c3                   	ret    
c001b80d:	59                   	pop    ecx
c001b80e:	b8 02 00 00 00       	mov    eax,0x2
c001b813:	31 d2                	xor    edx,edx
c001b815:	5b                   	pop    ebx
c001b816:	5e                   	pop    esi
c001b817:	c3                   	ret    

c001b818 <sysCallUSleep(regs*)>:
c001b818:	83 ec 14             	sub    esp,0x14
c001b81b:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b820:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b824:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b82b:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b82e:	01 ca                	add    edx,ecx
c001b830:	52                   	push   edx
c001b831:	50                   	push   eax
c001b832:	e8 98 23 00 00       	call   c001dbcf <nanoSleep(unsigned long long)>
c001b837:	31 c0                	xor    eax,eax
c001b839:	31 d2                	xor    edx,edx
c001b83b:	83 c4 1c             	add    esp,0x1c
c001b83e:	c3                   	ret    

c001b83f <sysCallSpawn(regs*)>:
c001b83f:	56                   	push   esi
c001b840:	53                   	push   ebx
c001b841:	50                   	push   eax
c001b842:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b846:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b849:	85 c0                	test   eax,eax
c001b84b:	75 08                	jne    c001b855 <sysCallSpawn(regs*)+0x16>
c001b84d:	59                   	pop    ecx
c001b84e:	31 c0                	xor    eax,eax
c001b850:	31 d2                	xor    edx,edx
c001b852:	5b                   	pop    ebx
c001b853:	5e                   	pop    esi
c001b854:	c3                   	ret    
c001b855:	83 ec 0c             	sub    esp,0xc
c001b858:	68 3f 07 00 00       	push   0x73f
c001b85d:	e8 3a 3d ff ff       	call   c000f59c <malloc>
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	89 c6                	mov    esi,eax
c001b867:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b86a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b86d:	85 c0                	test   eax,eax
c001b86f:	75 32                	jne    c001b8a3 <sysCallSpawn(regs*)+0x64>
c001b871:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b876:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b879:	52                   	push   edx
c001b87a:	50                   	push   eax
c001b87b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b87e:	56                   	push   esi
c001b87f:	e8 70 1a 00 00       	call   c001d2f4 <Process::Process(char const*, Process*, char**)>
c001b884:	83 c4 10             	add    esp,0x10
c001b887:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b88e:	75 bd                	jne    c001b84d <sysCallSpawn(regs*)+0xe>
c001b890:	83 ec 0c             	sub    esp,0xc
c001b893:	56                   	push   esi
c001b894:	e8 3d 1f 00 00       	call   c001d7d6 <Process::createUserThread()>
c001b899:	8b 06                	mov    eax,DWORD PTR [esi]
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	99                   	cdq    
c001b89f:	59                   	pop    ecx
c001b8a0:	5b                   	pop    ebx
c001b8a1:	5e                   	pop    esi
c001b8a2:	c3                   	ret    
c001b8a3:	31 c0                	xor    eax,eax
c001b8a5:	eb d2                	jmp    c001b879 <sysCallSpawn(regs*)+0x3a>

c001b8a7 <sysCallGetEnv(regs*)>:
c001b8a7:	57                   	push   edi
c001b8a8:	56                   	push   esi
c001b8a9:	53                   	push   ebx
c001b8aa:	83 ec 1c             	sub    esp,0x1c
c001b8ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b8b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8b6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b8b9:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b8bc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8bf:	e8 f1 e3 ff ff       	call   c0019cb5 <Krnl::getProcessTotalEnvCount(Process*)>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	39 c7                	cmp    edi,eax
c001b8c9:	7c 14                	jl     c001b8df <sysCallGetEnv(regs*)+0x38>
c001b8cb:	85 f6                	test   esi,esi
c001b8cd:	75 0b                	jne    c001b8da <sysCallGetEnv(regs*)+0x33>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	31 c0                	xor    eax,eax
c001b8d4:	5b                   	pop    ebx
c001b8d5:	31 d2                	xor    edx,edx
c001b8d7:	5e                   	pop    esi
c001b8d8:	5f                   	pop    edi
c001b8d9:	c3                   	ret    
c001b8da:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b8dd:	eb f0                	jmp    c001b8cf <sysCallGetEnv(regs*)+0x28>
c001b8df:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b8e3:	52                   	push   edx
c001b8e4:	57                   	push   edi
c001b8e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b8eb:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b8ee:	50                   	push   eax
c001b8ef:	e8 e1 e3 ff ff       	call   c0019cd5 <Krnl::getProcessEnvPair(Process*, int)>
c001b8f4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b8ff:	83 c4 0c             	add    esp,0xc
c001b902:	85 c9                	test   ecx,ecx
c001b904:	75 23                	jne    c001b929 <sysCallGetEnv(regs*)+0x82>
c001b906:	83 ec 0c             	sub    esp,0xc
c001b909:	50                   	push   eax
c001b90a:	e8 5d 4e fe ff       	call   c000076c <strlen>
c001b90f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b912:	89 c3                	mov    ebx,eax
c001b914:	e8 53 4e fe ff       	call   c000076c <strlen>
c001b919:	83 c4 10             	add    esp,0x10
c001b91c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b920:	83 c4 10             	add    esp,0x10
c001b923:	31 d2                	xor    edx,edx
c001b925:	5b                   	pop    ebx
c001b926:	5e                   	pop    esi
c001b927:	5f                   	pop    edi
c001b928:	c3                   	ret    
c001b929:	83 ec 08             	sub    esp,0x8
c001b92c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b92f:	50                   	push   eax
c001b930:	56                   	push   esi
c001b931:	e8 d6 4e fe ff       	call   c000080c <strcpy>
c001b936:	58                   	pop    eax
c001b937:	5a                   	pop    edx
c001b938:	68 13 b7 02 c0       	push   0xc002b713
c001b93d:	56                   	push   esi
c001b93e:	e8 09 50 fe ff       	call   c000094c <strcat>
c001b943:	59                   	pop    ecx
c001b944:	5b                   	pop    ebx
c001b945:	57                   	push   edi
c001b946:	56                   	push   esi
c001b947:	e8 00 50 fe ff       	call   c000094c <strcat>
c001b94c:	83 c4 10             	add    esp,0x10
c001b94f:	e9 7b ff ff ff       	jmp    c001b8cf <sysCallGetEnv(regs*)+0x28>

c001b954 <sysAppSettings(regs*)>:
c001b954:	57                   	push   edi
c001b955:	56                   	push   esi
c001b956:	56                   	push   esi
c001b957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b95b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b95e:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b964:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b969:	66 3d c0 09          	cmp    ax,0x9c0
c001b96d:	75 2e                	jne    c001b99d <sysAppSettings(regs*)+0x49>
c001b96f:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b975:	83 e0 1f             	and    eax,0x1f
c001b978:	3c 01                	cmp    al,0x1
c001b97a:	74 2c                	je     c001b9a8 <sysAppSettings(regs*)+0x54>
c001b97c:	3c 07                	cmp    al,0x7
c001b97e:	0f 84 b3 00 00 00    	je     c001ba37 <sysAppSettings(regs*)+0xe3>
c001b984:	84 c0                	test   al,al
c001b986:	0f 84 d2 00 00 00    	je     c001ba5e <sysAppSettings(regs*)+0x10a>
c001b98c:	3c 08                	cmp    al,0x8
c001b98e:	74 63                	je     c001b9f3 <sysAppSettings(regs*)+0x9f>
c001b990:	59                   	pop    ecx
c001b991:	0f b6 c0             	movzx  eax,al
c001b994:	5e                   	pop    esi
c001b995:	05 e8 03 00 00       	add    eax,0x3e8
c001b99a:	5f                   	pop    edi
c001b99b:	99                   	cdq    
c001b99c:	c3                   	ret    
c001b99d:	b8 01 00 00 00       	mov    eax,0x1
c001b9a2:	59                   	pop    ecx
c001b9a3:	31 d2                	xor    edx,edx
c001b9a5:	5e                   	pop    esi
c001b9a6:	5f                   	pop    edi
c001b9a7:	c3                   	ret    
c001b9a8:	50                   	push   eax
c001b9a9:	68 00 01 00 00       	push   0x100
c001b9ae:	6a 00                	push   0x0
c001b9b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9b8:	83 c0 0c             	add    eax,0xc
c001b9bb:	50                   	push   eax
c001b9bc:	e8 8f 4d fe ff       	call   c0000750 <memset>
c001b9c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9c6:	b9 ff 00 00 00       	mov    ecx,0xff
c001b9cb:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b9ce:	83 c7 0c             	add    edi,0xc
c001b9d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b9d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d8:	5a                   	pop    edx
c001b9d9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9dc:	59                   	pop    ecx
c001b9dd:	8d 50 0c             	lea    edx,[eax+0xc]
c001b9e0:	52                   	push   edx
c001b9e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b9e7:	e8 ae 47 ff ff       	call   c001019a <VgaText::setTitle(char*)>
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	31 c0                	xor    eax,eax
c001b9f1:	eb af                	jmp    c001b9a2 <sysAppSettings(regs*)+0x4e>
c001b9f3:	83 ec 08             	sub    esp,0x8
c001b9f6:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b9fc:	83 e0 0f             	and    eax,0xf
c001b9ff:	50                   	push   eax
c001ba00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba0e:	e8 77 47 ff ff       	call   c001018a <VgaText::setTitleColour(VgaColour)>
c001ba13:	5f                   	pop    edi
c001ba14:	58                   	pop    eax
c001ba15:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001ba1b:	c1 e8 04             	shr    eax,0x4
c001ba1e:	83 e0 0f             	and    eax,0xf
c001ba21:	50                   	push   eax
c001ba22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba30:	e8 45 47 ff ff       	call   c001017a <VgaText::setTitleTextColour(VgaColour)>
c001ba35:	eb b5                	jmp    c001b9ec <sysAppSettings(regs*)+0x98>
c001ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba3f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ba45:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001ba4b:	c0 e8 06             	shr    al,0x6
c001ba4e:	83 e0 01             	and    eax,0x1
c001ba51:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001ba57:	31 c0                	xor    eax,eax
c001ba59:	e9 44 ff ff ff       	jmp    c001b9a2 <sysAppSettings(regs*)+0x4e>
c001ba5e:	b8 02 00 00 00       	mov    eax,0x2
c001ba63:	e9 3a ff ff ff       	jmp    c001b9a2 <sysAppSettings(regs*)+0x4e>

c001ba68 <sysSetFatAttrib(regs*)>:
c001ba68:	57                   	push   edi
c001ba69:	56                   	push   esi
c001ba6a:	53                   	push   ebx
c001ba6b:	83 ec 1c             	sub    esp,0x1c
c001ba6e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ba72:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001ba75:	68 14 01 00 00       	push   0x114
c001ba7a:	e8 1d 3b ff ff       	call   c000f59c <malloc>
c001ba7f:	83 c4 0c             	add    esp,0xc
c001ba82:	89 c3                	mov    ebx,eax
c001ba84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba89:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba8c:	57                   	push   edi
c001ba8d:	53                   	push   ebx
c001ba8e:	e8 c9 70 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001ba93:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001ba96:	83 c4 0c             	add    esp,0xc
c001ba99:	0f b6 d4             	movzx  edx,ah
c001ba9c:	0f b6 c0             	movzx  eax,al
c001ba9f:	52                   	push   edx
c001baa0:	50                   	push   eax
c001baa1:	53                   	push   ebx
c001baa2:	e8 2b 73 ff ff       	call   c0012dd2 <File::chfatattr(unsigned char, unsigned char)>
c001baa7:	83 c4 10             	add    esp,0x10
c001baaa:	85 db                	test   ebx,ebx
c001baac:	74 14                	je     c001bac2 <sysSetFatAttrib(regs*)+0x5a>
c001baae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bab2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bab4:	83 ec 0c             	sub    esp,0xc
c001bab7:	53                   	push   ebx
c001bab8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001babb:	83 c4 10             	add    esp,0x10
c001babe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bac2:	85 c0                	test   eax,eax
c001bac4:	0f 95 c0             	setne  al
c001bac7:	31 d2                	xor    edx,edx
c001bac9:	0f b6 c0             	movzx  eax,al
c001bacc:	f7 d8                	neg    eax
c001bace:	83 d2 00             	adc    edx,0x0
c001bad1:	83 c4 10             	add    esp,0x10
c001bad4:	f7 da                	neg    edx
c001bad6:	5b                   	pop    ebx
c001bad7:	5e                   	pop    esi
c001bad8:	5f                   	pop    edi
c001bad9:	c3                   	ret    

c001bada <sysPipe(regs*)>:
c001bada:	57                   	push   edi
c001badb:	56                   	push   esi
c001badc:	53                   	push   ebx
c001badd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae1:	83 ec 0c             	sub    esp,0xc
c001bae4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bae7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001baea:	6a 20                	push   0x20
c001baec:	e8 ab 3a ff ff       	call   c000f59c <malloc>
c001baf1:	89 c3                	mov    ebx,eax
c001baf3:	58                   	pop    eax
c001baf4:	5a                   	pop    edx
c001baf5:	68 00 50 00 00       	push   0x5000
c001bafa:	53                   	push   ebx
c001bafb:	e8 12 44 ff ff       	call   c000ff12 <Pipe::Pipe(int)>
c001bb00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb03:	e8 72 52 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001bb08:	89 07                	mov    DWORD PTR [edi],eax
c001bb0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb0d:	e8 68 52 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	89 06                	mov    DWORD PTR [esi],eax
c001bb17:	31 d2                	xor    edx,edx
c001bb19:	5b                   	pop    ebx
c001bb1a:	31 c0                	xor    eax,eax
c001bb1c:	5e                   	pop    esi
c001bb1d:	5f                   	pop    edi
c001bb1e:	c3                   	ret    

c001bb1f <sysGetUnixTime(regs*)>:
c001bb1f:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001bb24:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bb2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb2e:	e9 1b 7a ff ff       	jmp    c001354e <Clock::timeInSecondsLocal()>

c001bb33 <string_ends_with(char const*, char const*)>:
c001bb33:	57                   	push   edi
c001bb34:	56                   	push   esi
c001bb35:	53                   	push   ebx
c001bb36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb3a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	53                   	push   ebx
c001bb42:	e8 25 4c fe ff       	call   c000076c <strlen>
c001bb47:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bb4a:	89 c6                	mov    esi,eax
c001bb4c:	e8 1b 4c fe ff       	call   c000076c <strlen>
c001bb51:	83 c4 10             	add    esp,0x10
c001bb54:	39 c6                	cmp    esi,eax
c001bb56:	7d 06                	jge    c001bb5e <string_ends_with(char const*, char const*)+0x2b>
c001bb58:	5b                   	pop    ebx
c001bb59:	31 c0                	xor    eax,eax
c001bb5b:	5e                   	pop    esi
c001bb5c:	5f                   	pop    edi
c001bb5d:	c3                   	ret    
c001bb5e:	83 ec 08             	sub    esp,0x8
c001bb61:	29 c6                	sub    esi,eax
c001bb63:	57                   	push   edi
c001bb64:	01 f3                	add    ebx,esi
c001bb66:	53                   	push   ebx
c001bb67:	e8 2c 4d fe ff       	call   c0000898 <strcmp>
c001bb6c:	83 c4 10             	add    esp,0x10
c001bb6f:	85 c0                	test   eax,eax
c001bb71:	5b                   	pop    ebx
c001bb72:	0f 94 c0             	sete   al
c001bb75:	5e                   	pop    esi
c001bb76:	0f b6 c0             	movzx  eax,al
c001bb79:	5f                   	pop    edi
c001bb7a:	c3                   	ret    

c001bb7b <sysCallOpen(regs*)>:
c001bb7b:	56                   	push   esi
c001bb7c:	53                   	push   ebx
c001bb7d:	81 ec 04 01 00 00    	sub    esp,0x104
c001bb83:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bb8a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bb8d:	85 c9                	test   ecx,ecx
c001bb8f:	0f 84 ad 01 00 00    	je     c001bd42 <sysCallOpen(regs*)+0x1c7>
c001bb95:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bb98:	85 c0                	test   eax,eax
c001bb9a:	0f 84 a2 01 00 00    	je     c001bd42 <sysCallOpen(regs*)+0x1c7>
c001bba0:	52                   	push   edx
c001bba1:	68 15 b7 02 c0       	push   0xc002b715
c001bba6:	50                   	push   eax
c001bba7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bbab:	56                   	push   esi
c001bbac:	e8 01 6e ff ff       	call   c00129b2 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bbb1:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbb4:	e8 b3 4b fe ff       	call   c000076c <strlen>
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	48                   	dec    eax
c001bbbd:	74 1d                	je     c001bbdc <sysCallOpen(regs*)+0x61>
c001bbbf:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bbc2:	eb 0f                	jmp    c001bbd3 <sysCallOpen(regs*)+0x58>
c001bbc4:	80 fa 3a             	cmp    dl,0x3a
c001bbc7:	74 0f                	je     c001bbd8 <sysCallOpen(regs*)+0x5d>
c001bbc9:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bbcd:	48                   	dec    eax
c001bbce:	74 0c                	je     c001bbdc <sysCallOpen(regs*)+0x61>
c001bbd0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bbd3:	80 fa 2e             	cmp    dl,0x2e
c001bbd6:	75 ec                	jne    c001bbc4 <sysCallOpen(regs*)+0x49>
c001bbd8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bbdc:	83 ec 08             	sub    esp,0x8
c001bbdf:	68 19 b7 02 c0       	push   0xc002b719
c001bbe4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe7:	e8 47 ff ff ff       	call   c001bb33 <string_ends_with(char const*, char const*)>
c001bbec:	83 c4 10             	add    esp,0x10
c001bbef:	85 c0                	test   eax,eax
c001bbf1:	74 1d                	je     c001bc10 <sysCallOpen(regs*)+0x95>
c001bbf3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bbf6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bbfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc03:	81 c4 04 01 00 00    	add    esp,0x104
c001bc09:	31 c0                	xor    eax,eax
c001bc0b:	31 d2                	xor    edx,edx
c001bc0d:	5b                   	pop    ebx
c001bc0e:	5e                   	pop    esi
c001bc0f:	c3                   	ret    
c001bc10:	83 ec 08             	sub    esp,0x8
c001bc13:	68 1e b7 02 c0       	push   0xc002b71e
c001bc18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc1b:	e8 13 ff ff ff       	call   c001bb33 <string_ends_with(char const*, char const*)>
c001bc20:	83 c4 10             	add    esp,0x10
c001bc23:	85 c0                	test   eax,eax
c001bc25:	75 cc                	jne    c001bbf3 <sysCallOpen(regs*)+0x78>
c001bc27:	83 ec 08             	sub    esp,0x8
c001bc2a:	68 1a b7 02 c0       	push   0xc002b71a
c001bc2f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc32:	e8 61 4c fe ff       	call   c0000898 <strcmp>
c001bc37:	83 c4 10             	add    esp,0x10
c001bc3a:	85 c0                	test   eax,eax
c001bc3c:	74 b5                	je     c001bbf3 <sysCallOpen(regs*)+0x78>
c001bc3e:	83 ec 08             	sub    esp,0x8
c001bc41:	68 19 b7 02 c0       	push   0xc002b719
c001bc46:	56                   	push   esi
c001bc47:	e8 e7 fe ff ff       	call   c001bb33 <string_ends_with(char const*, char const*)>
c001bc4c:	83 c4 10             	add    esp,0x10
c001bc4f:	85 c0                	test   eax,eax
c001bc51:	75 a0                	jne    c001bbf3 <sysCallOpen(regs*)+0x78>
c001bc53:	83 ec 08             	sub    esp,0x8
c001bc56:	68 23 b7 02 c0       	push   0xc002b723
c001bc5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc5e:	e8 d0 fe ff ff       	call   c001bb33 <string_ends_with(char const*, char const*)>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	85 c0                	test   eax,eax
c001bc68:	0f 85 e7 00 00 00    	jne    c001bd55 <sysCallOpen(regs*)+0x1da>
c001bc6e:	83 ec 08             	sub    esp,0x8
c001bc71:	68 28 b7 02 c0       	push   0xc002b728
c001bc76:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc79:	e8 b5 fe ff ff       	call   c001bb33 <string_ends_with(char const*, char const*)>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	85 c0                	test   eax,eax
c001bc83:	0f 85 cc 00 00 00    	jne    c001bd55 <sysCallOpen(regs*)+0x1da>
c001bc89:	83 ec 08             	sub    esp,0x8
c001bc8c:	68 24 b7 02 c0       	push   0xc002b724
c001bc91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc94:	e8 ff 4b fe ff       	call   c0000898 <strcmp>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	85 c0                	test   eax,eax
c001bc9e:	0f 84 b1 00 00 00    	je     c001bd55 <sysCallOpen(regs*)+0x1da>
c001bca4:	83 ec 08             	sub    esp,0x8
c001bca7:	68 23 b7 02 c0       	push   0xc002b723
c001bcac:	56                   	push   esi
c001bcad:	e8 81 fe ff ff       	call   c001bb33 <string_ends_with(char const*, char const*)>
c001bcb2:	83 c4 10             	add    esp,0x10
c001bcb5:	85 c0                	test   eax,eax
c001bcb7:	0f 85 98 00 00 00    	jne    c001bd55 <sysCallOpen(regs*)+0x1da>
c001bcbd:	83 ec 0c             	sub    esp,0xc
c001bcc0:	68 14 01 00 00       	push   0x114
c001bcc5:	e8 d2 38 ff ff       	call   c000f59c <malloc>
c001bcca:	83 c4 0c             	add    esp,0xc
c001bccd:	89 c6                	mov    esi,eax
c001bccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcd7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcda:	56                   	push   esi
c001bcdb:	e8 7c 6e ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001bce0:	83 c4 10             	add    esp,0x10
c001bce3:	85 f6                	test   esi,esi
c001bce5:	74 5b                	je     c001bd42 <sysCallOpen(regs*)+0x1c7>
c001bce7:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bcea:	0f b6 c2             	movzx  eax,dl
c001bced:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bcf0:	89 d0                	mov    eax,edx
c001bcf2:	83 e0 01             	and    eax,0x1
c001bcf5:	f6 c2 02             	test   dl,0x2
c001bcf8:	74 03                	je     c001bcfd <sysCallOpen(regs*)+0x182>
c001bcfa:	83 c8 02             	or     eax,0x2
c001bcfd:	f6 c2 04             	test   dl,0x4
c001bd00:	74 03                	je     c001bd05 <sysCallOpen(regs*)+0x18a>
c001bd02:	83 c8 04             	or     eax,0x4
c001bd05:	f6 c2 08             	test   dl,0x8
c001bd08:	74 03                	je     c001bd0d <sysCallOpen(regs*)+0x192>
c001bd0a:	83 c8 0a             	or     eax,0xa
c001bd0d:	83 e2 10             	and    edx,0x10
c001bd10:	74 03                	je     c001bd15 <sysCallOpen(regs*)+0x19a>
c001bd12:	83 c8 12             	or     eax,0x12
c001bd15:	83 ec 08             	sub    esp,0x8
c001bd18:	50                   	push   eax
c001bd19:	56                   	push   esi
c001bd1a:	e8 a1 6e ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001bd1f:	83 c4 10             	add    esp,0x10
c001bd22:	85 c0                	test   eax,eax
c001bd24:	75 1c                	jne    c001bd42 <sysCallOpen(regs*)+0x1c7>
c001bd26:	83 ec 0c             	sub    esp,0xc
c001bd29:	56                   	push   esi
c001bd2a:	e8 4b 50 ff ff       	call   c0010d7a <UnixFile::getFileDescriptor()>
c001bd2f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd32:	83 c4 10             	add    esp,0x10
c001bd35:	89 02                	mov    DWORD PTR [edx],eax
c001bd37:	c1 f8 1f             	sar    eax,0x1f
c001bd3a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd3d:	e9 c1 fe ff ff       	jmp    c001bc03 <sysCallOpen(regs*)+0x88>
c001bd42:	81 c4 04 01 00 00    	add    esp,0x104
c001bd48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd4d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd52:	5b                   	pop    ebx
c001bd53:	5e                   	pop    esi
c001bd54:	c3                   	ret    
c001bd55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd58:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bd5e:	e9 99 fe ff ff       	jmp    c001bbfc <sysCallOpen(regs*)+0x81>

c001bd63 <Sys::loadSyscalls()>:
c001bd63:	c7 05 e0 02 03 c0 d0 af 01 c0 	mov    DWORD PTR ds:0xc00302e0,0xc001afd0
c001bd6d:	c7 05 e4 02 03 c0 c8 ab 01 c0 	mov    DWORD PTR ds:0xc00302e4,0xc001abc8
c001bd77:	c7 05 e8 02 03 c0 b6 ad 01 c0 	mov    DWORD PTR ds:0xc00302e8,0xc001adb6
c001bd81:	c7 05 ec 02 03 c0 06 af 01 c0 	mov    DWORD PTR ds:0xc00302ec,0xc001af06
c001bd8b:	c7 05 f0 02 03 c0 4e ad 01 c0 	mov    DWORD PTR ds:0xc00302f0,0xc001ad4e
c001bd95:	c7 05 f4 02 03 c0 ff ab 01 c0 	mov    DWORD PTR ds:0xc00302f4,0xc001abff
c001bd9f:	c7 05 f8 02 03 c0 e0 ab 01 c0 	mov    DWORD PTR ds:0xc00302f8,0xc001abe0
c001bda9:	c7 05 fc 02 03 c0 0b ae 01 c0 	mov    DWORD PTR ds:0xc00302fc,0xc001ae0b
c001bdb3:	c7 05 04 03 03 c0 99 b4 01 c0 	mov    DWORD PTR ds:0xc0030304,0xc001b499
c001bdbd:	c7 05 00 03 03 c0 7b bb 01 c0 	mov    DWORD PTR ds:0xc0030300,0xc001bb7b
c001bdc7:	c7 05 08 03 03 c0 f9 b4 01 c0 	mov    DWORD PTR ds:0xc0030308,0xc001b4f9
c001bdd1:	c7 05 0c 03 03 c0 dc b1 01 c0 	mov    DWORD PTR ds:0xc003030c,0xc001b1dc
c001bddb:	c7 05 10 03 03 c0 16 b0 01 c0 	mov    DWORD PTR ds:0xc0030310,0xc001b016
c001bde5:	c7 05 14 03 03 c0 1b b0 01 c0 	mov    DWORD PTR ds:0xc0030314,0xc001b01b
c001bdef:	c7 05 18 03 03 c0 c2 b5 01 c0 	mov    DWORD PTR ds:0xc0030318,0xc001b5c2
c001bdf9:	c7 05 1c 03 03 c0 6e b5 01 c0 	mov    DWORD PTR ds:0xc003031c,0xc001b56e
c001be03:	c7 05 20 03 03 c0 b5 b2 01 c0 	mov    DWORD PTR ds:0xc0030320,0xc001b2b5
c001be0d:	c7 05 24 03 03 c0 0c b3 01 c0 	mov    DWORD PTR ds:0xc0030324,0xc001b30c
c001be17:	c7 05 28 03 03 c0 78 b3 01 c0 	mov    DWORD PTR ds:0xc0030328,0xc001b378
c001be21:	c7 05 2c 03 03 c0 20 b0 01 c0 	mov    DWORD PTR ds:0xc003032c,0xc001b020
c001be2b:	c7 05 30 03 03 c0 32 b6 01 c0 	mov    DWORD PTR ds:0xc0030330,0xc001b632
c001be35:	c7 05 34 03 03 c0 4c b6 01 c0 	mov    DWORD PTR ds:0xc0030334,0xc001b64c
c001be3f:	c7 05 38 03 03 c0 4c b6 01 c0 	mov    DWORD PTR ds:0xc0030338,0xc001b64c
c001be49:	c7 05 3c 03 03 c0 81 b6 01 c0 	mov    DWORD PTR ds:0xc003033c,0xc001b681
c001be53:	c7 05 40 03 03 c0 e5 b6 01 c0 	mov    DWORD PTR ds:0xc0030340,0xc001b6e5
c001be5d:	c7 05 44 03 03 c0 2a b0 01 c0 	mov    DWORD PTR ds:0xc0030344,0xc001b02a
c001be67:	c7 05 48 03 03 c0 49 b7 01 c0 	mov    DWORD PTR ds:0xc0030348,0xc001b749
c001be71:	c7 05 4c 03 03 c0 99 b1 01 c0 	mov    DWORD PTR ds:0xc003034c,0xc001b199
c001be7b:	c7 05 50 03 03 c0 95 b7 01 c0 	mov    DWORD PTR ds:0xc0030350,0xc001b795
c001be85:	c7 05 54 03 03 c0 5b b2 01 c0 	mov    DWORD PTR ds:0xc0030354,0xc001b25b
c001be8f:	c7 05 58 03 03 c0 18 b8 01 c0 	mov    DWORD PTR ds:0xc0030358,0xc001b818
c001be99:	c7 05 5c 03 03 c0 ea b3 01 c0 	mov    DWORD PTR ds:0xc003035c,0xc001b3ea
c001bea3:	c7 05 60 03 03 c0 3f b8 01 c0 	mov    DWORD PTR ds:0xc0030360,0xc001b83f
c001bead:	c7 05 64 03 03 c0 a7 b8 01 c0 	mov    DWORD PTR ds:0xc0030364,0xc001b8a7
c001beb7:	c7 05 68 03 03 c0 54 b9 01 c0 	mov    DWORD PTR ds:0xc0030368,0xc001b954
c001bec1:	c7 05 6c 03 03 c0 3a b0 01 c0 	mov    DWORD PTR ds:0xc003036c,0xc001b03a
c001becb:	c7 05 70 03 03 c0 a4 b0 01 c0 	mov    DWORD PTR ds:0xc0030370,0xc001b0a4
c001bed5:	c7 05 74 03 03 c0 ea b0 01 c0 	mov    DWORD PTR ds:0xc0030374,0xc001b0ea
c001bedf:	c7 05 78 03 03 c0 68 ba 01 c0 	mov    DWORD PTR ds:0xc0030378,0xc001ba68
c001bee9:	c7 05 7c 03 03 c0 67 b6 01 c0 	mov    DWORD PTR ds:0xc003037c,0xc001b667
c001bef3:	c7 05 80 03 03 c0 3b b1 01 c0 	mov    DWORD PTR ds:0xc0030380,0xc001b13b
c001befd:	c7 05 84 03 03 c0 da ba 01 c0 	mov    DWORD PTR ds:0xc0030384,0xc001bada
c001bf07:	c7 05 88 03 03 c0 1f bb 01 c0 	mov    DWORD PTR ds:0xc0030388,0xc001bb1f
c001bf11:	c7 05 8c 03 03 c0 a6 ac 01 c0 	mov    DWORD PTR ds:0xc003038c,0xc001aca6
c001bf1b:	c7 05 90 03 03 c0 27 ae 01 c0 	mov    DWORD PTR ds:0xc0030390,0xc001ae27
c001bf25:	c7 05 94 03 03 c0 bc ae 01 c0 	mov    DWORD PTR ds:0xc0030394,0xc001aebc
c001bf2f:	c7 05 98 03 03 c0 92 ab 01 c0 	mov    DWORD PTR ds:0xc0030398,0xc001ab92
c001bf39:	c7 05 9c 03 03 c0 6e af 01 c0 	mov    DWORD PTR ds:0xc003039c,0xc001af6e
c001bf43:	c7 05 a0 03 03 c0 0b ac 01 c0 	mov    DWORD PTR ds:0xc00303a0,0xc001ac0b
c001bf4d:	c7 05 a4 03 03 c0 22 ac 01 c0 	mov    DWORD PTR ds:0xc00303a4,0xc001ac22
c001bf57:	c3                   	ret    

c001bf58 <Sys::systemCall(regs*, void*)>:
c001bf58:	53                   	push   ebx
c001bf59:	83 ec 08             	sub    esp,0x8
c001bf5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bf63:	83 f8 7f             	cmp    eax,0x7f
c001bf66:	77 16                	ja     c001bf7e <Sys::systemCall(regs*, void*)+0x26>
c001bf68:	8b 14 85 e0 02 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfd20]
c001bf6f:	85 d2                	test   edx,edx
c001bf71:	74 0b                	je     c001bf7e <Sys::systemCall(regs*, void*)+0x26>
c001bf73:	83 ec 0c             	sub    esp,0xc
c001bf76:	53                   	push   ebx
c001bf77:	ff d2                	call   edx
c001bf79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bf7c:	eb 0d                	jmp    c001bf8b <Sys::systemCall(regs*, void*)+0x33>
c001bf7e:	52                   	push   edx
c001bf7f:	52                   	push   edx
c001bf80:	50                   	push   eax
c001bf81:	68 2d b7 02 c0       	push   0xc002b72d
c001bf86:	e8 72 66 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001bf8b:	83 c4 10             	add    esp,0x10
c001bf8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bf93:	31 d2                	xor    edx,edx
c001bf95:	83 c4 08             	add    esp,0x8
c001bf98:	5b                   	pop    ebx
c001bf99:	c3                   	ret    

c001bf9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bf9a:	55                   	push   ebp
c001bf9b:	57                   	push   edi
c001bf9c:	56                   	push   esi
c001bf9d:	53                   	push   ebx
c001bf9e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bfa4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bfab:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bfb2:	85 c0                	test   eax,eax
c001bfb4:	0f 95 c1             	setne  cl
c001bfb7:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001bfbf:	0f 94 c2             	sete   dl
c001bfc2:	84 d1                	test   cl,dl
c001bfc4:	74 23                	je     c001bfe9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bfc6:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bfcc:	74 1b                	je     c001bfe9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bfce:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bfd4:	89 da                	mov    edx,ebx
c001bfd6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bfdc:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bfe2:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bfe9:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bff0:	05 ff 0f 00 00       	add    eax,0xfff
c001bff5:	83 ec 0c             	sub    esp,0xc
c001bff8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bffc:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c002:	c1 e8 0c             	shr    eax,0xc
c001c005:	89 fe                	mov    esi,edi
c001c007:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c00b:	c1 ee 0c             	shr    esi,0xc
c001c00e:	6a 01                	push   0x1
c001c010:	e8 b0 51 ff ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c001c015:	89 c5                	mov    ebp,eax
c001c017:	58                   	pop    eax
c001c018:	5a                   	pop    edx
c001c019:	56                   	push   esi
c001c01a:	68 41 b7 02 c0       	push   0xc002b741
c001c01f:	e8 d9 65 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001c024:	59                   	pop    ecx
c001c025:	58                   	pop    eax
c001c026:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c02a:	68 53 b7 02 c0       	push   0xc002b753
c001c02f:	e8 c9 65 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001c034:	83 c4 10             	add    esp,0x10
c001c037:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c03d:	0f 86 31 01 00 00    	jbe    c001c174 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c043:	c1 e6 0c             	shl    esi,0xc
c001c046:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c049:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c04c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c050:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c057:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c05a:	01 df                	add    edi,ebx
c001c05c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c05f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c063:	0f 84 08 01 00 00    	je     c001c171 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c069:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c06f:	76 05                	jbe    c001c076 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c071:	bf 00 10 00 00       	mov    edi,0x1000
c001c076:	83 ec 0c             	sub    esp,0xc
c001c079:	31 d2                	xor    edx,edx
c001c07b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c082:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c084:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c088:	50                   	push   eax
c001c089:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c08d:	56                   	push   esi
c001c08e:	52                   	push   edx
c001c08f:	57                   	push   edi
c001c090:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c097:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c09a:	83 c4 20             	add    esp,0x20
c001c09d:	85 c0                	test   eax,eax
c001c09f:	74 0a                	je     c001c0ab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c0a1:	53                   	push   ebx
c001c0a2:	53                   	push   ebx
c001c0a3:	50                   	push   eax
c001c0a4:	68 65 b7 02 c0       	push   0xc002b765
c001c0a9:	eb 0f                	jmp    c001c0ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c0ab:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c0af:	74 20                	je     c001c0d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c0b1:	51                   	push   ecx
c001c0b2:	51                   	push   ecx
c001c0b3:	6a 00                	push   0x0
c001c0b5:	68 90 b7 02 c0       	push   0xc002b790
c001c0ba:	e8 3e 65 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001c0bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c0c2:	e8 44 55 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c001c0c7:	83 c4 10             	add    esp,0x10
c001c0ca:	31 c0                	xor    eax,eax
c001c0cc:	e9 68 01 00 00       	jmp    c001c239 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c0d1:	fa                   	cli    
c001c0d2:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001c0d8:	e8 63 38 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c0dd:	6a 07                	push   0x7
c001c0df:	89 c7                	mov    edi,eax
c001c0e1:	55                   	push   ebp
c001c0e2:	50                   	push   eax
c001c0e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0eb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0f1:	e8 8c 58 ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c0f6:	83 c4 0c             	add    esp,0xc
c001c0f9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c100:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c106:	6a 00                	push   0x0
c001c108:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c10d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c110:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c116:	e8 c1 56 ff ff       	call   c00117dc <VAS::mapOtherVASIn(bool, VAS*)>
c001c11b:	58                   	pop    eax
c001c11c:	5a                   	pop    edx
c001c11d:	68 07 0c 00 00       	push   0xc07
c001c122:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c126:	57                   	push   edi
c001c127:	89 ef                	mov    edi,ebp
c001c129:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c130:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c136:	6a 00                	push   0x0
c001c138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c13d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c140:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c146:	e8 15 5c ff ff       	call   c0011d60 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c14b:	b9 00 10 00 00       	mov    ecx,0x1000
c001c150:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c152:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001c157:	83 c4 20             	add    esp,0x20
c001c15a:	48                   	dec    eax
c001c15b:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001c160:	85 c0                	test   eax,eax
c001c162:	75 01                	jne    c001c165 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c164:	fb                   	sti    
c001c165:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c16c:	e9 df fe ff ff       	jmp    c001c050 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c171:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c174:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c17c:	0f 86 a9 00 00 00    	jbe    c001c22b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c182:	fa                   	cli    
c001c183:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001c189:	51                   	push   ecx
c001c18a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c191:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c197:	6a 00                	push   0x0
c001c199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1a7:	e8 30 56 ff ff       	call   c00117dc <VAS::mapOtherVASIn(bool, VAS*)>
c001c1ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c1b0:	c1 e6 0c             	shl    esi,0xc
c001c1b3:	01 de                	add    esi,ebx
c001c1b5:	83 c4 10             	add    esp,0x10
c001c1b8:	39 de                	cmp    esi,ebx
c001c1ba:	74 61                	je     c001c21d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c1bc:	e8 7f 37 ff ff       	call   c000f940 <Phys::allocatePage()>
c001c1c1:	6a 07                	push   0x7
c001c1c3:	89 c7                	mov    edi,eax
c001c1c5:	55                   	push   ebp
c001c1c6:	50                   	push   eax
c001c1c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1cf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1d5:	e8 a8 57 ff ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1da:	58                   	pop    eax
c001c1db:	5a                   	pop    edx
c001c1dc:	68 07 0c 00 00       	push   0xc07
c001c1e1:	53                   	push   ebx
c001c1e2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c1e8:	57                   	push   edi
c001c1e9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1f0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1f6:	6a 00                	push   0x0
c001c1f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c200:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c206:	e8 55 5b ff ff       	call   c0011d60 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c20b:	83 c4 1c             	add    esp,0x1c
c001c20e:	68 00 10 00 00       	push   0x1000
c001c213:	6a 00                	push   0x0
c001c215:	55                   	push   ebp
c001c216:	e8 35 45 fe ff       	call   c0000750 <memset>
c001c21b:	eb 98                	jmp    c001c1b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c21d:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001c222:	48                   	dec    eax
c001c223:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001c228:	75 01                	jne    c001c22b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c22a:	fb                   	sti    
c001c22b:	83 ec 0c             	sub    esp,0xc
c001c22e:	55                   	push   ebp
c001c22f:	e8 d7 53 ff ff       	call   c001160b <Virt::freeKernelVirtualPages(unsigned long)>
c001c234:	83 c4 10             	add    esp,0x10
c001c237:	b0 01                	mov    al,0x1
c001c239:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c23f:	5b                   	pop    ebx
c001c240:	5e                   	pop    esi
c001c241:	5f                   	pop    edi
c001c242:	5d                   	pop    ebp
c001c243:	c3                   	ret    

c001c244 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c244:	55                   	push   ebp
c001c245:	57                   	push   edi
c001c246:	56                   	push   esi
c001c247:	53                   	push   ebx
c001c248:	83 ec 48             	sub    esp,0x48
c001c24b:	68 14 01 00 00       	push   0x114
c001c250:	e8 47 33 ff ff       	call   c000f59c <malloc>
c001c255:	83 c4 0c             	add    esp,0xc
c001c258:	89 c6                	mov    esi,eax
c001c25a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c25e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c262:	50                   	push   eax
c001c263:	e8 f4 68 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001c268:	58                   	pop    eax
c001c269:	5a                   	pop    edx
c001c26a:	6a 01                	push   0x1
c001c26c:	56                   	push   esi
c001c26d:	e8 4e 69 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001c272:	83 c4 10             	add    esp,0x10
c001c275:	85 c0                	test   eax,eax
c001c277:	0f 85 47 01 00 00    	jne    c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c27d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c285:	83 ec 0c             	sub    esp,0xc
c001c288:	6a 34                	push   0x34
c001c28a:	e8 0d 33 ff ff       	call   c000f59c <malloc>
c001c28f:	89 c3                	mov    ebx,eax
c001c291:	58                   	pop    eax
c001c292:	8b 06                	mov    eax,DWORD PTR [esi]
c001c294:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c298:	57                   	push   edi
c001c299:	53                   	push   ebx
c001c29a:	6a 00                	push   0x0
c001c29c:	6a 34                	push   0x34
c001c29e:	56                   	push   esi
c001c29f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2a2:	83 c4 20             	add    esp,0x20
c001c2a5:	85 c0                	test   eax,eax
c001c2a7:	0f 85 17 01 00 00    	jne    c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2ad:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c2b3:	0f 85 0b 01 00 00    	jne    c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2bc:	85 c0                	test   eax,eax
c001c2be:	0f 84 00 01 00 00    	je     c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2c4:	31 d2                	xor    edx,edx
c001c2c6:	55                   	push   ebp
c001c2c7:	52                   	push   edx
c001c2c8:	50                   	push   eax
c001c2c9:	56                   	push   esi
c001c2ca:	e8 af 69 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	85 c0                	test   eax,eax
c001c2d4:	0f 85 ea 00 00 00    	jne    c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c2da:	83 ec 0c             	sub    esp,0xc
c001c2dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c2e0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c2e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2e8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c2ec:	0f af c2             	imul   eax,edx
c001c2ef:	50                   	push   eax
c001c2f0:	e8 a7 32 ff ff       	call   c000f59c <malloc>
c001c2f5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c2f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c302:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c306:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c30a:	0f af c2             	imul   eax,edx
c001c30d:	99                   	cdq    
c001c30e:	52                   	push   edx
c001c30f:	50                   	push   eax
c001c310:	56                   	push   esi
c001c311:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c314:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c317:	83 c4 20             	add    esp,0x20
c001c31a:	85 c0                	test   eax,eax
c001c31c:	0f 84 a2 00 00 00    	je     c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c322:	31 d2                	xor    edx,edx
c001c324:	51                   	push   ecx
c001c325:	52                   	push   edx
c001c326:	50                   	push   eax
c001c327:	56                   	push   esi
c001c328:	e8 51 69 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c32d:	83 c4 10             	add    esp,0x10
c001c330:	85 c0                	test   eax,eax
c001c332:	0f 85 8c 00 00 00    	jne    c001c3c4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c338:	83 ec 0c             	sub    esp,0xc
c001c33b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c33f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c343:	31 ed                	xor    ebp,ebp
c001c345:	0f af c2             	imul   eax,edx
c001c348:	50                   	push   eax
c001c349:	e8 4e 32 ff ff       	call   c000f59c <malloc>
c001c34e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c354:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c35b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c35f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c363:	0f af c2             	imul   eax,edx
c001c366:	99                   	cdq    
c001c367:	52                   	push   edx
c001c368:	50                   	push   eax
c001c369:	56                   	push   esi
c001c36a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c36d:	83 c4 20             	add    esp,0x20
c001c370:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c378:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c37c:	0f 86 80 00 00 00    	jbe    c001c402 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c382:	0f b7 fd             	movzx  edi,bp
c001c385:	c1 e7 05             	shl    edi,0x5
c001c388:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c38c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c38f:	75 6b                	jne    c001c3fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c391:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c394:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c398:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c39b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c39f:	52                   	push   edx
c001c3a0:	31 d2                	xor    edx,edx
c001c3a2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c3a5:	52                   	push   edx
c001c3a6:	50                   	push   eax
c001c3a7:	56                   	push   esi
c001c3a8:	e8 d1 68 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c3ad:	83 c4 10             	add    esp,0x10
c001c3b0:	85 c0                	test   eax,eax
c001c3b2:	74 17                	je     c001c3cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c3b4:	83 ec 0c             	sub    esp,0xc
c001c3b7:	68 bc b7 02 c0       	push   0xc002b7bc
c001c3bc:	e8 3c 62 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001c3c1:	83 c4 10             	add    esp,0x10
c001c3c4:	31 c0                	xor    eax,eax
c001c3c6:	e9 87 00 00 00       	jmp    c001c452 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c3cb:	83 ec 0c             	sub    esp,0xc
c001c3ce:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c3d1:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c3d4:	50                   	push   eax
c001c3d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3dd:	56                   	push   esi
c001c3de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c3e2:	e8 b3 fb ff ff       	call   c001bf9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c3e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3eb:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c3ef:	83 c4 20             	add    esp,0x20
c001c3f2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c3f6:	73 04                	jae    c001c3fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c3f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3fc:	45                   	inc    ebp
c001c3fd:	e9 76 ff ff ff       	jmp    c001c378 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c402:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c406:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c40e:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c414:	83 ec 0c             	sub    esp,0xc
c001c417:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c41d:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c422:	05 00 10 00 00       	add    eax,0x1000
c001c427:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c42e:	e8 79 31 ff ff       	call   c000f5ac <free>
c001c433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c436:	e8 71 31 ff ff       	call   c000f5ac <free>
c001c43b:	58                   	pop    eax
c001c43c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c440:	e8 67 31 ff ff       	call   c000f5ac <free>
c001c445:	89 34 24             	mov    DWORD PTR [esp],esi
c001c448:	e8 d1 67 ff ff       	call   c0012c1e <File::close()>
c001c44d:	83 c4 10             	add    esp,0x10
c001c450:	b0 01                	mov    al,0x1
c001c452:	83 c4 3c             	add    esp,0x3c
c001c455:	5b                   	pop    ebx
c001c456:	5e                   	pop    esi
c001c457:	5f                   	pop    edi
c001c458:	5d                   	pop    ebp
c001c459:	c3                   	ret    

c001c45a <Thr::runtimeReferenceHelper()>:
c001c45a:	83 ec 18             	sub    esp,0x18
c001c45d:	68 c4 b7 02 c0       	push   0xc002b7c4
c001c462:	e8 96 61 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001c467:	fa                   	cli    
c001c468:	83 c4 10             	add    esp,0x10
c001c46b:	eb fe                	jmp    c001c46b <Thr::runtimeReferenceHelper()+0x11>

c001c46d <Thr::getAddressOfKernelSymbol(char const*)>:
c001c46d:	57                   	push   edi
c001c46e:	56                   	push   esi
c001c46f:	53                   	push   ebx
c001c470:	31 db                	xor    ebx,ebx
c001c472:	39 1d 80 0c 03 c0    	cmp    DWORD PTR ds:0xc0030c80,ebx
c001c478:	7e 3c                	jle    c001c4b6 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c47a:	8b 34 9d 00 0c 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf400]
c001c481:	31 ff                	xor    edi,edi
c001c483:	39 3c 9d 00 0b 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf500],edi
c001c48a:	7e 27                	jle    c001c4b3 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c48c:	50                   	push   eax
c001c48d:	50                   	push   eax
c001c48e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c492:	8b 06                	mov    eax,DWORD PTR [esi]
c001c494:	03 04 9d 80 0b 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf480]
c001c49b:	50                   	push   eax
c001c49c:	e8 f7 43 fe ff       	call   c0000898 <strcmp>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	85 c0                	test   eax,eax
c001c4a6:	75 05                	jne    c001c4ad <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c4a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c4ab:	eb 0b                	jmp    c001c4b8 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c4ad:	83 c6 10             	add    esi,0x10
c001c4b0:	47                   	inc    edi
c001c4b1:	eb d0                	jmp    c001c483 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c4b3:	43                   	inc    ebx
c001c4b4:	eb bc                	jmp    c001c472 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c4b6:	31 c0                	xor    eax,eax
c001c4b8:	5b                   	pop    ebx
c001c4b9:	5e                   	pop    esi
c001c4ba:	5f                   	pop    edi
c001c4bb:	c3                   	ret    

c001c4bc <Thr::loadKernelSymbolTable(char const*)>:
c001c4bc:	55                   	push   ebp
c001c4bd:	57                   	push   edi
c001c4be:	56                   	push   esi
c001c4bf:	53                   	push   ebx
c001c4c0:	83 ec 68             	sub    esp,0x68
c001c4c3:	8b 35 d0 0c 03 c0    	mov    esi,DWORD PTR ds:0xc0030cd0
c001c4c9:	68 14 01 00 00       	push   0x114
c001c4ce:	e8 c9 30 ff ff       	call   c000f59c <malloc>
c001c4d3:	83 c4 0c             	add    esp,0xc
c001c4d6:	89 c3                	mov    ebx,eax
c001c4d8:	56                   	push   esi
c001c4d9:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c4dd:	50                   	push   eax
c001c4de:	e8 79 66 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001c4e3:	5e                   	pop    esi
c001c4e4:	5f                   	pop    edi
c001c4e5:	6a 01                	push   0x1
c001c4e7:	53                   	push   ebx
c001c4e8:	e8 d3 66 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001c4ed:	83 c4 10             	add    esp,0x10
c001c4f0:	85 c0                	test   eax,eax
c001c4f2:	74 0a                	je     c001c4fe <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c4f4:	83 ec 0c             	sub    esp,0xc
c001c4f7:	68 e6 b7 02 c0       	push   0xc002b7e6
c001c4fc:	eb 34                	jmp    c001c532 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c4fe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c506:	83 ec 0c             	sub    esp,0xc
c001c509:	6a 34                	push   0x34
c001c50b:	e8 8c 30 ff ff       	call   c000f59c <malloc>
c001c510:	59                   	pop    ecx
c001c511:	89 c7                	mov    edi,eax
c001c513:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c517:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c519:	56                   	push   esi
c001c51a:	57                   	push   edi
c001c51b:	6a 00                	push   0x0
c001c51d:	6a 34                	push   0x34
c001c51f:	53                   	push   ebx
c001c520:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c523:	83 c4 20             	add    esp,0x20
c001c526:	85 c0                	test   eax,eax
c001c528:	74 17                	je     c001c541 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c52a:	83 ec 0c             	sub    esp,0xc
c001c52d:	68 fd b7 02 c0       	push   0xc002b7fd
c001c532:	e8 32 d8 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001c537:	83 c4 10             	add    esp,0x10
c001c53a:	31 c0                	xor    eax,eax
c001c53c:	e9 31 02 00 00       	jmp    c001c772 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c541:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c547:	75 e1                	jne    c001c52a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c549:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c54c:	85 c0                	test   eax,eax
c001c54e:	74 da                	je     c001c52a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c550:	52                   	push   edx
c001c551:	31 d2                	xor    edx,edx
c001c553:	52                   	push   edx
c001c554:	50                   	push   eax
c001c555:	53                   	push   ebx
c001c556:	e8 23 67 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c55b:	83 c4 10             	add    esp,0x10
c001c55e:	85 c0                	test   eax,eax
c001c560:	75 c8                	jne    c001c52a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c562:	83 ec 0c             	sub    esp,0xc
c001c565:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c569:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c56d:	31 ed                	xor    ebp,ebp
c001c56f:	0f af c2             	imul   eax,edx
c001c572:	50                   	push   eax
c001c573:	e8 24 30 ff ff       	call   c000f59c <malloc>
c001c578:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c57a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c57e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c581:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c585:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c589:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c58d:	0f af c2             	imul   eax,edx
c001c590:	99                   	cdq    
c001c591:	52                   	push   edx
c001c592:	50                   	push   eax
c001c593:	53                   	push   ebx
c001c594:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c597:	83 c4 20             	add    esp,0x20
c001c59a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c5a2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c5aa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c5b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c5ba:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c5be:	0f 86 aa 00 00 00    	jbe    c001c66e <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c5c4:	0f b7 f5             	movzx  esi,bp
c001c5c7:	6b f6 28             	imul   esi,esi,0x28
c001c5ca:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c5ce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c5d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5d5:	50                   	push   eax
c001c5d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c5da:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c5de:	8b 16                	mov    edx,DWORD PTR [esi]
c001c5e0:	6b c0 28             	imul   eax,eax,0x28
c001c5e3:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c5e7:	89 d0                	mov    eax,edx
c001c5e9:	31 d2                	xor    edx,edx
c001c5eb:	52                   	push   edx
c001c5ec:	50                   	push   eax
c001c5ed:	53                   	push   ebx
c001c5ee:	e8 8b 66 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c5f3:	83 c4 0c             	add    esp,0xc
c001c5f6:	6a 20                	push   0x20
c001c5f8:	6a 00                	push   0x0
c001c5fa:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c5fe:	52                   	push   edx
c001c5ff:	e8 4c 41 fe ff       	call   c0000750 <memset>
c001c604:	58                   	pop    eax
c001c605:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c607:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c60b:	51                   	push   ecx
c001c60c:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c610:	52                   	push   edx
c001c611:	6a 00                	push   0x0
c001c613:	6a 1f                	push   0x1f
c001c615:	53                   	push   ebx
c001c616:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c619:	83 c4 18             	add    esp,0x18
c001c61c:	68 14 b8 02 c0       	push   0xc002b814
c001c621:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c625:	52                   	push   edx
c001c626:	e8 6d 42 fe ff       	call   c0000898 <strcmp>
c001c62b:	83 c4 10             	add    esp,0x10
c001c62e:	85 c0                	test   eax,eax
c001c630:	75 0f                	jne    c001c641 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c632:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c635:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c639:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c63d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c641:	50                   	push   eax
c001c642:	50                   	push   eax
c001c643:	68 1c b8 02 c0       	push   0xc002b81c
c001c648:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c64c:	50                   	push   eax
c001c64d:	e8 46 42 fe ff       	call   c0000898 <strcmp>
c001c652:	83 c4 10             	add    esp,0x10
c001c655:	85 c0                	test   eax,eax
c001c657:	75 0f                	jne    c001c668 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c659:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c65c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c664:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c668:	45                   	inc    ebp
c001c669:	e9 4c ff ff ff       	jmp    c001c5ba <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c66e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c673:	75 10                	jne    c001c685 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c675:	83 ec 0c             	sub    esp,0xc
c001c678:	68 24 b8 02 c0       	push   0xc002b824
c001c67d:	e8 e7 d6 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001c682:	83 c4 10             	add    esp,0x10
c001c685:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c68a:	75 10                	jne    c001c69c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	68 24 b8 02 c0       	push   0xc002b824
c001c694:	e8 d0 d6 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	31 d2                	xor    edx,edx
c001c69e:	50                   	push   eax
c001c69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a3:	52                   	push   edx
c001c6a4:	50                   	push   eax
c001c6a5:	53                   	push   ebx
c001c6a6:	e8 d3 65 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c6ab:	5a                   	pop    edx
c001c6ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c6b0:	e8 e7 2e ff ff       	call   c000f59c <malloc>
c001c6b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c6bd:	31 c9                	xor    ecx,ecx
c001c6bf:	5e                   	pop    esi
c001c6c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6c2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c6c6:	55                   	push   ebp
c001c6c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6cb:	51                   	push   ecx
c001c6cc:	52                   	push   edx
c001c6cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c6d1:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c6d5:	53                   	push   ebx
c001c6d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6d9:	83 c4 14             	add    esp,0x14
c001c6dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6e0:	e8 b7 2e ff ff       	call   c000f59c <malloc>
c001c6e5:	89 c6                	mov    esi,eax
c001c6e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c6ec:	56                   	push   esi
c001c6ed:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c6f1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c6f5:	51                   	push   ecx
c001c6f6:	52                   	push   edx
c001c6f7:	53                   	push   ebx
c001c6f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c6ff:	8b 15 80 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c80
c001c705:	83 c4 1c             	add    esp,0x1c
c001c708:	c1 e8 04             	shr    eax,0x4
c001c70b:	89 04 95 00 0b 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf500],eax
c001c712:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c716:	31 d2                	xor    edx,edx
c001c718:	52                   	push   edx
c001c719:	50                   	push   eax
c001c71a:	53                   	push   ebx
c001c71b:	e8 5e 65 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c720:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c722:	31 d2                	xor    edx,edx
c001c724:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c727:	56                   	push   esi
c001c728:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c72c:	52                   	push   edx
c001c72d:	50                   	push   eax
c001c72e:	53                   	push   ebx
c001c72f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c732:	83 c4 14             	add    esp,0x14
c001c735:	53                   	push   ebx
c001c736:	e8 e3 64 ff ff       	call   c0012c1e <File::close()>
c001c73b:	5d                   	pop    ebp
c001c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c740:	e8 67 2e ff ff       	call   c000f5ac <free>
c001c745:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c748:	e8 5f 2e ff ff       	call   c000f5ac <free>
c001c74d:	a1 80 0c 03 c0       	mov    eax,ds:0xc0030c80
c001c752:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c756:	8d 50 01             	lea    edx,[eax+0x1]
c001c759:	89 0c 85 00 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf400],ecx
c001c760:	89 34 85 80 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf480],esi
c001c767:	89 15 80 0c 03 c0    	mov    DWORD PTR ds:0xc0030c80,edx
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	b0 01                	mov    al,0x1
c001c772:	83 c4 5c             	add    esp,0x5c
c001c775:	5b                   	pop    ebx
c001c776:	5e                   	pop    esi
c001c777:	5f                   	pop    edi
c001c778:	5d                   	pop    ebp
c001c779:	c3                   	ret    

c001c77a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c77a:	55                   	push   ebp
c001c77b:	57                   	push   edi
c001c77c:	56                   	push   esi
c001c77d:	53                   	push   ebx
c001c77e:	81 ec 68 03 00 00    	sub    esp,0x368
c001c784:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c78b:	8b 1d d0 0c 03 c0    	mov    ebx,DWORD PTR ds:0xc0030cd0
c001c791:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c795:	68 14 01 00 00       	push   0x114
c001c79a:	e8 fd 2d ff ff       	call   c000f59c <malloc>
c001c79f:	83 c4 0c             	add    esp,0xc
c001c7a2:	89 c5                	mov    ebp,eax
c001c7a4:	53                   	push   ebx
c001c7a5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c7ac:	50                   	push   eax
c001c7ad:	e8 aa 63 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001c7b2:	5e                   	pop    esi
c001c7b3:	5f                   	pop    edi
c001c7b4:	6a 01                	push   0x1
c001c7b6:	55                   	push   ebp
c001c7b7:	e8 04 64 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	85 c0                	test   eax,eax
c001c7c1:	0f 85 a7 06 00 00    	jne    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7c7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c7cf:	83 ec 0c             	sub    esp,0xc
c001c7d2:	6a 34                	push   0x34
c001c7d4:	e8 c3 2d ff ff       	call   c000f59c <malloc>
c001c7d9:	5b                   	pop    ebx
c001c7da:	89 c7                	mov    edi,eax
c001c7dc:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c7e3:	53                   	push   ebx
c001c7e4:	57                   	push   edi
c001c7e5:	6a 00                	push   0x0
c001c7e7:	6a 34                	push   0x34
c001c7e9:	55                   	push   ebp
c001c7ea:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7ed:	83 c4 20             	add    esp,0x20
c001c7f0:	85 c0                	test   eax,eax
c001c7f2:	0f 85 76 06 00 00    	jne    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7f8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c7fe:	0f 85 6a 06 00 00    	jne    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c804:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c807:	85 c0                	test   eax,eax
c001c809:	0f 84 5f 06 00 00    	je     c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c80f:	31 d2                	xor    edx,edx
c001c811:	51                   	push   ecx
c001c812:	52                   	push   edx
c001c813:	50                   	push   eax
c001c814:	55                   	push   ebp
c001c815:	e8 64 64 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c81a:	83 c4 10             	add    esp,0x10
c001c81d:	85 c0                	test   eax,eax
c001c81f:	0f 85 49 06 00 00    	jne    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c825:	83 ec 0c             	sub    esp,0xc
c001c828:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c82b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c82f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c833:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c837:	0f af c2             	imul   eax,edx
c001c83a:	50                   	push   eax
c001c83b:	e8 5c 2d ff ff       	call   c000f59c <malloc>
c001c840:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c843:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c847:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c84e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c852:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c856:	0f af c2             	imul   eax,edx
c001c859:	99                   	cdq    
c001c85a:	52                   	push   edx
c001c85b:	50                   	push   eax
c001c85c:	55                   	push   ebp
c001c85d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c860:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c863:	83 c4 20             	add    esp,0x20
c001c866:	85 c0                	test   eax,eax
c001c868:	0f 84 00 06 00 00    	je     c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c86e:	52                   	push   edx
c001c86f:	31 d2                	xor    edx,edx
c001c871:	52                   	push   edx
c001c872:	50                   	push   eax
c001c873:	55                   	push   ebp
c001c874:	e8 05 64 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	85 c0                	test   eax,eax
c001c87e:	0f 85 ea 05 00 00    	jne    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c884:	83 ec 0c             	sub    esp,0xc
c001c887:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c88b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c88f:	31 f6                	xor    esi,esi
c001c891:	0f af c2             	imul   eax,edx
c001c894:	50                   	push   eax
c001c895:	e8 02 2d ff ff       	call   c000f59c <malloc>
c001c89a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c89d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c8a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8a8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c8ac:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c8b0:	0f af c2             	imul   eax,edx
c001c8b3:	99                   	cdq    
c001c8b4:	52                   	push   edx
c001c8b5:	50                   	push   eax
c001c8b6:	55                   	push   ebp
c001c8b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8ba:	83 c4 20             	add    esp,0x20
c001c8bd:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c8c1:	0f 86 8a 00 00 00    	jbe    c001c951 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c8c7:	0f b7 de             	movzx  ebx,si
c001c8ca:	c1 e3 05             	shl    ebx,0x5
c001c8cd:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c8d1:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c8d4:	75 75                	jne    c001c94b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c8d6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c8d9:	31 d2                	xor    edx,edx
c001c8db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c8e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8e6:	50                   	push   eax
c001c8e7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c8ea:	52                   	push   edx
c001c8eb:	50                   	push   eax
c001c8ec:	55                   	push   ebp
c001c8ed:	e8 8c 63 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c8f2:	83 c4 10             	add    esp,0x10
c001c8f5:	85 c0                	test   eax,eax
c001c8f7:	0f 85 71 05 00 00    	jne    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8fd:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c904:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c907:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c90b:	31 d2                	xor    edx,edx
c001c90d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c911:	83 ec 0c             	sub    esp,0xc
c001c914:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c918:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c91f:	50                   	push   eax
c001c920:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c928:	52                   	push   edx
c001c929:	50                   	push   eax
c001c92a:	55                   	push   ebp
c001c92b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c92e:	83 c4 1c             	add    esp,0x1c
c001c931:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c934:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c937:	50                   	push   eax
c001c938:	6a 00                	push   0x0
c001c93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c942:	50                   	push   eax
c001c943:	e8 08 3e fe ff       	call   c0000750 <memset>
c001c948:	83 c4 10             	add    esp,0x10
c001c94b:	46                   	inc    esi
c001c94c:	e9 6c ff ff ff       	jmp    c001c8bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c951:	53                   	push   ebx
c001c952:	31 db                	xor    ebx,ebx
c001c954:	68 00 01 00 00       	push   0x100
c001c959:	6a 00                	push   0x0
c001c95b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c95f:	50                   	push   eax
c001c960:	e8 eb 3d fe ff       	call   c0000750 <memset>
c001c965:	83 c4 0c             	add    esp,0xc
c001c968:	68 00 01 00 00       	push   0x100
c001c96d:	6a 00                	push   0x0
c001c96f:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c976:	50                   	push   eax
c001c977:	e8 d4 3d fe ff       	call   c0000750 <memset>
c001c97c:	83 c4 10             	add    esp,0x10
c001c97f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c987:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c98f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c997:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c99f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c9a7:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c9ab:	0f 86 30 01 00 00    	jbe    c001cae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c9b1:	0f b7 f3             	movzx  esi,bx
c001c9b4:	6b f6 28             	imul   esi,esi,0x28
c001c9b7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c9bb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c9be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9c2:	52                   	push   edx
c001c9c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c9c7:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c9cb:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9cd:	6b d2 28             	imul   edx,edx,0x28
c001c9d0:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c9d4:	31 d2                	xor    edx,edx
c001c9d6:	52                   	push   edx
c001c9d7:	50                   	push   eax
c001c9d8:	55                   	push   ebp
c001c9d9:	e8 a0 62 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001c9de:	83 c4 0c             	add    esp,0xc
c001c9e1:	6a 20                	push   0x20
c001c9e3:	6a 00                	push   0x0
c001c9e5:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c9ec:	51                   	push   ecx
c001c9ed:	e8 5e 3d fe ff       	call   c0000750 <memset>
c001c9f2:	59                   	pop    ecx
c001c9f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9f6:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c9fa:	52                   	push   edx
c001c9fb:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ca02:	51                   	push   ecx
c001ca03:	6a 00                	push   0x0
c001ca05:	6a 1f                	push   0x1f
c001ca07:	55                   	push   ebp
c001ca08:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca0b:	83 c4 1c             	add    esp,0x1c
c001ca0e:	6a 09                	push   0x9
c001ca10:	68 3e b8 02 c0       	push   0xc002b83e
c001ca15:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ca1c:	51                   	push   ecx
c001ca1d:	e8 2a 3c fe ff       	call   c000064c <memcmp>
c001ca22:	83 c4 10             	add    esp,0x10
c001ca25:	85 c0                	test   eax,eax
c001ca27:	75 21                	jne    c001ca4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ca29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca31:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca39:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca3c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca43:	89 d0                	mov    eax,edx
c001ca45:	40                   	inc    eax
c001ca46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca4a:	50                   	push   eax
c001ca4b:	6a 09                	push   0x9
c001ca4d:	68 48 b8 02 c0       	push   0xc002b848
c001ca52:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca59:	50                   	push   eax
c001ca5a:	e8 ed 3b fe ff       	call   c000064c <memcmp>
c001ca5f:	83 c4 10             	add    esp,0x10
c001ca62:	85 c0                	test   eax,eax
c001ca64:	75 21                	jne    c001ca87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ca66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ca6e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ca72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca79:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ca80:	89 d0                	mov    eax,edx
c001ca82:	40                   	inc    eax
c001ca83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca87:	50                   	push   eax
c001ca88:	50                   	push   eax
c001ca89:	68 14 b8 02 c0       	push   0xc002b814
c001ca8e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca95:	50                   	push   eax
c001ca96:	e8 fd 3d fe ff       	call   c0000898 <strcmp>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	85 c0                	test   eax,eax
c001caa0:	75 0f                	jne    c001cab1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001caa2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001caa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001caad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cab1:	50                   	push   eax
c001cab2:	50                   	push   eax
c001cab3:	68 1c b8 02 c0       	push   0xc002b81c
c001cab8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cabf:	50                   	push   eax
c001cac0:	e8 d3 3d fe ff       	call   c0000898 <strcmp>
c001cac5:	83 c4 10             	add    esp,0x10
c001cac8:	85 c0                	test   eax,eax
c001caca:	75 0f                	jne    c001cadb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cacc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cacf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cad7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cadb:	43                   	inc    ebx
c001cadc:	e9 c6 fe ff ff       	jmp    c001c9a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cae1:	31 d2                	xor    edx,edx
c001cae3:	50                   	push   eax
c001cae4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cae8:	52                   	push   edx
c001cae9:	50                   	push   eax
c001caea:	55                   	push   ebp
c001caeb:	e8 8e 61 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001caf0:	58                   	pop    eax
c001caf1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caf5:	e8 a2 2a ff ff       	call   c000f59c <malloc>
c001cafa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cafd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cb01:	31 d2                	xor    edx,edx
c001cb03:	58                   	pop    eax
c001cb04:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cb08:	53                   	push   ebx
c001cb09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cb0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb11:	52                   	push   edx
c001cb12:	50                   	push   eax
c001cb13:	55                   	push   ebp
c001cb14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb17:	83 c4 14             	add    esp,0x14
c001cb1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb1e:	e8 79 2a ff ff       	call   c000f59c <malloc>
c001cb23:	31 d2                	xor    edx,edx
c001cb25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb29:	83 c4 0c             	add    esp,0xc
c001cb2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb30:	52                   	push   edx
c001cb31:	50                   	push   eax
c001cb32:	55                   	push   ebp
c001cb33:	e8 46 61 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001cb38:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cb3b:	31 d2                	xor    edx,edx
c001cb3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cb44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb48:	52                   	push   edx
c001cb49:	50                   	push   eax
c001cb4a:	55                   	push   ebp
c001cb4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb4e:	83 c4 20             	add    esp,0x20
c001cb51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb59:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cb5d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cb61:	0f 84 0b 03 00 00    	je     c001ce72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cb67:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cb6e:	31 d2                	xor    edx,edx
c001cb70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb74:	c1 e8 03             	shr    eax,0x3
c001cb77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cb7b:	51                   	push   ecx
c001cb7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb80:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cb84:	52                   	push   edx
c001cb85:	50                   	push   eax
c001cb86:	55                   	push   ebp
c001cb87:	e8 f2 60 ff ff       	call   c0012c7e <File::seek(unsigned long long)>
c001cb8c:	5b                   	pop    ebx
c001cb8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb91:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cb98:	e8 ff 29 ff ff       	call   c000f59c <malloc>
c001cb9d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cba0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cba4:	31 d2                	xor    edx,edx
c001cba6:	5e                   	pop    esi
c001cba7:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cbab:	50                   	push   eax
c001cbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbb4:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cbbb:	52                   	push   edx
c001cbbc:	50                   	push   eax
c001cbbd:	55                   	push   ebp
c001cbbe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbc1:	83 c4 20             	add    esp,0x20
c001cbc4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cbcc:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cbd0:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cbd4:	0f 8d 7c 02 00 00    	jge    c001ce56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cbda:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cbde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbe2:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cbe7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cbea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cbee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbf2:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cbf6:	89 d8                	mov    eax,ebx
c001cbf8:	c1 e8 08             	shr    eax,0x8
c001cbfb:	89 c6                	mov    esi,eax
c001cbfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cc01:	c1 e6 04             	shl    esi,0x4
c001cc04:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cc08:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cc0b:	85 d2                	test   edx,edx
c001cc0d:	0f 85 bf 00 00 00    	jne    c001ccd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc13:	83 ec 0c             	sub    esp,0xc
c001cc16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc1a:	03 06                	add    eax,DWORD PTR [esi]
c001cc1c:	50                   	push   eax
c001cc1d:	e8 4b f8 ff ff       	call   c001c46d <Thr::getAddressOfKernelSymbol(char const*)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	89 c2                	mov    edx,eax
c001cc27:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cc2c:	85 c0                	test   eax,eax
c001cc2e:	0f 85 9e 00 00 00    	jne    c001ccd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc3b:	03 06                	add    eax,DWORD PTR [esi]
c001cc3d:	50                   	push   eax
c001cc3e:	e8 fc 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	89 c2                	mov    edx,eax
c001cc48:	85 c0                	test   eax,eax
c001cc4a:	0f 85 82 00 00 00    	jne    c001ccd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cc50:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cc54:	50                   	push   eax
c001cc55:	50                   	push   eax
c001cc56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc5a:	03 06                	add    eax,DWORD PTR [esi]
c001cc5c:	50                   	push   eax
c001cc5d:	68 52 b8 02 c0       	push   0xc002b852
c001cc62:	e8 96 59 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001cc67:	58                   	pop    eax
c001cc68:	5a                   	pop    edx
c001cc69:	68 6c b8 02 c0       	push   0xc002b86c
c001cc6e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc75:	50                   	push   eax
c001cc76:	e8 91 3b fe ff       	call   c000080c <strcpy>
c001cc7b:	59                   	pop    ecx
c001cc7c:	58                   	pop    eax
c001cc7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc81:	03 06                	add    eax,DWORD PTR [esi]
c001cc83:	50                   	push   eax
c001cc84:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc8b:	50                   	push   eax
c001cc8c:	e8 bb 3c fe ff       	call   c000094c <strcat>
c001cc91:	58                   	pop    eax
c001cc92:	5a                   	pop    edx
c001cc93:	68 02 b9 02 c0       	push   0xc002b902
c001cc98:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc9f:	50                   	push   eax
c001cca0:	e8 a7 3c fe ff       	call   c000094c <strcat>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccad:	0f 84 5d 01 00 00    	je     c001ce10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ccb3:	83 ec 0c             	sub    esp,0xc
c001ccb6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ccbd:	50                   	push   eax
c001ccbe:	e8 a6 d0 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001ccc3:	83 c4 10             	add    esp,0x10
c001ccc6:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ccca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ccce:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ccd2:	80 fb 01             	cmp    bl,0x1
c001ccd5:	0f 85 88 00 00 00    	jne    c001cd63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ccdb:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cce2:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cce6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ccea:	01 ce                	add    esi,ecx
c001ccec:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ccf2:	0f 94 c0             	sete   al
c001ccf5:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccfb:	0f 94 c3             	sete   bl
c001ccfe:	09 c3                	or     ebx,eax
c001cd00:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd02:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cd07:	74 41                	je     c001cd4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cd09:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cd0c:	84 db                	test   bl,bl
c001cd0e:	75 15                	jne    c001cd25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cd10:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd14:	66 83 f8 0c          	cmp    ax,0xc
c001cd18:	76 05                	jbe    c001cd1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cd1a:	b8 0c 00 00 00       	mov    eax,0xc
c001cd1f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cd23:	76 37                	jbe    c001cd5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd25:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cd29:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd2e:	0f 84 dc 00 00 00    	je     c001ce10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	68 83 b8 02 c0       	push   0xc002b883
c001cd3c:	e8 28 d0 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cd48:	eb 12                	jmp    c001cd5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd4a:	01 c1                	add    ecx,eax
c001cd4c:	84 db                	test   bl,bl
c001cd4e:	75 0c                	jne    c001cd5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd54:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cd58:	77 02                	ja     c001cd5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cd5a:	01 d1                	add    ecx,edx
c001cd5c:	89 0e                	mov    DWORD PTR [esi],ecx
c001cd5e:	e9 ea 00 00 00       	jmp    c001ce4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd63:	80 fb 02             	cmp    bl,0x2
c001cd66:	75 7c                	jne    c001cde4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cd68:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cd6f:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cd73:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cd77:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cd7d:	74 20                	je     c001cd9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd7f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cd85:	74 18                	je     c001cd9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cd87:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd8b:	b9 0a 00 00 00       	mov    ecx,0xa
c001cd90:	66 83 f8 0e          	cmp    ax,0xe
c001cd94:	77 03                	ja     c001cd99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cd96:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cd99:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cd9d:	76 1f                	jbe    c001cdbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cd9f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cda3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cda8:	74 66                	je     c001ce10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdaa:	83 ec 0c             	sub    esp,0xc
c001cdad:	68 9f b8 02 c0       	push   0xc002b89f
c001cdb2:	e8 b2 cf ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cdbe:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdc0:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdc5:	74 13                	je     c001cdda <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cdc7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cdcb:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cdd2:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cdd6:	01 c8                	add    eax,ecx
c001cdd8:	eb 04                	jmp    c001cdde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cdda:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cdde:	01 c2                	add    edx,eax
c001cde0:	89 16                	mov    DWORD PTR [esi],edx
c001cde2:	eb 69                	jmp    c001ce4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cde4:	0f b6 db             	movzx  ebx,bl
c001cde7:	50                   	push   eax
c001cde8:	50                   	push   eax
c001cde9:	53                   	push   ebx
c001cdea:	68 bb b8 02 c0       	push   0xc002b8bb
c001cdef:	e8 09 58 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001cdf4:	83 c4 10             	add    esp,0x10
c001cdf7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdfc:	74 12                	je     c001ce10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdfe:	83 ec 0c             	sub    esp,0xc
c001ce01:	68 c6 b8 02 c0       	push   0xc002b8c6
c001ce06:	e8 5e cf ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001ce0b:	83 c4 10             	add    esp,0x10
c001ce0e:	eb 3d                	jmp    c001ce4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce10:	83 ec 0c             	sub    esp,0xc
c001ce13:	55                   	push   ebp
c001ce14:	e8 05 5e ff ff       	call   c0012c1e <File::close()>
c001ce19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce1c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce22:	59                   	pop    ecx
c001ce23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce27:	e8 80 27 ff ff       	call   c000f5ac <free>
c001ce2c:	5b                   	pop    ebx
c001ce2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce31:	e8 76 27 ff ff       	call   c000f5ac <free>
c001ce36:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce39:	e8 6e 27 ff ff       	call   c000f5ac <free>
c001ce3e:	5e                   	pop    esi
c001ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce43:	e8 64 27 ff ff       	call   c000f5ac <free>
c001ce48:	83 c4 10             	add    esp,0x10
c001ce4b:	eb 21                	jmp    c001ce6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ce4d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ce51:	e9 76 fd ff ff       	jmp    c001cbcc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ce56:	83 ec 0c             	sub    esp,0xc
c001ce59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce5d:	e8 4a 27 ff ff       	call   c000f5ac <free>
c001ce62:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ce66:	83 c4 10             	add    esp,0x10
c001ce69:	e9 eb fc ff ff       	jmp    c001cb59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ce6e:	31 c0                	xor    eax,eax
c001ce70:	eb 33                	jmp    c001cea5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001ce72:	83 ec 0c             	sub    esp,0xc
c001ce75:	55                   	push   ebp
c001ce76:	e8 a3 5d ff ff       	call   c0012c1e <File::close()>
c001ce7b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce7e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ce84:	58                   	pop    eax
c001ce85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce89:	e8 1e 27 ff ff       	call   c000f5ac <free>
c001ce8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce91:	e8 16 27 ff ff       	call   c000f5ac <free>
c001ce96:	5a                   	pop    edx
c001ce97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce9b:	e8 0c 27 ff ff       	call   c000f5ac <free>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	b0 01                	mov    al,0x1
c001cea5:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ceab:	5b                   	pop    ebx
c001ceac:	5e                   	pop    esi
c001cead:	5f                   	pop    edi
c001ceae:	5d                   	pop    ebp
c001ceaf:	c3                   	ret    

c001ceb0 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ceb0:	56                   	push   esi
c001ceb1:	31 d2                	xor    edx,edx
c001ceb3:	53                   	push   ebx
c001ceb4:	8b 1d e0 04 03 c0    	mov    ebx,DWORD PTR ds:0xc00304e0
c001ceba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cebe:	39 d3                	cmp    ebx,edx
c001cec0:	7e 1b                	jle    c001cedd <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cec2:	8b 04 95 00 07 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf900]
c001cec9:	39 c8                	cmp    eax,ecx
c001cecb:	77 0d                	ja     c001ceda <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cecd:	8b 34 95 00 05 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfb00]
c001ced4:	01 c6                	add    esi,eax
c001ced6:	39 ce                	cmp    esi,ecx
c001ced8:	77 05                	ja     c001cedf <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ceda:	42                   	inc    edx
c001cedb:	eb e1                	jmp    c001cebe <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cedd:	31 c0                	xor    eax,eax
c001cedf:	5b                   	pop    ebx
c001cee0:	5e                   	pop    esi
c001cee1:	c3                   	ret    

c001cee2 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cee2:	53                   	push   ebx
c001cee3:	31 c0                	xor    eax,eax
c001cee5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cee9:	8b 1d e0 04 03 c0    	mov    ebx,DWORD PTR ds:0xc00304e0
c001ceef:	39 c3                	cmp    ebx,eax
c001cef1:	7e 22                	jle    c001cf15 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cef3:	8b 14 85 00 07 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf900]
c001cefa:	39 ca                	cmp    edx,ecx
c001cefc:	77 14                	ja     c001cf12 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cefe:	03 14 85 00 05 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfb00]
c001cf05:	39 ca                	cmp    edx,ecx
c001cf07:	76 09                	jbe    c001cf12 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cf09:	8b 04 85 00 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf700]
c001cf10:	eb 05                	jmp    c001cf17 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cf12:	40                   	inc    eax
c001cf13:	eb da                	jmp    c001ceef <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cf15:	31 c0                	xor    eax,eax
c001cf17:	5b                   	pop    ebx
c001cf18:	c3                   	ret    

c001cf19 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cf19:	53                   	push   ebx
c001cf1a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cf1e:	53                   	push   ebx
c001cf1f:	e8 8c ff ff ff       	call   c001ceb0 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cf24:	5a                   	pop    edx
c001cf25:	31 d2                	xor    edx,edx
c001cf27:	85 c0                	test   eax,eax
c001cf29:	74 04                	je     c001cf2f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cf2b:	89 da                	mov    edx,ebx
c001cf2d:	29 c2                	sub    edx,eax
c001cf2f:	89 d0                	mov    eax,edx
c001cf31:	5b                   	pop    ebx
c001cf32:	c3                   	ret    

c001cf33 <Thr::loadDLL(char const*, bool)>:
c001cf33:	55                   	push   ebp
c001cf34:	57                   	push   edi
c001cf35:	56                   	push   esi
c001cf36:	53                   	push   ebx
c001cf37:	81 ec 34 01 00 00    	sub    esp,0x134
c001cf3d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cf44:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001cf4b:	56                   	push   esi
c001cf4c:	68 de b8 02 c0       	push   0xc002b8de
c001cf51:	e8 a7 56 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001cf56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cf5d:	e8 3a 26 ff ff       	call   c000f59c <malloc>
c001cf62:	83 c4 0c             	add    esp,0xc
c001cf65:	89 c3                	mov    ebx,eax
c001cf67:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c001cf6d:	56                   	push   esi
c001cf6e:	50                   	push   eax
c001cf6f:	e8 e8 5b ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001cf74:	83 c4 10             	add    esp,0x10
c001cf77:	85 db                	test   ebx,ebx
c001cf79:	75 3c                	jne    c001cfb7 <Thr::loadDLL(char const*, bool)+0x84>
c001cf7b:	89 f8                	mov    eax,edi
c001cf7d:	84 c0                	test   al,al
c001cf7f:	0f 84 cf 01 00 00    	je     c001d154 <Thr::loadDLL(char const*, bool)+0x221>
c001cf85:	55                   	push   ebp
c001cf86:	55                   	push   ebp
c001cf87:	68 ef b8 02 c0       	push   0xc002b8ef
c001cf8c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cf90:	55                   	push   ebp
c001cf91:	e8 76 38 fe ff       	call   c000080c <strcpy>
c001cf96:	58                   	pop    eax
c001cf97:	5a                   	pop    edx
c001cf98:	56                   	push   esi
c001cf99:	55                   	push   ebp
c001cf9a:	e8 ad 39 fe ff       	call   c000094c <strcat>
c001cf9f:	59                   	pop    ecx
c001cfa0:	58                   	pop    eax
c001cfa1:	68 02 b9 02 c0       	push   0xc002b902
c001cfa6:	55                   	push   ebp
c001cfa7:	e8 a0 39 fe ff       	call   c000094c <strcat>
c001cfac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfaf:	e8 b5 cd ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001cfb4:	83 c4 10             	add    esp,0x10
c001cfb7:	51                   	push   ecx
c001cfb8:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cfbc:	50                   	push   eax
c001cfbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cfc1:	50                   	push   eax
c001cfc2:	53                   	push   ebx
c001cfc3:	e8 a4 5e ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c001cfc8:	83 c4 10             	add    esp,0x10
c001cfcb:	85 db                	test   ebx,ebx
c001cfcd:	74 0c                	je     c001cfdb <Thr::loadDLL(char const*, bool)+0xa8>
c001cfcf:	83 ec 0c             	sub    esp,0xc
c001cfd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfd4:	53                   	push   ebx
c001cfd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfd8:	83 c4 10             	add    esp,0x10
c001cfdb:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cfe0:	75 0a                	jne    c001cfec <Thr::loadDLL(char const*, bool)+0xb9>
c001cfe2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cfe6:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cfea:	75 3c                	jne    c001d028 <Thr::loadDLL(char const*, bool)+0xf5>
c001cfec:	89 f8                	mov    eax,edi
c001cfee:	84 c0                	test   al,al
c001cff0:	0f 84 46 01 00 00    	je     c001d13c <Thr::loadDLL(char const*, bool)+0x209>
c001cff6:	51                   	push   ecx
c001cff7:	51                   	push   ecx
c001cff8:	68 ef b8 02 c0       	push   0xc002b8ef
c001cffd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d001:	53                   	push   ebx
c001d002:	e8 05 38 fe ff       	call   c000080c <strcpy>
c001d007:	5d                   	pop    ebp
c001d008:	58                   	pop    eax
c001d009:	56                   	push   esi
c001d00a:	53                   	push   ebx
c001d00b:	e8 3c 39 fe ff       	call   c000094c <strcat>
c001d010:	58                   	pop    eax
c001d011:	5a                   	pop    edx
c001d012:	68 02 b9 02 c0       	push   0xc002b902
c001d017:	53                   	push   ebx
c001d018:	e8 2f 39 fe ff       	call   c000094c <strcat>
c001d01d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d020:	e8 44 cd ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001d025:	83 c4 10             	add    esp,0x10
c001d028:	52                   	push   edx
c001d029:	68 03 08 00 00       	push   0x803
c001d02e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d032:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d036:	05 ff 0f 00 00       	add    eax,0xfff
c001d03b:	83 d2 00             	adc    edx,0x0
c001d03e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d042:	50                   	push   eax
c001d043:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c001d049:	e8 58 4a ff ff       	call   c0011aa6 <VAS::allocatePages(int, int)>
c001d04e:	59                   	pop    ecx
c001d04f:	89 c3                	mov    ebx,eax
c001d051:	5d                   	pop    ebp
c001d052:	50                   	push   eax
c001d053:	68 73 9f 02 c0       	push   0xc0029f73
c001d058:	e8 a0 55 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001d05d:	89 34 24             	mov    DWORD PTR [esp],esi
c001d060:	e8 07 37 fe ff       	call   c000076c <strlen>
c001d065:	8b 2d e0 04 03 c0    	mov    ebp,DWORD PTR ds:0xc00304e0
c001d06b:	40                   	inc    eax
c001d06c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d06f:	e8 28 25 ff ff       	call   c000f59c <malloc>
c001d074:	89 04 ad 00 09 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf700],eax
c001d07b:	58                   	pop    eax
c001d07c:	a1 e0 04 03 c0       	mov    eax,ds:0xc00304e0
c001d081:	5a                   	pop    edx
c001d082:	56                   	push   esi
c001d083:	ff 34 85 00 09 03 c0 	push   DWORD PTR [eax*4-0x3ffcf700]
c001d08a:	e8 7d 37 fe ff       	call   c000080c <strcpy>
c001d08f:	a1 e0 04 03 c0       	mov    eax,ds:0xc00304e0
c001d094:	8d 50 01             	lea    edx,[eax+0x1]
c001d097:	89 1c 85 00 07 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf900],ebx
c001d09e:	89 15 e0 04 03 c0    	mov    DWORD PTR ds:0xc00304e0,edx
c001d0a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d0a8:	83 c4 0c             	add    esp,0xc
c001d0ab:	89 14 85 00 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb00],edx
c001d0b2:	6a 01                	push   0x1
c001d0b4:	53                   	push   ebx
c001d0b5:	56                   	push   esi
c001d0b6:	e8 bf f6 ff ff       	call   c001c77a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d0bb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d0c7:	0f 85 83 00 00 00    	jne    c001d150 <Thr::loadDLL(char const*, bool)+0x21d>
c001d0cd:	89 f8                	mov    eax,edi
c001d0cf:	84 c0                	test   al,al
c001d0d1:	74 6d                	je     c001d140 <Thr::loadDLL(char const*, bool)+0x20d>
c001d0d3:	83 ec 0c             	sub    esp,0xc
c001d0d6:	68 04 b9 02 c0       	push   0xc002b904
c001d0db:	e8 89 cc ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001d0e0:	83 c4 10             	add    esp,0x10
c001d0e3:	eb 5b                	jmp    c001d140 <Thr::loadDLL(char const*, bool)+0x20d>
c001d0e5:	89 ee                	mov    esi,ebp
c001d0e7:	50                   	push   eax
c001d0e8:	c1 e6 0c             	shl    esi,0xc
c001d0eb:	50                   	push   eax
c001d0ec:	01 de                	add    esi,ebx
c001d0ee:	56                   	push   esi
c001d0ef:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c001d0f5:	e8 f2 44 ff ff       	call   c00115ec <VAS::getPageTableEntry(unsigned long)>
c001d0fa:	83 c4 10             	add    esp,0x10
c001d0fd:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d100:	75 0c                	jne    c001d10e <Thr::loadDLL(char const*, bool)+0x1db>
c001d102:	83 ec 0c             	sub    esp,0xc
c001d105:	56                   	push   esi
c001d106:	e8 da 27 ff ff       	call   c000f8e5 <Phys::freePage(unsigned long)>
c001d10b:	83 c4 10             	add    esp,0x10
c001d10e:	45                   	inc    ebp
c001d10f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d113:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d117:	05 ff 0f 00 00       	add    eax,0xfff
c001d11c:	bf 00 00 00 00       	mov    edi,0x0
c001d121:	83 d2 00             	adc    edx,0x0
c001d124:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d128:	c1 ea 0c             	shr    edx,0xc
c001d12b:	39 c5                	cmp    ebp,eax
c001d12d:	89 d1                	mov    ecx,edx
c001d12f:	89 f8                	mov    eax,edi
c001d131:	19 c8                	sbb    eax,ecx
c001d133:	72 b0                	jb     c001d0e5 <Thr::loadDLL(char const*, bool)+0x1b2>
c001d135:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d13a:	75 18                	jne    c001d154 <Thr::loadDLL(char const*, bool)+0x221>
c001d13c:	31 db                	xor    ebx,ebx
c001d13e:	eb 14                	jmp    c001d154 <Thr::loadDLL(char const*, bool)+0x221>
c001d140:	83 ec 0c             	sub    esp,0xc
c001d143:	68 23 b9 02 c0       	push   0xc002b923
c001d148:	e8 1c cc ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001d14d:	83 c4 10             	add    esp,0x10
c001d150:	31 ed                	xor    ebp,ebp
c001d152:	eb bb                	jmp    c001d10f <Thr::loadDLL(char const*, bool)+0x1dc>
c001d154:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d15a:	89 d8                	mov    eax,ebx
c001d15c:	5b                   	pop    ebx
c001d15d:	5e                   	pop    esi
c001d15e:	5f                   	pop    edi
c001d15f:	5d                   	pop    ebp
c001d160:	c3                   	ret    

c001d161 <Thr::executeDLL(unsigned long, void*)>:
c001d161:	56                   	push   esi
c001d162:	53                   	push   ebx
c001d163:	52                   	push   edx
c001d164:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d168:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d16c:	85 db                	test   ebx,ebx
c001d16e:	75 10                	jne    c001d180 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	68 3f b9 02 c0       	push   0xc002b93f
c001d178:	e8 ec cb ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	50                   	push   eax
c001d181:	50                   	push   eax
c001d182:	53                   	push   ebx
c001d183:	68 69 b9 02 c0       	push   0xc002b969
c001d188:	e8 70 54 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001d18d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d191:	89 d8                	mov    eax,ebx
c001d193:	83 c4 14             	add    esp,0x14
c001d196:	5b                   	pop    ebx
c001d197:	5e                   	pop    esi
c001d198:	ff e0                	jmp    eax

c001d19a <userModeEntryPoint(void*)>:
c001d19a:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001d19f:	48                   	dec    eax
c001d1a0:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001d1a5:	75 01                	jne    c001d1a8 <userModeEntryPoint(void*)+0xe>
c001d1a7:	fb                   	sti    
c001d1a8:	fb                   	sti    
c001d1a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d1b1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d1b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1bb:	e9 6a 31 fe ff       	jmp    c000032a <goToUsermode>

c001d1c0 <changeTSS>:
c001d1c0:	83 ec 14             	sub    esp,0x14
c001d1c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1c8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d1cb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d1d0:	c1 e2 15             	shl    edx,0x15
c001d1d3:	29 d0                	sub    eax,edx
c001d1d5:	50                   	push   eax
c001d1d6:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001d1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1e1:	05 7c 11 00 00       	add    eax,0x117c
c001d1e6:	50                   	push   eax
c001d1e7:	e8 2e 39 ff ff       	call   c0010b1a <TSS::setESP(unsigned long)>
c001d1ec:	83 c4 1c             	add    esp,0x1c
c001d1ef:	c3                   	ret    

c001d1f0 <switchToThread(ThreadControlBlock*)>:
c001d1f0:	57                   	push   edi
c001d1f1:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001d1f6:	56                   	push   esi
c001d1f7:	85 c0                	test   eax,eax
c001d1f9:	53                   	push   ebx
c001d1fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1fe:	0f 85 88 00 00 00    	jne    c001d28c <switchToThread(ThreadControlBlock*)+0x9c>
c001d204:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d207:	3c ff                	cmp    al,0xff
c001d209:	74 7d                	je     c001d288 <switchToThread(ThreadControlBlock*)+0x98>
c001d20b:	0f b6 d0             	movzx  edx,al
c001d20e:	b8 84 03 00 00       	mov    eax,0x384
c001d213:	29 d0                	sub    eax,edx
c001d215:	c1 e0 10             	shl    eax,0x10
c001d218:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d21b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d21e:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001d223:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d229:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d230:	74 4a                	je     c001d27c <switchToThread(ThreadControlBlock*)+0x8c>
c001d232:	0f 31                	rdtsc  
c001d234:	a3 e8 0c 03 c0       	mov    ds:0xc0030ce8,eax
c001d239:	89 c6                	mov    esi,eax
c001d23b:	89 d7                	mov    edi,edx
c001d23d:	2b 35 d8 0c 03 c0    	sub    esi,DWORD PTR ds:0xc0030cd8
c001d243:	89 15 ec 0c 03 c0    	mov    DWORD PTR ds:0xc0030cec,edx
c001d249:	1b 3d dc 0c 03 c0    	sbb    edi,DWORD PTR ds:0xc0030cdc
c001d24f:	89 35 e0 0c 03 c0    	mov    DWORD PTR ds:0xc0030ce0,esi
c001d255:	a3 d8 0c 03 c0       	mov    ds:0xc0030cd8,eax
c001d25a:	89 3d e4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ce4,edi
c001d260:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d266:	89 15 dc 0c 03 c0    	mov    DWORD PTR ds:0xc0030cdc,edx
c001d26c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d26f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d272:	01 c6                	add    esi,eax
c001d274:	11 d7                	adc    edi,edx
c001d276:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d279:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d27c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d280:	5b                   	pop    ebx
c001d281:	5e                   	pop    esi
c001d282:	5f                   	pop    edi
c001d283:	e9 da 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d288:	31 c0                	xor    eax,eax
c001d28a:	eb 8f                	jmp    c001d21b <switchToThread(ThreadControlBlock*)+0x2b>
c001d28c:	5b                   	pop    ebx
c001d28d:	c7 05 a0 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x1
c001d297:	5e                   	pop    esi
c001d298:	5f                   	pop    edi
c001d299:	c3                   	ret    

c001d29a <Process::addArgs(char**)>:
c001d29a:	57                   	push   edi
c001d29b:	56                   	push   esi
c001d29c:	53                   	push   ebx
c001d29d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2a1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d2a5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d2af:	85 ff                	test   edi,edi
c001d2b1:	74 3d                	je     c001d2f0 <Process::addArgs(char**)+0x56>
c001d2b3:	8b 07                	mov    eax,DWORD PTR [edi]
c001d2b5:	85 c0                	test   eax,eax
c001d2b7:	74 37                	je     c001d2f0 <Process::addArgs(char**)+0x56>
c001d2b9:	31 db                	xor    ebx,ebx
c001d2bb:	83 ec 0c             	sub    esp,0xc
c001d2be:	50                   	push   eax
c001d2bf:	e8 a8 34 fe ff       	call   c000076c <strlen>
c001d2c4:	40                   	inc    eax
c001d2c5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2c8:	e8 cf 22 ff ff       	call   c000f59c <malloc>
c001d2cd:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d2d4:	5a                   	pop    edx
c001d2d5:	59                   	pop    ecx
c001d2d6:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d2d9:	43                   	inc    ebx
c001d2da:	50                   	push   eax
c001d2db:	e8 2c 35 fe ff       	call   c000080c <strcpy>
c001d2e0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d2ec:	85 c0                	test   eax,eax
c001d2ee:	75 cb                	jne    c001d2bb <Process::addArgs(char**)+0x21>
c001d2f0:	5b                   	pop    ebx
c001d2f1:	5e                   	pop    esi
c001d2f2:	5f                   	pop    edi
c001d2f3:	c3                   	ret    

c001d2f4 <Process::Process(char const*, Process*, char**)>:
c001d2f4:	56                   	push   esi
c001d2f5:	53                   	push   ebx
c001d2f6:	83 ec 14             	sub    esp,0x14
c001d2f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2fd:	05 0c 02 00 00       	add    eax,0x20c
c001d302:	bb 07 00 00 00       	mov    ebx,0x7
c001d307:	89 c6                	mov    esi,eax
c001d309:	85 db                	test   ebx,ebx
c001d30b:	78 12                	js     c001d31f <Process::Process(char const*, Process*, char**)+0x2b>
c001d30d:	83 ec 0c             	sub    esp,0xc
c001d310:	56                   	push   esi
c001d311:	e8 a0 b6 00 00       	call   c00289b6 <ThreadControlBlock::ThreadControlBlock()>
c001d316:	83 c4 10             	add    esp,0x10
c001d319:	83 c6 63             	add    esi,0x63
c001d31c:	4b                   	dec    ebx
c001d31d:	eb ea                	jmp    c001d309 <Process::Process(char const*, Process*, char**)+0x15>
c001d31f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d323:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d32a:	83 ec 0c             	sub    esp,0xc
c001d32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d331:	e8 bc c8 ff ff       	call   c0019bf2 <Krnl::newProcessEnv(Process*)>
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	89 c2                	mov    edx,eax
c001d33b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d33f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d349:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d352:	a1 10 cd 02 c0       	mov    eax,ds:0xc002cd10
c001d357:	8d 50 01             	lea    edx,[eax+0x1]
c001d35a:	89 15 10 cd 02 c0    	mov    DWORD PTR ds:0xc002cd10,edx
c001d360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d364:	89 02                	mov    DWORD PTR [edx],eax
c001d366:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d36e:	83 ec 0c             	sub    esp,0xc
c001d371:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d375:	e8 22 22 ff ff       	call   c000f59c <malloc>
c001d37a:	83 c4 10             	add    esp,0x10
c001d37d:	89 c3                	mov    ebx,eax
c001d37f:	83 ec 08             	sub    esp,0x8
c001d382:	6a 00                	push   0x0
c001d384:	53                   	push   ebx
c001d385:	e8 c4 4a ff ff       	call   c0011e4e <VAS::VAS(bool)>
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d391:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d39b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3ad:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3bd:	85 c0                	test   eax,eax
c001d3bf:	74 42                	je     c001d403 <Process::Process(char const*, Process*, char**)+0x10f>
c001d3c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3cb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3e5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ef:	05 0c 01 00 00       	add    eax,0x10c
c001d3f4:	83 ec 08             	sub    esp,0x8
c001d3f7:	52                   	push   edx
c001d3f8:	50                   	push   eax
c001d3f9:	e8 0e 34 fe ff       	call   c000080c <strcpy>
c001d3fe:	83 c4 10             	add    esp,0x10
c001d401:	eb 63                	jmp    c001d466 <Process::Process(char const*, Process*, char**)+0x172>
c001d403:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d40b:	83 ec 0c             	sub    esp,0xc
c001d40e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d412:	e8 85 21 ff ff       	call   c000f59c <malloc>
c001d417:	83 c4 10             	add    esp,0x10
c001d41a:	89 c3                	mov    ebx,eax
c001d41c:	83 ec 08             	sub    esp,0x8
c001d41f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d423:	53                   	push   ebx
c001d424:	e8 05 34 ff ff       	call   c001082e <VgaText::VgaText(char const*)>
c001d429:	83 c4 10             	add    esp,0x10
c001d42c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d430:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d43a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	50                   	push   eax
c001d444:	e8 a4 2b ff ff       	call   c000ffed <addToTerminalCycle(VgaText*)>
c001d449:	83 c4 10             	add    esp,0x10
c001d44c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d450:	05 0c 01 00 00       	add    eax,0x10c
c001d455:	83 ec 08             	sub    esp,0x8
c001d458:	68 88 b9 02 c0       	push   0xc002b988
c001d45d:	50                   	push   eax
c001d45e:	e8 a9 33 fe ff       	call   c000080c <strcpy>
c001d463:	83 c4 10             	add    esp,0x10
c001d466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d46a:	83 c0 0c             	add    eax,0xc
c001d46d:	83 ec 08             	sub    esp,0x8
c001d470:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d474:	50                   	push   eax
c001d475:	e8 92 33 fe ff       	call   c000080c <strcpy>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	83 ec 08             	sub    esp,0x8
c001d480:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d488:	e8 0d fe ff ff       	call   c001d29a <Process::addArgs(char**)>
c001d48d:	83 c4 10             	add    esp,0x10
c001d490:	83 ec 08             	sub    esp,0x8
c001d493:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d497:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d49b:	e8 a4 ed ff ff       	call   c001c244 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d4a0:	83 c4 10             	add    esp,0x10
c001d4a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4ab:	83 f0 01             	xor    eax,0x1
c001d4ae:	88 c2                	mov    dl,al
c001d4b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b4:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d4ba:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d4bf:	83 ec 08             	sub    esp,0x8
c001d4c2:	50                   	push   eax
c001d4c3:	68 e0 b9 02 c0       	push   0xc002b9e0
c001d4c8:	e8 30 51 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001d4cd:	83 c4 10             	add    esp,0x10
c001d4d0:	90                   	nop
c001d4d1:	83 c4 14             	add    esp,0x14
c001d4d4:	5b                   	pop    ebx
c001d4d5:	5e                   	pop    esi
c001d4d6:	c3                   	ret    
c001d4d7:	90                   	nop

c001d4d8 <Process::Process(bool, char const*, Process*, char**)>:
c001d4d8:	56                   	push   esi
c001d4d9:	53                   	push   ebx
c001d4da:	83 ec 24             	sub    esp,0x24
c001d4dd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4e1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d4e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4e9:	05 0c 02 00 00       	add    eax,0x20c
c001d4ee:	bb 07 00 00 00       	mov    ebx,0x7
c001d4f3:	89 c6                	mov    esi,eax
c001d4f5:	85 db                	test   ebx,ebx
c001d4f7:	78 12                	js     c001d50b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d4f9:	83 ec 0c             	sub    esp,0xc
c001d4fc:	56                   	push   esi
c001d4fd:	e8 b4 b4 00 00       	call   c00289b6 <ThreadControlBlock::ThreadControlBlock()>
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	83 c6 63             	add    esi,0x63
c001d508:	4b                   	dec    ebx
c001d509:	eb ea                	jmp    c001d4f5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d50b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d50f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d51d:	e8 d0 c6 ff ff       	call   c0019bf2 <Krnl::newProcessEnv(Process*)>
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	89 c2                	mov    edx,eax
c001d527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d52b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d531:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d535:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d53e:	a1 10 cd 02 c0       	mov    eax,ds:0xc002cd10
c001d543:	8d 50 01             	lea    edx,[eax+0x1]
c001d546:	89 15 10 cd 02 c0    	mov    DWORD PTR ds:0xc002cd10,edx
c001d54c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d550:	89 02                	mov    DWORD PTR [edx],eax
c001d552:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d561:	e8 36 20 ff ff       	call   c000f59c <malloc>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	89 c3                	mov    ebx,eax
c001d56b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d570:	83 ec 08             	sub    esp,0x8
c001d573:	50                   	push   eax
c001d574:	53                   	push   ebx
c001d575:	e8 d4 48 ff ff       	call   c0011e4e <VAS::VAS(bool)>
c001d57a:	83 c4 10             	add    esp,0x10
c001d57d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d581:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d587:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d58b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d599:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d59d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d5a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5ad:	85 c0                	test   eax,eax
c001d5af:	74 42                	je     c001d5f3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d5b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5bb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5c5:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d5cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5d5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5df:	05 0c 01 00 00       	add    eax,0x10c
c001d5e4:	83 ec 08             	sub    esp,0x8
c001d5e7:	52                   	push   edx
c001d5e8:	50                   	push   eax
c001d5e9:	e8 1e 32 fe ff       	call   c000080c <strcpy>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	eb 63                	jmp    c001d656 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d5f3:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d5fb:	83 ec 0c             	sub    esp,0xc
c001d5fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d602:	e8 95 1f ff ff       	call   c000f59c <malloc>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	89 c3                	mov    ebx,eax
c001d60c:	83 ec 08             	sub    esp,0x8
c001d60f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d613:	53                   	push   ebx
c001d614:	e8 15 32 ff ff       	call   c001082e <VgaText::VgaText(char const*)>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d620:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d62a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d630:	83 ec 0c             	sub    esp,0xc
c001d633:	50                   	push   eax
c001d634:	e8 b4 29 ff ff       	call   c000ffed <addToTerminalCycle(VgaText*)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d640:	05 0c 01 00 00       	add    eax,0x10c
c001d645:	83 ec 08             	sub    esp,0x8
c001d648:	68 88 b9 02 c0       	push   0xc002b988
c001d64d:	50                   	push   eax
c001d64e:	e8 b9 31 fe ff       	call   c000080c <strcpy>
c001d653:	83 c4 10             	add    esp,0x10
c001d656:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d65a:	83 c0 0c             	add    eax,0xc
c001d65d:	83 ec 08             	sub    esp,0x8
c001d660:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d664:	50                   	push   eax
c001d665:	e8 a2 31 fe ff       	call   c000080c <strcpy>
c001d66a:	83 c4 10             	add    esp,0x10
c001d66d:	83 ec 08             	sub    esp,0x8
c001d670:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d674:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d678:	e8 1d fc ff ff       	call   c001d29a <Process::addArgs(char**)>
c001d67d:	83 c4 10             	add    esp,0x10
c001d680:	90                   	nop
c001d681:	83 c4 24             	add    esp,0x24
c001d684:	5b                   	pop    ebx
c001d685:	5e                   	pop    esi
c001d686:	c3                   	ret    

c001d687 <taskStartupFunction>:
c001d687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d68c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d68f:	c3                   	ret    

c001d690 <Semaphore::Semaphore(int)>:
c001d690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d694:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d698:	89 10                	mov    DWORD PTR [eax],edx
c001d69a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d69e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d6a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d6b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d6bb:	90                   	nop
c001d6bc:	c3                   	ret    
c001d6bd:	90                   	nop

c001d6be <Mutex::Mutex()>:
c001d6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6c2:	6a 01                	push   0x1
c001d6c4:	50                   	push   eax
c001d6c5:	e8 c6 ff ff ff       	call   c001d690 <Semaphore::Semaphore(int)>
c001d6ca:	83 c4 08             	add    esp,0x8
c001d6cd:	90                   	nop
c001d6ce:	c3                   	ret    
c001d6cf:	90                   	nop

c001d6d0 <Process::createThread(void (*)(void*), void*, int)>:
c001d6d0:	55                   	push   ebp
c001d6d1:	31 c9                	xor    ecx,ecx
c001d6d3:	57                   	push   edi
c001d6d4:	56                   	push   esi
c001d6d5:	53                   	push   ebx
c001d6d6:	83 ec 1c             	sub    esp,0x1c
c001d6d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d6dd:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d6e4:	89 f2                	mov    edx,esi
c001d6e6:	0f b7 c2             	movzx  eax,dx
c001d6e9:	83 e2 01             	and    edx,0x1
c001d6ec:	74 16                	je     c001d704 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d6ee:	d1 f8                	sar    eax,1
c001d6f0:	41                   	inc    ecx
c001d6f1:	89 c2                	mov    edx,eax
c001d6f3:	83 f9 10             	cmp    ecx,0x10
c001d6f6:	75 ee                	jne    c001d6e6 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d6f8:	83 c4 1c             	add    esp,0x1c
c001d6fb:	31 db                	xor    ebx,ebx
c001d6fd:	89 d8                	mov    eax,ebx
c001d6ff:	5b                   	pop    ebx
c001d700:	5e                   	pop    esi
c001d701:	5f                   	pop    edi
c001d702:	5d                   	pop    ebp
c001d703:	c3                   	ret    
c001d704:	b8 01 00 00 00       	mov    eax,0x1
c001d709:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d70c:	d3 e0                	shl    eax,cl
c001d70e:	09 c6                	or     esi,eax
c001d710:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d713:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d71a:	89 c6                	mov    esi,eax
c001d71c:	c1 e6 05             	shl    esi,0x5
c001d71f:	01 f0                	add    eax,esi
c001d721:	01 d8                	add    eax,ebx
c001d723:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d72a:	75 0a                	jne    c001d736 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d72c:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d736:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d73c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d740:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d743:	01 ca                	add    edx,ecx
c001d745:	83 ec 08             	sub    esp,0x8
c001d748:	89 d0                	mov    eax,edx
c001d74a:	c1 e0 05             	shl    eax,0x5
c001d74d:	01 d0                	add    eax,edx
c001d74f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d753:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d757:	01 d8                	add    eax,ebx
c001d759:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d75f:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d765:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d76b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d771:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d777:	89 cd                	mov    ebp,ecx
c001d779:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d77d:	f7 dd                	neg    ebp
c001d77f:	c1 e5 15             	shl    ebp,0x15
c001d782:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d788:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d78e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d798:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d79e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d7a8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d7b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7b6:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d7bd:	53                   	push   ebx
c001d7be:	68 c4 0c 03 c0       	push   0xc0030cc4
c001d7c3:	e8 a8 af 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7c8:	89 d8                	mov    eax,ebx
c001d7ca:	83 c4 10             	add    esp,0x10
c001d7cd:	83 c4 1c             	add    esp,0x1c
c001d7d0:	5b                   	pop    ebx
c001d7d1:	5e                   	pop    esi
c001d7d2:	5f                   	pop    edi
c001d7d3:	5d                   	pop    ebp
c001d7d4:	c3                   	ret    
c001d7d5:	90                   	nop

c001d7d6 <Process::createUserThread()>:
c001d7d6:	83 ec 0c             	sub    esp,0xc
c001d7d9:	68 80 00 00 00       	push   0x80
c001d7de:	6a 00                	push   0x0
c001d7e0:	68 9a d1 01 c0       	push   0xc001d19a
c001d7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7e9:	e8 e2 fe ff ff       	call   c001d6d0 <Process::createThread(void (*)(void*), void*, int)>
c001d7ee:	83 c4 1c             	add    esp,0x1c
c001d7f1:	c3                   	ret    

c001d7f2 <setupMultitasking(void (*)())>:
c001d7f2:	56                   	push   esi
c001d7f3:	53                   	push   ebx
c001d7f4:	51                   	push   ecx
c001d7f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7f9:	eb 10                	jmp    c001d80b <setupMultitasking(void (*)())+0x19>
c001d7fb:	83 ec 0c             	sub    esp,0xc
c001d7fe:	68 c4 0c 03 c0       	push   0xc0030cc4
c001d803:	e8 ba ae 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d808:	83 c4 10             	add    esp,0x10
c001d80b:	83 ec 0c             	sub    esp,0xc
c001d80e:	68 c4 0c 03 c0       	push   0xc0030cc4
c001d813:	e8 86 ae 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d818:	83 c4 10             	add    esp,0x10
c001d81b:	84 c0                	test   al,al
c001d81d:	74 dc                	je     c001d7fb <setupMultitasking(void (*)())+0x9>
c001d81f:	83 ec 0c             	sub    esp,0xc
c001d822:	68 3f 07 00 00       	push   0x73f
c001d827:	e8 70 1d ff ff       	call   c000f59c <malloc>
c001d82c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d833:	89 c3                	mov    ebx,eax
c001d835:	6a 00                	push   0x0
c001d837:	68 8c b9 02 c0       	push   0xc002b98c
c001d83c:	6a 01                	push   0x1
c001d83e:	50                   	push   eax
c001d83f:	e8 94 fc ff ff       	call   c001d4d8 <Process::Process(bool, char const*, Process*, char**)>
c001d844:	83 c4 14             	add    esp,0x14
c001d847:	89 1d d0 0c 03 c0    	mov    DWORD PTR ds:0xc0030cd0,ebx
c001d84d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d853:	e8 a3 2a ff ff       	call   c00102fb <setActiveTerminal(VgaText*)>
c001d858:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d860:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d86a:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d870:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d873:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d87d:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d883:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d889:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d893:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d89d:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d8a7:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d8ad:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d8b7:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d8bd:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d8c7:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d8cd:	58                   	pop    eax
c001d8ce:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d8d4:	5a                   	pop    edx
c001d8d5:	68 88 b9 02 c0       	push   0xc002b988
c001d8da:	50                   	push   eax
c001d8db:	e8 2c 2f fe ff       	call   c000080c <strcpy>
c001d8e0:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d8e7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d8eb:	83 c4 14             	add    esp,0x14
c001d8ee:	5b                   	pop    ebx
c001d8ef:	5e                   	pop    esi
c001d8f0:	e9 5f 2a fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d8f5 <schedule()>:
c001d8f5:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001d8fa:	85 c0                	test   eax,eax
c001d8fc:	74 0b                	je     c001d909 <schedule()+0x14>
c001d8fe:	c7 05 a0 0c 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x1
c001d908:	c3                   	ret    
c001d909:	53                   	push   ebx
c001d90a:	83 ec 14             	sub    esp,0x14
c001d90d:	68 c4 0c 03 c0       	push   0xc0030cc4
c001d912:	e8 87 ad 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d917:	83 c4 10             	add    esp,0x10
c001d91a:	84 c0                	test   al,al
c001d91c:	75 38                	jne    c001d956 <schedule()+0x61>
c001d91e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d923:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d926:	4a                   	dec    edx
c001d927:	74 32                	je     c001d95b <schedule()+0x66>
c001d929:	83 ec 0c             	sub    esp,0xc
c001d92c:	68 c4 0c 03 c0       	push   0xc0030cc4
c001d931:	e8 84 ad 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d936:	c7 04 24 c4 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cc4
c001d93d:	89 c3                	mov    ebx,eax
c001d93f:	e8 7e ad 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d944:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d94b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d94e:	e8 9d f8 ff ff       	call   c001d1f0 <switchToThread(ThreadControlBlock*)>
c001d953:	83 c4 10             	add    esp,0x10
c001d956:	83 c4 08             	add    esp,0x8
c001d959:	5b                   	pop    ebx
c001d95a:	c3                   	ret    
c001d95b:	83 ec 08             	sub    esp,0x8
c001d95e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d965:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d96b:	68 c4 0c 03 c0       	push   0xc0030cc4
c001d970:	e8 fb ad 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	eb af                	jmp    c001d929 <schedule()+0x34>

c001d97a <Semaphore::tryAcquire()>:
c001d97a:	53                   	push   ebx
c001d97b:	83 ec 08             	sub    esp,0x8
c001d97e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d982:	fa                   	cli    
c001d983:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001d988:	8d 50 01             	lea    edx,[eax+0x1]
c001d98b:	89 15 a8 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca8,edx
c001d991:	8b 15 a4 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030ca4
c001d997:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d99a:	89 1d a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,ebx
c001d9a0:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d9a3:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d9a5:	7c 2a                	jl     c001d9d1 <Semaphore::tryAcquire()+0x57>
c001d9a7:	89 15 a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,edx
c001d9ad:	85 d2                	test   edx,edx
c001d9af:	75 0a                	jne    c001d9bb <Semaphore::tryAcquire()+0x41>
c001d9b1:	8b 15 a0 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030ca0
c001d9b7:	85 d2                	test   edx,edx
c001d9b9:	75 5b                	jne    c001da16 <Semaphore::tryAcquire()+0x9c>
c001d9bb:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001d9c0:	85 c0                	test   eax,eax
c001d9c2:	74 07                	je     c001d9cb <Semaphore::tryAcquire()+0x51>
c001d9c4:	31 c0                	xor    eax,eax
c001d9c6:	83 c4 08             	add    esp,0x8
c001d9c9:	5b                   	pop    ebx
c001d9ca:	c3                   	ret    
c001d9cb:	fb                   	sti    
c001d9cc:	83 c4 08             	add    esp,0x8
c001d9cf:	5b                   	pop    ebx
c001d9d0:	c3                   	ret    
c001d9d1:	43                   	inc    ebx
c001d9d2:	89 15 a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,edx
c001d9d8:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d9db:	85 d2                	test   edx,edx
c001d9dd:	75 1f                	jne    c001d9fe <Semaphore::tryAcquire()+0x84>
c001d9df:	8b 0d a0 0c 03 c0    	mov    ecx,DWORD PTR ds:0xc0030ca0
c001d9e5:	85 c9                	test   ecx,ecx
c001d9e7:	74 15                	je     c001d9fe <Semaphore::tryAcquire()+0x84>
c001d9e9:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001d9f3:	e8 fd fe ff ff       	call   c001d8f5 <schedule()>
c001d9f8:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001d9fd:	48                   	dec    eax
c001d9fe:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001da03:	85 c0                	test   eax,eax
c001da05:	75 08                	jne    c001da0f <Semaphore::tryAcquire()+0x95>
c001da07:	fb                   	sti    
c001da08:	b0 01                	mov    al,0x1
c001da0a:	83 c4 08             	add    esp,0x8
c001da0d:	5b                   	pop    ebx
c001da0e:	c3                   	ret    
c001da0f:	b0 01                	mov    al,0x1
c001da11:	83 c4 08             	add    esp,0x8
c001da14:	5b                   	pop    ebx
c001da15:	c3                   	ret    
c001da16:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001da20:	e8 d0 fe ff ff       	call   c001d8f5 <schedule()>
c001da25:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001da2a:	48                   	dec    eax
c001da2b:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001da30:	85 c0                	test   eax,eax
c001da32:	75 90                	jne    c001d9c4 <Semaphore::tryAcquire()+0x4a>
c001da34:	eb 95                	jmp    c001d9cb <Semaphore::tryAcquire()+0x51>

c001da36 <Semaphore::assertLocked(char const*)>:
c001da36:	83 ec 0c             	sub    esp,0xc
c001da39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da3d:	fa                   	cli    
c001da3e:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001da44:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001da49:	8d 48 01             	lea    ecx,[eax+0x1]
c001da4c:	89 0d a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,ecx
c001da52:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001da54:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001da57:	7c 24                	jl     c001da7d <Semaphore::assertLocked(char const*)+0x47>
c001da59:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001da5e:	85 c0                	test   eax,eax
c001da60:	75 09                	jne    c001da6b <Semaphore::assertLocked(char const*)+0x35>
c001da62:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001da67:	85 c0                	test   eax,eax
c001da69:	75 29                	jne    c001da94 <Semaphore::assertLocked(char const*)+0x5e>
c001da6b:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001da70:	48                   	dec    eax
c001da71:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001da76:	75 01                	jne    c001da79 <Semaphore::assertLocked(char const*)+0x43>
c001da78:	fb                   	sti    
c001da79:	83 c4 0c             	add    esp,0xc
c001da7c:	c3                   	ret    
c001da7d:	83 ec 0c             	sub    esp,0xc
c001da80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001da84:	e8 e0 c2 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001da89:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001da8e:	83 c4 10             	add    esp,0x10
c001da91:	48                   	dec    eax
c001da92:	eb c5                	jmp    c001da59 <Semaphore::assertLocked(char const*)+0x23>
c001da94:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001da9e:	e8 52 fe ff ff       	call   c001d8f5 <schedule()>
c001daa3:	eb c6                	jmp    c001da6b <Semaphore::assertLocked(char const*)+0x35>

c001daa5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001daa5:	83 ec 0c             	sub    esp,0xc
c001daa8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001daad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dab1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dab4:	e8 3c fe ff ff       	call   c001d8f5 <schedule()>
c001dab9:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001dabe:	48                   	dec    eax
c001dabf:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dac4:	75 01                	jne    c001dac7 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dac6:	fb                   	sti    
c001dac7:	83 c4 0c             	add    esp,0xc
c001daca:	c3                   	ret    

c001dacb <blockTask(TaskState)>:
c001dacb:	83 ec 0c             	sub    esp,0xc
c001dace:	fa                   	cli    
c001dacf:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001dad5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dad9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dade:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dae1:	e8 0f fe ff ff       	call   c001d8f5 <schedule()>
c001dae6:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001daeb:	48                   	dec    eax
c001daec:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001daf1:	75 01                	jne    c001daf4 <blockTask(TaskState)+0x29>
c001daf3:	fb                   	sti    
c001daf4:	83 c4 0c             	add    esp,0xc
c001daf7:	c3                   	ret    

c001daf8 <waitTask(int, int*, int)>:
c001daf8:	83 ec 18             	sub    esp,0x18
c001dafb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db04:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001db07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db10:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001db13:	6a 07                	push   0x7
c001db15:	e8 b1 ff ff ff       	call   c001dacb <blockTask(TaskState)>
c001db1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db1f:	83 c4 10             	add    esp,0x10
c001db22:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001db25:	85 d2                	test   edx,edx
c001db27:	74 0a                	je     c001db33 <waitTask(int, int*, int)+0x3b>
c001db29:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001db2c:	89 02                	mov    DWORD PTR [edx],eax
c001db2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db33:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001db36:	83 c4 0c             	add    esp,0xc
c001db39:	c3                   	ret    

c001db3a <nanoSleepUntil(unsigned long long)>:
c001db3a:	83 ec 0c             	sub    esp,0xc
c001db3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db45:	3b 05 f0 dd 02 c0    	cmp    eax,DWORD PTR ds:0xc002ddf0
c001db4b:	89 d1                	mov    ecx,edx
c001db4d:	1b 0d f4 dd 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ddf4
c001db53:	73 04                	jae    c001db59 <nanoSleepUntil(unsigned long long)+0x1f>
c001db55:	83 c4 0c             	add    esp,0xc
c001db58:	c3                   	ret    
c001db59:	fa                   	cli    
c001db5a:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001db60:	83 ec 08             	sub    esp,0x8
c001db63:	ff 05 a4 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca4
c001db69:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db6f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001db72:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001db75:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db7b:	68 b8 0c 03 c0       	push   0xc0030cb8
c001db80:	e8 eb ab 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db85:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001db8c:	e8 3a ff ff ff       	call   c001dacb <blockTask(TaskState)>
c001db91:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001db96:	83 c4 10             	add    esp,0x10
c001db99:	48                   	dec    eax
c001db9a:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001db9f:	85 c0                	test   eax,eax
c001dba1:	75 09                	jne    c001dbac <nanoSleepUntil(unsigned long long)+0x72>
c001dba3:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001dba8:	85 c0                	test   eax,eax
c001dbaa:	75 12                	jne    c001dbbe <nanoSleepUntil(unsigned long long)+0x84>
c001dbac:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001dbb1:	48                   	dec    eax
c001dbb2:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dbb7:	75 9c                	jne    c001db55 <nanoSleepUntil(unsigned long long)+0x1b>
c001dbb9:	fb                   	sti    
c001dbba:	83 c4 0c             	add    esp,0xc
c001dbbd:	c3                   	ret    
c001dbbe:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001dbc8:	e8 28 fd ff ff       	call   c001d8f5 <schedule()>
c001dbcd:	eb dd                	jmp    c001dbac <nanoSleepUntil(unsigned long long)+0x72>

c001dbcf <nanoSleep(unsigned long long)>:
c001dbcf:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c001dbd4:	8b 15 f4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddf4
c001dbda:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dbde:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dbe2:	e9 53 ff ff ff       	jmp    c001db3a <nanoSleepUntil(unsigned long long)>

c001dbe7 <sleep(unsigned long long)>:
c001dbe7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dbef:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dbf4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dbf8:	01 ca                	add    edx,ecx
c001dbfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dbfe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dc02:	eb cb                	jmp    c001dbcf <nanoSleep(unsigned long long)>

c001dc04 <Semaphore::acquire()>:
c001dc04:	83 ec 0c             	sub    esp,0xc
c001dc07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc0b:	fa                   	cli    
c001dc0c:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001dc11:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001dc17:	8d 48 01             	lea    ecx,[eax+0x1]
c001dc1a:	89 0d a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,ecx
c001dc20:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dc23:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dc25:	7d 28                	jge    c001dc4f <Semaphore::acquire()+0x4b>
c001dc27:	41                   	inc    ecx
c001dc28:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dc2b:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001dc30:	85 c0                	test   eax,eax
c001dc32:	75 09                	jne    c001dc3d <Semaphore::acquire()+0x39>
c001dc34:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001dc39:	85 c0                	test   eax,eax
c001dc3b:	75 4e                	jne    c001dc8b <Semaphore::acquire()+0x87>
c001dc3d:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001dc42:	48                   	dec    eax
c001dc43:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dc48:	75 01                	jne    c001dc4b <Semaphore::acquire()+0x47>
c001dc4a:	fb                   	sti    
c001dc4b:	83 c4 0c             	add    esp,0xc
c001dc4e:	c3                   	ret    
c001dc4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc54:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dc5b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dc5e:	85 c9                	test   ecx,ecx
c001dc60:	74 3a                	je     c001dc9c <Semaphore::acquire()+0x98>
c001dc62:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dc65:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc6b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dc6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc73:	83 ec 0c             	sub    esp,0xc
c001dc76:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dc79:	6a 05                	push   0x5
c001dc7b:	e8 4b fe ff ff       	call   c001dacb <blockTask(TaskState)>
c001dc80:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001dc85:	83 c4 10             	add    esp,0x10
c001dc88:	48                   	dec    eax
c001dc89:	eb a0                	jmp    c001dc2b <Semaphore::acquire()+0x27>
c001dc8b:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001dc95:	e8 5b fc ff ff       	call   c001d8f5 <schedule()>
c001dc9a:	eb a1                	jmp    c001dc3d <Semaphore::acquire()+0x39>
c001dc9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dca4:	eb c8                	jmp    c001dc6e <Semaphore::acquire()+0x6a>

c001dca6 <taskReturned>:
c001dca6:	83 ec 18             	sub    esp,0x18
c001dca9:	68 08 ba 02 c0       	push   0xc002ba08
c001dcae:	e8 b6 c0 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001dcb3:	83 c4 10             	add    esp,0x10
c001dcb6:	83 ec 0c             	sub    esp,0xc
c001dcb9:	6a 02                	push   0x2
c001dcbb:	e8 0b fe ff ff       	call   c001dacb <blockTask(TaskState)>
c001dcc0:	fa                   	cli    
c001dcc1:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001dcc7:	e8 29 fc ff ff       	call   c001d8f5 <schedule()>
c001dccc:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001dcd1:	83 c4 10             	add    esp,0x10
c001dcd4:	48                   	dec    eax
c001dcd5:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dcda:	85 c0                	test   eax,eax
c001dcdc:	75 d8                	jne    c001dcb6 <taskReturned+0x10>
c001dcde:	fb                   	sti    
c001dcdf:	eb d5                	jmp    c001dcb6 <taskReturned+0x10>

c001dce1 <Thr::processFromPID(int)>:
c001dce1:	57                   	push   edi
c001dce2:	56                   	push   esi
c001dce3:	53                   	push   ebx
c001dce4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dce8:	fa                   	cli    
c001dce9:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001dcef:	83 ec 0c             	sub    esp,0xc
c001dcf2:	68 c4 0c 03 c0       	push   0xc0030cc4
c001dcf7:	e8 be a9 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	89 c7                	mov    edi,eax
c001dd01:	eb 14                	jmp    c001dd17 <Thr::processFromPID(int)+0x36>
c001dd03:	83 ec 0c             	sub    esp,0xc
c001dd06:	68 c4 0c 03 c0       	push   0xc0030cc4
c001dd0b:	e8 aa a9 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd10:	83 c4 10             	add    esp,0x10
c001dd13:	39 f8                	cmp    eax,edi
c001dd15:	74 49                	je     c001dd60 <Thr::processFromPID(int)+0x7f>
c001dd17:	83 ec 0c             	sub    esp,0xc
c001dd1a:	68 c4 0c 03 c0       	push   0xc0030cc4
c001dd1f:	e8 96 a9 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd24:	c7 04 24 c4 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cc4
c001dd2b:	89 c3                	mov    ebx,eax
c001dd2d:	e8 90 a9 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dd32:	58                   	pop    eax
c001dd33:	5a                   	pop    edx
c001dd34:	53                   	push   ebx
c001dd35:	68 c4 0c 03 c0       	push   0xc0030cc4
c001dd3a:	e8 31 aa 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd3f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd42:	83 c4 10             	add    esp,0x10
c001dd45:	39 30                	cmp    DWORD PTR [eax],esi
c001dd47:	75 ba                	jne    c001dd03 <Thr::processFromPID(int)+0x22>
c001dd49:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001dd4e:	48                   	dec    eax
c001dd4f:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dd54:	74 07                	je     c001dd5d <Thr::processFromPID(int)+0x7c>
c001dd56:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd59:	5b                   	pop    ebx
c001dd5a:	5e                   	pop    esi
c001dd5b:	5f                   	pop    edi
c001dd5c:	c3                   	ret    
c001dd5d:	fb                   	sti    
c001dd5e:	eb f6                	jmp    c001dd56 <Thr::processFromPID(int)+0x75>
c001dd60:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001dd65:	48                   	dec    eax
c001dd66:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dd6b:	75 05                	jne    c001dd72 <Thr::processFromPID(int)+0x91>
c001dd6d:	fb                   	sti    
c001dd6e:	5b                   	pop    ebx
c001dd6f:	5e                   	pop    esi
c001dd70:	5f                   	pop    edi
c001dd71:	c3                   	ret    
c001dd72:	5b                   	pop    ebx
c001dd73:	31 c0                	xor    eax,eax
c001dd75:	5e                   	pop    esi
c001dd76:	5f                   	pop    edi
c001dd77:	c3                   	ret    

c001dd78 <unblockTask(ThreadControlBlock*)>:
c001dd78:	53                   	push   ebx
c001dd79:	83 ec 08             	sub    esp,0x8
c001dd7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd80:	fa                   	cli    
c001dd81:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001dd87:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd8a:	85 c0                	test   eax,eax
c001dd8c:	74 5a                	je     c001dde8 <unblockTask(ThreadControlBlock*)+0x70>
c001dd8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dd91:	48                   	dec    eax
c001dd92:	74 31                	je     c001ddc5 <unblockTask(ThreadControlBlock*)+0x4d>
c001dd94:	83 ec 0c             	sub    esp,0xc
c001dd97:	68 c4 0c 03 c0       	push   0xc0030cc4
c001dd9c:	e8 19 a9 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dda1:	83 c4 10             	add    esp,0x10
c001dda4:	85 c0                	test   eax,eax
c001dda6:	75 17                	jne    c001ddbf <unblockTask(ThreadControlBlock*)+0x47>
c001dda8:	eb 50                	jmp    c001ddfa <unblockTask(ThreadControlBlock*)+0x82>
c001ddaa:	83 ec 08             	sub    esp,0x8
c001ddad:	50                   	push   eax
c001ddae:	68 c4 0c 03 c0       	push   0xc0030cc4
c001ddb3:	e8 8a ac 00 00       	call   c0028a42 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ddb8:	83 c4 10             	add    esp,0x10
c001ddbb:	85 c0                	test   eax,eax
c001ddbd:	74 3b                	je     c001ddfa <unblockTask(ThreadControlBlock*)+0x82>
c001ddbf:	39 c3                	cmp    ebx,eax
c001ddc1:	75 e7                	jne    c001ddaa <unblockTask(ThreadControlBlock*)+0x32>
c001ddc3:	eb 10                	jmp    c001ddd5 <unblockTask(ThreadControlBlock*)+0x5d>
c001ddc5:	83 ec 0c             	sub    esp,0xc
c001ddc8:	68 aa b9 02 c0       	push   0xc002b9aa
c001ddcd:	e8 2b 48 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001ddd2:	83 c4 10             	add    esp,0x10
c001ddd5:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001ddda:	48                   	dec    eax
c001dddb:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001dde0:	75 01                	jne    c001dde3 <unblockTask(ThreadControlBlock*)+0x6b>
c001dde2:	fb                   	sti    
c001dde3:	83 c4 08             	add    esp,0x8
c001dde6:	5b                   	pop    ebx
c001dde7:	c3                   	ret    
c001dde8:	83 ec 0c             	sub    esp,0xc
c001ddeb:	68 93 b9 02 c0       	push   0xc002b993
c001ddf0:	e8 08 48 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	eb db                	jmp    c001ddd5 <unblockTask(ThreadControlBlock*)+0x5d>
c001ddfa:	83 ec 08             	sub    esp,0x8
c001ddfd:	53                   	push   ebx
c001ddfe:	68 c4 0c 03 c0       	push   0xc0030cc4
c001de03:	e8 68 a9 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de08:	83 c4 10             	add    esp,0x10
c001de0b:	eb c8                	jmp    c001ddd5 <unblockTask(ThreadControlBlock*)+0x5d>

c001de0d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001de0d:	55                   	push   ebp
c001de0e:	57                   	push   edi
c001de0f:	56                   	push   esi
c001de10:	53                   	push   ebx
c001de11:	83 ec 1c             	sub    esp,0x1c
c001de14:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de18:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de1b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001de21:	85 ff                	test   edi,edi
c001de23:	7e 20                	jle    c001de45 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001de25:	31 f6                	xor    esi,esi
c001de27:	83 ec 0c             	sub    esp,0xc
c001de2a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001de31:	46                   	inc    esi
c001de32:	e8 75 17 ff ff       	call   c000f5ac <free>
c001de37:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de3a:	83 c4 10             	add    esp,0x10
c001de3d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001de43:	7f e2                	jg     c001de27 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001de45:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001de4f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001de54:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001de57:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001de5a:	d3 c0                	rol    eax,cl
c001de5c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001de63:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de66:	89 f7                	mov    edi,esi
c001de68:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001de70:	0f 85 64 01 00 00    	jne    c001dfda <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001de76:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001de7c:	85 ed                	test   ebp,ebp
c001de7e:	74 1b                	je     c001de9b <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	55                   	push   ebp
c001de84:	e8 85 bc ff ff       	call   c0019b0e <EnvVarContainer::~EnvVarContainer()>
c001de89:	59                   	pop    ecx
c001de8a:	5e                   	pop    esi
c001de8b:	6a 0c                	push   0xc
c001de8d:	55                   	push   ebp
c001de8e:	e8 92 46 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c001de93:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	89 f7                	mov    edi,esi
c001de9b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dea1:	85 c0                	test   eax,eax
c001dea3:	0f 84 aa 00 00 00    	je     c001df53 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dea9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001deac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001deb0:	31 c9                	xor    ecx,ecx
c001deb2:	eb 10                	jmp    c001dec4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001deb4:	41                   	inc    ecx
c001deb5:	83 f9 10             	cmp    ecx,0x10
c001deb8:	0f 84 95 00 00 00    	je     c001df53 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001debe:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dec4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001decb:	d3 fa                	sar    edx,cl
c001decd:	83 e2 01             	and    edx,0x1
c001ded0:	74 e2                	je     c001deb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ded2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ded5:	01 ca                	add    edx,ecx
c001ded7:	89 d5                	mov    ebp,edx
c001ded9:	c1 e5 05             	shl    ebp,0x5
c001dedc:	01 ea                	add    edx,ebp
c001dede:	01 d0                	add    eax,edx
c001dee0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001dee6:	83 fd 07             	cmp    ebp,0x7
c001dee9:	75 c9                	jne    c001deb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001deeb:	05 40 02 00 00       	add    eax,0x240
c001def0:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001def3:	83 fd ff             	cmp    ebp,0xffffffff
c001def6:	0f 8c e6 00 00 00    	jl     c001dfe2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001defc:	0f 84 97 01 00 00    	je     c001e099 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001df02:	85 ed                	test   ebp,ebp
c001df04:	0f 84 7e 01 00 00    	je     c001e088 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001df0a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001df0c:	75 a6                	jne    c001deb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df0e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df18:	01 d0                	add    eax,edx
c001df1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001df1e:	83 ec 0c             	sub    esp,0xc
c001df21:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001df27:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df2a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df30:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001df37:	50                   	push   eax
c001df38:	e8 3b fe ff ff       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c001df3d:	83 c4 10             	add    esp,0x10
c001df40:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df47:	89 f7                	mov    edi,esi
c001df49:	41                   	inc    ecx
c001df4a:	83 f9 10             	cmp    ecx,0x10
c001df4d:	0f 85 6b ff ff ff    	jne    c001debe <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001df53:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001df59:	85 c0                	test   eax,eax
c001df5b:	74 5d                	je     c001dfba <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df5d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001df63:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001df69:	74 4f                	je     c001dfba <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001df6b:	83 ec 0c             	sub    esp,0xc
c001df6e:	68 c4 0c 03 c0       	push   0xc0030cc4
c001df73:	e8 42 a7 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df78:	c7 04 24 c4 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cc4
c001df7f:	89 c7                	mov    edi,eax
c001df81:	e8 18 a7 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df86:	83 c4 10             	add    esp,0x10
c001df89:	84 c0                	test   al,al
c001df8b:	0f 84 c2 00 00 00    	je     c001e053 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001df91:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df94:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df9a:	85 d2                	test   edx,edx
c001df9c:	74 0f                	je     c001dfad <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df9e:	83 ec 0c             	sub    esp,0xc
c001dfa1:	8b 02                	mov    eax,DWORD PTR [edx]
c001dfa3:	52                   	push   edx
c001dfa4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dfa7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfaa:	83 c4 10             	add    esp,0x10
c001dfad:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dfb7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001dfba:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001dfc0:	85 db                	test   ebx,ebx
c001dfc2:	74 16                	je     c001dfda <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dfc4:	83 ec 0c             	sub    esp,0xc
c001dfc7:	53                   	push   ebx
c001dfc8:	e8 39 38 ff ff       	call   c0011806 <VAS::~VAS()>
c001dfcd:	58                   	pop    eax
c001dfce:	5a                   	pop    edx
c001dfcf:	6a 14                	push   0x14
c001dfd1:	53                   	push   ebx
c001dfd2:	e8 4e 45 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c001dfd7:	83 c4 10             	add    esp,0x10
c001dfda:	83 c4 1c             	add    esp,0x1c
c001dfdd:	5b                   	pop    ebx
c001dfde:	5e                   	pop    esi
c001dfdf:	5f                   	pop    edi
c001dfe0:	5d                   	pop    ebp
c001dfe1:	c3                   	ret    
c001dfe2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfe6:	83 ec 0c             	sub    esp,0xc
c001dfe9:	68 3c ba 02 c0       	push   0xc002ba3c
c001dfee:	e8 76 bd ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001dff3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dff6:	83 c4 10             	add    esp,0x10
c001dff9:	89 f7                	mov    edi,esi
c001dffb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfff:	e9 b0 fe ff ff       	jmp    c001deb4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e004:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e00a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e010:	75 1c                	jne    c001e02e <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e012:	83 ec 0c             	sub    esp,0xc
c001e015:	68 a4 ba 02 c0       	push   0xc002baa4
c001e01a:	e8 de 45 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001e01f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e026:	e8 a0 fa ff ff       	call   c001dacb <blockTask(TaskState)>
c001e02b:	83 c4 10             	add    esp,0x10
c001e02e:	83 ec 08             	sub    esp,0x8
c001e031:	56                   	push   esi
c001e032:	68 c4 0c 03 c0       	push   0xc0030cc4
c001e037:	e8 34 a7 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e03c:	c7 04 24 c4 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cc4
c001e043:	e8 72 a6 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e048:	83 c4 10             	add    esp,0x10
c001e04b:	39 f8                	cmp    eax,edi
c001e04d:	0f 84 3e ff ff ff    	je     c001df91 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	68 c4 0c 03 c0       	push   0xc0030cc4
c001e05b:	e8 5a a6 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e060:	c7 04 24 c4 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cc4
c001e067:	89 c6                	mov    esi,eax
c001e069:	e8 54 a6 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	39 f3                	cmp    ebx,esi
c001e073:	74 b9                	je     c001e02e <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e075:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e078:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e07b:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e081:	75 ab                	jne    c001e02e <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e083:	e9 7c ff ff ff       	jmp    c001e004 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e088:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	68 70 ba 02 c0       	push   0xc002ba70
c001e094:	e9 55 ff ff ff       	jmp    c001dfee <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e099:	8b 36                	mov    esi,DWORD PTR [esi]
c001e09b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e09f:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e0a2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0a5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e0ab:	01 d7                	add    edi,edx
c001e0ad:	89 f8                	mov    eax,edi
c001e0af:	e9 66 fe ff ff       	jmp    c001df1a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e0b4 <cleanerTaskFunction(void*)>:
c001e0b4:	53                   	push   ebx
c001e0b5:	83 ec 08             	sub    esp,0x8
c001e0b8:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e0bd:	48                   	dec    eax
c001e0be:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e0c3:	75 01                	jne    c001e0c6 <cleanerTaskFunction(void*)+0x12>
c001e0c5:	fb                   	sti    
c001e0c6:	fa                   	cli    
c001e0c7:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e0cc:	80 3d 8c 0c 03 c0 00 	cmp    BYTE PTR ds:0xc0030c8c,0x0
c001e0d3:	8d 50 01             	lea    edx,[eax+0x1]
c001e0d6:	89 15 a8 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca8,edx
c001e0dc:	0f 84 a1 00 00 00    	je     c001e183 <cleanerTaskFunction(void*)+0xcf>
c001e0e2:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e0e7:	85 c0                	test   eax,eax
c001e0e9:	75 01                	jne    c001e0ec <cleanerTaskFunction(void*)+0x38>
c001e0eb:	fb                   	sti    
c001e0ec:	c6 05 8c 0c 03 c0 00 	mov    BYTE PTR ds:0xc0030c8c,0x0
c001e0f3:	fa                   	cli    
c001e0f4:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e0fa:	ff 05 a4 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca4
c001e100:	fa                   	cli    
c001e101:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e107:	eb 26                	jmp    c001e12f <cleanerTaskFunction(void*)+0x7b>
c001e109:	83 ec 0c             	sub    esp,0xc
c001e10c:	68 ac 0c 03 c0       	push   0xc0030cac
c001e111:	e8 a4 a5 00 00       	call   c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e116:	c7 04 24 ac 0c 03 c0 	mov    DWORD PTR [esp],0xc0030cac
c001e11d:	89 c3                	mov    ebx,eax
c001e11f:	e8 9e a5 00 00       	call   c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e124:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e127:	e8 e1 fc ff ff       	call   c001de0d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e12c:	83 c4 10             	add    esp,0x10
c001e12f:	83 ec 0c             	sub    esp,0xc
c001e132:	68 ac 0c 03 c0       	push   0xc0030cac
c001e137:	e8 62 a5 00 00       	call   c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e13c:	83 c4 10             	add    esp,0x10
c001e13f:	84 c0                	test   al,al
c001e141:	74 c6                	je     c001e109 <cleanerTaskFunction(void*)+0x55>
c001e143:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e148:	48                   	dec    eax
c001e149:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e14e:	75 01                	jne    c001e151 <cleanerTaskFunction(void*)+0x9d>
c001e150:	fb                   	sti    
c001e151:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001e156:	48                   	dec    eax
c001e157:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001e15c:	0f 85 56 ff ff ff    	jne    c001e0b8 <cleanerTaskFunction(void*)+0x4>
c001e162:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001e167:	85 c0                	test   eax,eax
c001e169:	0f 84 49 ff ff ff    	je     c001e0b8 <cleanerTaskFunction(void*)+0x4>
c001e16f:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001e179:	e8 77 f7 ff ff       	call   c001d8f5 <schedule()>
c001e17e:	e9 35 ff ff ff       	jmp    c001e0b8 <cleanerTaskFunction(void*)+0x4>
c001e183:	83 ec 0c             	sub    esp,0xc
c001e186:	6a 02                	push   0x2
c001e188:	e8 18 f9 ff ff       	call   c001daa5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	e9 57 ff ff ff       	jmp    c001e0ec <cleanerTaskFunction(void*)+0x38>

c001e195 <terminateTask(int)>:
c001e195:	83 ec 14             	sub    esp,0x14
c001e198:	fa                   	cli    
c001e199:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e19f:	ff 05 a4 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca4
c001e1a5:	fa                   	cli    
c001e1a6:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e1ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1b5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e1b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1bd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e1c0:	50                   	push   eax
c001e1c1:	68 ac 0c 03 c0       	push   0xc0030cac
c001e1c6:	e8 a5 a5 00 00       	call   c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1d0:	83 c4 10             	add    esp,0x10
c001e1d3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e1da:	a1 88 0c 03 c0       	mov    eax,ds:0xc0030c88
c001e1df:	85 c0                	test   eax,eax
c001e1e1:	74 53                	je     c001e236 <terminateTask(int)+0xa1>
c001e1e3:	83 ec 0c             	sub    esp,0xc
c001e1e6:	c6 05 8c 0c 03 c0 01 	mov    BYTE PTR ds:0xc0030c8c,0x1
c001e1ed:	50                   	push   eax
c001e1ee:	e8 85 fb ff ff       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c001e1f3:	83 c4 10             	add    esp,0x10
c001e1f6:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e1fb:	48                   	dec    eax
c001e1fc:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e201:	75 01                	jne    c001e204 <terminateTask(int)+0x6f>
c001e203:	fb                   	sti    
c001e204:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001e209:	48                   	dec    eax
c001e20a:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001e20f:	75 09                	jne    c001e21a <terminateTask(int)+0x85>
c001e211:	83 3d a0 0c 03 c0 00 	cmp    DWORD PTR ds:0xc0030ca0,0x0
c001e218:	75 2e                	jne    c001e248 <terminateTask(int)+0xb3>
c001e21a:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e21f:	48                   	dec    eax
c001e220:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e225:	75 01                	jne    c001e228 <terminateTask(int)+0x93>
c001e227:	fb                   	sti    
c001e228:	fa                   	cli    
c001e229:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e22f:	e8 c1 f6 ff ff       	call   c001d8f5 <schedule()>
c001e234:	eb e4                	jmp    c001e21a <terminateTask(int)+0x85>
c001e236:	83 ec 0c             	sub    esp,0xc
c001e239:	68 c1 b9 02 c0       	push   0xc002b9c1
c001e23e:	e8 ba 43 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	eb ae                	jmp    c001e1f6 <terminateTask(int)+0x61>
c001e248:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001e252:	eb db                	jmp    c001e22f <terminateTask(int)+0x9a>

c001e254 <Thr::terminateFromIRQ(int)>:
c001e254:	83 ec 18             	sub    esp,0x18
c001e257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e25b:	e8 35 ff ff ff       	call   c001e195 <terminateTask(int)>

c001e260 <Semaphore::release()>:
c001e260:	83 ec 0c             	sub    esp,0xc
c001e263:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e267:	fa                   	cli    
c001e268:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001e26d:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e273:	8d 48 01             	lea    ecx,[eax+0x1]
c001e276:	89 0d a4 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca4,ecx
c001e27c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e27f:	85 c9                	test   ecx,ecx
c001e281:	74 3c                	je     c001e2bf <Semaphore::release()+0x5f>
c001e283:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e286:	83 ec 0c             	sub    esp,0xc
c001e289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e28c:	51                   	push   ecx
c001e28d:	e8 e6 fa ff ff       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c001e292:	a1 a4 0c 03 c0       	mov    eax,ds:0xc0030ca4
c001e297:	83 c4 10             	add    esp,0x10
c001e29a:	48                   	dec    eax
c001e29b:	a3 a4 0c 03 c0       	mov    ds:0xc0030ca4,eax
c001e2a0:	85 c0                	test   eax,eax
c001e2a2:	75 09                	jne    c001e2ad <Semaphore::release()+0x4d>
c001e2a4:	a1 a0 0c 03 c0       	mov    eax,ds:0xc0030ca0
c001e2a9:	85 c0                	test   eax,eax
c001e2ab:	75 17                	jne    c001e2c4 <Semaphore::release()+0x64>
c001e2ad:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e2b2:	48                   	dec    eax
c001e2b3:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e2b8:	75 01                	jne    c001e2bb <Semaphore::release()+0x5b>
c001e2ba:	fb                   	sti    
c001e2bb:	83 c4 0c             	add    esp,0xc
c001e2be:	c3                   	ret    
c001e2bf:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e2c2:	eb d7                	jmp    c001e29b <Semaphore::release()+0x3b>
c001e2c4:	c7 05 a0 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030ca0,0x0
c001e2ce:	e8 22 f6 ff ff       	call   c001d8f5 <schedule()>
c001e2d3:	eb d8                	jmp    c001e2ad <Semaphore::release()+0x4d>

c001e2d5 <__static_initialization_and_destruction_0(int, int)>:
c001e2d5:	83 ec 0c             	sub    esp,0xc
c001e2d8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e2dd:	0f 85 88 00 00 00    	jne    c001e36b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2e3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e2eb:	75 7e                	jne    c001e36b <__static_initialization_and_destruction_0(int, int)+0x96>
c001e2ed:	83 ec 0c             	sub    esp,0xc
c001e2f0:	68 c4 0c 03 c0       	push   0xc0030cc4
c001e2f5:	e8 06 a7 00 00       	call   c0028a00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	83 ec 04             	sub    esp,0x4
c001e300:	68 58 c5 02 c0       	push   0xc002c558
c001e305:	68 c4 0c 03 c0       	push   0xc0030cc4
c001e30a:	68 b4 89 02 c0       	push   0xc00289b4
c001e30f:	e8 8b 41 ff ff       	call   c001249f <__cxa_atexit>
c001e314:	83 c4 10             	add    esp,0x10
c001e317:	83 ec 0c             	sub    esp,0xc
c001e31a:	68 b8 0c 03 c0       	push   0xc0030cb8
c001e31f:	e8 dc a6 00 00       	call   c0028a00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e324:	83 c4 10             	add    esp,0x10
c001e327:	83 ec 04             	sub    esp,0x4
c001e32a:	68 58 c5 02 c0       	push   0xc002c558
c001e32f:	68 b8 0c 03 c0       	push   0xc0030cb8
c001e334:	68 b4 89 02 c0       	push   0xc00289b4
c001e339:	e8 61 41 ff ff       	call   c001249f <__cxa_atexit>
c001e33e:	83 c4 10             	add    esp,0x10
c001e341:	83 ec 0c             	sub    esp,0xc
c001e344:	68 ac 0c 03 c0       	push   0xc0030cac
c001e349:	e8 b2 a6 00 00       	call   c0028a00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e34e:	83 c4 10             	add    esp,0x10
c001e351:	83 ec 04             	sub    esp,0x4
c001e354:	68 58 c5 02 c0       	push   0xc002c558
c001e359:	68 ac 0c 03 c0       	push   0xc0030cac
c001e35e:	68 b4 89 02 c0       	push   0xc00289b4
c001e363:	e8 37 41 ff ff       	call   c001249f <__cxa_atexit>
c001e368:	83 c4 10             	add    esp,0x10
c001e36b:	90                   	nop
c001e36c:	83 c4 0c             	add    esp,0xc
c001e36f:	c3                   	ret    

c001e370 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e370:	83 ec 0c             	sub    esp,0xc
c001e373:	83 ec 08             	sub    esp,0x8
c001e376:	68 ff ff 00 00       	push   0xffff
c001e37b:	6a 01                	push   0x1
c001e37d:	e8 53 ff ff ff       	call   c001e2d5 <__static_initialization_and_destruction_0(int, int)>
c001e382:	83 c4 10             	add    esp,0x10
c001e385:	83 c4 0c             	add    esp,0xc
c001e388:	c3                   	ret    

c001e389 <Vm::inbv(unsigned short)>:
c001e389:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e38d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e392:	75 06                	jne    c001e39a <Vm::inbv(unsigned short)+0x11>
c001e394:	a0 0c 0d 03 c0       	mov    al,ds:0xc0030d0c
c001e399:	c3                   	ret    
c001e39a:	ec                   	in     al,dx
c001e39b:	c3                   	ret    

c001e39c <Vm::outbv(unsigned short, unsigned char)>:
c001e39c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e3a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3a4:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e3a9:	75 25                	jne    c001e3d0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e3ab:	8b 0d 0c 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d0c
c001e3b1:	8d 51 01             	lea    edx,[ecx+0x1]
c001e3b4:	88 81 20 0d 03 c0    	mov    BYTE PTR [ecx-0x3ffcf2e0],al
c001e3ba:	89 15 0c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d0c,edx
c001e3c0:	83 fa 20             	cmp    edx,0x20
c001e3c3:	75 0c                	jne    c001e3d1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e3c5:	c7 05 0c 0d 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030d0c,0x1f
c001e3cf:	c3                   	ret    
c001e3d0:	ee                   	out    dx,al
c001e3d1:	c3                   	ret    

c001e3d2 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e3d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e3d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e3dc:	c1 e0 04             	shl    eax,0x4
c001e3df:	01 d0                	add    eax,edx
c001e3e1:	c3                   	ret    

c001e3e2 <Vm::getSegment(unsigned int)>:
c001e3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3e6:	c1 e8 10             	shr    eax,0x10
c001e3e9:	c3                   	ret    

c001e3ea <Vm::getOffset(unsigned int)>:
c001e3ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ee:	c3                   	ret    

c001e3ef <Vm::mainloop2()>:
c001e3ef:	83 ec 18             	sub    esp,0x18
c001e3f2:	fa                   	cli    
c001e3f3:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e3f9:	6a 02                	push   0x2
c001e3fb:	c6 05 05 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d05,0x1
c001e402:	e8 9e f6 ff ff       	call   c001daa5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e40c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e410:	52                   	push   edx
c001e411:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e415:	52                   	push   edx
c001e416:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e41a:	52                   	push   edx
c001e41b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e41f:	50                   	push   eax
c001e420:	e8 d5 1e fe ff       	call   c00002fa <goToVM86>
c001e425:	83 c4 2c             	add    esp,0x2c
c001e428:	c3                   	ret    

c001e429 <Vm::mainVm8086Loop(void*)>:
c001e429:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e42e:	48                   	dec    eax
c001e42f:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e434:	75 01                	jne    c001e437 <Vm::mainVm8086Loop(void*)+0xe>
c001e436:	fb                   	sti    
c001e437:	eb b6                	jmp    c001e3ef <Vm::mainloop2()>

c001e439 <Vm::mainloop3(unsigned long)>:
c001e439:	83 ec 18             	sub    esp,0x18
c001e43c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e440:	fa                   	cli    
c001e441:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e447:	6a 02                	push   0x2
c001e449:	c6 05 04 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d04,0x1
c001e450:	a3 00 0d 03 c0       	mov    ds:0xc0030d00,eax
c001e455:	e8 4b f6 ff ff       	call   c001daa5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e45a:	83 c4 1c             	add    esp,0x1c
c001e45d:	eb 90                	jmp    c001e3ef <Vm::mainloop2()>

c001e45f <Vm::initialise8086()>:
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	68 80 00 00 00       	push   0x80
c001e467:	6a 00                	push   0x0
c001e469:	68 29 e4 01 c0       	push   0xc001e429
c001e46e:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c001e474:	e8 57 f2 ff ff       	call   c001d6d0 <Process::createThread(void (*)(void*), void*, int)>
c001e479:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e480:	a3 08 0d 03 c0       	mov    ds:0xc0030d08,eax
c001e485:	68 00 01 00 00       	push   0x100
c001e48a:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c001e48f:	6a 00                	push   0x0
c001e491:	6a 00                	push   0x0
c001e493:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e499:	e8 fc 37 ff ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e49e:	83 c4 2c             	add    esp,0x2c
c001e4a1:	c3                   	ret    

c001e4a2 <Vm::finish8086()>:
c001e4a2:	53                   	push   ebx
c001e4a3:	83 ec 08             	sub    esp,0x8
c001e4a6:	fa                   	cli    
c001e4a7:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e4ad:	80 3d 04 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030d04,0x0
c001e4b4:	75 15                	jne    c001e4cb <Vm::finish8086()+0x29>
c001e4b6:	e8 3a f4 ff ff       	call   c001d8f5 <schedule()>
c001e4bb:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e4c0:	48                   	dec    eax
c001e4c1:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e4c6:	75 de                	jne    c001e4a6 <Vm::finish8086()+0x4>
c001e4c8:	fb                   	sti    
c001e4c9:	eb db                	jmp    c001e4a6 <Vm::finish8086()+0x4>
c001e4cb:	83 ec 0c             	sub    esp,0xc
c001e4ce:	8b 1d 00 0d 03 c0    	mov    ebx,DWORD PTR ds:0xc0030d00
c001e4d4:	ff 35 08 0d 03 c0    	push   DWORD PTR ds:0xc0030d08
c001e4da:	c6 05 04 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d04,0x0
c001e4e1:	e8 92 f8 ff ff       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c001e4e6:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e4eb:	83 c4 10             	add    esp,0x10
c001e4ee:	8d 50 ff             	lea    edx,[eax-0x1]
c001e4f1:	89 15 a8 0c 03 c0    	mov    DWORD PTR ds:0xc0030ca8,edx
c001e4f7:	85 d2                	test   edx,edx
c001e4f9:	75 01                	jne    c001e4fc <Vm::finish8086()+0x5a>
c001e4fb:	fb                   	sti    
c001e4fc:	89 d8                	mov    eax,ebx
c001e4fe:	83 c4 08             	add    esp,0x8
c001e501:	5b                   	pop    ebx
c001e502:	c3                   	ret    

c001e503 <Vm::getOutput8086(unsigned char*)>:
c001e503:	57                   	push   edi
c001e504:	8b 0d 0c 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d0c
c001e50a:	56                   	push   esi
c001e50b:	be 20 0d 03 c0       	mov    esi,0xc0030d20
c001e510:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e514:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e516:	a1 0c 0d 03 c0       	mov    eax,ds:0xc0030d0c
c001e51b:	5e                   	pop    esi
c001e51c:	c7 05 0c 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d0c,0x0
c001e526:	5f                   	pop    edi
c001e527:	c3                   	ret    

c001e528 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e528:	55                   	push   ebp
c001e529:	57                   	push   edi
c001e52a:	56                   	push   esi
c001e52b:	53                   	push   ebx
c001e52c:	83 ec 2c             	sub    esp,0x2c
c001e52f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e533:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e537:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e53b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e53f:	fa                   	cli    
c001e540:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c001e546:	0f b6 35 05 0d 03 c0 	movzx  esi,BYTE PTR ds:0xc0030d05
c001e54d:	89 f0                	mov    eax,esi
c001e54f:	84 c0                	test   al,al
c001e551:	75 1d                	jne    c001e570 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e553:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e557:	e8 99 f3 ff ff       	call   c001d8f5 <schedule()>
c001e55c:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e561:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e565:	48                   	dec    eax
c001e566:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e56b:	75 d2                	jne    c001e53f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e56d:	fb                   	sti    
c001e56e:	eb cf                	jmp    c001e53f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e570:	a1 08 0d 03 c0       	mov    eax,ds:0xc0030d08
c001e575:	c7 05 0c 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d0c,0x0
c001e57f:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e583:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e587:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e58b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e58f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e593:	50                   	push   eax
c001e594:	6a 20                	push   0x20
c001e596:	6a 00                	push   0x0
c001e598:	68 20 0d 03 c0       	push   0xc0030d20
c001e59d:	e8 ae 21 fe ff       	call   c0000750 <memset>
c001e5a2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e5a9:	e8 ee 0f ff ff       	call   c000f59c <malloc>
c001e5ae:	83 c4 0c             	add    esp,0xc
c001e5b1:	89 c3                	mov    ebx,eax
c001e5b3:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c001e5b9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e5bd:	50                   	push   eax
c001e5be:	e8 99 45 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c001e5c3:	83 c4 10             	add    esp,0x10
c001e5c6:	85 db                	test   ebx,ebx
c001e5c8:	75 0a                	jne    c001e5d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e5ca:	83 ec 0c             	sub    esp,0xc
c001e5cd:	68 cc ba 02 c0       	push   0xc002bacc
c001e5d2:	eb 3e                	jmp    c001e612 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5d4:	50                   	push   eax
c001e5d5:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e5d9:	50                   	push   eax
c001e5da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e5de:	50                   	push   eax
c001e5df:	53                   	push   ebx
c001e5e0:	e8 87 48 ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c001e5e5:	83 c4 10             	add    esp,0x10
c001e5e8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e5ed:	74 0a                	je     c001e5f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e5ef:	83 ec 0c             	sub    esp,0xc
c001e5f2:	68 e0 ba 02 c0       	push   0xc002bae0
c001e5f7:	eb 19                	jmp    c001e612 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e5f9:	51                   	push   ecx
c001e5fa:	51                   	push   ecx
c001e5fb:	6a 01                	push   0x1
c001e5fd:	53                   	push   ebx
c001e5fe:	e8 bd 45 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c001e603:	83 c4 10             	add    esp,0x10
c001e606:	85 c0                	test   eax,eax
c001e608:	74 24                	je     c001e62e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	68 f9 ba 02 c0       	push   0xc002baf9
c001e612:	e8 52 b7 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001e617:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e61c:	83 c4 10             	add    esp,0x10
c001e61f:	48                   	dec    eax
c001e620:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e625:	85 c0                	test   eax,eax
c001e627:	75 01                	jne    c001e62a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e629:	fb                   	sti    
c001e62a:	31 f6                	xor    esi,esi
c001e62c:	eb 58                	jmp    c001e686 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e62e:	0f b7 ed             	movzx  ebp,bp
c001e631:	50                   	push   eax
c001e632:	0f b7 ff             	movzx  edi,di
c001e635:	50                   	push   eax
c001e636:	55                   	push   ebp
c001e637:	57                   	push   edi
c001e638:	e8 95 fd ff ff       	call   c001e3d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e63d:	5a                   	pop    edx
c001e63e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e640:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e644:	51                   	push   ecx
c001e645:	50                   	push   eax
c001e646:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e64a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e64e:	53                   	push   ebx
c001e64f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e652:	83 c4 14             	add    esp,0x14
c001e655:	53                   	push   ebx
c001e656:	e8 c3 45 ff ff       	call   c0012c1e <File::close()>
c001e65b:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	48                   	dec    eax
c001e664:	c6 05 05 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d05,0x0
c001e66b:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c001e670:	85 c0                	test   eax,eax
c001e672:	75 01                	jne    c001e675 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e674:	fb                   	sti    
c001e675:	83 ec 0c             	sub    esp,0xc
c001e678:	ff 35 08 0d 03 c0    	push   DWORD PTR ds:0xc0030d08
c001e67e:	e8 f5 f6 ff ff       	call   c001dd78 <unblockTask(ThreadControlBlock*)>
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	83 c4 2c             	add    esp,0x2c
c001e689:	89 f0                	mov    eax,esi
c001e68b:	5b                   	pop    ebx
c001e68c:	5e                   	pop    esi
c001e68d:	5f                   	pop    edi
c001e68e:	5d                   	pop    ebp
c001e68f:	c3                   	ret    

c001e690 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e690:	57                   	push   edi
c001e691:	56                   	push   esi
c001e692:	53                   	push   ebx
c001e693:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e69f:	83 e8 06             	sub    eax,0x6
c001e6a2:	0f b7 c0             	movzx  eax,ax
c001e6a5:	50                   	push   eax
c001e6a6:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e6ab:	50                   	push   eax
c001e6ac:	e8 21 fd ff ff       	call   c001e3d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6b1:	5a                   	pop    edx
c001e6b2:	5e                   	pop    esi
c001e6b3:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e6b6:	8d 56 fa             	lea    edx,[esi-0x6]
c001e6b9:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e6bf:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e6c2:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e6c5:	83 c2 02             	add    edx,0x2
c001e6c8:	66 89 10             	mov    WORD PTR [eax],dx
c001e6cb:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e6ce:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e6d2:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e6d5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e6d9:	89 d6                	mov    esi,edx
c001e6db:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e6e1:	66 81 e6 ff fd       	and    si,0xfdff
c001e6e6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e6ea:	74 07                	je     c001e6f3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e6ec:	89 d6                	mov    esi,edx
c001e6ee:	66 81 ce 00 02       	or     si,0x200
c001e6f3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e6f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6fc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e700:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e708:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e70b:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e713:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e716:	5b                   	pop    ebx
c001e717:	5e                   	pop    esi
c001e718:	5f                   	pop    edi
c001e719:	c3                   	ret    

c001e71a <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e71a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e71f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e724:	c1 e0 04             	shl    eax,0x4
c001e727:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e72a:	c3                   	ret    

c001e72b <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e72b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e730:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e735:	c1 e0 04             	shl    eax,0x4
c001e738:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e73c:	c3                   	ret    

c001e73d <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e73d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e742:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e747:	c1 e0 04             	shl    eax,0x4
c001e74a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e74d:	c3                   	ret    

c001e74e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e74e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e753:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e758:	c1 e0 04             	shl    eax,0x4
c001e75b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e75f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e762:	c3                   	ret    

c001e763 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e763:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e768:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e76d:	c1 e0 04             	shl    eax,0x4
c001e770:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e774:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e778:	c3                   	ret    

c001e779 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e779:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e77e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e783:	c1 e0 04             	shl    eax,0x4
c001e786:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e78a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e78d:	c3                   	ret    

c001e78e <Vm::faultHandler(regs*)>:
c001e78e:	55                   	push   ebp
c001e78f:	57                   	push   edi
c001e790:	56                   	push   esi
c001e791:	53                   	push   ebx
c001e792:	83 ec 1c             	sub    esp,0x1c
c001e795:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e799:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e79c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e7a0:	0f b7 f8             	movzx  edi,ax
c001e7a3:	52                   	push   edx
c001e7a4:	0f b7 c0             	movzx  eax,ax
c001e7a7:	50                   	push   eax
c001e7a8:	e8 25 fc ff ff       	call   c001e3d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e7ad:	5a                   	pop    edx
c001e7ae:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e7b1:	59                   	pop    ecx
c001e7b2:	89 c1                	mov    ecx,eax
c001e7b4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e7b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7bb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7c4:	0f b7 c5             	movzx  eax,bp
c001e7c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7cb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e7cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e7d3:	e8 fa fb ff ff       	call   c001e3d2 <Vm::realToLinear(unsigned short, unsigned short)>
c001e7d8:	5e                   	pop    esi
c001e7d9:	be 06 00 00 00       	mov    esi,0x6
c001e7de:	5a                   	pop    edx
c001e7df:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e7e4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e7e9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e7ec:	80 fa 9d             	cmp    dl,0x9d
c001e7ef:	0f 84 2c 02 00 00    	je     c001ea21 <Vm::faultHandler(regs*)+0x293>
c001e7f5:	0f 87 91 00 00 00    	ja     c001e88c <Vm::faultHandler(regs*)+0xfe>
c001e7fb:	80 fa 66             	cmp    dl,0x66
c001e7fe:	0f 84 98 01 00 00    	je     c001e99c <Vm::faultHandler(regs*)+0x20e>
c001e804:	77 47                	ja     c001e84d <Vm::faultHandler(regs*)+0xbf>
c001e806:	80 fa 36             	cmp    dl,0x36
c001e809:	0f 84 80 01 00 00    	je     c001e98f <Vm::faultHandler(regs*)+0x201>
c001e80f:	77 1a                	ja     c001e82b <Vm::faultHandler(regs*)+0x9d>
c001e811:	80 fa 26             	cmp    dl,0x26
c001e814:	0f 84 4e 01 00 00    	je     c001e968 <Vm::faultHandler(regs*)+0x1da>
c001e81a:	80 fa 2e             	cmp    dl,0x2e
c001e81d:	0f 85 e2 05 00 00    	jne    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e823:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e826:	31 f6                	xor    esi,esi
c001e828:	41                   	inc    ecx
c001e829:	eb be                	jmp    c001e7e9 <Vm::faultHandler(regs*)+0x5b>
c001e82b:	80 fa 64             	cmp    dl,0x64
c001e82e:	0f 84 41 01 00 00    	je     c001e975 <Vm::faultHandler(regs*)+0x1e7>
c001e834:	0f 87 48 01 00 00    	ja     c001e982 <Vm::faultHandler(regs*)+0x1f4>
c001e83a:	80 fa 3e             	cmp    dl,0x3e
c001e83d:	0f 85 c2 05 00 00    	jne    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e843:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e846:	be 01 00 00 00       	mov    esi,0x1
c001e84b:	eb db                	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e84d:	80 fa 6d             	cmp    dl,0x6d
c001e850:	0f 84 ec 02 00 00    	je     c001eb42 <Vm::faultHandler(regs*)+0x3b4>
c001e856:	77 17                	ja     c001e86f <Vm::faultHandler(regs*)+0xe1>
c001e858:	80 fa 67             	cmp    dl,0x67
c001e85b:	0f 84 48 01 00 00    	je     c001e9a9 <Vm::faultHandler(regs*)+0x21b>
c001e861:	80 fa 6c             	cmp    dl,0x6c
c001e864:	0f 84 69 02 00 00    	je     c001ead3 <Vm::faultHandler(regs*)+0x345>
c001e86a:	e9 96 05 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e86f:	80 fa 6f             	cmp    dl,0x6f
c001e872:	0f 84 f4 03 00 00    	je     c001ec6c <Vm::faultHandler(regs*)+0x4de>
c001e878:	0f 82 59 03 00 00    	jb     c001ebd7 <Vm::faultHandler(regs*)+0x449>
c001e87e:	80 fa 9c             	cmp    dl,0x9c
c001e881:	0f 84 2f 01 00 00    	je     c001e9b6 <Vm::faultHandler(regs*)+0x228>
c001e887:	e9 79 05 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e88c:	80 fa ec             	cmp    dl,0xec
c001e88f:	0f 84 14 05 00 00    	je     c001eda9 <Vm::faultHandler(regs*)+0x61b>
c001e895:	77 7b                	ja     c001e912 <Vm::faultHandler(regs*)+0x184>
c001e897:	80 fa e4             	cmp    dl,0xe4
c001e89a:	0f 84 93 04 00 00    	je     c001ed33 <Vm::faultHandler(regs*)+0x5a5>
c001e8a0:	77 53                	ja     c001e8f5 <Vm::faultHandler(regs*)+0x167>
c001e8a2:	80 fa cd             	cmp    dl,0xcd
c001e8a5:	0f 84 d9 01 00 00    	je     c001ea84 <Vm::faultHandler(regs*)+0x2f6>
c001e8ab:	80 fa cf             	cmp    dl,0xcf
c001e8ae:	0f 85 51 05 00 00    	jne    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e8b4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e8b7:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e8ba:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e8be:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e8c1:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e8c5:	81 ca 00 02 02 00    	or     edx,0x20200
c001e8cb:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e8ce:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e8d2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e8d8:	66 c1 e8 09          	shr    ax,0x9
c001e8dc:	83 e0 01             	and    eax,0x1
c001e8df:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e8e2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e8e5:	83 c0 06             	add    eax,0x6
c001e8e8:	25 ff ff 00 00       	and    eax,0xffff
c001e8ed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e8f0:	e9 0c 05 00 00       	jmp    c001ee01 <Vm::faultHandler(regs*)+0x673>
c001e8f5:	80 fa e6             	cmp    dl,0xe6
c001e8f8:	0f 84 7f 04 00 00    	je     c001ed7d <Vm::faultHandler(regs*)+0x5ef>
c001e8fe:	0f 82 4b 04 00 00    	jb     c001ed4f <Vm::faultHandler(regs*)+0x5c1>
c001e904:	80 fa e7             	cmp    dl,0xe7
c001e907:	0f 84 87 04 00 00    	je     c001ed94 <Vm::faultHandler(regs*)+0x606>
c001e90d:	e9 f3 04 00 00       	jmp    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e912:	80 fa ef             	cmp    dl,0xef
c001e915:	0f 84 d1 04 00 00    	je     c001edec <Vm::faultHandler(regs*)+0x65e>
c001e91b:	77 28                	ja     c001e945 <Vm::faultHandler(regs*)+0x1b7>
c001e91d:	80 fa ed             	cmp    dl,0xed
c001e920:	0f 84 9f 04 00 00    	je     c001edc5 <Vm::faultHandler(regs*)+0x637>
c001e926:	80 fa ee             	cmp    dl,0xee
c001e929:	0f 85 d6 04 00 00    	jne    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e92f:	50                   	push   eax
c001e930:	50                   	push   eax
c001e931:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e935:	50                   	push   eax
c001e936:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e93a:	50                   	push   eax
c001e93b:	e8 5c fa ff ff       	call   c001e39c <Vm::outbv(unsigned short, unsigned char)>
c001e940:	e9 9f 04 00 00       	jmp    c001ede4 <Vm::faultHandler(regs*)+0x656>
c001e945:	80 fa fa             	cmp    dl,0xfa
c001e948:	0f 84 69 01 00 00    	je     c001eab7 <Vm::faultHandler(regs*)+0x329>
c001e94e:	80 fa fb             	cmp    dl,0xfb
c001e951:	0f 84 6e 01 00 00    	je     c001eac5 <Vm::faultHandler(regs*)+0x337>
c001e957:	80 fa f3             	cmp    dl,0xf3
c001e95a:	0f 85 a5 04 00 00    	jne    c001ee05 <Vm::faultHandler(regs*)+0x677>
c001e960:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e963:	e9 c0 fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e968:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e96b:	be 02 00 00 00       	mov    esi,0x2
c001e970:	e9 b3 fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e975:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e978:	be 03 00 00 00       	mov    esi,0x3
c001e97d:	e9 a6 fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e982:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e985:	be 04 00 00 00       	mov    esi,0x4
c001e98a:	e9 99 fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e98f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e992:	be 05 00 00 00       	mov    esi,0x5
c001e997:	e9 8c fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e99c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e99f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e9a4:	e9 7f fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e9a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9ac:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e9b1:	e9 72 fe ff ff       	jmp    c001e828 <Vm::faultHandler(regs*)+0x9a>
c001e9b6:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e9b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e9bd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e9c2:	74 30                	je     c001e9f4 <Vm::faultHandler(regs*)+0x266>
c001e9c4:	83 e9 04             	sub    ecx,0x4
c001e9c7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e9cd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e9d3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e9d6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9d9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e9df:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e9e3:	0f 84 15 04 00 00    	je     c001edfe <Vm::faultHandler(regs*)+0x670>
c001e9e9:	80 ce 02             	or     dh,0x2
c001e9ec:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e9ef:	e9 0a 04 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001e9f4:	83 e9 02             	sub    ecx,0x2
c001e9f7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e9fd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea00:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ea04:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea0a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ea0e:	74 05                	je     c001ea15 <Vm::faultHandler(regs*)+0x287>
c001ea10:	80 ce 02             	or     dh,0x2
c001ea13:	eb 03                	jmp    c001ea18 <Vm::faultHandler(regs*)+0x28a>
c001ea15:	80 e6 fd             	and    dh,0xfd
c001ea18:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ea1c:	e9 dd 03 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ea21:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea26:	74 2a                	je     c001ea52 <Vm::faultHandler(regs*)+0x2c4>
c001ea28:	8b 10                	mov    edx,DWORD PTR [eax]
c001ea2a:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea30:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea36:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea39:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea3b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea41:	c1 e8 09             	shr    eax,0x9
c001ea44:	83 e0 01             	and    eax,0x1
c001ea47:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea4a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea4d:	83 c0 04             	add    eax,0x4
c001ea50:	eb 25                	jmp    c001ea77 <Vm::faultHandler(regs*)+0x2e9>
c001ea52:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea55:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea5b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea5e:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ea61:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea67:	66 c1 e8 09          	shr    ax,0x9
c001ea6b:	83 e0 01             	and    eax,0x1
c001ea6e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea71:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea74:	83 c0 02             	add    eax,0x2
c001ea77:	25 ff ff 00 00       	and    eax,0xffff
c001ea7c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea7f:	e9 7a 03 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ea84:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea88:	3c ee                	cmp    al,0xee
c001ea8a:	75 10                	jne    c001ea9c <Vm::faultHandler(regs*)+0x30e>
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ea92:	e8 a2 f9 ff ff       	call   c001e439 <Vm::mainloop3(unsigned long)>
c001ea97:	e9 4b 03 00 00       	jmp    c001ede7 <Vm::faultHandler(regs*)+0x659>
c001ea9c:	83 ec 0c             	sub    esp,0xc
c001ea9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eaa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa7:	51                   	push   ecx
c001eaa8:	50                   	push   eax
c001eaa9:	53                   	push   ebx
c001eaaa:	e8 e1 fb ff ff       	call   c001e690 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eaaf:	83 c4 20             	add    esp,0x20
c001eab2:	e9 4a 03 00 00       	jmp    c001ee01 <Vm::faultHandler(regs*)+0x673>
c001eab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eabc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eac0:	e9 39 03 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001eac5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaca:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eace:	e9 2b 03 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ead3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ead6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eadb:	74 2b                	je     c001eb08 <Vm::faultHandler(regs*)+0x37a>
c001eadd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eae4:	76 22                	jbe    c001eb08 <Vm::faultHandler(regs*)+0x37a>
c001eae6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eaea:	50                   	push   eax
c001eaeb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eaef:	50                   	push   eax
c001eaf0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eaf4:	50                   	push   eax
c001eaf5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eaf9:	50                   	push   eax
c001eafa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eafe:	50                   	push   eax
c001eaff:	6a 6c                	push   0x6c
c001eb01:	6a 6c                	push   0x6c
c001eb03:	e9 b9 01 00 00       	jmp    c001ecc1 <Vm::faultHandler(regs*)+0x533>
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb0f:	0f b7 f6             	movzx  esi,si
c001eb12:	50                   	push   eax
c001eb13:	e8 71 f8 ff ff       	call   c001e389 <Vm::inbv(unsigned short)>
c001eb18:	83 c4 0c             	add    esp,0xc
c001eb1b:	0f b6 c0             	movzx  eax,al
c001eb1e:	50                   	push   eax
c001eb1f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001eb23:	50                   	push   eax
c001eb24:	56                   	push   esi
c001eb25:	e8 24 fc ff ff       	call   c001e74e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eb2a:	83 c4 10             	add    esp,0x10
c001eb2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb30:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb34:	74 03                	je     c001eb39 <Vm::faultHandler(regs*)+0x3ab>
c001eb36:	48                   	dec    eax
c001eb37:	eb 01                	jmp    c001eb3a <Vm::faultHandler(regs*)+0x3ac>
c001eb39:	40                   	inc    eax
c001eb3a:	0f b7 c0             	movzx  eax,ax
c001eb3d:	e9 8d 00 00 00       	jmp    c001ebcf <Vm::faultHandler(regs*)+0x441>
c001eb42:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb45:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb48:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb4d:	74 29                	je     c001eb78 <Vm::faultHandler(regs*)+0x3ea>
c001eb4f:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb54:	76 22                	jbe    c001eb78 <Vm::faultHandler(regs*)+0x3ea>
c001eb56:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb5a:	50                   	push   eax
c001eb5b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb5f:	50                   	push   eax
c001eb60:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb64:	50                   	push   eax
c001eb65:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb69:	50                   	push   eax
c001eb6a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb6e:	50                   	push   eax
c001eb6f:	6a 6d                	push   0x6d
c001eb71:	6a 6d                	push   0x6d
c001eb73:	e9 49 01 00 00       	jmp    c001ecc1 <Vm::faultHandler(regs*)+0x533>
c001eb78:	0f b7 c8             	movzx  ecx,ax
c001eb7b:	0f b7 f6             	movzx  esi,si
c001eb7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eb81:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb86:	74 20                	je     c001eba8 <Vm::faultHandler(regs*)+0x41a>
c001eb88:	ed                   	in     eax,dx
c001eb89:	55                   	push   ebp
c001eb8a:	50                   	push   eax
c001eb8b:	51                   	push   ecx
c001eb8c:	56                   	push   esi
c001eb8d:	e8 e7 fb ff ff       	call   c001e779 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eb92:	83 c4 10             	add    esp,0x10
c001eb95:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eb98:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb9c:	74 05                	je     c001eba3 <Vm::faultHandler(regs*)+0x415>
c001eb9e:	83 e8 04             	sub    eax,0x4
c001eba1:	eb 27                	jmp    c001ebca <Vm::faultHandler(regs*)+0x43c>
c001eba3:	83 c0 04             	add    eax,0x4
c001eba6:	eb 22                	jmp    c001ebca <Vm::faultHandler(regs*)+0x43c>
c001eba8:	66 ed                	in     ax,dx
c001ebaa:	0f b7 c0             	movzx  eax,ax
c001ebad:	57                   	push   edi
c001ebae:	50                   	push   eax
c001ebaf:	51                   	push   ecx
c001ebb0:	56                   	push   esi
c001ebb1:	e8 ad fb ff ff       	call   c001e763 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ebb6:	83 c4 10             	add    esp,0x10
c001ebb9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebbc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ebc0:	74 05                	je     c001ebc7 <Vm::faultHandler(regs*)+0x439>
c001ebc2:	83 e8 02             	sub    eax,0x2
c001ebc5:	eb 03                	jmp    c001ebca <Vm::faultHandler(regs*)+0x43c>
c001ebc7:	83 c0 02             	add    eax,0x2
c001ebca:	25 ff ff 00 00       	and    eax,0xffff
c001ebcf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ebd2:	e9 27 02 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ebd7:	8d 46 ff             	lea    eax,[esi-0x1]
c001ebda:	3c 05                	cmp    al,0x5
c001ebdc:	77 24                	ja     c001ec02 <Vm::faultHandler(regs*)+0x474>
c001ebde:	0f b6 c0             	movzx  eax,al
c001ebe1:	ff 24 85 6c bb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4494]
c001ebe8:	0f b7 fd             	movzx  edi,bp
c001ebeb:	eb 15                	jmp    c001ec02 <Vm::faultHandler(regs*)+0x474>
c001ebed:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ebf1:	eb 0f                	jmp    c001ec02 <Vm::faultHandler(regs*)+0x474>
c001ebf3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ebf7:	eb 09                	jmp    c001ec02 <Vm::faultHandler(regs*)+0x474>
c001ebf9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ebfd:	eb 03                	jmp    c001ec02 <Vm::faultHandler(regs*)+0x474>
c001ebff:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ec02:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ec05:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec0a:	74 29                	je     c001ec35 <Vm::faultHandler(regs*)+0x4a7>
c001ec0c:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec11:	76 22                	jbe    c001ec35 <Vm::faultHandler(regs*)+0x4a7>
c001ec13:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec17:	50                   	push   eax
c001ec18:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec1c:	50                   	push   eax
c001ec1d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec21:	50                   	push   eax
c001ec22:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec26:	50                   	push   eax
c001ec27:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec2b:	50                   	push   eax
c001ec2c:	6a 6e                	push   0x6e
c001ec2e:	6a 6e                	push   0x6e
c001ec30:	e9 8c 00 00 00       	jmp    c001ecc1 <Vm::faultHandler(regs*)+0x533>
c001ec35:	0f b7 c0             	movzx  eax,ax
c001ec38:	52                   	push   edx
c001ec39:	52                   	push   edx
c001ec3a:	50                   	push   eax
c001ec3b:	57                   	push   edi
c001ec3c:	e8 d9 fa ff ff       	call   c001e71a <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ec41:	59                   	pop    ecx
c001ec42:	0f b6 c0             	movzx  eax,al
c001ec45:	5e                   	pop    esi
c001ec46:	50                   	push   eax
c001ec47:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ec4b:	50                   	push   eax
c001ec4c:	e8 4b f7 ff ff       	call   c001e39c <Vm::outbv(unsigned short, unsigned char)>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ec57:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec5b:	74 03                	je     c001ec60 <Vm::faultHandler(regs*)+0x4d2>
c001ec5d:	48                   	dec    eax
c001ec5e:	eb 01                	jmp    c001ec61 <Vm::faultHandler(regs*)+0x4d3>
c001ec60:	40                   	inc    eax
c001ec61:	0f b7 c0             	movzx  eax,ax
c001ec64:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ec67:	e9 92 01 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ec6c:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec6f:	3c 05                	cmp    al,0x5
c001ec71:	77 1f                	ja     c001ec92 <Vm::faultHandler(regs*)+0x504>
c001ec73:	0f b6 c0             	movzx  eax,al
c001ec76:	ff 24 85 84 bb 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd447c]
c001ec7d:	89 ef                	mov    edi,ebp
c001ec7f:	eb 11                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x504>
c001ec81:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ec84:	eb 0c                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x504>
c001ec86:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ec89:	eb 07                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x504>
c001ec8b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ec8e:	eb 02                	jmp    c001ec92 <Vm::faultHandler(regs*)+0x504>
c001ec90:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ec92:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ec95:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec9a:	74 37                	je     c001ecd3 <Vm::faultHandler(regs*)+0x545>
c001ec9c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001eca2:	76 2f                	jbe    c001ecd3 <Vm::faultHandler(regs*)+0x545>
c001eca4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eca8:	50                   	push   eax
c001eca9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecad:	50                   	push   eax
c001ecae:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecb2:	50                   	push   eax
c001ecb3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecb7:	50                   	push   eax
c001ecb8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecbc:	50                   	push   eax
c001ecbd:	6a 6f                	push   0x6f
c001ecbf:	6a 6f                	push   0x6f
c001ecc1:	68 12 bb 02 c0       	push   0xc002bb12
c001ecc6:	e8 32 39 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001eccb:	83 c4 20             	add    esp,0x20
c001ecce:	e9 86 01 00 00       	jmp    c001ee59 <Vm::faultHandler(regs*)+0x6cb>
c001ecd3:	0f b7 d7             	movzx  edx,di
c001ecd6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ecd9:	0f b7 c6             	movzx  eax,si
c001ecdc:	81 e1 00 04 00 00    	and    ecx,0x400
c001ece2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ece5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecea:	74 1d                	je     c001ed09 <Vm::faultHandler(regs*)+0x57b>
c001ecec:	55                   	push   ebp
c001eced:	55                   	push   ebp
c001ecee:	50                   	push   eax
c001ecef:	52                   	push   edx
c001ecf0:	e8 48 fa ff ff       	call   c001e73d <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ecf5:	83 c4 10             	add    esp,0x10
c001ecf8:	89 fa                	mov    edx,edi
c001ecfa:	ef                   	out    dx,eax
c001ecfb:	85 c9                	test   ecx,ecx
c001ecfd:	74 05                	je     c001ed04 <Vm::faultHandler(regs*)+0x576>
c001ecff:	83 ee 04             	sub    esi,0x4
c001ed02:	eb 21                	jmp    c001ed25 <Vm::faultHandler(regs*)+0x597>
c001ed04:	83 c6 04             	add    esi,0x4
c001ed07:	eb 1c                	jmp    c001ed25 <Vm::faultHandler(regs*)+0x597>
c001ed09:	55                   	push   ebp
c001ed0a:	55                   	push   ebp
c001ed0b:	50                   	push   eax
c001ed0c:	52                   	push   edx
c001ed0d:	e8 19 fa ff ff       	call   c001e72b <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ed12:	83 c4 10             	add    esp,0x10
c001ed15:	89 fa                	mov    edx,edi
c001ed17:	66 ef                	out    dx,ax
c001ed19:	85 c9                	test   ecx,ecx
c001ed1b:	74 05                	je     c001ed22 <Vm::faultHandler(regs*)+0x594>
c001ed1d:	83 ee 02             	sub    esi,0x2
c001ed20:	eb 03                	jmp    c001ed25 <Vm::faultHandler(regs*)+0x597>
c001ed22:	83 c6 02             	add    esi,0x2
c001ed25:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ed2b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ed2e:	e9 cb 00 00 00       	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ed33:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ed3a:	83 ec 0c             	sub    esp,0xc
c001ed3d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed41:	50                   	push   eax
c001ed42:	e8 42 f6 ff ff       	call   c001e389 <Vm::inbv(unsigned short)>
c001ed47:	0f b6 c0             	movzx  eax,al
c001ed4a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ed4d:	eb 3f                	jmp    c001ed8e <Vm::faultHandler(regs*)+0x600>
c001ed4f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed54:	74 07                	je     c001ed5d <Vm::faultHandler(regs*)+0x5cf>
c001ed56:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed5a:	ed                   	in     eax,dx
c001ed5b:	eb 14                	jmp    c001ed71 <Vm::faultHandler(regs*)+0x5e3>
c001ed5d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ed60:	66 31 f6             	xor    si,si
c001ed63:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ed66:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed6a:	66 ed                	in     ax,dx
c001ed6c:	0f b7 c0             	movzx  eax,ax
c001ed6f:	09 f0                	or     eax,esi
c001ed71:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ed74:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed78:	e9 84 00 00 00       	jmp    c001ee01 <Vm::faultHandler(regs*)+0x673>
c001ed7d:	52                   	push   edx
c001ed7e:	52                   	push   edx
c001ed7f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ed83:	50                   	push   eax
c001ed84:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed88:	50                   	push   eax
c001ed89:	e8 0e f6 ff ff       	call   c001e39c <Vm::outbv(unsigned short, unsigned char)>
c001ed8e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ed92:	eb 53                	jmp    c001ede7 <Vm::faultHandler(regs*)+0x659>
c001ed94:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ed97:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ed9b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eda0:	74 03                	je     c001eda5 <Vm::faultHandler(regs*)+0x617>
c001eda2:	ef                   	out    dx,eax
c001eda3:	eb cf                	jmp    c001ed74 <Vm::faultHandler(regs*)+0x5e6>
c001eda5:	66 ef                	out    dx,ax
c001eda7:	eb cb                	jmp    c001ed74 <Vm::faultHandler(regs*)+0x5e6>
c001eda9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001edb7:	50                   	push   eax
c001edb8:	e8 cc f5 ff ff       	call   c001e389 <Vm::inbv(unsigned short)>
c001edbd:	0f b6 c0             	movzx  eax,al
c001edc0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001edc3:	eb 1f                	jmp    c001ede4 <Vm::faultHandler(regs*)+0x656>
c001edc5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001edc8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edcd:	74 03                	je     c001edd2 <Vm::faultHandler(regs*)+0x644>
c001edcf:	ed                   	in     eax,dx
c001edd0:	eb 0d                	jmp    c001eddf <Vm::faultHandler(regs*)+0x651>
c001edd2:	66 ed                	in     ax,dx
c001edd4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001edd7:	0f b7 c0             	movzx  eax,ax
c001edda:	66 31 d2             	xor    dx,dx
c001eddd:	09 d0                	or     eax,edx
c001eddf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ede2:	eb 1a                	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001ede4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	eb 15                	jmp    c001ee01 <Vm::faultHandler(regs*)+0x673>
c001edec:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001edef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001edf2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001edf7:	74 03                	je     c001edfc <Vm::faultHandler(regs*)+0x66e>
c001edf9:	ef                   	out    dx,eax
c001edfa:	eb 02                	jmp    c001edfe <Vm::faultHandler(regs*)+0x670>
c001edfc:	66 ef                	out    dx,ax
c001edfe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee01:	b0 01                	mov    al,0x1
c001ee03:	eb 56                	jmp    c001ee5b <Vm::faultHandler(regs*)+0x6cd>
c001ee05:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee09:	50                   	push   eax
c001ee0a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee0e:	50                   	push   eax
c001ee0f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee13:	50                   	push   eax
c001ee14:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee18:	50                   	push   eax
c001ee19:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee1d:	50                   	push   eax
c001ee1e:	52                   	push   edx
c001ee1f:	52                   	push   edx
c001ee20:	68 3f bb 02 c0       	push   0xc002bb3f
c001ee25:	e8 d3 37 ff ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c001ee2a:	83 c4 20             	add    esp,0x20
c001ee2d:	83 ec 0c             	sub    esp,0xc
c001ee30:	6a 60                	push   0x60
c001ee32:	e8 52 f5 ff ff       	call   c001e389 <Vm::inbv(unsigned short)>
c001ee37:	83 c4 10             	add    esp,0x10
c001ee3a:	3c 1c                	cmp    al,0x1c
c001ee3c:	74 04                	je     c001ee42 <Vm::faultHandler(regs*)+0x6b4>
c001ee3e:	3c 5a                	cmp    al,0x5a
c001ee40:	75 eb                	jne    c001ee2d <Vm::faultHandler(regs*)+0x69f>
c001ee42:	3c 5a                	cmp    al,0x5a
c001ee44:	74 04                	je     c001ee4a <Vm::faultHandler(regs*)+0x6bc>
c001ee46:	3c 1c                	cmp    al,0x1c
c001ee48:	75 0f                	jne    c001ee59 <Vm::faultHandler(regs*)+0x6cb>
c001ee4a:	83 ec 0c             	sub    esp,0xc
c001ee4d:	6a 60                	push   0x60
c001ee4f:	e8 35 f5 ff ff       	call   c001e389 <Vm::inbv(unsigned short)>
c001ee54:	83 c4 10             	add    esp,0x10
c001ee57:	eb e9                	jmp    c001ee42 <Vm::faultHandler(regs*)+0x6b4>
c001ee59:	31 c0                	xor    eax,eax
c001ee5b:	83 c4 1c             	add    esp,0x1c
c001ee5e:	5b                   	pop    ebx
c001ee5f:	5e                   	pop    esi
c001ee60:	5f                   	pop    edi
c001ee61:	5d                   	pop    ebp
c001ee62:	c3                   	ret    

c001ee63 <Vm::fpuInternalTo32(unsigned long long)>:
c001ee63:	57                   	push   edi
c001ee64:	56                   	push   esi
c001ee65:	53                   	push   ebx
c001ee66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee6e:	89 d6                	mov    esi,edx
c001ee70:	89 d7                	mov    edi,edx
c001ee72:	89 c1                	mov    ecx,eax
c001ee74:	c1 ef 14             	shr    edi,0x14
c001ee77:	89 d3                	mov    ebx,edx
c001ee79:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ee7f:	31 d2                	xor    edx,edx
c001ee81:	89 f8                	mov    eax,edi
c001ee83:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ee89:	bf ff 00 00 00       	mov    edi,0xff
c001ee8e:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ee93:	83 d2 ff             	adc    edx,0xffffffff
c001ee96:	39 c7                	cmp    edi,eax
c001ee98:	bf 00 00 00 00       	mov    edi,0x0
c001ee9d:	19 d7                	sbb    edi,edx
c001ee9f:	72 15                	jb     c001eeb6 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001eea1:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001eea5:	c1 e0 17             	shl    eax,0x17
c001eea8:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001eeae:	09 f1                	or     ecx,esi
c001eeb0:	09 c1                	or     ecx,eax
c001eeb2:	89 cf                	mov    edi,ecx
c001eeb4:	eb 02                	jmp    c001eeb8 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001eeb6:	31 ff                	xor    edi,edi
c001eeb8:	89 f8                	mov    eax,edi
c001eeba:	5b                   	pop    ebx
c001eebb:	5e                   	pop    esi
c001eebc:	5f                   	pop    edi
c001eebd:	c3                   	ret    

c001eebe <Vm::fpuInternalTo64(unsigned long long)>:
c001eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eec6:	c3                   	ret    

c001eec7 <Vm::fpu32ToInternal(unsigned int)>:
c001eec7:	57                   	push   edi
c001eec8:	31 ff                	xor    edi,edi
c001eeca:	56                   	push   esi
c001eecb:	53                   	push   ebx
c001eecc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eed0:	89 cb                	mov    ebx,ecx
c001eed2:	89 ce                	mov    esi,ecx
c001eed4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eeda:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eee0:	c1 e9 17             	shr    ecx,0x17
c001eee3:	89 f0                	mov    eax,esi
c001eee5:	0f b6 d1             	movzx  edx,cl
c001eee8:	81 c2 80 03 00 00    	add    edx,0x380
c001eeee:	89 d1                	mov    ecx,edx
c001eef0:	89 fa                	mov    edx,edi
c001eef2:	c1 e1 14             	shl    ecx,0x14
c001eef5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eef9:	c1 e0 1d             	shl    eax,0x1d
c001eefc:	89 d7                	mov    edi,edx
c001eefe:	89 c6                	mov    esi,eax
c001ef00:	89 ca                	mov    edx,ecx
c001ef02:	89 f0                	mov    eax,esi
c001ef04:	09 fa                	or     edx,edi
c001ef06:	09 da                	or     edx,ebx
c001ef08:	5b                   	pop    ebx
c001ef09:	5e                   	pop    esi
c001ef0a:	5f                   	pop    edi
c001ef0b:	c3                   	ret    

c001ef0c <Vm::fpu64ToInternal(unsigned long long)>:
c001ef0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef14:	c3                   	ret    

c001ef15 <Vm::fpuFloatToLong(unsigned long long)>:
c001ef15:	57                   	push   edi
c001ef16:	31 c0                	xor    eax,eax
c001ef18:	56                   	push   esi
c001ef19:	31 d2                	xor    edx,edx
c001ef1b:	53                   	push   ebx
c001ef1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef20:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef24:	89 d9                	mov    ecx,ebx
c001ef26:	c1 e9 14             	shr    ecx,0x14
c001ef29:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ef2f:	89 cf                	mov    edi,ecx
c001ef31:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ef37:	78 33                	js     c001ef6c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef39:	89 d9                	mov    ecx,ebx
c001ef3b:	89 f0                	mov    eax,esi
c001ef3d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef43:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ef49:	89 ca                	mov    edx,ecx
c001ef4b:	b9 34 00 00 00       	mov    ecx,0x34
c001ef50:	29 f9                	sub    ecx,edi
c001ef52:	0f ad d0             	shrd   eax,edx,cl
c001ef55:	d3 fa                	sar    edx,cl
c001ef57:	f6 c1 20             	test   cl,0x20
c001ef5a:	74 05                	je     c001ef61 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ef5c:	89 d0                	mov    eax,edx
c001ef5e:	c1 fa 1f             	sar    edx,0x1f
c001ef61:	85 db                	test   ebx,ebx
c001ef63:	79 07                	jns    c001ef6c <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ef65:	f7 d8                	neg    eax
c001ef67:	83 d2 00             	adc    edx,0x0
c001ef6a:	f7 da                	neg    edx
c001ef6c:	5b                   	pop    ebx
c001ef6d:	5e                   	pop    esi
c001ef6e:	5f                   	pop    edi
c001ef6f:	c3                   	ret    

c001ef70 <Vm::fpuULongToFloat(unsigned long long)>:
c001ef70:	57                   	push   edi
c001ef71:	31 c9                	xor    ecx,ecx
c001ef73:	56                   	push   esi
c001ef74:	53                   	push   ebx
c001ef75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ef79:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ef7d:	0f ba e7 14          	bt     edi,0x14
c001ef81:	72 07                	jb     c001ef8a <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ef83:	01 f6                	add    esi,esi
c001ef85:	11 ff                	adc    edi,edi
c001ef87:	41                   	inc    ecx
c001ef88:	eb f3                	jmp    c001ef7d <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ef8a:	89 fa                	mov    edx,edi
c001ef8c:	89 f0                	mov    eax,esi
c001ef8e:	bb 33 04 00 00       	mov    ebx,0x433
c001ef93:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ef99:	29 cb                	sub    ebx,ecx
c001ef9b:	89 d9                	mov    ecx,ebx
c001ef9d:	5b                   	pop    ebx
c001ef9e:	c1 e1 14             	shl    ecx,0x14
c001efa1:	5e                   	pop    esi
c001efa2:	09 ca                	or     edx,ecx
c001efa4:	5f                   	pop    edi
c001efa5:	c3                   	ret    

c001efa6 <Vm::fpuLongToFloat(long long)>:
c001efa6:	56                   	push   esi
c001efa7:	31 c0                	xor    eax,eax
c001efa9:	53                   	push   ebx
c001efaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efb2:	39 c8                	cmp    eax,ecx
c001efb4:	19 d8                	sbb    eax,ebx
c001efb6:	7d 04                	jge    c001efbc <Vm::fpuLongToFloat(long long)+0x16>
c001efb8:	31 f6                	xor    esi,esi
c001efba:	eb 0c                	jmp    c001efc8 <Vm::fpuLongToFloat(long long)+0x22>
c001efbc:	f7 d9                	neg    ecx
c001efbe:	be 01 00 00 00       	mov    esi,0x1
c001efc3:	83 d3 00             	adc    ebx,0x0
c001efc6:	f7 db                	neg    ebx
c001efc8:	31 c0                	xor    eax,eax
c001efca:	0f ba e3 14          	bt     ebx,0x14
c001efce:	72 07                	jb     c001efd7 <Vm::fpuLongToFloat(long long)+0x31>
c001efd0:	01 c9                	add    ecx,ecx
c001efd2:	11 db                	adc    ebx,ebx
c001efd4:	40                   	inc    eax
c001efd5:	eb f3                	jmp    c001efca <Vm::fpuLongToFloat(long long)+0x24>
c001efd7:	ba 33 04 00 00       	mov    edx,0x433
c001efdc:	29 c2                	sub    edx,eax
c001efde:	89 c8                	mov    eax,ecx
c001efe0:	c1 e2 14             	shl    edx,0x14
c001efe3:	89 d9                	mov    ecx,ebx
c001efe5:	89 f3                	mov    ebx,esi
c001efe7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efed:	09 ca                	or     edx,ecx
c001efef:	84 db                	test   bl,bl
c001eff1:	74 06                	je     c001eff9 <Vm::fpuLongToFloat(long long)+0x53>
c001eff3:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eff9:	5b                   	pop    ebx
c001effa:	5e                   	pop    esi
c001effb:	c3                   	ret    

c001effc <Vm::fpuGet0()>:
c001effc:	31 c0                	xor    eax,eax
c001effe:	31 d2                	xor    edx,edx
c001f000:	c3                   	ret    

c001f001 <Vm::fpuGet1()>:
c001f001:	b8 01 00 00 00       	mov    eax,0x1
c001f006:	31 d2                	xor    edx,edx
c001f008:	c3                   	ret    

c001f009 <Vm::fpuGetPi()>:
c001f009:	b8 03 00 00 00       	mov    eax,0x3
c001f00e:	31 d2                	xor    edx,edx
c001f010:	c3                   	ret    

c001f011 <Vm::fpuGetLog2E()>:
c001f011:	83 ec 18             	sub    esp,0x18
c001f014:	68 9c bb 02 c0       	push   0xc002bb9c
c001f019:	e8 4b ad ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001f01e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f023:	31 d2                	xor    edx,edx
c001f025:	83 c4 1c             	add    esp,0x1c
c001f028:	c3                   	ret    

c001f029 <Vm::fpuGetLogE2()>:
c001f029:	83 ec 18             	sub    esp,0x18
c001f02c:	68 a8 bb 02 c0       	push   0xc002bba8
c001f031:	e8 33 ad ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001f036:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f03b:	31 d2                	xor    edx,edx
c001f03d:	83 c4 1c             	add    esp,0x1c
c001f040:	c3                   	ret    

c001f041 <Vm::fpuGetLog210()>:
c001f041:	83 ec 18             	sub    esp,0x18
c001f044:	68 b4 bb 02 c0       	push   0xc002bbb4
c001f049:	e8 1b ad ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001f04e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f053:	31 d2                	xor    edx,edx
c001f055:	83 c4 1c             	add    esp,0x1c
c001f058:	c3                   	ret    

c001f059 <Vm::fpuGetLog102()>:
c001f059:	83 ec 18             	sub    esp,0x18
c001f05c:	68 c1 bb 02 c0       	push   0xc002bbc1
c001f061:	e8 03 ad ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001f066:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f06b:	31 d2                	xor    edx,edx
c001f06d:	83 c4 1c             	add    esp,0x1c
c001f070:	c3                   	ret    

c001f071 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f075:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f079:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f07d:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f081:	0f 92 c0             	setb   al
c001f084:	c3                   	ret    

c001f085 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f085:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f08d:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f091:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f095:	09 c2                	or     edx,eax
c001f097:	0f 94 c0             	sete   al
c001f09a:	c3                   	ret    

c001f09b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f09b:	57                   	push   edi
c001f09c:	56                   	push   esi
c001f09d:	53                   	push   ebx
c001f09e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0a2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f0aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f0ae:	57                   	push   edi
c001f0af:	56                   	push   esi
c001f0b0:	53                   	push   ebx
c001f0b1:	51                   	push   ecx
c001f0b2:	e8 ce ff ff ff       	call   c001f085 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f0b7:	83 c4 10             	add    esp,0x10
c001f0ba:	88 c2                	mov    dl,al
c001f0bc:	31 c0                	xor    eax,eax
c001f0be:	84 d2                	test   dl,dl
c001f0c0:	75 0c                	jne    c001f0ce <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f0c2:	57                   	push   edi
c001f0c3:	56                   	push   esi
c001f0c4:	53                   	push   ebx
c001f0c5:	51                   	push   ecx
c001f0c6:	e8 a6 ff ff ff       	call   c001f071 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f0cb:	83 c4 10             	add    esp,0x10
c001f0ce:	83 e0 01             	and    eax,0x1
c001f0d1:	5b                   	pop    ebx
c001f0d2:	88 c1                	mov    cl,al
c001f0d4:	83 e2 01             	and    edx,0x1
c001f0d7:	a0 41 0d 03 c0       	mov    al,ds:0xc0030d41
c001f0dc:	c1 e2 06             	shl    edx,0x6
c001f0df:	83 e0 ba             	and    eax,0xffffffba
c001f0e2:	5e                   	pop    esi
c001f0e3:	09 c8                	or     eax,ecx
c001f0e5:	5f                   	pop    edi
c001f0e6:	09 d0                	or     eax,edx
c001f0e8:	a2 41 0d 03 c0       	mov    ds:0xc0030d41,al
c001f0ed:	c3                   	ret    

c001f0ee <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f0ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f0f6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f0fa:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f0fe:	c3                   	ret    

c001f0ff <Vm::fpuAbs(unsigned long long)>:
c001f0ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f103:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f107:	c3                   	ret    

c001f108 <Vm::fpuChs(unsigned long long)>:
c001f108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f10c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f110:	f7 d8                	neg    eax
c001f112:	83 d2 00             	adc    edx,0x0
c001f115:	f7 da                	neg    edx
c001f117:	c3                   	ret    

c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f118:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f11c:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f121:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f125:	eb c7                	jmp    c001f0ee <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f127 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f127:	53                   	push   ebx
c001f128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f12c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f130:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f134:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f138:	0f af ca             	imul   ecx,edx
c001f13b:	0f af d8             	imul   ebx,eax
c001f13e:	f7 e2                	mul    edx
c001f140:	01 d9                	add    ecx,ebx
c001f142:	5b                   	pop    ebx
c001f143:	01 ca                	add    edx,ecx
c001f145:	c3                   	ret    

c001f146 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f146:	83 ec 0c             	sub    esp,0xc
c001f149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f159:	e8 e6 74 00 00       	call   c0026644 <__udivdi3>
c001f15e:	83 c4 1c             	add    esp,0x1c
c001f161:	c3                   	ret    

c001f162 <Vm::fpuSquare(unsigned long long)>:
c001f162:	50                   	push   eax
c001f163:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f167:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f16b:	52                   	push   edx
c001f16c:	50                   	push   eax
c001f16d:	52                   	push   edx
c001f16e:	50                   	push   eax
c001f16f:	e8 b3 ff ff ff       	call   c001f127 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f174:	83 c4 14             	add    esp,0x14
c001f177:	c3                   	ret    

c001f178 <Vm::fpuGetReg(int)>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f180:	76 10                	jbe    c001f192 <Vm::fpuGetReg(int)+0x1a>
c001f182:	83 ec 0c             	sub    esp,0xc
c001f185:	68 ce bb 02 c0       	push   0xc002bbce
c001f18a:	e8 da ab ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	a0 41 0d 03 c0       	mov    al,ds:0xc0030d41
c001f197:	b9 08 00 00 00       	mov    ecx,0x8
c001f19c:	c0 e8 03             	shr    al,0x3
c001f19f:	83 e0 07             	and    eax,0x7
c001f1a2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f1a6:	99                   	cdq    
c001f1a7:	f7 f9                	idiv   ecx
c001f1a9:	8b 04 d5 44 0d 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf2bc]
c001f1b0:	8b 14 d5 48 0d 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf2b8]
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

c001f1bb <Vm::fpuSetReg(int, unsigned long long)>:
c001f1bb:	57                   	push   edi
c001f1bc:	56                   	push   esi
c001f1bd:	52                   	push   edx
c001f1be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f1c2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1c6:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f1cb:	76 10                	jbe    c001f1dd <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f1cd:	83 ec 0c             	sub    esp,0xc
c001f1d0:	68 e1 bb 02 c0       	push   0xc002bbe1
c001f1d5:	e8 8f ab ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c001f1da:	83 c4 10             	add    esp,0x10
c001f1dd:	a0 41 0d 03 c0       	mov    al,ds:0xc0030d41
c001f1e2:	b9 08 00 00 00       	mov    ecx,0x8
c001f1e7:	c0 e8 03             	shr    al,0x3
c001f1ea:	83 e0 07             	and    eax,0x7
c001f1ed:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f1f1:	99                   	cdq    
c001f1f2:	f7 f9                	idiv   ecx
c001f1f4:	89 34 d5 44 0d 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf2bc],esi
c001f1fb:	89 3c d5 48 0d 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf2b8],edi
c001f202:	58                   	pop    eax
c001f203:	5e                   	pop    esi
c001f204:	5f                   	pop    edi
c001f205:	c3                   	ret    

c001f206 <Vm::fpuPush(unsigned long long)>:
c001f206:	a0 41 0d 03 c0       	mov    al,ds:0xc0030d41
c001f20b:	c0 e8 03             	shr    al,0x3
c001f20e:	83 e0 07             	and    eax,0x7
c001f211:	83 c0 07             	add    eax,0x7
c001f214:	88 c2                	mov    dl,al
c001f216:	83 e0 07             	and    eax,0x7
c001f219:	83 e2 07             	and    edx,0x7
c001f21c:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f223:	8a 15 41 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d41
c001f229:	83 e2 c7             	and    edx,0xffffffc7
c001f22c:	09 ca                	or     edx,ecx
c001f22e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f232:	88 15 41 0d 03 c0    	mov    BYTE PTR ds:0xc0030d41,dl
c001f238:	89 0c c5 48 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2b8],ecx
c001f23f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f243:	89 14 c5 44 0d 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf2bc],edx
c001f24a:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c001f24f:	83 f8 08             	cmp    eax,0x8
c001f252:	75 08                	jne    c001f25c <Vm::fpuPush(unsigned long long)+0x56>
c001f254:	80 0d 40 0d 03 c0 40 	or     BYTE PTR ds:0xc0030d40,0x40
c001f25b:	c3                   	ret    
c001f25c:	40                   	inc    eax
c001f25d:	a3 84 0d 03 c0       	mov    ds:0xc0030d84,eax
c001f262:	c3                   	ret    

c001f263 <Vm::fpuPop()>:
c001f263:	8a 0d 41 0d 03 c0    	mov    cl,BYTE PTR ds:0xc0030d41
c001f269:	53                   	push   ebx
c001f26a:	c0 e9 03             	shr    cl,0x3
c001f26d:	8a 1d 41 0d 03 c0    	mov    bl,BYTE PTR ds:0xc0030d41
c001f273:	83 e1 07             	and    ecx,0x7
c001f276:	83 e3 c7             	and    ebx,0xffffffc7
c001f279:	8b 04 cd 44 0d 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf2bc]
c001f280:	8b 14 cd 48 0d 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf2b8]
c001f287:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f28e:	83 e1 38             	and    ecx,0x38
c001f291:	09 d9                	or     ecx,ebx
c001f293:	88 0d 41 0d 03 c0    	mov    BYTE PTR ds:0xc0030d41,cl
c001f299:	8b 0d 84 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d84
c001f29f:	85 c9                	test   ecx,ecx
c001f2a1:	74 09                	je     c001f2ac <Vm::fpuPop()+0x49>
c001f2a3:	49                   	dec    ecx
c001f2a4:	89 0d 84 0d 03 c0    	mov    DWORD PTR ds:0xc0030d84,ecx
c001f2aa:	eb 07                	jmp    c001f2b3 <Vm::fpuPop()+0x50>
c001f2ac:	80 0d 40 0d 03 c0 40 	or     BYTE PTR ds:0xc0030d40,0x40
c001f2b3:	5b                   	pop    ebx
c001f2b4:	c3                   	ret    

c001f2b5 <Vm::x87Handler(regs*)>:
c001f2b5:	55                   	push   ebp
c001f2b6:	57                   	push   edi
c001f2b7:	56                   	push   esi
c001f2b8:	53                   	push   ebx
c001f2b9:	83 ec 1c             	sub    esp,0x1c
c001f2bc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f2c0:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f2c5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f2c8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f2d0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f2d4:	50                   	push   eax
c001f2d5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f2d9:	50                   	push   eax
c001f2da:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f2de:	50                   	push   eax
c001f2df:	53                   	push   ebx
c001f2e0:	e8 9d a1 ff ff       	call   c0019482 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f2e5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f2e8:	83 c4 10             	add    esp,0x10
c001f2eb:	89 c6                	mov    esi,eax
c001f2ed:	80 fa d9             	cmp    dl,0xd9
c001f2f0:	0f 85 52 01 00 00    	jne    c001f448 <Vm::x87Handler(regs*)+0x193>
c001f2f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2fa:	8d 50 20             	lea    edx,[eax+0x20]
c001f2fd:	80 fa 0e             	cmp    dl,0xe
c001f300:	0f 87 86 00 00 00    	ja     c001f38c <Vm::x87Handler(regs*)+0xd7>
c001f306:	0f b6 d2             	movzx  edx,dl
c001f309:	ff 24 95 f4 bb 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd440c]
c001f310:	e8 e7 fc ff ff       	call   c001effc <Vm::fpuGet0()>
c001f315:	eb 05                	jmp    c001f31c <Vm::x87Handler(regs*)+0x67>
c001f317:	e8 e5 fc ff ff       	call   c001f001 <Vm::fpuGet1()>
c001f31c:	57                   	push   edi
c001f31d:	57                   	push   edi
c001f31e:	52                   	push   edx
c001f31f:	50                   	push   eax
c001f320:	e8 e1 fe ff ff       	call   c001f206 <Vm::fpuPush(unsigned long long)>
c001f325:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f329:	83 c4 10             	add    esp,0x10
c001f32c:	b0 01                	mov    al,0x1
c001f32e:	e9 e3 09 00 00       	jmp    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001f333:	83 ec 0c             	sub    esp,0xc
c001f336:	6a 00                	push   0x0
c001f338:	e8 3b fe ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f33d:	59                   	pop    ecx
c001f33e:	5e                   	pop    esi
c001f33f:	52                   	push   edx
c001f340:	50                   	push   eax
c001f341:	e8 c2 fd ff ff       	call   c001f108 <Vm::fpuChs(unsigned long long)>
c001f346:	eb 13                	jmp    c001f35b <Vm::x87Handler(regs*)+0xa6>
c001f348:	83 ec 0c             	sub    esp,0xc
c001f34b:	6a 00                	push   0x0
c001f34d:	e8 26 fe ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f352:	5f                   	pop    edi
c001f353:	5d                   	pop    ebp
c001f354:	52                   	push   edx
c001f355:	50                   	push   eax
c001f356:	e8 a4 fd ff ff       	call   c001f0ff <Vm::fpuAbs(unsigned long long)>
c001f35b:	83 c4 0c             	add    esp,0xc
c001f35e:	52                   	push   edx
c001f35f:	50                   	push   eax
c001f360:	6a 00                	push   0x0
c001f362:	e8 54 fe ff ff       	call   c001f1bb <Vm::fpuSetReg(int, unsigned long long)>
c001f367:	eb bc                	jmp    c001f325 <Vm::x87Handler(regs*)+0x70>
c001f369:	e8 d3 fc ff ff       	call   c001f041 <Vm::fpuGetLog210()>
c001f36e:	eb ac                	jmp    c001f31c <Vm::x87Handler(regs*)+0x67>
c001f370:	e8 9c fc ff ff       	call   c001f011 <Vm::fpuGetLog2E()>
c001f375:	eb a5                	jmp    c001f31c <Vm::x87Handler(regs*)+0x67>
c001f377:	e8 8d fc ff ff       	call   c001f009 <Vm::fpuGetPi()>
c001f37c:	eb 9e                	jmp    c001f31c <Vm::x87Handler(regs*)+0x67>
c001f37e:	e8 d6 fc ff ff       	call   c001f059 <Vm::fpuGetLog102()>
c001f383:	eb 97                	jmp    c001f31c <Vm::x87Handler(regs*)+0x67>
c001f385:	e8 9f fc ff ff       	call   c001f029 <Vm::fpuGetLogE2()>
c001f38a:	eb 90                	jmp    c001f31c <Vm::x87Handler(regs*)+0x67>
c001f38c:	8d 50 40             	lea    edx,[eax+0x40]
c001f38f:	80 fa 07             	cmp    dl,0x7
c001f392:	77 15                	ja     c001f3a9 <Vm::x87Handler(regs*)+0xf4>
c001f394:	83 ec 0c             	sub    esp,0xc
c001f397:	2d c0 00 00 00       	sub    eax,0xc0
c001f39c:	50                   	push   eax
c001f39d:	e8 d6 fd ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f3a2:	59                   	pop    ecx
c001f3a3:	5e                   	pop    esi
c001f3a4:	e9 75 ff ff ff       	jmp    c001f31e <Vm::x87Handler(regs*)+0x69>
c001f3a9:	8d 50 38             	lea    edx,[eax+0x38]
c001f3ac:	80 fa 07             	cmp    dl,0x7
c001f3af:	77 3c                	ja     c001f3ed <Vm::x87Handler(regs*)+0x138>
c001f3b1:	83 ec 0c             	sub    esp,0xc
c001f3b4:	2d c8 00 00 00       	sub    eax,0xc8
c001f3b9:	50                   	push   eax
c001f3ba:	e8 b9 fd ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f3bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3c6:	89 c6                	mov    esi,eax
c001f3c8:	89 d7                	mov    edi,edx
c001f3ca:	e8 a9 fd ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f3cf:	83 c4 0c             	add    esp,0xc
c001f3d2:	52                   	push   edx
c001f3d3:	50                   	push   eax
c001f3d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3d8:	2d c8 00 00 00       	sub    eax,0xc8
c001f3dd:	50                   	push   eax
c001f3de:	e8 d8 fd ff ff       	call   c001f1bb <Vm::fpuSetReg(int, unsigned long long)>
c001f3e3:	83 c4 0c             	add    esp,0xc
c001f3e6:	57                   	push   edi
c001f3e7:	56                   	push   esi
c001f3e8:	e9 73 ff ff ff       	jmp    c001f360 <Vm::x87Handler(regs*)+0xab>
c001f3ed:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3f1:	84 d2                	test   dl,dl
c001f3f3:	75 0f                	jne    c001f404 <Vm::x87Handler(regs*)+0x14f>
c001f3f5:	83 ec 0c             	sub    esp,0xc
c001f3f8:	ff 36                	push   DWORD PTR [esi]
c001f3fa:	e8 c8 fa ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001f3ff:	e9 bf 00 00 00       	jmp    c001f4c3 <Vm::x87Handler(regs*)+0x20e>
c001f404:	80 fa 03             	cmp    dl,0x3
c001f407:	75 13                	jne    c001f41c <Vm::x87Handler(regs*)+0x167>
c001f409:	e8 55 fe ff ff       	call   c001f263 <Vm::fpuPop()>
c001f40e:	55                   	push   ebp
c001f40f:	55                   	push   ebp
c001f410:	52                   	push   edx
c001f411:	50                   	push   eax
c001f412:	e8 4c fa ff ff       	call   c001ee63 <Vm::fpuInternalTo32(unsigned long long)>
c001f417:	e9 88 00 00 00       	jmp    c001f4a4 <Vm::x87Handler(regs*)+0x1ef>
c001f41c:	80 fa 05             	cmp    dl,0x5
c001f41f:	75 0e                	jne    c001f42f <Vm::x87Handler(regs*)+0x17a>
c001f421:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f424:	66 a3 42 0d 03 c0    	mov    ds:0xc0030d42,ax
c001f42a:	e9 df 00 00 00       	jmp    c001f50e <Vm::x87Handler(regs*)+0x259>
c001f42f:	31 c0                	xor    eax,eax
c001f431:	80 fa 07             	cmp    dl,0x7
c001f434:	0f 85 dc 08 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001f43a:	66 a1 42 0d 03 c0    	mov    ax,ds:0xc0030d42
c001f440:	66 89 06             	mov    WORD PTR [esi],ax
c001f443:	e9 c6 00 00 00       	jmp    c001f50e <Vm::x87Handler(regs*)+0x259>
c001f448:	80 fa d8             	cmp    dl,0xd8
c001f44b:	0f 84 c9 00 00 00    	je     c001f51a <Vm::x87Handler(regs*)+0x265>
c001f451:	80 fa dc             	cmp    dl,0xdc
c001f454:	0f 84 0d 02 00 00    	je     c001f667 <Vm::x87Handler(regs*)+0x3b2>
c001f45a:	80 fa de             	cmp    dl,0xde
c001f45d:	0f 84 cd 02 00 00    	je     c001f730 <Vm::x87Handler(regs*)+0x47b>
c001f463:	80 fa dd             	cmp    dl,0xdd
c001f466:	0f 84 5f 04 00 00    	je     c001f8cb <Vm::x87Handler(regs*)+0x616>
c001f46c:	80 fa da             	cmp    dl,0xda
c001f46f:	0f 84 24 05 00 00    	je     c001f999 <Vm::x87Handler(regs*)+0x6e4>
c001f475:	80 fa df             	cmp    dl,0xdf
c001f478:	0f 84 68 05 00 00    	je     c001f9e6 <Vm::x87Handler(regs*)+0x731>
c001f47e:	31 c0                	xor    eax,eax
c001f480:	80 fa db             	cmp    dl,0xdb
c001f483:	0f 85 8d 08 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001f489:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f48d:	80 fa 03             	cmp    dl,0x3
c001f490:	0f 85 70 06 00 00    	jne    c001fb06 <Vm::x87Handler(regs*)+0x851>
c001f496:	e8 c8 fd ff ff       	call   c001f263 <Vm::fpuPop()>
c001f49b:	55                   	push   ebp
c001f49c:	55                   	push   ebp
c001f49d:	52                   	push   edx
c001f49e:	50                   	push   eax
c001f49f:	e8 71 fa ff ff       	call   c001ef15 <Vm::fpuFloatToLong(unsigned long long)>
c001f4a4:	83 c4 10             	add    esp,0x10
c001f4a7:	89 06                	mov    DWORD PTR [esi],eax
c001f4a9:	eb 63                	jmp    c001f50e <Vm::x87Handler(regs*)+0x259>
c001f4ab:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4af:	84 d2                	test   dl,dl
c001f4b1:	0f 85 e6 05 00 00    	jne    c001fa9d <Vm::x87Handler(regs*)+0x7e8>
c001f4b7:	57                   	push   edi
c001f4b8:	57                   	push   edi
c001f4b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4bc:	ff 36                	push   DWORD PTR [esi]
c001f4be:	e8 49 fa ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001f4c3:	5e                   	pop    esi
c001f4c4:	5f                   	pop    edi
c001f4c5:	52                   	push   edx
c001f4c6:	50                   	push   eax
c001f4c7:	e8 3a fd ff ff       	call   c001f206 <Vm::fpuPush(unsigned long long)>
c001f4cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f4d0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f4d3:	e9 51 fe ff ff       	jmp    c001f329 <Vm::x87Handler(regs*)+0x74>
c001f4d8:	80 fa 03             	cmp    dl,0x3
c001f4db:	0f 85 d7 06 00 00    	jne    c001fbb8 <Vm::x87Handler(regs*)+0x903>
c001f4e1:	57                   	push   edi
c001f4e2:	57                   	push   edi
c001f4e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f4e6:	ff 36                	push   DWORD PTR [esi]
c001f4e8:	e8 1f fa ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001f4ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4f4:	89 c6                	mov    esi,eax
c001f4f6:	89 d7                	mov    edi,edx
c001f4f8:	e8 7b fc ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	52                   	push   edx
c001f500:	50                   	push   eax
c001f501:	e8 95 fb ff ff       	call   c001f09b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f506:	83 c4 20             	add    esp,0x20
c001f509:	e8 55 fd ff ff       	call   c001f263 <Vm::fpuPop()>
c001f50e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f512:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f515:	e9 12 fe ff ff       	jmp    c001f32c <Vm::x87Handler(regs*)+0x77>
c001f51a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f51e:	8d 50 40             	lea    edx,[eax+0x40]
c001f521:	80 fa 07             	cmp    dl,0x7
c001f524:	77 29                	ja     c001f54f <Vm::x87Handler(regs*)+0x29a>
c001f526:	83 ec 0c             	sub    esp,0xc
c001f529:	2d c0 00 00 00       	sub    eax,0xc0
c001f52e:	50                   	push   eax
c001f52f:	e8 44 fc ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f534:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f53b:	89 c6                	mov    esi,eax
c001f53d:	89 d7                	mov    edi,edx
c001f53f:	e8 34 fc ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f544:	57                   	push   edi
c001f545:	56                   	push   esi
c001f546:	52                   	push   edx
c001f547:	50                   	push   eax
c001f548:	e8 a1 fb ff ff       	call   c001f0ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f54d:	eb 2f                	jmp    c001f57e <Vm::x87Handler(regs*)+0x2c9>
c001f54f:	8d 50 38             	lea    edx,[eax+0x38]
c001f552:	80 fa 07             	cmp    dl,0x7
c001f555:	77 2f                	ja     c001f586 <Vm::x87Handler(regs*)+0x2d1>
c001f557:	83 ec 0c             	sub    esp,0xc
c001f55a:	2d c8 00 00 00       	sub    eax,0xc8
c001f55f:	50                   	push   eax
c001f560:	e8 13 fc ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f565:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f56c:	89 c6                	mov    esi,eax
c001f56e:	89 d7                	mov    edi,edx
c001f570:	e8 03 fc ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f575:	57                   	push   edi
c001f576:	56                   	push   esi
c001f577:	52                   	push   edx
c001f578:	50                   	push   eax
c001f579:	e8 a9 fb ff ff       	call   c001f127 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f57e:	83 c4 1c             	add    esp,0x1c
c001f581:	e9 d8 fd ff ff       	jmp    c001f35e <Vm::x87Handler(regs*)+0xa9>
c001f586:	8d 50 30             	lea    edx,[eax+0x30]
c001f589:	80 fa 07             	cmp    dl,0x7
c001f58c:	77 0d                	ja     c001f59b <Vm::x87Handler(regs*)+0x2e6>
c001f58e:	83 ec 0c             	sub    esp,0xc
c001f591:	2d d0 00 00 00       	sub    eax,0xd0
c001f596:	e9 99 03 00 00       	jmp    c001f934 <Vm::x87Handler(regs*)+0x67f>
c001f59b:	8d 50 28             	lea    edx,[eax+0x28]
c001f59e:	80 fa 07             	cmp    dl,0x7
c001f5a1:	77 0d                	ja     c001f5b0 <Vm::x87Handler(regs*)+0x2fb>
c001f5a3:	83 ec 0c             	sub    esp,0xc
c001f5a6:	2d d8 00 00 00       	sub    eax,0xd8
c001f5ab:	e9 c0 03 00 00       	jmp    c001f970 <Vm::x87Handler(regs*)+0x6bb>
c001f5b0:	8d 50 20             	lea    edx,[eax+0x20]
c001f5b3:	80 fa 07             	cmp    dl,0x7
c001f5b6:	77 1b                	ja     c001f5d3 <Vm::x87Handler(regs*)+0x31e>
c001f5b8:	83 ec 0c             	sub    esp,0xc
c001f5bb:	2d e0 00 00 00       	sub    eax,0xe0
c001f5c0:	50                   	push   eax
c001f5c1:	e8 b2 fb ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f5c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5cd:	89 c6                	mov    esi,eax
c001f5cf:	89 d7                	mov    edi,edx
c001f5d1:	eb 22                	jmp    c001f5f5 <Vm::x87Handler(regs*)+0x340>
c001f5d3:	8d 50 18             	lea    edx,[eax+0x18]
c001f5d6:	80 fa 07             	cmp    dl,0x7
c001f5d9:	77 2d                	ja     c001f608 <Vm::x87Handler(regs*)+0x353>
c001f5db:	83 ec 0c             	sub    esp,0xc
c001f5de:	6a 00                	push   0x0
c001f5e0:	e8 93 fb ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f5e5:	89 c6                	mov    esi,eax
c001f5e7:	89 d7                	mov    edi,edx
c001f5e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5ed:	2d e8 00 00 00       	sub    eax,0xe8
c001f5f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f5f5:	e8 7e fb ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f5fa:	57                   	push   edi
c001f5fb:	56                   	push   esi
c001f5fc:	52                   	push   edx
c001f5fd:	50                   	push   eax
c001f5fe:	e8 15 fb ff ff       	call   c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f603:	e9 76 ff ff ff       	jmp    c001f57e <Vm::x87Handler(regs*)+0x2c9>
c001f608:	8d 50 10             	lea    edx,[eax+0x10]
c001f60b:	80 fa 07             	cmp    dl,0x7
c001f60e:	77 1b                	ja     c001f62b <Vm::x87Handler(regs*)+0x376>
c001f610:	83 ec 0c             	sub    esp,0xc
c001f613:	2d f0 00 00 00       	sub    eax,0xf0
c001f618:	50                   	push   eax
c001f619:	e8 5a fb ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f61e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f625:	89 c6                	mov    esi,eax
c001f627:	89 d7                	mov    edi,edx
c001f629:	eb 22                	jmp    c001f64d <Vm::x87Handler(regs*)+0x398>
c001f62b:	3c f7                	cmp    al,0xf7
c001f62d:	0f 86 d1 03 00 00    	jbe    c001fa04 <Vm::x87Handler(regs*)+0x74f>
c001f633:	83 ec 0c             	sub    esp,0xc
c001f636:	6a 00                	push   0x0
c001f638:	e8 3b fb ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f63d:	89 c6                	mov    esi,eax
c001f63f:	89 d7                	mov    edi,edx
c001f641:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f645:	2d f8 00 00 00       	sub    eax,0xf8
c001f64a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f64d:	e8 26 fb ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f652:	57                   	push   edi
c001f653:	56                   	push   esi
c001f654:	52                   	push   edx
c001f655:	50                   	push   eax
c001f656:	e8 eb fa ff ff       	call   c001f146 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f65b:	83 c4 1c             	add    esp,0x1c
c001f65e:	52                   	push   edx
c001f65f:	50                   	push   eax
c001f660:	6a 00                	push   0x0
c001f662:	e9 51 02 00 00       	jmp    c001f8b8 <Vm::x87Handler(regs*)+0x603>
c001f667:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f66b:	8d 50 40             	lea    edx,[eax+0x40]
c001f66e:	80 fa 07             	cmp    dl,0x7
c001f671:	77 37                	ja     c001f6aa <Vm::x87Handler(regs*)+0x3f5>
c001f673:	83 ec 0c             	sub    esp,0xc
c001f676:	2d c0 00 00 00       	sub    eax,0xc0
c001f67b:	50                   	push   eax
c001f67c:	e8 f7 fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f681:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f688:	89 c6                	mov    esi,eax
c001f68a:	89 d7                	mov    edi,edx
c001f68c:	e8 e7 fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f691:	57                   	push   edi
c001f692:	56                   	push   esi
c001f693:	52                   	push   edx
c001f694:	50                   	push   eax
c001f695:	e8 54 fa ff ff       	call   c001f0ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f69a:	83 c4 1c             	add    esp,0x1c
c001f69d:	52                   	push   edx
c001f69e:	50                   	push   eax
c001f69f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6a3:	2d c0 00 00 00       	sub    eax,0xc0
c001f6a8:	eb 3d                	jmp    c001f6e7 <Vm::x87Handler(regs*)+0x432>
c001f6aa:	8d 50 38             	lea    edx,[eax+0x38]
c001f6ad:	80 fa 07             	cmp    dl,0x7
c001f6b0:	77 3b                	ja     c001f6ed <Vm::x87Handler(regs*)+0x438>
c001f6b2:	83 ec 0c             	sub    esp,0xc
c001f6b5:	2d c8 00 00 00       	sub    eax,0xc8
c001f6ba:	50                   	push   eax
c001f6bb:	e8 b8 fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f6c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6c7:	89 c6                	mov    esi,eax
c001f6c9:	89 d7                	mov    edi,edx
c001f6cb:	e8 a8 fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f6d0:	57                   	push   edi
c001f6d1:	56                   	push   esi
c001f6d2:	52                   	push   edx
c001f6d3:	50                   	push   eax
c001f6d4:	e8 4e fa ff ff       	call   c001f127 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f6d9:	83 c4 1c             	add    esp,0x1c
c001f6dc:	52                   	push   edx
c001f6dd:	50                   	push   eax
c001f6de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6e2:	2d c8 00 00 00       	sub    eax,0xc8
c001f6e7:	50                   	push   eax
c001f6e8:	e9 75 fc ff ff       	jmp    c001f362 <Vm::x87Handler(regs*)+0xad>
c001f6ed:	83 c0 18             	add    eax,0x18
c001f6f0:	3c 07                	cmp    al,0x7
c001f6f2:	0f 87 3b 04 00 00    	ja     c001fb33 <Vm::x87Handler(regs*)+0x87e>
c001f6f8:	83 ec 0c             	sub    esp,0xc
c001f6fb:	6a 00                	push   0x0
c001f6fd:	e8 76 fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f702:	89 c6                	mov    esi,eax
c001f704:	89 d7                	mov    edi,edx
c001f706:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f70a:	2d e8 00 00 00       	sub    eax,0xe8
c001f70f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f712:	e8 61 fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f717:	57                   	push   edi
c001f718:	56                   	push   esi
c001f719:	52                   	push   edx
c001f71a:	50                   	push   eax
c001f71b:	e8 f8 f9 ff ff       	call   c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f720:	83 c4 1c             	add    esp,0x1c
c001f723:	52                   	push   edx
c001f724:	50                   	push   eax
c001f725:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f729:	2d e8 00 00 00       	sub    eax,0xe8
c001f72e:	eb b7                	jmp    c001f6e7 <Vm::x87Handler(regs*)+0x432>
c001f730:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f734:	8d 50 40             	lea    edx,[eax+0x40]
c001f737:	80 fa 07             	cmp    dl,0x7
c001f73a:	77 3a                	ja     c001f776 <Vm::x87Handler(regs*)+0x4c1>
c001f73c:	83 ec 0c             	sub    esp,0xc
c001f73f:	2d c0 00 00 00       	sub    eax,0xc0
c001f744:	50                   	push   eax
c001f745:	e8 2e fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f74a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f751:	89 c6                	mov    esi,eax
c001f753:	89 d7                	mov    edi,edx
c001f755:	e8 1e fa ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f75a:	57                   	push   edi
c001f75b:	56                   	push   esi
c001f75c:	52                   	push   edx
c001f75d:	50                   	push   eax
c001f75e:	e8 8b f9 ff ff       	call   c001f0ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f763:	83 c4 1c             	add    esp,0x1c
c001f766:	52                   	push   edx
c001f767:	50                   	push   eax
c001f768:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f76c:	2d c0 00 00 00       	sub    eax,0xc0
c001f771:	e9 9e 01 00 00       	jmp    c001f914 <Vm::x87Handler(regs*)+0x65f>
c001f776:	8d 50 20             	lea    edx,[eax+0x20]
c001f779:	80 fa 07             	cmp    dl,0x7
c001f77c:	77 3a                	ja     c001f7b8 <Vm::x87Handler(regs*)+0x503>
c001f77e:	83 ec 0c             	sub    esp,0xc
c001f781:	2d e0 00 00 00       	sub    eax,0xe0
c001f786:	50                   	push   eax
c001f787:	e8 ec f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f78c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f793:	89 c6                	mov    esi,eax
c001f795:	89 d7                	mov    edi,edx
c001f797:	e8 dc f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f79c:	57                   	push   edi
c001f79d:	56                   	push   esi
c001f79e:	52                   	push   edx
c001f79f:	50                   	push   eax
c001f7a0:	e8 73 f9 ff ff       	call   c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7a5:	83 c4 1c             	add    esp,0x1c
c001f7a8:	52                   	push   edx
c001f7a9:	50                   	push   eax
c001f7aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7ae:	2d e0 00 00 00       	sub    eax,0xe0
c001f7b3:	e9 5c 01 00 00       	jmp    c001f914 <Vm::x87Handler(regs*)+0x65f>
c001f7b8:	8d 50 18             	lea    edx,[eax+0x18]
c001f7bb:	80 fa 07             	cmp    dl,0x7
c001f7be:	77 3b                	ja     c001f7fb <Vm::x87Handler(regs*)+0x546>
c001f7c0:	83 ec 0c             	sub    esp,0xc
c001f7c3:	6a 00                	push   0x0
c001f7c5:	e8 ae f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f7ca:	89 c6                	mov    esi,eax
c001f7cc:	89 d7                	mov    edi,edx
c001f7ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d2:	2d e8 00 00 00       	sub    eax,0xe8
c001f7d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7da:	e8 99 f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f7df:	57                   	push   edi
c001f7e0:	56                   	push   esi
c001f7e1:	52                   	push   edx
c001f7e2:	50                   	push   eax
c001f7e3:	e8 30 f9 ff ff       	call   c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7e8:	83 c4 1c             	add    esp,0x1c
c001f7eb:	52                   	push   edx
c001f7ec:	50                   	push   eax
c001f7ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f1:	2d e8 00 00 00       	sub    eax,0xe8
c001f7f6:	e9 19 01 00 00       	jmp    c001f914 <Vm::x87Handler(regs*)+0x65f>
c001f7fb:	8d 50 38             	lea    edx,[eax+0x38]
c001f7fe:	80 fa 07             	cmp    dl,0x7
c001f801:	77 37                	ja     c001f83a <Vm::x87Handler(regs*)+0x585>
c001f803:	83 ec 0c             	sub    esp,0xc
c001f806:	2d c8 00 00 00       	sub    eax,0xc8
c001f80b:	50                   	push   eax
c001f80c:	e8 67 f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f811:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f818:	89 c6                	mov    esi,eax
c001f81a:	89 d7                	mov    edi,edx
c001f81c:	e8 57 f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f821:	57                   	push   edi
c001f822:	56                   	push   esi
c001f823:	52                   	push   edx
c001f824:	50                   	push   eax
c001f825:	e8 fd f8 ff ff       	call   c001f127 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f82a:	83 c4 1c             	add    esp,0x1c
c001f82d:	52                   	push   edx
c001f82e:	50                   	push   eax
c001f82f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f833:	2d c8 00 00 00       	sub    eax,0xc8
c001f838:	eb 7d                	jmp    c001f8b7 <Vm::x87Handler(regs*)+0x602>
c001f83a:	3c f7                	cmp    al,0xf7
c001f83c:	76 38                	jbe    c001f876 <Vm::x87Handler(regs*)+0x5c1>
c001f83e:	83 ec 0c             	sub    esp,0xc
c001f841:	6a 00                	push   0x0
c001f843:	e8 30 f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f848:	89 c6                	mov    esi,eax
c001f84a:	89 d7                	mov    edi,edx
c001f84c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f850:	2d f8 00 00 00       	sub    eax,0xf8
c001f855:	89 04 24             	mov    DWORD PTR [esp],eax
c001f858:	e8 1b f9 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f85d:	57                   	push   edi
c001f85e:	56                   	push   esi
c001f85f:	52                   	push   edx
c001f860:	50                   	push   eax
c001f861:	e8 e0 f8 ff ff       	call   c001f146 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f866:	83 c4 1c             	add    esp,0x1c
c001f869:	52                   	push   edx
c001f86a:	50                   	push   eax
c001f86b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f86f:	2d f8 00 00 00       	sub    eax,0xf8
c001f874:	eb 41                	jmp    c001f8b7 <Vm::x87Handler(regs*)+0x602>
c001f876:	8d 50 10             	lea    edx,[eax+0x10]
c001f879:	80 fa 07             	cmp    dl,0x7
c001f87c:	0f 87 5a 01 00 00    	ja     c001f9dc <Vm::x87Handler(regs*)+0x727>
c001f882:	83 ec 0c             	sub    esp,0xc
c001f885:	2d f0 00 00 00       	sub    eax,0xf0
c001f88a:	50                   	push   eax
c001f88b:	e8 e8 f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f897:	89 c6                	mov    esi,eax
c001f899:	89 d7                	mov    edi,edx
c001f89b:	e8 d8 f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f8a0:	57                   	push   edi
c001f8a1:	56                   	push   esi
c001f8a2:	52                   	push   edx
c001f8a3:	50                   	push   eax
c001f8a4:	e8 9d f8 ff ff       	call   c001f146 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f8a9:	83 c4 1c             	add    esp,0x1c
c001f8ac:	52                   	push   edx
c001f8ad:	50                   	push   eax
c001f8ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8b2:	2d f0 00 00 00       	sub    eax,0xf0
c001f8b7:	50                   	push   eax
c001f8b8:	e8 fe f8 ff ff       	call   c001f1bb <Vm::fpuSetReg(int, unsigned long long)>
c001f8bd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8c1:	e8 9d f9 ff ff       	call   c001f263 <Vm::fpuPop()>
c001f8c6:	e9 5e fa ff ff       	jmp    c001f329 <Vm::x87Handler(regs*)+0x74>
c001f8cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8cf:	8d 50 30             	lea    edx,[eax+0x30]
c001f8d2:	80 fa 07             	cmp    dl,0x7
c001f8d5:	77 1d                	ja     c001f8f4 <Vm::x87Handler(regs*)+0x63f>
c001f8d7:	83 ec 0c             	sub    esp,0xc
c001f8da:	6a 00                	push   0x0
c001f8dc:	e8 97 f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f8e1:	83 c4 0c             	add    esp,0xc
c001f8e4:	52                   	push   edx
c001f8e5:	50                   	push   eax
c001f8e6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8ea:	2d d0 00 00 00       	sub    eax,0xd0
c001f8ef:	e9 f3 fd ff ff       	jmp    c001f6e7 <Vm::x87Handler(regs*)+0x432>
c001f8f4:	8d 50 28             	lea    edx,[eax+0x28]
c001f8f7:	80 fa 07             	cmp    dl,0x7
c001f8fa:	77 28                	ja     c001f924 <Vm::x87Handler(regs*)+0x66f>
c001f8fc:	83 ec 0c             	sub    esp,0xc
c001f8ff:	6a 00                	push   0x0
c001f901:	e8 72 f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f906:	83 c4 0c             	add    esp,0xc
c001f909:	52                   	push   edx
c001f90a:	50                   	push   eax
c001f90b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f90f:	2d d8 00 00 00       	sub    eax,0xd8
c001f914:	50                   	push   eax
c001f915:	e8 a1 f8 ff ff       	call   c001f1bb <Vm::fpuSetReg(int, unsigned long long)>
c001f91a:	e8 44 f9 ff ff       	call   c001f263 <Vm::fpuPop()>
c001f91f:	e9 01 fa ff ff       	jmp    c001f325 <Vm::x87Handler(regs*)+0x70>
c001f924:	8d 50 20             	lea    edx,[eax+0x20]
c001f927:	80 fa 07             	cmp    dl,0x7
c001f92a:	77 30                	ja     c001f95c <Vm::x87Handler(regs*)+0x6a7>
c001f92c:	83 ec 0c             	sub    esp,0xc
c001f92f:	2d e0 00 00 00       	sub    eax,0xe0
c001f934:	50                   	push   eax
c001f935:	e8 3e f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f93a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f941:	89 c6                	mov    esi,eax
c001f943:	89 d7                	mov    edi,edx
c001f945:	e8 2e f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f94a:	57                   	push   edi
c001f94b:	56                   	push   esi
c001f94c:	52                   	push   edx
c001f94d:	50                   	push   eax
c001f94e:	e8 48 f7 ff ff       	call   c001f09b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f953:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f957:	e9 54 02 00 00       	jmp    c001fbb0 <Vm::x87Handler(regs*)+0x8fb>
c001f95c:	8d 50 18             	lea    edx,[eax+0x18]
c001f95f:	80 fa 07             	cmp    dl,0x7
c001f962:	0f 87 43 fb ff ff    	ja     c001f4ab <Vm::x87Handler(regs*)+0x1f6>
c001f968:	83 ec 0c             	sub    esp,0xc
c001f96b:	2d e8 00 00 00       	sub    eax,0xe8
c001f970:	50                   	push   eax
c001f971:	e8 02 f8 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f976:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f97d:	89 c6                	mov    esi,eax
c001f97f:	89 d7                	mov    edi,edx
c001f981:	e8 f2 f7 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f986:	57                   	push   edi
c001f987:	56                   	push   esi
c001f988:	52                   	push   edx
c001f989:	50                   	push   eax
c001f98a:	e8 0c f7 ff ff       	call   c001f09b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f98f:	83 c4 20             	add    esp,0x20
c001f992:	e8 cc f8 ff ff       	call   c001f263 <Vm::fpuPop()>
c001f997:	eb 62                	jmp    c001f9fb <Vm::x87Handler(regs*)+0x746>
c001f999:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f99d:	0f 85 0f 01 00 00    	jne    c001fab2 <Vm::x87Handler(regs*)+0x7fd>
c001f9a3:	83 ec 0c             	sub    esp,0xc
c001f9a6:	6a 01                	push   0x1
c001f9a8:	e8 cb f7 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f9ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9b4:	89 c6                	mov    esi,eax
c001f9b6:	89 d7                	mov    edi,edx
c001f9b8:	e8 bb f7 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001f9bd:	57                   	push   edi
c001f9be:	56                   	push   esi
c001f9bf:	52                   	push   edx
c001f9c0:	50                   	push   eax
c001f9c1:	e8 d5 f6 ff ff       	call   c001f09b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9c6:	83 c4 20             	add    esp,0x20
c001f9c9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9cd:	e8 91 f8 ff ff       	call   c001f263 <Vm::fpuPop()>
c001f9d2:	e8 8c f8 ff ff       	call   c001f263 <Vm::fpuPop()>
c001f9d7:	e9 50 f9 ff ff       	jmp    c001f32c <Vm::x87Handler(regs*)+0x77>
c001f9dc:	3c d9                	cmp    al,0xd9
c001f9de:	0f 85 b5 02 00 00    	jne    c001fc99 <Vm::x87Handler(regs*)+0x9e4>
c001f9e4:	eb bd                	jmp    c001f9a3 <Vm::x87Handler(regs*)+0x6ee>
c001f9e6:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f9ea:	0f 85 ea 02 00 00    	jne    c001fcda <Vm::x87Handler(regs*)+0xa25>
c001f9f0:	0f b7 05 40 0d 03 c0 	movzx  eax,WORD PTR ds:0xc0030d40
c001f9f7:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f9fb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9ff:	e9 28 f9 ff ff       	jmp    c001f32c <Vm::x87Handler(regs*)+0x77>
c001fa04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa08:	84 d2                	test   dl,dl
c001fa0a:	75 0f                	jne    c001fa1b <Vm::x87Handler(regs*)+0x766>
c001fa0c:	83 ec 0c             	sub    esp,0xc
c001fa0f:	ff 36                	push   DWORD PTR [esi]
c001fa11:	e8 b1 f4 ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001fa16:	e9 2c 01 00 00       	jmp    c001fb47 <Vm::x87Handler(regs*)+0x892>
c001fa1b:	80 fa 01             	cmp    dl,0x1
c001fa1e:	75 0f                	jne    c001fa2f <Vm::x87Handler(regs*)+0x77a>
c001fa20:	83 ec 0c             	sub    esp,0xc
c001fa23:	ff 36                	push   DWORD PTR [esi]
c001fa25:	e8 9d f4 ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001fa2a:	e9 81 02 00 00       	jmp    c001fcb0 <Vm::x87Handler(regs*)+0x9fb>
c001fa2f:	80 fa 04             	cmp    dl,0x4
c001fa32:	75 0f                	jne    c001fa43 <Vm::x87Handler(regs*)+0x78e>
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	ff 36                	push   DWORD PTR [esi]
c001fa39:	e8 89 f4 ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001fa3e:	e9 86 01 00 00       	jmp    c001fbc9 <Vm::x87Handler(regs*)+0x914>
c001fa43:	80 fa 05             	cmp    dl,0x5
c001fa46:	75 1b                	jne    c001fa63 <Vm::x87Handler(regs*)+0x7ae>
c001fa48:	83 ec 0c             	sub    esp,0xc
c001fa4b:	6a 00                	push   0x0
c001fa4d:	e8 26 f7 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fa52:	89 c7                	mov    edi,eax
c001fa54:	89 d5                	mov    ebp,edx
c001fa56:	58                   	pop    eax
c001fa57:	ff 36                	push   DWORD PTR [esi]
c001fa59:	e8 69 f4 ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001fa5e:	e9 a3 01 00 00       	jmp    c001fc06 <Vm::x87Handler(regs*)+0x951>
c001fa63:	80 fa 06             	cmp    dl,0x6
c001fa66:	75 0f                	jne    c001fa77 <Vm::x87Handler(regs*)+0x7c2>
c001fa68:	83 ec 0c             	sub    esp,0xc
c001fa6b:	ff 36                	push   DWORD PTR [esi]
c001fa6d:	e8 55 f4 ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001fa72:	e9 ae 01 00 00       	jmp    c001fc25 <Vm::x87Handler(regs*)+0x970>
c001fa77:	31 c0                	xor    eax,eax
c001fa79:	80 fa 07             	cmp    dl,0x7
c001fa7c:	0f 85 94 02 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fa82:	83 ec 0c             	sub    esp,0xc
c001fa85:	6a 00                	push   0x0
c001fa87:	e8 ec f6 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fa8c:	89 c7                	mov    edi,eax
c001fa8e:	89 d5                	mov    ebp,edx
c001fa90:	58                   	pop    eax
c001fa91:	ff 36                	push   DWORD PTR [esi]
c001fa93:	e8 2f f4 ff ff       	call   c001eec7 <Vm::fpu32ToInternal(unsigned int)>
c001fa98:	e9 cb 01 00 00       	jmp    c001fc68 <Vm::x87Handler(regs*)+0x9b3>
c001fa9d:	80 fa 03             	cmp    dl,0x3
c001faa0:	0f 85 d3 01 00 00    	jne    c001fc79 <Vm::x87Handler(regs*)+0x9c4>
c001faa6:	e8 b8 f7 ff ff       	call   c001f263 <Vm::fpuPop()>
c001faab:	51                   	push   ecx
c001faac:	51                   	push   ecx
c001faad:	e9 de 01 00 00       	jmp    c001fc90 <Vm::x87Handler(regs*)+0x9db>
c001fab2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fab6:	80 fa 01             	cmp    dl,0x1
c001fab9:	75 09                	jne    c001fac4 <Vm::x87Handler(regs*)+0x80f>
c001fabb:	57                   	push   edi
c001fabc:	57                   	push   edi
c001fabd:	8b 06                	mov    eax,DWORD PTR [esi]
c001fabf:	e9 e3 01 00 00       	jmp    c001fca7 <Vm::x87Handler(regs*)+0x9f2>
c001fac4:	80 fa 04             	cmp    dl,0x4
c001fac7:	75 12                	jne    c001fadb <Vm::x87Handler(regs*)+0x826>
c001fac9:	31 d2                	xor    edx,edx
c001facb:	51                   	push   ecx
c001facc:	51                   	push   ecx
c001facd:	8b 06                	mov    eax,DWORD PTR [esi]
c001facf:	52                   	push   edx
c001fad0:	50                   	push   eax
c001fad1:	e8 d0 f4 ff ff       	call   c001efa6 <Vm::fpuLongToFloat(long long)>
c001fad6:	e9 ee 00 00 00       	jmp    c001fbc9 <Vm::x87Handler(regs*)+0x914>
c001fadb:	31 c0                	xor    eax,eax
c001fadd:	80 fa 07             	cmp    dl,0x7
c001fae0:	0f 85 30 02 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fae6:	83 ec 0c             	sub    esp,0xc
c001fae9:	6a 00                	push   0x0
c001faeb:	e8 88 f6 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001faf0:	89 c7                	mov    edi,eax
c001faf2:	89 d5                	mov    ebp,edx
c001faf4:	58                   	pop    eax
c001faf5:	8b 06                	mov    eax,DWORD PTR [esi]
c001faf7:	5a                   	pop    edx
c001faf8:	31 d2                	xor    edx,edx
c001fafa:	52                   	push   edx
c001fafb:	50                   	push   eax
c001fafc:	e8 a5 f4 ff ff       	call   c001efa6 <Vm::fpuLongToFloat(long long)>
c001fb01:	e9 62 01 00 00       	jmp    c001fc68 <Vm::x87Handler(regs*)+0x9b3>
c001fb06:	84 d2                	test   dl,dl
c001fb08:	75 0d                	jne    c001fb17 <Vm::x87Handler(regs*)+0x862>
c001fb0a:	31 d2                	xor    edx,edx
c001fb0c:	55                   	push   ebp
c001fb0d:	55                   	push   ebp
c001fb0e:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb10:	52                   	push   edx
c001fb11:	50                   	push   eax
c001fb12:	e9 d3 01 00 00       	jmp    c001fcea <Vm::x87Handler(regs*)+0xa35>
c001fb17:	31 c0                	xor    eax,eax
c001fb19:	80 fa 02             	cmp    dl,0x2
c001fb1c:	0f 85 f4 01 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fb22:	83 ec 0c             	sub    esp,0xc
c001fb25:	6a 00                	push   0x0
c001fb27:	e8 4c f6 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fb2c:	59                   	pop    ecx
c001fb2d:	5f                   	pop    edi
c001fb2e:	e9 6a f9 ff ff       	jmp    c001f49d <Vm::x87Handler(regs*)+0x1e8>
c001fb33:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb37:	84 d2                	test   dl,dl
c001fb39:	75 2a                	jne    c001fb65 <Vm::x87Handler(regs*)+0x8b0>
c001fb3b:	50                   	push   eax
c001fb3c:	50                   	push   eax
c001fb3d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb40:	ff 36                	push   DWORD PTR [esi]
c001fb42:	e8 c5 f3 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fb47:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb4e:	89 c6                	mov    esi,eax
c001fb50:	89 d7                	mov    edi,edx
c001fb52:	e8 21 f6 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fb57:	57                   	push   edi
c001fb58:	56                   	push   esi
c001fb59:	52                   	push   edx
c001fb5a:	50                   	push   eax
c001fb5b:	e8 8e f5 ff ff       	call   c001f0ee <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb60:	e9 64 01 00 00       	jmp    c001fcc9 <Vm::x87Handler(regs*)+0xa14>
c001fb65:	80 fa 01             	cmp    dl,0x1
c001fb68:	75 11                	jne    c001fb7b <Vm::x87Handler(regs*)+0x8c6>
c001fb6a:	50                   	push   eax
c001fb6b:	50                   	push   eax
c001fb6c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb6f:	ff 36                	push   DWORD PTR [esi]
c001fb71:	e8 96 f3 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fb76:	e9 35 01 00 00       	jmp    c001fcb0 <Vm::x87Handler(regs*)+0x9fb>
c001fb7b:	80 fa 02             	cmp    dl,0x2
c001fb7e:	0f 85 54 f9 ff ff    	jne    c001f4d8 <Vm::x87Handler(regs*)+0x223>
c001fb84:	55                   	push   ebp
c001fb85:	55                   	push   ebp
c001fb86:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb89:	ff 36                	push   DWORD PTR [esi]
c001fb8b:	e8 7c f3 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fb90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb97:	89 c6                	mov    esi,eax
c001fb99:	89 d7                	mov    edi,edx
c001fb9b:	e8 d8 f5 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fba0:	57                   	push   edi
c001fba1:	56                   	push   esi
c001fba2:	52                   	push   edx
c001fba3:	50                   	push   eax
c001fba4:	e8 f2 f4 ff ff       	call   c001f09b <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fba9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fbad:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fbb0:	83 c4 20             	add    esp,0x20
c001fbb3:	e9 74 f7 ff ff       	jmp    c001f32c <Vm::x87Handler(regs*)+0x77>
c001fbb8:	80 fa 04             	cmp    dl,0x4
c001fbbb:	75 2a                	jne    c001fbe7 <Vm::x87Handler(regs*)+0x932>
c001fbbd:	51                   	push   ecx
c001fbbe:	51                   	push   ecx
c001fbbf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbc2:	ff 36                	push   DWORD PTR [esi]
c001fbc4:	e8 43 f3 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fbc9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbd0:	89 c6                	mov    esi,eax
c001fbd2:	89 d7                	mov    edi,edx
c001fbd4:	e8 9f f5 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fbd9:	57                   	push   edi
c001fbda:	56                   	push   esi
c001fbdb:	52                   	push   edx
c001fbdc:	50                   	push   eax
c001fbdd:	e8 36 f5 ff ff       	call   c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbe2:	e9 e2 00 00 00       	jmp    c001fcc9 <Vm::x87Handler(regs*)+0xa14>
c001fbe7:	80 fa 05             	cmp    dl,0x5
c001fbea:	75 28                	jne    c001fc14 <Vm::x87Handler(regs*)+0x95f>
c001fbec:	83 ec 0c             	sub    esp,0xc
c001fbef:	6a 00                	push   0x0
c001fbf1:	e8 82 f5 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fbf6:	89 c7                	mov    edi,eax
c001fbf8:	89 d5                	mov    ebp,edx
c001fbfa:	58                   	pop    eax
c001fbfb:	5a                   	pop    edx
c001fbfc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbff:	ff 36                	push   DWORD PTR [esi]
c001fc01:	e8 06 f3 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fc06:	83 c4 10             	add    esp,0x10
c001fc09:	55                   	push   ebp
c001fc0a:	57                   	push   edi
c001fc0b:	52                   	push   edx
c001fc0c:	50                   	push   eax
c001fc0d:	e8 06 f5 ff ff       	call   c001f118 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc12:	eb 60                	jmp    c001fc74 <Vm::x87Handler(regs*)+0x9bf>
c001fc14:	80 fa 06             	cmp    dl,0x6
c001fc17:	75 2a                	jne    c001fc43 <Vm::x87Handler(regs*)+0x98e>
c001fc19:	51                   	push   ecx
c001fc1a:	51                   	push   ecx
c001fc1b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc1e:	ff 36                	push   DWORD PTR [esi]
c001fc20:	e8 e7 f2 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fc25:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc2c:	89 c6                	mov    esi,eax
c001fc2e:	89 d7                	mov    edi,edx
c001fc30:	e8 43 f5 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fc35:	57                   	push   edi
c001fc36:	56                   	push   esi
c001fc37:	52                   	push   edx
c001fc38:	50                   	push   eax
c001fc39:	e8 08 f5 ff ff       	call   c001f146 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc3e:	e9 86 00 00 00       	jmp    c001fcc9 <Vm::x87Handler(regs*)+0xa14>
c001fc43:	31 c0                	xor    eax,eax
c001fc45:	80 fa 07             	cmp    dl,0x7
c001fc48:	0f 85 c8 00 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fc4e:	83 ec 0c             	sub    esp,0xc
c001fc51:	6a 00                	push   0x0
c001fc53:	e8 20 f5 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fc58:	89 c7                	mov    edi,eax
c001fc5a:	89 d5                	mov    ebp,edx
c001fc5c:	58                   	pop    eax
c001fc5d:	5a                   	pop    edx
c001fc5e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc61:	ff 36                	push   DWORD PTR [esi]
c001fc63:	e8 a4 f2 ff ff       	call   c001ef0c <Vm::fpu64ToInternal(unsigned long long)>
c001fc68:	83 c4 10             	add    esp,0x10
c001fc6b:	55                   	push   ebp
c001fc6c:	57                   	push   edi
c001fc6d:	52                   	push   edx
c001fc6e:	50                   	push   eax
c001fc6f:	e8 d2 f4 ff ff       	call   c001f146 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc74:	83 c4 0c             	add    esp,0xc
c001fc77:	eb 53                	jmp    c001fccc <Vm::x87Handler(regs*)+0xa17>
c001fc79:	31 c0                	xor    eax,eax
c001fc7b:	80 fa 02             	cmp    dl,0x2
c001fc7e:	0f 85 92 00 00 00    	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	6a 00                	push   0x0
c001fc89:	e8 ea f4 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fc8e:	59                   	pop    ecx
c001fc8f:	5f                   	pop    edi
c001fc90:	52                   	push   edx
c001fc91:	50                   	push   eax
c001fc92:	e8 27 f2 ff ff       	call   c001eebe <Vm::fpuInternalTo64(unsigned long long)>
c001fc97:	eb 70                	jmp    c001fd09 <Vm::x87Handler(regs*)+0xa54>
c001fc99:	31 c0                	xor    eax,eax
c001fc9b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fca0:	75 74                	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fca2:	50                   	push   eax
c001fca3:	50                   	push   eax
c001fca4:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fca7:	31 d2                	xor    edx,edx
c001fca9:	52                   	push   edx
c001fcaa:	50                   	push   eax
c001fcab:	e8 f6 f2 ff ff       	call   c001efa6 <Vm::fpuLongToFloat(long long)>
c001fcb0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcb7:	89 c6                	mov    esi,eax
c001fcb9:	89 d7                	mov    edi,edx
c001fcbb:	e8 b8 f4 ff ff       	call   c001f178 <Vm::fpuGetReg(int)>
c001fcc0:	57                   	push   edi
c001fcc1:	56                   	push   esi
c001fcc2:	52                   	push   edx
c001fcc3:	50                   	push   eax
c001fcc4:	e8 5e f4 ff ff       	call   c001f127 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fcc9:	83 c4 1c             	add    esp,0x1c
c001fccc:	52                   	push   edx
c001fccd:	50                   	push   eax
c001fcce:	6a 00                	push   0x0
c001fcd0:	e8 e6 f4 ff ff       	call   c001f1bb <Vm::fpuSetReg(int, unsigned long long)>
c001fcd5:	e9 f2 f7 ff ff       	jmp    c001f4cc <Vm::x87Handler(regs*)+0x217>
c001fcda:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcde:	80 fa 05             	cmp    dl,0x5
c001fce1:	75 11                	jne    c001fcf4 <Vm::x87Handler(regs*)+0xa3f>
c001fce3:	55                   	push   ebp
c001fce4:	55                   	push   ebp
c001fce5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fce8:	ff 36                	push   DWORD PTR [esi]
c001fcea:	e8 81 f2 ff ff       	call   c001ef70 <Vm::fpuULongToFloat(unsigned long long)>
c001fcef:	e9 cf f7 ff ff       	jmp    c001f4c3 <Vm::x87Handler(regs*)+0x20e>
c001fcf4:	31 c0                	xor    eax,eax
c001fcf6:	80 fa 07             	cmp    dl,0x7
c001fcf9:	75 1b                	jne    c001fd16 <Vm::x87Handler(regs*)+0xa61>
c001fcfb:	e8 63 f5 ff ff       	call   c001f263 <Vm::fpuPop()>
c001fd00:	51                   	push   ecx
c001fd01:	51                   	push   ecx
c001fd02:	52                   	push   edx
c001fd03:	50                   	push   eax
c001fd04:	e8 0c f2 ff ff       	call   c001ef15 <Vm::fpuFloatToLong(unsigned long long)>
c001fd09:	83 c4 10             	add    esp,0x10
c001fd0c:	89 06                	mov    DWORD PTR [esi],eax
c001fd0e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fd11:	e9 f8 f7 ff ff       	jmp    c001f50e <Vm::x87Handler(regs*)+0x259>
c001fd16:	83 c4 1c             	add    esp,0x1c
c001fd19:	5b                   	pop    ebx
c001fd1a:	5e                   	pop    esi
c001fd1b:	5f                   	pop    edi
c001fd1c:	5d                   	pop    ebp
c001fd1d:	c3                   	ret    

c001fd1e <__static_initialization_and_destruction_0(int, int)>:
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fd26:	75 1a                	jne    c001fd42 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd28:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fd30:	75 10                	jne    c001fd42 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fd32:	83 ec 0c             	sub    esp,0xc
c001fd35:	68 40 0d 03 c0       	push   0xc0030d40
c001fd3a:	e8 0b 8d 00 00       	call   c0028a4a <Vm::_FPUState::_FPUState()>
c001fd3f:	83 c4 10             	add    esp,0x10
c001fd42:	90                   	nop
c001fd43:	83 c4 0c             	add    esp,0xc
c001fd46:	c3                   	ret    

c001fd47 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fd47:	83 ec 0c             	sub    esp,0xc
c001fd4a:	83 ec 08             	sub    esp,0x8
c001fd4d:	68 ff ff 00 00       	push   0xffff
c001fd52:	6a 01                	push   0x1
c001fd54:	e8 c5 ff ff ff       	call   c001fd1e <__static_initialization_and_destruction_0(int, int)>
c001fd59:	83 c4 10             	add    esp,0x10
c001fd5c:	83 c4 0c             	add    esp,0xc
c001fd5f:	c3                   	ret    

c001fd60 <FAT::getName()>:
c001fd60:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c001fd65:	c3                   	ret    

c001fd66 <FAT::tell(void*, unsigned long long*)>:
c001fd66:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd6b:	75 06                	jne    c001fd73 <FAT::tell(void*, unsigned long long*)+0xd>
c001fd6d:	b8 04 00 00 00       	mov    eax,0x4
c001fd72:	c3                   	ret    
c001fd73:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fd78:	75 06                	jne    c001fd80 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fd7a:	b8 04 00 00 00       	mov    eax,0x4
c001fd7f:	c3                   	ret    
c001fd80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd84:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fd87:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fd8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fd8e:	89 01                	mov    DWORD PTR [ecx],eax
c001fd90:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fd93:	b8 00 00 00 00       	mov    eax,0x0
c001fd98:	c3                   	ret    
c001fd99:	90                   	nop

c001fd9a <FAT::stat(void*, unsigned long long*)>:
c001fd9a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd9f:	75 06                	jne    c001fda7 <FAT::stat(void*, unsigned long long*)+0xd>
c001fda1:	b8 04 00 00 00       	mov    eax,0x4
c001fda6:	c3                   	ret    
c001fda7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fdac:	75 06                	jne    c001fdb4 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fdae:	b8 04 00 00 00       	mov    eax,0x4
c001fdb3:	c3                   	ret    
c001fdb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdb8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fdbb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fdbe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdc2:	89 01                	mov    DWORD PTR [ecx],eax
c001fdc4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fdc7:	b8 00 00 00 00       	mov    eax,0x0
c001fdcc:	c3                   	ret    
c001fdcd:	90                   	nop

c001fdce <FAT::~FAT()>:
c001fdce:	83 ec 0c             	sub    esp,0xc
c001fdd1:	ba 7c bc 02 c0       	mov    edx,0xc002bc7c
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	89 10                	mov    DWORD PTR [eax],edx
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	83 ec 0c             	sub    esp,0xc
c001fde3:	50                   	push   eax
c001fde4:	e8 43 2b ff ff       	call   c001292c <Filesystem::~Filesystem()>
c001fde9:	83 c4 10             	add    esp,0x10
c001fdec:	90                   	nop
c001fded:	83 c4 0c             	add    esp,0xc
c001fdf0:	c3                   	ret    
c001fdf1:	90                   	nop

c001fdf2 <FAT::~FAT()>:
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	83 ec 0c             	sub    esp,0xc
c001fdf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdfc:	e8 cd ff ff ff       	call   c001fdce <FAT::~FAT()>
c001fe01:	83 c4 10             	add    esp,0x10
c001fe04:	83 ec 08             	sub    esp,0x8
c001fe07:	6a 08                	push   0x8
c001fe09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe0d:	e8 13 27 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c001fe12:	83 c4 10             	add    esp,0x10
c001fe15:	83 c4 0c             	add    esp,0xc
c001fe18:	c3                   	ret    
c001fe19:	90                   	nop

c001fe1a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fe1a:	83 ec 1c             	sub    esp,0x1c
c001fe1d:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fe24:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fe29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe2d:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c001fe34:	83 f8 ff             	cmp    eax,0xffffffff
c001fe37:	75 34                	jne    c001fe6d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fe39:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe3d:	88 c2                	mov    dl,al
c001fe3f:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001fe44:	01 d0                	add    eax,edx
c001fe46:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe4a:	8b 15 a0 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030da0
c001fe50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe54:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c001fe5b:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001fe60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fe64:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c001fe6b:	eb 17                	jmp    c001fe84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fe6d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fe71:	88 c2                	mov    dl,al
c001fe73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fe77:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c001fe7e:	01 d0                	add    eax,edx
c001fe80:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fe84:	83 ec 04             	sub    esp,0x4
c001fe87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fe8f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fe93:	50                   	push   eax
c001fe94:	e8 65 6e fe ff       	call   c0006cfe <f_getlabel>
c001fe99:	83 c4 10             	add    esp,0x10
c001fe9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fea0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fea5:	75 07                	jne    c001feae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fea7:	b8 00 00 00 00       	mov    eax,0x0
c001feac:	eb 05                	jmp    c001feb3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001feae:	b8 01 00 00 00       	mov    eax,0x1
c001feb3:	83 c4 1c             	add    esp,0x1c
c001feb6:	c3                   	ret    
c001feb7:	90                   	nop

c001feb8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001feb8:	57                   	push   edi
c001feb9:	83 ec 58             	sub    esp,0x58
c001febc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fec4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fec8:	b9 0f 00 00 00       	mov    ecx,0xf
c001fecd:	b8 00 00 00 00       	mov    eax,0x0
c001fed2:	fc                   	cld    
c001fed3:	89 d7                	mov    edi,edx
c001fed5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fed7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fedb:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c001fee2:	83 f8 ff             	cmp    eax,0xffffffff
c001fee5:	75 34                	jne    c001ff1b <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fee7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001feeb:	88 c2                	mov    dl,al
c001feed:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001fef2:	01 d0                	add    eax,edx
c001fef4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fef8:	8b 15 a0 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030da0
c001fefe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff02:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c001ff09:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c001ff0e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ff12:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c001ff19:	eb 17                	jmp    c001ff32 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ff1b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff1f:	88 c2                	mov    dl,al
c001ff21:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff25:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c001ff2c:	01 d0                	add    eax,edx
c001ff2e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ff32:	83 ec 08             	sub    esp,0x8
c001ff35:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ff39:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff3d:	50                   	push   eax
c001ff3e:	e8 09 0a fe ff       	call   c000094c <strcat>
c001ff43:	83 c4 10             	add    esp,0x10
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ff4d:	50                   	push   eax
c001ff4e:	e8 99 6f fe ff       	call   c0006eec <f_setlabel>
c001ff53:	83 c4 10             	add    esp,0x10
c001ff56:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ff5a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ff5f:	75 07                	jne    c001ff68 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001ff61:	b8 00 00 00 00       	mov    eax,0x0
c001ff66:	eb 05                	jmp    c001ff6d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001ff68:	b8 01 00 00 00       	mov    eax,0x1
c001ff6d:	83 c4 58             	add    esp,0x58
c001ff70:	5f                   	pop    edi
c001ff71:	c3                   	ret    

c001ff72 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ff72:	83 ec 2c             	sub    esp,0x2c
c001ff75:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ff7d:	83 ec 08             	sub    esp,0x8
c001ff80:	68 54 bc 02 c0       	push   0xc002bc54
c001ff85:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff89:	e8 0a 09 fe ff       	call   c0000898 <strcmp>
c001ff8e:	83 c4 10             	add    esp,0x10
c001ff91:	85 c0                	test   eax,eax
c001ff93:	0f 94 c0             	sete   al
c001ff96:	84 c0                	test   al,al
c001ff98:	74 0d                	je     c001ffa7 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001ff9a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffa2:	e9 a6 00 00 00       	jmp    c002004d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffa7:	83 ec 08             	sub    esp,0x8
c001ffaa:	68 46 bc 02 c0       	push   0xc002bc46
c001ffaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffb3:	e8 e0 08 fe ff       	call   c0000898 <strcmp>
c001ffb8:	83 c4 10             	add    esp,0x10
c001ffbb:	85 c0                	test   eax,eax
c001ffbd:	0f 94 c0             	sete   al
c001ffc0:	84 c0                	test   al,al
c001ffc2:	74 0a                	je     c001ffce <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001ffc4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ffcc:	eb 7f                	jmp    c002004d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ffce:	83 ec 08             	sub    esp,0x8
c001ffd1:	68 4c bc 02 c0       	push   0xc002bc4c
c001ffd6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffda:	e8 b9 08 fe ff       	call   c0000898 <strcmp>
c001ffdf:	83 c4 10             	add    esp,0x10
c001ffe2:	85 c0                	test   eax,eax
c001ffe4:	0f 94 c0             	sete   al
c001ffe7:	84 c0                	test   al,al
c001ffe9:	74 0a                	je     c001fff5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ffeb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fff3:	eb 58                	jmp    c002004d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fff5:	83 ec 08             	sub    esp,0x8
c001fff8:	68 ac 91 02 c0       	push   0xc00291ac
c001fffd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020001:	e8 92 08 fe ff       	call   c0000898 <strcmp>
c0020006:	83 c4 10             	add    esp,0x10
c0020009:	85 c0                	test   eax,eax
c002000b:	0f 94 c0             	sete   al
c002000e:	84 c0                	test   al,al
c0020010:	74 0a                	je     c002001c <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020012:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002001a:	eb 31                	jmp    c002004d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002001c:	83 ec 08             	sub    esp,0x8
c002001f:	68 52 bc 02 c0       	push   0xc002bc52
c0020024:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020028:	e8 6b 08 fe ff       	call   c0000898 <strcmp>
c002002d:	83 c4 10             	add    esp,0x10
c0020030:	85 c0                	test   eax,eax
c0020032:	0f 94 c0             	sete   al
c0020035:	84 c0                	test   al,al
c0020037:	74 0a                	je     c0020043 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020039:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020041:	eb 0a                	jmp    c002004d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020043:	b8 08 00 00 00       	mov    eax,0x8
c0020048:	e9 df 00 00 00       	jmp    c002012c <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c002004d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020054:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020059:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002005d:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c0020064:	83 f8 ff             	cmp    eax,0xffffffff
c0020067:	75 34                	jne    c002009d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020069:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002006d:	88 c2                	mov    dl,al
c002006f:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c0020074:	01 d0                	add    eax,edx
c0020076:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002007a:	8b 15 a0 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030da0
c0020080:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020084:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c002008b:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c0020090:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020094:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c002009b:	eb 17                	jmp    c00200b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002009d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00200a1:	88 c2                	mov    dl,al
c00200a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200a7:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c00200ae:	01 d0                	add    eax,edx
c00200b0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00200b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200b8:	88 04 24             	mov    BYTE PTR [esp],al
c00200bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00200bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00200cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00200d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200d8:	83 ec 0c             	sub    esp,0xc
c00200db:	68 00 20 00 00       	push   0x2000
c00200e0:	e8 b7 f4 fe ff       	call   c000f59c <malloc>
c00200e5:	83 c4 10             	add    esp,0x10
c00200e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00200ec:	68 00 20 00 00       	push   0x2000
c00200f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200f9:	50                   	push   eax
c00200fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00200fe:	50                   	push   eax
c00200ff:	e8 33 72 fe ff       	call   c0007337 <f_mkfs>
c0020104:	83 c4 10             	add    esp,0x10
c0020107:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002010b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020110:	75 07                	jne    c0020119 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020112:	b8 00 00 00 00       	mov    eax,0x0
c0020117:	eb 13                	jmp    c002012c <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020119:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c002011e:	75 07                	jne    c0020127 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c0020120:	b8 09 00 00 00       	mov    eax,0x9
c0020125:	eb 05                	jmp    c002012c <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020127:	b8 01 00 00 00       	mov    eax,0x1
c002012c:	83 c4 2c             	add    esp,0x2c
c002012f:	c3                   	ret    

c0020130 <FAT::tryMount(LogicalDisk*, int)>:
c0020130:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020136:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c002013b:	83 f8 14             	cmp    eax,0x14
c002013e:	75 17                	jne    c0020157 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020140:	83 ec 0c             	sub    esp,0xc
c0020143:	68 58 bc 02 c0       	push   0xc002bc58
c0020148:	e8 1c 9c ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	b0 00                	mov    al,0x0
c0020152:	e9 d7 01 00 00       	jmp    c002032e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020157:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002015e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020164:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002016a:	3d 00 02 00 00       	cmp    eax,0x200
c002016f:	74 07                	je     c0020178 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020171:	b0 00                	mov    al,0x0
c0020173:	e9 b6 01 00 00       	jmp    c002032e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020178:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020180:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020187:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c002018e:	83 f8 ff             	cmp    eax,0xffffffff
c0020191:	74 07                	je     c002019a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020193:	b0 01                	mov    al,0x1
c0020195:	e9 94 01 00 00       	jmp    c002032e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002019a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00201a4:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00201ac:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00201b3:	88 c2                	mov    dl,al
c00201b5:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c00201ba:	01 d0                	add    eax,edx
c00201bc:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00201c3:	8b 15 a0 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030da0
c00201c9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00201d0:	89 14 85 c0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf240],edx
c00201d7:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c00201dc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00201e3:	89 14 85 40 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1c0],edx
c00201ea:	83 ec 0c             	sub    esp,0xc
c00201ed:	68 54 02 00 00       	push   0x254
c00201f2:	e8 a5 f3 fe ff       	call   c000f59c <malloc>
c00201f7:	83 c4 10             	add    esp,0x10
c00201fa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020201:	83 ec 04             	sub    esp,0x4
c0020204:	6a 00                	push   0x0
c0020206:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002020d:	50                   	push   eax
c002020e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020215:	e8 db 4c fe ff       	call   c0004ef5 <f_mount>
c002021a:	83 c4 10             	add    esp,0x10
c002021d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020224:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002022c:	74 19                	je     c0020247 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002022e:	83 ec 0c             	sub    esp,0xc
c0020231:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020238:	e8 7f f3 fe ff       	call   c000f5bc <rfree>
c002023d:	83 c4 10             	add    esp,0x10
c0020240:	b0 00                	mov    al,0x0
c0020242:	e9 e7 00 00 00       	jmp    c002032e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020247:	83 ec 04             	sub    esp,0x4
c002024a:	68 00 01 00 00       	push   0x100
c002024f:	6a 00                	push   0x0
c0020251:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020258:	50                   	push   eax
c0020259:	e8 f2 04 fe ff       	call   c0000750 <memset>
c002025e:	83 c4 10             	add    esp,0x10
c0020261:	83 ec 08             	sub    esp,0x8
c0020264:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002026b:	50                   	push   eax
c002026c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020273:	50                   	push   eax
c0020274:	e8 d3 06 fe ff       	call   c000094c <strcat>
c0020279:	83 c4 10             	add    esp,0x10
c002027c:	83 ec 08             	sub    esp,0x8
c002027f:	68 66 bc 02 c0       	push   0xc002bc66
c0020284:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002028b:	50                   	push   eax
c002028c:	e8 bb 06 fe ff       	call   c000094c <strcat>
c0020291:	83 c4 10             	add    esp,0x10
c0020294:	83 ec 04             	sub    esp,0x4
c0020297:	6a 01                	push   0x1
c0020299:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00202a0:	50                   	push   eax
c00202a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00202a5:	50                   	push   eax
c00202a6:	e8 ac 4c fe ff       	call   c0004f57 <f_open>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202b5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00202bc:	85 c0                	test   eax,eax
c00202be:	74 0a                	je     c00202ca <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00202c0:	78 2d                	js     c00202ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00202c2:	83 e8 04             	sub    eax,0x4
c00202c5:	83 f8 01             	cmp    eax,0x1
c00202c8:	77 25                	ja     c00202ef <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00202ca:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00202d2:	83 ec 0c             	sub    esp,0xc
c00202d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00202d9:	50                   	push   eax
c00202da:	e8 ca 57 fe ff       	call   c0005aa9 <f_close>
c00202df:	83 c4 10             	add    esp,0x10
c00202e2:	90                   	nop
c00202e3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00202eb:	74 3a                	je     c0020327 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00202ed:	eb 2d                	jmp    c002031c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202f9:	e8 be f2 fe ff       	call   c000f5bc <rfree>
c00202fe:	83 c4 10             	add    esp,0x10
c0020301:	83 ec 04             	sub    esp,0x4
c0020304:	6a 00                	push   0x0
c0020306:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002030d:	50                   	push   eax
c002030e:	6a 00                	push   0x0
c0020310:	e8 e0 4b fe ff       	call   c0004ef5 <f_mount>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	b0 00                	mov    al,0x0
c002031a:	eb 12                	jmp    c002032e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002031c:	a1 a0 0d 03 c0       	mov    eax,ds:0xc0030da0
c0020321:	40                   	inc    eax
c0020322:	a3 a0 0d 03 c0       	mov    ds:0xc0030da0,eax
c0020327:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002032e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020334:	c3                   	ret    
c0020335:	90                   	nop

c0020336 <FAT::getFileFirstSector(char const*)>:
c0020336:	53                   	push   ebx
c0020337:	83 ec 28             	sub    esp,0x28
c002033a:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020342:	83 ec 0c             	sub    esp,0xc
c0020345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020349:	e8 4e f2 fe ff       	call   c000f59c <malloc>
c002034e:	83 c4 10             	add    esp,0x10
c0020351:	89 c3                	mov    ebx,eax
c0020353:	a1 d0 0c 03 c0       	mov    eax,ds:0xc0030cd0
c0020358:	83 ec 04             	sub    esp,0x4
c002035b:	50                   	push   eax
c002035c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020360:	53                   	push   ebx
c0020361:	e8 f6 27 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c0020366:	83 c4 10             	add    esp,0x10
c0020369:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c002036d:	83 ec 08             	sub    esp,0x8
c0020370:	6a 01                	push   0x1
c0020372:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020376:	e8 45 28 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c002037b:	83 c4 10             	add    esp,0x10
c002037e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020382:	8b 00                	mov    eax,DWORD PTR [eax]
c0020384:	83 c0 0c             	add    eax,0xc
c0020387:	8b 00                	mov    eax,DWORD PTR [eax]
c0020389:	83 ec 0c             	sub    esp,0xc
c002038c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020390:	52                   	push   edx
c0020391:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020395:	52                   	push   edx
c0020396:	6a 00                	push   0x0
c0020398:	6a 04                	push   0x4
c002039a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002039e:	ff d0                	call   eax
c00203a0:	83 c4 20             	add    esp,0x20
c00203a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00203a7:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00203ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00203b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00203b5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00203b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00203bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00203c6:	e8 53 28 ff ff       	call   c0012c1e <File::close()>
c00203cb:	83 c4 10             	add    esp,0x10
c00203ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00203d2:	ba 00 00 00 00       	mov    edx,0x0
c00203d7:	83 c4 28             	add    esp,0x28
c00203da:	5b                   	pop    ebx
c00203db:	c3                   	ret    

c00203dc <FAT::readDir(void*, unsigned long, void*, int*)>:
c00203dc:	57                   	push   edi
c00203dd:	56                   	push   esi
c00203de:	53                   	push   ebx
c00203df:	81 ec 50 02 00 00    	sub    esp,0x250
c00203e5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00203ed:	74 0a                	je     c00203f9 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00203ef:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00203f7:	75 0a                	jne    c0020403 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00203f9:	b8 04 00 00 00       	mov    eax,0x4
c00203fe:	e9 29 01 00 00       	jmp    c002052c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020403:	83 ec 08             	sub    esp,0x8
c0020406:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002040d:	50                   	push   eax
c002040e:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020415:	e8 99 5c fe ff       	call   c00060b3 <f_readdir>
c002041a:	83 c4 10             	add    esp,0x10
c002041d:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020424:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c002042b:	83 ec 0c             	sub    esp,0xc
c002042e:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020435:	83 c0 1a             	add    eax,0x1a
c0020438:	50                   	push   eax
c0020439:	e8 2e 03 fe ff       	call   c000076c <strlen>
c002043e:	83 c4 10             	add    esp,0x10
c0020441:	ba 00 00 00 00       	mov    edx,0x0
c0020446:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002044a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002044e:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020455:	0f b6 c0             	movzx  eax,al
c0020458:	83 e0 10             	and    eax,0x10
c002045b:	74 07                	je     c0020464 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c002045d:	b8 02 00 00 00       	mov    eax,0x2
c0020462:	eb 05                	jmp    c0020469 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020464:	b8 01 00 00 00       	mov    eax,0x1
c0020469:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002046d:	83 ec 08             	sub    esp,0x8
c0020470:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020477:	83 c0 1a             	add    eax,0x1a
c002047a:	50                   	push   eax
c002047b:	8d 44 24 10          	lea    eax,[esp+0x10]
c002047f:	83 c0 10             	add    eax,0x10
c0020482:	50                   	push   eax
c0020483:	e8 84 03 fe ff       	call   c000080c <strcpy>
c0020488:	83 c4 10             	add    esp,0x10
c002048b:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020492:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020499:	8d 44 24 04          	lea    eax,[esp+0x4]
c002049d:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00204a4:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00204ab:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00204b2:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00204b9:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00204c0:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00204c7:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00204ce:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00204d5:	89 c6                	mov    esi,eax
c00204d7:	89 d7                	mov    edi,edx
c00204d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204db:	89 c8                	mov    eax,ecx
c00204dd:	89 fa                	mov    edx,edi
c00204df:	89 f3                	mov    ebx,esi
c00204e1:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00204e8:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00204ef:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00204f6:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00204fd:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020503:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c002050a:	84 c0                	test   al,al
c002050c:	75 07                	jne    c0020515 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c002050e:	b8 07 00 00 00       	mov    eax,0x7
c0020513:	eb 17                	jmp    c002052c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020515:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002051c:	85 c0                	test   eax,eax
c002051e:	75 07                	jne    c0020527 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020520:	b8 00 00 00 00       	mov    eax,0x0
c0020525:	eb 05                	jmp    c002052c <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020527:	b8 01 00 00 00       	mov    eax,0x1
c002052c:	81 c4 50 02 00 00    	add    esp,0x250
c0020532:	5b                   	pop    ebx
c0020533:	5e                   	pop    esi
c0020534:	5f                   	pop    edi
c0020535:	c3                   	ret    

c0020536 <FAT::read(void*, unsigned long, void*, int*)>:
c0020536:	83 ec 1c             	sub    esp,0x1c
c0020539:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002053e:	74 07                	je     c0020547 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020540:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020545:	75 07                	jne    c002054e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020547:	b8 04 00 00 00       	mov    eax,0x4
c002054c:	eb 3d                	jmp    c002058b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002054e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020552:	50                   	push   eax
c0020553:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020557:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002055b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002055f:	e8 2f 4e fe ff       	call   c0005393 <f_read>
c0020564:	83 c4 10             	add    esp,0x10
c0020567:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002056b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002056f:	89 c2                	mov    edx,eax
c0020571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020575:	89 10                	mov    DWORD PTR [eax],edx
c0020577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002057b:	85 c0                	test   eax,eax
c002057d:	75 07                	jne    c0020586 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002057f:	b8 00 00 00 00       	mov    eax,0x0
c0020584:	eb 05                	jmp    c002058b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020586:	b8 01 00 00 00       	mov    eax,0x1
c002058b:	83 c4 1c             	add    esp,0x1c
c002058e:	c3                   	ret    
c002058f:	90                   	nop

c0020590 <FAT::write(void*, unsigned long, void*, int*)>:
c0020590:	83 ec 1c             	sub    esp,0x1c
c0020593:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020598:	74 07                	je     c00205a1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002059a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002059f:	75 07                	jne    c00205a8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00205a1:	b8 04 00 00 00       	mov    eax,0x4
c00205a6:	eb 3d                	jmp    c00205e5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205ac:	50                   	push   eax
c00205ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00205b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00205b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205b9:	e8 55 50 fe ff       	call   c0005613 <f_write>
c00205be:	83 c4 10             	add    esp,0x10
c00205c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205c9:	89 c2                	mov    edx,eax
c00205cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00205cf:	89 10                	mov    DWORD PTR [eax],edx
c00205d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205d5:	85 c0                	test   eax,eax
c00205d7:	75 07                	jne    c00205e0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00205d9:	b8 00 00 00 00       	mov    eax,0x0
c00205de:	eb 05                	jmp    c00205e5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205e0:	b8 01 00 00 00       	mov    eax,0x1
c00205e5:	83 c4 1c             	add    esp,0x1c
c00205e8:	c3                   	ret    
c00205e9:	90                   	nop

c00205ea <FAT::close(void*)>:
c00205ea:	83 ec 1c             	sub    esp,0x1c
c00205ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205f2:	75 07                	jne    c00205fb <FAT::close(void*)+0x11>
c00205f4:	b8 04 00 00 00       	mov    eax,0x4
c00205f9:	eb 36                	jmp    c0020631 <FAT::close(void*)+0x47>
c00205fb:	83 ec 0c             	sub    esp,0xc
c00205fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020602:	e8 a2 54 fe ff       	call   c0005aa9 <f_close>
c0020607:	83 c4 10             	add    esp,0x10
c002060a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002060e:	83 ec 0c             	sub    esp,0xc
c0020611:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020615:	e8 92 ef fe ff       	call   c000f5ac <free>
c002061a:	83 c4 10             	add    esp,0x10
c002061d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020621:	85 c0                	test   eax,eax
c0020623:	75 07                	jne    c002062c <FAT::close(void*)+0x42>
c0020625:	b8 00 00 00 00       	mov    eax,0x0
c002062a:	eb 05                	jmp    c0020631 <FAT::close(void*)+0x47>
c002062c:	b8 01 00 00 00       	mov    eax,0x1
c0020631:	83 c4 1c             	add    esp,0x1c
c0020634:	c3                   	ret    
c0020635:	90                   	nop

c0020636 <FAT::closeDir(void*)>:
c0020636:	83 ec 1c             	sub    esp,0x1c
c0020639:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002063e:	75 07                	jne    c0020647 <FAT::closeDir(void*)+0x11>
c0020640:	b8 04 00 00 00       	mov    eax,0x4
c0020645:	eb 36                	jmp    c002067d <FAT::closeDir(void*)+0x47>
c0020647:	83 ec 0c             	sub    esp,0xc
c002064a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002064e:	e8 3e 5a fe ff       	call   c0006091 <f_closedir>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002065a:	83 ec 0c             	sub    esp,0xc
c002065d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020661:	e8 46 ef fe ff       	call   c000f5ac <free>
c0020666:	83 c4 10             	add    esp,0x10
c0020669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002066d:	85 c0                	test   eax,eax
c002066f:	75 07                	jne    c0020678 <FAT::closeDir(void*)+0x42>
c0020671:	b8 00 00 00 00       	mov    eax,0x0
c0020676:	eb 05                	jmp    c002067d <FAT::closeDir(void*)+0x47>
c0020678:	b8 01 00 00 00       	mov    eax,0x1
c002067d:	83 c4 1c             	add    esp,0x1c
c0020680:	c3                   	ret    
c0020681:	90                   	nop

c0020682 <FAT::seek(void*, unsigned long long)>:
c0020682:	83 ec 2c             	sub    esp,0x2c
c0020685:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020689:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002068d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020691:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020695:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002069a:	75 07                	jne    c00206a3 <FAT::seek(void*, unsigned long long)+0x21>
c002069c:	b8 04 00 00 00       	mov    eax,0x4
c00206a1:	eb 2f                	jmp    c00206d2 <FAT::seek(void*, unsigned long long)+0x50>
c00206a3:	83 ec 04             	sub    esp,0x4
c00206a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00206aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00206ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00206b2:	e8 21 54 fe ff       	call   c0005ad8 <f_lseek>
c00206b7:	83 c4 10             	add    esp,0x10
c00206ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00206c2:	85 c0                	test   eax,eax
c00206c4:	75 07                	jne    c00206cd <FAT::seek(void*, unsigned long long)+0x4b>
c00206c6:	b8 00 00 00 00       	mov    eax,0x0
c00206cb:	eb 05                	jmp    c00206d2 <FAT::seek(void*, unsigned long long)+0x50>
c00206cd:	b8 01 00 00 00       	mov    eax,0x1
c00206d2:	83 c4 2c             	add    esp,0x2c
c00206d5:	c3                   	ret    

c00206d6 <fatWrapperReadDisk>:
c00206d6:	83 ec 1c             	sub    esp,0x1c
c00206d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206dd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00206e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206f5:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c00206fc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020707:	52                   	push   edx
c0020708:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002070c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020710:	50                   	push   eax
c0020711:	e8 3c 58 ff ff       	call   c0015f52 <LogicalDisk::read(unsigned long long, int, void*)>
c0020716:	83 c4 20             	add    esp,0x20
c0020719:	83 c4 1c             	add    esp,0x1c
c002071c:	c3                   	ret    

c002071d <fatWrapperWriteDisk>:
c002071d:	83 ec 1c             	sub    esp,0x1c
c0020720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020724:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020728:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002072c:	89 04 24             	mov    DWORD PTR [esp],eax
c002072f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020733:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020737:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002073c:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c0020743:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020747:	83 ec 0c             	sub    esp,0xc
c002074a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002074e:	52                   	push   edx
c002074f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020753:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020757:	50                   	push   eax
c0020758:	e8 61 58 ff ff       	call   c0015fbe <LogicalDisk::write(unsigned long long, int, void*)>
c002075d:	83 c4 20             	add    esp,0x20
c0020760:	83 c4 1c             	add    esp,0x1c
c0020763:	c3                   	ret    

c0020764 <fatWrapperIoctl>:
c0020764:	53                   	push   ebx
c0020765:	83 ec 28             	sub    esp,0x28
c0020768:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002076c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020770:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020774:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020778:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002077d:	75 31                	jne    c00207b0 <fatWrapperIoctl+0x4c>
c002077f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020783:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020787:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002078c:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c0020793:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020799:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002079f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00207a3:	66 89 02             	mov    WORD PTR [edx],ax
c00207a6:	b8 00 00 00 00       	mov    eax,0x0
c00207ab:	e9 b2 00 00 00       	jmp    c0020862 <fatWrapperIoctl+0xfe>
c00207b0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00207b5:	75 6a                	jne    c0020821 <fatWrapperIoctl+0xbd>
c00207b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00207bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00207bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207c4:	8b 04 85 80 dd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2280]
c00207cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207d1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00207d7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00207dd:	89 c8                	mov    eax,ecx
c00207df:	89 da                	mov    edx,ebx
c00207e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00207e5:	c1 e0 0a             	shl    eax,0xa
c00207e8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207ed:	8b 0c 8d 80 dd 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2280]
c00207f4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00207fa:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020800:	89 cb                	mov    ebx,ecx
c0020802:	c1 fb 1f             	sar    ebx,0x1f
c0020805:	53                   	push   ebx
c0020806:	51                   	push   ecx
c0020807:	52                   	push   edx
c0020808:	50                   	push   eax
c0020809:	e8 36 5e 00 00       	call   c0026644 <__udivdi3>
c002080e:	83 c4 10             	add    esp,0x10
c0020811:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020815:	89 01                	mov    DWORD PTR [ecx],eax
c0020817:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002081a:	b8 00 00 00 00       	mov    eax,0x0
c002081f:	eb 41                	jmp    c0020862 <fatWrapperIoctl+0xfe>
c0020821:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020826:	75 07                	jne    c002082f <fatWrapperIoctl+0xcb>
c0020828:	b8 00 00 00 00       	mov    eax,0x0
c002082d:	eb 33                	jmp    c0020862 <fatWrapperIoctl+0xfe>
c002082f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020834:	75 19                	jne    c002084f <fatWrapperIoctl+0xeb>
c0020836:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002083a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002083e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020842:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020848:	b8 00 00 00 00       	mov    eax,0x0
c002084d:	eb 13                	jmp    c0020862 <fatWrapperIoctl+0xfe>
c002084f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020854:	75 07                	jne    c002085d <fatWrapperIoctl+0xf9>
c0020856:	b8 00 00 00 00       	mov    eax,0x0
c002085b:	eb 05                	jmp    c0020862 <fatWrapperIoctl+0xfe>
c002085d:	b8 04 00 00 00       	mov    eax,0x4
c0020862:	83 c4 28             	add    esp,0x28
c0020865:	5b                   	pop    ebx
c0020866:	c3                   	ret    
c0020867:	90                   	nop

c0020868 <FAT::FAT()>:
c0020868:	83 ec 1c             	sub    esp,0x1c
c002086b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002086f:	83 ec 0c             	sub    esp,0xc
c0020872:	50                   	push   eax
c0020873:	e8 90 20 ff ff       	call   c0012908 <Filesystem::Filesystem()>
c0020878:	83 c4 10             	add    esp,0x10
c002087b:	ba 7c bc 02 c0       	mov    edx,0xc002bc7c
c0020880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020884:	89 10                	mov    DWORD PTR [eax],edx
c0020886:	c7 05 a0 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030da0,0x0
c0020890:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020898:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002089d:	7f 15                	jg     c00208b4 <FAT::FAT()+0x4c>
c002089f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208a3:	c7 04 85 c0 0d 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf240],0xffffffff
c00208ae:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00208b2:	eb e4                	jmp    c0020898 <FAT::FAT()+0x30>
c00208b4:	90                   	nop
c00208b5:	83 c4 1c             	add    esp,0x1c
c00208b8:	c3                   	ret    
c00208b9:	90                   	nop

c00208ba <FAT::fixFilepath(char*)>:
c00208ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208be:	8a 00                	mov    al,BYTE PTR [eax]
c00208c0:	3c 40                	cmp    al,0x40
c00208c2:	7e 2c                	jle    c00208f0 <FAT::fixFilepath(char*)+0x36>
c00208c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208c8:	8a 00                	mov    al,BYTE PTR [eax]
c00208ca:	83 e8 41             	sub    eax,0x41
c00208cd:	88 c2                	mov    dl,al
c00208cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208d3:	88 10                	mov    BYTE PTR [eax],dl
c00208d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208d9:	8a 00                	mov    al,BYTE PTR [eax]
c00208db:	0f be c0             	movsx  eax,al
c00208de:	8b 04 85 c0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf240]
c00208e5:	83 c0 30             	add    eax,0x30
c00208e8:	88 c2                	mov    dl,al
c00208ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208ee:	88 10                	mov    BYTE PTR [eax],dl
c00208f0:	90                   	nop
c00208f1:	c3                   	ret    

c00208f2 <FAT::open(char const*, void**, FileOpenMode)>:
c00208f2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208f8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020900:	74 0a                	je     c002090c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020902:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002090a:	75 0a                	jne    c0020916 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002090c:	b8 04 00 00 00       	mov    eax,0x4
c0020911:	e9 fd 00 00 00       	jmp    c0020a13 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020916:	83 ec 08             	sub    esp,0x8
c0020919:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020920:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020924:	50                   	push   eax
c0020925:	e8 e2 fe fd ff       	call   c000080c <strcpy>
c002092a:	83 c4 10             	add    esp,0x10
c002092d:	83 ec 08             	sub    esp,0x8
c0020930:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020934:	50                   	push   eax
c0020935:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002093c:	e8 79 ff ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020941:	83 c4 10             	add    esp,0x10
c0020944:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002094c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020953:	83 e0 01             	and    eax,0x1
c0020956:	74 08                	je     c0020960 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020958:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020960:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020967:	83 e0 04             	and    eax,0x4
c002096a:	74 10                	je     c002097c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002096c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020974:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002097c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020983:	83 e0 02             	and    eax,0x2
c0020986:	74 08                	je     c0020990 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020988:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020990:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020997:	83 e0 08             	and    eax,0x8
c002099a:	74 08                	je     c00209a4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002099c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00209a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00209ab:	83 e0 10             	and    eax,0x10
c00209ae:	74 08                	je     c00209b8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00209b0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	68 50 02 00 00       	push   0x250
c00209c0:	e8 d7 eb fe ff       	call   c000f59c <malloc>
c00209c5:	83 c4 10             	add    esp,0x10
c00209c8:	89 c2                	mov    edx,eax
c00209ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209d1:	89 10                	mov    DWORD PTR [eax],edx
c00209d3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00209db:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00209e4:	83 ec 04             	sub    esp,0x4
c00209e7:	52                   	push   edx
c00209e8:	8d 54 24 10          	lea    edx,[esp+0x10]
c00209ec:	52                   	push   edx
c00209ed:	50                   	push   eax
c00209ee:	e8 64 45 fe ff       	call   c0004f57 <f_open>
c00209f3:	83 c4 10             	add    esp,0x10
c00209f6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00209fd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020a05:	74 07                	je     c0020a0e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020a07:	b8 01 00 00 00       	mov    eax,0x1
c0020a0c:	eb 05                	jmp    c0020a13 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020a0e:	b8 00 00 00 00       	mov    eax,0x0
c0020a13:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a19:	c3                   	ret    

c0020a1a <FAT::openDir(char const*, void**)>:
c0020a1a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a20:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a28:	74 0a                	je     c0020a34 <FAT::openDir(char const*, void**)+0x1a>
c0020a2a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a32:	75 07                	jne    c0020a3b <FAT::openDir(char const*, void**)+0x21>
c0020a34:	b8 04 00 00 00       	mov    eax,0x4
c0020a39:	eb 7d                	jmp    c0020ab8 <FAT::openDir(char const*, void**)+0x9e>
c0020a3b:	83 ec 08             	sub    esp,0x8
c0020a3e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a45:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a49:	50                   	push   eax
c0020a4a:	e8 bd fd fd ff       	call   c000080c <strcpy>
c0020a4f:	83 c4 10             	add    esp,0x10
c0020a52:	83 ec 08             	sub    esp,0x8
c0020a55:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a59:	50                   	push   eax
c0020a5a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a61:	e8 54 fe ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020a66:	83 c4 10             	add    esp,0x10
c0020a69:	83 ec 0c             	sub    esp,0xc
c0020a6c:	6a 4c                	push   0x4c
c0020a6e:	e8 29 eb fe ff       	call   c000f59c <malloc>
c0020a73:	83 c4 10             	add    esp,0x10
c0020a76:	89 c2                	mov    edx,eax
c0020a78:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a7f:	89 10                	mov    DWORD PTR [eax],edx
c0020a81:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a88:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a8a:	83 ec 08             	sub    esp,0x8
c0020a8d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a91:	52                   	push   edx
c0020a92:	50                   	push   eax
c0020a93:	e8 f7 54 fe ff       	call   c0005f8f <f_opendir>
c0020a98:	83 c4 10             	add    esp,0x10
c0020a9b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020aa2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020aaa:	74 07                	je     c0020ab3 <FAT::openDir(char const*, void**)+0x99>
c0020aac:	b8 01 00 00 00       	mov    eax,0x1
c0020ab1:	eb 05                	jmp    c0020ab8 <FAT::openDir(char const*, void**)+0x9e>
c0020ab3:	b8 00 00 00 00       	mov    eax,0x0
c0020ab8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020abe:	c3                   	ret    
c0020abf:	90                   	nop

c0020ac0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020ac0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020ac6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020ace:	75 0a                	jne    c0020ada <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020ad0:	b8 04 00 00 00       	mov    eax,0x4
c0020ad5:	e9 c9 00 00 00       	jmp    c0020ba3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ada:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020ae2:	75 0a                	jne    c0020aee <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020ae4:	b8 04 00 00 00       	mov    eax,0x4
c0020ae9:	e9 b5 00 00 00       	jmp    c0020ba3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020aee:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020af6:	75 0a                	jne    c0020b02 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020af8:	b8 04 00 00 00       	mov    eax,0x4
c0020afd:	e9 a1 00 00 00       	jmp    c0020ba3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b02:	83 ec 08             	sub    esp,0x8
c0020b05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020b0c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b13:	50                   	push   eax
c0020b14:	e8 f3 fc fd ff       	call   c000080c <strcpy>
c0020b19:	83 c4 10             	add    esp,0x10
c0020b1c:	83 ec 08             	sub    esp,0x8
c0020b1f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020b26:	50                   	push   eax
c0020b27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020b2e:	e8 87 fd ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020b33:	83 c4 10             	add    esp,0x10
c0020b36:	83 ec 08             	sub    esp,0x8
c0020b39:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b3d:	50                   	push   eax
c0020b3e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b45:	50                   	push   eax
c0020b46:	e8 03 56 fe ff       	call   c000614e <f_stat>
c0020b4b:	83 c4 10             	add    esp,0x10
c0020b4e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020b55:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020b5c:	85 c0                	test   eax,eax
c0020b5e:	74 07                	je     c0020b67 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020b60:	83 f8 04             	cmp    eax,0x4
c0020b63:	74 32                	je     c0020b97 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020b65:	eb 37                	jmp    c0020b9e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020b67:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b6b:	0f b6 c0             	movzx  eax,al
c0020b6e:	83 e0 10             	and    eax,0x10
c0020b71:	0f 95 c2             	setne  dl
c0020b74:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020b7b:	88 10                	mov    BYTE PTR [eax],dl
c0020b7d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b84:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020b8b:	89 01                	mov    DWORD PTR [ecx],eax
c0020b8d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b90:	b8 00 00 00 00       	mov    eax,0x0
c0020b95:	eb 0c                	jmp    c0020ba3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b97:	b8 02 00 00 00       	mov    eax,0x2
c0020b9c:	eb 05                	jmp    c0020ba3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b9e:	b8 01 00 00 00       	mov    eax,0x1
c0020ba3:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ba9:	c3                   	ret    

c0020baa <FAT::unlink(char const*)>:
c0020baa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020bb0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020bb8:	75 07                	jne    c0020bc1 <FAT::unlink(char const*)+0x17>
c0020bba:	b8 04 00 00 00       	mov    eax,0x4
c0020bbf:	eb 5c                	jmp    c0020c1d <FAT::unlink(char const*)+0x73>
c0020bc1:	83 ec 08             	sub    esp,0x8
c0020bc4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bcf:	50                   	push   eax
c0020bd0:	e8 37 fc fd ff       	call   c000080c <strcpy>
c0020bd5:	83 c4 10             	add    esp,0x10
c0020bd8:	83 ec 08             	sub    esp,0x8
c0020bdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bdf:	50                   	push   eax
c0020be0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020be7:	e8 ce fc ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020bec:	83 c4 10             	add    esp,0x10
c0020bef:	83 ec 0c             	sub    esp,0xc
c0020bf2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bf6:	50                   	push   eax
c0020bf7:	e8 a4 58 fe ff       	call   c00064a0 <f_unlink>
c0020bfc:	83 c4 10             	add    esp,0x10
c0020bff:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c06:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020c0d:	85 c0                	test   eax,eax
c0020c0f:	75 07                	jne    c0020c18 <FAT::unlink(char const*)+0x6e>
c0020c11:	b8 00 00 00 00       	mov    eax,0x0
c0020c16:	eb 05                	jmp    c0020c1d <FAT::unlink(char const*)+0x73>
c0020c18:	b8 01 00 00 00       	mov    eax,0x1
c0020c1d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c23:	c3                   	ret    

c0020c24 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020c24:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020c2a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020c31:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020c38:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c3c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c40:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020c48:	75 0a                	jne    c0020c54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020c4a:	b8 04 00 00 00       	mov    eax,0x4
c0020c4f:	e9 1c 01 00 00       	jmp    c0020d70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c54:	83 ec 08             	sub    esp,0x8
c0020c57:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c5e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c62:	50                   	push   eax
c0020c63:	e8 a4 fb fd ff       	call   c000080c <strcpy>
c0020c68:	83 c4 10             	add    esp,0x10
c0020c6b:	83 ec 08             	sub    esp,0x8
c0020c6e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020c72:	50                   	push   eax
c0020c73:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c7a:	e8 3b fc ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020c7f:	83 c4 10             	add    esp,0x10
c0020c82:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020c8a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020c92:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c97:	83 e0 01             	and    eax,0x1
c0020c9a:	74 08                	je     c0020ca4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c9c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020ca4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ca9:	83 e0 02             	and    eax,0x2
c0020cac:	74 08                	je     c0020cb6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020cae:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020cb6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020cbb:	83 e0 04             	and    eax,0x4
c0020cbe:	74 08                	je     c0020cc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020cc0:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020cc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ccd:	83 e0 08             	and    eax,0x8
c0020cd0:	74 08                	je     c0020cda <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020cd2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020cda:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cdf:	83 e0 01             	and    eax,0x1
c0020ce2:	74 08                	je     c0020cec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020ce4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020cec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cf1:	83 e0 02             	and    eax,0x2
c0020cf4:	74 08                	je     c0020cfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020cf6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020cfe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d03:	83 e0 04             	and    eax,0x4
c0020d06:	74 08                	je     c0020d10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020d08:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020d10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d15:	83 e0 08             	and    eax,0x8
c0020d18:	74 08                	je     c0020d22 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020d1a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020d22:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020d29:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020d30:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020d38:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020d40:	83 ec 04             	sub    esp,0x4
c0020d43:	52                   	push   edx
c0020d44:	50                   	push   eax
c0020d45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d49:	50                   	push   eax
c0020d4a:	e8 f3 5d fe ff       	call   c0006b42 <f_chmod>
c0020d4f:	83 c4 10             	add    esp,0x10
c0020d52:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020d59:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020d60:	85 c0                	test   eax,eax
c0020d62:	75 07                	jne    c0020d6b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020d64:	b8 00 00 00 00       	mov    eax,0x0
c0020d69:	eb 05                	jmp    c0020d70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d6b:	b8 01 00 00 00       	mov    eax,0x1
c0020d70:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020d76:	c3                   	ret    
c0020d77:	90                   	nop

c0020d78 <FAT::rename(char const*, char const*)>:
c0020d78:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020d7e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020d86:	74 0a                	je     c0020d92 <FAT::rename(char const*, char const*)+0x1a>
c0020d88:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020d90:	75 0a                	jne    c0020d9c <FAT::rename(char const*, char const*)+0x24>
c0020d92:	b8 04 00 00 00       	mov    eax,0x4
c0020d97:	e9 98 00 00 00       	jmp    c0020e34 <FAT::rename(char const*, char const*)+0xbc>
c0020d9c:	83 ec 08             	sub    esp,0x8
c0020d9f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020da6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020dad:	50                   	push   eax
c0020dae:	e8 59 fa fd ff       	call   c000080c <strcpy>
c0020db3:	83 c4 10             	add    esp,0x10
c0020db6:	83 ec 08             	sub    esp,0x8
c0020db9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020dc0:	50                   	push   eax
c0020dc1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020dc8:	e8 ed fa ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020dcd:	83 c4 10             	add    esp,0x10
c0020dd0:	83 ec 08             	sub    esp,0x8
c0020dd3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020dda:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020dde:	50                   	push   eax
c0020ddf:	e8 28 fa fd ff       	call   c000080c <strcpy>
c0020de4:	83 c4 10             	add    esp,0x10
c0020de7:	83 ec 08             	sub    esp,0x8
c0020dea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dee:	50                   	push   eax
c0020def:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020df6:	e8 bf fa ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020dfb:	83 c4 10             	add    esp,0x10
c0020dfe:	83 ec 08             	sub    esp,0x8
c0020e01:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e05:	50                   	push   eax
c0020e06:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e0d:	50                   	push   eax
c0020e0e:	e8 3c 5a fe ff       	call   c000684f <f_rename>
c0020e13:	83 c4 10             	add    esp,0x10
c0020e16:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020e1d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020e24:	85 c0                	test   eax,eax
c0020e26:	75 07                	jne    c0020e2f <FAT::rename(char const*, char const*)+0xb7>
c0020e28:	b8 00 00 00 00       	mov    eax,0x0
c0020e2d:	eb 05                	jmp    c0020e34 <FAT::rename(char const*, char const*)+0xbc>
c0020e2f:	b8 01 00 00 00       	mov    eax,0x1
c0020e34:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020e3a:	c3                   	ret    
c0020e3b:	90                   	nop

c0020e3c <FAT::mkdir(char const*)>:
c0020e3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e4a:	75 07                	jne    c0020e53 <FAT::mkdir(char const*)+0x17>
c0020e4c:	b8 04 00 00 00       	mov    eax,0x4
c0020e51:	eb 5c                	jmp    c0020eaf <FAT::mkdir(char const*)+0x73>
c0020e53:	83 ec 08             	sub    esp,0x8
c0020e56:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e61:	50                   	push   eax
c0020e62:	e8 a5 f9 fd ff       	call   c000080c <strcpy>
c0020e67:	83 c4 10             	add    esp,0x10
c0020e6a:	83 ec 08             	sub    esp,0x8
c0020e6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e71:	50                   	push   eax
c0020e72:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e79:	e8 3c fa ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020e7e:	83 c4 10             	add    esp,0x10
c0020e81:	83 ec 0c             	sub    esp,0xc
c0020e84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e88:	50                   	push   eax
c0020e89:	e8 95 57 fe ff       	call   c0006623 <f_mkdir>
c0020e8e:	83 c4 10             	add    esp,0x10
c0020e91:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e98:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e9f:	85 c0                	test   eax,eax
c0020ea1:	75 07                	jne    c0020eaa <FAT::mkdir(char const*)+0x6e>
c0020ea3:	b8 00 00 00 00       	mov    eax,0x0
c0020ea8:	eb 05                	jmp    c0020eaf <FAT::mkdir(char const*)+0x73>
c0020eaa:	b8 01 00 00 00       	mov    eax,0x1
c0020eaf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020eb5:	c3                   	ret    

c0020eb6 <FAT::exists(char const*)>:
c0020eb6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020ebc:	83 ec 08             	sub    esp,0x8
c0020ebf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ec6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020eca:	50                   	push   eax
c0020ecb:	e8 3c f9 fd ff       	call   c000080c <strcpy>
c0020ed0:	83 c4 10             	add    esp,0x10
c0020ed3:	83 ec 08             	sub    esp,0x8
c0020ed6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020eda:	50                   	push   eax
c0020edb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ee2:	e8 d3 f9 ff ff       	call   c00208ba <FAT::fixFilepath(char*)>
c0020ee7:	83 c4 10             	add    esp,0x10
c0020eea:	83 ec 08             	sub    esp,0x8
c0020eed:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ef4:	50                   	push   eax
c0020ef5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ef9:	50                   	push   eax
c0020efa:	e8 4f 52 fe ff       	call   c000614e <f_stat>
c0020eff:	83 c4 10             	add    esp,0x10
c0020f02:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020f09:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020f10:	85 c0                	test   eax,eax
c0020f12:	75 04                	jne    c0020f18 <FAT::exists(char const*)+0x62>
c0020f14:	b0 01                	mov    al,0x1
c0020f16:	eb 02                	jmp    c0020f1a <FAT::exists(char const*)+0x64>
c0020f18:	b0 00                	mov    al,0x0
c0020f1a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020f20:	c3                   	ret    
c0020f21:	90                   	nop

c0020f22 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020f22:	b8 08 00 00 00       	mov    eax,0x8
c0020f27:	c3                   	ret    

c0020f28 <ISO9660::seek(void*, unsigned long long)>:
c0020f28:	53                   	push   ebx
c0020f29:	b8 04 00 00 00       	mov    eax,0x4
c0020f2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f3a:	85 d2                	test   edx,edx
c0020f3c:	74 17                	je     c0020f55 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f3e:	89 c8                	mov    eax,ecx
c0020f40:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020f43:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020f46:	b8 01 00 00 00       	mov    eax,0x1
c0020f4b:	73 08                	jae    c0020f55 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f4d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020f50:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020f53:	31 c0                	xor    eax,eax
c0020f55:	5b                   	pop    ebx
c0020f56:	c3                   	ret    
c0020f57:	90                   	nop

c0020f58 <ISO9660::tell(void*, unsigned long long*)>:
c0020f58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f60:	85 d2                	test   edx,edx
c0020f62:	74 12                	je     c0020f76 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f64:	85 c0                	test   eax,eax
c0020f66:	74 0e                	je     c0020f76 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f68:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020f6b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020f6e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f71:	89 10                	mov    DWORD PTR [eax],edx
c0020f73:	31 c0                	xor    eax,eax
c0020f75:	c3                   	ret    
c0020f76:	b8 04 00 00 00       	mov    eax,0x4
c0020f7b:	c3                   	ret    

c0020f7c <ISO9660::getName()>:
c0020f7c:	b8 dc bc 02 c0       	mov    eax,0xc002bcdc
c0020f81:	c3                   	ret    

c0020f82 <ISO9660::stat(void*, unsigned long long*)>:
c0020f82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f8a:	85 d2                	test   edx,edx
c0020f8c:	74 12                	je     c0020fa0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f8e:	85 c0                	test   eax,eax
c0020f90:	74 0e                	je     c0020fa0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f92:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020f95:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f98:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f9b:	89 10                	mov    DWORD PTR [eax],edx
c0020f9d:	31 c0                	xor    eax,eax
c0020f9f:	c3                   	ret    
c0020fa0:	b8 04 00 00 00       	mov    eax,0x4
c0020fa5:	c3                   	ret    

c0020fa6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020fa6:	b8 01 00 00 00       	mov    eax,0x1
c0020fab:	c3                   	ret    

c0020fac <ISO9660::unlink(char const*)>:
c0020fac:	b8 01 00 00 00       	mov    eax,0x1
c0020fb1:	c3                   	ret    

c0020fb2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020fb2:	b8 01 00 00 00       	mov    eax,0x1
c0020fb7:	c3                   	ret    

c0020fb8 <ISO9660::rename(char const*, char const*)>:
c0020fb8:	b8 01 00 00 00       	mov    eax,0x1
c0020fbd:	c3                   	ret    

c0020fbe <ISO9660::mkdir(char const*)>:
c0020fbe:	b8 01 00 00 00       	mov    eax,0x1
c0020fc3:	c3                   	ret    

c0020fc4 <ISO9660::close(void*)>:
c0020fc4:	83 ec 0c             	sub    esp,0xc
c0020fc7:	b8 04 00 00 00       	mov    eax,0x4
c0020fcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fd0:	85 d2                	test   edx,edx
c0020fd2:	74 0e                	je     c0020fe2 <ISO9660::close(void*)+0x1e>
c0020fd4:	83 ec 0c             	sub    esp,0xc
c0020fd7:	52                   	push   edx
c0020fd8:	e8 cf e5 fe ff       	call   c000f5ac <free>
c0020fdd:	83 c4 10             	add    esp,0x10
c0020fe0:	31 c0                	xor    eax,eax
c0020fe2:	83 c4 0c             	add    esp,0xc
c0020fe5:	c3                   	ret    

c0020fe6 <ISO9660::closeDir(void*)>:
c0020fe6:	83 ec 0c             	sub    esp,0xc
c0020fe9:	b8 04 00 00 00       	mov    eax,0x4
c0020fee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ff2:	85 d2                	test   edx,edx
c0020ff4:	74 0e                	je     c0021004 <ISO9660::closeDir(void*)+0x1e>
c0020ff6:	83 ec 0c             	sub    esp,0xc
c0020ff9:	52                   	push   edx
c0020ffa:	e8 ad e5 fe ff       	call   c000f5ac <free>
c0020fff:	83 c4 10             	add    esp,0x10
c0021002:	31 c0                	xor    eax,eax
c0021004:	83 c4 0c             	add    esp,0xc
c0021007:	c3                   	ret    

c0021008 <ISO9660::~ISO9660()>:
c0021008:	83 ec 0c             	sub    esp,0xc
c002100b:	ba 00 bd 02 c0       	mov    edx,0xc002bd00
c0021010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021014:	89 10                	mov    DWORD PTR [eax],edx
c0021016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002101a:	83 ec 0c             	sub    esp,0xc
c002101d:	50                   	push   eax
c002101e:	e8 09 19 ff ff       	call   c001292c <Filesystem::~Filesystem()>
c0021023:	83 c4 10             	add    esp,0x10
c0021026:	90                   	nop
c0021027:	83 c4 0c             	add    esp,0xc
c002102a:	c3                   	ret    
c002102b:	90                   	nop

c002102c <ISO9660::~ISO9660()>:
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	83 ec 0c             	sub    esp,0xc
c0021032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021036:	e8 cd ff ff ff       	call   c0021008 <ISO9660::~ISO9660()>
c002103b:	83 c4 10             	add    esp,0x10
c002103e:	83 ec 08             	sub    esp,0x8
c0021041:	6a 08                	push   0x8
c0021043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021047:	e8 d9 14 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c002104c:	83 c4 10             	add    esp,0x10
c002104f:	83 c4 0c             	add    esp,0xc
c0021052:	c3                   	ret    

c0021053 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021053:	55                   	push   ebp
c0021054:	31 c9                	xor    ecx,ecx
c0021056:	57                   	push   edi
c0021057:	56                   	push   esi
c0021058:	53                   	push   ebx
c0021059:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002105d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021061:	89 eb                	mov    ebx,ebp
c0021063:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021067:	39 ce                	cmp    esi,ecx
c0021069:	7e 17                	jle    c0021082 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002106b:	31 d2                	xor    edx,edx
c002106d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021071:	7d 13                	jge    c0021086 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021073:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021077:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002107a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002107d:	75 0d                	jne    c002108c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002107f:	42                   	inc    edx
c0021080:	eb eb                	jmp    c002106d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021082:	31 c0                	xor    eax,eax
c0021084:	eb 0a                	jmp    c0021090 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021086:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002108a:	eb 04                	jmp    c0021090 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002108c:	41                   	inc    ecx
c002108d:	43                   	inc    ebx
c002108e:	eb d7                	jmp    c0021067 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021090:	5b                   	pop    ebx
c0021091:	5e                   	pop    esi
c0021092:	5f                   	pop    edi
c0021093:	5d                   	pop    ebp
c0021094:	c3                   	ret    

c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021095:	57                   	push   edi
c0021096:	56                   	push   esi
c0021097:	53                   	push   ebx
c0021098:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002109c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00210a0:	39 0d a0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030ea0,ecx
c00210a6:	75 08                	jne    c00210b0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00210a8:	38 05 14 cd 02 c0    	cmp    BYTE PTR ds:0xc002cd14,al
c00210ae:	74 2b                	je     c00210db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00210b0:	83 ec 0c             	sub    esp,0xc
c00210b3:	a2 14 cd 02 c0       	mov    ds:0xc002cd14,al
c00210b8:	68 c0 0e 03 c0       	push   0xc0030ec0
c00210bd:	0f be c0             	movsx  eax,al
c00210c0:	6a 01                	push   0x1
c00210c2:	89 0d a0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ea0,ecx
c00210c8:	31 db                	xor    ebx,ebx
c00210ca:	53                   	push   ebx
c00210cb:	51                   	push   ecx
c00210cc:	ff 34 85 7c dc 02 c0 	push   DWORD PTR [eax*4-0x3ffd2384]
c00210d3:	e8 7a 4e ff ff       	call   c0015f52 <LogicalDisk::read(unsigned long long, int, void*)>
c00210d8:	83 c4 20             	add    esp,0x20
c00210db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00210df:	be c0 0e 03 c0       	mov    esi,0xc0030ec0
c00210e4:	b9 00 08 00 00       	mov    ecx,0x800
c00210e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210eb:	5b                   	pop    ebx
c00210ec:	5e                   	pop    esi
c00210ed:	5f                   	pop    edi
c00210ee:	c3                   	ret    
c00210ef:	90                   	nop

c00210f0 <ISO9660::tryMount(LogicalDisk*, int)>:
c00210f0:	81 ec 10 08 00 00    	sub    esp,0x810
c00210f6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00210fd:	83 c0 41             	add    eax,0x41
c0021100:	0f be c0             	movsx  eax,al
c0021103:	50                   	push   eax
c0021104:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021108:	50                   	push   eax
c0021109:	6a 10                	push   0x10
c002110b:	e8 85 ff ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021110:	83 c4 10             	add    esp,0x10
c0021113:	31 c0                	xor    eax,eax
c0021115:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002111a:	75 1d                	jne    c0021139 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002111c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021121:	75 16                	jne    c0021139 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021123:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021128:	75 0f                	jne    c0021139 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002112a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002112f:	75 08                	jne    c0021139 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021131:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021136:	0f 94 c0             	sete   al
c0021139:	81 c4 0c 08 00 00    	add    esp,0x80c
c002113f:	c3                   	ret    

c0021140 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021140:	55                   	push   ebp
c0021141:	57                   	push   edi
c0021142:	56                   	push   esi
c0021143:	53                   	push   ebx
c0021144:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002114a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021151:	85 ed                	test   ebp,ebp
c0021153:	0f 84 da 01 00 00    	je     c0021333 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021159:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021161:	0f 84 cc 01 00 00    	je     c0021333 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021167:	b8 01 00 00 00       	mov    eax,0x1
c002116c:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021170:	0f 85 c2 01 00 00    	jne    c0021338 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021176:	31 d2                	xor    edx,edx
c0021178:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002117f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021182:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021185:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021188:	89 04 24             	mov    DWORD PTR [esp],eax
c002118b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002118f:	01 c8                	add    eax,ecx
c0021191:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021194:	11 da                	adc    edx,ebx
c0021196:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002119a:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002119e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00211a2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00211a6:	19 d7                	sbb    edi,edx
c00211a8:	72 11                	jb     c00211bb <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00211aa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00211ad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00211b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00211b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00211b9:	eb 0c                	jmp    c00211c7 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00211bb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00211bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00211c3:	29 ce                	sub    esi,ecx
c00211c5:	19 df                	sbb    edi,ebx
c00211c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00211ca:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00211cd:	0f a4 c2 0b          	shld   edx,eax,0xb
c00211d1:	c1 e0 0b             	shl    eax,0xb
c00211d4:	01 c8                	add    eax,ecx
c00211d6:	11 da                	adc    edx,ebx
c00211d8:	89 04 24             	mov    DWORD PTR [esp],eax
c00211db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211df:	51                   	push   ecx
c00211e0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211e4:	50                   	push   eax
c00211e5:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00211e9:	53                   	push   ebx
c00211ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211f2:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211f6:	50                   	push   eax
c00211f7:	e8 99 fe ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211fc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00211ff:	b8 00 08 00 00       	mov    eax,0x800
c0021204:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002120a:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c002120e:	29 d0                	sub    eax,edx
c0021210:	83 c4 10             	add    esp,0x10
c0021213:	89 f9                	mov    ecx,edi
c0021215:	39 c6                	cmp    esi,eax
c0021217:	83 d9 00             	sbb    ecx,0x0
c002121a:	7d 1b                	jge    c0021237 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c002121c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021221:	75 12                	jne    c0021235 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021223:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002122a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021230:	e9 fa 00 00 00       	jmp    c002132f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021235:	89 f0                	mov    eax,esi
c0021237:	01 d3                	add    ebx,edx
c0021239:	31 d2                	xor    edx,edx
c002123b:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c002123f:	39 c2                	cmp    edx,eax
c0021241:	7d 14                	jge    c0021257 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021243:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002124a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002124e:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021251:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021254:	42                   	inc    edx
c0021255:	eb e8                	jmp    c002123f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021257:	89 c2                	mov    edx,eax
c0021259:	85 c0                	test   eax,eax
c002125b:	79 02                	jns    c002125f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002125d:	31 d2                	xor    edx,edx
c002125f:	01 c2                	add    edx,eax
c0021261:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021264:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002126b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002126f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021273:	99                   	cdq    
c0021274:	01 c1                	add    ecx,eax
c0021276:	11 d3                	adc    ebx,edx
c0021278:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002127c:	29 c6                	sub    esi,eax
c002127e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021282:	19 d7                	sbb    edi,edx
c0021284:	89 34 24             	mov    DWORD PTR [esp],esi
c0021287:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002128b:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021290:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021293:	b8 00 00 00 00       	mov    eax,0x0
c0021298:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002129c:	7d 43                	jge    c00212e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002129e:	52                   	push   edx
c002129f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212a3:	50                   	push   eax
c00212a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00212a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00212ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00212b0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212b4:	50                   	push   eax
c00212b5:	e8 db fd ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212ba:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00212c2:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00212c7:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00212cf:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00212d7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00212dc:	83 c4 10             	add    esp,0x10
c00212df:	eb aa                	jmp    c002128b <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c00212e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00212e8:	74 2a                	je     c0021314 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c00212ea:	50                   	push   eax
c00212eb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212ef:	50                   	push   eax
c00212f0:	8d 74 24 28          	lea    esi,[esp+0x28]
c00212f4:	56                   	push   esi
c00212f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00212f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00212fd:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021301:	51                   	push   ecx
c0021302:	e8 8e fd ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021307:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002130b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002130f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021311:	83 c4 10             	add    esp,0x10
c0021314:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002131b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002131f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021323:	89 18                	mov    DWORD PTR [eax],ebx
c0021325:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021329:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002132c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002132f:	31 c0                	xor    eax,eax
c0021331:	eb 05                	jmp    c0021338 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021333:	b8 04 00 00 00       	mov    eax,0x4
c0021338:	81 c4 2c 08 00 00    	add    esp,0x82c
c002133e:	5b                   	pop    ebx
c002133f:	5e                   	pop    esi
c0021340:	5f                   	pop    edi
c0021341:	5d                   	pop    ebp
c0021342:	c3                   	ret    
c0021343:	90                   	nop

c0021344 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021344:	55                   	push   ebp
c0021345:	57                   	push   edi
c0021346:	56                   	push   esi
c0021347:	53                   	push   ebx
c0021348:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002134e:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021355:	85 ed                	test   ebp,ebp
c0021357:	0f 84 51 02 00 00    	je     c00215ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002135d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021365:	0f 84 43 02 00 00    	je     c00215ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002136b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002136e:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021371:	75 0a                	jne    c002137d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021373:	b8 07 00 00 00       	mov    eax,0x7
c0021378:	e9 36 02 00 00       	jmp    c00215b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002137d:	50                   	push   eax
c002137e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021382:	50                   	push   eax
c0021383:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002138a:	53                   	push   ebx
c002138b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002138e:	c1 e0 0b             	shl    eax,0xb
c0021391:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021394:	c1 e8 0b             	shr    eax,0xb
c0021397:	50                   	push   eax
c0021398:	e8 f8 fc ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002139d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00213a0:	83 c4 10             	add    esp,0x10
c00213a3:	89 c1                	mov    ecx,eax
c00213a5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00213a8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00213ae:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00213b1:	84 db                	test   bl,bl
c00213b3:	0f 85 8b 00 00 00    	jne    c0021444 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00213b9:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00213bf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00213c2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00213c8:	29 c6                	sub    esi,eax
c00213ca:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00213ce:	89 f3                	mov    ebx,esi
c00213d0:	89 f1                	mov    ecx,esi
c00213d2:	c1 fb 1f             	sar    ebx,0x1f
c00213d5:	01 f0                	add    eax,esi
c00213d7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00213da:	11 da                	adc    edx,ebx
c00213dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00213df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213e3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213e6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213e9:	89 d8                	mov    eax,ebx
c00213eb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00213ef:	ba 00 00 00 00       	mov    edx,0x0
c00213f4:	19 f8                	sbb    eax,edi
c00213f6:	b8 00 00 00 00       	mov    eax,0x0
c00213fb:	73 08                	jae    c0021405 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00213fd:	89 f0                	mov    eax,esi
c00213ff:	89 fa                	mov    edx,edi
c0021401:	29 c8                	sub    eax,ecx
c0021403:	19 da                	sbb    edx,ebx
c0021405:	89 d7                	mov    edi,edx
c0021407:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002140a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002140d:	09 c7                	or     edi,eax
c002140f:	0f 84 5e ff ff ff    	je     c0021373 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021415:	57                   	push   edi
c0021416:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002141a:	50                   	push   eax
c002141b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021422:	53                   	push   ebx
c0021423:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021426:	c1 e0 0b             	shl    eax,0xb
c0021429:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002142d:	c1 e8 0b             	shr    eax,0xb
c0021430:	50                   	push   eax
c0021431:	e8 5f fc ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021436:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	25 ff 07 00 00       	and    eax,0x7ff
c0021441:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021444:	31 ff                	xor    edi,edi
c0021446:	56                   	push   esi
c0021447:	6a 28                	push   0x28
c0021449:	6a 00                	push   0x0
c002144b:	8d 44 24 24          	lea    eax,[esp+0x24]
c002144f:	50                   	push   eax
c0021450:	e8 fb f2 fd ff       	call   c0000750 <memset>
c0021455:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021458:	25 ff 07 00 00       	and    eax,0x7ff
c002145d:	89 c6                	mov    esi,eax
c002145f:	83 c6 21             	add    esi,0x21
c0021462:	83 d7 00             	adc    edi,0x0
c0021465:	83 c4 10             	add    esp,0x10
c0021468:	31 c9                	xor    ecx,ecx
c002146a:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021471:	83 f9 28             	cmp    ecx,0x28
c0021474:	88 04 24             	mov    BYTE PTR [esp],al
c0021477:	0f 94 c2             	sete   dl
c002147a:	88 d0                	mov    al,dl
c002147c:	ba ff 07 00 00       	mov    edx,0x7ff
c0021481:	39 f2                	cmp    edx,esi
c0021483:	ba 00 00 00 00       	mov    edx,0x0
c0021488:	19 fa                	sbb    edx,edi
c002148a:	0f 92 c2             	setb   dl
c002148d:	09 c2                	or     edx,eax
c002148f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021493:	0f 94 c0             	sete   al
c0021496:	08 d0                	or     al,dl
c0021498:	75 16                	jne    c00214b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002149a:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002149e:	74 10                	je     c00214b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00214a0:	8a 04 24             	mov    al,BYTE PTR [esp]
c00214a3:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00214a7:	41                   	inc    ecx
c00214a8:	83 c6 01             	add    esi,0x1
c00214ab:	83 d7 00             	adc    edi,0x0
c00214ae:	eb ba                	jmp    c002146a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00214b0:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00214b7:	83 ec 0c             	sub    esp,0xc
c00214ba:	8d 74 24 24          	lea    esi,[esp+0x24]
c00214be:	56                   	push   esi
c00214bf:	e8 a8 f2 fd ff       	call   c000076c <strlen>
c00214c4:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00214cb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214cf:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00214d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214da:	5a                   	pop    edx
c00214db:	25 ff 07 00 00       	and    eax,0x7ff
c00214e0:	59                   	pop    ecx
c00214e1:	01 f8                	add    eax,edi
c00214e3:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00214e9:	83 e0 02             	and    eax,0x2
c00214ec:	3c 01                	cmp    al,0x1
c00214ee:	19 c0                	sbb    eax,eax
c00214f0:	83 c0 02             	add    eax,0x2
c00214f3:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214f7:	56                   	push   esi
c00214f8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00214fc:	50                   	push   eax
c00214fd:	e8 0a f3 fd ff       	call   c000080c <strcpy>
c0021502:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021506:	83 c4 10             	add    esp,0x10
c0021509:	84 c0                	test   al,al
c002150b:	75 21                	jne    c002152e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c002150d:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021515:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002151d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021525:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002152c:	eb 28                	jmp    c0021556 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002152e:	fe c8                	dec    al
c0021530:	75 24                	jne    c0021556 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021532:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002153a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021542:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002154a:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021551:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021556:	8d 74 24 40          	lea    esi,[esp+0x40]
c002155a:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021561:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021568:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002156a:	0f b6 f3             	movzx  esi,bl
c002156d:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021574:	31 db                	xor    ebx,ebx
c0021576:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002157c:	89 df                	mov    edi,ebx
c002157e:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021584:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021587:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002158a:	39 c6                	cmp    esi,eax
c002158c:	19 d7                	sbb    edi,edx
c002158e:	72 10                	jb     c00215a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021590:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021597:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002159e:	eb 0a                	jmp    c00215aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00215a0:	29 f0                	sub    eax,esi
c00215a2:	19 da                	sbb    edx,ebx
c00215a4:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00215a7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00215aa:	31 c0                	xor    eax,eax
c00215ac:	eb 05                	jmp    c00215b3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00215ae:	b8 04 00 00 00       	mov    eax,0x4
c00215b3:	81 c4 5c 09 00 00    	add    esp,0x95c
c00215b9:	5b                   	pop    ebx
c00215ba:	5e                   	pop    esi
c00215bb:	5f                   	pop    edi
c00215bc:	5d                   	pop    ebp
c00215bd:	c3                   	ret    

c00215be <readRoot(unsigned int*, unsigned int*, char)>:
c00215be:	57                   	push   edi
c00215bf:	56                   	push   esi
c00215c0:	81 ec 38 08 00 00    	sub    esp,0x838
c00215c6:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00215ce:	50                   	push   eax
c00215cf:	8d 44 24 38          	lea    eax,[esp+0x38]
c00215d3:	50                   	push   eax
c00215d4:	6a 10                	push   0x10
c00215d6:	e8 ba fa ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215db:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c00215e2:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c00215e6:	b9 22 00 00 00       	mov    ecx,0x22
c00215eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00215ed:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00215f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215f8:	89 10                	mov    DWORD PTR [eax],edx
c00215fa:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021601:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021605:	89 10                	mov    DWORD PTR [eax],edx
c0021607:	81 c4 44 08 00 00    	add    esp,0x844
c002160d:	b0 01                	mov    al,0x1
c002160f:	5e                   	pop    esi
c0021610:	5f                   	pop    edi
c0021611:	c3                   	ret    

c0021612 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021612:	55                   	push   ebp
c0021613:	57                   	push   edi
c0021614:	56                   	push   esi
c0021615:	53                   	push   ebx
c0021616:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002161c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021623:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002162a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002162e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021632:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021636:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002163a:	75 03                	jne    c002163f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002163c:	83 c3 02             	add    ebx,0x2
c002163f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021642:	75 03                	jne    c0021647 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021644:	43                   	inc    ebx
c0021645:	eb f8                	jmp    c002163f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021647:	51                   	push   ecx
c0021648:	68 00 01 00 00       	push   0x100
c002164d:	6a 00                	push   0x0
c002164f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021653:	50                   	push   eax
c0021654:	e8 f7 f0 fd ff       	call   c0000750 <memset>
c0021659:	83 c4 10             	add    esp,0x10
c002165c:	31 d2                	xor    edx,edx
c002165e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021661:	84 c0                	test   al,al
c0021663:	74 21                	je     c0021686 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021665:	3c 2f                	cmp    al,0x2f
c0021667:	75 0b                	jne    c0021674 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021669:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002166d:	bd 01 00 00 00       	mov    ebp,0x1
c0021672:	eb 14                	jmp    c0021688 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021674:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021677:	80 f9 19             	cmp    cl,0x19
c002167a:	77 03                	ja     c002167f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c002167c:	83 e8 20             	sub    eax,0x20
c002167f:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021683:	42                   	inc    edx
c0021684:	eb d8                	jmp    c002165e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021686:	31 ed                	xor    ebp,ebp
c0021688:	83 ec 0c             	sub    esp,0xc
c002168b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021692:	e8 05 df fe ff       	call   c000f59c <malloc>
c0021697:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002169e:	89 c6                	mov    esi,eax
c00216a0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00216a6:	c1 ef 0b             	shr    edi,0xb
c00216a9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00216b0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00216b4:	83 c4 10             	add    esp,0x10
c00216b7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00216bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00216c0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00216c7:	74 28                	je     c00216f1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00216c9:	52                   	push   edx
c00216ca:	57                   	push   edi
c00216cb:	50                   	push   eax
c00216cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00216d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00216d7:	e8 b9 f9 ff ff       	call   c0021095 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216e0:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00216e7:	05 00 08 00 00       	add    eax,0x800
c00216ec:	83 c4 10             	add    esp,0x10
c00216ef:	eb cb                	jmp    c00216bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00216f1:	83 ec 0c             	sub    esp,0xc
c00216f4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00216f8:	57                   	push   edi
c00216f9:	e8 6e f0 fd ff       	call   c000076c <strlen>
c00216fe:	50                   	push   eax
c00216ff:	57                   	push   edi
c0021700:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021707:	56                   	push   esi
c0021708:	e8 46 f9 ff ff       	call   c0021053 <__memmem(unsigned char*, int, unsigned char*, int)>
c002170d:	83 c4 20             	add    esp,0x20
c0021710:	85 c0                	test   eax,eax
c0021712:	75 13                	jne    c0021727 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021714:	83 ec 0c             	sub    esp,0xc
c0021717:	56                   	push   esi
c0021718:	e8 8f de fe ff       	call   c000f5ac <free>
c002171d:	83 c4 10             	add    esp,0x10
c0021720:	31 c0                	xor    eax,eax
c0021722:	e9 b3 00 00 00       	jmp    c00217da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021727:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002172b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002172f:	c1 e7 08             	shl    edi,0x8
c0021732:	c1 e2 10             	shl    edx,0x10
c0021735:	09 d7                	or     edi,edx
c0021737:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002173b:	09 d7                	or     edi,edx
c002173d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021741:	c1 e2 18             	shl    edx,0x18
c0021744:	09 d7                	or     edi,edx
c0021746:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002174a:	89 d1                	mov    ecx,edx
c002174c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021750:	c1 e1 08             	shl    ecx,0x8
c0021753:	c1 e2 10             	shl    edx,0x10
c0021756:	09 ca                	or     edx,ecx
c0021758:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002175c:	09 ca                	or     edx,ecx
c002175e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021762:	c1 e1 18             	shl    ecx,0x18
c0021765:	09 ca                	or     edx,ecx
c0021767:	89 e9                	mov    ecx,ebp
c0021769:	84 c9                	test   cl,cl
c002176b:	74 3c                	je     c00217a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002176d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021771:	83 ec 0c             	sub    esp,0xc
c0021774:	56                   	push   esi
c0021775:	e8 32 de fe ff       	call   c000f5ac <free>
c002177a:	83 c4 0c             	add    esp,0xc
c002177d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021784:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021789:	50                   	push   eax
c002178a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021791:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021798:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002179c:	52                   	push   edx
c002179d:	57                   	push   edi
c002179e:	53                   	push   ebx
c002179f:	e8 6e fe ff ff       	call   c0021612 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00217a4:	83 c4 20             	add    esp,0x20
c00217a7:	eb 31                	jmp    c00217da <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217a9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00217ac:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00217b3:	d0 e8                	shr    al,1
c00217b5:	89 3b                	mov    DWORD PTR [ebx],edi
c00217b7:	83 e0 01             	and    eax,0x1
c00217ba:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00217c1:	83 ec 0c             	sub    esp,0xc
c00217c4:	89 13                	mov    DWORD PTR [ebx],edx
c00217c6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00217cd:	89 03                	mov    DWORD PTR [ebx],eax
c00217cf:	56                   	push   esi
c00217d0:	e8 d7 dd fe ff       	call   c000f5ac <free>
c00217d5:	83 c4 10             	add    esp,0x10
c00217d8:	b0 01                	mov    al,0x1
c00217da:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217e0:	5b                   	pop    ebx
c00217e1:	5e                   	pop    esi
c00217e2:	5f                   	pop    edi
c00217e3:	5d                   	pop    ebp
c00217e4:	c3                   	ret    

c00217e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00217e5:	55                   	push   ebp
c00217e6:	57                   	push   edi
c00217e7:	56                   	push   esi
c00217e8:	53                   	push   ebx
c00217e9:	83 ec 20             	sub    esp,0x20
c00217ec:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00217f0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00217f4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00217f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021800:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021808:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002180d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021813:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021819:	57                   	push   edi
c002181a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002181e:	50                   	push   eax
c002181f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021823:	50                   	push   eax
c0021824:	e8 95 fd ff ff       	call   c00215be <readRoot(unsigned int*, unsigned int*, char)>
c0021829:	5a                   	pop    edx
c002182a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002182e:	e8 39 ef fd ff       	call   c000076c <strlen>
c0021833:	83 c4 10             	add    esp,0x10
c0021836:	83 f8 03             	cmp    eax,0x3
c0021839:	77 17                	ja     c0021852 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002183b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002183f:	89 03                	mov    DWORD PTR [ebx],eax
c0021841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021845:	89 06                	mov    DWORD PTR [esi],eax
c0021847:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002184e:	b0 01                	mov    al,0x1
c0021850:	eb 19                	jmp    c002186b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021852:	50                   	push   eax
c0021853:	55                   	push   ebp
c0021854:	57                   	push   edi
c0021855:	56                   	push   esi
c0021856:	53                   	push   ebx
c0021857:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002185b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002185f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021863:	e8 aa fd ff ff       	call   c0021612 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021868:	83 c4 20             	add    esp,0x20
c002186b:	83 c4 1c             	add    esp,0x1c
c002186e:	5b                   	pop    ebx
c002186f:	5e                   	pop    esi
c0021870:	5f                   	pop    edi
c0021871:	5d                   	pop    ebp
c0021872:	c3                   	ret    
c0021873:	90                   	nop

c0021874 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021874:	57                   	push   edi
c0021875:	56                   	push   esi
c0021876:	53                   	push   ebx
c0021877:	83 ec 10             	sub    esp,0x10
c002187a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002187e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021882:	85 ff                	test   edi,edi
c0021884:	0f 84 8b 00 00 00    	je     c0021915 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002188a:	85 f6                	test   esi,esi
c002188c:	0f 84 83 00 00 00    	je     c0021915 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021892:	b8 03 00 00 00       	mov    eax,0x3
c0021897:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002189c:	75 7c                	jne    c002191a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002189e:	83 ec 0c             	sub    esp,0xc
c00218a1:	6a 1c                	push   0x1c
c00218a3:	e8 f4 dc fe ff       	call   c000f59c <malloc>
c00218a8:	89 07                	mov    DWORD PTR [edi],eax
c00218aa:	89 c3                	mov    ebx,eax
c00218ac:	58                   	pop    eax
c00218ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218b1:	50                   	push   eax
c00218b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00218b5:	50                   	push   eax
c00218b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218ba:	50                   	push   eax
c00218bb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218bf:	50                   	push   eax
c00218c0:	56                   	push   esi
c00218c1:	e8 1f ff ff ff       	call   c00217e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218c6:	83 c4 20             	add    esp,0x20
c00218c9:	84 c0                	test   al,al
c00218cb:	74 07                	je     c00218d4 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00218cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00218d2:	74 0b                	je     c00218df <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00218d4:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00218d8:	b8 01 00 00 00       	mov    eax,0x1
c00218dd:	eb 3b                	jmp    c002191a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00218df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00218e7:	89 03                	mov    DWORD PTR [ebx],eax
c00218e9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00218f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00218fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021902:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021905:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002190c:	8a 06                	mov    al,BYTE PTR [esi]
c002190e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021911:	31 c0                	xor    eax,eax
c0021913:	eb 05                	jmp    c002191a <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021915:	b8 04 00 00 00       	mov    eax,0x4
c002191a:	83 c4 10             	add    esp,0x10
c002191d:	5b                   	pop    ebx
c002191e:	5e                   	pop    esi
c002191f:	5f                   	pop    edi
c0021920:	c3                   	ret    
c0021921:	90                   	nop

c0021922 <ISO9660::exists(char const*)>:
c0021922:	83 ec 28             	sub    esp,0x28
c0021925:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021929:	8d 54 24 18          	lea    edx,[esp+0x18]
c002192d:	52                   	push   edx
c002192e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021931:	52                   	push   edx
c0021932:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021936:	52                   	push   edx
c0021937:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002193b:	52                   	push   edx
c002193c:	50                   	push   eax
c002193d:	e8 a3 fe ff ff       	call   c00217e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021942:	83 c4 3c             	add    esp,0x3c
c0021945:	c3                   	ret    

c0021946 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021946:	56                   	push   esi
c0021947:	53                   	push   ebx
c0021948:	83 ec 14             	sub    esp,0x14
c002194b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002194f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021953:	85 db                	test   ebx,ebx
c0021955:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021959:	0f 94 c2             	sete   dl
c002195c:	85 f6                	test   esi,esi
c002195e:	0f 94 c0             	sete   al
c0021961:	08 c2                	or     dl,al
c0021963:	75 68                	jne    c00219cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021965:	85 c9                	test   ecx,ecx
c0021967:	74 64                	je     c00219cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021969:	83 ec 0c             	sub    esp,0xc
c002196c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002196f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021973:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021979:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021980:	50                   	push   eax
c0021981:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021984:	50                   	push   eax
c0021985:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021989:	50                   	push   eax
c002198a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002198e:	50                   	push   eax
c002198f:	51                   	push   ecx
c0021990:	e8 50 fe ff ff       	call   c00217e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021995:	83 c4 20             	add    esp,0x20
c0021998:	ba 01 00 00 00       	mov    edx,0x1
c002199d:	84 c0                	test   al,al
c002199f:	74 31                	je     c00219d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219a5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219ac:	89 03                	mov    DWORD PTR [ebx],eax
c00219ae:	ba 00 00 00 00       	mov    edx,0x0
c00219b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219b7:	85 c0                	test   eax,eax
c00219b9:	0f 95 06             	setne  BYTE PTR [esi]
c00219bc:	74 14                	je     c00219d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219be:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00219c4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219cb:	eb 05                	jmp    c00219d2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219cd:	ba 04 00 00 00       	mov    edx,0x4
c00219d2:	83 c4 14             	add    esp,0x14
c00219d5:	89 d0                	mov    eax,edx
c00219d7:	5b                   	pop    ebx
c00219d8:	5e                   	pop    esi
c00219d9:	c3                   	ret    

c00219da <ISO9660::openDir(char const*, void**)>:
c00219da:	57                   	push   edi
c00219db:	56                   	push   esi
c00219dc:	53                   	push   ebx
c00219dd:	83 ec 10             	sub    esp,0x10
c00219e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219e8:	85 ff                	test   edi,edi
c00219ea:	74 7b                	je     c0021a67 <ISO9660::openDir(char const*, void**)+0x8d>
c00219ec:	85 f6                	test   esi,esi
c00219ee:	74 77                	je     c0021a67 <ISO9660::openDir(char const*, void**)+0x8d>
c00219f0:	83 ec 0c             	sub    esp,0xc
c00219f3:	6a 1c                	push   0x1c
c00219f5:	e8 a2 db fe ff       	call   c000f59c <malloc>
c00219fa:	89 07                	mov    DWORD PTR [edi],eax
c00219fc:	89 c3                	mov    ebx,eax
c00219fe:	58                   	pop    eax
c00219ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a03:	50                   	push   eax
c0021a04:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a07:	50                   	push   eax
c0021a08:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a0c:	50                   	push   eax
c0021a0d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a11:	50                   	push   eax
c0021a12:	56                   	push   esi
c0021a13:	e8 cd fd ff ff       	call   c00217e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a18:	83 c4 20             	add    esp,0x20
c0021a1b:	84 c0                	test   al,al
c0021a1d:	74 07                	je     c0021a26 <ISO9660::openDir(char const*, void**)+0x4c>
c0021a1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a24:	75 0b                	jne    c0021a31 <ISO9660::openDir(char const*, void**)+0x57>
c0021a26:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a2a:	b8 01 00 00 00       	mov    eax,0x1
c0021a2f:	eb 3b                	jmp    c0021a6c <ISO9660::openDir(char const*, void**)+0x92>
c0021a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a35:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a39:	89 03                	mov    DWORD PTR [ebx],eax
c0021a3b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a46:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a54:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a57:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a5e:	8a 06                	mov    al,BYTE PTR [esi]
c0021a60:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a63:	31 c0                	xor    eax,eax
c0021a65:	eb 05                	jmp    c0021a6c <ISO9660::openDir(char const*, void**)+0x92>
c0021a67:	b8 04 00 00 00       	mov    eax,0x4
c0021a6c:	83 c4 10             	add    esp,0x10
c0021a6f:	5b                   	pop    ebx
c0021a70:	5e                   	pop    esi
c0021a71:	5f                   	pop    edi
c0021a72:	c3                   	ret    
c0021a73:	90                   	nop

c0021a74 <ISO9660::ISO9660()>:
c0021a74:	83 ec 0c             	sub    esp,0xc
c0021a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7b:	83 ec 0c             	sub    esp,0xc
c0021a7e:	50                   	push   eax
c0021a7f:	e8 84 0e ff ff       	call   c0012908 <Filesystem::Filesystem()>
c0021a84:	83 c4 10             	add    esp,0x10
c0021a87:	ba 00 bd 02 c0       	mov    edx,0xc002bd00
c0021a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a90:	89 10                	mov    DWORD PTR [eax],edx
c0021a92:	90                   	nop
c0021a93:	83 c4 0c             	add    esp,0xc
c0021a96:	c3                   	ret    
c0021a97:	90                   	nop

c0021a98 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021a98:	83 ec 1c             	sub    esp,0x1c
c0021a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021aa3:	89 10                	mov    DWORD PTR [eax],edx
c0021aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021aad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ab4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021ab8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021abb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021ac0:	75 23                	jne    c0021ae5 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ac6:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021acc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021acf:	0f af c2             	imul   eax,edx
c0021ad2:	85 c0                	test   eax,eax
c0021ad4:	79 03                	jns    c0021ad9 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021ad6:	83 c0 03             	add    eax,0x3
c0021ad9:	c1 f8 02             	sar    eax,0x2
c0021adc:	05 a0 0f 00 00       	add    eax,0xfa0
c0021ae1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ae9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021aed:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021af4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021afb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021aff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b0a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021b0d:	c1 e0 02             	shl    eax,0x2
c0021b10:	83 ec 0c             	sub    esp,0xc
c0021b13:	50                   	push   eax
c0021b14:	e8 83 da fe ff       	call   c000f59c <malloc>
c0021b19:	83 c4 10             	add    esp,0x10
c0021b1c:	89 c2                	mov    edx,eax
c0021b1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021b25:	83 ec 04             	sub    esp,0x4
c0021b28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b2c:	50                   	push   eax
c0021b2d:	6a 01                	push   0x1
c0021b2f:	6a 04                	push   0x4
c0021b31:	e8 2f 70 fe ff       	call   c0008b65 <src_new>
c0021b36:	83 c4 10             	add    esp,0x10
c0021b39:	89 c2                	mov    edx,eax
c0021b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b3f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b46:	85 c0                	test   eax,eax
c0021b48:	74 10                	je     c0021b5a <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021b4a:	83 ec 0c             	sub    esp,0xc
c0021b4d:	68 60 bd 02 c0       	push   0xc002bd60
c0021b52:	e8 12 82 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0021b57:	83 c4 10             	add    esp,0x10
c0021b5a:	a0 c0 1a 03 c0       	mov    al,ds:0xc0031ac0
c0021b5f:	83 f0 01             	xor    eax,0x1
c0021b62:	84 c0                	test   al,al
c0021b64:	74 57                	je     c0021bbd <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021b66:	a1 7c bd 02 c0       	mov    eax,ds:0xc002bd7c
c0021b6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b77:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021b7f:	7f 35                	jg     c0021bb6 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021b81:	83 ec 0c             	sub    esp,0xc
c0021b84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b88:	e8 e2 53 00 00       	call   c0026f6f <__floatsisf>
c0021b8d:	83 c4 10             	add    esp,0x10
c0021b90:	8b 15 7c bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd7c
c0021b96:	83 ec 08             	sub    esp,0x8
c0021b99:	52                   	push   edx
c0021b9a:	50                   	push   eax
c0021b9b:	e8 e1 4f 00 00       	call   c0026b81 <__mulsf3>
c0021ba0:	83 c4 10             	add    esp,0x10
c0021ba3:	89 c2                	mov    edx,eax
c0021ba5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ba9:	89 14 85 c0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce940],edx
c0021bb0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021bb4:	eb c1                	jmp    c0021b77 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021bb6:	c6 05 c0 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac0,0x1
c0021bbd:	90                   	nop
c0021bbe:	83 c4 1c             	add    esp,0x1c
c0021bc1:	c3                   	ret    

c0021bc2 <SoundChannel::~SoundChannel()>:
c0021bc2:	83 ec 0c             	sub    esp,0xc
c0021bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	50                   	push   eax
c0021bd0:	e8 d7 d9 fe ff       	call   c000f5ac <free>
c0021bd5:	83 c4 10             	add    esp,0x10
c0021bd8:	90                   	nop
c0021bd9:	83 c4 0c             	add    esp,0xc
c0021bdc:	c3                   	ret    
c0021bdd:	90                   	nop

c0021bde <SoundChannel::getSampleRate()>:
c0021bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021be2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021be4:	c3                   	ret    
c0021be5:	90                   	nop

c0021be6 <SoundChannel::getBits()>:
c0021be6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bed:	c3                   	ret    

c0021bee <SoundChannel::getBufferUsed()>:
c0021bee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021bf5:	c3                   	ret    

c0021bf6 <SoundChannel::getBufferSize()>:
c0021bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bfa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bfd:	c3                   	ret    

c0021bfe <SoundChannel::unbuffer(float*, int, int)>:
c0021bfe:	56                   	push   esi
c0021bff:	53                   	push   ebx
c0021c00:	83 ec 40             	sub    esp,0x40
c0021c03:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021c07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021c0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c0e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021c11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021c15:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021c19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021c1d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021c21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c25:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021c29:	e8 41 53 00 00       	call   c0026f6f <__floatsisf>
c0021c2e:	5a                   	pop    edx
c0021c2f:	89 c6                	mov    esi,eax
c0021c31:	ff 33                	push   DWORD PTR [ebx]
c0021c33:	e8 37 53 00 00       	call   c0026f6f <__floatsisf>
c0021c38:	59                   	pop    ecx
c0021c39:	5a                   	pop    edx
c0021c3a:	50                   	push   eax
c0021c3b:	56                   	push   esi
c0021c3c:	e8 03 51 00 00       	call   c0026d44 <__divsf3>
c0021c41:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c44:	e8 f6 65 00 00       	call   c002823f <__extendsfdf2>
c0021c49:	59                   	pop    ecx
c0021c4a:	5e                   	pop    esi
c0021c4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c4f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021c53:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021c5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c5f:	50                   	push   eax
c0021c60:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021c63:	e8 f2 6a fe ff       	call   c000875a <src_process>
c0021c68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c6c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021c6f:	83 c4 0c             	add    esp,0xc
c0021c72:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021c75:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021c78:	29 d0                	sub    eax,edx
c0021c7a:	c1 e0 02             	shl    eax,0x2
c0021c7d:	50                   	push   eax
c0021c7e:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021c81:	50                   	push   eax
c0021c82:	51                   	push   ecx
c0021c83:	e8 00 ea fd ff       	call   c0000688 <memmove>
c0021c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c8c:	83 c4 44             	add    esp,0x44
c0021c8f:	5b                   	pop    ebx
c0021c90:	5e                   	pop    esi
c0021c91:	c3                   	ret    

c0021c92 <SoundChannel::buffer16(short*, int)>:
c0021c92:	55                   	push   ebp
c0021c93:	57                   	push   edi
c0021c94:	56                   	push   esi
c0021c95:	53                   	push   ebx
c0021c96:	83 ec 1c             	sub    esp,0x1c
c0021c99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021c9d:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021ca0:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021ca3:	0f 84 d2 00 00 00    	je     c0021d7b <SoundChannel::buffer16(short*, int)+0xe9>
c0021ca9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021cad:	85 ed                	test   ebp,ebp
c0021caf:	0f 8e c6 00 00 00    	jle    c0021d7b <SoundChannel::buffer16(short*, int)+0xe9>
c0021cb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021cb9:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021cbe:	83 ec 0c             	sub    esp,0xc
c0021cc1:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021cc4:	50                   	push   eax
c0021cc5:	e8 a5 52 00 00       	call   c0026f6f <__floatsisf>
c0021cca:	59                   	pop    ecx
c0021ccb:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021cce:	5f                   	pop    edi
c0021ccf:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021cd2:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021cd5:	55                   	push   ebp
c0021cd6:	50                   	push   eax
c0021cd7:	e8 a5 4e 00 00       	call   c0026b81 <__mulsf3>
c0021cdc:	83 c4 10             	add    esp,0x10
c0021cdf:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021ce2:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021ce5:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021ce8:	0f 84 99 00 00 00    	je     c0021d87 <SoundChannel::buffer16(short*, int)+0xf5>
c0021cee:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021cf3:	74 78                	je     c0021d6d <SoundChannel::buffer16(short*, int)+0xdb>
c0021cf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021cf9:	83 ec 0c             	sub    esp,0xc
c0021cfc:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021d00:	50                   	push   eax
c0021d01:	e8 69 52 00 00       	call   c0026f6f <__floatsisf>
c0021d06:	5f                   	pop    edi
c0021d07:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d0a:	5a                   	pop    edx
c0021d0b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d0e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d11:	55                   	push   ebp
c0021d12:	50                   	push   eax
c0021d13:	e8 69 4e 00 00       	call   c0026b81 <__mulsf3>
c0021d18:	83 c4 10             	add    esp,0x10
c0021d1b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021d1e:	be 02 00 00 00       	mov    esi,0x2
c0021d23:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d26:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d29:	74 46                	je     c0021d71 <SoundChannel::buffer16(short*, int)+0xdf>
c0021d2b:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021d2f:	eb 36                	jmp    c0021d67 <SoundChannel::buffer16(short*, int)+0xd5>
c0021d31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d35:	83 ec 0c             	sub    esp,0xc
c0021d38:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021d3c:	46                   	inc    esi
c0021d3d:	50                   	push   eax
c0021d3e:	e8 2c 52 00 00       	call   c0026f6f <__floatsisf>
c0021d43:	5a                   	pop    edx
c0021d44:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021d47:	59                   	pop    ecx
c0021d48:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021d4b:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d52:	50                   	push   eax
c0021d53:	e8 29 4e 00 00       	call   c0026b81 <__mulsf3>
c0021d58:	83 c4 10             	add    esp,0x10
c0021d5b:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021d5f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021d62:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021d65:	74 0a                	je     c0021d71 <SoundChannel::buffer16(short*, int)+0xdf>
c0021d67:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021d6b:	75 c4                	jne    c0021d31 <SoundChannel::buffer16(short*, int)+0x9f>
c0021d6d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021d71:	83 c4 1c             	add    esp,0x1c
c0021d74:	89 f0                	mov    eax,esi
c0021d76:	5b                   	pop    ebx
c0021d77:	5e                   	pop    esi
c0021d78:	5f                   	pop    edi
c0021d79:	5d                   	pop    ebp
c0021d7a:	c3                   	ret    
c0021d7b:	83 c4 1c             	add    esp,0x1c
c0021d7e:	31 f6                	xor    esi,esi
c0021d80:	5b                   	pop    ebx
c0021d81:	89 f0                	mov    eax,esi
c0021d83:	5e                   	pop    esi
c0021d84:	5f                   	pop    edi
c0021d85:	5d                   	pop    ebp
c0021d86:	c3                   	ret    
c0021d87:	be 01 00 00 00       	mov    esi,0x1
c0021d8c:	eb e3                	jmp    c0021d71 <SoundChannel::buffer16(short*, int)+0xdf>

c0021d8e <SoundChannel::buffer8(unsigned char*, int)>:
c0021d8e:	55                   	push   ebp
c0021d8f:	57                   	push   edi
c0021d90:	56                   	push   esi
c0021d91:	53                   	push   ebx
c0021d92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d96:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d9a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021da1:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021da4:	74 7a                	je     c0021e20 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021da6:	85 ff                	test   edi,edi
c0021da8:	7e 76                	jle    c0021e20 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021daa:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021dae:	8d 70 01             	lea    esi,[eax+0x1]
c0021db1:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021db4:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021db7:	8b 1c 9d c0 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce940]
c0021dbe:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021dc1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021dc4:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021dc7:	74 5e                	je     c0021e27 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021dc9:	83 ff 01             	cmp    edi,0x1
c0021dcc:	74 4b                	je     c0021e19 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021dce:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021dd2:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021dd5:	8d 70 01             	lea    esi,[eax+0x1]
c0021dd8:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ddb:	8b 1c 9d c0 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce940]
c0021de2:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021de5:	b8 02 00 00 00       	mov    eax,0x2
c0021dea:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ded:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021df0:	75 23                	jne    c0021e15 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021df2:	eb 27                	jmp    c0021e1b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021df4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021df9:	8d 71 01             	lea    esi,[ecx+0x1]
c0021dfc:	40                   	inc    eax
c0021dfd:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e00:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021e03:	8b 1c 9d c0 16 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce940]
c0021e0a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021e0d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021e10:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021e13:	74 06                	je     c0021e1b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021e15:	39 c7                	cmp    edi,eax
c0021e17:	75 db                	jne    c0021df4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021e19:	89 f8                	mov    eax,edi
c0021e1b:	5b                   	pop    ebx
c0021e1c:	5e                   	pop    esi
c0021e1d:	5f                   	pop    edi
c0021e1e:	5d                   	pop    ebp
c0021e1f:	c3                   	ret    
c0021e20:	5b                   	pop    ebx
c0021e21:	31 c0                	xor    eax,eax
c0021e23:	5e                   	pop    esi
c0021e24:	5f                   	pop    edi
c0021e25:	5d                   	pop    ebp
c0021e26:	c3                   	ret    
c0021e27:	b8 01 00 00 00       	mov    eax,0x1
c0021e2c:	eb ed                	jmp    c0021e1b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021e2e <SoundDevice::SoundDevice(char const*)>:
c0021e2e:	83 ec 1c             	sub    esp,0x1c
c0021e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e35:	83 ec 08             	sub    esp,0x8
c0021e38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021e3c:	50                   	push   eax
c0021e3d:	e8 f8 1d ff ff       	call   c0013c3a <Device::Device(char const*)>
c0021e42:	83 c4 10             	add    esp,0x10
c0021e45:	ba 88 bd 02 c0       	mov    edx,0xc002bd88
c0021e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e4e:	89 10                	mov    DWORD PTR [eax],edx
c0021e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e54:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021e6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e74:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e79:	7f 19                	jg     c0021e94 <SoundDevice::SoundDevice(char const*)+0x66>
c0021e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e83:	83 c2 54             	add    edx,0x54
c0021e86:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021e8e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e92:	eb e0                	jmp    c0021e74 <SoundDevice::SoundDevice(char const*)+0x46>
c0021e94:	90                   	nop
c0021e95:	83 c4 1c             	add    esp,0x1c
c0021e98:	c3                   	ret    
c0021e99:	90                   	nop

c0021e9a <SoundDevice::~SoundDevice()>:
c0021e9a:	53                   	push   ebx
c0021e9b:	83 ec 18             	sub    esp,0x18
c0021e9e:	ba 88 bd 02 c0       	mov    edx,0xc002bd88
c0021ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ea7:	89 10                	mov    DWORD PTR [eax],edx
c0021ea9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021eb1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021eb6:	7f 46                	jg     c0021efe <SoundDevice::~SoundDevice()+0x64>
c0021eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ebc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ec0:	83 c2 54             	add    edx,0x54
c0021ec3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021ec7:	85 c0                	test   eax,eax
c0021ec9:	74 2d                	je     c0021ef8 <SoundDevice::~SoundDevice()+0x5e>
c0021ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ecf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ed3:	83 c2 54             	add    edx,0x54
c0021ed6:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021eda:	85 db                	test   ebx,ebx
c0021edc:	74 1a                	je     c0021ef8 <SoundDevice::~SoundDevice()+0x5e>
c0021ede:	83 ec 0c             	sub    esp,0xc
c0021ee1:	53                   	push   ebx
c0021ee2:	e8 db fc ff ff       	call   c0021bc2 <SoundChannel::~SoundChannel()>
c0021ee7:	83 c4 10             	add    esp,0x10
c0021eea:	83 ec 08             	sub    esp,0x8
c0021eed:	6a 2c                	push   0x2c
c0021eef:	53                   	push   ebx
c0021ef0:	e8 30 06 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0021ef5:	83 c4 10             	add    esp,0x10
c0021ef8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021efc:	eb b3                	jmp    c0021eb1 <SoundDevice::~SoundDevice()+0x17>
c0021efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f02:	83 ec 0c             	sub    esp,0xc
c0021f05:	50                   	push   eax
c0021f06:	e8 f9 19 ff ff       	call   c0013904 <Device::~Device()>
c0021f0b:	83 c4 10             	add    esp,0x10
c0021f0e:	90                   	nop
c0021f0f:	83 c4 18             	add    esp,0x18
c0021f12:	5b                   	pop    ebx
c0021f13:	c3                   	ret    

c0021f14 <SoundDevice::~SoundDevice()>:
c0021f14:	83 ec 0c             	sub    esp,0xc
c0021f17:	83 ec 0c             	sub    esp,0xc
c0021f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f1e:	e8 77 ff ff ff       	call   c0021e9a <SoundDevice::~SoundDevice()>
c0021f23:	83 c4 10             	add    esp,0x10
c0021f26:	83 ec 08             	sub    esp,0x8
c0021f29:	68 e4 01 00 00       	push   0x1e4
c0021f2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f32:	e8 ee 05 ff ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0021f37:	83 c4 10             	add    esp,0x10
c0021f3a:	83 c4 0c             	add    esp,0xc
c0021f3d:	c3                   	ret    

c0021f3e <SoundDevice::getFreeChannelNum()>:
c0021f3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f42:	31 c0                	xor    eax,eax
c0021f44:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021f4c:	74 09                	je     c0021f57 <SoundDevice::getFreeChannelNum()+0x19>
c0021f4e:	40                   	inc    eax
c0021f4f:	83 f8 20             	cmp    eax,0x20
c0021f52:	75 f0                	jne    c0021f44 <SoundDevice::getFreeChannelNum()+0x6>
c0021f54:	83 c8 ff             	or     eax,0xffffffff
c0021f57:	c3                   	ret    

c0021f58 <SoundDevice::addChannel(SoundChannel*)>:
c0021f58:	56                   	push   esi
c0021f59:	53                   	push   ebx
c0021f5a:	51                   	push   ecx
c0021f5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f5f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f63:	53                   	push   ebx
c0021f64:	e8 d5 ff ff ff       	call   c0021f3e <SoundDevice::getFreeChannelNum()>
c0021f69:	5a                   	pop    edx
c0021f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0021f6d:	74 51                	je     c0021fc0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f6f:	85 f6                	test   esi,esi
c0021f71:	74 4d                	je     c0021fc0 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f73:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021f7a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021f81:	75 30                	jne    c0021fb3 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021f83:	83 ec 0c             	sub    esp,0xc
c0021f86:	56                   	push   esi
c0021f87:	e8 52 fc ff ff       	call   c0021bde <SoundChannel::getSampleRate()>
c0021f8c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021f92:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f95:	e8 4c fc ff ff       	call   c0021be6 <SoundChannel::getBits()>
c0021f9a:	83 c4 0c             	add    esp,0xc
c0021f9d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021fa3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021fa5:	50                   	push   eax
c0021fa6:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021fac:	53                   	push   ebx
c0021fad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021fb0:	83 c4 10             	add    esp,0x10
c0021fb3:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021fb9:	b8 01 00 00 00       	mov    eax,0x1
c0021fbe:	eb 03                	jmp    c0021fc3 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021fc0:	83 c8 ff             	or     eax,0xffffffff
c0021fc3:	5a                   	pop    edx
c0021fc4:	5b                   	pop    ebx
c0021fc5:	5e                   	pop    esi
c0021fc6:	c3                   	ret    
c0021fc7:	90                   	nop

c0021fc8 <SoundDevice::removeChannel(int)>:
c0021fc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fd0:	83 fa 1f             	cmp    edx,0x1f
c0021fd3:	77 23                	ja     c0021ff8 <SoundDevice::removeChannel(int)+0x30>
c0021fd5:	8d 14 90             	lea    edx,[eax+edx*4]
c0021fd8:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021fdf:	74 17                	je     c0021ff8 <SoundDevice::removeChannel(int)+0x30>
c0021fe1:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021feb:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021ff1:	75 05                	jne    c0021ff8 <SoundDevice::removeChannel(int)+0x30>
c0021ff3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ff5:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021ff8:	c3                   	ret    
c0021ff9:	90                   	nop

c0021ffa <SoundDevice::floatTo16(float*, short*, int)>:
c0021ffa:	57                   	push   edi
c0021ffb:	56                   	push   esi
c0021ffc:	53                   	push   ebx
c0021ffd:	31 db                	xor    ebx,ebx
c0021fff:	83 ec 10             	sub    esp,0x10
c0022002:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022006:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002200a:	0f 8d d0 00 00 00    	jge    c00220e0 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022010:	83 ec 0c             	sub    esp,0xc
c0022013:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022017:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002201a:	e8 20 62 00 00       	call   c002823f <__extendsfdf2>
c002201f:	83 c4 10             	add    esp,0x10
c0022022:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022026:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002202a:	68 00 00 f0 3f       	push   0x3ff00000
c002202f:	6a 00                	push   0x0
c0022031:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022039:	e8 8d 51 00 00       	call   c00271cb <__adddf3>
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022049:	68 00 00 e0 3f       	push   0x3fe00000
c002204e:	6a 00                	push   0x0
c0022050:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022058:	e8 eb 57 00 00       	call   c0027848 <__muldf3>
c002205d:	83 c4 10             	add    esp,0x10
c0022060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022064:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022068:	68 c0 ff df 40       	push   0x40dfffc0
c002206d:	6a 00                	push   0x0
c002206f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022077:	e8 cc 57 00 00       	call   c0027848 <__muldf3>
c002207c:	59                   	pop    ecx
c002207d:	5f                   	pop    edi
c002207e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022082:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022086:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002208a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002208e:	e8 88 60 00 00       	call   c002811b <__truncdfsf2>
c0022093:	5a                   	pop    edx
c0022094:	89 c7                	mov    edi,eax
c0022096:	59                   	pop    ecx
c0022097:	68 00 fe ff 46       	push   0x46fffe00
c002209c:	50                   	push   eax
c002209d:	e8 23 51 00 00       	call   c00271c5 <__gesf2>
c00220a2:	83 c4 10             	add    esp,0x10
c00220a5:	85 c0                	test   eax,eax
c00220a7:	78 08                	js     c00220b1 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00220a9:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00220af:	eb 29                	jmp    c00220da <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00220b1:	50                   	push   eax
c00220b2:	50                   	push   eax
c00220b3:	6a 00                	push   0x0
c00220b5:	57                   	push   edi
c00220b6:	e8 0e 51 00 00       	call   c00271c9 <__lesf2>
c00220bb:	83 c4 10             	add    esp,0x10
c00220be:	85 c0                	test   eax,eax
c00220c0:	7f 08                	jg     c00220ca <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00220c2:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00220c8:	eb 10                	jmp    c00220da <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00220ca:	83 ec 0c             	sub    esp,0xc
c00220cd:	57                   	push   edi
c00220ce:	e8 09 62 00 00       	call   c00282dc <lrintf>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00220da:	43                   	inc    ebx
c00220db:	e9 26 ff ff ff       	jmp    c0022006 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00220e0:	83 c4 10             	add    esp,0x10
c00220e3:	5b                   	pop    ebx
c00220e4:	5e                   	pop    esi
c00220e5:	5f                   	pop    edi
c00220e6:	c3                   	ret    
c00220e7:	90                   	nop

c00220e8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00220e8:	57                   	push   edi
c00220e9:	56                   	push   esi
c00220ea:	53                   	push   ebx
c00220eb:	31 db                	xor    ebx,ebx
c00220ed:	83 ec 10             	sub    esp,0x10
c00220f0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220f4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220f8:	0f 8d cb 00 00 00    	jge    c00221c9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00220fe:	83 ec 0c             	sub    esp,0xc
c0022101:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022105:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022108:	e8 32 61 00 00       	call   c002823f <__extendsfdf2>
c002210d:	83 c4 10             	add    esp,0x10
c0022110:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022114:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022118:	68 00 00 f0 3f       	push   0x3ff00000
c002211d:	6a 00                	push   0x0
c002211f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022127:	e8 9f 50 00 00       	call   c00271cb <__adddf3>
c002212c:	83 c4 10             	add    esp,0x10
c002212f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022133:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022137:	68 00 00 e0 3f       	push   0x3fe00000
c002213c:	6a 00                	push   0x0
c002213e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022142:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022146:	e8 fd 56 00 00       	call   c0027848 <__muldf3>
c002214b:	83 c4 10             	add    esp,0x10
c002214e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022152:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022156:	68 00 00 60 40       	push   0x40600000
c002215b:	6a 00                	push   0x0
c002215d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022165:	e8 de 56 00 00       	call   c0027848 <__muldf3>
c002216a:	59                   	pop    ecx
c002216b:	5f                   	pop    edi
c002216c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022170:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002217c:	e8 9a 5f 00 00       	call   c002811b <__truncdfsf2>
c0022181:	5a                   	pop    edx
c0022182:	89 c7                	mov    edi,eax
c0022184:	59                   	pop    ecx
c0022185:	68 00 00 fe 42       	push   0x42fe0000
c002218a:	50                   	push   eax
c002218b:	e8 35 50 00 00       	call   c00271c5 <__gesf2>
c0022190:	83 c4 10             	add    esp,0x10
c0022193:	85 c0                	test   eax,eax
c0022195:	78 06                	js     c002219d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022197:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002219b:	eb 26                	jmp    c00221c3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002219d:	50                   	push   eax
c002219e:	50                   	push   eax
c002219f:	6a 00                	push   0x0
c00221a1:	57                   	push   edi
c00221a2:	e8 22 50 00 00       	call   c00271c9 <__lesf2>
c00221a7:	83 c4 10             	add    esp,0x10
c00221aa:	85 c0                	test   eax,eax
c00221ac:	7f 06                	jg     c00221b4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00221ae:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00221b2:	eb 0f                	jmp    c00221c3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00221b4:	83 ec 0c             	sub    esp,0xc
c00221b7:	57                   	push   edi
c00221b8:	e8 1f 61 00 00       	call   c00282dc <lrintf>
c00221bd:	83 c4 10             	add    esp,0x10
c00221c0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00221c3:	43                   	inc    ebx
c00221c4:	e9 2b ff ff ff       	jmp    c00220f4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00221c9:	83 c4 10             	add    esp,0x10
c00221cc:	5b                   	pop    ebx
c00221cd:	5e                   	pop    esi
c00221ce:	5f                   	pop    edi
c00221cf:	c3                   	ret    

c00221d0 <SoundDevice::getAudio(int, float*, float*)>:
c00221d0:	55                   	push   ebp
c00221d1:	31 ed                	xor    ebp,ebp
c00221d3:	57                   	push   edi
c00221d4:	56                   	push   esi
c00221d5:	31 f6                	xor    esi,esi
c00221d7:	53                   	push   ebx
c00221d8:	83 ec 20             	sub    esp,0x20
c00221db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00221df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00221e3:	c1 e0 02             	shl    eax,0x2
c00221e6:	50                   	push   eax
c00221e7:	6a 00                	push   0x0
c00221e9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00221ed:	e8 5e e5 fd ff       	call   c0000750 <memset>
c00221f2:	83 c4 10             	add    esp,0x10
c00221f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221fd:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c0022204:	85 c9                	test   ecx,ecx
c0022206:	74 52                	je     c002225a <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022208:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002220c:	99                   	cdq    
c002220d:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022213:	50                   	push   eax
c0022214:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002221a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002221e:	51                   	push   ecx
c002221f:	e8 da f9 ff ff       	call   c0021bfe <SoundChannel::unbuffer(float*, int, int)>
c0022224:	31 d2                	xor    edx,edx
c0022226:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002222a:	83 c4 10             	add    esp,0x10
c002222d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022231:	7d 1e                	jge    c0022251 <SoundDevice::getAudio(int, float*, float*)+0x81>
c0022233:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022237:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002223b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c002223e:	89 cf                	mov    edi,ecx
c0022240:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022246:	0f af ca             	imul   ecx,edx
c0022249:	42                   	inc    edx
c002224a:	01 e9                	add    ecx,ebp
c002224c:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c002224f:	eb dc                	jmp    c002222d <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022251:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022255:	45                   	inc    ebp
c0022256:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002225a:	46                   	inc    esi
c002225b:	83 fe 20             	cmp    esi,0x20
c002225e:	75 9d                	jne    c00221fd <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022264:	83 c4 1c             	add    esp,0x1c
c0022267:	5b                   	pop    ebx
c0022268:	5e                   	pop    esi
c0022269:	5f                   	pop    edi
c002226a:	5d                   	pop    ebp
c002226b:	c3                   	ret    

c002226c <PCI::open(int, int, void*)>:
c002226c:	83 ec 18             	sub    esp,0x18
c002226f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022273:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022277:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002227d:	8b 10                	mov    edx,DWORD PTR [eax]
c002227f:	50                   	push   eax
c0022280:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022283:	31 c0                	xor    eax,eax
c0022285:	83 c4 1c             	add    esp,0x1c
c0022288:	c3                   	ret    
c0022289:	90                   	nop

c002228a <PCI::close(int, int, void*)>:
c002228a:	31 c0                	xor    eax,eax
c002228c:	c3                   	ret    
c002228d:	90                   	nop

c002228e <PCI::PCI()>:
c002228e:	83 ec 0c             	sub    esp,0xc
c0022291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022295:	83 ec 08             	sub    esp,0x8
c0022298:	68 b8 bd 02 c0       	push   0xc002bdb8
c002229d:	50                   	push   eax
c002229e:	e8 fb 0f ff ff       	call   c001329e <Bus::Bus(char const*)>
c00222a3:	83 c4 10             	add    esp,0x10
c00222a6:	ba a4 be 02 c0       	mov    edx,0xc002bea4
c00222ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222af:	89 10                	mov    DWORD PTR [eax],edx
c00222b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00222bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c3:	a3 c4 1a 03 c0       	mov    ds:0xc0031ac4,eax
c00222c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222cc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222d2:	0f b6 d0             	movzx  edx,al
c00222d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00222e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222ea:	0f b6 d0             	movzx  edx,al
c00222ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00222f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022300:	8d 50 01             	lea    edx,[eax+0x1]
c0022303:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022307:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002230d:	0f b6 d0             	movzx  edx,al
c0022310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022314:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022318:	83 c9 c0             	or     ecx,0xffffffc0
c002231b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002231f:	90                   	nop
c0022320:	83 c4 0c             	add    esp,0xc
c0022323:	c3                   	ret    

c0022324 <PCI::readBAR8(unsigned int, int)>:
c0022324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002232c:	f6 c2 01             	test   dl,0x1
c002232f:	74 07                	je     c0022338 <PCI::readBAR8(unsigned int, int)+0x14>
c0022331:	83 e2 fc             	and    edx,0xfffffffc
c0022334:	01 c2                	add    edx,eax
c0022336:	ec                   	in     al,dx
c0022337:	c3                   	ret    
c0022338:	83 e2 f0             	and    edx,0xfffffff0
c002233b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002233e:	c3                   	ret    
c002233f:	90                   	nop

c0022340 <PCI::readBAR16(unsigned int, int)>:
c0022340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022348:	f6 c2 01             	test   dl,0x1
c002234b:	74 08                	je     c0022355 <PCI::readBAR16(unsigned int, int)+0x15>
c002234d:	83 e2 fc             	and    edx,0xfffffffc
c0022350:	01 c2                	add    edx,eax
c0022352:	66 ed                	in     ax,dx
c0022354:	c3                   	ret    
c0022355:	83 e2 f0             	and    edx,0xfffffff0
c0022358:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002235c:	c3                   	ret    
c002235d:	90                   	nop

c002235e <PCI::readBAR32(unsigned int, int)>:
c002235e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022362:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022366:	f6 c2 01             	test   dl,0x1
c0022369:	74 07                	je     c0022372 <PCI::readBAR32(unsigned int, int)+0x14>
c002236b:	83 e2 fc             	and    edx,0xfffffffc
c002236e:	01 c2                	add    edx,eax
c0022370:	ed                   	in     eax,dx
c0022371:	c3                   	ret    
c0022372:	83 e2 f0             	and    edx,0xfffffff0
c0022375:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022378:	c3                   	ret    
c0022379:	90                   	nop

c002237a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002237a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002237e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022382:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022386:	f6 c2 01             	test   dl,0x1
c0022389:	74 07                	je     c0022392 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002238b:	83 e2 fc             	and    edx,0xfffffffc
c002238e:	01 ca                	add    edx,ecx
c0022390:	ee                   	out    dx,al
c0022391:	c3                   	ret    
c0022392:	83 e2 f0             	and    edx,0xfffffff0
c0022395:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022398:	c3                   	ret    
c0022399:	90                   	nop

c002239a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002239a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002239e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223a6:	f6 c2 01             	test   dl,0x1
c00223a9:	74 08                	je     c00223b3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00223ab:	83 e2 fc             	and    edx,0xfffffffc
c00223ae:	01 ca                	add    edx,ecx
c00223b0:	66 ef                	out    dx,ax
c00223b2:	c3                   	ret    
c00223b3:	83 e2 f0             	and    edx,0xfffffff0
c00223b6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00223ba:	c3                   	ret    
c00223bb:	90                   	nop

c00223bc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00223bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223c8:	f6 c2 01             	test   dl,0x1
c00223cb:	74 07                	je     c00223d4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00223cd:	83 e2 fc             	and    edx,0xfffffffc
c00223d0:	01 ca                	add    edx,ecx
c00223d2:	ef                   	out    dx,eax
c00223d3:	c3                   	ret    
c00223d4:	83 e2 f0             	and    edx,0xfffffff0
c00223d7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00223da:	c3                   	ret    
c00223db:	90                   	nop

c00223dc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223dc:	55                   	push   ebp
c00223dd:	57                   	push   edi
c00223de:	56                   	push   esi
c00223df:	53                   	push   ebx
c00223e0:	83 ec 0c             	sub    esp,0xc
c00223e3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00223e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00223eb:	89 f0                	mov    eax,esi
c00223ed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00223f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00223f5:	3c 07                	cmp    al,0x7
c00223f7:	76 10                	jbe    c0022409 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00223f9:	83 ec 0c             	sub    esp,0xc
c00223fc:	68 c0 bd 02 c0       	push   0xc002bdc0
c0022401:	e8 63 79 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0022406:	83 c4 10             	add    esp,0x10
c0022409:	80 fb 0f             	cmp    bl,0xf
c002240c:	76 10                	jbe    c002241e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c002240e:	83 ec 0c             	sub    esp,0xc
c0022411:	68 f0 bd 02 c0       	push   0xc002bdf0
c0022416:	e8 4e 79 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c002241b:	83 c4 10             	add    esp,0x10
c002241e:	8d 04 36             	lea    eax,[esi+esi*1]
c0022421:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022426:	83 c8 f0             	or     eax,0xfffffff0
c0022429:	ee                   	out    dx,al
c002242a:	ba fa 0c 00 00       	mov    edx,0xcfa
c002242f:	89 e8                	mov    eax,ebp
c0022431:	ee                   	out    dx,al
c0022432:	83 c4 0c             	add    esp,0xc
c0022435:	89 d8                	mov    eax,ebx
c0022437:	66 81 e7 fc 00       	and    di,0xfc
c002243c:	5b                   	pop    ebx
c002243d:	c1 e0 08             	shl    eax,0x8
c0022440:	5e                   	pop    esi
c0022441:	09 f8                	or     eax,edi
c0022443:	5f                   	pop    edi
c0022444:	66 0d 00 c0          	or     ax,0xc000
c0022448:	5d                   	pop    ebp
c0022449:	c3                   	ret    

c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002244a:	57                   	push   edi
c002244b:	56                   	push   esi
c002244c:	53                   	push   ebx
c002244d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022451:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022455:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002245b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002245f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022463:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022467:	83 ff 01             	cmp    edi,0x1
c002246a:	75 3e                	jne    c00224aa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c002246c:	89 de                	mov    esi,ebx
c002246e:	0f b6 c0             	movzx  eax,al
c0022471:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022477:	c1 e0 10             	shl    eax,0x10
c002247a:	0f b6 c9             	movzx  ecx,cl
c002247d:	09 f0                	or     eax,esi
c002247f:	c1 e1 08             	shl    ecx,0x8
c0022482:	0f b6 d2             	movzx  edx,dl
c0022485:	09 c8                	or     eax,ecx
c0022487:	c1 e2 0b             	shl    edx,0xb
c002248a:	09 d0                	or     eax,edx
c002248c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022491:	0d 00 00 00 80       	or     eax,0x80000000
c0022496:	ef                   	out    dx,eax
c0022497:	ba fc 0c 00 00       	mov    edx,0xcfc
c002249c:	ed                   	in     eax,dx
c002249d:	83 e3 02             	and    ebx,0x2
c00224a0:	0f b6 cb             	movzx  ecx,bl
c00224a3:	c1 e1 03             	shl    ecx,0x3
c00224a6:	d3 e8                	shr    eax,cl
c00224a8:	eb 43                	jmp    c00224ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00224aa:	83 ff 02             	cmp    edi,0x2
c00224ad:	75 2c                	jne    c00224db <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00224af:	83 ec 0c             	sub    esp,0xc
c00224b2:	0f b6 c9             	movzx  ecx,cl
c00224b5:	0f b6 d2             	movzx  edx,dl
c00224b8:	0f b6 fb             	movzx  edi,bl
c00224bb:	0f b6 c0             	movzx  eax,al
c00224be:	57                   	push   edi
c00224bf:	51                   	push   ecx
c00224c0:	52                   	push   edx
c00224c1:	50                   	push   eax
c00224c2:	56                   	push   esi
c00224c3:	e8 14 ff ff ff       	call   c00223dc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224c8:	89 c2                	mov    edx,eax
c00224ca:	ed                   	in     eax,dx
c00224cb:	83 e3 02             	and    ebx,0x2
c00224ce:	83 c4 20             	add    esp,0x20
c00224d1:	0f b6 cb             	movzx  ecx,bl
c00224d4:	c1 e1 03             	shl    ecx,0x3
c00224d7:	d3 e8                	shr    eax,cl
c00224d9:	eb 12                	jmp    c00224ed <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00224db:	83 ec 0c             	sub    esp,0xc
c00224de:	68 20 be 02 c0       	push   0xc002be20
c00224e3:	e8 81 78 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00224e8:	83 c4 10             	add    esp,0x10
c00224eb:	31 c0                	xor    eax,eax
c00224ed:	5b                   	pop    ebx
c00224ee:	5e                   	pop    esi
c00224ef:	5f                   	pop    edi
c00224f0:	c3                   	ret    
c00224f1:	90                   	nop

c00224f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00224f2:	83 ec 18             	sub    esp,0x18
c00224f5:	6a 00                	push   0x0
c00224f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224fc:	50                   	push   eax
c00224fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022502:	50                   	push   eax
c0022503:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022508:	50                   	push   eax
c0022509:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002250d:	e8 38 ff ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022512:	83 c4 2c             	add    esp,0x2c
c0022515:	c3                   	ret    

c0022516 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022516:	83 ec 18             	sub    esp,0x18
c0022519:	6a 0e                	push   0xe
c002251b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022520:	50                   	push   eax
c0022521:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022526:	50                   	push   eax
c0022527:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002252c:	50                   	push   eax
c002252d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022531:	e8 14 ff ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022536:	83 c4 2c             	add    esp,0x2c
c0022539:	0f b6 c0             	movzx  eax,al
c002253c:	c3                   	ret    
c002253d:	90                   	nop

c002253e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002253e:	55                   	push   ebp
c002253f:	57                   	push   edi
c0022540:	56                   	push   esi
c0022541:	53                   	push   ebx
c0022542:	83 ec 18             	sub    esp,0x18
c0022545:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002254a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002254f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022554:	6a 0a                	push   0xa
c0022556:	56                   	push   esi
c0022557:	55                   	push   ebp
c0022558:	57                   	push   edi
c0022559:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002255d:	e8 e8 fe ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022562:	83 c4 14             	add    esp,0x14
c0022565:	89 c3                	mov    ebx,eax
c0022567:	6a 0a                	push   0xa
c0022569:	0f b6 db             	movzx  ebx,bl
c002256c:	56                   	push   esi
c002256d:	55                   	push   ebp
c002256e:	57                   	push   edi
c002256f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022573:	e8 d2 fe ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022578:	83 c4 2c             	add    esp,0x2c
c002257b:	25 00 ff 00 00       	and    eax,0xff00
c0022580:	09 d8                	or     eax,ebx
c0022582:	5b                   	pop    ebx
c0022583:	5e                   	pop    esi
c0022584:	5f                   	pop    edi
c0022585:	5d                   	pop    ebp
c0022586:	c3                   	ret    
c0022587:	90                   	nop

c0022588 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022588:	83 ec 18             	sub    esp,0x18
c002258b:	6a 08                	push   0x8
c002258d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022592:	50                   	push   eax
c0022593:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022598:	50                   	push   eax
c0022599:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002259e:	50                   	push   eax
c002259f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225a3:	e8 a2 fe ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225a8:	83 c4 2c             	add    esp,0x2c
c00225ab:	0f b6 c4             	movzx  eax,ah
c00225ae:	c3                   	ret    
c00225af:	90                   	nop

c00225b0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00225b0:	83 ec 18             	sub    esp,0x18
c00225b3:	6a 08                	push   0x8
c00225b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ba:	50                   	push   eax
c00225bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c0:	50                   	push   eax
c00225c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225c6:	50                   	push   eax
c00225c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225cb:	e8 7a fe ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225d0:	83 c4 2c             	add    esp,0x2c
c00225d3:	c3                   	ret    

c00225d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00225d4:	83 ec 18             	sub    esp,0x18
c00225d7:	6a 3c                	push   0x3c
c00225d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225de:	50                   	push   eax
c00225df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225e4:	50                   	push   eax
c00225e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225ea:	50                   	push   eax
c00225eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225ef:	e8 56 fe ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225f4:	83 c4 2c             	add    esp,0x2c
c00225f7:	c3                   	ret    

c00225f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00225f8:	83 ec 18             	sub    esp,0x18
c00225fb:	6a 18                	push   0x18
c00225fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022602:	50                   	push   eax
c0022603:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022608:	50                   	push   eax
c0022609:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002260e:	50                   	push   eax
c002260f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022613:	e8 32 fe ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022618:	83 c4 2c             	add    esp,0x2c
c002261b:	0f b6 c4             	movzx  eax,ah
c002261e:	c3                   	ret    
c002261f:	90                   	nop

c0022620 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022620:	55                   	push   ebp
c0022621:	57                   	push   edi
c0022622:	56                   	push   esi
c0022623:	53                   	push   ebx
c0022624:	83 ec 28             	sub    esp,0x28
c0022627:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002262b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0022630:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0022635:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002263a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022641:	8d 43 12             	lea    eax,[ebx+0x12]
c0022644:	83 c3 10             	add    ebx,0x10
c0022647:	0f b6 c0             	movzx  eax,al
c002264a:	0f b6 db             	movzx  ebx,bl
c002264d:	50                   	push   eax
c002264e:	51                   	push   ecx
c002264f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022653:	57                   	push   edi
c0022654:	55                   	push   ebp
c0022655:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022659:	e8 ec fd ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002265e:	83 c4 14             	add    esp,0x14
c0022661:	89 c6                	mov    esi,eax
c0022663:	53                   	push   ebx
c0022664:	c1 e6 10             	shl    esi,0x10
c0022667:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002266b:	51                   	push   ecx
c002266c:	57                   	push   edi
c002266d:	55                   	push   ebp
c002266e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022672:	e8 d3 fd ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022677:	83 c4 3c             	add    esp,0x3c
c002267a:	0f b7 c0             	movzx  eax,ax
c002267d:	5b                   	pop    ebx
c002267e:	09 f0                	or     eax,esi
c0022680:	5e                   	pop    esi
c0022681:	5f                   	pop    edi
c0022682:	5d                   	pop    ebp
c0022683:	c3                   	ret    

c0022684 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022684:	55                   	push   ebp
c0022685:	57                   	push   edi
c0022686:	56                   	push   esi
c0022687:	53                   	push   ebx
c0022688:	83 ec 0c             	sub    esp,0xc
c002268b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002268f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022693:	89 f5                	mov    ebp,esi
c0022695:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002269b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002269f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00226a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00226a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00226ab:	83 f9 01             	cmp    ecx,0x1
c00226ae:	75 5d                	jne    c002270d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00226b0:	0f b6 c8             	movzx  ecx,al
c00226b3:	0f b6 d2             	movzx  edx,dl
c00226b6:	c1 e1 10             	shl    ecx,0x10
c00226b9:	c1 e2 0b             	shl    edx,0xb
c00226bc:	89 f0                	mov    eax,esi
c00226be:	25 fc 00 00 00       	and    eax,0xfc
c00226c3:	09 c1                	or     ecx,eax
c00226c5:	89 e8                	mov    eax,ebp
c00226c7:	0f b6 c0             	movzx  eax,al
c00226ca:	c1 e0 08             	shl    eax,0x8
c00226cd:	09 c1                	or     ecx,eax
c00226cf:	09 d1                	or     ecx,edx
c00226d1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00226d6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00226dc:	89 c8                	mov    eax,ecx
c00226de:	ef                   	out    dx,eax
c00226df:	ba fc 0c 00 00       	mov    edx,0xcfc
c00226e4:	ed                   	in     eax,dx
c00226e5:	0f b7 db             	movzx  ebx,bx
c00226e8:	83 e6 02             	and    esi,0x2
c00226eb:	74 0a                	je     c00226f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00226ed:	0f b7 d0             	movzx  edx,ax
c00226f0:	c1 e3 10             	shl    ebx,0x10
c00226f3:	09 d3                	or     ebx,edx
c00226f5:	eb 05                	jmp    c00226fc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00226f7:	66 31 c0             	xor    ax,ax
c00226fa:	09 c3                	or     ebx,eax
c00226fc:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022701:	89 c8                	mov    eax,ecx
c0022703:	ef                   	out    dx,eax
c0022704:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022709:	89 d8                	mov    eax,ebx
c002270b:	eb 41                	jmp    c002274e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002270d:	83 f9 02             	cmp    ecx,0x2
c0022710:	75 45                	jne    c0022757 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0022712:	83 ec 0c             	sub    esp,0xc
c0022715:	0f b6 d2             	movzx  edx,dl
c0022718:	89 f1                	mov    ecx,esi
c002271a:	0f b6 c0             	movzx  eax,al
c002271d:	0f b6 f1             	movzx  esi,cl
c0022720:	89 e9                	mov    ecx,ebp
c0022722:	56                   	push   esi
c0022723:	0f b6 c9             	movzx  ecx,cl
c0022726:	51                   	push   ecx
c0022727:	52                   	push   edx
c0022728:	50                   	push   eax
c0022729:	57                   	push   edi
c002272a:	e8 ad fc ff ff       	call   c00223dc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002272f:	89 c2                	mov    edx,eax
c0022731:	ed                   	in     eax,dx
c0022732:	83 c4 20             	add    esp,0x20
c0022735:	0f b7 db             	movzx  ebx,bx
c0022738:	f6 c2 02             	test   dl,0x2
c002273b:	74 0c                	je     c0022749 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002273d:	0f b7 c8             	movzx  ecx,ax
c0022740:	89 d8                	mov    eax,ebx
c0022742:	c1 e0 10             	shl    eax,0x10
c0022745:	09 c8                	or     eax,ecx
c0022747:	eb 05                	jmp    c002274e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022749:	66 31 c0             	xor    ax,ax
c002274c:	09 d8                	or     eax,ebx
c002274e:	ef                   	out    dx,eax
c002274f:	83 c4 0c             	add    esp,0xc
c0022752:	5b                   	pop    ebx
c0022753:	5e                   	pop    esi
c0022754:	5f                   	pop    edi
c0022755:	5d                   	pop    ebp
c0022756:	c3                   	ret    
c0022757:	c7 44 24 20 20 be 02 c0 	mov    DWORD PTR [esp+0x20],0xc002be20
c002275f:	83 c4 0c             	add    esp,0xc
c0022762:	5b                   	pop    ebx
c0022763:	5e                   	pop    esi
c0022764:	5f                   	pop    edi
c0022765:	5d                   	pop    ebp
c0022766:	e9 fe 75 ff ff       	jmp    c0019d69 <Krnl::panic(char const*)>
c002276b:	90                   	nop

c002276c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002276c:	55                   	push   ebp
c002276d:	57                   	push   edi
c002276e:	56                   	push   esi
c002276f:	53                   	push   ebx
c0022770:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022776:	80 3d d0 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031ad0,0x0
c002277d:	0f 85 84 00 00 00    	jne    c0022807 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022783:	83 ec 0c             	sub    esp,0xc
c0022786:	68 14 01 00 00       	push   0x114
c002278b:	e8 0c ce fe ff       	call   c000f59c <malloc>
c0022790:	83 c4 0c             	add    esp,0xc
c0022793:	89 c3                	mov    ebx,eax
c0022795:	ff 35 d0 0c 03 c0    	push   DWORD PTR ds:0xc0030cd0
c002279b:	68 26 be 02 c0       	push   0xc002be26
c00227a0:	50                   	push   eax
c00227a1:	e8 b6 03 ff ff       	call   c0012b5c <File::File(char const*, Process*)>
c00227a6:	5a                   	pop    edx
c00227a7:	59                   	pop    ecx
c00227a8:	6a 01                	push   0x1
c00227aa:	53                   	push   ebx
c00227ab:	e8 10 04 ff ff       	call   c0012bc0 <File::open(FileOpenMode)>
c00227b0:	83 c4 0c             	add    esp,0xc
c00227b3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00227b7:	50                   	push   eax
c00227b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00227bc:	50                   	push   eax
c00227bd:	53                   	push   ebx
c00227be:	e8 a9 06 ff ff       	call   c0012e6c <File::stat(unsigned long long*, bool*)>
c00227c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227c7:	40                   	inc    eax
c00227c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00227cb:	e8 cc cd fe ff       	call   c000f59c <malloc>
c00227d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00227d4:	a3 cc 1a 03 c0       	mov    ds:0xc0031acc,eax
c00227d9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00227dd:	5e                   	pop    esi
c00227de:	8b 13                	mov    edx,DWORD PTR [ebx]
c00227e0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00227e4:	51                   	push   ecx
c00227e5:	50                   	push   eax
c00227e6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227ea:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00227ee:	53                   	push   ebx
c00227ef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00227f2:	83 c4 14             	add    esp,0x14
c00227f5:	53                   	push   ebx
c00227f6:	e8 23 04 ff ff       	call   c0012c1e <File::close()>
c00227fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227ff:	83 c4 10             	add    esp,0x10
c0022802:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c0022807:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c002280c:	8b 15 cc 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031acc
c0022812:	89 04 24             	mov    DWORD PTR [esp],eax
c0022815:	31 ff                	xor    edi,edi
c0022817:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c002281f:	31 f6                	xor    esi,esi
c0022821:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022826:	31 db                	xor    ebx,ebx
c0022828:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0022830:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0022835:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002283c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0022840:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022847:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002284b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002284e:	0f 8e 6b 01 00 00    	jle    c00229bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022854:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022857:	d4 40                	aam    0x40
c0022859:	d5 39                	aad    0x39
c002285b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002285f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022863:	d4 40                	aam    0x40
c0022865:	d5 39                	aad    0x39
c0022867:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002286b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c002286f:	d4 40                	aam    0x40
c0022871:	d5 39                	aad    0x39
c0022873:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022877:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002287b:	d4 40                	aam    0x40
c002287d:	d5 39                	aad    0x39
c002287f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022883:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022887:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002288b:	3c 56                	cmp    al,0x56
c002288d:	74 45                	je     c00228d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c002288f:	d4 40                	aam    0x40
c0022891:	d5 39                	aad    0x39
c0022893:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022896:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002289a:	0f b6 c9             	movzx  ecx,cl
c002289d:	c1 e1 04             	shl    ecx,0x4
c00228a0:	d4 40                	aam    0x40
c00228a2:	d5 39                	aad    0x39
c00228a4:	8d 58 d0             	lea    ebx,[eax-0x30]
c00228a7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00228ab:	0f b6 db             	movzx  ebx,bl
c00228ae:	09 cb                	or     ebx,ecx
c00228b0:	c1 e3 04             	shl    ebx,0x4
c00228b3:	d4 40                	aam    0x40
c00228b5:	d5 39                	aad    0x39
c00228b7:	8d 48 d0             	lea    ecx,[eax-0x30]
c00228ba:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00228be:	0f b6 c9             	movzx  ecx,cl
c00228c1:	09 cb                	or     ebx,ecx
c00228c3:	c1 e3 04             	shl    ebx,0x4
c00228c6:	89 d9                	mov    ecx,ebx
c00228c8:	d4 40                	aam    0x40
c00228ca:	d5 39                	aad    0x39
c00228cc:	8d 58 d0             	lea    ebx,[eax-0x30]
c00228cf:	0f b6 db             	movzx  ebx,bl
c00228d2:	09 cb                	or     ebx,ecx
c00228d4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00228d8:	80 f9 44             	cmp    cl,0x44
c00228db:	74 47                	je     c0022924 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00228dd:	88 c8                	mov    al,cl
c00228df:	d4 40                	aam    0x40
c00228e1:	d5 39                	aad    0x39
c00228e3:	83 e8 30             	sub    eax,0x30
c00228e6:	0f b6 e8             	movzx  ebp,al
c00228e9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00228ed:	c1 e5 04             	shl    ebp,0x4
c00228f0:	d4 40                	aam    0x40
c00228f2:	d5 39                	aad    0x39
c00228f4:	83 e8 30             	sub    eax,0x30
c00228f7:	0f b6 f0             	movzx  esi,al
c00228fa:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00228fe:	09 ee                	or     esi,ebp
c0022900:	c1 e6 04             	shl    esi,0x4
c0022903:	d4 40                	aam    0x40
c0022905:	d5 39                	aad    0x39
c0022907:	83 e8 30             	sub    eax,0x30
c002290a:	0f b6 e8             	movzx  ebp,al
c002290d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022911:	09 ee                	or     esi,ebp
c0022913:	c1 e6 04             	shl    esi,0x4
c0022916:	89 f5                	mov    ebp,esi
c0022918:	d4 40                	aam    0x40
c002291a:	d5 39                	aad    0x39
c002291c:	83 e8 30             	sub    eax,0x30
c002291f:	0f b6 f0             	movzx  esi,al
c0022922:	09 ee                	or     esi,ebp
c0022924:	83 c7 10             	add    edi,0x10
c0022927:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002292b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002292e:	3c 0a                	cmp    al,0xa
c0022930:	74 09                	je     c002293b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022932:	45                   	inc    ebp
c0022933:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022936:	75 16                	jne    c002294e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022938:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002293b:	3c 0a                	cmp    al,0xa
c002293d:	0f 94 c0             	sete   al
c0022940:	0f b6 c0             	movzx  eax,al
c0022943:	01 c7                	add    edi,eax
c0022945:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002294a:	75 0c                	jne    c0022958 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c002294c:	eb 15                	jmp    c0022963 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c002294e:	47                   	inc    edi
c002294f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022952:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022956:	eb d3                	jmp    c002292b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022958:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002295d:	0f 85 e8 fe ff ff    	jne    c002284b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022963:	80 f9 44             	cmp    cl,0x44
c0022966:	74 0b                	je     c0022973 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022968:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002296d:	0f 85 d8 fe ff ff    	jne    c002284b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022973:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022977:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002297b:	c1 e1 04             	shl    ecx,0x4
c002297e:	83 e8 30             	sub    eax,0x30
c0022981:	09 c8                	or     eax,ecx
c0022983:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022987:	0f 85 be fe ff ff    	jne    c002284b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002298d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022991:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022995:	c1 e1 04             	shl    ecx,0x4
c0022998:	83 e8 30             	sub    eax,0x30
c002299b:	09 c8                	or     eax,ecx
c002299d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00229a1:	0f 85 a4 fe ff ff    	jne    c002284b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00229a7:	50                   	push   eax
c00229a8:	50                   	push   eax
c00229a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00229ad:	50                   	push   eax
c00229ae:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00229b5:	e8 52 de fd ff       	call   c000080c <strcpy>
c00229ba:	83 c4 10             	add    esp,0x10
c00229bd:	eb 15                	jmp    c00229d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00229bf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00229c6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00229d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00229d4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00229db:	81 c4 2c 01 00 00    	add    esp,0x12c
c00229e1:	5b                   	pop    ebx
c00229e2:	5e                   	pop    esi
c00229e3:	5f                   	pop    edi
c00229e4:	5d                   	pop    ebp
c00229e5:	c3                   	ret    

c00229e6 <PCI::checkBus(unsigned char)>:
c00229e6:	56                   	push   esi
c00229e7:	53                   	push   ebx
c00229e8:	31 db                	xor    ebx,ebx
c00229ea:	51                   	push   ecx
c00229eb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00229f0:	52                   	push   edx
c00229f1:	53                   	push   ebx
c00229f2:	43                   	inc    ebx
c00229f3:	56                   	push   esi
c00229f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229f8:	e8 37 03 00 00       	call   c0022d34 <PCI::checkDevice(unsigned char, unsigned char)>
c00229fd:	83 c4 10             	add    esp,0x10
c0022a00:	83 fb 20             	cmp    ebx,0x20
c0022a03:	75 eb                	jne    c00229f0 <PCI::checkBus(unsigned char)+0xa>
c0022a05:	58                   	pop    eax
c0022a06:	5b                   	pop    ebx
c0022a07:	5e                   	pop    esi
c0022a08:	c3                   	ret    
c0022a09:	90                   	nop

c0022a0a <PCI::foundDevice(PCIDeviceInfo)>:
c0022a0a:	55                   	push   ebp
c0022a0b:	57                   	push   edi
c0022a0c:	56                   	push   esi
c0022a0d:	53                   	push   ebx
c0022a0e:	83 ec 1c             	sub    esp,0x1c
c0022a11:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a15:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a1b:	0f 84 52 01 00 00    	je     c0022b73 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a21:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a25:	66 81 f9 06 04       	cmp    cx,0x406
c0022a2a:	75 2c                	jne    c0022a58 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a2c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a31:	50                   	push   eax
c0022a32:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a37:	50                   	push   eax
c0022a38:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a3d:	50                   	push   eax
c0022a3e:	56                   	push   esi
c0022a3f:	e8 b4 fb ff ff       	call   c00225f8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022a44:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a48:	0f b6 c0             	movzx  eax,al
c0022a4b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022a4f:	83 c4 2c             	add    esp,0x2c
c0022a52:	5b                   	pop    ebx
c0022a53:	5e                   	pop    esi
c0022a54:	5f                   	pop    edi
c0022a55:	5d                   	pop    ebp
c0022a56:	eb 8e                	jmp    c00229e6 <PCI::checkBus(unsigned char)>
c0022a58:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a5c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022a62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a66:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022a6a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022a6e:	88 d3                	mov    bl,dl
c0022a70:	85 c0                	test   eax,eax
c0022a72:	74 33                	je     c0022aa7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022a74:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022a77:	85 d2                	test   edx,edx
c0022a79:	74 28                	je     c0022aa3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a7b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022a81:	31 ef                	xor    edi,ebp
c0022a83:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022a89:	75 18                	jne    c0022aa3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a8b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022a8f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022a95:	75 0c                	jne    c0022aa3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022a97:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022a9d:	0f 84 d0 00 00 00    	je     c0022b73 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022aa3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aa5:	eb c9                	jmp    c0022a70 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022aa7:	66 81 f9 01 06       	cmp    cx,0x601
c0022aac:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022ab0:	75 19                	jne    c0022acb <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022ab2:	83 ec 0c             	sub    esp,0xc
c0022ab5:	68 64 01 00 00       	push   0x164
c0022aba:	e8 dd ca fe ff       	call   c000f59c <malloc>
c0022abf:	89 c5                	mov    ebp,eax
c0022ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ac4:	e8 85 0e 00 00       	call   c002394e <SATABus::SATABus()>
c0022ac9:	eb 1e                	jmp    c0022ae9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022acb:	66 81 f9 01 01       	cmp    cx,0x101
c0022ad0:	75 60                	jne    c0022b32 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022ad2:	83 ec 0c             	sub    esp,0xc
c0022ad5:	68 70 02 00 00       	push   0x270
c0022ada:	e8 bd ca fe ff       	call   c000f59c <malloc>
c0022adf:	89 c5                	mov    ebp,eax
c0022ae1:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ae4:	e8 0f 03 00 00       	call   c0022df8 <IDE::IDE()>
c0022ae9:	58                   	pop    eax
c0022aea:	5a                   	pop    edx
c0022aeb:	55                   	push   ebp
c0022aec:	56                   	push   esi
c0022aed:	e8 44 0f ff ff       	call   c0013a36 <Device::addChild(Device*)>
c0022af2:	83 ec 1c             	sub    esp,0x1c
c0022af5:	b9 09 00 00 00       	mov    ecx,0x9
c0022afa:	fc                   	cld    
c0022afb:	89 e7                	mov    edi,esp
c0022afd:	89 de                	mov    esi,ebx
c0022aff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b01:	55                   	push   ebp
c0022b02:	e8 41 0e ff ff       	call   c0013948 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b07:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b0a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b0e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b16:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b1e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b29:	83 c4 4c             	add    esp,0x4c
c0022b2c:	5b                   	pop    ebx
c0022b2d:	5e                   	pop    esi
c0022b2e:	5f                   	pop    edi
c0022b2f:	5d                   	pop    ebp
c0022b30:	ff e0                	jmp    eax
c0022b32:	83 ec 0c             	sub    esp,0xc
c0022b35:	68 58 01 00 00       	push   0x158
c0022b3a:	e8 5d ca fe ff       	call   c000f59c <malloc>
c0022b3f:	89 c5                	mov    ebp,eax
c0022b41:	58                   	pop    eax
c0022b42:	5a                   	pop    edx
c0022b43:	68 3f be 02 c0       	push   0xc002be3f
c0022b48:	55                   	push   ebp
c0022b49:	e8 f2 11 ff ff       	call   c0013d40 <DriverlessDevice::DriverlessDevice(char const*)>
c0022b4e:	59                   	pop    ecx
c0022b4f:	5f                   	pop    edi
c0022b50:	55                   	push   ebp
c0022b51:	56                   	push   esi
c0022b52:	e8 df 0e ff ff       	call   c0013a36 <Device::addChild(Device*)>
c0022b57:	b9 09 00 00 00       	mov    ecx,0x9
c0022b5c:	fc                   	cld    
c0022b5d:	89 df                	mov    edi,ebx
c0022b5f:	89 de                	mov    esi,ebx
c0022b61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b63:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022b67:	83 c4 2c             	add    esp,0x2c
c0022b6a:	5b                   	pop    ebx
c0022b6b:	5e                   	pop    esi
c0022b6c:	5f                   	pop    edi
c0022b6d:	5d                   	pop    ebp
c0022b6e:	e9 d5 0d ff ff       	jmp    c0013948 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b73:	83 c4 1c             	add    esp,0x1c
c0022b76:	5b                   	pop    ebx
c0022b77:	5e                   	pop    esi
c0022b78:	5f                   	pop    edi
c0022b79:	5d                   	pop    ebp
c0022b7a:	c3                   	ret    
c0022b7b:	90                   	nop

c0022b7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022b7c:	55                   	push   ebp
c0022b7d:	57                   	push   edi
c0022b7e:	56                   	push   esi
c0022b7f:	53                   	push   ebx
c0022b80:	83 ec 68             	sub    esp,0x68
c0022b83:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022b8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b92:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022b99:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022ba2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022ba9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022bae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022bb2:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022bb7:	6a 0c                	push   0xc
c0022bb9:	57                   	push   edi
c0022bba:	53                   	push   ebx
c0022bbb:	56                   	push   esi
c0022bbc:	55                   	push   ebp
c0022bbd:	e8 88 f8 ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc2:	83 c4 20             	add    esp,0x20
c0022bc5:	57                   	push   edi
c0022bc6:	53                   	push   ebx
c0022bc7:	56                   	push   esi
c0022bc8:	55                   	push   ebp
c0022bc9:	e8 70 f9 ff ff       	call   c002253e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022bce:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022bd3:	57                   	push   edi
c0022bd4:	53                   	push   ebx
c0022bd5:	56                   	push   esi
c0022bd6:	55                   	push   ebp
c0022bd7:	e8 f8 f9 ff ff       	call   c00225d4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022bdc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022be0:	83 c4 14             	add    esp,0x14
c0022be3:	6a 3c                	push   0x3c
c0022be5:	57                   	push   edi
c0022be6:	53                   	push   ebx
c0022be7:	56                   	push   esi
c0022be8:	55                   	push   ebp
c0022be9:	e8 5c f8 ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bee:	0f b6 c4             	movzx  eax,ah
c0022bf1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022bf5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022bf9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022bfd:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0022c02:	83 c4 20             	add    esp,0x20
c0022c05:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c0b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c12:	74 7c                	je     c0022c90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022c14:	31 c0                	xor    eax,eax
c0022c16:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c0022c1c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c22:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022c28:	7e 66                	jle    c0022c90 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022c2a:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022c2d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c34:	39 cb                	cmp    ebx,ecx
c0022c36:	75 55                	jne    c0022c8d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c38:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022c3f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022c43:	75 48                	jne    c0022c8d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022c45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022c49:	83 ec 0c             	sub    esp,0xc
c0022c4c:	68 59 be 02 c0       	push   0xc002be59
c0022c51:	e8 a7 f9 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0022c56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c5a:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c0022c60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022c64:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c6a:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022c72:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022c76:	52                   	push   edx
c0022c77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c7b:	53                   	push   ebx
c0022c7c:	68 7e be 02 c0       	push   0xc002be7e
c0022c81:	e8 77 f9 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0022c86:	83 c4 20             	add    esp,0x20
c0022c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c8d:	40                   	inc    eax
c0022c8e:	eb 86                	jmp    c0022c16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022c90:	31 d2                	xor    edx,edx
c0022c92:	83 ec 0c             	sub    esp,0xc
c0022c95:	57                   	push   edi
c0022c96:	53                   	push   ebx
c0022c97:	56                   	push   esi
c0022c98:	52                   	push   edx
c0022c99:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022c9d:	55                   	push   ebp
c0022c9e:	e8 7d f9 ff ff       	call   c0022620 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ca3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022ca7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022cab:	42                   	inc    edx
c0022cac:	83 c4 20             	add    esp,0x20
c0022caf:	83 fa 06             	cmp    edx,0x6
c0022cb2:	75 de                	jne    c0022c92 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022cb4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022cb9:	83 ec 0c             	sub    esp,0xc
c0022cbc:	86 e0                	xchg   al,ah
c0022cbe:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022cc3:	6a 02                	push   0x2
c0022cc5:	57                   	push   edi
c0022cc6:	53                   	push   ebx
c0022cc7:	56                   	push   esi
c0022cc8:	55                   	push   ebp
c0022cc9:	e8 7c f7 ff ff       	call   c002244a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022cce:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022cd3:	83 c4 20             	add    esp,0x20
c0022cd6:	57                   	push   edi
c0022cd7:	53                   	push   ebx
c0022cd8:	56                   	push   esi
c0022cd9:	55                   	push   ebp
c0022cda:	e8 a9 f8 ff ff       	call   c0022588 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022cdf:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ce3:	57                   	push   edi
c0022ce4:	53                   	push   ebx
c0022ce5:	56                   	push   esi
c0022ce6:	55                   	push   ebp
c0022ce7:	e8 06 f8 ff ff       	call   c00224f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022cec:	b9 09 00 00 00       	mov    ecx,0x9
c0022cf1:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022cf6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022cfa:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022cfe:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022d02:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022d06:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022d0a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022d0e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022d12:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022d16:	83 ec 0c             	sub    esp,0xc
c0022d19:	fc                   	cld    
c0022d1a:	89 e7                	mov    edi,esp
c0022d1c:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022d20:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d22:	55                   	push   ebp
c0022d23:	e8 e2 fc ff ff       	call   c0022a0a <PCI::foundDevice(PCIDeviceInfo)>
c0022d28:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d2e:	5b                   	pop    ebx
c0022d2f:	5e                   	pop    esi
c0022d30:	5f                   	pop    edi
c0022d31:	5d                   	pop    ebp
c0022d32:	c3                   	ret    
c0022d33:	90                   	nop

c0022d34 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d34:	55                   	push   ebp
c0022d35:	57                   	push   edi
c0022d36:	56                   	push   esi
c0022d37:	53                   	push   ebx
c0022d38:	83 ec 0c             	sub    esp,0xc
c0022d3b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d3f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d44:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d49:	6a 00                	push   0x0
c0022d4b:	56                   	push   esi
c0022d4c:	57                   	push   edi
c0022d4d:	55                   	push   ebp
c0022d4e:	e8 9f f7 ff ff       	call   c00224f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d53:	6a 00                	push   0x0
c0022d55:	56                   	push   esi
c0022d56:	57                   	push   edi
c0022d57:	55                   	push   ebp
c0022d58:	e8 1f fe ff ff       	call   c0022b7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d5d:	83 c4 20             	add    esp,0x20
c0022d60:	6a 00                	push   0x0
c0022d62:	56                   	push   esi
c0022d63:	57                   	push   edi
c0022d64:	55                   	push   ebp
c0022d65:	e8 ac f7 ff ff       	call   c0022516 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022d6a:	83 c4 10             	add    esp,0x10
c0022d6d:	84 c0                	test   al,al
c0022d6f:	79 27                	jns    c0022d98 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022d71:	bb 01 00 00 00       	mov    ebx,0x1
c0022d76:	53                   	push   ebx
c0022d77:	56                   	push   esi
c0022d78:	57                   	push   edi
c0022d79:	55                   	push   ebp
c0022d7a:	e8 73 f7 ff ff       	call   c00224f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d7f:	83 c4 10             	add    esp,0x10
c0022d82:	66 40                	inc    ax
c0022d84:	74 0c                	je     c0022d92 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022d86:	53                   	push   ebx
c0022d87:	56                   	push   esi
c0022d88:	57                   	push   edi
c0022d89:	55                   	push   ebp
c0022d8a:	e8 ed fd ff ff       	call   c0022b7c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d8f:	83 c4 10             	add    esp,0x10
c0022d92:	43                   	inc    ebx
c0022d93:	83 fb 08             	cmp    ebx,0x8
c0022d96:	75 de                	jne    c0022d76 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022d98:	83 c4 0c             	add    esp,0xc
c0022d9b:	5b                   	pop    ebx
c0022d9c:	5e                   	pop    esi
c0022d9d:	5f                   	pop    edi
c0022d9e:	5d                   	pop    ebp
c0022d9f:	c3                   	ret    

c0022da0 <PCI::detect()>:
c0022da0:	56                   	push   esi
c0022da1:	53                   	push   ebx
c0022da2:	53                   	push   ebx
c0022da3:	31 db                	xor    ebx,ebx
c0022da5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022da9:	6a 00                	push   0x0
c0022dab:	6a 00                	push   0x0
c0022dad:	6a 00                	push   0x0
c0022daf:	56                   	push   esi
c0022db0:	e8 61 f7 ff ff       	call   c0022516 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022db5:	83 c4 10             	add    esp,0x10
c0022db8:	a8 80                	test   al,0x80
c0022dba:	75 21                	jne    c0022ddd <PCI::detect()+0x3d>
c0022dbc:	51                   	push   ecx
c0022dbd:	51                   	push   ecx
c0022dbe:	6a 00                	push   0x0
c0022dc0:	56                   	push   esi
c0022dc1:	e8 20 fc ff ff       	call   c00229e6 <PCI::checkBus(unsigned char)>
c0022dc6:	83 c4 10             	add    esp,0x10
c0022dc9:	eb 24                	jmp    c0022def <PCI::detect()+0x4f>
c0022dcb:	52                   	push   edx
c0022dcc:	52                   	push   edx
c0022dcd:	53                   	push   ebx
c0022dce:	43                   	inc    ebx
c0022dcf:	56                   	push   esi
c0022dd0:	e8 11 fc ff ff       	call   c00229e6 <PCI::checkBus(unsigned char)>
c0022dd5:	83 c4 10             	add    esp,0x10
c0022dd8:	83 fb 08             	cmp    ebx,0x8
c0022ddb:	74 12                	je     c0022def <PCI::detect()+0x4f>
c0022ddd:	53                   	push   ebx
c0022dde:	6a 00                	push   0x0
c0022de0:	6a 00                	push   0x0
c0022de2:	56                   	push   esi
c0022de3:	e8 0a f7 ff ff       	call   c00224f2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022de8:	83 c4 10             	add    esp,0x10
c0022deb:	66 40                	inc    ax
c0022ded:	74 dc                	je     c0022dcb <PCI::detect()+0x2b>
c0022def:	58                   	pop    eax
c0022df0:	5b                   	pop    ebx
c0022df1:	5e                   	pop    esi
c0022df2:	c3                   	ret    
c0022df3:	90                   	nop

c0022df4 <IDE::close(int, int, void*)>:
c0022df4:	83 c8 ff             	or     eax,0xffffffff
c0022df7:	c3                   	ret    

c0022df8 <IDE::IDE()>:
c0022df8:	83 ec 0c             	sub    esp,0xc
c0022dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dff:	83 ec 08             	sub    esp,0x8
c0022e02:	68 c8 be 02 c0       	push   0xc002bec8
c0022e07:	50                   	push   eax
c0022e08:	e8 d7 0f ff ff       	call   c0013de4 <HardDiskController::HardDiskController(char const*)>
c0022e0d:	83 c4 10             	add    esp,0x10
c0022e10:	ba 58 bf 02 c0       	mov    edx,0xc002bf58
c0022e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e19:	89 10                	mov    DWORD PTR [eax],edx
c0022e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e26:	90                   	nop
c0022e27:	83 c4 0c             	add    esp,0xc
c0022e2a:	c3                   	ret    
c0022e2b:	90                   	nop

c0022e2c <IDE::prepareInterrupt(unsigned char)>:
c0022e2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e35:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e3d:	c3                   	ret    

c0022e3e <selectDrive(unsigned char, unsigned char)>:
c0022e3e:	c3                   	ret    
c0022e3f:	90                   	nop

c0022e40 <IDE::getBase(unsigned char)>:
c0022e40:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e49:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022e51:	c3                   	ret    

c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022e52:	55                   	push   ebp
c0022e53:	57                   	push   edi
c0022e54:	56                   	push   esi
c0022e55:	53                   	push   ebx
c0022e56:	83 ec 1c             	sub    esp,0x1c
c0022e59:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e5d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e61:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022e64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e6c:	80 f9 03             	cmp    cl,0x3
c0022e6f:	77 51                	ja     c0022ec2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022e71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e75:	0f b6 f2             	movzx  esi,dl
c0022e78:	0f b6 db             	movzx  ebx,bl
c0022e7b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e7e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022e82:	83 ca 80             	or     edx,0xffffff80
c0022e85:	0f b6 d2             	movzx  edx,dl
c0022e88:	52                   	push   edx
c0022e89:	6a 0c                	push   0xc
c0022e8b:	56                   	push   esi
c0022e8c:	57                   	push   edi
c0022e8d:	e8 c0 ff ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e92:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e9b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022e9f:	ee                   	out    dx,al
c0022ea0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022ea5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022ea9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022ead:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022eb1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022eb9:	83 c4 2c             	add    esp,0x2c
c0022ebc:	5b                   	pop    ebx
c0022ebd:	5e                   	pop    esi
c0022ebe:	5f                   	pop    edi
c0022ebf:	5d                   	pop    ebp
c0022ec0:	eb 90                	jmp    c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ec2:	80 fb 07             	cmp    bl,0x7
c0022ec5:	77 12                	ja     c0022ed9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022ec7:	0f b6 d2             	movzx  edx,dl
c0022eca:	0f b6 db             	movzx  ebx,bl
c0022ecd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ed5:	89 da                	mov    edx,ebx
c0022ed7:	eb 2f                	jmp    c0022f08 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ed9:	80 fb 0d             	cmp    bl,0xd
c0022edc:	77 13                	ja     c0022ef1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022ede:	0f b6 d2             	movzx  edx,dl
c0022ee1:	0f b6 db             	movzx  ebx,bl
c0022ee4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022eeb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022eef:	eb 17                	jmp    c0022f08 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ef1:	80 fb 15             	cmp    bl,0x15
c0022ef4:	77 13                	ja     c0022f09 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022ef6:	0f b6 d2             	movzx  edx,dl
c0022ef9:	0f b6 db             	movzx  ebx,bl
c0022efc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f04:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f08:	ee                   	out    dx,al
c0022f09:	83 c4 1c             	add    esp,0x1c
c0022f0c:	5b                   	pop    ebx
c0022f0d:	5e                   	pop    esi
c0022f0e:	5f                   	pop    edi
c0022f0f:	5d                   	pop    ebp
c0022f10:	c3                   	ret    
c0022f11:	90                   	nop

c0022f12 <IDE::read(unsigned char, unsigned char)>:
c0022f12:	55                   	push   ebp
c0022f13:	57                   	push   edi
c0022f14:	56                   	push   esi
c0022f15:	53                   	push   ebx
c0022f16:	83 ec 1c             	sub    esp,0x1c
c0022f19:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f21:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f28:	3c 03                	cmp    al,0x3
c0022f2a:	77 43                	ja     c0022f6f <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f2c:	0f b6 f2             	movzx  esi,dl
c0022f2f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f32:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f36:	83 c8 80             	or     eax,0xffffff80
c0022f39:	0f b6 c0             	movzx  eax,al
c0022f3c:	50                   	push   eax
c0022f3d:	6a 0c                	push   0xc
c0022f3f:	56                   	push   esi
c0022f40:	57                   	push   edi
c0022f41:	e8 0c ff ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f46:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022f4b:	0f b6 c3             	movzx  eax,bl
c0022f4e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022f52:	ec                   	in     al,dx
c0022f53:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022f57:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022f5c:	52                   	push   edx
c0022f5d:	6a 0c                	push   0xc
c0022f5f:	56                   	push   esi
c0022f60:	57                   	push   edi
c0022f61:	e8 ec fe ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f66:	83 c4 20             	add    esp,0x20
c0022f69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022f6d:	eb 49                	jmp    c0022fb8 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022f6f:	80 fb 07             	cmp    bl,0x7
c0022f72:	77 12                	ja     c0022f86 <IDE::read(unsigned char, unsigned char)+0x74>
c0022f74:	0f b6 d2             	movzx  edx,dl
c0022f77:	0f b6 c3             	movzx  eax,bl
c0022f7a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022f82:	89 c2                	mov    edx,eax
c0022f84:	eb 31                	jmp    c0022fb7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f86:	80 fb 0d             	cmp    bl,0xd
c0022f89:	77 13                	ja     c0022f9e <IDE::read(unsigned char, unsigned char)+0x8c>
c0022f8b:	0f b6 d2             	movzx  edx,dl
c0022f8e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022f95:	0f b6 d3             	movzx  edx,bl
c0022f98:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022f9c:	eb 19                	jmp    c0022fb7 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022f9e:	31 c0                	xor    eax,eax
c0022fa0:	80 fb 15             	cmp    bl,0x15
c0022fa3:	77 13                	ja     c0022fb8 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fa5:	0f b6 d2             	movzx  edx,dl
c0022fa8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022fb0:	0f b6 d3             	movzx  edx,bl
c0022fb3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022fb7:	ec                   	in     al,dx
c0022fb8:	83 c4 1c             	add    esp,0x1c
c0022fbb:	5b                   	pop    ebx
c0022fbc:	5e                   	pop    esi
c0022fbd:	5f                   	pop    edi
c0022fbe:	5d                   	pop    ebp
c0022fbf:	c3                   	ret    

c0022fc0 <IDE::waitInterrupt(unsigned char)>:
c0022fc0:	55                   	push   ebp
c0022fc1:	57                   	push   edi
c0022fc2:	56                   	push   esi
c0022fc3:	53                   	push   ebx
c0022fc4:	31 db                	xor    ebx,ebx
c0022fc6:	83 ec 0c             	sub    esp,0xc
c0022fc9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022fcd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022fd2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022fda:	89 e8                	mov    eax,ebp
c0022fdc:	84 c0                	test   al,al
c0022fde:	75 34                	jne    c0023014 <IDE::waitInterrupt(unsigned char)+0x54>
c0022fe0:	52                   	push   edx
c0022fe1:	6a 0c                	push   0xc
c0022fe3:	56                   	push   esi
c0022fe4:	57                   	push   edi
c0022fe5:	e8 28 ff ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0022fea:	83 c4 10             	add    esp,0x10
c0022fed:	a8 01                	test   al,0x1
c0022fef:	75 2b                	jne    c002301c <IDE::waitInterrupt(unsigned char)+0x5c>
c0022ff1:	f6 c3 04             	test   bl,0x4
c0022ff4:	75 16                	jne    c002300c <IDE::waitInterrupt(unsigned char)+0x4c>
c0022ff6:	83 fb 32             	cmp    ebx,0x32
c0022ff9:	7e 11                	jle    c002300c <IDE::waitInterrupt(unsigned char)+0x4c>
c0022ffb:	50                   	push   eax
c0022ffc:	50                   	push   eax
c0022ffd:	6a 00                	push   0x0
c0022fff:	68 80 96 98 00       	push   0x989680
c0023004:	e8 c6 ab ff ff       	call   c001dbcf <nanoSleep(unsigned long long)>
c0023009:	83 c4 10             	add    esp,0x10
c002300c:	83 fb 3c             	cmp    ebx,0x3c
c002300f:	74 0b                	je     c002301c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023011:	43                   	inc    ebx
c0023012:	eb be                	jmp    c0022fd2 <IDE::waitInterrupt(unsigned char)+0x12>
c0023014:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002301c:	83 c4 0c             	add    esp,0xc
c002301f:	89 e8                	mov    eax,ebp
c0023021:	5b                   	pop    ebx
c0023022:	5e                   	pop    esi
c0023023:	5f                   	pop    edi
c0023024:	5d                   	pop    ebp
c0023025:	c3                   	ret    

c0023026 <ideChannel0IRQHandler(regs*, void*)>:
c0023026:	83 ec 10             	sub    esp,0x10
c0023029:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002302d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023034:	6a 07                	push   0x7
c0023036:	6a 00                	push   0x0
c0023038:	50                   	push   eax
c0023039:	e8 d4 fe ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c002303e:	83 c4 1c             	add    esp,0x1c
c0023041:	c3                   	ret    

c0023042 <ideChannel1IRQHandler(regs*, void*)>:
c0023042:	83 ec 10             	sub    esp,0x10
c0023045:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023049:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023050:	6a 07                	push   0x7
c0023052:	6a 01                	push   0x1
c0023054:	50                   	push   eax
c0023055:	e8 b8 fe ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c002305a:	83 c4 1c             	add    esp,0x1c
c002305d:	c3                   	ret    

c002305e <IDE::enableIRQs(unsigned char, bool)>:
c002305e:	57                   	push   edi
c002305f:	56                   	push   esi
c0023060:	be 04 00 00 00       	mov    esi,0x4
c0023065:	53                   	push   ebx
c0023066:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002306b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002306f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023074:	0f 94 c0             	sete   al
c0023077:	d1 e0                	shl    eax,1
c0023079:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023080:	0f b6 c0             	movzx  eax,al
c0023083:	50                   	push   eax
c0023084:	6a 0c                	push   0xc
c0023086:	57                   	push   edi
c0023087:	53                   	push   ebx
c0023088:	e8 c5 fd ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002308d:	83 c4 10             	add    esp,0x10
c0023090:	50                   	push   eax
c0023091:	6a 0c                	push   0xc
c0023093:	57                   	push   edi
c0023094:	53                   	push   ebx
c0023095:	e8 78 fe ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c002309a:	83 c4 10             	add    esp,0x10
c002309d:	4e                   	dec    esi
c002309e:	75 f0                	jne    c0023090 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00230a0:	5b                   	pop    ebx
c00230a1:	5e                   	pop    esi
c00230a2:	5f                   	pop    edi
c00230a3:	c3                   	ret    

c00230a4 <IDE::open(int, int, void*)>:
c00230a4:	55                   	push   ebp
c00230a5:	57                   	push   edi
c00230a6:	56                   	push   esi
c00230a7:	53                   	push   ebx
c00230a8:	83 ec 1c             	sub    esp,0x1c
c00230ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00230af:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00230b8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00230c1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00230c8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00230cf:	0f 85 b0 02 00 00    	jne    c0023385 <IDE::open(int, int, void*)+0x2e1>
c00230d5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00230db:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00230df:	83 e0 7f             	and    eax,0x7f
c00230e2:	3c 05                	cmp    al,0x5
c00230e4:	74 04                	je     c00230ea <IDE::open(int, int, void*)+0x46>
c00230e6:	3c 0f                	cmp    al,0xf
c00230e8:	75 32                	jne    c002311c <IDE::open(int, int, void*)+0x78>
c00230ea:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00230f0:	83 e0 fc             	and    eax,0xfffffffc
c00230f3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00230fa:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023100:	83 e0 fc             	and    eax,0xfffffffc
c0023103:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002310a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023110:	83 e0 fc             	and    eax,0xfffffffc
c0023113:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002311a:	eb 14                	jmp    c0023130 <IDE::open(int, int, void*)+0x8c>
c002311c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023126:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023130:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023137:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002313e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023142:	89 c6                	mov    esi,eax
c0023144:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023149:	c1 e6 10             	shl    esi,0x10
c002314c:	89 e8                	mov    eax,ebp
c002314e:	89 fa                	mov    edx,edi
c0023150:	c1 e0 0b             	shl    eax,0xb
c0023153:	09 f0                	or     eax,esi
c0023155:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002315c:	c1 e6 08             	shl    esi,0x8
c002315f:	09 c6                	or     esi,eax
c0023161:	89 f0                	mov    eax,esi
c0023163:	0d 08 00 00 80       	or     eax,0x80000008
c0023168:	ef                   	out    dx,eax
c0023169:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002316e:	89 ca                	mov    edx,ecx
c0023170:	ed                   	in     eax,dx
c0023171:	c1 e8 10             	shr    eax,0x10
c0023174:	3d ff ff 00 00       	cmp    eax,0xffff
c0023179:	0f 84 f5 00 00 00    	je     c0023274 <IDE::open(int, int, void*)+0x1d0>
c002317f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023185:	89 fa                	mov    edx,edi
c0023187:	89 f0                	mov    eax,esi
c0023189:	ef                   	out    dx,eax
c002318a:	b0 fe                	mov    al,0xfe
c002318c:	89 ca                	mov    edx,ecx
c002318e:	ee                   	out    dx,al
c002318f:	89 f0                	mov    eax,esi
c0023191:	89 fa                	mov    edx,edi
c0023193:	ef                   	out    dx,eax
c0023194:	89 ca                	mov    edx,ecx
c0023196:	ed                   	in     eax,dx
c0023197:	3c fe                	cmp    al,0xfe
c0023199:	0f 85 a9 00 00 00    	jne    c0023248 <IDE::open(int, int, void*)+0x1a4>
c002319f:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c00231a5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00231ac:	74 33                	je     c00231e1 <IDE::open(int, int, void*)+0x13d>
c00231ae:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00231b4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00231b8:	40                   	inc    eax
c00231b9:	83 ec 0c             	sub    esp,0xc
c00231bc:	0f b6 c0             	movzx  eax,al
c00231bf:	50                   	push   eax
c00231c0:	55                   	push   ebp
c00231c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00231c5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00231cb:	51                   	push   ecx
c00231cc:	e8 51 48 ff ff       	call   c0017a22 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00231d1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00231d6:	83 c4 1c             	add    esp,0x1c
c00231d9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00231df:	eb 0a                	jmp    c00231eb <IDE::open(int, int, void*)+0x147>
c00231e1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00231eb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00231f2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00231f9:	c1 e1 10             	shl    ecx,0x10
c00231fc:	c1 e0 08             	shl    eax,0x8
c00231ff:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023204:	09 c1                	or     ecx,eax
c0023206:	89 fa                	mov    edx,edi
c0023208:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002320f:	c1 e0 0b             	shl    eax,0xb
c0023212:	09 c1                	or     ecx,eax
c0023214:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002321a:	89 c8                	mov    eax,ecx
c002321c:	ef                   	out    dx,eax
c002321d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023222:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023228:	89 f2                	mov    edx,esi
c002322a:	ee                   	out    dx,al
c002322b:	89 c8                	mov    eax,ecx
c002322d:	89 fa                	mov    edx,edi
c002322f:	ef                   	out    dx,eax
c0023230:	89 f2                	mov    edx,esi
c0023232:	ed                   	in     eax,dx
c0023233:	0f b6 c0             	movzx  eax,al
c0023236:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002323c:	74 46                	je     c0023284 <IDE::open(int, int, void*)+0x1e0>
c002323e:	83 ec 0c             	sub    esp,0xc
c0023241:	68 e0 be 02 c0       	push   0xc002bee0
c0023246:	eb 34                	jmp    c002327c <IDE::open(int, int, void*)+0x1d8>
c0023248:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023251:	75 17                	jne    c002326a <IDE::open(int, int, void*)+0x1c6>
c0023253:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023258:	74 07                	je     c0023261 <IDE::open(int, int, void*)+0x1bd>
c002325a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002325f:	75 09                	jne    c002326a <IDE::open(int, int, void*)+0x1c6>
c0023261:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023268:	eb 1a                	jmp    c0023284 <IDE::open(int, int, void*)+0x1e0>
c002326a:	83 ec 0c             	sub    esp,0xc
c002326d:	68 e8 be 02 c0       	push   0xc002bee8
c0023272:	eb 08                	jmp    c002327c <IDE::open(int, int, void*)+0x1d8>
c0023274:	83 ec 0c             	sub    esp,0xc
c0023277:	68 19 bf 02 c0       	push   0xc002bf19
c002327c:	e8 e8 6a ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0023281:	83 c4 10             	add    esp,0x10
c0023284:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002328b:	79 1a                	jns    c00232a7 <IDE::open(int, int, void*)+0x203>
c002328d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023293:	83 e0 fc             	and    eax,0xfffffffc
c0023296:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002329d:	83 c0 08             	add    eax,0x8
c00232a0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00232a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00232ad:	89 c2                	mov    edx,eax
c00232af:	83 e2 0f             	and    edx,0xf
c00232b2:	66 83 fa 08          	cmp    dx,0x8
c00232b6:	75 0a                	jne    c00232c2 <IDE::open(int, int, void*)+0x21e>
c00232b8:	83 e8 02             	sub    eax,0x2
c00232bb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232c2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00232c8:	89 c2                	mov    edx,eax
c00232ca:	83 e2 0f             	and    edx,0xf
c00232cd:	66 83 fa 08          	cmp    dx,0x8
c00232d1:	75 0a                	jne    c00232dd <IDE::open(int, int, void*)+0x239>
c00232d3:	83 e8 02             	sub    eax,0x2
c00232d6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232dd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00232e4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00232eb:	89 d0                	mov    eax,edx
c00232ed:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00232f0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00232f4:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00232f8:	8d 4a 01             	lea    ecx,[edx+0x1]
c00232fb:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023300:	0f b6 c9             	movzx  ecx,cl
c0023303:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002330a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002330d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023311:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023315:	8d 50 02             	lea    edx,[eax+0x2]
c0023318:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002331d:	0f b6 d2             	movzx  edx,dl
c0023320:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023326:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023329:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002332d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023331:	8d 48 03             	lea    ecx,[eax+0x3]
c0023334:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023339:	0f b6 c9             	movzx  ecx,cl
c002333c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023342:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023345:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023349:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002334d:	8d 50 04             	lea    edx,[eax+0x4]
c0023350:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023356:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002335b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023362:	66 85 f6             	test   si,si
c0023365:	74 5b                	je     c00233c2 <IDE::open(int, int, void*)+0x31e>
c0023367:	0f b6 d2             	movzx  edx,dl
c002336a:	83 c0 05             	add    eax,0x5
c002336d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023370:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023374:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023378:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002337e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023383:	eb 3d                	jmp    c00233c2 <IDE::open(int, int, void*)+0x31e>
c0023385:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002338b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023392:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023399:	66 05 06 02          	add    ax,0x206
c002339d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00233a4:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00233ab:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00233b2:	66 05 06 02          	add    ax,0x206
c00233b6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00233bd:	e9 e5 fe ff ff       	jmp    c00232a7 <IDE::open(int, int, void*)+0x203>
c00233c2:	50                   	push   eax
c00233c3:	50                   	push   eax
c00233c4:	6a 00                	push   0x0
c00233c6:	53                   	push   ebx
c00233c7:	e8 60 fa ff ff       	call   c0022e2c <IDE::prepareInterrupt(unsigned char)>
c00233cc:	5a                   	pop    edx
c00233cd:	59                   	pop    ecx
c00233ce:	6a 01                	push   0x1
c00233d0:	53                   	push   ebx
c00233d1:	e8 56 fa ff ff       	call   c0022e2c <IDE::prepareInterrupt(unsigned char)>
c00233d6:	83 c4 0c             	add    esp,0xc
c00233d9:	6a 00                	push   0x0
c00233db:	6a 00                	push   0x0
c00233dd:	53                   	push   ebx
c00233de:	e8 7b fc ff ff       	call   c002305e <IDE::enableIRQs(unsigned char, bool)>
c00233e3:	83 c4 0c             	add    esp,0xc
c00233e6:	6a 00                	push   0x0
c00233e8:	6a 01                	push   0x1
c00233ea:	53                   	push   ebx
c00233eb:	e8 6e fc ff ff       	call   c002305e <IDE::enableIRQs(unsigned char, bool)>
c00233f0:	83 c4 10             	add    esp,0x10
c00233f3:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00233fa:	74 34                	je     c0023430 <IDE::open(int, int, void*)+0x38c>
c00233fc:	83 ec 0c             	sub    esp,0xc
c00233ff:	53                   	push   ebx
c0023400:	6a 01                	push   0x1
c0023402:	68 26 30 02 c0       	push   0xc0023026
c0023407:	6a 0e                	push   0xe
c0023409:	53                   	push   ebx
c002340a:	e8 9f 05 ff ff       	call   c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002340f:	83 c4 14             	add    esp,0x14
c0023412:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023418:	53                   	push   ebx
c0023419:	6a 01                	push   0x1
c002341b:	68 42 30 02 c0       	push   0xc0023042
c0023420:	6a 0f                	push   0xf
c0023422:	53                   	push   ebx
c0023423:	e8 86 05 ff ff       	call   c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023428:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002342e:	eb 38                	jmp    c0023468 <IDE::open(int, int, void*)+0x3c4>
c0023430:	83 ec 0c             	sub    esp,0xc
c0023433:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002343d:	53                   	push   ebx
c002343e:	6a 00                	push   0x0
c0023440:	68 26 30 02 c0       	push   0xc0023026
c0023445:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002344b:	53                   	push   ebx
c002344c:	e8 5d 05 ff ff       	call   c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023451:	83 c4 14             	add    esp,0x14
c0023454:	53                   	push   ebx
c0023455:	6a 00                	push   0x0
c0023457:	68 42 30 02 c0       	push   0xc0023042
c002345c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023462:	53                   	push   ebx
c0023463:	e8 46 05 ff ff       	call   c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023468:	8b 03                	mov    eax,DWORD PTR [ebx]
c002346a:	83 c4 20             	add    esp,0x20
c002346d:	83 ec 0c             	sub    esp,0xc
c0023470:	53                   	push   ebx
c0023471:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023474:	83 c4 0c             	add    esp,0xc
c0023477:	6a 07                	push   0x7
c0023479:	6a 00                	push   0x0
c002347b:	53                   	push   ebx
c002347c:	e8 91 fa ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023481:	83 c4 0c             	add    esp,0xc
c0023484:	6a 07                	push   0x7
c0023486:	6a 01                	push   0x1
c0023488:	53                   	push   ebx
c0023489:	e8 84 fa ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c002348e:	83 c4 0c             	add    esp,0xc
c0023491:	6a 01                	push   0x1
c0023493:	6a 00                	push   0x0
c0023495:	53                   	push   ebx
c0023496:	e8 c3 fb ff ff       	call   c002305e <IDE::enableIRQs(unsigned char, bool)>
c002349b:	83 c4 0c             	add    esp,0xc
c002349e:	6a 01                	push   0x1
c00234a0:	6a 01                	push   0x1
c00234a2:	53                   	push   ebx
c00234a3:	e8 b6 fb ff ff       	call   c002305e <IDE::enableIRQs(unsigned char, bool)>
c00234a8:	83 c4 2c             	add    esp,0x2c
c00234ab:	31 c0                	xor    eax,eax
c00234ad:	5b                   	pop    ebx
c00234ae:	5e                   	pop    esi
c00234af:	5f                   	pop    edi
c00234b0:	5d                   	pop    ebp
c00234b1:	c3                   	ret    

c00234b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00234b2:	55                   	push   ebp
c00234b3:	57                   	push   edi
c00234b4:	56                   	push   esi
c00234b5:	53                   	push   ebx
c00234b6:	83 ec 1c             	sub    esp,0x1c
c00234b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00234bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00234c1:	8d 50 f8             	lea    edx,[eax-0x8]
c00234c4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00234c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00234cc:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00234d0:	80 fa 03             	cmp    dl,0x3
c00234d3:	77 5d                	ja     c0023532 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00234d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00234d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234dd:	0f b6 db             	movzx  ebx,bl
c00234e0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00234e3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00234e7:	83 ca 80             	or     edx,0xffffff80
c00234ea:	0f b6 d2             	movzx  edx,dl
c00234ed:	52                   	push   edx
c00234ee:	6a 0c                	push   0xc
c00234f0:	53                   	push   ebx
c00234f1:	56                   	push   esi
c00234f2:	e8 5b f9 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00234f7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00234fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023500:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023504:	0f b6 c0             	movzx  eax,al
c0023507:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002350b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002350d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023512:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023516:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002351a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002351e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023526:	83 c4 2c             	add    esp,0x2c
c0023529:	5b                   	pop    ebx
c002352a:	5e                   	pop    esi
c002352b:	5f                   	pop    edi
c002352c:	5d                   	pop    ebp
c002352d:	e9 20 f9 ff ff       	jmp    c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023532:	3c 07                	cmp    al,0x7
c0023534:	77 10                	ja     c0023546 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023536:	0f b6 db             	movzx  ebx,bl
c0023539:	0f b6 d0             	movzx  edx,al
c002353c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023544:	eb 2d                	jmp    c0023573 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023546:	3c 0d                	cmp    al,0xd
c0023548:	77 13                	ja     c002355d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002354a:	0f b6 db             	movzx  ebx,bl
c002354d:	0f b6 c0             	movzx  eax,al
c0023550:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023557:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002355b:	eb 16                	jmp    c0023573 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002355d:	3c 15                	cmp    al,0x15
c002355f:	77 14                	ja     c0023575 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023561:	0f b6 db             	movzx  ebx,bl
c0023564:	0f b6 c0             	movzx  eax,al
c0023567:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002356f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023573:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023575:	83 c4 1c             	add    esp,0x1c
c0023578:	5b                   	pop    ebx
c0023579:	5e                   	pop    esi
c002357a:	5f                   	pop    edi
c002357b:	5d                   	pop    ebp
c002357c:	c3                   	ret    
c002357d:	90                   	nop

c002357e <IDE::detect()>:
c002357e:	55                   	push   ebp
c002357f:	57                   	push   edi
c0023580:	56                   	push   esi
c0023581:	53                   	push   ebx
c0023582:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023588:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002358f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023596:	0f 85 9d 02 00 00    	jne    c0023839 <IDE::detect()+0x2bb>
c002359c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00235a3:	31 f6                	xor    esi,esi
c00235a5:	31 ed                	xor    ebp,ebp
c00235a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00235af:	89 e8                	mov    eax,ebp
c00235b1:	c1 e0 06             	shl    eax,0x6
c00235b4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00235bc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00235c0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00235c4:	c1 e0 04             	shl    eax,0x4
c00235c7:	83 c8 a0             	or     eax,0xffffffa0
c00235ca:	0f b6 c0             	movzx  eax,al
c00235cd:	50                   	push   eax
c00235ce:	6a 06                	push   0x6
c00235d0:	56                   	push   esi
c00235d1:	53                   	push   ebx
c00235d2:	e8 7b f8 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235d7:	83 c4 0c             	add    esp,0xc
c00235da:	6a 0c                	push   0xc
c00235dc:	56                   	push   esi
c00235dd:	53                   	push   ebx
c00235de:	e8 2f f9 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00235e3:	83 c4 0c             	add    esp,0xc
c00235e6:	6a 0c                	push   0xc
c00235e8:	56                   	push   esi
c00235e9:	53                   	push   ebx
c00235ea:	e8 23 f9 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00235ef:	83 c4 0c             	add    esp,0xc
c00235f2:	6a 0c                	push   0xc
c00235f4:	56                   	push   esi
c00235f5:	53                   	push   ebx
c00235f6:	e8 17 f9 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00235fb:	83 c4 0c             	add    esp,0xc
c00235fe:	6a 0c                	push   0xc
c0023600:	56                   	push   esi
c0023601:	53                   	push   ebx
c0023602:	e8 0b f9 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023607:	68 ec 00 00 00       	push   0xec
c002360c:	6a 07                	push   0x7
c002360e:	56                   	push   esi
c002360f:	53                   	push   ebx
c0023610:	e8 3d f8 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023615:	83 c4 1c             	add    esp,0x1c
c0023618:	6a 0c                	push   0xc
c002361a:	56                   	push   esi
c002361b:	53                   	push   ebx
c002361c:	e8 f1 f8 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023621:	83 c4 0c             	add    esp,0xc
c0023624:	6a 0c                	push   0xc
c0023626:	56                   	push   esi
c0023627:	53                   	push   ebx
c0023628:	e8 e5 f8 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c002362d:	83 c4 0c             	add    esp,0xc
c0023630:	6a 0c                	push   0xc
c0023632:	56                   	push   esi
c0023633:	53                   	push   ebx
c0023634:	e8 d9 f8 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023639:	83 c4 0c             	add    esp,0xc
c002363c:	6a 0c                	push   0xc
c002363e:	56                   	push   esi
c002363f:	53                   	push   ebx
c0023640:	e8 cd f8 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023645:	83 c4 0c             	add    esp,0xc
c0023648:	6a 0c                	push   0xc
c002364a:	56                   	push   esi
c002364b:	53                   	push   ebx
c002364c:	e8 c1 f8 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023651:	83 c4 10             	add    esp,0x10
c0023654:	84 c0                	test   al,al
c0023656:	0f 84 63 01 00 00    	je     c00237bf <IDE::detect()+0x241>
c002365c:	31 ff                	xor    edi,edi
c002365e:	50                   	push   eax
c002365f:	6a 0c                	push   0xc
c0023661:	56                   	push   esi
c0023662:	53                   	push   ebx
c0023663:	e8 aa f8 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023668:	83 c4 10             	add    esp,0x10
c002366b:	a8 01                	test   al,0x1
c002366d:	0f 85 6d 01 00 00    	jne    c00237e0 <IDE::detect()+0x262>
c0023673:	84 c0                	test   al,al
c0023675:	78 04                	js     c002367b <IDE::detect()+0xfd>
c0023677:	a8 08                	test   al,0x8
c0023679:	75 27                	jne    c00236a2 <IDE::detect()+0x124>
c002367b:	47                   	inc    edi
c002367c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023682:	7e da                	jle    c002365e <IDE::detect()+0xe0>
c0023684:	50                   	push   eax
c0023685:	50                   	push   eax
c0023686:	6a 00                	push   0x0
c0023688:	68 40 4b 4c 00       	push   0x4c4b40
c002368d:	e8 3d a5 ff ff       	call   c001dbcf <nanoSleep(unsigned long long)>
c0023692:	83 c4 10             	add    esp,0x10
c0023695:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002369b:	75 c1                	jne    c002365e <IDE::detect()+0xe0>
c002369d:	e9 3e 01 00 00       	jmp    c00237e0 <IDE::detect()+0x262>
c00236a2:	31 c9                	xor    ecx,ecx
c00236a4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00236a8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00236ac:	83 ec 0c             	sub    esp,0xc
c00236af:	68 80 00 00 00       	push   0x80
c00236b4:	57                   	push   edi
c00236b5:	6a 00                	push   0x0
c00236b7:	56                   	push   esi
c00236b8:	53                   	push   ebx
c00236b9:	e8 f4 fd ff ff       	call   c00234b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00236be:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00236c3:	89 e8                	mov    eax,ebp
c00236c5:	89 d1                	mov    ecx,edx
c00236c7:	c1 e0 06             	shl    eax,0x6
c00236ca:	01 d8                	add    eax,ebx
c00236cc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00236d3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00236da:	89 f2                	mov    edx,esi
c00236dc:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00236e2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00236e6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00236ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00236f0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00236f7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00236ff:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023706:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002370e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023714:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002371b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023721:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023725:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023729:	83 c4 20             	add    esp,0x20
c002372c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002372f:	83 c0 02             	add    eax,0x2
c0023732:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023738:	83 c7 02             	add    edi,0x2
c002373b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002373e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023744:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023748:	75 e2                	jne    c002372c <IDE::detect()+0x1ae>
c002374a:	89 e8                	mov    eax,ebp
c002374c:	c1 e0 06             	shl    eax,0x6
c002374f:	01 d8                	add    eax,ebx
c0023751:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023757:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002375e:	66 c1 ea 09          	shr    dx,0x9
c0023762:	83 e2 01             	and    edx,0x1
c0023765:	84 c9                	test   cl,cl
c0023767:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002376d:	75 22                	jne    c0023791 <IDE::detect()+0x213>
c002376f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023776:	74 46                	je     c00237be <IDE::detect()+0x240>
c0023778:	83 ec 0c             	sub    esp,0xc
c002377b:	68 7c 01 00 00       	push   0x17c
c0023780:	e8 17 be fe ff       	call   c000f59c <malloc>
c0023785:	89 c7                	mov    edi,eax
c0023787:	89 04 24             	mov    DWORD PTR [esp],eax
c002378a:	e8 15 05 00 00       	call   c0023ca4 <ATA::ATA()>
c002378f:	eb 17                	jmp    c00237a8 <IDE::detect()+0x22a>
c0023791:	83 ec 0c             	sub    esp,0xc
c0023794:	68 80 01 00 00       	push   0x180
c0023799:	e8 fe bd fe ff       	call   c000f59c <malloc>
c002379e:	89 c7                	mov    edi,eax
c00237a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00237a3:	e8 04 0b 00 00       	call   c00242ac <ATAPI::ATAPI()>
c00237a8:	5a                   	pop    edx
c00237a9:	59                   	pop    ecx
c00237aa:	57                   	push   edi
c00237ab:	53                   	push   ebx
c00237ac:	e8 85 02 ff ff       	call   c0013a36 <Device::addChild(Device*)>
c00237b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00237b3:	53                   	push   ebx
c00237b4:	55                   	push   ebp
c00237b5:	6a 00                	push   0x0
c00237b7:	57                   	push   edi
c00237b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00237bb:	83 c4 20             	add    esp,0x20
c00237be:	45                   	inc    ebp
c00237bf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00237c4:	74 0d                	je     c00237d3 <IDE::detect()+0x255>
c00237c6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00237ce:	e9 dc fd ff ff       	jmp    c00235af <IDE::detect()+0x31>
c00237d3:	4e                   	dec    esi
c00237d4:	74 63                	je     c0023839 <IDE::detect()+0x2bb>
c00237d6:	be 01 00 00 00       	mov    esi,0x1
c00237db:	e9 c7 fd ff ff       	jmp    c00235a7 <IDE::detect()+0x29>
c00237e0:	50                   	push   eax
c00237e1:	6a 04                	push   0x4
c00237e3:	56                   	push   esi
c00237e4:	53                   	push   ebx
c00237e5:	e8 28 f7 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00237ea:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00237ee:	83 c4 0c             	add    esp,0xc
c00237f1:	6a 05                	push   0x5
c00237f3:	56                   	push   esi
c00237f4:	53                   	push   ebx
c00237f5:	e8 18 f7 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00237fa:	83 c4 10             	add    esp,0x10
c00237fd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023801:	80 fa 14             	cmp    dl,0x14
c0023804:	75 04                	jne    c002380a <IDE::detect()+0x28c>
c0023806:	3c eb                	cmp    al,0xeb
c0023808:	eb 07                	jmp    c0023811 <IDE::detect()+0x293>
c002380a:	3c 96                	cmp    al,0x96
c002380c:	75 b1                	jne    c00237bf <IDE::detect()+0x241>
c002380e:	80 fa 69             	cmp    dl,0x69
c0023811:	75 ac                	jne    c00237bf <IDE::detect()+0x241>
c0023813:	68 a1 00 00 00       	push   0xa1
c0023818:	6a 07                	push   0x7
c002381a:	56                   	push   esi
c002381b:	53                   	push   ebx
c002381c:	e8 31 f6 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023821:	5f                   	pop    edi
c0023822:	58                   	pop    eax
c0023823:	6a 00                	push   0x0
c0023825:	68 40 42 0f 00       	push   0xf4240
c002382a:	e8 a0 a3 ff ff       	call   c001dbcf <nanoSleep(unsigned long long)>
c002382f:	83 c4 10             	add    esp,0x10
c0023832:	b1 01                	mov    cl,0x1
c0023834:	e9 6b fe ff ff       	jmp    c00236a4 <IDE::detect()+0x126>
c0023839:	81 c4 1c 02 00 00    	add    esp,0x21c
c002383f:	5b                   	pop    ebx
c0023840:	5e                   	pop    esi
c0023841:	5f                   	pop    edi
c0023842:	5d                   	pop    ebp
c0023843:	c3                   	ret    

c0023844 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023844:	55                   	push   ebp
c0023845:	57                   	push   edi
c0023846:	56                   	push   esi
c0023847:	53                   	push   ebx
c0023848:	83 ec 1c             	sub    esp,0x1c
c002384b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002384f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023853:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023857:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002385b:	88 c3                	mov    bl,al
c002385d:	84 c0                	test   al,al
c002385f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023863:	0f 84 81 00 00 00    	je     c00238ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023869:	83 ec 0c             	sub    esp,0xc
c002386c:	68 43 bf 02 c0       	push   0xc002bf43
c0023871:	e8 87 ed fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0023876:	83 c4 10             	add    esp,0x10
c0023879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002387d:	3c 01                	cmp    al,0x1
c002387f:	74 63                	je     c00238e4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023881:	3c 02                	cmp    al,0x2
c0023883:	75 53                	jne    c00238d8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023885:	d1 e6                	shl    esi,1
c0023887:	09 ee                	or     esi,ebp
c0023889:	50                   	push   eax
c002388a:	89 f0                	mov    eax,esi
c002388c:	6a 01                	push   0x1
c002388e:	0f b6 f0             	movzx  esi,al
c0023891:	c1 e6 06             	shl    esi,0x6
c0023894:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002389c:	50                   	push   eax
c002389d:	57                   	push   edi
c002389e:	e8 6f f6 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00238a3:	83 c4 10             	add    esp,0x10
c00238a6:	a8 01                	test   al,0x1
c00238a8:	74 02                	je     c00238ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00238aa:	b3 07                	mov    bl,0x7
c00238ac:	a8 02                	test   al,0x2
c00238ae:	74 02                	je     c00238b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00238b0:	b3 03                	mov    bl,0x3
c00238b2:	a8 04                	test   al,0x4
c00238b4:	74 02                	je     c00238b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00238b6:	b3 14                	mov    bl,0x14
c00238b8:	a8 08                	test   al,0x8
c00238ba:	74 02                	je     c00238be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00238bc:	b3 03                	mov    bl,0x3
c00238be:	a8 10                	test   al,0x10
c00238c0:	74 02                	je     c00238c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00238c2:	b3 15                	mov    bl,0x15
c00238c4:	a8 20                	test   al,0x20
c00238c6:	74 02                	je     c00238ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00238c8:	b3 03                	mov    bl,0x3
c00238ca:	a8 40                	test   al,0x40
c00238cc:	74 02                	je     c00238d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00238ce:	b3 16                	mov    bl,0x16
c00238d0:	84 c0                	test   al,al
c00238d2:	79 16                	jns    c00238ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238d4:	b3 0d                	mov    bl,0xd
c00238d6:	eb 12                	jmp    c00238ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238d8:	3c 03                	cmp    al,0x3
c00238da:	74 0c                	je     c00238e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c00238dc:	3c 04                	cmp    al,0x4
c00238de:	75 0a                	jne    c00238ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238e0:	b3 08                	mov    bl,0x8
c00238e2:	eb 06                	jmp    c00238ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238e4:	b3 13                	mov    bl,0x13
c00238e6:	eb 02                	jmp    c00238ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00238e8:	b3 17                	mov    bl,0x17
c00238ea:	83 c4 1c             	add    esp,0x1c
c00238ed:	88 d8                	mov    al,bl
c00238ef:	5b                   	pop    ebx
c00238f0:	5e                   	pop    esi
c00238f1:	5f                   	pop    edi
c00238f2:	5d                   	pop    ebp
c00238f3:	c3                   	ret    

c00238f4 <IDE::polling(unsigned char, unsigned int)>:
c00238f4:	57                   	push   edi
c00238f5:	56                   	push   esi
c00238f6:	53                   	push   ebx
c00238f7:	bb 04 00 00 00       	mov    ebx,0x4
c00238fc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023900:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023905:	52                   	push   edx
c0023906:	6a 0c                	push   0xc
c0023908:	56                   	push   esi
c0023909:	57                   	push   edi
c002390a:	e8 03 f6 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c002390f:	83 c4 10             	add    esp,0x10
c0023912:	4b                   	dec    ebx
c0023913:	75 f0                	jne    c0023905 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023915:	bb a0 86 01 00       	mov    ebx,0x186a0
c002391a:	50                   	push   eax
c002391b:	6a 0c                	push   0xc
c002391d:	56                   	push   esi
c002391e:	57                   	push   edi
c002391f:	e8 ee f5 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023924:	83 c4 10             	add    esp,0x10
c0023927:	a8 01                	test   al,0x1
c0023929:	75 17                	jne    c0023942 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002392b:	a8 20                	test   al,0x20
c002392d:	75 0f                	jne    c002393e <IDE::polling(unsigned char, unsigned int)+0x4a>
c002392f:	4b                   	dec    ebx
c0023930:	74 10                	je     c0023942 <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023932:	84 c0                	test   al,al
c0023934:	78 e4                	js     c002391a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023936:	a8 08                	test   al,0x8
c0023938:	74 e0                	je     c002391a <IDE::polling(unsigned char, unsigned int)+0x26>
c002393a:	31 c0                	xor    eax,eax
c002393c:	eb 06                	jmp    c0023944 <IDE::polling(unsigned char, unsigned int)+0x50>
c002393e:	b0 01                	mov    al,0x1
c0023940:	eb 02                	jmp    c0023944 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023942:	b0 02                	mov    al,0x2
c0023944:	5b                   	pop    ebx
c0023945:	5e                   	pop    esi
c0023946:	5f                   	pop    edi
c0023947:	c3                   	ret    

c0023948 <SATABus::close(int, int, void*)>:
c0023948:	31 c0                	xor    eax,eax
c002394a:	c3                   	ret    
c002394b:	90                   	nop

c002394c <SATABus::detect()>:
c002394c:	c3                   	ret    
c002394d:	90                   	nop

c002394e <SATABus::SATABus()>:
c002394e:	83 ec 0c             	sub    esp,0xc
c0023951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023955:	83 ec 08             	sub    esp,0x8
c0023958:	68 7c bf 02 c0       	push   0xc002bf7c
c002395d:	50                   	push   eax
c002395e:	e8 81 04 ff ff       	call   c0013de4 <HardDiskController::HardDiskController(char const*)>
c0023963:	83 c4 10             	add    esp,0x10
c0023966:	ba d0 bf 02 c0       	mov    edx,0xc002bfd0
c002396b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002396f:	89 10                	mov    DWORD PTR [eax],edx
c0023971:	83 ec 0c             	sub    esp,0xc
c0023974:	6a 50                	push   0x50
c0023976:	e8 93 c0 fe ff       	call   c000fa0e <Phys::allocateContiguousPages(int)>
c002397b:	83 c4 10             	add    esp,0x10
c002397e:	89 c2                	mov    edx,eax
c0023980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023984:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002398a:	83 ec 0c             	sub    esp,0xc
c002398d:	6a 50                	push   0x50
c002398f:	e8 31 d8 fe ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0023994:	83 c4 10             	add    esp,0x10
c0023997:	89 c2                	mov    edx,eax
c0023999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002399d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00239a3:	a1 f0 d8 02 c0       	mov    eax,ds:0xc002d8f0
c00239a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00239ac:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00239b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00239b6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00239bc:	83 ec 0c             	sub    esp,0xc
c00239bf:	6a 03                	push   0x3
c00239c1:	6a 50                	push   0x50
c00239c3:	51                   	push   ecx
c00239c4:	52                   	push   edx
c00239c5:	50                   	push   eax
c00239c6:	e8 cf e2 fe ff       	call   c0011c9a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00239cb:	83 c4 20             	add    esp,0x20
c00239ce:	90                   	nop
c00239cf:	83 c4 0c             	add    esp,0xc
c00239d2:	c3                   	ret    
c00239d3:	90                   	nop

c00239d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00239d4:	83 ec 0c             	sub    esp,0xc
c00239d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00239db:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00239de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00239e1:	09 c2                	or     edx,eax
c00239e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00239e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00239ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c00239ef:	31 c0                	xor    eax,eax
c00239f1:	c1 e9 08             	shr    ecx,0x8
c00239f4:	83 e1 0f             	and    ecx,0xf
c00239f7:	39 c8                	cmp    eax,ecx
c00239f9:	74 0a                	je     c0023a05 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00239fb:	f6 c2 01             	test   dl,0x1
c00239fe:	74 18                	je     c0023a18 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a00:	d1 ea                	shr    edx,1
c0023a02:	40                   	inc    eax
c0023a03:	eb f2                	jmp    c00239f7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023a05:	83 ec 0c             	sub    esp,0xc
c0023a08:	68 a0 bf 02 c0       	push   0xc002bfa0
c0023a0d:	e8 57 63 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0023a12:	83 c4 10             	add    esp,0x10
c0023a15:	83 c8 ff             	or     eax,0xffffffff
c0023a18:	83 c4 0c             	add    esp,0xc
c0023a1b:	c3                   	ret    

c0023a1c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023a1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023a20:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023a23:	89 c2                	mov    edx,eax
c0023a25:	c1 ea 08             	shr    edx,0x8
c0023a28:	83 e2 0f             	and    edx,0xf
c0023a2b:	fe ca                	dec    dl
c0023a2d:	75 31                	jne    c0023a60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a2f:	83 e0 0f             	and    eax,0xf
c0023a32:	3c 03                	cmp    al,0x3
c0023a34:	75 2a                	jne    c0023a60 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023a36:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023a39:	b8 02 00 00 00       	mov    eax,0x2
c0023a3e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023a44:	74 1c                	je     c0023a62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a46:	b8 04 00 00 00       	mov    eax,0x4
c0023a4b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023a51:	74 0f                	je     c0023a62 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023a53:	31 c0                	xor    eax,eax
c0023a55:	83 fa 03             	cmp    edx,0x3
c0023a58:	0f 94 c0             	sete   al
c0023a5b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023a5f:	c3                   	ret    
c0023a60:	31 c0                	xor    eax,eax
c0023a62:	c3                   	ret    
c0023a63:	90                   	nop

c0023a64 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a6b:	0f ba e2 0f          	bt     edx,0xf
c0023a6f:	72 f7                	jb     c0023a68 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023a71:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a74:	83 ca 10             	or     edx,0x10
c0023a77:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a7a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a7d:	83 ca 01             	or     edx,0x1
c0023a80:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a83:	c3                   	ret    

c0023a84 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a8b:	83 e2 fe             	and    edx,0xfffffffe
c0023a8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a91:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a94:	83 e2 ef             	and    edx,0xffffffef
c0023a97:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023a9a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023a9d:	0f ba e2 0e          	bt     edx,0xe
c0023aa1:	72 f7                	jb     c0023a9a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023aa3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023aa6:	0f ba e2 0f          	bt     edx,0xf
c0023aaa:	72 ee                	jb     c0023a9a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023aac:	c3                   	ret    
c0023aad:	90                   	nop

c0023aae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023aae:	55                   	push   ebp
c0023aaf:	57                   	push   edi
c0023ab0:	56                   	push   esi
c0023ab1:	53                   	push   ebx
c0023ab2:	83 ec 1c             	sub    esp,0x1c
c0023ab5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ab9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023abd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023ac1:	53                   	push   ebx
c0023ac2:	89 fd                	mov    ebp,edi
c0023ac4:	56                   	push   esi
c0023ac5:	c1 e5 0a             	shl    ebp,0xa
c0023ac8:	e8 b7 ff ff ff       	call   c0023a84 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023acd:	83 ec 0c             	sub    esp,0xc
c0023ad0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023ad6:	01 e8                	add    eax,ebp
c0023ad8:	89 03                	mov    DWORD PTR [ebx],eax
c0023ada:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023adc:	68 00 04 00 00       	push   0x400
c0023ae1:	6a 00                	push   0x0
c0023ae3:	50                   	push   eax
c0023ae4:	e8 67 cc fd ff       	call   c0000750 <memset>
c0023ae9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023aef:	89 fa                	mov    edx,edi
c0023af1:	01 e8                	add    eax,ebp
c0023af3:	c1 e7 0d             	shl    edi,0xd
c0023af6:	89 03                	mov    DWORD PTR [ebx],eax
c0023af8:	c1 e2 08             	shl    edx,0x8
c0023afb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023b02:	81 c2 00 80 00 00    	add    edx,0x8000
c0023b08:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023b0c:	89 d0                	mov    eax,edx
c0023b0e:	83 c4 1c             	add    esp,0x1c
c0023b11:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023b17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023b1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023b1d:	68 00 01 00 00       	push   0x100
c0023b22:	6a 00                	push   0x0
c0023b24:	50                   	push   eax
c0023b25:	e8 26 cc fd ff       	call   c0000750 <memset>
c0023b2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023b2e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023b34:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023b3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b3e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023b41:	83 c4 10             	add    esp,0x10
c0023b44:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023b4b:	31 ff                	xor    edi,edi
c0023b4d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023b53:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b5d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023b63:	83 c5 20             	add    ebp,0x20
c0023b66:	01 f8                	add    eax,edi
c0023b68:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b6b:	52                   	push   edx
c0023b6c:	68 00 01 00 00       	push   0x100
c0023b71:	6a 00                	push   0x0
c0023b73:	50                   	push   eax
c0023b74:	e8 d7 cb fd ff       	call   c0000750 <memset>
c0023b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023b7d:	83 c4 10             	add    esp,0x10
c0023b80:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023b86:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023b8d:	01 f8                	add    eax,edi
c0023b8f:	81 c7 00 01 00 00    	add    edi,0x100
c0023b95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023b98:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023b9e:	75 b3                	jne    c0023b53 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ba0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ba4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ba8:	83 c4 1c             	add    esp,0x1c
c0023bab:	5b                   	pop    ebx
c0023bac:	5e                   	pop    esi
c0023bad:	5f                   	pop    edi
c0023bae:	5d                   	pop    ebp
c0023baf:	e9 b0 fe ff ff       	jmp    c0023a64 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023bb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023bb4:	55                   	push   ebp
c0023bb5:	57                   	push   edi
c0023bb6:	56                   	push   esi
c0023bb7:	53                   	push   ebx
c0023bb8:	31 db                	xor    ebx,ebx
c0023bba:	83 ec 0c             	sub    esp,0xc
c0023bbd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023bc1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023bc5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023bc8:	f7 c7 01 00 00 00    	test   edi,0x1
c0023bce:	74 7a                	je     c0023c4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023bd0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023bd4:	89 d8                	mov    eax,ebx
c0023bd6:	c1 e0 07             	shl    eax,0x7
c0023bd9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023be0:	55                   	push   ebp
c0023be1:	56                   	push   esi
c0023be2:	e8 35 fe ff ff       	call   c0023a1c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023be7:	5a                   	pop    edx
c0023be8:	83 f8 01             	cmp    eax,0x1
c0023beb:	59                   	pop    ecx
c0023bec:	75 21                	jne    c0023c0f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023bee:	50                   	push   eax
c0023bef:	53                   	push   ebx
c0023bf0:	55                   	push   ebp
c0023bf1:	56                   	push   esi
c0023bf2:	e8 b7 fe ff ff       	call   c0023aae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023bf7:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023bfe:	e8 99 b9 fe ff       	call   c000f59c <malloc>
c0023c03:	89 c5                	mov    ebp,eax
c0023c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c08:	e8 03 0d 00 00       	call   c0024910 <SATA::SATA()>
c0023c0d:	eb 24                	jmp    c0023c33 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023c0f:	83 f8 04             	cmp    eax,0x4
c0023c12:	75 36                	jne    c0023c4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c14:	51                   	push   ecx
c0023c15:	53                   	push   ebx
c0023c16:	55                   	push   ebp
c0023c17:	56                   	push   esi
c0023c18:	e8 91 fe ff ff       	call   c0023aae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023c1d:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023c24:	e8 73 b9 fe ff       	call   c000f59c <malloc>
c0023c29:	89 c5                	mov    ebp,eax
c0023c2b:	89 04 24             	mov    DWORD PTR [esp],eax
c0023c2e:	e8 53 10 00 00       	call   c0024c86 <SATAPI::SATAPI()>
c0023c33:	58                   	pop    eax
c0023c34:	5a                   	pop    edx
c0023c35:	55                   	push   ebp
c0023c36:	56                   	push   esi
c0023c37:	e8 fa fd fe ff       	call   c0013a36 <Device::addChild(Device*)>
c0023c3c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023c3f:	56                   	push   esi
c0023c40:	6a 00                	push   0x0
c0023c42:	53                   	push   ebx
c0023c43:	55                   	push   ebp
c0023c44:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023c47:	83 c4 20             	add    esp,0x20
c0023c4a:	d1 ef                	shr    edi,1
c0023c4c:	43                   	inc    ebx
c0023c4d:	83 fb 20             	cmp    ebx,0x20
c0023c50:	0f 85 72 ff ff ff    	jne    c0023bc8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023c56:	83 c4 0c             	add    esp,0xc
c0023c59:	5b                   	pop    ebx
c0023c5a:	5e                   	pop    esi
c0023c5b:	5f                   	pop    edi
c0023c5c:	5d                   	pop    ebp
c0023c5d:	c3                   	ret    

c0023c5e <SATABus::open(int, int, void*)>:
c0023c5e:	83 ec 14             	sub    esp,0x14
c0023c61:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c65:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023c6b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023c71:	52                   	push   edx
c0023c72:	50                   	push   eax
c0023c73:	e8 3c ff ff ff       	call   c0023bb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023c78:	31 c0                	xor    eax,eax
c0023c7a:	83 c4 1c             	add    esp,0x1c
c0023c7d:	c3                   	ret    

c0023c7e <ATA::close(int, int, void*)>:
c0023c7e:	83 ec 0c             	sub    esp,0xc
c0023c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c85:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023c8b:	85 c0                	test   eax,eax
c0023c8d:	74 0c                	je     c0023c9b <ATA::close(int, int, void*)+0x1d>
c0023c8f:	83 ec 0c             	sub    esp,0xc
c0023c92:	8b 10                	mov    edx,DWORD PTR [eax]
c0023c94:	50                   	push   eax
c0023c95:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023c98:	83 c4 10             	add    esp,0x10
c0023c9b:	31 c0                	xor    eax,eax
c0023c9d:	83 c4 0c             	add    esp,0xc
c0023ca0:	c3                   	ret    
c0023ca1:	90                   	nop

c0023ca2 <ATA::powerSaving(PowerSavingLevel)>:
c0023ca2:	c3                   	ret    
c0023ca3:	90                   	nop

c0023ca4 <ATA::ATA()>:
c0023ca4:	83 ec 0c             	sub    esp,0xc
c0023ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cab:	83 ec 04             	sub    esp,0x4
c0023cae:	68 00 02 00 00       	push   0x200
c0023cb3:	68 99 c0 02 c0       	push   0xc002c099
c0023cb8:	50                   	push   eax
c0023cb9:	e8 ae 01 ff ff       	call   c0013e6c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023cbe:	83 c4 10             	add    esp,0x10
c0023cc1:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0023cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cca:	89 10                	mov    DWORD PTR [eax],edx
c0023ccc:	90                   	nop
c0023ccd:	83 c4 0c             	add    esp,0xc
c0023cd0:	c3                   	ret    
c0023cd1:	90                   	nop

c0023cd2 <ATA::flush(bool)>:
c0023cd2:	53                   	push   ebx
c0023cd3:	83 ec 08             	sub    esp,0x8
c0023cd6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023cdf:	19 c0                	sbb    eax,eax
c0023ce1:	83 e0 fd             	and    eax,0xfffffffd
c0023ce4:	05 ea 00 00 00       	add    eax,0xea
c0023ce9:	50                   	push   eax
c0023cea:	6a 07                	push   0x7
c0023cec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023cf3:	50                   	push   eax
c0023cf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023cfa:	e8 53 f1 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cff:	83 c4 0c             	add    esp,0xc
c0023d02:	6a 00                	push   0x0
c0023d04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d0b:	50                   	push   eax
c0023d0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023d12:	e8 dd fb ff ff       	call   c00238f4 <IDE::polling(unsigned char, unsigned int)>
c0023d17:	83 c4 18             	add    esp,0x18
c0023d1a:	5b                   	pop    ebx
c0023d1b:	c3                   	ret    

c0023d1c <ATA::readyForCommand()>:
c0023d1c:	56                   	push   esi
c0023d1d:	53                   	push   ebx
c0023d1e:	31 db                	xor    ebx,ebx
c0023d20:	50                   	push   eax
c0023d21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023d25:	50                   	push   eax
c0023d26:	6a 0c                	push   0xc
c0023d28:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023d2f:	50                   	push   eax
c0023d30:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023d36:	e8 d7 f1 ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c0023d3b:	83 c4 10             	add    esp,0x10
c0023d3e:	a8 88                	test   al,0x88
c0023d40:	74 23                	je     c0023d65 <ATA::readyForCommand()+0x49>
c0023d42:	43                   	inc    ebx
c0023d43:	83 fb 63             	cmp    ebx,0x63
c0023d46:	7e dd                	jle    c0023d25 <ATA::readyForCommand()+0x9>
c0023d48:	51                   	push   ecx
c0023d49:	51                   	push   ecx
c0023d4a:	6a 00                	push   0x0
c0023d4c:	68 40 42 0f 00       	push   0xf4240
c0023d51:	e8 79 9e ff ff       	call   c001dbcf <nanoSleep(unsigned long long)>
c0023d56:	83 c4 10             	add    esp,0x10
c0023d59:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023d5f:	75 c4                	jne    c0023d25 <ATA::readyForCommand()+0x9>
c0023d61:	31 c0                	xor    eax,eax
c0023d63:	eb 02                	jmp    c0023d67 <ATA::readyForCommand()+0x4b>
c0023d65:	b0 01                	mov    al,0x1
c0023d67:	5a                   	pop    edx
c0023d68:	5b                   	pop    ebx
c0023d69:	5e                   	pop    esi
c0023d6a:	c3                   	ret    
c0023d6b:	90                   	nop

c0023d6c <ATA::access(unsigned long long, int, void*, bool)>:
c0023d6c:	55                   	push   ebp
c0023d6d:	57                   	push   edi
c0023d6e:	56                   	push   esi
c0023d6f:	53                   	push   ebx
c0023d70:	83 ec 2c             	sub    esp,0x2c
c0023d73:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023d77:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023d7b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023d83:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023d87:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023d8b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023d8f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d99:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023d9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023da3:	c1 e0 06             	shl    eax,0x6
c0023da6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023dae:	74 5d                	je     c0023e0d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023db0:	89 fa                	mov    edx,edi
c0023db2:	89 f0                	mov    eax,esi
c0023db4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023db8:	c1 ea 1c             	shr    edx,0x1c
c0023dbb:	89 d1                	mov    ecx,edx
c0023dbd:	09 c1                	or     ecx,eax
c0023dbf:	74 25                	je     c0023de6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023dc1:	31 ed                	xor    ebp,ebp
c0023dc3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023dca:	89 fa                	mov    edx,edi
c0023dcc:	89 f0                	mov    eax,esi
c0023dce:	0f ad d0             	shrd   eax,edx,cl
c0023dd1:	d3 ea                	shr    edx,cl
c0023dd3:	f6 c1 20             	test   cl,0x20
c0023dd6:	74 02                	je     c0023dda <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023dd8:	89 d0                	mov    eax,edx
c0023dda:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023dde:	45                   	inc    ebp
c0023ddf:	83 fd 06             	cmp    ebp,0x6
c0023de2:	75 df                	jne    c0023dc3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023de4:	eb 76                	jmp    c0023e5c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023de6:	89 f0                	mov    eax,esi
c0023de8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ded:	89 fa                	mov    edx,edi
c0023def:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023df6:	0f ac d0 10          	shrd   eax,edx,0x10
c0023dfa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023dff:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023e03:	c1 ee 18             	shr    esi,0x18
c0023e06:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023e0b:	eb 56                	jmp    c0023e63 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023e0d:	6a 00                	push   0x0
c0023e0f:	6a 3f                	push   0x3f
c0023e11:	57                   	push   edi
c0023e12:	56                   	push   esi
c0023e13:	e8 2c 29 00 00       	call   c0026744 <__umoddi3>
c0023e18:	83 c4 10             	add    esp,0x10
c0023e1b:	40                   	inc    eax
c0023e1c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023e20:	6a 00                	push   0x0
c0023e22:	68 f0 03 00 00       	push   0x3f0
c0023e27:	57                   	push   edi
c0023e28:	56                   	push   esi
c0023e29:	e8 16 28 00 00       	call   c0026644 <__udivdi3>
c0023e2e:	83 c4 10             	add    esp,0x10
c0023e31:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023e36:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023e3d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023e42:	6a 00                	push   0x0
c0023e44:	6a 3f                	push   0x3f
c0023e46:	57                   	push   edi
c0023e47:	56                   	push   esi
c0023e48:	e8 f7 27 00 00       	call   c0026644 <__udivdi3>
c0023e4d:	83 c4 10             	add    esp,0x10
c0023e50:	89 c6                	mov    esi,eax
c0023e52:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023e57:	83 e6 0f             	and    esi,0xf
c0023e5a:	eb 07                	jmp    c0023e63 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023e5c:	31 f6                	xor    esi,esi
c0023e5e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023e63:	bf 01 00 00 00       	mov    edi,0x1
c0023e68:	50                   	push   eax
c0023e69:	6a 00                	push   0x0
c0023e6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e72:	50                   	push   eax
c0023e73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023e77:	e8 e2 f1 ff ff       	call   c002305e <IDE::enableIRQs(unsigned char, bool)>
c0023e7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e7f:	e8 98 fe ff ff       	call   c0023d1c <ATA::readyForCommand()>
c0023e84:	83 c4 10             	add    esp,0x10
c0023e87:	84 c0                	test   al,al
c0023e89:	0f 84 5a 02 00 00    	je     c00240e9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023e8f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023e95:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e9b:	c1 e0 04             	shl    eax,0x4
c0023e9e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023ea5:	09 c6                	or     esi,eax
c0023ea7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023eac:	75 05                	jne    c0023eb3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023eae:	83 ce a0             	or     esi,0xffffffa0
c0023eb1:	eb 03                	jmp    c0023eb6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023eb3:	83 ce e0             	or     esi,0xffffffe0
c0023eb6:	89 f0                	mov    eax,esi
c0023eb8:	0f b6 f0             	movzx  esi,al
c0023ebb:	56                   	push   esi
c0023ebc:	6a 06                	push   0x6
c0023ebe:	51                   	push   ecx
c0023ebf:	52                   	push   edx
c0023ec0:	e8 8d ef ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ec5:	83 c4 10             	add    esp,0x10
c0023ec8:	6a 00                	push   0x0
c0023eca:	6a 01                	push   0x1
c0023ecc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ed3:	50                   	push   eax
c0023ed4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eda:	e8 73 ef ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023edf:	83 c4 10             	add    esp,0x10
c0023ee2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ee7:	75 6e                	jne    c0023f57 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023ee9:	6a 00                	push   0x0
c0023eeb:	6a 08                	push   0x8
c0023eed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ef4:	50                   	push   eax
c0023ef5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023efb:	e8 52 ef ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f00:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023f05:	50                   	push   eax
c0023f06:	6a 09                	push   0x9
c0023f08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f0f:	50                   	push   eax
c0023f10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f16:	e8 37 ef ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f1b:	83 c4 20             	add    esp,0x20
c0023f1e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023f23:	50                   	push   eax
c0023f24:	6a 0a                	push   0xa
c0023f26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f2d:	50                   	push   eax
c0023f2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f34:	e8 19 ef ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f39:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023f3e:	50                   	push   eax
c0023f3f:	6a 0b                	push   0xb
c0023f41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f48:	50                   	push   eax
c0023f49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f4f:	e8 fe ee ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f54:	83 c4 20             	add    esp,0x20
c0023f57:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023f5c:	50                   	push   eax
c0023f5d:	6a 02                	push   0x2
c0023f5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f66:	50                   	push   eax
c0023f67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f6d:	e8 e0 ee ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f72:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023f77:	50                   	push   eax
c0023f78:	6a 03                	push   0x3
c0023f7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f81:	50                   	push   eax
c0023f82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f88:	e8 c5 ee ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f8d:	83 c4 20             	add    esp,0x20
c0023f90:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023f95:	50                   	push   eax
c0023f96:	6a 04                	push   0x4
c0023f98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f9f:	50                   	push   eax
c0023fa0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fa6:	e8 a7 ee ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023fb0:	50                   	push   eax
c0023fb1:	6a 05                	push   0x5
c0023fb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fba:	50                   	push   eax
c0023fbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc1:	e8 8c ee ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fc6:	83 c4 20             	add    esp,0x20
c0023fc9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023fce:	0f 94 c0             	sete   al
c0023fd1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023fd6:	74 09                	je     c0023fe1 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023fd8:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023fdf:	eb 07                	jmp    c0023fe8 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023fe1:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023fe8:	0f b6 c0             	movzx  eax,al
c0023feb:	50                   	push   eax
c0023fec:	6a 07                	push   0x7
c0023fee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ff5:	50                   	push   eax
c0023ff6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ffc:	e8 51 ee ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024001:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024005:	83 c4 10             	add    esp,0x10
c0024008:	85 f6                	test   esi,esi
c002400a:	0f 84 ba 00 00 00    	je     c00240ca <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024010:	50                   	push   eax
c0024011:	6a 01                	push   0x1
c0024013:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401a:	50                   	push   eax
c002401b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024021:	e8 ce f8 ff ff       	call   c00238f4 <IDE::polling(unsigned char, unsigned int)>
c0024026:	83 c4 10             	add    esp,0x10
c0024029:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002402f:	84 c0                	test   al,al
c0024031:	74 2c                	je     c002405f <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024033:	0f b6 f8             	movzx  edi,al
c0024036:	0f b6 d2             	movzx  edx,dl
c0024039:	57                   	push   edi
c002403a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024041:	50                   	push   eax
c0024042:	52                   	push   edx
c0024043:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024049:	e8 f6 f7 ff ff       	call   c0023844 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002404e:	c7 04 24 f4 bf 02 c0 	mov    DWORD PTR [esp],0xc002bff4
c0024055:	e8 a3 e5 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c002405a:	e9 87 00 00 00       	jmp    c00240e6 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002405f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024064:	74 33                	je     c0024099 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024066:	31 ed                	xor    ebp,ebp
c0024068:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002406c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024070:	50                   	push   eax
c0024071:	50                   	push   eax
c0024072:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024079:	50                   	push   eax
c002407a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024080:	e8 bb ed ff ff       	call   c0022e40 <IDE::getBase(unsigned char)>
c0024085:	89 c2                	mov    edx,eax
c0024087:	89 f8                	mov    eax,edi
c0024089:	66 ef                	out    dx,ax
c002408b:	45                   	inc    ebp
c002408c:	83 c4 10             	add    esp,0x10
c002408f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024095:	75 d1                	jne    c0024068 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024097:	eb 23                	jmp    c00240bc <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024099:	0f b6 d2             	movzx  edx,dl
c002409c:	51                   	push   ecx
c002409d:	51                   	push   ecx
c002409e:	52                   	push   edx
c002409f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240a5:	e8 96 ed ff ff       	call   c0022e40 <IDE::getBase(unsigned char)>
c00240aa:	b9 00 01 00 00       	mov    ecx,0x100
c00240af:	89 c2                	mov    edx,eax
c00240b1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00240b5:	fc                   	cld    
c00240b6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00240b9:	83 c4 10             	add    esp,0x10
c00240bc:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00240c4:	4e                   	dec    esi
c00240c5:	e9 3e ff ff ff       	jmp    c0024008 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00240ca:	31 ff                	xor    edi,edi
c00240cc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00240d1:	74 16                	je     c00240e9 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00240d3:	50                   	push   eax
c00240d4:	50                   	push   eax
c00240d5:	31 c0                	xor    eax,eax
c00240d7:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00240dc:	0f 94 c0             	sete   al
c00240df:	50                   	push   eax
c00240e0:	53                   	push   ebx
c00240e1:	e8 ec fb ff ff       	call   c0023cd2 <ATA::flush(bool)>
c00240e6:	83 c4 10             	add    esp,0x10
c00240e9:	83 c4 2c             	add    esp,0x2c
c00240ec:	89 f8                	mov    eax,edi
c00240ee:	5b                   	pop    ebx
c00240ef:	5e                   	pop    esi
c00240f0:	5f                   	pop    edi
c00240f1:	5d                   	pop    ebp
c00240f2:	c3                   	ret    
c00240f3:	90                   	nop

c00240f4 <ATA::read(unsigned long long, int, void*)>:
c00240f4:	57                   	push   edi
c00240f5:	b8 04 00 00 00       	mov    eax,0x4
c00240fa:	56                   	push   esi
c00240fb:	53                   	push   ebx
c00240fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024100:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024104:	8d 7a ff             	lea    edi,[edx-0x1]
c0024107:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002410b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002410f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024115:	77 25                	ja     c002413c <ATA::read(unsigned long long, int, void*)+0x48>
c0024117:	b8 06 00 00 00       	mov    eax,0x6
c002411c:	85 f6                	test   esi,esi
c002411e:	74 1c                	je     c002413c <ATA::read(unsigned long long, int, void*)+0x48>
c0024120:	50                   	push   eax
c0024121:	50                   	push   eax
c0024122:	6a 00                	push   0x0
c0024124:	56                   	push   esi
c0024125:	52                   	push   edx
c0024126:	53                   	push   ebx
c0024127:	51                   	push   ecx
c0024128:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002412c:	e8 3b fc ff ff       	call   c0023d6c <ATA::access(unsigned long long, int, void*, bool)>
c0024131:	83 c4 20             	add    esp,0x20
c0024134:	85 c0                	test   eax,eax
c0024136:	0f 95 c0             	setne  al
c0024139:	0f b6 c0             	movzx  eax,al
c002413c:	5b                   	pop    ebx
c002413d:	5e                   	pop    esi
c002413e:	5f                   	pop    edi
c002413f:	c3                   	ret    

c0024140 <ATA::write(unsigned long long, int, void*)>:
c0024140:	57                   	push   edi
c0024141:	b8 04 00 00 00       	mov    eax,0x4
c0024146:	56                   	push   esi
c0024147:	53                   	push   ebx
c0024148:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002414c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024150:	8d 7a ff             	lea    edi,[edx-0x1]
c0024153:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024157:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002415b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024161:	77 25                	ja     c0024188 <ATA::write(unsigned long long, int, void*)+0x48>
c0024163:	b8 06 00 00 00       	mov    eax,0x6
c0024168:	85 f6                	test   esi,esi
c002416a:	74 1c                	je     c0024188 <ATA::write(unsigned long long, int, void*)+0x48>
c002416c:	50                   	push   eax
c002416d:	50                   	push   eax
c002416e:	6a 01                	push   0x1
c0024170:	56                   	push   esi
c0024171:	52                   	push   edx
c0024172:	53                   	push   ebx
c0024173:	51                   	push   ecx
c0024174:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024178:	e8 ef fb ff ff       	call   c0023d6c <ATA::access(unsigned long long, int, void*, bool)>
c002417d:	83 c4 20             	add    esp,0x20
c0024180:	85 c0                	test   eax,eax
c0024182:	0f 95 c0             	setne  al
c0024185:	0f b6 c0             	movzx  eax,al
c0024188:	5b                   	pop    ebx
c0024189:	5e                   	pop    esi
c002418a:	5f                   	pop    edi
c002418b:	c3                   	ret    

c002418c <ATA::detectCHS()>:
c002418c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024190:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024196:	c1 e0 06             	shl    eax,0x6
c0024199:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002419f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00241a9:	c7 44 24 04 ff bf 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bfff
c00241b1:	e9 b3 5b ff ff       	jmp    c0019d69 <Krnl::panic(char const*)>

c00241b6 <ATA::open(int, int, void*)>:
c00241b6:	53                   	push   ebx
c00241b7:	83 ec 08             	sub    esp,0x8
c00241ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00241be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00241c6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00241cc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00241d2:	c1 e0 06             	shl    eax,0x6
c00241d5:	01 d0                	add    eax,edx
c00241d7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00241de:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00241e4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00241eb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00241f5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00241fb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024202:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024209:	75 0c                	jne    c0024217 <ATA::open(int, int, void*)+0x61>
c002420b:	83 ec 0c             	sub    esp,0xc
c002420e:	53                   	push   ebx
c002420f:	e8 78 ff ff ff       	call   c002418c <ATA::detectCHS()>
c0024214:	83 c4 10             	add    esp,0x10
c0024217:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002421d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024223:	c1 e0 06             	shl    eax,0x6
c0024226:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002422d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024237:	d1 e8                	shr    eax,1
c0024239:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002423f:	6a 04                	push   0x4
c0024241:	6a 0c                	push   0xc
c0024243:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002424a:	50                   	push   eax
c002424b:	52                   	push   edx
c002424c:	e8 01 ec ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024251:	90                   	nop
c0024252:	90                   	nop
c0024253:	6a 00                	push   0x0
c0024255:	6a 0c                	push   0xc
c0024257:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002425e:	50                   	push   eax
c002425f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024265:	e8 e8 eb ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002426a:	83 c4 14             	add    esp,0x14
c002426d:	53                   	push   ebx
c002426e:	e8 61 fc fe ff       	call   c0013ed4 <PhysicalDisk::startCache()>
c0024273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024276:	e8 db 1e ff ff       	call   c0016156 <createPartitionsForDisk(PhysicalDisk*)>
c002427b:	31 c0                	xor    eax,eax
c002427d:	83 c4 18             	add    esp,0x18
c0024280:	5b                   	pop    ebx
c0024281:	c3                   	ret    

c0024282 <ATAPI::write(unsigned long long, int, void*)>:
c0024282:	b8 03 00 00 00       	mov    eax,0x3
c0024287:	c3                   	ret    

c0024288 <ATAPI::close(int, int, void*)>:
c0024288:	83 ec 0c             	sub    esp,0xc
c002428b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002428f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024295:	85 c0                	test   eax,eax
c0024297:	74 0c                	je     c00242a5 <ATAPI::close(int, int, void*)+0x1d>
c0024299:	83 ec 0c             	sub    esp,0xc
c002429c:	8b 10                	mov    edx,DWORD PTR [eax]
c002429e:	50                   	push   eax
c002429f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00242a2:	83 c4 10             	add    esp,0x10
c00242a5:	31 c0                	xor    eax,eax
c00242a7:	83 c4 0c             	add    esp,0xc
c00242aa:	c3                   	ret    
c00242ab:	90                   	nop

c00242ac <ATAPI::ATAPI()>:
c00242ac:	83 ec 0c             	sub    esp,0xc
c00242af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242b3:	83 ec 04             	sub    esp,0x4
c00242b6:	68 00 08 00 00       	push   0x800
c00242bb:	68 39 c1 02 c0       	push   0xc002c139
c00242c0:	50                   	push   eax
c00242c1:	e8 a6 fb fe ff       	call   c0013e6c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00242c6:	83 c4 10             	add    esp,0x10
c00242c9:	ba 54 c0 02 c0       	mov    edx,0xc002c054
c00242ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242d2:	89 10                	mov    DWORD PTR [eax],edx
c00242d4:	90                   	nop
c00242d5:	83 c4 0c             	add    esp,0xc
c00242d8:	c3                   	ret    
c00242d9:	90                   	nop

c00242da <ATAPI::readyForCommand()>:
c00242da:	56                   	push   esi
c00242db:	53                   	push   ebx
c00242dc:	31 db                	xor    ebx,ebx
c00242de:	50                   	push   eax
c00242df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00242e3:	50                   	push   eax
c00242e4:	6a 0c                	push   0xc
c00242e6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00242ed:	50                   	push   eax
c00242ee:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00242f4:	e8 19 ec ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00242f9:	83 c4 10             	add    esp,0x10
c00242fc:	a8 88                	test   al,0x88
c00242fe:	74 23                	je     c0024323 <ATAPI::readyForCommand()+0x49>
c0024300:	43                   	inc    ebx
c0024301:	83 fb 63             	cmp    ebx,0x63
c0024304:	7e dd                	jle    c00242e3 <ATAPI::readyForCommand()+0x9>
c0024306:	51                   	push   ecx
c0024307:	51                   	push   ecx
c0024308:	6a 00                	push   0x0
c002430a:	68 40 42 0f 00       	push   0xf4240
c002430f:	e8 bb 98 ff ff       	call   c001dbcf <nanoSleep(unsigned long long)>
c0024314:	83 c4 10             	add    esp,0x10
c0024317:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002431d:	75 c4                	jne    c00242e3 <ATAPI::readyForCommand()+0x9>
c002431f:	31 c0                	xor    eax,eax
c0024321:	eb 02                	jmp    c0024325 <ATAPI::readyForCommand()+0x4b>
c0024323:	b0 01                	mov    al,0x1
c0024325:	5a                   	pop    edx
c0024326:	5b                   	pop    ebx
c0024327:	5e                   	pop    esi
c0024328:	c3                   	ret    
c0024329:	90                   	nop

c002432a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002432a:	55                   	push   ebp
c002432b:	57                   	push   edi
c002432c:	56                   	push   esi
c002432d:	53                   	push   ebx
c002432e:	83 ec 20             	sub    esp,0x20
c0024331:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024335:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024339:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002433d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024341:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024345:	6a 01                	push   0x1
c0024347:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002434e:	50                   	push   eax
c002434f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024355:	e8 04 ed ff ff       	call   c002305e <IDE::enableIRQs(unsigned char, bool)>
c002435a:	5e                   	pop    esi
c002435b:	58                   	pop    eax
c002435c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024363:	50                   	push   eax
c0024364:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002436a:	e8 bd ea ff ff       	call   c0022e2c <IDE::prepareInterrupt(unsigned char)>
c002436f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024372:	e8 63 ff ff ff       	call   c00242da <ATAPI::readyForCommand()>
c0024377:	83 c4 10             	add    esp,0x10
c002437a:	84 c0                	test   al,al
c002437c:	75 0a                	jne    c0024388 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002437e:	bb 01 00 00 00       	mov    ebx,0x1
c0024383:	e9 57 02 00 00       	jmp    c00245df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024388:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002438e:	c1 e0 04             	shl    eax,0x4
c0024391:	0f b6 c0             	movzx  eax,al
c0024394:	50                   	push   eax
c0024395:	6a 06                	push   0x6
c0024397:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002439e:	50                   	push   eax
c002439f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243a5:	e8 a8 ea ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243aa:	6a 00                	push   0x0
c00243ac:	6a 01                	push   0x1
c00243ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243b5:	50                   	push   eax
c00243b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243bc:	e8 91 ea ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c1:	83 c4 20             	add    esp,0x20
c00243c4:	0f b6 c3             	movzx  eax,bl
c00243c7:	0f b6 df             	movzx  ebx,bh
c00243ca:	50                   	push   eax
c00243cb:	6a 04                	push   0x4
c00243cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243d4:	50                   	push   eax
c00243d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243db:	e8 72 ea ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243e0:	53                   	push   ebx
c00243e1:	6a 05                	push   0x5
c00243e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243ea:	50                   	push   eax
c00243eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243f1:	e8 5c ea ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243f6:	83 c4 20             	add    esp,0x20
c00243f9:	68 a0 00 00 00       	push   0xa0
c00243fe:	6a 07                	push   0x7
c0024400:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024407:	50                   	push   eax
c0024408:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002440e:	e8 3f ea ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024413:	83 c4 0c             	add    esp,0xc
c0024416:	6a 01                	push   0x1
c0024418:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002441f:	50                   	push   eax
c0024420:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024426:	e8 c9 f4 ff ff       	call   c00238f4 <IDE::polling(unsigned char, unsigned int)>
c002442b:	83 c4 10             	add    esp,0x10
c002442e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024434:	84 c0                	test   al,al
c0024436:	74 23                	je     c002445b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024438:	0f b6 d8             	movzx  ebx,al
c002443b:	0f b6 d2             	movzx  edx,dl
c002443e:	53                   	push   ebx
c002443f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024446:	50                   	push   eax
c0024447:	52                   	push   edx
c0024448:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002444e:	e8 f1 f3 ff ff       	call   c0023844 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024453:	83 c4 10             	add    esp,0x10
c0024456:	e9 84 01 00 00       	jmp    c00245df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002445b:	0f b6 d2             	movzx  edx,dl
c002445e:	53                   	push   ebx
c002445f:	53                   	push   ebx
c0024460:	52                   	push   edx
c0024461:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024467:	e8 d4 e9 ff ff       	call   c0022e40 <IDE::getBase(unsigned char)>
c002446c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024470:	b9 06 00 00 00       	mov    ecx,0x6
c0024475:	89 c2                	mov    edx,eax
c0024477:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002447a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002447e:	83 c4 10             	add    esp,0x10
c0024481:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024487:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002448e:	85 db                	test   ebx,ebx
c0024490:	0f 84 ec 00 00 00    	je     c0024582 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024496:	51                   	push   ecx
c0024497:	51                   	push   ecx
c0024498:	52                   	push   edx
c0024499:	50                   	push   eax
c002449a:	e8 21 eb ff ff       	call   c0022fc0 <IDE::waitInterrupt(unsigned char)>
c002449f:	83 c4 10             	add    esp,0x10
c00244a2:	84 c0                	test   al,al
c00244a4:	0f 84 d4 fe ff ff    	je     c002437e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00244aa:	56                   	push   esi
c00244ab:	56                   	push   esi
c00244ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244b3:	50                   	push   eax
c00244b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ba:	e8 6d e9 ff ff       	call   c0022e2c <IDE::prepareInterrupt(unsigned char)>
c00244bf:	83 c4 0c             	add    esp,0xc
c00244c2:	6a 04                	push   0x4
c00244c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244cb:	50                   	push   eax
c00244cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d2:	e8 3b ea ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00244d7:	83 c4 0c             	add    esp,0xc
c00244da:	89 c6                	mov    esi,eax
c00244dc:	6a 05                	push   0x5
c00244de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244e5:	50                   	push   eax
c00244e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ec:	e8 21 ea ff ff       	call   c0022f12 <IDE::read(unsigned char, unsigned char)>
c00244f1:	89 f1                	mov    ecx,esi
c00244f3:	0f b6 c0             	movzx  eax,al
c00244f6:	0f b6 f1             	movzx  esi,cl
c00244f9:	c1 e0 08             	shl    eax,0x8
c00244fc:	09 c6                	or     esi,eax
c00244fe:	d1 fe                	sar    esi,1
c0024500:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024504:	83 c4 10             	add    esp,0x10
c0024507:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002450c:	74 41                	je     c002454f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002450e:	31 c9                	xor    ecx,ecx
c0024510:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024516:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002451d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024521:	75 0a                	jne    c002452d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024523:	01 c9                	add    ecx,ecx
c0024525:	01 cd                	add    ebp,ecx
c0024527:	4b                   	dec    ebx
c0024528:	e9 54 ff ff ff       	jmp    c0024481 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002452d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024532:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024536:	51                   	push   ecx
c0024537:	51                   	push   ecx
c0024538:	52                   	push   edx
c0024539:	50                   	push   eax
c002453a:	e8 01 e9 ff ff       	call   c0022e40 <IDE::getBase(unsigned char)>
c002453f:	89 c2                	mov    edx,eax
c0024541:	89 f0                	mov    eax,esi
c0024543:	66 ef                	out    dx,ax
c0024545:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024549:	83 c4 10             	add    esp,0x10
c002454c:	41                   	inc    ecx
c002454d:	eb c1                	jmp    c0024510 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002454f:	31 f6                	xor    esi,esi
c0024551:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024557:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002455e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024562:	75 06                	jne    c002456a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024564:	01 f6                	add    esi,esi
c0024566:	01 f5                	add    ebp,esi
c0024568:	eb bd                	jmp    c0024527 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002456a:	51                   	push   ecx
c002456b:	51                   	push   ecx
c002456c:	52                   	push   edx
c002456d:	50                   	push   eax
c002456e:	e8 cd e8 ff ff       	call   c0022e40 <IDE::getBase(unsigned char)>
c0024573:	89 c2                	mov    edx,eax
c0024575:	66 ed                	in     ax,dx
c0024577:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002457c:	83 c4 10             	add    esp,0x10
c002457f:	46                   	inc    esi
c0024580:	eb cf                	jmp    c0024551 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024582:	51                   	push   ecx
c0024583:	51                   	push   ecx
c0024584:	52                   	push   edx
c0024585:	50                   	push   eax
c0024586:	e8 35 ea ff ff       	call   c0022fc0 <IDE::waitInterrupt(unsigned char)>
c002458b:	83 c4 10             	add    esp,0x10
c002458e:	84 c0                	test   al,al
c0024590:	0f 84 e8 fd ff ff    	je     c002437e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024596:	bb a0 86 01 00       	mov    ebx,0x186a0
c002459b:	52                   	push   edx
c002459c:	52                   	push   edx
c002459d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a4:	50                   	push   eax
c00245a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ab:	e8 7c e8 ff ff       	call   c0022e2c <IDE::prepareInterrupt(unsigned char)>
c00245b0:	83 c4 10             	add    esp,0x10
c00245b3:	50                   	push   eax
c00245b4:	50                   	push   eax
c00245b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245bc:	50                   	push   eax
c00245bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245c3:	e8 78 e8 ff ff       	call   c0022e40 <IDE::getBase(unsigned char)>
c00245c8:	8d 50 07             	lea    edx,[eax+0x7]
c00245cb:	ec                   	in     al,dx
c00245cc:	83 c4 10             	add    esp,0x10
c00245cf:	a8 88                	test   al,0x88
c00245d1:	74 0a                	je     c00245dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00245d3:	4b                   	dec    ebx
c00245d4:	75 dd                	jne    c00245b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00245d6:	bb 02 00 00 00       	mov    ebx,0x2
c00245db:	eb 02                	jmp    c00245df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245dd:	31 db                	xor    ebx,ebx
c00245df:	83 c4 1c             	add    esp,0x1c
c00245e2:	89 d8                	mov    eax,ebx
c00245e4:	5b                   	pop    ebx
c00245e5:	5e                   	pop    esi
c00245e6:	5f                   	pop    edi
c00245e7:	5d                   	pop    ebp
c00245e8:	c3                   	ret    
c00245e9:	90                   	nop

c00245ea <ATAPI::diskRemoved()>:
c00245ea:	83 ec 18             	sub    esp,0x18
c00245ed:	68 45 c1 02 c0       	push   0xc002c145
c00245f2:	e8 06 e0 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00245f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00245fb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024602:	83 c4 1c             	add    esp,0x1c
c0024605:	c3                   	ret    

c0024606 <ATAPI::eject()>:
c0024606:	57                   	push   edi
c0024607:	b9 03 00 00 00       	mov    ecx,0x3
c002460c:	53                   	push   ebx
c002460d:	83 ec 14             	sub    esp,0x14
c0024610:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024614:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024618:	fc                   	cld    
c0024619:	31 c0                	xor    eax,eax
c002461b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002461d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024622:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024627:	50                   	push   eax
c0024628:	50                   	push   eax
c0024629:	6a 00                	push   0x0
c002462b:	6a 00                	push   0x0
c002462d:	6a 00                	push   0x0
c002462f:	6a 02                	push   0x2
c0024631:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024635:	50                   	push   eax
c0024636:	53                   	push   ebx
c0024637:	e8 ee fc ff ff       	call   c002432a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002463c:	83 c4 14             	add    esp,0x14
c002463f:	53                   	push   ebx
c0024640:	e8 a5 ff ff ff       	call   c00245ea <ATAPI::diskRemoved()>
c0024645:	83 c4 24             	add    esp,0x24
c0024648:	31 c0                	xor    eax,eax
c002464a:	5b                   	pop    ebx
c002464b:	5f                   	pop    edi
c002464c:	c3                   	ret    
c002464d:	90                   	nop

c002464e <ATAPI::diskInserted()>:
c002464e:	53                   	push   ebx
c002464f:	83 ec 14             	sub    esp,0x14
c0024652:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024656:	68 5c c1 02 c0       	push   0xc002c15c
c002465b:	e8 9d df fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0024660:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024667:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002466a:	e8 65 f8 fe ff       	call   c0013ed4 <PhysicalDisk::startCache()>
c002466f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024673:	83 c4 18             	add    esp,0x18
c0024676:	5b                   	pop    ebx
c0024677:	e9 da 1a ff ff       	jmp    c0016156 <createPartitionsForDisk(PhysicalDisk*)>

c002467c <ATAPI::detectMedia()>:
c002467c:	56                   	push   esi
c002467d:	53                   	push   ebx
c002467e:	83 ec 28             	sub    esp,0x28
c0024681:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024685:	6a 0c                	push   0xc
c0024687:	6a 00                	push   0x0
c0024689:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002468d:	56                   	push   esi
c002468e:	e8 bd c0 fd ff       	call   c0000750 <memset>
c0024693:	58                   	pop    eax
c0024694:	5a                   	pop    edx
c0024695:	6a 00                	push   0x0
c0024697:	6a 00                	push   0x0
c0024699:	6a 00                	push   0x0
c002469b:	6a 00                	push   0x0
c002469d:	56                   	push   esi
c002469e:	53                   	push   ebx
c002469f:	e8 86 fc ff ff       	call   c002432a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246a4:	83 c4 1c             	add    esp,0x1c
c00246a7:	6a 0c                	push   0xc
c00246a9:	6a 00                	push   0x0
c00246ab:	56                   	push   esi
c00246ac:	e8 9f c0 fd ff       	call   c0000750 <memset>
c00246b1:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00246b6:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00246bb:	59                   	pop    ecx
c00246bc:	58                   	pop    eax
c00246bd:	6a 01                	push   0x1
c00246bf:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00246c3:	50                   	push   eax
c00246c4:	6a 00                	push   0x0
c00246c6:	6a 12                	push   0x12
c00246c8:	56                   	push   esi
c00246c9:	53                   	push   ebx
c00246ca:	e8 5b fc ff ff       	call   c002432a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246cf:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00246d3:	83 c4 20             	add    esp,0x20
c00246d6:	83 e0 7f             	and    eax,0x7f
c00246d9:	3c 70                	cmp    al,0x70
c00246db:	74 15                	je     c00246f2 <ATAPI::detectMedia()+0x76>
c00246dd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00246e4:	75 0c                	jne    c00246f2 <ATAPI::detectMedia()+0x76>
c00246e6:	83 ec 0c             	sub    esp,0xc
c00246e9:	53                   	push   ebx
c00246ea:	e8 5f ff ff ff       	call   c002464e <ATAPI::diskInserted()>
c00246ef:	83 c4 10             	add    esp,0x10
c00246f2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00246f6:	83 e0 0f             	and    eax,0xf
c00246f9:	3c 02                	cmp    al,0x2
c00246fb:	75 1b                	jne    c0024718 <ATAPI::detectMedia()+0x9c>
c00246fd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024702:	75 2d                	jne    c0024731 <ATAPI::detectMedia()+0xb5>
c0024704:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002470b:	74 24                	je     c0024731 <ATAPI::detectMedia()+0xb5>
c002470d:	83 ec 0c             	sub    esp,0xc
c0024710:	53                   	push   ebx
c0024711:	e8 d4 fe ff ff       	call   c00245ea <ATAPI::diskRemoved()>
c0024716:	eb 16                	jmp    c002472e <ATAPI::detectMedia()+0xb2>
c0024718:	84 c0                	test   al,al
c002471a:	75 15                	jne    c0024731 <ATAPI::detectMedia()+0xb5>
c002471c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024723:	75 0c                	jne    c0024731 <ATAPI::detectMedia()+0xb5>
c0024725:	83 ec 0c             	sub    esp,0xc
c0024728:	53                   	push   ebx
c0024729:	e8 20 ff ff ff       	call   c002464e <ATAPI::diskInserted()>
c002472e:	83 c4 10             	add    esp,0x10
c0024731:	83 c4 24             	add    esp,0x24
c0024734:	5b                   	pop    ebx
c0024735:	5e                   	pop    esi
c0024736:	c3                   	ret    
c0024737:	90                   	nop

c0024738 <ATAPI::open(int, int, void*)>:
c0024738:	53                   	push   ebx
c0024739:	83 ec 08             	sub    esp,0x8
c002473c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024744:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024748:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002474e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024754:	c1 e0 06             	shl    eax,0x6
c0024757:	01 d0                	add    eax,edx
c0024759:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024760:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024766:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002476d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024777:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002477d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024784:	6a 04                	push   0x4
c0024786:	6a 0c                	push   0xc
c0024788:	51                   	push   ecx
c0024789:	52                   	push   edx
c002478a:	e8 c3 e6 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002478f:	90                   	nop
c0024790:	90                   	nop
c0024791:	6a 00                	push   0x0
c0024793:	6a 0c                	push   0xc
c0024795:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002479c:	50                   	push   eax
c002479d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00247a3:	e8 aa e6 ff ff       	call   c0022e52 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00247af:	83 c4 14             	add    esp,0x14
c00247b2:	53                   	push   ebx
c00247b3:	e8 c4 fe ff ff       	call   c002467c <ATAPI::detectMedia()>
c00247b8:	31 c0                	xor    eax,eax
c00247ba:	83 c4 18             	add    esp,0x18
c00247bd:	5b                   	pop    ebx
c00247be:	c3                   	ret    
c00247bf:	90                   	nop

c00247c0 <ATAPI::read(unsigned long long, int, void*)>:
c00247c0:	55                   	push   ebp
c00247c1:	57                   	push   edi
c00247c2:	56                   	push   esi
c00247c3:	53                   	push   ebx
c00247c4:	83 ec 1c             	sub    esp,0x1c
c00247c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00247cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00247cf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00247d3:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247da:	74 41                	je     c002481d <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00247dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247e0:	b9 03 00 00 00       	mov    ecx,0x3
c00247e5:	fc                   	cld    
c00247e6:	31 c0                	xor    eax,eax
c00247e8:	86 fb                	xchg   bl,bh
c00247ea:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247ec:	c1 c3 10             	rol    ebx,0x10
c00247ef:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00247f4:	89 e8                	mov    eax,ebp
c00247f6:	86 fb                	xchg   bl,bh
c00247f8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00247fc:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024800:	50                   	push   eax
c0024801:	50                   	push   eax
c0024802:	55                   	push   ebp
c0024803:	c1 e5 0b             	shl    ebp,0xb
c0024806:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002480a:	6a 00                	push   0x0
c002480c:	55                   	push   ebp
c002480d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024811:	50                   	push   eax
c0024812:	56                   	push   esi
c0024813:	e8 12 fb ff ff       	call   c002432a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024818:	83 c4 20             	add    esp,0x20
c002481b:	eb 1a                	jmp    c0024837 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002481d:	83 ec 0c             	sub    esp,0xc
c0024820:	56                   	push   esi
c0024821:	e8 56 fe ff ff       	call   c002467c <ATAPI::detectMedia()>
c0024826:	83 c4 10             	add    esp,0x10
c0024829:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024830:	75 aa                	jne    c00247dc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024832:	b8 02 00 00 00       	mov    eax,0x2
c0024837:	83 c4 1c             	add    esp,0x1c
c002483a:	5b                   	pop    ebx
c002483b:	5e                   	pop    esi
c002483c:	5f                   	pop    edi
c002483d:	5d                   	pop    ebp
c002483e:	c3                   	ret    
c002483f:	90                   	nop

c0024840 <SATA::close(int, int, void*)>:
c0024840:	83 ec 0c             	sub    esp,0xc
c0024843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024847:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002484d:	85 c0                	test   eax,eax
c002484f:	74 0c                	je     c002485d <SATA::close(int, int, void*)+0x1d>
c0024851:	83 ec 0c             	sub    esp,0xc
c0024854:	8b 10                	mov    edx,DWORD PTR [eax]
c0024856:	50                   	push   eax
c0024857:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002485a:	83 c4 10             	add    esp,0x10
c002485d:	31 c0                	xor    eax,eax
c002485f:	83 c4 0c             	add    esp,0xc
c0024862:	c3                   	ret    
c0024863:	90                   	nop

c0024864 <SATA::powerSaving(PowerSavingLevel)>:
c0024864:	c3                   	ret    
c0024865:	90                   	nop

c0024866 <SATA::open(int, int, void*)>:
c0024866:	56                   	push   esi
c0024867:	53                   	push   ebx
c0024868:	50                   	push   eax
c0024869:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002486d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024871:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002487b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024881:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002488b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002488f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024899:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002489f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00248a6:	e8 95 b0 fe ff       	call   c000f940 <Phys::allocatePage()>
c00248ab:	89 c6                	mov    esi,eax
c00248ad:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00248b3:	81 c6 00 10 00 00    	add    esi,0x1000
c00248b9:	e8 82 b0 fe ff       	call   c000f940 <Phys::allocatePage()>
c00248be:	39 c6                	cmp    esi,eax
c00248c0:	74 10                	je     c00248d2 <SATA::open(int, int, void*)+0x6c>
c00248c2:	83 ec 0c             	sub    esp,0xc
c00248c5:	68 84 c0 02 c0       	push   0xc002c084
c00248ca:	e8 9a 54 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00248cf:	83 c4 10             	add    esp,0x10
c00248d2:	83 ec 0c             	sub    esp,0xc
c00248d5:	6a 02                	push   0x2
c00248d7:	e8 e9 c8 fe ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c00248dc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248e2:	6a 03                	push   0x3
c00248e4:	50                   	push   eax
c00248e5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00248eb:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c00248f1:	e8 8c d0 fe ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c00248f6:	83 c4 14             	add    esp,0x14
c00248f9:	53                   	push   ebx
c00248fa:	e8 d5 f5 fe ff       	call   c0013ed4 <PhysicalDisk::startCache()>
c00248ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024902:	e8 4f 18 ff ff       	call   c0016156 <createPartitionsForDisk(PhysicalDisk*)>
c0024907:	83 c4 14             	add    esp,0x14
c002490a:	31 c0                	xor    eax,eax
c002490c:	5b                   	pop    ebx
c002490d:	5e                   	pop    esi
c002490e:	c3                   	ret    
c002490f:	90                   	nop

c0024910 <SATA::SATA()>:
c0024910:	83 ec 0c             	sub    esp,0xc
c0024913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024917:	83 ec 04             	sub    esp,0x4
c002491a:	68 00 02 00 00       	push   0x200
c002491f:	68 98 c0 02 c0       	push   0xc002c098
c0024924:	50                   	push   eax
c0024925:	e8 42 f5 fe ff       	call   c0013e6c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002492a:	83 c4 10             	add    esp,0x10
c002492d:	ba 08 c1 02 c0       	mov    edx,0xc002c108
c0024932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024936:	89 10                	mov    DWORD PTR [eax],edx
c0024938:	90                   	nop
c0024939:	83 c4 0c             	add    esp,0xc
c002493c:	c3                   	ret    
c002493d:	90                   	nop

c002493e <SATA::access(unsigned long long, int, void*, bool)>:
c002493e:	55                   	push   ebp
c002493f:	57                   	push   edi
c0024940:	56                   	push   esi
c0024941:	53                   	push   ebx
c0024942:	83 ec 2c             	sub    esp,0x2c
c0024945:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024949:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002494d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024951:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024955:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024959:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002495e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024962:	7e 10                	jle    c0024974 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024964:	83 ec 0c             	sub    esp,0xc
c0024967:	68 a8 c0 02 c0       	push   0xc002c0a8
c002496c:	e8 f8 53 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0024971:	83 c4 10             	add    esp,0x10
c0024974:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002497a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024980:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024986:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002498a:	89 d0                	mov    eax,edx
c002498c:	c1 e0 07             	shl    eax,0x7
c002498f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024993:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002499d:	51                   	push   ecx
c002499e:	8d 42 02             	lea    eax,[edx+0x2]
c00249a1:	51                   	push   ecx
c00249a2:	c1 e0 07             	shl    eax,0x7
c00249a5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00249a9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00249ad:	50                   	push   eax
c00249ae:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00249b4:	e8 1b f0 ff ff       	call   c00239d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00249b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00249bd:	83 c4 10             	add    esp,0x10
c00249c0:	b8 01 00 00 00       	mov    eax,0x1
c00249c5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00249ca:	0f 84 cb 01 00 00    	je     c0024b9b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00249d0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00249d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249d8:	c1 e0 09             	shl    eax,0x9
c00249db:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00249e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00249e4:	74 0e                	je     c00249f4 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00249e6:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00249ec:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00249f0:	89 c1                	mov    ecx,eax
c00249f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00249f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00249f8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00249fe:	8d 42 02             	lea    eax,[edx+0x2]
c0024a01:	c1 e0 07             	shl    eax,0x7
c0024a04:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a0a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024a10:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024a16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024a1a:	c1 e1 05             	shl    ecx,0x5
c0024a1d:	01 c8                	add    eax,ecx
c0024a1f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024a23:	83 e1 01             	and    ecx,0x1
c0024a26:	89 ce                	mov    esi,ecx
c0024a28:	8a 08                	mov    cl,BYTE PTR [eax]
c0024a2a:	c1 e6 06             	shl    esi,0x6
c0024a2d:	83 e1 bf             	and    ecx,0xffffffbf
c0024a30:	09 f1                	or     ecx,esi
c0024a32:	88 08                	mov    BYTE PTR [eax],cl
c0024a34:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024a36:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024a3c:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024a42:	89 08                	mov    DWORD PTR [eax],ecx
c0024a44:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024a4a:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024a50:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024a56:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024a59:	50                   	push   eax
c0024a5a:	68 90 00 00 00       	push   0x90
c0024a5f:	6a 00                	push   0x0
c0024a61:	56                   	push   esi
c0024a62:	e8 e9 bc fd ff       	call   c0000750 <memset>
c0024a67:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a6d:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024a71:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024a77:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024a7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024a7f:	83 c4 10             	add    esp,0x10
c0024a82:	48                   	dec    eax
c0024a83:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024a88:	89 c1                	mov    ecx,eax
c0024a8a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024a90:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a95:	09 c8                	or     eax,ecx
c0024a97:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024a9d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024aa0:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024aa7:	66 25 00 7f          	and    ax,0x7f00
c0024aab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024aaf:	66 0d 27 80          	or     ax,0x8027
c0024ab3:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024ab8:	66 89 06             	mov    WORD PTR [esi],ax
c0024abb:	19 c0                	sbb    eax,eax
c0024abd:	83 e0 f0             	and    eax,0xfffffff0
c0024ac0:	83 c0 35             	add    eax,0x35
c0024ac3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024ac6:	89 e8                	mov    eax,ebp
c0024ac8:	c1 e8 10             	shr    eax,0x10
c0024acb:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024ace:	89 e8                	mov    eax,ebp
c0024ad0:	c1 e8 18             	shr    eax,0x18
c0024ad3:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024ad6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024ada:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ae1:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024ae4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ae8:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024aec:	89 d6                	mov    esi,edx
c0024aee:	31 c0                	xor    eax,eax
c0024af0:	c1 e6 07             	shl    esi,0x7
c0024af3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024af7:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024afd:	80 e1 88             	and    cl,0x88
c0024b00:	74 0a                	je     c0024b0c <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024b02:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024b07:	74 0a                	je     c0024b13 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024b09:	40                   	inc    eax
c0024b0a:	eb eb                	jmp    c0024af7 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024b0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024b11:	75 0a                	jne    c0024b1d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024b13:	83 ec 0c             	sub    esp,0xc
c0024b16:	68 e1 c0 02 c0       	push   0xc002c0e1
c0024b1b:	eb 56                	jmp    c0024b73 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024b1d:	b8 01 00 00 00       	mov    eax,0x1
c0024b22:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024b26:	c1 e2 07             	shl    edx,0x7
c0024b29:	d3 e0                	shl    eax,cl
c0024b2b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024b2f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024b35:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024b3b:	85 c8                	test   eax,ecx
c0024b3d:	74 20                	je     c0024b5f <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024b3f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024b45:	0f ba e1 1e          	bt     ecx,0x1e
c0024b49:	73 ea                	jae    c0024b35 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024b4b:	83 ec 0c             	sub    esp,0xc
c0024b4e:	68 ef c0 02 c0       	push   0xc002c0ef
c0024b53:	e8 11 52 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0024b58:	83 c4 10             	add    esp,0x10
c0024b5b:	31 c0                	xor    eax,eax
c0024b5d:	eb 3c                	jmp    c0024b9b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b5f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024b65:	0f ba e0 1e          	bt     eax,0x1e
c0024b69:	73 17                	jae    c0024b82 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024b6b:	83 ec 0c             	sub    esp,0xc
c0024b6e:	68 ef c0 02 c0       	push   0xc002c0ef
c0024b73:	e8 f1 51 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0024b78:	83 c4 10             	add    esp,0x10
c0024b7b:	b8 01 00 00 00       	mov    eax,0x1
c0024b80:	eb 19                	jmp    c0024b9b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b82:	31 c0                	xor    eax,eax
c0024b84:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b89:	75 10                	jne    c0024b9b <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b8b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024b91:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024b95:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024b99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b9b:	83 c4 2c             	add    esp,0x2c
c0024b9e:	5b                   	pop    ebx
c0024b9f:	5e                   	pop    esi
c0024ba0:	5f                   	pop    edi
c0024ba1:	5d                   	pop    ebp
c0024ba2:	c3                   	ret    
c0024ba3:	90                   	nop

c0024ba4 <SATA::read(unsigned long long, int, void*)>:
c0024ba4:	57                   	push   edi
c0024ba5:	b8 04 00 00 00       	mov    eax,0x4
c0024baa:	56                   	push   esi
c0024bab:	53                   	push   ebx
c0024bac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024bb4:	8d 7a ff             	lea    edi,[edx-0x1]
c0024bb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024bbb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024bbf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024bc5:	77 25                	ja     c0024bec <SATA::read(unsigned long long, int, void*)+0x48>
c0024bc7:	b8 06 00 00 00       	mov    eax,0x6
c0024bcc:	85 f6                	test   esi,esi
c0024bce:	74 1c                	je     c0024bec <SATA::read(unsigned long long, int, void*)+0x48>
c0024bd0:	50                   	push   eax
c0024bd1:	50                   	push   eax
c0024bd2:	6a 00                	push   0x0
c0024bd4:	56                   	push   esi
c0024bd5:	52                   	push   edx
c0024bd6:	53                   	push   ebx
c0024bd7:	51                   	push   ecx
c0024bd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024bdc:	e8 5d fd ff ff       	call   c002493e <SATA::access(unsigned long long, int, void*, bool)>
c0024be1:	83 c4 20             	add    esp,0x20
c0024be4:	85 c0                	test   eax,eax
c0024be6:	0f 95 c0             	setne  al
c0024be9:	0f b6 c0             	movzx  eax,al
c0024bec:	5b                   	pop    ebx
c0024bed:	5e                   	pop    esi
c0024bee:	5f                   	pop    edi
c0024bef:	c3                   	ret    

c0024bf0 <SATA::write(unsigned long long, int, void*)>:
c0024bf0:	55                   	push   ebp
c0024bf1:	b8 04 00 00 00       	mov    eax,0x4
c0024bf6:	57                   	push   edi
c0024bf7:	56                   	push   esi
c0024bf8:	53                   	push   ebx
c0024bf9:	83 ec 0c             	sub    esp,0xc
c0024bfc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024c04:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024c07:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024c0b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024c0f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024c15:	77 3d                	ja     c0024c54 <SATA::write(unsigned long long, int, void*)+0x64>
c0024c17:	b8 06 00 00 00       	mov    eax,0x6
c0024c1c:	85 ed                	test   ebp,ebp
c0024c1e:	74 34                	je     c0024c54 <SATA::write(unsigned long long, int, void*)+0x64>
c0024c20:	c1 e3 09             	shl    ebx,0x9
c0024c23:	01 eb                	add    ebx,ebp
c0024c25:	89 d6                	mov    esi,edx
c0024c27:	89 cf                	mov    edi,ecx
c0024c29:	83 c6 01             	add    esi,0x1
c0024c2c:	83 d7 00             	adc    edi,0x0
c0024c2f:	50                   	push   eax
c0024c30:	50                   	push   eax
c0024c31:	6a 01                	push   0x1
c0024c33:	55                   	push   ebp
c0024c34:	81 c5 00 02 00 00    	add    ebp,0x200
c0024c3a:	6a 01                	push   0x1
c0024c3c:	51                   	push   ecx
c0024c3d:	52                   	push   edx
c0024c3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c42:	e8 f7 fc ff ff       	call   c002493e <SATA::access(unsigned long long, int, void*, bool)>
c0024c47:	83 c4 20             	add    esp,0x20
c0024c4a:	89 f2                	mov    edx,esi
c0024c4c:	89 f9                	mov    ecx,edi
c0024c4e:	39 dd                	cmp    ebp,ebx
c0024c50:	75 d3                	jne    c0024c25 <SATA::write(unsigned long long, int, void*)+0x35>
c0024c52:	31 c0                	xor    eax,eax
c0024c54:	83 c4 0c             	add    esp,0xc
c0024c57:	5b                   	pop    ebx
c0024c58:	5e                   	pop    esi
c0024c59:	5f                   	pop    edi
c0024c5a:	5d                   	pop    ebp
c0024c5b:	c3                   	ret    

c0024c5c <SATAPI::write(unsigned long long, int, void*)>:
c0024c5c:	b8 03 00 00 00       	mov    eax,0x3
c0024c61:	c3                   	ret    

c0024c62 <SATAPI::close(int, int, void*)>:
c0024c62:	83 ec 0c             	sub    esp,0xc
c0024c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c6f:	85 c0                	test   eax,eax
c0024c71:	74 0c                	je     c0024c7f <SATAPI::close(int, int, void*)+0x1d>
c0024c73:	83 ec 0c             	sub    esp,0xc
c0024c76:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c78:	50                   	push   eax
c0024c79:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c7c:	83 c4 10             	add    esp,0x10
c0024c7f:	31 c0                	xor    eax,eax
c0024c81:	83 c4 0c             	add    esp,0xc
c0024c84:	c3                   	ret    
c0024c85:	90                   	nop

c0024c86 <SATAPI::SATAPI()>:
c0024c86:	83 ec 0c             	sub    esp,0xc
c0024c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c8d:	83 ec 04             	sub    esp,0x4
c0024c90:	68 00 08 00 00       	push   0x800
c0024c95:	68 38 c1 02 c0       	push   0xc002c138
c0024c9a:	50                   	push   eax
c0024c9b:	e8 cc f1 fe ff       	call   c0013e6c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ca0:	83 c4 10             	add    esp,0x10
c0024ca3:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0024ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cac:	89 10                	mov    DWORD PTR [eax],edx
c0024cae:	90                   	nop
c0024caf:	83 c4 0c             	add    esp,0xc
c0024cb2:	c3                   	ret    
c0024cb3:	90                   	nop

c0024cb4 <SATAPI::diskRemoved()>:
c0024cb4:	83 ec 18             	sub    esp,0x18
c0024cb7:	68 44 c1 02 c0       	push   0xc002c144
c0024cbc:	e8 3c d9 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0024cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cc5:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024ccc:	83 c4 1c             	add    esp,0x1c
c0024ccf:	c3                   	ret    

c0024cd0 <SATAPI::diskInserted()>:
c0024cd0:	53                   	push   ebx
c0024cd1:	83 ec 14             	sub    esp,0x14
c0024cd4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024cd8:	68 5b c1 02 c0       	push   0xc002c15b
c0024cdd:	e8 1b d9 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0024ce2:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024ce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024cec:	e8 e3 f1 fe ff       	call   c0013ed4 <PhysicalDisk::startCache()>
c0024cf1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024cf5:	83 c4 18             	add    esp,0x18
c0024cf8:	5b                   	pop    ebx
c0024cf9:	e9 58 14 ff ff       	jmp    c0016156 <createPartitionsForDisk(PhysicalDisk*)>

c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cfe:	55                   	push   ebp
c0024cff:	57                   	push   edi
c0024d00:	56                   	push   esi
c0024d01:	53                   	push   ebx
c0024d02:	83 ec 34             	sub    esp,0x34
c0024d05:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024d09:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024d0d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024d11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024d15:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024d19:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d1f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d29:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d33:	c1 e0 07             	shl    eax,0x7
c0024d36:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024d3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d3e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024d4c:	8d 58 02             	lea    ebx,[eax+0x2]
c0024d4f:	c1 e3 07             	shl    ebx,0x7
c0024d52:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024d56:	53                   	push   ebx
c0024d57:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024d5d:	e8 72 ec ff ff       	call   c00239d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024d66:	83 c4 10             	add    esp,0x10
c0024d69:	b8 01 00 00 00       	mov    eax,0x1
c0024d6e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024d73:	0f 84 85 01 00 00    	je     c0024efe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024d79:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024d7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d81:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d87:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d91:	c1 e1 05             	shl    ecx,0x5
c0024d94:	01 c8                	add    eax,ecx
c0024d96:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d98:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d9e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024da4:	89 08                	mov    DWORD PTR [eax],ecx
c0024da6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dac:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024db2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024db8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024dbb:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024dbe:	50                   	push   eax
c0024dbf:	68 90 00 00 00       	push   0x90
c0024dc4:	6a 00                	push   0x0
c0024dc6:	53                   	push   ebx
c0024dc7:	e8 84 b9 fd ff       	call   c0000750 <memset>
c0024dcc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024dd0:	b9 0c 00 00 00       	mov    ecx,0xc
c0024dd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024dd7:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024ddd:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024de1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024de7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024deb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024def:	48                   	dec    eax
c0024df0:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024df5:	89 c1                	mov    ecx,eax
c0024df7:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dfd:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e02:	09 c8                	or     eax,ecx
c0024e04:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e0a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e0d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024e14:	66 25 00 7f          	and    ax,0x7f00
c0024e18:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024e1c:	66 0d 27 80          	or     ax,0x8027
c0024e20:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024e24:	66 89 03             	mov    WORD PTR [ebx],ax
c0024e27:	89 d0                	mov    eax,edx
c0024e29:	c1 ea 18             	shr    edx,0x18
c0024e2c:	c1 e8 10             	shr    eax,0x10
c0024e2f:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024e32:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024e35:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024e39:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024e3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e40:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024e43:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024e47:	83 c4 10             	add    esp,0x10
c0024e4a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024e4e:	31 c0                	xor    eax,eax
c0024e50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024e54:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024e5a:	80 e2 88             	and    dl,0x88
c0024e5d:	74 0a                	je     c0024e69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e5f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e64:	74 0a                	je     c0024e70 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024e66:	40                   	inc    eax
c0024e67:	eb eb                	jmp    c0024e54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024e69:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e6e:	75 0f                	jne    c0024e7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024e70:	83 ec 0c             	sub    esp,0xc
c0024e73:	68 e1 c0 02 c0       	push   0xc002c0e1
c0024e78:	e8 ec 4e ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0024e7d:	eb 3f                	jmp    c0024ebe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024e7f:	ba 01 00 00 00       	mov    edx,0x1
c0024e84:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e8c:	d3 e2                	shl    edx,cl
c0024e8e:	c1 e0 07             	shl    eax,0x7
c0024e91:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024e97:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024e9b:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024ea1:	85 ca                	test   edx,ecx
c0024ea3:	74 23                	je     c0024ec8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024ea5:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024eab:	0f ba e1 1e          	bt     ecx,0x1e
c0024eaf:	73 ea                	jae    c0024e9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024eb1:	83 ec 0c             	sub    esp,0xc
c0024eb4:	68 73 c1 02 c0       	push   0xc002c173
c0024eb9:	e8 3f d7 fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0024ebe:	83 c4 10             	add    esp,0x10
c0024ec1:	b8 01 00 00 00       	mov    eax,0x1
c0024ec6:	eb 36                	jmp    c0024efe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024ec8:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024ece:	0f ba e0 1e          	bt     eax,0x1e
c0024ed2:	73 0a                	jae    c0024ede <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024ed4:	83 ec 0c             	sub    esp,0xc
c0024ed7:	68 86 c1 02 c0       	push   0xc002c186
c0024edc:	eb db                	jmp    c0024eb9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024ede:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024ee3:	74 17                	je     c0024efc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024ee5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024eea:	74 10                	je     c0024efc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024eec:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024ef2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024ef6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024efa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024efc:	31 c0                	xor    eax,eax
c0024efe:	83 c4 2c             	add    esp,0x2c
c0024f01:	5b                   	pop    ebx
c0024f02:	5e                   	pop    esi
c0024f03:	5f                   	pop    edi
c0024f04:	5d                   	pop    ebp
c0024f05:	c3                   	ret    

c0024f06 <SATAPI::eject()>:
c0024f06:	57                   	push   edi
c0024f07:	b9 03 00 00 00       	mov    ecx,0x3
c0024f0c:	53                   	push   ebx
c0024f0d:	83 ec 14             	sub    esp,0x14
c0024f10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024f14:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024f18:	fc                   	cld    
c0024f19:	31 c0                	xor    eax,eax
c0024f1b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024f1d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024f22:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024f27:	50                   	push   eax
c0024f28:	6a 00                	push   0x0
c0024f2a:	6a 00                	push   0x0
c0024f2c:	6a 00                	push   0x0
c0024f2e:	6a 00                	push   0x0
c0024f30:	6a 02                	push   0x2
c0024f32:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024f36:	50                   	push   eax
c0024f37:	53                   	push   ebx
c0024f38:	e8 c1 fd ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f3d:	83 c4 14             	add    esp,0x14
c0024f40:	53                   	push   ebx
c0024f41:	e8 6e fd ff ff       	call   c0024cb4 <SATAPI::diskRemoved()>
c0024f46:	83 c4 24             	add    esp,0x24
c0024f49:	31 c0                	xor    eax,eax
c0024f4b:	5b                   	pop    ebx
c0024f4c:	5f                   	pop    edi
c0024f4d:	c3                   	ret    

c0024f4e <SATAPI::detectMedia()>:
c0024f4e:	56                   	push   esi
c0024f4f:	53                   	push   ebx
c0024f50:	83 ec 28             	sub    esp,0x28
c0024f53:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f57:	6a 0c                	push   0xc
c0024f59:	6a 00                	push   0x0
c0024f5b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f5f:	56                   	push   esi
c0024f60:	e8 eb b7 fd ff       	call   c0000750 <memset>
c0024f65:	83 c4 0c             	add    esp,0xc
c0024f68:	6a 00                	push   0x0
c0024f6a:	6a 00                	push   0x0
c0024f6c:	6a 00                	push   0x0
c0024f6e:	6a 00                	push   0x0
c0024f70:	6a 00                	push   0x0
c0024f72:	56                   	push   esi
c0024f73:	53                   	push   ebx
c0024f74:	e8 85 fd ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f79:	83 c4 1c             	add    esp,0x1c
c0024f7c:	6a 0c                	push   0xc
c0024f7e:	6a 00                	push   0x0
c0024f80:	56                   	push   esi
c0024f81:	e8 ca b7 fd ff       	call   c0000750 <memset>
c0024f86:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f8b:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f90:	83 c4 0c             	add    esp,0xc
c0024f93:	6a 01                	push   0x1
c0024f95:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f99:	50                   	push   eax
c0024f9a:	6a 00                	push   0x0
c0024f9c:	6a 00                	push   0x0
c0024f9e:	6a 12                	push   0x12
c0024fa0:	56                   	push   esi
c0024fa1:	53                   	push   ebx
c0024fa2:	e8 57 fd ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024fa7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024fab:	83 c4 20             	add    esp,0x20
c0024fae:	83 e0 7f             	and    eax,0x7f
c0024fb1:	3c 70                	cmp    al,0x70
c0024fb3:	74 15                	je     c0024fca <SATAPI::detectMedia()+0x7c>
c0024fb5:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fbc:	75 0c                	jne    c0024fca <SATAPI::detectMedia()+0x7c>
c0024fbe:	83 ec 0c             	sub    esp,0xc
c0024fc1:	53                   	push   ebx
c0024fc2:	e8 09 fd ff ff       	call   c0024cd0 <SATAPI::diskInserted()>
c0024fc7:	83 c4 10             	add    esp,0x10
c0024fca:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024fce:	83 e0 0f             	and    eax,0xf
c0024fd1:	3c 02                	cmp    al,0x2
c0024fd3:	75 1b                	jne    c0024ff0 <SATAPI::detectMedia()+0xa2>
c0024fd5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024fda:	75 2d                	jne    c0025009 <SATAPI::detectMedia()+0xbb>
c0024fdc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fe3:	74 24                	je     c0025009 <SATAPI::detectMedia()+0xbb>
c0024fe5:	83 ec 0c             	sub    esp,0xc
c0024fe8:	53                   	push   ebx
c0024fe9:	e8 c6 fc ff ff       	call   c0024cb4 <SATAPI::diskRemoved()>
c0024fee:	eb 16                	jmp    c0025006 <SATAPI::detectMedia()+0xb8>
c0024ff0:	84 c0                	test   al,al
c0024ff2:	75 15                	jne    c0025009 <SATAPI::detectMedia()+0xbb>
c0024ff4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ffb:	75 0c                	jne    c0025009 <SATAPI::detectMedia()+0xbb>
c0024ffd:	83 ec 0c             	sub    esp,0xc
c0025000:	53                   	push   ebx
c0025001:	e8 ca fc ff ff       	call   c0024cd0 <SATAPI::diskInserted()>
c0025006:	83 c4 10             	add    esp,0x10
c0025009:	83 c4 24             	add    esp,0x24
c002500c:	5b                   	pop    ebx
c002500d:	5e                   	pop    esi
c002500e:	c3                   	ret    
c002500f:	90                   	nop

c0025010 <SATAPI::open(int, int, void*)>:
c0025010:	56                   	push   esi
c0025011:	53                   	push   ebx
c0025012:	50                   	push   eax
c0025013:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025017:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002501b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025025:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002502b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025035:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025039:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025043:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025049:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025050:	e8 eb a8 fe ff       	call   c000f940 <Phys::allocatePage()>
c0025055:	89 c6                	mov    esi,eax
c0025057:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002505d:	81 c6 00 10 00 00    	add    esi,0x1000
c0025063:	e8 d8 a8 fe ff       	call   c000f940 <Phys::allocatePage()>
c0025068:	39 c6                	cmp    esi,eax
c002506a:	74 10                	je     c002507c <SATAPI::open(int, int, void*)+0x6c>
c002506c:	83 ec 0c             	sub    esp,0xc
c002506f:	68 9b c1 02 c0       	push   0xc002c19b
c0025074:	e8 f0 4c ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0025079:	83 c4 10             	add    esp,0x10
c002507c:	83 ec 0c             	sub    esp,0xc
c002507f:	6a 02                	push   0x2
c0025081:	e8 3f c1 fe ff       	call   c00111c5 <Virt::allocateKernelVirtualPages(int)>
c0025086:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002508c:	6a 03                	push   0x3
c002508e:	50                   	push   eax
c002508f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025095:	ff 35 f0 d8 02 c0    	push   DWORD PTR ds:0xc002d8f0
c002509b:	e8 e2 c8 fe ff       	call   c0011982 <VAS::mapPage(unsigned long, unsigned long, int)>
c00250a0:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00250a7:	83 c4 14             	add    esp,0x14
c00250aa:	53                   	push   ebx
c00250ab:	e8 9e fe ff ff       	call   c0024f4e <SATAPI::detectMedia()>
c00250b0:	83 c4 14             	add    esp,0x14
c00250b3:	31 c0                	xor    eax,eax
c00250b5:	5b                   	pop    ebx
c00250b6:	5e                   	pop    esi
c00250b7:	c3                   	ret    

c00250b8 <SATAPI::read(unsigned long long, int, void*)>:
c00250b8:	55                   	push   ebp
c00250b9:	57                   	push   edi
c00250ba:	56                   	push   esi
c00250bb:	53                   	push   ebx
c00250bc:	83 ec 1c             	sub    esp,0x1c
c00250bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00250c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00250cb:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250d2:	74 19                	je     c00250ed <SATAPI::read(unsigned long long, int, void*)+0x35>
c00250d4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00250d9:	7e 2e                	jle    c0025109 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250db:	83 ec 0c             	sub    esp,0xc
c00250de:	68 b1 c1 02 c0       	push   0xc002c1b1
c00250e3:	e8 81 4c ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00250e8:	83 c4 10             	add    esp,0x10
c00250eb:	eb 1c                	jmp    c0025109 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250ed:	83 ec 0c             	sub    esp,0xc
c00250f0:	55                   	push   ebp
c00250f1:	e8 58 fe ff ff       	call   c0024f4e <SATAPI::detectMedia()>
c00250f6:	83 c4 10             	add    esp,0x10
c00250f9:	b8 02 00 00 00       	mov    eax,0x2
c00250fe:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025105:	75 cd                	jne    c00250d4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025107:	eb 49                	jmp    c0025152 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025109:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002510d:	b9 03 00 00 00       	mov    ecx,0x3
c0025112:	fc                   	cld    
c0025113:	31 c0                	xor    eax,eax
c0025115:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025117:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002511c:	89 d8                	mov    eax,ebx
c002511e:	86 e0                	xchg   al,ah
c0025120:	c1 c0 10             	rol    eax,0x10
c0025123:	86 e0                	xchg   al,ah
c0025125:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025129:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002512d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025131:	50                   	push   eax
c0025132:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025136:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002513a:	56                   	push   esi
c002513b:	53                   	push   ebx
c002513c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025140:	c1 e0 0b             	shl    eax,0xb
c0025143:	50                   	push   eax
c0025144:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025148:	50                   	push   eax
c0025149:	55                   	push   ebp
c002514a:	e8 af fb ff ff       	call   c0024cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002514f:	83 c4 20             	add    esp,0x20
c0025152:	83 c4 1c             	add    esp,0x1c
c0025155:	5b                   	pop    ebx
c0025156:	5e                   	pop    esi
c0025157:	5f                   	pop    edi
c0025158:	5d                   	pop    ebp
c0025159:	c3                   	ret    

c002515a <AVX::open(int, int, void*)>:
c002515a:	83 ec 0c             	sub    esp,0xc
c002515d:	e8 46 11 00 00       	call   c00262a8 <avxInit>
c0025162:	b8 00 00 00 00       	mov    eax,0x0
c0025167:	83 c4 0c             	add    esp,0xc
c002516a:	c3                   	ret    
c002516b:	90                   	nop

c002516c <AVX::close(int, int, void*)>:
c002516c:	83 ec 0c             	sub    esp,0xc
c002516f:	e8 35 11 00 00       	call   c00262a9 <avxClose>
c0025174:	b8 00 00 00 00       	mov    eax,0x0
c0025179:	83 c4 0c             	add    esp,0xc
c002517c:	c3                   	ret    
c002517d:	90                   	nop

c002517e <AVX::available()>:
c002517e:	83 ec 0c             	sub    esp,0xc
c0025181:	e8 1a 11 00 00       	call   c00262a0 <avxDetect>
c0025186:	85 c0                	test   eax,eax
c0025188:	0f 95 c0             	setne  al
c002518b:	83 c4 0c             	add    esp,0xc
c002518e:	c3                   	ret    
c002518f:	90                   	nop

c0025190 <AVX::save(void*)>:
c0025190:	83 ec 0c             	sub    esp,0xc
c0025193:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025197:	83 ec 0c             	sub    esp,0xc
c002519a:	50                   	push   eax
c002519b:	e8 06 11 00 00       	call   c00262a6 <avxSave>
c00251a0:	83 c4 10             	add    esp,0x10
c00251a3:	90                   	nop
c00251a4:	83 c4 0c             	add    esp,0xc
c00251a7:	c3                   	ret    

c00251a8 <AVX::load(void*)>:
c00251a8:	83 ec 0c             	sub    esp,0xc
c00251ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251af:	83 ec 0c             	sub    esp,0xc
c00251b2:	50                   	push   eax
c00251b3:	e8 ef 10 00 00       	call   c00262a7 <avxLoad>
c00251b8:	83 c4 10             	add    esp,0x10
c00251bb:	90                   	nop
c00251bc:	83 c4 0c             	add    esp,0xc
c00251bf:	c3                   	ret    

c00251c0 <AVX::AVX()>:
c00251c0:	83 ec 0c             	sub    esp,0xc
c00251c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251c7:	83 ec 08             	sub    esp,0x8
c00251ca:	68 14 c2 02 c0       	push   0xc002c214
c00251cf:	50                   	push   eax
c00251d0:	e8 75 ed fe ff       	call   c0013f4a <FPU::FPU(char const*)>
c00251d5:	83 c4 10             	add    esp,0x10
c00251d8:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c00251dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e1:	89 10                	mov    DWORD PTR [eax],edx
c00251e3:	90                   	nop
c00251e4:	83 c4 0c             	add    esp,0xc
c00251e7:	c3                   	ret    

c00251e8 <MMX::available()>:
c00251e8:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00251ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251f3:	83 e0 20             	and    eax,0x20
c00251f6:	84 c0                	test   al,al
c00251f8:	0f 95 c0             	setne  al
c00251fb:	c3                   	ret    

c00251fc <MMX::open(int, int, void*)>:
c00251fc:	83 ec 0c             	sub    esp,0xc
c00251ff:	e8 2e 11 00 00       	call   c0026332 <x87Init>
c0025204:	b8 00 00 00 00       	mov    eax,0x0
c0025209:	83 c4 0c             	add    esp,0xc
c002520c:	c3                   	ret    
c002520d:	90                   	nop

c002520e <MMX::close(int, int, void*)>:
c002520e:	83 ec 0c             	sub    esp,0xc
c0025211:	e8 36 11 00 00       	call   c002634c <x87Close>
c0025216:	b8 00 00 00 00       	mov    eax,0x0
c002521b:	83 c4 0c             	add    esp,0xc
c002521e:	c3                   	ret    
c002521f:	90                   	nop

c0025220 <MMX::save(void*)>:
c0025220:	83 ec 0c             	sub    esp,0xc
c0025223:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025227:	83 ec 0c             	sub    esp,0xc
c002522a:	50                   	push   eax
c002522b:	e8 f1 10 00 00       	call   c0026321 <x87Save>
c0025230:	83 c4 10             	add    esp,0x10
c0025233:	90                   	nop
c0025234:	83 c4 0c             	add    esp,0xc
c0025237:	c3                   	ret    

c0025238 <MMX::load(void*)>:
c0025238:	83 ec 0c             	sub    esp,0xc
c002523b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002523f:	83 ec 0c             	sub    esp,0xc
c0025242:	50                   	push   eax
c0025243:	e8 e2 10 00 00       	call   c002632a <x87Load>
c0025248:	83 c4 10             	add    esp,0x10
c002524b:	90                   	nop
c002524c:	83 c4 0c             	add    esp,0xc
c002524f:	c3                   	ret    

c0025250 <MMX::MMX()>:
c0025250:	83 ec 0c             	sub    esp,0xc
c0025253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025257:	83 ec 08             	sub    esp,0x8
c002525a:	68 54 c2 02 c0       	push   0xc002c254
c002525f:	50                   	push   eax
c0025260:	e8 e5 ec fe ff       	call   c0013f4a <FPU::FPU(char const*)>
c0025265:	83 c4 10             	add    esp,0x10
c0025268:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c002526d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025271:	89 10                	mov    DWORD PTR [eax],edx
c0025273:	90                   	nop
c0025274:	83 c4 0c             	add    esp,0xc
c0025277:	c3                   	ret    

c0025278 <SSE::open(int, int, void*)>:
c0025278:	83 ec 0c             	sub    esp,0xc
c002527b:	e8 64 10 00 00       	call   c00262e4 <sseInit>
c0025280:	b8 00 00 00 00       	mov    eax,0x0
c0025285:	83 c4 0c             	add    esp,0xc
c0025288:	c3                   	ret    
c0025289:	90                   	nop

c002528a <SSE::close(int, int, void*)>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	e8 62 10 00 00       	call   c00262f4 <sseClose>
c0025292:	b8 00 00 00 00       	mov    eax,0x0
c0025297:	83 c4 0c             	add    esp,0xc
c002529a:	c3                   	ret    
c002529b:	90                   	nop

c002529c <SSE::available()>:
c002529c:	83 ec 1c             	sub    esp,0x1c
c002529f:	e8 1c 10 00 00       	call   c00262c0 <absolutelyNoChanceInHell>
c00252a4:	85 c0                	test   eax,eax
c00252a6:	0f 95 c0             	setne  al
c00252a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00252b1:	83 c4 1c             	add    esp,0x1c
c00252b4:	c3                   	ret    
c00252b5:	90                   	nop

c00252b6 <SSE::save(void*)>:
c00252b6:	83 ec 0c             	sub    esp,0xc
c00252b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252bd:	83 ec 0c             	sub    esp,0xc
c00252c0:	50                   	push   eax
c00252c1:	e8 12 10 00 00       	call   c00262d8 <sseSave>
c00252c6:	83 c4 10             	add    esp,0x10
c00252c9:	90                   	nop
c00252ca:	83 c4 0c             	add    esp,0xc
c00252cd:	c3                   	ret    

c00252ce <SSE::load(void*)>:
c00252ce:	83 ec 0c             	sub    esp,0xc
c00252d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252d5:	83 ec 0c             	sub    esp,0xc
c00252d8:	50                   	push   eax
c00252d9:	e8 00 10 00 00       	call   c00262de <sseLoad>
c00252de:	83 c4 10             	add    esp,0x10
c00252e1:	90                   	nop
c00252e2:	83 c4 0c             	add    esp,0xc
c00252e5:	c3                   	ret    

c00252e6 <SSE::SSE()>:
c00252e6:	83 ec 0c             	sub    esp,0xc
c00252e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252ed:	83 ec 08             	sub    esp,0x8
c00252f0:	68 94 c2 02 c0       	push   0xc002c294
c00252f5:	50                   	push   eax
c00252f6:	e8 4f ec fe ff       	call   c0013f4a <FPU::FPU(char const*)>
c00252fb:	83 c4 10             	add    esp,0x10
c00252fe:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0025303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025307:	89 10                	mov    DWORD PTR [eax],edx
c0025309:	90                   	nop
c002530a:	83 c4 0c             	add    esp,0xc
c002530d:	c3                   	ret    

c002530e <x87::open(int, int, void*)>:
c002530e:	83 ec 0c             	sub    esp,0xc
c0025311:	e8 1c 10 00 00       	call   c0026332 <x87Init>
c0025316:	b8 00 00 00 00       	mov    eax,0x0
c002531b:	83 c4 0c             	add    esp,0xc
c002531e:	c3                   	ret    
c002531f:	90                   	nop

c0025320 <x87::close(int, int, void*)>:
c0025320:	83 ec 0c             	sub    esp,0xc
c0025323:	e8 24 10 00 00       	call   c002634c <x87Close>
c0025328:	b8 00 00 00 00       	mov    eax,0x0
c002532d:	83 c4 0c             	add    esp,0xc
c0025330:	c3                   	ret    
c0025331:	90                   	nop

c0025332 <x87::available()>:
c0025332:	83 ec 0c             	sub    esp,0xc
c0025335:	e8 cc 0f 00 00       	call   c0026306 <x87Detect>
c002533a:	85 c0                	test   eax,eax
c002533c:	0f 95 c0             	setne  al
c002533f:	83 c4 0c             	add    esp,0xc
c0025342:	c3                   	ret    
c0025343:	90                   	nop

c0025344 <x87::save(void*)>:
c0025344:	83 ec 0c             	sub    esp,0xc
c0025347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002534b:	83 ec 0c             	sub    esp,0xc
c002534e:	50                   	push   eax
c002534f:	e8 cd 0f 00 00       	call   c0026321 <x87Save>
c0025354:	83 c4 10             	add    esp,0x10
c0025357:	90                   	nop
c0025358:	83 c4 0c             	add    esp,0xc
c002535b:	c3                   	ret    

c002535c <x87::load(void*)>:
c002535c:	83 ec 0c             	sub    esp,0xc
c002535f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025363:	83 ec 0c             	sub    esp,0xc
c0025366:	50                   	push   eax
c0025367:	e8 be 0f 00 00       	call   c002632a <x87Load>
c002536c:	83 c4 10             	add    esp,0x10
c002536f:	90                   	nop
c0025370:	83 c4 0c             	add    esp,0xc
c0025373:	c3                   	ret    

c0025374 <x87::x87()>:
c0025374:	83 ec 0c             	sub    esp,0xc
c0025377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537b:	83 ec 08             	sub    esp,0x8
c002537e:	68 d4 c2 02 c0       	push   0xc002c2d4
c0025383:	50                   	push   eax
c0025384:	e8 c1 eb fe ff       	call   c0013f4a <FPU::FPU(char const*)>
c0025389:	83 c4 10             	add    esp,0x10
c002538c:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0025391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025395:	89 10                	mov    DWORD PTR [eax],edx
c0025397:	90                   	nop
c0025398:	83 c4 0c             	add    esp,0xc
c002539b:	c3                   	ret    

c002539c <APIC::disable()>:
c002539c:	90                   	nop
c002539d:	c3                   	ret    

c002539e <APIC::close(int, int, void*)>:
c002539e:	55                   	push   ebp
c002539f:	89 e5                	mov    ebp,esp
c00253a1:	83 ec 08             	sub    esp,0x8
c00253a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00253a9:	83 c0 3c             	add    eax,0x3c
c00253ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00253ae:	83 ec 0c             	sub    esp,0xc
c00253b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253b4:	ff d0                	call   eax
c00253b6:	83 c4 10             	add    esp,0x10
c00253b9:	b8 00 00 00 00       	mov    eax,0x0
c00253be:	c9                   	leave  
c00253bf:	c3                   	ret    

c00253c0 <IOAPIC::close(int, int, void*)>:
c00253c0:	b8 00 00 00 00       	mov    eax,0x0
c00253c5:	c3                   	ret    

c00253c6 <APIC::io_wait()>:
c00253c6:	eb 00                	jmp    c00253c8 <APIC::io_wait()+0x2>
c00253c8:	eb 00                	jmp    c00253ca <APIC::io_wait()+0x4>
c00253ca:	90                   	nop
c00253cb:	c3                   	ret    

c00253cc <APIC::getBase()>:
c00253cc:	55                   	push   ebp
c00253cd:	89 e5                	mov    ebp,esp
c00253cf:	83 ec 18             	sub    esp,0x18
c00253d2:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00253d7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00253dd:	83 e0 08             	and    eax,0x8
c00253e0:	84 c0                	test   al,al
c00253e2:	75 07                	jne    c00253eb <APIC::getBase()+0x1f>
c00253e4:	b8 00 00 00 00       	mov    eax,0x0
c00253e9:	eb 21                	jmp    c002540c <APIC::getBase()+0x40>
c00253eb:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00253f0:	83 ec 08             	sub    esp,0x8
c00253f3:	6a 1b                	push   0x1b
c00253f5:	50                   	push   eax
c00253f6:	e8 45 97 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00253fb:	83 c4 10             	add    esp,0x10
c00253fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025401:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025404:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025407:	25 00 f0 ff ff       	and    eax,0xfffff000
c002540c:	c9                   	leave  
c002540d:	c3                   	ret    

c002540e <APIC::eoi(unsigned char)>:
c002540e:	55                   	push   ebp
c002540f:	89 e5                	mov    ebp,esp
c0025411:	83 ec 28             	sub    esp,0x28
c0025414:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025417:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002541a:	83 ec 0c             	sub    esp,0xc
c002541d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025420:	e8 a7 ff ff ff       	call   c00253cc <APIC::getBase()>
c0025425:	83 c4 10             	add    esp,0x10
c0025428:	05 b0 00 00 00       	add    eax,0xb0
c002542d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025430:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025433:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025439:	90                   	nop
c002543a:	c9                   	leave  
c002543b:	c3                   	ret    

c002543c <APIC::open(int, int, void*)>:
c002543c:	55                   	push   ebp
c002543d:	89 e5                	mov    ebp,esp
c002543f:	57                   	push   edi
c0025440:	56                   	push   esi
c0025441:	53                   	push   ebx
c0025442:	83 ec 2c             	sub    esp,0x2c
c0025445:	83 ec 0c             	sub    esp,0xc
c0025448:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002544b:	e8 7c ff ff ff       	call   c00253cc <APIC::getBase()>
c0025450:	83 c4 10             	add    esp,0x10
c0025453:	89 c2                	mov    edx,eax
c0025455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025458:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002545e:	0f b6 f8             	movzx  edi,al
c0025461:	89 d0                	mov    eax,edx
c0025463:	ba 00 00 00 00       	mov    edx,0x0
c0025468:	89 c1                	mov    ecx,eax
c002546a:	80 e5 ff             	and    ch,0xff
c002546d:	89 cb                	mov    ebx,ecx
c002546f:	0f b6 f2             	movzx  esi,dl
c0025472:	89 d8                	mov    eax,ebx
c0025474:	89 f2                	mov    edx,esi
c0025476:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025479:	8d 5f 08             	lea    ebx,[edi+0x8]
c002547c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025480:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025484:	83 e0 00             	and    eax,0x0
c0025487:	09 d0                	or     eax,edx
c0025489:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002548d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025490:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025496:	8d 50 01             	lea    edx,[eax+0x1]
c0025499:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002549c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00254a2:	0f b6 d0             	movzx  edx,al
c00254a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00254a8:	83 c2 08             	add    edx,0x8
c00254ab:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00254af:	0f b6 c9             	movzx  ecx,cl
c00254b2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00254b8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00254bc:	83 ec 0c             	sub    esp,0xc
c00254bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254c2:	e8 05 ff ff ff       	call   c00253cc <APIC::getBase()>
c00254c7:	83 c4 10             	add    esp,0x10
c00254ca:	05 f0 00 00 00       	add    eax,0xf0
c00254cf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00254d2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00254d7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00254da:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00254e1:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254eb:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254ee:	89 10                	mov    DWORD PTR [eax],edx
c00254f0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254f7:	a1 50 00 03 c0       	mov    eax,ds:0xc0030050
c00254fc:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00254ff:	7d 7c                	jge    c002557d <APIC::open(int, int, void*)+0x141>
c0025501:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025504:	8b 04 85 60 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcffa0]
c002550b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002550e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025511:	8b 04 85 60 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcffa0]
c0025518:	c1 e8 08             	shr    eax,0x8
c002551b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002551f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025522:	8b 04 85 60 00 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcffa0]
c0025529:	c1 e8 18             	shr    eax,0x18
c002552c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002552f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025533:	75 40                	jne    c0025575 <APIC::open(int, int, void*)+0x139>
c0025535:	83 ec 0c             	sub    esp,0xc
c0025538:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002553b:	e8 8c fe ff ff       	call   c00253cc <APIC::getBase()>
c0025540:	83 c4 10             	add    esp,0x10
c0025543:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025547:	75 07                	jne    c0025550 <APIC::open(int, int, void*)+0x114>
c0025549:	ba 60 03 00 00       	mov    edx,0x360
c002554e:	eb 05                	jmp    c0025555 <APIC::open(int, int, void*)+0x119>
c0025550:	ba 50 03 00 00       	mov    edx,0x350
c0025555:	01 d0                	add    eax,edx
c0025557:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002555a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002555d:	8b 00                	mov    eax,DWORD PTR [eax]
c002555f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025562:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025569:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002556d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025570:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025573:	89 10                	mov    DWORD PTR [eax],edx
c0025575:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025578:	e9 7a ff ff ff       	jmp    c00254f7 <APIC::open(int, int, void*)+0xbb>
c002557d:	b8 00 00 00 00       	mov    eax,0x0
c0025582:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025585:	5b                   	pop    ebx
c0025586:	5e                   	pop    esi
c0025587:	5f                   	pop    edi
c0025588:	5d                   	pop    ebp
c0025589:	c3                   	ret    

c002558a <IOAPIC::IOAPIC()>:
c002558a:	83 ec 0c             	sub    esp,0xc
c002558d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025591:	83 ec 08             	sub    esp,0x8
c0025594:	68 14 c3 02 c0       	push   0xc002c314
c0025599:	50                   	push   eax
c002559a:	e8 9b e6 fe ff       	call   c0013c3a <Device::Device(char const*)>
c002559f:	83 c4 10             	add    esp,0x10
c00255a2:	ba 3c c4 02 c0       	mov    edx,0xc002c43c
c00255a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ab:	89 10                	mov    DWORD PTR [eax],edx
c00255ad:	90                   	nop
c00255ae:	83 c4 0c             	add    esp,0xc
c00255b1:	c3                   	ret    

c00255b2 <APIC::APIC()>:
c00255b2:	53                   	push   ebx
c00255b3:	83 ec 18             	sub    esp,0x18
c00255b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255ba:	83 ec 08             	sub    esp,0x8
c00255bd:	68 1c c3 02 c0       	push   0xc002c31c
c00255c2:	50                   	push   eax
c00255c3:	e8 dc ed fe ff       	call   c00143a4 <InterruptController::InterruptController(char const*)>
c00255c8:	83 c4 10             	add    esp,0x10
c00255cb:	ba f4 c3 02 c0       	mov    edx,0xc002c3f4
c00255d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00255d4:	89 10                	mov    DWORD PTR [eax],edx
c00255d6:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c00255db:	83 f0 01             	xor    eax,0x1
c00255de:	84 c0                	test   al,al
c00255e0:	0f 84 a1 00 00 00    	je     c0025687 <APIC::APIC()+0xd5>
c00255e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255eb:	a0 00 01 03 c0       	mov    al,ds:0xc0030100
c00255f0:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255f4:	0f 83 86 00 00 00    	jae    c0025680 <APIC::APIC()+0xce>
c00255fa:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025602:	83 ec 0c             	sub    esp,0xc
c0025605:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025609:	e8 8e 9f fe ff       	call   c000f59c <malloc>
c002560e:	83 c4 10             	add    esp,0x10
c0025611:	89 c3                	mov    ebx,eax
c0025613:	83 ec 0c             	sub    esp,0xc
c0025616:	53                   	push   ebx
c0025617:	e8 6e ff ff ff       	call   c002558a <IOAPIC::IOAPIC()>
c002561c:	83 c4 10             	add    esp,0x10
c002561f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025623:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025628:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002562c:	89 14 85 00 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce500],edx
c0025633:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0025638:	40                   	inc    eax
c0025639:	a3 e0 1a 03 c0       	mov    ds:0xc0031ae0,eax
c002563e:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0025643:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025649:	83 ec 08             	sub    esp,0x8
c002564c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025650:	50                   	push   eax
c0025651:	e8 e0 e3 fe ff       	call   c0013a36 <Device::addChild(Device*)>
c0025656:	83 c4 10             	add    esp,0x10
c0025659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002565d:	8b 00                	mov    eax,DWORD PTR [eax]
c002565f:	83 c0 08             	add    eax,0x8
c0025662:	8b 00                	mov    eax,DWORD PTR [eax]
c0025664:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025669:	6a 00                	push   0x0
c002566b:	6a 00                	push   0x0
c002566d:	52                   	push   edx
c002566e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025672:	ff d0                	call   eax
c0025674:	83 c4 10             	add    esp,0x10
c0025677:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002567b:	e9 6b ff ff ff       	jmp    c00255eb <APIC::APIC()+0x39>
c0025680:	c6 05 20 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b20,0x1
c0025687:	90                   	nop
c0025688:	83 c4 18             	add    esp,0x18
c002568b:	5b                   	pop    ebx
c002568c:	c3                   	ret    
c002568d:	90                   	nop

c002568e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002568e:	55                   	push   ebp
c002568f:	89 e5                	mov    ebp,esp
c0025691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025694:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002569a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002569d:	72 1d                	jb     c00256bc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00256a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ab:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00256b1:	01 d0                	add    eax,edx
c00256b3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00256b6:	73 04                	jae    c00256bc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00256b8:	b0 01                	mov    al,0x1
c00256ba:	eb 02                	jmp    c00256be <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00256bc:	b0 00                	mov    al,0x0
c00256be:	5d                   	pop    ebp
c00256bf:	c3                   	ret    

c00256c0 <IOAPIC::read(int)>:
c00256c0:	55                   	push   ebp
c00256c1:	89 e5                	mov    ebp,esp
c00256c3:	83 ec 10             	sub    esp,0x10
c00256c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256c9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00256cf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00256d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00256d5:	0f b6 d0             	movzx  edx,al
c00256d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256db:	89 10                	mov    DWORD PTR [eax],edx
c00256dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00256e0:	83 c0 10             	add    eax,0x10
c00256e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00256e5:	c9                   	leave  
c00256e6:	c3                   	ret    
c00256e7:	90                   	nop

c00256e8 <IOAPIC::open(int, int, void*)>:
c00256e8:	55                   	push   ebp
c00256e9:	89 e5                	mov    ebp,esp
c00256eb:	57                   	push   edi
c00256ec:	56                   	push   esi
c00256ed:	53                   	push   ebx
c00256ee:	83 ec 0c             	sub    esp,0xc
c00256f1:	83 ec 0c             	sub    esp,0xc
c00256f4:	68 47 c3 02 c0       	push   0xc002c347
c00256f9:	e8 ff ce fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c00256fe:	83 c4 10             	add    esp,0x10
c0025701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025704:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025707:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002570d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025710:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025716:	8b 14 85 40 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfec0]
c002571d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025720:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025729:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002572f:	8b 14 85 c0 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfe40]
c0025736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025739:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002573f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025742:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002574b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025751:	0f b6 f8             	movzx  edi,al
c0025754:	89 d0                	mov    eax,edx
c0025756:	ba 00 00 00 00       	mov    edx,0x0
c002575b:	89 c1                	mov    ecx,eax
c002575d:	80 e5 ff             	and    ch,0xff
c0025760:	89 cb                	mov    ebx,ecx
c0025762:	0f b6 f2             	movzx  esi,dl
c0025765:	89 d8                	mov    eax,ebx
c0025767:	89 f2                	mov    edx,esi
c0025769:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002576c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002576f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025773:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025777:	83 e0 00             	and    eax,0x0
c002577a:	09 d0                	or     eax,edx
c002577c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025783:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025789:	8d 50 01             	lea    edx,[eax+0x1]
c002578c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002578f:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025795:	0f b6 d0             	movzx  edx,al
c0025798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002579b:	83 c2 08             	add    edx,0x8
c002579e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00257a2:	0f b6 c9             	movzx  ecx,cl
c00257a5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00257ab:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00257af:	83 ec 08             	sub    esp,0x8
c00257b2:	6a 01                	push   0x1
c00257b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257b7:	e8 04 ff ff ff       	call   c00256c0 <IOAPIC::read(int)>
c00257bc:	83 c4 10             	add    esp,0x10
c00257bf:	c1 f8 10             	sar    eax,0x10
c00257c2:	0f b6 c0             	movzx  eax,al
c00257c5:	8d 50 01             	lea    edx,[eax+0x1]
c00257c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257cb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00257d1:	b8 00 00 00 00       	mov    eax,0x0
c00257d6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257d9:	5b                   	pop    ebx
c00257da:	5e                   	pop    esi
c00257db:	5f                   	pop    edi
c00257dc:	5d                   	pop    ebp
c00257dd:	c3                   	ret    

c00257de <IOAPIC::write(int, int)>:
c00257de:	55                   	push   ebp
c00257df:	89 e5                	mov    ebp,esp
c00257e1:	83 ec 10             	sub    esp,0x10
c00257e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257e7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257ed:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257f3:	0f b6 d0             	movzx  edx,al
c00257f6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257f9:	89 10                	mov    DWORD PTR [eax],edx
c00257fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257fe:	8d 50 10             	lea    edx,[eax+0x10]
c0025801:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025804:	89 02                	mov    DWORD PTR [edx],eax
c0025806:	90                   	nop
c0025807:	c9                   	leave  
c0025808:	c3                   	ret    
c0025809:	90                   	nop

c002580a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002580a:	55                   	push   ebp
c002580b:	89 e5                	mov    ebp,esp
c002580d:	53                   	push   ebx
c002580e:	83 ec 2c             	sub    esp,0x2c
c0025811:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025814:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025817:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002581a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002581d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025820:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025823:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025826:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025829:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002582c:	88 d8                	mov    al,bl
c002582e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025831:	88 c8                	mov    al,cl
c0025833:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025836:	88 d0                	mov    al,dl
c0025838:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002583b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002583f:	83 c0 08             	add    eax,0x8
c0025842:	01 c0                	add    eax,eax
c0025844:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025847:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002584b:	83 c0 08             	add    eax,0x8
c002584e:	01 c0                	add    eax,eax
c0025850:	40                   	inc    eax
c0025851:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025854:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025857:	50                   	push   eax
c0025858:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002585b:	e8 60 fe ff ff       	call   c00256c0 <IOAPIC::read(int)>
c0025860:	83 c4 08             	add    esp,0x8
c0025863:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025866:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002586d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025870:	c1 e0 18             	shl    eax,0x18
c0025873:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025876:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025879:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002587c:	52                   	push   edx
c002587d:	50                   	push   eax
c002587e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025881:	e8 58 ff ff ff       	call   c00257de <IOAPIC::write(int, int)>
c0025886:	83 c4 0c             	add    esp,0xc
c0025889:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002588c:	50                   	push   eax
c002588d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025890:	e8 2b fe ff ff       	call   c00256c0 <IOAPIC::read(int)>
c0025895:	83 c4 08             	add    esp,0x8
c0025898:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002589b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00258a2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00258a9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00258b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258b4:	74 09                	je     c00258bf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00258b6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00258bd:	eb 07                	jmp    c00258c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00258bf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00258c6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00258ca:	74 09                	je     c00258d5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00258cc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00258d3:	eb 07                	jmp    c00258dc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00258d5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00258dc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00258e3:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00258e7:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258ea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258f0:	52                   	push   edx
c00258f1:	50                   	push   eax
c00258f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258f5:	e8 e4 fe ff ff       	call   c00257de <IOAPIC::write(int, int)>
c00258fa:	83 c4 0c             	add    esp,0xc
c00258fd:	90                   	nop
c00258fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025901:	c9                   	leave  
c0025902:	c3                   	ret    
c0025903:	90                   	nop

c0025904 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025904:	55                   	push   ebp
c0025905:	89 e5                	mov    ebp,esp
c0025907:	57                   	push   edi
c0025908:	56                   	push   esi
c0025909:	53                   	push   ebx
c002590a:	83 ec 2c             	sub    esp,0x2c
c002590d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025910:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025913:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025917:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002591b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002591f:	74 5a                	je     c002597b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025921:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025925:	7f 44                	jg     c002596b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025927:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002592a:	05 e0 c9 02 c0       	add    eax,0xc002c9e0
c002592f:	8a 00                	mov    al,BYTE PTR [eax]
c0025931:	0f b6 c0             	movzx  eax,al
c0025934:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025937:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002593a:	66 8b 84 00 e0 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcff20]
c0025942:	0f b7 c0             	movzx  eax,ax
c0025945:	83 e0 02             	and    eax,0x2
c0025948:	85 c0                	test   eax,eax
c002594a:	74 04                	je     c0025950 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c002594c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025950:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025953:	66 8b 84 00 e0 00 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcff20]
c002595b:	0f b7 c0             	movzx  eax,ax
c002595e:	83 e0 08             	and    eax,0x8
c0025961:	85 c0                	test   eax,eax
c0025963:	74 16                	je     c002597b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025965:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025969:	eb 10                	jmp    c002597b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002596b:	83 ec 0c             	sub    esp,0xc
c002596e:	68 58 c3 02 c0       	push   0xc002c358
c0025973:	e8 f1 43 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0025978:	83 c4 10             	add    esp,0x10
c002597b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002597f:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c0025984:	83 ec 08             	sub    esp,0x8
c0025987:	50                   	push   eax
c0025988:	68 90 c3 02 c0       	push   0xc002c390
c002598d:	e8 6b cc fe ff       	call   c00125fd <Dbg::kprintf(char const*, ...)>
c0025992:	83 c4 10             	add    esp,0x10
c0025995:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002599c:	a1 e0 1a 03 c0       	mov    eax,ds:0xc0031ae0
c00259a1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00259a4:	7d 67                	jge    c0025a0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259a6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259a9:	8b 04 85 00 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce500]
c00259b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259b3:	83 ec 08             	sub    esp,0x8
c00259b6:	52                   	push   edx
c00259b7:	50                   	push   eax
c00259b8:	e8 d1 fc ff ff       	call   c002568e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00259bd:	83 c4 10             	add    esp,0x10
c00259c0:	84 c0                	test   al,al
c00259c2:	74 44                	je     c0025a08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00259c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00259c7:	8b 1c 85 00 1b 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce500]
c00259ce:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00259d2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259d5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00259d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259dc:	83 c0 20             	add    eax,0x20
c00259df:	0f b6 f0             	movzx  esi,al
c00259e2:	b8 00 00 00 00       	mov    eax,0x0
c00259e7:	99                   	cdq    
c00259e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259eb:	0f b6 c9             	movzx  ecx,cl
c00259ee:	83 ec 04             	sub    esp,0x4
c00259f1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259f4:	57                   	push   edi
c00259f5:	56                   	push   esi
c00259f6:	52                   	push   edx
c00259f7:	50                   	push   eax
c00259f8:	51                   	push   ecx
c00259f9:	53                   	push   ebx
c00259fa:	e8 0b fe ff ff       	call   c002580a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00259ff:	83 c4 20             	add    esp,0x20
c0025a02:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025a06:	eb 05                	jmp    c0025a0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a08:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025a0b:	eb 8f                	jmp    c002599c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025a0d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025a10:	83 f0 01             	xor    eax,0x1
c0025a13:	84 c0                	test   al,al
c0025a15:	74 10                	je     c0025a27 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025a17:	83 ec 0c             	sub    esp,0xc
c0025a1a:	68 a7 c3 02 c0       	push   0xc002c3a7
c0025a1f:	e8 45 43 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0025a24:	83 c4 10             	add    esp,0x10
c0025a27:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025a2b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025a32:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025a36:	7f 65                	jg     c0025a9d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a3b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a3e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a45:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a48:	01 ca                	add    edx,ecx
c0025a4a:	83 c2 54             	add    edx,0x54
c0025a4d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a51:	85 c0                	test   eax,eax
c0025a53:	75 43                	jne    c0025a98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a58:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a62:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a65:	01 ca                	add    edx,ecx
c0025a67:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a6d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a77:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a7e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a81:	01 ca                	add    edx,ecx
c0025a83:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a89:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a8c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a93:	83 e8 20             	sub    eax,0x20
c0025a96:	eb 1a                	jmp    c0025ab2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a98:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a9b:	eb 95                	jmp    c0025a32 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a9d:	83 ec 0c             	sub    esp,0xc
c0025aa0:	68 b4 c3 02 c0       	push   0xc002c3b4
c0025aa5:	e8 bf 42 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0025aaa:	83 c4 10             	add    esp,0x10
c0025aad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025ab2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ab5:	5b                   	pop    ebx
c0025ab6:	5e                   	pop    esi
c0025ab7:	5f                   	pop    edi
c0025ab8:	5d                   	pop    ebp
c0025ab9:	c3                   	ret    

c0025aba <PIC::disable()>:
c0025aba:	55                   	push   ebp
c0025abb:	89 e5                	mov    ebp,esp
c0025abd:	83 ec 10             	sub    esp,0x10
c0025ac0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ac6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025aca:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025acd:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ad1:	ee                   	out    dx,al
c0025ad2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025ad8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025adc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025adf:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025ae3:	ee                   	out    dx,al
c0025ae4:	90                   	nop
c0025ae5:	c9                   	leave  
c0025ae6:	c3                   	ret    
c0025ae7:	90                   	nop

c0025ae8 <PIC::close(int, int, void*)>:
c0025ae8:	55                   	push   ebp
c0025ae9:	89 e5                	mov    ebp,esp
c0025aeb:	83 ec 08             	sub    esp,0x8
c0025aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0025af3:	83 c0 3c             	add    eax,0x3c
c0025af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0025af8:	83 ec 0c             	sub    esp,0xc
c0025afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025afe:	ff d0                	call   eax
c0025b00:	83 c4 10             	add    esp,0x10
c0025b03:	b8 00 00 00 00       	mov    eax,0x0
c0025b08:	c9                   	leave  
c0025b09:	c3                   	ret    

c0025b0a <PIC::PIC()>:
c0025b0a:	83 ec 0c             	sub    esp,0xc
c0025b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b11:	83 ec 08             	sub    esp,0x8
c0025b14:	68 60 c4 02 c0       	push   0xc002c460
c0025b19:	50                   	push   eax
c0025b1a:	e8 85 e8 fe ff       	call   c00143a4 <InterruptController::InterruptController(char const*)>
c0025b1f:	83 c4 10             	add    esp,0x10
c0025b22:	ba 8c c4 02 c0       	mov    edx,0xc002c48c
c0025b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b2b:	89 10                	mov    DWORD PTR [eax],edx
c0025b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b31:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b37:	0f b6 d0             	movzx  edx,al
c0025b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b3e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b4f:	0f b6 d0             	movzx  edx,al
c0025b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b56:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b5f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b65:	8d 50 01             	lea    edx,[eax+0x1]
c0025b68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b6c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b72:	0f b6 d0             	movzx  edx,al
c0025b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b79:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b7d:	83 e1 3f             	and    ecx,0x3f
c0025b80:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b8e:	0f b6 d0             	movzx  edx,al
c0025b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b95:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ba0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ba6:	0f b6 d0             	movzx  edx,al
c0025ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bad:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025bbc:	8d 50 01             	lea    edx,[eax+0x1]
c0025bbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025bc3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025bc9:	0f b6 d0             	movzx  edx,al
c0025bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025bd4:	83 e1 3f             	and    ecx,0x3f
c0025bd7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025bdb:	90                   	nop
c0025bdc:	83 c4 0c             	add    esp,0xc
c0025bdf:	c3                   	ret    

c0025be0 <PIC::ioWait()>:
c0025be0:	eb 00                	jmp    c0025be2 <PIC::ioWait()+0x2>
c0025be2:	eb 00                	jmp    c0025be4 <PIC::ioWait()+0x4>
c0025be4:	90                   	nop
c0025be5:	c3                   	ret    

c0025be6 <PIC::getIRQReg(int)>:
c0025be6:	55                   	push   ebp
c0025be7:	89 e5                	mov    ebp,esp
c0025be9:	83 ec 10             	sub    esp,0x10
c0025bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bef:	0f b6 c0             	movzx  eax,al
c0025bf2:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bf8:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bfb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bfe:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c02:	ee                   	out    dx,al
c0025c03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c06:	0f b6 c0             	movzx  eax,al
c0025c09:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c0f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025c12:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c15:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c19:	ee                   	out    dx,al
c0025c1a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025c20:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025c24:	89 c2                	mov    edx,eax
c0025c26:	ec                   	in     al,dx
c0025c27:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025c2a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c2d:	0f b6 c0             	movzx  eax,al
c0025c30:	c1 e0 08             	shl    eax,0x8
c0025c33:	89 c1                	mov    ecx,eax
c0025c35:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025c3b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025c3f:	89 c2                	mov    edx,eax
c0025c41:	ec                   	in     al,dx
c0025c42:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025c45:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c48:	0f b6 c0             	movzx  eax,al
c0025c4b:	09 c8                	or     eax,ecx
c0025c4d:	c9                   	leave  
c0025c4e:	c3                   	ret    
c0025c4f:	90                   	nop

c0025c50 <PIC::eoi(unsigned char)>:
c0025c50:	55                   	push   ebp
c0025c51:	89 e5                	mov    ebp,esp
c0025c53:	83 ec 14             	sub    esp,0x14
c0025c56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c59:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c5c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c60:	75 1e                	jne    c0025c80 <PIC::eoi(unsigned char)+0x30>
c0025c62:	6a 0b                	push   0xb
c0025c64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c67:	e8 7a ff ff ff       	call   c0025be6 <PIC::getIRQReg(int)>
c0025c6c:	83 c4 08             	add    esp,0x8
c0025c6f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c73:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c77:	25 80 00 00 00       	and    eax,0x80
c0025c7c:	85 c0                	test   eax,eax
c0025c7e:	74 5f                	je     c0025cdf <PIC::eoi(unsigned char)+0x8f>
c0025c80:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c84:	75 2d                	jne    c0025cb3 <PIC::eoi(unsigned char)+0x63>
c0025c86:	6a 0b                	push   0xb
c0025c88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c8b:	e8 56 ff ff ff       	call   c0025be6 <PIC::getIRQReg(int)>
c0025c90:	83 c4 08             	add    esp,0x8
c0025c93:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c97:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c9a:	66 85 c0             	test   ax,ax
c0025c9d:	78 14                	js     c0025cb3 <PIC::eoi(unsigned char)+0x63>
c0025c9f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025ca5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025ca9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025cac:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025cb0:	ee                   	out    dx,al
c0025cb1:	eb 2d                	jmp    c0025ce0 <PIC::eoi(unsigned char)+0x90>
c0025cb3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025cb7:	76 12                	jbe    c0025ccb <PIC::eoi(unsigned char)+0x7b>
c0025cb9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cbf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025cc3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cc6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025cca:	ee                   	out    dx,al
c0025ccb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cd1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025cd5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cd8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cdc:	ee                   	out    dx,al
c0025cdd:	eb 01                	jmp    c0025ce0 <PIC::eoi(unsigned char)+0x90>
c0025cdf:	90                   	nop
c0025ce0:	c9                   	leave  
c0025ce1:	c3                   	ret    

c0025ce2 <PIC::remap()>:
c0025ce2:	55                   	push   ebp
c0025ce3:	89 e5                	mov    ebp,esp
c0025ce5:	83 ec 48             	sub    esp,0x48
c0025ce8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025cef:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cf6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cfc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025cff:	89 c2                	mov    edx,eax
c0025d01:	ec                   	in     al,dx
c0025d02:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025d05:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025d08:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025d0b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025d11:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025d14:	89 c2                	mov    edx,eax
c0025d16:	ec                   	in     al,dx
c0025d17:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025d1a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025d1d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025d20:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025d26:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025d2a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025d2d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025d30:	ee                   	out    dx,al
c0025d31:	83 ec 0c             	sub    esp,0xc
c0025d34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d37:	e8 a4 fe ff ff       	call   c0025be0 <PIC::ioWait()>
c0025d3c:	83 c4 10             	add    esp,0x10
c0025d3f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025d45:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d49:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d4c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d4f:	ee                   	out    dx,al
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d56:	e8 85 fe ff ff       	call   c0025be0 <PIC::ioWait()>
c0025d5b:	83 c4 10             	add    esp,0x10
c0025d5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d61:	0f b6 c0             	movzx  eax,al
c0025d64:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d6a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d6d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d70:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d73:	ee                   	out    dx,al
c0025d74:	83 ec 0c             	sub    esp,0xc
c0025d77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d7a:	e8 61 fe ff ff       	call   c0025be0 <PIC::ioWait()>
c0025d7f:	83 c4 10             	add    esp,0x10
c0025d82:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d85:	0f b6 c0             	movzx  eax,al
c0025d88:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d8e:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d91:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d94:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d97:	ee                   	out    dx,al
c0025d98:	83 ec 0c             	sub    esp,0xc
c0025d9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d9e:	e8 3d fe ff ff       	call   c0025be0 <PIC::ioWait()>
c0025da3:	83 c4 10             	add    esp,0x10
c0025da6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025dac:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025db0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025db3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025db6:	ee                   	out    dx,al
c0025db7:	83 ec 0c             	sub    esp,0xc
c0025dba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dbd:	e8 1e fe ff ff       	call   c0025be0 <PIC::ioWait()>
c0025dc2:	83 c4 10             	add    esp,0x10
c0025dc5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025dcb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025dcf:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025dd2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025dd5:	ee                   	out    dx,al
c0025dd6:	83 ec 0c             	sub    esp,0xc
c0025dd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ddc:	e8 ff fd ff ff       	call   c0025be0 <PIC::ioWait()>
c0025de1:	83 c4 10             	add    esp,0x10
c0025de4:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025dea:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025dee:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025df1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025df4:	ee                   	out    dx,al
c0025df5:	83 ec 0c             	sub    esp,0xc
c0025df8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dfb:	e8 e0 fd ff ff       	call   c0025be0 <PIC::ioWait()>
c0025e00:	83 c4 10             	add    esp,0x10
c0025e03:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025e09:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025e0d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025e10:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025e13:	ee                   	out    dx,al
c0025e14:	83 ec 0c             	sub    esp,0xc
c0025e17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e1a:	e8 c1 fd ff ff       	call   c0025be0 <PIC::ioWait()>
c0025e1f:	83 c4 10             	add    esp,0x10
c0025e22:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025e26:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025e2c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025e2f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025e32:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025e35:	ee                   	out    dx,al
c0025e36:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025e3a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025e40:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025e43:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025e46:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e49:	ee                   	out    dx,al
c0025e4a:	90                   	nop
c0025e4b:	c9                   	leave  
c0025e4c:	c3                   	ret    
c0025e4d:	90                   	nop

c0025e4e <PIC::open(int, int, void*)>:
c0025e4e:	55                   	push   ebp
c0025e4f:	89 e5                	mov    ebp,esp
c0025e51:	83 ec 18             	sub    esp,0x18
c0025e54:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e5a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e5e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e61:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e65:	ee                   	out    dx,al
c0025e66:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e6c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e70:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e73:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e77:	ee                   	out    dx,al
c0025e78:	83 ec 0c             	sub    esp,0xc
c0025e7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e7e:	e8 5f fe ff ff       	call   c0025ce2 <PIC::remap()>
c0025e83:	83 c4 10             	add    esp,0x10
c0025e86:	b8 00 00 00 00       	mov    eax,0x0
c0025e8b:	c9                   	leave  
c0025e8c:	c3                   	ret    
c0025e8d:	90                   	nop

c0025e8e <APICTimer::close(int, int, void*)>:
c0025e8e:	b8 00 00 00 00       	mov    eax,0x0
c0025e93:	c3                   	ret    

c0025e94 <apicTimerHandler(regs*, void*)>:
c0025e94:	83 ec 0c             	sub    esp,0xc
c0025e97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e9d:	99                   	cdq    
c0025e9e:	52                   	push   edx
c0025e9f:	50                   	push   eax
c0025ea0:	6a 00                	push   0x0
c0025ea2:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025ea7:	e8 98 07 00 00       	call   c0026644 <__udivdi3>
c0025eac:	83 c4 10             	add    esp,0x10
c0025eaf:	83 ec 08             	sub    esp,0x8
c0025eb2:	52                   	push   edx
c0025eb3:	50                   	push   eax
c0025eb4:	e8 42 06 ff ff       	call   c00164fb <timerHandler(unsigned long long)>
c0025eb9:	83 c4 10             	add    esp,0x10
c0025ebc:	90                   	nop
c0025ebd:	83 c4 0c             	add    esp,0xc
c0025ec0:	c3                   	ret    
c0025ec1:	90                   	nop

c0025ec2 <APICTimer::write(int)>:
c0025ec2:	53                   	push   ebx
c0025ec3:	83 ec 28             	sub    esp,0x28
c0025ec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025eca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025ece:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025ed4:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0025ed9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025edf:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ee5:	83 ec 0c             	sub    esp,0xc
c0025ee8:	50                   	push   eax
c0025ee9:	e8 de f4 ff ff       	call   c00253cc <APIC::getBase()>
c0025eee:	83 c4 10             	add    esp,0x10
c0025ef1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ef5:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0025efa:	8b 15 f4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddf4
c0025f00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025f04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025f08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f0c:	05 e0 03 00 00       	add    eax,0x3e0
c0025f11:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f1b:	05 80 03 00 00       	add    eax,0x380
c0025f20:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025f26:	fb                   	sti    
c0025f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025f2f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025f34:	83 d2 00             	adc    edx,0x0
c0025f37:	89 c1                	mov    ecx,eax
c0025f39:	89 d3                	mov    ebx,edx
c0025f3b:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0025f40:	8b 15 f4 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002ddf4
c0025f46:	39 c8                	cmp    eax,ecx
c0025f48:	89 d0                	mov    eax,edx
c0025f4a:	19 d8                	sbb    eax,ebx
c0025f4c:	73 02                	jae    c0025f50 <APICTimer::write(int)+0x8e>
c0025f4e:	eb d7                	jmp    c0025f27 <APICTimer::write(int)+0x65>
c0025f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f54:	05 20 03 00 00       	add    eax,0x320
c0025f59:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f63:	05 90 03 00 00       	add    eax,0x390
c0025f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6a:	f7 d0                	not    eax
c0025f6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f78:	ba 00 00 00 00       	mov    edx,0x0
c0025f7d:	f7 f3                	div    ebx
c0025f7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f87:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f8d:	0d 00 00 02 00       	or     eax,0x20000
c0025f92:	89 c2                	mov    edx,eax
c0025f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f98:	05 20 03 00 00       	add    eax,0x320
c0025f9d:	89 10                	mov    DWORD PTR [eax],edx
c0025f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fa3:	05 e0 03 00 00       	add    eax,0x3e0
c0025fa8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fb2:	05 80 03 00 00       	add    eax,0x380
c0025fb7:	89 c2                	mov    edx,eax
c0025fb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025fbd:	89 02                	mov    DWORD PTR [edx],eax
c0025fbf:	90                   	nop
c0025fc0:	83 c4 28             	add    esp,0x28
c0025fc3:	5b                   	pop    ebx
c0025fc4:	c3                   	ret    
c0025fc5:	90                   	nop

c0025fc6 <APICTimer::open(int, int, void*)>:
c0025fc6:	57                   	push   edi
c0025fc7:	56                   	push   esi
c0025fc8:	53                   	push   ebx
c0025fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fcf:	83 c0 24             	add    eax,0x24
c0025fd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0025fd4:	83 ec 08             	sub    esp,0x8
c0025fd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fdf:	ff d0                	call   eax
c0025fe1:	83 c4 10             	add    esp,0x10
c0025fe4:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0025fe9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fef:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025ff5:	83 ec 0c             	sub    esp,0xc
c0025ff8:	50                   	push   eax
c0025ff9:	e8 ce f3 ff ff       	call   c00253cc <APIC::getBase()>
c0025ffe:	83 c4 10             	add    esp,0x10
c0026001:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026011:	0f b6 f8             	movzx  edi,al
c0026014:	89 d0                	mov    eax,edx
c0026016:	ba 00 00 00 00       	mov    edx,0x0
c002601b:	89 c1                	mov    ecx,eax
c002601d:	80 e5 ff             	and    ch,0xff
c0026020:	89 cb                	mov    ebx,ecx
c0026022:	0f b6 f2             	movzx  esi,dl
c0026025:	89 d8                	mov    eax,ebx
c0026027:	89 f2                	mov    edx,esi
c0026029:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002602d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026030:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026034:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026038:	83 e0 00             	and    eax,0x0
c002603b:	09 d0                	or     eax,edx
c002603d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026045:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002604b:	8d 50 01             	lea    edx,[eax+0x1]
c002604e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026052:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026058:	0f b6 d0             	movzx  edx,al
c002605b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002605f:	83 c2 08             	add    edx,0x8
c0026062:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026066:	0f b6 c9             	movzx  ecx,cl
c0026069:	81 c9 00 00 01 00    	or     ecx,0x10000
c002606f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026077:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002607b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026085:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026089:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002608f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026093:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026099:	83 ec 0c             	sub    esp,0xc
c002609c:	51                   	push   ecx
c002609d:	6a 01                	push   0x1
c002609f:	68 94 5e 02 c0       	push   0xc0025e94
c00260a4:	52                   	push   edx
c00260a5:	50                   	push   eax
c00260a6:	e8 03 d9 fe ff       	call   c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00260ab:	83 c4 20             	add    esp,0x20
c00260ae:	89 c2                	mov    edx,eax
c00260b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260b4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00260ba:	b8 00 00 00 00       	mov    eax,0x0
c00260bf:	5b                   	pop    ebx
c00260c0:	5e                   	pop    esi
c00260c1:	5f                   	pop    edi
c00260c2:	c3                   	ret    
c00260c3:	90                   	nop

c00260c4 <APICTimer::APICTimer()>:
c00260c4:	83 ec 0c             	sub    esp,0xc
c00260c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260cb:	83 ec 08             	sub    esp,0x8
c00260ce:	68 cc c4 02 c0       	push   0xc002c4cc
c00260d3:	50                   	push   eax
c00260d4:	e8 93 03 ff ff       	call   c001646c <Timer::Timer(char const*)>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	ba e0 c4 02 c0       	mov    edx,0xc002c4e0
c00260e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e5:	89 10                	mov    DWORD PTR [eax],edx
c00260e7:	90                   	nop
c00260e8:	83 c4 0c             	add    esp,0xc
c00260eb:	c3                   	ret    

c00260ec <PIT::write(int)>:
c00260ec:	83 ec 10             	sub    esp,0x10
c00260ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026101:	a3 24 1b 03 c0       	mov    ds:0xc0031b24,eax
c0026106:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002610b:	99                   	cdq    
c002610c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026114:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002611b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026120:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026124:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026129:	ee                   	out    dx,al
c002612a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002612e:	0f b6 c0             	movzx  eax,al
c0026131:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026138:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002613c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026140:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026145:	ee                   	out    dx,al
c0026146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002614a:	c1 f8 08             	sar    eax,0x8
c002614d:	0f b6 c0             	movzx  eax,al
c0026150:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026157:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002615b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002615f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026164:	ee                   	out    dx,al
c0026165:	90                   	nop
c0026166:	83 c4 10             	add    esp,0x10
c0026169:	c3                   	ret    

c002616a <pitHandler(regs*, void*)>:
c002616a:	83 ec 0c             	sub    esp,0xc
c002616d:	a1 24 1b 03 c0       	mov    eax,ds:0xc0031b24
c0026172:	99                   	cdq    
c0026173:	52                   	push   edx
c0026174:	50                   	push   eax
c0026175:	6a 00                	push   0x0
c0026177:	68 00 ca 9a 3b       	push   0x3b9aca00
c002617c:	e8 c3 04 00 00       	call   c0026644 <__udivdi3>
c0026181:	83 c4 10             	add    esp,0x10
c0026184:	83 ec 08             	sub    esp,0x8
c0026187:	52                   	push   edx
c0026188:	50                   	push   eax
c0026189:	e8 6d 03 ff ff       	call   c00164fb <timerHandler(unsigned long long)>
c002618e:	83 c4 10             	add    esp,0x10
c0026191:	90                   	nop
c0026192:	83 c4 0c             	add    esp,0xc
c0026195:	c3                   	ret    

c0026196 <PIT::open(int, int, void*)>:
c0026196:	83 ec 0c             	sub    esp,0xc
c0026199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619d:	8b 00                	mov    eax,DWORD PTR [eax]
c002619f:	83 c0 24             	add    eax,0x24
c00261a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00261a4:	83 ec 08             	sub    esp,0x8
c00261a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261af:	ff d0                	call   eax
c00261b1:	83 c4 10             	add    esp,0x10
c00261b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b8:	83 ec 0c             	sub    esp,0xc
c00261bb:	6a 00                	push   0x0
c00261bd:	6a 01                	push   0x1
c00261bf:	68 6a 61 02 c0       	push   0xc002616a
c00261c4:	6a 00                	push   0x0
c00261c6:	50                   	push   eax
c00261c7:	e8 e2 d7 fe ff       	call   c00139ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00261cc:	83 c4 20             	add    esp,0x20
c00261cf:	89 c2                	mov    edx,eax
c00261d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00261db:	b8 00 00 00 00       	mov    eax,0x0
c00261e0:	83 c4 0c             	add    esp,0xc
c00261e3:	c3                   	ret    

c00261e4 <PIT::close(int, int, void*)>:
c00261e4:	83 ec 0c             	sub    esp,0xc
c00261e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261eb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f9:	6a 01                	push   0x1
c00261fb:	68 6a 61 02 c0       	push   0xc002616a
c0026200:	6a 00                	push   0x0
c0026202:	50                   	push   eax
c0026203:	e8 f0 d7 fe ff       	call   c00139f8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026208:	83 c4 10             	add    esp,0x10
c002620b:	b8 00 00 00 00       	mov    eax,0x0
c0026210:	83 c4 0c             	add    esp,0xc
c0026213:	c3                   	ret    

c0026214 <PIT::PIT()>:
c0026214:	83 ec 0c             	sub    esp,0xc
c0026217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002621b:	83 ec 08             	sub    esp,0x8
c002621e:	68 08 c5 02 c0       	push   0xc002c508
c0026223:	50                   	push   eax
c0026224:	e8 43 02 ff ff       	call   c001646c <Timer::Timer(char const*)>
c0026229:	83 c4 10             	add    esp,0x10
c002622c:	ba 30 c5 02 c0       	mov    edx,0xc002c530
c0026231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026235:	89 10                	mov    DWORD PTR [eax],edx
c0026237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026241:	0f b6 d0             	movzx  edx,al
c0026244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026248:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002624f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026253:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026259:	0f b6 d0             	movzx  edx,al
c002625c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026260:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026269:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002626f:	8d 50 01             	lea    edx,[eax+0x1]
c0026272:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026276:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002627c:	0f b6 d0             	movzx  edx,al
c002627f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026283:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026287:	83 e1 3f             	and    ecx,0x3f
c002628a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002628e:	90                   	nop
c002628f:	83 c4 0c             	add    esp,0xc
c0026292:	c3                   	ret    
c0026293:	66 90                	xchg   ax,ax
c0026295:	66 90                	xchg   ax,ax
c0026297:	66 90                	xchg   ax,ax
c0026299:	66 90                	xchg   ax,ax
c002629b:	66 90                	xchg   ax,ax
c002629d:	66 90                	xchg   ax,ax
c002629f:	90                   	nop

c00262a0 <avxDetect>:
c00262a0:	b8 00 00 00 00       	mov    eax,0x0
c00262a5:	c3                   	ret    

c00262a6 <avxSave>:
c00262a6:	c3                   	ret    

c00262a7 <avxLoad>:
c00262a7:	c3                   	ret    

c00262a8 <avxInit>:
c00262a8:	c3                   	ret    

c00262a9 <avxClose>:
c00262a9:	c3                   	ret    

c00262aa <wouldSheSayYes>:
c00262aa:	c3                   	ret    
c00262ab:	49                   	dec    ecx
c00262ac:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00262b0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00262b4:	75 20                	jne    c00262d6 <sseDetect.noSSE+0x1>
c00262b6:	4e                   	dec    esi
c00262b7:	79 61                	jns    c002631a <x87Detect+0x14>
c00262b9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00262be:	66 90                	xchg   ax,ax

c00262c0 <absolutelyNoChanceInHell>:
c00262c0:	b8 01 00 00 00       	mov    eax,0x1
c00262c5:	0f a2                	cpuid  
c00262c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00262cd:	74 06                	je     c00262d5 <sseDetect.noSSE>
c00262cf:	b8 01 00 00 00       	mov    eax,0x1
c00262d4:	c3                   	ret    

c00262d5 <sseDetect.noSSE>:
c00262d5:	31 c0                	xor    eax,eax
c00262d7:	c3                   	ret    

c00262d8 <sseSave>:
c00262d8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00262dd:	c3                   	ret    

c00262de <sseLoad>:
c00262de:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00262e3:	c3                   	ret    

c00262e4 <sseInit>:
c00262e4:	e8 49 00 00 00       	call   c0026332 <x87Init>
c00262e9:	0f 20 e0             	mov    eax,cr4
c00262ec:	66 0d 00 06          	or     ax,0x600
c00262f0:	0f 22 e0             	mov    cr4,eax
c00262f3:	c3                   	ret    

c00262f4 <sseClose>:
c00262f4:	c3                   	ret    
c00262f5:	66 90                	xchg   ax,ax
c00262f7:	66 90                	xchg   ax,ax
c00262f9:	66 90                	xchg   ax,ax
c00262fb:	66 90                	xchg   ax,ax
c00262fd:	66 90                	xchg   ax,ax
c00262ff:	90                   	nop

c0026300 <value_37F>:
c0026300:	7f 03                	jg     c0026305 <value_37A+0x1>

c0026302 <value_37E>:
c0026302:	7e 03                	jle    c0026307 <x87Detect+0x1>

c0026304 <value_37A>:
c0026304:	7a 03                	jp     c0026309 <x87Detect+0x3>

c0026306 <x87Detect>:
c0026306:	b8 01 00 00 00       	mov    eax,0x1
c002630b:	0f a2                	cpuid  
c002630d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026313:	74 06                	je     c002631b <x87Detect.nox87>
c0026315:	b8 01 00 00 00       	mov    eax,0x1
c002631a:	c3                   	ret    

c002631b <x87Detect.nox87>:
c002631b:	b8 00 00 00 00       	mov    eax,0x0
c0026320:	c3                   	ret    

c0026321 <x87Save>:
c0026321:	55                   	push   ebp
c0026322:	89 e5                	mov    ebp,esp
c0026324:	9b dd 75 08          	fsave  [ebp+0x8]
c0026328:	c9                   	leave  
c0026329:	c3                   	ret    

c002632a <x87Load>:
c002632a:	55                   	push   ebp
c002632b:	89 e5                	mov    ebp,esp
c002632d:	dd 65 08             	frstor [ebp+0x8]
c0026330:	c9                   	leave  
c0026331:	c3                   	ret    

c0026332 <x87Init>:
c0026332:	9b db e3             	finit  
c0026335:	0f 20 c0             	mov    eax,cr0
c0026338:	66 25 fb ff          	and    ax,0xfffb
c002633c:	66 0d 22 00          	or     ax,0x22
c0026340:	0f 22 c0             	mov    cr0,eax
c0026343:	0f 06                	clts   
c0026345:	d9 2d 04 63 02 c0    	fldcw  WORD PTR ds:0xc0026304
c002634b:	c3                   	ret    

c002634c <x87Close>:
c002634c:	c3                   	ret    
c002634d:	66 90                	xchg   ax,ax
c002634f:	90                   	nop

c0026350 <__do_global_ctors_aux>:
c0026350:	a1 44 8f 02 c0       	mov    eax,ds:0xc0028f44
c0026355:	83 f8 ff             	cmp    eax,0xffffffff
c0026358:	74 1a                	je     c0026374 <__do_global_ctors_aux+0x24>
c002635a:	55                   	push   ebp
c002635b:	89 e5                	mov    ebp,esp
c002635d:	53                   	push   ebx
c002635e:	52                   	push   edx
c002635f:	bb 44 8f 02 c0       	mov    ebx,0xc0028f44
c0026364:	ff d0                	call   eax
c0026366:	83 eb 04             	sub    ebx,0x4
c0026369:	8b 03                	mov    eax,DWORD PTR [ebx]
c002636b:	83 f8 ff             	cmp    eax,0xffffffff
c002636e:	75 f4                	jne    c0026364 <__do_global_ctors_aux+0x14>
c0026370:	58                   	pop    eax
c0026371:	5b                   	pop    ebx
c0026372:	5d                   	pop    ebp
c0026373:	c3                   	ret    
c0026374:	c3                   	ret    
c0026375:	66 90                	xchg   ax,ax
c0026377:	90                   	nop

c0026378 <__divdi3>:
c0026378:	55                   	push   ebp
c0026379:	57                   	push   edi
c002637a:	56                   	push   esi
c002637b:	53                   	push   ebx
c002637c:	83 ec 1c             	sub    esp,0x1c
c002637f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026383:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026387:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002638a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002638e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026392:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026396:	85 db                	test   ebx,ebx
c0026398:	0f 88 8e 00 00 00    	js     c002642c <__divdi3+0xb4>
c002639e:	89 dd                	mov    ebp,ebx
c00263a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00263a8:	89 d3                	mov    ebx,edx
c00263aa:	85 d2                	test   edx,edx
c00263ac:	79 0d                	jns    c00263bb <__divdi3+0x43>
c00263ae:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00263b2:	f7 d8                	neg    eax
c00263b4:	83 d2 00             	adc    edx,0x0
c00263b7:	f7 da                	neg    edx
c00263b9:	89 d3                	mov    ebx,edx
c00263bb:	89 c7                	mov    edi,eax
c00263bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263c0:	85 db                	test   ebx,ebx
c00263c2:	75 48                	jne    c002640c <__divdi3+0x94>
c00263c4:	39 ef                	cmp    edi,ebp
c00263c6:	76 24                	jbe    c00263ec <__divdi3+0x74>
c00263c8:	89 ea                	mov    edx,ebp
c00263ca:	f7 f7                	div    edi
c00263cc:	89 c1                	mov    ecx,eax
c00263ce:	31 f6                	xor    esi,esi
c00263d0:	89 c8                	mov    eax,ecx
c00263d2:	89 f2                	mov    edx,esi
c00263d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00263d8:	85 c9                	test   ecx,ecx
c00263da:	74 07                	je     c00263e3 <__divdi3+0x6b>
c00263dc:	f7 d8                	neg    eax
c00263de:	83 d2 00             	adc    edx,0x0
c00263e1:	f7 da                	neg    edx
c00263e3:	83 c4 1c             	add    esp,0x1c
c00263e6:	5b                   	pop    ebx
c00263e7:	5e                   	pop    esi
c00263e8:	5f                   	pop    edi
c00263e9:	5d                   	pop    ebp
c00263ea:	c3                   	ret    
c00263eb:	90                   	nop
c00263ec:	85 ff                	test   edi,edi
c00263ee:	75 0b                	jne    c00263fb <__divdi3+0x83>
c00263f0:	b8 01 00 00 00       	mov    eax,0x1
c00263f5:	31 d2                	xor    edx,edx
c00263f7:	f7 f3                	div    ebx
c00263f9:	89 c7                	mov    edi,eax
c00263fb:	31 d2                	xor    edx,edx
c00263fd:	89 e8                	mov    eax,ebp
c00263ff:	f7 f7                	div    edi
c0026401:	89 c6                	mov    esi,eax
c0026403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026406:	f7 f7                	div    edi
c0026408:	89 c1                	mov    ecx,eax
c002640a:	eb c4                	jmp    c00263d0 <__divdi3+0x58>
c002640c:	39 eb                	cmp    ebx,ebp
c002640e:	77 3c                	ja     c002644c <__divdi3+0xd4>
c0026410:	0f bd f3             	bsr    esi,ebx
c0026413:	83 f6 1f             	xor    esi,0x1f
c0026416:	75 40                	jne    c0026458 <__divdi3+0xe0>
c0026418:	39 eb                	cmp    ebx,ebp
c002641a:	72 09                	jb     c0026425 <__divdi3+0xad>
c002641c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002641f:	0f 87 97 00 00 00    	ja     c00264bc <__divdi3+0x144>
c0026425:	b9 01 00 00 00       	mov    ecx,0x1
c002642a:	eb a4                	jmp    c00263d0 <__divdi3+0x58>
c002642c:	f7 d9                	neg    ecx
c002642e:	83 d3 00             	adc    ebx,0x0
c0026431:	f7 db                	neg    ebx
c0026433:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026436:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002643a:	89 dd                	mov    ebp,ebx
c002643c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026444:	e9 5f ff ff ff       	jmp    c00263a8 <__divdi3+0x30>
c0026449:	8d 76 00             	lea    esi,[esi+0x0]
c002644c:	31 f6                	xor    esi,esi
c002644e:	31 c9                	xor    ecx,ecx
c0026450:	e9 7b ff ff ff       	jmp    c00263d0 <__divdi3+0x58>
c0026455:	8d 76 00             	lea    esi,[esi+0x0]
c0026458:	b8 20 00 00 00       	mov    eax,0x20
c002645d:	29 f0                	sub    eax,esi
c002645f:	89 f1                	mov    ecx,esi
c0026461:	d3 e3                	shl    ebx,cl
c0026463:	89 fa                	mov    edx,edi
c0026465:	88 c1                	mov    cl,al
c0026467:	d3 ea                	shr    edx,cl
c0026469:	09 da                	or     edx,ebx
c002646b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002646f:	89 f1                	mov    ecx,esi
c0026471:	d3 e7                	shl    edi,cl
c0026473:	89 eb                	mov    ebx,ebp
c0026475:	88 c1                	mov    cl,al
c0026477:	d3 eb                	shr    ebx,cl
c0026479:	89 f1                	mov    ecx,esi
c002647b:	d3 e5                	shl    ebp,cl
c002647d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026480:	88 c1                	mov    cl,al
c0026482:	d3 ea                	shr    edx,cl
c0026484:	09 d5                	or     ebp,edx
c0026486:	89 e8                	mov    eax,ebp
c0026488:	89 da                	mov    edx,ebx
c002648a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002648e:	89 d3                	mov    ebx,edx
c0026490:	89 c5                	mov    ebp,eax
c0026492:	f7 e7                	mul    edi
c0026494:	39 d3                	cmp    ebx,edx
c0026496:	72 18                	jb     c00264b0 <__divdi3+0x138>
c0026498:	74 0a                	je     c00264a4 <__divdi3+0x12c>
c002649a:	89 e9                	mov    ecx,ebp
c002649c:	31 f6                	xor    esi,esi
c002649e:	e9 2d ff ff ff       	jmp    c00263d0 <__divdi3+0x58>
c00264a3:	90                   	nop
c00264a4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00264a7:	89 f1                	mov    ecx,esi
c00264a9:	d3 e7                	shl    edi,cl
c00264ab:	39 c7                	cmp    edi,eax
c00264ad:	73 eb                	jae    c002649a <__divdi3+0x122>
c00264af:	90                   	nop
c00264b0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00264b3:	31 f6                	xor    esi,esi
c00264b5:	e9 16 ff ff ff       	jmp    c00263d0 <__divdi3+0x58>
c00264ba:	66 90                	xchg   ax,ax
c00264bc:	31 c9                	xor    ecx,ecx
c00264be:	e9 0d ff ff ff       	jmp    c00263d0 <__divdi3+0x58>
c00264c3:	90                   	nop

c00264c4 <__moddi3>:
c00264c4:	55                   	push   ebp
c00264c5:	57                   	push   edi
c00264c6:	56                   	push   esi
c00264c7:	53                   	push   ebx
c00264c8:	83 ec 2c             	sub    esp,0x2c
c00264cb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00264cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00264d3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00264d7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00264db:	85 db                	test   ebx,ebx
c00264dd:	0f 88 85 00 00 00    	js     c0026568 <__moddi3+0xa4>
c00264e3:	89 de                	mov    esi,ebx
c00264e5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00264ed:	89 d7                	mov    edi,edx
c00264ef:	85 d2                	test   edx,edx
c00264f1:	79 09                	jns    c00264fc <__moddi3+0x38>
c00264f3:	f7 d8                	neg    eax
c00264f5:	83 d2 00             	adc    edx,0x0
c00264f8:	f7 da                	neg    edx
c00264fa:	89 d7                	mov    edi,edx
c00264fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026500:	89 cd                	mov    ebp,ecx
c0026502:	85 ff                	test   edi,edi
c0026504:	75 52                	jne    c0026558 <__moddi3+0x94>
c0026506:	89 c3                	mov    ebx,eax
c0026508:	39 f0                	cmp    eax,esi
c002650a:	76 24                	jbe    c0026530 <__moddi3+0x6c>
c002650c:	89 c8                	mov    eax,ecx
c002650e:	89 f2                	mov    edx,esi
c0026510:	f7 f3                	div    ebx
c0026512:	89 d6                	mov    esi,edx
c0026514:	89 f0                	mov    eax,esi
c0026516:	31 d2                	xor    edx,edx
c0026518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002651c:	85 c9                	test   ecx,ecx
c002651e:	74 07                	je     c0026527 <__moddi3+0x63>
c0026520:	f7 d8                	neg    eax
c0026522:	83 d2 00             	adc    edx,0x0
c0026525:	f7 da                	neg    edx
c0026527:	83 c4 2c             	add    esp,0x2c
c002652a:	5b                   	pop    ebx
c002652b:	5e                   	pop    esi
c002652c:	5f                   	pop    edi
c002652d:	5d                   	pop    ebp
c002652e:	c3                   	ret    
c002652f:	90                   	nop
c0026530:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026534:	85 db                	test   ebx,ebx
c0026536:	75 0d                	jne    c0026545 <__moddi3+0x81>
c0026538:	b8 01 00 00 00       	mov    eax,0x1
c002653d:	31 d2                	xor    edx,edx
c002653f:	f7 f7                	div    edi
c0026541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026545:	89 f0                	mov    eax,esi
c0026547:	31 d2                	xor    edx,edx
c0026549:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002654d:	f7 f7                	div    edi
c002654f:	89 e8                	mov    eax,ebp
c0026551:	f7 f7                	div    edi
c0026553:	89 d6                	mov    esi,edx
c0026555:	eb bd                	jmp    c0026514 <__moddi3+0x50>
c0026557:	90                   	nop
c0026558:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002655c:	39 f7                	cmp    edi,esi
c002655e:	76 20                	jbe    c0026580 <__moddi3+0xbc>
c0026560:	89 c8                	mov    eax,ecx
c0026562:	89 f2                	mov    edx,esi
c0026564:	eb b2                	jmp    c0026518 <__moddi3+0x54>
c0026566:	66 90                	xchg   ax,ax
c0026568:	f7 d9                	neg    ecx
c002656a:	83 d3 00             	adc    ebx,0x0
c002656d:	f7 db                	neg    ebx
c002656f:	89 de                	mov    esi,ebx
c0026571:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026579:	e9 6f ff ff ff       	jmp    c00264ed <__moddi3+0x29>
c002657e:	66 90                	xchg   ax,ax
c0026580:	0f bd c7             	bsr    eax,edi
c0026583:	83 f0 1f             	xor    eax,0x1f
c0026586:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002658a:	75 24                	jne    c00265b0 <__moddi3+0xec>
c002658c:	39 f7                	cmp    edi,esi
c002658e:	72 06                	jb     c0026596 <__moddi3+0xd2>
c0026590:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026594:	77 0c                	ja     c00265a2 <__moddi3+0xde>
c0026596:	89 e9                	mov    ecx,ebp
c0026598:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002659c:	19 fe                	sbb    esi,edi
c002659e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00265a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00265a6:	89 f2                	mov    edx,esi
c00265a8:	e9 6b ff ff ff       	jmp    c0026518 <__moddi3+0x54>
c00265ad:	8d 76 00             	lea    esi,[esi+0x0]
c00265b0:	b8 20 00 00 00       	mov    eax,0x20
c00265b5:	89 c2                	mov    edx,eax
c00265b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00265bb:	29 da                	sub    edx,ebx
c00265bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00265c1:	88 d9                	mov    cl,bl
c00265c3:	d3 e7                	shl    edi,cl
c00265c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265c9:	88 d1                	mov    cl,dl
c00265cb:	d3 e8                	shr    eax,cl
c00265cd:	09 c7                	or     edi,eax
c00265cf:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00265d3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265d7:	89 d8                	mov    eax,ebx
c00265d9:	88 d9                	mov    cl,bl
c00265db:	d3 e7                	shl    edi,cl
c00265dd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00265e1:	89 f3                	mov    ebx,esi
c00265e3:	88 d1                	mov    cl,dl
c00265e5:	d3 eb                	shr    ebx,cl
c00265e7:	89 c7                	mov    edi,eax
c00265e9:	88 c1                	mov    cl,al
c00265eb:	d3 e6                	shl    esi,cl
c00265ed:	89 e8                	mov    eax,ebp
c00265ef:	88 d1                	mov    cl,dl
c00265f1:	d3 e8                	shr    eax,cl
c00265f3:	09 f0                	or     eax,esi
c00265f5:	89 f9                	mov    ecx,edi
c00265f7:	d3 e5                	shl    ebp,cl
c00265f9:	89 da                	mov    edx,ebx
c00265fb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265ff:	89 d3                	mov    ebx,edx
c0026601:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026605:	89 c6                	mov    esi,eax
c0026607:	89 d1                	mov    ecx,edx
c0026609:	39 d3                	cmp    ebx,edx
c002660b:	72 27                	jb     c0026634 <__moddi3+0x170>
c002660d:	74 21                	je     c0026630 <__moddi3+0x16c>
c002660f:	29 f5                	sub    ebp,esi
c0026611:	19 cb                	sbb    ebx,ecx
c0026613:	89 de                	mov    esi,ebx
c0026615:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026619:	d3 e6                	shl    esi,cl
c002661b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002661f:	89 f9                	mov    ecx,edi
c0026621:	d3 ed                	shr    ebp,cl
c0026623:	09 ee                	or     esi,ebp
c0026625:	89 f0                	mov    eax,esi
c0026627:	d3 eb                	shr    ebx,cl
c0026629:	89 da                	mov    edx,ebx
c002662b:	e9 e8 fe ff ff       	jmp    c0026518 <__moddi3+0x54>
c0026630:	39 c5                	cmp    ebp,eax
c0026632:	73 db                	jae    c002660f <__moddi3+0x14b>
c0026634:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026638:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002663c:	89 d1                	mov    ecx,edx
c002663e:	89 c6                	mov    esi,eax
c0026640:	eb cd                	jmp    c002660f <__moddi3+0x14b>
c0026642:	66 90                	xchg   ax,ax

c0026644 <__udivdi3>:
c0026644:	55                   	push   ebp
c0026645:	57                   	push   edi
c0026646:	56                   	push   esi
c0026647:	53                   	push   ebx
c0026648:	83 ec 1c             	sub    esp,0x1c
c002664b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002664f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026653:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026657:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002665b:	85 d2                	test   edx,edx
c002665d:	75 41                	jne    c00266a0 <__udivdi3+0x5c>
c002665f:	39 f7                	cmp    edi,esi
c0026661:	76 15                	jbe    c0026678 <__udivdi3+0x34>
c0026663:	89 e8                	mov    eax,ebp
c0026665:	89 f2                	mov    edx,esi
c0026667:	f7 f7                	div    edi
c0026669:	31 db                	xor    ebx,ebx
c002666b:	89 da                	mov    edx,ebx
c002666d:	83 c4 1c             	add    esp,0x1c
c0026670:	5b                   	pop    ebx
c0026671:	5e                   	pop    esi
c0026672:	5f                   	pop    edi
c0026673:	5d                   	pop    ebp
c0026674:	c3                   	ret    
c0026675:	8d 76 00             	lea    esi,[esi+0x0]
c0026678:	89 f9                	mov    ecx,edi
c002667a:	85 ff                	test   edi,edi
c002667c:	75 0b                	jne    c0026689 <__udivdi3+0x45>
c002667e:	b8 01 00 00 00       	mov    eax,0x1
c0026683:	31 d2                	xor    edx,edx
c0026685:	f7 f7                	div    edi
c0026687:	89 c1                	mov    ecx,eax
c0026689:	31 d2                	xor    edx,edx
c002668b:	89 f0                	mov    eax,esi
c002668d:	f7 f1                	div    ecx
c002668f:	89 c3                	mov    ebx,eax
c0026691:	89 e8                	mov    eax,ebp
c0026693:	f7 f1                	div    ecx
c0026695:	89 da                	mov    edx,ebx
c0026697:	83 c4 1c             	add    esp,0x1c
c002669a:	5b                   	pop    ebx
c002669b:	5e                   	pop    esi
c002669c:	5f                   	pop    edi
c002669d:	5d                   	pop    ebp
c002669e:	c3                   	ret    
c002669f:	90                   	nop
c00266a0:	39 f2                	cmp    edx,esi
c00266a2:	77 1c                	ja     c00266c0 <__udivdi3+0x7c>
c00266a4:	0f bd da             	bsr    ebx,edx
c00266a7:	83 f3 1f             	xor    ebx,0x1f
c00266aa:	75 24                	jne    c00266d0 <__udivdi3+0x8c>
c00266ac:	39 f2                	cmp    edx,esi
c00266ae:	72 08                	jb     c00266b8 <__udivdi3+0x74>
c00266b0:	39 ef                	cmp    edi,ebp
c00266b2:	0f 87 84 00 00 00    	ja     c002673c <__udivdi3+0xf8>
c00266b8:	b8 01 00 00 00       	mov    eax,0x1
c00266bd:	eb ac                	jmp    c002666b <__udivdi3+0x27>
c00266bf:	90                   	nop
c00266c0:	31 db                	xor    ebx,ebx
c00266c2:	31 c0                	xor    eax,eax
c00266c4:	89 da                	mov    edx,ebx
c00266c6:	83 c4 1c             	add    esp,0x1c
c00266c9:	5b                   	pop    ebx
c00266ca:	5e                   	pop    esi
c00266cb:	5f                   	pop    edi
c00266cc:	5d                   	pop    ebp
c00266cd:	c3                   	ret    
c00266ce:	66 90                	xchg   ax,ax
c00266d0:	b8 20 00 00 00       	mov    eax,0x20
c00266d5:	29 d8                	sub    eax,ebx
c00266d7:	88 d9                	mov    cl,bl
c00266d9:	d3 e2                	shl    edx,cl
c00266db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00266df:	89 fa                	mov    edx,edi
c00266e1:	88 c1                	mov    cl,al
c00266e3:	d3 ea                	shr    edx,cl
c00266e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00266e9:	09 d1                	or     ecx,edx
c00266eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00266ef:	88 d9                	mov    cl,bl
c00266f1:	d3 e7                	shl    edi,cl
c00266f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00266f7:	89 f7                	mov    edi,esi
c00266f9:	88 c1                	mov    cl,al
c00266fb:	d3 ef                	shr    edi,cl
c00266fd:	88 d9                	mov    cl,bl
c00266ff:	d3 e6                	shl    esi,cl
c0026701:	89 ea                	mov    edx,ebp
c0026703:	88 c1                	mov    cl,al
c0026705:	d3 ea                	shr    edx,cl
c0026707:	09 d6                	or     esi,edx
c0026709:	89 f0                	mov    eax,esi
c002670b:	89 fa                	mov    edx,edi
c002670d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026711:	89 d7                	mov    edi,edx
c0026713:	89 c6                	mov    esi,eax
c0026715:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026719:	39 d7                	cmp    edi,edx
c002671b:	72 13                	jb     c0026730 <__udivdi3+0xec>
c002671d:	74 09                	je     c0026728 <__udivdi3+0xe4>
c002671f:	89 f0                	mov    eax,esi
c0026721:	31 db                	xor    ebx,ebx
c0026723:	e9 43 ff ff ff       	jmp    c002666b <__udivdi3+0x27>
c0026728:	88 d9                	mov    cl,bl
c002672a:	d3 e5                	shl    ebp,cl
c002672c:	39 c5                	cmp    ebp,eax
c002672e:	73 ef                	jae    c002671f <__udivdi3+0xdb>
c0026730:	8d 46 ff             	lea    eax,[esi-0x1]
c0026733:	31 db                	xor    ebx,ebx
c0026735:	e9 31 ff ff ff       	jmp    c002666b <__udivdi3+0x27>
c002673a:	66 90                	xchg   ax,ax
c002673c:	31 c0                	xor    eax,eax
c002673e:	e9 28 ff ff ff       	jmp    c002666b <__udivdi3+0x27>
c0026743:	90                   	nop

c0026744 <__umoddi3>:
c0026744:	55                   	push   ebp
c0026745:	57                   	push   edi
c0026746:	56                   	push   esi
c0026747:	53                   	push   ebx
c0026748:	83 ec 1c             	sub    esp,0x1c
c002674b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002674f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026753:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026757:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002675b:	89 da                	mov    edx,ebx
c002675d:	85 c0                	test   eax,eax
c002675f:	75 37                	jne    c0026798 <__umoddi3+0x54>
c0026761:	39 df                	cmp    edi,ebx
c0026763:	76 13                	jbe    c0026778 <__umoddi3+0x34>
c0026765:	89 f0                	mov    eax,esi
c0026767:	f7 f7                	div    edi
c0026769:	89 d0                	mov    eax,edx
c002676b:	31 d2                	xor    edx,edx
c002676d:	83 c4 1c             	add    esp,0x1c
c0026770:	5b                   	pop    ebx
c0026771:	5e                   	pop    esi
c0026772:	5f                   	pop    edi
c0026773:	5d                   	pop    ebp
c0026774:	c3                   	ret    
c0026775:	8d 76 00             	lea    esi,[esi+0x0]
c0026778:	89 fd                	mov    ebp,edi
c002677a:	85 ff                	test   edi,edi
c002677c:	75 0b                	jne    c0026789 <__umoddi3+0x45>
c002677e:	b8 01 00 00 00       	mov    eax,0x1
c0026783:	31 d2                	xor    edx,edx
c0026785:	f7 f7                	div    edi
c0026787:	89 c5                	mov    ebp,eax
c0026789:	89 d8                	mov    eax,ebx
c002678b:	31 d2                	xor    edx,edx
c002678d:	f7 f5                	div    ebp
c002678f:	89 f0                	mov    eax,esi
c0026791:	f7 f5                	div    ebp
c0026793:	89 d0                	mov    eax,edx
c0026795:	eb d4                	jmp    c002676b <__umoddi3+0x27>
c0026797:	90                   	nop
c0026798:	89 f1                	mov    ecx,esi
c002679a:	39 d8                	cmp    eax,ebx
c002679c:	76 0a                	jbe    c00267a8 <__umoddi3+0x64>
c002679e:	89 f0                	mov    eax,esi
c00267a0:	83 c4 1c             	add    esp,0x1c
c00267a3:	5b                   	pop    ebx
c00267a4:	5e                   	pop    esi
c00267a5:	5f                   	pop    edi
c00267a6:	5d                   	pop    ebp
c00267a7:	c3                   	ret    
c00267a8:	0f bd e8             	bsr    ebp,eax
c00267ab:	83 f5 1f             	xor    ebp,0x1f
c00267ae:	75 1c                	jne    c00267cc <__umoddi3+0x88>
c00267b0:	39 d8                	cmp    eax,ebx
c00267b2:	72 04                	jb     c00267b8 <__umoddi3+0x74>
c00267b4:	39 f7                	cmp    edi,esi
c00267b6:	77 08                	ja     c00267c0 <__umoddi3+0x7c>
c00267b8:	89 da                	mov    edx,ebx
c00267ba:	29 fe                	sub    esi,edi
c00267bc:	19 c2                	sbb    edx,eax
c00267be:	89 f1                	mov    ecx,esi
c00267c0:	89 c8                	mov    eax,ecx
c00267c2:	83 c4 1c             	add    esp,0x1c
c00267c5:	5b                   	pop    ebx
c00267c6:	5e                   	pop    esi
c00267c7:	5f                   	pop    edi
c00267c8:	5d                   	pop    ebp
c00267c9:	c3                   	ret    
c00267ca:	66 90                	xchg   ax,ax
c00267cc:	ba 20 00 00 00       	mov    edx,0x20
c00267d1:	29 ea                	sub    edx,ebp
c00267d3:	89 e9                	mov    ecx,ebp
c00267d5:	d3 e0                	shl    eax,cl
c00267d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00267db:	89 f8                	mov    eax,edi
c00267dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00267e1:	88 d1                	mov    cl,dl
c00267e3:	d3 e8                	shr    eax,cl
c00267e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00267e9:	09 c1                	or     ecx,eax
c00267eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00267ef:	89 e9                	mov    ecx,ebp
c00267f1:	d3 e7                	shl    edi,cl
c00267f3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267f7:	89 d8                	mov    eax,ebx
c00267f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267fd:	88 d1                	mov    cl,dl
c00267ff:	d3 e8                	shr    eax,cl
c0026801:	89 c7                	mov    edi,eax
c0026803:	89 e9                	mov    ecx,ebp
c0026805:	d3 e3                	shl    ebx,cl
c0026807:	89 f0                	mov    eax,esi
c0026809:	88 d1                	mov    cl,dl
c002680b:	d3 e8                	shr    eax,cl
c002680d:	09 d8                	or     eax,ebx
c002680f:	89 e9                	mov    ecx,ebp
c0026811:	d3 e6                	shl    esi,cl
c0026813:	89 f3                	mov    ebx,esi
c0026815:	89 fa                	mov    edx,edi
c0026817:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002681b:	89 d1                	mov    ecx,edx
c002681d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026821:	89 c6                	mov    esi,eax
c0026823:	89 d7                	mov    edi,edx
c0026825:	39 d1                	cmp    ecx,edx
c0026827:	72 27                	jb     c0026850 <__umoddi3+0x10c>
c0026829:	74 21                	je     c002684c <__umoddi3+0x108>
c002682b:	89 ca                	mov    edx,ecx
c002682d:	29 f3                	sub    ebx,esi
c002682f:	19 fa                	sbb    edx,edi
c0026831:	89 d0                	mov    eax,edx
c0026833:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026837:	d3 e0                	shl    eax,cl
c0026839:	89 e9                	mov    ecx,ebp
c002683b:	d3 eb                	shr    ebx,cl
c002683d:	09 d8                	or     eax,ebx
c002683f:	d3 ea                	shr    edx,cl
c0026841:	83 c4 1c             	add    esp,0x1c
c0026844:	5b                   	pop    ebx
c0026845:	5e                   	pop    esi
c0026846:	5f                   	pop    edi
c0026847:	5d                   	pop    ebp
c0026848:	c3                   	ret    
c0026849:	8d 76 00             	lea    esi,[esi+0x0]
c002684c:	39 c3                	cmp    ebx,eax
c002684e:	73 db                	jae    c002682b <__umoddi3+0xe7>
c0026850:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026854:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026858:	89 d7                	mov    edi,edx
c002685a:	89 c6                	mov    esi,eax
c002685c:	eb cd                	jmp    c002682b <__umoddi3+0xe7>

c002685e <__addsf3>:
c002685e:	55                   	push   ebp
c002685f:	89 e5                	mov    ebp,esp
c0026861:	57                   	push   edi
c0026862:	56                   	push   esi
c0026863:	53                   	push   ebx
c0026864:	83 ec 08             	sub    esp,0x8
c0026867:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002686a:	89 fa                	mov    edx,edi
c002686c:	89 f8                	mov    eax,edi
c002686e:	c1 f8 17             	sar    eax,0x17
c0026871:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026874:	c1 e2 08             	shl    edx,0x8
c0026877:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002687d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026880:	89 de                	mov    esi,ebx
c0026882:	c1 fe 17             	sar    esi,0x17
c0026885:	c1 e3 08             	shl    ebx,0x8
c0026888:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002688e:	31 f0                	xor    eax,esi
c0026890:	0f 88 3b 01 00 00    	js     c00269d1 <__addsf3+0x173>
c0026896:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026899:	29 f1                	sub    ecx,esi
c002689b:	85 c9                	test   ecx,ecx
c002689d:	7e 54                	jle    c00268f3 <__addsf3+0x95>
c002689f:	89 f0                	mov    eax,esi
c00268a1:	84 c0                	test   al,al
c00268a3:	75 10                	jne    c00268b5 <__addsf3+0x57>
c00268a5:	85 db                	test   ebx,ebx
c00268a7:	0f 84 aa 02 00 00    	je     c0026b57 <__addsf3+0x2f9>
c00268ad:	49                   	dec    ecx
c00268ae:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268b1:	74 38                	je     c00268eb <__addsf3+0x8d>
c00268b3:	eb 13                	jmp    c00268c8 <__addsf3+0x6a>
c00268b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268b8:	f7 d0                	not    eax
c00268ba:	84 c0                	test   al,al
c00268bc:	0f 84 95 02 00 00    	je     c0026b57 <__addsf3+0x2f9>
c00268c2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00268c8:	83 f9 1f             	cmp    ecx,0x1f
c00268cb:	0f 8f 86 02 00 00    	jg     c0026b57 <__addsf3+0x2f9>
c00268d1:	89 de                	mov    esi,ebx
c00268d3:	d3 ee                	shr    esi,cl
c00268d5:	b8 20 00 00 00       	mov    eax,0x20
c00268da:	29 c8                	sub    eax,ecx
c00268dc:	89 c1                	mov    ecx,eax
c00268de:	d3 e3                	shl    ebx,cl
c00268e0:	31 c0                	xor    eax,eax
c00268e2:	85 db                	test   ebx,ebx
c00268e4:	0f 95 c0             	setne  al
c00268e7:	09 f0                	or     eax,esi
c00268e9:	01 d0                	add    eax,edx
c00268eb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00268ee:	e9 b6 00 00 00       	jmp    c00269a9 <__addsf3+0x14b>
c00268f3:	74 5c                	je     c0026951 <__addsf3+0xf3>
c00268f5:	89 f1                	mov    ecx,esi
c00268f7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268fa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268fd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026901:	75 14                	jne    c0026917 <__addsf3+0xb9>
c0026903:	85 d2                	test   edx,edx
c0026905:	0f 84 4c 02 00 00    	je     c0026b57 <__addsf3+0x2f9>
c002690b:	49                   	dec    ecx
c002690c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002690f:	0f 84 94 00 00 00    	je     c00269a9 <__addsf3+0x14b>
c0026915:	eb 12                	jmp    c0026929 <__addsf3+0xcb>
c0026917:	89 f0                	mov    eax,esi
c0026919:	f7 d0                	not    eax
c002691b:	84 c0                	test   al,al
c002691d:	0f 84 34 02 00 00    	je     c0026b57 <__addsf3+0x2f9>
c0026923:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026929:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002692c:	83 f9 1f             	cmp    ecx,0x1f
c002692f:	0f 8f 22 02 00 00    	jg     c0026b57 <__addsf3+0x2f9>
c0026935:	89 d7                	mov    edi,edx
c0026937:	d3 ef                	shr    edi,cl
c0026939:	b8 20 00 00 00       	mov    eax,0x20
c002693e:	29 c8                	sub    eax,ecx
c0026940:	89 c1                	mov    ecx,eax
c0026942:	d3 e2                	shl    edx,cl
c0026944:	31 c0                	xor    eax,eax
c0026946:	85 d2                	test   edx,edx
c0026948:	0f 95 c0             	setne  al
c002694b:	09 f8                	or     eax,edi
c002694d:	01 d8                	add    eax,ebx
c002694f:	eb 58                	jmp    c00269a9 <__addsf3+0x14b>
c0026951:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026954:	8d 70 01             	lea    esi,[eax+0x1]
c0026957:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002695d:	75 32                	jne    c0026991 <__addsf3+0x133>
c002695f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026963:	75 1f                	jne    c0026984 <__addsf3+0x126>
c0026965:	85 d2                	test   edx,edx
c0026967:	0f 84 e0 01 00 00    	je     c0026b4d <__addsf3+0x2ef>
c002696d:	85 db                	test   ebx,ebx
c002696f:	0f 84 e2 01 00 00    	je     c0026b57 <__addsf3+0x2f9>
c0026975:	89 d0                	mov    eax,edx
c0026977:	01 d8                	add    eax,ebx
c0026979:	0f 89 a9 01 00 00    	jns    c0026b28 <__addsf3+0x2ca>
c002697f:	e9 9d 01 00 00       	jmp    c0026b21 <__addsf3+0x2c3>
c0026984:	85 d2                	test   edx,edx
c0026986:	0f 85 cb 01 00 00    	jne    c0026b57 <__addsf3+0x2f9>
c002698c:	e9 bc 01 00 00       	jmp    c0026b4d <__addsf3+0x2ef>
c0026991:	31 c0                	xor    eax,eax
c0026993:	89 f1                	mov    ecx,esi
c0026995:	f7 d1                	not    ecx
c0026997:	84 c9                	test   cl,cl
c0026999:	0f 84 90 01 00 00    	je     c0026b2f <__addsf3+0x2d1>
c002699f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269a2:	d1 e8                	shr    eax,1
c00269a4:	e9 86 01 00 00       	jmp    c0026b2f <__addsf3+0x2d1>
c00269a9:	85 c0                	test   eax,eax
c00269ab:	0f 89 7e 01 00 00    	jns    c0026b2f <__addsf3+0x2d1>
c00269b1:	46                   	inc    esi
c00269b2:	89 f2                	mov    edx,esi
c00269b4:	f7 d2                	not    edx
c00269b6:	84 d2                	test   dl,dl
c00269b8:	0f 84 6f 01 00 00    	je     c0026b2d <__addsf3+0x2cf>
c00269be:	89 c2                	mov    edx,eax
c00269c0:	83 e2 01             	and    edx,0x1
c00269c3:	d1 e8                	shr    eax,1
c00269c5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00269ca:	09 d0                	or     eax,edx
c00269cc:	e9 5e 01 00 00       	jmp    c0026b2f <__addsf3+0x2d1>
c00269d1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00269d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269d8:	89 f0                	mov    eax,esi
c00269da:	0f b6 c0             	movzx  eax,al
c00269dd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269e0:	29 c1                	sub    ecx,eax
c00269e2:	85 c9                	test   ecx,ecx
c00269e4:	7e 55                	jle    c0026a3b <__addsf3+0x1dd>
c00269e6:	85 c0                	test   eax,eax
c00269e8:	75 11                	jne    c00269fb <__addsf3+0x19d>
c00269ea:	85 db                	test   ebx,ebx
c00269ec:	0f 84 65 01 00 00    	je     c0026b57 <__addsf3+0x2f9>
c00269f2:	49                   	dec    ecx
c00269f3:	75 19                	jne    c0026a0e <__addsf3+0x1b0>
c00269f5:	89 d0                	mov    eax,edx
c00269f7:	29 d8                	sub    eax,ebx
c00269f9:	eb 38                	jmp    c0026a33 <__addsf3+0x1d5>
c00269fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269fe:	f7 d0                	not    eax
c0026a00:	84 c0                	test   al,al
c0026a02:	0f 84 4f 01 00 00    	je     c0026b57 <__addsf3+0x2f9>
c0026a08:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026a0e:	83 f9 1f             	cmp    ecx,0x1f
c0026a11:	0f 8f 40 01 00 00    	jg     c0026b57 <__addsf3+0x2f9>
c0026a17:	89 de                	mov    esi,ebx
c0026a19:	d3 ee                	shr    esi,cl
c0026a1b:	b8 20 00 00 00       	mov    eax,0x20
c0026a20:	29 c8                	sub    eax,ecx
c0026a22:	89 c1                	mov    ecx,eax
c0026a24:	d3 e3                	shl    ebx,cl
c0026a26:	31 c0                	xor    eax,eax
c0026a28:	85 db                	test   ebx,ebx
c0026a2a:	0f 95 c0             	setne  al
c0026a2d:	09 f0                	or     eax,esi
c0026a2f:	29 c2                	sub    edx,eax
c0026a31:	89 d0                	mov    eax,edx
c0026a33:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a36:	e9 af 00 00 00       	jmp    c0026aea <__addsf3+0x28c>
c0026a3b:	74 5c                	je     c0026a99 <__addsf3+0x23b>
c0026a3d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026a40:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a43:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a47:	75 14                	jne    c0026a5d <__addsf3+0x1ff>
c0026a49:	85 d2                	test   edx,edx
c0026a4b:	0f 84 06 01 00 00    	je     c0026b57 <__addsf3+0x2f9>
c0026a51:	48                   	dec    eax
c0026a52:	75 1b                	jne    c0026a6f <__addsf3+0x211>
c0026a54:	89 d8                	mov    eax,ebx
c0026a56:	29 d0                	sub    eax,edx
c0026a58:	e9 8d 00 00 00       	jmp    c0026aea <__addsf3+0x28c>
c0026a5d:	89 f1                	mov    ecx,esi
c0026a5f:	f7 d1                	not    ecx
c0026a61:	84 c9                	test   cl,cl
c0026a63:	0f 84 ee 00 00 00    	je     c0026b57 <__addsf3+0x2f9>
c0026a69:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a6f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a72:	83 f8 1f             	cmp    eax,0x1f
c0026a75:	0f 8f dc 00 00 00    	jg     c0026b57 <__addsf3+0x2f9>
c0026a7b:	89 d7                	mov    edi,edx
c0026a7d:	88 c1                	mov    cl,al
c0026a7f:	d3 ef                	shr    edi,cl
c0026a81:	b9 20 00 00 00       	mov    ecx,0x20
c0026a86:	29 c1                	sub    ecx,eax
c0026a88:	d3 e2                	shl    edx,cl
c0026a8a:	31 c0                	xor    eax,eax
c0026a8c:	85 d2                	test   edx,edx
c0026a8e:	0f 95 c0             	setne  al
c0026a91:	09 f8                	or     eax,edi
c0026a93:	29 c3                	sub    ebx,eax
c0026a95:	89 d8                	mov    eax,ebx
c0026a97:	eb 51                	jmp    c0026aea <__addsf3+0x28c>
c0026a99:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a9c:	40                   	inc    eax
c0026a9d:	a8 fe                	test   al,0xfe
c0026a9f:	75 3d                	jne    c0026ade <__addsf3+0x280>
c0026aa1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026aa5:	0f 85 a7 00 00 00    	jne    c0026b52 <__addsf3+0x2f4>
c0026aab:	85 d2                	test   edx,edx
c0026aad:	75 12                	jne    c0026ac1 <__addsf3+0x263>
c0026aaf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ab2:	85 db                	test   ebx,ebx
c0026ab4:	0f 85 9d 00 00 00    	jne    c0026b57 <__addsf3+0x2f9>
c0026aba:	31 ff                	xor    edi,edi
c0026abc:	e9 96 00 00 00       	jmp    c0026b57 <__addsf3+0x2f9>
c0026ac1:	85 db                	test   ebx,ebx
c0026ac3:	0f 84 8e 00 00 00    	je     c0026b57 <__addsf3+0x2f9>
c0026ac9:	89 d0                	mov    eax,edx
c0026acb:	29 d8                	sub    eax,ebx
c0026acd:	79 06                	jns    c0026ad5 <__addsf3+0x277>
c0026acf:	89 d8                	mov    eax,ebx
c0026ad1:	29 d0                	sub    eax,edx
c0026ad3:	eb 5a                	jmp    c0026b2f <__addsf3+0x2d1>
c0026ad5:	bf 00 00 00 00       	mov    edi,0x0
c0026ada:	74 7b                	je     c0026b57 <__addsf3+0x2f9>
c0026adc:	eb 4a                	jmp    c0026b28 <__addsf3+0x2ca>
c0026ade:	89 d0                	mov    eax,edx
c0026ae0:	29 d8                	sub    eax,ebx
c0026ae2:	79 12                	jns    c0026af6 <__addsf3+0x298>
c0026ae4:	89 d8                	mov    eax,ebx
c0026ae6:	29 d0                	sub    eax,edx
c0026ae8:	eb 09                	jmp    c0026af3 <__addsf3+0x295>
c0026aea:	85 c0                	test   eax,eax
c0026aec:	79 41                	jns    c0026b2f <__addsf3+0x2d1>
c0026aee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026af3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026af6:	31 f6                	xor    esi,esi
c0026af8:	85 c0                	test   eax,eax
c0026afa:	74 33                	je     c0026b2f <__addsf3+0x2d1>
c0026afc:	0f bd c8             	bsr    ecx,eax
c0026aff:	83 f1 1f             	xor    ecx,0x1f
c0026b02:	d3 e0                	shl    eax,cl
c0026b04:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026b08:	39 ca                	cmp    edx,ecx
c0026b0a:	7f 10                	jg     c0026b1c <__addsf3+0x2be>
c0026b0c:	29 d1                	sub    ecx,edx
c0026b0e:	41                   	inc    ecx
c0026b0f:	d3 e8                	shr    eax,cl
c0026b11:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b14:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026b1a:	eb 13                	jmp    c0026b2f <__addsf3+0x2d1>
c0026b1c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b1f:	29 ce                	sub    esi,ecx
c0026b21:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026b26:	eb 07                	jmp    c0026b2f <__addsf3+0x2d1>
c0026b28:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b2b:	eb 02                	jmp    c0026b2f <__addsf3+0x2d1>
c0026b2d:	31 c0                	xor    eax,eax
c0026b2f:	89 c2                	mov    edx,eax
c0026b31:	c1 ea 08             	shr    edx,0x8
c0026b34:	a8 7f                	test   al,0x7f
c0026b36:	0f 95 c1             	setne  cl
c0026b39:	09 d1                	or     ecx,edx
c0026b3b:	83 e1 01             	and    ecx,0x1
c0026b3e:	c1 e8 07             	shr    eax,0x7
c0026b41:	21 c8                	and    eax,ecx
c0026b43:	c1 e6 17             	shl    esi,0x17
c0026b46:	09 d6                	or     esi,edx
c0026b48:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026b4b:	eb 0a                	jmp    c0026b57 <__addsf3+0x2f9>
c0026b4d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b50:	eb 05                	jmp    c0026b57 <__addsf3+0x2f9>
c0026b52:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026b57:	89 f8                	mov    eax,edi
c0026b59:	5a                   	pop    edx
c0026b5a:	59                   	pop    ecx
c0026b5b:	5b                   	pop    ebx
c0026b5c:	5e                   	pop    esi
c0026b5d:	5f                   	pop    edi
c0026b5e:	5d                   	pop    ebp
c0026b5f:	c3                   	ret    

c0026b60 <__subsf3>:
c0026b60:	55                   	push   ebp
c0026b61:	89 e5                	mov    ebp,esp
c0026b63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b66:	05 00 00 00 80       	add    eax,0x80000000
c0026b6b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b6e:	5d                   	pop    ebp
c0026b6f:	e9 ea fc ff ff       	jmp    c002685e <__addsf3>

c0026b74 <__negsf2>:
c0026b74:	55                   	push   ebp
c0026b75:	89 e5                	mov    ebp,esp
c0026b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b7a:	05 00 00 00 80       	add    eax,0x80000000
c0026b7f:	5d                   	pop    ebp
c0026b80:	c3                   	ret    

c0026b81 <__mulsf3>:
c0026b81:	55                   	push   ebp
c0026b82:	89 e5                	mov    ebp,esp
c0026b84:	57                   	push   edi
c0026b85:	56                   	push   esi
c0026b86:	53                   	push   ebx
c0026b87:	83 ec 1c             	sub    esp,0x1c
c0026b8a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b8d:	89 f0                	mov    eax,esi
c0026b8f:	89 f1                	mov    ecx,esi
c0026b91:	c1 f9 17             	sar    ecx,0x17
c0026b94:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b97:	c1 e0 08             	shl    eax,0x8
c0026b9a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b9f:	89 c1                	mov    ecx,eax
c0026ba1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ba4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ba7:	89 c7                	mov    edi,eax
c0026ba9:	c1 ff 17             	sar    edi,0x17
c0026bac:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026bb0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026bb3:	89 f8                	mov    eax,edi
c0026bb5:	0f b6 c0             	movzx  eax,al
c0026bb8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026bbb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026bbf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026bc2:	42                   	inc    edx
c0026bc3:	80 e2 fe             	and    dl,0xfe
c0026bc6:	75 7b                	jne    c0026c43 <__mulsf3+0xc2>
c0026bc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026bcc:	74 54                	je     c0026c22 <__mulsf3+0xa1>
c0026bce:	85 c9                	test   ecx,ecx
c0026bd0:	0f 85 64 01 00 00    	jne    c0026d3a <__mulsf3+0x1b9>
c0026bd6:	8d 57 01             	lea    edx,[edi+0x1]
c0026bd9:	80 e2 fe             	and    dl,0xfe
c0026bdc:	75 1f                	jne    c0026bfd <__mulsf3+0x7c>
c0026bde:	85 c0                	test   eax,eax
c0026be0:	b8 00 00 00 00       	mov    eax,0x0
c0026be5:	74 29                	je     c0026c10 <__mulsf3+0x8f>
c0026be7:	53                   	push   ebx
c0026be8:	53                   	push   ebx
c0026be9:	50                   	push   eax
c0026bea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bed:	e8 96 05 00 00       	call   c0027188 <__nesf2>
c0026bf2:	83 c4 10             	add    esp,0x10
c0026bf5:	85 c0                	test   eax,eax
c0026bf7:	0f 85 3a 01 00 00    	jne    c0026d37 <__mulsf3+0x1b6>
c0026bfd:	85 ff                	test   edi,edi
c0026bff:	0f 89 35 01 00 00    	jns    c0026d3a <__mulsf3+0x1b9>
c0026c05:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026c0b:	e9 2a 01 00 00       	jmp    c0026d3a <__mulsf3+0x1b9>
c0026c10:	51                   	push   ecx
c0026c11:	51                   	push   ecx
c0026c12:	50                   	push   eax
c0026c13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c16:	e8 6d 05 00 00       	call   c0027188 <__nesf2>
c0026c1b:	83 c4 10             	add    esp,0x10
c0026c1e:	85 c0                	test   eax,eax
c0026c20:	eb 15                	jmp    c0026c37 <__mulsf3+0xb6>
c0026c22:	85 c9                	test   ecx,ecx
c0026c24:	74 0b                	je     c0026c31 <__mulsf3+0xb0>
c0026c26:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026c29:	01 c9                	add    ecx,ecx
c0026c2b:	78 16                	js     c0026c43 <__mulsf3+0xc2>
c0026c2d:	89 d3                	mov    ebx,edx
c0026c2f:	eb f5                	jmp    c0026c26 <__mulsf3+0xa5>
c0026c31:	89 f8                	mov    eax,edi
c0026c33:	f7 d0                	not    eax
c0026c35:	84 c0                	test   al,al
c0026c37:	75 c4                	jne    c0026bfd <__mulsf3+0x7c>
c0026c39:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026c3e:	e9 f7 00 00 00       	jmp    c0026d3a <__mulsf3+0x1b9>
c0026c43:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026c46:	c1 e6 08             	shl    esi,0x8
c0026c49:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026c4f:	8d 57 01             	lea    edx,[edi+0x1]
c0026c52:	80 e2 fe             	and    dl,0xfe
c0026c55:	75 63                	jne    c0026cba <__mulsf3+0x139>
c0026c57:	85 c0                	test   eax,eax
c0026c59:	74 2f                	je     c0026c8a <__mulsf3+0x109>
c0026c5b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c5f:	0f 89 d2 00 00 00    	jns    c0026d37 <__mulsf3+0x1b6>
c0026c65:	52                   	push   edx
c0026c66:	52                   	push   edx
c0026c67:	6a 00                	push   0x0
c0026c69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c6c:	e8 dc 04 00 00       	call   c002714d <__eqsf2>
c0026c71:	83 c4 10             	add    esp,0x10
c0026c74:	85 c0                	test   eax,eax
c0026c76:	0f 85 bb 00 00 00    	jne    c0026d37 <__mulsf3+0x1b6>
c0026c7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c7f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c85:	e9 b0 00 00 00       	jmp    c0026d3a <__mulsf3+0x1b9>
c0026c8a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c8d:	50                   	push   eax
c0026c8e:	50                   	push   eax
c0026c8f:	6a 00                	push   0x0
c0026c91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c94:	e8 b4 04 00 00       	call   c002714d <__eqsf2>
c0026c99:	83 c4 10             	add    esp,0x10
c0026c9c:	85 c0                	test   eax,eax
c0026c9e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ca1:	75 0c                	jne    c0026caf <__mulsf3+0x12e>
c0026ca3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ca7:	0f 89 8a 00 00 00    	jns    c0026d37 <__mulsf3+0x1b6>
c0026cad:	eb cd                	jmp    c0026c7c <__mulsf3+0xfb>
c0026caf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026cb2:	01 f6                	add    esi,esi
c0026cb4:	78 04                	js     c0026cba <__mulsf3+0x139>
c0026cb6:	89 c3                	mov    ebx,eax
c0026cb8:	eb f5                	jmp    c0026caf <__mulsf3+0x12e>
c0026cba:	89 c8                	mov    eax,ecx
c0026cbc:	0d 00 00 00 80       	or     eax,0x80000000
c0026cc1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026cc7:	f7 e6                	mul    esi
c0026cc9:	85 c0                	test   eax,eax
c0026ccb:	0f 95 c0             	setne  al
c0026cce:	0f b6 c0             	movzx  eax,al
c0026cd1:	09 c2                	or     edx,eax
c0026cd3:	78 03                	js     c0026cd8 <__mulsf3+0x157>
c0026cd5:	01 d2                	add    edx,edx
c0026cd7:	4b                   	dec    ebx
c0026cd8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026cde:	7f 22                	jg     c0026d02 <__mulsf3+0x181>
c0026ce0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026ce6:	85 db                	test   ebx,ebx
c0026ce8:	7f 23                	jg     c0026d0d <__mulsf3+0x18c>
c0026cea:	83 fb e9             	cmp    ebx,0xffffffe9
c0026ced:	7c 1a                	jl     c0026d09 <__mulsf3+0x188>
c0026cef:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026cf5:	b9 01 00 00 00       	mov    ecx,0x1
c0026cfa:	29 d9                	sub    ecx,ebx
c0026cfc:	d3 ea                	shr    edx,cl
c0026cfe:	31 db                	xor    ebx,ebx
c0026d00:	eb 0b                	jmp    c0026d0d <__mulsf3+0x18c>
c0026d02:	bb ff 00 00 00       	mov    ebx,0xff
c0026d07:	eb 02                	jmp    c0026d0b <__mulsf3+0x18a>
c0026d09:	31 db                	xor    ebx,ebx
c0026d0b:	31 d2                	xor    edx,edx
c0026d0d:	89 d0                	mov    eax,edx
c0026d0f:	c1 e8 08             	shr    eax,0x8
c0026d12:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026d15:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026d1b:	09 fb                	or     ebx,edi
c0026d1d:	c1 e3 17             	shl    ebx,0x17
c0026d20:	09 c3                	or     ebx,eax
c0026d22:	f6 c2 7f             	test   dl,0x7f
c0026d25:	0f 95 c1             	setne  cl
c0026d28:	09 c8                	or     eax,ecx
c0026d2a:	83 e0 01             	and    eax,0x1
c0026d2d:	c1 ea 07             	shr    edx,0x7
c0026d30:	21 c2                	and    edx,eax
c0026d32:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026d35:	eb 03                	jmp    c0026d3a <__mulsf3+0x1b9>
c0026d37:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026d3a:	89 f0                	mov    eax,esi
c0026d3c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026d3f:	5b                   	pop    ebx
c0026d40:	5e                   	pop    esi
c0026d41:	5f                   	pop    edi
c0026d42:	5d                   	pop    ebp
c0026d43:	c3                   	ret    

c0026d44 <__divsf3>:
c0026d44:	55                   	push   ebp
c0026d45:	89 e5                	mov    ebp,esp
c0026d47:	57                   	push   edi
c0026d48:	56                   	push   esi
c0026d49:	53                   	push   ebx
c0026d4a:	83 ec 1c             	sub    esp,0x1c
c0026d4d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026d50:	89 d8                	mov    eax,ebx
c0026d52:	89 d9                	mov    ecx,ebx
c0026d54:	c1 f9 17             	sar    ecx,0x17
c0026d57:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d5a:	c1 e0 08             	shl    eax,0x8
c0026d5d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d62:	89 c1                	mov    ecx,eax
c0026d64:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d67:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d6a:	89 c7                	mov    edi,eax
c0026d6c:	c1 ff 17             	sar    edi,0x17
c0026d6f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d73:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d76:	89 f8                	mov    eax,edi
c0026d78:	0f b6 c0             	movzx  eax,al
c0026d7b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d7e:	29 c6                	sub    esi,eax
c0026d80:	83 c6 7f             	add    esi,0x7f
c0026d83:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d86:	42                   	inc    edx
c0026d87:	80 e2 fe             	and    dl,0xfe
c0026d8a:	0f 85 9c 00 00 00    	jne    c0026e2c <__divsf3+0xe8>
c0026d90:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d94:	74 33                	je     c0026dc9 <__divsf3+0x85>
c0026d96:	85 c9                	test   ecx,ecx
c0026d98:	0f 85 c7 01 00 00    	jne    c0026f65 <__divsf3+0x221>
c0026d9e:	8d 57 01             	lea    edx,[edi+0x1]
c0026da1:	80 e2 fe             	and    dl,0xfe
c0026da4:	75 2f                	jne    c0026dd5 <__divsf3+0x91>
c0026da6:	85 c0                	test   eax,eax
c0026da8:	74 2b                	je     c0026dd5 <__divsf3+0x91>
c0026daa:	51                   	push   ecx
c0026dab:	51                   	push   ecx
c0026dac:	6a 00                	push   0x0
c0026dae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026db1:	e8 d2 03 00 00       	call   c0027188 <__nesf2>
c0026db6:	83 c4 10             	add    esp,0x10
c0026db9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026dbc:	85 c0                	test   eax,eax
c0026dbe:	0f 85 a1 01 00 00    	jne    c0026f65 <__divsf3+0x221>
c0026dc4:	e9 92 01 00 00       	jmp    c0026f5b <__divsf3+0x217>
c0026dc9:	85 c9                	test   ecx,ecx
c0026dcb:	75 1b                	jne    c0026de8 <__divsf3+0xa4>
c0026dcd:	8d 57 01             	lea    edx,[edi+0x1]
c0026dd0:	80 e2 fe             	and    dl,0xfe
c0026dd3:	74 1e                	je     c0026df3 <__divsf3+0xaf>
c0026dd5:	85 ff                	test   edi,edi
c0026dd7:	0f 89 88 01 00 00    	jns    c0026f65 <__divsf3+0x221>
c0026ddd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026de3:	e9 7d 01 00 00       	jmp    c0026f65 <__divsf3+0x221>
c0026de8:	8d 56 ff             	lea    edx,[esi-0x1]
c0026deb:	01 c9                	add    ecx,ecx
c0026ded:	78 3d                	js     c0026e2c <__divsf3+0xe8>
c0026def:	89 d6                	mov    esi,edx
c0026df1:	eb f5                	jmp    c0026de8 <__divsf3+0xa4>
c0026df3:	85 c0                	test   eax,eax
c0026df5:	b8 00 00 00 00       	mov    eax,0x0
c0026dfa:	74 18                	je     c0026e14 <__divsf3+0xd0>
c0026dfc:	52                   	push   edx
c0026dfd:	52                   	push   edx
c0026dfe:	50                   	push   eax
c0026dff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e02:	e8 81 03 00 00       	call   c0027188 <__nesf2>
c0026e07:	83 c4 10             	add    esp,0x10
c0026e0a:	85 c0                	test   eax,eax
c0026e0c:	0f 85 50 01 00 00    	jne    c0026f62 <__divsf3+0x21e>
c0026e12:	eb c1                	jmp    c0026dd5 <__divsf3+0x91>
c0026e14:	56                   	push   esi
c0026e15:	56                   	push   esi
c0026e16:	50                   	push   eax
c0026e17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e1a:	e8 69 03 00 00       	call   c0027188 <__nesf2>
c0026e1f:	83 c4 10             	add    esp,0x10
c0026e22:	85 c0                	test   eax,eax
c0026e24:	0f 84 31 01 00 00    	je     c0026f5b <__divsf3+0x217>
c0026e2a:	eb a9                	jmp    c0026dd5 <__divsf3+0x91>
c0026e2c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026e2f:	c1 e3 08             	shl    ebx,0x8
c0026e32:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026e38:	8d 57 01             	lea    edx,[edi+0x1]
c0026e3b:	80 e2 fe             	and    dl,0xfe
c0026e3e:	75 71                	jne    c0026eb1 <__divsf3+0x16d>
c0026e40:	85 c0                	test   eax,eax
c0026e42:	ba 00 00 00 00       	mov    edx,0x0
c0026e47:	74 2f                	je     c0026e78 <__divsf3+0x134>
c0026e49:	51                   	push   ecx
c0026e4a:	51                   	push   ecx
c0026e4b:	52                   	push   edx
c0026e4c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e4f:	e8 f9 02 00 00       	call   c002714d <__eqsf2>
c0026e54:	83 c4 10             	add    esp,0x10
c0026e57:	85 c0                	test   eax,eax
c0026e59:	0f 85 03 01 00 00    	jne    c0026f62 <__divsf3+0x21e>
c0026e5f:	31 d2                	xor    edx,edx
c0026e61:	89 d3                	mov    ebx,edx
c0026e63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e66:	31 f8                	xor    eax,edi
c0026e68:	0f 89 f7 00 00 00    	jns    c0026f65 <__divsf3+0x221>
c0026e6e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e73:	e9 ed 00 00 00       	jmp    c0026f65 <__divsf3+0x221>
c0026e78:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e7b:	50                   	push   eax
c0026e7c:	50                   	push   eax
c0026e7d:	52                   	push   edx
c0026e7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e81:	e8 c7 02 00 00       	call   c002714d <__eqsf2>
c0026e86:	83 c4 10             	add    esp,0x10
c0026e89:	85 c0                	test   eax,eax
c0026e8b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e8e:	75 16                	jne    c0026ea6 <__divsf3+0x162>
c0026e90:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e93:	31 fb                	xor    ebx,edi
c0026e95:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e9b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026ea1:	e9 bf 00 00 00       	jmp    c0026f65 <__divsf3+0x221>
c0026ea6:	8d 46 01             	lea    eax,[esi+0x1]
c0026ea9:	01 db                	add    ebx,ebx
c0026eab:	78 04                	js     c0026eb1 <__divsf3+0x16d>
c0026ead:	89 c6                	mov    esi,eax
c0026eaf:	eb f5                	jmp    c0026ea6 <__divsf3+0x162>
c0026eb1:	89 c8                	mov    eax,ecx
c0026eb3:	0d 00 00 00 80       	or     eax,0x80000000
c0026eb8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ebe:	31 d2                	xor    edx,edx
c0026ec0:	39 d8                	cmp    eax,ebx
c0026ec2:	72 07                	jb     c0026ecb <__divsf3+0x187>
c0026ec4:	29 d8                	sub    eax,ebx
c0026ec6:	ba 01 00 00 00       	mov    edx,0x1
c0026ecb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026ed2:	01 d2                	add    edx,edx
c0026ed4:	89 c1                	mov    ecx,eax
c0026ed6:	01 c0                	add    eax,eax
c0026ed8:	85 c9                	test   ecx,ecx
c0026eda:	78 04                	js     c0026ee0 <__divsf3+0x19c>
c0026edc:	39 c3                	cmp    ebx,eax
c0026ede:	77 05                	ja     c0026ee5 <__divsf3+0x1a1>
c0026ee0:	29 d8                	sub    eax,ebx
c0026ee2:	83 ca 01             	or     edx,0x1
c0026ee5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026ee8:	75 e8                	jne    c0026ed2 <__divsf3+0x18e>
c0026eea:	85 c0                	test   eax,eax
c0026eec:	0f 95 c0             	setne  al
c0026eef:	0f b6 c0             	movzx  eax,al
c0026ef2:	c1 e2 06             	shl    edx,0x6
c0026ef5:	09 c2                	or     edx,eax
c0026ef7:	78 03                	js     c0026efc <__divsf3+0x1b8>
c0026ef9:	01 d2                	add    edx,edx
c0026efb:	4e                   	dec    esi
c0026efc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026f02:	7f 22                	jg     c0026f26 <__divsf3+0x1e2>
c0026f04:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f0a:	85 f6                	test   esi,esi
c0026f0c:	7f 23                	jg     c0026f31 <__divsf3+0x1ed>
c0026f0e:	83 fe e9             	cmp    esi,0xffffffe9
c0026f11:	7c 1a                	jl     c0026f2d <__divsf3+0x1e9>
c0026f13:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f19:	b9 01 00 00 00       	mov    ecx,0x1
c0026f1e:	29 f1                	sub    ecx,esi
c0026f20:	d3 ea                	shr    edx,cl
c0026f22:	31 f6                	xor    esi,esi
c0026f24:	eb 0b                	jmp    c0026f31 <__divsf3+0x1ed>
c0026f26:	be ff 00 00 00       	mov    esi,0xff
c0026f2b:	eb 02                	jmp    c0026f2f <__divsf3+0x1eb>
c0026f2d:	31 f6                	xor    esi,esi
c0026f2f:	31 d2                	xor    edx,edx
c0026f31:	89 d0                	mov    eax,edx
c0026f33:	c1 e8 08             	shr    eax,0x8
c0026f36:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f39:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f3f:	09 fe                	or     esi,edi
c0026f41:	c1 e6 17             	shl    esi,0x17
c0026f44:	09 c6                	or     esi,eax
c0026f46:	f6 c2 7f             	test   dl,0x7f
c0026f49:	0f 95 c1             	setne  cl
c0026f4c:	09 c8                	or     eax,ecx
c0026f4e:	83 e0 01             	and    eax,0x1
c0026f51:	c1 ea 07             	shr    edx,0x7
c0026f54:	21 c2                	and    edx,eax
c0026f56:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f59:	eb 0a                	jmp    c0026f65 <__divsf3+0x221>
c0026f5b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f60:	eb 03                	jmp    c0026f65 <__divsf3+0x221>
c0026f62:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f65:	89 d8                	mov    eax,ebx
c0026f67:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f6a:	5b                   	pop    ebx
c0026f6b:	5e                   	pop    esi
c0026f6c:	5f                   	pop    edi
c0026f6d:	5d                   	pop    ebp
c0026f6e:	c3                   	ret    

c0026f6f <__floatsisf>:
c0026f6f:	55                   	push   ebp
c0026f70:	89 e5                	mov    ebp,esp
c0026f72:	53                   	push   ebx
c0026f73:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f76:	85 d2                	test   edx,edx
c0026f78:	7e 2b                	jle    c0026fa5 <__floatsisf+0x36>
c0026f7a:	0f bd ca             	bsr    ecx,edx
c0026f7d:	83 f1 1f             	xor    ecx,0x1f
c0026f80:	d3 e2                	shl    edx,cl
c0026f82:	89 d0                	mov    eax,edx
c0026f84:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f89:	89 c3                	mov    ebx,eax
c0026f8b:	c1 eb 08             	shr    ebx,0x8
c0026f8e:	80 e2 7f             	and    dl,0x7f
c0026f91:	0f 95 c2             	setne  dl
c0026f94:	09 da                	or     edx,ebx
c0026f96:	83 e2 01             	and    edx,0x1
c0026f99:	c1 e8 07             	shr    eax,0x7
c0026f9c:	21 c2                	and    edx,eax
c0026f9e:	b8 9e 00 00 00       	mov    eax,0x9e
c0026fa3:	eb 32                	jmp    c0026fd7 <__floatsisf+0x68>
c0026fa5:	b8 00 00 00 00       	mov    eax,0x0
c0026faa:	74 34                	je     c0026fe0 <__floatsisf+0x71>
c0026fac:	f7 da                	neg    edx
c0026fae:	0f bd ca             	bsr    ecx,edx
c0026fb1:	83 f1 1f             	xor    ecx,0x1f
c0026fb4:	d3 e2                	shl    edx,cl
c0026fb6:	89 d0                	mov    eax,edx
c0026fb8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fbd:	89 c3                	mov    ebx,eax
c0026fbf:	c1 eb 08             	shr    ebx,0x8
c0026fc2:	80 e2 7f             	and    dl,0x7f
c0026fc5:	0f 95 c2             	setne  dl
c0026fc8:	09 da                	or     edx,ebx
c0026fca:	83 e2 01             	and    edx,0x1
c0026fcd:	c1 e8 07             	shr    eax,0x7
c0026fd0:	21 c2                	and    edx,eax
c0026fd2:	b8 9e 01 00 00       	mov    eax,0x19e
c0026fd7:	29 c8                	sub    eax,ecx
c0026fd9:	c1 e0 17             	shl    eax,0x17
c0026fdc:	09 d8                	or     eax,ebx
c0026fde:	01 d0                	add    eax,edx
c0026fe0:	5b                   	pop    ebx
c0026fe1:	5d                   	pop    ebp
c0026fe2:	c3                   	ret    

c0026fe3 <__floatunsisf>:
c0026fe3:	55                   	push   ebp
c0026fe4:	89 e5                	mov    ebp,esp
c0026fe6:	53                   	push   ebx
c0026fe7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fea:	31 c0                	xor    eax,eax
c0026fec:	85 d2                	test   edx,edx
c0026fee:	74 32                	je     c0027022 <__floatunsisf+0x3f>
c0026ff0:	0f bd ca             	bsr    ecx,edx
c0026ff3:	83 f1 1f             	xor    ecx,0x1f
c0026ff6:	d3 e2                	shl    edx,cl
c0026ff8:	89 d0                	mov    eax,edx
c0026ffa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fff:	89 c3                	mov    ebx,eax
c0027001:	c1 eb 08             	shr    ebx,0x8
c0027004:	80 e2 7f             	and    dl,0x7f
c0027007:	0f 95 c2             	setne  dl
c002700a:	09 da                	or     edx,ebx
c002700c:	83 e2 01             	and    edx,0x1
c002700f:	c1 e8 07             	shr    eax,0x7
c0027012:	21 c2                	and    edx,eax
c0027014:	b8 9e 00 00 00       	mov    eax,0x9e
c0027019:	29 c8                	sub    eax,ecx
c002701b:	c1 e0 17             	shl    eax,0x17
c002701e:	09 d8                	or     eax,ebx
c0027020:	01 d0                	add    eax,edx
c0027022:	5b                   	pop    ebx
c0027023:	5d                   	pop    ebp
c0027024:	c3                   	ret    

c0027025 <__fixsfsi>:
c0027025:	55                   	push   ebp
c0027026:	89 e5                	mov    ebp,esp
c0027028:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002702b:	89 d1                	mov    ecx,edx
c002702d:	c1 e1 08             	shl    ecx,0x8
c0027030:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027036:	c1 fa 17             	sar    edx,0x17
c0027039:	78 1c                	js     c0027057 <__fixsfsi+0x32>
c002703b:	83 ea 7f             	sub    edx,0x7f
c002703e:	31 c0                	xor    eax,eax
c0027040:	83 fa 1e             	cmp    edx,0x1e
c0027043:	77 40                	ja     c0027085 <__fixsfsi+0x60>
c0027045:	89 c8                	mov    eax,ecx
c0027047:	0d 00 00 00 80       	or     eax,0x80000000
c002704c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027051:	29 d1                	sub    ecx,edx
c0027053:	d3 e8                	shr    eax,cl
c0027055:	eb 2e                	jmp    c0027085 <__fixsfsi+0x60>
c0027057:	31 c0                	xor    eax,eax
c0027059:	81 c2 81 00 00 00    	add    edx,0x81
c002705f:	78 24                	js     c0027085 <__fixsfsi+0x60>
c0027061:	83 fa 1e             	cmp    edx,0x1e
c0027064:	7e 09                	jle    c002706f <__fixsfsi+0x4a>
c0027066:	83 fa 1f             	cmp    edx,0x1f
c0027069:	75 18                	jne    c0027083 <__fixsfsi+0x5e>
c002706b:	85 c9                	test   ecx,ecx
c002706d:	75 14                	jne    c0027083 <__fixsfsi+0x5e>
c002706f:	89 c8                	mov    eax,ecx
c0027071:	0d 00 00 00 80       	or     eax,0x80000000
c0027076:	b9 1f 00 00 00       	mov    ecx,0x1f
c002707b:	29 d1                	sub    ecx,edx
c002707d:	d3 e8                	shr    eax,cl
c002707f:	f7 d8                	neg    eax
c0027081:	eb 02                	jmp    c0027085 <__fixsfsi+0x60>
c0027083:	31 c0                	xor    eax,eax
c0027085:	5d                   	pop    ebp
c0027086:	c3                   	ret    

c0027087 <__fixunssfsi>:
c0027087:	55                   	push   ebp
c0027088:	89 e5                	mov    ebp,esp
c002708a:	53                   	push   ebx
c002708b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002708e:	89 d3                	mov    ebx,edx
c0027090:	c1 fb 17             	sar    ebx,0x17
c0027093:	83 eb 7f             	sub    ebx,0x7f
c0027096:	31 c0                	xor    eax,eax
c0027098:	83 fb 1f             	cmp    ebx,0x1f
c002709b:	77 18                	ja     c00270b5 <__fixunssfsi+0x2e>
c002709d:	89 d0                	mov    eax,edx
c002709f:	c1 e0 08             	shl    eax,0x8
c00270a2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270a7:	0d 00 00 00 80       	or     eax,0x80000000
c00270ac:	b9 1f 00 00 00       	mov    ecx,0x1f
c00270b1:	29 d9                	sub    ecx,ebx
c00270b3:	d3 e8                	shr    eax,cl
c00270b5:	5b                   	pop    ebx
c00270b6:	5d                   	pop    ebp
c00270b7:	c3                   	ret    

c00270b8 <__cmpsf2>:
c00270b8:	55                   	push   ebp
c00270b9:	89 e5                	mov    ebp,esp
c00270bb:	57                   	push   edi
c00270bc:	56                   	push   esi
c00270bd:	53                   	push   ebx
c00270be:	83 ec 24             	sub    esp,0x24
c00270c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270c7:	e8 4f 10 00 00       	call   c002811b <__truncdfsf2>
c00270cc:	5a                   	pop    edx
c00270cd:	59                   	pop    ecx
c00270ce:	89 c3                	mov    ebx,eax
c00270d0:	c1 e8 17             	shr    eax,0x17
c00270d3:	0f b6 f0             	movzx  esi,al
c00270d6:	89 d8                	mov    eax,ebx
c00270d8:	c1 e8 1f             	shr    eax,0x1f
c00270db:	31 c6                	xor    esi,eax
c00270dd:	c1 e3 08             	shl    ebx,0x8
c00270e0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00270e3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00270e6:	e8 30 10 00 00       	call   c002811b <__truncdfsf2>
c00270eb:	83 c4 10             	add    esp,0x10
c00270ee:	89 c1                	mov    ecx,eax
c00270f0:	c1 e9 17             	shr    ecx,0x17
c00270f3:	0f b6 c9             	movzx  ecx,cl
c00270f6:	89 c7                	mov    edi,eax
c00270f8:	c1 ef 1f             	shr    edi,0x1f
c00270fb:	89 ca                	mov    edx,ecx
c00270fd:	31 fa                	xor    edx,edi
c00270ff:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027102:	c1 e0 08             	shl    eax,0x8
c0027105:	89 c2                	mov    edx,eax
c0027107:	89 d8                	mov    eax,ebx
c0027109:	09 d0                	or     eax,edx
c002710b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027110:	09 f0                	or     eax,esi
c0027112:	75 08                	jne    c002711c <__cmpsf2+0x64>
c0027114:	31 c0                	xor    eax,eax
c0027116:	39 f9                	cmp    ecx,edi
c0027118:	75 0c                	jne    c0027126 <__cmpsf2+0x6e>
c002711a:	eb 29                	jmp    c0027145 <__cmpsf2+0x8d>
c002711c:	b8 01 00 00 00       	mov    eax,0x1
c0027121:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027124:	7f 1f                	jg     c0027145 <__cmpsf2+0x8d>
c0027126:	83 c8 ff             	or     eax,0xffffffff
c0027129:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002712c:	7c 17                	jl     c0027145 <__cmpsf2+0x8d>
c002712e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027134:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002713a:	b8 01 00 00 00       	mov    eax,0x1
c002713f:	39 d3                	cmp    ebx,edx
c0027141:	77 02                	ja     c0027145 <__cmpsf2+0x8d>
c0027143:	19 c0                	sbb    eax,eax
c0027145:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027148:	5b                   	pop    ebx
c0027149:	5e                   	pop    esi
c002714a:	5f                   	pop    edi
c002714b:	5d                   	pop    ebp
c002714c:	c3                   	ret    

c002714d <__eqsf2>:
c002714d:	55                   	push   ebp
c002714e:	89 e5                	mov    ebp,esp
c0027150:	83 ec 24             	sub    esp,0x24
c0027153:	6a 01                	push   0x1
c0027155:	83 ec 0c             	sub    esp,0xc
c0027158:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002715b:	e8 df 10 00 00       	call   c002823f <__extendsfdf2>
c0027160:	83 c4 10             	add    esp,0x10
c0027163:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027166:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027169:	52                   	push   edx
c002716a:	50                   	push   eax
c002716b:	50                   	push   eax
c002716c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002716f:	e8 cb 10 00 00       	call   c002823f <__extendsfdf2>
c0027174:	59                   	pop    ecx
c0027175:	59                   	pop    ecx
c0027176:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027179:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002717c:	52                   	push   edx
c002717d:	50                   	push   eax
c002717e:	e8 35 ff ff ff       	call   c00270b8 <__cmpsf2>
c0027183:	83 c4 20             	add    esp,0x20
c0027186:	c9                   	leave  
c0027187:	c3                   	ret    

c0027188 <__nesf2>:
c0027188:	eb c3                	jmp    c002714d <__eqsf2>

c002718a <__gtsf2>:
c002718a:	55                   	push   ebp
c002718b:	89 e5                	mov    ebp,esp
c002718d:	83 ec 24             	sub    esp,0x24
c0027190:	6a ff                	push   0xffffffff
c0027192:	83 ec 0c             	sub    esp,0xc
c0027195:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027198:	e8 a2 10 00 00       	call   c002823f <__extendsfdf2>
c002719d:	83 c4 10             	add    esp,0x10
c00271a0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00271a3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00271a6:	52                   	push   edx
c00271a7:	50                   	push   eax
c00271a8:	50                   	push   eax
c00271a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00271ac:	e8 8e 10 00 00       	call   c002823f <__extendsfdf2>
c00271b1:	59                   	pop    ecx
c00271b2:	59                   	pop    ecx
c00271b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00271b6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00271b9:	52                   	push   edx
c00271ba:	50                   	push   eax
c00271bb:	e8 f8 fe ff ff       	call   c00270b8 <__cmpsf2>
c00271c0:	83 c4 20             	add    esp,0x20
c00271c3:	c9                   	leave  
c00271c4:	c3                   	ret    

c00271c5 <__gesf2>:
c00271c5:	eb c3                	jmp    c002718a <__gtsf2>

c00271c7 <__ltsf2>:
c00271c7:	eb 84                	jmp    c002714d <__eqsf2>

c00271c9 <__lesf2>:
c00271c9:	eb 82                	jmp    c002714d <__eqsf2>

c00271cb <__adddf3>:
c00271cb:	55                   	push   ebp
c00271cc:	89 e5                	mov    ebp,esp
c00271ce:	57                   	push   edi
c00271cf:	56                   	push   esi
c00271d0:	53                   	push   ebx
c00271d1:	83 ec 24             	sub    esp,0x24
c00271d4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00271d7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00271da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00271dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271e0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00271e3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00271e6:	89 c8                	mov    eax,ecx
c00271e8:	89 ce                	mov    esi,ecx
c00271ea:	c1 fe 14             	sar    esi,0x14
c00271ed:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00271f0:	89 fb                	mov    ebx,edi
c00271f2:	89 fa                	mov    edx,edi
c00271f4:	c1 e2 0b             	shl    edx,0xb
c00271f7:	c1 e0 0b             	shl    eax,0xb
c00271fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271ff:	c1 eb 15             	shr    ebx,0x15
c0027202:	09 d8                	or     eax,ebx
c0027204:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027207:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002720a:	c1 fe 14             	sar    esi,0x14
c002720d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027210:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027213:	89 f3                	mov    ebx,esi
c0027215:	c1 e3 0b             	shl    ebx,0xb
c0027218:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002721b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002721e:	c1 e3 0b             	shl    ebx,0xb
c0027221:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027227:	c1 ee 15             	shr    esi,0x15
c002722a:	09 f3                	or     ebx,esi
c002722c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002722f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027232:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027235:	0f 88 5f 02 00 00    	js     c002749a <__adddf3+0x2cf>
c002723b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002723e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027241:	85 db                	test   ebx,ebx
c0027243:	0f 8e c7 00 00 00    	jle    c0027310 <__adddf3+0x145>
c0027249:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027250:	75 1a                	jne    c002726c <__adddf3+0xa1>
c0027252:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027255:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027258:	0f 84 b2 05 00 00    	je     c0027810 <__adddf3+0x645>
c002725e:	4b                   	dec    ebx
c002725f:	75 23                	jne    c0027284 <__adddf3+0xb9>
c0027261:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027264:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027267:	e9 99 00 00 00       	jmp    c0027305 <__adddf3+0x13a>
c002726c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002726f:	f7 d6                	not    esi
c0027271:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027277:	0f 84 93 05 00 00    	je     c0027810 <__adddf3+0x645>
c002727d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027284:	83 fb 1f             	cmp    ebx,0x1f
c0027287:	7e 42                	jle    c00272cb <__adddf3+0x100>
c0027289:	83 fb 3f             	cmp    ebx,0x3f
c002728c:	0f 8f 7e 05 00 00    	jg     c0027810 <__adddf3+0x645>
c0027292:	83 e3 1f             	and    ebx,0x1f
c0027295:	89 d9                	mov    ecx,ebx
c0027297:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002729a:	d3 ef                	shr    edi,cl
c002729c:	31 db                	xor    ebx,ebx
c002729e:	85 c9                	test   ecx,ecx
c00272a0:	74 15                	je     c00272b7 <__adddf3+0xec>
c00272a2:	be 20 00 00 00       	mov    esi,0x20
c00272a7:	29 ce                	sub    esi,ecx
c00272a9:	89 f1                	mov    ecx,esi
c00272ab:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272ae:	d3 e6                	shl    esi,cl
c00272b0:	31 db                	xor    ebx,ebx
c00272b2:	85 f6                	test   esi,esi
c00272b4:	0f 95 c3             	setne  bl
c00272b7:	31 c9                	xor    ecx,ecx
c00272b9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00272bd:	0f 95 c1             	setne  cl
c00272c0:	09 cf                	or     edi,ecx
c00272c2:	09 fb                	or     ebx,edi
c00272c4:	01 da                	add    edx,ebx
c00272c6:	83 d0 00             	adc    eax,0x0
c00272c9:	eb 3a                	jmp    c0027305 <__adddf3+0x13a>
c00272cb:	bf 20 00 00 00       	mov    edi,0x20
c00272d0:	29 df                	sub    edi,ebx
c00272d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272d5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272d8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272db:	d3 e6                	shl    esi,cl
c00272dd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272e0:	88 d9                	mov    cl,bl
c00272e2:	d3 ef                	shr    edi,cl
c00272e4:	09 fe                	or     esi,edi
c00272e6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00272e9:	88 d9                	mov    cl,bl
c00272eb:	d3 ef                	shr    edi,cl
c00272ed:	89 fb                	mov    ebx,edi
c00272ef:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00272f2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00272f5:	d3 e7                	shl    edi,cl
c00272f7:	85 ff                	test   edi,edi
c00272f9:	0f 95 c1             	setne  cl
c00272fc:	0f b6 c9             	movzx  ecx,cl
c00272ff:	09 ce                	or     esi,ecx
c0027301:	01 f2                	add    edx,esi
c0027303:	11 d8                	adc    eax,ebx
c0027305:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027308:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002730b:	e9 52 01 00 00       	jmp    c0027462 <__adddf3+0x297>
c0027310:	0f 84 d5 00 00 00    	je     c00273eb <__adddf3+0x220>
c0027316:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027319:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002731c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002731f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027322:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027329:	75 20                	jne    c002734b <__adddf3+0x180>
c002732b:	89 d6                	mov    esi,edx
c002732d:	09 c6                	or     esi,eax
c002732f:	0f 84 db 04 00 00    	je     c0027810 <__adddf3+0x645>
c0027335:	4b                   	dec    ebx
c0027336:	75 29                	jne    c0027361 <__adddf3+0x196>
c0027338:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002733b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002733e:	01 d1                	add    ecx,edx
c0027340:	11 c6                	adc    esi,eax
c0027342:	89 f0                	mov    eax,esi
c0027344:	89 ca                	mov    edx,ecx
c0027346:	e9 17 01 00 00       	jmp    c0027462 <__adddf3+0x297>
c002734b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002734e:	f7 d6                	not    esi
c0027350:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027356:	0f 84 b4 04 00 00    	je     c0027810 <__adddf3+0x645>
c002735c:	0d 00 00 00 80       	or     eax,0x80000000
c0027361:	83 fb 1f             	cmp    ebx,0x1f
c0027364:	7e 48                	jle    c00273ae <__adddf3+0x1e3>
c0027366:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027369:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002736c:	83 fb 3f             	cmp    ebx,0x3f
c002736f:	0f 8f 9b 04 00 00    	jg     c0027810 <__adddf3+0x645>
c0027375:	83 e3 1f             	and    ebx,0x1f
c0027378:	89 d9                	mov    ecx,ebx
c002737a:	89 c7                	mov    edi,eax
c002737c:	d3 ef                	shr    edi,cl
c002737e:	31 db                	xor    ebx,ebx
c0027380:	85 c9                	test   ecx,ecx
c0027382:	74 12                	je     c0027396 <__adddf3+0x1cb>
c0027384:	be 20 00 00 00       	mov    esi,0x20
c0027389:	29 ce                	sub    esi,ecx
c002738b:	89 f1                	mov    ecx,esi
c002738d:	d3 e0                	shl    eax,cl
c002738f:	31 db                	xor    ebx,ebx
c0027391:	85 c0                	test   eax,eax
c0027393:	0f 95 c3             	setne  bl
c0027396:	31 c0                	xor    eax,eax
c0027398:	85 d2                	test   edx,edx
c002739a:	0f 95 c0             	setne  al
c002739d:	09 c7                	or     edi,eax
c002739f:	09 fb                	or     ebx,edi
c00273a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273a4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273a7:	01 da                	add    edx,ebx
c00273a9:	83 d6 00             	adc    esi,0x0
c00273ac:	eb 39                	jmp    c00273e7 <__adddf3+0x21c>
c00273ae:	be 20 00 00 00       	mov    esi,0x20
c00273b3:	29 de                	sub    esi,ebx
c00273b5:	89 c7                	mov    edi,eax
c00273b7:	89 f1                	mov    ecx,esi
c00273b9:	d3 e7                	shl    edi,cl
c00273bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00273be:	89 d7                	mov    edi,edx
c00273c0:	88 d9                	mov    cl,bl
c00273c2:	d3 ef                	shr    edi,cl
c00273c4:	89 f9                	mov    ecx,edi
c00273c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273c9:	09 cf                	or     edi,ecx
c00273cb:	88 d9                	mov    cl,bl
c00273cd:	d3 e8                	shr    eax,cl
c00273cf:	89 f1                	mov    ecx,esi
c00273d1:	d3 e2                	shl    edx,cl
c00273d3:	85 d2                	test   edx,edx
c00273d5:	0f 95 c2             	setne  dl
c00273d8:	0f b6 d2             	movzx  edx,dl
c00273db:	09 d7                	or     edi,edx
c00273dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00273e3:	01 fa                	add    edx,edi
c00273e5:	11 c6                	adc    esi,eax
c00273e7:	89 f0                	mov    eax,esi
c00273e9:	eb 77                	jmp    c0027462 <__adddf3+0x297>
c00273eb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273ee:	46                   	inc    esi
c00273ef:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273f2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273f8:	75 41                	jne    c002743b <__adddf3+0x270>
c00273fa:	89 d3                	mov    ebx,edx
c00273fc:	09 c3                	or     ebx,eax
c00273fe:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027405:	75 27                	jne    c002742e <__adddf3+0x263>
c0027407:	85 db                	test   ebx,ebx
c0027409:	0f 84 fb 03 00 00    	je     c002780a <__adddf3+0x63f>
c002740f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027412:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027415:	0f 84 f5 03 00 00    	je     c0027810 <__adddf3+0x645>
c002741b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002741e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027421:	85 c0                	test   eax,eax
c0027423:	0f 89 91 03 00 00    	jns    c00277ba <__adddf3+0x5ef>
c0027429:	e9 85 03 00 00       	jmp    c00277b3 <__adddf3+0x5e8>
c002742e:	85 db                	test   ebx,ebx
c0027430:	0f 85 da 03 00 00    	jne    c0027810 <__adddf3+0x645>
c0027436:	e9 cf 03 00 00       	jmp    c002780a <__adddf3+0x63f>
c002743b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002743e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027441:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027444:	f7 d1                	not    ecx
c0027446:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002744c:	0f 84 70 03 00 00    	je     c00277c2 <__adddf3+0x5f7>
c0027452:	d1 ea                	shr    edx,1
c0027454:	89 c1                	mov    ecx,eax
c0027456:	c1 e1 1f             	shl    ecx,0x1f
c0027459:	09 ca                	or     edx,ecx
c002745b:	d1 e8                	shr    eax,1
c002745d:	e9 6f 03 00 00       	jmp    c00277d1 <__adddf3+0x606>
c0027462:	85 c0                	test   eax,eax
c0027464:	0f 89 67 03 00 00    	jns    c00277d1 <__adddf3+0x606>
c002746a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002746d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027470:	f7 d1                	not    ecx
c0027472:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027478:	0f 84 44 03 00 00    	je     c00277c2 <__adddf3+0x5f7>
c002747e:	89 d1                	mov    ecx,edx
c0027480:	d1 e9                	shr    ecx,1
c0027482:	83 e2 01             	and    edx,0x1
c0027485:	09 ca                	or     edx,ecx
c0027487:	89 c1                	mov    ecx,eax
c0027489:	c1 e1 1f             	shl    ecx,0x1f
c002748c:	09 ca                	or     edx,ecx
c002748e:	d1 e8                	shr    eax,1
c0027490:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027495:	e9 37 03 00 00       	jmp    c00277d1 <__adddf3+0x606>
c002749a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002749d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274a3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00274a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00274a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274af:	29 de                	sub    esi,ebx
c00274b1:	85 f6                	test   esi,esi
c00274b3:	0f 8e bd 00 00 00    	jle    c0027576 <__adddf3+0x3ab>
c00274b9:	85 db                	test   ebx,ebx
c00274bb:	75 17                	jne    c00274d4 <__adddf3+0x309>
c00274bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00274c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00274c3:	0f 84 47 03 00 00    	je     c0027810 <__adddf3+0x645>
c00274c9:	4e                   	dec    esi
c00274ca:	75 20                	jne    c00274ec <__adddf3+0x321>
c00274cc:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00274cf:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00274d2:	eb 5b                	jmp    c002752f <__adddf3+0x364>
c00274d4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00274d7:	f7 d3                	not    ebx
c00274d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00274df:	0f 84 2b 03 00 00    	je     c0027810 <__adddf3+0x645>
c00274e5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274ec:	83 fe 1f             	cmp    esi,0x1f
c00274ef:	7e 49                	jle    c002753a <__adddf3+0x36f>
c00274f1:	83 fe 3f             	cmp    esi,0x3f
c00274f4:	0f 8f 16 03 00 00    	jg     c0027810 <__adddf3+0x645>
c00274fa:	83 e6 1f             	and    esi,0x1f
c00274fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027500:	89 f1                	mov    ecx,esi
c0027502:	d3 ef                	shr    edi,cl
c0027504:	31 db                	xor    ebx,ebx
c0027506:	85 f6                	test   esi,esi
c0027508:	74 13                	je     c002751d <__adddf3+0x352>
c002750a:	b9 20 00 00 00       	mov    ecx,0x20
c002750f:	29 f1                	sub    ecx,esi
c0027511:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027514:	d3 e6                	shl    esi,cl
c0027516:	31 db                	xor    ebx,ebx
c0027518:	85 f6                	test   esi,esi
c002751a:	0f 95 c3             	setne  bl
c002751d:	31 c9                	xor    ecx,ecx
c002751f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027523:	0f 95 c1             	setne  cl
c0027526:	09 cf                	or     edi,ecx
c0027528:	09 fb                	or     ebx,edi
c002752a:	29 da                	sub    edx,ebx
c002752c:	83 d8 00             	sbb    eax,0x0
c002752f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027532:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027535:	e9 aa 01 00 00       	jmp    c00276e4 <__adddf3+0x519>
c002753a:	bf 20 00 00 00       	mov    edi,0x20
c002753f:	29 f7                	sub    edi,esi
c0027541:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027544:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027547:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002754a:	d3 e3                	shl    ebx,cl
c002754c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002754f:	89 f1                	mov    ecx,esi
c0027551:	d3 ef                	shr    edi,cl
c0027553:	09 fb                	or     ebx,edi
c0027555:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027558:	89 f1                	mov    ecx,esi
c002755a:	d3 ef                	shr    edi,cl
c002755c:	89 fe                	mov    esi,edi
c002755e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027561:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027564:	d3 e7                	shl    edi,cl
c0027566:	85 ff                	test   edi,edi
c0027568:	0f 95 c1             	setne  cl
c002756b:	0f b6 c9             	movzx  ecx,cl
c002756e:	09 cb                	or     ebx,ecx
c0027570:	29 da                	sub    edx,ebx
c0027572:	19 f0                	sbb    eax,esi
c0027574:	eb b9                	jmp    c002752f <__adddf3+0x364>
c0027576:	0f 84 cd 00 00 00    	je     c0027649 <__adddf3+0x47e>
c002757c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002757f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027582:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027585:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027589:	75 1b                	jne    c00275a6 <__adddf3+0x3db>
c002758b:	89 d6                	mov    esi,edx
c002758d:	09 c6                	or     esi,eax
c002758f:	0f 84 7b 02 00 00    	je     c0027810 <__adddf3+0x645>
c0027595:	4b                   	dec    ebx
c0027596:	75 24                	jne    c00275bc <__adddf3+0x3f1>
c0027598:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002759b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002759e:	29 d1                	sub    ecx,edx
c00275a0:	19 c6                	sbb    esi,eax
c00275a2:	89 ca                	mov    edx,ecx
c00275a4:	eb 61                	jmp    c0027607 <__adddf3+0x43c>
c00275a6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00275a9:	f7 d6                	not    esi
c00275ab:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00275b1:	0f 84 59 02 00 00    	je     c0027810 <__adddf3+0x645>
c00275b7:	0d 00 00 00 80       	or     eax,0x80000000
c00275bc:	83 fb 1f             	cmp    ebx,0x1f
c00275bf:	7e 4d                	jle    c002760e <__adddf3+0x443>
c00275c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275c7:	83 fb 3f             	cmp    ebx,0x3f
c00275ca:	0f 8f 40 02 00 00    	jg     c0027810 <__adddf3+0x645>
c00275d0:	83 e3 1f             	and    ebx,0x1f
c00275d3:	89 d9                	mov    ecx,ebx
c00275d5:	89 c7                	mov    edi,eax
c00275d7:	d3 ef                	shr    edi,cl
c00275d9:	31 db                	xor    ebx,ebx
c00275db:	85 c9                	test   ecx,ecx
c00275dd:	74 12                	je     c00275f1 <__adddf3+0x426>
c00275df:	be 20 00 00 00       	mov    esi,0x20
c00275e4:	29 ce                	sub    esi,ecx
c00275e6:	89 f1                	mov    ecx,esi
c00275e8:	d3 e0                	shl    eax,cl
c00275ea:	31 db                	xor    ebx,ebx
c00275ec:	85 c0                	test   eax,eax
c00275ee:	0f 95 c3             	setne  bl
c00275f1:	31 c0                	xor    eax,eax
c00275f3:	85 d2                	test   edx,edx
c00275f5:	0f 95 c0             	setne  al
c00275f8:	09 c7                	or     edi,eax
c00275fa:	09 fb                	or     ebx,edi
c00275fc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275ff:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027602:	29 da                	sub    edx,ebx
c0027604:	83 de 00             	sbb    esi,0x0
c0027607:	89 f0                	mov    eax,esi
c0027609:	e9 d6 00 00 00       	jmp    c00276e4 <__adddf3+0x519>
c002760e:	be 20 00 00 00       	mov    esi,0x20
c0027613:	29 de                	sub    esi,ebx
c0027615:	89 c7                	mov    edi,eax
c0027617:	89 f1                	mov    ecx,esi
c0027619:	d3 e7                	shl    edi,cl
c002761b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002761e:	89 d7                	mov    edi,edx
c0027620:	88 d9                	mov    cl,bl
c0027622:	d3 ef                	shr    edi,cl
c0027624:	89 f9                	mov    ecx,edi
c0027626:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027629:	09 cf                	or     edi,ecx
c002762b:	88 d9                	mov    cl,bl
c002762d:	d3 e8                	shr    eax,cl
c002762f:	89 f1                	mov    ecx,esi
c0027631:	d3 e2                	shl    edx,cl
c0027633:	85 d2                	test   edx,edx
c0027635:	0f 95 c2             	setne  dl
c0027638:	0f b6 d2             	movzx  edx,dl
c002763b:	09 d7                	or     edi,edx
c002763d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027640:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027643:	29 fa                	sub    edx,edi
c0027645:	19 c6                	sbb    esi,eax
c0027647:	eb be                	jmp    c0027607 <__adddf3+0x43c>
c0027649:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002764c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002764f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027655:	75 6a                	jne    c00276c1 <__adddf3+0x4f6>
c0027657:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002765b:	75 58                	jne    c00276b5 <__adddf3+0x4ea>
c002765d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027660:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027663:	89 d6                	mov    esi,edx
c0027665:	09 c6                	or     esi,eax
c0027667:	75 17                	jne    c0027680 <__adddf3+0x4b5>
c0027669:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002766c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002766f:	85 db                	test   ebx,ebx
c0027671:	0f 85 99 01 00 00    	jne    c0027810 <__adddf3+0x645>
c0027677:	31 ff                	xor    edi,edi
c0027679:	31 c9                	xor    ecx,ecx
c002767b:	e9 90 01 00 00       	jmp    c0027810 <__adddf3+0x645>
c0027680:	85 db                	test   ebx,ebx
c0027682:	0f 84 88 01 00 00    	je     c0027810 <__adddf3+0x645>
c0027688:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002768b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002768e:	85 c0                	test   eax,eax
c0027690:	79 10                	jns    c00276a2 <__adddf3+0x4d7>
c0027692:	31 c9                	xor    ecx,ecx
c0027694:	f7 da                	neg    edx
c0027696:	0f 95 c1             	setne  cl
c0027699:	01 c8                	add    eax,ecx
c002769b:	f7 d8                	neg    eax
c002769d:	e9 2f 01 00 00       	jmp    c00277d1 <__adddf3+0x606>
c00276a2:	31 ff                	xor    edi,edi
c00276a4:	31 c9                	xor    ecx,ecx
c00276a6:	89 c3                	mov    ebx,eax
c00276a8:	09 d3                	or     ebx,edx
c00276aa:	0f 84 60 01 00 00    	je     c0027810 <__adddf3+0x645>
c00276b0:	e9 05 01 00 00       	jmp    c00277ba <__adddf3+0x5ef>
c00276b5:	31 ff                	xor    edi,edi
c00276b7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00276bc:	e9 4f 01 00 00       	jmp    c0027810 <__adddf3+0x645>
c00276c1:	89 c1                	mov    ecx,eax
c00276c3:	89 d0                	mov    eax,edx
c00276c5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00276c8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00276cb:	89 ca                	mov    edx,ecx
c00276cd:	85 c9                	test   ecx,ecx
c00276cf:	79 2c                	jns    c00276fd <__adddf3+0x532>
c00276d1:	31 c9                	xor    ecx,ecx
c00276d3:	f7 d8                	neg    eax
c00276d5:	0f 95 c1             	setne  cl
c00276d8:	01 ca                	add    edx,ecx
c00276da:	f7 da                	neg    edx
c00276dc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00276df:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276e2:	eb 19                	jmp    c00276fd <__adddf3+0x532>
c00276e4:	85 c0                	test   eax,eax
c00276e6:	0f 89 e5 00 00 00    	jns    c00277d1 <__adddf3+0x606>
c00276ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276f1:	89 c1                	mov    ecx,eax
c00276f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00276f6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276f9:	89 d0                	mov    eax,edx
c00276fb:	89 ca                	mov    edx,ecx
c00276fd:	85 d2                	test   edx,edx
c00276ff:	74 59                	je     c002775a <__adddf3+0x58f>
c0027701:	0f bd da             	bsr    ebx,edx
c0027704:	83 f3 1f             	xor    ebx,0x1f
c0027707:	88 d9                	mov    cl,bl
c0027709:	d3 e2                	shl    edx,cl
c002770b:	bf 20 00 00 00       	mov    edi,0x20
c0027710:	89 f9                	mov    ecx,edi
c0027712:	29 d9                	sub    ecx,ebx
c0027714:	89 c6                	mov    esi,eax
c0027716:	d3 ee                	shr    esi,cl
c0027718:	09 d6                	or     esi,edx
c002771a:	88 d9                	mov    cl,bl
c002771c:	d3 e0                	shl    eax,cl
c002771e:	89 c2                	mov    edx,eax
c0027720:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027723:	25 ff 07 00 00       	and    eax,0x7ff
c0027728:	39 d8                	cmp    eax,ebx
c002772a:	7f 22                	jg     c002774e <__adddf3+0x583>
c002772c:	29 c3                	sub    ebx,eax
c002772e:	43                   	inc    ebx
c002772f:	88 d9                	mov    cl,bl
c0027731:	d3 ea                	shr    edx,cl
c0027733:	29 df                	sub    edi,ebx
c0027735:	89 f9                	mov    ecx,edi
c0027737:	89 f0                	mov    eax,esi
c0027739:	d3 e0                	shl    eax,cl
c002773b:	09 c2                	or     edx,eax
c002773d:	89 f0                	mov    eax,esi
c002773f:	88 d9                	mov    cl,bl
c0027741:	d3 e8                	shr    eax,cl
c0027743:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027746:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002774c:	eb 6f                	jmp    c00277bd <__adddf3+0x5f2>
c002774e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027751:	29 d8                	sub    eax,ebx
c0027753:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027756:	89 f0                	mov    eax,esi
c0027758:	eb 59                	jmp    c00277b3 <__adddf3+0x5e8>
c002775a:	85 c0                	test   eax,eax
c002775c:	74 6a                	je     c00277c8 <__adddf3+0x5fd>
c002775e:	0f bd c8             	bsr    ecx,eax
c0027761:	83 f1 1f             	xor    ecx,0x1f
c0027764:	d3 e0                	shl    eax,cl
c0027766:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027769:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002776f:	83 c1 20             	add    ecx,0x20
c0027772:	39 cb                	cmp    ebx,ecx
c0027774:	7f 35                	jg     c00277ab <__adddf3+0x5e0>
c0027776:	29 d9                	sub    ecx,ebx
c0027778:	8d 71 01             	lea    esi,[ecx+0x1]
c002777b:	83 fe 1f             	cmp    esi,0x1f
c002777e:	7e 09                	jle    c0027789 <__adddf3+0x5be>
c0027780:	83 e9 1f             	sub    ecx,0x1f
c0027783:	d3 e8                	shr    eax,cl
c0027785:	89 c3                	mov    ebx,eax
c0027787:	eb 11                	jmp    c002779a <__adddf3+0x5cf>
c0027789:	b9 20 00 00 00       	mov    ecx,0x20
c002778e:	29 f1                	sub    ecx,esi
c0027790:	89 c3                	mov    ebx,eax
c0027792:	d3 e3                	shl    ebx,cl
c0027794:	89 f1                	mov    ecx,esi
c0027796:	d3 e8                	shr    eax,cl
c0027798:	89 c2                	mov    edx,eax
c002779a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002779d:	25 00 f8 ff ff       	and    eax,0xfffff800
c00277a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00277a5:	89 d0                	mov    eax,edx
c00277a7:	89 da                	mov    edx,ebx
c00277a9:	eb 26                	jmp    c00277d1 <__adddf3+0x606>
c00277ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277ae:	29 cf                	sub    edi,ecx
c00277b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277b3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277b8:	eb 17                	jmp    c00277d1 <__adddf3+0x606>
c00277ba:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277bd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00277c0:	eb 0f                	jmp    c00277d1 <__adddf3+0x606>
c00277c2:	31 d2                	xor    edx,edx
c00277c4:	31 c0                	xor    eax,eax
c00277c6:	eb 09                	jmp    c00277d1 <__adddf3+0x606>
c00277c8:	89 c2                	mov    edx,eax
c00277ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00277d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00277d4:	c1 e1 14             	shl    ecx,0x14
c00277d7:	89 c3                	mov    ebx,eax
c00277d9:	c1 eb 0b             	shr    ebx,0xb
c00277dc:	09 d9                	or     ecx,ebx
c00277de:	89 d3                	mov    ebx,edx
c00277e0:	c1 eb 0b             	shr    ebx,0xb
c00277e3:	c1 e0 15             	shl    eax,0x15
c00277e6:	09 d8                	or     eax,ebx
c00277e8:	89 c7                	mov    edi,eax
c00277ea:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00277f0:	0f 95 c0             	setne  al
c00277f3:	89 c6                	mov    esi,eax
c00277f5:	09 f3                	or     ebx,esi
c00277f7:	83 e3 01             	and    ebx,0x1
c00277fa:	c1 ea 0a             	shr    edx,0xa
c00277fd:	21 da                	and    edx,ebx
c00277ff:	89 f8                	mov    eax,edi
c0027801:	01 d0                	add    eax,edx
c0027803:	83 d1 00             	adc    ecx,0x0
c0027806:	89 c7                	mov    edi,eax
c0027808:	eb 06                	jmp    c0027810 <__adddf3+0x645>
c002780a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002780d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027810:	89 f8                	mov    eax,edi
c0027812:	89 ca                	mov    edx,ecx
c0027814:	83 c4 24             	add    esp,0x24
c0027817:	5b                   	pop    ebx
c0027818:	5e                   	pop    esi
c0027819:	5f                   	pop    edi
c002781a:	5d                   	pop    ebp
c002781b:	c3                   	ret    

c002781c <__subdf3>:
c002781c:	55                   	push   ebp
c002781d:	89 e5                	mov    ebp,esp
c002781f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027822:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027825:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002782b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002782e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027831:	5d                   	pop    ebp
c0027832:	e9 94 f9 ff ff       	jmp    c00271cb <__adddf3>

c0027837 <__negdf2>:
c0027837:	55                   	push   ebp
c0027838:	89 e5                	mov    ebp,esp
c002783a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002783d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027840:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027846:	5d                   	pop    ebp
c0027847:	c3                   	ret    

c0027848 <__muldf3>:
c0027848:	55                   	push   ebp
c0027849:	89 e5                	mov    ebp,esp
c002784b:	57                   	push   edi
c002784c:	56                   	push   esi
c002784d:	53                   	push   ebx
c002784e:	83 ec 24             	sub    esp,0x24
c0027851:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027854:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027857:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002785a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002785d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027860:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027863:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027866:	89 c8                	mov    eax,ecx
c0027868:	c1 f8 14             	sar    eax,0x14
c002786b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002786e:	89 f8                	mov    eax,edi
c0027870:	89 fb                	mov    ebx,edi
c0027872:	c1 e3 0b             	shl    ebx,0xb
c0027875:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027878:	c1 e1 0b             	shl    ecx,0xb
c002787b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027881:	c1 e8 15             	shr    eax,0x15
c0027884:	09 c1                	or     ecx,eax
c0027886:	89 d6                	mov    esi,edx
c0027888:	89 d0                	mov    eax,edx
c002788a:	c1 f8 14             	sar    eax,0x14
c002788d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027890:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027893:	89 c3                	mov    ebx,eax
c0027895:	c1 e3 0b             	shl    ebx,0xb
c0027898:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002789b:	c1 e6 0b             	shl    esi,0xb
c002789e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00278a4:	c1 e8 15             	shr    eax,0x15
c00278a7:	09 c6                	or     esi,eax
c00278a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278ac:	25 ff 07 00 00       	and    eax,0x7ff
c00278b1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00278b4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278b7:	25 ff 07 00 00       	and    eax,0x7ff
c00278bc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00278bf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00278c2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00278c5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00278cc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278cf:	40                   	inc    eax
c00278d0:	a9 fe 07 00 00       	test   eax,0x7fe
c00278d5:	0f 85 8d 00 00 00    	jne    c0027968 <__muldf3+0x120>
c00278db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278de:	09 c8                	or     eax,ecx
c00278e0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00278e4:	74 44                	je     c002792a <__muldf3+0xe2>
c00278e6:	85 c0                	test   eax,eax
c00278e8:	0f 85 31 02 00 00    	jne    c0027b1f <__muldf3+0x2d7>
c00278ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278f1:	40                   	inc    eax
c00278f2:	a9 fe 07 00 00       	test   eax,0x7fe
c00278f7:	75 13                	jne    c002790c <__muldf3+0xc4>
c00278f9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278fc:	09 f1                	or     ecx,esi
c00278fe:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027902:	74 22                	je     c0027926 <__muldf3+0xde>
c0027904:	85 c9                	test   ecx,ecx
c0027906:	0f 85 0d 02 00 00    	jne    c0027b19 <__muldf3+0x2d1>
c002790c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027910:	0f 89 09 02 00 00    	jns    c0027b1f <__muldf3+0x2d7>
c0027916:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027919:	05 00 00 00 80       	add    eax,0x80000000
c002791e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027921:	e9 f9 01 00 00       	jmp    c0027b1f <__muldf3+0x2d7>
c0027926:	85 c9                	test   ecx,ecx
c0027928:	eb 2e                	jmp    c0027958 <__muldf3+0x110>
c002792a:	85 c0                	test   eax,eax
c002792c:	74 20                	je     c002794e <__muldf3+0x106>
c002792e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027931:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027934:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027937:	c1 ef 1f             	shr    edi,0x1f
c002793a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002793d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027940:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027943:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027946:	09 f9                	or     ecx,edi
c0027948:	78 1e                	js     c0027968 <__muldf3+0x120>
c002794a:	89 c3                	mov    ebx,eax
c002794c:	eb e0                	jmp    c002792e <__muldf3+0xe6>
c002794e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027951:	f7 d0                	not    eax
c0027953:	a9 ff 07 00 00       	test   eax,0x7ff
c0027958:	75 b2                	jne    c002790c <__muldf3+0xc4>
c002795a:	31 ff                	xor    edi,edi
c002795c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027963:	e9 b7 01 00 00       	jmp    c0027b1f <__muldf3+0x2d7>
c0027968:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002796b:	40                   	inc    eax
c002796c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027971:	75 57                	jne    c00279ca <__muldf3+0x182>
c0027973:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027976:	09 f0                	or     eax,esi
c0027978:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002797c:	74 23                	je     c00279a1 <__muldf3+0x159>
c002797e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027982:	0f 89 91 01 00 00    	jns    c0027b19 <__muldf3+0x2d1>
c0027988:	85 c0                	test   eax,eax
c002798a:	0f 85 89 01 00 00    	jne    c0027b19 <__muldf3+0x2d1>
c0027990:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027993:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027999:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002799c:	e9 7e 01 00 00       	jmp    c0027b1f <__muldf3+0x2d7>
c00279a1:	85 c0                	test   eax,eax
c00279a3:	75 0c                	jne    c00279b1 <__muldf3+0x169>
c00279a5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00279a9:	0f 89 6a 01 00 00    	jns    c0027b19 <__muldf3+0x2d1>
c00279af:	eb df                	jmp    c0027990 <__muldf3+0x148>
c00279b1:	01 f6                	add    esi,esi
c00279b3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00279b6:	c1 ea 1f             	shr    edx,0x1f
c00279b9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279bc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00279bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279c2:	09 d6                	or     esi,edx
c00279c4:	78 04                	js     c00279ca <__muldf3+0x182>
c00279c6:	89 c3                	mov    ebx,eax
c00279c8:	eb e7                	jmp    c00279b1 <__muldf3+0x169>
c00279ca:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00279d0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00279d6:	89 c8                	mov    eax,ecx
c00279d8:	f7 e6                	mul    esi
c00279da:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00279dd:	89 c7                	mov    edi,eax
c00279df:	89 c8                	mov    eax,ecx
c00279e1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279e4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00279e7:	89 c1                	mov    ecx,eax
c00279e9:	89 f0                	mov    eax,esi
c00279eb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00279ee:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00279f1:	89 c6                	mov    esi,eax
c00279f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279f6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279f9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279fc:	31 c0                	xor    eax,eax
c00279fe:	01 f1                	add    ecx,esi
c0027a00:	0f 92 c0             	setb   al
c0027a03:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027a06:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027a09:	83 d6 00             	adc    esi,0x0
c0027a0c:	01 c7                	add    edi,eax
c0027a0e:	83 d6 00             	adc    esi,0x0
c0027a11:	01 ca                	add    edx,ecx
c0027a13:	0f 92 c1             	setb   cl
c0027a16:	0f b6 c9             	movzx  ecx,cl
c0027a19:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027a1c:	83 d6 00             	adc    esi,0x0
c0027a1f:	01 cf                	add    edi,ecx
c0027a21:	83 d6 00             	adc    esi,0x0
c0027a24:	31 c9                	xor    ecx,ecx
c0027a26:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027a29:	0f 95 c1             	setne  cl
c0027a2c:	09 cf                	or     edi,ecx
c0027a2e:	85 f6                	test   esi,esi
c0027a30:	78 0c                	js     c0027a3e <__muldf3+0x1f6>
c0027a32:	01 f6                	add    esi,esi
c0027a34:	89 f8                	mov    eax,edi
c0027a36:	c1 e8 1f             	shr    eax,0x1f
c0027a39:	09 c6                	or     esi,eax
c0027a3b:	01 ff                	add    edi,edi
c0027a3d:	4b                   	dec    ebx
c0027a3e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027a44:	0f 8f 85 00 00 00    	jg     c0027acf <__muldf3+0x287>
c0027a4a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027a50:	85 db                	test   ebx,ebx
c0027a52:	0f 8f 84 00 00 00    	jg     c0027adc <__muldf3+0x294>
c0027a58:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a5b:	7c 79                	jl     c0027ad6 <__muldf3+0x28e>
c0027a5d:	ba 01 00 00 00       	mov    edx,0x1
c0027a62:	29 da                	sub    edx,ebx
c0027a64:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a6a:	83 fa 1f             	cmp    edx,0x1f
c0027a6d:	7e 30                	jle    c0027a9f <__muldf3+0x257>
c0027a6f:	83 fa 20             	cmp    edx,0x20
c0027a72:	75 0b                	jne    c0027a7f <__muldf3+0x237>
c0027a74:	31 c0                	xor    eax,eax
c0027a76:	85 ff                	test   edi,edi
c0027a78:	0f 95 c0             	setne  al
c0027a7b:	89 c7                	mov    edi,eax
c0027a7d:	eb 1a                	jmp    c0027a99 <__muldf3+0x251>
c0027a7f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a82:	89 f0                	mov    eax,esi
c0027a84:	d3 e0                	shl    eax,cl
c0027a86:	09 f8                	or     eax,edi
c0027a88:	0f 95 c0             	setne  al
c0027a8b:	0f b6 c0             	movzx  eax,al
c0027a8e:	89 c7                	mov    edi,eax
c0027a90:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a95:	29 d9                	sub    ecx,ebx
c0027a97:	d3 ee                	shr    esi,cl
c0027a99:	09 f7                	or     edi,esi
c0027a9b:	31 db                	xor    ebx,ebx
c0027a9d:	eb 3b                	jmp    c0027ada <__muldf3+0x292>
c0027a9f:	83 c3 1f             	add    ebx,0x1f
c0027aa2:	89 f0                	mov    eax,esi
c0027aa4:	88 d9                	mov    cl,bl
c0027aa6:	d3 e0                	shl    eax,cl
c0027aa8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027aab:	89 f8                	mov    eax,edi
c0027aad:	88 d1                	mov    cl,dl
c0027aaf:	d3 e8                	shr    eax,cl
c0027ab1:	89 c1                	mov    ecx,eax
c0027ab3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ab6:	09 c8                	or     eax,ecx
c0027ab8:	88 d9                	mov    cl,bl
c0027aba:	d3 e7                	shl    edi,cl
c0027abc:	31 db                	xor    ebx,ebx
c0027abe:	85 ff                	test   edi,edi
c0027ac0:	0f 95 c3             	setne  bl
c0027ac3:	89 df                	mov    edi,ebx
c0027ac5:	09 c7                	or     edi,eax
c0027ac7:	88 d1                	mov    cl,dl
c0027ac9:	d3 ee                	shr    esi,cl
c0027acb:	31 db                	xor    ebx,ebx
c0027acd:	eb 0d                	jmp    c0027adc <__muldf3+0x294>
c0027acf:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027ad4:	eb 02                	jmp    c0027ad8 <__muldf3+0x290>
c0027ad6:	31 db                	xor    ebx,ebx
c0027ad8:	31 ff                	xor    edi,edi
c0027ada:	31 f6                	xor    esi,esi
c0027adc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027adf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027ae2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027ae7:	09 c3                	or     ebx,eax
c0027ae9:	c1 e3 14             	shl    ebx,0x14
c0027aec:	89 f0                	mov    eax,esi
c0027aee:	c1 e8 0b             	shr    eax,0xb
c0027af1:	09 c3                	or     ebx,eax
c0027af3:	89 f8                	mov    eax,edi
c0027af5:	c1 e8 0b             	shr    eax,0xb
c0027af8:	c1 e6 15             	shl    esi,0x15
c0027afb:	09 c6                	or     esi,eax
c0027afd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027b03:	0f 95 c1             	setne  cl
c0027b06:	09 c8                	or     eax,ecx
c0027b08:	83 e0 01             	and    eax,0x1
c0027b0b:	c1 ef 0a             	shr    edi,0xa
c0027b0e:	21 c7                	and    edi,eax
c0027b10:	01 f7                	add    edi,esi
c0027b12:	83 d3 00             	adc    ebx,0x0
c0027b15:	89 da                	mov    edx,ebx
c0027b17:	eb 03                	jmp    c0027b1c <__muldf3+0x2d4>
c0027b19:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b1c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027b1f:	89 f8                	mov    eax,edi
c0027b21:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027b24:	83 c4 24             	add    esp,0x24
c0027b27:	5b                   	pop    ebx
c0027b28:	5e                   	pop    esi
c0027b29:	5f                   	pop    edi
c0027b2a:	5d                   	pop    ebp
c0027b2b:	c3                   	ret    

c0027b2c <__divdf3>:
c0027b2c:	55                   	push   ebp
c0027b2d:	89 e5                	mov    ebp,esp
c0027b2f:	57                   	push   edi
c0027b30:	56                   	push   esi
c0027b31:	53                   	push   ebx
c0027b32:	83 ec 2c             	sub    esp,0x2c
c0027b35:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027b38:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027b3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027b3e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027b41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027b44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027b47:	89 ce                	mov    esi,ecx
c0027b49:	89 c8                	mov    eax,ecx
c0027b4b:	c1 f8 14             	sar    eax,0x14
c0027b4e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b51:	89 f8                	mov    eax,edi
c0027b53:	89 fb                	mov    ebx,edi
c0027b55:	c1 e3 0b             	shl    ebx,0xb
c0027b58:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b5b:	c1 e6 0b             	shl    esi,0xb
c0027b5e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b64:	c1 e8 15             	shr    eax,0x15
c0027b67:	09 c6                	or     esi,eax
c0027b69:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b6c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b6f:	89 c2                	mov    edx,eax
c0027b71:	c1 fa 14             	sar    edx,0x14
c0027b74:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b77:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b7a:	89 de                	mov    esi,ebx
c0027b7c:	c1 e6 0b             	shl    esi,0xb
c0027b7f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b82:	c1 e0 0b             	shl    eax,0xb
c0027b85:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b8a:	c1 eb 15             	shr    ebx,0x15
c0027b8d:	09 d8                	or     eax,ebx
c0027b8f:	89 c2                	mov    edx,eax
c0027b91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b94:	25 ff 07 00 00       	and    eax,0x7ff
c0027b99:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b9c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b9f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ba5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ba8:	29 d8                	sub    eax,ebx
c0027baa:	05 ff 03 00 00       	add    eax,0x3ff
c0027baf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027bb2:	46                   	inc    esi
c0027bb3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027bb9:	0f 85 a5 00 00 00    	jne    c0027c64 <__divdf3+0x138>
c0027bbf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027bc2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027bc5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027bc9:	74 2a                	je     c0027bf5 <__divdf3+0xc9>
c0027bcb:	85 f6                	test   esi,esi
c0027bcd:	0f 85 cc 02 00 00    	jne    c0027e9f <__divdf3+0x373>
c0027bd3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bd6:	40                   	inc    eax
c0027bd7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027bdc:	75 26                	jne    c0027c04 <__divdf3+0xd8>
c0027bde:	85 db                	test   ebx,ebx
c0027be0:	74 22                	je     c0027c04 <__divdf3+0xd8>
c0027be2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027be5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027be8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027beb:	09 d0                	or     eax,edx
c0027bed:	0f 85 ac 02 00 00    	jne    c0027e9f <__divdf3+0x373>
c0027bf3:	eb 63                	jmp    c0027c58 <__divdf3+0x12c>
c0027bf5:	85 f6                	test   esi,esi
c0027bf7:	75 22                	jne    c0027c1b <__divdf3+0xef>
c0027bf9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bfc:	40                   	inc    eax
c0027bfd:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c02:	74 36                	je     c0027c3a <__divdf3+0x10e>
c0027c04:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c08:	0f 89 91 02 00 00    	jns    c0027e9f <__divdf3+0x373>
c0027c0e:	89 f8                	mov    eax,edi
c0027c10:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c16:	e9 80 02 00 00       	jmp    c0027e9b <__divdf3+0x36f>
c0027c1b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c1e:	01 f6                	add    esi,esi
c0027c20:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027c23:	c1 ef 1f             	shr    edi,0x1f
c0027c26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027c29:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027c2c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027c2f:	09 f7                	or     edi,esi
c0027c31:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027c34:	78 2e                	js     c0027c64 <__divdf3+0x138>
c0027c36:	89 c8                	mov    eax,ecx
c0027c38:	eb e1                	jmp    c0027c1b <__divdf3+0xef>
c0027c3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c3d:	09 d0                	or     eax,edx
c0027c3f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c43:	74 0f                	je     c0027c54 <__divdf3+0x128>
c0027c45:	85 c0                	test   eax,eax
c0027c47:	74 bb                	je     c0027c04 <__divdf3+0xd8>
c0027c49:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c4c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c4f:	e9 4b 02 00 00       	jmp    c0027e9f <__divdf3+0x373>
c0027c54:	85 c0                	test   eax,eax
c0027c56:	75 ac                	jne    c0027c04 <__divdf3+0xd8>
c0027c58:	31 ff                	xor    edi,edi
c0027c5a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c5f:	e9 3b 02 00 00       	jmp    c0027e9f <__divdf3+0x373>
c0027c64:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c67:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c6a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c70:	75 6b                	jne    c0027cdd <__divdf3+0x1b1>
c0027c72:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c75:	09 d6                	or     esi,edx
c0027c77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c7b:	74 28                	je     c0027ca5 <__divdf3+0x179>
c0027c7d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c80:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c83:	85 f6                	test   esi,esi
c0027c85:	0f 85 14 02 00 00    	jne    c0027e9f <__divdf3+0x373>
c0027c8b:	31 ff                	xor    edi,edi
c0027c8d:	31 c9                	xor    ecx,ecx
c0027c8f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c92:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c95:	0f 89 04 02 00 00    	jns    c0027e9f <__divdf3+0x373>
c0027c9b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ca0:	e9 fa 01 00 00       	jmp    c0027e9f <__divdf3+0x373>
c0027ca5:	85 f6                	test   esi,esi
c0027ca7:	75 1b                	jne    c0027cc4 <__divdf3+0x198>
c0027ca9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cac:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027caf:	25 00 00 00 80       	and    eax,0x80000000
c0027cb4:	31 c9                	xor    ecx,ecx
c0027cb6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027cbb:	89 cf                	mov    edi,ecx
c0027cbd:	89 c1                	mov    ecx,eax
c0027cbf:	e9 db 01 00 00       	jmp    c0027e9f <__divdf3+0x373>
c0027cc4:	01 d2                	add    edx,edx
c0027cc6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cc9:	c1 eb 1f             	shr    ebx,0x1f
c0027ccc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ccf:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027cd2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027cd5:	09 da                	or     edx,ebx
c0027cd7:	78 04                	js     c0027cdd <__divdf3+0x1b1>
c0027cd9:	89 c8                	mov    eax,ecx
c0027cdb:	eb e7                	jmp    c0027cc4 <__divdf3+0x198>
c0027cdd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ce0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ce6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cec:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027cef:	39 d6                	cmp    esi,edx
c0027cf1:	77 0d                	ja     c0027d00 <__divdf3+0x1d4>
c0027cf3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027cf6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027cf9:	72 1b                	jb     c0027d16 <__divdf3+0x1ea>
c0027cfb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027cfe:	75 16                	jne    c0027d16 <__divdf3+0x1ea>
c0027d00:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d03:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d06:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027d09:	83 de 00             	sbb    esi,0x0
c0027d0c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027d0f:	ba 01 00 00 00       	mov    edx,0x1
c0027d14:	eb 02                	jmp    c0027d18 <__divdf3+0x1ec>
c0027d16:	31 d2                	xor    edx,edx
c0027d18:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027d1f:	31 ff                	xor    edi,edi
c0027d21:	01 ff                	add    edi,edi
c0027d23:	89 d1                	mov    ecx,edx
c0027d25:	c1 e9 1f             	shr    ecx,0x1f
c0027d28:	09 cf                	or     edi,ecx
c0027d2a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027d2d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027d30:	89 da                	mov    edx,ebx
c0027d32:	89 f3                	mov    ebx,esi
c0027d34:	8d 34 36             	lea    esi,[esi+esi*1]
c0027d37:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d3a:	c1 e9 1f             	shr    ecx,0x1f
c0027d3d:	09 ce                	or     esi,ecx
c0027d3f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d42:	01 c9                	add    ecx,ecx
c0027d44:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027d47:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d4a:	85 db                	test   ebx,ebx
c0027d4c:	78 29                	js     c0027d77 <__divdf3+0x24b>
c0027d4e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027d51:	72 07                	jb     c0027d5a <__divdf3+0x22e>
c0027d53:	75 3c                	jne    c0027d91 <__divdf3+0x265>
c0027d55:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d58:	77 37                	ja     c0027d91 <__divdf3+0x265>
c0027d5a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d5d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d60:	31 d2                	xor    edx,edx
c0027d62:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d65:	0f 97 c2             	seta   dl
c0027d68:	29 d6                	sub    esi,edx
c0027d6a:	89 d9                	mov    ecx,ebx
c0027d6c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d6f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d72:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d75:	eb 17                	jmp    c0027d8e <__divdf3+0x262>
c0027d77:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d7a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d7d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d80:	0f 97 c1             	seta   cl
c0027d83:	0f b6 c9             	movzx  ecx,cl
c0027d86:	29 ce                	sub    esi,ecx
c0027d88:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d8b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d8e:	83 ca 01             	or     edx,0x1
c0027d91:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d94:	75 8b                	jne    c0027d21 <__divdf3+0x1f5>
c0027d96:	c1 e7 09             	shl    edi,0x9
c0027d99:	89 d1                	mov    ecx,edx
c0027d9b:	c1 e9 17             	shr    ecx,0x17
c0027d9e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027da1:	09 f3                	or     ebx,esi
c0027da3:	0f 95 c3             	setne  bl
c0027da6:	0f b6 db             	movzx  ebx,bl
c0027da9:	c1 e2 09             	shl    edx,0x9
c0027dac:	09 d3                	or     ebx,edx
c0027dae:	89 ca                	mov    edx,ecx
c0027db0:	09 fa                	or     edx,edi
c0027db2:	78 0c                	js     c0027dc0 <__divdf3+0x294>
c0027db4:	01 d2                	add    edx,edx
c0027db6:	89 d9                	mov    ecx,ebx
c0027db8:	c1 e9 1f             	shr    ecx,0x1f
c0027dbb:	09 ca                	or     edx,ecx
c0027dbd:	01 db                	add    ebx,ebx
c0027dbf:	48                   	dec    eax
c0027dc0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027dc5:	0f 8f 83 00 00 00    	jg     c0027e4e <__divdf3+0x322>
c0027dcb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027dd1:	85 c0                	test   eax,eax
c0027dd3:	0f 8f 82 00 00 00    	jg     c0027e5b <__divdf3+0x32f>
c0027dd9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027ddc:	7c 77                	jl     c0027e55 <__divdf3+0x329>
c0027dde:	be 01 00 00 00       	mov    esi,0x1
c0027de3:	29 c6                	sub    esi,eax
c0027de5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027deb:	83 fe 1f             	cmp    esi,0x1f
c0027dee:	7e 2f                	jle    c0027e1f <__divdf3+0x2f3>
c0027df0:	83 fe 20             	cmp    esi,0x20
c0027df3:	75 0a                	jne    c0027dff <__divdf3+0x2d3>
c0027df5:	85 db                	test   ebx,ebx
c0027df7:	0f 95 c3             	setne  bl
c0027dfa:	0f b6 db             	movzx  ebx,bl
c0027dfd:	eb 1a                	jmp    c0027e19 <__divdf3+0x2ed>
c0027dff:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027e02:	89 d7                	mov    edi,edx
c0027e04:	d3 e7                	shl    edi,cl
c0027e06:	89 f9                	mov    ecx,edi
c0027e08:	09 d9                	or     ecx,ebx
c0027e0a:	0f 95 c3             	setne  bl
c0027e0d:	0f b6 db             	movzx  ebx,bl
c0027e10:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027e15:	29 c1                	sub    ecx,eax
c0027e17:	d3 ea                	shr    edx,cl
c0027e19:	09 d3                	or     ebx,edx
c0027e1b:	31 c0                	xor    eax,eax
c0027e1d:	eb 3a                	jmp    c0027e59 <__divdf3+0x32d>
c0027e1f:	83 c0 1f             	add    eax,0x1f
c0027e22:	89 d7                	mov    edi,edx
c0027e24:	88 c1                	mov    cl,al
c0027e26:	d3 e7                	shl    edi,cl
c0027e28:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e2b:	89 df                	mov    edi,ebx
c0027e2d:	89 f1                	mov    ecx,esi
c0027e2f:	d3 ef                	shr    edi,cl
c0027e31:	89 f9                	mov    ecx,edi
c0027e33:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e36:	09 cf                	or     edi,ecx
c0027e38:	88 c1                	mov    cl,al
c0027e3a:	d3 e3                	shl    ebx,cl
c0027e3c:	85 db                	test   ebx,ebx
c0027e3e:	0f 95 c3             	setne  bl
c0027e41:	0f b6 db             	movzx  ebx,bl
c0027e44:	09 fb                	or     ebx,edi
c0027e46:	89 f1                	mov    ecx,esi
c0027e48:	d3 ea                	shr    edx,cl
c0027e4a:	31 c0                	xor    eax,eax
c0027e4c:	eb 0d                	jmp    c0027e5b <__divdf3+0x32f>
c0027e4e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027e53:	eb 02                	jmp    c0027e57 <__divdf3+0x32b>
c0027e55:	31 c0                	xor    eax,eax
c0027e57:	31 db                	xor    ebx,ebx
c0027e59:	31 d2                	xor    edx,edx
c0027e5b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e5e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e61:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e67:	09 c8                	or     eax,ecx
c0027e69:	c1 e0 14             	shl    eax,0x14
c0027e6c:	89 d1                	mov    ecx,edx
c0027e6e:	c1 e9 0b             	shr    ecx,0xb
c0027e71:	09 c8                	or     eax,ecx
c0027e73:	89 c6                	mov    esi,eax
c0027e75:	89 d9                	mov    ecx,ebx
c0027e77:	c1 e9 0b             	shr    ecx,0xb
c0027e7a:	c1 e2 15             	shl    edx,0x15
c0027e7d:	09 ca                	or     edx,ecx
c0027e7f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e85:	0f 95 c0             	setne  al
c0027e88:	09 c1                	or     ecx,eax
c0027e8a:	83 e1 01             	and    ecx,0x1
c0027e8d:	c1 eb 0a             	shr    ebx,0xa
c0027e90:	21 cb                	and    ebx,ecx
c0027e92:	01 d3                	add    ebx,edx
c0027e94:	89 d8                	mov    eax,ebx
c0027e96:	83 d6 00             	adc    esi,0x0
c0027e99:	89 f2                	mov    edx,esi
c0027e9b:	89 c7                	mov    edi,eax
c0027e9d:	89 d1                	mov    ecx,edx
c0027e9f:	89 f8                	mov    eax,edi
c0027ea1:	89 ca                	mov    edx,ecx
c0027ea3:	83 c4 2c             	add    esp,0x2c
c0027ea6:	5b                   	pop    ebx
c0027ea7:	5e                   	pop    esi
c0027ea8:	5f                   	pop    edi
c0027ea9:	5d                   	pop    ebp
c0027eaa:	c3                   	ret    

c0027eab <__floatsidf>:
c0027eab:	55                   	push   ebp
c0027eac:	89 e5                	mov    ebp,esp
c0027eae:	56                   	push   esi
c0027eaf:	53                   	push   ebx
c0027eb0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027eb3:	85 db                	test   ebx,ebx
c0027eb5:	7e 15                	jle    c0027ecc <__floatsidf+0x21>
c0027eb7:	0f bd cb             	bsr    ecx,ebx
c0027eba:	83 f1 1f             	xor    ecx,0x1f
c0027ebd:	d3 e3                	shl    ebx,cl
c0027ebf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ec5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027eca:	eb 21                	jmp    c0027eed <__floatsidf+0x42>
c0027ecc:	b8 00 00 00 00       	mov    eax,0x0
c0027ed1:	ba 00 00 00 00       	mov    edx,0x0
c0027ed6:	74 2a                	je     c0027f02 <__floatsidf+0x57>
c0027ed8:	f7 db                	neg    ebx
c0027eda:	0f bd cb             	bsr    ecx,ebx
c0027edd:	83 f1 1f             	xor    ecx,0x1f
c0027ee0:	d3 e3                	shl    ebx,cl
c0027ee2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ee8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027eed:	29 c8                	sub    eax,ecx
c0027eef:	c1 e0 14             	shl    eax,0x14
c0027ef2:	89 c1                	mov    ecx,eax
c0027ef4:	89 de                	mov    esi,ebx
c0027ef6:	c1 ee 0b             	shr    esi,0xb
c0027ef9:	09 f1                	or     ecx,esi
c0027efb:	89 ca                	mov    edx,ecx
c0027efd:	c1 e3 15             	shl    ebx,0x15
c0027f00:	89 d8                	mov    eax,ebx
c0027f02:	5b                   	pop    ebx
c0027f03:	5e                   	pop    esi
c0027f04:	5d                   	pop    ebp
c0027f05:	c3                   	ret    

c0027f06 <__floatunsidf>:
c0027f06:	55                   	push   ebp
c0027f07:	89 e5                	mov    ebp,esp
c0027f09:	56                   	push   esi
c0027f0a:	53                   	push   ebx
c0027f0b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f0e:	85 db                	test   ebx,ebx
c0027f10:	74 2a                	je     c0027f3c <__floatunsidf+0x36>
c0027f12:	0f bd cb             	bsr    ecx,ebx
c0027f15:	83 f1 1f             	xor    ecx,0x1f
c0027f18:	d3 e3                	shl    ebx,cl
c0027f1a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f20:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f25:	29 c8                	sub    eax,ecx
c0027f27:	c1 e0 14             	shl    eax,0x14
c0027f2a:	89 c1                	mov    ecx,eax
c0027f2c:	89 de                	mov    esi,ebx
c0027f2e:	c1 ee 0b             	shr    esi,0xb
c0027f31:	09 f1                	or     ecx,esi
c0027f33:	89 ca                	mov    edx,ecx
c0027f35:	c1 e3 15             	shl    ebx,0x15
c0027f38:	89 d8                	mov    eax,ebx
c0027f3a:	eb 04                	jmp    c0027f40 <__floatunsidf+0x3a>
c0027f3c:	31 c0                	xor    eax,eax
c0027f3e:	31 d2                	xor    edx,edx
c0027f40:	5b                   	pop    ebx
c0027f41:	5e                   	pop    esi
c0027f42:	5d                   	pop    ebp
c0027f43:	c3                   	ret    

c0027f44 <__fixdfsi>:
c0027f44:	55                   	push   ebp
c0027f45:	89 e5                	mov    ebp,esp
c0027f47:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f4a:	89 d1                	mov    ecx,edx
c0027f4c:	c1 e1 0b             	shl    ecx,0xb
c0027f4f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f58:	c1 e8 15             	shr    eax,0x15
c0027f5b:	09 c1                	or     ecx,eax
c0027f5d:	c1 fa 14             	sar    edx,0x14
c0027f60:	78 1f                	js     c0027f81 <__fixdfsi+0x3d>
c0027f62:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f68:	31 c0                	xor    eax,eax
c0027f6a:	83 fa 1e             	cmp    edx,0x1e
c0027f6d:	77 40                	ja     c0027faf <__fixdfsi+0x6b>
c0027f6f:	89 c8                	mov    eax,ecx
c0027f71:	0d 00 00 00 80       	or     eax,0x80000000
c0027f76:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f7b:	29 d1                	sub    ecx,edx
c0027f7d:	d3 e8                	shr    eax,cl
c0027f7f:	eb 2e                	jmp    c0027faf <__fixdfsi+0x6b>
c0027f81:	31 c0                	xor    eax,eax
c0027f83:	81 c2 01 04 00 00    	add    edx,0x401
c0027f89:	78 24                	js     c0027faf <__fixdfsi+0x6b>
c0027f8b:	83 fa 1e             	cmp    edx,0x1e
c0027f8e:	7e 09                	jle    c0027f99 <__fixdfsi+0x55>
c0027f90:	83 fa 1f             	cmp    edx,0x1f
c0027f93:	75 18                	jne    c0027fad <__fixdfsi+0x69>
c0027f95:	85 c9                	test   ecx,ecx
c0027f97:	75 14                	jne    c0027fad <__fixdfsi+0x69>
c0027f99:	89 c8                	mov    eax,ecx
c0027f9b:	0d 00 00 00 80       	or     eax,0x80000000
c0027fa0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fa5:	29 d1                	sub    ecx,edx
c0027fa7:	d3 e8                	shr    eax,cl
c0027fa9:	f7 d8                	neg    eax
c0027fab:	eb 02                	jmp    c0027faf <__fixdfsi+0x6b>
c0027fad:	31 c0                	xor    eax,eax
c0027faf:	5d                   	pop    ebp
c0027fb0:	c3                   	ret    

c0027fb1 <__fixunsdfsi>:
c0027fb1:	55                   	push   ebp
c0027fb2:	89 e5                	mov    ebp,esp
c0027fb4:	53                   	push   ebx
c0027fb5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027fb8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027fbb:	89 d3                	mov    ebx,edx
c0027fbd:	c1 fb 14             	sar    ebx,0x14
c0027fc0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027fc6:	31 c0                	xor    eax,eax
c0027fc8:	83 fb 1f             	cmp    ebx,0x1f
c0027fcb:	77 1d                	ja     c0027fea <__fixunsdfsi+0x39>
c0027fcd:	89 d0                	mov    eax,edx
c0027fcf:	c1 e0 0b             	shl    eax,0xb
c0027fd2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fd7:	c1 e9 15             	shr    ecx,0x15
c0027fda:	09 c8                	or     eax,ecx
c0027fdc:	0d 00 00 00 80       	or     eax,0x80000000
c0027fe1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027fe6:	29 d9                	sub    ecx,ebx
c0027fe8:	d3 e8                	shr    eax,cl
c0027fea:	5b                   	pop    ebx
c0027feb:	5d                   	pop    ebp
c0027fec:	c3                   	ret    

c0027fed <__cmpdf2>:
c0027fed:	55                   	push   ebp
c0027fee:	89 e5                	mov    ebp,esp
c0027ff0:	57                   	push   edi
c0027ff1:	56                   	push   esi
c0027ff2:	53                   	push   ebx
c0027ff3:	83 ec 0c             	sub    esp,0xc
c0027ff6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027ff9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ffc:	89 ca                	mov    edx,ecx
c0027ffe:	c1 ea 14             	shr    edx,0x14
c0028001:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028007:	89 cb                	mov    ebx,ecx
c0028009:	c1 fb 1f             	sar    ebx,0x1f
c002800c:	31 da                	xor    edx,ebx
c002800e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028011:	89 df                	mov    edi,ebx
c0028013:	c1 e7 0b             	shl    edi,0xb
c0028016:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028019:	c1 e1 0b             	shl    ecx,0xb
c002801c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028022:	c1 eb 15             	shr    ebx,0x15
c0028025:	09 d9                	or     ecx,ebx
c0028027:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c002802a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002802d:	89 ce                	mov    esi,ecx
c002802f:	c1 ee 14             	shr    esi,0x14
c0028032:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028038:	89 cb                	mov    ebx,ecx
c002803a:	c1 fb 1f             	sar    ebx,0x1f
c002803d:	31 de                	xor    esi,ebx
c002803f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028042:	89 df                	mov    edi,ebx
c0028044:	c1 e7 0b             	shl    edi,0xb
c0028047:	c1 e1 0b             	shl    ecx,0xb
c002804a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028050:	c1 eb 15             	shr    ebx,0x15
c0028053:	09 d9                	or     ecx,ebx
c0028055:	89 d3                	mov    ebx,edx
c0028057:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002805d:	43                   	inc    ebx
c002805e:	83 fb 01             	cmp    ebx,0x1
c0028061:	77 08                	ja     c002806b <__cmpdf2+0x7e>
c0028063:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028066:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028069:	75 68                	jne    c00280d3 <__cmpdf2+0xe6>
c002806b:	89 f3                	mov    ebx,esi
c002806d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028073:	43                   	inc    ebx
c0028074:	83 fb 01             	cmp    ebx,0x1
c0028077:	77 06                	ja     c002807f <__cmpdf2+0x92>
c0028079:	89 fb                	mov    ebx,edi
c002807b:	09 cb                	or     ebx,ecx
c002807d:	75 54                	jne    c00280d3 <__cmpdf2+0xe6>
c002807f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028082:	09 f8                	or     eax,edi
c0028084:	09 c8                	or     eax,ecx
c0028086:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028089:	75 12                	jne    c002809d <__cmpdf2+0xb0>
c002808b:	8d 42 01             	lea    eax,[edx+0x1]
c002808e:	83 f8 01             	cmp    eax,0x1
c0028091:	77 0a                	ja     c002809d <__cmpdf2+0xb0>
c0028093:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028096:	31 c0                	xor    eax,eax
c0028098:	83 fb 01             	cmp    ebx,0x1
c002809b:	76 36                	jbe    c00280d3 <__cmpdf2+0xe6>
c002809d:	b8 01 00 00 00       	mov    eax,0x1
c00280a2:	39 f2                	cmp    edx,esi
c00280a4:	7f 2d                	jg     c00280d3 <__cmpdf2+0xe6>
c00280a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00280ab:	7c 26                	jl     c00280d3 <__cmpdf2+0xe6>
c00280ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00280b0:	77 07                	ja     c00280b9 <__cmpdf2+0xcc>
c00280b2:	72 16                	jb     c00280ca <__cmpdf2+0xdd>
c00280b4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00280b7:	76 0a                	jbe    c00280c3 <__cmpdf2+0xd6>
c00280b9:	89 d0                	mov    eax,edx
c00280bb:	c1 f8 1f             	sar    eax,0x1f
c00280be:	83 c8 01             	or     eax,0x1
c00280c1:	eb 10                	jmp    c00280d3 <__cmpdf2+0xe6>
c00280c3:	b8 00 00 00 00       	mov    eax,0x0
c00280c8:	73 09                	jae    c00280d3 <__cmpdf2+0xe6>
c00280ca:	89 d0                	mov    eax,edx
c00280cc:	c1 f8 1f             	sar    eax,0x1f
c00280cf:	83 e0 02             	and    eax,0x2
c00280d2:	48                   	dec    eax
c00280d3:	83 c4 0c             	add    esp,0xc
c00280d6:	5b                   	pop    ebx
c00280d7:	5e                   	pop    esi
c00280d8:	5f                   	pop    edi
c00280d9:	5d                   	pop    ebp
c00280da:	c3                   	ret    

c00280db <__eqdf2>:
c00280db:	55                   	push   ebp
c00280dc:	89 e5                	mov    ebp,esp
c00280de:	50                   	push   eax
c00280df:	6a 01                	push   0x1
c00280e1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280e4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280ed:	e8 fb fe ff ff       	call   c0027fed <__cmpdf2>
c00280f2:	83 c4 18             	add    esp,0x18
c00280f5:	c9                   	leave  
c00280f6:	c3                   	ret    

c00280f7 <__nedf2>:
c00280f7:	eb e2                	jmp    c00280db <__eqdf2>

c00280f9 <__gtdf2>:
c00280f9:	55                   	push   ebp
c00280fa:	89 e5                	mov    ebp,esp
c00280fc:	50                   	push   eax
c00280fd:	6a ff                	push   0xffffffff
c00280ff:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028102:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028105:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028108:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002810b:	e8 dd fe ff ff       	call   c0027fed <__cmpdf2>
c0028110:	83 c4 18             	add    esp,0x18
c0028113:	c9                   	leave  
c0028114:	c3                   	ret    

c0028115 <__gedf2>:
c0028115:	eb e2                	jmp    c00280f9 <__gtdf2>

c0028117 <__ltdf2>:
c0028117:	eb c2                	jmp    c00280db <__eqdf2>

c0028119 <__ledf2>:
c0028119:	eb c0                	jmp    c00280db <__eqdf2>

c002811b <__truncdfsf2>:
c002811b:	55                   	push   ebp
c002811c:	89 e5                	mov    ebp,esp
c002811e:	57                   	push   edi
c002811f:	56                   	push   esi
c0028120:	53                   	push   ebx
c0028121:	83 ec 0c             	sub    esp,0xc
c0028124:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028127:	89 d1                	mov    ecx,edx
c0028129:	c1 f9 14             	sar    ecx,0x14
c002812c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002812f:	89 df                	mov    edi,ebx
c0028131:	c1 e7 0b             	shl    edi,0xb
c0028134:	89 d0                	mov    eax,edx
c0028136:	c1 e0 0b             	shl    eax,0xb
c0028139:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002813e:	c1 eb 15             	shr    ebx,0x15
c0028141:	09 d8                	or     eax,ebx
c0028143:	89 cb                	mov    ebx,ecx
c0028145:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002814b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028151:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028157:	0f 86 9e 00 00 00    	jbe    c00281fb <__truncdfsf2+0xe0>
c002815d:	85 db                	test   ebx,ebx
c002815f:	75 0a                	jne    c002816b <__truncdfsf2+0x50>
c0028161:	c1 fa 17             	sar    edx,0x17
c0028164:	30 d2                	xor    dl,dl
c0028166:	e9 84 00 00 00       	jmp    c00281ef <__truncdfsf2+0xd4>
c002816b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028171:	83 fe 83             	cmp    esi,0xffffff83
c0028174:	7d 4b                	jge    c00281c1 <__truncdfsf2+0xa6>
c0028176:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002817b:	29 f1                	sub    ecx,esi
c002817d:	83 f9 1f             	cmp    ecx,0x1f
c0028180:	7f 6b                	jg     c00281ed <__truncdfsf2+0xd2>
c0028182:	0d 00 00 00 80       	or     eax,0x80000000
c0028187:	89 c3                	mov    ebx,eax
c0028189:	d3 eb                	shr    ebx,cl
c002818b:	be 01 00 00 00       	mov    esi,0x1
c0028190:	d3 e6                	shl    esi,cl
c0028192:	4e                   	dec    esi
c0028193:	21 f0                	and    eax,esi
c0028195:	09 f8                	or     eax,edi
c0028197:	0f 95 c0             	setne  al
c002819a:	0f b6 c0             	movzx  eax,al
c002819d:	09 c3                	or     ebx,eax
c002819f:	89 d9                	mov    ecx,ebx
c00281a1:	c1 e9 08             	shr    ecx,0x8
c00281a4:	f6 c3 7f             	test   bl,0x7f
c00281a7:	0f 95 c0             	setne  al
c00281aa:	09 c8                	or     eax,ecx
c00281ac:	83 e0 01             	and    eax,0x1
c00281af:	c1 eb 07             	shr    ebx,0x7
c00281b2:	21 c3                	and    ebx,eax
c00281b4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00281ba:	09 d1                	or     ecx,edx
c00281bc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00281bf:	eb 76                	jmp    c0028237 <__truncdfsf2+0x11c>
c00281c1:	83 c6 80             	add    esi,0xffffff80
c00281c4:	7e 1d                	jle    c00281e3 <__truncdfsf2+0xc8>
c00281c6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00281cc:	75 0b                	jne    c00281d9 <__truncdfsf2+0xbe>
c00281ce:	09 f8                	or     eax,edi
c00281d0:	74 09                	je     c00281db <__truncdfsf2+0xc0>
c00281d2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00281d7:	eb 02                	jmp    c00281db <__truncdfsf2+0xc0>
c00281d9:	31 c0                	xor    eax,eax
c00281db:	c1 fa 17             	sar    edx,0x17
c00281de:	80 ca ff             	or     dl,0xff
c00281e1:	eb 0e                	jmp    c00281f1 <__truncdfsf2+0xd6>
c00281e3:	c1 fa 1f             	sar    edx,0x1f
c00281e6:	c1 e2 08             	shl    edx,0x8
c00281e9:	09 ca                	or     edx,ecx
c00281eb:	eb 04                	jmp    c00281f1 <__truncdfsf2+0xd6>
c00281ed:	31 d2                	xor    edx,edx
c00281ef:	31 c0                	xor    eax,eax
c00281f1:	c1 e2 17             	shl    edx,0x17
c00281f4:	c1 e8 08             	shr    eax,0x8
c00281f7:	09 d0                	or     eax,edx
c00281f9:	eb 3c                	jmp    c0028237 <__truncdfsf2+0x11c>
c00281fb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028201:	89 ca                	mov    edx,ecx
c0028203:	c1 fa 0b             	sar    edx,0xb
c0028206:	c1 e2 08             	shl    edx,0x8
c0028209:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002820c:	31 db                	xor    ebx,ebx
c002820e:	85 ff                	test   edi,edi
c0028210:	0f 95 c3             	setne  bl
c0028213:	09 d8                	or     eax,ebx
c0028215:	89 c3                	mov    ebx,eax
c0028217:	c1 eb 08             	shr    ebx,0x8
c002821a:	a8 7f                	test   al,0x7f
c002821c:	0f 95 c2             	setne  dl
c002821f:	89 d6                	mov    esi,edx
c0028221:	09 de                	or     esi,ebx
c0028223:	83 e6 01             	and    esi,0x1
c0028226:	c1 e8 07             	shr    eax,0x7
c0028229:	21 f0                	and    eax,esi
c002822b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002822e:	09 ca                	or     edx,ecx
c0028230:	c1 e2 17             	shl    edx,0x17
c0028233:	09 da                	or     edx,ebx
c0028235:	01 d0                	add    eax,edx
c0028237:	83 c4 0c             	add    esp,0xc
c002823a:	5b                   	pop    ebx
c002823b:	5e                   	pop    esi
c002823c:	5f                   	pop    edi
c002823d:	5d                   	pop    ebp
c002823e:	c3                   	ret    

c002823f <__extendsfdf2>:
c002823f:	55                   	push   ebp
c0028240:	89 e5                	mov    ebp,esp
c0028242:	57                   	push   edi
c0028243:	56                   	push   esi
c0028244:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028247:	89 d1                	mov    ecx,edx
c0028249:	c1 f9 17             	sar    ecx,0x17
c002824c:	c1 e2 08             	shl    edx,0x8
c002824f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028255:	89 c8                	mov    eax,ecx
c0028257:	80 e4 f8             	and    ah,0xf8
c002825a:	8d 71 01             	lea    esi,[ecx+0x1]
c002825d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028263:	75 27                	jne    c002828c <__extendsfdf2+0x4d>
c0028265:	81 e1 ff 00 00 00    	and    ecx,0xff
c002826b:	75 18                	jne    c0028285 <__extendsfdf2+0x46>
c002826d:	85 d2                	test   edx,edx
c002826f:	74 20                	je     c0028291 <__extendsfdf2+0x52>
c0028271:	41                   	inc    ecx
c0028272:	01 d2                	add    edx,edx
c0028274:	79 fb                	jns    c0028271 <__extendsfdf2+0x32>
c0028276:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002827c:	29 c8                	sub    eax,ecx
c002827e:	05 81 03 00 00       	add    eax,0x381
c0028283:	eb 0c                	jmp    c0028291 <__extendsfdf2+0x52>
c0028285:	05 00 07 00 00       	add    eax,0x700
c002828a:	eb 05                	jmp    c0028291 <__extendsfdf2+0x52>
c002828c:	05 80 03 00 00       	add    eax,0x380
c0028291:	c1 e0 14             	shl    eax,0x14
c0028294:	89 c1                	mov    ecx,eax
c0028296:	89 d0                	mov    eax,edx
c0028298:	c1 e8 0b             	shr    eax,0xb
c002829b:	09 c1                	or     ecx,eax
c002829d:	c1 e2 15             	shl    edx,0x15
c00282a0:	89 d0                	mov    eax,edx
c00282a2:	89 ca                	mov    edx,ecx
c00282a4:	5e                   	pop    esi
c00282a5:	5f                   	pop    edi
c00282a6:	5d                   	pop    ebp
c00282a7:	c3                   	ret    
c00282a8:	66 90                	xchg   ax,ax
c00282aa:	66 90                	xchg   ax,ax
c00282ac:	66 90                	xchg   ax,ax
c00282ae:	66 90                	xchg   ax,ax

c00282b0 <fabs>:
c00282b0:	83 ec 0c             	sub    esp,0xc
c00282b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00282ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00282be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00282c7:	dd 04 24             	fld    QWORD PTR [esp]
c00282ca:	83 c4 0c             	add    esp,0xc
c00282cd:	c3                   	ret    
c00282ce:	66 90                	xchg   ax,ax

c00282d0 <lrint>:
c00282d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00282d4:	83 ec 04             	sub    esp,0x4
c00282d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00282da:	58                   	pop    eax
c00282db:	c3                   	ret    

c00282dc <lrintf>:
c00282dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00282e0:	83 ec 04             	sub    esp,0x4
c00282e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00282e6:	58                   	pop    eax
c00282e7:	c3                   	ret    

Disassembly of section .init:

c00282e8 <_init>:
c00282e8:	55                   	push   ebp
c00282e9:	89 e5                	mov    ebp,esp
c00282eb:	e8 28 7e fd ff       	call   c0000118 <frame_dummy>
c00282f0:	e8 5b e0 ff ff       	call   c0026350 <__do_global_ctors_aux>
c00282f5:	5d                   	pop    ebp
c00282f6:	c3                   	ret    

Disassembly of section .fini:

c00282f7 <_fini>:
c00282f7:	55                   	push   ebp
c00282f8:	89 e5                	mov    ebp,esp
c00282fa:	e8 a9 7d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00282ff:	5d                   	pop    ebp
c0028300:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028302 <Computer::~Computer()>:
c0028302:	83 ec 0c             	sub    esp,0xc
c0028305:	ba 7c 9e 02 c0       	mov    edx,0xc0029e7c
c002830a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830e:	89 10                	mov    DWORD PTR [eax],edx
c0028310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028314:	83 ec 0c             	sub    esp,0xc
c0028317:	50                   	push   eax
c0028318:	e8 e7 b5 fe ff       	call   c0013904 <Device::~Device()>
c002831d:	83 c4 10             	add    esp,0x10
c0028320:	90                   	nop
c0028321:	83 c4 0c             	add    esp,0xc
c0028324:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028326 <Computer::~Computer()>:
c0028326:	83 ec 0c             	sub    esp,0xc
c0028329:	83 ec 0c             	sub    esp,0xc
c002832c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028330:	e8 cd ff ff ff       	call   c0028302 <Computer::~Computer()>
c0028335:	83 c4 10             	add    esp,0x10
c0028338:	83 ec 08             	sub    esp,0x8
c002833b:	68 ec 01 00 00       	push   0x1ec
c0028340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028344:	e8 dc a1 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028349:	83 c4 10             	add    esp,0x10
c002834c:	83 c4 0c             	add    esp,0xc
c002834f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028350 <idleCommon()>:
c0028350:	83 ec 0c             	sub    esp,0xc
c0028353:	fa                   	cli    
c0028354:	ff 05 a8 0c 03 c0    	inc    DWORD PTR ds:0xc0030ca8
c002835a:	e8 96 55 ff ff       	call   c001d8f5 <schedule()>
c002835f:	a1 a8 0c 03 c0       	mov    eax,ds:0xc0030ca8
c0028364:	48                   	dec    eax
c0028365:	a3 a8 0c 03 c0       	mov    ds:0xc0030ca8,eax
c002836a:	75 01                	jne    c002836d <idleCommon()+0x1d>
c002836c:	fb                   	sti    
c002836d:	83 c4 0c             	add    esp,0xc
c0028370:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028372 <LinkedList<UnixFile>::~LinkedList()>:
c0028372:	90                   	nop
c0028373:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028374 <LinkedList<UnixFile>::LinkedList()>:
c0028374:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028378:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002837e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028382:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002838d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028398:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002839e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00283a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283b4:	90                   	nop
c00283b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00283b6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00283b6:	83 ec 0c             	sub    esp,0xc
c00283b9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283be:	75 10                	jne    c00283d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00283c0:	83 ec 0c             	sub    esp,0xc
c00283c3:	68 88 a0 02 c0       	push   0xc002a088
c00283c8:	e8 9c 19 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00283cd:	83 c4 10             	add    esp,0x10
c00283d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d6:	85 c0                	test   eax,eax
c00283d8:	74 34                	je     c002840e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283e1:	85 c0                	test   eax,eax
c00283e3:	74 29                	je     c002840e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00283e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028405:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002840c:	eb 65                	jmp    c0028473 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002840e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028412:	8b 00                	mov    eax,DWORD PTR [eax]
c0028414:	85 c0                	test   eax,eax
c0028416:	75 4b                	jne    c0028463 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002841f:	85 c0                	test   eax,eax
c0028421:	75 40                	jne    c0028463 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028427:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002842b:	89 10                	mov    DWORD PTR [eax],edx
c002842d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028431:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028435:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002843f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002844a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002844d:	85 c0                	test   eax,eax
c002844f:	74 22                	je     c0028473 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028451:	83 ec 0c             	sub    esp,0xc
c0028454:	68 aa a0 02 c0       	push   0xc002a0aa
c0028459:	e8 0b 19 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c002845e:	83 c4 10             	add    esp,0x10
c0028461:	eb 10                	jmp    c0028473 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028463:	83 ec 0c             	sub    esp,0xc
c0028466:	68 b4 a0 02 c0       	push   0xc002a0b4
c002846b:	e8 f9 18 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028470:	83 c4 10             	add    esp,0x10
c0028473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028477:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002847a:	8d 50 01             	lea    edx,[eax+0x1]
c002847d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028481:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028484:	90                   	nop
c0028485:	83 c4 0c             	add    esp,0xc
c0028488:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002848a <LinkedList<UnixFile>::getFirstElement()>:
c002848a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002848e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028490:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028492 <LinkedList<UnixFile>::removeFirst()>:
c0028492:	83 ec 0c             	sub    esp,0xc
c0028495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028499:	8b 00                	mov    eax,DWORD PTR [eax]
c002849b:	85 c0                	test   eax,eax
c002849d:	75 12                	jne    c00284b1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002849f:	83 ec 0c             	sub    esp,0xc
c00284a2:	68 c0 a0 02 c0       	push   0xc002a0c0
c00284a7:	e8 bd 18 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00284ac:	83 c4 10             	add    esp,0x10
c00284af:	eb 7e                	jmp    c002852f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00284b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284bb:	85 c0                	test   eax,eax
c00284bd:	74 10                	je     c00284cf <LinkedList<UnixFile>::removeFirst()+0x3d>
c00284bf:	83 ec 0c             	sub    esp,0xc
c00284c2:	68 0b a1 02 c0       	push   0xc002a10b
c00284c7:	e8 9d 18 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00284cc:	83 c4 10             	add    esp,0x10
c00284cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00284d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284d8:	85 c0                	test   eax,eax
c00284da:	75 33                	jne    c002850f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00284dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00284e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00284f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284f8:	83 f8 01             	cmp    eax,0x1
c00284fb:	74 21                	je     c002851e <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284fd:	83 ec 0c             	sub    esp,0xc
c0028500:	68 e4 a0 02 c0       	push   0xc002a0e4
c0028505:	e8 5f 18 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c002850a:	83 c4 10             	add    esp,0x10
c002850d:	eb 0f                	jmp    c002851e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002850f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028513:	8b 00                	mov    eax,DWORD PTR [eax]
c0028515:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851c:	89 10                	mov    DWORD PTR [eax],edx
c002851e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028522:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028525:	8d 50 ff             	lea    edx,[eax-0x1]
c0028528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002852f:	83 c4 0c             	add    esp,0xc
c0028532:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028534 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028538:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002853b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002853c <DriverlessDevice::~DriverlessDevice()>:
c002853c:	ba bc a8 02 c0       	mov    edx,0xc002a8bc
c0028541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028545:	89 10                	mov    DWORD PTR [eax],edx
c0028547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002854b:	50                   	push   eax
c002854c:	e8 b3 b3 fe ff       	call   c0013904 <Device::~Device()>
c0028551:	83 c4 04             	add    esp,0x4
c0028554:	90                   	nop
c0028555:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028556 <DriverlessDevice::~DriverlessDevice()>:
c0028556:	83 ec 0c             	sub    esp,0xc
c0028559:	83 ec 0c             	sub    esp,0xc
c002855c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028560:	e8 d7 ff ff ff       	call   c002853c <DriverlessDevice::~DriverlessDevice()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	83 ec 08             	sub    esp,0x8
c002856b:	68 58 01 00 00       	push   0x158
c0028570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028574:	e8 ac 9f fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028579:	83 c4 10             	add    esp,0x10
c002857c:	83 c4 0c             	add    esp,0xc
c002857f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028580 <LinkedList<Device>::addElement(Device*)>:
c0028580:	83 ec 0c             	sub    esp,0xc
c0028583:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028588:	75 10                	jne    c002859a <LinkedList<Device>::addElement(Device*)+0x1a>
c002858a:	83 ec 0c             	sub    esp,0xc
c002858d:	68 88 a0 02 c0       	push   0xc002a088
c0028592:	e8 d2 17 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028597:	83 c4 10             	add    esp,0x10
c002859a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859e:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a0:	85 c0                	test   eax,eax
c00285a2:	74 3a                	je     c00285de <LinkedList<Device>::addElement(Device*)+0x5e>
c00285a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285ab:	85 c0                	test   eax,eax
c00285ad:	74 2f                	je     c00285de <LinkedList<Device>::addElement(Device*)+0x5e>
c00285af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285ba:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00285c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285d2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285dc:	eb 68                	jmp    c0028646 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285e4:	85 c0                	test   eax,eax
c00285e6:	75 4e                	jne    c0028636 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285ef:	85 c0                	test   eax,eax
c00285f1:	75 43                	jne    c0028636 <LinkedList<Device>::addElement(Device*)+0xb6>
c00285f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285fb:	89 10                	mov    DWORD PTR [eax],edx
c00285fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028601:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028605:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002860f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028620:	85 c0                	test   eax,eax
c0028622:	74 22                	je     c0028646 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028624:	83 ec 0c             	sub    esp,0xc
c0028627:	68 aa a0 02 c0       	push   0xc002a0aa
c002862c:	e8 38 17 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028631:	83 c4 10             	add    esp,0x10
c0028634:	eb 10                	jmp    c0028646 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028636:	83 ec 0c             	sub    esp,0xc
c0028639:	68 b4 a0 02 c0       	push   0xc002a0b4
c002863e:	e8 26 17 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028643:	83 c4 10             	add    esp,0x10
c0028646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002864d:	8d 50 01             	lea    edx,[eax+0x1]
c0028650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028654:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028657:	90                   	nop
c0028658:	83 c4 0c             	add    esp,0xc
c002865b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002865c <LinkedList<Device>::LinkedList()>:
c002865c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028660:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002866a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028675:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002867c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028680:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002868a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028695:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002869c:	90                   	nop
c002869d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002869e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002869e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00286a4:	85 c0                	test   eax,eax
c00286a6:	75 0e                	jne    c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00286a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286af:	85 c0                	test   eax,eax
c00286b1:	75 03                	jne    c00286b6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00286b3:	b0 01                	mov    al,0x1
c00286b5:	c3                   	ret    
c00286b6:	b0 00                	mov    al,0x0
c00286b8:	90                   	nop
c00286b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00286ba <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00286ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286be:	8b 00                	mov    eax,DWORD PTR [eax]
c00286c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00286c2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00286c2:	83 ec 0c             	sub    esp,0xc
c00286c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cb:	85 c0                	test   eax,eax
c00286cd:	75 15                	jne    c00286e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00286cf:	83 ec 0c             	sub    esp,0xc
c00286d2:	68 c0 a0 02 c0       	push   0xc002a0c0
c00286d7:	e8 8d 16 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00286dc:	83 c4 10             	add    esp,0x10
c00286df:	e9 88 00 00 00       	jmp    c002876c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286ee:	85 c0                	test   eax,eax
c00286f0:	0f 95 c0             	setne  al
c00286f3:	84 c0                	test   al,al
c00286f5:	74 10                	je     c0028707 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00286f7:	83 ec 0c             	sub    esp,0xc
c00286fa:	68 0b a1 02 c0       	push   0xc002a10b
c00286ff:	e8 65 16 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028704:	83 c4 10             	add    esp,0x10
c0028707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870b:	8b 00                	mov    eax,DWORD PTR [eax]
c002870d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028710:	85 c0                	test   eax,eax
c0028712:	0f 94 c0             	sete   al
c0028715:	84 c0                	test   al,al
c0028717:	74 33                	je     c002874c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028727:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002872e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028732:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028735:	83 f8 01             	cmp    eax,0x1
c0028738:	74 21                	je     c002875b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 e4 a0 02 c0       	push   0xc002a0e4
c0028742:	e8 22 16 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	eb 0f                	jmp    c002875b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002874c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028750:	8b 00                	mov    eax,DWORD PTR [eax]
c0028752:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028759:	89 10                	mov    DWORD PTR [eax],edx
c002875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028762:	8d 50 ff             	lea    edx,[eax-0x1]
c0028765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028769:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002876c:	83 c4 0c             	add    esp,0xc
c002876f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028770 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028778:	75 10                	jne    c002878a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002877a:	83 ec 0c             	sub    esp,0xc
c002877d:	68 88 a0 02 c0       	push   0xc002a088
c0028782:	e8 e2 15 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028787:	83 c4 10             	add    esp,0x10
c002878a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028790:	85 c0                	test   eax,eax
c0028792:	74 34                	je     c00287c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879b:	85 c0                	test   eax,eax
c002879d:	74 29                	je     c00287c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002879f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00287ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287bf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287c6:	eb 65                	jmp    c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ce:	85 c0                	test   eax,eax
c00287d0:	75 4b                	jne    c002881d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d9:	85 c0                	test   eax,eax
c00287db:	75 40                	jne    c002881d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00287dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e5:	89 10                	mov    DWORD PTR [eax],edx
c00287e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028807:	85 c0                	test   eax,eax
c0028809:	74 22                	je     c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002880b:	83 ec 0c             	sub    esp,0xc
c002880e:	68 aa a0 02 c0       	push   0xc002a0aa
c0028813:	e8 51 15 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028818:	83 c4 10             	add    esp,0x10
c002881b:	eb 10                	jmp    c002882d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002881d:	83 ec 0c             	sub    esp,0xc
c0028820:	68 b4 a0 02 c0       	push   0xc002a0b4
c0028825:	e8 3f 15 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c002882a:	83 c4 10             	add    esp,0x10
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028834:	8d 50 01             	lea    edx,[eax+0x1]
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002883e:	90                   	nop
c002883f:	83 c4 0c             	add    esp,0xc
c0028842:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028844 <ACPI::~ACPI()>:
c0028844:	83 ec 0c             	sub    esp,0xc
c0028847:	ba 28 b1 02 c0       	mov    edx,0xc002b128
c002884c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028850:	89 10                	mov    DWORD PTR [eax],edx
c0028852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028856:	83 ec 0c             	sub    esp,0xc
c0028859:	50                   	push   eax
c002885a:	e8 a5 b0 fe ff       	call   c0013904 <Device::~Device()>
c002885f:	83 c4 10             	add    esp,0x10
c0028862:	90                   	nop
c0028863:	83 c4 0c             	add    esp,0xc
c0028866:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028868 <ACPI::~ACPI()>:
c0028868:	83 ec 0c             	sub    esp,0xc
c002886b:	83 ec 0c             	sub    esp,0xc
c002886e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028872:	e8 cd ff ff ff       	call   c0028844 <ACPI::~ACPI()>
c0028877:	83 c4 10             	add    esp,0x10
c002887a:	83 ec 08             	sub    esp,0x8
c002887d:	68 64 12 00 00       	push   0x1264
c0028882:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028886:	e8 9a 9c fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c002888b:	83 c4 10             	add    esp,0x10
c002888e:	83 c4 0c             	add    esp,0xc
c0028891:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028892 <LinkedList<Device>::~LinkedList()>:
c0028892:	90                   	nop
c0028893:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028894 <LinkedList<Device>::isEmpty()>:
c0028894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028898:	8b 00                	mov    eax,DWORD PTR [eax]
c002889a:	85 c0                	test   eax,eax
c002889c:	75 0e                	jne    c00288ac <LinkedList<Device>::isEmpty()+0x18>
c002889e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a5:	85 c0                	test   eax,eax
c00288a7:	75 03                	jne    c00288ac <LinkedList<Device>::isEmpty()+0x18>
c00288a9:	b0 01                	mov    al,0x1
c00288ab:	c3                   	ret    
c00288ac:	b0 00                	mov    al,0x0
c00288ae:	90                   	nop
c00288af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00288b0 <LinkedList<Device>::getFirstElement()>:
c00288b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00288b6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00288b8 <LinkedList<Device>::removeFirst()>:
c00288b8:	83 ec 0c             	sub    esp,0xc
c00288bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00288c1:	85 c0                	test   eax,eax
c00288c3:	75 15                	jne    c00288da <LinkedList<Device>::removeFirst()+0x22>
c00288c5:	83 ec 0c             	sub    esp,0xc
c00288c8:	68 c0 a0 02 c0       	push   0xc002a0c0
c00288cd:	e8 97 14 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00288d2:	83 c4 10             	add    esp,0x10
c00288d5:	e9 87 00 00 00       	jmp    c0028961 <LinkedList<Device>::removeFirst()+0xa9>
c00288da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00288e7:	85 c0                	test   eax,eax
c00288e9:	74 10                	je     c00288fb <LinkedList<Device>::removeFirst()+0x43>
c00288eb:	83 ec 0c             	sub    esp,0xc
c00288ee:	68 0b a1 02 c0       	push   0xc002a10b
c00288f3:	e8 71 14 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c00288f8:	83 c4 10             	add    esp,0x10
c00288fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0028901:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028907:	85 c0                	test   eax,eax
c0028909:	75 33                	jne    c002893e <LinkedList<Device>::removeFirst()+0x86>
c002890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028924:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028927:	83 f8 01             	cmp    eax,0x1
c002892a:	74 24                	je     c0028950 <LinkedList<Device>::removeFirst()+0x98>
c002892c:	83 ec 0c             	sub    esp,0xc
c002892f:	68 e4 a0 02 c0       	push   0xc002a0e4
c0028934:	e8 30 14 ff ff       	call   c0019d69 <Krnl::panic(char const*)>
c0028939:	83 c4 10             	add    esp,0x10
c002893c:	eb 12                	jmp    c0028950 <LinkedList<Device>::removeFirst()+0x98>
c002893e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028942:	8b 00                	mov    eax,DWORD PTR [eax]
c0028944:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894e:	89 10                	mov    DWORD PTR [eax],edx
c0028950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028954:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028957:	8d 50 ff             	lea    edx,[eax-0x1]
c002895a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028961:	83 c4 0c             	add    esp,0xc
c0028964:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028966 <CPU::~CPU()>:
c0028966:	83 ec 0c             	sub    esp,0xc
c0028969:	ba 78 b3 02 c0       	mov    edx,0xc002b378
c002896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028972:	89 10                	mov    DWORD PTR [eax],edx
c0028974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028978:	83 ec 0c             	sub    esp,0xc
c002897b:	50                   	push   eax
c002897c:	e8 83 af fe ff       	call   c0013904 <Device::~Device()>
c0028981:	83 c4 10             	add    esp,0x10
c0028984:	90                   	nop
c0028985:	83 c4 0c             	add    esp,0xc
c0028988:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002898a <CPU::~CPU()>:
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	83 ec 0c             	sub    esp,0xc
c0028990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028994:	e8 cd ff ff ff       	call   c0028966 <CPU::~CPU()>
c0028999:	83 c4 10             	add    esp,0x10
c002899c:	83 ec 08             	sub    esp,0x8
c002899f:	68 98 11 00 00       	push   0x1198
c00289a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289a8:	e8 78 9b fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c00289ad:	83 c4 10             	add    esp,0x10
c00289b0:	83 c4 0c             	add    esp,0xc
c00289b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00289b4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00289b4:	90                   	nop
c00289b5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00289b6 <ThreadControlBlock::ThreadControlBlock()>:
c00289b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289ba:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00289c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289c5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00289cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289d0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00289d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289db:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00289e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289e6:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00289ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00289f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289f9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00289fd:	90                   	nop
c00289fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028a00 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a24:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028a40:	90                   	nop
c0028a41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028a42 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028a49:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028a4a <Vm::_FPUState::_FPUState()>:
c0028a4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a4e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028a55:	90                   	nop
c0028a56:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028a58 <PCI::~PCI()>:
c0028a58:	83 ec 0c             	sub    esp,0xc
c0028a5b:	ba a4 be 02 c0       	mov    edx,0xc002bea4
c0028a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a64:	89 10                	mov    DWORD PTR [eax],edx
c0028a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6a:	83 ec 0c             	sub    esp,0xc
c0028a6d:	50                   	push   eax
c0028a6e:	e8 61 a8 fe ff       	call   c00132d4 <Bus::~Bus()>
c0028a73:	83 c4 10             	add    esp,0x10
c0028a76:	90                   	nop
c0028a77:	83 c4 0c             	add    esp,0xc
c0028a7a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028a7c <PCI::~PCI()>:
c0028a7c:	83 ec 0c             	sub    esp,0xc
c0028a7f:	83 ec 0c             	sub    esp,0xc
c0028a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a86:	e8 cd ff ff ff       	call   c0028a58 <PCI::~PCI()>
c0028a8b:	83 c4 10             	add    esp,0x10
c0028a8e:	83 ec 08             	sub    esp,0x8
c0028a91:	68 5c 01 00 00       	push   0x15c
c0028a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a9a:	e8 86 9a fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028a9f:	83 c4 10             	add    esp,0x10
c0028aa2:	83 c4 0c             	add    esp,0xc
c0028aa5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028aa6 <IDE::~IDE()>:
c0028aa6:	83 ec 0c             	sub    esp,0xc
c0028aa9:	ba 58 bf 02 c0       	mov    edx,0xc002bf58
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	89 10                	mov    DWORD PTR [eax],edx
c0028ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab8:	83 ec 0c             	sub    esp,0xc
c0028abb:	50                   	push   eax
c0028abc:	e8 59 b3 fe ff       	call   c0013e1a <HardDiskController::~HardDiskController()>
c0028ac1:	83 c4 10             	add    esp,0x10
c0028ac4:	90                   	nop
c0028ac5:	83 c4 0c             	add    esp,0xc
c0028ac8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028aca <IDE::~IDE()>:
c0028aca:	83 ec 0c             	sub    esp,0xc
c0028acd:	83 ec 0c             	sub    esp,0xc
c0028ad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad4:	e8 cd ff ff ff       	call   c0028aa6 <IDE::~IDE()>
c0028ad9:	83 c4 10             	add    esp,0x10
c0028adc:	83 ec 08             	sub    esp,0x8
c0028adf:	68 70 02 00 00       	push   0x270
c0028ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae8:	e8 38 9a fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028aed:	83 c4 10             	add    esp,0x10
c0028af0:	83 c4 0c             	add    esp,0xc
c0028af3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028af4 <SATABus::~SATABus()>:
c0028af4:	83 ec 0c             	sub    esp,0xc
c0028af7:	ba d0 bf 02 c0       	mov    edx,0xc002bfd0
c0028afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b00:	89 10                	mov    DWORD PTR [eax],edx
c0028b02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	50                   	push   eax
c0028b0a:	e8 0b b3 fe ff       	call   c0013e1a <HardDiskController::~HardDiskController()>
c0028b0f:	83 c4 10             	add    esp,0x10
c0028b12:	90                   	nop
c0028b13:	83 c4 0c             	add    esp,0xc
c0028b16:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028b18 <SATABus::~SATABus()>:
c0028b18:	83 ec 0c             	sub    esp,0xc
c0028b1b:	83 ec 0c             	sub    esp,0xc
c0028b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b22:	e8 cd ff ff ff       	call   c0028af4 <SATABus::~SATABus()>
c0028b27:	83 c4 10             	add    esp,0x10
c0028b2a:	83 ec 08             	sub    esp,0x8
c0028b2d:	68 64 01 00 00       	push   0x164
c0028b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b36:	e8 ea 99 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028b3b:	83 c4 10             	add    esp,0x10
c0028b3e:	83 c4 0c             	add    esp,0xc
c0028b41:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028b42 <ATA::~ATA()>:
c0028b42:	83 ec 0c             	sub    esp,0xc
c0028b45:	ba 1c c0 02 c0       	mov    edx,0xc002c01c
c0028b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4e:	89 10                	mov    DWORD PTR [eax],edx
c0028b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b54:	83 ec 0c             	sub    esp,0xc
c0028b57:	50                   	push   eax
c0028b58:	e8 9f b3 fe ff       	call   c0013efc <PhysicalDisk::~PhysicalDisk()>
c0028b5d:	83 c4 10             	add    esp,0x10
c0028b60:	90                   	nop
c0028b61:	83 c4 0c             	add    esp,0xc
c0028b64:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028b66 <ATA::~ATA()>:
c0028b66:	83 ec 0c             	sub    esp,0xc
c0028b69:	83 ec 0c             	sub    esp,0xc
c0028b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b70:	e8 cd ff ff ff       	call   c0028b42 <ATA::~ATA()>
c0028b75:	83 c4 10             	add    esp,0x10
c0028b78:	83 ec 08             	sub    esp,0x8
c0028b7b:	68 7c 01 00 00       	push   0x17c
c0028b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b84:	e8 9c 99 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028b89:	83 c4 10             	add    esp,0x10
c0028b8c:	83 c4 0c             	add    esp,0xc
c0028b8f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028b90 <ATAPI::~ATAPI()>:
c0028b90:	83 ec 0c             	sub    esp,0xc
c0028b93:	ba 54 c0 02 c0       	mov    edx,0xc002c054
c0028b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9c:	89 10                	mov    DWORD PTR [eax],edx
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	83 ec 0c             	sub    esp,0xc
c0028ba5:	50                   	push   eax
c0028ba6:	e8 51 b3 fe ff       	call   c0013efc <PhysicalDisk::~PhysicalDisk()>
c0028bab:	83 c4 10             	add    esp,0x10
c0028bae:	90                   	nop
c0028baf:	83 c4 0c             	add    esp,0xc
c0028bb2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028bb4 <ATAPI::~ATAPI()>:
c0028bb4:	83 ec 0c             	sub    esp,0xc
c0028bb7:	83 ec 0c             	sub    esp,0xc
c0028bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bbe:	e8 cd ff ff ff       	call   c0028b90 <ATAPI::~ATAPI()>
c0028bc3:	83 c4 10             	add    esp,0x10
c0028bc6:	83 ec 08             	sub    esp,0x8
c0028bc9:	68 80 01 00 00       	push   0x180
c0028bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd2:	e8 4e 99 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028bd7:	83 c4 10             	add    esp,0x10
c0028bda:	83 c4 0c             	add    esp,0xc
c0028bdd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028bde <SATA::~SATA()>:
c0028bde:	83 ec 0c             	sub    esp,0xc
c0028be1:	ba 08 c1 02 c0       	mov    edx,0xc002c108
c0028be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bea:	89 10                	mov    DWORD PTR [eax],edx
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	50                   	push   eax
c0028bf4:	e8 03 b3 fe ff       	call   c0013efc <PhysicalDisk::~PhysicalDisk()>
c0028bf9:	83 c4 10             	add    esp,0x10
c0028bfc:	90                   	nop
c0028bfd:	83 c4 0c             	add    esp,0xc
c0028c00:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028c02 <SATA::~SATA()>:
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	83 ec 0c             	sub    esp,0xc
c0028c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c0c:	e8 cd ff ff ff       	call   c0028bde <SATA::~SATA()>
c0028c11:	83 c4 10             	add    esp,0x10
c0028c14:	83 ec 08             	sub    esp,0x8
c0028c17:	68 7c 01 00 00       	push   0x17c
c0028c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c20:	e8 00 99 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028c25:	83 c4 10             	add    esp,0x10
c0028c28:	83 c4 0c             	add    esp,0xc
c0028c2b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028c2c <SATAPI::~SATAPI()>:
c0028c2c:	83 ec 0c             	sub    esp,0xc
c0028c2f:	ba e4 c1 02 c0       	mov    edx,0xc002c1e4
c0028c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c38:	89 10                	mov    DWORD PTR [eax],edx
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	83 ec 0c             	sub    esp,0xc
c0028c41:	50                   	push   eax
c0028c42:	e8 b5 b2 fe ff       	call   c0013efc <PhysicalDisk::~PhysicalDisk()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	90                   	nop
c0028c4b:	83 c4 0c             	add    esp,0xc
c0028c4e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028c50 <SATAPI::~SATAPI()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	83 ec 0c             	sub    esp,0xc
c0028c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5a:	e8 cd ff ff ff       	call   c0028c2c <SATAPI::~SATAPI()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	83 ec 08             	sub    esp,0x8
c0028c65:	68 80 01 00 00       	push   0x180
c0028c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6e:	e8 b2 98 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028c73:	83 c4 10             	add    esp,0x10
c0028c76:	83 c4 0c             	add    esp,0xc
c0028c79:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028c7a <AVX::~AVX()>:
c0028c7a:	83 ec 0c             	sub    esp,0xc
c0028c7d:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	89 10                	mov    DWORD PTR [eax],edx
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	83 ec 0c             	sub    esp,0xc
c0028c8f:	50                   	push   eax
c0028c90:	e8 eb b2 fe ff       	call   c0013f80 <FPU::~FPU()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	90                   	nop
c0028c99:	83 c4 0c             	add    esp,0xc
c0028c9c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028c9e <AVX::~AVX()>:
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	83 ec 0c             	sub    esp,0xc
c0028ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca8:	e8 cd ff ff ff       	call   c0028c7a <AVX::~AVX()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	83 ec 08             	sub    esp,0x8
c0028cb3:	68 58 01 00 00       	push   0x158
c0028cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cbc:	e8 64 98 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028cc1:	83 c4 10             	add    esp,0x10
c0028cc4:	83 c4 0c             	add    esp,0xc
c0028cc7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028cc8 <MMX::~MMX()>:
c0028cc8:	83 ec 0c             	sub    esp,0xc
c0028ccb:	ba 64 c2 02 c0       	mov    edx,0xc002c264
c0028cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd4:	89 10                	mov    DWORD PTR [eax],edx
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	50                   	push   eax
c0028cde:	e8 9d b2 fe ff       	call   c0013f80 <FPU::~FPU()>
c0028ce3:	83 c4 10             	add    esp,0x10
c0028ce6:	90                   	nop
c0028ce7:	83 c4 0c             	add    esp,0xc
c0028cea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028cec <MMX::~MMX()>:
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	83 ec 0c             	sub    esp,0xc
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 cd ff ff ff       	call   c0028cc8 <MMX::~MMX()>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 ec 08             	sub    esp,0x8
c0028d01:	68 58 01 00 00       	push   0x158
c0028d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0a:	e8 16 98 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	83 c4 0c             	add    esp,0xc
c0028d15:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028d16 <SSE::~SSE()>:
c0028d16:	83 ec 0c             	sub    esp,0xc
c0028d19:	ba a4 c2 02 c0       	mov    edx,0xc002c2a4
c0028d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d22:	89 10                	mov    DWORD PTR [eax],edx
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	83 ec 0c             	sub    esp,0xc
c0028d2b:	50                   	push   eax
c0028d2c:	e8 4f b2 fe ff       	call   c0013f80 <FPU::~FPU()>
c0028d31:	83 c4 10             	add    esp,0x10
c0028d34:	90                   	nop
c0028d35:	83 c4 0c             	add    esp,0xc
c0028d38:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028d3a <SSE::~SSE()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	83 ec 0c             	sub    esp,0xc
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 cd ff ff ff       	call   c0028d16 <SSE::~SSE()>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 ec 08             	sub    esp,0x8
c0028d4f:	68 58 01 00 00       	push   0x158
c0028d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d58:	e8 c8 97 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028d5d:	83 c4 10             	add    esp,0x10
c0028d60:	83 c4 0c             	add    esp,0xc
c0028d63:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028d64 <x87::~x87()>:
c0028d64:	83 ec 0c             	sub    esp,0xc
c0028d67:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	89 10                	mov    DWORD PTR [eax],edx
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	83 ec 0c             	sub    esp,0xc
c0028d79:	50                   	push   eax
c0028d7a:	e8 01 b2 fe ff       	call   c0013f80 <FPU::~FPU()>
c0028d7f:	83 c4 10             	add    esp,0x10
c0028d82:	90                   	nop
c0028d83:	83 c4 0c             	add    esp,0xc
c0028d86:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028d88 <x87::~x87()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	83 ec 0c             	sub    esp,0xc
c0028d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d92:	e8 cd ff ff ff       	call   c0028d64 <x87::~x87()>
c0028d97:	83 c4 10             	add    esp,0x10
c0028d9a:	83 ec 08             	sub    esp,0x8
c0028d9d:	68 58 01 00 00       	push   0x158
c0028da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da6:	e8 7a 97 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 c4 0c             	add    esp,0xc
c0028db1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028db2 <IOAPIC::~IOAPIC()>:
c0028db2:	83 ec 0c             	sub    esp,0xc
c0028db5:	ba 3c c4 02 c0       	mov    edx,0xc002c43c
c0028dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbe:	89 10                	mov    DWORD PTR [eax],edx
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	50                   	push   eax
c0028dc8:	e8 37 ab fe ff       	call   c0013904 <Device::~Device()>
c0028dcd:	83 c4 10             	add    esp,0x10
c0028dd0:	90                   	nop
c0028dd1:	83 c4 0c             	add    esp,0xc
c0028dd4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028dd6 <IOAPIC::~IOAPIC()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	83 ec 0c             	sub    esp,0xc
c0028ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de0:	e8 cd ff ff ff       	call   c0028db2 <IOAPIC::~IOAPIC()>
c0028de5:	83 c4 10             	add    esp,0x10
c0028de8:	83 ec 08             	sub    esp,0x8
c0028deb:	68 68 01 00 00       	push   0x168
c0028df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df4:	e8 2c 97 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028df9:	83 c4 10             	add    esp,0x10
c0028dfc:	83 c4 0c             	add    esp,0xc
c0028dff:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028e00 <APIC::~APIC()>:
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	ba f4 c3 02 c0       	mov    edx,0xc002c3f4
c0028e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0c:	89 10                	mov    DWORD PTR [eax],edx
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	50                   	push   eax
c0028e16:	e8 2f b6 fe ff       	call   c001444a <InterruptController::~InterruptController()>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	90                   	nop
c0028e1f:	83 c4 0c             	add    esp,0xc
c0028e22:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028e24 <APIC::~APIC()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	83 ec 0c             	sub    esp,0xc
c0028e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2e:	e8 cd ff ff ff       	call   c0028e00 <APIC::~APIC()>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	83 ec 08             	sub    esp,0x8
c0028e39:	68 58 21 00 00       	push   0x2158
c0028e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e42:	e8 de 96 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028e47:	83 c4 10             	add    esp,0x10
c0028e4a:	83 c4 0c             	add    esp,0xc
c0028e4d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028e4e <PIC::~PIC()>:
c0028e4e:	83 ec 0c             	sub    esp,0xc
c0028e51:	ba 8c c4 02 c0       	mov    edx,0xc002c48c
c0028e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5a:	89 10                	mov    DWORD PTR [eax],edx
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	50                   	push   eax
c0028e64:	e8 e1 b5 fe ff       	call   c001444a <InterruptController::~InterruptController()>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	90                   	nop
c0028e6d:	83 c4 0c             	add    esp,0xc
c0028e70:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028e72 <PIC::~PIC()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	83 ec 0c             	sub    esp,0xc
c0028e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7c:	e8 cd ff ff ff       	call   c0028e4e <PIC::~PIC()>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	83 ec 08             	sub    esp,0x8
c0028e87:	68 58 21 00 00       	push   0x2158
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 90 96 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 c4 0c             	add    esp,0xc
c0028e9b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028e9c <APICTimer::~APICTimer()>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	ba e0 c4 02 c0       	mov    edx,0xc002c4e0
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	89 10                	mov    DWORD PTR [eax],edx
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	83 ec 0c             	sub    esp,0xc
c0028eb1:	50                   	push   eax
c0028eb2:	e8 eb d5 fe ff       	call   c00164a2 <Timer::~Timer()>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	90                   	nop
c0028ebb:	83 c4 0c             	add    esp,0xc
c0028ebe:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028ec0 <APICTimer::~APICTimer()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	83 ec 0c             	sub    esp,0xc
c0028ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eca:	e8 cd ff ff ff       	call   c0028e9c <APICTimer::~APICTimer()>
c0028ecf:	83 c4 10             	add    esp,0x10
c0028ed2:	83 ec 08             	sub    esp,0x8
c0028ed5:	68 60 01 00 00       	push   0x160
c0028eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ede:	e8 42 96 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	83 c4 0c             	add    esp,0xc
c0028ee9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028eea <PIT::~PIT()>:
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	ba 30 c5 02 c0       	mov    edx,0xc002c530
c0028ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef6:	89 10                	mov    DWORD PTR [eax],edx
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	83 ec 0c             	sub    esp,0xc
c0028eff:	50                   	push   eax
c0028f00:	e8 9d d5 fe ff       	call   c00164a2 <Timer::~Timer()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	90                   	nop
c0028f09:	83 c4 0c             	add    esp,0xc
c0028f0c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028f0e <PIT::~PIT()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	83 ec 0c             	sub    esp,0xc
c0028f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f18:	e8 cd ff ff ff       	call   c0028eea <PIT::~PIT()>
c0028f1d:	83 c4 10             	add    esp,0x10
c0028f20:	83 ec 08             	sub    esp,0x8
c0028f23:	68 5c 01 00 00       	push   0x15c
c0028f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2c:	e8 f4 95 fe ff       	call   c0012525 <operator delete(void*, unsigned long)>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	83 c4 0c             	add    esp,0xc
c0028f37:	c3                   	ret    
