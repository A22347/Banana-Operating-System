
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8f f7 00 00       	call   c000f7af <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c3 64 02 00       	call   c00264e8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 44 70 02 c0       	mov    ebx,0xc0027044
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 70 02 c0    	cmp    ebx,0xc0027050
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 2c b3 02 c0       	mov    eax,0xc002b32c
c0000049:	3d 2c b3 02 c0       	cmp    eax,0xc002b32c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 2c b3 02 c0       	push   0xc002b32c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 2c b3 02 c0       	mov    eax,0xc002b32c
c0000075:	2d 2c b3 02 c0       	sub    eax,0xc002b32c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 2c b3 02 c0       	push   0xc002b32c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 5c b9 02 c0 00 	cmp    BYTE PTR ds:0xc002b95c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 70 02 c0       	mov    ebx,0xc0027058
c00000bb:	81 eb 54 70 02 c0    	sub    ebx,0xc0027054
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 70 02 c0       	mov    esi,0xc0027054
c00000ca:	a1 60 b9 02 c0       	mov    eax,ds:0xc002b960
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 60 b9 02 c0       	mov    ds:0xc002b960,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 60 b9 02 c0       	mov    eax,ds:0xc002b960
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 2c b3 02 c0       	push   0xc002b32c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 5c b9 02 c0 01 	mov    BYTE PTR ds:0xc002b95c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 64 b9 02 c0       	push   0xc002b964
c000012c:	68 2c b3 02 c0       	push   0xc002b32c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	fa                   	cli    
c00002b0:	55                   	push   ebp
c00002b1:	89 e5                	mov    ebp,esp
c00002b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b6:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bc:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002bf:	25 ff ff 00 00       	and    eax,0xffff
c00002c4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002d0:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d6:	52                   	push   edx
c00002d7:	51                   	push   ecx
c00002d8:	68 02 02 02 00       	push   0x20202
c00002dd:	53                   	push   ebx
c00002de:	50                   	push   eax
c00002df:	cf                   	iret   

c00002e0 <goToUsermode>:
c00002e0:	55                   	push   ebp
c00002e1:	89 e5                	mov    ebp,esp
c00002e3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e6:	66 b8 23 00          	mov    ax,0x23
c00002ea:	66 8e d8             	mov    ds,ax
c00002ed:	66 8e c0             	mov    es,ax
c00002f0:	66 8e e0             	mov    fs,ax
c00002f3:	66 8e e8             	mov    gs,ax
c00002f6:	89 e0                	mov    eax,esp
c00002f8:	68 23 00 00 00       	push   0x23
c00002fd:	50                   	push   eax
c00002fe:	68 02 02 00 00       	push   0x202
c0000303:	68 1b 00 00 00       	push   0x1b
c0000308:	53                   	push   ebx
c0000309:	cf                   	iret   

c000030a <switchToThreadASMFirstTime>:
c000030a:	9c                   	pushf  
c000030b:	fa                   	cli    
c000030c:	50                   	push   eax
c000030d:	53                   	push   ebx
c000030e:	51                   	push   ecx
c000030f:	52                   	push   edx
c0000310:	56                   	push   esi
c0000311:	57                   	push   edi
c0000312:	55                   	push   ebp
c0000313:	e9 11 00 00 00       	jmp    c0000329 <commonThreadSwitch>

c0000318 <switchToThreadASM>:
c0000318:	9c                   	pushf  
c0000319:	50                   	push   eax
c000031a:	53                   	push   ebx
c000031b:	51                   	push   ecx
c000031c:	52                   	push   edx
c000031d:	56                   	push   esi
c000031e:	57                   	push   edi
c000031f:	55                   	push   ebp
c0000320:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000326:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000329 <commonThreadSwitch>:
c0000329:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032d:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000333:	8b 06                	mov    eax,DWORD PTR [esi]
c0000335:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000338:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033b:	0f 20 d9             	mov    ecx,cr3
c000033e:	39 c8                	cmp    eax,ecx
c0000340:	74 03                	je     c0000345 <commonThreadSwitch.doneVAS>
c0000342:	0f 22 d8             	mov    cr3,eax

c0000345 <commonThreadSwitch.doneVAS>:
c0000345:	85 d2                	test   edx,edx
c0000347:	75 11                	jne    c000035a <commonThreadSwitch.firstTime>
c0000349:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034c:	e8 49 ba 01 00       	call   c001bd9a <changeTSS>
c0000351:	5d                   	pop    ebp
c0000352:	5f                   	pop    edi
c0000353:	5e                   	pop    esi
c0000354:	5a                   	pop    edx
c0000355:	59                   	pop    ecx
c0000356:	5b                   	pop    ebx
c0000357:	58                   	pop    eax
c0000358:	9d                   	popf   
c0000359:	c3                   	ret    

c000035a <commonThreadSwitch.firstTime>:
c000035a:	fa                   	cli    
c000035b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035e:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000363:	60                   	pusha  
c0000364:	e8 02 21 01 00       	call   c001246b <mapVASFirstTime>
c0000369:	61                   	popa   
c000036a:	89 c4                	mov    esp,eax
c000036c:	56                   	push   esi
c000036d:	52                   	push   edx
c000036e:	e8 27 ba 01 00       	call   c001bd9a <changeTSS>
c0000373:	5a                   	pop    edx
c0000374:	5e                   	pop    esi
c0000375:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037c:	5d                   	pop    ebp
c000037d:	5f                   	pop    edi
c000037e:	5e                   	pop    esi
c000037f:	59                   	pop    ecx
c0000380:	59                   	pop    ecx
c0000381:	5b                   	pop    ebx
c0000382:	58                   	pop    eax
c0000383:	81 c4 04 00 00 00    	add    esp,0x4
c0000389:	6a 02                	push   0x2
c000038b:	9d                   	popf   
c000038c:	52                   	push   edx
c000038d:	e8 3e be 01 00       	call   c001c1d0 <taskStartupFunction>
c0000392:	5a                   	pop    edx
c0000393:	50                   	push   eax
c0000394:	ff d2                	call   edx
c0000396:	e8 eb c3 01 00       	call   c001c786 <taskReturned>
c000039b:	e9 fb ff ff ff       	jmp    c000039b <commonThreadSwitch.firstTime+0x41>

c00003a0 <asmQuickAcquireLock>:
c00003a0:	55                   	push   ebp
c00003a1:	89 e5                	mov    ebp,esp
c00003a3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a6 <asmQuickAcquireLock.retry>:
c00003a6:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ab:	72 02                	jb     c00003af <asmQuickAcquireLock.spin_with_pause>
c00003ad:	fa                   	cli    
c00003ae:	c3                   	ret    

c00003af <asmQuickAcquireLock.spin_with_pause>:
c00003af:	f3 90                	pause  
c00003b1:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b7:	75 f6                	jne    c00003af <asmQuickAcquireLock.spin_with_pause>
c00003b9:	e9 e8 ff ff ff       	jmp    c00003a6 <asmQuickAcquireLock.retry>

c00003be <asmQuickReleaseLock>:
c00003be:	55                   	push   ebp
c00003bf:	89 e5                	mov    ebp,esp
c00003c1:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c8:	5d                   	pop    ebp
c00003c9:	c3                   	ret    

c00003ca <asmAcquireLock>:
c00003ca:	55                   	push   ebp
c00003cb:	89 e5                	mov    ebp,esp
c00003cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003d0 <asmAcquireLock.retry>:
c00003d0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d5:	72 05                	jb     c00003dc <asmAcquireLock.spin_with_pause>
c00003d7:	9c                   	pushf  
c00003d8:	58                   	pop    eax
c00003d9:	fa                   	cli    
c00003da:	5d                   	pop    ebp
c00003db:	c3                   	ret    

c00003dc <asmAcquireLock.spin_with_pause>:
c00003dc:	f3 90                	pause  
c00003de:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e4:	75 f6                	jne    c00003dc <asmAcquireLock.spin_with_pause>
c00003e6:	e9 e5 ff ff ff       	jmp    c00003d0 <asmAcquireLock.retry>

c00003eb <asmReleaseLock>:
c00003eb:	55                   	push   ebp
c00003ec:	89 e5                	mov    ebp,esp
c00003ee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003fa:	52                   	push   edx
c00003fb:	9d                   	popf   
c00003fc:	5d                   	pop    ebp
c00003fd:	c3                   	ret    

c00003fe <loadGDT>:
c00003fe:	0f 01 15 90 bd 02 c0 	lgdtd  ds:0xc002bd90
c0000405:	66 b8 10 00          	mov    ax,0x10
c0000409:	66 8e d8             	mov    ds,ax
c000040c:	66 8e c0             	mov    es,ax
c000040f:	66 8e e0             	mov    fs,ax
c0000412:	66 8e e8             	mov    gs,ax
c0000415:	66 8e d0             	mov    ss,ax
c0000418:	e9 00 00 00 00       	jmp    c000041d <flush2>

c000041d <flush2>:
c000041d:	c3                   	ret    

c000041e <isr0>:
c000041e:	fa                   	cli    
c000041f:	68 00 00 00 00       	push   0x0
c0000424:	68 00 00 00 00       	push   0x0
c0000429:	e9 44 01 00 00       	jmp    c0000572 <int_common_stub>

c000042e <isr1>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 01                	push   0x1
c0000433:	e9 3a 01 00 00       	jmp    c0000572 <int_common_stub>

c0000438 <isr2>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 02                	push   0x2
c000043d:	e9 30 01 00 00       	jmp    c0000572 <int_common_stub>

c0000442 <isr3>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 03                	push   0x3
c0000447:	e9 26 01 00 00       	jmp    c0000572 <int_common_stub>

c000044c <isr4>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 04                	push   0x4
c0000451:	e9 1c 01 00 00       	jmp    c0000572 <int_common_stub>

c0000456 <isr5>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 05                	push   0x5
c000045b:	e9 12 01 00 00       	jmp    c0000572 <int_common_stub>

c0000460 <isr6>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 06                	push   0x6
c0000465:	e9 08 01 00 00       	jmp    c0000572 <int_common_stub>

c000046a <isr7>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 07                	push   0x7
c000046f:	e9 fe 00 00 00       	jmp    c0000572 <int_common_stub>

c0000474 <isr8>:
c0000474:	fa                   	cli    
c0000475:	6a 08                	push   0x8
c0000477:	e9 f6 00 00 00       	jmp    c0000572 <int_common_stub>

c000047c <isr9>:
c000047c:	fa                   	cli    
c000047d:	6a 00                	push   0x0
c000047f:	6a 09                	push   0x9
c0000481:	e9 ec 00 00 00       	jmp    c0000572 <int_common_stub>

c0000486 <isr10>:
c0000486:	fa                   	cli    
c0000487:	6a 0a                	push   0xa
c0000489:	e9 e4 00 00 00       	jmp    c0000572 <int_common_stub>

c000048e <isr11>:
c000048e:	fa                   	cli    
c000048f:	6a 0b                	push   0xb
c0000491:	e9 dc 00 00 00       	jmp    c0000572 <int_common_stub>

c0000496 <isr12>:
c0000496:	fa                   	cli    
c0000497:	6a 0c                	push   0xc
c0000499:	e9 d4 00 00 00       	jmp    c0000572 <int_common_stub>

c000049e <isr13>:
c000049e:	fa                   	cli    
c000049f:	6a 0d                	push   0xd
c00004a1:	e9 cc 00 00 00       	jmp    c0000572 <int_common_stub>

c00004a6 <isr14>:
c00004a6:	fa                   	cli    
c00004a7:	6a 0e                	push   0xe
c00004a9:	e9 c4 00 00 00       	jmp    c0000572 <int_common_stub>

c00004ae <isr15>:
c00004ae:	fa                   	cli    
c00004af:	6a 00                	push   0x0
c00004b1:	6a 0f                	push   0xf
c00004b3:	e9 ba 00 00 00       	jmp    c0000572 <int_common_stub>

c00004b8 <isr16>:
c00004b8:	fa                   	cli    
c00004b9:	6a 00                	push   0x0
c00004bb:	6a 10                	push   0x10
c00004bd:	e9 b0 00 00 00       	jmp    c0000572 <int_common_stub>

c00004c2 <isr17>:
c00004c2:	fa                   	cli    
c00004c3:	6a 00                	push   0x0
c00004c5:	6a 11                	push   0x11
c00004c7:	e9 a6 00 00 00       	jmp    c0000572 <int_common_stub>

c00004cc <isr18>:
c00004cc:	fa                   	cli    
c00004cd:	6a 00                	push   0x0
c00004cf:	6a 12                	push   0x12
c00004d1:	e9 9c 00 00 00       	jmp    c0000572 <int_common_stub>

c00004d6 <irq3>:
c00004d6:	fa                   	cli    
c00004d7:	6a 00                	push   0x0
c00004d9:	6a 23                	push   0x23
c00004db:	e9 92 00 00 00       	jmp    c0000572 <int_common_stub>

c00004e0 <irq4>:
c00004e0:	fa                   	cli    
c00004e1:	6a 00                	push   0x0
c00004e3:	6a 24                	push   0x24
c00004e5:	e9 88 00 00 00       	jmp    c0000572 <int_common_stub>

c00004ea <irq5>:
c00004ea:	fa                   	cli    
c00004eb:	6a 00                	push   0x0
c00004ed:	6a 25                	push   0x25
c00004ef:	e9 7e 00 00 00       	jmp    c0000572 <int_common_stub>

c00004f4 <irq6>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 26                	push   0x26
c00004f9:	e9 74 00 00 00       	jmp    c0000572 <int_common_stub>

c00004fe <irq7>:
c00004fe:	fa                   	cli    
c00004ff:	6a 00                	push   0x0
c0000501:	6a 27                	push   0x27
c0000503:	e9 6a 00 00 00       	jmp    c0000572 <int_common_stub>

c0000508 <irq8>:
c0000508:	fa                   	cli    
c0000509:	6a 00                	push   0x0
c000050b:	6a 28                	push   0x28
c000050d:	e9 60 00 00 00       	jmp    c0000572 <int_common_stub>

c0000512 <irq9>:
c0000512:	fa                   	cli    
c0000513:	6a 00                	push   0x0
c0000515:	6a 29                	push   0x29
c0000517:	e9 56 00 00 00       	jmp    c0000572 <int_common_stub>

c000051c <irq10>:
c000051c:	fa                   	cli    
c000051d:	6a 00                	push   0x0
c000051f:	6a 2a                	push   0x2a
c0000521:	e9 4c 00 00 00       	jmp    c0000572 <int_common_stub>

c0000526 <irq11>:
c0000526:	fa                   	cli    
c0000527:	6a 00                	push   0x0
c0000529:	6a 2b                	push   0x2b
c000052b:	e9 42 00 00 00       	jmp    c0000572 <int_common_stub>

c0000530 <irq12>:
c0000530:	fa                   	cli    
c0000531:	6a 00                	push   0x0
c0000533:	6a 2c                	push   0x2c
c0000535:	e9 38 00 00 00       	jmp    c0000572 <int_common_stub>

c000053a <irq13>:
c000053a:	fa                   	cli    
c000053b:	6a 00                	push   0x0
c000053d:	6a 2d                	push   0x2d
c000053f:	e9 2e 00 00 00       	jmp    c0000572 <int_common_stub>

c0000544 <irq14>:
c0000544:	fa                   	cli    
c0000545:	6a 00                	push   0x0
c0000547:	6a 2e                	push   0x2e
c0000549:	e9 24 00 00 00       	jmp    c0000572 <int_common_stub>

c000054e <irq15>:
c000054e:	fa                   	cli    
c000054f:	6a 00                	push   0x0
c0000551:	6a 2f                	push   0x2f
c0000553:	e9 1a 00 00 00       	jmp    c0000572 <int_common_stub>

c0000558 <irq1>:
c0000558:	fa                   	cli    
c0000559:	6a 00                	push   0x0
c000055b:	6a 21                	push   0x21
c000055d:	eb 13                	jmp    c0000572 <int_common_stub>

c000055f <irq2>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 22                	push   0x22
c0000564:	eb 0c                	jmp    c0000572 <int_common_stub>

c0000566 <isr96>:
c0000566:	6a 00                	push   0x0
c0000568:	6a 60                	push   0x60
c000056a:	fb                   	sti    
c000056b:	eb 05                	jmp    c0000572 <int_common_stub>

c000056d <irq0>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 20                	push   0x20

c0000572 <int_common_stub>:
c0000572:	60                   	pusha  
c0000573:	1e                   	push   ds
c0000574:	06                   	push   es
c0000575:	0f a0                	push   fs
c0000577:	0f a8                	push   gs
c0000579:	54                   	push   esp
c000057a:	e8 a4 3d 01 00       	call   c0014323 <int_handler>
c000057f:	81 c4 04 00 00 00    	add    esp,0x4
c0000585:	0f a9                	pop    gs
c0000587:	0f a1                	pop    fs
c0000589:	07                   	pop    es
c000058a:	1f                   	pop    ds
c000058b:	61                   	popa   
c000058c:	81 c4 08 00 00 00    	add    esp,0x8
c0000592:	cf                   	iret   

c0000593 <irq16>:
c0000593:	fa                   	cli    
c0000594:	6a 00                	push   0x0
c0000596:	6a 30                	push   0x30
c0000598:	e9 d5 ff ff ff       	jmp    c0000572 <int_common_stub>

c000059d <irq17>:
c000059d:	fa                   	cli    
c000059e:	6a 00                	push   0x0
c00005a0:	6a 31                	push   0x31
c00005a2:	e9 cb ff ff ff       	jmp    c0000572 <int_common_stub>

c00005a7 <irq18>:
c00005a7:	fa                   	cli    
c00005a8:	6a 00                	push   0x0
c00005aa:	6a 32                	push   0x32
c00005ac:	e9 c1 ff ff ff       	jmp    c0000572 <int_common_stub>

c00005b1 <irq19>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 33                	push   0x33
c00005b6:	e9 b7 ff ff ff       	jmp    c0000572 <int_common_stub>

c00005bb <irq20>:
c00005bb:	fa                   	cli    
c00005bc:	6a 00                	push   0x0
c00005be:	6a 34                	push   0x34
c00005c0:	e9 ad ff ff ff       	jmp    c0000572 <int_common_stub>

c00005c5 <irq21>:
c00005c5:	fa                   	cli    
c00005c6:	6a 00                	push   0x0
c00005c8:	6a 35                	push   0x35
c00005ca:	e9 a3 ff ff ff       	jmp    c0000572 <int_common_stub>

c00005cf <irq22>:
c00005cf:	fa                   	cli    
c00005d0:	6a 00                	push   0x0
c00005d2:	6a 36                	push   0x36
c00005d4:	e9 99 ff ff ff       	jmp    c0000572 <int_common_stub>

c00005d9 <irq23>:
c00005d9:	fa                   	cli    
c00005da:	6a 00                	push   0x0
c00005dc:	6a 37                	push   0x37
c00005de:	e9 8f ff ff ff       	jmp    c0000572 <int_common_stub>

c00005e3 <memcmp>:
c00005e3:	56                   	push   esi
c00005e4:	53                   	push   ebx
c00005e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00005f1:	01 d6                	add    esi,edx
c00005f3:	39 f2                	cmp    edx,esi
c00005f5:	74 0e                	je     c0000605 <memcmp+0x22>
c00005f7:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00005fa:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00005fd:	38 c8                	cmp    al,cl
c00005ff:	75 08                	jne    c0000609 <memcmp+0x26>
c0000601:	42                   	inc    edx
c0000602:	43                   	inc    ebx
c0000603:	eb ee                	jmp    c00005f3 <memcmp+0x10>
c0000605:	31 c0                	xor    eax,eax
c0000607:	eb 02                	jmp    c000060b <memcmp+0x28>
c0000609:	29 c8                	sub    eax,ecx
c000060b:	5b                   	pop    ebx
c000060c:	5e                   	pop    esi
c000060d:	c3                   	ret    

c000060e <memmove>:
c000060e:	56                   	push   esi
c000060f:	53                   	push   ebx
c0000610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000614:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000618:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000061c:	39 c8                	cmp    eax,ecx
c000061e:	73 12                	jae    c0000632 <memmove+0x24>
c0000620:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000623:	89 c3                	mov    ebx,eax
c0000625:	39 f1                	cmp    ecx,esi
c0000627:	74 1a                	je     c0000643 <memmove+0x35>
c0000629:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062b:	43                   	inc    ebx
c000062c:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000062f:	41                   	inc    ecx
c0000630:	eb f3                	jmp    c0000625 <memmove+0x17>
c0000632:	76 0f                	jbe    c0000643 <memmove+0x35>
c0000634:	85 d2                	test   edx,edx
c0000636:	74 0b                	je     c0000643 <memmove+0x35>
c0000638:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000063c:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000640:	4a                   	dec    edx
c0000641:	eb f1                	jmp    c0000634 <memmove+0x26>
c0000643:	5b                   	pop    ebx
c0000644:	5e                   	pop    esi
c0000645:	c3                   	ret    

c0000646 <memcpy>:
c0000646:	57                   	push   edi
c0000647:	56                   	push   esi
c0000648:	53                   	push   ebx
c0000649:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000064d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000651:	89 da                	mov    edx,ebx
c0000653:	89 d9                	mov    ecx,ebx
c0000655:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000659:	83 e2 fc             	and    edx,0xfffffffc
c000065c:	c1 e9 02             	shr    ecx,0x2
c000065f:	89 c7                	mov    edi,eax
c0000661:	fc                   	cld    
c0000662:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000664:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000667:	01 c2                	add    edx,eax
c0000669:	01 de                	add    esi,ebx
c000066b:	39 f1                	cmp    ecx,esi
c000066d:	74 09                	je     c0000678 <memcpy+0x32>
c000066f:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000671:	42                   	inc    edx
c0000672:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000675:	41                   	inc    ecx
c0000676:	eb f3                	jmp    c000066b <memcpy+0x25>
c0000678:	5b                   	pop    ebx
c0000679:	5e                   	pop    esi
c000067a:	5f                   	pop    edi
c000067b:	c3                   	ret    

c000067c <memset>:
c000067c:	53                   	push   ebx
c000067d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000681:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000685:	89 c2                	mov    edx,eax
c0000687:	01 c1                	add    ecx,eax
c0000689:	39 ca                	cmp    edx,ecx
c000068b:	74 0a                	je     c0000697 <memset+0x1b>
c000068d:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0000691:	42                   	inc    edx
c0000692:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000695:	eb f2                	jmp    c0000689 <memset+0xd>
c0000697:	5b                   	pop    ebx
c0000698:	c3                   	ret    

c0000699 <strlen>:
c0000699:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069d:	31 c0                	xor    eax,eax
c000069f:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a3:	74 03                	je     c00006a8 <strlen+0xf>
c00006a5:	40                   	inc    eax
c00006a6:	eb f7                	jmp    c000069f <strlen+0x6>
c00006a8:	c3                   	ret    

c00006a9 <strpbrk>:
c00006a9:	53                   	push   ebx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8a 08                	mov    cl,BYTE PTR [eax]
c00006b0:	84 c9                	test   cl,cl
c00006b2:	74 14                	je     c00006c8 <strpbrk+0x1f>
c00006b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006b8:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006ba:	84 db                	test   bl,bl
c00006bc:	74 07                	je     c00006c5 <strpbrk+0x1c>
c00006be:	38 cb                	cmp    bl,cl
c00006c0:	74 08                	je     c00006ca <strpbrk+0x21>
c00006c2:	42                   	inc    edx
c00006c3:	eb f3                	jmp    c00006b8 <strpbrk+0xf>
c00006c5:	40                   	inc    eax
c00006c6:	eb e6                	jmp    c00006ae <strpbrk+0x5>
c00006c8:	31 c0                	xor    eax,eax
c00006ca:	5b                   	pop    ebx
c00006cb:	c3                   	ret    

c00006cc <strtok>:
c00006cc:	56                   	push   esi
c00006cd:	53                   	push   ebx
c00006ce:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d6:	85 db                	test   ebx,ebx
c00006d8:	75 0e                	jne    c00006e8 <strtok+0x1c>
c00006da:	8b 1d 7c b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b97c
c00006e0:	85 db                	test   ebx,ebx
c00006e2:	75 04                	jne    c00006e8 <strtok+0x1c>
c00006e4:	31 db                	xor    ebx,ebx
c00006e6:	eb 2e                	jmp    c0000716 <strtok+0x4a>
c00006e8:	56                   	push   esi
c00006e9:	53                   	push   ebx
c00006ea:	e8 ba ff ff ff       	call   c00006a9 <strpbrk>
c00006ef:	5a                   	pop    edx
c00006f0:	a3 7c b9 02 c0       	mov    ds:0xc002b97c,eax
c00006f5:	59                   	pop    ecx
c00006f6:	a1 7c b9 02 c0       	mov    eax,ds:0xc002b97c
c00006fb:	39 d8                	cmp    eax,ebx
c00006fd:	75 07                	jne    c0000706 <strtok+0x3a>
c00006ff:	43                   	inc    ebx
c0000700:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000704:	eb e2                	jmp    c00006e8 <strtok+0x1c>
c0000706:	85 c0                	test   eax,eax
c0000708:	74 da                	je     c00006e4 <strtok+0x18>
c000070a:	8d 50 01             	lea    edx,[eax+0x1]
c000070d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000710:	89 15 7c b9 02 c0    	mov    DWORD PTR ds:0xc002b97c,edx
c0000716:	89 d8                	mov    eax,ebx
c0000718:	5b                   	pop    ebx
c0000719:	5e                   	pop    esi
c000071a:	c3                   	ret    

c000071b <strcpy>:
c000071b:	53                   	push   ebx
c000071c:	31 d2                	xor    edx,edx
c000071e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000722:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000726:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000729:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000072c:	84 c9                	test   cl,cl
c000072e:	74 06                	je     c0000736 <strcpy+0x1b>
c0000730:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000733:	42                   	inc    edx
c0000734:	eb ec                	jmp    c0000722 <strcpy+0x7>
c0000736:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000739:	5b                   	pop    ebx
c000073a:	c3                   	ret    

c000073b <strncpy>:
c000073b:	56                   	push   esi
c000073c:	53                   	push   ebx
c000073d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000741:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000745:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	85 c9                	test   ecx,ecx
c000074d:	74 1a                	je     c0000769 <strncpy+0x2e>
c000074f:	46                   	inc    esi
c0000750:	43                   	inc    ebx
c0000751:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000754:	49                   	dec    ecx
c0000755:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000758:	84 d2                	test   dl,dl
c000075a:	75 ef                	jne    c000074b <strncpy+0x10>
c000075c:	31 d2                	xor    edx,edx
c000075e:	39 d1                	cmp    ecx,edx
c0000760:	74 07                	je     c0000769 <strncpy+0x2e>
c0000762:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000766:	42                   	inc    edx
c0000767:	eb f5                	jmp    c000075e <strncpy+0x23>
c0000769:	5b                   	pop    ebx
c000076a:	5e                   	pop    esi
c000076b:	c3                   	ret    

c000076c <strcmp>:
c000076c:	31 c9                	xor    ecx,ecx
c000076e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000772:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000776:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000077a:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000077e:	38 d0                	cmp    al,dl
c0000780:	75 08                	jne    c000078a <strcmp+0x1e>
c0000782:	41                   	inc    ecx
c0000783:	84 c0                	test   al,al
c0000785:	75 e7                	jne    c000076e <strcmp+0x2>
c0000787:	31 c0                	xor    eax,eax
c0000789:	c3                   	ret    
c000078a:	29 d0                	sub    eax,edx
c000078c:	c3                   	ret    

c000078d <strchr>:
c000078d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000791:	8a 10                	mov    dl,BYTE PTR [eax]
c0000793:	84 d2                	test   dl,dl
c0000795:	74 09                	je     c00007a0 <strchr+0x13>
c0000797:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c000079b:	74 05                	je     c00007a2 <strchr+0x15>
c000079d:	40                   	inc    eax
c000079e:	eb f1                	jmp    c0000791 <strchr+0x4>
c00007a0:	31 c0                	xor    eax,eax
c00007a2:	c3                   	ret    

c00007a3 <strncmp>:
c00007a3:	56                   	push   esi
c00007a4:	53                   	push   ebx
c00007a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007b1:	01 d6                	add    esi,edx
c00007b3:	39 f2                	cmp    edx,esi
c00007b5:	74 12                	je     c00007c9 <strncmp+0x26>
c00007b7:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007ba:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007bd:	38 c8                	cmp    al,cl
c00007bf:	75 0c                	jne    c00007cd <strncmp+0x2a>
c00007c1:	42                   	inc    edx
c00007c2:	84 c0                	test   al,al
c00007c4:	74 03                	je     c00007c9 <strncmp+0x26>
c00007c6:	43                   	inc    ebx
c00007c7:	eb ea                	jmp    c00007b3 <strncmp+0x10>
c00007c9:	31 c0                	xor    eax,eax
c00007cb:	eb 02                	jmp    c00007cf <strncmp+0x2c>
c00007cd:	29 c8                	sub    eax,ecx
c00007cf:	5b                   	pop    ebx
c00007d0:	5e                   	pop    esi
c00007d1:	c3                   	ret    

c00007d2 <strcat>:
c00007d2:	53                   	push   ebx
c00007d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d7:	89 c1                	mov    ecx,eax
c00007d9:	8d 51 01             	lea    edx,[ecx+0x1]
c00007dc:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e0:	74 04                	je     c00007e6 <strcat+0x14>
c00007e2:	89 d1                	mov    ecx,edx
c00007e4:	eb f3                	jmp    c00007d9 <strcat+0x7>
c00007e6:	31 d2                	xor    edx,edx
c00007e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ec:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007ef:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c00007f2:	42                   	inc    edx
c00007f3:	84 db                	test   bl,bl
c00007f5:	75 f1                	jne    c00007e8 <strcat+0x16>
c00007f7:	5b                   	pop    ebx
c00007f8:	c3                   	ret    

c00007f9 <strncat>:
c00007f9:	56                   	push   esi
c00007fa:	53                   	push   ebx
c00007fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000803:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000807:	89 c2                	mov    edx,eax
c0000809:	85 db                	test   ebx,ebx
c000080b:	74 23                	je     c0000830 <strncat+0x37>
c000080d:	8d 72 01             	lea    esi,[edx+0x1]
c0000810:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000814:	74 04                	je     c000081a <strncat+0x21>
c0000816:	89 f2                	mov    edx,esi
c0000818:	eb f3                	jmp    c000080d <strncat+0x14>
c000081a:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000081d:	41                   	inc    ecx
c000081e:	42                   	inc    edx
c000081f:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000822:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000825:	84 db                	test   bl,bl
c0000827:	74 07                	je     c0000830 <strncat+0x37>
c0000829:	39 f1                	cmp    ecx,esi
c000082b:	75 f0                	jne    c000081d <strncat+0x24>
c000082d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    

c0000833 <strstr>:
c0000833:	57                   	push   edi
c0000834:	56                   	push   esi
c0000835:	53                   	push   ebx
c0000836:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000083a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000083e:	57                   	push   edi
c000083f:	e8 55 fe ff ff       	call   c0000699 <strlen>
c0000844:	59                   	pop    ecx
c0000845:	89 c6                	mov    esi,eax
c0000847:	85 c0                	test   eax,eax
c0000849:	74 1f                	je     c000086a <strstr+0x37>
c000084b:	53                   	push   ebx
c000084c:	e8 48 fe ff ff       	call   c0000699 <strlen>
c0000851:	5a                   	pop    edx
c0000852:	39 f0                	cmp    eax,esi
c0000854:	72 12                	jb     c0000868 <strstr+0x35>
c0000856:	56                   	push   esi
c0000857:	57                   	push   edi
c0000858:	53                   	push   ebx
c0000859:	e8 85 fd ff ff       	call   c00005e3 <memcmp>
c000085e:	83 c4 0c             	add    esp,0xc
c0000861:	85 c0                	test   eax,eax
c0000863:	74 05                	je     c000086a <strstr+0x37>
c0000865:	43                   	inc    ebx
c0000866:	eb e3                	jmp    c000084b <strstr+0x18>
c0000868:	31 db                	xor    ebx,ebx
c000086a:	89 d8                	mov    eax,ebx
c000086c:	5b                   	pop    ebx
c000086d:	5e                   	pop    esi
c000086e:	5f                   	pop    edi
c000086f:	c3                   	ret    

c0000870 <toupper>:
c0000870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000874:	0f b6 d0             	movzx  edx,al
c0000877:	f6 82 60 70 02 c0 02 	test   BYTE PTR [edx-0x3ffd8fa0],0x2
c000087e:	74 03                	je     c0000883 <toupper+0x13>
c0000880:	83 e8 20             	sub    eax,0x20
c0000883:	c3                   	ret    

c0000884 <tolower>:
c0000884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000888:	0f b6 d0             	movzx  edx,al
c000088b:	f6 82 60 70 02 c0 01 	test   BYTE PTR [edx-0x3ffd8fa0],0x1
c0000892:	74 03                	je     c0000897 <tolower+0x13>
c0000894:	83 c0 20             	add    eax,0x20
c0000897:	c3                   	ret    

c0000898 <simple_strtoul>:
c0000898:	55                   	push   ebp
c0000899:	57                   	push   edi
c000089a:	56                   	push   esi
c000089b:	53                   	push   ebx
c000089c:	83 ec 08             	sub    esp,0x8
c000089f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008a7:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008aa:	f6 82 60 70 02 c0 08 	test   BYTE PTR [edx-0x3ffd8fa0],0x8
c00008b1:	74 03                	je     c00008b6 <simple_strtoul+0x1e>
c00008b3:	41                   	inc    ecx
c00008b4:	eb f1                	jmp    c00008a7 <simple_strtoul+0xf>
c00008b6:	80 fa 09             	cmp    dl,0x9
c00008b9:	74 f8                	je     c00008b3 <simple_strtoul+0x1b>
c00008bb:	80 fa 2d             	cmp    dl,0x2d
c00008be:	75 0b                	jne    c00008cb <simple_strtoul+0x33>
c00008c0:	41                   	inc    ecx
c00008c1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008c9:	eb 0e                	jmp    c00008d9 <simple_strtoul+0x41>
c00008cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008d3:	80 fa 2b             	cmp    dl,0x2b
c00008d6:	75 01                	jne    c00008d9 <simple_strtoul+0x41>
c00008d8:	41                   	inc    ecx
c00008d9:	85 f6                	test   esi,esi
c00008db:	75 22                	jne    c00008ff <simple_strtoul+0x67>
c00008dd:	be 0a 00 00 00       	mov    esi,0xa
c00008e2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008e5:	75 5a                	jne    c0000941 <simple_strtoul+0xa9>
c00008e7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008eb:	50                   	push   eax
c00008ec:	e8 93 ff ff ff       	call   c0000884 <tolower>
c00008f1:	5a                   	pop    edx
c00008f2:	83 f8 78             	cmp    eax,0x78
c00008f5:	74 03                	je     c00008fa <simple_strtoul+0x62>
c00008f7:	41                   	inc    ecx
c00008f8:	eb 16                	jmp    c0000910 <simple_strtoul+0x78>
c00008fa:	83 c1 02             	add    ecx,0x2
c00008fd:	eb 22                	jmp    c0000921 <simple_strtoul+0x89>
c00008ff:	8d 46 fe             	lea    eax,[esi-0x2]
c0000902:	83 f8 22             	cmp    eax,0x22
c0000905:	0f 87 b7 00 00 00    	ja     c00009c2 <simple_strtoul+0x12a>
c000090b:	83 fe 08             	cmp    esi,0x8
c000090e:	75 0c                	jne    c000091c <simple_strtoul+0x84>
c0000910:	be 08 00 00 00       	mov    esi,0x8
c0000915:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000918:	75 27                	jne    c0000941 <simple_strtoul+0xa9>
c000091a:	eb 1f                	jmp    c000093b <simple_strtoul+0xa3>
c000091c:	83 fe 10             	cmp    esi,0x10
c000091f:	75 20                	jne    c0000941 <simple_strtoul+0xa9>
c0000921:	be 10 00 00 00       	mov    esi,0x10
c0000926:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000929:	75 16                	jne    c0000941 <simple_strtoul+0xa9>
c000092b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000092f:	50                   	push   eax
c0000930:	e8 4f ff ff ff       	call   c0000884 <tolower>
c0000935:	5d                   	pop    ebp
c0000936:	83 f8 78             	cmp    eax,0x78
c0000939:	74 03                	je     c000093e <simple_strtoul+0xa6>
c000093b:	41                   	inc    ecx
c000093c:	eb 03                	jmp    c0000941 <simple_strtoul+0xa9>
c000093e:	83 c1 02             	add    ecx,0x2
c0000941:	31 ed                	xor    ebp,ebp
c0000943:	31 db                	xor    ebx,ebx
c0000945:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000094c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000094e:	84 d2                	test   dl,dl
c0000950:	74 27                	je     c0000979 <simple_strtoul+0xe1>
c0000952:	0f b6 fa             	movzx  edi,dl
c0000955:	f6 87 60 70 02 c0 04 	test   BYTE PTR [edi-0x3ffd8fa0],0x4
c000095c:	74 05                	je     c0000963 <simple_strtoul+0xcb>
c000095e:	83 ef 30             	sub    edi,0x30
c0000961:	eb 22                	jmp    c0000985 <simple_strtoul+0xed>
c0000963:	0f be d2             	movsx  edx,dl
c0000966:	52                   	push   edx
c0000967:	e8 04 ff ff ff       	call   c0000870 <toupper>
c000096c:	5f                   	pop    edi
c000096d:	0f b6 d0             	movzx  edx,al
c0000970:	f6 82 60 70 02 c0 01 	test   BYTE PTR [edx-0x3ffd8fa0],0x1
c0000977:	75 09                	jne    c0000982 <simple_strtoul+0xea>
c0000979:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000097e:	75 2d                	jne    c00009ad <simple_strtoul+0x115>
c0000980:	eb 57                	jmp    c00009d9 <simple_strtoul+0x141>
c0000982:	8d 78 c9             	lea    edi,[eax-0x37]
c0000985:	39 f7                	cmp    edi,esi
c0000987:	73 f0                	jae    c0000979 <simple_strtoul+0xe1>
c0000989:	31 d2                	xor    edx,edx
c000098b:	89 f8                	mov    eax,edi
c000098d:	f7 d0                	not    eax
c000098f:	f7 f6                	div    esi
c0000991:	39 d8                	cmp    eax,ebx
c0000993:	72 0e                	jb     c00009a3 <simple_strtoul+0x10b>
c0000995:	0f af de             	imul   ebx,esi
c0000998:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000099f:	01 fb                	add    ebx,edi
c00009a1:	eb 07                	jmp    c00009aa <simple_strtoul+0x112>
c00009a3:	bd 01 00 00 00       	mov    ebp,0x1
c00009a8:	31 db                	xor    ebx,ebx
c00009aa:	41                   	inc    ecx
c00009ab:	eb 9f                	jmp    c000094c <simple_strtoul+0xb4>
c00009ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009b0:	09 d8                	or     eax,ebx
c00009b2:	75 1f                	jne    c00009d3 <simple_strtoul+0x13b>
c00009b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009bc:	31 db                	xor    ebx,ebx
c00009be:	89 38                	mov    DWORD PTR [eax],edi
c00009c0:	eb 17                	jmp    c00009d9 <simple_strtoul+0x141>
c00009c2:	31 db                	xor    ebx,ebx
c00009c4:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c9:	74 14                	je     c00009df <simple_strtoul+0x147>
c00009cb:	31 ed                	xor    ebp,ebp
c00009cd:	85 c9                	test   ecx,ecx
c00009cf:	75 e3                	jne    c00009b4 <simple_strtoul+0x11c>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d7:	89 08                	mov    DWORD PTR [eax],ecx
c00009d9:	4d                   	dec    ebp
c00009da:	75 03                	jne    c00009df <simple_strtoul+0x147>
c00009dc:	83 cb ff             	or     ebx,0xffffffff
c00009df:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009e4:	75 02                	jne    c00009e8 <simple_strtoul+0x150>
c00009e6:	f7 db                	neg    ebx
c00009e8:	83 c4 08             	add    esp,0x8
c00009eb:	89 d8                	mov    eax,ebx
c00009ed:	5b                   	pop    ebx
c00009ee:	5e                   	pop    esi
c00009ef:	5f                   	pop    edi
c00009f0:	5d                   	pop    ebp
c00009f1:	c3                   	ret    

c00009f2 <largebin_index>:
c00009f2:	89 c2                	mov    edx,eax
c00009f4:	c1 ea 08             	shr    edx,0x8
c00009f7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00009fd:	77 10                	ja     c0000a0f <largebin_index+0x1d>
c00009ff:	0f bd d2             	bsr    edx,edx
c0000a02:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a05:	d3 e8                	shr    eax,cl
c0000a07:	83 e0 03             	and    eax,0x3
c0000a0a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a0e:	c3                   	ret    
c0000a0f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a14:	c3                   	ret    

c0000a15 <malloc_init_state>:
c0000a15:	53                   	push   ebx
c0000a16:	8d 50 34             	lea    edx,[eax+0x34]
c0000a19:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a1f:	89 d1                	mov    ecx,edx
c0000a21:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a24:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a27:	83 c2 08             	add    edx,0x8
c0000a2a:	39 da                	cmp    edx,ebx
c0000a2c:	75 f3                	jne    c0000a21 <malloc_init_state+0xc>
c0000a2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a30:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a3a:	83 e2 03             	and    edx,0x3
c0000a3d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a47:	83 ca 48             	or     edx,0x48
c0000a4a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a54:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a5e:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a65:	89 10                	mov    DWORD PTR [eax],edx
c0000a67:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a6a:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a74:	5b                   	pop    ebx
c0000a75:	c3                   	ret    

c0000a76 <malloc_consolidate>:
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	85 d2                	test   edx,edx
c0000a7a:	0f 84 d8 00 00 00    	je     c0000b58 <malloc_consolidate+0xe2>
c0000a80:	55                   	push   ebp
c0000a81:	83 e2 fd             	and    edx,0xfffffffd
c0000a84:	57                   	push   edi
c0000a85:	89 c5                	mov    ebp,eax
c0000a87:	56                   	push   esi
c0000a88:	8d 78 34             	lea    edi,[eax+0x34]
c0000a8b:	53                   	push   ebx
c0000a8c:	83 ec 10             	sub    esp,0x10
c0000a8f:	89 10                	mov    DWORD PTR [eax],edx
c0000a91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a95:	c1 ea 03             	shr    edx,0x3
c0000a98:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a9c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aa0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aa3:	85 d2                	test   edx,edx
c0000aa5:	0f 84 98 00 00 00    	je     c0000b43 <malloc_consolidate+0xcd>
c0000aab:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ab2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ab5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ab8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000abc:	89 f9                	mov    ecx,edi
c0000abe:	83 e1 fe             	and    ecx,0xfffffffe
c0000ac1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ac4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ac7:	83 e3 fc             	and    ebx,0xfffffffc
c0000aca:	83 e7 01             	and    edi,0x1
c0000acd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000ad0:	75 14                	jne    c0000ae6 <malloc_consolidate+0x70>
c0000ad2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ad4:	29 fa                	sub    edx,edi
c0000ad6:	01 f9                	add    ecx,edi
c0000ad8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000adb:	89 fb                	mov    ebx,edi
c0000add:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ae0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ae3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ae6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ae9:	74 40                	je     c0000b2b <malloc_consolidate+0xb5>
c0000aeb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000aee:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000af1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000af5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000af8:	83 e7 01             	and    edi,0x1
c0000afb:	75 0e                	jne    c0000b0b <malloc_consolidate+0x95>
c0000afd:	01 d9                	add    ecx,ebx
c0000aff:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b02:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b05:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b08:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b0b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b0e:	89 ce                	mov    esi,ecx
c0000b10:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b13:	83 ce 01             	or     esi,0x1
c0000b16:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b19:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b1c:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b1f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b23:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b26:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b29:	eb 0c                	jmp    c0000b37 <malloc_consolidate+0xc1>
c0000b2b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b2e:	83 c9 01             	or     ecx,0x1
c0000b31:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b34:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b3b:	85 d2                	test   edx,edx
c0000b3d:	0f 85 6f ff ff ff    	jne    c0000ab2 <malloc_consolidate+0x3c>
c0000b43:	83 c5 04             	add    ebp,0x4
c0000b46:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b4a:	0f 85 50 ff ff ff    	jne    c0000aa0 <malloc_consolidate+0x2a>
c0000b50:	83 c4 10             	add    esp,0x10
c0000b53:	5b                   	pop    ebx
c0000b54:	5e                   	pop    esi
c0000b55:	5f                   	pop    edi
c0000b56:	5d                   	pop    ebp
c0000b57:	c3                   	ret    
c0000b58:	e9 b8 fe ff ff       	jmp    c0000a15 <malloc_init_state>

c0000b5d <dlfree>:
c0000b5d:	57                   	push   edi
c0000b5e:	56                   	push   esi
c0000b5f:	53                   	push   ebx
c0000b60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b64:	85 db                	test   ebx,ebx
c0000b66:	0f 84 e2 00 00 00    	je     c0000c4e <dlfree+0xf1>
c0000b6c:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b6f:	8b 0d 80 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b980
c0000b75:	89 f0                	mov    eax,esi
c0000b77:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b7a:	83 e0 fc             	and    eax,0xfffffffc
c0000b7d:	39 c1                	cmp    ecx,eax
c0000b7f:	72 24                	jb     c0000ba5 <dlfree+0x48>
c0000b81:	83 c9 03             	or     ecx,0x3
c0000b84:	c1 e8 03             	shr    eax,0x3
c0000b87:	89 0d 80 b9 02 c0    	mov    DWORD PTR ds:0xc002b980,ecx
c0000b8d:	83 e8 02             	sub    eax,0x2
c0000b90:	8b 0c 85 84 b9 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd467c]
c0000b97:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b99:	89 14 85 84 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd467c],edx
c0000ba0:	e9 a9 00 00 00       	jmp    c0000c4e <dlfree+0xf1>
c0000ba5:	83 e6 02             	and    esi,0x2
c0000ba8:	0f 85 a0 00 00 00    	jne    c0000c4e <dlfree+0xf1>
c0000bae:	83 c9 01             	or     ecx,0x1
c0000bb1:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bb4:	89 0d 80 b9 02 c0    	mov    DWORD PTR ds:0xc002b980,ecx
c0000bba:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bbd:	83 e1 fc             	and    ecx,0xfffffffc
c0000bc0:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bc4:	75 13                	jne    c0000bd9 <dlfree+0x7c>
c0000bc6:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bc9:	29 da                	sub    edx,ebx
c0000bcb:	01 d8                	add    eax,ebx
c0000bcd:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bd0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000bd3:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bd6:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bd9:	39 35 ac b9 02 c0    	cmp    DWORD PTR ds:0xc002b9ac,esi
c0000bdf:	74 40                	je     c0000c21 <dlfree+0xc4>
c0000be1:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000be5:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000be8:	80 e3 01             	and    bl,0x1
c0000beb:	75 0e                	jne    c0000bfb <dlfree+0x9e>
c0000bed:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bf0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000bf3:	01 c8                	add    eax,ecx
c0000bf5:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000bf8:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000bfb:	8b 0d bc b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b9bc
c0000c01:	c7 42 0c b4 b9 02 c0 	mov    DWORD PTR [edx+0xc],0xc002b9b4
c0000c08:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c0b:	89 15 bc b9 02 c0    	mov    DWORD PTR ds:0xc002b9bc,edx
c0000c11:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c14:	89 c1                	mov    ecx,eax
c0000c16:	83 c9 01             	or     ecx,0x1
c0000c19:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c1c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c1f:	eb 10                	jmp    c0000c31 <dlfree+0xd4>
c0000c21:	01 c8                	add    eax,ecx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 15 ac b9 02 c0    	mov    DWORD PTR ds:0xc002b9ac,edx
c0000c31:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c36:	76 16                	jbe    c0000c4e <dlfree+0xf1>
c0000c38:	f6 05 80 b9 02 c0 02 	test   BYTE PTR ds:0xc002b980,0x2
c0000c3f:	74 0d                	je     c0000c4e <dlfree+0xf1>
c0000c41:	5b                   	pop    ebx
c0000c42:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c0000c47:	5e                   	pop    esi
c0000c48:	5f                   	pop    edi
c0000c49:	e9 28 fe ff ff       	jmp    c0000a76 <malloc_consolidate>
c0000c4e:	5b                   	pop    ebx
c0000c4f:	5e                   	pop    esi
c0000c50:	5f                   	pop    edi
c0000c51:	c3                   	ret    

c0000c52 <sYSMALLOc>:
c0000c52:	55                   	push   ebp
c0000c53:	57                   	push   edi
c0000c54:	56                   	push   esi
c0000c55:	53                   	push   ebx
c0000c56:	89 d3                	mov    ebx,edx
c0000c58:	83 ec 2c             	sub    esp,0x2c
c0000c5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c5f:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c65:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c68:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c6f:	74 1f                	je     c0000c90 <sYSMALLOc+0x3e>
c0000c71:	89 d8                	mov    eax,ebx
c0000c73:	e8 fe fd ff ff       	call   c0000a76 <malloc_consolidate>
c0000c78:	83 ec 0c             	sub    esp,0xc
c0000c7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c7f:	83 e8 07             	sub    eax,0x7
c0000c82:	50                   	push   eax
c0000c83:	e8 30 02 00 00       	call   c0000eb8 <dlmalloc>
c0000c88:	83 c4 10             	add    esp,0x10
c0000c8b:	e9 20 02 00 00       	jmp    c0000eb0 <sYSMALLOc+0x25e>
c0000c90:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c93:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c99:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c9c:	83 e0 fc             	and    eax,0xfffffffc
c0000c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ca7:	83 c0 10             	add    eax,0x10
c0000caa:	01 c1                	add    ecx,eax
c0000cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb0:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cb7:	74 04                	je     c0000cbd <sYSMALLOc+0x6b>
c0000cb9:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000cbd:	f7 da                	neg    edx
c0000cbf:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cc3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cc7:	21 d1                	and    ecx,edx
c0000cc9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ccd:	7f 07                	jg     c0000cd6 <sYSMALLOc+0x84>
c0000ccf:	31 c0                	xor    eax,eax
c0000cd1:	e9 da 01 00 00       	jmp    c0000eb0 <sYSMALLOc+0x25e>
c0000cd6:	83 ec 0c             	sub    esp,0xc
c0000cd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cdd:	e8 35 e6 00 00       	call   c000f317 <sbrk>
c0000ce2:	83 c4 10             	add    esp,0x10
c0000ce5:	89 c6                	mov    esi,eax
c0000ce7:	83 f8 ff             	cmp    eax,0xffffffff
c0000cea:	74 e3                	je     c0000ccf <sYSMALLOc+0x7d>
c0000cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cf0:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000cf4:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000cf7:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000cfd:	39 f1                	cmp    ecx,esi
c0000cff:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d05:	75 13                	jne    c0000d1a <sYSMALLOc+0xc8>
c0000d07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d0b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d0f:	83 c8 01             	or     eax,0x1
c0000d12:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d15:	e9 3e 01 00 00       	jmp    c0000e58 <sYSMALLOc+0x206>
c0000d1a:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d20:	88 d0                	mov    al,dl
c0000d22:	83 e0 01             	and    eax,0x1
c0000d25:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d2a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d2e:	0f 95 c0             	setne  al
c0000d31:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d35:	39 f1                	cmp    ecx,esi
c0000d37:	76 12                	jbe    c0000d4b <sYSMALLOc+0xf9>
c0000d39:	84 c0                	test   al,al
c0000d3b:	74 0e                	je     c0000d4b <sYSMALLOc+0xf9>
c0000d3d:	83 e2 fe             	and    edx,0xfffffffe
c0000d40:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d46:	e9 83 00 00 00       	jmp    c0000dce <sYSMALLOc+0x17c>
c0000d4b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d50:	74 7c                	je     c0000dce <sYSMALLOc+0x17c>
c0000d52:	84 c0                	test   al,al
c0000d54:	74 0c                	je     c0000d62 <sYSMALLOc+0x110>
c0000d56:	89 f0                	mov    eax,esi
c0000d58:	29 c8                	sub    eax,ecx
c0000d5a:	01 e8                	add    eax,ebp
c0000d5c:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d62:	89 f2                	mov    edx,esi
c0000d64:	83 e2 07             	and    edx,0x7
c0000d67:	74 0c                	je     c0000d75 <sYSMALLOc+0x123>
c0000d69:	b8 08 00 00 00       	mov    eax,0x8
c0000d6e:	29 d0                	sub    eax,edx
c0000d70:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d73:	eb 04                	jmp    c0000d79 <sYSMALLOc+0x127>
c0000d75:	89 f5                	mov    ebp,esi
c0000d77:	31 c0                	xor    eax,eax
c0000d79:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d85:	01 c1                	add    ecx,eax
c0000d87:	83 ec 0c             	sub    esp,0xc
c0000d8a:	01 f1                	add    ecx,esi
c0000d8c:	01 ca                	add    edx,ecx
c0000d8e:	29 c8                	sub    eax,ecx
c0000d90:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d94:	01 c2                	add    edx,eax
c0000d96:	52                   	push   edx
c0000d97:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d9b:	e8 77 e5 00 00       	call   c000f317 <sbrk>
c0000da0:	83 c4 10             	add    esp,0x10
c0000da3:	83 f8 ff             	cmp    eax,0xffffffff
c0000da6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000daa:	75 0f                	jne    c0000dbb <sYSMALLOc+0x169>
c0000dac:	83 ec 0c             	sub    esp,0xc
c0000daf:	6a 00                	push   0x0
c0000db1:	e8 61 e5 00 00       	call   c000f317 <sbrk>
c0000db6:	83 c4 10             	add    esp,0x10
c0000db9:	eb 30                	jmp    c0000deb <sYSMALLOc+0x199>
c0000dbb:	39 c6                	cmp    esi,eax
c0000dbd:	76 33                	jbe    c0000df2 <sYSMALLOc+0x1a0>
c0000dbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dc3:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dca:	01 f0                	add    eax,esi
c0000dcc:	eb 1d                	jmp    c0000deb <sYSMALLOc+0x199>
c0000dce:	83 ec 0c             	sub    esp,0xc
c0000dd1:	89 f5                	mov    ebp,esi
c0000dd3:	6a 00                	push   0x0
c0000dd5:	e8 3d e5 00 00       	call   c000f317 <sbrk>
c0000dda:	89 c2                	mov    edx,eax
c0000ddc:	29 f2                	sub    edx,esi
c0000dde:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000de2:	83 c4 10             	add    esp,0x10
c0000de5:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000deb:	31 d2                	xor    edx,edx
c0000ded:	83 f8 ff             	cmp    eax,0xffffffff
c0000df0:	74 66                	je     c0000e58 <sYSMALLOc+0x206>
c0000df2:	29 e8                	sub    eax,ebp
c0000df4:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000df7:	01 d0                	add    eax,edx
c0000df9:	83 c8 01             	or     eax,0x1
c0000dfc:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000dff:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e05:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e0a:	74 4c                	je     c0000e58 <sYSMALLOc+0x206>
c0000e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e10:	83 e8 0c             	sub    eax,0xc
c0000e13:	83 e0 f8             	and    eax,0xfffffff8
c0000e16:	89 c2                	mov    edx,eax
c0000e18:	83 ca 01             	or     edx,0x1
c0000e1b:	83 f8 0f             	cmp    eax,0xf
c0000e1e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e21:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e29:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e31:	76 25                	jbe    c0000e58 <sYSMALLOc+0x206>
c0000e33:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e46:	83 c7 08             	add    edi,0x8
c0000e49:	57                   	push   edi
c0000e4a:	e8 0e fd ff ff       	call   c0000b5d <dlfree>
c0000e4f:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e55:	83 c4 10             	add    esp,0x10
c0000e58:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e5e:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e64:	73 06                	jae    c0000e6c <sYSMALLOc+0x21a>
c0000e66:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e6c:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e72:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e78:	73 06                	jae    c0000e80 <sYSMALLOc+0x22e>
c0000e7a:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e80:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e83:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e86:	83 e2 fc             	and    edx,0xfffffffc
c0000e89:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e8d:	0f 82 3c fe ff ff    	jb     c0000ccf <sYSMALLOc+0x7d>
c0000e93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e97:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e9a:	29 fa                	sub    edx,edi
c0000e9c:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e9f:	83 ca 01             	or     edx,0x1
c0000ea2:	89 fb                	mov    ebx,edi
c0000ea4:	83 c0 08             	add    eax,0x8
c0000ea7:	83 cb 01             	or     ebx,0x1
c0000eaa:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ead:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000eb0:	83 c4 2c             	add    esp,0x2c
c0000eb3:	5b                   	pop    ebx
c0000eb4:	5e                   	pop    esi
c0000eb5:	5f                   	pop    edi
c0000eb6:	5d                   	pop    ebp
c0000eb7:	c3                   	ret    

c0000eb8 <dlmalloc>:
c0000eb8:	55                   	push   ebp
c0000eb9:	57                   	push   edi
c0000eba:	56                   	push   esi
c0000ebb:	53                   	push   ebx
c0000ebc:	83 ec 1c             	sub    esp,0x1c
c0000ebf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ec3:	83 f8 df             	cmp    eax,0xffffffdf
c0000ec6:	0f 87 70 03 00 00    	ja     c000123c <dlmalloc+0x384>
c0000ecc:	83 c0 0b             	add    eax,0xb
c0000ecf:	be 10 00 00 00       	mov    esi,0x10
c0000ed4:	83 f8 0f             	cmp    eax,0xf
c0000ed7:	76 05                	jbe    c0000ede <dlmalloc+0x26>
c0000ed9:	83 e0 f8             	and    eax,0xfffffff8
c0000edc:	89 c6                	mov    esi,eax
c0000ede:	8b 3d 80 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b980
c0000ee4:	f7 c7 01 00 00 00    	test   edi,0x1
c0000eea:	75 17                	jne    c0000f03 <dlmalloc+0x4b>
c0000eec:	85 ff                	test   edi,edi
c0000eee:	0f 85 05 03 00 00    	jne    c00011f9 <dlmalloc+0x341>
c0000ef4:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c0000ef9:	e8 78 fb ff ff       	call   c0000a76 <malloc_consolidate>
c0000efe:	e9 f6 02 00 00       	jmp    c00011f9 <dlmalloc+0x341>
c0000f03:	39 f7                	cmp    edi,esi
c0000f05:	72 1f                	jb     c0000f26 <dlmalloc+0x6e>
c0000f07:	89 f2                	mov    edx,esi
c0000f09:	c1 ea 03             	shr    edx,0x3
c0000f0c:	83 ea 02             	sub    edx,0x2
c0000f0f:	8b 04 95 84 b9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd467c]
c0000f16:	85 c0                	test   eax,eax
c0000f18:	74 0c                	je     c0000f26 <dlmalloc+0x6e>
c0000f1a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f1d:	89 0c 95 84 b9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd467c],ecx
c0000f24:	eb 30                	jmp    c0000f56 <dlmalloc+0x9e>
c0000f26:	89 f0                	mov    eax,esi
c0000f28:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2e:	77 2e                	ja     c0000f5e <dlmalloc+0xa6>
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	8d 14 c5 b4 b9 02 c0 	lea    edx,[eax*8-0x3ffd464c]
c0000f3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f3e:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f41:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f44:	39 c3                	cmp    ebx,eax
c0000f46:	74 2e                	je     c0000f76 <dlmalloc+0xbe>
c0000f48:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f4b:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f53:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f56:	83 c0 08             	add    eax,0x8
c0000f59:	e9 e0 02 00 00       	jmp    c000123e <dlmalloc+0x386>
c0000f5e:	e8 8f fa ff ff       	call   c00009f2 <largebin_index>
c0000f63:	83 e7 02             	and    edi,0x2
c0000f66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f6a:	74 0a                	je     c0000f76 <dlmalloc+0xbe>
c0000f6c:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c0000f71:	e8 00 fb ff ff       	call   c0000a76 <malloc_consolidate>
c0000f76:	8d 46 10             	lea    eax,[esi+0x10]
c0000f79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f7d:	8b 1d c0 b9 02 c0    	mov    ebx,DWORD PTR ds:0xc002b9c0
c0000f83:	81 fb b4 b9 02 c0    	cmp    ebx,0xc002b9b4
c0000f89:	0f 84 13 01 00 00    	je     c00010a2 <dlmalloc+0x1ea>
c0000f8f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f92:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f95:	83 e7 fc             	and    edi,0xfffffffc
c0000f98:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f9e:	77 4c                	ja     c0000fec <dlmalloc+0x134>
c0000fa0:	3d b4 b9 02 c0       	cmp    eax,0xc002b9b4
c0000fa5:	75 45                	jne    c0000fec <dlmalloc+0x134>
c0000fa7:	39 1d b0 b9 02 c0    	cmp    DWORD PTR ds:0xc002b9b0,ebx
c0000fad:	75 3d                	jne    c0000fec <dlmalloc+0x134>
c0000faf:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fb3:	73 37                	jae    c0000fec <dlmalloc+0x134>
c0000fb5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fb8:	89 fa                	mov    edx,edi
c0000fba:	a3 bc b9 02 c0       	mov    ds:0xc002b9bc,eax
c0000fbf:	a3 c0 b9 02 c0       	mov    ds:0xc002b9c0,eax
c0000fc4:	a3 b0 b9 02 c0       	mov    ds:0xc002b9b0,eax
c0000fc9:	29 f2                	sub    edx,esi
c0000fcb:	c7 40 08 b4 b9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002b9b4
c0000fd2:	c7 40 0c b4 b9 02 c0 	mov    DWORD PTR [eax+0xc],0xc002b9b4
c0000fd9:	83 ce 01             	or     esi,0x1
c0000fdc:	89 d1                	mov    ecx,edx
c0000fde:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000fe1:	83 c9 01             	or     ecx,0x1
c0000fe4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000fe7:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000fea:	eb 15                	jmp    c0001001 <dlmalloc+0x149>
c0000fec:	a3 c0 b9 02 c0       	mov    ds:0xc002b9c0,eax
c0000ff1:	39 fe                	cmp    esi,edi
c0000ff3:	c7 40 08 b4 b9 02 c0 	mov    DWORD PTR [eax+0x8],0xc002b9b4
c0000ffa:	75 0d                	jne    c0001009 <dlmalloc+0x151>
c0000ffc:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001001:	8d 43 08             	lea    eax,[ebx+0x8]
c0001004:	e9 35 02 00 00       	jmp    c000123e <dlmalloc+0x386>
c0001009:	89 f8                	mov    eax,edi
c000100b:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001011:	77 19                	ja     c000102c <dlmalloc+0x174>
c0001013:	c1 e8 03             	shr    eax,0x3
c0001016:	8d 14 00             	lea    edx,[eax+eax*1]
c0001019:	83 c2 0d             	add    edx,0xd
c000101c:	8d 2c 95 78 b9 02 c0 	lea    ebp,[edx*4-0x3ffd4688]
c0001023:	8b 14 95 80 b9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4680]
c000102a:	eb 46                	jmp    c0001072 <dlmalloc+0x1ba>
c000102c:	e8 c1 f9 ff ff       	call   c00009f2 <largebin_index>
c0001031:	8d 14 00             	lea    edx,[eax+eax*1]
c0001034:	83 c2 0d             	add    edx,0xd
c0001037:	8d 0c 95 80 b9 02 c0 	lea    ecx,[edx*4-0x3ffd4680]
c000103e:	8b 14 95 80 b9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4680]
c0001045:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001048:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000104c:	89 d5                	mov    ebp,edx
c000104e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001052:	74 1e                	je     c0001072 <dlmalloc+0x1ba>
c0001054:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001057:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000105a:	77 12                	ja     c000106e <dlmalloc+0x1b6>
c000105c:	83 cf 01             	or     edi,0x1
c000105f:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001062:	76 05                	jbe    c0001069 <dlmalloc+0x1b1>
c0001064:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001067:	eb f6                	jmp    c000105f <dlmalloc+0x1a7>
c0001069:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000106c:	eb 04                	jmp    c0001072 <dlmalloc+0x1ba>
c000106e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001072:	89 c7                	mov    edi,eax
c0001074:	88 c1                	mov    cl,al
c0001076:	c1 ff 05             	sar    edi,0x5
c0001079:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000107d:	bf 01 00 00 00       	mov    edi,0x1
c0001082:	d3 e7                	shl    edi,cl
c0001084:	89 f8                	mov    eax,edi
c0001086:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000108a:	09 04 bd b4 bc 02 c0 	or     DWORD PTR [edi*4-0x3ffd434c],eax
c0001091:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001094:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001097:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000109a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000109d:	e9 db fe ff ff       	jmp    c0000f7d <dlmalloc+0xc5>
c00010a2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a8:	76 78                	jbe    c0001122 <dlmalloc+0x26a>
c00010aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010ae:	8d 04 c5 b4 b9 02 c0 	lea    eax,[eax*8-0x3ffd464c]
c00010b5:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	39 ca                	cmp    edx,ecx
c00010bd:	74 63                	je     c0001122 <dlmalloc+0x26a>
c00010bf:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010c2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010c5:	83 e3 fc             	and    ebx,0xfffffffc
c00010c8:	39 de                	cmp    esi,ebx
c00010ca:	77 52                	ja     c000111e <dlmalloc+0x266>
c00010cc:	89 df                	mov    edi,ebx
c00010ce:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010d1:	29 f7                	sub    edi,esi
c00010d3:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010d6:	01 d3                	add    ebx,edx
c00010d8:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010db:	83 ff 0f             	cmp    edi,0xf
c00010de:	8d 42 08             	lea    eax,[edx+0x8]
c00010e1:	77 09                	ja     c00010ec <dlmalloc+0x234>
c00010e3:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010e7:	e9 52 01 00 00       	jmp    c000123e <dlmalloc+0x386>
c00010ec:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010ef:	83 ce 01             	or     esi,0x1
c00010f2:	89 0d bc b9 02 c0    	mov    DWORD PTR ds:0xc002b9bc,ecx
c00010f8:	89 0d c0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9c0,ecx
c00010fe:	c7 41 08 b4 b9 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002b9b4
c0001105:	c7 41 0c b4 b9 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002b9b4
c000110c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000110f:	89 fa                	mov    edx,edi
c0001111:	83 ca 01             	or     edx,0x1
c0001114:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001117:	89 3b                	mov    DWORD PTR [ebx],edi
c0001119:	e9 20 01 00 00       	jmp    c000123e <dlmalloc+0x386>
c000111e:	89 c2                	mov    edx,eax
c0001120:	eb 99                	jmp    c00010bb <dlmalloc+0x203>
c0001122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001126:	b8 01 00 00 00       	mov    eax,0x1
c000112b:	41                   	inc    ecx
c000112c:	89 cb                	mov    ebx,ecx
c000112e:	8d 14 cd ac b9 02 c0 	lea    edx,[ecx*8-0x3ffd4654]
c0001135:	c1 eb 05             	shr    ebx,0x5
c0001138:	d3 e0                	shl    eax,cl
c000113a:	8b 3c 9d b4 bc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd434c]
c0001141:	39 f8                	cmp    eax,edi
c0001143:	77 04                	ja     c0001149 <dlmalloc+0x291>
c0001145:	85 c0                	test   eax,eax
c0001147:	75 26                	jne    c000116f <dlmalloc+0x2b7>
c0001149:	43                   	inc    ebx
c000114a:	83 fb 02             	cmp    ebx,0x2
c000114d:	0f 87 a6 00 00 00    	ja     c00011f9 <dlmalloc+0x341>
c0001153:	8b 3c 9d b4 bc 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd434c]
c000115a:	85 ff                	test   edi,edi
c000115c:	74 eb                	je     c0001149 <dlmalloc+0x291>
c000115e:	89 d8                	mov    eax,ebx
c0001160:	c1 e0 06             	shl    eax,0x6
c0001163:	8d 14 85 ac b9 02 c0 	lea    edx,[eax*4-0x3ffd4654]
c000116a:	b8 01 00 00 00       	mov    eax,0x1
c000116f:	85 f8                	test   eax,edi
c0001171:	75 07                	jne    c000117a <dlmalloc+0x2c2>
c0001173:	83 c2 08             	add    edx,0x8
c0001176:	01 c0                	add    eax,eax
c0001178:	eb f5                	jmp    c000116f <dlmalloc+0x2b7>
c000117a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000117d:	39 ca                	cmp    edx,ecx
c000117f:	75 14                	jne    c0001195 <dlmalloc+0x2dd>
c0001181:	89 c1                	mov    ecx,eax
c0001183:	83 c2 08             	add    edx,0x8
c0001186:	f7 d1                	not    ecx
c0001188:	01 c0                	add    eax,eax
c000118a:	21 cf                	and    edi,ecx
c000118c:	89 3c 9d b4 bc 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd434c],edi
c0001193:	eb ac                	jmp    c0001141 <dlmalloc+0x289>
c0001195:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001198:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000119b:	83 e0 fc             	and    eax,0xfffffffc
c000119e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011a1:	89 c3                	mov    ebx,eax
c00011a3:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011a6:	29 f3                	sub    ebx,esi
c00011a8:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ab:	83 fb 0f             	cmp    ebx,0xf
c00011ae:	8d 41 08             	lea    eax,[ecx+0x8]
c00011b1:	77 09                	ja     c00011bc <dlmalloc+0x304>
c00011b3:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011b7:	e9 82 00 00 00       	jmp    c000123e <dlmalloc+0x386>
c00011bc:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011bf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c5:	89 3d bc b9 02 c0    	mov    DWORD PTR ds:0xc002b9bc,edi
c00011cb:	89 3d c0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9c0,edi
c00011d1:	c7 47 08 b4 b9 02 c0 	mov    DWORD PTR [edi+0x8],0xc002b9b4
c00011d8:	c7 47 0c b4 b9 02 c0 	mov    DWORD PTR [edi+0xc],0xc002b9b4
c00011df:	77 06                	ja     c00011e7 <dlmalloc+0x32f>
c00011e1:	89 3d b0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9b0,edi
c00011e7:	83 ce 01             	or     esi,0x1
c00011ea:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011ed:	89 d9                	mov    ecx,ebx
c00011ef:	83 c9 01             	or     ecx,0x1
c00011f2:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00011f5:	89 1a                	mov    DWORD PTR [edx],ebx
c00011f7:	eb 45                	jmp    c000123e <dlmalloc+0x386>
c00011f9:	a1 ac b9 02 c0       	mov    eax,ds:0xc002b9ac
c00011fe:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001201:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001204:	83 e2 fc             	and    edx,0xfffffffc
c0001207:	39 d1                	cmp    ecx,edx
c0001209:	77 1e                	ja     c0001229 <dlmalloc+0x371>
c000120b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000120e:	89 f3                	mov    ebx,esi
c0001210:	89 0d ac b9 02 c0    	mov    DWORD PTR ds:0xc002b9ac,ecx
c0001216:	83 cb 01             	or     ebx,0x1
c0001219:	29 f2                	sub    edx,esi
c000121b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000121e:	83 ca 01             	or     edx,0x1
c0001221:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001224:	e9 2d fd ff ff       	jmp    c0000f56 <dlmalloc+0x9e>
c0001229:	83 c4 1c             	add    esp,0x1c
c000122c:	89 f0                	mov    eax,esi
c000122e:	5b                   	pop    ebx
c000122f:	ba 80 b9 02 c0       	mov    edx,0xc002b980
c0001234:	5e                   	pop    esi
c0001235:	5f                   	pop    edi
c0001236:	5d                   	pop    ebp
c0001237:	e9 16 fa ff ff       	jmp    c0000c52 <sYSMALLOc>
c000123c:	31 c0                	xor    eax,eax
c000123e:	83 c4 1c             	add    esp,0x1c
c0001241:	5b                   	pop    ebx
c0001242:	5e                   	pop    esi
c0001243:	5f                   	pop    edi
c0001244:	5d                   	pop    ebp
c0001245:	c3                   	ret    

c0001246 <iALLOc>:
c0001246:	55                   	push   ebp
c0001247:	89 c5                	mov    ebp,eax
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 2c             	sub    esp,0x2c
c000124f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001253:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001257:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000125b:	83 3d 80 b9 02 c0 00 	cmp    DWORD PTR ds:0xc002b980,0x0
c0001262:	75 12                	jne    c0001276 <iALLOc+0x30>
c0001264:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001268:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c000126d:	e8 04 f8 ff ff       	call   c0000a76 <malloc_consolidate>
c0001272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001276:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000127b:	74 12                	je     c000128f <iALLOc+0x49>
c000127d:	85 ed                	test   ebp,ebp
c000127f:	0f 84 64 01 00 00    	je     c00013e9 <iALLOc+0x1a3>
c0001285:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000128d:	eb 33                	jmp    c00012c2 <iALLOc+0x7c>
c000128f:	85 ed                	test   ebp,ebp
c0001291:	75 14                	jne    c00012a7 <iALLOc+0x61>
c0001293:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000129b:	83 c4 2c             	add    esp,0x2c
c000129e:	5b                   	pop    ebx
c000129f:	5e                   	pop    esi
c00012a0:	5f                   	pop    edi
c00012a1:	5d                   	pop    ebp
c00012a2:	e9 11 fc ff ff       	jmp    c0000eb8 <dlmalloc>
c00012a7:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012ae:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012b6:	83 f8 0f             	cmp    eax,0xf
c00012b9:	76 07                	jbe    c00012c2 <iALLOc+0x7c>
c00012bb:	83 e0 f8             	and    eax,0xfffffff8
c00012be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012c2:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012c7:	75 09                	jne    c00012d2 <iALLOc+0x8c>
c00012c9:	89 d0                	mov    eax,edx
c00012cb:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012ce:	31 f6                	xor    esi,esi
c00012d0:	eb 3b                	jmp    c000130d <iALLOc+0xc7>
c00012d2:	8b 02                	mov    eax,DWORD PTR [edx]
c00012d4:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012dc:	83 c0 0b             	add    eax,0xb
c00012df:	83 f8 0f             	cmp    eax,0xf
c00012e2:	76 07                	jbe    c00012eb <iALLOc+0xa5>
c00012e4:	83 e0 f8             	and    eax,0xfffffff8
c00012e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012ef:	0f af f5             	imul   esi,ebp
c00012f2:	eb 25                	jmp    c0001319 <iALLOc+0xd3>
c00012f4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00012f6:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00012f9:	bb 10 00 00 00       	mov    ebx,0x10
c00012fe:	83 f9 0f             	cmp    ecx,0xf
c0001301:	76 05                	jbe    c0001308 <iALLOc+0xc2>
c0001303:	83 e1 f8             	and    ecx,0xfffffff8
c0001306:	89 cb                	mov    ebx,ecx
c0001308:	01 de                	add    esi,ebx
c000130a:	83 c0 04             	add    eax,0x4
c000130d:	39 c7                	cmp    edi,eax
c000130f:	75 e3                	jne    c00012f4 <iALLOc+0xae>
c0001311:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000131d:	8b 1d d4 bc 02 c0    	mov    ebx,DWORD PTR ds:0xc002bcd4
c0001323:	83 ec 0c             	sub    esp,0xc
c0001326:	c7 05 d4 bc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bcd4,0x0
c0001330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001334:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001338:	50                   	push   eax
c0001339:	e8 7a fb ff ff       	call   c0000eb8 <dlmalloc>
c000133e:	83 c4 10             	add    esp,0x10
c0001341:	89 1d d4 bc 02 c0    	mov    DWORD PTR ds:0xc002bcd4,ebx
c0001347:	85 c0                	test   eax,eax
c0001349:	0f 84 92 00 00 00    	je     c00013e1 <iALLOc+0x19b>
c000134f:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001352:	8d 78 f8             	lea    edi,[eax-0x8]
c0001355:	83 e3 fc             	and    ebx,0xfffffffc
c0001358:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000135c:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001361:	74 1e                	je     c0001381 <iALLOc+0x13b>
c0001363:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001367:	89 d9                	mov    ecx,ebx
c0001369:	52                   	push   edx
c000136a:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000136e:	83 e9 04             	sub    ecx,0x4
c0001371:	51                   	push   ecx
c0001372:	6a 00                	push   0x0
c0001374:	50                   	push   eax
c0001375:	e8 02 f3 ff ff       	call   c000067c <memset>
c000137a:	83 c4 10             	add    esp,0x10
c000137d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001381:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001386:	75 14                	jne    c000139c <iALLOc+0x156>
c0001388:	8d 04 37             	lea    eax,[edi+esi*1]
c000138b:	29 f3                	sub    ebx,esi
c000138d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001390:	83 cb 01             	or     ebx,0x1
c0001393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001397:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000139a:	89 f3                	mov    ebx,esi
c000139c:	31 c0                	xor    eax,eax
c000139e:	4d                   	dec    ebp
c000139f:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013a6:	39 c5                	cmp    ebp,eax
c00013a8:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ab:	74 2c                	je     c00013d9 <iALLOc+0x193>
c00013ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013b1:	85 c9                	test   ecx,ecx
c00013b3:	75 15                	jne    c00013ca <iALLOc+0x184>
c00013b5:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013b8:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013bb:	b9 10 00 00 00       	mov    ecx,0x10
c00013c0:	83 fe 0f             	cmp    esi,0xf
c00013c3:	76 05                	jbe    c00013ca <iALLOc+0x184>
c00013c5:	83 e6 f8             	and    esi,0xfffffff8
c00013c8:	89 f1                	mov    ecx,esi
c00013ca:	89 ce                	mov    esi,ecx
c00013cc:	29 cb                	sub    ebx,ecx
c00013ce:	83 ce 01             	or     esi,0x1
c00013d1:	40                   	inc    eax
c00013d2:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013d5:	01 cf                	add    edi,ecx
c00013d7:	eb c6                	jmp    c000139f <iALLOc+0x159>
c00013d9:	83 cb 01             	or     ebx,0x1
c00013dc:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013df:	eb 08                	jmp    c00013e9 <iALLOc+0x1a3>
c00013e1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013ed:	83 c4 2c             	add    esp,0x2c
c00013f0:	5b                   	pop    ebx
c00013f1:	5e                   	pop    esi
c00013f2:	5f                   	pop    edi
c00013f3:	5d                   	pop    ebp
c00013f4:	c3                   	ret    

c00013f5 <dlrealloc>:
c00013f5:	55                   	push   ebp
c00013f6:	57                   	push   edi
c00013f7:	56                   	push   esi
c00013f8:	53                   	push   ebx
c00013f9:	83 ec 1c             	sub    esp,0x1c
c00013fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001400:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001404:	85 db                	test   ebx,ebx
c0001406:	75 10                	jne    c0001418 <dlrealloc+0x23>
c0001408:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000140c:	83 c4 1c             	add    esp,0x1c
c000140f:	5b                   	pop    ebx
c0001410:	5e                   	pop    esi
c0001411:	5f                   	pop    edi
c0001412:	5d                   	pop    ebp
c0001413:	e9 a0 fa ff ff       	jmp    c0000eb8 <dlmalloc>
c0001418:	83 f8 df             	cmp    eax,0xffffffdf
c000141b:	76 07                	jbe    c0001424 <dlrealloc+0x2f>
c000141d:	31 db                	xor    ebx,ebx
c000141f:	e9 7c 01 00 00       	jmp    c00015a0 <dlrealloc+0x1ab>
c0001424:	83 c0 0b             	add    eax,0xb
c0001427:	bf 10 00 00 00       	mov    edi,0x10
c000142c:	83 f8 0f             	cmp    eax,0xf
c000142f:	76 05                	jbe    c0001436 <dlrealloc+0x41>
c0001431:	83 e0 f8             	and    eax,0xfffffff8
c0001434:	89 c7                	mov    edi,eax
c0001436:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001439:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000143c:	89 c6                	mov    esi,eax
c000143e:	83 e6 fc             	and    esi,0xfffffffc
c0001441:	a8 02                	test   al,0x2
c0001443:	75 d8                	jne    c000141d <dlrealloc+0x28>
c0001445:	39 f7                	cmp    edi,esi
c0001447:	0f 86 15 01 00 00    	jbe    c0001562 <dlrealloc+0x16d>
c000144d:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001451:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001454:	39 15 ac b9 02 c0    	cmp    DWORD PTR ds:0xc002b9ac,edx
c000145a:	75 33                	jne    c000148f <dlrealloc+0x9a>
c000145c:	83 e1 fc             	and    ecx,0xfffffffc
c000145f:	01 f1                	add    ecx,esi
c0001461:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001465:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001468:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000146c:	77 49                	ja     c00014b7 <dlrealloc+0xc2>
c000146e:	01 fd                	add    ebp,edi
c0001470:	83 e0 01             	and    eax,0x1
c0001473:	09 f8                	or     eax,edi
c0001475:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001478:	89 2d ac b9 02 c0    	mov    DWORD PTR ds:0xc002b9ac,ebp
c000147e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001482:	29 f8                	sub    eax,edi
c0001484:	83 c8 01             	or     eax,0x1
c0001487:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000148a:	e9 11 01 00 00       	jmp    c00015a0 <dlrealloc+0x1ab>
c000148f:	89 c8                	mov    eax,ecx
c0001491:	83 e0 fe             	and    eax,0xfffffffe
c0001494:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001499:	75 1c                	jne    c00014b7 <dlrealloc+0xc2>
c000149b:	83 e1 fc             	and    ecx,0xfffffffc
c000149e:	01 f1                	add    ecx,esi
c00014a0:	39 cf                	cmp    edi,ecx
c00014a2:	77 13                	ja     c00014b7 <dlrealloc+0xc2>
c00014a4:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014a7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014aa:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014ad:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014b0:	89 ce                	mov    esi,ecx
c00014b2:	e9 ab 00 00 00       	jmp    c0001562 <dlrealloc+0x16d>
c00014b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014bb:	8d 47 f9             	lea    eax,[edi-0x7]
c00014be:	83 ec 0c             	sub    esp,0xc
c00014c1:	50                   	push   eax
c00014c2:	e8 f1 f9 ff ff       	call   c0000eb8 <dlmalloc>
c00014c7:	83 c4 10             	add    esp,0x10
c00014ca:	89 c1                	mov    ecx,eax
c00014cc:	85 c0                	test   eax,eax
c00014ce:	0f 84 49 ff ff ff    	je     c000141d <dlrealloc+0x28>
c00014d4:	8d 40 f8             	lea    eax,[eax-0x8]
c00014d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014db:	39 c2                	cmp    edx,eax
c00014dd:	75 0a                	jne    c00014e9 <dlrealloc+0xf4>
c00014df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014e2:	83 e0 fc             	and    eax,0xfffffffc
c00014e5:	01 c6                	add    esi,eax
c00014e7:	eb 79                	jmp    c0001562 <dlrealloc+0x16d>
c00014e9:	83 ee 04             	sub    esi,0x4
c00014ec:	83 fe 27             	cmp    esi,0x27
c00014ef:	76 16                	jbe    c0001507 <dlrealloc+0x112>
c00014f1:	50                   	push   eax
c00014f2:	56                   	push   esi
c00014f3:	53                   	push   ebx
c00014f4:	51                   	push   ecx
c00014f5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00014f9:	e8 48 f1 ff ff       	call   c0000646 <memcpy>
c00014fe:	83 c4 10             	add    esp,0x10
c0001501:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001505:	eb 43                	jmp    c000154a <dlrealloc+0x155>
c0001507:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001509:	83 fe 13             	cmp    esi,0x13
c000150c:	89 01                	mov    DWORD PTR [ecx],eax
c000150e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001511:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001514:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001517:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000151a:	76 2e                	jbe    c000154a <dlrealloc+0x155>
c000151c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000151f:	83 fe 1b             	cmp    esi,0x1b
c0001522:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001525:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001528:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000152b:	76 1d                	jbe    c000154a <dlrealloc+0x155>
c000152d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001530:	83 fe 23             	cmp    esi,0x23
c0001533:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001536:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001539:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000153c:	76 0c                	jbe    c000154a <dlrealloc+0x155>
c000153e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001541:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001544:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001547:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000154a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000154e:	83 ec 0c             	sub    esp,0xc
c0001551:	53                   	push   ebx
c0001552:	e8 06 f6 ff ff       	call   c0000b5d <dlfree>
c0001557:	83 c4 10             	add    esp,0x10
c000155a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000155e:	89 cb                	mov    ebx,ecx
c0001560:	eb 3e                	jmp    c00015a0 <dlrealloc+0x1ab>
c0001562:	89 f2                	mov    edx,esi
c0001564:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001567:	29 fa                	sub    edx,edi
c0001569:	83 e1 01             	and    ecx,0x1
c000156c:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001570:	83 fa 0f             	cmp    edx,0xf
c0001573:	77 0b                	ja     c0001580 <dlrealloc+0x18b>
c0001575:	09 ce                	or     esi,ecx
c0001577:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000157a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000157e:	eb 20                	jmp    c00015a0 <dlrealloc+0x1ab>
c0001580:	01 fd                	add    ebp,edi
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	09 cf                	or     edi,ecx
c0001587:	83 ca 01             	or     edx,0x1
c000158a:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000158d:	83 c5 08             	add    ebp,0x8
c0001590:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001593:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001597:	55                   	push   ebp
c0001598:	e8 c0 f5 ff ff       	call   c0000b5d <dlfree>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	89 d8                	mov    eax,ebx
c00015a5:	5b                   	pop    ebx
c00015a6:	5e                   	pop    esi
c00015a7:	5f                   	pop    edi
c00015a8:	5d                   	pop    ebp
c00015a9:	c3                   	ret    

c00015aa <dlmemalign>:
c00015aa:	55                   	push   ebp
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 0c             	sub    esp,0xc
c00015b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015b9:	83 fa 08             	cmp    edx,0x8
c00015bc:	77 10                	ja     c00015ce <dlmemalign+0x24>
c00015be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015c2:	83 c4 0c             	add    esp,0xc
c00015c5:	5b                   	pop    ebx
c00015c6:	5e                   	pop    esi
c00015c7:	5f                   	pop    edi
c00015c8:	5d                   	pop    ebp
c00015c9:	e9 ea f8 ff ff       	jmp    c0000eb8 <dlmalloc>
c00015ce:	bf 10 00 00 00       	mov    edi,0x10
c00015d3:	83 fa 0f             	cmp    edx,0xf
c00015d6:	76 13                	jbe    c00015eb <dlmemalign+0x41>
c00015d8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015db:	85 d1                	test   ecx,edx
c00015dd:	75 04                	jne    c00015e3 <dlmemalign+0x39>
c00015df:	89 d7                	mov    edi,edx
c00015e1:	eb 08                	jmp    c00015eb <dlmemalign+0x41>
c00015e3:	39 d7                	cmp    edi,edx
c00015e5:	73 04                	jae    c00015eb <dlmemalign+0x41>
c00015e7:	01 ff                	add    edi,edi
c00015e9:	eb f8                	jmp    c00015e3 <dlmemalign+0x39>
c00015eb:	83 f8 df             	cmp    eax,0xffffffdf
c00015ee:	76 07                	jbe    c00015f7 <dlmemalign+0x4d>
c00015f0:	31 c0                	xor    eax,eax
c00015f2:	e9 ce 00 00 00       	jmp    c00016c5 <dlmemalign+0x11b>
c00015f7:	83 c0 0b             	add    eax,0xb
c00015fa:	bd 10 00 00 00       	mov    ebp,0x10
c00015ff:	83 f8 0f             	cmp    eax,0xf
c0001602:	76 05                	jbe    c0001609 <dlmemalign+0x5f>
c0001604:	83 e0 f8             	and    eax,0xfffffff8
c0001607:	89 c5                	mov    ebp,eax
c0001609:	83 ec 0c             	sub    esp,0xc
c000160c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001610:	50                   	push   eax
c0001611:	e8 a2 f8 ff ff       	call   c0000eb8 <dlmalloc>
c0001616:	83 c4 10             	add    esp,0x10
c0001619:	89 c1                	mov    ecx,eax
c000161b:	85 c0                	test   eax,eax
c000161d:	74 d1                	je     c00015f0 <dlmemalign+0x46>
c000161f:	31 d2                	xor    edx,edx
c0001621:	8d 70 f8             	lea    esi,[eax-0x8]
c0001624:	f7 f7                	div    edi
c0001626:	85 d2                	test   edx,edx
c0001628:	74 62                	je     c000168c <dlmemalign+0xe2>
c000162a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000162e:	89 f8                	mov    eax,edi
c0001630:	f7 d8                	neg    eax
c0001632:	21 c3                	and    ebx,eax
c0001634:	83 eb 08             	sub    ebx,0x8
c0001637:	89 d8                	mov    eax,ebx
c0001639:	29 f0                	sub    eax,esi
c000163b:	83 f8 0f             	cmp    eax,0xf
c000163e:	77 02                	ja     c0001642 <dlmemalign+0x98>
c0001640:	01 fb                	add    ebx,edi
c0001642:	89 d8                	mov    eax,ebx
c0001644:	29 f0                	sub    eax,esi
c0001646:	89 c6                	mov    esi,eax
c0001648:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000164b:	89 c2                	mov    edx,eax
c000164d:	83 e2 fc             	and    edx,0xfffffffc
c0001650:	29 f2                	sub    edx,esi
c0001652:	a8 02                	test   al,0x2
c0001654:	74 10                	je     c0001666 <dlmemalign+0xbc>
c0001656:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001659:	83 ca 02             	or     edx,0x2
c000165c:	8d 43 08             	lea    eax,[ebx+0x8]
c000165f:	89 33                	mov    DWORD PTR [ebx],esi
c0001661:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001664:	eb 5f                	jmp    c00016c5 <dlmemalign+0x11b>
c0001666:	83 ec 0c             	sub    esp,0xc
c0001669:	89 d0                	mov    eax,edx
c000166b:	83 c8 01             	or     eax,0x1
c000166e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001671:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001676:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001679:	83 e0 01             	and    eax,0x1
c000167c:	09 f0                	or     eax,esi
c000167e:	89 de                	mov    esi,ebx
c0001680:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001683:	51                   	push   ecx
c0001684:	e8 d4 f4 ff ff       	call   c0000b5d <dlfree>
c0001689:	83 c4 10             	add    esp,0x10
c000168c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000168f:	a8 02                	test   al,0x2
c0001691:	75 2f                	jne    c00016c2 <dlmemalign+0x118>
c0001693:	83 e0 fc             	and    eax,0xfffffffc
c0001696:	8d 55 10             	lea    edx,[ebp+0x10]
c0001699:	39 c2                	cmp    edx,eax
c000169b:	73 25                	jae    c00016c2 <dlmemalign+0x118>
c000169d:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	29 e8                	sub    eax,ebp
c00016a5:	83 c2 08             	add    edx,0x8
c00016a8:	83 c8 01             	or     eax,0x1
c00016ab:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016b1:	83 e0 01             	and    eax,0x1
c00016b4:	09 c5                	or     ebp,eax
c00016b6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016b9:	52                   	push   edx
c00016ba:	e8 9e f4 ff ff       	call   c0000b5d <dlfree>
c00016bf:	83 c4 10             	add    esp,0x10
c00016c2:	8d 46 08             	lea    eax,[esi+0x8]
c00016c5:	83 c4 0c             	add    esp,0xc
c00016c8:	5b                   	pop    ebx
c00016c9:	5e                   	pop    esi
c00016ca:	5f                   	pop    edi
c00016cb:	5d                   	pop    ebp
c00016cc:	c3                   	ret    

c00016cd <dlcalloc>:
c00016cd:	53                   	push   ebx
c00016ce:	83 ec 14             	sub    esp,0x14
c00016d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016d5:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016da:	50                   	push   eax
c00016db:	e8 d8 f7 ff ff       	call   c0000eb8 <dlmalloc>
c00016e0:	83 c4 10             	add    esp,0x10
c00016e3:	89 c3                	mov    ebx,eax
c00016e5:	85 c0                	test   eax,eax
c00016e7:	74 77                	je     c0001760 <dlcalloc+0x93>
c00016e9:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016ec:	89 d0                	mov    eax,edx
c00016ee:	83 e0 fc             	and    eax,0xfffffffc
c00016f1:	80 e2 02             	and    dl,0x2
c00016f4:	75 5a                	jne    c0001750 <dlcalloc+0x83>
c00016f6:	83 e8 04             	sub    eax,0x4
c00016f9:	83 f8 27             	cmp    eax,0x27
c00016fc:	76 03                	jbe    c0001701 <dlcalloc+0x34>
c00016fe:	51                   	push   ecx
c00016ff:	eb 53                	jmp    c0001754 <dlcalloc+0x87>
c0001701:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001707:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000170e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001715:	83 f8 13             	cmp    eax,0x13
c0001718:	76 46                	jbe    c0001760 <dlcalloc+0x93>
c000171a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001721:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001728:	83 f8 1b             	cmp    eax,0x1b
c000172b:	76 33                	jbe    c0001760 <dlcalloc+0x93>
c000172d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001734:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000173b:	83 f8 23             	cmp    eax,0x23
c000173e:	76 20                	jbe    c0001760 <dlcalloc+0x93>
c0001740:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001747:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000174e:	eb 10                	jmp    c0001760 <dlcalloc+0x93>
c0001750:	83 e8 08             	sub    eax,0x8
c0001753:	52                   	push   edx
c0001754:	50                   	push   eax
c0001755:	6a 00                	push   0x0
c0001757:	53                   	push   ebx
c0001758:	e8 1f ef ff ff       	call   c000067c <memset>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	89 d8                	mov    eax,ebx
c0001762:	83 c4 08             	add    esp,0x8
c0001765:	5b                   	pop    ebx
c0001766:	c3                   	ret    

c0001767 <dlcfree>:
c0001767:	e9 f1 f3 ff ff       	jmp    c0000b5d <dlfree>

c000176c <dlindependent_calloc>:
c000176c:	83 ec 28             	sub    esp,0x28
c000176f:	b9 03 00 00 00       	mov    ecx,0x3
c0001774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001778:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000177c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001780:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001784:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001788:	e8 b9 fa ff ff       	call   c0001246 <iALLOc>
c000178d:	83 c4 2c             	add    esp,0x2c
c0001790:	c3                   	ret    

c0001791 <dlindependent_comalloc>:
c0001791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001795:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001799:	31 c9                	xor    ecx,ecx
c000179b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000179f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017a3:	e9 9e fa ff ff       	jmp    c0001246 <iALLOc>

c00017a8 <dlvalloc>:
c00017a8:	83 ec 0c             	sub    esp,0xc
c00017ab:	83 3d 80 b9 02 c0 00 	cmp    DWORD PTR ds:0xc002b980,0x0
c00017b2:	75 0a                	jne    c00017be <dlvalloc+0x16>
c00017b4:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c00017b9:	e8 b8 f2 ff ff       	call   c0000a76 <malloc_consolidate>
c00017be:	50                   	push   eax
c00017bf:	50                   	push   eax
c00017c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017c4:	ff 35 dc bc 02 c0    	push   DWORD PTR ds:0xc002bcdc
c00017ca:	e8 db fd ff ff       	call   c00015aa <dlmemalign>
c00017cf:	83 c4 1c             	add    esp,0x1c
c00017d2:	c3                   	ret    

c00017d3 <dlpvalloc>:
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	83 3d 80 b9 02 c0 00 	cmp    DWORD PTR ds:0xc002b980,0x0
c00017dd:	75 0a                	jne    c00017e9 <dlpvalloc+0x16>
c00017df:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c00017e4:	e8 8d f2 ff ff       	call   c0000a76 <malloc_consolidate>
c00017e9:	a1 dc bc 02 c0       	mov    eax,ds:0xc002bcdc
c00017ee:	89 c1                	mov    ecx,eax
c00017f0:	52                   	push   edx
c00017f1:	f7 d9                	neg    ecx
c00017f3:	52                   	push   edx
c00017f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00017f8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00017fc:	21 ca                	and    edx,ecx
c00017fe:	52                   	push   edx
c00017ff:	50                   	push   eax
c0001800:	e8 a5 fd ff ff       	call   c00015aa <dlmemalign>
c0001805:	83 c4 1c             	add    esp,0x1c
c0001808:	c3                   	ret    

c0001809 <dlmalloc_trim>:
c0001809:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c000180e:	e8 63 f2 ff ff       	call   c0000a76 <malloc_consolidate>
c0001813:	31 c0                	xor    eax,eax
c0001815:	c3                   	ret    

c0001816 <dlmalloc_usable_size>:
c0001816:	53                   	push   ebx
c0001817:	31 c0                	xor    eax,eax
c0001819:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000181d:	85 c9                	test   ecx,ecx
c000181f:	74 24                	je     c0001845 <dlmalloc_usable_size+0x2f>
c0001821:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001824:	f6 c2 02             	test   dl,0x2
c0001827:	74 08                	je     c0001831 <dlmalloc_usable_size+0x1b>
c0001829:	83 e2 fc             	and    edx,0xfffffffc
c000182c:	8d 42 f8             	lea    eax,[edx-0x8]
c000182f:	eb 14                	jmp    c0001845 <dlmalloc_usable_size+0x2f>
c0001831:	89 d3                	mov    ebx,edx
c0001833:	31 c0                	xor    eax,eax
c0001835:	83 e3 fe             	and    ebx,0xfffffffe
c0001838:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000183d:	74 06                	je     c0001845 <dlmalloc_usable_size+0x2f>
c000183f:	83 e2 fc             	and    edx,0xfffffffc
c0001842:	8d 42 fc             	lea    eax,[edx-0x4]
c0001845:	5b                   	pop    ebx
c0001846:	c3                   	ret    

c0001847 <dlmallinfo>:
c0001847:	55                   	push   ebp
c0001848:	57                   	push   edi
c0001849:	56                   	push   esi
c000184a:	53                   	push   ebx
c000184b:	83 ec 08             	sub    esp,0x8
c000184e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001852:	83 3d ac b9 02 c0 00 	cmp    DWORD PTR ds:0xc002b9ac,0x0
c0001859:	75 0a                	jne    c0001865 <dlmallinfo+0x1e>
c000185b:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c0001860:	e8 11 f2 ff ff       	call   c0000a76 <malloc_consolidate>
c0001865:	a1 ac b9 02 c0       	mov    eax,ds:0xc002b9ac
c000186a:	31 ed                	xor    ebp,ebp
c000186c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000186f:	31 c9                	xor    ecx,ecx
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001878:	31 c0                	xor    eax,eax
c000187a:	8b 14 85 84 b9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd467c]
c0001881:	85 d2                	test   edx,edx
c0001883:	74 0e                	je     c0001893 <dlmallinfo+0x4c>
c0001885:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001888:	45                   	inc    ebp
c0001889:	83 e6 fc             	and    esi,0xfffffffc
c000188c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000188f:	01 f1                	add    ecx,esi
c0001891:	eb ee                	jmp    c0001881 <dlmallinfo+0x3a>
c0001893:	40                   	inc    eax
c0001894:	83 f8 0a             	cmp    eax,0xa
c0001897:	75 e1                	jne    c000187a <dlmallinfo+0x33>
c0001899:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000189d:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018a4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018a7:	b8 b4 b9 02 c0       	mov    eax,0xc002b9b4
c00018ac:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018af:	39 f0                	cmp    eax,esi
c00018b1:	74 10                	je     c00018c3 <dlmallinfo+0x7c>
c00018b3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018b6:	ff 04 24             	inc    DWORD PTR [esp]
c00018b9:	83 e7 fc             	and    edi,0xfffffffc
c00018bc:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018bf:	01 fa                	add    edx,edi
c00018c1:	eb ec                	jmp    c00018af <dlmallinfo+0x68>
c00018c3:	83 c0 08             	add    eax,0x8
c00018c6:	3d ac bc 02 c0       	cmp    eax,0xc002bcac
c00018cb:	75 df                	jne    c00018ac <dlmallinfo+0x65>
c00018cd:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018d0:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018d3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018d6:	a1 e8 bc 02 c0       	mov    eax,ds:0xc002bce8
c00018db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018de:	89 03                	mov    DWORD PTR [ebx],eax
c00018e0:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018e3:	8b 35 d0 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bcd0
c00018e9:	29 d0                	sub    eax,edx
c00018eb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018ee:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00018f1:	8b 35 e4 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bce4
c00018f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018fb:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00018fe:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001901:	8b 35 f4 bc 02 c0    	mov    esi,DWORD PTR ds:0xc002bcf4
c0001907:	89 d8                	mov    eax,ebx
c0001909:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000190c:	83 c4 08             	add    esp,0x8
c000190f:	5b                   	pop    ebx
c0001910:	5e                   	pop    esi
c0001911:	5f                   	pop    edi
c0001912:	5d                   	pop    ebp
c0001913:	c2 04 00             	ret    0x4

c0001916 <dlmalloc_stats>:
c0001916:	83 ec 30             	sub    esp,0x30
c0001919:	8d 44 24 08          	lea    eax,[esp+0x8]
c000191d:	50                   	push   eax
c000191e:	e8 24 ff ff ff       	call   c0001847 <dlmallinfo>
c0001923:	83 c4 30             	add    esp,0x30
c0001926:	c3                   	ret    

c0001927 <dlmallopt>:
c0001927:	56                   	push   esi
c0001928:	b8 80 b9 02 c0       	mov    eax,0xc002b980
c000192d:	53                   	push   ebx
c000192e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001932:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001936:	e8 3b f1 ff ff       	call   c0000a76 <malloc_consolidate>
c000193b:	8d 46 04             	lea    eax,[esi+0x4]
c000193e:	83 f8 05             	cmp    eax,0x5
c0001941:	77 67                	ja     c00019aa <dlmallopt+0x83>
c0001943:	ff 24 85 64 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e9c]
c000194a:	83 fb 50             	cmp    ebx,0x50
c000194d:	77 5b                	ja     c00019aa <dlmallopt+0x83>
c000194f:	ba 08 00 00 00       	mov    edx,0x8
c0001954:	85 db                	test   ebx,ebx
c0001956:	74 12                	je     c000196a <dlmallopt+0x43>
c0001958:	83 c3 0b             	add    ebx,0xb
c000195b:	ba 10 00 00 00       	mov    edx,0x10
c0001960:	83 fb 0f             	cmp    ebx,0xf
c0001963:	76 05                	jbe    c000196a <dlmallopt+0x43>
c0001965:	89 da                	mov    edx,ebx
c0001967:	83 e2 f8             	and    edx,0xfffffff8
c000196a:	a1 80 b9 02 c0       	mov    eax,ds:0xc002b980
c000196f:	83 e0 03             	and    eax,0x3
c0001972:	09 d0                	or     eax,edx
c0001974:	a3 80 b9 02 c0       	mov    ds:0xc002b980,eax
c0001979:	eb 31                	jmp    c00019ac <dlmallopt+0x85>
c000197b:	89 1d c4 bc 02 c0    	mov    DWORD PTR ds:0xc002bcc4,ebx
c0001981:	eb 06                	jmp    c0001989 <dlmallopt+0x62>
c0001983:	89 1d c8 bc 02 c0    	mov    DWORD PTR ds:0xc002bcc8,ebx
c0001989:	be 01 00 00 00       	mov    esi,0x1
c000198e:	eb 1c                	jmp    c00019ac <dlmallopt+0x85>
c0001990:	89 1d cc bc 02 c0    	mov    DWORD PTR ds:0xc002bccc,ebx
c0001996:	eb f1                	jmp    c0001989 <dlmallopt+0x62>
c0001998:	31 f6                	xor    esi,esi
c000199a:	85 db                	test   ebx,ebx
c000199c:	75 0e                	jne    c00019ac <dlmallopt+0x85>
c000199e:	c7 05 d4 bc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bcd4,0x0
c00019a8:	eb df                	jmp    c0001989 <dlmallopt+0x62>
c00019aa:	31 f6                	xor    esi,esi
c00019ac:	89 f0                	mov    eax,esi
c00019ae:	5b                   	pop    ebx
c00019af:	5e                   	pop    esi
c00019b0:	c3                   	ret    

c00019b1 <disk_status>:
c00019b1:	31 c0                	xor    eax,eax
c00019b3:	c3                   	ret    

c00019b4 <disk_initialize>:
c00019b4:	31 c0                	xor    eax,eax
c00019b6:	c3                   	ret    

c00019b7 <disk_read>:
c00019b7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019bc:	0f b6 04 85 c0 d3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2c40]
c00019c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c8:	e9 d9 d7 01 00       	jmp    c001f1a6 <fatWrapperReadDisk>

c00019cd <disk_write>:
c00019cd:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019d2:	0f b6 04 85 c0 d3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2c40]
c00019da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019de:	e9 0a d8 01 00       	jmp    c001f1ed <fatWrapperWriteDisk>

c00019e3 <disk_ioctl>:
c00019e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019ec:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019f1:	0f b6 04 85 c0 d3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd2c40]
c00019f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019fd:	e9 32 d8 01 00       	jmp    c001f234 <fatWrapperIoctl>

c0001a02 <ld_word>:
c0001a02:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a06:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a09:	c1 e2 08             	shl    edx,0x8
c0001a0c:	09 d0                	or     eax,edx
c0001a0e:	c3                   	ret    

c0001a0f <ld_dword>:
c0001a0f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a13:	89 d1                	mov    ecx,edx
c0001a15:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a19:	c1 e1 08             	shl    ecx,0x8
c0001a1c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a1f:	09 ca                	or     edx,ecx
c0001a21:	c1 e2 08             	shl    edx,0x8
c0001a24:	09 d0                	or     eax,edx
c0001a26:	c3                   	ret    

c0001a27 <ld_qword>:
c0001a27:	57                   	push   edi
c0001a28:	56                   	push   esi
c0001a29:	53                   	push   ebx
c0001a2a:	31 db                	xor    ebx,ebx
c0001a2c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a2f:	89 df                	mov    edi,ebx
c0001a31:	89 ce                	mov    esi,ecx
c0001a33:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a37:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a3b:	c1 e6 08             	shl    esi,0x8
c0001a3e:	09 f2                	or     edx,esi
c0001a40:	89 d6                	mov    esi,edx
c0001a42:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a5c:	c1 e6 08             	shl    esi,0x8
c0001a5f:	89 fb                	mov    ebx,edi
c0001a61:	09 f2                	or     edx,esi
c0001a63:	89 d1                	mov    ecx,edx
c0001a65:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a69:	c1 e1 08             	shl    ecx,0x8
c0001a6c:	89 da                	mov    edx,ebx
c0001a6e:	09 c8                	or     eax,ecx
c0001a70:	5b                   	pop    ebx
c0001a71:	5e                   	pop    esi
c0001a72:	5f                   	pop    edi
c0001a73:	c3                   	ret    

c0001a74 <st_word>:
c0001a74:	66 89 10             	mov    WORD PTR [eax],dx
c0001a77:	c3                   	ret    

c0001a78 <st_dword>:
c0001a78:	89 10                	mov    DWORD PTR [eax],edx
c0001a7a:	c3                   	ret    

c0001a7b <st_qword>:
c0001a7b:	89 10                	mov    DWORD PTR [eax],edx
c0001a7d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a80:	c3                   	ret    

c0001a81 <mem_cpy>:
c0001a81:	85 c9                	test   ecx,ecx
c0001a83:	74 10                	je     c0001a95 <mem_cpy+0x14>
c0001a85:	57                   	push   edi
c0001a86:	01 c1                	add    ecx,eax
c0001a88:	56                   	push   esi
c0001a89:	89 c7                	mov    edi,eax
c0001a8b:	89 d6                	mov    esi,edx
c0001a8d:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a8e:	39 f9                	cmp    ecx,edi
c0001a90:	75 fb                	jne    c0001a8d <mem_cpy+0xc>
c0001a92:	5e                   	pop    esi
c0001a93:	5f                   	pop    edi
c0001a94:	c3                   	ret    
c0001a95:	c3                   	ret    

c0001a96 <mem_set>:
c0001a96:	01 c1                	add    ecx,eax
c0001a98:	40                   	inc    eax
c0001a99:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a9c:	39 c8                	cmp    eax,ecx
c0001a9e:	75 f8                	jne    c0001a98 <mem_set+0x2>
c0001aa0:	c3                   	ret    

c0001aa1 <mem_cmp>:
c0001aa1:	57                   	push   edi
c0001aa2:	56                   	push   esi
c0001aa3:	89 c6                	mov    esi,eax
c0001aa5:	53                   	push   ebx
c0001aa6:	46                   	inc    esi
c0001aa7:	42                   	inc    edx
c0001aa8:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001aac:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001ab0:	29 fb                	sub    ebx,edi
c0001ab2:	89 cf                	mov    edi,ecx
c0001ab4:	29 f7                	sub    edi,esi
c0001ab6:	01 c7                	add    edi,eax
c0001ab8:	74 04                	je     c0001abe <mem_cmp+0x1d>
c0001aba:	85 db                	test   ebx,ebx
c0001abc:	74 e8                	je     c0001aa6 <mem_cmp+0x5>
c0001abe:	89 d8                	mov    eax,ebx
c0001ac0:	5b                   	pop    ebx
c0001ac1:	5e                   	pop    esi
c0001ac2:	5f                   	pop    edi
c0001ac3:	c3                   	ret    

c0001ac4 <chk_chr>:
c0001ac4:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ac7:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001aca:	74 07                	je     c0001ad3 <chk_chr+0xf>
c0001acc:	39 d1                	cmp    ecx,edx
c0001ace:	74 03                	je     c0001ad3 <chk_chr+0xf>
c0001ad0:	40                   	inc    eax
c0001ad1:	eb f1                	jmp    c0001ac4 <chk_chr>
c0001ad3:	89 c8                	mov    eax,ecx
c0001ad5:	c3                   	ret    

c0001ad6 <dbc_1st>:
c0001ad6:	31 c0                	xor    eax,eax
c0001ad8:	c3                   	ret    

c0001ad9 <dbc_2nd>:
c0001ad9:	31 c0                	xor    eax,eax
c0001adb:	c3                   	ret    

c0001adc <tchar2uni>:
c0001adc:	57                   	push   edi
c0001add:	89 c7                	mov    edi,eax
c0001adf:	56                   	push   esi
c0001ae0:	53                   	push   ebx
c0001ae1:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ae3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001ae5:	8d 73 01             	lea    esi,[ebx+0x1]
c0001ae8:	84 c9                	test   cl,cl
c0001aea:	78 0a                	js     c0001af6 <tchar2uni+0x1a>
c0001aec:	0f b6 d1             	movzx  edx,cl
c0001aef:	89 f3                	mov    ebx,esi
c0001af1:	e9 9f 00 00 00       	jmp    c0001b95 <tchar2uni+0xb9>
c0001af6:	88 ca                	mov    dl,cl
c0001af8:	83 e2 e0             	and    edx,0xffffffe0
c0001afb:	80 fa c0             	cmp    dl,0xc0
c0001afe:	75 0c                	jne    c0001b0c <tchar2uni+0x30>
c0001b00:	89 ca                	mov    edx,ecx
c0001b02:	b9 01 00 00 00       	mov    ecx,0x1
c0001b07:	83 e2 1f             	and    edx,0x1f
c0001b0a:	eb 2e                	jmp    c0001b3a <tchar2uni+0x5e>
c0001b0c:	88 ca                	mov    dl,cl
c0001b0e:	83 e2 f0             	and    edx,0xfffffff0
c0001b11:	80 fa e0             	cmp    dl,0xe0
c0001b14:	75 0c                	jne    c0001b22 <tchar2uni+0x46>
c0001b16:	89 ca                	mov    edx,ecx
c0001b18:	b9 02 00 00 00       	mov    ecx,0x2
c0001b1d:	83 e2 0f             	and    edx,0xf
c0001b20:	eb 18                	jmp    c0001b3a <tchar2uni+0x5e>
c0001b22:	88 ca                	mov    dl,cl
c0001b24:	83 e2 f8             	and    edx,0xfffffff8
c0001b27:	88 d0                	mov    al,dl
c0001b29:	83 ca ff             	or     edx,0xffffffff
c0001b2c:	3c f0                	cmp    al,0xf0
c0001b2e:	75 6c                	jne    c0001b9c <tchar2uni+0xc0>
c0001b30:	89 ca                	mov    edx,ecx
c0001b32:	b9 03 00 00 00       	mov    ecx,0x3
c0001b37:	83 e2 07             	and    edx,0x7
c0001b3a:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b3e:	46                   	inc    esi
c0001b3f:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b42:	88 c8                	mov    al,cl
c0001b44:	83 e0 c0             	and    eax,0xffffffc0
c0001b47:	3c 80                	cmp    al,0x80
c0001b49:	75 4e                	jne    c0001b99 <tchar2uni+0xbd>
c0001b4b:	c1 e2 06             	shl    edx,0x6
c0001b4e:	83 e1 3f             	and    ecx,0x3f
c0001b51:	09 ca                	or     edx,ecx
c0001b53:	39 de                	cmp    esi,ebx
c0001b55:	75 e7                	jne    c0001b3e <tchar2uni+0x62>
c0001b57:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b5a:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b60:	77 37                	ja     c0001b99 <tchar2uni+0xbd>
c0001b62:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b6e:	76 29                	jbe    c0001b99 <tchar2uni+0xbd>
c0001b70:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b76:	76 1d                	jbe    c0001b95 <tchar2uni+0xb9>
c0001b78:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b7e:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b84:	c1 e1 06             	shl    ecx,0x6
c0001b87:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b8d:	09 ca                	or     edx,ecx
c0001b8f:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b95:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b97:	eb 03                	jmp    c0001b9c <tchar2uni+0xc0>
c0001b99:	83 ca ff             	or     edx,0xffffffff
c0001b9c:	5b                   	pop    ebx
c0001b9d:	89 d0                	mov    eax,edx
c0001b9f:	5e                   	pop    esi
c0001ba0:	5f                   	pop    edi
c0001ba1:	c3                   	ret    

c0001ba2 <put_utf>:
c0001ba2:	53                   	push   ebx
c0001ba3:	83 f8 7f             	cmp    eax,0x7f
c0001ba6:	89 c3                	mov    ebx,eax
c0001ba8:	b0 00                	mov    al,0x0
c0001baa:	77 11                	ja     c0001bbd <put_utf+0x1b>
c0001bac:	85 c9                	test   ecx,ecx
c0001bae:	0f 84 e5 00 00 00    	je     c0001c99 <put_utf+0xf7>
c0001bb4:	88 1a                	mov    BYTE PTR [edx],bl
c0001bb6:	b0 01                	mov    al,0x1
c0001bb8:	e9 dc 00 00 00       	jmp    c0001c99 <put_utf+0xf7>
c0001bbd:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bc3:	77 23                	ja     c0001be8 <put_utf+0x46>
c0001bc5:	83 f9 01             	cmp    ecx,0x1
c0001bc8:	0f 86 cb 00 00 00    	jbe    c0001c99 <put_utf+0xf7>
c0001bce:	89 d8                	mov    eax,ebx
c0001bd0:	83 e3 3f             	and    ebx,0x3f
c0001bd3:	c1 e8 06             	shr    eax,0x6
c0001bd6:	83 cb 80             	or     ebx,0xffffff80
c0001bd9:	83 c8 c0             	or     eax,0xffffffc0
c0001bdc:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bdf:	88 02                	mov    BYTE PTR [edx],al
c0001be1:	b0 02                	mov    al,0x2
c0001be3:	e9 b1 00 00 00       	jmp    c0001c99 <put_utf+0xf7>
c0001be8:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bee:	77 40                	ja     c0001c30 <put_utf+0x8e>
c0001bf0:	83 f9 02             	cmp    ecx,0x2
c0001bf3:	0f 86 a0 00 00 00    	jbe    c0001c99 <put_utf+0xf7>
c0001bf9:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001bff:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c05:	0f 86 8e 00 00 00    	jbe    c0001c99 <put_utf+0xf7>
c0001c0b:	89 d8                	mov    eax,ebx
c0001c0d:	c1 e8 0c             	shr    eax,0xc
c0001c10:	83 c8 e0             	or     eax,0xffffffe0
c0001c13:	88 02                	mov    BYTE PTR [edx],al
c0001c15:	89 d8                	mov    eax,ebx
c0001c17:	83 e3 3f             	and    ebx,0x3f
c0001c1a:	c1 e8 06             	shr    eax,0x6
c0001c1d:	83 cb 80             	or     ebx,0xffffff80
c0001c20:	83 e0 3f             	and    eax,0x3f
c0001c23:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c26:	83 c8 80             	or     eax,0xffffff80
c0001c29:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c2c:	b0 03                	mov    al,0x3
c0001c2e:	eb 69                	jmp    c0001c99 <put_utf+0xf7>
c0001c30:	83 f9 03             	cmp    ecx,0x3
c0001c33:	76 64                	jbe    c0001c99 <put_utf+0xf7>
c0001c35:	89 d9                	mov    ecx,ebx
c0001c37:	0f b7 c3             	movzx  eax,bx
c0001c3a:	66 31 c9             	xor    cx,cx
c0001c3d:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c43:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c49:	c1 e9 06             	shr    ecx,0x6
c0001c4c:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c52:	77 43                	ja     c0001c97 <put_utf+0xf5>
c0001c54:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c5a:	77 3b                	ja     c0001c97 <put_utf+0xf5>
c0001c5c:	09 cb                	or     ebx,ecx
c0001c5e:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c64:	89 d8                	mov    eax,ebx
c0001c66:	c1 e8 12             	shr    eax,0x12
c0001c69:	83 c8 f0             	or     eax,0xfffffff0
c0001c6c:	88 02                	mov    BYTE PTR [edx],al
c0001c6e:	89 d8                	mov    eax,ebx
c0001c70:	c1 e8 0c             	shr    eax,0xc
c0001c73:	83 e0 3f             	and    eax,0x3f
c0001c76:	83 c8 80             	or     eax,0xffffff80
c0001c79:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7c:	89 d8                	mov    eax,ebx
c0001c7e:	83 e3 3f             	and    ebx,0x3f
c0001c81:	c1 e8 06             	shr    eax,0x6
c0001c84:	83 cb 80             	or     ebx,0xffffff80
c0001c87:	83 e0 3f             	and    eax,0x3f
c0001c8a:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c8d:	83 c8 80             	or     eax,0xffffff80
c0001c90:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c93:	b0 04                	mov    al,0x4
c0001c95:	eb 02                	jmp    c0001c99 <put_utf+0xf7>
c0001c97:	31 c0                	xor    eax,eax
c0001c99:	5b                   	pop    ebx
c0001c9a:	c3                   	ret    

c0001c9b <clst2sect>:
c0001c9b:	89 c1                	mov    ecx,eax
c0001c9d:	83 ea 02             	sub    edx,0x2
c0001ca0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ca3:	83 e8 02             	sub    eax,0x2
c0001ca6:	39 d0                	cmp    eax,edx
c0001ca8:	76 0d                	jbe    c0001cb7 <clst2sect+0x1c>
c0001caa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cae:	f7 e2                	mul    edx
c0001cb0:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cb3:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cb6:	c3                   	ret    
c0001cb7:	31 c0                	xor    eax,eax
c0001cb9:	31 d2                	xor    edx,edx
c0001cbb:	c3                   	ret    

c0001cbc <clmt_clust>:
c0001cbc:	57                   	push   edi
c0001cbd:	89 cf                	mov    edi,ecx
c0001cbf:	56                   	push   esi
c0001cc0:	89 d6                	mov    esi,edx
c0001cc2:	53                   	push   ebx
c0001cc3:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cc7:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cca:	89 f2                	mov    edx,esi
c0001ccc:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cce:	c1 ef 09             	shr    edi,0x9
c0001cd1:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001cd5:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001cd8:	89 f9                	mov    ecx,edi
c0001cda:	31 ff                	xor    edi,edi
c0001cdc:	57                   	push   edi
c0001cdd:	56                   	push   esi
c0001cde:	51                   	push   ecx
c0001cdf:	52                   	push   edx
c0001ce0:	e8 67 2b 02 00       	call   c002484c <__udivdi3>
c0001ce5:	83 c4 10             	add    esp,0x10
c0001ce8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cea:	85 d2                	test   edx,edx
c0001cec:	74 10                	je     c0001cfe <clmt_clust+0x42>
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	72 07                	jb     c0001cf9 <clmt_clust+0x3d>
c0001cf2:	29 d0                	sub    eax,edx
c0001cf4:	83 c3 08             	add    ebx,0x8
c0001cf7:	eb ef                	jmp    c0001ce8 <clmt_clust+0x2c>
c0001cf9:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001cfc:	89 c2                	mov    edx,eax
c0001cfe:	5b                   	pop    ebx
c0001cff:	89 d0                	mov    eax,edx
c0001d01:	5e                   	pop    esi
c0001d02:	5f                   	pop    edi
c0001d03:	c3                   	ret    

c0001d04 <pick_lfn>:
c0001d04:	55                   	push   ebp
c0001d05:	57                   	push   edi
c0001d06:	56                   	push   esi
c0001d07:	89 d6                	mov    esi,edx
c0001d09:	53                   	push   ebx
c0001d0a:	89 c3                	mov    ebx,eax
c0001d0c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d0f:	e8 ee fc ff ff       	call   c0001a02 <ld_word>
c0001d14:	66 85 c0             	test   ax,ax
c0001d17:	74 04                	je     c0001d1d <pick_lfn+0x19>
c0001d19:	31 c0                	xor    eax,eax
c0001d1b:	eb 5c                	jmp    c0001d79 <pick_lfn+0x75>
c0001d1d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d20:	bd 01 00 00 00       	mov    ebp,0x1
c0001d25:	83 e1 bf             	and    ecx,0xffffffbf
c0001d28:	31 ff                	xor    edi,edi
c0001d2a:	49                   	dec    ecx
c0001d2b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d2e:	0f b6 87 80 72 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd8d80]
c0001d35:	01 f0                	add    eax,esi
c0001d37:	e8 c6 fc ff ff       	call   c0001a02 <ld_word>
c0001d3c:	66 85 ed             	test   bp,bp
c0001d3f:	74 11                	je     c0001d52 <pick_lfn+0x4e>
c0001d41:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d47:	77 d0                	ja     c0001d19 <pick_lfn+0x15>
c0001d49:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d4d:	89 c5                	mov    ebp,eax
c0001d4f:	41                   	inc    ecx
c0001d50:	eb 04                	jmp    c0001d56 <pick_lfn+0x52>
c0001d52:	66 40                	inc    ax
c0001d54:	75 c3                	jne    c0001d19 <pick_lfn+0x15>
c0001d56:	47                   	inc    edi
c0001d57:	83 ff 0d             	cmp    edi,0xd
c0001d5a:	75 d2                	jne    c0001d2e <pick_lfn+0x2a>
c0001d5c:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d5f:	74 13                	je     c0001d74 <pick_lfn+0x70>
c0001d61:	66 85 ed             	test   bp,bp
c0001d64:	74 0e                	je     c0001d74 <pick_lfn+0x70>
c0001d66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d6c:	77 ab                	ja     c0001d19 <pick_lfn+0x15>
c0001d6e:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d74:	b8 01 00 00 00       	mov    eax,0x1
c0001d79:	5b                   	pop    ebx
c0001d7a:	5e                   	pop    esi
c0001d7b:	5f                   	pop    edi
c0001d7c:	5d                   	pop    ebp
c0001d7d:	c3                   	ret    

c0001d7e <put_lfn>:
c0001d7e:	55                   	push   ebp
c0001d7f:	31 ed                	xor    ebp,ebp
c0001d81:	57                   	push   edi
c0001d82:	89 d7                	mov    edi,edx
c0001d84:	56                   	push   esi
c0001d85:	31 f6                	xor    esi,esi
c0001d87:	53                   	push   ebx
c0001d88:	83 ec 08             	sub    esp,0x8
c0001d8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8e:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d96:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d9c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d9f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001da2:	31 d2                	xor    edx,edx
c0001da4:	e8 cb fc ff ff       	call   c0001a74 <st_word>
c0001da9:	0f b6 d9             	movzx  ebx,cl
c0001dac:	4b                   	dec    ebx
c0001dad:	6b db 0d             	imul   ebx,ebx,0xd
c0001db0:	66 83 fe ff          	cmp    si,0xffff
c0001db4:	74 08                	je     c0001dbe <put_lfn+0x40>
c0001db6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001db9:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dbd:	43                   	inc    ebx
c0001dbe:	0f b6 85 80 72 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd8d80]
c0001dc5:	0f b7 d6             	movzx  edx,si
c0001dc8:	01 f8                	add    eax,edi
c0001dca:	e8 a5 fc ff ff       	call   c0001a74 <st_word>
c0001dcf:	66 85 f6             	test   si,si
c0001dd2:	75 03                	jne    c0001dd7 <put_lfn+0x59>
c0001dd4:	83 ce ff             	or     esi,0xffffffff
c0001dd7:	45                   	inc    ebp
c0001dd8:	83 fd 0d             	cmp    ebp,0xd
c0001ddb:	75 d3                	jne    c0001db0 <put_lfn+0x32>
c0001ddd:	66 46                	inc    si
c0001ddf:	74 0a                	je     c0001deb <put_lfn+0x6d>
c0001de1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001de4:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001de9:	75 09                	jne    c0001df4 <put_lfn+0x76>
c0001deb:	88 c8                	mov    al,cl
c0001ded:	83 c8 40             	or     eax,0x40
c0001df0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001df4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001df8:	88 07                	mov    BYTE PTR [edi],al
c0001dfa:	83 c4 08             	add    esp,0x8
c0001dfd:	5b                   	pop    ebx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	5d                   	pop    ebp
c0001e01:	c3                   	ret    

c0001e02 <gen_numname>:
c0001e02:	57                   	push   edi
c0001e03:	89 cf                	mov    edi,ecx
c0001e05:	56                   	push   esi
c0001e06:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e0b:	53                   	push   ebx
c0001e0c:	89 c6                	mov    esi,eax
c0001e0e:	83 ec 10             	sub    esp,0x10
c0001e11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e15:	e8 67 fc ff ff       	call   c0001a81 <mem_cpy>
c0001e1a:	83 fb 05             	cmp    ebx,0x5
c0001e1d:	76 2d                	jbe    c0001e4c <gen_numname+0x4a>
c0001e1f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e22:	66 85 c0             	test   ax,ax
c0001e25:	74 25                	je     c0001e4c <gen_numname+0x4a>
c0001e27:	83 c7 02             	add    edi,0x2
c0001e2a:	ba 10 00 00 00       	mov    edx,0x10
c0001e2f:	01 db                	add    ebx,ebx
c0001e31:	89 c1                	mov    ecx,eax
c0001e33:	66 d1 e8             	shr    ax,1
c0001e36:	83 e1 01             	and    ecx,0x1
c0001e39:	01 cb                	add    ebx,ecx
c0001e3b:	0f ba e3 10          	bt     ebx,0x10
c0001e3f:	73 06                	jae    c0001e47 <gen_numname+0x45>
c0001e41:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e47:	4a                   	dec    edx
c0001e48:	75 e5                	jne    c0001e2f <gen_numname+0x2d>
c0001e4a:	eb d3                	jmp    c0001e1f <gen_numname+0x1d>
c0001e4c:	b8 07 00 00 00       	mov    eax,0x7
c0001e51:	88 d9                	mov    cl,bl
c0001e53:	83 e1 0f             	and    ecx,0xf
c0001e56:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e59:	80 fa 39             	cmp    dl,0x39
c0001e5c:	76 03                	jbe    c0001e61 <gen_numname+0x5f>
c0001e5e:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e61:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e64:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e68:	89 da                	mov    edx,ebx
c0001e6a:	c1 ea 04             	shr    edx,0x4
c0001e6d:	83 fb 0f             	cmp    ebx,0xf
c0001e70:	76 06                	jbe    c0001e78 <gen_numname+0x76>
c0001e72:	89 c8                	mov    eax,ecx
c0001e74:	89 d3                	mov    ebx,edx
c0001e76:	eb d9                	jmp    c0001e51 <gen_numname+0x4f>
c0001e78:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e7d:	31 d2                	xor    edx,edx
c0001e7f:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e82:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e85:	39 ca                	cmp    edx,ecx
c0001e87:	73 18                	jae    c0001ea1 <gen_numname+0x9f>
c0001e89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e8c:	3c 20                	cmp    al,0x20
c0001e8e:	74 11                	je     c0001ea1 <gen_numname+0x9f>
c0001e90:	e8 41 fc ff ff       	call   c0001ad6 <dbc_1st>
c0001e95:	85 c0                	test   eax,eax
c0001e97:	74 05                	je     c0001e9e <gen_numname+0x9c>
c0001e99:	39 d3                	cmp    ebx,edx
c0001e9b:	74 04                	je     c0001ea1 <gen_numname+0x9f>
c0001e9d:	42                   	inc    edx
c0001e9e:	42                   	inc    edx
c0001e9f:	eb e1                	jmp    c0001e82 <gen_numname+0x80>
c0001ea1:	b0 20                	mov    al,0x20
c0001ea3:	83 f9 07             	cmp    ecx,0x7
c0001ea6:	77 05                	ja     c0001ead <gen_numname+0xab>
c0001ea8:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001eac:	41                   	inc    ecx
c0001ead:	42                   	inc    edx
c0001eae:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eb2:	83 fa 07             	cmp    edx,0x7
c0001eb5:	76 ea                	jbe    c0001ea1 <gen_numname+0x9f>
c0001eb7:	83 c4 10             	add    esp,0x10
c0001eba:	5b                   	pop    ebx
c0001ebb:	5e                   	pop    esi
c0001ebc:	5f                   	pop    edi
c0001ebd:	c3                   	ret    

c0001ebe <sum_sfn>:
c0001ebe:	31 c9                	xor    ecx,ecx
c0001ec0:	31 d2                	xor    edx,edx
c0001ec2:	d0 ca                	ror    dl,1
c0001ec4:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ec7:	41                   	inc    ecx
c0001ec8:	83 f9 0b             	cmp    ecx,0xb
c0001ecb:	75 f5                	jne    c0001ec2 <sum_sfn+0x4>
c0001ecd:	88 d0                	mov    al,dl
c0001ecf:	c3                   	ret    

c0001ed0 <xdir_sum>:
c0001ed0:	56                   	push   esi
c0001ed1:	31 c9                	xor    ecx,ecx
c0001ed3:	53                   	push   ebx
c0001ed4:	31 d2                	xor    edx,edx
c0001ed6:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001eda:	43                   	inc    ebx
c0001edb:	c1 e3 05             	shl    ebx,0x5
c0001ede:	83 fa 02             	cmp    edx,0x2
c0001ee1:	74 0b                	je     c0001eee <xdir_sum+0x1e>
c0001ee3:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ee7:	66 d1 c9             	ror    cx,1
c0001eea:	01 f1                	add    ecx,esi
c0001eec:	eb 05                	jmp    c0001ef3 <xdir_sum+0x23>
c0001eee:	ba 03 00 00 00       	mov    edx,0x3
c0001ef3:	42                   	inc    edx
c0001ef4:	39 d3                	cmp    ebx,edx
c0001ef6:	77 e6                	ja     c0001ede <xdir_sum+0xe>
c0001ef8:	89 c8                	mov    eax,ecx
c0001efa:	5b                   	pop    ebx
c0001efb:	5e                   	pop    esi
c0001efc:	c3                   	ret    

c0001efd <xsum32>:
c0001efd:	d1 ca                	ror    edx,1
c0001eff:	0f b6 c0             	movzx  eax,al
c0001f02:	01 d0                	add    eax,edx
c0001f04:	c3                   	ret    

c0001f05 <get_xfileinfo>:
c0001f05:	55                   	push   ebp
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	57                   	push   edi
c0001f09:	bd 40 00 00 00       	mov    ebp,0x40
c0001f0e:	56                   	push   esi
c0001f0f:	31 ff                	xor    edi,edi
c0001f11:	53                   	push   ebx
c0001f12:	89 c6                	mov    esi,eax
c0001f14:	83 ec 0c             	sub    esp,0xc
c0001f17:	89 d3                	mov    ebx,edx
c0001f19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f20:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f24:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f27:	76 6d                	jbe    c0001f96 <get_xfileinfo+0x91>
c0001f29:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f2f:	76 0b                	jbe    c0001f3c <get_xfileinfo+0x37>
c0001f31:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f35:	bf 01 00 00 00       	mov    edi,0x1
c0001f3a:	eb 63                	jmp    c0001f9f <get_xfileinfo+0x9a>
c0001f3c:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f42:	75 03                	jne    c0001f47 <get_xfileinfo+0x42>
c0001f44:	83 c5 02             	add    ebp,0x2
c0001f47:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f4a:	83 c5 02             	add    ebp,0x2
c0001f4d:	e8 b0 fa ff ff       	call   c0001a02 <ld_word>
c0001f52:	ff 04 24             	inc    DWORD PTR [esp]
c0001f55:	66 85 c9             	test   cx,cx
c0001f58:	75 0d                	jne    c0001f67 <get_xfileinfo+0x62>
c0001f5a:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f60:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f65:	76 2b                	jbe    c0001f92 <get_xfileinfo+0x8d>
c0001f67:	c1 e1 10             	shl    ecx,0x10
c0001f6a:	ba ff 00 00 00       	mov    edx,0xff
c0001f6f:	0f b7 c0             	movzx  eax,ax
c0001f72:	29 fa                	sub    edx,edi
c0001f74:	09 c8                	or     eax,ecx
c0001f76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f7a:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f7e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f82:	e8 1b fc ff ff       	call   c0001ba2 <put_utf>
c0001f87:	84 c0                	test   al,al
c0001f89:	74 a6                	je     c0001f31 <get_xfileinfo+0x2c>
c0001f8b:	0f b6 c0             	movzx  eax,al
c0001f8e:	01 c7                	add    edi,eax
c0001f90:	31 c0                	xor    eax,eax
c0001f92:	89 c1                	mov    ecx,eax
c0001f94:	eb 8a                	jmp    c0001f20 <get_xfileinfo+0x1b>
c0001f96:	85 ff                	test   edi,edi
c0001f98:	74 97                	je     c0001f31 <get_xfileinfo+0x2c>
c0001f9a:	66 85 c9             	test   cx,cx
c0001f9d:	75 92                	jne    c0001f31 <get_xfileinfo+0x2c>
c0001f9f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fa4:	31 c0                	xor    eax,eax
c0001fa6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001faa:	31 d2                	xor    edx,edx
c0001fac:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001faf:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fb2:	80 e1 10             	and    cl,0x10
c0001fb5:	75 08                	jne    c0001fbf <get_xfileinfo+0xba>
c0001fb7:	8d 46 38             	lea    eax,[esi+0x38]
c0001fba:	e8 68 fa ff ff       	call   c0001a27 <ld_qword>
c0001fbf:	89 03                	mov    DWORD PTR [ebx],eax
c0001fc1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fc4:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fc7:	e8 36 fa ff ff       	call   c0001a02 <ld_word>
c0001fcc:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fd0:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fd3:	e8 2a fa ff ff       	call   c0001a02 <ld_word>
c0001fd8:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001fdc:	83 c4 0c             	add    esp,0xc
c0001fdf:	5b                   	pop    ebx
c0001fe0:	5e                   	pop    esi
c0001fe1:	5f                   	pop    edi
c0001fe2:	5d                   	pop    ebp
c0001fe3:	c3                   	ret    

c0001fe4 <get_ldnumber>:
c0001fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0001fe6:	85 d2                	test   edx,edx
c0001fe8:	74 14                	je     c0001ffe <get_ldnumber+0x1a>
c0001fea:	56                   	push   esi
c0001feb:	53                   	push   ebx
c0001fec:	89 d3                	mov    ebx,edx
c0001fee:	43                   	inc    ebx
c0001fef:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001ff2:	80 f9 1f             	cmp    cl,0x1f
c0001ff5:	76 0d                	jbe    c0002004 <get_ldnumber+0x20>
c0001ff7:	80 f9 3a             	cmp    cl,0x3a
c0001ffa:	75 f2                	jne    c0001fee <get_ldnumber+0xa>
c0001ffc:	eb 0a                	jmp    c0002008 <get_ldnumber+0x24>
c0001ffe:	83 c9 ff             	or     ecx,0xffffffff
c0002001:	89 c8                	mov    eax,ecx
c0002003:	c3                   	ret    
c0002004:	31 c9                	xor    ecx,ecx
c0002006:	eb 24                	jmp    c000202c <get_ldnumber+0x48>
c0002008:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000200b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000200e:	80 f9 09             	cmp    cl,0x9
c0002011:	77 16                	ja     c0002029 <get_ldnumber+0x45>
c0002013:	83 c2 02             	add    edx,0x2
c0002016:	83 c9 ff             	or     ecx,0xffffffff
c0002019:	39 d3                	cmp    ebx,edx
c000201b:	75 0f                	jne    c000202c <get_ldnumber+0x48>
c000201d:	89 f2                	mov    edx,esi
c000201f:	89 18                	mov    DWORD PTR [eax],ebx
c0002021:	0f be ca             	movsx  ecx,dl
c0002024:	83 e9 30             	sub    ecx,0x30
c0002027:	eb 03                	jmp    c000202c <get_ldnumber+0x48>
c0002029:	83 c9 ff             	or     ecx,0xffffffff
c000202c:	89 c8                	mov    eax,ecx
c000202e:	5b                   	pop    ebx
c000202f:	5e                   	pop    esi
c0002030:	c3                   	ret    

c0002031 <crc32>:
c0002031:	56                   	push   esi
c0002032:	89 d6                	mov    esi,edx
c0002034:	53                   	push   ebx
c0002035:	b2 01                	mov    dl,0x1
c0002037:	bb 08 00 00 00       	mov    ebx,0x8
c000203c:	89 f1                	mov    ecx,esi
c000203e:	84 d1                	test   cl,dl
c0002040:	0f 95 c1             	setne  cl
c0002043:	0f b6 c9             	movzx  ecx,cl
c0002046:	31 c1                	xor    ecx,eax
c0002048:	89 c8                	mov    eax,ecx
c000204a:	d1 e8                	shr    eax,1
c000204c:	80 e1 01             	and    cl,0x1
c000204f:	74 05                	je     c0002056 <crc32+0x25>
c0002051:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002056:	d1 e2                	shl    edx,1
c0002058:	4b                   	dec    ebx
c0002059:	75 e1                	jne    c000203c <crc32+0xb>
c000205b:	5b                   	pop    ebx
c000205c:	5e                   	pop    esi
c000205d:	c3                   	ret    

c000205e <test_gpt_header>:
c000205e:	55                   	push   ebp
c000205f:	b9 10 00 00 00       	mov    ecx,0x10
c0002064:	57                   	push   edi
c0002065:	ba 80 71 02 c0       	mov    edx,0xc0027180
c000206a:	56                   	push   esi
c000206b:	31 ff                	xor    edi,edi
c000206d:	53                   	push   ebx
c000206e:	89 c3                	mov    ebx,eax
c0002070:	e8 2c fa ff ff       	call   c0001aa1 <mem_cmp>
c0002075:	85 c0                	test   eax,eax
c0002077:	75 55                	jne    c00020ce <test_gpt_header+0x70>
c0002079:	89 c7                	mov    edi,eax
c000207b:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002080:	83 ce ff             	or     esi,0xffffffff
c0002083:	31 d2                	xor    edx,edx
c0002085:	83 fd 03             	cmp    ebp,0x3
c0002088:	76 05                	jbe    c000208f <test_gpt_header+0x31>
c000208a:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000208f:	89 f0                	mov    eax,esi
c0002091:	45                   	inc    ebp
c0002092:	e8 9a ff ff ff       	call   c0002031 <crc32>
c0002097:	83 fd 4c             	cmp    ebp,0x4c
c000209a:	89 c6                	mov    esi,eax
c000209c:	75 e5                	jne    c0002083 <test_gpt_header+0x25>
c000209e:	8d 43 10             	lea    eax,[ebx+0x10]
c00020a1:	f7 d6                	not    esi
c00020a3:	e8 67 f9 ff ff       	call   c0001a0f <ld_dword>
c00020a8:	39 c6                	cmp    esi,eax
c00020aa:	75 22                	jne    c00020ce <test_gpt_header+0x70>
c00020ac:	8d 43 54             	lea    eax,[ebx+0x54]
c00020af:	e8 5b f9 ff ff       	call   c0001a0f <ld_dword>
c00020b4:	83 c0 80             	add    eax,0xffffff80
c00020b7:	75 15                	jne    c00020ce <test_gpt_header+0x70>
c00020b9:	8d 43 50             	lea    eax,[ebx+0x50]
c00020bc:	e8 4e f9 ff ff       	call   c0001a0f <ld_dword>
c00020c1:	3d 80 00 00 00       	cmp    eax,0x80
c00020c6:	0f 96 c0             	setbe  al
c00020c9:	0f b6 c0             	movzx  eax,al
c00020cc:	89 c7                	mov    edi,eax
c00020ce:	5b                   	pop    ebx
c00020cf:	89 f8                	mov    eax,edi
c00020d1:	5e                   	pop    esi
c00020d2:	5f                   	pop    edi
c00020d3:	5d                   	pop    ebp
c00020d4:	c3                   	ret    

c00020d5 <make_rand>:
c00020d5:	56                   	push   esi
c00020d6:	85 c0                	test   eax,eax
c00020d8:	53                   	push   ebx
c00020d9:	75 05                	jne    c00020e0 <make_rand+0xb>
c00020db:	b8 01 00 00 00       	mov    eax,0x1
c00020e0:	01 d1                	add    ecx,edx
c00020e2:	bb 08 00 00 00       	mov    ebx,0x8
c00020e7:	89 c6                	mov    esi,eax
c00020e9:	d1 e8                	shr    eax,1
c00020eb:	83 e6 01             	and    esi,0x1
c00020ee:	85 f6                	test   esi,esi
c00020f0:	74 05                	je     c00020f7 <make_rand+0x22>
c00020f2:	35 00 00 00 a3       	xor    eax,0xa3000000
c00020f7:	4b                   	dec    ebx
c00020f8:	75 ed                	jne    c00020e7 <make_rand+0x12>
c00020fa:	42                   	inc    edx
c00020fb:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00020fe:	39 ca                	cmp    edx,ecx
c0002100:	75 e0                	jne    c00020e2 <make_rand+0xd>
c0002102:	5b                   	pop    ebx
c0002103:	5e                   	pop    esi
c0002104:	c3                   	ret    

c0002105 <validate>:
c0002105:	56                   	push   esi
c0002106:	53                   	push   ebx
c0002107:	89 d6                	mov    esi,edx
c0002109:	51                   	push   ecx
c000210a:	85 c0                	test   eax,eax
c000210c:	75 09                	jne    c0002117 <validate+0x12>
c000210e:	b8 09 00 00 00       	mov    eax,0x9
c0002113:	31 c9                	xor    ecx,ecx
c0002115:	eb 2f                	jmp    c0002146 <validate+0x41>
c0002117:	89 c3                	mov    ebx,eax
c0002119:	8b 00                	mov    eax,DWORD PTR [eax]
c000211b:	85 c0                	test   eax,eax
c000211d:	74 ef                	je     c000210e <validate+0x9>
c000211f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002122:	74 ea                	je     c000210e <validate+0x9>
c0002124:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002128:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000212c:	75 e0                	jne    c000210e <validate+0x9>
c000212e:	83 ec 0c             	sub    esp,0xc
c0002131:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002135:	50                   	push   eax
c0002136:	e8 76 f8 ff ff       	call   c00019b1 <disk_status>
c000213b:	83 c4 10             	add    esp,0x10
c000213e:	a8 01                	test   al,0x1
c0002140:	75 cc                	jne    c000210e <validate+0x9>
c0002142:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002144:	31 c0                	xor    eax,eax
c0002146:	89 0e                	mov    DWORD PTR [esi],ecx
c0002148:	5a                   	pop    edx
c0002149:	5b                   	pop    ebx
c000214a:	5e                   	pop    esi
c000214b:	c3                   	ret    

c000214c <sync_window>:
c000214c:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002150:	0f 84 85 00 00 00    	je     c00021db <sync_window+0x8f>
c0002156:	55                   	push   ebp
c0002157:	8d 68 54             	lea    ebp,[eax+0x54]
c000215a:	57                   	push   edi
c000215b:	56                   	push   esi
c000215c:	53                   	push   ebx
c000215d:	89 c3                	mov    ebx,eax
c000215f:	83 ec 28             	sub    esp,0x28
c0002162:	6a 01                	push   0x1
c0002164:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002167:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000216a:	55                   	push   ebp
c000216b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000216f:	50                   	push   eax
c0002170:	e8 58 f8 ff ff       	call   c00019cd <disk_write>
c0002175:	83 c4 20             	add    esp,0x20
c0002178:	ba 01 00 00 00       	mov    edx,0x1
c000217d:	85 c0                	test   eax,eax
c000217f:	75 50                	jne    c00021d1 <sync_window+0x85>
c0002181:	31 ff                	xor    edi,edi
c0002183:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002186:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000218a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000218e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002191:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002194:	89 c6                	mov    esi,eax
c0002196:	89 d7                	mov    edi,edx
c0002198:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000219b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000219f:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021a2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021a6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021aa:	73 23                	jae    c00021cf <sync_window+0x83>
c00021ac:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021b0:	75 1d                	jne    c00021cf <sync_window+0x83>
c00021b2:	83 ec 0c             	sub    esp,0xc
c00021b5:	6a 01                	push   0x1
c00021b7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021bb:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021bf:	52                   	push   edx
c00021c0:	50                   	push   eax
c00021c1:	55                   	push   ebp
c00021c2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021c6:	50                   	push   eax
c00021c7:	e8 01 f8 ff ff       	call   c00019cd <disk_write>
c00021cc:	83 c4 20             	add    esp,0x20
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	83 c4 1c             	add    esp,0x1c
c00021d4:	89 d0                	mov    eax,edx
c00021d6:	5b                   	pop    ebx
c00021d7:	5e                   	pop    esi
c00021d8:	5f                   	pop    edi
c00021d9:	5d                   	pop    ebp
c00021da:	c3                   	ret    
c00021db:	31 d2                	xor    edx,edx
c00021dd:	89 d0                	mov    eax,edx
c00021df:	c3                   	ret    

c00021e0 <move_window>:
c00021e0:	56                   	push   esi
c00021e1:	53                   	push   ebx
c00021e2:	89 c3                	mov    ebx,eax
c00021e4:	83 ec 14             	sub    esp,0x14
c00021e7:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021ea:	75 07                	jne    c00021f3 <move_window+0x13>
c00021ec:	31 f6                	xor    esi,esi
c00021ee:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c00021f1:	74 59                	je     c000224c <move_window+0x6c>
c00021f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00021f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00021fb:	89 d8                	mov    eax,ebx
c00021fd:	e8 4a ff ff ff       	call   c000214c <sync_window>
c0002202:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002206:	89 c6                	mov    esi,eax
c0002208:	85 c0                	test   eax,eax
c000220a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000220e:	75 3c                	jne    c000224c <move_window+0x6c>
c0002210:	83 ec 0c             	sub    esp,0xc
c0002213:	8d 43 54             	lea    eax,[ebx+0x54]
c0002216:	6a 01                	push   0x1
c0002218:	51                   	push   ecx
c0002219:	52                   	push   edx
c000221a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000221e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002222:	50                   	push   eax
c0002223:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002227:	50                   	push   eax
c0002228:	e8 8a f7 ff ff       	call   c00019b7 <disk_read>
c000222d:	83 c4 20             	add    esp,0x20
c0002230:	85 c0                	test   eax,eax
c0002232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002236:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000223a:	74 0a                	je     c0002246 <move_window+0x66>
c000223c:	83 ca ff             	or     edx,0xffffffff
c000223f:	be 01 00 00 00       	mov    esi,0x1
c0002244:	89 d1                	mov    ecx,edx
c0002246:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002249:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000224c:	89 f0                	mov    eax,esi
c000224e:	83 c4 14             	add    esp,0x14
c0002251:	5b                   	pop    ebx
c0002252:	5e                   	pop    esi
c0002253:	c3                   	ret    

c0002254 <check_fs>:
c0002254:	53                   	push   ebx
c0002255:	89 c3                	mov    ebx,eax
c0002257:	83 ec 08             	sub    esp,0x8
c000225a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000225e:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002265:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000226c:	e8 6f ff ff ff       	call   c00021e0 <move_window>
c0002271:	ba 04 00 00 00       	mov    edx,0x4
c0002276:	85 c0                	test   eax,eax
c0002278:	0f 85 89 00 00 00    	jne    c0002307 <check_fs+0xb3>
c000227e:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002284:	e8 79 f7 ff ff       	call   c0001a02 <ld_word>
c0002289:	ba 03 00 00 00       	mov    edx,0x3
c000228e:	66 3d 55 aa          	cmp    ax,0xaa55
c0002292:	75 73                	jne    c0002307 <check_fs+0xb3>
c0002294:	ba a0 72 02 c0       	mov    edx,0xc00272a0
c0002299:	8d 43 54             	lea    eax,[ebx+0x54]
c000229c:	b9 0b 00 00 00       	mov    ecx,0xb
c00022a1:	e8 fb f7 ff ff       	call   c0001aa1 <mem_cmp>
c00022a6:	ba 01 00 00 00       	mov    edx,0x1
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 58                	je     c0002307 <check_fs+0xb3>
c00022af:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022b2:	8d 50 18             	lea    edx,[eax+0x18]
c00022b5:	80 fa 01             	cmp    dl,0x1
c00022b8:	76 09                	jbe    c00022c3 <check_fs+0x6f>
c00022ba:	ba 02 00 00 00       	mov    edx,0x2
c00022bf:	3c eb                	cmp    al,0xeb
c00022c1:	75 44                	jne    c0002307 <check_fs+0xb3>
c00022c3:	ba 78 a2 02 c0       	mov    edx,0xc002a278
c00022c8:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022ce:	b9 03 00 00 00       	mov    ecx,0x3
c00022d3:	e8 c9 f7 ff ff       	call   c0001aa1 <mem_cmp>
c00022d8:	31 d2                	xor    edx,edx
c00022da:	85 c0                	test   eax,eax
c00022dc:	74 29                	je     c0002307 <check_fs+0xb3>
c00022de:	ba ac 72 02 c0       	mov    edx,0xc00272ac
c00022e3:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022e9:	b9 05 00 00 00       	mov    ecx,0x5
c00022ee:	e8 ae f7 ff ff       	call   c0001aa1 <mem_cmp>
c00022f3:	31 d2                	xor    edx,edx
c00022f5:	85 c0                	test   eax,eax
c00022f7:	74 0e                	je     c0002307 <check_fs+0xb3>
c00022f9:	31 d2                	xor    edx,edx
c00022fb:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002302:	0f 95 c2             	setne  dl
c0002305:	01 d2                	add    edx,edx
c0002307:	89 d0                	mov    eax,edx
c0002309:	83 c4 08             	add    esp,0x8
c000230c:	5b                   	pop    ebx
c000230d:	c3                   	ret    

c000230e <find_volume>:
c000230e:	55                   	push   ebp
c000230f:	31 c9                	xor    ecx,ecx
c0002311:	57                   	push   edi
c0002312:	56                   	push   esi
c0002313:	89 d6                	mov    esi,edx
c0002315:	53                   	push   ebx
c0002316:	31 d2                	xor    edx,edx
c0002318:	83 ec 3c             	sub    esp,0x3c
c000231b:	89 c3                	mov    ebx,eax
c000231d:	e8 32 ff ff ff       	call   c0002254 <check_fs>
c0002322:	83 f8 02             	cmp    eax,0x2
c0002325:	74 0e                	je     c0002335 <find_volume+0x27>
c0002327:	0f 87 5d 01 00 00    	ja     c000248a <find_volume+0x17c>
c000232d:	85 f6                	test   esi,esi
c000232f:	0f 84 55 01 00 00    	je     c000248a <find_volume+0x17c>
c0002335:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000233c:	0f 85 dd 00 00 00    	jne    c000241f <find_volume+0x111>
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	ba 01 00 00 00       	mov    edx,0x1
c0002349:	89 d8                	mov    eax,ebx
c000234b:	e8 90 fe ff ff       	call   c00021e0 <move_window>
c0002350:	85 c0                	test   eax,eax
c0002352:	74 0a                	je     c000235e <find_volume+0x50>
c0002354:	b8 04 00 00 00       	mov    eax,0x4
c0002359:	e9 2c 01 00 00       	jmp    c000248a <find_volume+0x17c>
c000235e:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002361:	89 e8                	mov    eax,ebp
c0002363:	e8 f6 fc ff ff       	call   c000205e <test_gpt_header>
c0002368:	85 c0                	test   eax,eax
c000236a:	75 0a                	jne    c0002376 <find_volume+0x68>
c000236c:	b8 03 00 00 00       	mov    eax,0x3
c0002371:	e9 14 01 00 00       	jmp    c000248a <find_volume+0x17c>
c0002376:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000237c:	e8 8e f6 ff ff       	call   c0001a0f <ld_dword>
c0002381:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002385:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000238b:	e8 97 f6 ff ff       	call   c0001a27 <ld_qword>
c0002390:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002398:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000239c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023a8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ac:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023b0:	74 ba                	je     c000236c <find_volume+0x5e>
c00023b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023b6:	31 c9                	xor    ecx,ecx
c00023b8:	c1 e7 07             	shl    edi,0x7
c00023bb:	89 d8                	mov    eax,ebx
c00023bd:	89 fa                	mov    edx,edi
c00023bf:	c1 ea 09             	shr    edx,0x9
c00023c2:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023c6:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023ca:	e8 11 fe ff ff       	call   c00021e0 <move_window>
c00023cf:	85 c0                	test   eax,eax
c00023d1:	75 81                	jne    c0002354 <find_volume+0x46>
c00023d3:	81 e7 80 01 00 00    	and    edi,0x180
c00023d9:	b9 10 00 00 00       	mov    ecx,0x10
c00023de:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023e2:	ba 90 72 02 c0       	mov    edx,0xc0027290
c00023e7:	e8 b5 f6 ff ff       	call   c0001aa1 <mem_cmp>
c00023ec:	85 c0                	test   eax,eax
c00023ee:	75 29                	jne    c0002419 <find_volume+0x10b>
c00023f0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00023f4:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00023f8:	e8 2a f6 ff ff       	call   c0001a27 <ld_qword>
c00023fd:	89 d1                	mov    ecx,edx
c00023ff:	89 c2                	mov    edx,eax
c0002401:	89 d8                	mov    eax,ebx
c0002403:	e8 4c fe ff ff       	call   c0002254 <check_fs>
c0002408:	85 f6                	test   esi,esi
c000240a:	75 07                	jne    c0002413 <find_volume+0x105>
c000240c:	83 f8 01             	cmp    eax,0x1
c000240f:	77 08                	ja     c0002419 <find_volume+0x10b>
c0002411:	eb 77                	jmp    c000248a <find_volume+0x17c>
c0002413:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002417:	74 71                	je     c000248a <find_volume+0x17c>
c0002419:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000241d:	eb 89                	jmp    c00023a8 <find_volume+0x9a>
c000241f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002423:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002429:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000242f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002433:	89 cd                	mov    ebp,ecx
c0002435:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002439:	89 f8                	mov    eax,edi
c000243b:	83 c7 10             	add    edi,0x10
c000243e:	e8 cc f5 ff ff       	call   c0001a0f <ld_dword>
c0002443:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002447:	89 01                	mov    DWORD PTR [ecx],eax
c0002449:	83 c1 04             	add    ecx,0x4
c000244c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002450:	75 e3                	jne    c0002435 <find_volume+0x127>
c0002452:	31 ff                	xor    edi,edi
c0002454:	85 f6                	test   esi,esi
c0002456:	74 03                	je     c000245b <find_volume+0x14d>
c0002458:	8d 7e ff             	lea    edi,[esi-0x1]
c000245b:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000245f:	85 d2                	test   edx,edx
c0002461:	74 14                	je     c0002477 <find_volume+0x169>
c0002463:	31 c9                	xor    ecx,ecx
c0002465:	89 d8                	mov    eax,ebx
c0002467:	e8 e8 fd ff ff       	call   c0002254 <check_fs>
c000246c:	83 f8 01             	cmp    eax,0x1
c000246f:	76 19                	jbe    c000248a <find_volume+0x17c>
c0002471:	85 f6                	test   esi,esi
c0002473:	74 0f                	je     c0002484 <find_volume+0x176>
c0002475:	eb 13                	jmp    c000248a <find_volume+0x17c>
c0002477:	85 f6                	test   esi,esi
c0002479:	0f 85 ed fe ff ff    	jne    c000236c <find_volume+0x5e>
c000247f:	b8 03 00 00 00       	mov    eax,0x3
c0002484:	47                   	inc    edi
c0002485:	83 ff 03             	cmp    edi,0x3
c0002488:	76 d1                	jbe    c000245b <find_volume+0x14d>
c000248a:	83 c4 3c             	add    esp,0x3c
c000248d:	5b                   	pop    ebx
c000248e:	5e                   	pop    esi
c000248f:	5f                   	pop    edi
c0002490:	5d                   	pop    ebp
c0002491:	c3                   	ret    

c0002492 <mount_volume>:
c0002492:	55                   	push   ebp
c0002493:	57                   	push   edi
c0002494:	89 cf                	mov    edi,ecx
c0002496:	56                   	push   esi
c0002497:	53                   	push   ebx
c0002498:	bb 0b 00 00 00       	mov    ebx,0xb
c000249d:	83 ec 3c             	sub    esp,0x3c
c00024a0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024aa:	e8 35 fb ff ff       	call   c0001fe4 <get_ldnumber>
c00024af:	85 c0                	test   eax,eax
c00024b1:	0f 88 3a 05 00 00    	js     c00029f1 <mount_volume+0x55f>
c00024b7:	8b 2c 85 20 bd 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd42e0]
c00024be:	89 c6                	mov    esi,eax
c00024c0:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c5:	85 ed                	test   ebp,ebp
c00024c7:	0f 84 24 05 00 00    	je     c00029f1 <mount_volume+0x55f>
c00024cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024d1:	83 e7 fe             	and    edi,0xfffffffe
c00024d4:	89 2a                	mov    DWORD PTR [edx],ebp
c00024d6:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024da:	74 32                	je     c000250e <mount_volume+0x7c>
c00024dc:	83 ec 0c             	sub    esp,0xc
c00024df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024e3:	50                   	push   eax
c00024e4:	e8 c8 f4 ff ff       	call   c00019b1 <disk_status>
c00024e9:	83 c4 10             	add    esp,0x10
c00024ec:	a8 01                	test   al,0x1
c00024ee:	75 1e                	jne    c000250e <mount_volume+0x7c>
c00024f0:	31 db                	xor    ebx,ebx
c00024f2:	89 f9                	mov    ecx,edi
c00024f4:	84 c9                	test   cl,cl
c00024f6:	0f 84 f5 04 00 00    	je     c00029f1 <mount_volume+0x55f>
c00024fc:	a8 04                	test   al,0x4
c00024fe:	0f 84 ed 04 00 00    	je     c00029f1 <mount_volume+0x55f>
c0002504:	bb 0a 00 00 00       	mov    ebx,0xa
c0002509:	e9 e3 04 00 00       	jmp    c00029f1 <mount_volume+0x55f>
c000250e:	83 ec 0c             	sub    esp,0xc
c0002511:	89 f0                	mov    eax,esi
c0002513:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002517:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000251a:	0f b6 f0             	movzx  esi,al
c000251d:	bb 03 00 00 00       	mov    ebx,0x3
c0002522:	56                   	push   esi
c0002523:	e8 8c f4 ff ff       	call   c00019b4 <disk_initialize>
c0002528:	83 c4 10             	add    esp,0x10
c000252b:	a8 01                	test   al,0x1
c000252d:	0f 85 be 04 00 00    	jne    c00029f1 <mount_volume+0x55f>
c0002533:	89 f9                	mov    ecx,edi
c0002535:	84 c9                	test   cl,cl
c0002537:	74 04                	je     c000253d <mount_volume+0xab>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c7                	jne    c0002504 <mount_volume+0x72>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 e8                	mov    eax,ebp
c0002541:	e8 c8 fd ff ff       	call   c000230e <find_volume>
c0002546:	83 f8 04             	cmp    eax,0x4
c0002549:	75 0a                	jne    c0002555 <mount_volume+0xc3>
c000254b:	bb 01 00 00 00       	mov    ebx,0x1
c0002550:	e9 9c 04 00 00       	jmp    c00029f1 <mount_volume+0x55f>
c0002555:	83 f8 01             	cmp    eax,0x1
c0002558:	76 0a                	jbe    c0002564 <mount_volume+0xd2>
c000255a:	bb 0d 00 00 00       	mov    ebx,0xd
c000255f:	e9 8d 04 00 00       	jmp    c00029f1 <mount_volume+0x55f>
c0002564:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002567:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000256a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000256e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002572:	75 17                	jne    c000258b <mount_volume+0xf9>
c0002574:	b8 0b 00 00 00       	mov    eax,0xb
c0002579:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000257e:	75 da                	jne    c000255a <mount_volume+0xc8>
c0002580:	40                   	inc    eax
c0002581:	83 f8 40             	cmp    eax,0x40
c0002584:	75 f3                	jne    c0002579 <mount_volume+0xe7>
c0002586:	e9 5a 02 00 00       	jmp    c00027e5 <mount_volume+0x353>
c000258b:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000258e:	e8 6f f4 ff ff       	call   c0001a02 <ld_word>
c0002593:	66 3d 00 02          	cmp    ax,0x200
c0002597:	75 c1                	jne    c000255a <mount_volume+0xc8>
c0002599:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000259c:	e8 61 f4 ff ff       	call   c0001a02 <ld_word>
c00025a1:	0f b7 c0             	movzx  eax,ax
c00025a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025a8:	85 c0                	test   eax,eax
c00025aa:	75 0c                	jne    c00025b8 <mount_volume+0x126>
c00025ac:	8d 45 78             	lea    eax,[ebp+0x78]
c00025af:	e8 5b f4 ff ff       	call   c0001a0f <ld_dword>
c00025b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025bc:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025bf:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025c2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025c6:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025c9:	48                   	dec    eax
c00025ca:	3c 01                	cmp    al,0x1
c00025cc:	77 8c                	ja     c000255a <mount_volume+0xc8>
c00025ce:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025d2:	89 c3                	mov    ebx,eax
c00025d4:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025d8:	66 85 c0             	test   ax,ax
c00025db:	0f 84 79 ff ff ff    	je     c000255a <mount_volume+0xc8>
c00025e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00025e4:	85 d8                	test   eax,ebx
c00025e6:	0f 85 6e ff ff ff    	jne    c000255a <mount_volume+0xc8>
c00025ec:	8d 45 65             	lea    eax,[ebp+0x65]
c00025ef:	e8 0e f4 ff ff       	call   c0001a02 <ld_word>
c00025f4:	89 c7                	mov    edi,eax
c00025f6:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00025fa:	a8 0f                	test   al,0xf
c00025fc:	0f 85 58 ff ff ff    	jne    c000255a <mount_volume+0xc8>
c0002602:	8d 45 67             	lea    eax,[ebp+0x67]
c0002605:	e8 f8 f3 ff ff       	call   c0001a02 <ld_word>
c000260a:	0f b7 f0             	movzx  esi,ax
c000260d:	85 f6                	test   esi,esi
c000260f:	75 0a                	jne    c000261b <mount_volume+0x189>
c0002611:	8d 45 74             	lea    eax,[ebp+0x74]
c0002614:	e8 f6 f3 ff ff       	call   c0001a0f <ld_dword>
c0002619:	89 c6                	mov    esi,eax
c000261b:	8d 45 62             	lea    eax,[ebp+0x62]
c000261e:	e8 df f3 ff ff       	call   c0001a02 <ld_word>
c0002623:	66 85 c0             	test   ax,ax
c0002626:	0f 84 2e ff ff ff    	je     c000255a <mount_volume+0xc8>
c000262c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002631:	0f b7 c8             	movzx  ecx,ax
c0002634:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002639:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000263d:	89 fa                	mov    edx,edi
c000263f:	66 c1 ea 04          	shr    dx,0x4
c0002643:	0f b7 d2             	movzx  edx,dx
c0002646:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000264a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000264d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002651:	39 c6                	cmp    esi,eax
c0002653:	0f 82 01 ff ff ff    	jb     c000255a <mount_volume+0xc8>
c0002659:	29 c6                	sub    esi,eax
c000265b:	31 d2                	xor    edx,edx
c000265d:	89 f0                	mov    eax,esi
c000265f:	f7 f3                	div    ebx
c0002661:	39 de                	cmp    esi,ebx
c0002663:	0f 82 f1 fe ff ff    	jb     c000255a <mount_volume+0xc8>
c0002669:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000266e:	0f 87 e6 fe ff ff    	ja     c000255a <mount_volume+0xc8>
c0002674:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002679:	0f 86 63 03 00 00    	jbe    c00029e2 <mount_volume+0x550>
c000267f:	bb 03 00 00 00       	mov    ebx,0x3
c0002684:	8d 70 02             	lea    esi,[eax+0x2]
c0002687:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000268b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000268f:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002692:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002695:	31 d2                	xor    edx,edx
c0002697:	89 c8                	mov    eax,ecx
c0002699:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000269c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ac:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026af:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026b6:	31 d2                	xor    edx,edx
c00026b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026bc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026c0:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026c3:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026c6:	83 fb 03             	cmp    ebx,0x3
c00026c9:	75 2b                	jne    c00026f6 <mount_volume+0x264>
c00026cb:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026ce:	e8 2f f3 ff ff       	call   c0001a02 <ld_word>
c00026d3:	66 09 c7             	or     di,ax
c00026d6:	0f 85 7e fe ff ff    	jne    c000255a <mount_volume+0xc8>
c00026dc:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026e2:	c1 e6 02             	shl    esi,0x2
c00026e5:	e8 25 f3 ff ff       	call   c0001a0f <ld_dword>
c00026ea:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c00026f1:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00026f4:	eb 30                	jmp    c0002726 <mount_volume+0x294>
c00026f6:	66 85 ff             	test   di,di
c00026f9:	0f 84 5b fe ff ff    	je     c000255a <mount_volume+0xc8>
c00026ff:	31 d2                	xor    edx,edx
c0002701:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002705:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002709:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000270d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002710:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002713:	83 fb 02             	cmp    ebx,0x2
c0002716:	75 04                	jne    c000271c <mount_volume+0x28a>
c0002718:	01 f6                	add    esi,esi
c000271a:	eb 0a                	jmp    c0002726 <mount_volume+0x294>
c000271c:	8d 04 76             	lea    eax,[esi+esi*2]
c000271f:	83 e6 01             	and    esi,0x1
c0002722:	d1 e8                	shr    eax,1
c0002724:	01 c6                	add    esi,eax
c0002726:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000272c:	c1 ee 09             	shr    esi,0x9
c000272f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002733:	0f 87 21 fe ff ff    	ja     c000255a <mount_volume+0xc8>
c0002739:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002740:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002747:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000274b:	83 fb 03             	cmp    ebx,0x3
c000274e:	75 7a                	jne    c00027ca <mount_volume+0x338>
c0002750:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002756:	e8 a7 f2 ff ff       	call   c0001a02 <ld_word>
c000275b:	66 48                	dec    ax
c000275d:	75 6b                	jne    c00027ca <mount_volume+0x338>
c000275f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002763:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002767:	83 c2 01             	add    edx,0x1
c000276a:	89 e8                	mov    eax,ebp
c000276c:	83 d1 00             	adc    ecx,0x0
c000276f:	e8 6c fa ff ff       	call   c00021e0 <move_window>
c0002774:	85 c0                	test   eax,eax
c0002776:	75 52                	jne    c00027ca <mount_volume+0x338>
c0002778:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000277c:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002782:	e8 7b f2 ff ff       	call   c0001a02 <ld_word>
c0002787:	66 3d 55 aa          	cmp    ax,0xaa55
c000278b:	75 3d                	jne    c00027ca <mount_volume+0x338>
c000278d:	8d 45 54             	lea    eax,[ebp+0x54]
c0002790:	e8 7a f2 ff ff       	call   c0001a0f <ld_dword>
c0002795:	3d 52 52 61 41       	cmp    eax,0x41615252
c000279a:	75 2e                	jne    c00027ca <mount_volume+0x338>
c000279c:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027a2:	e8 68 f2 ff ff       	call   c0001a0f <ld_dword>
c00027a7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027ac:	75 1c                	jne    c00027ca <mount_volume+0x338>
c00027ae:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027b4:	e8 56 f2 ff ff       	call   c0001a0f <ld_dword>
c00027b9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027bc:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027c2:	e8 48 f2 ff ff       	call   c0001a0f <ld_dword>
c00027c7:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027ca:	66 a1 00 bd 02 c0    	mov    ax,ds:0xc002bd00
c00027d0:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027d3:	40                   	inc    eax
c00027d4:	31 db                	xor    ebx,ebx
c00027d6:	66 a3 00 bd 02 c0    	mov    ds:0xc002bd00,ax
c00027dc:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027e0:	e9 0c 02 00 00       	jmp    c00029f1 <mount_volume+0x55f>
c00027e5:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027eb:	e8 12 f2 ff ff       	call   c0001a02 <ld_word>
c00027f0:	66 3d 00 01          	cmp    ax,0x100
c00027f4:	0f 85 60 fd ff ff    	jne    c000255a <mount_volume+0xc8>
c00027fa:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002801:	0f 85 53 fd ff ff    	jne    c000255a <mount_volume+0xc8>
c0002807:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000280d:	e8 15 f2 ff ff       	call   c0001a27 <ld_qword>
c0002812:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002816:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000281a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002820:	e8 ea f1 ff ff       	call   c0001a0f <ld_dword>
c0002825:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002828:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000282e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002831:	fe c8                	dec    al
c0002833:	0f 85 21 fd ff ff    	jne    c000255a <mount_volume+0xc8>
c0002839:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002840:	bb 01 00 00 00       	mov    ebx,0x1
c0002845:	d3 e3                	shl    ebx,cl
c0002847:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000284b:	66 85 db             	test   bx,bx
c000284e:	0f 84 06 fd ff ff    	je     c000255a <mount_volume+0xc8>
c0002854:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c000285a:	e8 b0 f1 ff ff       	call   c0001a0f <ld_dword>
c000285f:	89 c6                	mov    esi,eax
c0002861:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002866:	0f 87 ee fc ff ff    	ja     c000255a <mount_volume+0xc8>
c000286c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002870:	8d 40 02             	lea    eax,[eax+0x2]
c0002873:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002876:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000287d:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002880:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002886:	e8 84 f1 ff ff       	call   c0001a0f <ld_dword>
c000288b:	31 d2                	xor    edx,edx
c000288d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002891:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002895:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002899:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000289d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028a0:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028a3:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028a9:	e8 61 f1 ff ff       	call   c0001a0f <ld_dword>
c00028ae:	31 d2                	xor    edx,edx
c00028b0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028b8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028bc:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028bf:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028c2:	0f b7 c3             	movzx  eax,bx
c00028c5:	31 d2                	xor    edx,edx
c00028c7:	0f af f0             	imul   esi,eax
c00028ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028ce:	89 f0                	mov    eax,esi
c00028d0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028d4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028d8:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028dc:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028e0:	39 c1                	cmp    ecx,eax
c00028e2:	89 df                	mov    edi,ebx
c00028e4:	19 d7                	sbb    edi,edx
c00028e6:	0f 82 6e fc ff ff    	jb     c000255a <mount_volume+0xc8>
c00028ec:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c00028f2:	31 db                	xor    ebx,ebx
c00028f4:	e8 16 f1 ff ff       	call   c0001a0f <ld_dword>
c00028f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002900:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002903:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000290b:	85 db                	test   ebx,ebx
c000290d:	75 39                	jne    c0002948 <mount_volume+0x4b6>
c000290f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002913:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002917:	0f 86 3d fc ff ff    	jbe    c000255a <mount_volume+0xc8>
c000291d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002920:	31 ff                	xor    edi,edi
c0002922:	89 e8                	mov    eax,ebp
c0002924:	e8 72 f3 ff ff       	call   c0001c9b <clst2sect>
c0002929:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000292d:	01 c6                	add    esi,eax
c000292f:	89 e8                	mov    eax,ebp
c0002931:	11 d7                	adc    edi,edx
c0002933:	89 f2                	mov    edx,esi
c0002935:	89 f9                	mov    ecx,edi
c0002937:	e8 a4 f8 ff ff       	call   c00021e0 <move_window>
c000293c:	85 c0                	test   eax,eax
c000293e:	0f 85 07 fc ff ff    	jne    c000254b <mount_volume+0xb9>
c0002944:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002948:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000294d:	74 0b                	je     c000295a <mount_volume+0x4c8>
c000294f:	83 c3 20             	add    ebx,0x20
c0002952:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002958:	eb b1                	jmp    c000290b <mount_volume+0x479>
c000295a:	8d 75 54             	lea    esi,[ebp+0x54]
c000295d:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002961:	e8 a9 f0 ff ff       	call   c0001a0f <ld_dword>
c0002966:	89 c3                	mov    ebx,eax
c0002968:	83 f8 01             	cmp    eax,0x1
c000296b:	0f 86 e9 fb ff ff    	jbe    c000255a <mount_volume+0xc8>
c0002971:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002974:	0f 86 e0 fb ff ff    	jbe    c000255a <mount_volume+0xc8>
c000297a:	8d 53 fe             	lea    edx,[ebx-0x2]
c000297d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002981:	0f af c2             	imul   eax,edx
c0002984:	31 d2                	xor    edx,edx
c0002986:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002989:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000298c:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000298f:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002992:	31 c9                	xor    ecx,ecx
c0002994:	89 da                	mov    edx,ebx
c0002996:	89 e8                	mov    eax,ebp
c0002998:	c1 ea 07             	shr    edx,0x7
c000299b:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000299e:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029a1:	e8 3a f8 ff ff       	call   c00021e0 <move_window>
c00029a6:	85 c0                	test   eax,eax
c00029a8:	0f 85 9d fb ff ff    	jne    c000254b <mount_volume+0xb9>
c00029ae:	89 d8                	mov    eax,ebx
c00029b0:	83 e0 7f             	and    eax,0x7f
c00029b3:	8d 04 86             	lea    eax,[esi+eax*4]
c00029b6:	e8 54 f0 ff ff       	call   c0001a0f <ld_dword>
c00029bb:	83 f8 ff             	cmp    eax,0xffffffff
c00029be:	74 0a                	je     c00029ca <mount_volume+0x538>
c00029c0:	43                   	inc    ebx
c00029c1:	39 d8                	cmp    eax,ebx
c00029c3:	74 cd                	je     c0002992 <mount_volume+0x500>
c00029c5:	e9 90 fb ff ff       	jmp    c000255a <mount_volume+0xc8>
c00029ca:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029d1:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029d8:	bb 04 00 00 00       	mov    ebx,0x4
c00029dd:	e9 e8 fd ff ff       	jmp    c00027ca <mount_volume+0x338>
c00029e2:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029e7:	19 db                	sbb    ebx,ebx
c00029e9:	83 c3 02             	add    ebx,0x2
c00029ec:	e9 93 fc ff ff       	jmp    c0002684 <mount_volume+0x1f2>
c00029f1:	83 c4 3c             	add    esp,0x3c
c00029f4:	89 d8                	mov    eax,ebx
c00029f6:	5b                   	pop    ebx
c00029f7:	5e                   	pop    esi
c00029f8:	5f                   	pop    edi
c00029f9:	5d                   	pop    ebp
c00029fa:	c3                   	ret    

c00029fb <find_bitmap>:
c00029fb:	55                   	push   ebp
c00029fc:	57                   	push   edi
c00029fd:	89 c7                	mov    edi,eax
c00029ff:	56                   	push   esi
c0002a00:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a03:	53                   	push   ebx
c0002a04:	83 ec 1c             	sub    esp,0x1c
c0002a07:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a0e:	83 e8 02             	sub    eax,0x2
c0002a11:	39 f0                	cmp    eax,esi
c0002a13:	77 02                	ja     c0002a17 <find_bitmap+0x1c>
c0002a15:	31 f6                	xor    esi,esi
c0002a17:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a1b:	89 f3                	mov    ebx,esi
c0002a1d:	31 ed                	xor    ebp,ebp
c0002a1f:	31 c9                	xor    ecx,ecx
c0002a21:	89 da                	mov    edx,ebx
c0002a23:	89 f8                	mov    eax,edi
c0002a25:	c1 ea 0c             	shr    edx,0xc
c0002a28:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a2b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a2e:	e8 ad f7 ff ff       	call   c00021e0 <move_window>
c0002a33:	85 c0                	test   eax,eax
c0002a35:	75 68                	jne    c0002a9f <find_bitmap+0xa4>
c0002a37:	89 da                	mov    edx,ebx
c0002a39:	89 d9                	mov    ecx,ebx
c0002a3b:	c1 ea 03             	shr    edx,0x3
c0002a3e:	83 e1 07             	and    ecx,0x7
c0002a41:	b8 01 00 00 00       	mov    eax,0x1
c0002a46:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a4c:	d3 e0                	shl    eax,cl
c0002a4e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a51:	83 e9 02             	sub    ecx,0x2
c0002a54:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a58:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a5c:	43                   	inc    ebx
c0002a5d:	21 c1                	and    ecx,eax
c0002a5f:	d1 e0                	shl    eax,1
c0002a61:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a65:	77 09                	ja     c0002a70 <find_bitmap+0x75>
c0002a67:	31 db                	xor    ebx,ebx
c0002a69:	ba 00 02 00 00       	mov    edx,0x200
c0002a6e:	31 c0                	xor    eax,eax
c0002a70:	84 c9                	test   cl,cl
c0002a72:	75 10                	jne    c0002a84 <find_bitmap+0x89>
c0002a74:	45                   	inc    ebp
c0002a75:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a79:	75 0f                	jne    c0002a8a <find_bitmap+0x8f>
c0002a7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a7f:	83 c0 02             	add    eax,0x2
c0002a82:	eb 22                	jmp    c0002aa6 <find_bitmap+0xab>
c0002a84:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a88:	31 ed                	xor    ebp,ebp
c0002a8a:	39 de                	cmp    esi,ebx
c0002a8c:	74 16                	je     c0002aa4 <find_bitmap+0xa9>
c0002a8e:	84 c0                	test   al,al
c0002a90:	75 c6                	jne    c0002a58 <find_bitmap+0x5d>
c0002a92:	42                   	inc    edx
c0002a93:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a99:	77 84                	ja     c0002a1f <find_bitmap+0x24>
c0002a9b:	b0 01                	mov    al,0x1
c0002a9d:	eb b9                	jmp    c0002a58 <find_bitmap+0x5d>
c0002a9f:	83 c8 ff             	or     eax,0xffffffff
c0002aa2:	eb 02                	jmp    c0002aa6 <find_bitmap+0xab>
c0002aa4:	31 c0                	xor    eax,eax
c0002aa6:	83 c4 1c             	add    esp,0x1c
c0002aa9:	5b                   	pop    ebx
c0002aaa:	5e                   	pop    esi
c0002aab:	5f                   	pop    edi
c0002aac:	5d                   	pop    ebp
c0002aad:	c3                   	ret    

c0002aae <change_bitmap>:
c0002aae:	55                   	push   ebp
c0002aaf:	89 cd                	mov    ebp,ecx
c0002ab1:	57                   	push   edi
c0002ab2:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ab5:	56                   	push   esi
c0002ab6:	89 c7                	mov    edi,eax
c0002ab8:	53                   	push   ebx
c0002ab9:	89 c8                	mov    eax,ecx
c0002abb:	83 ec 1c             	sub    esp,0x1c
c0002abe:	31 d2                	xor    edx,edx
c0002ac0:	89 ce                	mov    esi,ecx
c0002ac2:	c1 e8 0c             	shr    eax,0xc
c0002ac5:	bb 01 00 00 00       	mov    ebx,0x1
c0002aca:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002acd:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002ad0:	c1 ee 03             	shr    esi,0x3
c0002ad3:	83 e1 07             	and    ecx,0x7
c0002ad6:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002adc:	d3 e3                	shl    ebx,cl
c0002ade:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002ae2:	89 c1                	mov    ecx,eax
c0002ae4:	89 d3                	mov    ebx,edx
c0002ae6:	83 c1 01             	add    ecx,0x1
c0002ae9:	83 d3 00             	adc    ebx,0x0
c0002aec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002af0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002af4:	89 d1                	mov    ecx,edx
c0002af6:	89 c2                	mov    edx,eax
c0002af8:	89 f8                	mov    eax,edi
c0002afa:	e8 e1 f6 ff ff       	call   c00021e0 <move_window>
c0002aff:	89 c1                	mov    ecx,eax
c0002b01:	85 c0                	test   eax,eax
c0002b03:	75 48                	jne    c0002b4d <change_bitmap+0x9f>
c0002b05:	31 d2                	xor    edx,edx
c0002b07:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b0b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b0f:	0f 95 c2             	setne  dl
c0002b12:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b16:	74 3c                	je     c0002b54 <change_bitmap+0xa6>
c0002b18:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b1c:	4d                   	dec    ebp
c0002b1d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b21:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b25:	74 32                	je     c0002b59 <change_bitmap+0xab>
c0002b27:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b2b:	75 d8                	jne    c0002b05 <change_bitmap+0x57>
c0002b2d:	8d 46 01             	lea    eax,[esi+0x1]
c0002b30:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b35:	89 c3                	mov    ebx,eax
c0002b37:	31 f6                	xor    esi,esi
c0002b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b41:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b47:	74 99                	je     c0002ae2 <change_bitmap+0x34>
c0002b49:	89 de                	mov    esi,ebx
c0002b4b:	eb b8                	jmp    c0002b05 <change_bitmap+0x57>
c0002b4d:	b9 01 00 00 00       	mov    ecx,0x1
c0002b52:	eb 05                	jmp    c0002b59 <change_bitmap+0xab>
c0002b54:	b9 02 00 00 00       	mov    ecx,0x2
c0002b59:	83 c4 1c             	add    esp,0x1c
c0002b5c:	89 c8                	mov    eax,ecx
c0002b5e:	5b                   	pop    ebx
c0002b5f:	5e                   	pop    esi
c0002b60:	5f                   	pop    edi
c0002b61:	5d                   	pop    ebp
c0002b62:	c3                   	ret    

c0002b63 <put_fat>:
c0002b63:	83 fa 01             	cmp    edx,0x1
c0002b66:	0f 86 7b 01 00 00    	jbe    c0002ce7 <put_fat+0x184>
c0002b6c:	55                   	push   ebp
c0002b6d:	57                   	push   edi
c0002b6e:	89 cf                	mov    edi,ecx
c0002b70:	56                   	push   esi
c0002b71:	b9 02 00 00 00       	mov    ecx,0x2
c0002b76:	53                   	push   ebx
c0002b77:	89 c6                	mov    esi,eax
c0002b79:	83 ec 1c             	sub    esp,0x1c
c0002b7c:	89 d3                	mov    ebx,edx
c0002b7e:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b81:	0f 86 68 01 00 00    	jbe    c0002cef <put_fat+0x18c>
c0002b87:	8a 00                	mov    al,BYTE PTR [eax]
c0002b89:	3c 02                	cmp    al,0x2
c0002b8b:	0f 84 c7 00 00 00    	je     c0002c58 <put_fat+0xf5>
c0002b91:	77 09                	ja     c0002b9c <put_fat+0x39>
c0002b93:	fe c8                	dec    al
c0002b95:	74 17                	je     c0002bae <put_fat+0x4b>
c0002b97:	e9 53 01 00 00       	jmp    c0002cef <put_fat+0x18c>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	3c 04                	cmp    al,0x4
c0002ba3:	0f 86 e1 00 00 00    	jbe    c0002c8a <put_fat+0x127>
c0002ba9:	e9 41 01 00 00       	jmp    c0002cef <put_fat+0x18c>
c0002bae:	89 d5                	mov    ebp,edx
c0002bb0:	31 c9                	xor    ecx,ecx
c0002bb2:	d1 ed                	shr    ebp,1
c0002bb4:	89 f0                	mov    eax,esi
c0002bb6:	01 d5                	add    ebp,edx
c0002bb8:	89 ea                	mov    edx,ebp
c0002bba:	c1 ea 09             	shr    edx,0x9
c0002bbd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bc0:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bc3:	e8 18 f6 ff ff       	call   c00021e0 <move_window>
c0002bc8:	89 c1                	mov    ecx,eax
c0002bca:	85 c0                	test   eax,eax
c0002bcc:	0f 85 1d 01 00 00    	jne    c0002cef <put_fat+0x18c>
c0002bd2:	8d 46 54             	lea    eax,[esi+0x54]
c0002bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0002bdc:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002be2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002be6:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bea:	89 f8                	mov    eax,edi
c0002bec:	83 e3 01             	and    ebx,0x1
c0002bef:	74 0d                	je     c0002bfe <put_fat+0x9b>
c0002bf1:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002bf4:	89 fa                	mov    edx,edi
c0002bf6:	83 e0 0f             	and    eax,0xf
c0002bf9:	c1 e2 04             	shl    edx,0x4
c0002bfc:	09 d0                	or     eax,edx
c0002bfe:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c05:	31 c9                	xor    ecx,ecx
c0002c07:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c0b:	c1 ea 09             	shr    edx,0x9
c0002c0e:	89 f0                	mov    eax,esi
c0002c10:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c13:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c16:	e8 c5 f5 ff ff       	call   c00021e0 <move_window>
c0002c1b:	89 c1                	mov    ecx,eax
c0002c1d:	85 c0                	test   eax,eax
c0002c1f:	0f 85 ca 00 00 00    	jne    c0002cef <put_fat+0x18c>
c0002c25:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c29:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c33:	85 db                	test   ebx,ebx
c0002c35:	74 07                	je     c0002c3e <put_fat+0xdb>
c0002c37:	c1 ef 04             	shr    edi,0x4
c0002c3a:	89 fa                	mov    edx,edi
c0002c3c:	eb 0e                	jmp    c0002c4c <put_fat+0xe9>
c0002c3e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c41:	c1 ef 08             	shr    edi,0x8
c0002c44:	83 e2 f0             	and    edx,0xfffffff0
c0002c47:	83 e7 0f             	and    edi,0xf
c0002c4a:	09 fa                	or     edx,edi
c0002c4c:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	e9 97 00 00 00       	jmp    c0002cef <put_fat+0x18c>
c0002c58:	31 c9                	xor    ecx,ecx
c0002c5a:	c1 ea 08             	shr    edx,0x8
c0002c5d:	89 f0                	mov    eax,esi
c0002c5f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c62:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c65:	e8 76 f5 ff ff       	call   c00021e0 <move_window>
c0002c6a:	89 c1                	mov    ecx,eax
c0002c6c:	85 c0                	test   eax,eax
c0002c6e:	75 7f                	jne    c0002cef <put_fat+0x18c>
c0002c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c74:	01 db                	add    ebx,ebx
c0002c76:	0f b7 d7             	movzx  edx,di
c0002c79:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c7f:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c83:	e8 ec ed ff ff       	call   c0001a74 <st_word>
c0002c88:	eb 53                	jmp    c0002cdd <put_fat+0x17a>
c0002c8a:	31 c9                	xor    ecx,ecx
c0002c8c:	c1 ea 07             	shr    edx,0x7
c0002c8f:	89 f0                	mov    eax,esi
c0002c91:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c94:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c97:	e8 44 f5 ff ff       	call   c00021e0 <move_window>
c0002c9c:	89 c1                	mov    ecx,eax
c0002c9e:	85 c0                	test   eax,eax
c0002ca0:	75 4d                	jne    c0002cef <put_fat+0x18c>
c0002ca2:	c1 e3 02             	shl    ebx,0x2
c0002ca5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cab:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cae:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cb2:	74 1c                	je     c0002cd0 <put_fat+0x16d>
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002cbe:	89 d8                	mov    eax,ebx
c0002cc0:	e8 4a ed ff ff       	call   c0001a0f <ld_dword>
c0002cc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cc9:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cce:	09 c7                	or     edi,eax
c0002cd0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cd4:	89 fa                	mov    edx,edi
c0002cd6:	89 d8                	mov    eax,ebx
c0002cd8:	e8 9b ed ff ff       	call   c0001a78 <st_dword>
c0002cdd:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ce1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ce5:	eb 08                	jmp    c0002cef <put_fat+0x18c>
c0002ce7:	b9 02 00 00 00       	mov    ecx,0x2
c0002cec:	89 c8                	mov    eax,ecx
c0002cee:	c3                   	ret    
c0002cef:	83 c4 1c             	add    esp,0x1c
c0002cf2:	89 c8                	mov    eax,ecx
c0002cf4:	5b                   	pop    ebx
c0002cf5:	5e                   	pop    esi
c0002cf6:	5f                   	pop    edi
c0002cf7:	5d                   	pop    ebp
c0002cf8:	c3                   	ret    

c0002cf9 <fill_last_frag>:
c0002cf9:	57                   	push   edi
c0002cfa:	89 cf                	mov    edi,ecx
c0002cfc:	56                   	push   esi
c0002cfd:	89 d6                	mov    esi,edx
c0002cff:	53                   	push   ebx
c0002d00:	89 c3                	mov    ebx,eax
c0002d02:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d05:	85 c0                	test   eax,eax
c0002d07:	74 21                	je     c0002d2a <fill_last_frag+0x31>
c0002d09:	89 f9                	mov    ecx,edi
c0002d0b:	83 f8 01             	cmp    eax,0x1
c0002d0e:	76 05                	jbe    c0002d15 <fill_last_frag+0x1c>
c0002d10:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d13:	29 c1                	sub    ecx,eax
c0002d15:	8d 56 01             	lea    edx,[esi+0x1]
c0002d18:	29 c2                	sub    edx,eax
c0002d1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d1c:	e8 42 fe ff ff       	call   c0002b63 <put_fat>
c0002d21:	85 c0                	test   eax,eax
c0002d23:	75 05                	jne    c0002d2a <fill_last_frag+0x31>
c0002d25:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d28:	eb d8                	jmp    c0002d02 <fill_last_frag+0x9>
c0002d2a:	5b                   	pop    ebx
c0002d2b:	5e                   	pop    esi
c0002d2c:	5f                   	pop    edi
c0002d2d:	c3                   	ret    

c0002d2e <fill_first_frag>:
c0002d2e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d32:	75 2d                	jne    c0002d61 <fill_first_frag+0x33>
c0002d34:	57                   	push   edi
c0002d35:	56                   	push   esi
c0002d36:	53                   	push   ebx
c0002d37:	89 c3                	mov    ebx,eax
c0002d39:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d3c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d3f:	01 d7                	add    edi,edx
c0002d41:	39 fa                	cmp    edx,edi
c0002d43:	74 14                	je     c0002d59 <fill_first_frag+0x2b>
c0002d45:	8d 72 01             	lea    esi,[edx+0x1]
c0002d48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d4a:	89 f1                	mov    ecx,esi
c0002d4c:	e8 12 fe ff ff       	call   c0002b63 <put_fat>
c0002d51:	89 f2                	mov    edx,esi
c0002d53:	85 c0                	test   eax,eax
c0002d55:	74 ea                	je     c0002d41 <fill_first_frag+0x13>
c0002d57:	eb 0b                	jmp    c0002d64 <fill_first_frag+0x36>
c0002d59:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d5d:	31 c0                	xor    eax,eax
c0002d5f:	eb 03                	jmp    c0002d64 <fill_first_frag+0x36>
c0002d61:	31 c0                	xor    eax,eax
c0002d63:	c3                   	ret    
c0002d64:	5b                   	pop    ebx
c0002d65:	5e                   	pop    esi
c0002d66:	5f                   	pop    edi
c0002d67:	c3                   	ret    

c0002d68 <get_fat>:
c0002d68:	83 fa 01             	cmp    edx,0x1
c0002d6b:	0f 86 db 01 00 00    	jbe    c0002f4c <get_fat+0x1e4>
c0002d71:	55                   	push   ebp
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	57                   	push   edi
c0002d78:	56                   	push   esi
c0002d79:	53                   	push   ebx
c0002d7a:	83 ec 1c             	sub    esp,0x1c
c0002d7d:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d7f:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d82:	0f 86 cc 01 00 00    	jbe    c0002f54 <get_fat+0x1ec>
c0002d88:	89 c3                	mov    ebx,eax
c0002d8a:	89 d6                	mov    esi,edx
c0002d8c:	8a 07                	mov    al,BYTE PTR [edi]
c0002d8e:	3c 02                	cmp    al,0x2
c0002d90:	0f 84 99 00 00 00    	je     c0002e2f <get_fat+0xc7>
c0002d96:	77 09                	ja     c0002da1 <get_fat+0x39>
c0002d98:	fe c8                	dec    al
c0002d9a:	74 1a                	je     c0002db6 <get_fat+0x4e>
c0002d9c:	e9 b3 01 00 00       	jmp    c0002f54 <get_fat+0x1ec>
c0002da1:	3c 03                	cmp    al,0x3
c0002da3:	0f 84 b5 00 00 00    	je     c0002e5e <get_fat+0xf6>
c0002da9:	3c 04                	cmp    al,0x4
c0002dab:	0f 84 e3 00 00 00    	je     c0002e94 <get_fat+0x12c>
c0002db1:	e9 9e 01 00 00       	jmp    c0002f54 <get_fat+0x1ec>
c0002db6:	89 d3                	mov    ebx,edx
c0002db8:	31 c9                	xor    ecx,ecx
c0002dba:	d1 eb                	shr    ebx,1
c0002dbc:	89 f8                	mov    eax,edi
c0002dbe:	01 d3                	add    ebx,edx
c0002dc0:	89 da                	mov    edx,ebx
c0002dc2:	c1 ea 09             	shr    edx,0x9
c0002dc5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dcb:	e8 10 f4 ff ff       	call   c00021e0 <move_window>
c0002dd0:	85 c0                	test   eax,eax
c0002dd2:	74 08                	je     c0002ddc <get_fat+0x74>
c0002dd4:	83 c9 ff             	or     ecx,0xffffffff
c0002dd7:	e9 78 01 00 00       	jmp    c0002f54 <get_fat+0x1ec>
c0002ddc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002ddf:	31 c9                	xor    ecx,ecx
c0002de1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002de7:	89 ea                	mov    edx,ebp
c0002de9:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002ded:	c1 ea 09             	shr    edx,0x9
c0002df0:	89 f8                	mov    eax,edi
c0002df2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df8:	e8 e3 f3 ff ff       	call   c00021e0 <move_window>
c0002dfd:	85 c0                	test   eax,eax
c0002dff:	75 d3                	jne    c0002dd4 <get_fat+0x6c>
c0002e01:	0f b6 c3             	movzx  eax,bl
c0002e04:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e0a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e0f:	c1 e3 08             	shl    ebx,0x8
c0002e12:	09 c3                	or     ebx,eax
c0002e14:	89 d9                	mov    ecx,ebx
c0002e16:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e1c:	83 e6 01             	and    esi,0x1
c0002e1f:	0f 84 2f 01 00 00    	je     c0002f54 <get_fat+0x1ec>
c0002e25:	89 d9                	mov    ecx,ebx
c0002e27:	c1 e9 04             	shr    ecx,0x4
c0002e2a:	e9 25 01 00 00       	jmp    c0002f54 <get_fat+0x1ec>
c0002e2f:	31 c9                	xor    ecx,ecx
c0002e31:	c1 ea 08             	shr    edx,0x8
c0002e34:	89 f8                	mov    eax,edi
c0002e36:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e39:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e3c:	e8 9f f3 ff ff       	call   c00021e0 <move_window>
c0002e41:	85 c0                	test   eax,eax
c0002e43:	75 8f                	jne    c0002dd4 <get_fat+0x6c>
c0002e45:	01 f6                	add    esi,esi
c0002e47:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e4d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e51:	e8 ac eb ff ff       	call   c0001a02 <ld_word>
c0002e56:	0f b7 c8             	movzx  ecx,ax
c0002e59:	e9 f6 00 00 00       	jmp    c0002f54 <get_fat+0x1ec>
c0002e5e:	31 c9                	xor    ecx,ecx
c0002e60:	c1 ea 07             	shr    edx,0x7
c0002e63:	89 f8                	mov    eax,edi
c0002e65:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e68:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e6b:	e8 70 f3 ff ff       	call   c00021e0 <move_window>
c0002e70:	85 c0                	test   eax,eax
c0002e72:	0f 85 5c ff ff ff    	jne    c0002dd4 <get_fat+0x6c>
c0002e78:	c1 e6 02             	shl    esi,0x2
c0002e7b:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e81:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e85:	e8 85 eb ff ff       	call   c0001a0f <ld_dword>
c0002e8a:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e8f:	e9 b4 00 00 00       	jmp    c0002f48 <get_fat+0x1e0>
c0002e94:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e97:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e9a:	89 d1                	mov    ecx,edx
c0002e9c:	09 c1                	or     ecx,eax
c0002e9e:	74 06                	je     c0002ea6 <get_fat+0x13e>
c0002ea0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ea4:	75 0f                	jne    c0002eb5 <get_fat+0x14d>
c0002ea6:	b9 01 00 00 00       	mov    ecx,0x1
c0002eab:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eaf:	0f 85 9f 00 00 00    	jne    c0002f54 <get_fat+0x1ec>
c0002eb5:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002eb9:	89 f5                	mov    ebp,esi
c0002ebb:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ec0:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ec3:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ec6:	80 f9 02             	cmp    cl,0x2
c0002ec9:	75 35                	jne    c0002f00 <get_fat+0x198>
c0002ecb:	83 c0 ff             	add    eax,0xffffffff
c0002ece:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ed3:	83 d2 ff             	adc    edx,0xffffffff
c0002ed6:	31 db                	xor    ebx,ebx
c0002ed8:	0f ac d0 09          	shrd   eax,edx,0x9
c0002edc:	53                   	push   ebx
c0002edd:	c1 ea 09             	shr    edx,0x9
c0002ee0:	51                   	push   ecx
c0002ee1:	52                   	push   edx
c0002ee2:	50                   	push   eax
c0002ee3:	e8 64 19 02 00       	call   c002484c <__udivdi3>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef0:	39 c5                	cmp    ebp,eax
c0002ef2:	77 60                	ja     c0002f54 <get_fat+0x1ec>
c0002ef4:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002ef9:	74 59                	je     c0002f54 <get_fat+0x1ec>
c0002efb:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002efe:	eb 54                	jmp    c0002f54 <get_fat+0x1ec>
c0002f00:	80 f9 03             	cmp    cl,0x3
c0002f03:	75 05                	jne    c0002f0a <get_fat+0x1a2>
c0002f05:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f08:	77 f1                	ja     c0002efb <get_fat+0x193>
c0002f0a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f0f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f13:	75 3f                	jne    c0002f54 <get_fat+0x1ec>
c0002f15:	31 c9                	xor    ecx,ecx
c0002f17:	89 f2                	mov    edx,esi
c0002f19:	89 f8                	mov    eax,edi
c0002f1b:	c1 ea 07             	shr    edx,0x7
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 b7 f2 ff ff       	call   c00021e0 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	0f 85 a3 fe ff ff    	jne    c0002dd4 <get_fat+0x6c>
c0002f31:	c1 e6 02             	shl    esi,0x2
c0002f34:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f3a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f3e:	e8 cc ea ff ff       	call   c0001a0f <ld_dword>
c0002f43:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f48:	89 c1                	mov    ecx,eax
c0002f4a:	eb 08                	jmp    c0002f54 <get_fat+0x1ec>
c0002f4c:	b9 01 00 00 00       	mov    ecx,0x1
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	c3                   	ret    
c0002f54:	83 c4 1c             	add    esp,0x1c
c0002f57:	89 c8                	mov    eax,ecx
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <dir_sdi>:
c0002f5e:	55                   	push   ebp
c0002f5f:	57                   	push   edi
c0002f60:	56                   	push   esi
c0002f61:	53                   	push   ebx
c0002f62:	89 c3                	mov    ebx,eax
c0002f64:	83 ec 1c             	sub    esp,0x1c
c0002f67:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f69:	31 c0                	xor    eax,eax
c0002f6b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f6e:	0f 94 c0             	sete   al
c0002f71:	48                   	dec    eax
c0002f72:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f77:	05 00 00 00 10       	add    eax,0x10000000
c0002f7c:	39 d0                	cmp    eax,edx
c0002f7e:	77 0a                	ja     c0002f8a <dir_sdi+0x2c>
c0002f80:	b8 02 00 00 00       	mov    eax,0x2
c0002f85:	e9 c4 00 00 00       	jmp    c000304e <dir_sdi+0xf0>
c0002f8a:	89 d6                	mov    esi,edx
c0002f8c:	f6 c2 1f             	test   dl,0x1f
c0002f8f:	75 ef                	jne    c0002f80 <dir_sdi+0x22>
c0002f91:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f94:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f97:	85 c9                	test   ecx,ecx
c0002f99:	75 2d                	jne    c0002fc8 <dir_sdi+0x6a>
c0002f9b:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f9e:	77 1b                	ja     c0002fbb <dir_sdi+0x5d>
c0002fa0:	89 f2                	mov    edx,esi
c0002fa2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fa6:	c1 ea 05             	shr    edx,0x5
c0002fa9:	39 c2                	cmp    edx,eax
c0002fab:	73 d3                	jae    c0002f80 <dir_sdi+0x22>
c0002fad:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fb0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fb3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fb6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fb9:	eb 4b                	jmp    c0003006 <dir_sdi+0xa8>
c0002fbb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbe:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fc2:	85 c0                	test   eax,eax
c0002fc4:	74 da                	je     c0002fa0 <dir_sdi+0x42>
c0002fc6:	89 c1                	mov    ecx,eax
c0002fc8:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fcc:	c1 e5 09             	shl    ebp,0x9
c0002fcf:	89 ca                	mov    edx,ecx
c0002fd1:	39 ee                	cmp    esi,ebp
c0002fd3:	72 1c                	jb     c0002ff1 <dir_sdi+0x93>
c0002fd5:	89 d8                	mov    eax,ebx
c0002fd7:	e8 8c fd ff ff       	call   c0002d68 <get_fat>
c0002fdc:	89 c1                	mov    ecx,eax
c0002fde:	83 f8 ff             	cmp    eax,0xffffffff
c0002fe1:	74 66                	je     c0003049 <dir_sdi+0xeb>
c0002fe3:	83 f8 01             	cmp    eax,0x1
c0002fe6:	76 98                	jbe    c0002f80 <dir_sdi+0x22>
c0002fe8:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002feb:	76 93                	jbe    c0002f80 <dir_sdi+0x22>
c0002fed:	29 ee                	sub    esi,ebp
c0002fef:	eb de                	jmp    c0002fcf <dir_sdi+0x71>
c0002ff1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ff5:	89 f8                	mov    eax,edi
c0002ff7:	e8 9f ec ff ff       	call   c0001c9b <clst2sect>
c0002ffc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003000:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003003:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003006:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003009:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000300c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000300f:	89 d1                	mov    ecx,edx
c0003011:	09 c1                	or     ecx,eax
c0003013:	0f 84 67 ff ff ff    	je     c0002f80 <dir_sdi+0x22>
c0003019:	89 f1                	mov    ecx,esi
c000301b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003023:	c1 e9 09             	shr    ecx,0x9
c0003026:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000302a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000302e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003032:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003035:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000303b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000303e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003042:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003045:	31 c0                	xor    eax,eax
c0003047:	eb 05                	jmp    c000304e <dir_sdi+0xf0>
c0003049:	b8 01 00 00 00       	mov    eax,0x1
c000304e:	83 c4 1c             	add    esp,0x1c
c0003051:	5b                   	pop    ebx
c0003052:	5e                   	pop    esi
c0003053:	5f                   	pop    edi
c0003054:	5d                   	pop    ebp
c0003055:	c3                   	ret    

c0003056 <create_chain>:
c0003056:	55                   	push   ebp
c0003057:	89 c5                	mov    ebp,eax
c0003059:	57                   	push   edi
c000305a:	56                   	push   esi
c000305b:	53                   	push   ebx
c000305c:	83 ec 1c             	sub    esp,0x1c
c000305f:	85 d2                	test   edx,edx
c0003061:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003065:	8b 30                	mov    esi,DWORD PTR [eax]
c0003067:	75 0e                	jne    c0003077 <create_chain+0x21>
c0003069:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000306c:	85 ff                	test   edi,edi
c000306e:	74 39                	je     c00030a9 <create_chain+0x53>
c0003070:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003073:	77 39                	ja     c00030ae <create_chain+0x58>
c0003075:	eb 32                	jmp    c00030a9 <create_chain+0x53>
c0003077:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000307b:	e8 e8 fc ff ff       	call   c0002d68 <get_fat>
c0003080:	89 c3                	mov    ebx,eax
c0003082:	83 f8 01             	cmp    eax,0x1
c0003085:	77 0a                	ja     c0003091 <create_chain+0x3b>
c0003087:	bb 01 00 00 00       	mov    ebx,0x1
c000308c:	e9 ba 01 00 00       	jmp    c000324b <create_chain+0x1f5>
c0003091:	83 f8 ff             	cmp    eax,0xffffffff
c0003094:	0f 84 62 01 00 00    	je     c00031fc <create_chain+0x1a6>
c000309a:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000309d:	0f 87 a8 01 00 00    	ja     c000324b <create_chain+0x1f5>
c00030a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030a7:	eb 05                	jmp    c00030ae <create_chain+0x58>
c00030a9:	bf 01 00 00 00       	mov    edi,0x1
c00030ae:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030b2:	75 07                	jne    c00030bb <create_chain+0x65>
c00030b4:	31 db                	xor    ebx,ebx
c00030b6:	e9 90 01 00 00       	jmp    c000324b <create_chain+0x1f5>
c00030bb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030be:	75 74                	jne    c0003134 <create_chain+0xde>
c00030c0:	b9 01 00 00 00       	mov    ecx,0x1
c00030c5:	89 fa                	mov    edx,edi
c00030c7:	89 f0                	mov    eax,esi
c00030c9:	e8 2d f9 ff ff       	call   c00029fb <find_bitmap>
c00030ce:	89 c3                	mov    ebx,eax
c00030d0:	8d 40 ff             	lea    eax,[eax-0x1]
c00030d3:	83 f8 fd             	cmp    eax,0xfffffffd
c00030d6:	0f 87 6f 01 00 00    	ja     c000324b <create_chain+0x1f5>
c00030dc:	83 ec 0c             	sub    esp,0xc
c00030df:	b9 01 00 00 00       	mov    ecx,0x1
c00030e4:	6a 01                	push   0x1
c00030e6:	89 da                	mov    edx,ebx
c00030e8:	89 f0                	mov    eax,esi
c00030ea:	e8 bf f9 ff ff       	call   c0002aae <change_bitmap>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	83 f8 02             	cmp    eax,0x2
c00030f5:	74 90                	je     c0003087 <create_chain+0x31>
c00030f7:	83 f8 01             	cmp    eax,0x1
c00030fa:	0f 84 fc 00 00 00    	je     c00031fc <create_chain+0x1a6>
c0003100:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003105:	75 09                	jne    c0003110 <create_chain+0xba>
c0003107:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000310b:	e9 0c 01 00 00       	jmp    c000321c <create_chain+0x1c6>
c0003110:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003114:	0f 85 e7 00 00 00    	jne    c0003201 <create_chain+0x1ab>
c000311a:	8d 57 01             	lea    edx,[edi+0x1]
c000311d:	39 da                	cmp    edx,ebx
c000311f:	0f 84 f7 00 00 00    	je     c000321c <create_chain+0x1c6>
c0003125:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003128:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000312c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000312f:	e9 cd 00 00 00       	jmp    c0003201 <create_chain+0x1ab>
c0003134:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003138:	75 41                	jne    c000317b <create_chain+0x125>
c000313a:	8d 5f 01             	lea    ebx,[edi+0x1]
c000313d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003140:	77 05                	ja     c0003147 <create_chain+0xf1>
c0003142:	bb 02 00 00 00       	mov    ebx,0x2
c0003147:	89 da                	mov    edx,ebx
c0003149:	89 e8                	mov    eax,ebp
c000314b:	e8 18 fc ff ff       	call   c0002d68 <get_fat>
c0003150:	83 f8 01             	cmp    eax,0x1
c0003153:	0f 84 2e ff ff ff    	je     c0003087 <create_chain+0x31>
c0003159:	83 f8 ff             	cmp    eax,0xffffffff
c000315c:	0f 84 9a 00 00 00    	je     c00031fc <create_chain+0x1a6>
c0003162:	85 c0                	test   eax,eax
c0003164:	74 11                	je     c0003177 <create_chain+0x121>
c0003166:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003169:	83 f8 01             	cmp    eax,0x1
c000316c:	76 0d                	jbe    c000317b <create_chain+0x125>
c000316e:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003171:	76 08                	jbe    c000317b <create_chain+0x125>
c0003173:	89 c7                	mov    edi,eax
c0003175:	eb 04                	jmp    c000317b <create_chain+0x125>
c0003177:	85 db                	test   ebx,ebx
c0003179:	75 38                	jne    c00031b3 <create_chain+0x15d>
c000317b:	89 fb                	mov    ebx,edi
c000317d:	43                   	inc    ebx
c000317e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003181:	77 0e                	ja     c0003191 <create_chain+0x13b>
c0003183:	83 ff 01             	cmp    edi,0x1
c0003186:	0f 86 28 ff ff ff    	jbe    c00030b4 <create_chain+0x5e>
c000318c:	bb 02 00 00 00       	mov    ebx,0x2
c0003191:	89 da                	mov    edx,ebx
c0003193:	89 e8                	mov    eax,ebp
c0003195:	e8 ce fb ff ff       	call   c0002d68 <get_fat>
c000319a:	85 c0                	test   eax,eax
c000319c:	74 15                	je     c00031b3 <create_chain+0x15d>
c000319e:	83 f8 01             	cmp    eax,0x1
c00031a1:	0f 84 e0 fe ff ff    	je     c0003087 <create_chain+0x31>
c00031a7:	40                   	inc    eax
c00031a8:	74 52                	je     c00031fc <create_chain+0x1a6>
c00031aa:	39 fb                	cmp    ebx,edi
c00031ac:	75 cf                	jne    c000317d <create_chain+0x127>
c00031ae:	e9 01 ff ff ff       	jmp    c00030b4 <create_chain+0x5e>
c00031b3:	83 c9 ff             	or     ecx,0xffffffff
c00031b6:	89 da                	mov    edx,ebx
c00031b8:	89 f0                	mov    eax,esi
c00031ba:	e8 a4 f9 ff ff       	call   c0002b63 <put_fat>
c00031bf:	85 c0                	test   eax,eax
c00031c1:	75 32                	jne    c00031f5 <create_chain+0x19f>
c00031c3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031c8:	74 11                	je     c00031db <create_chain+0x185>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d0:	89 f0                	mov    eax,esi
c00031d2:	e8 8c f9 ff ff       	call   c0002b63 <put_fat>
c00031d7:	85 c0                	test   eax,eax
c00031d9:	75 1a                	jne    c00031f5 <create_chain+0x19f>
c00031db:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031de:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031e1:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031e4:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031e7:	39 d0                	cmp    eax,edx
c00031e9:	77 04                	ja     c00031ef <create_chain+0x199>
c00031eb:	48                   	dec    eax
c00031ec:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031ef:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00031f3:	eb 56                	jmp    c000324b <create_chain+0x1f5>
c00031f5:	48                   	dec    eax
c00031f6:	0f 85 8b fe ff ff    	jne    c0003087 <create_chain+0x31>
c00031fc:	83 cb ff             	or     ebx,0xffffffff
c00031ff:	eb 4a                	jmp    c000324b <create_chain+0x1f5>
c0003201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003205:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003208:	41                   	inc    ecx
c0003209:	39 d9                	cmp    ecx,ebx
c000320b:	75 19                	jne    c0003226 <create_chain+0x1d0>
c000320d:	b9 02 00 00 00       	mov    ecx,0x2
c0003212:	85 d2                	test   edx,edx
c0003214:	74 03                	je     c0003219 <create_chain+0x1c3>
c0003216:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003219:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000321c:	85 c0                	test   eax,eax
c000321e:	0f 85 63 fe ff ff    	jne    c0003087 <create_chain+0x31>
c0003224:	eb b5                	jmp    c00031db <create_chain+0x185>
c0003226:	85 d2                	test   edx,edx
c0003228:	75 07                	jne    c0003231 <create_chain+0x1db>
c000322a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003231:	89 d9                	mov    ecx,ebx
c0003233:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003237:	89 e8                	mov    eax,ebp
c0003239:	e8 bb fa ff ff       	call   c0002cf9 <fill_last_frag>
c000323e:	85 c0                	test   eax,eax
c0003240:	75 b3                	jne    c00031f5 <create_chain+0x19f>
c0003242:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003249:	eb 90                	jmp    c00031db <create_chain+0x185>
c000324b:	83 c4 1c             	add    esp,0x1c
c000324e:	89 d8                	mov    eax,ebx
c0003250:	5b                   	pop    ebx
c0003251:	5e                   	pop    esi
c0003252:	5f                   	pop    edi
c0003253:	5d                   	pop    ebp
c0003254:	c3                   	ret    

c0003255 <remove_chain>:
c0003255:	55                   	push   ebp
c0003256:	57                   	push   edi
c0003257:	56                   	push   esi
c0003258:	53                   	push   ebx
c0003259:	83 ec 1c             	sub    esp,0x1c
c000325c:	83 fa 01             	cmp    edx,0x1
c000325f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003263:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003265:	77 0a                	ja     c0003271 <remove_chain+0x1c>
c0003267:	b8 02 00 00 00       	mov    eax,0x2
c000326c:	e9 24 01 00 00       	jmp    c0003395 <remove_chain+0x140>
c0003271:	89 d6                	mov    esi,edx
c0003273:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003276:	76 ef                	jbe    c0003267 <remove_chain+0x12>
c0003278:	89 c7                	mov    edi,eax
c000327a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000327f:	75 06                	jne    c0003287 <remove_chain+0x32>
c0003281:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003285:	eb 54                	jmp    c00032db <remove_chain+0x86>
c0003287:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000328a:	75 06                	jne    c0003292 <remove_chain+0x3d>
c000328c:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003290:	74 ef                	je     c0003281 <remove_chain+0x2c>
c0003292:	83 c9 ff             	or     ecx,0xffffffff
c0003295:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003299:	89 d8                	mov    eax,ebx
c000329b:	e8 c3 f8 ff ff       	call   c0002b63 <put_fat>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 dd                	je     c0003281 <remove_chain+0x2c>
c00032a4:	e9 ec 00 00 00       	jmp    c0003395 <remove_chain+0x140>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	74 b9                	je     c0003267 <remove_chain+0x12>
c00032ae:	83 f8 ff             	cmp    eax,0xffffffff
c00032b1:	74 6d                	je     c0003320 <remove_chain+0xcb>
c00032b3:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032b6:	75 6f                	jne    c0003327 <remove_chain+0xd2>
c00032b8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032bb:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032be:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032c1:	39 d0                	cmp    eax,edx
c00032c3:	73 08                	jae    c00032cd <remove_chain+0x78>
c00032c5:	40                   	inc    eax
c00032c6:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032ca:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032cd:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032d0:	39 e9                	cmp    ecx,ebp
c00032d2:	75 64                	jne    c0003338 <remove_chain+0xe3>
c00032d4:	89 ee                	mov    esi,ebp
c00032d6:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032d9:	76 0f                	jbe    c00032ea <remove_chain+0x95>
c00032db:	89 f2                	mov    edx,esi
c00032dd:	89 f8                	mov    eax,edi
c00032df:	e8 84 fa ff ff       	call   c0002d68 <get_fat>
c00032e4:	89 c5                	mov    ebp,eax
c00032e6:	85 c0                	test   eax,eax
c00032e8:	75 bf                	jne    c00032a9 <remove_chain+0x54>
c00032ea:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032ed:	0f 85 a0 00 00 00    	jne    c0003393 <remove_chain+0x13e>
c00032f3:	eb 6c                	jmp    c0003361 <remove_chain+0x10c>
c00032f5:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00032f8:	84 c0                	test   al,al
c00032fa:	75 7d                	jne    c0003379 <remove_chain+0x124>
c00032fc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00032ff:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003303:	0f 84 86 00 00 00    	je     c000338f <remove_chain+0x13a>
c0003309:	89 da                	mov    edx,ebx
c000330b:	89 f8                	mov    eax,edi
c000330d:	e8 56 fa ff ff       	call   c0002d68 <get_fat>
c0003312:	83 f8 01             	cmp    eax,0x1
c0003315:	0f 86 4c ff ff ff    	jbe    c0003267 <remove_chain+0x12>
c000331b:	83 f8 ff             	cmp    eax,0xffffffff
c000331e:	75 4e                	jne    c000336e <remove_chain+0x119>
c0003320:	b8 01 00 00 00       	mov    eax,0x1
c0003325:	eb 6e                	jmp    c0003395 <remove_chain+0x140>
c0003327:	31 c9                	xor    ecx,ecx
c0003329:	89 f2                	mov    edx,esi
c000332b:	89 d8                	mov    eax,ebx
c000332d:	e8 31 f8 ff ff       	call   c0002b63 <put_fat>
c0003332:	85 c0                	test   eax,eax
c0003334:	74 82                	je     c00032b8 <remove_chain+0x63>
c0003336:	eb 5d                	jmp    c0003395 <remove_chain+0x140>
c0003338:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333b:	75 1b                	jne    c0003358 <remove_chain+0x103>
c000333d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003341:	89 d8                	mov    eax,ebx
c0003343:	83 ec 0c             	sub    esp,0xc
c0003346:	6a 00                	push   0x0
c0003348:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000334c:	e8 5d f7 ff ff       	call   c0002aae <change_bitmap>
c0003351:	83 c4 10             	add    esp,0x10
c0003354:	85 c0                	test   eax,eax
c0003356:	75 3d                	jne    c0003395 <remove_chain+0x140>
c0003358:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000335c:	e9 73 ff ff ff       	jmp    c00032d4 <remove_chain+0x7f>
c0003361:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003366:	75 8d                	jne    c00032f5 <remove_chain+0xa0>
c0003368:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000336c:	eb 25                	jmp    c0003393 <remove_chain+0x13e>
c000336e:	8d 53 01             	lea    edx,[ebx+0x1]
c0003371:	89 c3                	mov    ebx,eax
c0003373:	39 c2                	cmp    edx,eax
c0003375:	74 88                	je     c00032ff <remove_chain+0xaa>
c0003377:	eb 1a                	jmp    c0003393 <remove_chain+0x13e>
c0003379:	3c 03                	cmp    al,0x3
c000337b:	75 16                	jne    c0003393 <remove_chain+0x13e>
c000337d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003380:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003384:	77 0d                	ja     c0003393 <remove_chain+0x13e>
c0003386:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003389:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000338d:	72 04                	jb     c0003393 <remove_chain+0x13e>
c000338f:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003393:	31 c0                	xor    eax,eax
c0003395:	83 c4 1c             	add    esp,0x1c
c0003398:	5b                   	pop    ebx
c0003399:	5e                   	pop    esi
c000339a:	5f                   	pop    edi
c000339b:	5d                   	pop    ebp
c000339c:	c3                   	ret    

c000339d <dir_clear>:
c000339d:	55                   	push   ebp
c000339e:	57                   	push   edi
c000339f:	56                   	push   esi
c00033a0:	89 c6                	mov    esi,eax
c00033a2:	53                   	push   ebx
c00033a3:	83 ec 1c             	sub    esp,0x1c
c00033a6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033aa:	e8 9d ed ff ff       	call   c000214c <sync_window>
c00033af:	85 c0                	test   eax,eax
c00033b1:	0f 85 de 00 00 00    	jne    c0003495 <dir_clear+0xf8>
c00033b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033bb:	89 f0                	mov    eax,esi
c00033bd:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033c0:	e8 d6 e8 ff ff       	call   c0001c9b <clst2sect>
c00033c5:	b9 00 02 00 00       	mov    ecx,0x200
c00033ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033d2:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033d5:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033d8:	89 e8                	mov    eax,ebp
c00033da:	31 d2                	xor    edx,edx
c00033dc:	e8 b5 e6 ff ff       	call   c0001a96 <mem_set>
c00033e1:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033e5:	c1 e3 09             	shl    ebx,0x9
c00033e8:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033ee:	76 1f                	jbe    c000340f <dir_clear+0x72>
c00033f0:	bb 00 80 00 00       	mov    ebx,0x8000
c00033f5:	eb 18                	jmp    c000340f <dir_clear+0x72>
c00033f7:	83 ec 0c             	sub    esp,0xc
c00033fa:	53                   	push   ebx
c00033fb:	e8 35 4e 00 00       	call   c0008235 <ff_memalloc>
c0003400:	83 c4 10             	add    esp,0x10
c0003403:	89 c7                	mov    edi,eax
c0003405:	85 c0                	test   eax,eax
c0003407:	0f 85 8f 00 00 00    	jne    c000349c <dir_clear+0xff>
c000340d:	d1 eb                	shr    ebx,1
c000340f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003415:	77 e0                	ja     c00033f7 <dir_clear+0x5a>
c0003417:	31 db                	xor    ebx,ebx
c0003419:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000341d:	39 d8                	cmp    eax,ebx
c000341f:	76 66                	jbe    c0003487 <dir_clear+0xea>
c0003421:	83 ec 0c             	sub    esp,0xc
c0003424:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003428:	6a 01                	push   0x1
c000342a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003432:	55                   	push   ebp
c0003433:	50                   	push   eax
c0003434:	e8 94 e5 ff ff       	call   c00019cd <disk_write>
c0003439:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000343e:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003443:	83 c4 20             	add    esp,0x20
c0003446:	85 c0                	test   eax,eax
c0003448:	75 3d                	jne    c0003487 <dir_clear+0xea>
c000344a:	43                   	inc    ebx
c000344b:	eb cc                	jmp    c0003419 <dir_clear+0x7c>
c000344d:	83 ec 0c             	sub    esp,0xc
c0003450:	31 d2                	xor    edx,edx
c0003452:	55                   	push   ebp
c0003453:	89 d8                	mov    eax,ebx
c0003455:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003459:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000345d:	52                   	push   edx
c000345e:	50                   	push   eax
c000345f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003463:	57                   	push   edi
c0003464:	50                   	push   eax
c0003465:	e8 63 e5 ff ff       	call   c00019cd <disk_write>
c000346a:	83 c4 20             	add    esp,0x20
c000346d:	85 c0                	test   eax,eax
c000346f:	75 0a                	jne    c000347b <dir_clear+0xde>
c0003471:	01 eb                	add    ebx,ebp
c0003473:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003477:	39 d8                	cmp    eax,ebx
c0003479:	77 d2                	ja     c000344d <dir_clear+0xb0>
c000347b:	83 ec 0c             	sub    esp,0xc
c000347e:	57                   	push   edi
c000347f:	e8 c7 4d 00 00       	call   c000824b <ff_memfree>
c0003484:	83 c4 10             	add    esp,0x10
c0003487:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000348b:	39 d8                	cmp    eax,ebx
c000348d:	0f 95 c0             	setne  al
c0003490:	0f b6 c0             	movzx  eax,al
c0003493:	eb 19                	jmp    c00034ae <dir_clear+0x111>
c0003495:	b8 01 00 00 00       	mov    eax,0x1
c000349a:	eb 12                	jmp    c00034ae <dir_clear+0x111>
c000349c:	89 d9                	mov    ecx,ebx
c000349e:	31 d2                	xor    edx,edx
c00034a0:	c1 eb 09             	shr    ebx,0x9
c00034a3:	e8 ee e5 ff ff       	call   c0001a96 <mem_set>
c00034a8:	89 dd                	mov    ebp,ebx
c00034aa:	31 db                	xor    ebx,ebx
c00034ac:	eb c5                	jmp    c0003473 <dir_clear+0xd6>
c00034ae:	83 c4 1c             	add    esp,0x1c
c00034b1:	5b                   	pop    ebx
c00034b2:	5e                   	pop    esi
c00034b3:	5f                   	pop    edi
c00034b4:	5d                   	pop    ebp
c00034b5:	c3                   	ret    

c00034b6 <dir_next>:
c00034b6:	55                   	push   ebp
c00034b7:	57                   	push   edi
c00034b8:	56                   	push   esi
c00034b9:	53                   	push   ebx
c00034ba:	89 c3                	mov    ebx,eax
c00034bc:	83 ec 1c             	sub    esp,0x1c
c00034bf:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034c5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034c8:	8d 78 20             	lea    edi,[eax+0x20]
c00034cb:	31 c0                	xor    eax,eax
c00034cd:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034d1:	0f 94 c0             	sete   al
c00034d4:	48                   	dec    eax
c00034d5:	25 00 00 20 f0       	and    eax,0xf0200000
c00034da:	05 00 00 00 10       	add    eax,0x10000000
c00034df:	39 f8                	cmp    eax,edi
c00034e1:	77 0e                	ja     c00034f1 <dir_next+0x3b>
c00034e3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ea:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034f1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00034f4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00034f7:	b8 04 00 00 00       	mov    eax,0x4
c00034fc:	89 ce                	mov    esi,ecx
c00034fe:	09 d6                	or     esi,edx
c0003500:	0f 84 da 00 00 00    	je     c00035e0 <dir_next+0x12a>
c0003506:	89 f8                	mov    eax,edi
c0003508:	25 ff 01 00 00       	and    eax,0x1ff
c000350d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003511:	0f 85 b9 00 00 00    	jne    c00035d0 <dir_next+0x11a>
c0003517:	83 c2 01             	add    edx,0x1
c000351a:	83 d1 00             	adc    ecx,0x0
c000351d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003520:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003523:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003526:	85 d2                	test   edx,edx
c0003528:	75 29                	jne    c0003553 <dir_next+0x9d>
c000352a:	89 fa                	mov    edx,edi
c000352c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003530:	c1 ea 05             	shr    edx,0x5
c0003533:	39 c2                	cmp    edx,eax
c0003535:	0f 82 95 00 00 00    	jb     c00035d0 <dir_next+0x11a>
c000353b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003542:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003549:	b8 04 00 00 00       	mov    eax,0x4
c000354e:	e9 8d 00 00 00       	jmp    c00035e0 <dir_next+0x12a>
c0003553:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003557:	89 f9                	mov    ecx,edi
c0003559:	48                   	dec    eax
c000355a:	c1 e9 09             	shr    ecx,0x9
c000355d:	85 c8                	test   eax,ecx
c000355f:	75 6f                	jne    c00035d0 <dir_next+0x11a>
c0003561:	89 d8                	mov    eax,ebx
c0003563:	e8 00 f8 ff ff       	call   c0002d68 <get_fat>
c0003568:	89 c6                	mov    esi,eax
c000356a:	83 f8 01             	cmp    eax,0x1
c000356d:	77 07                	ja     c0003576 <dir_next+0xc0>
c000356f:	b8 02 00 00 00       	mov    eax,0x2
c0003574:	eb 6a                	jmp    c00035e0 <dir_next+0x12a>
c0003576:	83 f8 ff             	cmp    eax,0xffffffff
c0003579:	75 07                	jne    c0003582 <dir_next+0xcc>
c000357b:	b8 01 00 00 00       	mov    eax,0x1
c0003580:	eb 5e                	jmp    c00035e0 <dir_next+0x12a>
c0003582:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003585:	77 37                	ja     c00035be <dir_next+0x108>
c0003587:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000358c:	74 ad                	je     c000353b <dir_next+0x85>
c000358e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003591:	89 d8                	mov    eax,ebx
c0003593:	e8 be fa ff ff       	call   c0003056 <create_chain>
c0003598:	89 c6                	mov    esi,eax
c000359a:	b8 07 00 00 00       	mov    eax,0x7
c000359f:	85 f6                	test   esi,esi
c00035a1:	74 3d                	je     c00035e0 <dir_next+0x12a>
c00035a3:	83 fe 01             	cmp    esi,0x1
c00035a6:	74 c7                	je     c000356f <dir_next+0xb9>
c00035a8:	83 fe ff             	cmp    esi,0xffffffff
c00035ab:	74 ce                	je     c000357b <dir_next+0xc5>
c00035ad:	89 f2                	mov    edx,esi
c00035af:	89 e8                	mov    eax,ebp
c00035b1:	e8 e7 fd ff ff       	call   c000339d <dir_clear>
c00035b6:	85 c0                	test   eax,eax
c00035b8:	75 c1                	jne    c000357b <dir_next+0xc5>
c00035ba:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035be:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035c1:	89 f2                	mov    edx,esi
c00035c3:	89 e8                	mov    eax,ebp
c00035c5:	e8 d1 e6 ff ff       	call   c0001c9b <clst2sect>
c00035ca:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035cd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035d4:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035d7:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035db:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035de:	31 c0                	xor    eax,eax
c00035e0:	83 c4 1c             	add    esp,0x1c
c00035e3:	5b                   	pop    ebx
c00035e4:	5e                   	pop    esi
c00035e5:	5f                   	pop    edi
c00035e6:	5d                   	pop    ebp
c00035e7:	c3                   	ret    

c00035e8 <load_xdir>:
c00035e8:	55                   	push   ebp
c00035e9:	57                   	push   edi
c00035ea:	56                   	push   esi
c00035eb:	89 c6                	mov    esi,eax
c00035ed:	53                   	push   ebx
c00035ee:	83 ec 1c             	sub    esp,0x1c
c00035f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00035f3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035f6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035fc:	e8 df eb ff ff       	call   c00021e0 <move_window>
c0003601:	89 c3                	mov    ebx,eax
c0003603:	85 c0                	test   eax,eax
c0003605:	0f 85 0c 01 00 00    	jne    c0003717 <load_xdir+0x12f>
c000360b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000360e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003611:	0f 85 fb 00 00 00    	jne    c0003712 <load_xdir+0x12a>
c0003617:	89 f8                	mov    eax,edi
c0003619:	b9 20 00 00 00       	mov    ecx,0x20
c000361e:	e8 5e e4 ff ff       	call   c0001a81 <mem_cpy>
c0003623:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003627:	40                   	inc    eax
c0003628:	c1 e0 05             	shl    eax,0x5
c000362b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000362f:	83 e8 60             	sub    eax,0x60
c0003632:	3d 00 02 00 00       	cmp    eax,0x200
c0003637:	0f 87 d5 00 00 00    	ja     c0003712 <load_xdir+0x12a>
c000363d:	31 d2                	xor    edx,edx
c000363f:	89 f0                	mov    eax,esi
c0003641:	e8 70 fe ff ff       	call   c00034b6 <dir_next>
c0003646:	89 c3                	mov    ebx,eax
c0003648:	83 f8 04             	cmp    eax,0x4
c000364b:	0f 84 c1 00 00 00    	je     c0003712 <load_xdir+0x12a>
c0003651:	85 c0                	test   eax,eax
c0003653:	0f 85 be 00 00 00    	jne    c0003717 <load_xdir+0x12f>
c0003659:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000365c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000365f:	8b 06                	mov    eax,DWORD PTR [esi]
c0003661:	e8 7a eb ff ff       	call   c00021e0 <move_window>
c0003666:	89 c3                	mov    ebx,eax
c0003668:	85 c0                	test   eax,eax
c000366a:	0f 85 a7 00 00 00    	jne    c0003717 <load_xdir+0x12f>
c0003670:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003673:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003676:	0f 85 96 00 00 00    	jne    c0003712 <load_xdir+0x12a>
c000367c:	8d 47 20             	lea    eax,[edi+0x20]
c000367f:	b9 20 00 00 00       	mov    ecx,0x20
c0003684:	e8 f8 e3 ff ff       	call   c0001a81 <mem_cpy>
c0003689:	31 d2                	xor    edx,edx
c000368b:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000368f:	b9 0f 00 00 00       	mov    ecx,0xf
c0003694:	83 c0 2c             	add    eax,0x2c
c0003697:	f7 f1                	div    ecx
c0003699:	c1 e0 05             	shl    eax,0x5
c000369c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036a0:	77 70                	ja     c0003712 <load_xdir+0x12a>
c00036a2:	bd 40 00 00 00       	mov    ebp,0x40
c00036a7:	31 d2                	xor    edx,edx
c00036a9:	89 f0                	mov    eax,esi
c00036ab:	e8 06 fe ff ff       	call   c00034b6 <dir_next>
c00036b0:	89 c3                	mov    ebx,eax
c00036b2:	83 f8 04             	cmp    eax,0x4
c00036b5:	74 5b                	je     c0003712 <load_xdir+0x12a>
c00036b7:	85 c0                	test   eax,eax
c00036b9:	75 5c                	jne    c0003717 <load_xdir+0x12f>
c00036bb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036be:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036c1:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c3:	e8 18 eb ff ff       	call   c00021e0 <move_window>
c00036c8:	89 c3                	mov    ebx,eax
c00036ca:	85 c0                	test   eax,eax
c00036cc:	75 49                	jne    c0003717 <load_xdir+0x12f>
c00036ce:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036d1:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036d4:	75 3c                	jne    c0003712 <load_xdir+0x12a>
c00036d6:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036dc:	77 0d                	ja     c00036eb <load_xdir+0x103>
c00036de:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036e1:	b9 20 00 00 00       	mov    ecx,0x20
c00036e6:	e8 96 e3 ff ff       	call   c0001a81 <mem_cpy>
c00036eb:	83 c5 20             	add    ebp,0x20
c00036ee:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00036f2:	77 b3                	ja     c00036a7 <load_xdir+0xbf>
c00036f4:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00036fa:	77 1b                	ja     c0003717 <load_xdir+0x12f>
c00036fc:	89 f8                	mov    eax,edi
c00036fe:	e8 cd e7 ff ff       	call   c0001ed0 <xdir_sum>
c0003703:	89 c1                	mov    ecx,eax
c0003705:	8d 47 02             	lea    eax,[edi+0x2]
c0003708:	e8 f5 e2 ff ff       	call   c0001a02 <ld_word>
c000370d:	66 39 c1             	cmp    cx,ax
c0003710:	74 05                	je     c0003717 <load_xdir+0x12f>
c0003712:	bb 02 00 00 00       	mov    ebx,0x2
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 d8                	mov    eax,ebx
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <load_obj_xdir>:
c0003721:	53                   	push   ebx
c0003722:	89 c3                	mov    ebx,eax
c0003724:	83 ec 08             	sub    esp,0x8
c0003727:	8b 02                	mov    eax,DWORD PTR [edx]
c0003729:	89 03                	mov    DWORD PTR [ebx],eax
c000372b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000372e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003731:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003734:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003737:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000373a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003741:	30 c0                	xor    al,al
c0003743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000374a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000374d:	89 d8                	mov    eax,ebx
c000374f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003752:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003755:	e8 04 f8 ff ff       	call   c0002f5e <dir_sdi>
c000375a:	85 c0                	test   eax,eax
c000375c:	75 0b                	jne    c0003769 <load_obj_xdir+0x48>
c000375e:	89 d8                	mov    eax,ebx
c0003760:	83 c4 08             	add    esp,0x8
c0003763:	5b                   	pop    ebx
c0003764:	e9 7f fe ff ff       	jmp    c00035e8 <load_xdir>
c0003769:	83 c4 08             	add    esp,0x8
c000376c:	5b                   	pop    ebx
c000376d:	c3                   	ret    

c000376e <dir_read>:
c000376e:	55                   	push   ebp
c000376f:	bd 04 00 00 00       	mov    ebp,0x4
c0003774:	57                   	push   edi
c0003775:	56                   	push   esi
c0003776:	be ff ff ff ff       	mov    esi,0xffffffff
c000377b:	53                   	push   ebx
c000377c:	89 c3                	mov    ebx,eax
c000377e:	83 ec 1c             	sub    esp,0x1c
c0003781:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003785:	8b 38                	mov    edi,DWORD PTR [eax]
c0003787:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000378c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000378f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003792:	89 c8                	mov    eax,ecx
c0003794:	09 d0                	or     eax,edx
c0003796:	0f 84 25 01 00 00    	je     c00038c1 <dir_read+0x153>
c000379c:	89 f8                	mov    eax,edi
c000379e:	e8 3d ea ff ff       	call   c00021e0 <move_window>
c00037a3:	89 c5                	mov    ebp,eax
c00037a5:	85 c0                	test   eax,eax
c00037a7:	0f 85 23 01 00 00    	jne    c00038d0 <dir_read+0x162>
c00037ad:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037b0:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037b2:	84 c9                	test   cl,cl
c00037b4:	0f 84 11 01 00 00    	je     c00038cb <dir_read+0x15d>
c00037ba:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037bd:	75 48                	jne    c0003807 <dir_read+0x99>
c00037bf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037c4:	74 10                	je     c00037d6 <dir_read+0x68>
c00037c6:	80 f9 83             	cmp    cl,0x83
c00037c9:	0f 85 dd 00 00 00    	jne    c00038ac <dir_read+0x13e>
c00037cf:	31 ed                	xor    ebp,ebp
c00037d1:	e9 08 01 00 00       	jmp    c00038de <dir_read+0x170>
c00037d6:	80 f9 85             	cmp    cl,0x85
c00037d9:	0f 85 cd 00 00 00    	jne    c00038ac <dir_read+0x13e>
c00037df:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e5:	89 d8                	mov    eax,ebx
c00037e7:	e8 fc fd ff ff       	call   c00035e8 <load_xdir>
c00037ec:	89 c5                	mov    ebp,eax
c00037ee:	85 c0                	test   eax,eax
c00037f0:	0f 85 da 00 00 00    	jne    c00038d0 <dir_read+0x162>
c00037f6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00037f9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00037fc:	83 e0 3f             	and    eax,0x3f
c00037ff:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003802:	e9 d7 00 00 00       	jmp    c00038de <dir_read+0x170>
c0003807:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000380a:	83 e0 3f             	and    eax,0x3f
c000380d:	80 f9 2e             	cmp    cl,0x2e
c0003810:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003814:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003817:	0f 84 8a 00 00 00    	je     c00038a7 <dir_read+0x139>
c000381d:	80 f9 e5             	cmp    cl,0xe5
c0003820:	0f 84 81 00 00 00    	je     c00038a7 <dir_read+0x139>
c0003826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382a:	83 e0 1f             	and    eax,0x1f
c000382d:	83 f8 08             	cmp    eax,0x8
c0003830:	0f 94 c0             	sete   al
c0003833:	0f b6 c0             	movzx  eax,al
c0003836:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000383a:	75 6b                	jne    c00038a7 <dir_read+0x139>
c000383c:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003841:	75 44                	jne    c0003887 <dir_read+0x119>
c0003843:	f6 c1 40             	test   cl,0x40
c0003846:	74 12                	je     c000385a <dir_read+0xec>
c0003848:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000384b:	83 e1 bf             	and    ecx,0xffffffbf
c000384e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003852:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003855:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003858:	eb 06                	jmp    c0003860 <dir_read+0xf2>
c000385a:	89 f0                	mov    eax,esi
c000385c:	38 c8                	cmp    al,cl
c000385e:	75 47                	jne    c00038a7 <dir_read+0x139>
c0003860:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003864:	be ff ff ff ff       	mov    esi,0xffffffff
c0003869:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000386c:	75 3e                	jne    c00038ac <dir_read+0x13e>
c000386e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003872:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003875:	e8 8a e4 ff ff       	call   c0001d04 <pick_lfn>
c000387a:	85 c0                	test   eax,eax
c000387c:	74 2e                	je     c00038ac <dir_read+0x13e>
c000387e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003882:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003885:	eb 25                	jmp    c00038ac <dir_read+0x13e>
c0003887:	89 f0                	mov    eax,esi
c0003889:	84 c0                	test   al,al
c000388b:	75 11                	jne    c000389e <dir_read+0x130>
c000388d:	89 d0                	mov    eax,edx
c000388f:	e8 2a e6 ff ff       	call   c0001ebe <sum_sfn>
c0003894:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003898:	0f 84 31 ff ff ff    	je     c00037cf <dir_read+0x61>
c000389e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038a5:	eb 37                	jmp    c00038de <dir_read+0x170>
c00038a7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038ac:	31 d2                	xor    edx,edx
c00038ae:	89 d8                	mov    eax,ebx
c00038b0:	e8 01 fc ff ff       	call   c00034b6 <dir_next>
c00038b5:	89 c5                	mov    ebp,eax
c00038b7:	85 c0                	test   eax,eax
c00038b9:	0f 84 cd fe ff ff    	je     c000378c <dir_read+0x1e>
c00038bf:	eb 0f                	jmp    c00038d0 <dir_read+0x162>
c00038c1:	85 ed                	test   ebp,ebp
c00038c3:	0f 84 06 ff ff ff    	je     c00037cf <dir_read+0x61>
c00038c9:	eb 05                	jmp    c00038d0 <dir_read+0x162>
c00038cb:	bd 04 00 00 00       	mov    ebp,0x4
c00038d0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038d7:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038de:	83 c4 1c             	add    esp,0x1c
c00038e1:	89 e8                	mov    eax,ebp
c00038e3:	5b                   	pop    ebx
c00038e4:	5e                   	pop    esi
c00038e5:	5f                   	pop    edi
c00038e6:	5d                   	pop    ebp
c00038e7:	c3                   	ret    

c00038e8 <dir_alloc>:
c00038e8:	55                   	push   ebp
c00038e9:	89 d5                	mov    ebp,edx
c00038eb:	57                   	push   edi
c00038ec:	31 d2                	xor    edx,edx
c00038ee:	56                   	push   esi
c00038ef:	53                   	push   ebx
c00038f0:	89 c3                	mov    ebx,eax
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f7:	e8 62 f6 ff ff       	call   c0002f5e <dir_sdi>
c00038fc:	85 c0                	test   eax,eax
c00038fe:	75 4e                	jne    c000394e <dir_alloc+0x66>
c0003900:	31 f6                	xor    esi,esi
c0003902:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003905:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003908:	89 f8                	mov    eax,edi
c000390a:	e8 d1 e8 ff ff       	call   c00021e0 <move_window>
c000390f:	85 c0                	test   eax,eax
c0003911:	75 3b                	jne    c000394e <dir_alloc+0x66>
c0003913:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003916:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003919:	8a 12                	mov    dl,BYTE PTR [edx]
c000391b:	75 07                	jne    c0003924 <dir_alloc+0x3c>
c000391d:	f7 d2                	not    edx
c000391f:	c0 ea 07             	shr    dl,0x7
c0003922:	eb 0d                	jmp    c0003931 <dir_alloc+0x49>
c0003924:	84 d2                	test   dl,dl
c0003926:	0f 94 c1             	sete   cl
c0003929:	80 fa e5             	cmp    dl,0xe5
c000392c:	0f 94 c2             	sete   dl
c000392f:	09 ca                	or     edx,ecx
c0003931:	84 d2                	test   dl,dl
c0003933:	74 07                	je     c000393c <dir_alloc+0x54>
c0003935:	46                   	inc    esi
c0003936:	39 ee                	cmp    esi,ebp
c0003938:	75 04                	jne    c000393e <dir_alloc+0x56>
c000393a:	eb 1c                	jmp    c0003958 <dir_alloc+0x70>
c000393c:	31 f6                	xor    esi,esi
c000393e:	ba 01 00 00 00       	mov    edx,0x1
c0003943:	89 d8                	mov    eax,ebx
c0003945:	e8 6c fb ff ff       	call   c00034b6 <dir_next>
c000394a:	85 c0                	test   eax,eax
c000394c:	74 b4                	je     c0003902 <dir_alloc+0x1a>
c000394e:	83 f8 04             	cmp    eax,0x4
c0003951:	75 05                	jne    c0003958 <dir_alloc+0x70>
c0003953:	b8 07 00 00 00       	mov    eax,0x7
c0003958:	83 c4 0c             	add    esp,0xc
c000395b:	5b                   	pop    ebx
c000395c:	5e                   	pop    esi
c000395d:	5f                   	pop    edi
c000395e:	5d                   	pop    ebp
c000395f:	c3                   	ret    

c0003960 <store_xdir>:
c0003960:	55                   	push   ebp
c0003961:	57                   	push   edi
c0003962:	89 c7                	mov    edi,eax
c0003964:	56                   	push   esi
c0003965:	53                   	push   ebx
c0003966:	83 ec 0c             	sub    esp,0xc
c0003969:	8b 00                	mov    eax,DWORD PTR [eax]
c000396b:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000396e:	89 e8                	mov    eax,ebp
c0003970:	e8 5b e5 ff ff       	call   c0001ed0 <xdir_sum>
c0003975:	0f b7 d0             	movzx  edx,ax
c0003978:	8d 45 02             	lea    eax,[ebp+0x2]
c000397b:	e8 f4 e0 ff ff       	call   c0001a74 <st_word>
c0003980:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003984:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003987:	89 f8                	mov    eax,edi
c0003989:	e8 d0 f5 ff ff       	call   c0002f5e <dir_sdi>
c000398e:	89 c6                	mov    esi,eax
c0003990:	85 f6                	test   esi,esi
c0003992:	75 3d                	jne    c00039d1 <store_xdir+0x71>
c0003994:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003997:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c000399a:	8b 07                	mov    eax,DWORD PTR [edi]
c000399c:	e8 3f e8 ff ff       	call   c00021e0 <move_window>
c00039a1:	89 c6                	mov    esi,eax
c00039a3:	85 c0                	test   eax,eax
c00039a5:	75 2a                	jne    c00039d1 <store_xdir+0x71>
c00039a7:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039aa:	b9 20 00 00 00       	mov    ecx,0x20
c00039af:	89 ea                	mov    edx,ebp
c00039b1:	e8 cb e0 ff ff       	call   c0001a81 <mem_cpy>
c00039b6:	8b 07                	mov    eax,DWORD PTR [edi]
c00039b8:	85 db                	test   ebx,ebx
c00039ba:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039be:	74 11                	je     c00039d1 <store_xdir+0x71>
c00039c0:	31 d2                	xor    edx,edx
c00039c2:	89 f8                	mov    eax,edi
c00039c4:	83 c5 20             	add    ebp,0x20
c00039c7:	e8 ea fa ff ff       	call   c00034b6 <dir_next>
c00039cc:	4b                   	dec    ebx
c00039cd:	89 c6                	mov    esi,eax
c00039cf:	eb bf                	jmp    c0003990 <store_xdir+0x30>
c00039d1:	89 f0                	mov    eax,esi
c00039d3:	83 fe 02             	cmp    esi,0x2
c00039d6:	76 05                	jbe    c00039dd <store_xdir+0x7d>
c00039d8:	b8 02 00 00 00       	mov    eax,0x2
c00039dd:	83 c4 0c             	add    esp,0xc
c00039e0:	5b                   	pop    ebx
c00039e1:	5e                   	pop    esi
c00039e2:	5f                   	pop    edi
c00039e3:	5d                   	pop    ebp
c00039e4:	c3                   	ret    

c00039e5 <dir_remove>:
c00039e5:	57                   	push   edi
c00039e6:	56                   	push   esi
c00039e7:	53                   	push   ebx
c00039e8:	89 c3                	mov    ebx,eax
c00039ea:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00039ef:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c00039f2:	83 fa ff             	cmp    edx,0xffffffff
c00039f5:	74 09                	je     c0003a00 <dir_remove+0x1b>
c00039f7:	e8 62 f5 ff ff       	call   c0002f5e <dir_sdi>
c00039fc:	85 c0                	test   eax,eax
c00039fe:	75 41                	jne    c0003a41 <dir_remove+0x5c>
c0003a00:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a03:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a06:	89 f0                	mov    eax,esi
c0003a08:	e8 d3 e7 ff ff       	call   c00021e0 <move_window>
c0003a0d:	85 c0                	test   eax,eax
c0003a0f:	75 26                	jne    c0003a37 <dir_remove+0x52>
c0003a11:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a17:	75 05                	jne    c0003a1e <dir_remove+0x39>
c0003a19:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a1c:	eb 03                	jmp    c0003a21 <dir_remove+0x3c>
c0003a1e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a21:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a25:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a28:	73 17                	jae    c0003a41 <dir_remove+0x5c>
c0003a2a:	31 d2                	xor    edx,edx
c0003a2c:	89 d8                	mov    eax,ebx
c0003a2e:	e8 83 fa ff ff       	call   c00034b6 <dir_next>
c0003a33:	85 c0                	test   eax,eax
c0003a35:	74 c9                	je     c0003a00 <dir_remove+0x1b>
c0003a37:	83 f8 04             	cmp    eax,0x4
c0003a3a:	75 05                	jne    c0003a41 <dir_remove+0x5c>
c0003a3c:	b8 02 00 00 00       	mov    eax,0x2
c0003a41:	5b                   	pop    ebx
c0003a42:	5e                   	pop    esi
c0003a43:	5f                   	pop    edi
c0003a44:	c3                   	ret    

c0003a45 <create_name>:
c0003a45:	55                   	push   ebp
c0003a46:	89 d5                	mov    ebp,edx
c0003a48:	57                   	push   edi
c0003a49:	89 c7                	mov    edi,eax
c0003a4b:	56                   	push   esi
c0003a4c:	31 f6                	xor    esi,esi
c0003a4e:	53                   	push   ebx
c0003a4f:	83 ec 3c             	sub    esp,0x3c
c0003a52:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a54:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a58:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a61:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a65:	e8 72 e0 ff ff       	call   c0001adc <tchar2uni>
c0003a6a:	89 c3                	mov    ebx,eax
c0003a6c:	83 f8 ff             	cmp    eax,0xffffffff
c0003a6f:	75 0a                	jne    c0003a7b <create_name+0x36>
c0003a71:	b8 06 00 00 00       	mov    eax,0x6
c0003a76:	e9 9e 02 00 00       	jmp    c0003d19 <create_name+0x2d4>
c0003a7b:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a80:	76 0c                	jbe    c0003a8e <create_name+0x49>
c0003a82:	c1 e8 10             	shr    eax,0x10
c0003a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a89:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a8d:	46                   	inc    esi
c0003a8e:	66 83 fb 1f          	cmp    bx,0x1f
c0003a92:	76 4f                	jbe    c0003ae3 <create_name+0x9e>
c0003a94:	66 83 fb 5c          	cmp    bx,0x5c
c0003a98:	74 35                	je     c0003acf <create_name+0x8a>
c0003a9a:	66 83 fb 2f          	cmp    bx,0x2f
c0003a9e:	74 2f                	je     c0003acf <create_name+0x8a>
c0003aa0:	66 83 fb 7f          	cmp    bx,0x7f
c0003aa4:	77 11                	ja     c0003ab7 <create_name+0x72>
c0003aa6:	0f b7 d3             	movzx  edx,bx
c0003aa9:	b8 b2 72 02 c0       	mov    eax,0xc00272b2
c0003aae:	e8 11 e0 ff ff       	call   c0001ac4 <chk_chr>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	75 ba                	jne    c0003a71 <create_name+0x2c>
c0003ab7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003abd:	77 b2                	ja     c0003a71 <create_name+0x2c>
c0003abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ac3:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ac7:	46                   	inc    esi
c0003ac8:	eb 97                	jmp    c0003a61 <create_name+0x1c>
c0003aca:	40                   	inc    eax
c0003acb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003acf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ad3:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ad5:	80 fa 2f             	cmp    dl,0x2f
c0003ad8:	74 f0                	je     c0003aca <create_name+0x85>
c0003ada:	80 fa 5c             	cmp    dl,0x5c
c0003add:	74 eb                	je     c0003aca <create_name+0x85>
c0003adf:	31 db                	xor    ebx,ebx
c0003ae1:	eb 02                	jmp    c0003ae5 <create_name+0xa0>
c0003ae3:	b3 04                	mov    bl,0x4
c0003ae5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003aec:	85 f6                	test   esi,esi
c0003aee:	74 18                	je     c0003b08 <create_name+0xc3>
c0003af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003af4:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003af9:	66 83 f8 20          	cmp    ax,0x20
c0003afd:	74 06                	je     c0003b05 <create_name+0xc0>
c0003aff:	66 83 f8 2e          	cmp    ax,0x2e
c0003b03:	75 03                	jne    c0003b08 <create_name+0xc3>
c0003b05:	4e                   	dec    esi
c0003b06:	eb e4                	jmp    c0003aec <create_name+0xa7>
c0003b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0c:	31 ed                	xor    ebp,ebp
c0003b0e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b14:	85 f6                	test   esi,esi
c0003b16:	0f 84 55 ff ff ff    	je     c0003a71 <create_name+0x2c>
c0003b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b20:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b23:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b27:	66 83 f8 20          	cmp    ax,0x20
c0003b2b:	75 04                	jne    c0003b31 <create_name+0xec>
c0003b2d:	89 d5                	mov    ebp,edx
c0003b2f:	eb eb                	jmp    c0003b1c <create_name+0xd7>
c0003b31:	85 ed                	test   ebp,ebp
c0003b33:	75 06                	jne    c0003b3b <create_name+0xf6>
c0003b35:	66 83 f8 2e          	cmp    ax,0x2e
c0003b39:	75 08                	jne    c0003b43 <create_name+0xfe>
c0003b3b:	83 cb 03             	or     ebx,0x3
c0003b3e:	eb 03                	jmp    c0003b43 <create_name+0xfe>
c0003b40:	4e                   	dec    esi
c0003b41:	74 0c                	je     c0003b4f <create_name+0x10a>
c0003b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b47:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b4d:	75 f1                	jne    c0003b40 <create_name+0xfb>
c0003b4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b54:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b57:	ba 20 00 00 00       	mov    edx,0x20
c0003b5c:	e8 35 df ff ff       	call   c0001a96 <mem_set>
c0003b61:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b69:	31 c9                	xor    ecx,ecx
c0003b6b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b70:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b7b:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b7f:	66 85 ed             	test   bp,bp
c0003b82:	0f 84 30 01 00 00    	je     c0003cb8 <create_name+0x273>
c0003b88:	66 83 fd 20          	cmp    bp,0x20
c0003b8c:	74 10                	je     c0003b9e <create_name+0x159>
c0003b8e:	66 83 fd 2e          	cmp    bp,0x2e
c0003b92:	75 13                	jne    c0003ba7 <create_name+0x162>
c0003b94:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b98:	0f 84 6b 01 00 00    	je     c0003d09 <create_name+0x2c4>
c0003b9e:	83 cb 03             	or     ebx,0x3
c0003ba1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003ba5:	eb c9                	jmp    c0003b70 <create_name+0x12b>
c0003ba7:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bab:	73 0b                	jae    c0003bb8 <create_name+0x173>
c0003bad:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bb1:	75 47                	jne    c0003bfa <create_name+0x1b5>
c0003bb3:	e9 51 01 00 00       	jmp    c0003d09 <create_name+0x2c4>
c0003bb8:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bbd:	75 10                	jne    c0003bcf <create_name+0x18a>
c0003bbf:	83 cb 03             	or     ebx,0x3
c0003bc2:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bca:	e9 e9 00 00 00       	jmp    c0003cb8 <create_name+0x273>
c0003bcf:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bd3:	74 0d                	je     c0003be2 <create_name+0x19d>
c0003bd5:	83 cb 03             	or     ebx,0x3
c0003bd8:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bdc:	0f 87 d6 00 00 00    	ja     c0003cb8 <create_name+0x273>
c0003be2:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003be7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003beb:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bf3:	b9 08 00 00 00       	mov    ecx,0x8
c0003bf8:	eb a7                	jmp    c0003ba1 <create_name+0x15c>
c0003bfa:	66 83 fd 7f          	cmp    bp,0x7f
c0003bfe:	76 68                	jbe    c0003c68 <create_name+0x223>
c0003c00:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c04:	88 da                	mov    dl,bl
c0003c06:	83 ca 02             	or     edx,0x2
c0003c09:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c0d:	50                   	push   eax
c0003c0e:	50                   	push   eax
c0003c0f:	68 b5 01 00 00       	push   0x1b5
c0003c14:	55                   	push   ebp
c0003c15:	e8 48 46 00 00       	call   c0008262 <ff_uni2oem>
c0003c1a:	83 c4 10             	add    esp,0x10
c0003c1d:	89 c5                	mov    ebp,eax
c0003c1f:	a8 80                	test   al,0x80
c0003c21:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c25:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c29:	74 0c                	je     c0003c37 <create_name+0x1f2>
c0003c2b:	83 e5 7f             	and    ebp,0x7f
c0003c2e:	0f b6 ad 00 72 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8e00]
c0003c35:	eb 2a                	jmp    c0003c61 <create_name+0x21c>
c0003c37:	66 3d ff 00          	cmp    ax,0xff
c0003c3b:	76 24                	jbe    c0003c61 <create_name+0x21c>
c0003c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c41:	48                   	dec    eax
c0003c42:	39 c8                	cmp    eax,ecx
c0003c44:	77 0c                	ja     c0003c52 <create_name+0x20d>
c0003c46:	83 cb 03             	or     ebx,0x3
c0003c49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c4d:	e9 4f ff ff ff       	jmp    c0003ba1 <create_name+0x15c>
c0003c52:	89 e8                	mov    eax,ebp
c0003c54:	88 d3                	mov    bl,dl
c0003c56:	66 c1 e8 08          	shr    ax,0x8
c0003c5a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c5e:	41                   	inc    ecx
c0003c5f:	eb 4b                	jmp    c0003cac <create_name+0x267>
c0003c61:	88 d3                	mov    bl,dl
c0003c63:	66 85 ed             	test   bp,bp
c0003c66:	74 19                	je     c0003c81 <create_name+0x23c>
c0003c68:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c6c:	0f b7 d5             	movzx  edx,bp
c0003c6f:	b8 bb 72 02 c0       	mov    eax,0xc00272bb
c0003c74:	e8 4b de ff ff       	call   c0001ac4 <chk_chr>
c0003c79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	74 0a                	je     c0003c8b <create_name+0x246>
c0003c81:	83 cb 03             	or     ebx,0x3
c0003c84:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c89:	eb 21                	jmp    c0003cac <create_name+0x267>
c0003c8b:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c8e:	66 83 f8 19          	cmp    ax,0x19
c0003c92:	77 07                	ja     c0003c9b <create_name+0x256>
c0003c94:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c99:	eb 11                	jmp    c0003cac <create_name+0x267>
c0003c9b:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c9e:	66 83 f8 19          	cmp    ax,0x19
c0003ca2:	77 08                	ja     c0003cac <create_name+0x267>
c0003ca4:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ca9:	83 ed 20             	sub    ebp,0x20
c0003cac:	89 e8                	mov    eax,ebp
c0003cae:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cb2:	41                   	inc    ecx
c0003cb3:	e9 e9 fe ff ff       	jmp    c0003ba1 <create_name+0x15c>
c0003cb8:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cbc:	75 04                	jne    c0003cc2 <create_name+0x27d>
c0003cbe:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cc2:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cc7:	75 05                	jne    c0003cce <create_name+0x289>
c0003cc9:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cd2:	83 e0 0c             	and    eax,0xc
c0003cd5:	3c 0c                	cmp    al,0xc
c0003cd7:	74 0b                	je     c0003ce4 <create_name+0x29f>
c0003cd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cdd:	83 e0 03             	and    eax,0x3
c0003ce0:	3c 03                	cmp    al,0x3
c0003ce2:	75 05                	jne    c0003ce9 <create_name+0x2a4>
c0003ce4:	83 cb 02             	or     ebx,0x2
c0003ce7:	eb 19                	jmp    c0003d02 <create_name+0x2bd>
c0003ce9:	f6 c3 02             	test   bl,0x2
c0003cec:	75 14                	jne    c0003d02 <create_name+0x2bd>
c0003cee:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003cf3:	74 03                	je     c0003cf8 <create_name+0x2b3>
c0003cf5:	83 cb 10             	or     ebx,0x10
c0003cf8:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003cfd:	74 03                	je     c0003d02 <create_name+0x2bd>
c0003cff:	83 cb 08             	or     ebx,0x8
c0003d02:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d05:	31 c0                	xor    eax,eax
c0003d07:	eb 10                	jmp    c0003d19 <create_name+0x2d4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	0f 85 ce fe ff ff    	jne    c0003be2 <create_name+0x19d>
c0003d14:	e9 a6 fe ff ff       	jmp    c0003bbf <create_name+0x17a>
c0003d19:	83 c4 3c             	add    esp,0x3c
c0003d1c:	5b                   	pop    ebx
c0003d1d:	5e                   	pop    esi
c0003d1e:	5f                   	pop    edi
c0003d1f:	5d                   	pop    ebp
c0003d20:	c3                   	ret    

c0003d21 <xname_sum>:
c0003d21:	56                   	push   esi
c0003d22:	53                   	push   ebx
c0003d23:	89 c6                	mov    esi,eax
c0003d25:	51                   	push   ecx
c0003d26:	31 db                	xor    ebx,ebx
c0003d28:	83 c6 02             	add    esi,0x2
c0003d2b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d2f:	66 85 c0             	test   ax,ax
c0003d32:	74 1f                	je     c0003d53 <xname_sum+0x32>
c0003d34:	83 ec 0c             	sub    esp,0xc
c0003d37:	66 d1 cb             	ror    bx,1
c0003d3a:	50                   	push   eax
c0003d3b:	e8 1e 46 00 00       	call   c000835e <ff_wtoupper>
c0003d40:	83 c4 10             	add    esp,0x10
c0003d43:	0f b6 d0             	movzx  edx,al
c0003d46:	66 c1 e8 08          	shr    ax,0x8
c0003d4a:	01 d3                	add    ebx,edx
c0003d4c:	66 d1 cb             	ror    bx,1
c0003d4f:	01 c3                	add    ebx,eax
c0003d51:	eb d5                	jmp    c0003d28 <xname_sum+0x7>
c0003d53:	89 d8                	mov    eax,ebx
c0003d55:	5a                   	pop    edx
c0003d56:	5b                   	pop    ebx
c0003d57:	5e                   	pop    esi
c0003d58:	c3                   	ret    

c0003d59 <create_xdir>:
c0003d59:	55                   	push   ebp
c0003d5a:	b9 40 00 00 00       	mov    ecx,0x40
c0003d5f:	57                   	push   edi
c0003d60:	bd 01 00 00 00       	mov    ebp,0x1
c0003d65:	56                   	push   esi
c0003d66:	31 ff                	xor    edi,edi
c0003d68:	53                   	push   ebx
c0003d69:	be 40 00 00 00       	mov    esi,0x40
c0003d6e:	89 c3                	mov    ebx,eax
c0003d70:	83 ec 1c             	sub    esp,0x1c
c0003d73:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d77:	31 d2                	xor    edx,edx
c0003d79:	e8 18 dd ff ff       	call   c0001a96 <mem_set>
c0003d7e:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d81:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d85:	31 c9                	xor    ecx,ecx
c0003d87:	8d 46 01             	lea    eax,[esi+0x1]
c0003d8a:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d8e:	83 c6 02             	add    esi,0x2
c0003d91:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d95:	66 85 ed             	test   bp,bp
c0003d98:	74 12                	je     c0003dac <create_xdir+0x53>
c0003d9a:	0f b6 c1             	movzx  eax,cl
c0003d9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003da1:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003da5:	66 83 fd 01          	cmp    bp,0x1
c0003da9:	80 d9 ff             	sbb    cl,0xff
c0003dac:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003daf:	0f b7 d5             	movzx  edx,bp
c0003db2:	83 c6 02             	add    esi,0x2
c0003db5:	e8 ba dc ff ff       	call   c0001a74 <st_word>
c0003dba:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dc0:	75 d3                	jne    c0003d95 <create_xdir+0x3c>
c0003dc2:	8d 47 01             	lea    eax,[edi+0x1]
c0003dc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003dcd:	0f b6 c1             	movzx  eax,cl
c0003dd0:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003dd5:	74 07                	je     c0003dde <create_xdir+0x85>
c0003dd7:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003ddc:	eb a9                	jmp    c0003d87 <create_xdir+0x2e>
c0003dde:	8d 47 02             	lea    eax,[edi+0x2]
c0003de1:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003de4:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003de7:	89 d0                	mov    eax,edx
c0003de9:	e8 33 ff ff ff       	call   c0003d21 <xname_sum>
c0003dee:	83 c4 1c             	add    esp,0x1c
c0003df1:	0f b7 d0             	movzx  edx,ax
c0003df4:	8d 43 24             	lea    eax,[ebx+0x24]
c0003df7:	5b                   	pop    ebx
c0003df8:	5e                   	pop    esi
c0003df9:	5f                   	pop    edi
c0003dfa:	5d                   	pop    ebp
c0003dfb:	e9 74 dc ff ff       	jmp    c0001a74 <st_word>

c0003e00 <cmp_lfn>:
c0003e00:	55                   	push   ebp
c0003e01:	57                   	push   edi
c0003e02:	89 d7                	mov    edi,edx
c0003e04:	56                   	push   esi
c0003e05:	53                   	push   ebx
c0003e06:	83 ec 1c             	sub    esp,0x1c
c0003e09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e10:	e8 ed db ff ff       	call   c0001a02 <ld_word>
c0003e15:	66 85 c0             	test   ax,ax
c0003e18:	74 07                	je     c0003e21 <cmp_lfn+0x21>
c0003e1a:	31 c0                	xor    eax,eax
c0003e1c:	e9 9a 00 00 00       	jmp    c0003ebb <cmp_lfn+0xbb>
c0003e21:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e23:	bd 01 00 00 00       	mov    ebp,0x1
c0003e28:	83 e3 3f             	and    ebx,0x3f
c0003e2b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e33:	4b                   	dec    ebx
c0003e34:	6b db 0d             	imul   ebx,ebx,0xd
c0003e37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e3b:	0f b6 80 80 72 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8d80]
c0003e42:	01 f8                	add    eax,edi
c0003e44:	e8 b9 db ff ff       	call   c0001a02 <ld_word>
c0003e49:	66 85 ed             	test   bp,bp
c0003e4c:	89 c6                	mov    esi,eax
c0003e4e:	74 3c                	je     c0003e8c <cmp_lfn+0x8c>
c0003e50:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e56:	77 c2                	ja     c0003e1a <cmp_lfn+0x1a>
c0003e58:	83 ec 0c             	sub    esp,0xc
c0003e5b:	0f b7 c0             	movzx  eax,ax
c0003e5e:	50                   	push   eax
c0003e5f:	e8 fa 44 00 00       	call   c000835e <ff_wtoupper>
c0003e64:	89 c5                	mov    ebp,eax
c0003e66:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e71:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e75:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e78:	e8 e1 44 00 00       	call   c000835e <ff_wtoupper>
c0003e7d:	83 c4 10             	add    esp,0x10
c0003e80:	39 c5                	cmp    ebp,eax
c0003e82:	75 96                	jne    c0003e1a <cmp_lfn+0x1a>
c0003e84:	89 f5                	mov    ebp,esi
c0003e86:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e8a:	eb 04                	jmp    c0003e90 <cmp_lfn+0x90>
c0003e8c:	66 46                	inc    si
c0003e8e:	75 8a                	jne    c0003e1a <cmp_lfn+0x1a>
c0003e90:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e94:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e99:	75 9c                	jne    c0003e37 <cmp_lfn+0x37>
c0003e9b:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e9e:	74 16                	je     c0003eb6 <cmp_lfn+0xb6>
c0003ea0:	66 85 ed             	test   bp,bp
c0003ea3:	74 11                	je     c0003eb6 <cmp_lfn+0xb6>
c0003ea5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea9:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003eae:	0f 94 c0             	sete   al
c0003eb1:	0f b6 c0             	movzx  eax,al
c0003eb4:	eb 05                	jmp    c0003ebb <cmp_lfn+0xbb>
c0003eb6:	b8 01 00 00 00       	mov    eax,0x1
c0003ebb:	83 c4 1c             	add    esp,0x1c
c0003ebe:	5b                   	pop    ebx
c0003ebf:	5e                   	pop    esi
c0003ec0:	5f                   	pop    edi
c0003ec1:	5d                   	pop    ebp
c0003ec2:	c3                   	ret    

c0003ec3 <dir_find>:
c0003ec3:	55                   	push   ebp
c0003ec4:	31 d2                	xor    edx,edx
c0003ec6:	57                   	push   edi
c0003ec7:	56                   	push   esi
c0003ec8:	53                   	push   ebx
c0003ec9:	89 c3                	mov    ebx,eax
c0003ecb:	83 ec 1c             	sub    esp,0x1c
c0003ece:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ed0:	e8 89 f0 ff ff       	call   c0002f5e <dir_sdi>
c0003ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ed8:	85 c0                	test   eax,eax
c0003eda:	0f 85 9e 01 00 00    	jne    c000407e <dir_find+0x1bb>
c0003ee0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ee3:	0f 85 8d 00 00 00    	jne    c0003f76 <dir_find+0xb3>
c0003ee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003eec:	e8 30 fe ff ff       	call   c0003d21 <xname_sum>
c0003ef1:	89 c7                	mov    edi,eax
c0003ef3:	31 d2                	xor    edx,edx
c0003ef5:	89 d8                	mov    eax,ebx
c0003ef7:	e8 72 f8 ff ff       	call   c000376e <dir_read>
c0003efc:	85 c0                	test   eax,eax
c0003efe:	0f 85 5e 01 00 00    	jne    c0004062 <dir_find+0x19f>
c0003f04:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f07:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f0a:	e8 f3 da ff ff       	call   c0001a02 <ld_word>
c0003f0f:	66 39 f8             	cmp    ax,di
c0003f12:	75 df                	jne    c0003ef3 <dir_find+0x30>
c0003f14:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f17:	31 ed                	xor    ebp,ebp
c0003f19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f1d:	ba 40 00 00 00       	mov    edx,0x40
c0003f22:	89 e9                	mov    ecx,ebp
c0003f24:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f28:	0f 84 42 01 00 00    	je     c0004070 <dir_find+0x1ad>
c0003f2e:	f6 c2 1f             	test   dl,0x1f
c0003f31:	75 03                	jne    c0003f36 <dir_find+0x73>
c0003f33:	83 c2 02             	add    edx,0x2
c0003f36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f3a:	89 d0                	mov    eax,edx
c0003f3c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f3f:	e8 be da ff ff       	call   c0001a02 <ld_word>
c0003f44:	83 ec 0c             	sub    esp,0xc
c0003f47:	0f b7 c0             	movzx  eax,ax
c0003f4a:	50                   	push   eax
c0003f4b:	e8 0e 44 00 00       	call   c000835e <ff_wtoupper>
c0003f50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f54:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f57:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f5e:	e8 fb 43 00 00       	call   c000835e <ff_wtoupper>
c0003f63:	83 c4 10             	add    esp,0x10
c0003f66:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f6a:	75 87                	jne    c0003ef3 <dir_find+0x30>
c0003f6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f70:	45                   	inc    ebp
c0003f71:	83 c2 02             	add    edx,0x2
c0003f74:	eb ac                	jmp    c0003f22 <dir_find+0x5f>
c0003f76:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f7d:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f82:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f87:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f8a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f8d:	89 f0                	mov    eax,esi
c0003f8f:	e8 4c e2 ff ff       	call   c00021e0 <move_window>
c0003f94:	85 c0                	test   eax,eax
c0003f96:	0f 85 c6 00 00 00    	jne    c0004062 <dir_find+0x19f>
c0003f9c:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f9f:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fa2:	84 c9                	test   cl,cl
c0003fa4:	0f 84 bd 00 00 00    	je     c0004067 <dir_find+0x1a4>
c0003faa:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fad:	88 d0                	mov    al,dl
c0003faf:	83 e0 3f             	and    eax,0x3f
c0003fb2:	80 f9 e5             	cmp    cl,0xe5
c0003fb5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fb8:	0f 84 87 00 00 00    	je     c0004045 <dir_find+0x182>
c0003fbe:	80 e2 08             	and    dl,0x8
c0003fc1:	74 06                	je     c0003fc9 <dir_find+0x106>
c0003fc3:	3c 0f                	cmp    al,0xf
c0003fc5:	75 7e                	jne    c0004045 <dir_find+0x182>
c0003fc7:	eb 04                	jmp    c0003fcd <dir_find+0x10a>
c0003fc9:	3c 0f                	cmp    al,0xf
c0003fcb:	75 4c                	jne    c0004019 <dir_find+0x156>
c0003fcd:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fd1:	75 7e                	jne    c0004051 <dir_find+0x18e>
c0003fd3:	f6 c1 40             	test   cl,0x40
c0003fd6:	74 12                	je     c0003fea <dir_find+0x127>
c0003fd8:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fdb:	83 e1 bf             	and    ecx,0xffffffbf
c0003fde:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003fe2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003fe5:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003fe8:	eb 06                	jmp    c0003ff0 <dir_find+0x12d>
c0003fea:	89 f8                	mov    eax,edi
c0003fec:	38 c8                	cmp    al,cl
c0003fee:	75 5c                	jne    c000404c <dir_find+0x189>
c0003ff0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003ff4:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ff9:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003ffc:	75 53                	jne    c0004051 <dir_find+0x18e>
c0003ffe:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004002:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004005:	89 ea                	mov    edx,ebp
c0004007:	e8 f4 fd ff ff       	call   c0003e00 <cmp_lfn>
c000400c:	85 c0                	test   eax,eax
c000400e:	74 41                	je     c0004051 <dir_find+0x18e>
c0004010:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004014:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004017:	eb 38                	jmp    c0004051 <dir_find+0x18e>
c0004019:	89 f8                	mov    eax,edi
c000401b:	84 c0                	test   al,al
c000401d:	75 0d                	jne    c000402c <dir_find+0x169>
c000401f:	89 e8                	mov    eax,ebp
c0004021:	e8 98 de ff ff       	call   c0001ebe <sum_sfn>
c0004026:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000402a:	74 52                	je     c000407e <dir_find+0x1bb>
c000402c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004030:	75 13                	jne    c0004045 <dir_find+0x182>
c0004032:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004035:	b9 0b 00 00 00       	mov    ecx,0xb
c000403a:	89 e8                	mov    eax,ebp
c000403c:	e8 60 da ff ff       	call   c0001aa1 <mem_cmp>
c0004041:	85 c0                	test   eax,eax
c0004043:	74 39                	je     c000407e <dir_find+0x1bb>
c0004045:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000404c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004051:	31 d2                	xor    edx,edx
c0004053:	89 d8                	mov    eax,ebx
c0004055:	e8 5c f4 ff ff       	call   c00034b6 <dir_next>
c000405a:	85 c0                	test   eax,eax
c000405c:	0f 84 25 ff ff ff    	je     c0003f87 <dir_find+0xc4>
c0004062:	89 04 24             	mov    DWORD PTR [esp],eax
c0004065:	eb 17                	jmp    c000407e <dir_find+0x1bb>
c0004067:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000406e:	eb 0e                	jmp    c000407e <dir_find+0x1bb>
c0004070:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004073:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004078:	0f 85 75 fe ff ff    	jne    c0003ef3 <dir_find+0x30>
c000407e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004081:	83 c4 1c             	add    esp,0x1c
c0004084:	5b                   	pop    ebx
c0004085:	5e                   	pop    esi
c0004086:	5f                   	pop    edi
c0004087:	5d                   	pop    ebp
c0004088:	c3                   	ret    

c0004089 <dir_register>:
c0004089:	55                   	push   ebp
c000408a:	57                   	push   edi
c000408b:	56                   	push   esi
c000408c:	be 06 00 00 00       	mov    esi,0x6
c0004091:	53                   	push   ebx
c0004092:	83 ec 6c             	sub    esp,0x6c
c0004095:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004099:	0f 85 62 02 00 00    	jne    c0004301 <dir_register+0x278>
c000409f:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040a1:	31 ff                	xor    edi,edi
c00040a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040a6:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ab:	74 03                	je     c00040b0 <dir_register+0x27>
c00040ad:	47                   	inc    edi
c00040ae:	eb f6                	jmp    c00040a6 <dir_register+0x1d>
c00040b0:	89 c3                	mov    ebx,eax
c00040b2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040b6:	0f 85 e1 00 00 00    	jne    c000419d <dir_register+0x114>
c00040bc:	83 c7 0e             	add    edi,0xe
c00040bf:	b9 0f 00 00 00       	mov    ecx,0xf
c00040c4:	89 f8                	mov    eax,edi
c00040c6:	31 d2                	xor    edx,edx
c00040c8:	f7 f1                	div    ecx
c00040ca:	8d 50 02             	lea    edx,[eax+0x2]
c00040cd:	89 c7                	mov    edi,eax
c00040cf:	89 d8                	mov    eax,ebx
c00040d1:	e8 12 f8 ff ff       	call   c00038e8 <dir_alloc>
c00040d6:	89 c6                	mov    esi,eax
c00040d8:	85 c0                	test   eax,eax
c00040da:	0f 85 21 02 00 00    	jne    c0004301 <dir_register+0x278>
c00040e0:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040e9:	c1 e7 05             	shl    edi,0x5
c00040ec:	29 f8                	sub    eax,edi
c00040ee:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00040f1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040f4:	a8 04                	test   al,0x4
c00040f6:	0f 84 91 00 00 00    	je     c000418d <dir_register+0x104>
c00040fc:	83 e0 fb             	and    eax,0xfffffffb
c00040ff:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004102:	89 d8                	mov    eax,ebx
c0004104:	e8 25 ec ff ff       	call   c0002d2e <fill_first_frag>
c0004109:	85 c0                	test   eax,eax
c000410b:	0f 85 ee 01 00 00    	jne    c00042ff <dir_register+0x276>
c0004111:	83 c9 ff             	or     ecx,0xffffffff
c0004114:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 db eb ff ff       	call   c0002cf9 <fill_last_frag>
c000411e:	85 c0                	test   eax,eax
c0004120:	0f 85 d9 01 00 00    	jne    c00042ff <dir_register+0x276>
c0004126:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000412a:	74 61                	je     c000418d <dir_register+0x104>
c000412c:	89 da                	mov    edx,ebx
c000412e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004132:	e8 ea f5 ff ff       	call   c0003721 <load_obj_xdir>
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 c0 01 00 00    	jne    c00042ff <dir_register+0x276>
c000413f:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004143:	31 c9                	xor    ecx,ecx
c0004145:	c1 e2 09             	shl    edx,0x9
c0004148:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000414b:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000414e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004151:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004154:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004157:	83 c0 38             	add    eax,0x38
c000415a:	e8 1c d9 ff ff       	call   c0001a7b <st_qword>
c000415f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004162:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004165:	83 c0 28             	add    eax,0x28
c0004168:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000416b:	e8 0b d9 ff ff       	call   c0001a7b <st_qword>
c0004170:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004173:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004176:	83 c8 01             	or     eax,0x1
c0004179:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000417c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004180:	e8 db f7 ff ff       	call   c0003960 <store_xdir>
c0004185:	85 c0                	test   eax,eax
c0004187:	0f 85 72 01 00 00    	jne    c00042ff <dir_register+0x276>
c000418d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004190:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004193:	e8 c1 fb ff ff       	call   c0003d59 <create_xdir>
c0004198:	e9 64 01 00 00       	jmp    c0004301 <dir_register+0x278>
c000419d:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041a0:	b9 0c 00 00 00       	mov    ecx,0xc
c00041a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041a9:	89 c2                	mov    edx,eax
c00041ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041af:	e8 cd d8 ff ff       	call   c0001a81 <mem_cpy>
c00041b4:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041b9:	74 58                	je     c0004213 <dir_register+0x18a>
c00041bb:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041bf:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041c7:	83 ec 0c             	sub    esp,0xc
c00041ca:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041d1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041d9:	e8 24 dc ff ff       	call   c0001e02 <gen_numname>
c00041de:	89 d8                	mov    eax,ebx
c00041e0:	e8 de fc ff ff       	call   c0003ec3 <dir_find>
c00041e5:	83 c4 10             	add    esp,0x10
c00041e8:	89 c6                	mov    esi,eax
c00041ea:	85 c0                	test   eax,eax
c00041ec:	75 15                	jne    c0004203 <dir_register+0x17a>
c00041ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00041f2:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00041f7:	75 ce                	jne    c00041c7 <dir_register+0x13e>
c00041f9:	be 07 00 00 00       	mov    esi,0x7
c00041fe:	e9 fe 00 00 00       	jmp    c0004301 <dir_register+0x278>
c0004203:	83 f8 04             	cmp    eax,0x4
c0004206:	0f 85 f5 00 00 00    	jne    c0004301 <dir_register+0x278>
c000420c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004210:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004213:	b9 01 00 00 00       	mov    ecx,0x1
c0004218:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000421d:	74 0f                	je     c000422e <dir_register+0x1a5>
c000421f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004224:	8d 47 0c             	lea    eax,[edi+0xc]
c0004227:	31 d2                	xor    edx,edx
c0004229:	f7 f1                	div    ecx
c000422b:	8d 48 01             	lea    ecx,[eax+0x1]
c000422e:	89 ca                	mov    edx,ecx
c0004230:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004234:	89 d8                	mov    eax,ebx
c0004236:	e8 ad f6 ff ff       	call   c00038e8 <dir_alloc>
c000423b:	89 c6                	mov    esi,eax
c000423d:	85 c0                	test   eax,eax
c000423f:	0f 85 bc 00 00 00    	jne    c0004301 <dir_register+0x278>
c0004245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004249:	49                   	dec    ecx
c000424a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000424e:	74 6a                	je     c00042ba <dir_register+0x231>
c0004250:	89 c8                	mov    eax,ecx
c0004252:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004255:	c1 e0 05             	shl    eax,0x5
c0004258:	29 c2                	sub    edx,eax
c000425a:	89 d8                	mov    eax,ebx
c000425c:	e8 fd ec ff ff       	call   c0002f5e <dir_sdi>
c0004261:	89 c6                	mov    esi,eax
c0004263:	85 c0                	test   eax,eax
c0004265:	0f 85 96 00 00 00    	jne    c0004301 <dir_register+0x278>
c000426b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000426f:	e8 4a dc ff ff       	call   c0001ebe <sum_sfn>
c0004274:	0f b6 f8             	movzx  edi,al
c0004277:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000427a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000427d:	89 e8                	mov    eax,ebp
c000427f:	e8 5c df ff ff       	call   c00021e0 <move_window>
c0004284:	89 c6                	mov    esi,eax
c0004286:	85 c0                	test   eax,eax
c0004288:	75 77                	jne    c0004301 <dir_register+0x278>
c000428a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000428f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004292:	83 ec 0c             	sub    esp,0xc
c0004295:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004298:	57                   	push   edi
c0004299:	e8 e0 da ff ff       	call   c0001d7e <put_lfn>
c000429e:	31 d2                	xor    edx,edx
c00042a0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042a4:	89 d8                	mov    eax,ebx
c00042a6:	e8 0b f2 ff ff       	call   c00034b6 <dir_next>
c00042ab:	83 c4 10             	add    esp,0x10
c00042ae:	89 c6                	mov    esi,eax
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 4d                	jne    c0004301 <dir_register+0x278>
c00042b4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042b8:	75 bd                	jne    c0004277 <dir_register+0x1ee>
c00042ba:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042bd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c0:	89 e8                	mov    eax,ebp
c00042c2:	e8 19 df ff ff       	call   c00021e0 <move_window>
c00042c7:	89 c6                	mov    esi,eax
c00042c9:	85 c0                	test   eax,eax
c00042cb:	75 34                	jne    c0004301 <dir_register+0x278>
c00042cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042d0:	b9 20 00 00 00       	mov    ecx,0x20
c00042d5:	31 d2                	xor    edx,edx
c00042d7:	e8 ba d7 ff ff       	call   c0001a96 <mem_set>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e3:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e8:	e8 94 d7 ff ff       	call   c0001a81 <mem_cpy>
c00042ed:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042f0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042f3:	83 e0 18             	and    eax,0x18
c00042f6:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00042f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042fd:	eb 02                	jmp    c0004301 <dir_register+0x278>
c00042ff:	89 c6                	mov    esi,eax
c0004301:	83 c4 6c             	add    esp,0x6c
c0004304:	89 f0                	mov    eax,esi
c0004306:	5b                   	pop    ebx
c0004307:	5e                   	pop    esi
c0004308:	5f                   	pop    edi
c0004309:	5d                   	pop    ebp
c000430a:	c3                   	ret    

c000430b <sync_fs>:
c000430b:	56                   	push   esi
c000430c:	53                   	push   ebx
c000430d:	53                   	push   ebx
c000430e:	89 c3                	mov    ebx,eax
c0004310:	e8 37 de ff ff       	call   c000214c <sync_window>
c0004315:	85 c0                	test   eax,eax
c0004317:	0f 85 b1 00 00 00    	jne    c00043ce <sync_fs+0xc3>
c000431d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004320:	0f 85 8e 00 00 00    	jne    c00043b4 <sync_fs+0xa9>
c0004326:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000432a:	0f 85 84 00 00 00    	jne    c00043b4 <sync_fs+0xa9>
c0004330:	b9 00 02 00 00       	mov    ecx,0x200
c0004335:	8d 73 54             	lea    esi,[ebx+0x54]
c0004338:	31 d2                	xor    edx,edx
c000433a:	89 f0                	mov    eax,esi
c000433c:	e8 55 d7 ff ff       	call   c0001a96 <mem_set>
c0004341:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004347:	ba 55 aa 00 00       	mov    edx,0xaa55
c000434c:	e8 23 d7 ff ff       	call   c0001a74 <st_word>
c0004351:	ba 52 52 61 41       	mov    edx,0x41615252
c0004356:	89 f0                	mov    eax,esi
c0004358:	e8 1b d7 ff ff       	call   c0001a78 <st_dword>
c000435d:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004363:	ba 72 72 41 61       	mov    edx,0x61417272
c0004368:	e8 0b d7 ff ff       	call   c0001a78 <st_dword>
c000436d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004370:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004376:	e8 fd d6 ff ff       	call   c0001a78 <st_dword>
c000437b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000437e:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004384:	e8 ef d6 ff ff       	call   c0001a78 <st_dword>
c0004389:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000438c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000438f:	83 c0 01             	add    eax,0x1
c0004392:	83 d2 00             	adc    edx,0x0
c0004395:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004398:	83 ec 0c             	sub    esp,0xc
c000439b:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000439e:	6a 01                	push   0x1
c00043a0:	52                   	push   edx
c00043a1:	50                   	push   eax
c00043a2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043a6:	56                   	push   esi
c00043a7:	50                   	push   eax
c00043a8:	e8 20 d6 ff ff       	call   c00019cd <disk_write>
c00043ad:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043b1:	83 c4 20             	add    esp,0x20
c00043b4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b8:	51                   	push   ecx
c00043b9:	6a 00                	push   0x0
c00043bb:	6a 00                	push   0x0
c00043bd:	50                   	push   eax
c00043be:	e8 20 d6 ff ff       	call   c00019e3 <disk_ioctl>
c00043c3:	83 c4 10             	add    esp,0x10
c00043c6:	85 c0                	test   eax,eax
c00043c8:	0f 95 c0             	setne  al
c00043cb:	0f b6 c0             	movzx  eax,al
c00043ce:	5a                   	pop    edx
c00043cf:	5b                   	pop    ebx
c00043d0:	5e                   	pop    esi
c00043d1:	c3                   	ret    

c00043d2 <create_partition>:
c00043d2:	55                   	push   ebp
c00043d3:	0f b6 c0             	movzx  eax,al
c00043d6:	57                   	push   edi
c00043d7:	56                   	push   esi
c00043d8:	53                   	push   ebx
c00043d9:	83 ec 60             	sub    esp,0x60
c00043dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043e0:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043e4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043e8:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043ec:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043f0:	50                   	push   eax
c00043f1:	6a 01                	push   0x1
c00043f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f7:	e8 e7 d5 ff ff       	call   c00019e3 <disk_ioctl>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	85 c0                	test   eax,eax
c0004401:	74 0a                	je     c000440d <create_partition+0x3b>
c0004403:	b8 01 00 00 00       	mov    eax,0x1
c0004408:	e9 67 05 00 00       	jmp    c0004974 <create_partition+0x5a2>
c000440d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004411:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004415:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004419:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000441d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004422:	0f 86 ed 03 00 00    	jbe    c0004815 <create_partition+0x443>
c0004428:	83 c0 df             	add    eax,0xffffffdf
c000442b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004433:	83 d2 ff             	adc    edx,0xffffffff
c0004436:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000443a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000443e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004442:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004446:	83 c0 bd             	add    eax,0xffffffbd
c0004449:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004450:	83 d2 ff             	adc    edx,0xffffffff
c0004453:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004457:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000445b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004463:	be 22 00 00 00       	mov    esi,0x22
c0004468:	31 ff                	xor    edi,edi
c000446a:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004472:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000447a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004482:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004486:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000448c:	75 0e                	jne    c000449c <create_partition+0xca>
c000448e:	b9 00 02 00 00       	mov    ecx,0x200
c0004493:	31 d2                	xor    edx,edx
c0004495:	89 d8                	mov    eax,ebx
c0004497:	e8 fa d5 ff ff       	call   c0001a96 <mem_set>
c000449c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044a8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ab:	0f 84 23 01 00 00    	je     c00045d4 <create_partition+0x202>
c00044b1:	89 f0                	mov    eax,esi
c00044b3:	89 fa                	mov    edx,edi
c00044b5:	05 ff 07 00 00       	add    eax,0x7ff
c00044ba:	83 d2 00             	adc    edx,0x0
c00044bd:	89 c1                	mov    ecx,eax
c00044bf:	89 d7                	mov    edi,edx
c00044c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044cb:	89 ce                	mov    esi,ecx
c00044cd:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044d5:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044d9:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e3:	b8 64 00 00 00       	mov    eax,0x64
c00044e8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044eb:	b8 00 00 00 00       	mov    eax,0x0
c00044f0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00044f4:	72 41                	jb     c0004537 <create_partition+0x165>
c00044f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00044fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044fe:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004502:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004507:	01 c1                	add    ecx,eax
c0004509:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000450d:	f7 24 24             	mul    DWORD PTR [esp]
c0004510:	6a 00                	push   0x0
c0004512:	01 ca                	add    edx,ecx
c0004514:	6a 64                	push   0x64
c0004516:	52                   	push   edx
c0004517:	50                   	push   eax
c0004518:	e8 2f 03 02 00       	call   c002484c <__udivdi3>
c000451d:	83 c4 10             	add    esp,0x10
c0004520:	05 ff 07 00 00       	add    eax,0x7ff
c0004525:	83 d2 00             	adc    edx,0x0
c0004528:	89 c1                	mov    ecx,eax
c000452a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000452e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004534:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004537:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000453a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000453e:	01 f0                	add    eax,esi
c0004540:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004544:	11 fa                	adc    edx,edi
c0004546:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000454a:	19 d1                	sbb    ecx,edx
c000454c:	73 2e                	jae    c000457c <create_partition+0x1aa>
c000454e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004552:	89 f8                	mov    eax,edi
c0004554:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000455b:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000455f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004567:	73 6b                	jae    c00045d4 <create_partition+0x202>
c0004569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000456d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004571:	29 f0                	sub    eax,esi
c0004573:	19 fa                	sbb    edx,edi
c0004575:	89 04 24             	mov    DWORD PTR [esp],eax
c0004578:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004580:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004583:	74 4f                	je     c00045d4 <create_partition+0x202>
c0004585:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004588:	b9 10 00 00 00       	mov    ecx,0x10
c000458d:	ba 90 72 02 c0       	mov    edx,0xc0027290
c0004592:	e8 ea d4 ff ff       	call   c0001a81 <mem_cpy>
c0004597:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000459b:	b9 10 00 00 00       	mov    ecx,0x10
c00045a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045a4:	e8 2c db ff ff       	call   c00020d5 <make_rand>
c00045a9:	89 f2                	mov    edx,esi
c00045ab:	89 f9                	mov    ecx,edi
c00045ad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045b1:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045b5:	e8 c1 d4 ff ff       	call   c0001a7b <st_qword>
c00045ba:	03 34 24             	add    esi,DWORD PTR [esp]
c00045bd:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045c1:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045c5:	89 f2                	mov    edx,esi
c00045c7:	89 f9                	mov    ecx,edi
c00045c9:	83 c2 ff             	add    edx,0xffffffff
c00045cc:	83 d1 ff             	adc    ecx,0xffffffff
c00045cf:	e8 a7 d4 ff ff       	call   c0001a7b <st_qword>
c00045d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045d8:	83 e8 80             	sub    eax,0xffffff80
c00045db:	89 c5                	mov    ebp,eax
c00045dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045e1:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e7:	75 6b                	jne    c0004654 <create_partition+0x282>
c00045e9:	45                   	inc    ebp
c00045ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045ee:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c00045f3:	e8 39 da ff ff       	call   c0002031 <crc32>
c00045f8:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00045fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004602:	75 e5                	jne    c00045e9 <create_partition+0x217>
c0004604:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004608:	31 d2                	xor    edx,edx
c000460a:	83 ec 0c             	sub    esp,0xc
c000460d:	c1 ed 09             	shr    ebp,0x9
c0004610:	6a 01                	push   0x1
c0004612:	8d 45 02             	lea    eax,[ebp+0x2]
c0004615:	52                   	push   edx
c0004616:	50                   	push   eax
c0004617:	53                   	push   ebx
c0004618:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000461c:	e8 ac d3 ff ff       	call   c00019cd <disk_write>
c0004621:	83 c4 20             	add    esp,0x20
c0004624:	85 c0                	test   eax,eax
c0004626:	0f 85 d7 fd ff ff    	jne    c0004403 <create_partition+0x31>
c000462c:	83 ec 0c             	sub    esp,0xc
c000462f:	31 d2                	xor    edx,edx
c0004631:	6a 01                	push   0x1
c0004633:	89 e8                	mov    eax,ebp
c0004635:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004639:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000463d:	52                   	push   edx
c000463e:	50                   	push   eax
c000463f:	53                   	push   ebx
c0004640:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004644:	e8 84 d3 ff ff       	call   c00019cd <disk_write>
c0004649:	83 c4 20             	add    esp,0x20
c000464c:	85 c0                	test   eax,eax
c000464e:	0f 85 af fd ff ff    	jne    c0004403 <create_partition+0x31>
c0004654:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004658:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000465c:	3d 00 40 00 00       	cmp    eax,0x4000
c0004661:	74 0d                	je     c0004670 <create_partition+0x29e>
c0004663:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004667:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000466b:	e9 12 fe ff ff       	jmp    c0004482 <create_partition+0xb0>
c0004670:	31 d2                	xor    edx,edx
c0004672:	b9 00 02 00 00       	mov    ecx,0x200
c0004677:	89 d8                	mov    eax,ebx
c0004679:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000467c:	e8 15 d4 ff ff       	call   c0001a96 <mem_set>
c0004681:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004684:	b9 10 00 00 00       	mov    ecx,0x10
c0004689:	ba 80 71 02 c0       	mov    edx,0xc0027180
c000468e:	89 d8                	mov    eax,ebx
c0004690:	e8 ec d3 ff ff       	call   c0001a81 <mem_cpy>
c0004695:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004699:	8d 43 58             	lea    eax,[ebx+0x58]
c000469c:	f7 d2                	not    edx
c000469e:	e8 d5 d3 ff ff       	call   c0001a78 <st_dword>
c00046a3:	8d 43 18             	lea    eax,[ebx+0x18]
c00046a6:	31 c9                	xor    ecx,ecx
c00046a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ab:	ba 01 00 00 00       	mov    edx,0x1
c00046b0:	e8 c6 d3 ff ff       	call   c0001a7b <st_qword>
c00046b5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046b9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046bd:	83 c2 ff             	add    edx,0xffffffff
c00046c0:	89 e8                	mov    eax,ebp
c00046c2:	83 d1 ff             	adc    ecx,0xffffffff
c00046c5:	e8 b1 d3 ff ff       	call   c0001a7b <st_qword>
c00046ca:	31 c9                	xor    ecx,ecx
c00046cc:	8d 43 28             	lea    eax,[ebx+0x28]
c00046cf:	ba 22 00 00 00       	mov    edx,0x22
c00046d4:	e8 a2 d3 ff ff       	call   c0001a7b <st_qword>
c00046d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046e1:	83 c2 de             	add    edx,0xffffffde
c00046e4:	8d 43 30             	lea    eax,[ebx+0x30]
c00046e7:	83 d1 ff             	adc    ecx,0xffffffff
c00046ea:	31 f6                	xor    esi,esi
c00046ec:	e8 8a d3 ff ff       	call   c0001a7b <st_qword>
c00046f1:	8d 43 54             	lea    eax,[ebx+0x54]
c00046f4:	ba 80 00 00 00       	mov    edx,0x80
c00046f9:	e8 7a d3 ff ff       	call   c0001a78 <st_dword>
c00046fe:	8d 43 50             	lea    eax,[ebx+0x50]
c0004701:	ba 80 00 00 00       	mov    edx,0x80
c0004706:	e8 6d d3 ff ff       	call   c0001a78 <st_dword>
c000470b:	ba 02 00 00 00       	mov    edx,0x2
c0004710:	89 f8                	mov    eax,edi
c0004712:	e8 61 d3 ff ff       	call   c0001a78 <st_dword>
c0004717:	8d 53 38             	lea    edx,[ebx+0x38]
c000471a:	b9 10 00 00 00       	mov    ecx,0x10
c000471f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004723:	e8 ad d9 ff ff       	call   c00020d5 <make_rand>
c0004728:	83 c8 ff             	or     eax,0xffffffff
c000472b:	46                   	inc    esi
c000472c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004731:	e8 fb d8 ff ff       	call   c0002031 <crc32>
c0004736:	83 fe 5c             	cmp    esi,0x5c
c0004739:	75 f0                	jne    c000472b <create_partition+0x359>
c000473b:	f7 d0                	not    eax
c000473d:	8d 73 10             	lea    esi,[ebx+0x10]
c0004740:	89 c2                	mov    edx,eax
c0004742:	89 f0                	mov    eax,esi
c0004744:	e8 2f d3 ff ff       	call   c0001a78 <st_dword>
c0004749:	83 ec 0c             	sub    esp,0xc
c000474c:	6a 01                	push   0x1
c000474e:	6a 00                	push   0x0
c0004750:	6a 01                	push   0x1
c0004752:	53                   	push   ebx
c0004753:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004757:	e8 71 d2 ff ff       	call   c00019cd <disk_write>
c000475c:	83 c4 20             	add    esp,0x20
c000475f:	85 c0                	test   eax,eax
c0004761:	0f 85 9c fc ff ff    	jne    c0004403 <create_partition+0x31>
c0004767:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000476b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000476f:	83 c2 ff             	add    edx,0xffffffff
c0004772:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004775:	83 d1 ff             	adc    ecx,0xffffffff
c0004778:	e8 fe d2 ff ff       	call   c0001a7b <st_qword>
c000477d:	ba 01 00 00 00       	mov    edx,0x1
c0004782:	31 c9                	xor    ecx,ecx
c0004784:	89 e8                	mov    eax,ebp
c0004786:	e8 f0 d2 ff ff       	call   c0001a7b <st_qword>
c000478b:	89 f8                	mov    eax,edi
c000478d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004791:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004795:	31 ff                	xor    edi,edi
c0004797:	e8 df d2 ff ff       	call   c0001a7b <st_qword>
c000479c:	89 f0                	mov    eax,esi
c000479e:	31 d2                	xor    edx,edx
c00047a0:	e8 d3 d2 ff ff       	call   c0001a78 <st_dword>
c00047a5:	83 c8 ff             	or     eax,0xffffffff
c00047a8:	47                   	inc    edi
c00047a9:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047ae:	e8 7e d8 ff ff       	call   c0002031 <crc32>
c00047b3:	83 ff 5c             	cmp    edi,0x5c
c00047b6:	75 f0                	jne    c00047a8 <create_partition+0x3d6>
c00047b8:	f7 d0                	not    eax
c00047ba:	89 c2                	mov    edx,eax
c00047bc:	89 f0                	mov    eax,esi
c00047be:	e8 b5 d2 ff ff       	call   c0001a78 <st_dword>
c00047c3:	83 ec 0c             	sub    esp,0xc
c00047c6:	6a 01                	push   0x1
c00047c8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047cc:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047d0:	83 c0 ff             	add    eax,0xffffffff
c00047d3:	83 d2 ff             	adc    edx,0xffffffff
c00047d6:	52                   	push   edx
c00047d7:	50                   	push   eax
c00047d8:	53                   	push   ebx
c00047d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047dd:	e8 eb d1 ff ff       	call   c00019cd <disk_write>
c00047e2:	83 c4 20             	add    esp,0x20
c00047e5:	85 c0                	test   eax,eax
c00047e7:	0f 85 16 fc ff ff    	jne    c0004403 <create_partition+0x31>
c00047ed:	31 d2                	xor    edx,edx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	b9 00 02 00 00       	mov    ecx,0x200
c00047f6:	e8 9b d2 ff ff       	call   c0001a96 <mem_set>
c00047fb:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004801:	b9 10 00 00 00       	mov    ecx,0x10
c0004806:	ba 90 71 02 c0       	mov    edx,0xc0027190
c000480b:	e8 71 d2 ff ff       	call   c0001a81 <mem_cpy>
c0004810:	e9 21 01 00 00       	jmp    c0004936 <create_partition+0x564>
c0004815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004819:	b9 05 00 00 00       	mov    ecx,0x5
c000481e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004821:	bf 08 00 00 00       	mov    edi,0x8
c0004826:	89 f8                	mov    eax,edi
c0004828:	31 d2                	xor    edx,edx
c000482a:	0f b6 f0             	movzx  esi,al
c000482d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004830:	f7 f6                	div    esi
c0004832:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004837:	76 0a                	jbe    c0004843 <create_partition+0x471>
c0004839:	d1 e7                	shl    edi,1
c000483b:	49                   	dec    ecx
c000483c:	75 e8                	jne    c0004826 <create_partition+0x454>
c000483e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004843:	b9 00 02 00 00       	mov    ecx,0x200
c0004848:	31 d2                	xor    edx,edx
c000484a:	89 d8                	mov    eax,ebx
c000484c:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004852:	e8 3f d2 ff ff       	call   c0001a96 <mem_set>
c0004857:	b9 64 00 00 00       	mov    ecx,0x64
c000485c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000485f:	31 d2                	xor    edx,edx
c0004861:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004869:	f7 f1                	div    ecx
c000486b:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004870:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004874:	89 f8                	mov    eax,edi
c0004876:	0f b6 c0             	movzx  eax,al
c0004879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000487d:	e9 80 00 00 00       	jmp    c0004902 <create_partition+0x530>
c0004882:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004885:	29 cf                	sub    edi,ecx
c0004887:	89 ca                	mov    edx,ecx
c0004889:	89 f0                	mov    eax,esi
c000488b:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004890:	e8 e3 d1 ff ff       	call   c0001a78 <st_dword>
c0004895:	8d 46 04             	lea    eax,[esi+0x4]
c0004898:	89 fa                	mov    edx,edi
c000489a:	83 c6 10             	add    esi,0x10
c000489d:	e8 d6 d1 ff ff       	call   c0001a78 <st_dword>
c00048a2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048a6:	31 d2                	xor    edx,edx
c00048a8:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ab:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048af:	89 c8                	mov    eax,ecx
c00048b1:	01 f9                	add    ecx,edi
c00048b3:	f7 f5                	div    ebp
c00048b5:	89 d5                	mov    ebp,edx
c00048b7:	31 d2                	xor    edx,edx
c00048b9:	45                   	inc    ebp
c00048ba:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048be:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048c1:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048c4:	89 c2                	mov    edx,eax
c00048c6:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048c9:	c1 ea 02             	shr    edx,0x2
c00048cc:	83 e2 c0             	and    edx,0xffffffc0
c00048cf:	09 ea                	or     edx,ebp
c00048d1:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d6:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048d9:	31 d2                	xor    edx,edx
c00048db:	f7 f5                	div    ebp
c00048dd:	89 d7                	mov    edi,edx
c00048df:	31 d2                	xor    edx,edx
c00048e1:	47                   	inc    edi
c00048e2:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048e6:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048e9:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048ec:	89 c5                	mov    ebp,eax
c00048ee:	c1 ed 02             	shr    ebp,0x2
c00048f1:	83 e5 c0             	and    ebp,0xffffffc0
c00048f4:	09 ef                	or     edi,ebp
c00048f6:	89 fa                	mov    edx,edi
c00048f8:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c00048fb:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004900:	74 34                	je     c0004936 <create_partition+0x564>
c0004902:	85 c9                	test   ecx,ecx
c0004904:	74 30                	je     c0004936 <create_partition+0x564>
c0004906:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004909:	76 2b                	jbe    c0004936 <create_partition+0x564>
c000490b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000490f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004913:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004916:	83 ff 64             	cmp    edi,0x64
c0004919:	76 4b                	jbe    c0004966 <create_partition+0x594>
c000491b:	89 f8                	mov    eax,edi
c000491d:	01 c8                	add    eax,ecx
c000491f:	0f 82 5d ff ff ff    	jb     c0004882 <create_partition+0x4b0>
c0004925:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004928:	0f 87 54 ff ff ff    	ja     c0004882 <create_partition+0x4b0>
c000492e:	85 ff                	test   edi,edi
c0004930:	0f 85 51 ff ff ff    	jne    c0004887 <create_partition+0x4b5>
c0004936:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000493c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004941:	e8 2e d1 ff ff       	call   c0001a74 <st_word>
c0004946:	83 ec 0c             	sub    esp,0xc
c0004949:	6a 01                	push   0x1
c000494b:	6a 00                	push   0x0
c000494d:	6a 00                	push   0x0
c000494f:	53                   	push   ebx
c0004950:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004954:	e8 74 d0 ff ff       	call   c00019cd <disk_write>
c0004959:	83 c4 20             	add    esp,0x20
c000495c:	85 c0                	test   eax,eax
c000495e:	0f 95 c0             	setne  al
c0004961:	0f b6 c0             	movzx  eax,al
c0004964:	eb 0e                	jmp    c0004974 <create_partition+0x5a2>
c0004966:	74 07                	je     c000496f <create_partition+0x59d>
c0004968:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000496d:	eb ac                	jmp    c000491b <create_partition+0x549>
c000496f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004972:	eb a7                	jmp    c000491b <create_partition+0x549>
c0004974:	83 c4 5c             	add    esp,0x5c
c0004977:	5b                   	pop    ebx
c0004978:	5e                   	pop    esi
c0004979:	5f                   	pop    edi
c000497a:	5d                   	pop    ebp
c000497b:	c3                   	ret    

c000497c <get_fileinfo>:
c000497c:	55                   	push   ebp
c000497d:	57                   	push   edi
c000497e:	56                   	push   esi
c000497f:	53                   	push   ebx
c0004980:	83 ec 1c             	sub    esp,0x1c
c0004983:	8b 30                	mov    esi,DWORD PTR [eax]
c0004985:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004989:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000498d:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004990:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004993:	0f 84 dc 01 00 00    	je     c0004b75 <get_fileinfo+0x1f9>
c0004999:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000499c:	75 0f                	jne    c00049ad <get_fileinfo+0x31>
c000499e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049a1:	83 c4 1c             	add    esp,0x1c
c00049a4:	5b                   	pop    ebx
c00049a5:	5e                   	pop    esi
c00049a6:	5f                   	pop    edi
c00049a7:	5d                   	pop    ebp
c00049a8:	e9 58 d5 ff ff       	jmp    c0001f05 <get_xfileinfo>
c00049ad:	89 d3                	mov    ebx,edx
c00049af:	89 c6                	mov    esi,eax
c00049b1:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049b5:	74 6a                	je     c0004a21 <get_fileinfo+0xa5>
c00049b7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049bf:	31 ed                	xor    ebp,ebp
c00049c1:	31 ff                	xor    edi,edi
c00049c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049cb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049ce:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049d2:	66 85 d2             	test   dx,dx
c00049d5:	74 3e                	je     c0004a15 <get_fileinfo+0x99>
c00049d7:	66 85 ed             	test   bp,bp
c00049da:	75 0c                	jne    c00049e8 <get_fileinfo+0x6c>
c00049dc:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049e2:	66 3d ff 07          	cmp    ax,0x7ff
c00049e6:	76 22                	jbe    c0004a0a <get_fileinfo+0x8e>
c00049e8:	b9 ff 00 00 00       	mov    ecx,0xff
c00049ed:	89 e8                	mov    eax,ebp
c00049ef:	29 f9                	sub    ecx,edi
c00049f1:	c1 e0 10             	shl    eax,0x10
c00049f4:	09 d0                	or     eax,edx
c00049f6:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00049fa:	e8 a3 d1 ff ff       	call   c0001ba2 <put_utf>
c00049ff:	84 c0                	test   al,al
c0004a01:	74 10                	je     c0004a13 <get_fileinfo+0x97>
c0004a03:	0f b6 c0             	movzx  eax,al
c0004a06:	31 d2                	xor    edx,edx
c0004a08:	01 c7                	add    edi,eax
c0004a0a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a0f:	89 d5                	mov    ebp,edx
c0004a11:	eb b0                	jmp    c00049c3 <get_fileinfo+0x47>
c0004a13:	31 ff                	xor    edi,edi
c0004a15:	66 85 ed             	test   bp,bp
c0004a18:	74 02                	je     c0004a1c <get_fileinfo+0xa0>
c0004a1a:	31 ff                	xor    edi,edi
c0004a1c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a21:	31 ff                	xor    edi,edi
c0004a23:	31 c9                	xor    ecx,ecx
c0004a25:	83 f9 0a             	cmp    ecx,0xa
c0004a28:	0f 87 ad 00 00 00    	ja     c0004adb <get_fileinfo+0x15f>
c0004a2e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a31:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a34:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a38:	66 83 fa 20          	cmp    dx,0x20
c0004a3c:	0f 84 92 00 00 00    	je     c0004ad4 <get_fileinfo+0x158>
c0004a42:	66 83 fa 05          	cmp    dx,0x5
c0004a46:	75 05                	jne    c0004a4d <get_fileinfo+0xd1>
c0004a48:	ba e5 00 00 00       	mov    edx,0xe5
c0004a4d:	83 ff 0b             	cmp    edi,0xb
c0004a50:	77 0b                	ja     c0004a5d <get_fileinfo+0xe1>
c0004a52:	83 fd 09             	cmp    ebp,0x9
c0004a55:	75 06                	jne    c0004a5d <get_fileinfo+0xe1>
c0004a57:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a5c:	47                   	inc    edi
c0004a5d:	0f b7 c2             	movzx  eax,dx
c0004a60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a64:	e8 6d d0 ff ff       	call   c0001ad6 <dbc_1st>
c0004a69:	85 c0                	test   eax,eax
c0004a6b:	74 2f                	je     c0004a9c <get_fileinfo+0x120>
c0004a6d:	83 fd 08             	cmp    ebp,0x8
c0004a70:	74 2a                	je     c0004a9c <get_fileinfo+0x120>
c0004a72:	83 fd 0b             	cmp    ebp,0xb
c0004a75:	74 25                	je     c0004a9c <get_fileinfo+0x120>
c0004a77:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a7a:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a7e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a82:	e8 52 d0 ff ff       	call   c0001ad9 <dbc_2nd>
c0004a87:	85 c0                	test   eax,eax
c0004a89:	74 11                	je     c0004a9c <get_fileinfo+0x120>
c0004a8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a8f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a94:	c1 e2 08             	shl    edx,0x8
c0004a97:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a9a:	09 c2                	or     edx,eax
c0004a9c:	0f b7 d2             	movzx  edx,dx
c0004a9f:	50                   	push   eax
c0004aa0:	50                   	push   eax
c0004aa1:	68 b5 01 00 00       	push   0x1b5
c0004aa6:	52                   	push   edx
c0004aa7:	e8 46 38 00 00       	call   c00082f2 <ff_oem2uni>
c0004aac:	83 c4 10             	add    esp,0x10
c0004aaf:	66 85 c0             	test   ax,ax
c0004ab2:	75 04                	jne    c0004ab8 <get_fileinfo+0x13c>
c0004ab4:	31 ff                	xor    edi,edi
c0004ab6:	eb 23                	jmp    c0004adb <get_fileinfo+0x15f>
c0004ab8:	b9 0c 00 00 00       	mov    ecx,0xc
c0004abd:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ac1:	29 f9                	sub    ecx,edi
c0004ac3:	0f b7 c0             	movzx  eax,ax
c0004ac6:	e8 d7 d0 ff ff       	call   c0001ba2 <put_utf>
c0004acb:	84 c0                	test   al,al
c0004acd:	74 e5                	je     c0004ab4 <get_fileinfo+0x138>
c0004acf:	0f b6 c0             	movzx  eax,al
c0004ad2:	01 c7                	add    edi,eax
c0004ad4:	89 e9                	mov    ecx,ebp
c0004ad6:	e9 4a ff ff ff       	jmp    c0004a25 <get_fileinfo+0xa9>
c0004adb:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004ae0:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004ae4:	75 54                	jne    c0004b3a <get_fileinfo+0x1be>
c0004ae6:	85 ff                	test   edi,edi
c0004ae8:	75 0b                	jne    c0004af5 <get_fileinfo+0x179>
c0004aea:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004aee:	ba 01 00 00 00       	mov    edx,0x1
c0004af3:	eb 33                	jmp    c0004b28 <get_fileinfo+0x1ac>
c0004af5:	b1 08                	mov    cl,0x8
c0004af7:	31 d2                	xor    edx,edx
c0004af9:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004aff:	84 c0                	test   al,al
c0004b01:	74 25                	je     c0004b28 <get_fileinfo+0x1ac>
c0004b03:	66 83 f8 2e          	cmp    ax,0x2e
c0004b07:	74 16                	je     c0004b1f <get_fileinfo+0x1a3>
c0004b09:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b0c:	66 83 ff 19          	cmp    di,0x19
c0004b10:	77 0f                	ja     c0004b21 <get_fileinfo+0x1a5>
c0004b12:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b15:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b18:	74 07                	je     c0004b21 <get_fileinfo+0x1a5>
c0004b1a:	83 c0 20             	add    eax,0x20
c0004b1d:	eb 02                	jmp    c0004b21 <get_fileinfo+0x1a5>
c0004b1f:	b1 10                	mov    cl,0x10
c0004b21:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b25:	42                   	inc    edx
c0004b26:	eb d1                	jmp    c0004af9 <get_fileinfo+0x17d>
c0004b28:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b2d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b30:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b34:	75 04                	jne    c0004b3a <get_fileinfo+0x1be>
c0004b36:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b3a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3d:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b40:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b43:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b46:	83 c0 1c             	add    eax,0x1c
c0004b49:	e8 c1 ce ff ff       	call   c0001a0f <ld_dword>
c0004b4e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b55:	89 03                	mov    DWORD PTR [ebx],eax
c0004b57:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b5a:	83 c0 16             	add    eax,0x16
c0004b5d:	e8 a0 ce ff ff       	call   c0001a02 <ld_word>
c0004b62:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 18             	add    eax,0x18
c0004b6c:	e8 91 ce ff ff       	call   c0001a02 <ld_word>
c0004b71:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b75:	83 c4 1c             	add    esp,0x1c
c0004b78:	5b                   	pop    ebx
c0004b79:	5e                   	pop    esi
c0004b7a:	5f                   	pop    edi
c0004b7b:	5d                   	pop    ebp
c0004b7c:	c3                   	ret    

c0004b7d <ld_clust.isra.0>:
c0004b7d:	56                   	push   esi
c0004b7e:	89 c6                	mov    esi,eax
c0004b80:	53                   	push   ebx
c0004b81:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b84:	89 d3                	mov    ebx,edx
c0004b86:	e8 77 ce ff ff       	call   c0001a02 <ld_word>
c0004b8b:	0f b7 c8             	movzx  ecx,ax
c0004b8e:	89 f0                	mov    eax,esi
c0004b90:	3c 03                	cmp    al,0x3
c0004b92:	75 0d                	jne    c0004ba1 <ld_clust.isra.0+0x24>
c0004b94:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b97:	e8 66 ce ff ff       	call   c0001a02 <ld_word>
c0004b9c:	c1 e0 10             	shl    eax,0x10
c0004b9f:	09 c1                	or     ecx,eax
c0004ba1:	89 c8                	mov    eax,ecx
c0004ba3:	5b                   	pop    ebx
c0004ba4:	5e                   	pop    esi
c0004ba5:	c3                   	ret    

c0004ba6 <st_clust.isra.1>:
c0004ba6:	56                   	push   esi
c0004ba7:	89 c6                	mov    esi,eax
c0004ba9:	53                   	push   ebx
c0004baa:	89 d3                	mov    ebx,edx
c0004bac:	0f b7 d1             	movzx  edx,cx
c0004baf:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bb2:	e8 bd ce ff ff       	call   c0001a74 <st_word>
c0004bb7:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bba:	75 0f                	jne    c0004bcb <st_clust.isra.1+0x25>
c0004bbc:	c1 e9 10             	shr    ecx,0x10
c0004bbf:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc2:	89 ca                	mov    edx,ecx
c0004bc4:	5b                   	pop    ebx
c0004bc5:	5e                   	pop    esi
c0004bc6:	e9 a9 ce ff ff       	jmp    c0001a74 <st_word>
c0004bcb:	5b                   	pop    ebx
c0004bcc:	5e                   	pop    esi
c0004bcd:	c3                   	ret    

c0004bce <init_alloc_info.isra.2>:
c0004bce:	56                   	push   esi
c0004bcf:	53                   	push   ebx
c0004bd0:	89 c6                	mov    esi,eax
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	51                   	push   ecx
c0004bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0004bd7:	83 c0 34             	add    eax,0x34
c0004bda:	e8 30 ce ff ff       	call   c0001a0f <ld_dword>
c0004bdf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004be2:	8b 06                	mov    eax,DWORD PTR [esi]
c0004be4:	83 c0 38             	add    eax,0x38
c0004be7:	e8 3b ce ff ff       	call   c0001a27 <ld_qword>
c0004bec:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bef:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004bf2:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf4:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004bf7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bfe:	83 e0 02             	and    eax,0x2
c0004c01:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c04:	5b                   	pop    ebx
c0004c05:	5b                   	pop    ebx
c0004c06:	5e                   	pop    esi
c0004c07:	c3                   	ret    

c0004c08 <follow_path>:
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	89 c3                	mov    ebx,eax
c0004c0c:	83 ec 14             	sub    esp,0x14
c0004c0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c13:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c19:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c1b:	80 fa 5c             	cmp    dl,0x5c
c0004c1e:	75 07                	jne    c0004c27 <follow_path+0x1f>
c0004c20:	40                   	inc    eax
c0004c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c25:	eb ee                	jmp    c0004c15 <follow_path+0xd>
c0004c27:	80 fa 2f             	cmp    dl,0x2f
c0004c2a:	74 f4                	je     c0004c20 <follow_path+0x18>
c0004c2c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c33:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c3a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c3d:	77 52                	ja     c0004c91 <follow_path+0x89>
c0004c3f:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c43:	31 d2                	xor    edx,edx
c0004c45:	89 d8                	mov    eax,ebx
c0004c47:	e8 12 e3 ff ff       	call   c0002f5e <dir_sdi>
c0004c4c:	eb 7c                	jmp    c0004cca <follow_path+0xc2>
c0004c4e:	89 d8                	mov    eax,ebx
c0004c50:	e8 6e f2 ff ff       	call   c0003ec3 <dir_find>
c0004c55:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c58:	85 c0                	test   eax,eax
c0004c5a:	75 46                	jne    c0004ca2 <follow_path+0x9a>
c0004c5c:	80 e2 04             	and    dl,0x4
c0004c5f:	75 69                	jne    c0004cca <follow_path+0xc2>
c0004c61:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c65:	74 5e                	je     c0004cc5 <follow_path+0xbd>
c0004c67:	8a 06                	mov    al,BYTE PTR [esi]
c0004c69:	3c 04                	cmp    al,0x4
c0004c6b:	75 41                	jne    c0004cae <follow_path+0xa6>
c0004c6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c70:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c74:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c77:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c7a:	30 c0                	xor    al,al
c0004c7c:	09 d0                	or     eax,edx
c0004c7e:	89 da                	mov    edx,ebx
c0004c80:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c83:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c86:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c89:	8d 46 10             	lea    eax,[esi+0x10]
c0004c8c:	e8 3d ff ff ff       	call   c0004bce <init_alloc_info.isra.2>
c0004c91:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c95:	89 d8                	mov    eax,ebx
c0004c97:	e8 a9 ed ff ff       	call   c0003a45 <create_name>
c0004c9c:	85 c0                	test   eax,eax
c0004c9e:	74 ae                	je     c0004c4e <follow_path+0x46>
c0004ca0:	eb 28                	jmp    c0004cca <follow_path+0xc2>
c0004ca2:	83 f8 04             	cmp    eax,0x4
c0004ca5:	75 23                	jne    c0004cca <follow_path+0xc2>
c0004ca7:	80 e2 04             	and    dl,0x4
c0004caa:	74 19                	je     c0004cc5 <follow_path+0xbd>
c0004cac:	eb 1c                	jmp    c0004cca <follow_path+0xc2>
c0004cae:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cb1:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cb7:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cbb:	e8 bd fe ff ff       	call   c0004b7d <ld_clust.isra.0>
c0004cc0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cc3:	eb cc                	jmp    c0004c91 <follow_path+0x89>
c0004cc5:	b8 05 00 00 00       	mov    eax,0x5
c0004cca:	83 c4 14             	add    esp,0x14
c0004ccd:	5b                   	pop    ebx
c0004cce:	5e                   	pop    esi
c0004ccf:	c3                   	ret    

c0004cd0 <f_mount>:
c0004cd0:	53                   	push   ebx
c0004cd1:	83 ec 18             	sub    esp,0x18
c0004cd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004cd8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004cdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004ce4:	e8 fb d2 ff ff       	call   c0001fe4 <get_ldnumber>
c0004ce9:	89 c2                	mov    edx,eax
c0004ceb:	b8 0b 00 00 00       	mov    eax,0xb
c0004cf0:	85 d2                	test   edx,edx
c0004cf2:	78 39                	js     c0004d2d <f_mount+0x5d>
c0004cf4:	8b 04 95 20 bd 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd42e0]
c0004cfb:	85 c0                	test   eax,eax
c0004cfd:	74 03                	je     c0004d02 <f_mount+0x32>
c0004cff:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d06:	85 c0                	test   eax,eax
c0004d08:	74 03                	je     c0004d0d <f_mount+0x3d>
c0004d0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d11:	89 04 95 20 bd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd42e0],eax
c0004d18:	31 c0                	xor    eax,eax
c0004d1a:	84 db                	test   bl,bl
c0004d1c:	74 0f                	je     c0004d2d <f_mount+0x5d>
c0004d1e:	31 c9                	xor    ecx,ecx
c0004d20:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d24:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d28:	e8 65 d7 ff ff       	call   c0002492 <mount_volume>
c0004d2d:	83 c4 18             	add    esp,0x18
c0004d30:	5b                   	pop    ebx
c0004d31:	c3                   	ret    

c0004d32 <f_open>:
c0004d32:	55                   	push   ebp
c0004d33:	bd 09 00 00 00       	mov    ebp,0x9
c0004d38:	57                   	push   edi
c0004d39:	56                   	push   esi
c0004d3a:	53                   	push   ebx
c0004d3b:	83 ec 7c             	sub    esp,0x7c
c0004d3e:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d45:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d4c:	85 db                	test   ebx,ebx
c0004d4e:	0f 84 10 04 00 00    	je     c0005164 <f_open+0x432>
c0004d54:	89 fe                	mov    esi,edi
c0004d56:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d5a:	83 e6 3f             	and    esi,0x3f
c0004d5d:	89 f0                	mov    eax,esi
c0004d5f:	0f b6 c8             	movzx  ecx,al
c0004d62:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d69:	e8 24 d7 ff ff       	call   c0002492 <mount_volume>
c0004d6e:	89 c5                	mov    ebp,eax
c0004d70:	85 c0                	test   eax,eax
c0004d72:	0f 85 e6 03 00 00    	jne    c000515e <f_open+0x42c>
c0004d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d7c:	bd 11 00 00 00       	mov    ebp,0x11
c0004d81:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d85:	83 ec 0c             	sub    esp,0xc
c0004d88:	68 60 04 00 00       	push   0x460
c0004d8d:	e8 a3 34 00 00       	call   c0008235 <ff_memalloc>
c0004d92:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d96:	83 c4 10             	add    esp,0x10
c0004d99:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d9e:	0f 84 c0 03 00 00    	je     c0005164 <f_open+0x432>
c0004da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004da8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dac:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004db2:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004db5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004db8:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dbf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dc3:	e8 40 fe ff ff       	call   c0004c08 <follow_path>
c0004dc8:	89 c5                	mov    ebp,eax
c0004dca:	85 c0                	test   eax,eax
c0004dcc:	75 0c                	jne    c0004dda <f_open+0xa8>
c0004dce:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004dd3:	79 05                	jns    c0004dda <f_open+0xa8>
c0004dd5:	bd 06 00 00 00       	mov    ebp,0x6
c0004dda:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004de0:	0f 84 84 01 00 00    	je     c0004f6a <f_open+0x238>
c0004de6:	85 ed                	test   ebp,ebp
c0004de8:	74 20                	je     c0004e0a <f_open+0xd8>
c0004dea:	83 fd 04             	cmp    ebp,0x4
c0004ded:	0f 85 58 03 00 00    	jne    c000514b <f_open+0x419>
c0004df3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df7:	83 ce 08             	or     esi,0x8
c0004dfa:	e8 8a f2 ff ff       	call   c0004089 <dir_register>
c0004dff:	89 c5                	mov    ebp,eax
c0004e01:	85 c0                	test   eax,eax
c0004e03:	74 2f                	je     c0004e34 <f_open+0x102>
c0004e05:	e9 41 03 00 00       	jmp    c000514b <f_open+0x419>
c0004e0a:	bd 07 00 00 00       	mov    ebp,0x7
c0004e0f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e14:	0f 85 31 03 00 00    	jne    c000514b <f_open+0x419>
c0004e1a:	bd 08 00 00 00       	mov    ebp,0x8
c0004e1f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e25:	0f 85 20 03 00 00    	jne    c000514b <f_open+0x419>
c0004e2b:	83 e7 08             	and    edi,0x8
c0004e2e:	0f 84 65 01 00 00    	je     c0004f99 <f_open+0x267>
c0004e34:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e38:	8a 02                	mov    al,BYTE PTR [edx]
c0004e3a:	3c 04                	cmp    al,0x4
c0004e3c:	0f 85 97 00 00 00    	jne    c0004ed9 <f_open+0x1a7>
c0004e42:	8d 42 10             	lea    eax,[edx+0x10]
c0004e45:	89 13                	mov    DWORD PTR [ebx],edx
c0004e47:	89 da                	mov    edx,ebx
c0004e49:	e8 80 fd ff ff       	call   c0004bce <init_alloc_info.isra.2>
c0004e4e:	31 d2                	xor    edx,edx
c0004e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e54:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e59:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e5c:	83 c0 02             	add    eax,0x2
c0004e5f:	e8 32 cc ff ff       	call   c0001a96 <mem_set>
c0004e64:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e69:	31 d2                	xor    edx,edx
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e72:	83 c0 26             	add    eax,0x26
c0004e75:	e8 1c cc ff ff       	call   c0001a96 <mem_set>
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e81:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e85:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e8a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e8d:	83 c0 08             	add    eax,0x8
c0004e90:	e8 e3 cb ff ff       	call   c0001a78 <st_dword>
c0004e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ea0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ea4:	e8 b7 ea ff ff       	call   c0003960 <store_xdir>
c0004ea9:	89 c5                	mov    ebp,eax
c0004eab:	85 c0                	test   eax,eax
c0004ead:	0f 85 98 02 00 00    	jne    c000514b <f_open+0x419>
c0004eb3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004eb6:	85 d2                	test   edx,edx
c0004eb8:	0f 84 db 00 00 00    	je     c0004f99 <f_open+0x267>
c0004ebe:	31 c9                	xor    ecx,ecx
c0004ec0:	89 d8                	mov    eax,ebx
c0004ec2:	e8 8e e3 ff ff       	call   c0003255 <remove_chain>
c0004ec7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ecb:	89 c5                	mov    ebp,eax
c0004ecd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ed0:	48                   	dec    eax
c0004ed1:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ed4:	e9 b8 00 00 00       	jmp    c0004f91 <f_open+0x25f>
c0004ed9:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004edd:	89 ea                	mov    edx,ebp
c0004edf:	e8 99 fc ff ff       	call   c0004b7d <ld_clust.isra.0>
c0004ee4:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ee9:	89 c7                	mov    edi,eax
c0004eeb:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004eee:	e8 85 cb ff ff       	call   c0001a78 <st_dword>
c0004ef3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004ef7:	31 c9                	xor    ecx,ecx
c0004ef9:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f05:	e8 9c fc ff ff       	call   c0004ba6 <st_clust.isra.1>
c0004f0a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f0e:	31 d2                	xor    edx,edx
c0004f10:	83 c0 1c             	add    eax,0x1c
c0004f13:	e8 60 cb ff ff       	call   c0001a78 <st_dword>
c0004f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f1c:	85 ff                	test   edi,edi
c0004f1e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f22:	74 75                	je     c0004f99 <f_open+0x267>
c0004f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f28:	31 c9                	xor    ecx,ecx
c0004f2a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f2d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f38:	89 fa                	mov    edx,edi
c0004f3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f3e:	e8 12 e3 ff ff       	call   c0003255 <remove_chain>
c0004f43:	89 c5                	mov    ebp,eax
c0004f45:	85 c0                	test   eax,eax
c0004f47:	0f 85 fe 01 00 00    	jne    c000514b <f_open+0x419>
c0004f4d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f59:	4f                   	dec    edi
c0004f5a:	e8 81 d2 ff ff       	call   c00021e0 <move_window>
c0004f5f:	89 c5                	mov    ebp,eax
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f68:	eb 27                	jmp    c0004f91 <f_open+0x25f>
c0004f6a:	85 ed                	test   ebp,ebp
c0004f6c:	0f 85 d9 01 00 00    	jne    c000514b <f_open+0x419>
c0004f72:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f76:	bd 04 00 00 00       	mov    ebp,0x4
c0004f7b:	a8 10                	test   al,0x10
c0004f7d:	0f 85 c8 01 00 00    	jne    c000514b <f_open+0x419>
c0004f83:	83 e7 02             	and    edi,0x2
c0004f86:	74 11                	je     c0004f99 <f_open+0x267>
c0004f88:	bd 07 00 00 00       	mov    ebp,0x7
c0004f8d:	a8 01                	test   al,0x1
c0004f8f:	eb 02                	jmp    c0004f93 <f_open+0x261>
c0004f91:	85 ed                	test   ebp,ebp
c0004f93:	0f 85 b2 01 00 00    	jne    c000514b <f_open+0x419>
c0004f99:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f9f:	74 03                	je     c0004fa4 <f_open+0x272>
c0004fa1:	83 ce 40             	or     esi,0x40
c0004fa4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa8:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fab:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fae:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fb1:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fb4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fb8:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fbb:	8a 02                	mov    al,BYTE PTR [edx]
c0004fbd:	3c 04                	cmp    al,0x4
c0004fbf:	75 2a                	jne    c0004feb <f_open+0x2b9>
c0004fc1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fc5:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fd1:	30 c0                	xor    al,al
c0004fd3:	09 c8                	or     eax,ecx
c0004fd5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fd8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004fdc:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fdf:	8d 42 10             	lea    eax,[edx+0x10]
c0004fe2:	89 da                	mov    edx,ebx
c0004fe4:	e8 e5 fb ff ff       	call   c0004bce <init_alloc_info.isra.2>
c0004fe9:	eb 1c                	jmp    c0005007 <f_open+0x2d5>
c0004feb:	89 fa                	mov    edx,edi
c0004fed:	e8 8b fb ff ff       	call   c0004b7d <ld_clust.isra.0>
c0004ff2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ff5:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004ff8:	e8 12 ca ff ff       	call   c0001a0f <ld_dword>
c0004ffd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005004:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000500b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005012:	89 03                	mov    DWORD PTR [ebx],eax
c0005014:	31 d2                	xor    edx,edx
c0005016:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000501a:	b9 00 02 00 00       	mov    ecx,0x200
c000501f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005023:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005027:	89 f0                	mov    eax,esi
c0005029:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005030:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005033:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000503a:	8d 43 50             	lea    eax,[ebx+0x50]
c000503d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005044:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000504b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000504f:	e8 42 ca ff ff       	call   c0001a96 <mem_set>
c0005054:	83 e6 20             	and    esi,0x20
c0005057:	75 07                	jne    c0005060 <f_open+0x32e>
c0005059:	31 ed                	xor    ebp,ebp
c000505b:	e9 eb 00 00 00       	jmp    c000514b <f_open+0x419>
c0005060:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005063:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005066:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000506e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005072:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005076:	74 e1                	je     c0005059 <f_open+0x327>
c0005078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000507c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005080:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005083:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000508a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000508d:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005091:	31 ff                	xor    edi,edi
c0005093:	c1 e5 09             	shl    ebp,0x9
c0005096:	89 ee                	mov    esi,ebp
c0005098:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000509c:	89 f8                	mov    eax,edi
c000509e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050a2:	73 22                	jae    c00050c6 <f_open+0x394>
c00050a4:	89 d8                	mov    eax,ebx
c00050a6:	e8 bd dc ff ff       	call   c0002d68 <get_fat>
c00050ab:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050af:	89 c2                	mov    edx,eax
c00050b1:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050b5:	83 f8 01             	cmp    eax,0x1
c00050b8:	76 10                	jbe    c00050ca <f_open+0x398>
c00050ba:	83 f8 ff             	cmp    eax,0xffffffff
c00050bd:	75 d9                	jne    c0005098 <f_open+0x366>
c00050bf:	bd 01 00 00 00       	mov    ebp,0x1
c00050c4:	eb 09                	jmp    c00050cf <f_open+0x39d>
c00050c6:	31 ed                	xor    ebp,ebp
c00050c8:	eb 05                	jmp    c00050cf <f_open+0x39d>
c00050ca:	bd 02 00 00 00       	mov    ebp,0x2
c00050cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050d2:	85 ed                	test   ebp,ebp
c00050d4:	75 75                	jne    c000514b <f_open+0x419>
c00050d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050da:	25 ff 01 00 00       	and    eax,0x1ff
c00050df:	0f 84 74 ff ff ff    	je     c0005059 <f_open+0x327>
c00050e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050e9:	bd 02 00 00 00       	mov    ebp,0x2
c00050ee:	89 c8                	mov    eax,ecx
c00050f0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00050f4:	e8 a2 cb ff ff       	call   c0001c9b <clst2sect>
c00050f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00050fd:	89 d7                	mov    edi,edx
c00050ff:	09 c7                	or     edi,eax
c0005101:	74 48                	je     c000514b <f_open+0x419>
c0005103:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005107:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000510b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005113:	0f ac fe 09          	shrd   esi,edi,0x9
c0005117:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000511b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000511f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005122:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005126:	83 ec 0c             	sub    esp,0xc
c0005129:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000512c:	6a 01                	push   0x1
c000512e:	52                   	push   edx
c000512f:	50                   	push   eax
c0005130:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005134:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005138:	50                   	push   eax
c0005139:	e8 79 c8 ff ff       	call   c00019b7 <disk_read>
c000513e:	83 c4 20             	add    esp,0x20
c0005141:	85 c0                	test   eax,eax
c0005143:	0f 95 c0             	setne  al
c0005146:	0f b6 c0             	movzx  eax,al
c0005149:	89 c5                	mov    ebp,eax
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005152:	e8 f4 30 00 00       	call   c000824b <ff_memfree>
c0005157:	83 c4 10             	add    esp,0x10
c000515a:	85 ed                	test   ebp,ebp
c000515c:	74 06                	je     c0005164 <f_open+0x432>
c000515e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005164:	83 c4 7c             	add    esp,0x7c
c0005167:	89 e8                	mov    eax,ebp
c0005169:	5b                   	pop    ebx
c000516a:	5e                   	pop    esi
c000516b:	5f                   	pop    edi
c000516c:	5d                   	pop    ebp
c000516d:	c3                   	ret    

c000516e <f_read>:
c000516e:	55                   	push   ebp
c000516f:	57                   	push   edi
c0005170:	56                   	push   esi
c0005171:	53                   	push   ebx
c0005172:	83 ec 2c             	sub    esp,0x2c
c0005175:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005179:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000517d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005183:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005187:	89 d8                	mov    eax,ebx
c0005189:	e8 77 cf ff ff       	call   c0002105 <validate>
c000518e:	89 c5                	mov    ebp,eax
c0005190:	85 c0                	test   eax,eax
c0005192:	0f 85 4c 02 00 00    	jne    c00053e4 <f_read+0x276>
c0005198:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000519c:	85 ed                	test   ebp,ebp
c000519e:	0f 85 40 02 00 00    	jne    c00053e4 <f_read+0x276>
c00051a4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051a8:	0f 84 31 02 00 00    	je     c00053df <f_read+0x271>
c00051ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051b7:	bf 00 00 00 00       	mov    edi,0x0
c00051bc:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051bf:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051c3:	89 d1                	mov    ecx,edx
c00051c5:	19 f9                	sbb    ecx,edi
c00051c7:	0f 83 cf 00 00 00    	jae    c000529c <f_read+0x12e>
c00051cd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051d1:	e9 c6 00 00 00       	jmp    c000529c <f_read+0x12e>
c00051d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051d9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051dc:	89 d0                	mov    eax,edx
c00051de:	25 ff 01 00 00       	and    eax,0x1ff
c00051e3:	0f 85 c9 01 00 00    	jne    c00053b2 <f_read+0x244>
c00051e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ed:	89 d6                	mov    esi,edx
c00051ef:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00051f3:	89 cf                	mov    edi,ecx
c00051f5:	48                   	dec    eax
c00051f6:	0f ac fe 09          	shrd   esi,edi,0x9
c00051fa:	21 f0                	and    eax,esi
c00051fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005200:	0f 84 a6 00 00 00    	je     c00052ac <f_read+0x13e>
c0005206:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000520a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000520d:	89 c8                	mov    eax,ecx
c000520f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005212:	e8 84 ca ff ff       	call   c0001c9b <clst2sect>
c0005217:	89 d7                	mov    edi,edx
c0005219:	09 c7                	or     edi,eax
c000521b:	0f 84 b4 00 00 00    	je     c00052d5 <f_read+0x167>
c0005221:	31 ff                	xor    edi,edi
c0005223:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005227:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000522a:	01 c6                	add    esi,eax
c000522c:	11 d7                	adc    edi,edx
c000522e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005236:	0f 86 fd 00 00 00    	jbe    c0005339 <f_read+0x1cb>
c000523c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005240:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005244:	c1 e8 09             	shr    eax,0x9
c0005247:	89 04 24             	mov    DWORD PTR [esp],eax
c000524a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000524e:	03 14 24             	add    edx,DWORD PTR [esp]
c0005251:	39 c2                	cmp    edx,eax
c0005253:	76 07                	jbe    c000525c <f_read+0xee>
c0005255:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005259:	89 04 24             	mov    DWORD PTR [esp],eax
c000525c:	83 ec 0c             	sub    esp,0xc
c000525f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005263:	57                   	push   edi
c0005264:	56                   	push   esi
c0005265:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005269:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000526d:	50                   	push   eax
c000526e:	e8 44 c7 ff ff       	call   c00019b7 <disk_read>
c0005273:	83 c4 20             	add    esp,0x20
c0005276:	85 c0                	test   eax,eax
c0005278:	75 6e                	jne    c00052e8 <f_read+0x17a>
c000527a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000527e:	78 7e                	js     c00052fe <f_read+0x190>
c0005280:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005283:	c1 e6 09             	shl    esi,0x9
c0005286:	31 ff                	xor    edi,edi
c0005288:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000528c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005290:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005294:	01 30                	add    DWORD PTR [eax],esi
c0005296:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005299:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000529c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052a1:	0f 85 2f ff ff ff    	jne    c00051d6 <f_read+0x68>
c00052a7:	e9 38 01 00 00       	jmp    c00053e4 <f_read+0x276>
c00052ac:	89 c8                	mov    eax,ecx
c00052ae:	09 d0                	or     eax,edx
c00052b0:	75 05                	jne    c00052b7 <f_read+0x149>
c00052b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052b5:	eb 19                	jmp    c00052d0 <f_read+0x162>
c00052b7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052bb:	74 09                	je     c00052c6 <f_read+0x158>
c00052bd:	89 d8                	mov    eax,ebx
c00052bf:	e8 f8 c9 ff ff       	call   c0001cbc <clmt_clust>
c00052c4:	eb 0a                	jmp    c00052d0 <f_read+0x162>
c00052c6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 98 da ff ff       	call   c0002d68 <get_fat>
c00052d0:	83 f8 01             	cmp    eax,0x1
c00052d3:	77 0e                	ja     c00052e3 <f_read+0x175>
c00052d5:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052d9:	bd 02 00 00 00       	mov    ebp,0x2
c00052de:	e9 01 01 00 00       	jmp    c00053e4 <f_read+0x276>
c00052e3:	83 f8 ff             	cmp    eax,0xffffffff
c00052e6:	75 0e                	jne    c00052f6 <f_read+0x188>
c00052e8:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052ec:	bd 01 00 00 00       	mov    ebp,0x1
c00052f1:	e9 ee 00 00 00       	jmp    c00053e4 <f_read+0x276>
c00052f6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00052f9:	e9 08 ff ff ff       	jmp    c0005206 <f_read+0x98>
c00052fe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005301:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005304:	29 f0                	sub    eax,esi
c0005306:	19 fa                	sbb    edx,edi
c0005308:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000530b:	89 d7                	mov    edi,edx
c000530d:	ba 00 00 00 00       	mov    edx,0x0
c0005312:	89 f9                	mov    ecx,edi
c0005314:	19 d1                	sbb    ecx,edx
c0005316:	0f 83 64 ff ff ff    	jae    c0005280 <f_read+0x112>
c000531c:	89 c7                	mov    edi,eax
c000531e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005321:	c1 e7 09             	shl    edi,0x9
c0005324:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005328:	b9 00 02 00 00       	mov    ecx,0x200
c000532d:	01 f8                	add    eax,edi
c000532f:	e8 4d c7 ff ff       	call   c0001a81 <mem_cpy>
c0005334:	e9 47 ff ff ff       	jmp    c0005280 <f_read+0x112>
c0005339:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000533c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000533f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005342:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005346:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000534a:	75 05                	jne    c0005351 <f_read+0x1e3>
c000534c:	39 34 24             	cmp    DWORD PTR [esp],esi
c000534f:	74 5b                	je     c00053ac <f_read+0x23e>
c0005351:	8d 43 50             	lea    eax,[ebx+0x50]
c0005354:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005358:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535c:	79 2a                	jns    c0005388 <f_read+0x21a>
c000535e:	83 ec 0c             	sub    esp,0xc
c0005361:	6a 01                	push   0x1
c0005363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000536b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000536f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005373:	50                   	push   eax
c0005374:	e8 54 c6 ff ff       	call   c00019cd <disk_write>
c0005379:	83 c4 20             	add    esp,0x20
c000537c:	85 c0                	test   eax,eax
c000537e:	0f 85 64 ff ff ff    	jne    c00052e8 <f_read+0x17a>
c0005384:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005388:	83 ec 0c             	sub    esp,0xc
c000538b:	6a 01                	push   0x1
c000538d:	57                   	push   edi
c000538e:	56                   	push   esi
c000538f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005393:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005397:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000539b:	50                   	push   eax
c000539c:	e8 16 c6 ff ff       	call   c00019b7 <disk_read>
c00053a1:	83 c4 20             	add    esp,0x20
c00053a4:	85 c0                	test   eax,eax
c00053a6:	0f 85 3c ff ff ff    	jne    c00052e8 <f_read+0x17a>
c00053ac:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053af:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053b2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b5:	ba 00 02 00 00       	mov    edx,0x200
c00053ba:	25 ff 01 00 00       	and    eax,0x1ff
c00053bf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053c3:	29 c2                	sub    edx,eax
c00053c5:	39 d6                	cmp    esi,edx
c00053c7:	76 02                	jbe    c00053cb <f_read+0x25d>
c00053c9:	89 d6                	mov    esi,edx
c00053cb:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053cf:	89 f1                	mov    ecx,esi
c00053d1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053d5:	e8 a7 c6 ff ff       	call   c0001a81 <mem_cpy>
c00053da:	e9 a7 fe ff ff       	jmp    c0005286 <f_read+0x118>
c00053df:	bd 07 00 00 00       	mov    ebp,0x7
c00053e4:	83 c4 2c             	add    esp,0x2c
c00053e7:	89 e8                	mov    eax,ebp
c00053e9:	5b                   	pop    ebx
c00053ea:	5e                   	pop    esi
c00053eb:	5f                   	pop    edi
c00053ec:	5d                   	pop    ebp
c00053ed:	c3                   	ret    

c00053ee <f_write>:
c00053ee:	55                   	push   ebp
c00053ef:	57                   	push   edi
c00053f0:	56                   	push   esi
c00053f1:	53                   	push   ebx
c00053f2:	83 ec 2c             	sub    esp,0x2c
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005403:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005407:	89 d8                	mov    eax,ebx
c0005409:	e8 f7 cc ff ff       	call   c0002105 <validate>
c000540e:	89 c5                	mov    ebp,eax
c0005410:	85 c0                	test   eax,eax
c0005412:	0f 85 86 02 00 00    	jne    c000569e <f_write+0x2b0>
c0005418:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541c:	85 ed                	test   ebp,ebp
c000541e:	0f 85 7a 02 00 00    	jne    c000569e <f_write+0x2b0>
c0005424:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005428:	0f 84 6b 02 00 00    	je     c0005699 <f_write+0x2ab>
c000542e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005432:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005435:	0f 84 43 01 00 00    	je     c000557e <f_write+0x190>
c000543b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000543e:	89 c1                	mov    ecx,eax
c0005440:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005444:	0f 83 34 01 00 00    	jae    c000557e <f_write+0x190>
c000544a:	f7 d0                	not    eax
c000544c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005450:	e9 29 01 00 00       	jmp    c000557e <f_write+0x190>
c0005455:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005458:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545b:	89 d0                	mov    eax,edx
c000545d:	25 ff 01 00 00       	and    eax,0x1ff
c0005462:	0f 85 00 02 00 00    	jne    c0005668 <f_write+0x27a>
c0005468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000546c:	89 d6                	mov    esi,edx
c000546e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005472:	89 cf                	mov    edi,ecx
c0005474:	48                   	dec    eax
c0005475:	0f ac fe 09          	shrd   esi,edi,0x9
c0005479:	21 f0                	and    eax,esi
c000547b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000547f:	0f 84 06 01 00 00    	je     c000558b <f_write+0x19d>
c0005485:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005489:	0f 88 6e 01 00 00    	js     c00055fd <f_write+0x20f>
c000548f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005493:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005496:	89 c8                	mov    eax,ecx
c0005498:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000549c:	e8 fa c7 ff ff       	call   c0001c9b <clst2sect>
c00054a1:	89 d1                	mov    ecx,edx
c00054a3:	09 c1                	or     ecx,eax
c00054a5:	0f 84 1c 01 00 00    	je     c00055c7 <f_write+0x1d9>
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054b5:	01 c6                	add    esi,eax
c00054b7:	11 d7                	adc    edi,edx
c00054b9:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054c1:	0f 86 63 01 00 00    	jbe    c000562a <f_write+0x23c>
c00054c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054cf:	c1 e8 09             	shr    eax,0x9
c00054d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054da:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054de:	39 c2                	cmp    edx,eax
c00054e0:	76 08                	jbe    c00054ea <f_write+0xfc>
c00054e2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ea:	83 ec 0c             	sub    esp,0xc
c00054ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054f1:	57                   	push   edi
c00054f2:	56                   	push   esi
c00054f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054f7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054fb:	50                   	push   eax
c00054fc:	e8 cc c4 ff ff       	call   c00019cd <disk_write>
c0005501:	83 c4 20             	add    esp,0x20
c0005504:	85 c0                	test   eax,eax
c0005506:	0f 85 ce 00 00 00    	jne    c00055da <f_write+0x1ec>
c000550c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000550f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005512:	29 f0                	sub    eax,esi
c0005514:	19 fa                	sbb    edx,edi
c0005516:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000551a:	89 d7                	mov    edi,edx
c000551c:	ba 00 00 00 00       	mov    edx,0x0
c0005521:	89 f9                	mov    ecx,edi
c0005523:	19 d1                	sbb    ecx,edx
c0005525:	73 1c                	jae    c0005543 <f_write+0x155>
c0005527:	89 c7                	mov    edi,eax
c0005529:	b9 00 02 00 00       	mov    ecx,0x200
c000552e:	c1 e7 09             	shl    edi,0x9
c0005531:	8d 43 50             	lea    eax,[ebx+0x50]
c0005534:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005538:	89 fa                	mov    edx,edi
c000553a:	e8 42 c5 ff ff       	call   c0001a81 <mem_cpy>
c000553f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005543:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005547:	c1 e6 09             	shl    esi,0x9
c000554a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554e:	31 ff                	xor    edi,edi
c0005550:	01 30                	add    DWORD PTR [eax],esi
c0005552:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005556:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000555a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000555d:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005560:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005563:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005566:	89 c1                	mov    ecx,eax
c0005568:	39 f2                	cmp    edx,esi
c000556a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000556d:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005570:	19 f9                	sbb    ecx,edi
c0005572:	73 04                	jae    c0005578 <f_write+0x18a>
c0005574:	89 f2                	mov    edx,esi
c0005576:	89 f8                	mov    eax,edi
c0005578:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000557b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000557e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005583:	0f 85 cc fe ff ff    	jne    c0005455 <f_write+0x67>
c0005589:	eb 2e                	jmp    c00055b9 <f_write+0x1cb>
c000558b:	89 c8                	mov    eax,ecx
c000558d:	09 d0                	or     eax,edx
c000558f:	75 0b                	jne    c000559c <f_write+0x1ae>
c0005591:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005594:	31 d2                	xor    edx,edx
c0005596:	85 c0                	test   eax,eax
c0005598:	75 28                	jne    c00055c2 <f_write+0x1d4>
c000559a:	eb 12                	jmp    c00055ae <f_write+0x1c0>
c000559c:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055a0:	74 09                	je     c00055ab <f_write+0x1bd>
c00055a2:	89 d8                	mov    eax,ebx
c00055a4:	e8 13 c7 ff ff       	call   c0001cbc <clmt_clust>
c00055a9:	eb 0a                	jmp    c00055b5 <f_write+0x1c7>
c00055ab:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ae:	89 d8                	mov    eax,ebx
c00055b0:	e8 a1 da ff ff       	call   c0003056 <create_chain>
c00055b5:	85 c0                	test   eax,eax
c00055b7:	75 09                	jne    c00055c2 <f_write+0x1d4>
c00055b9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055bd:	e9 dc 00 00 00       	jmp    c000569e <f_write+0x2b0>
c00055c2:	83 f8 01             	cmp    eax,0x1
c00055c5:	75 0e                	jne    c00055d5 <f_write+0x1e7>
c00055c7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055cb:	bd 02 00 00 00       	mov    ebp,0x2
c00055d0:	e9 c9 00 00 00       	jmp    c000569e <f_write+0x2b0>
c00055d5:	83 f8 ff             	cmp    eax,0xffffffff
c00055d8:	75 0e                	jne    c00055e8 <f_write+0x1fa>
c00055da:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055de:	bd 01 00 00 00       	mov    ebp,0x1
c00055e3:	e9 b6 00 00 00       	jmp    c000569e <f_write+0x2b0>
c00055e8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055eb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055ef:	0f 85 90 fe ff ff    	jne    c0005485 <f_write+0x97>
c00055f5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055f8:	e9 88 fe ff ff       	jmp    c0005485 <f_write+0x97>
c00055fd:	83 ec 0c             	sub    esp,0xc
c0005600:	8d 43 50             	lea    eax,[ebx+0x50]
c0005603:	6a 01                	push   0x1
c0005605:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005608:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000560b:	50                   	push   eax
c000560c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005610:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005614:	50                   	push   eax
c0005615:	e8 b3 c3 ff ff       	call   c00019cd <disk_write>
c000561a:	83 c4 20             	add    esp,0x20
c000561d:	85 c0                	test   eax,eax
c000561f:	75 b9                	jne    c00055da <f_write+0x1ec>
c0005621:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005625:	e9 65 fe ff ff       	jmp    c000548f <f_write+0xa1>
c000562a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000562d:	75 05                	jne    c0005634 <f_write+0x246>
c000562f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005632:	74 2e                	je     c0005662 <f_write+0x274>
c0005634:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005637:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000563a:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000563d:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005640:	73 20                	jae    c0005662 <f_write+0x274>
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	8d 43 50             	lea    eax,[ebx+0x50]
c0005648:	6a 01                	push   0x1
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	50                   	push   eax
c000564d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005651:	50                   	push   eax
c0005652:	e8 60 c3 ff ff       	call   c00019b7 <disk_read>
c0005657:	83 c4 20             	add    esp,0x20
c000565a:	85 c0                	test   eax,eax
c000565c:	0f 85 78 ff ff ff    	jne    c00055da <f_write+0x1ec>
c0005662:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005665:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005668:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000566b:	ba 00 02 00 00       	mov    edx,0x200
c0005670:	25 ff 01 00 00       	and    eax,0x1ff
c0005675:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005679:	29 c2                	sub    edx,eax
c000567b:	39 d6                	cmp    esi,edx
c000567d:	76 02                	jbe    c0005681 <f_write+0x293>
c000567f:	89 d6                	mov    esi,edx
c0005681:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005685:	89 f1                	mov    ecx,esi
c0005687:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000568b:	e8 f1 c3 ff ff       	call   c0001a81 <mem_cpy>
c0005690:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005694:	e9 b1 fe ff ff       	jmp    c000554a <f_write+0x15c>
c0005699:	bd 07 00 00 00       	mov    ebp,0x7
c000569e:	83 c4 2c             	add    esp,0x2c
c00056a1:	89 e8                	mov    eax,ebp
c00056a3:	5b                   	pop    ebx
c00056a4:	5e                   	pop    esi
c00056a5:	5f                   	pop    edi
c00056a6:	5d                   	pop    ebp
c00056a7:	c3                   	ret    

c00056a8 <f_sync>:
c00056a8:	56                   	push   esi
c00056a9:	53                   	push   ebx
c00056aa:	83 ec 64             	sub    esp,0x64
c00056ad:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056b1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 49 ca ff ff       	call   c0002105 <validate>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 ba 01 00 00    	jne    c000587e <f_sync+0x1d6>
c00056c4:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056c7:	f6 c2 40             	test   dl,0x40
c00056ca:	0f 84 ae 01 00 00    	je     c000587e <f_sync+0x1d6>
c00056d0:	84 d2                	test   dl,dl
c00056d2:	79 33                	jns    c0005707 <f_sync+0x5f>
c00056d4:	83 ec 0c             	sub    esp,0xc
c00056d7:	8d 43 50             	lea    eax,[ebx+0x50]
c00056da:	6a 01                	push   0x1
c00056dc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056df:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056e2:	50                   	push   eax
c00056e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056eb:	50                   	push   eax
c00056ec:	e8 dc c2 ff ff       	call   c00019cd <disk_write>
c00056f1:	83 c4 20             	add    esp,0x20
c00056f4:	89 c2                	mov    edx,eax
c00056f6:	b8 01 00 00 00       	mov    eax,0x1
c00056fb:	85 d2                	test   edx,edx
c00056fd:	0f 85 7b 01 00 00    	jne    c000587e <f_sync+0x1d6>
c0005703:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000570e:	0f 85 11 01 00 00    	jne    c0005825 <f_sync+0x17d>
c0005714:	89 d8                	mov    eax,ebx
c0005716:	e8 13 d6 ff ff       	call   c0002d2e <fill_first_frag>
c000571b:	85 c0                	test   eax,eax
c000571d:	0f 85 5b 01 00 00    	jne    c000587e <f_sync+0x1d6>
c0005723:	83 c9 ff             	or     ecx,0xffffffff
c0005726:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005729:	89 d8                	mov    eax,ebx
c000572b:	e8 c9 d5 ff ff       	call   c0002cf9 <fill_last_frag>
c0005730:	85 c0                	test   eax,eax
c0005732:	0f 85 46 01 00 00    	jne    c000587e <f_sync+0x1d6>
c0005738:	83 ec 0c             	sub    esp,0xc
c000573b:	68 60 04 00 00       	push   0x460
c0005740:	e8 f0 2a 00 00       	call   c0008235 <ff_memalloc>
c0005745:	83 c4 10             	add    esp,0x10
c0005748:	89 c6                	mov    esi,eax
c000574a:	b8 11 00 00 00       	mov    eax,0x11
c000574f:	85 f6                	test   esi,esi
c0005751:	0f 84 27 01 00 00    	je     c000587e <f_sync+0x1d6>
c0005757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005761:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005764:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005767:	89 da                	mov    edx,ebx
c0005769:	8d 44 24 14          	lea    eax,[esp+0x14]
c000576d:	e8 af df ff ff       	call   c0003721 <load_obj_xdir>
c0005772:	85 c0                	test   eax,eax
c0005774:	0f 85 95 00 00 00    	jne    c000580f <f_sync+0x167>
c000577a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005781:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005785:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005788:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000578b:	83 ca 01             	or     edx,0x1
c000578e:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005791:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005794:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005797:	83 c0 34             	add    eax,0x34
c000579a:	e8 d9 c2 ff ff       	call   c0001a78 <st_dword>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ac:	83 c0 38             	add    eax,0x38
c00057af:	e8 c7 c2 ff ff       	call   c0001a7b <st_qword>
c00057b4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c1:	83 c0 28             	add    eax,0x28
c00057c4:	e8 b2 c2 ff ff       	call   c0001a7b <st_qword>
c00057c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057cd:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d5:	83 c0 0c             	add    eax,0xc
c00057d8:	e8 9b c2 ff ff       	call   c0001a78 <st_dword>
c00057dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057e4:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057e8:	31 d2                	xor    edx,edx
c00057ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ed:	83 c0 10             	add    eax,0x10
c00057f0:	e8 83 c2 ff ff       	call   c0001a78 <st_dword>
c00057f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057f9:	e8 62 e1 ff ff       	call   c0003960 <store_xdir>
c00057fe:	85 c0                	test   eax,eax
c0005800:	75 0d                	jne    c000580f <f_sync+0x167>
c0005802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005806:	e8 00 eb ff ff       	call   c000430b <sync_fs>
c000580b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005813:	83 ec 0c             	sub    esp,0xc
c0005816:	56                   	push   esi
c0005817:	e8 2f 2a 00 00       	call   c000824b <ff_memfree>
c000581c:	83 c4 10             	add    esp,0x10
c000581f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005823:	eb 59                	jmp    c000587e <f_sync+0x1d6>
c0005825:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005828:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000582b:	e8 b0 c9 ff ff       	call   c00021e0 <move_window>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 4a                	jne    c000587e <f_sync+0x1d6>
c0005834:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005837:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000583b:	89 f2                	mov    edx,esi
c000583d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005840:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005842:	e8 5f f3 ff ff       	call   c0004ba6 <st_clust.isra.1>
c0005847:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000584a:	8d 46 1c             	lea    eax,[esi+0x1c]
c000584d:	e8 26 c2 ff ff       	call   c0001a78 <st_dword>
c0005852:	8d 46 16             	lea    eax,[esi+0x16]
c0005855:	ba 00 00 21 50       	mov    edx,0x50210000
c000585a:	e8 19 c2 ff ff       	call   c0001a78 <st_dword>
c000585f:	8d 46 12             	lea    eax,[esi+0x12]
c0005862:	31 d2                	xor    edx,edx
c0005864:	e8 0b c2 ff ff       	call   c0001a74 <st_word>
c0005869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005875:	e8 91 ea ff ff       	call   c000430b <sync_fs>
c000587a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000587e:	83 c4 64             	add    esp,0x64
c0005881:	5b                   	pop    ebx
c0005882:	5e                   	pop    esi
c0005883:	c3                   	ret    

c0005884 <f_close>:
c0005884:	53                   	push   ebx
c0005885:	83 ec 24             	sub    esp,0x24
c0005888:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000588c:	53                   	push   ebx
c000588d:	e8 16 fe ff ff       	call   c00056a8 <f_sync>
c0005892:	83 c4 10             	add    esp,0x10
c0005895:	85 c0                	test   eax,eax
c0005897:	75 15                	jne    c00058ae <f_close+0x2a>
c0005899:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000589d:	89 d8                	mov    eax,ebx
c000589f:	e8 61 c8 ff ff       	call   c0002105 <validate>
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 06                	jne    c00058ae <f_close+0x2a>
c00058a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058ae:	83 c4 18             	add    esp,0x18
c00058b1:	5b                   	pop    ebx
c00058b2:	c3                   	ret    

c00058b3 <f_lseek>:
c00058b3:	55                   	push   ebp
c00058b4:	57                   	push   edi
c00058b5:	56                   	push   esi
c00058b6:	53                   	push   ebx
c00058b7:	83 ec 3c             	sub    esp,0x3c
c00058ba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058be:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058c2:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00058c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058cd:	89 d8                	mov    eax,ebx
c00058cf:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058d3:	e8 2d c8 ff ff       	call   c0002105 <validate>
c00058d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058dc:	85 c0                	test   eax,eax
c00058de:	0f 85 7a 04 00 00    	jne    c0005d5e <f_lseek+0x4ab>
c00058e4:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058ec:	85 c0                	test   eax,eax
c00058ee:	0f 85 6a 04 00 00    	jne    c0005d5e <f_lseek+0x4ab>
c00058f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00058f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00058fb:	74 0c                	je     c0005909 <f_lseek+0x56>
c00058fd:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005900:	85 c0                	test   eax,eax
c0005902:	75 1f                	jne    c0005923 <f_lseek+0x70>
c0005904:	e9 b5 01 00 00       	jmp    c0005abe <f_lseek+0x20b>
c0005909:	83 c9 ff             	or     ecx,0xffffffff
c000590c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000590f:	89 d8                	mov    eax,ebx
c0005911:	e8 e3 d3 ff ff       	call   c0002cf9 <fill_last_frag>
c0005916:	85 c0                	test   eax,eax
c0005918:	74 e3                	je     c00058fd <f_lseek+0x4a>
c000591a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000591e:	e9 3b 04 00 00       	jmp    c0005d5e <f_lseek+0x4ab>
c0005923:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005928:	0f 85 ac 00 00 00    	jne    c00059da <f_lseek+0x127>
c000592e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005932:	0f 85 a2 00 00 00    	jne    c00059da <f_lseek+0x127>
c0005938:	8d 78 04             	lea    edi,[eax+0x4]
c000593b:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000593e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005940:	be 02 00 00 00       	mov    esi,0x2
c0005945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005949:	85 ed                	test   ebp,ebp
c000594b:	74 73                	je     c00059c0 <f_lseek+0x10d>
c000594d:	89 e9                	mov    ecx,ebp
c000594f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005956:	ff 04 24             	inc    DWORD PTR [esp]
c0005959:	89 ca                	mov    edx,ecx
c000595b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000595f:	89 d8                	mov    eax,ebx
c0005961:	e8 02 d4 ff ff       	call   c0002d68 <get_fat>
c0005966:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000596a:	83 f8 01             	cmp    eax,0x1
c000596d:	77 11                	ja     c0005980 <f_lseek+0xcd>
c000596f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005973:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000597b:	e9 de 03 00 00       	jmp    c0005d5e <f_lseek+0x4ab>
c0005980:	83 f8 ff             	cmp    eax,0xffffffff
c0005983:	75 11                	jne    c0005996 <f_lseek+0xe3>
c0005985:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005989:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005991:	e9 c8 03 00 00       	jmp    c0005d5e <f_lseek+0x4ab>
c0005996:	8d 51 01             	lea    edx,[ecx+0x1]
c0005999:	89 c1                	mov    ecx,eax
c000599b:	39 c2                	cmp    edx,eax
c000599d:	74 b7                	je     c0005956 <f_lseek+0xa3>
c000599f:	83 c6 02             	add    esi,0x2
c00059a2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059a6:	72 0b                	jb     c00059b3 <f_lseek+0x100>
c00059a8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ab:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059ae:	89 0f                	mov    DWORD PTR [edi],ecx
c00059b0:	83 c7 08             	add    edi,0x8
c00059b3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059b7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059ba:	76 04                	jbe    c00059c0 <f_lseek+0x10d>
c00059bc:	89 c5                	mov    ebp,eax
c00059be:	eb 8d                	jmp    c000594d <f_lseek+0x9a>
c00059c0:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059c3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059c7:	89 30                	mov    DWORD PTR [eax],esi
c00059c9:	0f 87 87 03 00 00    	ja     c0005d56 <f_lseek+0x4a3>
c00059cf:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059d5:	e9 84 03 00 00       	jmp    c0005d5e <f_lseek+0x4ab>
c00059da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059dd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059ec:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00059f3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00059f7:	73 0f                	jae    c0005a08 <f_lseek+0x155>
c00059f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00059fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a10:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a13:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a1a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a1e:	0f 84 3a 03 00 00    	je     c0005d5e <f_lseek+0x4ab>
c0005a24:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a28:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a2c:	83 c6 ff             	add    esi,0xffffffff
c0005a2f:	89 d8                	mov    eax,ebx
c0005a31:	83 d7 ff             	adc    edi,0xffffffff
c0005a34:	89 f2                	mov    edx,esi
c0005a36:	89 f9                	mov    ecx,edi
c0005a38:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a3f:	e8 78 c2 ff ff       	call   c0001cbc <clmt_clust>
c0005a44:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a48:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a4b:	89 c2                	mov    edx,eax
c0005a4d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a51:	89 c8                	mov    eax,ecx
c0005a53:	e8 43 c2 ff ff       	call   c0001c9b <clst2sect>
c0005a58:	89 d7                	mov    edi,edx
c0005a5a:	09 c7                	or     edi,eax
c0005a5c:	0f 84 0d ff ff ff    	je     c000596f <f_lseek+0xbc>
c0005a62:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a66:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a6c:	0f 84 ec 02 00 00    	je     c0005d5e <f_lseek+0x4ab>
c0005a72:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a7a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a7d:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a81:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a85:	4d                   	dec    ebp
c0005a86:	31 ff                	xor    edi,edi
c0005a88:	21 ee                	and    esi,ebp
c0005a8a:	01 c6                	add    esi,eax
c0005a8c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a8f:	11 d7                	adc    edi,edx
c0005a91:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a94:	39 fa                	cmp    edx,edi
c0005a96:	75 08                	jne    c0005aa0 <f_lseek+0x1ed>
c0005a98:	39 f0                	cmp    eax,esi
c0005a9a:	0f 84 be 02 00 00    	je     c0005d5e <f_lseek+0x4ab>
c0005aa0:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aa3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aa7:	0f 89 80 02 00 00    	jns    c0005d2d <f_lseek+0x47a>
c0005aad:	83 ec 0c             	sub    esp,0xc
c0005ab0:	6a 01                	push   0x1
c0005ab2:	52                   	push   edx
c0005ab3:	50                   	push   eax
c0005ab4:	55                   	push   ebp
c0005ab5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ab9:	e9 5a 02 00 00       	jmp    c0005d18 <f_lseek+0x465>
c0005abe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ac2:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ac5:	74 16                	je     c0005add <f_lseek+0x22a>
c0005ac7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005acc:	76 0f                	jbe    c0005add <f_lseek+0x22a>
c0005ace:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ad5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005add:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005ae3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005ae6:	89 c7                	mov    edi,eax
c0005ae8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005aec:	73 0d                	jae    c0005afb <f_lseek+0x248>
c0005aee:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005af2:	75 07                	jne    c0005afb <f_lseek+0x248>
c0005af4:	89 14 24             	mov    DWORD PTR [esp],edx
c0005af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005afb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005afe:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b01:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b05:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b0c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b13:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b16:	75 09                	jne    c0005b21 <f_lseek+0x26e>
c0005b18:	31 f6                	xor    esi,esi
c0005b1a:	31 ff                	xor    edi,edi
c0005b1c:	e9 af 01 00 00       	jmp    c0005cd0 <f_lseek+0x41d>
c0005b21:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b25:	89 d7                	mov    edi,edx
c0005b27:	c1 e1 09             	shl    ecx,0x9
c0005b2a:	09 c7                	or     edi,eax
c0005b2c:	89 cd                	mov    ebp,ecx
c0005b2e:	74 6d                	je     c0005b9d <f_lseek+0x2ea>
c0005b30:	83 c0 ff             	add    eax,0xffffffff
c0005b33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b37:	83 d2 ff             	adc    edx,0xffffffff
c0005b3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	83 c0 ff             	add    eax,0xffffffff
c0005b44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b48:	83 d2 ff             	adc    edx,0xffffffff
c0005b4b:	31 ff                	xor    edi,edi
c0005b4d:	57                   	push   edi
c0005b4e:	51                   	push   ecx
c0005b4f:	52                   	push   edx
c0005b50:	50                   	push   eax
c0005b51:	e8 f6 ec 01 00       	call   c002484c <__udivdi3>
c0005b56:	83 c4 10             	add    esp,0x10
c0005b59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b61:	57                   	push   edi
c0005b62:	55                   	push   ebp
c0005b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b6b:	e8 dc ec 01 00       	call   c002484c <__udivdi3>
c0005b70:	83 c4 10             	add    esp,0x10
c0005b73:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b7b:	19 d1                	sbb    ecx,edx
c0005b7d:	72 1e                	jb     c0005b9d <f_lseek+0x2ea>
c0005b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b83:	89 e9                	mov    ecx,ebp
c0005b85:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b88:	f7 d9                	neg    ecx
c0005b8a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b8d:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b91:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b94:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b97:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b9b:	eb 28                	jmp    c0005bc5 <f_lseek+0x312>
c0005b9d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba0:	85 c0                	test   eax,eax
c0005ba2:	75 1e                	jne    c0005bc2 <f_lseek+0x30f>
c0005ba4:	31 d2                	xor    edx,edx
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 a9 d4 ff ff       	call   c0003056 <create_chain>
c0005bad:	83 f8 01             	cmp    eax,0x1
c0005bb0:	0f 84 b9 fd ff ff    	je     c000596f <f_lseek+0xbc>
c0005bb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005bb9:	0f 84 c6 fd ff ff    	je     c0005985 <f_lseek+0xd2>
c0005bbf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bc2:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bc5:	85 c0                	test   eax,eax
c0005bc7:	0f 84 4b ff ff ff    	je     c0005b18 <f_lseek+0x265>
c0005bcd:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005bd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bd9:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bdc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005be0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be3:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005be6:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bea:	0f 83 9d 00 00 00    	jae    c0005c8d <f_lseek+0x3da>
c0005bf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005bf4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bf8:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bfb:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bff:	01 f2                	add    edx,esi
c0005c01:	11 f9                	adc    ecx,edi
c0005c03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c07:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c0b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c0e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c11:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c14:	f6 c1 02             	test   cl,0x2
c0005c17:	74 35                	je     c0005c4e <f_lseek+0x39b>
c0005c19:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c1d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c20:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c23:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c27:	73 16                	jae    c0005c3f <f_lseek+0x38c>
c0005c29:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c2d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c31:	88 ca                	mov    dl,cl
c0005c33:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c36:	83 ca 40             	or     edx,0x40
c0005c39:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c3c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c3f:	89 c2                	mov    edx,eax
c0005c41:	89 d8                	mov    eax,ebx
c0005c43:	e8 0e d4 ff ff       	call   c0003056 <create_chain>
c0005c48:	85 c0                	test   eax,eax
c0005c4a:	75 0b                	jne    c0005c57 <f_lseek+0x3a4>
c0005c4c:	eb 30                	jmp    c0005c7e <f_lseek+0x3cb>
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 11 d1 ff ff       	call   c0002d68 <get_fat>
c0005c57:	83 f8 ff             	cmp    eax,0xffffffff
c0005c5a:	0f 84 25 fd ff ff    	je     c0005985 <f_lseek+0xd2>
c0005c60:	83 f8 01             	cmp    eax,0x1
c0005c63:	0f 86 06 fd ff ff    	jbe    c000596f <f_lseek+0xbc>
c0005c69:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c6d:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c70:	0f 86 f9 fc ff ff    	jbe    c000596f <f_lseek+0xbc>
c0005c76:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c79:	e9 5b ff ff ff       	jmp    c0005bd9 <f_lseek+0x326>
c0005c7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c85:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c8d:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c90:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c94:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c97:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c9a:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c9d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ca3:	0f 84 6f fe ff ff    	je     c0005b18 <f_lseek+0x265>
c0005ca9:	89 c2                	mov    edx,eax
c0005cab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005caf:	e8 e7 bf ff ff       	call   c0001c9b <clst2sect>
c0005cb4:	89 d7                	mov    edi,edx
c0005cb6:	09 c7                	or     edi,eax
c0005cb8:	0f 84 b1 fc ff ff    	je     c000596f <f_lseek+0xbc>
c0005cbe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cc5:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc9:	c1 ef 09             	shr    edi,0x9
c0005ccc:	01 c6                	add    esi,eax
c0005cce:	11 d7                	adc    edi,edx
c0005cd0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cd3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cd6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cd9:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cdc:	19 d1                	sbb    ecx,edx
c0005cde:	73 0a                	jae    c0005cea <f_lseek+0x437>
c0005ce0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005ce3:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005ce6:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cea:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cef:	74 6d                	je     c0005d5e <f_lseek+0x4ab>
c0005cf1:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cf7:	39 fa                	cmp    edx,edi
c0005cf9:	75 04                	jne    c0005cff <f_lseek+0x44c>
c0005cfb:	39 f0                	cmp    eax,esi
c0005cfd:	74 5f                	je     c0005d5e <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	79 25                	jns    c0005d2d <f_lseek+0x47a>
c0005d08:	83 ec 0c             	sub    esp,0xc
c0005d0b:	6a 01                	push   0x1
c0005d0d:	52                   	push   edx
c0005d0e:	50                   	push   eax
c0005d0f:	55                   	push   ebp
c0005d10:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d14:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d18:	50                   	push   eax
c0005d19:	e8 af bc ff ff       	call   c00019cd <disk_write>
c0005d1e:	83 c4 20             	add    esp,0x20
c0005d21:	85 c0                	test   eax,eax
c0005d23:	0f 85 5c fc ff ff    	jne    c0005985 <f_lseek+0xd2>
c0005d29:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d2d:	83 ec 0c             	sub    esp,0xc
c0005d30:	6a 01                	push   0x1
c0005d32:	57                   	push   edi
c0005d33:	56                   	push   esi
c0005d34:	55                   	push   ebp
c0005d35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d3d:	50                   	push   eax
c0005d3e:	e8 74 bc ff ff       	call   c00019b7 <disk_read>
c0005d43:	83 c4 20             	add    esp,0x20
c0005d46:	85 c0                	test   eax,eax
c0005d48:	0f 85 37 fc ff ff    	jne    c0005985 <f_lseek+0xd2>
c0005d4e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d51:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d54:	eb 08                	jmp    c0005d5e <f_lseek+0x4ab>
c0005d56:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d62:	83 c4 3c             	add    esp,0x3c
c0005d65:	5b                   	pop    ebx
c0005d66:	5e                   	pop    esi
c0005d67:	5f                   	pop    edi
c0005d68:	5d                   	pop    ebp
c0005d69:	c3                   	ret    

c0005d6a <f_opendir>:
c0005d6a:	56                   	push   esi
c0005d6b:	b8 09 00 00 00       	mov    eax,0x9
c0005d70:	53                   	push   ebx
c0005d71:	83 ec 24             	sub    esp,0x24
c0005d74:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d78:	85 db                	test   ebx,ebx
c0005d7a:	0f 84 e6 00 00 00    	je     c0005e66 <f_opendir+0xfc>
c0005d80:	31 c9                	xor    ecx,ecx
c0005d82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d86:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d8a:	e8 03 c7 ff ff       	call   c0002492 <mount_volume>
c0005d8f:	85 c0                	test   eax,eax
c0005d91:	0f 85 c9 00 00 00    	jne    c0005e60 <f_opendir+0xf6>
c0005d97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d9b:	83 ec 0c             	sub    esp,0xc
c0005d9e:	89 03                	mov    DWORD PTR [ebx],eax
c0005da0:	68 60 04 00 00       	push   0x460
c0005da5:	e8 8b 24 00 00       	call   c0008235 <ff_memalloc>
c0005daa:	83 c4 10             	add    esp,0x10
c0005dad:	89 c6                	mov    esi,eax
c0005daf:	b8 11 00 00 00       	mov    eax,0x11
c0005db4:	85 f6                	test   esi,esi
c0005db6:	0f 84 aa 00 00 00    	je     c0005e66 <f_opendir+0xfc>
c0005dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dc0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dc6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dc9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005dcc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005dd0:	89 d8                	mov    eax,ebx
c0005dd2:	e8 31 ee ff ff       	call   c0004c08 <follow_path>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	75 61                	jne    c0005e3c <f_opendir+0xd2>
c0005ddb:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005ddf:	78 46                	js     c0005e27 <f_opendir+0xbd>
c0005de1:	b8 05 00 00 00       	mov    eax,0x5
c0005de6:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dea:	74 50                	je     c0005e3c <f_opendir+0xd2>
c0005dec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005df0:	8a 01                	mov    al,BYTE PTR [ecx]
c0005df2:	3c 04                	cmp    al,0x4
c0005df4:	75 26                	jne    c0005e1c <f_opendir+0xb2>
c0005df6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005df9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005dfc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005dff:	30 d2                	xor    dl,dl
c0005e01:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e05:	09 c2                	or     edx,eax
c0005e07:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e0a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e0d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e10:	89 da                	mov    edx,ebx
c0005e12:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e15:	e8 b4 ed ff ff       	call   c0004bce <init_alloc_info.isra.2>
c0005e1a:	eb 0b                	jmp    c0005e27 <f_opendir+0xbd>
c0005e1c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e1f:	e8 59 ed ff ff       	call   c0004b7d <ld_clust.isra.0>
c0005e24:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e2b:	31 d2                	xor    edx,edx
c0005e2d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e31:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e35:	89 d8                	mov    eax,ebx
c0005e37:	e8 22 d1 ff ff       	call   c0002f5e <dir_sdi>
c0005e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e40:	83 ec 0c             	sub    esp,0xc
c0005e43:	56                   	push   esi
c0005e44:	e8 02 24 00 00       	call   c000824b <ff_memfree>
c0005e49:	83 c4 10             	add    esp,0x10
c0005e4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e50:	83 f8 04             	cmp    eax,0x4
c0005e53:	74 06                	je     c0005e5b <f_opendir+0xf1>
c0005e55:	85 c0                	test   eax,eax
c0005e57:	74 0d                	je     c0005e66 <f_opendir+0xfc>
c0005e59:	eb 05                	jmp    c0005e60 <f_opendir+0xf6>
c0005e5b:	b8 05 00 00 00       	mov    eax,0x5
c0005e60:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e66:	83 c4 24             	add    esp,0x24
c0005e69:	5b                   	pop    ebx
c0005e6a:	5e                   	pop    esi
c0005e6b:	c3                   	ret    

c0005e6c <f_closedir>:
c0005e6c:	53                   	push   ebx
c0005e6d:	83 ec 18             	sub    esp,0x18
c0005e70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e74:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e78:	89 d8                	mov    eax,ebx
c0005e7a:	e8 86 c2 ff ff       	call   c0002105 <validate>
c0005e7f:	85 c0                	test   eax,eax
c0005e81:	75 06                	jne    c0005e89 <f_closedir+0x1d>
c0005e83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e89:	83 c4 18             	add    esp,0x18
c0005e8c:	5b                   	pop    ebx
c0005e8d:	c3                   	ret    

c0005e8e <f_readdir>:
c0005e8e:	57                   	push   edi
c0005e8f:	56                   	push   esi
c0005e90:	53                   	push   ebx
c0005e91:	83 ec 20             	sub    esp,0x20
c0005e94:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e98:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e9c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 5e c2 ff ff       	call   c0002105 <validate>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 77                	jne    c0005f22 <f_readdir+0x94>
c0005eab:	85 ff                	test   edi,edi
c0005ead:	75 0b                	jne    c0005eba <f_readdir+0x2c>
c0005eaf:	31 d2                	xor    edx,edx
c0005eb1:	89 d8                	mov    eax,ebx
c0005eb3:	e8 a6 d0 ff ff       	call   c0002f5e <dir_sdi>
c0005eb8:	eb 68                	jmp    c0005f22 <f_readdir+0x94>
c0005eba:	83 ec 0c             	sub    esp,0xc
c0005ebd:	68 60 04 00 00       	push   0x460
c0005ec2:	e8 6e 23 00 00       	call   c0008235 <ff_memalloc>
c0005ec7:	83 c4 10             	add    esp,0x10
c0005eca:	89 c6                	mov    esi,eax
c0005ecc:	b8 11 00 00 00       	mov    eax,0x11
c0005ed1:	85 f6                	test   esi,esi
c0005ed3:	74 4d                	je     c0005f22 <f_readdir+0x94>
c0005ed5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ed9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005edf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ee2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ee5:	31 d2                	xor    edx,edx
c0005ee7:	89 d8                	mov    eax,ebx
c0005ee9:	e8 80 d8 ff ff       	call   c000376e <dir_read>
c0005eee:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ef3:	75 19                	jne    c0005f0e <f_readdir+0x80>
c0005ef5:	89 fa                	mov    edx,edi
c0005ef7:	89 d8                	mov    eax,ebx
c0005ef9:	e8 7e ea ff ff       	call   c000497c <get_fileinfo>
c0005efe:	31 d2                	xor    edx,edx
c0005f00:	89 d8                	mov    eax,ebx
c0005f02:	e8 af d5 ff ff       	call   c00034b6 <dir_next>
c0005f07:	83 f8 04             	cmp    eax,0x4
c0005f0a:	75 02                	jne    c0005f0e <f_readdir+0x80>
c0005f0c:	31 c0                	xor    eax,eax
c0005f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f12:	83 ec 0c             	sub    esp,0xc
c0005f15:	56                   	push   esi
c0005f16:	e8 30 23 00 00       	call   c000824b <ff_memfree>
c0005f1b:	83 c4 10             	add    esp,0x10
c0005f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f22:	83 c4 20             	add    esp,0x20
c0005f25:	5b                   	pop    ebx
c0005f26:	5e                   	pop    esi
c0005f27:	5f                   	pop    edi
c0005f28:	c3                   	ret    

c0005f29 <f_stat>:
c0005f29:	57                   	push   edi
c0005f2a:	31 c9                	xor    ecx,ecx
c0005f2c:	56                   	push   esi
c0005f2d:	53                   	push   ebx
c0005f2e:	83 ec 50             	sub    esp,0x50
c0005f31:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f35:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f39:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f3d:	e8 50 c5 ff ff       	call   c0002492 <mount_volume>
c0005f42:	89 c3                	mov    ebx,eax
c0005f44:	85 c0                	test   eax,eax
c0005f46:	75 67                	jne    c0005faf <f_stat+0x86>
c0005f48:	83 ec 0c             	sub    esp,0xc
c0005f4b:	bb 11 00 00 00       	mov    ebx,0x11
c0005f50:	68 60 04 00 00       	push   0x460
c0005f55:	e8 db 22 00 00       	call   c0008235 <ff_memalloc>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	89 c6                	mov    esi,eax
c0005f5f:	85 c0                	test   eax,eax
c0005f61:	74 4c                	je     c0005faf <f_stat+0x86>
c0005f63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f67:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f6d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f70:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f73:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f77:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f7b:	e8 88 ec ff ff       	call   c0004c08 <follow_path>
c0005f80:	89 c3                	mov    ebx,eax
c0005f82:	85 c0                	test   eax,eax
c0005f84:	75 1d                	jne    c0005fa3 <f_stat+0x7a>
c0005f86:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f8b:	78 11                	js     c0005f9e <f_stat+0x75>
c0005f8d:	85 ff                	test   edi,edi
c0005f8f:	74 12                	je     c0005fa3 <f_stat+0x7a>
c0005f91:	89 fa                	mov    edx,edi
c0005f93:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f97:	e8 e0 e9 ff ff       	call   c000497c <get_fileinfo>
c0005f9c:	eb 05                	jmp    c0005fa3 <f_stat+0x7a>
c0005f9e:	bb 06 00 00 00       	mov    ebx,0x6
c0005fa3:	83 ec 0c             	sub    esp,0xc
c0005fa6:	56                   	push   esi
c0005fa7:	e8 9f 22 00 00       	call   c000824b <ff_memfree>
c0005fac:	83 c4 10             	add    esp,0x10
c0005faf:	83 c4 50             	add    esp,0x50
c0005fb2:	89 d8                	mov    eax,ebx
c0005fb4:	5b                   	pop    ebx
c0005fb5:	5e                   	pop    esi
c0005fb6:	5f                   	pop    edi
c0005fb7:	c3                   	ret    

c0005fb8 <f_getfree>:
c0005fb8:	55                   	push   ebp
c0005fb9:	31 c9                	xor    ecx,ecx
c0005fbb:	57                   	push   edi
c0005fbc:	56                   	push   esi
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 5c             	sub    esp,0x5c
c0005fc1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fc5:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fc9:	e8 c4 c4 ff ff       	call   c0002492 <mount_volume>
c0005fce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fd2:	85 c0                	test   eax,eax
c0005fd4:	0f 85 9d 01 00 00    	jne    c0006177 <f_getfree+0x1bf>
c0005fda:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fde:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fe2:	89 02                	mov    DWORD PTR [edx],eax
c0005fe4:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005fe7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fea:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005fed:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ff1:	39 f2                	cmp    edx,esi
c0005ff3:	77 0b                	ja     c0006000 <f_getfree+0x48>
c0005ff5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005ff9:	89 10                	mov    DWORD PTR [eax],edx
c0005ffb:	e9 77 01 00 00       	jmp    c0006177 <f_getfree+0x1bf>
c0006000:	8a 10                	mov    dl,BYTE PTR [eax]
c0006002:	80 fa 01             	cmp    dl,0x1
c0006005:	75 3a                	jne    c0006041 <f_getfree+0x89>
c0006007:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000600b:	be 02 00 00 00       	mov    esi,0x2
c0006010:	31 db                	xor    ebx,ebx
c0006012:	89 f2                	mov    edx,esi
c0006014:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006018:	e8 4b cd ff ff       	call   c0002d68 <get_fat>
c000601d:	83 f8 ff             	cmp    eax,0xffffffff
c0006020:	0f 84 28 01 00 00    	je     c000614e <f_getfree+0x196>
c0006026:	83 f8 01             	cmp    eax,0x1
c0006029:	0f 84 29 01 00 00    	je     c0006158 <f_getfree+0x1a0>
c000602f:	83 d3 00             	adc    ebx,0x0
c0006032:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006036:	46                   	inc    esi
c0006037:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000603a:	77 d6                	ja     c0006012 <f_getfree+0x5a>
c000603c:	e9 25 01 00 00       	jmp    c0006166 <f_getfree+0x1ae>
c0006041:	80 fa 04             	cmp    dl,0x4
c0006044:	0f 85 88 00 00 00    	jne    c00060d2 <f_getfree+0x11a>
c000604a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000604d:	31 ed                	xor    ebp,ebp
c000604f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006052:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006056:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000605a:	31 db                	xor    ebx,ebx
c000605c:	85 ed                	test   ebp,ebp
c000605e:	75 3f                	jne    c000609f <f_getfree+0xe7>
c0006060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006064:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006068:	83 c0 01             	add    eax,0x1
c000606b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000606f:	83 d2 00             	adc    edx,0x0
c0006072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006076:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006082:	e8 59 c1 ff ff       	call   c00021e0 <move_window>
c0006087:	85 c0                	test   eax,eax
c0006089:	0f 85 d3 00 00 00    	jne    c0006162 <f_getfree+0x1aa>
c000608f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006093:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006097:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000609b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060a3:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060a6:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060aa:	89 cf                	mov    edi,ecx
c00060ac:	85 f6                	test   esi,esi
c00060ae:	74 12                	je     c00060c2 <f_getfree+0x10a>
c00060b0:	88 c1                	mov    cl,al
c00060b2:	83 e1 01             	and    ecx,0x1
c00060b5:	80 f9 01             	cmp    cl,0x1
c00060b8:	83 d3 00             	adc    ebx,0x0
c00060bb:	d0 e8                	shr    al,1
c00060bd:	4e                   	dec    esi
c00060be:	39 fe                	cmp    esi,edi
c00060c0:	75 ea                	jne    c00060ac <f_getfree+0xf4>
c00060c2:	45                   	inc    ebp
c00060c3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060c9:	85 f6                	test   esi,esi
c00060cb:	75 8f                	jne    c000605c <f_getfree+0xa4>
c00060cd:	e9 94 00 00 00       	jmp    c0006166 <f_getfree+0x1ae>
c00060d2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060d8:	31 f6                	xor    esi,esi
c00060da:	31 db                	xor    ebx,ebx
c00060dc:	85 f6                	test   esi,esi
c00060de:	75 1b                	jne    c00060fb <f_getfree+0x143>
c00060e0:	89 d7                	mov    edi,edx
c00060e2:	89 cd                	mov    ebp,ecx
c00060e4:	83 c7 01             	add    edi,0x1
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	83 d5 00             	adc    ebp,0x0
c00060ee:	e8 ed c0 ff ff       	call   c00021e0 <move_window>
c00060f3:	85 c0                	test   eax,eax
c00060f5:	75 6b                	jne    c0006162 <f_getfree+0x1aa>
c00060f7:	89 fa                	mov    edx,edi
c00060f9:	89 e9                	mov    ecx,ebp
c00060fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ff:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006103:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006107:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000610a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000610e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006112:	75 11                	jne    c0006125 <f_getfree+0x16d>
c0006114:	e8 e9 b8 ff ff       	call   c0001a02 <ld_word>
c0006119:	66 83 f8 01          	cmp    ax,0x1
c000611d:	83 d3 00             	adc    ebx,0x0
c0006120:	83 c6 02             	add    esi,0x2
c0006123:	eb 13                	jmp    c0006138 <f_getfree+0x180>
c0006125:	e8 e5 b8 ff ff       	call   c0001a0f <ld_dword>
c000612a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000612f:	83 f8 01             	cmp    eax,0x1
c0006132:	83 d3 00             	adc    ebx,0x0
c0006135:	83 c6 04             	add    esi,0x4
c0006138:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006142:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006146:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000614a:	75 90                	jne    c00060dc <f_getfree+0x124>
c000614c:	eb 18                	jmp    c0006166 <f_getfree+0x1ae>
c000614e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006156:	eb 0e                	jmp    c0006166 <f_getfree+0x1ae>
c0006158:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006160:	eb 04                	jmp    c0006166 <f_getfree+0x1ae>
c0006162:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006166:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000616a:	89 18                	mov    DWORD PTR [eax],ebx
c000616c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006170:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006173:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000617b:	83 c4 5c             	add    esp,0x5c
c000617e:	5b                   	pop    ebx
c000617f:	5e                   	pop    esi
c0006180:	5f                   	pop    edi
c0006181:	5d                   	pop    ebp
c0006182:	c3                   	ret    

c0006183 <f_truncate>:
c0006183:	56                   	push   esi
c0006184:	53                   	push   ebx
c0006185:	83 ec 14             	sub    esp,0x14
c0006188:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000618c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 6e bf ff ff       	call   c0002105 <validate>
c0006197:	89 c6                	mov    esi,eax
c0006199:	85 c0                	test   eax,eax
c000619b:	0f 85 d2 00 00 00    	jne    c0006273 <f_truncate+0xf0>
c00061a1:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a5:	85 f6                	test   esi,esi
c00061a7:	0f 85 c6 00 00 00    	jne    c0006273 <f_truncate+0xf0>
c00061ad:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061b1:	0f 84 b7 00 00 00    	je     c000626e <f_truncate+0xeb>
c00061b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061ba:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061bd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061c0:	89 d1                	mov    ecx,edx
c00061c2:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c5:	0f 83 a8 00 00 00    	jae    c0006273 <f_truncate+0xf0>
c00061cb:	09 c2                	or     edx,eax
c00061cd:	75 15                	jne    c00061e4 <f_truncate+0x61>
c00061cf:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061d2:	31 c9                	xor    ecx,ecx
c00061d4:	89 d8                	mov    eax,ebx
c00061d6:	e8 7a d0 ff ff       	call   c0003255 <remove_chain>
c00061db:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061e2:	eb 35                	jmp    c0006219 <f_truncate+0x96>
c00061e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e7:	89 d8                	mov    eax,ebx
c00061e9:	e8 7a cb ff ff       	call   c0002d68 <get_fat>
c00061ee:	89 c2                	mov    edx,eax
c00061f0:	b8 01 00 00 00       	mov    eax,0x1
c00061f5:	83 fa ff             	cmp    edx,0xffffffff
c00061f8:	74 1f                	je     c0006219 <f_truncate+0x96>
c00061fa:	b8 02 00 00 00       	mov    eax,0x2
c00061ff:	83 fa 01             	cmp    edx,0x1
c0006202:	74 15                	je     c0006219 <f_truncate+0x96>
c0006204:	31 c0                	xor    eax,eax
c0006206:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000620a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620d:	76 0a                	jbe    c0006219 <f_truncate+0x96>
c000620f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006212:	89 d8                	mov    eax,ebx
c0006214:	e8 3c d0 ff ff       	call   c0003255 <remove_chain>
c0006219:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000621c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006222:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006225:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006228:	83 ca 40             	or     edx,0x40
c000622b:	85 c0                	test   eax,eax
c000622d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006230:	75 35                	jne    c0006267 <f_truncate+0xe4>
c0006232:	84 d2                	test   dl,dl
c0006234:	79 3d                	jns    c0006273 <f_truncate+0xf0>
c0006236:	83 ec 0c             	sub    esp,0xc
c0006239:	8d 43 50             	lea    eax,[ebx+0x50]
c000623c:	6a 01                	push   0x1
c000623e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006241:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006244:	50                   	push   eax
c0006245:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006249:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624d:	50                   	push   eax
c000624e:	e8 7a b7 ff ff       	call   c00019cd <disk_write>
c0006253:	83 c4 20             	add    esp,0x20
c0006256:	85 c0                	test   eax,eax
c0006258:	75 08                	jne    c0006262 <f_truncate+0xdf>
c000625a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625e:	31 f6                	xor    esi,esi
c0006260:	eb 11                	jmp    c0006273 <f_truncate+0xf0>
c0006262:	b8 01 00 00 00       	mov    eax,0x1
c0006267:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000626a:	89 c6                	mov    esi,eax
c000626c:	eb 05                	jmp    c0006273 <f_truncate+0xf0>
c000626e:	be 07 00 00 00       	mov    esi,0x7
c0006273:	89 f0                	mov    eax,esi
c0006275:	83 c4 14             	add    esp,0x14
c0006278:	5b                   	pop    ebx
c0006279:	5e                   	pop    esi
c000627a:	c3                   	ret    

c000627b <f_unlink>:
c000627b:	56                   	push   esi
c000627c:	b9 02 00 00 00       	mov    ecx,0x2
c0006281:	53                   	push   ebx
c0006282:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006288:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000628c:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006293:	e8 fa c1 ff ff       	call   c0002492 <mount_volume>
c0006298:	85 c0                	test   eax,eax
c000629a:	0f 85 55 01 00 00    	jne    c00063f5 <f_unlink+0x17a>
c00062a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a4:	83 ec 0c             	sub    esp,0xc
c00062a7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ab:	68 60 04 00 00       	push   0x460
c00062b0:	e8 80 1f 00 00       	call   c0008235 <ff_memalloc>
c00062b5:	83 c4 10             	add    esp,0x10
c00062b8:	89 c3                	mov    ebx,eax
c00062ba:	b8 11 00 00 00       	mov    eax,0x11
c00062bf:	85 db                	test   ebx,ebx
c00062c1:	0f 84 2e 01 00 00    	je     c00063f5 <f_unlink+0x17a>
c00062c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cb:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062d1:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d7:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062de:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062e2:	e8 21 e9 ff ff       	call   c0004c08 <follow_path>
c00062e7:	85 c0                	test   eax,eax
c00062e9:	0f 85 f2 00 00 00    	jne    c00063e1 <f_unlink+0x166>
c00062ef:	b8 06 00 00 00       	mov    eax,0x6
c00062f4:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062fc:	0f 88 df 00 00 00    	js     c00063e1 <f_unlink+0x166>
c0006302:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006307:	74 0a                	je     c0006313 <f_unlink+0x98>
c0006309:	b8 07 00 00 00       	mov    eax,0x7
c000630e:	e9 ce 00 00 00       	jmp    c00063e1 <f_unlink+0x166>
c0006313:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006317:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000631b:	8a 02                	mov    al,BYTE PTR [edx]
c000631d:	3c 04                	cmp    al,0x4
c000631f:	75 12                	jne    c0006333 <f_unlink+0xb8>
c0006321:	8d 42 10             	lea    eax,[edx+0x10]
c0006324:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006328:	e8 a1 e8 ff ff       	call   c0004bce <init_alloc_info.isra.2>
c000632d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006331:	eb 0e                	jmp    c0006341 <f_unlink+0xc6>
c0006333:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000633a:	e8 3e e8 ff ff       	call   c0004b7d <ld_clust.isra.0>
c000633f:	89 c6                	mov    esi,eax
c0006341:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006346:	75 12                	jne    c000635a <f_unlink+0xdf>
c0006348:	8d 44 24 48          	lea    eax,[esp+0x48]
c000634c:	e8 94 d6 ff ff       	call   c00039e5 <dir_remove>
c0006351:	85 c0                	test   eax,eax
c0006353:	74 6c                	je     c00063c1 <f_unlink+0x146>
c0006355:	e9 87 00 00 00       	jmp    c00063e1 <f_unlink+0x166>
c000635a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000635e:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006365:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000636c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000636f:	75 21                	jne    c0006392 <f_unlink+0x117>
c0006371:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006375:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006379:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006380:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006387:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638b:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006392:	31 d2                	xor    edx,edx
c0006394:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000639b:	e8 be cb ff ff       	call   c0002f5e <dir_sdi>
c00063a0:	85 c0                	test   eax,eax
c00063a2:	75 3d                	jne    c00063e1 <f_unlink+0x166>
c00063a4:	31 d2                	xor    edx,edx
c00063a6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063ad:	e8 bc d3 ff ff       	call   c000376e <dir_read>
c00063b2:	85 c0                	test   eax,eax
c00063b4:	0f 84 4f ff ff ff    	je     c0006309 <f_unlink+0x8e>
c00063ba:	83 f8 04             	cmp    eax,0x4
c00063bd:	75 22                	jne    c00063e1 <f_unlink+0x166>
c00063bf:	eb 87                	jmp    c0006348 <f_unlink+0xcd>
c00063c1:	85 f6                	test   esi,esi
c00063c3:	75 0b                	jne    c00063d0 <f_unlink+0x155>
c00063c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063c9:	e8 3d df ff ff       	call   c000430b <sync_fs>
c00063ce:	eb 11                	jmp    c00063e1 <f_unlink+0x166>
c00063d0:	31 c9                	xor    ecx,ecx
c00063d2:	89 f2                	mov    edx,esi
c00063d4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d8:	e8 78 ce ff ff       	call   c0003255 <remove_chain>
c00063dd:	85 c0                	test   eax,eax
c00063df:	74 e4                	je     c00063c5 <f_unlink+0x14a>
c00063e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e5:	83 ec 0c             	sub    esp,0xc
c00063e8:	53                   	push   ebx
c00063e9:	e8 5d 1e 00 00       	call   c000824b <ff_memfree>
c00063ee:	83 c4 10             	add    esp,0x10
c00063f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f5:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063fb:	5b                   	pop    ebx
c00063fc:	5e                   	pop    esi
c00063fd:	c3                   	ret    

c00063fe <f_mkdir>:
c00063fe:	57                   	push   edi
c00063ff:	b9 02 00 00 00       	mov    ecx,0x2
c0006404:	56                   	push   esi
c0006405:	53                   	push   ebx
c0006406:	83 c4 80             	add    esp,0xffffff80
c0006409:	8d 54 24 08          	lea    edx,[esp+0x8]
c000640d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006414:	e8 79 c0 ff ff       	call   c0002492 <mount_volume>
c0006419:	89 c3                	mov    ebx,eax
c000641b:	85 c0                	test   eax,eax
c000641d:	0f 85 fe 01 00 00    	jne    c0006621 <f_mkdir+0x223>
c0006423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006427:	bb 11 00 00 00       	mov    ebx,0x11
c000642c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006430:	83 ec 0c             	sub    esp,0xc
c0006433:	68 60 04 00 00       	push   0x460
c0006438:	e8 f8 1d 00 00       	call   c0008235 <ff_memalloc>
c000643d:	83 c4 10             	add    esp,0x10
c0006440:	89 c7                	mov    edi,eax
c0006442:	85 c0                	test   eax,eax
c0006444:	0f 84 d7 01 00 00    	je     c0006621 <f_mkdir+0x223>
c000644a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000644e:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006454:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006457:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000645a:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006461:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006465:	e8 9e e7 ff ff       	call   c0004c08 <follow_path>
c000646a:	89 c3                	mov    ebx,eax
c000646c:	85 c0                	test   eax,eax
c000646e:	74 3e                	je     c00064ae <f_mkdir+0xb0>
c0006470:	83 f8 04             	cmp    eax,0x4
c0006473:	75 3e                	jne    c00064b3 <f_mkdir+0xb5>
c0006475:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006479:	31 d2                	xor    edx,edx
c000647b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000647f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006483:	e8 ce cb ff ff       	call   c0003056 <create_chain>
c0006488:	89 c6                	mov    esi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	74 0c                	je     c000649a <f_mkdir+0x9c>
c000648e:	bb 02 00 00 00       	mov    ebx,0x2
c0006493:	83 f8 01             	cmp    eax,0x1
c0006496:	74 07                	je     c000649f <f_mkdir+0xa1>
c0006498:	eb 2a                	jmp    c00064c4 <f_mkdir+0xc6>
c000649a:	bb 07 00 00 00       	mov    ebx,0x7
c000649f:	31 c9                	xor    ecx,ecx
c00064a1:	89 f2                	mov    edx,esi
c00064a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a7:	e8 a9 cd ff ff       	call   c0003255 <remove_chain>
c00064ac:	eb 05                	jmp    c00064b3 <f_mkdir+0xb5>
c00064ae:	bb 08 00 00 00       	mov    ebx,0x8
c00064b3:	83 ec 0c             	sub    esp,0xc
c00064b6:	57                   	push   edi
c00064b7:	e8 8f 1d 00 00       	call   c000824b <ff_memfree>
c00064bc:	83 c4 10             	add    esp,0x10
c00064bf:	e9 5d 01 00 00       	jmp    c0006621 <f_mkdir+0x223>
c00064c4:	bb 01 00 00 00       	mov    ebx,0x1
c00064c9:	83 f8 ff             	cmp    eax,0xffffffff
c00064cc:	74 d1                	je     c000649f <f_mkdir+0xa1>
c00064ce:	89 f2                	mov    edx,esi
c00064d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d4:	e8 c4 ce ff ff       	call   c000339d <dir_clear>
c00064d9:	89 c3                	mov    ebx,eax
c00064db:	85 c0                	test   eax,eax
c00064dd:	75 c0                	jne    c000649f <f_mkdir+0xa1>
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e6:	74 69                	je     c0006551 <f_mkdir+0x153>
c00064e8:	b9 0b 00 00 00       	mov    ecx,0xb
c00064ed:	83 c0 54             	add    eax,0x54
c00064f0:	ba 20 00 00 00       	mov    edx,0x20
c00064f5:	e8 9c b5 ff ff       	call   c0001a96 <mem_set>
c00064fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064fe:	ba 00 00 21 50       	mov    edx,0x50210000
c0006503:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006507:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000650b:	83 c0 6a             	add    eax,0x6a
c000650e:	e8 65 b5 ff ff       	call   c0001a78 <st_dword>
c0006513:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006517:	89 f1                	mov    ecx,esi
c0006519:	8d 50 54             	lea    edx,[eax+0x54]
c000651c:	e8 85 e6 ff ff       	call   c0004ba6 <st_clust.isra.1>
c0006521:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006525:	b9 20 00 00 00       	mov    ecx,0x20
c000652a:	8d 50 54             	lea    edx,[eax+0x54]
c000652d:	83 c0 74             	add    eax,0x74
c0006530:	e8 4c b5 ff ff       	call   c0001a81 <mem_cpy>
c0006535:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006539:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000653d:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006541:	8d 50 74             	lea    edx,[eax+0x74]
c0006544:	e8 5d e6 ff ff       	call   c0004ba6 <st_clust.isra.1>
c0006549:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006551:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006555:	e8 2f db ff ff       	call   c0004089 <dir_register>
c000655a:	89 c3                	mov    ebx,eax
c000655c:	85 c0                	test   eax,eax
c000655e:	0f 85 3b ff ff ff    	jne    c000649f <f_mkdir+0xa1>
c0006564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006568:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000656b:	75 74                	jne    c00065e1 <f_mkdir+0x1e3>
c000656d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006570:	ba 00 00 21 50       	mov    edx,0x50210000
c0006575:	83 c0 0c             	add    eax,0xc
c0006578:	e8 fb b4 ff ff       	call   c0001a78 <st_dword>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	89 f2                	mov    edx,esi
c0006583:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006586:	83 c0 34             	add    eax,0x34
c0006589:	e8 ea b4 ff ff       	call   c0001a78 <st_dword>
c000658e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006592:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006599:	c1 e2 09             	shl    edx,0x9
c000659c:	83 c0 38             	add    eax,0x38
c000659f:	e8 d4 b4 ff ff       	call   c0001a78 <st_dword>
c00065a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a8:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065af:	c1 e2 09             	shl    edx,0x9
c00065b2:	83 c0 28             	add    eax,0x28
c00065b5:	e8 be b4 ff ff       	call   c0001a78 <st_dword>
c00065ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065c1:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c8:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065cc:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065d0:	e8 8b d3 ff ff       	call   c0003960 <store_xdir>
c00065d5:	89 c3                	mov    ebx,eax
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 85 d4 fe ff ff    	jne    c00064b3 <f_mkdir+0xb5>
c00065df:	eb 30                	jmp    c0006611 <f_mkdir+0x213>
c00065e1:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e5:	ba 00 00 21 50       	mov    edx,0x50210000
c00065ea:	83 c0 16             	add    eax,0x16
c00065ed:	e8 86 b4 ff ff       	call   c0001a78 <st_dword>
c00065f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f6:	89 f1                	mov    ecx,esi
c00065f8:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065fc:	e8 a5 e5 ff ff       	call   c0004ba6 <st_clust.isra.1>
c0006601:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006605:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006615:	e8 f1 dc ff ff       	call   c000430b <sync_fs>
c000661a:	89 c3                	mov    ebx,eax
c000661c:	e9 92 fe ff ff       	jmp    c00064b3 <f_mkdir+0xb5>
c0006621:	83 ec 80             	sub    esp,0xffffff80
c0006624:	89 d8                	mov    eax,ebx
c0006626:	5b                   	pop    ebx
c0006627:	5e                   	pop    esi
c0006628:	5f                   	pop    edi
c0006629:	c3                   	ret    

c000662a <f_rename>:
c000662a:	55                   	push   ebp
c000662b:	57                   	push   edi
c000662c:	56                   	push   esi
c000662d:	53                   	push   ebx
c000662e:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006634:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000663b:	e8 a4 b9 ff ff       	call   c0001fe4 <get_ldnumber>
c0006640:	b9 02 00 00 00       	mov    ecx,0x2
c0006645:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006649:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006650:	e8 3d be ff ff       	call   c0002492 <mount_volume>
c0006655:	85 c0                	test   eax,eax
c0006657:	0f 85 b5 02 00 00    	jne    c0006912 <f_rename+0x2e8>
c000665d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006661:	83 ec 0c             	sub    esp,0xc
c0006664:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006668:	68 60 04 00 00       	push   0x460
c000666d:	e8 c3 1b 00 00       	call   c0008235 <ff_memalloc>
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	89 c3                	mov    ebx,eax
c0006677:	b8 11 00 00 00       	mov    eax,0x11
c000667c:	85 db                	test   ebx,ebx
c000667e:	0f 84 8e 02 00 00    	je     c0006912 <f_rename+0x2e8>
c0006684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006688:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000668e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006691:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006694:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000669b:	8d 44 24 58          	lea    eax,[esp+0x58]
c000669f:	e8 64 e5 ff ff       	call   c0004c08 <follow_path>
c00066a4:	85 c0                	test   eax,eax
c00066a6:	0f 85 52 02 00 00    	jne    c00068fe <f_rename+0x2d4>
c00066ac:	b8 06 00 00 00       	mov    eax,0x6
c00066b1:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b9:	0f 85 3f 02 00 00    	jne    c00068fe <f_rename+0x2d4>
c00066bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c6:	0f 85 05 01 00 00    	jne    c00067d1 <f_rename+0x1a7>
c00066cc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066cf:	b9 40 00 00 00       	mov    ecx,0x40
c00066d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d8:	e8 a4 b3 ff ff       	call   c0001a81 <mem_cpy>
c00066dd:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066e2:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e6:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ed:	e8 8f b3 ff ff       	call   c0001a81 <mem_cpy>
c00066f2:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f9:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006700:	e8 03 e5 ff ff       	call   c0004c08 <follow_path>
c0006705:	85 c0                	test   eax,eax
c0006707:	75 29                	jne    c0006732 <f_rename+0x108>
c0006709:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000670d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006714:	74 0a                	je     c0006720 <f_rename+0xf6>
c0006716:	b8 08 00 00 00       	mov    eax,0x8
c000671b:	e9 de 01 00 00       	jmp    c00068fe <f_rename+0x2d4>
c0006720:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006727:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000672e:	75 e6                	jne    c0006716 <f_rename+0xec>
c0006730:	eb 09                	jmp    c000673b <f_rename+0x111>
c0006732:	83 f8 04             	cmp    eax,0x4
c0006735:	0f 85 c3 01 00 00    	jne    c00068fe <f_rename+0x2d4>
c000673b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006742:	e8 42 d9 ff ff       	call   c0004089 <dir_register>
c0006747:	85 c0                	test   eax,eax
c0006749:	0f 85 af 01 00 00    	jne    c00068fe <f_rename+0x2d4>
c000674f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006753:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006756:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006759:	89 c5                	mov    ebp,eax
c000675b:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000675e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006762:	8d 46 24             	lea    eax,[esi+0x24]
c0006765:	e8 98 b2 ff ff       	call   c0001a02 <ld_word>
c000676a:	b9 40 00 00 00       	mov    ecx,0x40
c000676f:	89 c7                	mov    edi,eax
c0006771:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006775:	89 f0                	mov    eax,esi
c0006777:	e8 05 b3 ff ff       	call   c0001a81 <mem_cpy>
c000677c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006780:	89 e9                	mov    ecx,ebp
c0006782:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006785:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006788:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000678c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006790:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006793:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006796:	0f b7 d7             	movzx  edx,di
c0006799:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000679c:	83 c0 24             	add    eax,0x24
c000679f:	e8 d0 b2 ff ff       	call   c0001a74 <st_word>
c00067a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ab:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067ae:	a8 10                	test   al,0x10
c00067b0:	75 06                	jne    c00067b8 <f_rename+0x18e>
c00067b2:	83 c8 20             	or     eax,0x20
c00067b5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067bf:	e8 9c d1 ff ff       	call   c0003960 <store_xdir>
c00067c4:	85 c0                	test   eax,eax
c00067c6:	0f 84 1c 01 00 00    	je     c00068e8 <f_rename+0x2be>
c00067cc:	e9 2d 01 00 00       	jmp    c00068fe <f_rename+0x2d4>
c00067d1:	b9 20 00 00 00       	mov    ecx,0x20
c00067d6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067e1:	e8 9b b2 ff ff       	call   c0001a81 <mem_cpy>
c00067e6:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067eb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067ef:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f6:	e8 86 b2 ff ff       	call   c0001a81 <mem_cpy>
c00067fb:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006802:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006809:	e8 fa e3 ff ff       	call   c0004c08 <follow_path>
c000680e:	85 c0                	test   eax,eax
c0006810:	75 27                	jne    c0006839 <f_rename+0x20f>
c0006812:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006816:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000681d:	0f 85 f3 fe ff ff    	jne    c0006716 <f_rename+0xec>
c0006823:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000682a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006831:	0f 85 df fe ff ff    	jne    c0006716 <f_rename+0xec>
c0006837:	eb 09                	jmp    c0006842 <f_rename+0x218>
c0006839:	83 f8 04             	cmp    eax,0x4
c000683c:	0f 85 bc 00 00 00    	jne    c00068fe <f_rename+0x2d4>
c0006842:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006849:	e8 3b d8 ff ff       	call   c0004089 <dir_register>
c000684e:	85 c0                	test   eax,eax
c0006850:	0f 85 a8 00 00 00    	jne    c00068fe <f_rename+0x2d4>
c0006856:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000685d:	b9 13 00 00 00       	mov    ecx,0x13
c0006862:	8d 46 0d             	lea    eax,[esi+0xd]
c0006865:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006869:	e8 13 b2 ff ff       	call   c0001a81 <mem_cpy>
c000686e:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006872:	a8 10                	test   al,0x10
c0006874:	75 03                	jne    c0006879 <f_rename+0x24f>
c0006876:	83 c8 20             	or     eax,0x20
c0006879:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000687c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006880:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006884:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006888:	74 5e                	je     c00068e8 <f_rename+0x2be>
c000688a:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006891:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006895:	74 51                	je     c00068e8 <f_rename+0x2be>
c0006897:	89 f2                	mov    edx,esi
c0006899:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000689d:	8a 07                	mov    al,BYTE PTR [edi]
c000689f:	e8 d9 e2 ff ff       	call   c0004b7d <ld_clust.isra.0>
c00068a4:	89 c2                	mov    edx,eax
c00068a6:	89 f8                	mov    eax,edi
c00068a8:	e8 ee b3 ff ff       	call   c0001c9b <clst2sect>
c00068ad:	89 c6                	mov    esi,eax
c00068af:	89 d1                	mov    ecx,edx
c00068b1:	b8 02 00 00 00       	mov    eax,0x2
c00068b6:	09 f2                	or     edx,esi
c00068b8:	74 44                	je     c00068fe <f_rename+0x2d4>
c00068ba:	89 f2                	mov    edx,esi
c00068bc:	89 f8                	mov    eax,edi
c00068be:	e8 1d b9 ff ff       	call   c00021e0 <move_window>
c00068c3:	85 c0                	test   eax,eax
c00068c5:	75 37                	jne    c00068fe <f_rename+0x2d4>
c00068c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068cb:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068cf:	75 17                	jne    c00068e8 <f_rename+0x2be>
c00068d1:	8d 50 74             	lea    edx,[eax+0x74]
c00068d4:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068db:	e8 c6 e2 ff ff       	call   c0004ba6 <st_clust.isra.1>
c00068e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ec:	e8 f4 d0 ff ff       	call   c00039e5 <dir_remove>
c00068f1:	85 c0                	test   eax,eax
c00068f3:	75 09                	jne    c00068fe <f_rename+0x2d4>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	e8 0d da ff ff       	call   c000430b <sync_fs>
c00068fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006902:	83 ec 0c             	sub    esp,0xc
c0006905:	53                   	push   ebx
c0006906:	e8 40 19 00 00       	call   c000824b <ff_memfree>
c000690b:	83 c4 10             	add    esp,0x10
c000690e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006912:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006918:	5b                   	pop    ebx
c0006919:	5e                   	pop    esi
c000691a:	5f                   	pop    edi
c000691b:	5d                   	pop    ebp
c000691c:	c3                   	ret    

c000691d <f_chmod>:
c000691d:	57                   	push   edi
c000691e:	b9 02 00 00 00       	mov    ecx,0x2
c0006923:	56                   	push   esi
c0006924:	53                   	push   ebx
c0006925:	83 ec 60             	sub    esp,0x60
c0006928:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006930:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006934:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006938:	e8 55 bb ff ff       	call   c0002492 <mount_volume>
c000693d:	85 c0                	test   eax,eax
c000693f:	0f 85 af 00 00 00    	jne    c00069f4 <f_chmod+0xd7>
c0006945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006949:	83 ec 0c             	sub    esp,0xc
c000694c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006950:	68 60 04 00 00       	push   0x460
c0006955:	e8 db 18 00 00       	call   c0008235 <ff_memalloc>
c000695a:	83 c4 10             	add    esp,0x10
c000695d:	89 c6                	mov    esi,eax
c000695f:	b8 11 00 00 00       	mov    eax,0x11
c0006964:	85 f6                	test   esi,esi
c0006966:	0f 84 88 00 00 00    	je     c00069f4 <f_chmod+0xd7>
c000696c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006970:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006976:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006979:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000697c:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006980:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006984:	e8 7f e2 ff ff       	call   c0004c08 <follow_path>
c0006989:	85 c0                	test   eax,eax
c000698b:	75 53                	jne    c00069e0 <f_chmod+0xc3>
c000698d:	b8 06 00 00 00       	mov    eax,0x6
c0006992:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006997:	75 47                	jne    c00069e0 <f_chmod+0xc3>
c0006999:	89 f9                	mov    ecx,edi
c000699b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000699f:	83 e1 27             	and    ecx,0x27
c00069a2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a5:	75 1d                	jne    c00069c4 <f_chmod+0xa7>
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ad:	21 cb                	and    ebx,ecx
c00069af:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069b2:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b9:	e8 a2 cf ff ff       	call   c0003960 <store_xdir>
c00069be:	85 c0                	test   eax,eax
c00069c0:	75 1e                	jne    c00069e0 <f_chmod+0xc3>
c00069c2:	eb 13                	jmp    c00069d7 <f_chmod+0xba>
c00069c4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c8:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cb:	21 cb                	and    ebx,ecx
c00069cd:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069d0:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069d3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069db:	e8 2b d9 ff ff       	call   c000430b <sync_fs>
c00069e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069e4:	83 ec 0c             	sub    esp,0xc
c00069e7:	56                   	push   esi
c00069e8:	e8 5e 18 00 00       	call   c000824b <ff_memfree>
c00069ed:	83 c4 10             	add    esp,0x10
c00069f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069f4:	83 c4 60             	add    esp,0x60
c00069f7:	5b                   	pop    ebx
c00069f8:	5e                   	pop    esi
c00069f9:	5f                   	pop    edi
c00069fa:	c3                   	ret    

c00069fb <f_utime>:
c00069fb:	56                   	push   esi
c00069fc:	b9 02 00 00 00       	mov    ecx,0x2
c0006a01:	53                   	push   ebx
c0006a02:	83 ec 64             	sub    esp,0x64
c0006a05:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a09:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a0d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a11:	e8 7c ba ff ff       	call   c0002492 <mount_volume>
c0006a16:	85 c0                	test   eax,eax
c0006a18:	0f 85 b5 00 00 00    	jne    c0006ad3 <f_utime+0xd8>
c0006a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a22:	83 ec 0c             	sub    esp,0xc
c0006a25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a29:	68 60 04 00 00       	push   0x460
c0006a2e:	e8 02 18 00 00       	call   c0008235 <ff_memalloc>
c0006a33:	83 c4 10             	add    esp,0x10
c0006a36:	89 c3                	mov    ebx,eax
c0006a38:	b8 11 00 00 00       	mov    eax,0x11
c0006a3d:	85 db                	test   ebx,ebx
c0006a3f:	0f 84 8e 00 00 00    	je     c0006ad3 <f_utime+0xd8>
c0006a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a49:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a4f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a52:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a55:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5d:	e8 a6 e1 ff ff       	call   c0004c08 <follow_path>
c0006a62:	85 c0                	test   eax,eax
c0006a64:	75 59                	jne    c0006abf <f_utime+0xc4>
c0006a66:	b8 06 00 00 00       	mov    eax,0x6
c0006a6b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a70:	75 4d                	jne    c0006abf <f_utime+0xc4>
c0006a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a76:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a7a:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a7e:	c1 e2 10             	shl    edx,0x10
c0006a81:	09 ca                	or     edx,ecx
c0006a83:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a86:	75 1a                	jne    c0006aa2 <f_utime+0xa7>
c0006a88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a8b:	83 c0 0c             	add    eax,0xc
c0006a8e:	e8 e5 af ff ff       	call   c0001a78 <st_dword>
c0006a93:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a97:	e8 c4 ce ff ff       	call   c0003960 <store_xdir>
c0006a9c:	85 c0                	test   eax,eax
c0006a9e:	75 1f                	jne    c0006abf <f_utime+0xc4>
c0006aa0:	eb 14                	jmp    c0006ab6 <f_utime+0xbb>
c0006aa2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa6:	83 c0 16             	add    eax,0x16
c0006aa9:	e8 ca af ff ff       	call   c0001a78 <st_dword>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aba:	e8 4c d8 ff ff       	call   c000430b <sync_fs>
c0006abf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ac3:	83 ec 0c             	sub    esp,0xc
c0006ac6:	53                   	push   ebx
c0006ac7:	e8 7f 17 00 00       	call   c000824b <ff_memfree>
c0006acc:	83 c4 10             	add    esp,0x10
c0006acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ad3:	83 c4 64             	add    esp,0x64
c0006ad6:	5b                   	pop    ebx
c0006ad7:	5e                   	pop    esi
c0006ad8:	c3                   	ret    

c0006ad9 <f_getlabel>:
c0006ad9:	55                   	push   ebp
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	57                   	push   edi
c0006add:	56                   	push   esi
c0006ade:	53                   	push   ebx
c0006adf:	83 ec 6c             	sub    esp,0x6c
c0006ae2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006aed:	e8 a0 b9 ff ff       	call   c0002492 <mount_volume>
c0006af2:	89 c6                	mov    esi,eax
c0006af4:	85 c0                	test   eax,eax
c0006af6:	0f 85 c1 01 00 00    	jne    c0006cbd <f_getlabel+0x1e4>
c0006afc:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b04:	0f 84 5f 01 00 00    	je     c0006c69 <f_getlabel+0x190>
c0006b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0e:	31 d2                	xor    edx,edx
c0006b10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b20:	e8 39 c4 ff ff       	call   c0002f5e <dir_sdi>
c0006b25:	85 c0                	test   eax,eax
c0006b27:	0f 85 2d 01 00 00    	jne    c0006c5a <f_getlabel+0x181>
c0006b2d:	ba 01 00 00 00       	mov    edx,0x1
c0006b32:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b36:	e8 33 cc ff ff       	call   c000376e <dir_read>
c0006b3b:	85 c0                	test   eax,eax
c0006b3d:	0f 85 17 01 00 00    	jne    c0006c5a <f_getlabel+0x181>
c0006b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b47:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b4a:	74 09                	je     c0006b55 <f_getlabel+0x7c>
c0006b4c:	31 db                	xor    ebx,ebx
c0006b4e:	31 c9                	xor    ecx,ecx
c0006b50:	e9 c8 00 00 00       	jmp    c0006c1d <f_getlabel+0x144>
c0006b55:	31 ed                	xor    ebp,ebp
c0006b57:	31 db                	xor    ebx,ebx
c0006b59:	31 ff                	xor    edi,edi
c0006b5b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b63:	39 fa                	cmp    edx,edi
c0006b65:	76 4b                	jbe    c0006bb2 <f_getlabel+0xd9>
c0006b67:	47                   	inc    edi
c0006b68:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6b:	01 d0                	add    eax,edx
c0006b6d:	e8 90 ae ff ff       	call   c0001a02 <ld_word>
c0006b72:	66 85 ed             	test   bp,bp
c0006b75:	75 0d                	jne    c0006b84 <f_getlabel+0xab>
c0006b77:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7d:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b82:	76 28                	jbe    c0006bac <f_getlabel+0xd3>
c0006b84:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8b:	89 e9                	mov    ecx,ebp
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	c1 e1 10             	shl    ecx,0x10
c0006b92:	0f b7 c0             	movzx  eax,ax
c0006b95:	09 c8                	or     eax,ecx
c0006b97:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9c:	e8 01 b0 ff ff       	call   c0001ba2 <put_utf>
c0006ba1:	84 c0                	test   al,al
c0006ba3:	74 0b                	je     c0006bb0 <f_getlabel+0xd7>
c0006ba5:	0f b6 c0             	movzx  eax,al
c0006ba8:	01 c3                	add    ebx,eax
c0006baa:	31 c0                	xor    eax,eax
c0006bac:	89 c5                	mov    ebp,eax
c0006bae:	eb ab                	jmp    c0006b5b <f_getlabel+0x82>
c0006bb0:	31 db                	xor    ebx,ebx
c0006bb2:	66 85 ed             	test   bp,bp
c0006bb5:	74 02                	je     c0006bb9 <f_getlabel+0xe0>
c0006bb7:	31 db                	xor    ebx,ebx
c0006bb9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bc0:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bc4:	e9 a0 00 00 00       	jmp    c0006c69 <f_getlabel+0x190>
c0006bc9:	83 ff 0b             	cmp    edi,0xb
c0006bcc:	74 11                	je     c0006bdf <f_getlabel+0x106>
c0006bce:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd7:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bda:	c1 e0 08             	shl    eax,0x8
c0006bdd:	09 c2                	or     edx,eax
c0006bdf:	0f b7 d2             	movzx  edx,dx
c0006be2:	50                   	push   eax
c0006be3:	50                   	push   eax
c0006be4:	68 b5 01 00 00       	push   0x1b5
c0006be9:	52                   	push   edx
c0006bea:	e8 03 17 00 00       	call   c00082f2 <ff_oem2uni>
c0006bef:	83 c4 10             	add    esp,0x10
c0006bf2:	66 85 c0             	test   ax,ax
c0006bf5:	74 46                	je     c0006c3d <f_getlabel+0x164>
c0006bf7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfe:	0f b7 c0             	movzx  eax,ax
c0006c01:	01 da                	add    edx,ebx
c0006c03:	b9 04 00 00 00       	mov    ecx,0x4
c0006c08:	e8 95 af ff ff       	call   c0001ba2 <put_utf>
c0006c0d:	84 c0                	test   al,al
c0006c0f:	74 2c                	je     c0006c3d <f_getlabel+0x164>
c0006c11:	0f b6 c0             	movzx  eax,al
c0006c14:	01 c3                	add    ebx,eax
c0006c16:	83 ff 0b             	cmp    edi,0xb
c0006c19:	74 24                	je     c0006c3f <f_getlabel+0x166>
c0006c1b:	89 f9                	mov    ecx,edi
c0006c1d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c21:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c24:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c29:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c32:	e8 9f ae ff ff       	call   c0001ad6 <dbc_1st>
c0006c37:	85 c0                	test   eax,eax
c0006c39:	74 a4                	je     c0006bdf <f_getlabel+0x106>
c0006c3b:	eb 8c                	jmp    c0006bc9 <f_getlabel+0xf0>
c0006c3d:	31 db                	xor    ebx,ebx
c0006c3f:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c46:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c49:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c50:	74 17                	je     c0006c69 <f_getlabel+0x190>
c0006c52:	4b                   	dec    ebx
c0006c53:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c56:	74 ee                	je     c0006c46 <f_getlabel+0x16d>
c0006c58:	eb 0f                	jmp    c0006c69 <f_getlabel+0x190>
c0006c5a:	83 f8 04             	cmp    eax,0x4
c0006c5d:	75 5c                	jne    c0006cbb <f_getlabel+0x1e2>
c0006c5f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c66:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c69:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c71:	74 4a                	je     c0006cbd <f_getlabel+0x1e4>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7a:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c7d:	e8 5e b5 ff ff       	call   c00021e0 <move_window>
c0006c82:	89 c6                	mov    esi,eax
c0006c84:	85 c0                	test   eax,eax
c0006c86:	75 35                	jne    c0006cbd <f_getlabel+0x1e4>
c0006c88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c8c:	b8 43 00 00 00       	mov    eax,0x43
c0006c91:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c93:	80 f9 03             	cmp    cl,0x3
c0006c96:	74 0f                	je     c0006ca7 <f_getlabel+0x1ce>
c0006c98:	31 c0                	xor    eax,eax
c0006c9a:	80 f9 04             	cmp    cl,0x4
c0006c9d:	0f 94 c0             	sete   al
c0006ca0:	48                   	dec    eax
c0006ca1:	83 e0 c3             	and    eax,0xffffffc3
c0006ca4:	83 c0 64             	add    eax,0x64
c0006ca7:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cab:	e8 5f ad ff ff       	call   c0001a0f <ld_dword>
c0006cb0:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cb7:	89 07                	mov    DWORD PTR [edi],eax
c0006cb9:	eb 02                	jmp    c0006cbd <f_getlabel+0x1e4>
c0006cbb:	89 c6                	mov    esi,eax
c0006cbd:	83 c4 6c             	add    esp,0x6c
c0006cc0:	89 f0                	mov    eax,esi
c0006cc2:	5b                   	pop    ebx
c0006cc3:	5e                   	pop    esi
c0006cc4:	5f                   	pop    edi
c0006cc5:	5d                   	pop    ebp
c0006cc6:	c3                   	ret    

c0006cc7 <f_setlabel>:
c0006cc7:	56                   	push   esi
c0006cc8:	b9 02 00 00 00       	mov    ecx,0x2
c0006ccd:	53                   	push   ebx
c0006cce:	83 ec 74             	sub    esp,0x74
c0006cd1:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdc:	e8 b1 b7 ff ff       	call   c0002492 <mount_volume>
c0006ce1:	89 c6                	mov    esi,eax
c0006ce3:	85 c0                	test   eax,eax
c0006ce5:	0f 85 41 02 00 00    	jne    c0006f2c <f_setlabel+0x265>
c0006ceb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cef:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf2:	0f 85 8e 00 00 00    	jne    c0006d86 <f_setlabel+0xbf>
c0006cf8:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfd:	31 d2                	xor    edx,edx
c0006cff:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 8c ad ff ff       	call   c0001a96 <mem_set>
c0006d0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d11:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d14:	0f 86 0a 01 00 00    	jbe    c0006e24 <f_setlabel+0x15d>
c0006d1a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d21:	e8 b6 ad ff ff       	call   c0001adc <tchar2uni>
c0006d26:	89 c6                	mov    esi,eax
c0006d28:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2d:	76 2a                	jbe    c0006d59 <f_setlabel+0x92>
c0006d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0006d32:	74 05                	je     c0006d39 <f_setlabel+0x72>
c0006d34:	83 fb 09             	cmp    ebx,0x9
c0006d37:	76 0a                	jbe    c0006d43 <f_setlabel+0x7c>
c0006d39:	be 06 00 00 00       	mov    esi,0x6
c0006d3e:	e9 e9 01 00 00       	jmp    c0006f2c <f_setlabel+0x265>
c0006d43:	89 c2                	mov    edx,eax
c0006d45:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d49:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d4c:	c1 ea 10             	shr    edx,0x10
c0006d4f:	01 c8                	add    eax,ecx
c0006d51:	43                   	inc    ebx
c0006d52:	e8 1d ad ff ff       	call   c0001a74 <st_word>
c0006d57:	eb 04                	jmp    c0006d5d <f_setlabel+0x96>
c0006d59:	85 c0                	test   eax,eax
c0006d5b:	74 dc                	je     c0006d39 <f_setlabel+0x72>
c0006d5d:	89 f2                	mov    edx,esi
c0006d5f:	b8 d7 71 02 c0       	mov    eax,0xc00271d7
c0006d64:	e8 5b ad ff ff       	call   c0001ac4 <chk_chr>
c0006d69:	85 c0                	test   eax,eax
c0006d6b:	75 cc                	jne    c0006d39 <f_setlabel+0x72>
c0006d6d:	83 fb 0a             	cmp    ebx,0xa
c0006d70:	77 c7                	ja     c0006d39 <f_setlabel+0x72>
c0006d72:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d75:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d79:	0f b7 d6             	movzx  edx,si
c0006d7c:	01 c8                	add    eax,ecx
c0006d7e:	43                   	inc    ebx
c0006d7f:	e8 f0 ac ff ff       	call   c0001a74 <st_word>
c0006d84:	eb 84                	jmp    c0006d0a <f_setlabel+0x43>
c0006d86:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8b:	ba 20 00 00 00       	mov    edx,0x20
c0006d90:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d94:	31 db                	xor    ebx,ebx
c0006d96:	e8 fb ac ff ff       	call   c0001a96 <mem_set>
c0006d9b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da5:	76 60                	jbe    c0006e07 <f_setlabel+0x140>
c0006da7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dae:	e8 29 ad ff ff       	call   c0001adc <tchar2uni>
c0006db3:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db8:	0f 87 7b ff ff ff    	ja     c0006d39 <f_setlabel+0x72>
c0006dbe:	83 ec 0c             	sub    esp,0xc
c0006dc1:	50                   	push   eax
c0006dc2:	e8 97 15 00 00       	call   c000835e <ff_wtoupper>
c0006dc7:	5a                   	pop    edx
c0006dc8:	59                   	pop    ecx
c0006dc9:	68 b5 01 00 00       	push   0x1b5
c0006dce:	50                   	push   eax
c0006dcf:	e8 8e 14 00 00       	call   c0008262 <ff_uni2oem>
c0006dd4:	83 c4 10             	add    esp,0x10
c0006dd7:	89 c6                	mov    esi,eax
c0006dd9:	66 85 c0             	test   ax,ax
c0006ddc:	0f 84 57 ff ff ff    	je     c0006d39 <f_setlabel+0x72>
c0006de2:	0f b7 d0             	movzx  edx,ax
c0006de5:	b8 d0 71 02 c0       	mov    eax,0xc00271d0
c0006dea:	e8 d5 ac ff ff       	call   c0001ac4 <chk_chr>
c0006def:	85 c0                	test   eax,eax
c0006df1:	0f 85 42 ff ff ff    	jne    c0006d39 <f_setlabel+0x72>
c0006df7:	66 81 fe ff 00       	cmp    si,0xff
c0006dfc:	0f 87 14 01 00 00    	ja     c0006f16 <f_setlabel+0x24f>
c0006e02:	e9 fa 00 00 00       	jmp    c0006f01 <f_setlabel+0x23a>
c0006e07:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0c:	0f 84 27 ff ff ff    	je     c0006d39 <f_setlabel+0x72>
c0006e12:	85 db                	test   ebx,ebx
c0006e14:	74 0e                	je     c0006e24 <f_setlabel+0x15d>
c0006e16:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e19:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1e:	75 04                	jne    c0006e24 <f_setlabel+0x15d>
c0006e20:	89 c3                	mov    ebx,eax
c0006e22:	eb ee                	jmp    c0006e12 <f_setlabel+0x14b>
c0006e24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e28:	31 d2                	xor    edx,edx
c0006e2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e3a:	e8 1f c1 ff ff       	call   c0002f5e <dir_sdi>
c0006e3f:	89 c6                	mov    esi,eax
c0006e41:	85 c0                	test   eax,eax
c0006e43:	0f 85 e3 00 00 00    	jne    c0006f2c <f_setlabel+0x265>
c0006e49:	ba 01 00 00 00       	mov    edx,0x1
c0006e4e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e52:	e8 17 c9 ff ff       	call   c000376e <dir_read>
c0006e57:	85 c0                	test   eax,eax
c0006e59:	75 21                	jne    c0006e7c <f_setlabel+0x1b5>
c0006e5b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e5f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e63:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e66:	74 5d                	je     c0006ec5 <f_setlabel+0x1fe>
c0006e68:	85 db                	test   ebx,ebx
c0006e6a:	74 0b                	je     c0006e77 <f_setlabel+0x1b0>
c0006e6c:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e71:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e75:	eb 70                	jmp    c0006ee7 <f_setlabel+0x220>
c0006e77:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7a:	eb 70                	jmp    c0006eec <f_setlabel+0x225>
c0006e7c:	83 f8 04             	cmp    eax,0x4
c0006e7f:	75 7c                	jne    c0006efd <f_setlabel+0x236>
c0006e81:	85 db                	test   ebx,ebx
c0006e83:	0f 84 a3 00 00 00    	je     c0006f2c <f_setlabel+0x265>
c0006e89:	ba 01 00 00 00       	mov    edx,0x1
c0006e8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e92:	e8 51 ca ff ff       	call   c00038e8 <dir_alloc>
c0006e97:	89 c6                	mov    esi,eax
c0006e99:	85 c0                	test   eax,eax
c0006e9b:	0f 85 8b 00 00 00    	jne    c0006f2c <f_setlabel+0x265>
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea7:	b9 20 00 00 00       	mov    ecx,0x20
c0006eac:	e8 e5 ab ff ff       	call   c0001a96 <mem_set>
c0006eb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebc:	75 18                	jne    c0006ed6 <f_setlabel+0x20f>
c0006ebe:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec5:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec8:	b9 16 00 00 00       	mov    ecx,0x16
c0006ecd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed1:	83 c0 02             	add    eax,0x2
c0006ed4:	eb 9b                	jmp    c0006e71 <f_setlabel+0x1aa>
c0006ed6:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006eda:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edf:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee7:	e8 95 ab ff ff       	call   c0001a81 <mem_cpy>
c0006eec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef8:	e8 0e d4 ff ff       	call   c000430b <sync_fs>
c0006efd:	89 c6                	mov    esi,eax
c0006eff:	eb 2b                	jmp    c0006f2c <f_setlabel+0x265>
c0006f01:	83 fb 0a             	cmp    ebx,0xa
c0006f04:	0f 87 2f fe ff ff    	ja     c0006d39 <f_setlabel+0x72>
c0006f0a:	89 f0                	mov    eax,esi
c0006f0c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f10:	43                   	inc    ebx
c0006f11:	e9 85 fe ff ff       	jmp    c0006d9b <f_setlabel+0xd4>
c0006f16:	83 fb 09             	cmp    ebx,0x9
c0006f19:	0f 87 1a fe ff ff    	ja     c0006d39 <f_setlabel+0x72>
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	66 c1 e8 08          	shr    ax,0x8
c0006f25:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f29:	43                   	inc    ebx
c0006f2a:	eb de                	jmp    c0006f0a <f_setlabel+0x243>
c0006f2c:	89 f0                	mov    eax,esi
c0006f2e:	83 c4 74             	add    esp,0x74
c0006f31:	5b                   	pop    ebx
c0006f32:	5e                   	pop    esi
c0006f33:	c3                   	ret    

c0006f34 <f_forward>:
c0006f34:	55                   	push   ebp
c0006f35:	57                   	push   edi
c0006f36:	56                   	push   esi
c0006f37:	53                   	push   ebx
c0006f38:	83 ec 2c             	sub    esp,0x2c
c0006f3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f3f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f49:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f4d:	89 d8                	mov    eax,ebx
c0006f4f:	e8 b1 b1 ff ff       	call   c0002105 <validate>
c0006f54:	89 c5                	mov    ebp,eax
c0006f56:	85 c0                	test   eax,eax
c0006f58:	0f 85 aa 01 00 00    	jne    c0007108 <f_forward+0x1d4>
c0006f5e:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f62:	85 ed                	test   ebp,ebp
c0006f64:	0f 85 9e 01 00 00    	jne    c0007108 <f_forward+0x1d4>
c0006f6a:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6e:	0f 84 8f 01 00 00    	je     c0007103 <f_forward+0x1cf>
c0006f74:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f77:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7a:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7d:	bf 00 00 00 00       	mov    edi,0x0
c0006f82:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f85:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f89:	89 d1                	mov    ecx,edx
c0006f8b:	19 f9                	sbb    ecx,edi
c0006f8d:	0f 83 cf 00 00 00    	jae    c0007062 <f_forward+0x12e>
c0006f93:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f97:	e9 c6 00 00 00       	jmp    c0007062 <f_forward+0x12e>
c0006f9c:	50                   	push   eax
c0006f9d:	50                   	push   eax
c0006f9e:	6a 00                	push   0x0
c0006fa0:	6a 00                	push   0x0
c0006fa2:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa6:	83 c4 10             	add    esp,0x10
c0006fa9:	85 c0                	test   eax,eax
c0006fab:	0f 84 57 01 00 00    	je     c0007108 <f_forward+0x1d4>
c0006fb1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbb:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fbf:	89 d7                	mov    edi,edx
c0006fc1:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc4:	89 c6                	mov    esi,eax
c0006fc6:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fca:	21 ce                	and    esi,ecx
c0006fcc:	89 c1                	mov    ecx,eax
c0006fce:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd4:	0f 84 98 00 00 00    	je     c0007072 <f_forward+0x13e>
c0006fda:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fde:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe1:	89 c8                	mov    eax,ecx
c0006fe3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe7:	e8 af ac ff ff       	call   c0001c9b <clst2sect>
c0006fec:	89 d7                	mov    edi,edx
c0006fee:	09 c7                	or     edi,eax
c0006ff0:	0f 84 9e 00 00 00    	je     c0007094 <f_forward+0x160>
c0006ff6:	31 ff                	xor    edi,edi
c0006ff8:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006ffb:	01 c6                	add    esi,eax
c0006ffd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007001:	11 d7                	adc    edi,edx
c0007003:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007006:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007009:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000700d:	39 fa                	cmp    edx,edi
c000700f:	0f 85 a2 00 00 00    	jne    c00070b7 <f_forward+0x183>
c0007015:	39 f0                	cmp    eax,esi
c0007017:	0f 85 9a 00 00 00    	jne    c00070b7 <f_forward+0x183>
c000701d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007020:	ba 00 02 00 00       	mov    edx,0x200
c0007025:	25 ff 01 00 00       	and    eax,0x1ff
c000702a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702e:	29 c2                	sub    edx,eax
c0007030:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007033:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007036:	39 d1                	cmp    ecx,edx
c0007038:	76 02                	jbe    c000703c <f_forward+0x108>
c000703a:	89 d1                	mov    ecx,edx
c000703c:	8d 73 50             	lea    esi,[ebx+0x50]
c000703f:	52                   	push   edx
c0007040:	01 c6                	add    esi,eax
c0007042:	52                   	push   edx
c0007043:	51                   	push   ecx
c0007044:	56                   	push   esi
c0007045:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007049:	83 c4 10             	add    esp,0x10
c000704c:	85 c0                	test   eax,eax
c000704e:	74 44                	je     c0007094 <f_forward+0x160>
c0007050:	31 ff                	xor    edi,edi
c0007052:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007055:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007058:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705c:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007060:	01 07                	add    DWORD PTR [edi],eax
c0007062:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007067:	0f 85 2f ff ff ff    	jne    c0006f9c <f_forward+0x68>
c000706d:	e9 96 00 00 00       	jmp    c0007108 <f_forward+0x1d4>
c0007072:	85 f6                	test   esi,esi
c0007074:	0f 85 60 ff ff ff    	jne    c0006fda <f_forward+0xa6>
c000707a:	89 d7                	mov    edi,edx
c000707c:	09 c7                	or     edi,eax
c000707e:	75 05                	jne    c0007085 <f_forward+0x151>
c0007080:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007083:	eb 0a                	jmp    c000708f <f_forward+0x15b>
c0007085:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007088:	89 d8                	mov    eax,ebx
c000708a:	e8 d9 bc ff ff       	call   c0002d68 <get_fat>
c000708f:	83 f8 01             	cmp    eax,0x1
c0007092:	77 0b                	ja     c000709f <f_forward+0x16b>
c0007094:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007098:	bd 02 00 00 00       	mov    ebp,0x2
c000709d:	eb 69                	jmp    c0007108 <f_forward+0x1d4>
c000709f:	83 f8 ff             	cmp    eax,0xffffffff
c00070a2:	75 0b                	jne    c00070af <f_forward+0x17b>
c00070a4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a8:	bd 01 00 00 00       	mov    ebp,0x1
c00070ad:	eb 59                	jmp    c0007108 <f_forward+0x1d4>
c00070af:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b2:	e9 23 ff ff ff       	jmp    c0006fda <f_forward+0xa6>
c00070b7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bb:	79 20                	jns    c00070dd <f_forward+0x1a9>
c00070bd:	83 ec 0c             	sub    esp,0xc
c00070c0:	6a 01                	push   0x1
c00070c2:	52                   	push   edx
c00070c3:	50                   	push   eax
c00070c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cc:	50                   	push   eax
c00070cd:	e8 fb a8 ff ff       	call   c00019cd <disk_write>
c00070d2:	83 c4 20             	add    esp,0x20
c00070d5:	85 c0                	test   eax,eax
c00070d7:	75 cb                	jne    c00070a4 <f_forward+0x170>
c00070d9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070dd:	83 ec 0c             	sub    esp,0xc
c00070e0:	6a 01                	push   0x1
c00070e2:	57                   	push   edi
c00070e3:	56                   	push   esi
c00070e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ec:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f0:	50                   	push   eax
c00070f1:	e8 c1 a8 ff ff       	call   c00019b7 <disk_read>
c00070f6:	83 c4 20             	add    esp,0x20
c00070f9:	85 c0                	test   eax,eax
c00070fb:	0f 84 1c ff ff ff    	je     c000701d <f_forward+0xe9>
c0007101:	eb a1                	jmp    c00070a4 <f_forward+0x170>
c0007103:	bd 07 00 00 00       	mov    ebp,0x7
c0007108:	83 c4 2c             	add    esp,0x2c
c000710b:	89 e8                	mov    eax,ebp
c000710d:	5b                   	pop    ebx
c000710e:	5e                   	pop    esi
c000710f:	5f                   	pop    edi
c0007110:	5d                   	pop    ebp
c0007111:	c3                   	ret    

c0007112 <f_mkfs>:
c0007112:	55                   	push   ebp
c0007113:	57                   	push   edi
c0007114:	56                   	push   esi
c0007115:	53                   	push   ebx
c0007116:	bb 0b 00 00 00       	mov    ebx,0xb
c000711b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007121:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007128:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000712f:	e8 b0 ae ff ff       	call   c0001fe4 <get_ldnumber>
c0007134:	85 c0                	test   eax,eax
c0007136:	0f 88 ec 10 00 00    	js     c0008228 <f_mkfs+0x1116>
c000713c:	8b 14 85 20 bd 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd42e0]
c0007143:	85 d2                	test   edx,edx
c0007145:	74 03                	je     c000714a <f_mkfs+0x38>
c0007147:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714a:	85 f6                	test   esi,esi
c000714c:	75 05                	jne    c0007153 <f_mkfs+0x41>
c000714e:	be c0 71 02 c0       	mov    esi,0xc00271c0
c0007153:	83 ec 0c             	sub    esp,0xc
c0007156:	0f b6 c0             	movzx  eax,al
c0007159:	bb 03 00 00 00       	mov    ebx,0x3
c000715e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007166:	e8 49 a8 ff ff       	call   c00019b4 <disk_initialize>
c000716b:	83 c4 10             	add    esp,0x10
c000716e:	a8 01                	test   al,0x1
c0007170:	0f 85 b2 10 00 00    	jne    c0008228 <f_mkfs+0x1116>
c0007176:	bb 0a 00 00 00       	mov    ebx,0xa
c000717b:	a8 04                	test   al,0x4
c000717d:	0f 85 a5 10 00 00    	jne    c0008228 <f_mkfs+0x1116>
c0007183:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007186:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718a:	85 c0                	test   eax,eax
c000718c:	75 20                	jne    c00071ae <f_mkfs+0x9c>
c000718e:	51                   	push   ecx
c000718f:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007193:	50                   	push   eax
c0007194:	6a 03                	push   0x3
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	e8 44 a8 ff ff       	call   c00019e3 <disk_ioctl>
c000719f:	83 c4 10             	add    esp,0x10
c00071a2:	85 c0                	test   eax,eax
c00071a4:	74 08                	je     c00071ae <f_mkfs+0x9c>
c00071a6:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071ae:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b2:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b5:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071ba:	77 04                	ja     c00071c0 <f_mkfs+0xae>
c00071bc:	85 c2                	test   edx,eax
c00071be:	74 08                	je     c00071c8 <f_mkfs+0xb6>
c00071c0:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c8:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cb:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071cf:	48                   	dec    eax
c00071d0:	3c 01                	cmp    al,0x1
c00071d2:	76 05                	jbe    c00071d9 <f_mkfs+0xc7>
c00071d4:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071d9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e0:	48                   	dec    eax
c00071e1:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e6:	77 07                	ja     c00071ef <f_mkfs+0xdd>
c00071e8:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ed:	74 08                	je     c00071f7 <f_mkfs+0xe5>
c00071ef:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f7:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fa:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007200:	77 07                	ja     c0007209 <f_mkfs+0xf7>
c0007202:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007205:	85 d8                	test   eax,ebx
c0007207:	74 02                	je     c000720b <f_mkfs+0xf9>
c0007209:	31 db                	xor    ebx,ebx
c000720b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007216:	77 0a                	ja     c0007222 <f_mkfs+0x110>
c0007218:	bb 11 00 00 00       	mov    ebx,0x11
c000721d:	e9 06 10 00 00       	jmp    c0008228 <f_mkfs+0x1116>
c0007222:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007229:	8b 36                	mov    esi,DWORD PTR [esi]
c000722b:	85 ed                	test   ebp,ebp
c000722d:	75 1e                	jne    c000724d <f_mkfs+0x13b>
c000722f:	83 ec 0c             	sub    esp,0xc
c0007232:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007239:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723e:	50                   	push   eax
c000723f:	e8 f1 0f 00 00       	call   c0008235 <ff_memalloc>
c0007244:	83 c4 10             	add    esp,0x10
c0007247:	89 c5                	mov    ebp,eax
c0007249:	85 c0                	test   eax,eax
c000724b:	74 cb                	je     c0007218 <f_mkfs+0x106>
c000724d:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007255:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725d:	52                   	push   edx
c000725e:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007262:	50                   	push   eax
c0007263:	6a 01                	push   0x1
c0007265:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007269:	e8 75 a7 ff ff       	call   c00019e3 <disk_ioctl>
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	0f 85 4a 0f 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007279:	89 f1                	mov    ecx,esi
c000727b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007283:	83 e1 0f             	and    ecx,0xf
c0007286:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728e:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007292:	83 e6 08             	and    esi,0x8
c0007295:	75 56                	jne    c00072ed <f_mkfs+0x1db>
c0007297:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729b:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000729f:	83 ff 00             	cmp    edi,0x0
c00072a2:	76 20                	jbe    c00072c4 <f_mkfs+0x1b2>
c00072a4:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072a9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b7:	83 d7 ff             	adc    edi,0xffffffff
c00072ba:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072be:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c2:	eb 21                	jmp    c00072e5 <f_mkfs+0x1d3>
c00072c4:	ba 3f 00 00 00       	mov    edx,0x3f
c00072c9:	39 f2                	cmp    edx,esi
c00072cb:	19 f8                	sbb    eax,edi
c00072cd:	73 1e                	jae    c00072ed <f_mkfs+0x1db>
c00072cf:	83 c6 c1             	add    esi,0xffffffc1
c00072d2:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072da:	83 d7 ff             	adc    edi,0xffffffff
c00072dd:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e1:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ed:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f1:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fc:	31 c0                	xor    eax,eax
c00072fe:	ba 7f 00 00 00       	mov    edx,0x7f
c0007303:	89 c7                	mov    edi,eax
c0007305:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007308:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730c:	0f 83 c5 0a 00 00    	jae    c0007dd7 <f_mkfs+0xcc5>
c0007312:	89 df                	mov    edi,ebx
c0007314:	c1 ef 09             	shr    edi,0x9
c0007317:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007322:	c1 ef 09             	shr    edi,0x9
c0007325:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732e:	74 29                	je     c0007359 <f_mkfs+0x247>
c0007330:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007336:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000733b:	0f 97 c2             	seta   dl
c000733e:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007341:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007345:	0f 92 c0             	setb   al
c0007348:	08 c2                	or     dl,al
c000734a:	75 5b                	jne    c00073a7 <f_mkfs+0x295>
c000734c:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007350:	83 e0 07             	and    eax,0x7
c0007353:	3c 04                	cmp    al,0x4
c0007355:	74 50                	je     c00073a7 <f_mkfs+0x295>
c0007357:	eb 1b                	jmp    c0007374 <f_mkfs+0x262>
c0007359:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735e:	0f 87 73 0a 00 00    	ja     c0007dd7 <f_mkfs+0xcc5>
c0007364:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736a:	76 08                	jbe    c0007374 <f_mkfs+0x262>
c000736c:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007374:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007378:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737c:	83 e0 01             	and    eax,0x1
c000737f:	80 e1 02             	and    cl,0x2
c0007382:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007386:	74 0d                	je     c0007395 <f_mkfs+0x283>
c0007388:	84 c0                	test   al,al
c000738a:	0f 84 53 09 00 00    	je     c0007ce3 <f_mkfs+0xbd1>
c0007390:	e9 12 08 00 00       	jmp    c0007ba7 <f_mkfs+0xa95>
c0007395:	bb 13 00 00 00       	mov    ebx,0x13
c000739a:	84 c0                	test   al,al
c000739c:	0f 85 05 08 00 00    	jne    c0007ba7 <f_mkfs+0xa95>
c00073a2:	e9 39 0e 00 00       	jmp    c00081e0 <f_mkfs+0x10ce>
c00073a7:	31 c0                	xor    eax,eax
c00073a9:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ae:	89 c7                	mov    edi,eax
c00073b0:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b3:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b7:	0f 83 1a 0a 00 00    	jae    c0007dd7 <f_mkfs+0xcc5>
c00073bd:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c3:	77 39                	ja     c00073fe <f_mkfs+0x2ec>
c00073c5:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073ca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d5:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073d9:	73 08                	jae    c00073e3 <f_mkfs+0x2d1>
c00073db:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e3:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073eb:	b8 00 00 00 00       	mov    eax,0x0
c00073f0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f4:	73 08                	jae    c00073fe <f_mkfs+0x2ec>
c00073f6:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007402:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007406:	83 c0 20             	add    eax,0x20
c0007409:	83 d2 00             	adc    edx,0x0
c000740c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007410:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007418:	31 d2                	xor    edx,edx
c000741a:	31 ff                	xor    edi,edi
c000741c:	52                   	push   edx
c000741d:	89 fb                	mov    ebx,edi
c000741f:	50                   	push   eax
c0007420:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007424:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007428:	e8 1f d4 01 00       	call   c002484c <__udivdi3>
c000742d:	83 c4 10             	add    esp,0x10
c0007430:	c1 e0 02             	shl    eax,0x2
c0007433:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007437:	05 07 02 00 00       	add    eax,0x207
c000743c:	89 f1                	mov    ecx,esi
c000743e:	c1 e8 09             	shr    eax,0x9
c0007441:	83 c1 ff             	add    ecx,0xffffffff
c0007444:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007448:	83 d3 ff             	adc    ebx,0xffffffff
c000744b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000744f:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007453:	31 d2                	xor    edx,edx
c0007455:	01 c8                	add    eax,ecx
c0007457:	11 da                	adc    edx,ebx
c0007459:	89 c1                	mov    ecx,eax
c000745b:	f7 de                	neg    esi
c000745d:	89 d0                	mov    eax,edx
c000745f:	83 d7 00             	adc    edi,0x0
c0007462:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007466:	f7 df                	neg    edi
c0007468:	21 f1                	and    ecx,esi
c000746a:	21 f8                	and    eax,edi
c000746c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007474:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007478:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747c:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007480:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007483:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007487:	0f ac d0 01          	shrd   eax,edx,0x1
c000748b:	89 df                	mov    edi,ebx
c000748d:	d1 ea                	shr    edx,1
c000748f:	39 c1                	cmp    ecx,eax
c0007491:	19 d7                	sbb    edi,edx
c0007493:	0f 83 3e 09 00 00    	jae    c0007dd7 <f_mkfs+0xcc5>
c0007499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749d:	31 d2                	xor    edx,edx
c000749f:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a7:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074ae:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074be:	83 f8 0f             	cmp    eax,0xf
c00074c1:	0f 86 10 09 00 00    	jbe    c0007dd7 <f_mkfs+0xcc5>
c00074c7:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074cf:	0f 87 02 09 00 00    	ja     c0007dd7 <f_mkfs+0xcc5>
c00074d5:	31 d2                	xor    edx,edx
c00074d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074db:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e3:	83 c0 07             	add    eax,0x7
c00074e6:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074ee:	c1 e8 03             	shr    eax,0x3
c00074f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00074f8:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007500:	c1 e0 09             	shl    eax,0x9
c0007503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007507:	48                   	dec    eax
c0007508:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007510:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007514:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007518:	31 d2                	xor    edx,edx
c000751a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000751e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007525:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007529:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007532:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007536:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000753a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000753e:	31 ff                	xor    edi,edi
c0007540:	31 f6                	xor    esi,esi
c0007542:	31 db                	xor    ebx,ebx
c0007544:	85 ff                	test   edi,edi
c0007546:	74 05                	je     c000754d <f_mkfs+0x43b>
c0007548:	4f                   	dec    edi
c0007549:	74 44                	je     c000758f <f_mkfs+0x47d>
c000754b:	eb 4f                	jmp    c000759c <f_mkfs+0x48a>
c000754d:	83 ec 0c             	sub    esp,0xc
c0007550:	0f b7 c3             	movzx  eax,bx
c0007553:	50                   	push   eax
c0007554:	e8 05 0e 00 00       	call   c000835e <ff_wtoupper>
c0007559:	83 c4 10             	add    esp,0x10
c000755c:	89 c1                	mov    ecx,eax
c000755e:	8d 53 01             	lea    edx,[ebx+0x1]
c0007561:	66 39 c3             	cmp    bx,ax
c0007564:	75 3e                	jne    c00075a4 <f_mkfs+0x492>
c0007566:	be 01 00 00 00       	mov    esi,0x1
c000756b:	89 df                	mov    edi,ebx
c000756d:	66 01 f7             	add    di,si
c0007570:	75 07                	jne    c0007579 <f_mkfs+0x467>
c0007572:	83 fe 7f             	cmp    esi,0x7f
c0007575:	77 31                	ja     c00075a8 <f_mkfs+0x496>
c0007577:	eb 16                	jmp    c000758f <f_mkfs+0x47d>
c0007579:	83 ec 0c             	sub    esp,0xc
c000757c:	0f b7 ff             	movzx  edi,di
c000757f:	57                   	push   edi
c0007580:	e8 d9 0d 00 00       	call   c000835e <ff_wtoupper>
c0007585:	83 c4 10             	add    esp,0x10
c0007588:	39 c7                	cmp    edi,eax
c000758a:	75 e6                	jne    c0007572 <f_mkfs+0x460>
c000758c:	46                   	inc    esi
c000758d:	eb dc                	jmp    c000756b <f_mkfs+0x459>
c000758f:	31 c0                	xor    eax,eax
c0007591:	89 d9                	mov    ecx,ebx
c0007593:	4e                   	dec    esi
c0007594:	0f 95 c0             	setne  al
c0007597:	43                   	inc    ebx
c0007598:	89 c7                	mov    edi,eax
c000759a:	eb 14                	jmp    c00075b0 <f_mkfs+0x49e>
c000759c:	89 f1                	mov    ecx,esi
c000759e:	01 f3                	add    ebx,esi
c00075a0:	31 ff                	xor    edi,edi
c00075a2:	eb 0c                	jmp    c00075b0 <f_mkfs+0x49e>
c00075a4:	89 d3                	mov    ebx,edx
c00075a6:	eb 08                	jmp    c00075b0 <f_mkfs+0x49e>
c00075a8:	bf 02 00 00 00       	mov    edi,0x2
c00075ad:	83 c9 ff             	or     ecx,0xffffffff
c00075b0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b7:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075bb:	0f b6 c1             	movzx  eax,cl
c00075be:	e8 3a a9 ff ff       	call   c0001efd <xsum32>
c00075c3:	66 c1 e9 08          	shr    cx,0x8
c00075c7:	89 c2                	mov    edx,eax
c00075c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075cc:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075d0:	0f b7 c1             	movzx  eax,cx
c00075d3:	e8 25 a9 ff ff       	call   c0001efd <xsum32>
c00075d8:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075dd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e1:	66 85 db             	test   bx,bx
c00075e4:	74 1f                	je     c0007605 <f_mkfs+0x4f3>
c00075e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e9:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075f0:	83 c0 02             	add    eax,0x2
c00075f3:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f9:	39 c2                	cmp    edx,eax
c00075fb:	74 08                	je     c0007605 <f_mkfs+0x4f3>
c00075fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007600:	e9 3f ff ff ff       	jmp    c0007544 <f_mkfs+0x432>
c0007605:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007608:	83 ec 0c             	sub    esp,0xc
c000760b:	05 01 02 00 00       	add    eax,0x201
c0007610:	c1 e8 09             	shr    eax,0x9
c0007613:	50                   	push   eax
c0007614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007618:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000761c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007620:	55                   	push   ebp
c0007621:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007625:	e8 a3 a3 ff ff       	call   c00019cd <disk_write>
c000762a:	83 c4 20             	add    esp,0x20
c000762d:	85 c0                	test   eax,eax
c000762f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007632:	0f 85 8b 0b 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007638:	89 d0                	mov    eax,edx
c000763a:	31 d2                	xor    edx,edx
c000763c:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007640:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007644:	66 85 db             	test   bx,bx
c0007647:	74 04                	je     c000764d <f_mkfs+0x53b>
c0007649:	31 c0                	xor    eax,eax
c000764b:	eb b0                	jmp    c00075fd <f_mkfs+0x4eb>
c000764d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007651:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007655:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007659:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000765f:	31 d2                	xor    edx,edx
c0007661:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000766c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007670:	c1 eb 09             	shr    ebx,0x9
c0007673:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007682:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007686:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000768a:	8d 70 01             	lea    esi,[eax+0x1]
c000768d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007691:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007695:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000769c:	31 d2                	xor    edx,edx
c000769e:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a6:	89 c1                	mov    ecx,eax
c00076a8:	89 e8                	mov    eax,ebp
c00076aa:	e8 e7 a3 ff ff       	call   c0001a96 <mem_set>
c00076af:	31 c0                	xor    eax,eax
c00076b1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b4:	76 10                	jbe    c00076c6 <f_mkfs+0x5b4>
c00076b6:	83 fe 07             	cmp    esi,0x7
c00076b9:	76 0b                	jbe    c00076c6 <f_mkfs+0x5b4>
c00076bb:	40                   	inc    eax
c00076bc:	83 ee 08             	sub    esi,0x8
c00076bf:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c4:	eb eb                	jmp    c00076b1 <f_mkfs+0x59f>
c00076c6:	b2 01                	mov    dl,0x1
c00076c8:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076cc:	85 f6                	test   esi,esi
c00076ce:	74 0c                	je     c00076dc <f_mkfs+0x5ca>
c00076d0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d3:	76 07                	jbe    c00076dc <f_mkfs+0x5ca>
c00076d5:	08 11                	or     BYTE PTR [ecx],dl
c00076d7:	4e                   	dec    esi
c00076d8:	d1 e2                	shl    edx,1
c00076da:	eb f0                	jmp    c00076cc <f_mkfs+0x5ba>
c00076dc:	89 df                	mov    edi,ebx
c00076de:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076e2:	76 04                	jbe    c00076e8 <f_mkfs+0x5d6>
c00076e4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e8:	83 ec 0c             	sub    esp,0xc
c00076eb:	57                   	push   edi
c00076ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f4:	55                   	push   ebp
c00076f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f9:	e8 cf a2 ff ff       	call   c00019cd <disk_write>
c00076fe:	83 c4 20             	add    esp,0x20
c0007701:	85 c0                	test   eax,eax
c0007703:	0f 85 ba 0a 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007709:	31 d2                	xor    edx,edx
c000770b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007713:	29 fb                	sub    ebx,edi
c0007715:	0f 85 7a ff ff ff    	jne    c0007695 <f_mkfs+0x583>
c000771b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007727:	31 f6                	xor    esi,esi
c0007729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000772d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007730:	31 d2                	xor    edx,edx
c0007732:	89 e8                	mov    eax,ebp
c0007734:	e8 5d a3 ff ff       	call   c0001a96 <mem_set>
c0007739:	31 c9                	xor    ecx,ecx
c000773b:	85 db                	test   ebx,ebx
c000773d:	75 40                	jne    c000777f <f_mkfs+0x66d>
c000773f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007744:	89 e8                	mov    eax,ebp
c0007746:	bb 02 00 00 00       	mov    ebx,0x2
c000774b:	e8 28 a3 ff ff       	call   c0001a78 <st_dword>
c0007750:	8d 45 04             	lea    eax,[ebp+0x4]
c0007753:	83 ca ff             	or     edx,0xffffffff
c0007756:	e8 1d a3 ff ff       	call   c0001a78 <st_dword>
c000775b:	b9 08 00 00 00       	mov    ecx,0x8
c0007760:	eb 1d                	jmp    c000777f <f_mkfs+0x66d>
c0007762:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007765:	76 3b                	jbe    c00077a2 <f_mkfs+0x690>
c0007767:	43                   	inc    ebx
c0007768:	83 fe 01             	cmp    esi,0x1
c000776b:	89 da                	mov    edx,ebx
c000776d:	77 03                	ja     c0007772 <f_mkfs+0x660>
c000776f:	83 ca ff             	or     edx,0xffffffff
c0007772:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007776:	4e                   	dec    esi
c0007777:	e8 fc a2 ff ff       	call   c0001a78 <st_dword>
c000777c:	83 c1 04             	add    ecx,0x4
c000777f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007783:	85 f6                	test   esi,esi
c0007785:	75 db                	jne    c0007762 <f_mkfs+0x650>
c0007787:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000778c:	77 14                	ja     c00077a2 <f_mkfs+0x690>
c000778e:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007792:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007799:	85 f6                	test   esi,esi
c000779b:	74 05                	je     c00077a2 <f_mkfs+0x690>
c000779d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077a0:	77 dd                	ja     c000777f <f_mkfs+0x66d>
c00077a2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077a6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077aa:	39 cf                	cmp    edi,ecx
c00077ac:	76 02                	jbe    c00077b0 <f_mkfs+0x69e>
c00077ae:	89 cf                	mov    edi,ecx
c00077b0:	83 ec 0c             	sub    esp,0xc
c00077b3:	57                   	push   edi
c00077b4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077b8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077bc:	55                   	push   ebp
c00077bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c1:	e8 07 a2 ff ff       	call   c00019cd <disk_write>
c00077c6:	83 c4 20             	add    esp,0x20
c00077c9:	85 c0                	test   eax,eax
c00077cb:	0f 85 f2 09 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c00077d1:	31 d2                	xor    edx,edx
c00077d3:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077d7:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077db:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077df:	0f 85 48 ff ff ff    	jne    c000772d <f_mkfs+0x61b>
c00077e5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e8:	31 d2                	xor    edx,edx
c00077ea:	89 e8                	mov    eax,ebp
c00077ec:	31 ff                	xor    edi,edi
c00077ee:	e8 a3 a2 ff ff       	call   c0001a96 <mem_set>
c00077f3:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f6:	ba 02 00 00 00       	mov    edx,0x2
c00077fb:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077ff:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007803:	e8 70 a2 ff ff       	call   c0001a78 <st_dword>
c0007808:	8d 45 38             	lea    eax,[ebp+0x38]
c000780b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780f:	e8 64 a2 ff ff       	call   c0001a78 <st_dword>
c0007814:	8d 45 44             	lea    eax,[ebp+0x44]
c0007817:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000781b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781f:	e8 54 a2 ff ff       	call   c0001a78 <st_dword>
c0007824:	8d 45 54             	lea    eax,[ebp+0x54]
c0007827:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000782b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000782f:	83 c2 02             	add    edx,0x2
c0007832:	e8 41 a2 ff ff       	call   c0001a78 <st_dword>
c0007837:	8d 45 58             	lea    eax,[ebp+0x58]
c000783a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007842:	e8 31 a2 ff ff       	call   c0001a78 <st_dword>
c0007847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000784b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007850:	89 c6                	mov    esi,eax
c0007852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007856:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000785a:	89 04 24             	mov    DWORD PTR [esp],eax
c000785d:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007861:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007864:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007868:	39 cb                	cmp    ebx,ecx
c000786a:	76 02                	jbe    c000786e <f_mkfs+0x75c>
c000786c:	89 cb                	mov    ebx,ecx
c000786e:	83 ec 0c             	sub    esp,0xc
c0007871:	53                   	push   ebx
c0007872:	57                   	push   edi
c0007873:	56                   	push   esi
c0007874:	55                   	push   ebp
c0007875:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007879:	e8 4f a1 ff ff       	call   c00019cd <disk_write>
c000787e:	83 c4 20             	add    esp,0x20
c0007881:	85 c0                	test   eax,eax
c0007883:	0f 85 3a 09 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007889:	31 d2                	xor    edx,edx
c000788b:	b9 00 02 00 00       	mov    ecx,0x200
c0007890:	89 e8                	mov    eax,ebp
c0007892:	e8 ff a1 ff ff       	call   c0001a96 <mem_set>
c0007897:	31 d2                	xor    edx,edx
c0007899:	01 de                	add    esi,ebx
c000789b:	11 d7                	adc    edi,edx
c000789d:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078a0:	75 bf                	jne    c0007861 <f_mkfs+0x74f>
c00078a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078aa:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078b2:	b9 00 02 00 00       	mov    ecx,0x200
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 e8                	mov    eax,ebp
c00078bb:	e8 d6 a1 ff ff       	call   c0001a96 <mem_set>
c00078c0:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c5:	ba a0 72 02 c0       	mov    edx,0xc00272a0
c00078ca:	89 e8                	mov    eax,ebp
c00078cc:	e8 b0 a1 ff ff       	call   c0001a81 <mem_cpy>
c00078d1:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078dc:	e8 9a a1 ff ff       	call   c0001a7b <st_qword>
c00078e1:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e5:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078ec:	e8 8a a1 ff ff       	call   c0001a7b <st_qword>
c00078f1:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f4:	ba 20 00 00 00       	mov    edx,0x20
c00078f9:	e8 7a a1 ff ff       	call   c0001a78 <st_dword>
c00078fe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007902:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007906:	e8 6d a1 ff ff       	call   c0001a78 <st_dword>
c000790b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007913:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007917:	e8 5c a1 ff ff       	call   c0001a78 <st_dword>
c000791c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007923:	e8 50 a1 ff ff       	call   c0001a78 <st_dword>
c0007928:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000792c:	8d 50 02             	lea    edx,[eax+0x2]
c000792f:	8d 45 60             	lea    eax,[ebp+0x60]
c0007932:	e8 41 a1 ff ff       	call   c0001a78 <st_dword>
c0007937:	8d 45 64             	lea    eax,[ebp+0x64]
c000793a:	ba 00 00 21 50       	mov    edx,0x50210000
c000793f:	e8 34 a1 ff ff       	call   c0001a78 <st_dword>
c0007944:	8d 45 68             	lea    eax,[ebp+0x68]
c0007947:	ba 00 01 00 00       	mov    edx,0x100
c000794c:	e8 23 a1 ff ff       	call   c0001a74 <st_word>
c0007951:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007955:	b8 0a 00 00 00       	mov    eax,0xa
c000795a:	48                   	dec    eax
c000795b:	74 05                	je     c0007962 <f_mkfs+0x850>
c000795d:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007960:	eb f8                	jmp    c000795a <f_mkfs+0x848>
c0007962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007966:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c000796a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796e:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007972:	74 05                	je     c0007979 <f_mkfs+0x867>
c0007974:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007977:	eb f5                	jmp    c000796e <f_mkfs+0x85c>
c0007979:	8d 45 78             	lea    eax,[ebp+0x78]
c000797c:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007981:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007987:	31 db                	xor    ebx,ebx
c0007989:	e8 e6 a0 ff ff       	call   c0001a74 <st_word>
c000798e:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007994:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007999:	89 04 24             	mov    DWORD PTR [esp],eax
c000799c:	e8 d3 a0 ff ff       	call   c0001a74 <st_word>
c00079a1:	31 c9                	xor    ecx,ecx
c00079a3:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a6:	83 f8 01             	cmp    eax,0x1
c00079a9:	76 13                	jbe    c00079be <f_mkfs+0x8ac>
c00079ab:	83 f9 70             	cmp    ecx,0x70
c00079ae:	74 0e                	je     c00079be <f_mkfs+0x8ac>
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b7:	e8 41 a5 ff ff       	call   c0001efd <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	41                   	inc    ecx
c00079bf:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c5:	75 dc                	jne    c00079a3 <f_mkfs+0x891>
c00079c7:	89 f0                	mov    eax,esi
c00079c9:	89 fa                	mov    edx,edi
c00079cb:	83 c0 01             	add    eax,0x1
c00079ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d2:	83 d2 00             	adc    edx,0x0
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079dc:	6a 01                	push   0x1
c00079de:	57                   	push   edi
c00079df:	56                   	push   esi
c00079e0:	55                   	push   ebp
c00079e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e5:	e8 e3 9f ff ff       	call   c00019cd <disk_write>
c00079ea:	83 c4 20             	add    esp,0x20
c00079ed:	85 c0                	test   eax,eax
c00079ef:	0f 85 ce 07 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c00079f5:	31 d2                	xor    edx,edx
c00079f7:	b9 00 02 00 00       	mov    ecx,0x200
c00079fc:	89 e8                	mov    eax,ebp
c00079fe:	e8 93 a0 ff ff       	call   c0001a96 <mem_set>
c0007a03:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	e8 64 a0 ff ff       	call   c0001a74 <st_word>
c0007a10:	89 f0                	mov    eax,esi
c0007a12:	89 fa                	mov    edx,edi
c0007a14:	83 c0 09             	add    eax,0x9
c0007a17:	83 d2 00             	adc    edx,0x0
c0007a1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a21:	31 c9                	xor    ecx,ecx
c0007a23:	41                   	inc    ecx
c0007a24:	89 da                	mov    edx,ebx
c0007a26:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a2b:	e8 cd a4 ff ff       	call   c0001efd <xsum32>
c0007a30:	89 c3                	mov    ebx,eax
c0007a32:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a38:	75 e9                	jne    c0007a23 <f_mkfs+0x911>
c0007a3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a42:	83 c0 01             	add    eax,0x1
c0007a45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a49:	83 d2 00             	adc    edx,0x0
c0007a4c:	83 ec 0c             	sub    esp,0xc
c0007a4f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a53:	6a 01                	push   0x1
c0007a55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5d:	55                   	push   ebp
c0007a5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a62:	e8 66 9f ff ff       	call   c00019cd <disk_write>
c0007a67:	83 c4 20             	add    esp,0x20
c0007a6a:	85 c0                	test   eax,eax
c0007a6c:	0f 85 51 07 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a76:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a7a:	75 09                	jne    c0007a85 <f_mkfs+0x973>
c0007a7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7f:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a83:	74 12                	je     c0007a97 <f_mkfs+0x985>
c0007a85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a95:	eb 8a                	jmp    c0007a21 <f_mkfs+0x90f>
c0007a97:	31 d2                	xor    edx,edx
c0007a99:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9e:	89 e8                	mov    eax,ebp
c0007aa0:	e8 f1 9f ff ff       	call   c0001a96 <mem_set>
c0007aa5:	83 c6 0b             	add    esi,0xb
c0007aa8:	83 d7 00             	adc    edi,0x0
c0007aab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aaf:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab3:	31 c9                	xor    ecx,ecx
c0007ab5:	41                   	inc    ecx
c0007ab6:	89 da                	mov    edx,ebx
c0007ab8:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007abd:	e8 3b a4 ff ff       	call   c0001efd <xsum32>
c0007ac2:	89 c3                	mov    ebx,eax
c0007ac4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007aca:	75 e9                	jne    c0007ab5 <f_mkfs+0x9a3>
c0007acc:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007acf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad3:	83 c6 01             	add    esi,0x1
c0007ad6:	83 d7 00             	adc    edi,0x0
c0007ad9:	83 ec 0c             	sub    esp,0xc
c0007adc:	6a 01                	push   0x1
c0007ade:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae6:	55                   	push   ebp
c0007ae7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aeb:	e8 dd 9e ff ff       	call   c00019cd <disk_write>
c0007af0:	83 c4 20             	add    esp,0x20
c0007af3:	85 c0                	test   eax,eax
c0007af5:	0f 85 c8 06 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007afb:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007aff:	75 06                	jne    c0007b07 <f_mkfs+0x9f5>
c0007b01:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b05:	74 09                	je     c0007b10 <f_mkfs+0x9fe>
c0007b07:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b0a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0e:	eb a3                	jmp    c0007ab3 <f_mkfs+0x9a1>
c0007b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b14:	89 da                	mov    edx,ebx
c0007b16:	01 e8                	add    eax,ebp
c0007b18:	e8 5b 9f ff ff       	call   c0001a78 <st_dword>
c0007b1d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b22:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b2a:	75 e4                	jne    c0007b10 <f_mkfs+0x9fe>
c0007b2c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b33:	83 c6 02             	add    esi,0x2
c0007b36:	83 d7 00             	adc    edi,0x0
c0007b39:	83 ec 0c             	sub    esp,0xc
c0007b3c:	6a 01                	push   0x1
c0007b3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b46:	55                   	push   ebp
c0007b47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b4b:	e8 7d 9e ff ff       	call   c00019cd <disk_write>
c0007b50:	83 c4 20             	add    esp,0x20
c0007b53:	85 c0                	test   eax,eax
c0007b55:	0f 85 68 06 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007b5b:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b60:	74 0d                	je     c0007b6f <f_mkfs+0xa5d>
c0007b62:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b6a:	e9 43 fd ff ff       	jmp    c00078b2 <f_mkfs+0x7a0>
c0007b6f:	b1 07                	mov    cl,0x7
c0007b71:	e9 e3 05 00 00       	jmp    c0008159 <f_mkfs+0x1047>
c0007b76:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b7b:	0f 85 4f 02 00 00    	jne    c0007dd0 <f_mkfs+0xcbe>
c0007b81:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b86:	0f 86 22 02 00 00    	jbe    c0007dae <f_mkfs+0xc9c>
c0007b8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b91:	0f 85 81 06 00 00    	jne    c0008218 <f_mkfs+0x1106>
c0007b97:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9e:	83 f8 40             	cmp    eax,0x40
c0007ba1:	0f 87 51 06 00 00    	ja     c00081f8 <f_mkfs+0x10e6>
c0007ba7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bab:	85 ff                	test   edi,edi
c0007bad:	75 1c                	jne    c0007bcb <f_mkfs+0xab9>
c0007baf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bb2:	ba a0 71 02 c0       	mov    edx,0xc00271a0
c0007bb7:	c1 e9 0c             	shr    ecx,0xc
c0007bba:	bf 01 00 00 00       	mov    edi,0x1
c0007bbf:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bc2:	66 85 c0             	test   ax,ax
c0007bc5:	0f 85 95 01 00 00    	jne    c0007d60 <f_mkfs+0xc4e>
c0007bcb:	31 d2                	xor    edx,edx
c0007bcd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bd0:	f7 f7                	div    edi
c0007bd2:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd7:	0f 86 95 01 00 00    	jbe    c0007d72 <f_mkfs+0xc60>
c0007bdd:	83 c0 02             	add    eax,0x2
c0007be0:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be5:	01 c0                	add    eax,eax
c0007be7:	05 ff 01 00 00       	add    eax,0x1ff
c0007bec:	be 01 00 00 00       	mov    esi,0x1
c0007bf1:	c1 e8 09             	shr    eax,0x9
c0007bf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bfc:	c1 e0 05             	shl    eax,0x5
c0007bff:	c1 e8 09             	shr    eax,0x9
c0007c02:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c06:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c0b:	31 d2                	xor    edx,edx
c0007c0d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c11:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c15:	89 f0                	mov    eax,esi
c0007c17:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c1b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c1f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c23:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c2b:	31 d2                	xor    edx,edx
c0007c2d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c32:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c36:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c3a:	31 db                	xor    ebx,ebx
c0007c3c:	01 c8                	add    eax,ecx
c0007c3e:	11 da                	adc    edx,ebx
c0007c40:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c44:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c48:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c4c:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c50:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c54:	f7 da                	neg    edx
c0007c56:	21 d1                	and    ecx,edx
c0007c58:	29 d9                	sub    ecx,ebx
c0007c5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5f:	0f 85 20 01 00 00    	jne    c0007d85 <f_mkfs+0xc73>
c0007c65:	31 db                	xor    ebx,ebx
c0007c67:	01 ce                	add    esi,ecx
c0007c69:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6d:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c71:	31 d2                	xor    edx,edx
c0007c73:	89 f8                	mov    eax,edi
c0007c75:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c79:	c1 e0 04             	shl    eax,0x4
c0007c7c:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c80:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c84:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c88:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c8c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8f:	19 d3                	sbb    ebx,edx
c0007c91:	0f 82 40 01 00 00    	jb     c0007dd7 <f_mkfs+0xcc5>
c0007c97:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c9e:	89 c8                	mov    eax,ecx
c0007ca0:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ca5:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ca9:	29 f0                	sub    eax,esi
c0007cab:	29 d0                	sub    eax,edx
c0007cad:	31 d2                	xor    edx,edx
c0007caf:	f7 f7                	div    edi
c0007cb1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb6:	89 c3                	mov    ebx,eax
c0007cb8:	0f 85 b8 fe ff ff    	jne    c0007b76 <f_mkfs+0xa64>
c0007cbe:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc3:	0f 87 1d 01 00 00    	ja     c0007de6 <f_mkfs+0xcd4>
c0007cc9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cce:	0f 85 03 01 00 00    	jne    c0007dd7 <f_mkfs+0xcc5>
c0007cd4:	83 ff 01             	cmp    edi,0x1
c0007cd7:	0f 86 fa 00 00 00    	jbe    c0007dd7 <f_mkfs+0xcc5>
c0007cdd:	d1 ef                	shr    edi,1
c0007cdf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cea:	85 db                	test   ebx,ebx
c0007cec:	75 2d                	jne    c0007d1b <f_mkfs+0xc09>
c0007cee:	89 cb                	mov    ebx,ecx
c0007cf0:	ba b0 71 02 c0       	mov    edx,0xc00271b0
c0007cf5:	c1 eb 11             	shr    ebx,0x11
c0007cf8:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d00:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d03:	66 85 c0             	test   ax,ax
c0007d06:	74 11                	je     c0007d19 <f_mkfs+0xc07>
c0007d08:	83 c2 02             	add    edx,0x2
c0007d0b:	39 d8                	cmp    eax,ebx
c0007d0d:	77 0a                	ja     c0007d19 <f_mkfs+0xc07>
c0007d0f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d13:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d17:	eb e7                	jmp    c0007d00 <f_mkfs+0xbee>
c0007d19:	31 db                	xor    ebx,ebx
c0007d1b:	31 d2                	xor    edx,edx
c0007d1d:	89 c8                	mov    eax,ecx
c0007d1f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d23:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d2a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2f:	c1 ea 09             	shr    edx,0x9
c0007d32:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d3b:	0f 87 96 00 00 00    	ja     c0007dd7 <f_mkfs+0xcc5>
c0007d41:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d45:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d4d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d51:	be 20 00 00 00       	mov    esi,0x20
c0007d56:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d5b:	e9 a6 fe ff ff       	jmp    c0007c06 <f_mkfs+0xaf4>
c0007d60:	83 c2 02             	add    edx,0x2
c0007d63:	39 c8                	cmp    eax,ecx
c0007d65:	0f 87 60 fe ff ff    	ja     c0007bcb <f_mkfs+0xab9>
c0007d6b:	01 ff                	add    edi,edi
c0007d6d:	e9 4d fe ff ff       	jmp    c0007bbf <f_mkfs+0xaad>
c0007d72:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d75:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d7a:	40                   	inc    eax
c0007d7b:	d1 e8                	shr    eax,1
c0007d7d:	83 c0 03             	add    eax,0x3
c0007d80:	e9 62 fe ff ff       	jmp    c0007be7 <f_mkfs+0xad5>
c0007d85:	31 d2                	xor    edx,edx
c0007d87:	89 c8                	mov    eax,ecx
c0007d89:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d8d:	85 d2                	test   edx,edx
c0007d8f:	74 0c                	je     c0007d9d <f_mkfs+0xc8b>
c0007d91:	49                   	dec    ecx
c0007d92:	46                   	inc    esi
c0007d93:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d98:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9d:	89 c8                	mov    eax,ecx
c0007d9f:	31 d2                	xor    edx,edx
c0007da1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007da5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da9:	e9 c3 fe ff ff       	jmp    c0007c71 <f_mkfs+0xb5f>
c0007dae:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db3:	77 31                	ja     c0007de6 <f_mkfs+0xcd4>
c0007db5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dba:	75 1b                	jne    c0007dd7 <f_mkfs+0xcc5>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc8:	0f 86 d9 fd ff ff    	jbe    c0007ba7 <f_mkfs+0xa95>
c0007dce:	eb 07                	jmp    c0007dd7 <f_mkfs+0xcc5>
c0007dd0:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd5:	76 0a                	jbe    c0007de1 <f_mkfs+0xccf>
c0007dd7:	bb 0e 00 00 00       	mov    ebx,0xe
c0007ddc:	e9 ff 03 00 00       	jmp    c00081e0 <f_mkfs+0x10ce>
c0007de1:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de6:	31 d2                	xor    edx,edx
c0007de8:	b9 00 02 00 00       	mov    ecx,0x200
c0007ded:	89 e8                	mov    eax,ebp
c0007def:	e8 a2 9c ff ff       	call   c0001a96 <mem_set>
c0007df4:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df9:	ba c2 72 02 c0       	mov    edx,0xc00272c2
c0007dfe:	89 e8                	mov    eax,ebp
c0007e00:	e8 7c 9c ff ff       	call   c0001a81 <mem_cpy>
c0007e05:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e08:	ba 00 02 00 00       	mov    edx,0x200
c0007e0d:	e8 62 9c ff ff       	call   c0001a74 <st_word>
c0007e12:	89 f8                	mov    eax,edi
c0007e14:	0f b7 d6             	movzx  edx,si
c0007e17:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e1a:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e1d:	e8 52 9c ff ff       	call   c0001a74 <st_word>
c0007e22:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e26:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e2e:	75 08                	jne    c0007e38 <f_mkfs+0xd26>
c0007e30:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e38:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3f:	e8 30 9c ff ff       	call   c0001a74 <st_word>
c0007e44:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e49:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4d:	39 d0                	cmp    eax,edx
c0007e4f:	b8 00 00 00 00       	mov    eax,0x0
c0007e54:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e58:	72 0a                	jb     c0007e64 <f_mkfs+0xd52>
c0007e5a:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5d:	e8 12 9c ff ff       	call   c0001a74 <st_word>
c0007e62:	eb 08                	jmp    c0007e6c <f_mkfs+0xd5a>
c0007e64:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e67:	e8 0c 9c ff ff       	call   c0001a78 <st_dword>
c0007e6c:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6f:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e74:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e78:	e8 f7 9b ff ff       	call   c0001a74 <st_word>
c0007e7d:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e80:	ba ff 00 00 00       	mov    edx,0xff
c0007e85:	e8 ea 9b ff ff       	call   c0001a74 <st_word>
c0007e8a:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e91:	e8 e2 9b ff ff       	call   c0001a78 <st_dword>
c0007e96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9b:	75 57                	jne    c0007ef4 <f_mkfs+0xde2>
c0007e9d:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ea0:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea5:	e8 ce 9b ff ff       	call   c0001a78 <st_dword>
c0007eaa:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ead:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eb1:	e8 c2 9b ff ff       	call   c0001a78 <st_dword>
c0007eb6:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb9:	ba 02 00 00 00       	mov    edx,0x2
c0007ebe:	e8 b5 9b ff ff       	call   c0001a78 <st_dword>
c0007ec3:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec6:	ba 01 00 00 00       	mov    edx,0x1
c0007ecb:	e8 a4 9b ff ff       	call   c0001a74 <st_word>
c0007ed0:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed3:	ba 06 00 00 00       	mov    edx,0x6
c0007ed8:	e8 97 9b ff ff       	call   c0001a74 <st_word>
c0007edd:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ee1:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee5:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee8:	b9 13 00 00 00       	mov    ecx,0x13
c0007eed:	ba ce 72 02 c0       	mov    edx,0xc00272ce
c0007ef2:	eb 2f                	jmp    c0007f23 <f_mkfs+0xe11>
c0007ef4:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef7:	ba 00 00 21 50       	mov    edx,0x50210000
c0007efc:	e8 77 9b ff ff       	call   c0001a78 <st_dword>
c0007f01:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f06:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f09:	e8 66 9b ff ff       	call   c0001a74 <st_word>
c0007f0e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f12:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f16:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f19:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1e:	ba e2 72 02 c0       	mov    edx,0xc00272e2
c0007f23:	e8 59 9b ff ff       	call   c0001a81 <mem_cpy>
c0007f28:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f2e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f33:	89 f0                	mov    eax,esi
c0007f35:	e8 3a 9b ff ff       	call   c0001a74 <st_word>
c0007f3a:	83 ec 0c             	sub    esp,0xc
c0007f3d:	6a 01                	push   0x1
c0007f3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f47:	55                   	push   ebp
c0007f48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f4c:	e8 7c 9a ff ff       	call   c00019cd <disk_write>
c0007f51:	83 c4 20             	add    esp,0x20
c0007f54:	85 c0                	test   eax,eax
c0007f56:	0f 85 67 02 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0007f5c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f61:	0f 85 b7 00 00 00    	jne    c000801e <f_mkfs+0xf0c>
c0007f67:	83 ec 0c             	sub    esp,0xc
c0007f6a:	6a 01                	push   0x1
c0007f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f74:	83 c0 06             	add    eax,0x6
c0007f77:	83 d2 00             	adc    edx,0x0
c0007f7a:	52                   	push   edx
c0007f7b:	50                   	push   eax
c0007f7c:	55                   	push   ebp
c0007f7d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f81:	e8 47 9a ff ff       	call   c00019cd <disk_write>
c0007f86:	83 c4 20             	add    esp,0x20
c0007f89:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8e:	31 d2                	xor    edx,edx
c0007f90:	89 e8                	mov    eax,ebp
c0007f92:	e8 ff 9a ff ff       	call   c0001a96 <mem_set>
c0007f97:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f9c:	89 e8                	mov    eax,ebp
c0007f9e:	e8 d5 9a ff ff       	call   c0001a78 <st_dword>
c0007fa3:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa9:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fae:	e8 c5 9a ff ff       	call   c0001a78 <st_dword>
c0007fb3:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb6:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fbc:	e8 b7 9a ff ff       	call   c0001a78 <st_dword>
c0007fc1:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc7:	ba 02 00 00 00       	mov    edx,0x2
c0007fcc:	e8 a7 9a ff ff       	call   c0001a78 <st_dword>
c0007fd1:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd6:	89 f0                	mov    eax,esi
c0007fd8:	e8 97 9a ff ff       	call   c0001a74 <st_word>
c0007fdd:	83 ec 0c             	sub    esp,0xc
c0007fe0:	6a 01                	push   0x1
c0007fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fea:	83 c0 07             	add    eax,0x7
c0007fed:	83 d2 00             	adc    edx,0x0
c0007ff0:	52                   	push   edx
c0007ff1:	50                   	push   eax
c0007ff2:	55                   	push   ebp
c0007ff3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff7:	e8 d1 99 ff ff       	call   c00019cd <disk_write>
c0007ffc:	83 c4 14             	add    esp,0x14
c0007fff:	6a 01                	push   0x1
c0008001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008005:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008009:	83 c0 01             	add    eax,0x1
c000800c:	83 d2 00             	adc    edx,0x0
c000800f:	52                   	push   edx
c0008010:	50                   	push   eax
c0008011:	55                   	push   ebp
c0008012:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008016:	e8 b2 99 ff ff       	call   c00019cd <disk_write>
c000801b:	83 c4 20             	add    esp,0x20
c000801e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008025:	31 d2                	xor    edx,edx
c0008027:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802d:	31 db                	xor    ebx,ebx
c000802f:	89 e8                	mov    eax,ebp
c0008031:	e8 60 9a ff ff       	call   c0001a96 <mem_set>
c0008036:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008042:	0f 94 c3             	sete   bl
c0008045:	4b                   	dec    ebx
c0008046:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000804c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008052:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008057:	75 21                	jne    c000807a <f_mkfs+0xf68>
c0008059:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805e:	89 e8                	mov    eax,ebp
c0008060:	e8 13 9a ff ff       	call   c0001a78 <st_dword>
c0008065:	8d 45 04             	lea    eax,[ebp+0x4]
c0008068:	83 ca ff             	or     edx,0xffffffff
c000806b:	e8 08 9a ff ff       	call   c0001a78 <st_dword>
c0008070:	8d 45 08             	lea    eax,[ebp+0x8]
c0008073:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008078:	eb 04                	jmp    c000807e <f_mkfs+0xf6c>
c000807a:	89 da                	mov    edx,ebx
c000807c:	89 e8                	mov    eax,ebp
c000807e:	e8 f5 99 ff ff       	call   c0001a78 <st_dword>
c0008083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008087:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000808b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008093:	39 ce                	cmp    esi,ecx
c0008095:	76 02                	jbe    c0008099 <f_mkfs+0xf87>
c0008097:	89 ce                	mov    esi,ecx
c0008099:	83 ec 0c             	sub    esp,0xc
c000809c:	56                   	push   esi
c000809d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a5:	55                   	push   ebp
c00080a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080aa:	e8 1e 99 ff ff       	call   c00019cd <disk_write>
c00080af:	83 c4 20             	add    esp,0x20
c00080b2:	85 c0                	test   eax,eax
c00080b4:	0f 85 09 01 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	b9 00 02 00 00       	mov    ecx,0x200
c00080c1:	89 e8                	mov    eax,ebp
c00080c3:	e8 ce 99 ff ff       	call   c0001a96 <mem_set>
c00080c8:	31 d2                	xor    edx,edx
c00080ca:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080ce:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080d2:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d6:	75 b3                	jne    c000808b <f_mkfs+0xf79>
c00080d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080db:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080e2:	40                   	inc    eax
c00080e3:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080e7:	0f 87 65 ff ff ff    	ja     c0008052 <f_mkfs+0xf40>
c00080ed:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080f2:	74 04                	je     c00080f8 <f_mkfs+0xfe6>
c00080f4:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00080f8:	89 fb                	mov    ebx,edi
c00080fa:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080fe:	76 04                	jbe    c0008104 <f_mkfs+0xff2>
c0008100:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008104:	83 ec 0c             	sub    esp,0xc
c0008107:	53                   	push   ebx
c0008108:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008110:	55                   	push   ebp
c0008111:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008115:	e8 b3 98 ff ff       	call   c00019cd <disk_write>
c000811a:	83 c4 20             	add    esp,0x20
c000811d:	85 c0                	test   eax,eax
c000811f:	0f 85 9e 00 00 00    	jne    c00081c3 <f_mkfs+0x10b1>
c0008125:	31 d2                	xor    edx,edx
c0008127:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000812b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812f:	29 df                	sub    edi,ebx
c0008131:	75 c5                	jne    c00080f8 <f_mkfs+0xfe6>
c0008133:	b1 0c                	mov    cl,0xc
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 1d                	je     c0008159 <f_mkfs+0x1047>
c000813c:	b8 ff ff 00 00       	mov    eax,0xffff
c0008141:	b1 06                	mov    cl,0x6
c0008143:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008147:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000814b:	72 0c                	jb     c0008159 <f_mkfs+0x1047>
c000814d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008152:	0f 94 c1             	sete   cl
c0008155:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008159:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815e:	75 4c                	jne    c00081ac <f_mkfs+0x109a>
c0008160:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008164:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008168:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008176:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008181:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000818c:	0f b6 c9             	movzx  ecx,cl
c000818f:	83 ec 0c             	sub    esp,0xc
c0008192:	55                   	push   ebp
c0008193:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000819e:	e8 2f c2 ff ff       	call   c00043d2 <create_partition>
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	89 c3                	mov    ebx,eax
c00081a8:	85 c0                	test   eax,eax
c00081aa:	75 34                	jne    c00081e0 <f_mkfs+0x10ce>
c00081ac:	31 db                	xor    ebx,ebx
c00081ae:	50                   	push   eax
c00081af:	6a 00                	push   0x0
c00081b1:	6a 00                	push   0x0
c00081b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b7:	e8 27 98 ff ff       	call   c00019e3 <disk_ioctl>
c00081bc:	83 c4 10             	add    esp,0x10
c00081bf:	85 c0                	test   eax,eax
c00081c1:	74 1d                	je     c00081e0 <f_mkfs+0x10ce>
c00081c3:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081cb:	75 0c                	jne    c00081d9 <f_mkfs+0x10c7>
c00081cd:	83 ec 0c             	sub    esp,0xc
c00081d0:	55                   	push   ebp
c00081d1:	e8 75 00 00 00       	call   c000824b <ff_memfree>
c00081d6:	83 c4 10             	add    esp,0x10
c00081d9:	bb 01 00 00 00       	mov    ebx,0x1
c00081de:	eb 48                	jmp    c0008228 <f_mkfs+0x1116>
c00081e0:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e8:	75 3e                	jne    c0008228 <f_mkfs+0x1116>
c00081ea:	83 ec 0c             	sub    esp,0xc
c00081ed:	55                   	push   ebp
c00081ee:	e8 58 00 00 00       	call   c000824b <ff_memfree>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	eb 30                	jmp    c0008228 <f_mkfs+0x1116>
c00081f8:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fd:	0f 85 eb fa ff ff    	jne    c0007cee <f_mkfs+0xbdc>
c0008203:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008207:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820d:	0f 86 b8 f9 ff ff    	jbe    c0007bcb <f_mkfs+0xab9>
c0008213:	e9 bf fb ff ff       	jmp    c0007dd7 <f_mkfs+0xcc5>
c0008218:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821d:	0f 85 c0 fa ff ff    	jne    c0007ce3 <f_mkfs+0xbd1>
c0008223:	e9 af fb ff ff       	jmp    c0007dd7 <f_mkfs+0xcc5>
c0008228:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822e:	89 d8                	mov    eax,ebx
c0008230:	5b                   	pop    ebx
c0008231:	5e                   	pop    esi
c0008232:	5f                   	pop    edi
c0008233:	5d                   	pop    ebp
c0008234:	c3                   	ret    

c0008235 <ff_memalloc>:
c0008235:	83 ec 0c             	sub    esp,0xc
c0008238:	83 ec 0c             	sub    esp,0xc
c000823b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823f:	e8 7c 72 00 00       	call   c000f4c0 <malloc>
c0008244:	83 c4 10             	add    esp,0x10
c0008247:	83 c4 0c             	add    esp,0xc
c000824a:	c3                   	ret    

c000824b <ff_memfree>:
c000824b:	83 ec 0c             	sub    esp,0xc
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008255:	e8 76 72 00 00       	call   c000f4d0 <free>
c000825a:	83 c4 10             	add    esp,0x10
c000825d:	90                   	nop
c000825e:	83 c4 0c             	add    esp,0xc
c0008261:	c3                   	ret    

c0008262 <ff_uni2oem>:
c0008262:	83 ec 14             	sub    esp,0x14
c0008265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008269:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826d:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008274:	c7 44 24 0c 00 76 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027600
c000827c:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008281:	77 0b                	ja     c000828e <ff_uni2oem+0x2c>
c0008283:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008287:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000828c:	eb 5b                	jmp    c00082e9 <ff_uni2oem+0x87>
c000828e:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008296:	77 51                	ja     c00082e9 <ff_uni2oem+0x87>
c0008298:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829e:	75 49                	jne    c00082e9 <ff_uni2oem+0x87>
c00082a0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a7:	eb 0b                	jmp    c00082b4 <ff_uni2oem+0x52>
c00082a9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ae:	40                   	inc    eax
c00082af:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082ba:	77 1b                	ja     c00082d7 <ff_uni2oem+0x75>
c00082bc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082c1:	01 c0                	add    eax,eax
c00082c3:	89 c2                	mov    edx,eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	01 d0                	add    eax,edx
c00082cb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082ce:	0f b7 c0             	movzx  eax,ax
c00082d1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d5:	75 d2                	jne    c00082a9 <ff_uni2oem+0x47>
c00082d7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082dc:	83 e8 80             	sub    eax,0xffffff80
c00082df:	25 ff 00 00 00       	and    eax,0xff
c00082e4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082e9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ee:	83 c4 14             	add    esp,0x14
c00082f1:	c3                   	ret    

c00082f2 <ff_oem2uni>:
c00082f2:	83 ec 18             	sub    esp,0x18
c00082f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082fd:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008302:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008306:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000830d:	c7 44 24 10 00 76 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027600
c0008315:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831b:	77 0b                	ja     c0008328 <ff_oem2uni+0x36>
c000831d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008321:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008326:	eb 2d                	jmp    c0008355 <ff_oem2uni+0x63>
c0008328:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000832e:	75 25                	jne    c0008355 <ff_oem2uni+0x63>
c0008330:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008337:	77 1c                	ja     c0008355 <ff_oem2uni+0x63>
c0008339:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000833e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008343:	01 c0                	add    eax,eax
c0008345:	89 c2                	mov    edx,eax
c0008347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000834b:	01 d0                	add    eax,edx
c000834d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008350:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008355:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000835a:	83 c4 18             	add    esp,0x18
c000835d:	c3                   	ret    

c000835e <ff_wtoupper>:
c000835e:	83 ec 10             	sub    esp,0x10
c0008361:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008369:	0f 87 3e 01 00 00    	ja     c00084ad <ff_wtoupper+0x14f>
c000836f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008373:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008378:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000837f:	77 07                	ja     c0008388 <ff_wtoupper+0x2a>
c0008381:	b8 00 74 02 c0       	mov    eax,0xc0027400
c0008386:	eb 05                	jmp    c000838d <ff_wtoupper+0x2f>
c0008388:	b8 40 73 02 c0       	mov    eax,0xc0027340
c000838d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008395:	8d 50 02             	lea    edx,[eax+0x2]
c0008398:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000839c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083a4:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083aa:	0f 84 f4 00 00 00    	je     c00084a4 <ff_wtoupper+0x146>
c00083b0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083b5:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083ba:	0f 82 e4 00 00 00    	jb     c00084a4 <ff_wtoupper+0x146>
c00083c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083c4:	8d 50 02             	lea    edx,[eax+0x2]
c00083c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083cb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ce:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d3:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083d8:	66 c1 e8 08          	shr    ax,0x8
c00083dc:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e1:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083e8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083ed:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00083f2:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00083f7:	01 ca                	add    edx,ecx
c00083f9:	39 d0                	cmp    eax,edx
c00083fb:	0f 8d 86 00 00 00    	jge    c0008487 <ff_wtoupper+0x129>
c0008401:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008406:	83 f8 08             	cmp    eax,0x8
c0008409:	0f 87 94 00 00 00    	ja     c00084a3 <ff_wtoupper+0x145>
c000840f:	8b 04 85 00 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8d00]
c0008416:	ff e0                	jmp    eax
c0008418:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000841d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008422:	29 c2                	sub    edx,eax
c0008424:	89 d0                	mov    eax,edx
c0008426:	01 c0                	add    eax,eax
c0008428:	89 c2                	mov    edx,eax
c000842a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000842e:	01 d0                	add    eax,edx
c0008430:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008433:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008438:	eb 4b                	jmp    c0008485 <ff_wtoupper+0x127>
c000843a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000843f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008443:	83 e0 01             	and    eax,0x1
c0008446:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000844b:	eb 38                	jmp    c0008485 <ff_wtoupper+0x127>
c000844d:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008453:	eb 30                	jmp    c0008485 <ff_wtoupper+0x127>
c0008455:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000845b:	eb 28                	jmp    c0008485 <ff_wtoupper+0x127>
c000845d:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008463:	eb 20                	jmp    c0008485 <ff_wtoupper+0x127>
c0008465:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000846b:	eb 18                	jmp    c0008485 <ff_wtoupper+0x127>
c000846d:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008473:	eb 10                	jmp    c0008485 <ff_wtoupper+0x127>
c0008475:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000847b:	eb 08                	jmp    c0008485 <ff_wtoupper+0x127>
c000847d:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008484:	90                   	nop
c0008485:	eb 1c                	jmp    c00084a3 <ff_wtoupper+0x145>
c0008487:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000848d:	0f 85 fe fe ff ff    	jne    c0008391 <ff_wtoupper+0x33>
c0008493:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008498:	01 c0                	add    eax,eax
c000849a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000849e:	e9 ee fe ff ff       	jmp    c0008391 <ff_wtoupper+0x33>
c00084a3:	90                   	nop
c00084a4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	c3                   	ret    

c00084b5 <psrc_set_converter>:
c00084b5:	56                   	push   esi
c00084b6:	89 d6                	mov    esi,edx
c00084b8:	53                   	push   ebx
c00084b9:	89 c3                	mov    ebx,eax
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	52                   	push   edx
c00084bf:	50                   	push   eax
c00084c0:	e8 6f 55 00 00       	call   c000da34 <sinc_set_converter>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	85 c0                	test   eax,eax
c00084ca:	74 25                	je     c00084f1 <psrc_set_converter+0x3c>
c00084cc:	50                   	push   eax
c00084cd:	50                   	push   eax
c00084ce:	56                   	push   esi
c00084cf:	53                   	push   ebx
c00084d0:	e8 17 5d 00 00       	call   c000e1ec <zoh_set_converter>
c00084d5:	83 c4 10             	add    esp,0x10
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 15                	je     c00084f1 <psrc_set_converter+0x3c>
c00084dc:	51                   	push   ecx
c00084dd:	51                   	push   ecx
c00084de:	56                   	push   esi
c00084df:	53                   	push   ebx
c00084e0:	e8 0f 11 00 00       	call   c00095f4 <linear_set_converter>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	ba 0a 00 00 00       	mov    edx,0xa
c00084ed:	85 c0                	test   eax,eax
c00084ef:	75 02                	jne    c00084f3 <psrc_set_converter+0x3e>
c00084f1:	31 d2                	xor    edx,edx
c00084f3:	89 d0                	mov    eax,edx
c00084f5:	5a                   	pop    edx
c00084f6:	5b                   	pop    ebx
c00084f7:	5e                   	pop    esi
c00084f8:	c3                   	ret    

c00084f9 <src_delete>:
c00084f9:	53                   	push   ebx
c00084fa:	83 ec 08             	sub    esp,0x8
c00084fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008501:	85 db                	test   ebx,ebx
c0008503:	74 29                	je     c000852e <src_delete+0x35>
c0008505:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008508:	85 c0                	test   eax,eax
c000850a:	74 0c                	je     c0008518 <src_delete+0x1f>
c000850c:	83 ec 0c             	sub    esp,0xc
c000850f:	50                   	push   eax
c0008510:	e8 bb 6f 00 00       	call   c000f4d0 <free>
c0008515:	83 c4 10             	add    esp,0x10
c0008518:	50                   	push   eax
c0008519:	6a 3c                	push   0x3c
c000851b:	6a 00                	push   0x0
c000851d:	53                   	push   ebx
c000851e:	e8 59 81 ff ff       	call   c000067c <memset>
c0008523:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008526:	e8 a5 6f 00 00       	call   c000f4d0 <free>
c000852b:	83 c4 10             	add    esp,0x10
c000852e:	31 c0                	xor    eax,eax
c0008530:	83 c4 08             	add    esp,0x8
c0008533:	5b                   	pop    ebx
c0008534:	c3                   	ret    

c0008535 <src_process>:
c0008535:	55                   	push   ebp
c0008536:	57                   	push   edi
c0008537:	56                   	push   esi
c0008538:	53                   	push   ebx
c0008539:	83 ec 1c             	sub    esp,0x1c
c000853c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008540:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008544:	85 ed                	test   ebp,ebp
c0008546:	0f 84 6f 01 00 00    	je     c00086bb <src_process+0x186>
c000854c:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008550:	0f 84 6c 01 00 00    	je     c00086c2 <src_process+0x18d>
c0008556:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000855a:	0f 84 62 01 00 00    	je     c00086c2 <src_process+0x18d>
c0008560:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008567:	0f 85 5c 01 00 00    	jne    c00086c9 <src_process+0x194>
c000856d:	85 db                	test   ebx,ebx
c000856f:	0f 84 5b 01 00 00    	je     c00086d0 <src_process+0x19b>
c0008575:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008577:	85 f6                	test   esi,esi
c0008579:	0f 84 58 01 00 00    	je     c00086d7 <src_process+0x1a2>
c000857f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008582:	85 ff                	test   edi,edi
c0008584:	0f 84 4d 01 00 00    	je     c00086d7 <src_process+0x1a2>
c000858a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000858d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008590:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008594:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008598:	68 00 00 70 3f       	push   0x3f700000
c000859d:	6a 00                	push   0x0
c000859f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085a7:	e8 73 dd 01 00       	call   c002631f <__ltdf2>
c00085ac:	83 c4 10             	add    esp,0x10
c00085af:	85 c0                	test   eax,eax
c00085b1:	0f 88 27 01 00 00    	js     c00086de <src_process+0x1a9>
c00085b7:	68 00 00 70 40       	push   0x40700000
c00085bc:	6a 00                	push   0x0
c00085be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085c6:	e8 36 dd 01 00       	call   c0026301 <__gtdf2>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	85 c0                	test   eax,eax
c00085d0:	0f 8f 08 01 00 00    	jg     c00086de <src_process+0x1a9>
c00085d6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085da:	79 07                	jns    c00085e3 <src_process+0xae>
c00085dc:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085e6:	85 c0                	test   eax,eax
c00085e8:	79 50                	jns    c000863a <src_process+0x105>
c00085ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00085f1:	39 fe                	cmp    esi,edi
c00085f3:	72 37                	jb     c000862c <src_process+0xf7>
c00085f5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008603:	68 00 00 70 3f       	push   0x3f700000
c0008608:	6a 00                	push   0x0
c000860a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000860d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008610:	e8 0a dd 01 00       	call   c002631f <__ltdf2>
c0008615:	83 c4 10             	add    esp,0x10
c0008618:	85 c0                	test   eax,eax
c000861a:	79 37                	jns    c0008653 <src_process+0x11e>
c000861c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008624:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008627:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000862a:	eb 27                	jmp    c0008653 <src_process+0x11e>
c000862c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000862f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008633:	8d 04 86             	lea    eax,[esi+eax*4]
c0008636:	39 c7                	cmp    edi,eax
c0008638:	eb 0d                	jmp    c0008647 <src_process+0x112>
c000863a:	39 fe                	cmp    esi,edi
c000863c:	72 ee                	jb     c000862c <src_process+0xf7>
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 87             	lea    eax,[edi+eax*4]
c0008645:	39 c6                	cmp    esi,eax
c0008647:	73 ac                	jae    c00085f5 <src_process+0xc0>
c0008649:	b8 10 00 00 00       	mov    eax,0x10
c000864e:	e9 90 00 00 00       	jmp    c00086e3 <src_process+0x1ae>
c0008653:	83 ec 10             	sub    esp,0x10
c0008656:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008659:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000865c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000865f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008662:	e8 bd d3 01 00       	call   c0025a24 <__subdf3>
c0008667:	83 c4 18             	add    esp,0x18
c000866a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000866e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008672:	52                   	push   edx
c0008673:	50                   	push   eax
c0008674:	e8 37 de 01 00       	call   c00264b0 <fabs>
c0008679:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000867d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008681:	83 c4 10             	add    esp,0x10
c0008684:	68 af 03 d2 3c       	push   0x3cd203af
c0008689:	68 16 56 e7 9e       	push   0x9ee75616
c000868e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008696:	e8 84 dc 01 00       	call   c002631f <__ltdf2>
c000869b:	83 c4 10             	add    esp,0x10
c000869e:	85 c0                	test   eax,eax
c00086a0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086a4:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086a8:	79 05                	jns    c00086af <src_process+0x17a>
c00086aa:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086ad:	eb 03                	jmp    c00086b2 <src_process+0x17d>
c00086af:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086b2:	83 c4 1c             	add    esp,0x1c
c00086b5:	5b                   	pop    ebx
c00086b6:	5e                   	pop    esi
c00086b7:	5f                   	pop    edi
c00086b8:	5d                   	pop    ebp
c00086b9:	ff e0                	jmp    eax
c00086bb:	b8 02 00 00 00       	mov    eax,0x2
c00086c0:	eb 21                	jmp    c00086e3 <src_process+0x1ae>
c00086c2:	b8 07 00 00 00       	mov    eax,0x7
c00086c7:	eb 1a                	jmp    c00086e3 <src_process+0x1ae>
c00086c9:	b8 12 00 00 00       	mov    eax,0x12
c00086ce:	eb 13                	jmp    c00086e3 <src_process+0x1ae>
c00086d0:	b8 03 00 00 00       	mov    eax,0x3
c00086d5:	eb 0c                	jmp    c00086e3 <src_process+0x1ae>
c00086d7:	b8 04 00 00 00       	mov    eax,0x4
c00086dc:	eb 05                	jmp    c00086e3 <src_process+0x1ae>
c00086de:	b8 06 00 00 00       	mov    eax,0x6
c00086e3:	83 c4 1c             	add    esp,0x1c
c00086e6:	5b                   	pop    ebx
c00086e7:	5e                   	pop    esi
c00086e8:	5f                   	pop    edi
c00086e9:	5d                   	pop    ebp
c00086ea:	c3                   	ret    

c00086eb <src_callback_read>:
c00086eb:	55                   	push   ebp
c00086ec:	57                   	push   edi
c00086ed:	56                   	push   esi
c00086ee:	53                   	push   ebx
c00086ef:	83 ec 3c             	sub    esp,0x3c
c00086f2:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c00086f6:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00086fa:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00086fe:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008702:	85 ed                	test   ebp,ebp
c0008704:	0f 8e 52 01 00 00    	jle    c000885c <src_callback_read+0x171>
c000870a:	85 db                	test   ebx,ebx
c000870c:	0f 84 4a 01 00 00    	je     c000885c <src_callback_read+0x171>
c0008712:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008719:	74 0c                	je     c0008727 <src_callback_read+0x3c>
c000871b:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008722:	e9 35 01 00 00       	jmp    c000885c <src_callback_read+0x171>
c0008727:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000872b:	75 0c                	jne    c0008739 <src_callback_read+0x4e>
c000872d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008734:	e9 23 01 00 00       	jmp    c000885c <src_callback_read+0x171>
c0008739:	51                   	push   ecx
c000873a:	6a 24                	push   0x24
c000873c:	6a 00                	push   0x0
c000873e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008742:	50                   	push   eax
c0008743:	e8 34 7f ff ff       	call   c000067c <memset>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	68 00 00 70 3f       	push   0x3f700000
c0008750:	6a 00                	push   0x0
c0008752:	57                   	push   edi
c0008753:	56                   	push   esi
c0008754:	e8 c6 db 01 00       	call   c002631f <__ltdf2>
c0008759:	83 c4 10             	add    esp,0x10
c000875c:	85 c0                	test   eax,eax
c000875e:	78 3e                	js     c000879e <src_callback_read+0xb3>
c0008760:	68 00 00 70 40       	push   0x40700000
c0008765:	6a 00                	push   0x0
c0008767:	57                   	push   edi
c0008768:	56                   	push   esi
c0008769:	e8 93 db 01 00       	call   c0026301 <__gtdf2>
c000876e:	83 c4 10             	add    esp,0x10
c0008771:	85 c0                	test   eax,eax
c0008773:	7f 29                	jg     c000879e <src_callback_read+0xb3>
c0008775:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008779:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000877d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008781:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008785:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008788:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000878c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008790:	31 f6                	xor    esi,esi
c0008792:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008795:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008799:	e9 97 00 00 00       	jmp    c0008835 <src_callback_read+0x14a>
c000879e:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087a5:	e9 b2 00 00 00       	jmp    c000885c <src_callback_read+0x171>
c00087aa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b2:	52                   	push   edx
c00087b3:	52                   	push   edx
c00087b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087b8:	50                   	push   eax
c00087b9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087bc:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087cb:	83 c4 10             	add    esp,0x10
c00087ce:	85 c0                	test   eax,eax
c00087d0:	75 08                	jne    c00087da <src_callback_read+0xef>
c00087d2:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087da:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087e1:	50                   	push   eax
c00087e2:	50                   	push   eax
c00087e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087e7:	50                   	push   eax
c00087e8:	53                   	push   ebx
c00087e9:	e8 47 fd ff ff       	call   c0008535 <src_process>
c00087ee:	83 c4 10             	add    esp,0x10
c00087f1:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087f8:	85 c0                	test   eax,eax
c00087fa:	75 49                	jne    c0008845 <src_callback_read+0x15a>
c00087fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008800:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008803:	89 f9                	mov    ecx,edi
c0008805:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008809:	0f af ca             	imul   ecx,edx
c000880c:	c1 e1 02             	shl    ecx,0x2
c000880f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008813:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008817:	0f af d1             	imul   edx,ecx
c000881a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000881e:	c1 e2 02             	shl    edx,0x2
c0008821:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008825:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008828:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000882d:	74 12                	je     c0008841 <src_callback_read+0x156>
c000882f:	39 d5                	cmp    ebp,edx
c0008831:	7e 14                	jle    c0008847 <src_callback_read+0x15c>
c0008833:	89 d6                	mov    esi,edx
c0008835:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000883a:	75 9e                	jne    c00087da <src_callback_read+0xef>
c000883c:	e9 69 ff ff ff       	jmp    c00087aa <src_callback_read+0xbf>
c0008841:	85 c9                	test   ecx,ecx
c0008843:	75 ea                	jne    c000882f <src_callback_read+0x144>
c0008845:	89 f2                	mov    edx,esi
c0008847:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000884b:	85 c0                	test   eax,eax
c000884d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008850:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008854:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008857:	74 05                	je     c000885e <src_callback_read+0x173>
c0008859:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000885c:	31 d2                	xor    edx,edx
c000885e:	83 c4 3c             	add    esp,0x3c
c0008861:	89 d0                	mov    eax,edx
c0008863:	5b                   	pop    ebx
c0008864:	5e                   	pop    esi
c0008865:	5f                   	pop    edi
c0008866:	5d                   	pop    ebp
c0008867:	c3                   	ret    

c0008868 <src_set_ratio>:
c0008868:	57                   	push   edi
c0008869:	ba 02 00 00 00       	mov    edx,0x2
c000886e:	56                   	push   esi
c000886f:	53                   	push   ebx
c0008870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008874:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008878:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000887c:	85 db                	test   ebx,ebx
c000887e:	74 4c                	je     c00088cc <src_set_ratio+0x64>
c0008880:	ba 07 00 00 00       	mov    edx,0x7
c0008885:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008889:	74 41                	je     c00088cc <src_set_ratio+0x64>
c000888b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000888f:	74 3b                	je     c00088cc <src_set_ratio+0x64>
c0008891:	68 00 00 70 3f       	push   0x3f700000
c0008896:	6a 00                	push   0x0
c0008898:	57                   	push   edi
c0008899:	56                   	push   esi
c000889a:	e8 80 da 01 00       	call   c002631f <__ltdf2>
c000889f:	83 c4 10             	add    esp,0x10
c00088a2:	ba 06 00 00 00       	mov    edx,0x6
c00088a7:	85 c0                	test   eax,eax
c00088a9:	78 21                	js     c00088cc <src_set_ratio+0x64>
c00088ab:	68 00 00 70 40       	push   0x40700000
c00088b0:	6a 00                	push   0x0
c00088b2:	57                   	push   edi
c00088b3:	56                   	push   esi
c00088b4:	e8 48 da 01 00       	call   c0026301 <__gtdf2>
c00088b9:	83 c4 10             	add    esp,0x10
c00088bc:	ba 06 00 00 00       	mov    edx,0x6
c00088c1:	85 c0                	test   eax,eax
c00088c3:	7f 07                	jg     c00088cc <src_set_ratio+0x64>
c00088c5:	89 33                	mov    DWORD PTR [ebx],esi
c00088c7:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088ca:	31 d2                	xor    edx,edx
c00088cc:	5b                   	pop    ebx
c00088cd:	89 d0                	mov    eax,edx
c00088cf:	5e                   	pop    esi
c00088d0:	5f                   	pop    edi
c00088d1:	c3                   	ret    

c00088d2 <src_get_channels>:
c00088d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088d6:	b8 02 00 00 00       	mov    eax,0x2
c00088db:	85 d2                	test   edx,edx
c00088dd:	74 14                	je     c00088f3 <src_get_channels+0x21>
c00088df:	b8 07 00 00 00       	mov    eax,0x7
c00088e4:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088e8:	74 09                	je     c00088f3 <src_get_channels+0x21>
c00088ea:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088ee:	74 03                	je     c00088f3 <src_get_channels+0x21>
c00088f0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088f3:	c3                   	ret    

c00088f4 <src_reset>:
c00088f4:	53                   	push   ebx
c00088f5:	b8 02 00 00 00       	mov    eax,0x2
c00088fa:	83 ec 08             	sub    esp,0x8
c00088fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008901:	85 db                	test   ebx,ebx
c0008903:	74 36                	je     c000893b <src_reset+0x47>
c0008905:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008908:	85 c0                	test   eax,eax
c000890a:	74 09                	je     c0008915 <src_reset+0x21>
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	53                   	push   ebx
c0008910:	ff d0                	call   eax
c0008912:	83 c4 10             	add    esp,0x10
c0008915:	31 c0                	xor    eax,eax
c0008917:	31 d2                	xor    edx,edx
c0008919:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000891c:	89 03                	mov    DWORD PTR [ebx],eax
c000891e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008921:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008924:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000892b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008932:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008939:	31 c0                	xor    eax,eax
c000893b:	83 c4 08             	add    esp,0x8
c000893e:	5b                   	pop    ebx
c000893f:	c3                   	ret    

c0008940 <src_new>:
c0008940:	57                   	push   edi
c0008941:	56                   	push   esi
c0008942:	53                   	push   ebx
c0008943:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008947:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000894b:	85 f6                	test   esi,esi
c000894d:	74 73                	je     c00089c2 <src_new+0x82>
c000894f:	85 ff                	test   edi,edi
c0008951:	7f 08                	jg     c000895b <src_new+0x1b>
c0008953:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008959:	eb 1e                	jmp    c0008979 <src_new+0x39>
c000895b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008961:	50                   	push   eax
c0008962:	50                   	push   eax
c0008963:	6a 3c                	push   0x3c
c0008965:	6a 01                	push   0x1
c0008967:	e8 84 6b 00 00       	call   c000f4f0 <calloc>
c000896c:	83 c4 10             	add    esp,0x10
c000896f:	89 c3                	mov    ebx,eax
c0008971:	85 c0                	test   eax,eax
c0008973:	75 10                	jne    c0008985 <src_new+0x45>
c0008975:	85 f6                	test   esi,esi
c0008977:	75 04                	jne    c000897d <src_new+0x3d>
c0008979:	31 db                	xor    ebx,ebx
c000897b:	eb 4b                	jmp    c00089c8 <src_new+0x88>
c000897d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008983:	eb 43                	jmp    c00089c8 <src_new+0x88>
c0008985:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008988:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000898f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008993:	e8 1d fb ff ff       	call   c00084b5 <psrc_set_converter>
c0008998:	85 c0                	test   eax,eax
c000899a:	74 18                	je     c00089b4 <src_new+0x74>
c000899c:	85 f6                	test   esi,esi
c000899e:	74 06                	je     c00089a6 <src_new+0x66>
c00089a0:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089a6:	83 ec 0c             	sub    esp,0xc
c00089a9:	53                   	push   ebx
c00089aa:	31 db                	xor    ebx,ebx
c00089ac:	e8 1f 6b 00 00       	call   c000f4d0 <free>
c00089b1:	83 c4 10             	add    esp,0x10
c00089b4:	83 ec 0c             	sub    esp,0xc
c00089b7:	53                   	push   ebx
c00089b8:	e8 37 ff ff ff       	call   c00088f4 <src_reset>
c00089bd:	83 c4 10             	add    esp,0x10
c00089c0:	eb 06                	jmp    c00089c8 <src_new+0x88>
c00089c2:	85 ff                	test   edi,edi
c00089c4:	7f 9b                	jg     c0008961 <src_new+0x21>
c00089c6:	eb b1                	jmp    c0008979 <src_new+0x39>
c00089c8:	89 d8                	mov    eax,ebx
c00089ca:	5b                   	pop    ebx
c00089cb:	5e                   	pop    esi
c00089cc:	5f                   	pop    edi
c00089cd:	c3                   	ret    

c00089ce <src_callback_new>:
c00089ce:	56                   	push   esi
c00089cf:	53                   	push   ebx
c00089d0:	53                   	push   ebx
c00089d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089d9:	85 f6                	test   esi,esi
c00089db:	75 0e                	jne    c00089eb <src_callback_new+0x1d>
c00089dd:	31 db                	xor    ebx,ebx
c00089df:	85 c0                	test   eax,eax
c00089e1:	74 47                	je     c0008a2a <src_callback_new+0x5c>
c00089e3:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089e9:	eb 3f                	jmp    c0008a2a <src_callback_new+0x5c>
c00089eb:	85 c0                	test   eax,eax
c00089ed:	74 06                	je     c00089f5 <src_callback_new+0x27>
c00089ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00089f5:	51                   	push   ecx
c00089f6:	50                   	push   eax
c00089f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089ff:	e8 3c ff ff ff       	call   c0008940 <src_new>
c0008a04:	83 c4 10             	add    esp,0x10
c0008a07:	89 c3                	mov    ebx,eax
c0008a09:	85 c0                	test   eax,eax
c0008a0b:	74 1d                	je     c0008a2a <src_callback_new+0x5c>
c0008a0d:	83 ec 0c             	sub    esp,0xc
c0008a10:	50                   	push   eax
c0008a11:	e8 de fe ff ff       	call   c00088f4 <src_reset>
c0008a16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a1a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a21:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a24:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a27:	83 c4 10             	add    esp,0x10
c0008a2a:	89 d8                	mov    eax,ebx
c0008a2c:	5a                   	pop    edx
c0008a2d:	5b                   	pop    ebx
c0008a2e:	5e                   	pop    esi
c0008a2f:	c3                   	ret    

c0008a30 <src_get_name>:
c0008a30:	53                   	push   ebx
c0008a31:	83 ec 14             	sub    esp,0x14
c0008a34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a38:	53                   	push   ebx
c0008a39:	e8 d0 4f 00 00       	call   c000da0e <sinc_get_name>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	85 c0                	test   eax,eax
c0008a43:	75 1d                	jne    c0008a62 <src_get_name+0x32>
c0008a45:	83 ec 0c             	sub    esp,0xc
c0008a48:	53                   	push   ebx
c0008a49:	e8 80 57 00 00       	call   c000e1ce <zoh_get_name>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	85 c0                	test   eax,eax
c0008a53:	75 0d                	jne    c0008a62 <src_get_name+0x32>
c0008a55:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a59:	83 c4 08             	add    esp,0x8
c0008a5c:	5b                   	pop    ebx
c0008a5d:	e9 74 0b 00 00       	jmp    c00095d6 <linear_get_name>
c0008a62:	83 c4 08             	add    esp,0x8
c0008a65:	5b                   	pop    ebx
c0008a66:	c3                   	ret    

c0008a67 <src_get_description>:
c0008a67:	53                   	push   ebx
c0008a68:	83 ec 14             	sub    esp,0x14
c0008a6b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a6f:	53                   	push   ebx
c0008a70:	e8 ac 4f 00 00       	call   c000da21 <sinc_get_description>
c0008a75:	83 c4 10             	add    esp,0x10
c0008a78:	85 c0                	test   eax,eax
c0008a7a:	75 1d                	jne    c0008a99 <src_get_description+0x32>
c0008a7c:	83 ec 0c             	sub    esp,0xc
c0008a7f:	53                   	push   ebx
c0008a80:	e8 58 57 00 00       	call   c000e1dd <zoh_get_description>
c0008a85:	83 c4 10             	add    esp,0x10
c0008a88:	85 c0                	test   eax,eax
c0008a8a:	75 0d                	jne    c0008a99 <src_get_description+0x32>
c0008a8c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a90:	83 c4 08             	add    esp,0x8
c0008a93:	5b                   	pop    ebx
c0008a94:	e9 4c 0b 00 00       	jmp    c00095e5 <linear_get_description>
c0008a99:	83 c4 08             	add    esp,0x8
c0008a9c:	5b                   	pop    ebx
c0008a9d:	c3                   	ret    

c0008a9e <src_get_version>:
c0008a9e:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0008aa3:	c3                   	ret    

c0008aa4 <src_is_valid_ratio>:
c0008aa4:	83 ec 1c             	sub    esp,0x1c
c0008aa7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008aaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ab3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ab7:	68 00 00 70 3f       	push   0x3f700000
c0008abc:	6a 00                	push   0x0
c0008abe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ac6:	e8 54 d8 01 00       	call   c002631f <__ltdf2>
c0008acb:	83 c4 10             	add    esp,0x10
c0008ace:	31 d2                	xor    edx,edx
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	78 1e                	js     c0008af2 <src_is_valid_ratio+0x4e>
c0008ad4:	68 00 00 70 40       	push   0x40700000
c0008ad9:	6a 00                	push   0x0
c0008adb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ae3:	e8 19 d8 01 00       	call   c0026301 <__gtdf2>
c0008ae8:	31 d2                	xor    edx,edx
c0008aea:	83 c4 10             	add    esp,0x10
c0008aed:	85 c0                	test   eax,eax
c0008aef:	0f 9e c2             	setle  dl
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	83 c4 1c             	add    esp,0x1c
c0008af7:	c3                   	ret    

c0008af8 <src_error>:
c0008af8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afc:	31 c0                	xor    eax,eax
c0008afe:	85 d2                	test   edx,edx
c0008b00:	74 03                	je     c0008b05 <src_error+0xd>
c0008b02:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b05:	c3                   	ret    

c0008b06 <src_strerror>:
c0008b06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0a:	31 c0                	xor    eax,eax
c0008b0c:	83 fa 17             	cmp    edx,0x17
c0008b0f:	77 07                	ja     c0008b18 <src_strerror+0x12>
c0008b11:	8b 04 95 60 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd84a0]
c0008b18:	c3                   	ret    

c0008b19 <src_simple>:
c0008b19:	56                   	push   esi
c0008b1a:	53                   	push   ebx
c0008b1b:	83 ec 18             	sub    esp,0x18
c0008b1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b22:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b26:	50                   	push   eax
c0008b27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b2f:	e8 0c fe ff ff       	call   c0008940 <src_new>
c0008b34:	83 c4 10             	add    esp,0x10
c0008b37:	85 c0                	test   eax,eax
c0008b39:	75 06                	jne    c0008b41 <src_simple+0x28>
c0008b3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3f:	eb 25                	jmp    c0008b66 <src_simple+0x4d>
c0008b41:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b48:	89 c3                	mov    ebx,eax
c0008b4a:	50                   	push   eax
c0008b4b:	50                   	push   eax
c0008b4c:	56                   	push   esi
c0008b4d:	53                   	push   ebx
c0008b4e:	e8 e2 f9 ff ff       	call   c0008535 <src_process>
c0008b53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b5a:	e8 9a f9 ff ff       	call   c00084f9 <src_delete>
c0008b5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b63:	83 c4 10             	add    esp,0x10
c0008b66:	83 c4 14             	add    esp,0x14
c0008b69:	5b                   	pop    ebx
c0008b6a:	5e                   	pop    esi
c0008b6b:	c3                   	ret    

c0008b6c <src_short_to_float_array>:
c0008b6c:	53                   	push   ebx
c0008b6d:	83 ec 18             	sub    esp,0x18
c0008b70:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b74:	85 db                	test   ebx,ebx
c0008b76:	74 54                	je     c0008bcc <src_short_to_float_array+0x60>
c0008b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b7c:	4b                   	dec    ebx
c0008b7d:	83 ec 0c             	sub    esp,0xc
c0008b80:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b84:	50                   	push   eax
c0008b85:	e8 29 d5 01 00       	call   c00260b3 <__floatsidf>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b95:	68 00 00 00 3f       	push   0x3f000000
c0008b9a:	6a 00                	push   0x0
c0008b9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ba4:	e8 a7 ce 01 00       	call   c0025a50 <__muldf3>
c0008ba9:	59                   	pop    ecx
c0008baa:	59                   	pop    ecx
c0008bab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008baf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bbb:	e8 63 d7 01 00       	call   c0026323 <__truncdfsf2>
c0008bc0:	83 c4 10             	add    esp,0x10
c0008bc3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bc7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bca:	eb a8                	jmp    c0008b74 <src_short_to_float_array+0x8>
c0008bcc:	83 c4 18             	add    esp,0x18
c0008bcf:	5b                   	pop    ebx
c0008bd0:	c3                   	ret    

c0008bd1 <src_float_to_short_array>:
c0008bd1:	56                   	push   esi
c0008bd2:	53                   	push   ebx
c0008bd3:	83 ec 14             	sub    esp,0x14
c0008bd6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bda:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bde:	85 db                	test   ebx,ebx
c0008be0:	0f 84 a4 00 00 00    	je     c0008c8a <src_float_to_short_array+0xb9>
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	4b                   	dec    ebx
c0008bea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bee:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008bf1:	e8 51 d8 01 00       	call   c0026447 <__extendsfdf2>
c0008bf6:	83 c4 10             	add    esp,0x10
c0008bf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c01:	68 00 00 e0 41       	push   0x41e00000
c0008c06:	6a 00                	push   0x0
c0008c08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c10:	e8 3b ce 01 00       	call   c0025a50 <__muldf3>
c0008c15:	83 c4 10             	add    esp,0x10
c0008c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c20:	68 ff ff df 41       	push   0x41dfffff
c0008c25:	68 00 00 c0 ff       	push   0xffc00000
c0008c2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c32:	e8 e6 d6 01 00       	call   c002631d <__gedf2>
c0008c37:	83 c4 10             	add    esp,0x10
c0008c3a:	85 c0                	test   eax,eax
c0008c3c:	78 08                	js     c0008c46 <src_float_to_short_array+0x75>
c0008c3e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c44:	eb 98                	jmp    c0008bde <src_float_to_short_array+0xd>
c0008c46:	68 00 00 e0 c1       	push   0xc1e00000
c0008c4b:	6a 00                	push   0x0
c0008c4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c55:	e8 c7 d6 01 00       	call   c0026321 <__ledf2>
c0008c5a:	83 c4 10             	add    esp,0x10
c0008c5d:	85 c0                	test   eax,eax
c0008c5f:	7f 0b                	jg     c0008c6c <src_float_to_short_array+0x9b>
c0008c61:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c67:	e9 72 ff ff ff       	jmp    c0008bde <src_float_to_short_array+0xd>
c0008c6c:	50                   	push   eax
c0008c6d:	50                   	push   eax
c0008c6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	e8 55 d8 01 00       	call   c00264d0 <lrint>
c0008c7b:	83 c4 10             	add    esp,0x10
c0008c7e:	c1 f8 10             	sar    eax,0x10
c0008c81:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c85:	e9 54 ff ff ff       	jmp    c0008bde <src_float_to_short_array+0xd>
c0008c8a:	83 c4 14             	add    esp,0x14
c0008c8d:	5b                   	pop    ebx
c0008c8e:	5e                   	pop    esi
c0008c8f:	c3                   	ret    

c0008c90 <src_int_to_float_array>:
c0008c90:	53                   	push   ebx
c0008c91:	83 ec 18             	sub    esp,0x18
c0008c94:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c98:	85 db                	test   ebx,ebx
c0008c9a:	74 52                	je     c0008cee <src_int_to_float_array+0x5e>
c0008c9c:	83 ec 0c             	sub    esp,0xc
c0008c9f:	4b                   	dec    ebx
c0008ca0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ca4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ca7:	e8 07 d4 01 00       	call   c00260b3 <__floatsidf>
c0008cac:	83 c4 10             	add    esp,0x10
c0008caf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cb7:	68 00 00 00 3e       	push   0x3e000000
c0008cbc:	6a 00                	push   0x0
c0008cbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc6:	e8 85 cd 01 00       	call   c0025a50 <__muldf3>
c0008ccb:	59                   	pop    ecx
c0008ccc:	59                   	pop    ecx
c0008ccd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cd1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008cd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cdd:	e8 41 d6 01 00       	call   c0026323 <__truncdfsf2>
c0008ce2:	83 c4 10             	add    esp,0x10
c0008ce5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ce9:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cec:	eb aa                	jmp    c0008c98 <src_int_to_float_array+0x8>
c0008cee:	83 c4 18             	add    esp,0x18
c0008cf1:	5b                   	pop    ebx
c0008cf2:	c3                   	ret    

c0008cf3 <src_float_to_int_array>:
c0008cf3:	56                   	push   esi
c0008cf4:	53                   	push   ebx
c0008cf5:	83 ec 14             	sub    esp,0x14
c0008cf8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cfc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d00:	85 db                	test   ebx,ebx
c0008d02:	0f 84 a2 00 00 00    	je     c0008daa <src_float_to_int_array+0xb7>
c0008d08:	83 ec 0c             	sub    esp,0xc
c0008d0b:	4b                   	dec    ebx
c0008d0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d10:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d13:	e8 2f d7 01 00       	call   c0026447 <__extendsfdf2>
c0008d18:	83 c4 10             	add    esp,0x10
c0008d1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d23:	68 00 00 e0 41       	push   0x41e00000
c0008d28:	6a 00                	push   0x0
c0008d2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d32:	e8 19 cd 01 00       	call   c0025a50 <__muldf3>
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d42:	68 ff ff df 41       	push   0x41dfffff
c0008d47:	68 00 00 c0 ff       	push   0xffc00000
c0008d4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d54:	e8 c4 d5 01 00       	call   c002631d <__gedf2>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	78 09                	js     c0008d69 <src_float_to_int_array+0x76>
c0008d60:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d67:	eb 97                	jmp    c0008d00 <src_float_to_int_array+0xd>
c0008d69:	68 00 00 e0 c1       	push   0xc1e00000
c0008d6e:	6a 00                	push   0x0
c0008d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d78:	e8 a4 d5 01 00       	call   c0026321 <__ledf2>
c0008d7d:	83 c4 10             	add    esp,0x10
c0008d80:	85 c0                	test   eax,eax
c0008d82:	7f 0c                	jg     c0008d90 <src_float_to_int_array+0x9d>
c0008d84:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d8b:	e9 70 ff ff ff       	jmp    c0008d00 <src_float_to_int_array+0xd>
c0008d90:	50                   	push   eax
c0008d91:	50                   	push   eax
c0008d92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9a:	e8 31 d7 01 00       	call   c00264d0 <lrint>
c0008d9f:	83 c4 10             	add    esp,0x10
c0008da2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008da5:	e9 56 ff ff ff       	jmp    c0008d00 <src_float_to_int_array+0xd>
c0008daa:	83 c4 14             	add    esp,0x14
c0008dad:	5b                   	pop    ebx
c0008dae:	5e                   	pop    esi
c0008daf:	c3                   	ret    

c0008db0 <linear_vari_process>:
c0008db0:	55                   	push   ebp
c0008db1:	31 d2                	xor    edx,edx
c0008db3:	57                   	push   edi
c0008db4:	56                   	push   esi
c0008db5:	53                   	push   ebx
c0008db6:	83 ec 3c             	sub    esp,0x3c
c0008db9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dbd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dc1:	0f 8e d3 07 00 00    	jle    c000959a <linear_vari_process+0x7ea>
c0008dc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dcb:	ba 05 00 00 00       	mov    edx,0x5
c0008dd0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	0f 84 bf 07 00 00    	je     c000959a <linear_vari_process+0x7ea>
c0008ddb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008dde:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008de2:	74 19                	je     c0008dfd <linear_vari_process+0x4d>
c0008de4:	31 d2                	xor    edx,edx
c0008de6:	39 c2                	cmp    edx,eax
c0008de8:	7d 0c                	jge    c0008df6 <linear_vari_process+0x46>
c0008dea:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dec:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008def:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008df3:	42                   	inc    edx
c0008df4:	eb f0                	jmp    c0008de6 <linear_vari_process+0x36>
c0008df6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008dfd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e00:	0f af d0             	imul   edx,eax
c0008e03:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e06:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e0a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e11:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e14:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e1b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e1f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e24:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e2c:	68 00 00 70 3f       	push   0x3f700000
c0008e31:	6a 00                	push   0x0
c0008e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e3b:	e8 df d4 01 00       	call   c002631f <__ltdf2>
c0008e40:	83 c4 10             	add    esp,0x10
c0008e43:	ba 16 00 00 00       	mov    edx,0x16
c0008e48:	85 c0                	test   eax,eax
c0008e4a:	0f 88 4a 07 00 00    	js     c000959a <linear_vari_process+0x7ea>
c0008e50:	68 00 00 70 40       	push   0x40700000
c0008e55:	6a 00                	push   0x0
c0008e57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5f:	e8 9d d4 01 00       	call   c0026301 <__gtdf2>
c0008e64:	83 c4 10             	add    esp,0x10
c0008e67:	ba 16 00 00 00       	mov    edx,0x16
c0008e6c:	85 c0                	test   eax,eax
c0008e6e:	0f 8f 26 07 00 00    	jg     c000959a <linear_vari_process+0x7ea>
c0008e74:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e78:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e7b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e86:	68 00 00 f0 3f       	push   0x3ff00000
c0008e8b:	6a 00                	push   0x0
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	e8 85 d4 01 00       	call   c002631f <__ltdf2>
c0008e9a:	83 c4 10             	add    esp,0x10
c0008e9d:	85 c0                	test   eax,eax
c0008e9f:	0f 89 89 02 00 00    	jns    c000912e <linear_vari_process+0x37e>
c0008ea5:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ea8:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eab:	0f 8d 7d 02 00 00    	jge    c000912e <linear_vari_process+0x37e>
c0008eb1:	83 ec 0c             	sub    esp,0xc
c0008eb4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eb7:	e8 f7 d1 01 00       	call   c00260b3 <__floatsidf>
c0008ebc:	83 c4 10             	add    esp,0x10
c0008ebf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ec2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ec6:	68 00 00 f0 3f       	push   0x3ff00000
c0008ecb:	6a 00                	push   0x0
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 f9 c4 01 00       	call   c00253d3 <__adddf3>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ee1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ee5:	52                   	push   edx
c0008ee6:	50                   	push   eax
c0008ee7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eeb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008eef:	e8 5c cb 01 00       	call   c0025a50 <__muldf3>
c0008ef4:	5d                   	pop    ebp
c0008ef5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ef9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008efd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f00:	e8 ae d1 01 00       	call   c00260b3 <__floatsidf>
c0008f05:	83 c4 10             	add    esp,0x10
c0008f08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f0c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f10:	52                   	push   edx
c0008f11:	50                   	push   eax
c0008f12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f1a:	e8 b4 c4 01 00       	call   c00253d3 <__adddf3>
c0008f1f:	59                   	pop    ecx
c0008f20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f24:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f28:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f2b:	e8 83 d1 01 00       	call   c00260b3 <__floatsidf>
c0008f30:	83 c4 10             	add    esp,0x10
c0008f33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f3b:	52                   	push   edx
c0008f3c:	50                   	push   eax
c0008f3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f45:	e8 d3 d3 01 00       	call   c002631d <__gedf2>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	85 c0                	test   eax,eax
c0008f4f:	0f 89 d9 01 00 00    	jns    c000912e <linear_vari_process+0x37e>
c0008f55:	85 ff                	test   edi,edi
c0008f57:	0f 8e f4 00 00 00    	jle    c0009051 <linear_vari_process+0x2a1>
c0008f5d:	83 ec 10             	sub    esp,0x10
c0008f60:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f63:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f66:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f6a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f6d:	ff 30                	push   DWORD PTR [eax]
c0008f6f:	e8 b0 ca 01 00       	call   c0025a24 <__subdf3>
c0008f74:	83 c4 18             	add    esp,0x18
c0008f77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f7f:	52                   	push   edx
c0008f80:	50                   	push   eax
c0008f81:	e8 2a d5 01 00       	call   c00264b0 <fabs>
c0008f86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f8a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f8e:	83 c4 10             	add    esp,0x10
c0008f91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008f96:	68 23 42 92 0c       	push   0xc924223
c0008f9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fa3:	e8 59 d3 01 00       	call   c0026301 <__gtdf2>
c0008fa8:	83 c4 10             	add    esp,0x10
c0008fab:	85 c0                	test   eax,eax
c0008fad:	0f 8e 9e 00 00 00    	jle    c0009051 <linear_vari_process+0x2a1>
c0008fb3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fb7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fba:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fc0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fc3:	52                   	push   edx
c0008fc4:	50                   	push   eax
c0008fc5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fc8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fcb:	e8 54 ca 01 00       	call   c0025a24 <__subdf3>
c0008fd0:	59                   	pop    ecx
c0008fd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fd9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008fdc:	e8 d2 d0 01 00       	call   c00260b3 <__floatsidf>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fe8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fec:	52                   	push   edx
c0008fed:	50                   	push   eax
c0008fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ff6:	e8 55 ca 01 00       	call   c0025a50 <__muldf3>
c0008ffb:	5f                   	pop    edi
c0008ffc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009000:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009004:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009007:	e8 a7 d0 01 00       	call   c00260b3 <__floatsidf>
c000900c:	83 c4 10             	add    esp,0x10
c000900f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009013:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009017:	52                   	push   edx
c0009018:	50                   	push   eax
c0009019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000901d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009021:	e8 0e cd 01 00       	call   c0025d34 <__divdf3>
c0009026:	83 c4 10             	add    esp,0x10
c0009029:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000902d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009031:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009035:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009039:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009041:	e8 8d c3 01 00       	call   c00253d3 <__adddf3>
c0009046:	83 c4 10             	add    esp,0x10
c0009049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000904d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009051:	31 ff                	xor    edi,edi
c0009053:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009056:	0f 8e 9d 00 00 00    	jle    c00090f9 <linear_vari_process+0x349>
c000905c:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000905f:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009063:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009066:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000906a:	89 04 24             	mov    DWORD PTR [esp],eax
c000906d:	8b 06                	mov    eax,DWORD PTR [esi]
c000906f:	52                   	push   edx
c0009070:	52                   	push   edx
c0009071:	55                   	push   ebp
c0009072:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009075:	47                   	inc    edi
c0009076:	e8 ed bc 01 00       	call   c0024d68 <__subsf3>
c000907b:	89 04 24             	mov    DWORD PTR [esp],eax
c000907e:	e8 c4 d3 01 00       	call   c0026447 <__extendsfdf2>
c0009083:	83 c4 10             	add    esp,0x10
c0009086:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000908a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000908e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009092:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009096:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000909e:	e8 ad c9 01 00       	call   c0025a50 <__muldf3>
c00090a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090ae:	e8 94 d3 01 00       	call   c0026447 <__extendsfdf2>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090be:	52                   	push   edx
c00090bf:	50                   	push   eax
c00090c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090c8:	e8 06 c3 01 00       	call   c00253d3 <__adddf3>
c00090cd:	59                   	pop    ecx
c00090ce:	5d                   	pop    ebp
c00090cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090df:	e8 3f d2 01 00       	call   c0026323 <__truncdfsf2>
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090ea:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090ee:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00090f1:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00090f4:	e9 5a ff ff ff       	jmp    c0009053 <linear_vari_process+0x2a3>
c00090f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009101:	68 00 00 f0 3f       	push   0x3ff00000
c0009106:	6a 00                	push   0x0
c0009108:	e8 27 cc 01 00       	call   c0025d34 <__divdf3>
c000910d:	83 c4 10             	add    esp,0x10
c0009110:	89 04 24             	mov    DWORD PTR [esp],eax
c0009113:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009117:	52                   	push   edx
c0009118:	50                   	push   eax
c0009119:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009121:	e8 ad c2 01 00       	call   c00253d3 <__adddf3>
c0009126:	83 c4 10             	add    esp,0x10
c0009129:	e9 50 fd ff ff       	jmp    c0008e7e <linear_vari_process+0xce>
c000912e:	50                   	push   eax
c000912f:	50                   	push   eax
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009138:	e8 93 d3 01 00       	call   c00264d0 <lrint>
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	50                   	push   eax
c0009141:	e8 6d cf 01 00       	call   c00260b3 <__floatsidf>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000914d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009151:	52                   	push   edx
c0009152:	50                   	push   eax
c0009153:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009157:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000915b:	e8 c4 c8 01 00       	call   c0025a24 <__subdf3>
c0009160:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009164:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009168:	83 c4 20             	add    esp,0x20
c000916b:	6a 00                	push   0x0
c000916d:	6a 00                	push   0x0
c000916f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009173:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009177:	e8 a3 d1 01 00       	call   c002631f <__ltdf2>
c000917c:	83 c4 10             	add    esp,0x10
c000917f:	85 c0                	test   eax,eax
c0009181:	79 1e                	jns    c00091a1 <linear_vari_process+0x3f1>
c0009183:	68 00 00 f0 3f       	push   0x3ff00000
c0009188:	6a 00                	push   0x0
c000918a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009192:	e8 3c c2 01 00       	call   c00253d3 <__adddf3>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	89 04 24             	mov    DWORD PTR [esp],eax
c000919d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091a1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091a4:	83 ec 10             	sub    esp,0x10
c00091a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b7:	e8 68 c8 01 00       	call   c0025a24 <__subdf3>
c00091bc:	83 c4 18             	add    esp,0x18
c00091bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091c7:	52                   	push   edx
c00091c8:	50                   	push   eax
c00091c9:	e8 02 d3 01 00       	call   c00264d0 <lrint>
c00091ce:	83 c4 10             	add    esp,0x10
c00091d1:	0f af f8             	imul   edi,eax
c00091d4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091d7:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091da:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091dd:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091e0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091e3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091e7:	0f 8d 13 03 00 00    	jge    c0009500 <linear_vari_process+0x750>
c00091ed:	83 ec 0c             	sub    esp,0xc
c00091f0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091f3:	e8 bb ce 01 00       	call   c00260b3 <__floatsidf>
c00091f8:	83 c4 10             	add    esp,0x10
c00091fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009203:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009207:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000920b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000920f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009213:	e8 38 c8 01 00       	call   c0025a50 <__muldf3>
c0009218:	89 3c 24             	mov    DWORD PTR [esp],edi
c000921b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000921f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009223:	e8 8b ce 01 00       	call   c00260b3 <__floatsidf>
c0009228:	83 c4 10             	add    esp,0x10
c000922b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009233:	52                   	push   edx
c0009234:	50                   	push   eax
c0009235:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000923d:	e8 91 c1 01 00       	call   c00253d3 <__adddf3>
c0009242:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009245:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009249:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924d:	e8 61 ce 01 00       	call   c00260b3 <__floatsidf>
c0009252:	83 c4 10             	add    esp,0x10
c0009255:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009259:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925d:	52                   	push   edx
c000925e:	50                   	push   eax
c000925f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009263:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009267:	e8 b3 d0 01 00       	call   c002631f <__ltdf2>
c000926c:	83 c4 10             	add    esp,0x10
c000926f:	85 c0                	test   eax,eax
c0009271:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009275:	0f 89 85 02 00 00    	jns    c0009500 <linear_vari_process+0x750>
c000927b:	85 c9                	test   ecx,ecx
c000927d:	0f 8e f5 00 00 00    	jle    c0009378 <linear_vari_process+0x5c8>
c0009283:	83 ec 10             	sub    esp,0x10
c0009286:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009289:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000928c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009290:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009293:	ff 30                	push   DWORD PTR [eax]
c0009295:	e8 8a c7 01 00       	call   c0025a24 <__subdf3>
c000929a:	83 c4 18             	add    esp,0x18
c000929d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	e8 04 d2 01 00       	call   c00264b0 <fabs>
c00092ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092bc:	68 23 42 92 0c       	push   0xc924223
c00092c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092c9:	e8 33 d0 01 00       	call   c0026301 <__gtdf2>
c00092ce:	83 c4 10             	add    esp,0x10
c00092d1:	85 c0                	test   eax,eax
c00092d3:	0f 8e 9f 00 00 00    	jle    c0009378 <linear_vari_process+0x5c8>
c00092d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092dd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092ea:	52                   	push   edx
c00092eb:	50                   	push   eax
c00092ec:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092ef:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092f2:	e8 2d c7 01 00       	call   c0025a24 <__subdf3>
c00092f7:	5f                   	pop    edi
c00092f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00092fc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009300:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009303:	e8 ab cd 01 00       	call   c00260b3 <__floatsidf>
c0009308:	83 c4 10             	add    esp,0x10
c000930b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009313:	52                   	push   edx
c0009314:	50                   	push   eax
c0009315:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009319:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000931d:	e8 2e c7 01 00       	call   c0025a50 <__muldf3>
c0009322:	5d                   	pop    ebp
c0009323:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009327:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000932b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000932e:	e8 80 cd 01 00       	call   c00260b3 <__floatsidf>
c0009333:	83 c4 10             	add    esp,0x10
c0009336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000933a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000933e:	52                   	push   edx
c000933f:	50                   	push   eax
c0009340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009348:	e8 e7 c9 01 00       	call   c0025d34 <__divdf3>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009354:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009358:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000935c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	e8 66 c0 01 00       	call   c00253d3 <__adddf3>
c000936d:	83 c4 10             	add    esp,0x10
c0009370:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009374:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009378:	31 ff                	xor    edi,edi
c000937a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000937d:	39 f8                	cmp    eax,edi
c000937f:	0f 8e ac 00 00 00    	jle    c0009431 <linear_vari_process+0x681>
c0009385:	8b 16                	mov    edx,DWORD PTR [esi]
c0009387:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000938a:	29 c1                	sub    ecx,eax
c000938c:	89 c8                	mov    eax,ecx
c000938e:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009391:	01 f8                	add    eax,edi
c0009393:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009397:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000939a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000939d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093a4:	51                   	push   ecx
c00093a5:	01 f8                	add    eax,edi
c00093a7:	51                   	push   ecx
c00093a8:	47                   	inc    edi
c00093a9:	55                   	push   ebp
c00093aa:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093ad:	e8 b6 b9 01 00       	call   c0024d68 <__subsf3>
c00093b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b5:	e8 8d d0 01 00       	call   c0026447 <__extendsfdf2>
c00093ba:	83 c4 10             	add    esp,0x10
c00093bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093c5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093c9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d5:	e8 76 c6 01 00       	call   c0025a50 <__muldf3>
c00093da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093e5:	e8 5d d0 01 00       	call   c0026447 <__extendsfdf2>
c00093ea:	83 c4 10             	add    esp,0x10
c00093ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093f5:	52                   	push   edx
c00093f6:	50                   	push   eax
c00093f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ff:	e8 cf bf 01 00       	call   c00253d3 <__adddf3>
c0009404:	5d                   	pop    ebp
c0009405:	59                   	pop    ecx
c0009406:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000940a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 08 cf 01 00       	call   c0026323 <__truncdfsf2>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009422:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009426:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009429:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000942c:	e9 49 ff ff ff       	jmp    c000937a <linear_vari_process+0x5ca>
c0009431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009439:	68 00 00 f0 3f       	push   0x3ff00000
c000943e:	6a 00                	push   0x0
c0009440:	e8 ef c8 01 00       	call   c0025d34 <__divdf3>
c0009445:	83 c4 10             	add    esp,0x10
c0009448:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009450:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009454:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009460:	e8 6e bf 01 00       	call   c00253d3 <__adddf3>
c0009465:	59                   	pop    ecx
c0009466:	5f                   	pop    edi
c0009467:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000946b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000946f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009477:	e8 54 d0 01 00       	call   c00264d0 <lrint>
c000947c:	83 ec 0c             	sub    esp,0xc
c000947f:	50                   	push   eax
c0009480:	e8 2e cc 01 00       	call   c00260b3 <__floatsidf>
c0009485:	83 c4 10             	add    esp,0x10
c0009488:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000948c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009490:	52                   	push   edx
c0009491:	50                   	push   eax
c0009492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009496:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000949a:	e8 85 c5 01 00       	call   c0025a24 <__subdf3>
c000949f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094a7:	83 c4 20             	add    esp,0x20
c00094aa:	6a 00                	push   0x0
c00094ac:	6a 00                	push   0x0
c00094ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094b6:	e8 64 ce 01 00       	call   c002631f <__ltdf2>
c00094bb:	83 c4 10             	add    esp,0x10
c00094be:	85 c0                	test   eax,eax
c00094c0:	79 1e                	jns    c00094e0 <linear_vari_process+0x730>
c00094c2:	68 00 00 f0 3f       	push   0x3ff00000
c00094c7:	6a 00                	push   0x0
c00094c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094d1:	e8 fd be 01 00       	call   c00253d3 <__adddf3>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00094dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094e0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094e3:	83 ec 10             	sub    esp,0x10
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094f6:	e8 29 c5 01 00       	call   c0025a24 <__subdf3>
c00094fb:	e9 bc fc ff ff       	jmp    c00091bc <linear_vari_process+0x40c>
c0009500:	39 fd                	cmp    ebp,edi
c0009502:	7d 38                	jge    c000953c <linear_vari_process+0x78c>
c0009504:	83 ec 0c             	sub    esp,0xc
c0009507:	89 f8                	mov    eax,edi
c0009509:	29 e8                	sub    eax,ebp
c000950b:	99                   	cdq    
c000950c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000950f:	50                   	push   eax
c0009510:	e8 9e cb 01 00       	call   c00260b3 <__floatsidf>
c0009515:	83 c4 10             	add    esp,0x10
c0009518:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000951c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009520:	52                   	push   edx
c0009521:	50                   	push   eax
c0009522:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009526:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000952a:	e8 a4 be 01 00       	call   c00253d3 <__adddf3>
c000952f:	83 c4 10             	add    esp,0x10
c0009532:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009535:	89 04 24             	mov    DWORD PTR [esp],eax
c0009538:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000953c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009543:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009547:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000954a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000954d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009550:	85 c0                	test   eax,eax
c0009552:	7f 29                	jg     c000957d <linear_vari_process+0x7cd>
c0009554:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009560:	89 01                	mov    DWORD PTR [ecx],eax
c0009562:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009565:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009568:	99                   	cdq    
c0009569:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000956c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000956f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009572:	99                   	cdq    
c0009573:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009576:	31 d2                	xor    edx,edx
c0009578:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000957b:	eb 1d                	jmp    c000959a <linear_vari_process+0x7ea>
c000957d:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009580:	31 d2                	xor    edx,edx
c0009582:	29 c8                	sub    eax,ecx
c0009584:	c1 e0 02             	shl    eax,0x2
c0009587:	39 d1                	cmp    ecx,edx
c0009589:	7e c9                	jle    c0009554 <linear_vari_process+0x7a4>
c000958b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000958d:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009590:	83 c0 04             	add    eax,0x4
c0009593:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c0009597:	42                   	inc    edx
c0009598:	eb ed                	jmp    c0009587 <linear_vari_process+0x7d7>
c000959a:	83 c4 3c             	add    esp,0x3c
c000959d:	89 d0                	mov    eax,edx
c000959f:	5b                   	pop    ebx
c00095a0:	5e                   	pop    esi
c00095a1:	5f                   	pop    edi
c00095a2:	5d                   	pop    ebp
c00095a3:	c3                   	ret    

c00095a4 <linear_reset>:
c00095a4:	83 ec 0c             	sub    esp,0xc
c00095a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ab:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095ae:	85 c0                	test   eax,eax
c00095b0:	74 20                	je     c00095d2 <linear_reset+0x2e>
c00095b2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095b5:	83 c0 1c             	add    eax,0x1c
c00095b8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095bb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095c2:	c1 e2 02             	shl    edx,0x2
c00095c5:	51                   	push   ecx
c00095c6:	52                   	push   edx
c00095c7:	6a 00                	push   0x0
c00095c9:	50                   	push   eax
c00095ca:	e8 ad 70 ff ff       	call   c000067c <memset>
c00095cf:	83 c4 10             	add    esp,0x10
c00095d2:	83 c4 0c             	add    esp,0xc
c00095d5:	c3                   	ret    

c00095d6 <linear_get_name>:
c00095d6:	31 c0                	xor    eax,eax
c00095d8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095dd:	75 05                	jne    c00095e4 <linear_get_name+0xe>
c00095df:	b8 c0 7b 02 c0       	mov    eax,0xc0027bc0
c00095e4:	c3                   	ret    

c00095e5 <linear_get_description>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_description+0xe>
c00095ee:	b8 d4 7b 02 c0       	mov    eax,0xc0027bd4
c00095f3:	c3                   	ret    

c00095f4 <linear_set_converter>:
c00095f4:	53                   	push   ebx
c00095f5:	b8 0a 00 00 00       	mov    eax,0xa
c00095fa:	83 ec 08             	sub    esp,0x8
c00095fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009601:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009606:	75 6e                	jne    c0009676 <linear_set_converter+0x82>
c0009608:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000960b:	85 c0                	test   eax,eax
c000960d:	74 13                	je     c0009622 <linear_set_converter+0x2e>
c000960f:	83 ec 0c             	sub    esp,0xc
c0009612:	50                   	push   eax
c0009613:	e8 b8 5e 00 00       	call   c000f4d0 <free>
c0009618:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000961f:	83 c4 10             	add    esp,0x10
c0009622:	50                   	push   eax
c0009623:	50                   	push   eax
c0009624:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009627:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000962e:	50                   	push   eax
c000962f:	6a 01                	push   0x1
c0009631:	e8 ba 5e 00 00       	call   c000f4f0 <calloc>
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	89 c2                	mov    edx,eax
c000963b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000963e:	85 d2                	test   edx,edx
c0009640:	b8 01 00 00 00       	mov    eax,0x1
c0009645:	74 2f                	je     c0009676 <linear_set_converter+0x82>
c0009647:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000964a:	83 ec 0c             	sub    esp,0xc
c000964d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009650:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009656:	c7 43 24 b0 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008db0
c000965d:	c7 43 20 b0 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008db0
c0009664:	c7 43 28 a4 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095a4
c000966b:	53                   	push   ebx
c000966c:	e8 33 ff ff ff       	call   c00095a4 <linear_reset>
c0009671:	83 c4 10             	add    esp,0x10
c0009674:	31 c0                	xor    eax,eax
c0009676:	83 c4 08             	add    esp,0x8
c0009679:	5b                   	pop    ebx
c000967a:	c3                   	ret    

c000967b <int_to_fp>:
c000967b:	c1 e0 0c             	shl    eax,0xc
c000967e:	c3                   	ret    

c000967f <fp_to_int>:
c000967f:	c1 f8 0c             	sar    eax,0xc
c0009682:	c3                   	ret    

c0009683 <fp_fraction_part>:
c0009683:	25 ff 0f 00 00       	and    eax,0xfff
c0009688:	c3                   	ret    

c0009689 <fp_to_double>:
c0009689:	83 ec 1c             	sub    esp,0x1c
c000968c:	e8 f2 ff ff ff       	call   c0009683 <fp_fraction_part>
c0009691:	83 ec 0c             	sub    esp,0xc
c0009694:	50                   	push   eax
c0009695:	e8 19 ca 01 00       	call   c00260b3 <__floatsidf>
c000969a:	83 c4 10             	add    esp,0x10
c000969d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096a5:	68 00 00 30 3f       	push   0x3f300000
c00096aa:	6a 00                	push   0x0
c00096ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b4:	e8 97 c3 01 00       	call   c0025a50 <__muldf3>
c00096b9:	83 c4 2c             	add    esp,0x2c
c00096bc:	c3                   	ret    

c00096bd <calc_output_single>:
c00096bd:	55                   	push   ebp
c00096be:	57                   	push   edi
c00096bf:	56                   	push   esi
c00096c0:	89 c6                	mov    esi,eax
c00096c2:	53                   	push   ebx
c00096c3:	89 d3                	mov    ebx,edx
c00096c5:	83 ec 4c             	sub    esp,0x4c
c00096c8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096cc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096cf:	e8 a7 ff ff ff       	call   c000967b <int_to_fp>
c00096d4:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096d7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096db:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096df:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096e3:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096e6:	99                   	cdq    
c00096e7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096ef:	f7 fb                	idiv   ebx
c00096f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00096f9:	89 da                	mov    edx,ebx
c00096fb:	0f af d0             	imul   edx,eax
c00096fe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009702:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009706:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000970a:	29 c2                	sub    edx,eax
c000970c:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000970f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009713:	83 c5 04             	add    ebp,0x4
c0009716:	e8 6e ff ff ff       	call   c0009689 <fp_to_double>
c000971b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000971f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009727:	e8 53 ff ff ff       	call   c000967f <fp_to_int>
c000972c:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000972f:	52                   	push   edx
c0009730:	52                   	push   edx
c0009731:	51                   	push   ecx
c0009732:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009736:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000973a:	e8 29 b6 01 00       	call   c0024d68 <__subsf3>
c000973f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009742:	e8 00 cd 01 00       	call   c0026447 <__extendsfdf2>
c0009747:	83 c4 10             	add    esp,0x10
c000974a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000974e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009752:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009756:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000975a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000975e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009762:	e8 e9 c2 01 00       	call   c0025a50 <__muldf3>
c0009767:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000976b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000976f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009772:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009776:	e8 cc cc 01 00       	call   c0026447 <__extendsfdf2>
c000977b:	83 c4 10             	add    esp,0x10
c000977e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009782:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009786:	52                   	push   edx
c0009787:	50                   	push   eax
c0009788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000978c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009790:	e8 3e bc 01 00       	call   c00253d3 <__adddf3>
c0009795:	59                   	pop    ecx
c0009796:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000979a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000979e:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097a4:	e8 9e cc 01 00       	call   c0026447 <__extendsfdf2>
c00097a9:	83 c4 10             	add    esp,0x10
c00097ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097b4:	52                   	push   edx
c00097b5:	50                   	push   eax
c00097b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097be:	e8 8d c2 01 00       	call   c0025a50 <__muldf3>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097d8:	e8 f6 bb 01 00       	call   c00253d3 <__adddf3>
c00097dd:	83 c4 10             	add    esp,0x10
c00097e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097e8:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097ec:	0f 89 1d ff ff ff    	jns    c000970f <calc_output_single+0x52>
c00097f2:	89 d9                	mov    ecx,ebx
c00097f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097f8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097fc:	89 dd                	mov    ebp,ebx
c00097fe:	29 c8                	sub    eax,ecx
c0009800:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009808:	99                   	cdq    
c0009809:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009811:	f7 fb                	idiv   ebx
c0009813:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009817:	0f af e8             	imul   ebp,eax
c000981a:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000981e:	01 cd                	add    ebp,ecx
c0009820:	8d 34 86             	lea    esi,[esi+eax*4]
c0009823:	89 e8                	mov    eax,ebp
c0009825:	83 ee 04             	sub    esi,0x4
c0009828:	e8 5c fe ff ff       	call   c0009689 <fp_to_double>
c000982d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009831:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009835:	89 e8                	mov    eax,ebp
c0009837:	29 dd                	sub    ebp,ebx
c0009839:	e8 41 fe ff ff       	call   c000967f <fp_to_int>
c000983e:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009841:	52                   	push   edx
c0009842:	52                   	push   edx
c0009843:	51                   	push   ecx
c0009844:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009848:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000984c:	e8 17 b5 01 00       	call   c0024d68 <__subsf3>
c0009851:	89 04 24             	mov    DWORD PTR [esp],eax
c0009854:	e8 ee cb 01 00       	call   c0026447 <__extendsfdf2>
c0009859:	83 c4 10             	add    esp,0x10
c000985c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009860:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000986c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009874:	e8 d7 c1 01 00       	call   c0025a50 <__muldf3>
c0009879:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000987d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009881:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009884:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009888:	e8 ba cb 01 00       	call   c0026447 <__extendsfdf2>
c000988d:	83 c4 10             	add    esp,0x10
c0009890:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009894:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009898:	52                   	push   edx
c0009899:	50                   	push   eax
c000989a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000989e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a2:	e8 2c bb 01 00       	call   c00253d3 <__adddf3>
c00098a7:	59                   	pop    ecx
c00098a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098ac:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098b0:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098b6:	e8 8c cb 01 00       	call   c0026447 <__extendsfdf2>
c00098bb:	83 c4 10             	add    esp,0x10
c00098be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098c2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098c6:	52                   	push   edx
c00098c7:	50                   	push   eax
c00098c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098d0:	e8 7b c1 01 00       	call   c0025a50 <__muldf3>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ea:	e8 e4 ba 01 00       	call   c00253d3 <__adddf3>
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	85 ed                	test   ebp,ebp
c00098f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098f8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00098fc:	0f 8f 21 ff ff ff    	jg     c0009823 <calc_output_single+0x166>
c0009902:	52                   	push   edx
c0009903:	50                   	push   eax
c0009904:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009908:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990c:	e8 c2 ba 01 00       	call   c00253d3 <__adddf3>
c0009911:	83 c4 5c             	add    esp,0x5c
c0009914:	5b                   	pop    ebx
c0009915:	5e                   	pop    esi
c0009916:	5f                   	pop    edi
c0009917:	5d                   	pop    ebp
c0009918:	c3                   	ret    

c0009919 <calc_output_stereo>:
c0009919:	55                   	push   ebp
c000991a:	89 cd                	mov    ebp,ecx
c000991c:	57                   	push   edi
c000991d:	56                   	push   esi
c000991e:	53                   	push   ebx
c000991f:	89 c3                	mov    ebx,eax
c0009921:	83 ec 6c             	sub    esp,0x6c
c0009924:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009928:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000992f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009936:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000993a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000993e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009941:	e8 35 fd ff ff       	call   c000967b <int_to_fp>
c0009946:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000994e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009952:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000995a:	29 c8                	sub    eax,ecx
c000995c:	99                   	cdq    
c000995d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009961:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009965:	0f af d0             	imul   edx,eax
c0009968:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000996b:	31 d2                	xor    edx,edx
c000996d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009971:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009975:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009978:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000997c:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000997f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009983:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009987:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000998a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000998f:	29 c1                	sub    ecx,eax
c0009991:	31 c0                	xor    eax,eax
c0009993:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009996:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000999a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000999e:	83 c7 08             	add    edi,0x8
c00099a1:	e8 e3 fc ff ff       	call   c0009689 <fp_to_double>
c00099a6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099b2:	e8 c8 fc ff ff       	call   c000967f <fp_to_int>
c00099b7:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099ba:	52                   	push   edx
c00099bb:	52                   	push   edx
c00099bc:	51                   	push   ecx
c00099bd:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099c1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099c5:	e8 9e b3 01 00       	call   c0024d68 <__subsf3>
c00099ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00099cd:	e8 75 ca 01 00       	call   c0026447 <__extendsfdf2>
c00099d2:	83 c4 10             	add    esp,0x10
c00099d5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099d9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099e5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099e9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099ed:	e8 5e c0 01 00       	call   c0025a50 <__muldf3>
c00099f2:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00099f6:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00099fa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099fd:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a01:	e8 41 ca 01 00       	call   c0026447 <__extendsfdf2>
c0009a06:	83 c4 10             	add    esp,0x10
c0009a09:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a0d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a11:	52                   	push   edx
c0009a12:	50                   	push   eax
c0009a13:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a1b:	e8 b3 b9 01 00       	call   c00253d3 <__adddf3>
c0009a20:	59                   	pop    ecx
c0009a21:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a25:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a29:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a2f:	e8 13 ca 01 00       	call   c0026447 <__extendsfdf2>
c0009a34:	83 c4 10             	add    esp,0x10
c0009a37:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a3b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a3f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a4f:	e8 fc bf 01 00       	call   c0025a50 <__muldf3>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a5b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a5f:	52                   	push   edx
c0009a60:	50                   	push   eax
c0009a61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a69:	e8 65 b9 01 00       	call   c00253d3 <__adddf3>
c0009a6e:	59                   	pop    ecx
c0009a6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a73:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a77:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a7d:	e8 c5 c9 01 00       	call   c0026447 <__extendsfdf2>
c0009a82:	83 c4 10             	add    esp,0x10
c0009a85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a89:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a91:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a99:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a9d:	e8 ae bf 01 00       	call   c0025a50 <__muldf3>
c0009aa2:	83 c4 10             	add    esp,0x10
c0009aa5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009aa9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009aad:	52                   	push   edx
c0009aae:	50                   	push   eax
c0009aaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab7:	e8 17 b9 01 00       	call   c00253d3 <__adddf3>
c0009abc:	83 c4 10             	add    esp,0x10
c0009abf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ac7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009acb:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009acf:	0f 89 c5 fe ff ff    	jns    c000999a <calc_output_stereo+0x81>
c0009ad5:	29 e9                	sub    ecx,ebp
c0009ad7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009adb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009adf:	29 c8                	sub    eax,ecx
c0009ae1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009ae9:	99                   	cdq    
c0009aea:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009aee:	31 d2                	xor    edx,edx
c0009af0:	0f af f8             	imul   edi,eax
c0009af3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009af7:	40                   	inc    eax
c0009af8:	01 cf                	add    edi,ecx
c0009afa:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009aff:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b03:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b0b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b0e:	31 c0                	xor    eax,eax
c0009b10:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b14:	89 f8                	mov    eax,edi
c0009b16:	83 eb 08             	sub    ebx,0x8
c0009b19:	e8 6b fb ff ff       	call   c0009689 <fp_to_double>
c0009b1e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b26:	89 f8                	mov    eax,edi
c0009b28:	e8 52 fb ff ff       	call   c000967f <fp_to_int>
c0009b2d:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b30:	52                   	push   edx
c0009b31:	52                   	push   edx
c0009b32:	55                   	push   ebp
c0009b33:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b37:	e8 2c b2 01 00       	call   c0024d68 <__subsf3>
c0009b3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b3f:	e8 03 c9 01 00       	call   c0026447 <__extendsfdf2>
c0009b44:	83 c4 10             	add    esp,0x10
c0009b47:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b4b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b5f:	e8 ec be 01 00       	call   c0025a50 <__muldf3>
c0009b64:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b67:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b6b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b6f:	e8 d3 c8 01 00       	call   c0026447 <__extendsfdf2>
c0009b74:	83 c4 10             	add    esp,0x10
c0009b77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b7b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b7f:	52                   	push   edx
c0009b80:	50                   	push   eax
c0009b81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b89:	e8 45 b8 01 00       	call   c00253d3 <__adddf3>
c0009b8e:	59                   	pop    ecx
c0009b8f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009b93:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009b97:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009b9d:	e8 a5 c8 01 00       	call   c0026447 <__extendsfdf2>
c0009ba2:	83 c4 10             	add    esp,0x10
c0009ba5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ba9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bb9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bbd:	e8 8e be 01 00       	call   c0025a50 <__muldf3>
c0009bc2:	83 c4 10             	add    esp,0x10
c0009bc5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bcd:	52                   	push   edx
c0009bce:	50                   	push   eax
c0009bcf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009bd7:	e8 f7 b7 01 00       	call   c00253d3 <__adddf3>
c0009bdc:	5d                   	pop    ebp
c0009bdd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009be1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009be5:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009beb:	e8 57 c8 01 00       	call   c0026447 <__extendsfdf2>
c0009bf0:	83 c4 10             	add    esp,0x10
c0009bf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c0b:	e8 40 be 01 00       	call   c0025a50 <__muldf3>
c0009c10:	83 c4 10             	add    esp,0x10
c0009c13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c1b:	52                   	push   edx
c0009c1c:	50                   	push   eax
c0009c1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c25:	e8 a9 b7 01 00       	call   c00253d3 <__adddf3>
c0009c2a:	83 c4 10             	add    esp,0x10
c0009c2d:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c39:	85 ff                	test   edi,edi
c0009c3b:	0f 8f d3 fe ff ff    	jg     c0009b14 <calc_output_stereo+0x1fb>
c0009c41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c51:	e8 7d b7 01 00       	call   c00253d3 <__adddf3>
c0009c56:	83 c4 10             	add    esp,0x10
c0009c59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c65:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c71:	e8 da bd 01 00       	call   c0025a50 <__muldf3>
c0009c76:	59                   	pop    ecx
c0009c77:	5b                   	pop    ebx
c0009c78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c88:	e8 96 c6 01 00       	call   c0026323 <__truncdfsf2>
c0009c8d:	83 c4 10             	add    esp,0x10
c0009c90:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009c97:	89 03                	mov    DWORD PTR [ebx],eax
c0009c99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009c9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ca9:	e8 25 b7 01 00       	call   c00253d3 <__adddf3>
c0009cae:	83 c4 10             	add    esp,0x10
c0009cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cb5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cb9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cbd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cc9:	e8 82 bd 01 00       	call   c0025a50 <__muldf3>
c0009cce:	5e                   	pop    esi
c0009ccf:	5f                   	pop    edi
c0009cd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ce0:	e8 3e c6 01 00       	call   c0026323 <__truncdfsf2>
c0009ce5:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cec:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cef:	83 c4 7c             	add    esp,0x7c
c0009cf2:	5b                   	pop    ebx
c0009cf3:	5e                   	pop    esi
c0009cf4:	5f                   	pop    edi
c0009cf5:	5d                   	pop    ebp
c0009cf6:	c3                   	ret    

c0009cf7 <calc_output_quad>:
c0009cf7:	55                   	push   ebp
c0009cf8:	57                   	push   edi
c0009cf9:	56                   	push   esi
c0009cfa:	89 c6                	mov    esi,eax
c0009cfc:	53                   	push   ebx
c0009cfd:	83 ec 7c             	sub    esp,0x7c
c0009d00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d04:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d08:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d0f:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d21:	e8 55 f9 ff ff       	call   c000967b <int_to_fp>
c0009d26:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d29:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d2c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d30:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d34:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d38:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d3c:	99                   	cdq    
c0009d3d:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d41:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d45:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d48:	31 d2                	xor    edx,edx
c0009d4a:	0f af d8             	imul   ebx,eax
c0009d4d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d55:	0f af c7             	imul   eax,edi
c0009d58:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d5c:	29 c1                	sub    ecx,eax
c0009d5e:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d66:	31 c0                	xor    eax,eax
c0009d68:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d6b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d77:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d7b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d7f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d83:	89 d8                	mov    eax,ebx
c0009d85:	83 c7 10             	add    edi,0x10
c0009d88:	e8 fc f8 ff ff       	call   c0009689 <fp_to_double>
c0009d8d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d95:	89 d8                	mov    eax,ebx
c0009d97:	e8 e3 f8 ff ff       	call   c000967f <fp_to_int>
c0009d9c:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009da0:	52                   	push   edx
c0009da1:	52                   	push   edx
c0009da2:	51                   	push   ecx
c0009da3:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009da7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dab:	e8 b8 af 01 00       	call   c0024d68 <__subsf3>
c0009db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009db3:	e8 8f c6 01 00       	call   c0026447 <__extendsfdf2>
c0009db8:	83 c4 10             	add    esp,0x10
c0009dbb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dbf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dcb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dcf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dd3:	e8 78 bc 01 00       	call   c0025a50 <__muldf3>
c0009dd8:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009ddc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009de0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009de7:	e8 5b c6 01 00       	call   c0026447 <__extendsfdf2>
c0009dec:	83 c4 10             	add    esp,0x10
c0009def:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009df3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009df7:	52                   	push   edx
c0009df8:	50                   	push   eax
c0009df9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e01:	e8 cd b5 01 00       	call   c00253d3 <__adddf3>
c0009e06:	59                   	pop    ecx
c0009e07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0f:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e15:	e8 2d c6 01 00       	call   c0026447 <__extendsfdf2>
c0009e1a:	83 c4 10             	add    esp,0x10
c0009e1d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e21:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e2d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e31:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e35:	e8 16 bc 01 00       	call   c0025a50 <__muldf3>
c0009e3a:	83 c4 10             	add    esp,0x10
c0009e3d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e41:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e45:	52                   	push   edx
c0009e46:	50                   	push   eax
c0009e47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e4f:	e8 7f b5 01 00       	call   c00253d3 <__adddf3>
c0009e54:	59                   	pop    ecx
c0009e55:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e59:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e5d:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e63:	e8 df c5 01 00       	call   c0026447 <__extendsfdf2>
c0009e68:	83 c4 10             	add    esp,0x10
c0009e6b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e6f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e7b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e83:	e8 c8 bb 01 00       	call   c0025a50 <__muldf3>
c0009e88:	83 c4 10             	add    esp,0x10
c0009e8b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e8f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e93:	52                   	push   edx
c0009e94:	50                   	push   eax
c0009e95:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e9d:	e8 31 b5 01 00       	call   c00253d3 <__adddf3>
c0009ea2:	59                   	pop    ecx
c0009ea3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009ea7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eab:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009eb1:	e8 91 c5 01 00       	call   c0026447 <__extendsfdf2>
c0009eb6:	83 c4 10             	add    esp,0x10
c0009eb9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ed1:	e8 7a bb 01 00       	call   c0025a50 <__muldf3>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009edd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ee1:	52                   	push   edx
c0009ee2:	50                   	push   eax
c0009ee3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ee7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009eeb:	e8 e3 b4 01 00       	call   c00253d3 <__adddf3>
c0009ef0:	59                   	pop    ecx
c0009ef1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ef5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ef9:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009eff:	e8 43 c5 01 00       	call   c0026447 <__extendsfdf2>
c0009f04:	83 c4 10             	add    esp,0x10
c0009f07:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f1f:	e8 2c bb 01 00       	call   c0025a50 <__muldf3>
c0009f24:	83 c4 10             	add    esp,0x10
c0009f27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f2f:	52                   	push   edx
c0009f30:	50                   	push   eax
c0009f31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f39:	e8 95 b4 01 00       	call   c00253d3 <__adddf3>
c0009f3e:	83 c4 10             	add    esp,0x10
c0009f41:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f45:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f49:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f4d:	0f 89 30 fe ff ff    	jns    c0009d83 <calc_output_quad+0x8c>
c0009f53:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f5b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f5f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f63:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f6b:	29 c8                	sub    eax,ecx
c0009f6d:	99                   	cdq    
c0009f6e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f72:	31 d2                	xor    edx,edx
c0009f74:	0f af d8             	imul   ebx,eax
c0009f77:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f7b:	40                   	inc    eax
c0009f7c:	01 cb                	add    ebx,ecx
c0009f7e:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f83:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f87:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f8b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f8f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009f92:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009f9a:	31 c0                	xor    eax,eax
c0009f9c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fa0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fa4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 ee 10             	sub    esi,0x10
c0009fad:	e8 d7 f6 ff ff       	call   c0009689 <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 be f6 ff ff       	call   c000967f <fp_to_int>
c0009fc1:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	57                   	push   edi
c0009fc8:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fcc:	e8 97 ad 01 00       	call   c0024d68 <__subsf3>
c0009fd1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd4:	e8 6e c4 01 00       	call   c0026447 <__extendsfdf2>
c0009fd9:	83 c4 10             	add    esp,0x10
c0009fdc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	e8 57 ba 01 00       	call   c0025a50 <__muldf3>
c0009ff9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ffc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a000:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a004:	e8 3e c4 01 00       	call   c0026447 <__extendsfdf2>
c000a009:	83 c4 10             	add    esp,0x10
c000a00c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a010:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a014:	52                   	push   edx
c000a015:	50                   	push   eax
c000a016:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a01e:	e8 b0 b3 01 00       	call   c00253d3 <__adddf3>
c000a023:	59                   	pop    ecx
c000a024:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a028:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a02c:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a032:	e8 10 c4 01 00       	call   c0026447 <__extendsfdf2>
c000a037:	83 c4 10             	add    esp,0x10
c000a03a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a03e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a04e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a052:	e8 f9 b9 01 00       	call   c0025a50 <__muldf3>
c000a057:	83 c4 10             	add    esp,0x10
c000a05a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a062:	52                   	push   edx
c000a063:	50                   	push   eax
c000a064:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a068:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a06c:	e8 62 b3 01 00       	call   c00253d3 <__adddf3>
c000a071:	5f                   	pop    edi
c000a072:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a076:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a07a:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a080:	e8 c2 c3 01 00       	call   c0026447 <__extendsfdf2>
c000a085:	83 c4 10             	add    esp,0x10
c000a088:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a098:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a0:	e8 ab b9 01 00       	call   c0025a50 <__muldf3>
c000a0a5:	83 c4 10             	add    esp,0x10
c000a0a8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ac:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0b6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0ba:	e8 14 b3 01 00       	call   c00253d3 <__adddf3>
c000a0bf:	59                   	pop    ecx
c000a0c0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0c4:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0c8:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0ce:	e8 74 c3 01 00       	call   c0026447 <__extendsfdf2>
c000a0d3:	83 c4 10             	add    esp,0x10
c000a0d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ea:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ee:	e8 5d b9 01 00       	call   c0025a50 <__muldf3>
c000a0f3:	83 c4 10             	add    esp,0x10
c000a0f6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fa:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0fe:	52                   	push   edx
c000a0ff:	50                   	push   eax
c000a100:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a104:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a108:	e8 c6 b2 01 00       	call   c00253d3 <__adddf3>
c000a10d:	5f                   	pop    edi
c000a10e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a112:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a116:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a11c:	e8 26 c3 01 00       	call   c0026447 <__extendsfdf2>
c000a121:	83 c4 10             	add    esp,0x10
c000a124:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a128:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a130:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a134:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a138:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a13c:	e8 0f b9 01 00       	call   c0025a50 <__muldf3>
c000a141:	83 c4 10             	add    esp,0x10
c000a144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a148:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a14c:	52                   	push   edx
c000a14d:	50                   	push   eax
c000a14e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a152:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a156:	e8 78 b2 01 00       	call   c00253d3 <__adddf3>
c000a15b:	83 c4 10             	add    esp,0x10
c000a15e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a162:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a166:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a16a:	85 db                	test   ebx,ebx
c000a16c:	0f 8f 36 fe ff ff    	jg     c0009fa8 <calc_output_quad+0x2b1>
c000a172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a17e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a182:	e8 4c b2 01 00       	call   c00253d3 <__adddf3>
c000a187:	83 c4 10             	add    esp,0x10
c000a18a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a18e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a192:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a196:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a19e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a2:	e8 a9 b8 01 00       	call   c0025a50 <__muldf3>
c000a1a7:	59                   	pop    ecx
c000a1a8:	5b                   	pop    ebx
c000a1a9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b9:	e8 65 c1 01 00       	call   c0026323 <__truncdfsf2>
c000a1be:	83 c4 10             	add    esp,0x10
c000a1c1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1c8:	89 06                	mov    DWORD PTR [esi],eax
c000a1ca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1d6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1da:	e8 f4 b1 01 00       	call   c00253d3 <__adddf3>
c000a1df:	83 c4 10             	add    esp,0x10
c000a1e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fa:	e8 51 b8 01 00       	call   c0025a50 <__muldf3>
c000a1ff:	5e                   	pop    esi
c000a200:	5f                   	pop    edi
c000a201:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a205:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a209:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a211:	e8 0d c1 01 00       	call   c0026323 <__truncdfsf2>
c000a216:	83 c4 10             	add    esp,0x10
c000a219:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a220:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a223:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a227:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a22b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a22f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a233:	e8 9b b1 01 00       	call   c00253d3 <__adddf3>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a23f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a243:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a24f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a253:	e8 f8 b7 01 00       	call   c0025a50 <__muldf3>
c000a258:	5d                   	pop    ebp
c000a259:	59                   	pop    ecx
c000a25a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a25e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26a:	e8 b4 c0 01 00       	call   c0026323 <__truncdfsf2>
c000a26f:	83 c4 10             	add    esp,0x10
c000a272:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a279:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a27c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a280:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a284:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a288:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28c:	e8 42 b1 01 00       	call   c00253d3 <__adddf3>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a298:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a29c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ac:	e8 9f b7 01 00       	call   c0025a50 <__muldf3>
c000a2b1:	5b                   	pop    ebx
c000a2b2:	5e                   	pop    esi
c000a2b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c3:	e8 5b c0 01 00       	call   c0026323 <__truncdfsf2>
c000a2c8:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2cf:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2d2:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2d8:	5b                   	pop    ebx
c000a2d9:	5e                   	pop    esi
c000a2da:	5f                   	pop    edi
c000a2db:	5d                   	pop    ebp
c000a2dc:	c3                   	ret    

c000a2dd <calc_output_hex>:
c000a2dd:	55                   	push   ebp
c000a2de:	89 cd                	mov    ebp,ecx
c000a2e0:	57                   	push   edi
c000a2e1:	56                   	push   esi
c000a2e2:	53                   	push   ebx
c000a2e3:	89 c3                	mov    ebx,eax
c000a2e5:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2eb:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2ee:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a2f5:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a2fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a300:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a304:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a307:	e8 6f f3 ff ff       	call   c000967b <int_to_fp>
c000a30c:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a30f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a313:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a316:	29 c8                	sub    eax,ecx
c000a318:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a31c:	99                   	cdq    
c000a31d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a325:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a328:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a330:	0f af f8             	imul   edi,eax
c000a333:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a336:	01 cf                	add    edi,ecx
c000a338:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a33c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a33f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a343:	0f af c2             	imul   eax,edx
c000a346:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a34a:	29 c1                	sub    ecx,eax
c000a34c:	31 d2                	xor    edx,edx
c000a34e:	31 c0                	xor    eax,eax
c000a350:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a357:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a35b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a35f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a363:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a367:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a36b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a36f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a373:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a377:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a37b:	89 f8                	mov    eax,edi
c000a37d:	e8 07 f3 ff ff       	call   c0009689 <fp_to_double>
c000a382:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a386:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 ee f2 ff ff       	call   c000967f <fp_to_int>
c000a391:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a395:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a398:	52                   	push   edx
c000a399:	52                   	push   edx
c000a39a:	51                   	push   ecx
c000a39b:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a39f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3a6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3aa:	e8 b9 a9 01 00       	call   c0024d68 <__subsf3>
c000a3af:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b2:	e8 90 c0 01 00       	call   c0026447 <__extendsfdf2>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3be:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3ca:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3ce:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3d2:	e8 79 b6 01 00       	call   c0025a50 <__muldf3>
c000a3d7:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3e6:	e8 5c c0 01 00       	call   c0026447 <__extendsfdf2>
c000a3eb:	83 c4 10             	add    esp,0x10
c000a3ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3f6:	52                   	push   edx
c000a3f7:	50                   	push   eax
c000a3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a400:	e8 ce af 01 00       	call   c00253d3 <__adddf3>
c000a405:	59                   	pop    ecx
c000a406:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a40a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a40e:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a414:	e8 2e c0 01 00       	call   c0026447 <__extendsfdf2>
c000a419:	83 c4 10             	add    esp,0x10
c000a41c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a420:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a430:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a434:	e8 17 b6 01 00       	call   c0025a50 <__muldf3>
c000a439:	83 c4 10             	add    esp,0x10
c000a43c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a440:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a444:	52                   	push   edx
c000a445:	50                   	push   eax
c000a446:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a44e:	e8 80 af 01 00       	call   c00253d3 <__adddf3>
c000a453:	59                   	pop    ecx
c000a454:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a458:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a45c:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a462:	e8 e0 bf 01 00       	call   c0026447 <__extendsfdf2>
c000a467:	83 c4 10             	add    esp,0x10
c000a46a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a46e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a472:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a476:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a482:	e8 c9 b5 01 00       	call   c0025a50 <__muldf3>
c000a487:	83 c4 10             	add    esp,0x10
c000a48a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a48e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a492:	52                   	push   edx
c000a493:	50                   	push   eax
c000a494:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a498:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a49c:	e8 32 af 01 00       	call   c00253d3 <__adddf3>
c000a4a1:	59                   	pop    ecx
c000a4a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4a6:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4aa:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4b0:	e8 92 bf 01 00       	call   c0026447 <__extendsfdf2>
c000a4b5:	83 c4 10             	add    esp,0x10
c000a4b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4cc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4d0:	e8 7b b5 01 00       	call   c0025a50 <__muldf3>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4dc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4e0:	52                   	push   edx
c000a4e1:	50                   	push   eax
c000a4e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4ea:	e8 e4 ae 01 00       	call   c00253d3 <__adddf3>
c000a4ef:	59                   	pop    ecx
c000a4f0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a4f4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a4f8:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a4fe:	e8 44 bf 01 00       	call   c0026447 <__extendsfdf2>
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a50e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a512:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a516:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a51e:	e8 2d b5 01 00       	call   c0025a50 <__muldf3>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a52a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a52e:	52                   	push   edx
c000a52f:	50                   	push   eax
c000a530:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a534:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a538:	e8 96 ae 01 00       	call   c00253d3 <__adddf3>
c000a53d:	59                   	pop    ecx
c000a53e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a542:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a546:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a54c:	e8 f6 be 01 00       	call   c0026447 <__extendsfdf2>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a558:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a560:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a564:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a568:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a56c:	e8 df b4 01 00       	call   c0025a50 <__muldf3>
c000a571:	83 c4 10             	add    esp,0x10
c000a574:	83 c6 18             	add    esi,0x18
c000a577:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a57b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a57f:	52                   	push   edx
c000a580:	50                   	push   eax
c000a581:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a585:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a589:	e8 45 ae 01 00       	call   c00253d3 <__adddf3>
c000a58e:	59                   	pop    ecx
c000a58f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a593:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a597:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a59d:	e8 a5 be 01 00       	call   c0026447 <__extendsfdf2>
c000a5a2:	83 c4 10             	add    esp,0x10
c000a5a5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5bd:	e8 8e b4 01 00       	call   c0025a50 <__muldf3>
c000a5c2:	83 c4 10             	add    esp,0x10
c000a5c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5cd:	52                   	push   edx
c000a5ce:	50                   	push   eax
c000a5cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5d7:	e8 f7 ad 01 00       	call   c00253d3 <__adddf3>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5e3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5e7:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5ea:	0f 89 8b fd ff ff    	jns    c000a37b <calc_output_hex+0x9e>
c000a5f0:	31 f6                	xor    esi,esi
c000a5f2:	31 ff                	xor    edi,edi
c000a5f4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a5f8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a5fb:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a5ff:	29 e9                	sub    ecx,ebp
c000a601:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a605:	29 c8                	sub    eax,ecx
c000a607:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a60a:	99                   	cdq    
c000a60b:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a60f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a612:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a616:	0f af e8             	imul   ebp,eax
c000a619:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a61d:	40                   	inc    eax
c000a61e:	01 cd                	add    ebp,ecx
c000a620:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a625:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a629:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a62d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a631:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a634:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a638:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a63c:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a640:	89 e8                	mov    eax,ebp
c000a642:	e8 42 f0 ff ff       	call   c0009689 <fp_to_double>
c000a647:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 29 f0 ff ff       	call   c000967f <fp_to_int>
c000a656:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65a:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a65d:	52                   	push   edx
c000a65e:	52                   	push   edx
c000a65f:	51                   	push   ecx
c000a660:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a667:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a66e:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a672:	e8 f1 a6 01 00       	call   c0024d68 <__subsf3>
c000a677:	89 04 24             	mov    DWORD PTR [esp],eax
c000a67a:	e8 c8 bd 01 00       	call   c0026447 <__extendsfdf2>
c000a67f:	83 c4 10             	add    esp,0x10
c000a682:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a686:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a692:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a696:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a69a:	e8 b1 b3 01 00       	call   c0025a50 <__muldf3>
c000a69f:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6aa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6b1:	e8 91 bd 01 00       	call   c0026447 <__extendsfdf2>
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6bd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6c1:	52                   	push   edx
c000a6c2:	50                   	push   eax
c000a6c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6cb:	e8 03 ad 01 00       	call   c00253d3 <__adddf3>
c000a6d0:	59                   	pop    ecx
c000a6d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6d5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6d9:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6df:	e8 63 bd 01 00       	call   c0026447 <__extendsfdf2>
c000a6e4:	83 c4 10             	add    esp,0x10
c000a6e7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6eb:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6fb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6ff:	e8 4c b3 01 00       	call   c0025a50 <__muldf3>
c000a704:	83 c4 10             	add    esp,0x10
c000a707:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a70b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a70f:	52                   	push   edx
c000a710:	50                   	push   eax
c000a711:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a715:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a719:	e8 b5 ac 01 00       	call   c00253d3 <__adddf3>
c000a71e:	59                   	pop    ecx
c000a71f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a723:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a727:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a72d:	e8 15 bd 01 00       	call   c0026447 <__extendsfdf2>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a739:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a745:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a749:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a74d:	e8 fe b2 01 00       	call   c0025a50 <__muldf3>
c000a752:	83 c4 10             	add    esp,0x10
c000a755:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a759:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a75d:	52                   	push   edx
c000a75e:	50                   	push   eax
c000a75f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a763:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a767:	e8 67 ac 01 00       	call   c00253d3 <__adddf3>
c000a76c:	59                   	pop    ecx
c000a76d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a771:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a775:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a77b:	e8 c7 bc 01 00       	call   c0026447 <__extendsfdf2>
c000a780:	83 c4 10             	add    esp,0x10
c000a783:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a787:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a793:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a797:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a79b:	e8 b0 b2 01 00       	call   c0025a50 <__muldf3>
c000a7a0:	83 c4 10             	add    esp,0x10
c000a7a3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ab:	52                   	push   edx
c000a7ac:	50                   	push   eax
c000a7ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b5:	e8 19 ac 01 00       	call   c00253d3 <__adddf3>
c000a7ba:	59                   	pop    ecx
c000a7bb:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7bf:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7c3:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7c9:	e8 79 bc 01 00       	call   c0026447 <__extendsfdf2>
c000a7ce:	83 c4 10             	add    esp,0x10
c000a7d1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e9:	e8 62 b2 01 00       	call   c0025a50 <__muldf3>
c000a7ee:	83 c4 10             	add    esp,0x10
c000a7f1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7f5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f9:	52                   	push   edx
c000a7fa:	50                   	push   eax
c000a7fb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a7ff:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a803:	e8 cb ab 01 00       	call   c00253d3 <__adddf3>
c000a808:	59                   	pop    ecx
c000a809:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a80d:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a811:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a817:	e8 2b bc 01 00       	call   c0026447 <__extendsfdf2>
c000a81c:	83 c4 10             	add    esp,0x10
c000a81f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a823:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a82f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a833:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a837:	e8 14 b2 01 00       	call   c0025a50 <__muldf3>
c000a83c:	83 c4 10             	add    esp,0x10
c000a83f:	83 eb 18             	sub    ebx,0x18
c000a842:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a846:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a84a:	52                   	push   edx
c000a84b:	50                   	push   eax
c000a84c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a850:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a854:	e8 7a ab 01 00       	call   c00253d3 <__adddf3>
c000a859:	59                   	pop    ecx
c000a85a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a85e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a862:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a868:	e8 da bb 01 00       	call   c0026447 <__extendsfdf2>
c000a86d:	83 c4 10             	add    esp,0x10
c000a870:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a874:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a87c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a880:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a884:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a888:	e8 c3 b1 01 00       	call   c0025a50 <__muldf3>
c000a88d:	83 c4 10             	add    esp,0x10
c000a890:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a894:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a898:	52                   	push   edx
c000a899:	50                   	push   eax
c000a89a:	57                   	push   edi
c000a89b:	56                   	push   esi
c000a89c:	e8 32 ab 01 00       	call   c00253d3 <__adddf3>
c000a8a1:	83 c4 10             	add    esp,0x10
c000a8a4:	89 c6                	mov    esi,eax
c000a8a6:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8a9:	89 d7                	mov    edi,edx
c000a8ab:	85 ed                	test   ebp,ebp
c000a8ad:	0f 8f 8d fd ff ff    	jg     c000a640 <calc_output_hex+0x363>
c000a8b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c3:	e8 0b ab 01 00       	call   c00253d3 <__adddf3>
c000a8c8:	83 c4 10             	add    esp,0x10
c000a8cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e2:	e8 69 b1 01 00       	call   c0025a50 <__muldf3>
c000a8e7:	59                   	pop    ecx
c000a8e8:	5b                   	pop    ebx
c000a8e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f9:	e8 25 ba 01 00       	call   c0026323 <__truncdfsf2>
c000a8fe:	83 c4 10             	add    esp,0x10
c000a901:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a908:	89 03                	mov    DWORD PTR [ebx],eax
c000a90a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a90e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a912:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a916:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a91a:	e8 b4 aa 01 00       	call   c00253d3 <__adddf3>
c000a91f:	83 c4 10             	add    esp,0x10
c000a922:	89 04 24             	mov    DWORD PTR [esp],eax
c000a925:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a931:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a935:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a939:	e8 12 b1 01 00       	call   c0025a50 <__muldf3>
c000a93e:	5d                   	pop    ebp
c000a93f:	59                   	pop    ecx
c000a940:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a944:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a948:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a94c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a950:	e8 ce b9 01 00       	call   c0026323 <__truncdfsf2>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a95f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a962:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a966:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a96a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a96e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a972:	e8 5c aa 01 00       	call   c00253d3 <__adddf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a97d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a981:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a985:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a991:	e8 ba b0 01 00       	call   c0025a50 <__muldf3>
c000a996:	5b                   	pop    ebx
c000a997:	5d                   	pop    ebp
c000a998:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a99c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a8:	e8 76 b9 01 00       	call   c0026323 <__truncdfsf2>
c000a9ad:	83 c4 10             	add    esp,0x10
c000a9b0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9b7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9ba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9ca:	e8 04 aa 01 00       	call   c00253d3 <__adddf3>
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9e9:	e8 62 b0 01 00       	call   c0025a50 <__muldf3>
c000a9ee:	59                   	pop    ecx
c000a9ef:	5b                   	pop    ebx
c000a9f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa00:	e8 1e b9 01 00       	call   c0026323 <__truncdfsf2>
c000aa05:	83 c4 10             	add    esp,0x10
c000aa08:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa0f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa16:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa22:	e8 ac a9 01 00       	call   c00253d3 <__adddf3>
c000aa27:	83 c4 10             	add    esp,0x10
c000aa2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa41:	e8 0a b0 01 00       	call   c0025a50 <__muldf3>
c000aa46:	5d                   	pop    ebp
c000aa47:	59                   	pop    ecx
c000aa48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa58:	e8 c6 b8 01 00       	call   c0026323 <__truncdfsf2>
c000aa5d:	83 c4 10             	add    esp,0x10
c000aa60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa67:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa6a:	57                   	push   edi
c000aa6b:	56                   	push   esi
c000aa6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa74:	e8 5a a9 01 00       	call   c00253d3 <__adddf3>
c000aa79:	83 c4 10             	add    esp,0x10
c000aa7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa7f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa83:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa87:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa93:	e8 b8 af 01 00       	call   c0025a50 <__muldf3>
c000aa98:	5b                   	pop    ebx
c000aa99:	5e                   	pop    esi
c000aa9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaaa:	e8 74 b8 01 00       	call   c0026323 <__truncdfsf2>
c000aaaf:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aab6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aab9:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aabf:	5b                   	pop    ebx
c000aac0:	5e                   	pop    esi
c000aac1:	5f                   	pop    edi
c000aac2:	5d                   	pop    ebp
c000aac3:	c3                   	ret    

c000aac4 <sinc_reset>:
c000aac4:	56                   	push   esi
c000aac5:	53                   	push   ebx
c000aac6:	51                   	push   ecx
c000aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aace:	85 db                	test   ebx,ebx
c000aad0:	74 59                	je     c000ab2b <sinc_reset+0x67>
c000aad2:	31 d2                	xor    edx,edx
c000aad4:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aadb:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aade:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aae1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aae8:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aaef:	31 c0                	xor    eax,eax
c000aaf1:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000aaf7:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000aafa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000aafd:	52                   	push   edx
c000aafe:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab01:	c1 e0 02             	shl    eax,0x2
c000ab04:	50                   	push   eax
c000ab05:	6a 00                	push   0x0
c000ab07:	56                   	push   esi
c000ab08:	e8 6f 5b ff ff       	call   c000067c <memset>
c000ab0d:	83 c4 0c             	add    esp,0xc
c000ab10:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab13:	c1 e0 02             	shl    eax,0x2
c000ab16:	50                   	push   eax
c000ab17:	68 aa 00 00 00       	push   0xaa
c000ab1c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab1f:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab22:	50                   	push   eax
c000ab23:	e8 54 5b ff ff       	call   c000067c <memset>
c000ab28:	83 c4 10             	add    esp,0x10
c000ab2b:	58                   	pop    eax
c000ab2c:	5b                   	pop    ebx
c000ab2d:	5e                   	pop    esi
c000ab2e:	c3                   	ret    

c000ab2f <calc_output_multi>:
c000ab2f:	55                   	push   ebp
c000ab30:	57                   	push   edi
c000ab31:	56                   	push   esi
c000ab32:	89 c6                	mov    esi,eax
c000ab34:	53                   	push   ebx
c000ab35:	83 ec 4c             	sub    esp,0x4c
c000ab38:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab3c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab40:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab44:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab48:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab50:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab54:	8d 46 44             	lea    eax,[esi+0x44]
c000ab57:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab5a:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab64:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab67:	e8 0f eb ff ff       	call   c000967b <int_to_fp>
c000ab6c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab6f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab73:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab77:	99                   	cdq    
c000ab78:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab80:	0f af d0             	imul   edx,eax
c000ab83:	0f af c3             	imul   eax,ebx
c000ab86:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab8a:	29 c1                	sub    ecx,eax
c000ab8c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab90:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ab94:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ab9b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ab9f:	57                   	push   edi
c000aba0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aba4:	6a 00                	push   0x0
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	e8 cd 5a ff ff       	call   c000067c <memset>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abb6:	89 df                	mov    edi,ebx
c000abb8:	e8 cc ea ff ff       	call   c0009689 <fp_to_double>
c000abbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abc1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc9:	e8 b1 ea ff ff       	call   c000967f <fp_to_int>
c000abce:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abd1:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abd4:	51                   	push   ecx
c000abd5:	51                   	push   ecx
c000abd6:	55                   	push   ebp
c000abd7:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abdb:	e8 88 a1 01 00       	call   c0024d68 <__subsf3>
c000abe0:	89 04 24             	mov    DWORD PTR [esp],eax
c000abe3:	e8 5f b8 01 00       	call   c0026447 <__extendsfdf2>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abef:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000abf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abf7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abfb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac03:	e8 48 ae 01 00       	call   c0025a50 <__muldf3>
c000ac08:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac13:	e8 2f b8 01 00       	call   c0026447 <__extendsfdf2>
c000ac18:	83 c4 10             	add    esp,0x10
c000ac1b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac1f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac23:	52                   	push   edx
c000ac24:	50                   	push   eax
c000ac25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2d:	e8 a1 a7 01 00       	call   c00253d3 <__adddf3>
c000ac32:	83 c4 10             	add    esp,0x10
c000ac35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac39:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac3d:	89 f8                	mov    eax,edi
c000ac3f:	b9 08 00 00 00       	mov    ecx,0x8
c000ac44:	99                   	cdq    
c000ac45:	f7 f9                	idiv   ecx
c000ac47:	4a                   	dec    edx
c000ac48:	83 fa 06             	cmp    edx,0x6
c000ac4b:	77 07                	ja     c000ac54 <calc_output_multi+0x125>
c000ac4d:	ff 24 95 04 7c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd83fc]
c000ac54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac57:	4f                   	dec    edi
c000ac58:	83 ec 0c             	sub    esp,0xc
c000ac5b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac62:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac69:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac6d:	e8 d5 b7 01 00       	call   c0026447 <__extendsfdf2>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac79:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac89:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac8d:	e8 be ad 01 00       	call   c0025a50 <__muldf3>
c000ac92:	83 c4 10             	add    esp,0x10
c000ac95:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac99:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac9d:	52                   	push   edx
c000ac9e:	50                   	push   eax
c000ac9f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aca2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aca5:	e8 29 a7 01 00       	call   c00253d3 <__adddf3>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acb0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acb6:	4f                   	dec    edi
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acc1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acc8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000accc:	e8 76 b7 01 00       	call   c0026447 <__extendsfdf2>
c000acd1:	83 c4 10             	add    esp,0x10
c000acd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ace4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ace8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acec:	e8 5f ad 01 00       	call   c0025a50 <__muldf3>
c000acf1:	83 c4 10             	add    esp,0x10
c000acf4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfc:	52                   	push   edx
c000acfd:	50                   	push   eax
c000acfe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad04:	e8 ca a6 01 00       	call   c00253d3 <__adddf3>
c000ad09:	83 c4 10             	add    esp,0x10
c000ad0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad15:	4f                   	dec    edi
c000ad16:	83 ec 0c             	sub    esp,0xc
c000ad19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad2b:	e8 17 b7 01 00       	call   c0026447 <__extendsfdf2>
c000ad30:	83 c4 10             	add    esp,0x10
c000ad33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad4b:	e8 00 ad 01 00       	call   c0025a50 <__muldf3>
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5b:	52                   	push   edx
c000ad5c:	50                   	push   eax
c000ad5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad63:	e8 6b a6 01 00       	call   c00253d3 <__adddf3>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad74:	4f                   	dec    edi
c000ad75:	83 ec 0c             	sub    esp,0xc
c000ad78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad8a:	e8 b8 b6 01 00       	call   c0026447 <__extendsfdf2>
c000ad8f:	83 c4 10             	add    esp,0x10
c000ad92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ada6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adaa:	e8 a1 ac 01 00       	call   c0025a50 <__muldf3>
c000adaf:	83 c4 10             	add    esp,0x10
c000adb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adba:	52                   	push   edx
c000adbb:	50                   	push   eax
c000adbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adc2:	e8 0c a6 01 00       	call   c00253d3 <__adddf3>
c000adc7:	83 c4 10             	add    esp,0x10
c000adca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000add0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000add3:	4f                   	dec    edi
c000add4:	83 ec 0c             	sub    esp,0xc
c000add7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ade5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ade9:	e8 59 b6 01 00       	call   c0026447 <__extendsfdf2>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adf5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae09:	e8 42 ac 01 00       	call   c0025a50 <__muldf3>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae15:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae19:	52                   	push   edx
c000ae1a:	50                   	push   eax
c000ae1b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae1e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae21:	e8 ad a5 01 00       	call   c00253d3 <__adddf3>
c000ae26:	83 c4 10             	add    esp,0x10
c000ae29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae2c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae2f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae32:	4f                   	dec    edi
c000ae33:	83 ec 0c             	sub    esp,0xc
c000ae36:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae3d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae44:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae48:	e8 fa b5 01 00       	call   c0026447 <__extendsfdf2>
c000ae4d:	83 c4 10             	add    esp,0x10
c000ae50:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae54:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae60:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae64:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae68:	e8 e3 ab 01 00       	call   c0025a50 <__muldf3>
c000ae6d:	83 c4 10             	add    esp,0x10
c000ae70:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae74:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae78:	52                   	push   edx
c000ae79:	50                   	push   eax
c000ae7a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae7d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae80:	e8 4e a5 01 00       	call   c00253d3 <__adddf3>
c000ae85:	83 c4 10             	add    esp,0x10
c000ae88:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae8b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae8e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae91:	4f                   	dec    edi
c000ae92:	83 ec 0c             	sub    esp,0xc
c000ae95:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae9c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aea7:	e8 9b b5 01 00       	call   c0026447 <__extendsfdf2>
c000aeac:	83 c4 10             	add    esp,0x10
c000aeaf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aebf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec7:	e8 84 ab 01 00       	call   c0025a50 <__muldf3>
c000aecc:	83 c4 10             	add    esp,0x10
c000aecf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed7:	52                   	push   edx
c000aed8:	50                   	push   eax
c000aed9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aedc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aedf:	e8 ef a4 01 00       	call   c00253d3 <__adddf3>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aeed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef0:	4f                   	dec    edi
c000aef1:	83 ec 0c             	sub    esp,0xc
c000aef4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aefb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af02:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af06:	e8 3c b5 01 00       	call   c0026447 <__extendsfdf2>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af12:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af22:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af26:	e8 25 ab 01 00       	call   c0025a50 <__muldf3>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af32:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af36:	52                   	push   edx
c000af37:	50                   	push   eax
c000af38:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af3b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af3e:	e8 90 a4 01 00       	call   c00253d3 <__adddf3>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af49:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af4c:	85 ff                	test   edi,edi
c000af4e:	0f 8f e9 fc ff ff    	jg     c000ac3d <calc_output_multi+0x10e>
c000af54:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af58:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af5c:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af60:	0f 89 4c fc ff ff    	jns    c000abb2 <calc_output_multi+0x83>
c000af66:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af6e:	29 c8                	sub    eax,ecx
c000af70:	99                   	cdq    
c000af71:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af79:	0f af d0             	imul   edx,eax
c000af7c:	40                   	inc    eax
c000af7d:	01 d1                	add    ecx,edx
c000af7f:	0f af c3             	imul   eax,ebx
c000af82:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af86:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8d:	55                   	push   ebp
c000af8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000af92:	6a 00                	push   0x0
c000af94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000af98:	e8 df 56 ff ff       	call   c000067c <memset>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afa4:	e8 e0 e6 ff ff       	call   c0009689 <fp_to_double>
c000afa9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afb1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb5:	e8 c5 e6 ff ff       	call   c000967f <fp_to_int>
c000afba:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afbd:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afc0:	57                   	push   edi
c000afc1:	57                   	push   edi
c000afc2:	89 df                	mov    edi,ebx
c000afc4:	55                   	push   ebp
c000afc5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afc9:	e8 9a 9d 01 00       	call   c0024d68 <__subsf3>
c000afce:	89 04 24             	mov    DWORD PTR [esp],eax
c000afd1:	e8 71 b4 01 00       	call   c0026447 <__extendsfdf2>
c000afd6:	83 c4 10             	add    esp,0x10
c000afd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afdd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000afe1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aff1:	e8 5a aa 01 00       	call   c0025a50 <__muldf3>
c000aff6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000aff9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000affd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b001:	e8 41 b4 01 00       	call   c0026447 <__extendsfdf2>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b00d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b011:	52                   	push   edx
c000b012:	50                   	push   eax
c000b013:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b01b:	e8 b3 a3 01 00       	call   c00253d3 <__adddf3>
c000b020:	83 c4 10             	add    esp,0x10
c000b023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02b:	89 f8                	mov    eax,edi
c000b02d:	b9 08 00 00 00       	mov    ecx,0x8
c000b032:	99                   	cdq    
c000b033:	f7 f9                	idiv   ecx
c000b035:	4a                   	dec    edx
c000b036:	83 fa 06             	cmp    edx,0x6
c000b039:	77 07                	ja     c000b042 <calc_output_multi+0x513>
c000b03b:	ff 24 95 20 7c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd83e0]
c000b042:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b046:	4f                   	dec    edi
c000b047:	83 ec 0c             	sub    esp,0xc
c000b04a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b04d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b051:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b058:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b05c:	e8 e6 b3 01 00       	call   c0026447 <__extendsfdf2>
c000b061:	83 c4 10             	add    esp,0x10
c000b064:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b068:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b06c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b074:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b078:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b07c:	e8 cf a9 01 00       	call   c0025a50 <__muldf3>
c000b081:	83 c4 10             	add    esp,0x10
c000b084:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b088:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08c:	52                   	push   edx
c000b08d:	50                   	push   eax
c000b08e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b091:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b094:	e8 3a a3 01 00       	call   c00253d3 <__adddf3>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b09f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0a6:	4f                   	dec    edi
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0b1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0b8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0bc:	e8 86 b3 01 00       	call   c0026447 <__extendsfdf2>
c000b0c1:	83 c4 10             	add    esp,0x10
c000b0c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0dc:	e8 6f a9 01 00       	call   c0025a50 <__muldf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ec:	52                   	push   edx
c000b0ed:	50                   	push   eax
c000b0ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0f1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0f4:	e8 da a2 01 00       	call   c00253d3 <__adddf3>
c000b0f9:	83 c4 10             	add    esp,0x10
c000b0fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b106:	4f                   	dec    edi
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b10d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b111:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b118:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b11c:	e8 26 b3 01 00       	call   c0026447 <__extendsfdf2>
c000b121:	83 c4 10             	add    esp,0x10
c000b124:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b128:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b134:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b138:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b13c:	e8 0f a9 01 00       	call   c0025a50 <__muldf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b148:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14c:	52                   	push   edx
c000b14d:	50                   	push   eax
c000b14e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b151:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b154:	e8 7a a2 01 00       	call   c00253d3 <__adddf3>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b15f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b166:	4f                   	dec    edi
c000b167:	83 ec 0c             	sub    esp,0xc
c000b16a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b16d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b171:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b178:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b17c:	e8 c6 b2 01 00       	call   c0026447 <__extendsfdf2>
c000b181:	83 c4 10             	add    esp,0x10
c000b184:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b188:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b18c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b190:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b194:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b198:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b19c:	e8 af a8 01 00       	call   c0025a50 <__muldf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ac:	52                   	push   edx
c000b1ad:	50                   	push   eax
c000b1ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1b4:	e8 1a a2 01 00       	call   c00253d3 <__adddf3>
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1bf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1c6:	4f                   	dec    edi
c000b1c7:	83 ec 0c             	sub    esp,0xc
c000b1ca:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1d1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1d8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1dc:	e8 66 b2 01 00       	call   c0026447 <__extendsfdf2>
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1fc:	e8 4f a8 01 00       	call   c0025a50 <__muldf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b208:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20c:	52                   	push   edx
c000b20d:	50                   	push   eax
c000b20e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b211:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b214:	e8 ba a1 01 00       	call   c00253d3 <__adddf3>
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b21f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b222:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b226:	4f                   	dec    edi
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b22d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b231:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b238:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b23c:	e8 06 b2 01 00       	call   c0026447 <__extendsfdf2>
c000b241:	83 c4 10             	add    esp,0x10
c000b244:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b248:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b24c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b254:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b258:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b25c:	e8 ef a7 01 00       	call   c0025a50 <__muldf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b268:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26c:	52                   	push   edx
c000b26d:	50                   	push   eax
c000b26e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b271:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b274:	e8 5a a1 01 00       	call   c00253d3 <__adddf3>
c000b279:	83 c4 10             	add    esp,0x10
c000b27c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b27f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b286:	4f                   	dec    edi
c000b287:	83 ec 0c             	sub    esp,0xc
c000b28a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b291:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b298:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29c:	e8 a6 b1 01 00       	call   c0026447 <__extendsfdf2>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bc:	e8 8f a7 01 00       	call   c0025a50 <__muldf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cc:	52                   	push   edx
c000b2cd:	50                   	push   eax
c000b2ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d4:	e8 fa a0 01 00       	call   c00253d3 <__adddf3>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2df:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e6:	4f                   	dec    edi
c000b2e7:	83 ec 0c             	sub    esp,0xc
c000b2ea:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fc:	e8 46 b1 01 00       	call   c0026447 <__extendsfdf2>
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b308:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b318:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31c:	e8 2f a7 01 00       	call   c0025a50 <__muldf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b328:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32c:	52                   	push   edx
c000b32d:	50                   	push   eax
c000b32e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b331:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b334:	e8 9a a0 01 00       	call   c00253d3 <__adddf3>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b33f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b342:	85 ff                	test   edi,edi
c000b344:	0f 8f e1 fc ff ff    	jg     c000b02b <calc_output_multi+0x4fc>
c000b34a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b34e:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b352:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b356:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b35b:	0f 8f 3f fc ff ff    	jg     c000afa0 <calc_output_multi+0x471>
c000b361:	be 08 00 00 00       	mov    esi,0x8
c000b366:	89 d8                	mov    eax,ebx
c000b368:	99                   	cdq    
c000b369:	f7 fe                	idiv   esi
c000b36b:	4a                   	dec    edx
c000b36c:	83 fa 06             	cmp    edx,0x6
c000b36f:	77 07                	ja     c000b378 <calc_output_multi+0x849>
c000b371:	ff 24 95 3c 7c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd83c4]
c000b378:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b37c:	4b                   	dec    ebx
c000b37d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b381:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b388:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b38c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b38f:	e8 3f a0 01 00       	call   c00253d3 <__adddf3>
c000b394:	83 c4 10             	add    esp,0x10
c000b397:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b39b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b39f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3af:	e8 9c a6 01 00       	call   c0025a50 <__muldf3>
c000b3b4:	5d                   	pop    ebp
c000b3b5:	59                   	pop    ecx
c000b3b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3ba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3c6:	e8 58 af 01 00       	call   c0026323 <__truncdfsf2>
c000b3cb:	83 c4 10             	add    esp,0x10
c000b3ce:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3d2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3d9:	4b                   	dec    ebx
c000b3da:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3de:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3e5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3e9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3ec:	e8 e2 9f 01 00       	call   c00253d3 <__adddf3>
c000b3f1:	83 c4 10             	add    esp,0x10
c000b3f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b404:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b408:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40c:	e8 3f a6 01 00       	call   c0025a50 <__muldf3>
c000b411:	59                   	pop    ecx
c000b412:	5f                   	pop    edi
c000b413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b417:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b423:	e8 fb ae 01 00       	call   c0026323 <__truncdfsf2>
c000b428:	83 c4 10             	add    esp,0x10
c000b42b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b42f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b436:	4b                   	dec    ebx
c000b437:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b43b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b43e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b442:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b446:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b449:	e8 85 9f 01 00       	call   c00253d3 <__adddf3>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b455:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b461:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b469:	e8 e2 a5 01 00       	call   c0025a50 <__muldf3>
c000b46e:	5f                   	pop    edi
c000b46f:	5d                   	pop    ebp
c000b470:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b474:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b478:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b47c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b480:	e8 9e ae 01 00       	call   c0026323 <__truncdfsf2>
c000b485:	83 c4 10             	add    esp,0x10
c000b488:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b48c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b493:	4b                   	dec    ebx
c000b494:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b498:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b49b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b49f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4a6:	e8 28 9f 01 00       	call   c00253d3 <__adddf3>
c000b4ab:	83 c4 10             	add    esp,0x10
c000b4ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c6:	e8 85 a5 01 00       	call   c0025a50 <__muldf3>
c000b4cb:	5d                   	pop    ebp
c000b4cc:	59                   	pop    ecx
c000b4cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4dd:	e8 41 ae 01 00       	call   c0026323 <__truncdfsf2>
c000b4e2:	83 c4 10             	add    esp,0x10
c000b4e5:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4e9:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f0:	4b                   	dec    ebx
c000b4f1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4f5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4fc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b500:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b503:	e8 cb 9e 01 00       	call   c00253d3 <__adddf3>
c000b508:	83 c4 10             	add    esp,0x10
c000b50b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b50f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b513:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b517:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b523:	e8 28 a5 01 00       	call   c0025a50 <__muldf3>
c000b528:	59                   	pop    ecx
c000b529:	5f                   	pop    edi
c000b52a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b52e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b53a:	e8 e4 ad 01 00       	call   c0026323 <__truncdfsf2>
c000b53f:	83 c4 10             	add    esp,0x10
c000b542:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b546:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	4b                   	dec    ebx
c000b54e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b552:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b555:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b559:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b55d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b560:	e8 6e 9e 01 00       	call   c00253d3 <__adddf3>
c000b565:	83 c4 10             	add    esp,0x10
c000b568:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b56c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b580:	e8 cb a4 01 00       	call   c0025a50 <__muldf3>
c000b585:	5f                   	pop    edi
c000b586:	5d                   	pop    ebp
c000b587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b58b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b593:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b597:	e8 87 ad 01 00       	call   c0026323 <__truncdfsf2>
c000b59c:	83 c4 10             	add    esp,0x10
c000b59f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5a3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5aa:	4b                   	dec    ebx
c000b5ab:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5af:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5b6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ba:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5bd:	e8 11 9e 01 00       	call   c00253d3 <__adddf3>
c000b5c2:	83 c4 10             	add    esp,0x10
c000b5c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5dd:	e8 6e a4 01 00       	call   c0025a50 <__muldf3>
c000b5e2:	5d                   	pop    ebp
c000b5e3:	59                   	pop    ecx
c000b5e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f4:	e8 2a ad 01 00       	call   c0026323 <__truncdfsf2>
c000b5f9:	83 c4 10             	add    esp,0x10
c000b5fc:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b600:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b607:	4b                   	dec    ebx
c000b608:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b60f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b613:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b617:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61a:	e8 b4 9d 01 00       	call   c00253d3 <__adddf3>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b632:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b636:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63a:	e8 11 a4 01 00       	call   c0025a50 <__muldf3>
c000b63f:	59                   	pop    ecx
c000b640:	5f                   	pop    edi
c000b641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b645:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b651:	e8 cd ac 01 00       	call   c0026323 <__truncdfsf2>
c000b656:	83 c4 10             	add    esp,0x10
c000b659:	85 db                	test   ebx,ebx
c000b65b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b65f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b662:	0f 8f fe fc ff ff    	jg     c000b366 <calc_output_multi+0x837>
c000b668:	83 c4 4c             	add    esp,0x4c
c000b66b:	5b                   	pop    ebx
c000b66c:	5e                   	pop    esi
c000b66d:	5f                   	pop    edi
c000b66e:	5d                   	pop    ebp
c000b66f:	c3                   	ret    

c000b670 <double_to_fp>:
c000b670:	83 ec 0c             	sub    esp,0xc
c000b673:	68 00 00 b0 40       	push   0x40b00000
c000b678:	6a 00                	push   0x0
c000b67a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	e8 c9 a3 01 00       	call   c0025a50 <__muldf3>
c000b687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b68b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b68f:	83 c4 1c             	add    esp,0x1c
c000b692:	e9 39 ae 01 00       	jmp    c00264d0 <lrint>

c000b697 <prepare_data>:
c000b697:	55                   	push   ebp
c000b698:	57                   	push   edi
c000b699:	56                   	push   esi
c000b69a:	53                   	push   ebx
c000b69b:	83 ec 1c             	sub    esp,0x1c
c000b69e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6a2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6a6:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6aa:	0f 89 57 01 00 00    	jns    c000b807 <prepare_data+0x170>
c000b6b0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6b3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6b6:	85 d2                	test   edx,edx
c000b6b8:	75 0d                	jne    c000b6c7 <prepare_data+0x30>
c000b6ba:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6bd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6c0:	29 d0                	sub    eax,edx
c000b6c2:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6c5:	eb 44                	jmp    c000b70b <prepare_data+0x74>
c000b6c7:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6ca:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6cd:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6d0:	39 c1                	cmp    ecx,eax
c000b6d2:	7d 04                	jge    c000b6d8 <prepare_data+0x41>
c000b6d4:	29 d0                	sub    eax,edx
c000b6d6:	eb 2d                	jmp    c000b705 <prepare_data+0x6e>
c000b6d8:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6de:	29 d7                	sub    edi,edx
c000b6e0:	01 f7                	add    edi,esi
c000b6e2:	51                   	push   ecx
c000b6e3:	29 f2                	sub    edx,esi
c000b6e5:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6ec:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6ef:	51                   	push   ecx
c000b6f0:	52                   	push   edx
c000b6f1:	50                   	push   eax
c000b6f2:	e8 17 4f ff ff       	call   c000060e <memmove>
c000b6f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fa:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6fd:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b700:	29 f0                	sub    eax,esi
c000b702:	83 c4 10             	add    esp,0x10
c000b705:	29 f0                	sub    eax,esi
c000b707:	79 02                	jns    c000b70b <prepare_data+0x74>
c000b709:	31 c0                	xor    eax,eax
c000b70b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b70e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b711:	29 ef                	sub    edi,ebp
c000b713:	39 c7                	cmp    edi,eax
c000b715:	7e 02                	jle    c000b719 <prepare_data+0x82>
c000b717:	89 c7                	mov    edi,eax
c000b719:	89 f8                	mov    eax,edi
c000b71b:	99                   	cdq    
c000b71c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b71f:	b8 15 00 00 00       	mov    eax,0x15
c000b724:	29 d7                	sub    edi,edx
c000b726:	0f 88 dd 00 00 00    	js     c000b809 <prepare_data+0x172>
c000b72c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b72f:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b732:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b735:	0f 8f ce 00 00 00    	jg     c000b809 <prepare_data+0x172>
c000b73b:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b741:	50                   	push   eax
c000b742:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b749:	50                   	push   eax
c000b74a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b74e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b750:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b753:	50                   	push   eax
c000b754:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b757:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b75b:	50                   	push   eax
c000b75c:	e8 e5 4e ff ff       	call   c0000646 <memcpy>
c000b761:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b764:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b767:	01 fd                	add    ebp,edi
c000b769:	01 f9                	add    ecx,edi
c000b76b:	83 c4 10             	add    esp,0x10
c000b76e:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b771:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b774:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b77b:	0f 85 86 00 00 00    	jne    c000b807 <prepare_data+0x170>
c000b781:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b784:	89 e8                	mov    eax,ebp
c000b786:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b789:	29 c8                	sub    eax,ecx
c000b78b:	39 f8                	cmp    eax,edi
c000b78d:	7d 78                	jge    c000b807 <prepare_data+0x170>
c000b78f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b793:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b797:	74 6e                	je     c000b807 <prepare_data+0x170>
c000b799:	8d 7e 04             	lea    edi,[esi+0x4]
c000b79c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7a0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7a3:	29 ef                	sub    edi,ebp
c000b7a5:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7a9:	7c 29                	jl     c000b7d4 <prepare_data+0x13d>
c000b7ab:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7ae:	29 f1                	sub    ecx,esi
c000b7b0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7b7:	55                   	push   ebp
c000b7b8:	50                   	push   eax
c000b7b9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7bc:	50                   	push   eax
c000b7bd:	52                   	push   edx
c000b7be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7c2:	e8 47 4e ff ff       	call   c000060e <memmove>
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7cd:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7d4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7d7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7da:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7dd:	83 c6 05             	add    esi,0x5
c000b7e0:	78 07                	js     c000b7e9 <prepare_data+0x152>
c000b7e2:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7e5:	39 cf                	cmp    edi,ecx
c000b7e7:	7e 04                	jle    c000b7ed <prepare_data+0x156>
c000b7e9:	89 ce                	mov    esi,ecx
c000b7eb:	29 c6                	sub    esi,eax
c000b7ed:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7f0:	51                   	push   ecx
c000b7f1:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b7f8:	51                   	push   ecx
c000b7f9:	6a 00                	push   0x0
c000b7fb:	50                   	push   eax
c000b7fc:	e8 7b 4e ff ff       	call   c000067c <memset>
c000b801:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b804:	83 c4 10             	add    esp,0x10
c000b807:	31 c0                	xor    eax,eax
c000b809:	83 c4 1c             	add    esp,0x1c
c000b80c:	5b                   	pop    ebx
c000b80d:	5e                   	pop    esi
c000b80e:	5f                   	pop    edi
c000b80f:	5d                   	pop    ebp
c000b810:	c3                   	ret    

c000b811 <sinc_multichan_vari_process>:
c000b811:	55                   	push   ebp
c000b812:	ba 05 00 00 00       	mov    edx,0x5
c000b817:	57                   	push   edi
c000b818:	56                   	push   esi
c000b819:	53                   	push   ebx
c000b81a:	83 ec 4c             	sub    esp,0x4c
c000b81d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b821:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b825:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b828:	85 db                	test   ebx,ebx
c000b82a:	0f 84 9b 06 00 00    	je     c000becb <sinc_multichan_vari_process+0x6ba>
c000b830:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b833:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b836:	0f af c5             	imul   eax,ebp
c000b839:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b83c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b83f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b846:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b84d:	0f af c5             	imul   eax,ebp
c000b850:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b853:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b856:	8b 06                	mov    eax,DWORD PTR [esi]
c000b858:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b85c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b860:	68 00 00 70 3f       	push   0x3f700000
c000b865:	6a 00                	push   0x0
c000b867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86f:	e8 ab aa 01 00       	call   c002631f <__ltdf2>
c000b874:	83 c4 10             	add    esp,0x10
c000b877:	ba 16 00 00 00       	mov    edx,0x16
c000b87c:	85 c0                	test   eax,eax
c000b87e:	0f 88 47 06 00 00    	js     c000becb <sinc_multichan_vari_process+0x6ba>
c000b884:	68 00 00 70 40       	push   0x40700000
c000b889:	6a 00                	push   0x0
c000b88b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b893:	e8 69 aa 01 00       	call   c0026301 <__gtdf2>
c000b898:	83 c4 10             	add    esp,0x10
c000b89b:	ba 16 00 00 00       	mov    edx,0x16
c000b8a0:	85 c0                	test   eax,eax
c000b8a2:	0f 8f 23 06 00 00    	jg     c000becb <sinc_multichan_vari_process+0x6ba>
c000b8a8:	83 ec 0c             	sub    esp,0xc
c000b8ab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8ae:	e8 00 a8 01 00       	call   c00260b3 <__floatsidf>
c000b8b3:	83 c4 10             	add    esp,0x10
c000b8b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8be:	68 00 00 00 40       	push   0x40000000
c000b8c3:	6a 00                	push   0x0
c000b8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8cd:	e8 01 9b 01 00       	call   c00253d3 <__adddf3>
c000b8d2:	59                   	pop    ecx
c000b8d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8d7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8db:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8de:	e8 d0 a7 01 00       	call   c00260b3 <__floatsidf>
c000b8e3:	83 c4 10             	add    esp,0x10
c000b8e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8ee:	52                   	push   edx
c000b8ef:	50                   	push   eax
c000b8f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8f8:	e8 37 a4 01 00       	call   c0025d34 <__divdf3>
c000b8fd:	83 c4 10             	add    esp,0x10
c000b900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b904:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b908:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b90b:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b90e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b912:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b916:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b91e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b922:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b926:	e8 d6 a9 01 00       	call   c0026301 <__gtdf2>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	85 c0                	test   eax,eax
c000b930:	7e 2d                	jle    c000b95f <sinc_multichan_vari_process+0x14e>
c000b932:	68 00 00 f0 3f       	push   0x3ff00000
c000b937:	6a 00                	push   0x0
c000b939:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b941:	e8 d9 a9 01 00       	call   c002631f <__ltdf2>
c000b946:	83 c4 10             	add    esp,0x10
c000b949:	85 c0                	test   eax,eax
c000b94b:	79 4d                	jns    c000b99a <sinc_multichan_vari_process+0x189>
c000b94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b951:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b955:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b959:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95d:	eb 1b                	jmp    c000b97a <sinc_multichan_vari_process+0x169>
c000b95f:	68 00 00 f0 3f       	push   0x3ff00000
c000b964:	6a 00                	push   0x0
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 ac a9 01 00       	call   c002631f <__ltdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	79 20                	jns    c000b99a <sinc_multichan_vari_process+0x189>
c000b97a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b97e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b982:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b986:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b98a:	e8 a5 a3 01 00       	call   c0025d34 <__divdf3>
c000b98f:	83 c4 10             	add    esp,0x10
c000b992:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b996:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b99a:	50                   	push   eax
c000b99b:	50                   	push   eax
c000b99c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9a4:	e8 27 ab 01 00       	call   c00264d0 <lrint>
c000b9a9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9ac:	40                   	inc    eax
c000b9ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b1:	0f af c5             	imul   eax,ebp
c000b9b4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9b8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9bf:	58                   	pop    eax
c000b9c0:	5a                   	pop    edx
c000b9c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9c9:	e8 02 ab 01 00       	call   c00264d0 <lrint>
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	50                   	push   eax
c000b9d2:	e8 dc a6 01 00       	call   c00260b3 <__floatsidf>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	52                   	push   edx
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9ec:	e8 33 a0 01 00       	call   c0025a24 <__subdf3>
c000b9f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	83 c4 20             	add    esp,0x20
c000b9fc:	6a 00                	push   0x0
c000b9fe:	6a 00                	push   0x0
c000ba00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba08:	e8 12 a9 01 00       	call   c002631f <__ltdf2>
c000ba0d:	83 c4 10             	add    esp,0x10
c000ba10:	85 c0                	test   eax,eax
c000ba12:	79 1f                	jns    c000ba33 <sinc_multichan_vari_process+0x222>
c000ba14:	68 00 00 f0 3f       	push   0x3ff00000
c000ba19:	6a 00                	push   0x0
c000ba1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba23:	e8 ab 99 01 00       	call   c00253d3 <__adddf3>
c000ba28:	83 c4 10             	add    esp,0x10
c000ba2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba33:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba36:	83 ec 10             	sub    esp,0x10
c000ba39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba3d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba50:	e8 cf 9f 01 00       	call   c0025a24 <__subdf3>
c000ba55:	83 c4 18             	add    esp,0x18
c000ba58:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba60:	52                   	push   edx
c000ba61:	50                   	push   eax
c000ba62:	e8 69 aa 01 00       	call   c00264d0 <lrint>
c000ba67:	0f af e8             	imul   ebp,eax
c000ba6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba6e:	01 e8                	add    eax,ebp
c000ba70:	99                   	cdq    
c000ba71:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba74:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba7f:	68 00 00 f0 3f       	push   0x3ff00000
c000ba84:	6a 00                	push   0x0
c000ba86:	e8 a9 a2 01 00       	call   c0025d34 <__divdf3>
c000ba8b:	83 c4 10             	add    esp,0x10
c000ba8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba96:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ba9b:	68 23 42 92 0c       	push   0xc924223
c000baa0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa8:	e8 26 99 01 00       	call   c00253d3 <__adddf3>
c000baad:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bab1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bab5:	83 c4 20             	add    esp,0x20
c000bab8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bac0:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bac8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bacb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bace:	7d 50                	jge    c000bb20 <sinc_multichan_vari_process+0x30f>
c000bad0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bad3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bad6:	01 c8                	add    eax,ecx
c000bad8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000badb:	99                   	cdq    
c000badc:	f7 f9                	idiv   ecx
c000bade:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bae2:	7d 0c                	jge    c000baf0 <sinc_multichan_vari_process+0x2df>
c000bae4:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bae7:	85 ed                	test   ebp,ebp
c000bae9:	79 6b                	jns    c000bb56 <sinc_multichan_vari_process+0x345>
c000baeb:	e9 e6 00 00 00       	jmp    c000bbd6 <sinc_multichan_vari_process+0x3c5>
c000baf0:	50                   	push   eax
c000baf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000baf5:	57                   	push   edi
c000baf6:	53                   	push   ebx
c000baf7:	e8 9b fb ff ff       	call   c000b697 <prepare_data>
c000bafc:	83 c4 10             	add    esp,0x10
c000baff:	89 c2                	mov    edx,eax
c000bb01:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb04:	85 c0                	test   eax,eax
c000bb06:	0f 85 bf 03 00 00    	jne    c000becb <sinc_multichan_vari_process+0x6ba>
c000bb0c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb0f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb12:	01 c8                	add    eax,ecx
c000bb14:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb17:	99                   	cdq    
c000bb18:	f7 f9                	idiv   ecx
c000bb1a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb1e:	7c c4                	jl     c000bae4 <sinc_multichan_vari_process+0x2d3>
c000bb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb28:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb2b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb36:	89 06                	mov    DWORD PTR [esi],eax
c000bb38:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb3b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb3e:	99                   	cdq    
c000bb3f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb42:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb48:	99                   	cdq    
c000bb49:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb4c:	31 d2                	xor    edx,edx
c000bb4e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb51:	e9 75 03 00 00       	jmp    c000becb <sinc_multichan_vari_process+0x6ba>
c000bb56:	83 ec 0c             	sub    esp,0xc
c000bb59:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb5c:	e8 52 a5 01 00       	call   c00260b3 <__floatsidf>
c000bb61:	83 c4 10             	add    esp,0x10
c000bb64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb68:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb78:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb7c:	e8 52 98 01 00       	call   c00253d3 <__adddf3>
c000bb81:	83 c4 10             	add    esp,0x10
c000bb84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb88:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb9c:	e8 32 98 01 00       	call   c00253d3 <__adddf3>
c000bba1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bba4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bba8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbac:	e8 02 a5 01 00       	call   c00260b3 <__floatsidf>
c000bbb1:	83 c4 10             	add    esp,0x10
c000bbb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbbc:	52                   	push   edx
c000bbbd:	50                   	push   eax
c000bbbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc6:	e8 52 a7 01 00       	call   c002631d <__gedf2>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	85 c0                	test   eax,eax
c000bbd0:	0f 89 4a ff ff ff    	jns    c000bb20 <sinc_multichan_vari_process+0x30f>
c000bbd6:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbda:	0f 8e ed 00 00 00    	jle    c000bccd <sinc_multichan_vari_process+0x4bc>
c000bbe0:	83 ec 10             	sub    esp,0x10
c000bbe3:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbe6:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbe9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbec:	ff 36                	push   DWORD PTR [esi]
c000bbee:	e8 31 9e 01 00       	call   c0025a24 <__subdf3>
c000bbf3:	83 c4 18             	add    esp,0x18
c000bbf6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfe:	52                   	push   edx
c000bbff:	50                   	push   eax
c000bc00:	e8 ab a8 01 00       	call   c00264b0 <fabs>
c000bc05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc09:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc0d:	83 c4 10             	add    esp,0x10
c000bc10:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc15:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc22:	e8 da a6 01 00       	call   c0026301 <__gtdf2>
c000bc27:	83 c4 10             	add    esp,0x10
c000bc2a:	85 c0                	test   eax,eax
c000bc2c:	0f 8e 9b 00 00 00    	jle    c000bccd <sinc_multichan_vari_process+0x4bc>
c000bc32:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc34:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc3f:	52                   	push   edx
c000bc40:	50                   	push   eax
c000bc41:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc44:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc47:	e8 d8 9d 01 00       	call   c0025a24 <__subdf3>
c000bc4c:	59                   	pop    ecx
c000bc4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc55:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc58:	e8 56 a4 01 00       	call   c00260b3 <__floatsidf>
c000bc5d:	83 c4 10             	add    esp,0x10
c000bc60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc68:	52                   	push   edx
c000bc69:	50                   	push   eax
c000bc6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc72:	e8 d9 9d 01 00       	call   c0025a50 <__muldf3>
c000bc77:	5d                   	pop    ebp
c000bc78:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc7c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc80:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc83:	e8 2b a4 01 00       	call   c00260b3 <__floatsidf>
c000bc88:	83 c4 10             	add    esp,0x10
c000bc8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc8f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc93:	52                   	push   edx
c000bc94:	50                   	push   eax
c000bc95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc9d:	e8 92 a0 01 00       	call   c0025d34 <__divdf3>
c000bca2:	83 c4 10             	add    esp,0x10
c000bca5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcbd:	e8 11 97 01 00       	call   c00253d3 <__adddf3>
c000bcc2:	83 c4 10             	add    esp,0x10
c000bcc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcc9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bccd:	83 ec 0c             	sub    esp,0xc
c000bcd0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bcd3:	e8 db a3 01 00       	call   c00260b3 <__floatsidf>
c000bcd8:	83 c4 10             	add    esp,0x10
c000bcdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf3:	e8 27 a6 01 00       	call   c002631f <__ltdf2>
c000bcf8:	83 c4 10             	add    esp,0x10
c000bcfb:	85 c0                	test   eax,eax
c000bcfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd05:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd09:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd0d:	78 10                	js     c000bd1f <sinc_multichan_vari_process+0x50e>
c000bd0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd1b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2f:	e8 1c 9d 01 00       	call   c0025a50 <__muldf3>
c000bd34:	59                   	pop    ecx
c000bd35:	5d                   	pop    ebp
c000bd36:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd46:	e8 25 f9 ff ff       	call   c000b670 <double_to_fp>
c000bd4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd4f:	89 c5                	mov    ebp,eax
c000bd51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd5d:	e8 ee 9c 01 00       	call   c0025a50 <__muldf3>
c000bd62:	83 c4 18             	add    esp,0x18
c000bd65:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd6d:	52                   	push   edx
c000bd6e:	50                   	push   eax
c000bd6f:	e8 fc f8 ff ff       	call   c000b670 <double_to_fp>
c000bd74:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd77:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd7b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd7e:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd81:	50                   	push   eax
c000bd82:	50                   	push   eax
c000bd83:	50                   	push   eax
c000bd84:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd87:	e8 27 a3 01 00       	call   c00260b3 <__floatsidf>
c000bd8c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd90:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bd94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda4:	e8 8b 9f 01 00       	call   c0025d34 <__divdf3>
c000bda9:	83 c4 1c             	add    esp,0x1c
c000bdac:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdb0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdb4:	52                   	push   edx
c000bdb5:	89 ea                	mov    edx,ebp
c000bdb7:	50                   	push   eax
c000bdb8:	89 d8                	mov    eax,ebx
c000bdba:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdbd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdc1:	e8 69 ed ff ff       	call   c000ab2f <calc_output_multi>
c000bdc6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdc9:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bdcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdd8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bddc:	e8 53 9f 01 00       	call   c0025d34 <__divdf3>
c000bde1:	83 c4 10             	add    esp,0x10
c000bde4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bde8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdfc:	e8 d2 95 01 00       	call   c00253d3 <__adddf3>
c000be01:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be05:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be09:	83 c4 28             	add    esp,0x28
c000be0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be14:	e8 b7 a6 01 00       	call   c00264d0 <lrint>
c000be19:	83 ec 0c             	sub    esp,0xc
c000be1c:	50                   	push   eax
c000be1d:	e8 91 a2 01 00       	call   c00260b3 <__floatsidf>
c000be22:	83 c4 10             	add    esp,0x10
c000be25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be2d:	52                   	push   edx
c000be2e:	50                   	push   eax
c000be2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be37:	e8 e8 9b 01 00       	call   c0025a24 <__subdf3>
c000be3c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be44:	83 c4 20             	add    esp,0x20
c000be47:	6a 00                	push   0x0
c000be49:	6a 00                	push   0x0
c000be4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be53:	e8 c7 a4 01 00       	call   c002631f <__ltdf2>
c000be58:	83 c4 10             	add    esp,0x10
c000be5b:	85 c0                	test   eax,eax
c000be5d:	79 20                	jns    c000be7f <sinc_multichan_vari_process+0x66e>
c000be5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be6f:	e8 5f 95 01 00       	call   c00253d3 <__adddf3>
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be7f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be82:	83 ec 10             	sub    esp,0x10
c000be85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be89:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be9c:	e8 83 9b 01 00       	call   c0025a24 <__subdf3>
c000bea1:	83 c4 18             	add    esp,0x18
c000bea4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beac:	52                   	push   edx
c000bead:	50                   	push   eax
c000beae:	e8 1d a6 01 00       	call   c00264d0 <lrint>
c000beb3:	0f af e8             	imul   ebp,eax
c000beb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000beba:	83 c4 10             	add    esp,0x10
c000bebd:	01 e8                	add    eax,ebp
c000bebf:	99                   	cdq    
c000bec0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bec3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bec6:	e9 fd fb ff ff       	jmp    c000bac8 <sinc_multichan_vari_process+0x2b7>
c000becb:	83 c4 4c             	add    esp,0x4c
c000bece:	89 d0                	mov    eax,edx
c000bed0:	5b                   	pop    ebx
c000bed1:	5e                   	pop    esi
c000bed2:	5f                   	pop    edi
c000bed3:	5d                   	pop    ebp
c000bed4:	c3                   	ret    

c000bed5 <sinc_hex_vari_process>:
c000bed5:	55                   	push   ebp
c000bed6:	ba 05 00 00 00       	mov    edx,0x5
c000bedb:	57                   	push   edi
c000bedc:	56                   	push   esi
c000bedd:	53                   	push   ebx
c000bede:	83 ec 4c             	sub    esp,0x4c
c000bee1:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bee5:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bee9:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000beec:	85 db                	test   ebx,ebx
c000beee:	0f 84 9c 06 00 00    	je     c000c590 <sinc_hex_vari_process+0x6bb>
c000bef4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bef7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000befa:	0f af c7             	imul   eax,edi
c000befd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf00:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf03:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf0a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf11:	0f af c7             	imul   eax,edi
c000bf14:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf17:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf1a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf25:	68 00 00 70 3f       	push   0x3f700000
c000bf2a:	6a 00                	push   0x0
c000bf2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf34:	e8 e6 a3 01 00       	call   c002631f <__ltdf2>
c000bf39:	83 c4 10             	add    esp,0x10
c000bf3c:	ba 16 00 00 00       	mov    edx,0x16
c000bf41:	85 c0                	test   eax,eax
c000bf43:	0f 88 47 06 00 00    	js     c000c590 <sinc_hex_vari_process+0x6bb>
c000bf49:	68 00 00 70 40       	push   0x40700000
c000bf4e:	6a 00                	push   0x0
c000bf50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf58:	e8 a4 a3 01 00       	call   c0026301 <__gtdf2>
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	ba 16 00 00 00       	mov    edx,0x16
c000bf65:	85 c0                	test   eax,eax
c000bf67:	0f 8f 23 06 00 00    	jg     c000c590 <sinc_hex_vari_process+0x6bb>
c000bf6d:	83 ec 0c             	sub    esp,0xc
c000bf70:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf73:	e8 3b a1 01 00       	call   c00260b3 <__floatsidf>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf83:	68 00 00 00 40       	push   0x40000000
c000bf88:	6a 00                	push   0x0
c000bf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf92:	e8 3c 94 01 00       	call   c00253d3 <__adddf3>
c000bf97:	59                   	pop    ecx
c000bf98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bf9c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfa0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa3:	e8 0b a1 01 00       	call   c00260b3 <__floatsidf>
c000bfa8:	83 c4 10             	add    esp,0x10
c000bfab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfb3:	52                   	push   edx
c000bfb4:	50                   	push   eax
c000bfb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfbd:	e8 72 9d 01 00       	call   c0025d34 <__divdf3>
c000bfc2:	83 c4 10             	add    esp,0x10
c000bfc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfc9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfcd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfd0:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfd3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfeb:	e8 11 a3 01 00       	call   c0026301 <__gtdf2>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	85 c0                	test   eax,eax
c000bff5:	7e 2d                	jle    c000c024 <sinc_hex_vari_process+0x14f>
c000bff7:	68 00 00 f0 3f       	push   0x3ff00000
c000bffc:	6a 00                	push   0x0
c000bffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c006:	e8 14 a3 01 00       	call   c002631f <__ltdf2>
c000c00b:	83 c4 10             	add    esp,0x10
c000c00e:	85 c0                	test   eax,eax
c000c010:	79 4d                	jns    c000c05f <sinc_hex_vari_process+0x18a>
c000c012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c016:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c01a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c022:	eb 1b                	jmp    c000c03f <sinc_hex_vari_process+0x16a>
c000c024:	68 00 00 f0 3f       	push   0x3ff00000
c000c029:	6a 00                	push   0x0
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 e7 a2 01 00       	call   c002631f <__ltdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	79 20                	jns    c000c05f <sinc_hex_vari_process+0x18a>
c000c03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c047:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c04f:	e8 e0 9c 01 00       	call   c0025d34 <__divdf3>
c000c054:	83 c4 10             	add    esp,0x10
c000c057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c05b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c05f:	50                   	push   eax
c000c060:	50                   	push   eax
c000c061:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c065:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c069:	e8 62 a4 01 00       	call   c00264d0 <lrint>
c000c06e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c071:	40                   	inc    eax
c000c072:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c076:	0f af c7             	imul   eax,edi
c000c079:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c07d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c084:	58                   	pop    eax
c000c085:	5a                   	pop    edx
c000c086:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c08e:	e8 3d a4 01 00       	call   c00264d0 <lrint>
c000c093:	83 ec 0c             	sub    esp,0xc
c000c096:	50                   	push   eax
c000c097:	e8 17 a0 01 00       	call   c00260b3 <__floatsidf>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	52                   	push   edx
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0b1:	e8 6e 99 01 00       	call   c0025a24 <__subdf3>
c000c0b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	83 c4 20             	add    esp,0x20
c000c0c1:	6a 00                	push   0x0
c000c0c3:	6a 00                	push   0x0
c000c0c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0cd:	e8 4d a2 01 00       	call   c002631f <__ltdf2>
c000c0d2:	83 c4 10             	add    esp,0x10
c000c0d5:	85 c0                	test   eax,eax
c000c0d7:	79 1f                	jns    c000c0f8 <sinc_hex_vari_process+0x223>
c000c0d9:	68 00 00 f0 3f       	push   0x3ff00000
c000c0de:	6a 00                	push   0x0
c000c0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0e8:	e8 e6 92 01 00       	call   c00253d3 <__adddf3>
c000c0ed:	83 c4 10             	add    esp,0x10
c000c0f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0f8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0fb:	83 ec 10             	sub    esp,0x10
c000c0fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c102:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c10d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c111:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c115:	e8 0a 99 01 00       	call   c0025a24 <__subdf3>
c000c11a:	83 c4 18             	add    esp,0x18
c000c11d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c121:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c125:	52                   	push   edx
c000c126:	50                   	push   eax
c000c127:	e8 a4 a3 01 00       	call   c00264d0 <lrint>
c000c12c:	0f af f8             	imul   edi,eax
c000c12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c133:	01 f8                	add    eax,edi
c000c135:	99                   	cdq    
c000c136:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c139:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c13c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c140:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c144:	68 00 00 f0 3f       	push   0x3ff00000
c000c149:	6a 00                	push   0x0
c000c14b:	e8 e4 9b 01 00       	call   c0025d34 <__divdf3>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c15b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c160:	68 23 42 92 0c       	push   0xc924223
c000c165:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c169:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16d:	e8 61 92 01 00       	call   c00253d3 <__adddf3>
c000c172:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c176:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c17a:	83 c4 20             	add    esp,0x20
c000c17d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c185:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c18d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c190:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c193:	7d 50                	jge    c000c1e5 <sinc_hex_vari_process+0x310>
c000c195:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c198:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c19b:	01 c8                	add    eax,ecx
c000c19d:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1a0:	99                   	cdq    
c000c1a1:	f7 f9                	idiv   ecx
c000c1a3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1a7:	7d 0c                	jge    c000c1b5 <sinc_hex_vari_process+0x2e0>
c000c1a9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1ac:	85 ff                	test   edi,edi
c000c1ae:	79 6c                	jns    c000c21c <sinc_hex_vari_process+0x347>
c000c1b0:	e9 e7 00 00 00       	jmp    c000c29c <sinc_hex_vari_process+0x3c7>
c000c1b5:	50                   	push   eax
c000c1b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1ba:	56                   	push   esi
c000c1bb:	53                   	push   ebx
c000c1bc:	e8 d6 f4 ff ff       	call   c000b697 <prepare_data>
c000c1c1:	83 c4 10             	add    esp,0x10
c000c1c4:	89 c2                	mov    edx,eax
c000c1c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1c9:	85 c0                	test   eax,eax
c000c1cb:	0f 85 bf 03 00 00    	jne    c000c590 <sinc_hex_vari_process+0x6bb>
c000c1d1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1d4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1d7:	01 c8                	add    eax,ecx
c000c1d9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1dc:	99                   	cdq    
c000c1dd:	f7 f9                	idiv   ecx
c000c1df:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1e3:	7c c4                	jl     c000c1a9 <sinc_hex_vari_process+0x2d4>
c000c1e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1ed:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1f0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c1fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c201:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c204:	99                   	cdq    
c000c205:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c208:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c20b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c20e:	99                   	cdq    
c000c20f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c212:	31 d2                	xor    edx,edx
c000c214:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c217:	e9 74 03 00 00       	jmp    c000c590 <sinc_hex_vari_process+0x6bb>
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c222:	e8 8c 9e 01 00       	call   c00260b3 <__floatsidf>
c000c227:	83 c4 10             	add    esp,0x10
c000c22a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c22e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c232:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c236:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c23a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c23e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c242:	e8 8c 91 01 00       	call   c00253d3 <__adddf3>
c000c247:	83 c4 10             	add    esp,0x10
c000c24a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c24e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c252:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c256:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c25a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c25e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c262:	e8 6c 91 01 00       	call   c00253d3 <__adddf3>
c000c267:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c26a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c26e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c272:	e8 3c 9e 01 00       	call   c00260b3 <__floatsidf>
c000c277:	83 c4 10             	add    esp,0x10
c000c27a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c27e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c282:	52                   	push   edx
c000c283:	50                   	push   eax
c000c284:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c288:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28c:	e8 8c a0 01 00       	call   c002631d <__gedf2>
c000c291:	83 c4 10             	add    esp,0x10
c000c294:	85 c0                	test   eax,eax
c000c296:	0f 89 49 ff ff ff    	jns    c000c1e5 <sinc_hex_vari_process+0x310>
c000c29c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2a0:	0f 8e ef 00 00 00    	jle    c000c395 <sinc_hex_vari_process+0x4c0>
c000c2a6:	83 ec 10             	sub    esp,0x10
c000c2a9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2ac:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2af:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2b5:	e8 6a 97 01 00       	call   c0025a24 <__subdf3>
c000c2ba:	83 c4 18             	add    esp,0x18
c000c2bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c5:	52                   	push   edx
c000c2c6:	50                   	push   eax
c000c2c7:	e8 e4 a1 01 00       	call   c00264b0 <fabs>
c000c2cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2d4:	83 c4 10             	add    esp,0x10
c000c2d7:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2dc:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2e9:	e8 13 a0 01 00       	call   c0026301 <__gtdf2>
c000c2ee:	83 c4 10             	add    esp,0x10
c000c2f1:	85 c0                	test   eax,eax
c000c2f3:	0f 8e 9c 00 00 00    	jle    c000c395 <sinc_hex_vari_process+0x4c0>
c000c2f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2fc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c303:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c307:	52                   	push   edx
c000c308:	50                   	push   eax
c000c309:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c30c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c30f:	e8 10 97 01 00       	call   c0025a24 <__subdf3>
c000c314:	59                   	pop    ecx
c000c315:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c319:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c31d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c320:	e8 8e 9d 01 00       	call   c00260b3 <__floatsidf>
c000c325:	83 c4 10             	add    esp,0x10
c000c328:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c32c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c330:	52                   	push   edx
c000c331:	50                   	push   eax
c000c332:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c336:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c33a:	e8 11 97 01 00       	call   c0025a50 <__muldf3>
c000c33f:	5f                   	pop    edi
c000c340:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c344:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c348:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c34b:	e8 63 9d 01 00       	call   c00260b3 <__floatsidf>
c000c350:	83 c4 10             	add    esp,0x10
c000c353:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c357:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c35b:	52                   	push   edx
c000c35c:	50                   	push   eax
c000c35d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c365:	e8 ca 99 01 00       	call   c0025d34 <__divdf3>
c000c36a:	83 c4 10             	add    esp,0x10
c000c36d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c371:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c379:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c37d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c381:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c385:	e8 49 90 01 00       	call   c00253d3 <__adddf3>
c000c38a:	83 c4 10             	add    esp,0x10
c000c38d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c395:	83 ec 0c             	sub    esp,0xc
c000c398:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c39b:	e8 13 9d 01 00       	call   c00260b3 <__floatsidf>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3bb:	e8 5f 9f 01 00       	call   c002631f <__ltdf2>
c000c3c0:	83 c4 10             	add    esp,0x10
c000c3c3:	85 c0                	test   eax,eax
c000c3c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3cd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3d1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3d5:	78 10                	js     c000c3e7 <sinc_hex_vari_process+0x512>
c000c3d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f7:	e8 54 96 01 00       	call   c0025a50 <__muldf3>
c000c3fc:	59                   	pop    ecx
c000c3fd:	5f                   	pop    edi
c000c3fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c402:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c406:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c40e:	e8 5d f2 ff ff       	call   c000b670 <double_to_fp>
c000c413:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c417:	89 c7                	mov    edi,eax
c000c419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c41d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c425:	e8 26 96 01 00       	call   c0025a50 <__muldf3>
c000c42a:	83 c4 18             	add    esp,0x18
c000c42d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c431:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c435:	52                   	push   edx
c000c436:	50                   	push   eax
c000c437:	e8 34 f2 ff ff       	call   c000b670 <double_to_fp>
c000c43c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c43f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c443:	83 c4 0c             	add    esp,0xc
c000c446:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c449:	8d 04 90             	lea    eax,[eax+edx*4]
c000c44c:	50                   	push   eax
c000c44d:	50                   	push   eax
c000c44e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c451:	e8 5d 9c 01 00       	call   c00260b3 <__floatsidf>
c000c456:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c45a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c45e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c462:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c466:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c46e:	e8 c1 98 01 00       	call   c0025d34 <__divdf3>
c000c473:	83 c4 18             	add    esp,0x18
c000c476:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c47a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c47e:	52                   	push   edx
c000c47f:	89 fa                	mov    edx,edi
c000c481:	50                   	push   eax
c000c482:	89 d8                	mov    eax,ebx
c000c484:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c488:	e8 50 de ff ff       	call   c000a2dd <calc_output_hex>
c000c48d:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c491:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c495:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c499:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a1:	e8 8e 98 01 00       	call   c0025d34 <__divdf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4c1:	e8 0d 8f 01 00       	call   c00253d3 <__adddf3>
c000c4c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4ce:	83 c4 18             	add    esp,0x18
c000c4d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d9:	e8 f2 9f 01 00       	call   c00264d0 <lrint>
c000c4de:	83 ec 0c             	sub    esp,0xc
c000c4e1:	50                   	push   eax
c000c4e2:	e8 cc 9b 01 00       	call   c00260b3 <__floatsidf>
c000c4e7:	83 c4 10             	add    esp,0x10
c000c4ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c4f2:	52                   	push   edx
c000c4f3:	50                   	push   eax
c000c4f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4fc:	e8 23 95 01 00       	call   c0025a24 <__subdf3>
c000c501:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c509:	83 c4 20             	add    esp,0x20
c000c50c:	6a 00                	push   0x0
c000c50e:	6a 00                	push   0x0
c000c510:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c514:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c518:	e8 02 9e 01 00       	call   c002631f <__ltdf2>
c000c51d:	83 c4 10             	add    esp,0x10
c000c520:	85 c0                	test   eax,eax
c000c522:	79 20                	jns    c000c544 <sinc_hex_vari_process+0x66f>
c000c524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c52c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c530:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c534:	e8 9a 8e 01 00       	call   c00253d3 <__adddf3>
c000c539:	83 c4 10             	add    esp,0x10
c000c53c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c540:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c544:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c547:	83 ec 10             	sub    esp,0x10
c000c54a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c54e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c559:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c55d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c561:	e8 be 94 01 00       	call   c0025a24 <__subdf3>
c000c566:	83 c4 18             	add    esp,0x18
c000c569:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c571:	52                   	push   edx
c000c572:	50                   	push   eax
c000c573:	e8 58 9f 01 00       	call   c00264d0 <lrint>
c000c578:	0f af f8             	imul   edi,eax
c000c57b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c57f:	83 c4 10             	add    esp,0x10
c000c582:	01 f8                	add    eax,edi
c000c584:	99                   	cdq    
c000c585:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c588:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c58b:	e9 fd fb ff ff       	jmp    c000c18d <sinc_hex_vari_process+0x2b8>
c000c590:	83 c4 4c             	add    esp,0x4c
c000c593:	89 d0                	mov    eax,edx
c000c595:	5b                   	pop    ebx
c000c596:	5e                   	pop    esi
c000c597:	5f                   	pop    edi
c000c598:	5d                   	pop    ebp
c000c599:	c3                   	ret    

c000c59a <sinc_quad_vari_process>:
c000c59a:	55                   	push   ebp
c000c59b:	ba 05 00 00 00       	mov    edx,0x5
c000c5a0:	57                   	push   edi
c000c5a1:	56                   	push   esi
c000c5a2:	53                   	push   ebx
c000c5a3:	83 ec 4c             	sub    esp,0x4c
c000c5a6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5aa:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5ae:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5b1:	85 db                	test   ebx,ebx
c000c5b3:	0f 84 9c 06 00 00    	je     c000cc55 <sinc_quad_vari_process+0x6bb>
c000c5b9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5bc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5bf:	0f af c7             	imul   eax,edi
c000c5c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5c5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5c8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5cf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5d6:	0f af c7             	imul   eax,edi
c000c5d9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5dc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5e2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5ea:	68 00 00 70 3f       	push   0x3f700000
c000c5ef:	6a 00                	push   0x0
c000c5f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f9:	e8 21 9d 01 00       	call   c002631f <__ltdf2>
c000c5fe:	83 c4 10             	add    esp,0x10
c000c601:	ba 16 00 00 00       	mov    edx,0x16
c000c606:	85 c0                	test   eax,eax
c000c608:	0f 88 47 06 00 00    	js     c000cc55 <sinc_quad_vari_process+0x6bb>
c000c60e:	68 00 00 70 40       	push   0x40700000
c000c613:	6a 00                	push   0x0
c000c615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61d:	e8 df 9c 01 00       	call   c0026301 <__gtdf2>
c000c622:	83 c4 10             	add    esp,0x10
c000c625:	ba 16 00 00 00       	mov    edx,0x16
c000c62a:	85 c0                	test   eax,eax
c000c62c:	0f 8f 23 06 00 00    	jg     c000cc55 <sinc_quad_vari_process+0x6bb>
c000c632:	83 ec 0c             	sub    esp,0xc
c000c635:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c638:	e8 76 9a 01 00       	call   c00260b3 <__floatsidf>
c000c63d:	83 c4 10             	add    esp,0x10
c000c640:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c648:	68 00 00 00 40       	push   0x40000000
c000c64d:	6a 00                	push   0x0
c000c64f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c657:	e8 77 8d 01 00       	call   c00253d3 <__adddf3>
c000c65c:	59                   	pop    ecx
c000c65d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c661:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c665:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c668:	e8 46 9a 01 00       	call   c00260b3 <__floatsidf>
c000c66d:	83 c4 10             	add    esp,0x10
c000c670:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c674:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c678:	52                   	push   edx
c000c679:	50                   	push   eax
c000c67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c682:	e8 ad 96 01 00       	call   c0025d34 <__divdf3>
c000c687:	83 c4 10             	add    esp,0x10
c000c68a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c68e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c692:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c695:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c698:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c69c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b0:	e8 4c 9c 01 00       	call   c0026301 <__gtdf2>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	85 c0                	test   eax,eax
c000c6ba:	7e 2d                	jle    c000c6e9 <sinc_quad_vari_process+0x14f>
c000c6bc:	68 00 00 f0 3f       	push   0x3ff00000
c000c6c1:	6a 00                	push   0x0
c000c6c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cb:	e8 4f 9c 01 00       	call   c002631f <__ltdf2>
c000c6d0:	83 c4 10             	add    esp,0x10
c000c6d3:	85 c0                	test   eax,eax
c000c6d5:	79 4d                	jns    c000c724 <sinc_quad_vari_process+0x18a>
c000c6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e7:	eb 1b                	jmp    c000c704 <sinc_quad_vari_process+0x16a>
c000c6e9:	68 00 00 f0 3f       	push   0x3ff00000
c000c6ee:	6a 00                	push   0x0
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 22 9c 01 00       	call   c002631f <__ltdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	79 20                	jns    c000c724 <sinc_quad_vari_process+0x18a>
c000c704:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c708:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c70c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c710:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c714:	e8 1b 96 01 00       	call   c0025d34 <__divdf3>
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c720:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c724:	50                   	push   eax
c000c725:	50                   	push   eax
c000c726:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c72e:	e8 9d 9d 01 00       	call   c00264d0 <lrint>
c000c733:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c736:	40                   	inc    eax
c000c737:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c73b:	0f af c7             	imul   eax,edi
c000c73e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c745:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c749:	58                   	pop    eax
c000c74a:	5a                   	pop    edx
c000c74b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c74f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c753:	e8 78 9d 01 00       	call   c00264d0 <lrint>
c000c758:	83 ec 0c             	sub    esp,0xc
c000c75b:	50                   	push   eax
c000c75c:	e8 52 99 01 00       	call   c00260b3 <__floatsidf>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	52                   	push   edx
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c772:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c776:	e8 a9 92 01 00       	call   c0025a24 <__subdf3>
c000c77b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	83 c4 20             	add    esp,0x20
c000c786:	6a 00                	push   0x0
c000c788:	6a 00                	push   0x0
c000c78a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c792:	e8 88 9b 01 00       	call   c002631f <__ltdf2>
c000c797:	83 c4 10             	add    esp,0x10
c000c79a:	85 c0                	test   eax,eax
c000c79c:	79 1f                	jns    c000c7bd <sinc_quad_vari_process+0x223>
c000c79e:	68 00 00 f0 3f       	push   0x3ff00000
c000c7a3:	6a 00                	push   0x0
c000c7a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7ad:	e8 21 8c 01 00       	call   c00253d3 <__adddf3>
c000c7b2:	83 c4 10             	add    esp,0x10
c000c7b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7bd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7c0:	83 ec 10             	sub    esp,0x10
c000c7c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7da:	e8 45 92 01 00       	call   c0025a24 <__subdf3>
c000c7df:	83 c4 18             	add    esp,0x18
c000c7e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7ea:	52                   	push   edx
c000c7eb:	50                   	push   eax
c000c7ec:	e8 df 9c 01 00       	call   c00264d0 <lrint>
c000c7f1:	0f af f8             	imul   edi,eax
c000c7f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7f8:	01 f8                	add    eax,edi
c000c7fa:	99                   	cdq    
c000c7fb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7fe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c801:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c805:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c809:	68 00 00 f0 3f       	push   0x3ff00000
c000c80e:	6a 00                	push   0x0
c000c810:	e8 1f 95 01 00       	call   c0025d34 <__divdf3>
c000c815:	83 c4 10             	add    esp,0x10
c000c818:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c81c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c820:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c825:	68 23 42 92 0c       	push   0xc924223
c000c82a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c82e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c832:	e8 9c 8b 01 00       	call   c00253d3 <__adddf3>
c000c837:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c83b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c83f:	83 c4 20             	add    esp,0x20
c000c842:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c84a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c852:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c855:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c858:	7d 50                	jge    c000c8aa <sinc_quad_vari_process+0x310>
c000c85a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c85d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c860:	01 c8                	add    eax,ecx
c000c862:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c865:	99                   	cdq    
c000c866:	f7 f9                	idiv   ecx
c000c868:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c86c:	7d 0c                	jge    c000c87a <sinc_quad_vari_process+0x2e0>
c000c86e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c871:	85 ff                	test   edi,edi
c000c873:	79 6c                	jns    c000c8e1 <sinc_quad_vari_process+0x347>
c000c875:	e9 e7 00 00 00       	jmp    c000c961 <sinc_quad_vari_process+0x3c7>
c000c87a:	50                   	push   eax
c000c87b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c87f:	56                   	push   esi
c000c880:	53                   	push   ebx
c000c881:	e8 11 ee ff ff       	call   c000b697 <prepare_data>
c000c886:	83 c4 10             	add    esp,0x10
c000c889:	89 c2                	mov    edx,eax
c000c88b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c88e:	85 c0                	test   eax,eax
c000c890:	0f 85 bf 03 00 00    	jne    c000cc55 <sinc_quad_vari_process+0x6bb>
c000c896:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c899:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c89c:	01 c8                	add    eax,ecx
c000c89e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8a1:	99                   	cdq    
c000c8a2:	f7 f9                	idiv   ecx
c000c8a4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8a8:	7c c4                	jl     c000c86e <sinc_quad_vari_process+0x2d4>
c000c8aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8b2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8b5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8c0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8c3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8c6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8c9:	99                   	cdq    
c000c8ca:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8cd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8d0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8d3:	99                   	cdq    
c000c8d4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8d7:	31 d2                	xor    edx,edx
c000c8d9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8dc:	e9 74 03 00 00       	jmp    c000cc55 <sinc_quad_vari_process+0x6bb>
c000c8e1:	83 ec 0c             	sub    esp,0xc
c000c8e4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8e7:	e8 c7 97 01 00       	call   c00260b3 <__floatsidf>
c000c8ec:	83 c4 10             	add    esp,0x10
c000c8ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c8f3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c8f7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c903:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c907:	e8 c7 8a 01 00       	call   c00253d3 <__adddf3>
c000c90c:	83 c4 10             	add    esp,0x10
c000c90f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c913:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c917:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c91f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c923:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c927:	e8 a7 8a 01 00       	call   c00253d3 <__adddf3>
c000c92c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c92f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c933:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c937:	e8 77 97 01 00       	call   c00260b3 <__floatsidf>
c000c93c:	83 c4 10             	add    esp,0x10
c000c93f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c943:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c947:	52                   	push   edx
c000c948:	50                   	push   eax
c000c949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c951:	e8 c7 99 01 00       	call   c002631d <__gedf2>
c000c956:	83 c4 10             	add    esp,0x10
c000c959:	85 c0                	test   eax,eax
c000c95b:	0f 89 49 ff ff ff    	jns    c000c8aa <sinc_quad_vari_process+0x310>
c000c961:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c965:	0f 8e ef 00 00 00    	jle    c000ca5a <sinc_quad_vari_process+0x4c0>
c000c96b:	83 ec 10             	sub    esp,0x10
c000c96e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c971:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c974:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c977:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c97a:	e8 a5 90 01 00       	call   c0025a24 <__subdf3>
c000c97f:	83 c4 18             	add    esp,0x18
c000c982:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c986:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98a:	52                   	push   edx
c000c98b:	50                   	push   eax
c000c98c:	e8 1f 9b 01 00       	call   c00264b0 <fabs>
c000c991:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c995:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c999:	83 c4 10             	add    esp,0x10
c000c99c:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9a1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ae:	e8 4e 99 01 00       	call   c0026301 <__gtdf2>
c000c9b3:	83 c4 10             	add    esp,0x10
c000c9b6:	85 c0                	test   eax,eax
c000c9b8:	0f 8e 9c 00 00 00    	jle    c000ca5a <sinc_quad_vari_process+0x4c0>
c000c9be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9c1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9cc:	52                   	push   edx
c000c9cd:	50                   	push   eax
c000c9ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9d4:	e8 4b 90 01 00       	call   c0025a24 <__subdf3>
c000c9d9:	59                   	pop    ecx
c000c9da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9de:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9e2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9e5:	e8 c9 96 01 00       	call   c00260b3 <__floatsidf>
c000c9ea:	83 c4 10             	add    esp,0x10
c000c9ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9f5:	52                   	push   edx
c000c9f6:	50                   	push   eax
c000c9f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9ff:	e8 4c 90 01 00       	call   c0025a50 <__muldf3>
c000ca04:	5f                   	pop    edi
c000ca05:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca09:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca0d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca10:	e8 9e 96 01 00       	call   c00260b3 <__floatsidf>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca20:	52                   	push   edx
c000ca21:	50                   	push   eax
c000ca22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca2a:	e8 05 93 01 00       	call   c0025d34 <__divdf3>
c000ca2f:	83 c4 10             	add    esp,0x10
c000ca32:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca36:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca4a:	e8 84 89 01 00       	call   c00253d3 <__adddf3>
c000ca4f:	83 c4 10             	add    esp,0x10
c000ca52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca5a:	83 ec 0c             	sub    esp,0xc
c000ca5d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca60:	e8 4e 96 01 00       	call   c00260b3 <__floatsidf>
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca80:	e8 9a 98 01 00       	call   c002631f <__ltdf2>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	85 c0                	test   eax,eax
c000ca8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ca92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ca96:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ca9a:	78 10                	js     c000caac <sinc_quad_vari_process+0x512>
c000ca9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caa8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cab4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cabc:	e8 8f 8f 01 00       	call   c0025a50 <__muldf3>
c000cac1:	59                   	pop    ecx
c000cac2:	5f                   	pop    edi
c000cac3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cac7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cacb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cacf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cad3:	e8 98 eb ff ff       	call   c000b670 <double_to_fp>
c000cad8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cadc:	89 c7                	mov    edi,eax
c000cade:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cae2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cae6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caea:	e8 61 8f 01 00       	call   c0025a50 <__muldf3>
c000caef:	83 c4 18             	add    esp,0x18
c000caf2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000caf6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cafa:	52                   	push   edx
c000cafb:	50                   	push   eax
c000cafc:	e8 6f eb ff ff       	call   c000b670 <double_to_fp>
c000cb01:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb04:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb08:	83 c4 0c             	add    esp,0xc
c000cb0b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb0e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb11:	50                   	push   eax
c000cb12:	50                   	push   eax
c000cb13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb16:	e8 98 95 01 00       	call   c00260b3 <__floatsidf>
c000cb1b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb1f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb33:	e8 fc 91 01 00       	call   c0025d34 <__divdf3>
c000cb38:	83 c4 18             	add    esp,0x18
c000cb3b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb43:	52                   	push   edx
c000cb44:	89 fa                	mov    edx,edi
c000cb46:	50                   	push   eax
c000cb47:	89 d8                	mov    eax,ebx
c000cb49:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb4d:	e8 a5 d1 ff ff       	call   c0009cf7 <calc_output_quad>
c000cb52:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb66:	e8 c9 91 01 00       	call   c0025d34 <__divdf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb72:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb86:	e8 48 88 01 00       	call   c00253d3 <__adddf3>
c000cb8b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb8f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cb93:	83 c4 18             	add    esp,0x18
c000cb96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9e:	e8 2d 99 01 00       	call   c00264d0 <lrint>
c000cba3:	83 ec 0c             	sub    esp,0xc
c000cba6:	50                   	push   eax
c000cba7:	e8 07 95 01 00       	call   c00260b3 <__floatsidf>
c000cbac:	83 c4 10             	add    esp,0x10
c000cbaf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbb3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbb7:	52                   	push   edx
c000cbb8:	50                   	push   eax
c000cbb9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbc1:	e8 5e 8e 01 00       	call   c0025a24 <__subdf3>
c000cbc6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbce:	83 c4 20             	add    esp,0x20
c000cbd1:	6a 00                	push   0x0
c000cbd3:	6a 00                	push   0x0
c000cbd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbdd:	e8 3d 97 01 00       	call   c002631f <__ltdf2>
c000cbe2:	83 c4 10             	add    esp,0x10
c000cbe5:	85 c0                	test   eax,eax
c000cbe7:	79 20                	jns    c000cc09 <sinc_quad_vari_process+0x66f>
c000cbe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbf1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbf9:	e8 d5 87 01 00       	call   c00253d3 <__adddf3>
c000cbfe:	83 c4 10             	add    esp,0x10
c000cc01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc09:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc0c:	83 ec 10             	sub    esp,0x10
c000cc0f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc13:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc26:	e8 f9 8d 01 00       	call   c0025a24 <__subdf3>
c000cc2b:	83 c4 18             	add    esp,0x18
c000cc2e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc32:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc36:	52                   	push   edx
c000cc37:	50                   	push   eax
c000cc38:	e8 93 98 01 00       	call   c00264d0 <lrint>
c000cc3d:	0f af f8             	imul   edi,eax
c000cc40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc44:	83 c4 10             	add    esp,0x10
c000cc47:	01 f8                	add    eax,edi
c000cc49:	99                   	cdq    
c000cc4a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc4d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc50:	e9 fd fb ff ff       	jmp    c000c852 <sinc_quad_vari_process+0x2b8>
c000cc55:	83 c4 4c             	add    esp,0x4c
c000cc58:	89 d0                	mov    eax,edx
c000cc5a:	5b                   	pop    ebx
c000cc5b:	5e                   	pop    esi
c000cc5c:	5f                   	pop    edi
c000cc5d:	5d                   	pop    ebp
c000cc5e:	c3                   	ret    

c000cc5f <sinc_stereo_vari_process>:
c000cc5f:	55                   	push   ebp
c000cc60:	ba 05 00 00 00       	mov    edx,0x5
c000cc65:	57                   	push   edi
c000cc66:	56                   	push   esi
c000cc67:	53                   	push   ebx
c000cc68:	83 ec 4c             	sub    esp,0x4c
c000cc6b:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc6f:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc73:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc76:	85 db                	test   ebx,ebx
c000cc78:	0f 84 9c 06 00 00    	je     c000d31a <sinc_stereo_vari_process+0x6bb>
c000cc7e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc81:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc84:	0f af c7             	imul   eax,edi
c000cc87:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc8a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc8d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cc94:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cc9b:	0f af c7             	imul   eax,edi
c000cc9e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cca1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cca4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cca7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccaf:	68 00 00 70 3f       	push   0x3f700000
c000ccb4:	6a 00                	push   0x0
c000ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbe:	e8 5c 96 01 00       	call   c002631f <__ltdf2>
c000ccc3:	83 c4 10             	add    esp,0x10
c000ccc6:	ba 16 00 00 00       	mov    edx,0x16
c000cccb:	85 c0                	test   eax,eax
c000cccd:	0f 88 47 06 00 00    	js     c000d31a <sinc_stereo_vari_process+0x6bb>
c000ccd3:	68 00 00 70 40       	push   0x40700000
c000ccd8:	6a 00                	push   0x0
c000ccda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce2:	e8 1a 96 01 00       	call   c0026301 <__gtdf2>
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	ba 16 00 00 00       	mov    edx,0x16
c000ccef:	85 c0                	test   eax,eax
c000ccf1:	0f 8f 23 06 00 00    	jg     c000d31a <sinc_stereo_vari_process+0x6bb>
c000ccf7:	83 ec 0c             	sub    esp,0xc
c000ccfa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ccfd:	e8 b1 93 01 00       	call   c00260b3 <__floatsidf>
c000cd02:	83 c4 10             	add    esp,0x10
c000cd05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd0d:	68 00 00 00 40       	push   0x40000000
c000cd12:	6a 00                	push   0x0
c000cd14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd1c:	e8 b2 86 01 00       	call   c00253d3 <__adddf3>
c000cd21:	59                   	pop    ecx
c000cd22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd26:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd2a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd2d:	e8 81 93 01 00       	call   c00260b3 <__floatsidf>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd3d:	52                   	push   edx
c000cd3e:	50                   	push   eax
c000cd3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd47:	e8 e8 8f 01 00       	call   c0025d34 <__divdf3>
c000cd4c:	83 c4 10             	add    esp,0x10
c000cd4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd53:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd57:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd5a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd61:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd75:	e8 87 95 01 00       	call   c0026301 <__gtdf2>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	85 c0                	test   eax,eax
c000cd7f:	7e 2d                	jle    c000cdae <sinc_stereo_vari_process+0x14f>
c000cd81:	68 00 00 f0 3f       	push   0x3ff00000
c000cd86:	6a 00                	push   0x0
c000cd88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd90:	e8 8a 95 01 00       	call   c002631f <__ltdf2>
c000cd95:	83 c4 10             	add    esp,0x10
c000cd98:	85 c0                	test   eax,eax
c000cd9a:	79 4d                	jns    c000cde9 <sinc_stereo_vari_process+0x18a>
c000cd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cda4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdac:	eb 1b                	jmp    c000cdc9 <sinc_stereo_vari_process+0x16a>
c000cdae:	68 00 00 f0 3f       	push   0x3ff00000
c000cdb3:	6a 00                	push   0x0
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 5d 95 01 00       	call   c002631f <__ltdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	79 20                	jns    c000cde9 <sinc_stereo_vari_process+0x18a>
c000cdc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cdd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdd9:	e8 56 8f 01 00       	call   c0025d34 <__divdf3>
c000cdde:	83 c4 10             	add    esp,0x10
c000cde1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cde5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cde9:	50                   	push   eax
c000cdea:	50                   	push   eax
c000cdeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf3:	e8 d8 96 01 00       	call   c00264d0 <lrint>
c000cdf8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cdfb:	40                   	inc    eax
c000cdfc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce00:	0f af c7             	imul   eax,edi
c000ce03:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce0a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0e:	58                   	pop    eax
c000ce0f:	5a                   	pop    edx
c000ce10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce18:	e8 b3 96 01 00       	call   c00264d0 <lrint>
c000ce1d:	83 ec 0c             	sub    esp,0xc
c000ce20:	50                   	push   eax
c000ce21:	e8 8d 92 01 00       	call   c00260b3 <__floatsidf>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	52                   	push   edx
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce3b:	e8 e4 8b 01 00       	call   c0025a24 <__subdf3>
c000ce40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	83 c4 20             	add    esp,0x20
c000ce4b:	6a 00                	push   0x0
c000ce4d:	6a 00                	push   0x0
c000ce4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce57:	e8 c3 94 01 00       	call   c002631f <__ltdf2>
c000ce5c:	83 c4 10             	add    esp,0x10
c000ce5f:	85 c0                	test   eax,eax
c000ce61:	79 1f                	jns    c000ce82 <sinc_stereo_vari_process+0x223>
c000ce63:	68 00 00 f0 3f       	push   0x3ff00000
c000ce68:	6a 00                	push   0x0
c000ce6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce72:	e8 5c 85 01 00       	call   c00253d3 <__adddf3>
c000ce77:	83 c4 10             	add    esp,0x10
c000ce7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce82:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce85:	83 ec 10             	sub    esp,0x10
c000ce88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce8c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce9f:	e8 80 8b 01 00       	call   c0025a24 <__subdf3>
c000cea4:	83 c4 18             	add    esp,0x18
c000cea7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ceaf:	52                   	push   edx
c000ceb0:	50                   	push   eax
c000ceb1:	e8 1a 96 01 00       	call   c00264d0 <lrint>
c000ceb6:	0f af f8             	imul   edi,eax
c000ceb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cebd:	01 f8                	add    eax,edi
c000cebf:	99                   	cdq    
c000cec0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cec3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cec6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ceca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cece:	68 00 00 f0 3f       	push   0x3ff00000
c000ced3:	6a 00                	push   0x0
c000ced5:	e8 5a 8e 01 00       	call   c0025d34 <__divdf3>
c000ceda:	83 c4 10             	add    esp,0x10
c000cedd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cee1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cee5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ceea:	68 23 42 92 0c       	push   0xc924223
c000ceef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cef7:	e8 d7 84 01 00       	call   c00253d3 <__adddf3>
c000cefc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf00:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf04:	83 c4 20             	add    esp,0x20
c000cf07:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf0f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf17:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf1a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf1d:	7d 50                	jge    c000cf6f <sinc_stereo_vari_process+0x310>
c000cf1f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf22:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf25:	01 c8                	add    eax,ecx
c000cf27:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf2a:	99                   	cdq    
c000cf2b:	f7 f9                	idiv   ecx
c000cf2d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf31:	7d 0c                	jge    c000cf3f <sinc_stereo_vari_process+0x2e0>
c000cf33:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf36:	85 ff                	test   edi,edi
c000cf38:	79 6c                	jns    c000cfa6 <sinc_stereo_vari_process+0x347>
c000cf3a:	e9 e7 00 00 00       	jmp    c000d026 <sinc_stereo_vari_process+0x3c7>
c000cf3f:	50                   	push   eax
c000cf40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf44:	56                   	push   esi
c000cf45:	53                   	push   ebx
c000cf46:	e8 4c e7 ff ff       	call   c000b697 <prepare_data>
c000cf4b:	83 c4 10             	add    esp,0x10
c000cf4e:	89 c2                	mov    edx,eax
c000cf50:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf53:	85 c0                	test   eax,eax
c000cf55:	0f 85 bf 03 00 00    	jne    c000d31a <sinc_stereo_vari_process+0x6bb>
c000cf5b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf5e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf61:	01 c8                	add    eax,ecx
c000cf63:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf66:	99                   	cdq    
c000cf67:	f7 f9                	idiv   ecx
c000cf69:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf6d:	7c c4                	jl     c000cf33 <sinc_stereo_vari_process+0x2d4>
c000cf6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf77:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf7a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf85:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf88:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf8b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf8e:	99                   	cdq    
c000cf8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf92:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cf95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cf98:	99                   	cdq    
c000cf99:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cf9c:	31 d2                	xor    edx,edx
c000cf9e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfa1:	e9 74 03 00 00       	jmp    c000d31a <sinc_stereo_vari_process+0x6bb>
c000cfa6:	83 ec 0c             	sub    esp,0xc
c000cfa9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfac:	e8 02 91 01 00       	call   c00260b3 <__floatsidf>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfcc:	e8 02 84 01 00       	call   c00253d3 <__adddf3>
c000cfd1:	83 c4 10             	add    esp,0x10
c000cfd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfd8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfdc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfe4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfec:	e8 e2 83 01 00       	call   c00253d3 <__adddf3>
c000cff1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cff4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cff8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cffc:	e8 b2 90 01 00       	call   c00260b3 <__floatsidf>
c000d001:	83 c4 10             	add    esp,0x10
c000d004:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d00c:	52                   	push   edx
c000d00d:	50                   	push   eax
c000d00e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d012:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d016:	e8 02 93 01 00       	call   c002631d <__gedf2>
c000d01b:	83 c4 10             	add    esp,0x10
c000d01e:	85 c0                	test   eax,eax
c000d020:	0f 89 49 ff ff ff    	jns    c000cf6f <sinc_stereo_vari_process+0x310>
c000d026:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d02a:	0f 8e ef 00 00 00    	jle    c000d11f <sinc_stereo_vari_process+0x4c0>
c000d030:	83 ec 10             	sub    esp,0x10
c000d033:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d036:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d039:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d03c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d03f:	e8 e0 89 01 00       	call   c0025a24 <__subdf3>
c000d044:	83 c4 18             	add    esp,0x18
c000d047:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d04f:	52                   	push   edx
c000d050:	50                   	push   eax
c000d051:	e8 5a 94 01 00       	call   c00264b0 <fabs>
c000d056:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d05a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d066:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d073:	e8 89 92 01 00       	call   c0026301 <__gtdf2>
c000d078:	83 c4 10             	add    esp,0x10
c000d07b:	85 c0                	test   eax,eax
c000d07d:	0f 8e 9c 00 00 00    	jle    c000d11f <sinc_stereo_vari_process+0x4c0>
c000d083:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d086:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d089:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d08d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d091:	52                   	push   edx
c000d092:	50                   	push   eax
c000d093:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d096:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d099:	e8 86 89 01 00       	call   c0025a24 <__subdf3>
c000d09e:	59                   	pop    ecx
c000d09f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0a7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0aa:	e8 04 90 01 00       	call   c00260b3 <__floatsidf>
c000d0af:	83 c4 10             	add    esp,0x10
c000d0b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0ba:	52                   	push   edx
c000d0bb:	50                   	push   eax
c000d0bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0c4:	e8 87 89 01 00       	call   c0025a50 <__muldf3>
c000d0c9:	5f                   	pop    edi
c000d0ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0ce:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0d2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0d5:	e8 d9 8f 01 00       	call   c00260b3 <__floatsidf>
c000d0da:	83 c4 10             	add    esp,0x10
c000d0dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0e5:	52                   	push   edx
c000d0e6:	50                   	push   eax
c000d0e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0ef:	e8 40 8c 01 00       	call   c0025d34 <__divdf3>
c000d0f4:	83 c4 10             	add    esp,0x10
c000d0f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d103:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d107:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10f:	e8 bf 82 01 00       	call   c00253d3 <__adddf3>
c000d114:	83 c4 10             	add    esp,0x10
c000d117:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d11b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d11f:	83 ec 0c             	sub    esp,0xc
c000d122:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d125:	e8 89 8f 01 00       	call   c00260b3 <__floatsidf>
c000d12a:	83 c4 10             	add    esp,0x10
c000d12d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d131:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d145:	e8 d5 91 01 00       	call   c002631f <__ltdf2>
c000d14a:	83 c4 10             	add    esp,0x10
c000d14d:	85 c0                	test   eax,eax
c000d14f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d153:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d157:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d15b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d15f:	78 10                	js     c000d171 <sinc_stereo_vari_process+0x512>
c000d161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d165:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d16d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d171:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d175:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d179:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d181:	e8 ca 88 01 00       	call   c0025a50 <__muldf3>
c000d186:	59                   	pop    ecx
c000d187:	5f                   	pop    edi
c000d188:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d190:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d194:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d198:	e8 d3 e4 ff ff       	call   c000b670 <double_to_fp>
c000d19d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a1:	89 c7                	mov    edi,eax
c000d1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1af:	e8 9c 88 01 00       	call   c0025a50 <__muldf3>
c000d1b4:	83 c4 18             	add    esp,0x18
c000d1b7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1bf:	52                   	push   edx
c000d1c0:	50                   	push   eax
c000d1c1:	e8 aa e4 ff ff       	call   c000b670 <double_to_fp>
c000d1c6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1c9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1cd:	83 c4 0c             	add    esp,0xc
c000d1d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1d3:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1d6:	50                   	push   eax
c000d1d7:	50                   	push   eax
c000d1d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1db:	e8 d3 8e 01 00       	call   c00260b3 <__floatsidf>
c000d1e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1e4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1f8:	e8 37 8b 01 00       	call   c0025d34 <__divdf3>
c000d1fd:	83 c4 18             	add    esp,0x18
c000d200:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d204:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d208:	52                   	push   edx
c000d209:	89 fa                	mov    edx,edi
c000d20b:	50                   	push   eax
c000d20c:	89 d8                	mov    eax,ebx
c000d20e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d212:	e8 02 c7 ff ff       	call   c0009919 <calc_output_stereo>
c000d217:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d21b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d21f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d223:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d227:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22b:	e8 04 8b 01 00       	call   c0025d34 <__divdf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d237:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d243:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d247:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d24b:	e8 83 81 01 00       	call   c00253d3 <__adddf3>
c000d250:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d254:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d258:	83 c4 18             	add    esp,0x18
c000d25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d263:	e8 68 92 01 00       	call   c00264d0 <lrint>
c000d268:	83 ec 0c             	sub    esp,0xc
c000d26b:	50                   	push   eax
c000d26c:	e8 42 8e 01 00       	call   c00260b3 <__floatsidf>
c000d271:	83 c4 10             	add    esp,0x10
c000d274:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d278:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d27c:	52                   	push   edx
c000d27d:	50                   	push   eax
c000d27e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d282:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d286:	e8 99 87 01 00       	call   c0025a24 <__subdf3>
c000d28b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d293:	83 c4 20             	add    esp,0x20
c000d296:	6a 00                	push   0x0
c000d298:	6a 00                	push   0x0
c000d29a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d29e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2a2:	e8 78 90 01 00       	call   c002631f <__ltdf2>
c000d2a7:	83 c4 10             	add    esp,0x10
c000d2aa:	85 c0                	test   eax,eax
c000d2ac:	79 20                	jns    c000d2ce <sinc_stereo_vari_process+0x66f>
c000d2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2be:	e8 10 81 01 00       	call   c00253d3 <__adddf3>
c000d2c3:	83 c4 10             	add    esp,0x10
c000d2c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2ce:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2d1:	83 ec 10             	sub    esp,0x10
c000d2d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2d8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2eb:	e8 34 87 01 00       	call   c0025a24 <__subdf3>
c000d2f0:	83 c4 18             	add    esp,0x18
c000d2f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2fb:	52                   	push   edx
c000d2fc:	50                   	push   eax
c000d2fd:	e8 ce 91 01 00       	call   c00264d0 <lrint>
c000d302:	0f af f8             	imul   edi,eax
c000d305:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d309:	83 c4 10             	add    esp,0x10
c000d30c:	01 f8                	add    eax,edi
c000d30e:	99                   	cdq    
c000d30f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d312:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d315:	e9 fd fb ff ff       	jmp    c000cf17 <sinc_stereo_vari_process+0x2b8>
c000d31a:	83 c4 4c             	add    esp,0x4c
c000d31d:	89 d0                	mov    eax,edx
c000d31f:	5b                   	pop    ebx
c000d320:	5e                   	pop    esi
c000d321:	5f                   	pop    edi
c000d322:	5d                   	pop    ebp
c000d323:	c3                   	ret    

c000d324 <sinc_mono_vari_process>:
c000d324:	55                   	push   ebp
c000d325:	ba 05 00 00 00       	mov    edx,0x5
c000d32a:	57                   	push   edi
c000d32b:	56                   	push   esi
c000d32c:	53                   	push   ebx
c000d32d:	83 ec 4c             	sub    esp,0x4c
c000d330:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d334:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d338:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d33b:	85 db                	test   ebx,ebx
c000d33d:	0f 84 c1 06 00 00    	je     c000da04 <sinc_mono_vari_process+0x6e0>
c000d343:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d346:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d349:	0f af c7             	imul   eax,edi
c000d34c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d34f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d352:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d359:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d360:	0f af c7             	imul   eax,edi
c000d363:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d366:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d36a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d36d:	8b 00                	mov    eax,DWORD PTR [eax]
c000d36f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d373:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d377:	68 00 00 70 3f       	push   0x3f700000
c000d37c:	6a 00                	push   0x0
c000d37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d386:	e8 94 8f 01 00       	call   c002631f <__ltdf2>
c000d38b:	83 c4 10             	add    esp,0x10
c000d38e:	ba 16 00 00 00       	mov    edx,0x16
c000d393:	85 c0                	test   eax,eax
c000d395:	0f 88 69 06 00 00    	js     c000da04 <sinc_mono_vari_process+0x6e0>
c000d39b:	68 00 00 70 40       	push   0x40700000
c000d3a0:	6a 00                	push   0x0
c000d3a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3aa:	e8 52 8f 01 00       	call   c0026301 <__gtdf2>
c000d3af:	83 c4 10             	add    esp,0x10
c000d3b2:	ba 16 00 00 00       	mov    edx,0x16
c000d3b7:	85 c0                	test   eax,eax
c000d3b9:	0f 8f 45 06 00 00    	jg     c000da04 <sinc_mono_vari_process+0x6e0>
c000d3bf:	83 ec 0c             	sub    esp,0xc
c000d3c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3c5:	e8 e9 8c 01 00       	call   c00260b3 <__floatsidf>
c000d3ca:	83 c4 10             	add    esp,0x10
c000d3cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3d5:	68 00 00 00 40       	push   0x40000000
c000d3da:	6a 00                	push   0x0
c000d3dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3e4:	e8 ea 7f 01 00       	call   c00253d3 <__adddf3>
c000d3e9:	59                   	pop    ecx
c000d3ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3ee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3f2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3f5:	e8 b9 8c 01 00       	call   c00260b3 <__floatsidf>
c000d3fa:	83 c4 10             	add    esp,0x10
c000d3fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d401:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d405:	52                   	push   edx
c000d406:	50                   	push   eax
c000d407:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d40f:	e8 20 89 01 00       	call   c0025d34 <__divdf3>
c000d414:	83 c4 10             	add    esp,0x10
c000d417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d41b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d41f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d422:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d425:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d429:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d42d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d43d:	e8 bf 8e 01 00       	call   c0026301 <__gtdf2>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	85 c0                	test   eax,eax
c000d447:	7e 2d                	jle    c000d476 <sinc_mono_vari_process+0x152>
c000d449:	68 00 00 f0 3f       	push   0x3ff00000
c000d44e:	6a 00                	push   0x0
c000d450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d458:	e8 c2 8e 01 00       	call   c002631f <__ltdf2>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	85 c0                	test   eax,eax
c000d462:	79 4d                	jns    c000d4b1 <sinc_mono_vari_process+0x18d>
c000d464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d468:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d46c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d470:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d474:	eb 1b                	jmp    c000d491 <sinc_mono_vari_process+0x16d>
c000d476:	68 00 00 f0 3f       	push   0x3ff00000
c000d47b:	6a 00                	push   0x0
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 95 8e 01 00       	call   c002631f <__ltdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	79 20                	jns    c000d4b1 <sinc_mono_vari_process+0x18d>
c000d491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d499:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d49d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a1:	e8 8e 88 01 00       	call   c0025d34 <__divdf3>
c000d4a6:	83 c4 10             	add    esp,0x10
c000d4a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b1:	50                   	push   eax
c000d4b2:	50                   	push   eax
c000d4b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4bb:	e8 10 90 01 00       	call   c00264d0 <lrint>
c000d4c0:	40                   	inc    eax
c000d4c1:	0f af c7             	imul   eax,edi
c000d4c4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4cc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4da:	58                   	pop    eax
c000d4db:	5a                   	pop    edx
c000d4dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e4:	e8 e7 8f 01 00       	call   c00264d0 <lrint>
c000d4e9:	83 ec 0c             	sub    esp,0xc
c000d4ec:	50                   	push   eax
c000d4ed:	e8 c1 8b 01 00       	call   c00260b3 <__floatsidf>
c000d4f2:	83 c4 10             	add    esp,0x10
c000d4f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4fd:	52                   	push   edx
c000d4fe:	50                   	push   eax
c000d4ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d503:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d507:	e8 18 85 01 00       	call   c0025a24 <__subdf3>
c000d50c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d510:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d514:	83 c4 20             	add    esp,0x20
c000d517:	6a 00                	push   0x0
c000d519:	6a 00                	push   0x0
c000d51b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d523:	e8 f7 8d 01 00       	call   c002631f <__ltdf2>
c000d528:	83 c4 10             	add    esp,0x10
c000d52b:	85 c0                	test   eax,eax
c000d52d:	79 1f                	jns    c000d54e <sinc_mono_vari_process+0x22a>
c000d52f:	68 00 00 f0 3f       	push   0x3ff00000
c000d534:	6a 00                	push   0x0
c000d536:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53e:	e8 90 7e 01 00       	call   c00253d3 <__adddf3>
c000d543:	83 c4 10             	add    esp,0x10
c000d546:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d54e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d551:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d554:	83 ec 10             	sub    esp,0x10
c000d557:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d563:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d567:	e8 b8 84 01 00       	call   c0025a24 <__subdf3>
c000d56c:	83 c4 18             	add    esp,0x18
c000d56f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d573:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d577:	52                   	push   edx
c000d578:	50                   	push   eax
c000d579:	e8 52 8f 01 00       	call   c00264d0 <lrint>
c000d57e:	0f af f8             	imul   edi,eax
c000d581:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d584:	31 ff                	xor    edi,edi
c000d586:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d58b:	99                   	cdq    
c000d58c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d58f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d592:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d596:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d59a:	55                   	push   ebp
c000d59b:	57                   	push   edi
c000d59c:	e8 93 87 01 00       	call   c0025d34 <__divdf3>
c000d5a1:	83 c4 10             	add    esp,0x10
c000d5a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5ac:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5b1:	68 23 42 92 0c       	push   0xc924223
c000d5b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5be:	e8 10 7e 01 00       	call   c00253d3 <__adddf3>
c000d5c3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5c7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5cb:	83 c4 20             	add    esp,0x20
c000d5ce:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5d2:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5d6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5d9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5dc:	7d 54                	jge    c000d632 <sinc_mono_vari_process+0x30e>
c000d5de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5e4:	01 c8                	add    eax,ecx
c000d5e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5e9:	99                   	cdq    
c000d5ea:	f7 f9                	idiv   ecx
c000d5ec:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5f0:	7d 0c                	jge    c000d5fe <sinc_mono_vari_process+0x2da>
c000d5f2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d5f5:	85 ff                	test   edi,edi
c000d5f7:	79 73                	jns    c000d66c <sinc_mono_vari_process+0x348>
c000d5f9:	e9 ee 00 00 00       	jmp    c000d6ec <sinc_mono_vari_process+0x3c8>
c000d5fe:	50                   	push   eax
c000d5ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d603:	56                   	push   esi
c000d604:	53                   	push   ebx
c000d605:	e8 8d e0 ff ff       	call   c000b697 <prepare_data>
c000d60a:	89 c2                	mov    edx,eax
c000d60c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d610:	83 c4 10             	add    esp,0x10
c000d613:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d616:	85 d2                	test   edx,edx
c000d618:	0f 85 e6 03 00 00    	jne    c000da04 <sinc_mono_vari_process+0x6e0>
c000d61e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d621:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d624:	01 c8                	add    eax,ecx
c000d626:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d629:	99                   	cdq    
c000d62a:	f7 f9                	idiv   ecx
c000d62c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d630:	7c c0                	jl     c000d5f2 <sinc_mono_vari_process+0x2ce>
c000d632:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d63a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d641:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d648:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d64c:	89 01                	mov    DWORD PTR [ecx],eax
c000d64e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d651:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d654:	99                   	cdq    
c000d655:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d658:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d65b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d65e:	99                   	cdq    
c000d65f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d662:	31 d2                	xor    edx,edx
c000d664:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d667:	e9 98 03 00 00       	jmp    c000da04 <sinc_mono_vari_process+0x6e0>
c000d66c:	83 ec 0c             	sub    esp,0xc
c000d66f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d672:	e8 3c 8a 01 00       	call   c00260b3 <__floatsidf>
c000d677:	83 c4 10             	add    esp,0x10
c000d67a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d67e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d682:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d686:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d68a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d68e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d692:	e8 3c 7d 01 00       	call   c00253d3 <__adddf3>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d69e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6b2:	e8 1c 7d 01 00       	call   c00253d3 <__adddf3>
c000d6b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6ba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6be:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6c2:	e8 ec 89 01 00       	call   c00260b3 <__floatsidf>
c000d6c7:	83 c4 10             	add    esp,0x10
c000d6ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6ce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6d2:	52                   	push   edx
c000d6d3:	50                   	push   eax
c000d6d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6dc:	e8 20 8c 01 00       	call   c0026301 <__gtdf2>
c000d6e1:	83 c4 10             	add    esp,0x10
c000d6e4:	85 c0                	test   eax,eax
c000d6e6:	0f 8f 46 ff ff ff    	jg     c000d632 <sinc_mono_vari_process+0x30e>
c000d6ec:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6f0:	0f 8e f5 00 00 00    	jle    c000d7eb <sinc_mono_vari_process+0x4c7>
c000d6f6:	83 ec 10             	sub    esp,0x10
c000d6f9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d6fc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d6ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d703:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d706:	ff 30                	push   DWORD PTR [eax]
c000d708:	e8 17 83 01 00       	call   c0025a24 <__subdf3>
c000d70d:	83 c4 18             	add    esp,0x18
c000d710:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d714:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d718:	52                   	push   edx
c000d719:	50                   	push   eax
c000d71a:	e8 91 8d 01 00       	call   c00264b0 <fabs>
c000d71f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d723:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d72f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d734:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d738:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d73c:	e8 c0 8b 01 00       	call   c0026301 <__gtdf2>
c000d741:	83 c4 10             	add    esp,0x10
c000d744:	85 c0                	test   eax,eax
c000d746:	0f 8e 9f 00 00 00    	jle    c000d7eb <sinc_mono_vari_process+0x4c7>
c000d74c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d750:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d753:	8b 00                	mov    eax,DWORD PTR [eax]
c000d755:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d759:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d75d:	52                   	push   edx
c000d75e:	50                   	push   eax
c000d75f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d762:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d765:	e8 ba 82 01 00       	call   c0025a24 <__subdf3>
c000d76a:	5f                   	pop    edi
c000d76b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d76f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d773:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d776:	e8 38 89 01 00       	call   c00260b3 <__floatsidf>
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d782:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d786:	52                   	push   edx
c000d787:	50                   	push   eax
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d790:	e8 bb 82 01 00       	call   c0025a50 <__muldf3>
c000d795:	5d                   	pop    ebp
c000d796:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d79a:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d79e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7a1:	e8 0d 89 01 00       	call   c00260b3 <__floatsidf>
c000d7a6:	83 c4 10             	add    esp,0x10
c000d7a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7b1:	52                   	push   edx
c000d7b2:	50                   	push   eax
c000d7b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7bb:	e8 74 85 01 00       	call   c0025d34 <__divdf3>
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7db:	e8 f3 7b 01 00       	call   c00253d3 <__adddf3>
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7eb:	83 ec 0c             	sub    esp,0xc
c000d7ee:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d7f1:	e8 bd 88 01 00       	call   c00260b3 <__floatsidf>
c000d7f6:	83 c4 10             	add    esp,0x10
c000d7f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d801:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d809:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d80d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d811:	e8 09 8b 01 00       	call   c002631f <__ltdf2>
c000d816:	83 c4 10             	add    esp,0x10
c000d819:	85 c0                	test   eax,eax
c000d81b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d81f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d823:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d827:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d82b:	78 10                	js     c000d83d <sinc_mono_vari_process+0x519>
c000d82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d831:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d835:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d839:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d841:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d845:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d849:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d84d:	e8 fe 81 01 00       	call   c0025a50 <__muldf3>
c000d852:	59                   	pop    ecx
c000d853:	5f                   	pop    edi
c000d854:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d858:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d85c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d860:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d864:	e8 07 de ff ff       	call   c000b670 <double_to_fp>
c000d869:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d86d:	89 c7                	mov    edi,eax
c000d86f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d873:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d877:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d87b:	e8 d0 81 01 00       	call   c0025a50 <__muldf3>
c000d880:	83 c4 18             	add    esp,0x18
c000d883:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d887:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d88b:	52                   	push   edx
c000d88c:	50                   	push   eax
c000d88d:	e8 de dd ff ff       	call   c000b670 <double_to_fp>
c000d892:	83 ec 0c             	sub    esp,0xc
c000d895:	89 c5                	mov    ebp,eax
c000d897:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d89a:	e8 14 88 01 00       	call   c00260b3 <__floatsidf>
c000d89f:	83 c4 10             	add    esp,0x10
c000d8a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8a6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8aa:	52                   	push   edx
c000d8ab:	50                   	push   eax
c000d8ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8b4:	e8 7b 84 01 00       	call   c0025d34 <__divdf3>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	89 e9                	mov    ecx,ebp
c000d8be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8c2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8c6:	89 d8                	mov    eax,ebx
c000d8c8:	89 fa                	mov    edx,edi
c000d8ca:	e8 ee bd ff ff       	call   c00096bd <calc_output_single>
c000d8cf:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8d2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8d5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8dd:	52                   	push   edx
c000d8de:	50                   	push   eax
c000d8df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8e7:	e8 64 81 01 00       	call   c0025a50 <__muldf3>
c000d8ec:	59                   	pop    ecx
c000d8ed:	59                   	pop    ecx
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8f6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fe:	e8 20 8a 01 00       	call   c0026323 <__truncdfsf2>
c000d903:	83 c4 10             	add    esp,0x10
c000d906:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d909:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d90c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d914:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91c:	e8 13 84 01 00       	call   c0025d34 <__divdf3>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d928:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d934:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d938:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d93c:	e8 92 7a 01 00       	call   c00253d3 <__adddf3>
c000d941:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d945:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d949:	83 c4 18             	add    esp,0x18
c000d94c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d950:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d954:	e8 77 8b 01 00       	call   c00264d0 <lrint>
c000d959:	83 ec 0c             	sub    esp,0xc
c000d95c:	50                   	push   eax
c000d95d:	e8 51 87 01 00       	call   c00260b3 <__floatsidf>
c000d962:	83 c4 10             	add    esp,0x10
c000d965:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d969:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d96d:	52                   	push   edx
c000d96e:	50                   	push   eax
c000d96f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d973:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d977:	e8 a8 80 01 00       	call   c0025a24 <__subdf3>
c000d97c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d980:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d984:	83 c4 20             	add    esp,0x20
c000d987:	6a 00                	push   0x0
c000d989:	6a 00                	push   0x0
c000d98b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d98f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d993:	e8 87 89 01 00       	call   c002631f <__ltdf2>
c000d998:	83 c4 10             	add    esp,0x10
c000d99b:	85 c0                	test   eax,eax
c000d99d:	79 20                	jns    c000d9bf <sinc_mono_vari_process+0x69b>
c000d99f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9af:	e8 1f 7a 01 00       	call   c00253d3 <__adddf3>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9bf:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9c5:	83 ec 10             	sub    esp,0x10
c000d9c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d8:	e8 47 80 01 00       	call   c0025a24 <__subdf3>
c000d9dd:	83 c4 18             	add    esp,0x18
c000d9e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e8:	52                   	push   edx
c000d9e9:	50                   	push   eax
c000d9ea:	e8 e1 8a 01 00       	call   c00264d0 <lrint>
c000d9ef:	83 c4 10             	add    esp,0x10
c000d9f2:	0f af f8             	imul   edi,eax
c000d9f5:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d9f8:	99                   	cdq    
c000d9f9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d9fc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d9ff:	e9 d2 fb ff ff       	jmp    c000d5d6 <sinc_mono_vari_process+0x2b2>
c000da04:	83 c4 4c             	add    esp,0x4c
c000da07:	89 d0                	mov    eax,edx
c000da09:	5b                   	pop    ebx
c000da0a:	5e                   	pop    esi
c000da0b:	5f                   	pop    edi
c000da0c:	5d                   	pop    ebp
c000da0d:	c3                   	ret    

c000da0e <sinc_get_name>:
c000da0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da12:	31 c0                	xor    eax,eax
c000da14:	83 fa 02             	cmp    edx,0x2
c000da17:	77 07                	ja     c000da20 <sinc_get_name+0x12>
c000da19:	8b 04 95 64 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd839c]
c000da20:	c3                   	ret    

c000da21 <sinc_get_description>:
c000da21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da25:	31 c0                	xor    eax,eax
c000da27:	83 fa 02             	cmp    edx,0x2
c000da2a:	77 07                	ja     c000da33 <sinc_get_description+0x12>
c000da2c:	8b 04 95 58 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd83a8]
c000da33:	c3                   	ret    

c000da34 <sinc_set_converter>:
c000da34:	53                   	push   ebx
c000da35:	81 ec 58 08 00 00    	sub    esp,0x858
c000da3b:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da42:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da45:	85 c0                	test   eax,eax
c000da47:	74 13                	je     c000da5c <sinc_set_converter+0x28>
c000da49:	83 ec 0c             	sub    esp,0xc
c000da4c:	50                   	push   eax
c000da4d:	e8 7e 1a 00 00       	call   c000f4d0 <free>
c000da52:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	50                   	push   eax
c000da5d:	68 44 08 00 00       	push   0x844
c000da62:	6a 00                	push   0x0
c000da64:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da68:	50                   	push   eax
c000da69:	e8 0e 2c ff ff       	call   c000067c <memset>
c000da6e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da71:	83 c4 10             	add    esp,0x10
c000da74:	b8 0b 00 00 00       	mov    eax,0xb
c000da79:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da7f:	7f 6e                	jg     c000daef <sinc_set_converter+0xbb>
c000da81:	83 fa 01             	cmp    edx,0x1
c000da84:	75 10                	jne    c000da96 <sinc_set_converter+0x62>
c000da86:	c7 43 24 24 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d324
c000da8d:	c7 43 20 24 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d324
c000da94:	eb 4d                	jmp    c000dae3 <sinc_set_converter+0xaf>
c000da96:	83 fa 02             	cmp    edx,0x2
c000da99:	75 10                	jne    c000daab <sinc_set_converter+0x77>
c000da9b:	c7 43 24 5f cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc5f
c000daa2:	c7 43 20 5f cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc5f
c000daa9:	eb 38                	jmp    c000dae3 <sinc_set_converter+0xaf>
c000daab:	83 fa 04             	cmp    edx,0x4
c000daae:	75 10                	jne    c000dac0 <sinc_set_converter+0x8c>
c000dab0:	c7 43 24 9a c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c59a
c000dab7:	c7 43 20 9a c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c59a
c000dabe:	eb 23                	jmp    c000dae3 <sinc_set_converter+0xaf>
c000dac0:	83 fa 06             	cmp    edx,0x6
c000dac3:	75 10                	jne    c000dad5 <sinc_set_converter+0xa1>
c000dac5:	c7 43 24 d5 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bed5
c000dacc:	c7 43 20 d5 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bed5
c000dad3:	eb 0e                	jmp    c000dae3 <sinc_set_converter+0xaf>
c000dad5:	c7 43 24 11 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b811
c000dadc:	c7 43 20 11 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b811
c000dae3:	c7 43 28 c4 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aac4
c000daea:	b8 0a 00 00 00       	mov    eax,0xa
c000daef:	81 c4 58 08 00 00    	add    esp,0x858
c000daf5:	5b                   	pop    ebx
c000daf6:	c3                   	ret    

c000daf7 <zoh_vari_process>:
c000daf7:	55                   	push   ebp
c000daf8:	31 d2                	xor    edx,edx
c000dafa:	57                   	push   edi
c000dafb:	56                   	push   esi
c000dafc:	53                   	push   ebx
c000dafd:	83 ec 3c             	sub    esp,0x3c
c000db00:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db04:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db08:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db0c:	0f 8e 80 06 00 00    	jle    c000e192 <zoh_vari_process+0x69b>
c000db12:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db15:	ba 05 00 00 00       	mov    edx,0x5
c000db1a:	85 db                	test   ebx,ebx
c000db1c:	0f 84 70 06 00 00    	je     c000e192 <zoh_vari_process+0x69b>
c000db22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db25:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db29:	74 19                	je     c000db44 <zoh_vari_process+0x4d>
c000db2b:	31 d2                	xor    edx,edx
c000db2d:	39 c2                	cmp    edx,eax
c000db2f:	7d 0c                	jge    c000db3d <zoh_vari_process+0x46>
c000db31:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db33:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db36:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db3a:	42                   	inc    edx
c000db3b:	eb f0                	jmp    c000db2d <zoh_vari_process+0x36>
c000db3d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db44:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db47:	0f af d0             	imul   edx,eax
c000db4a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db4d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db51:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db58:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db5b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db62:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db65:	8b 07                	mov    eax,DWORD PTR [edi]
c000db67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db6f:	68 00 00 70 3f       	push   0x3f700000
c000db74:	6a 00                	push   0x0
c000db76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db7e:	e8 9c 87 01 00       	call   c002631f <__ltdf2>
c000db83:	83 c4 10             	add    esp,0x10
c000db86:	ba 16 00 00 00       	mov    edx,0x16
c000db8b:	85 c0                	test   eax,eax
c000db8d:	0f 88 ff 05 00 00    	js     c000e192 <zoh_vari_process+0x69b>
c000db93:	68 00 00 70 40       	push   0x40700000
c000db98:	6a 00                	push   0x0
c000db9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dba2:	e8 5a 87 01 00       	call   c0026301 <__gtdf2>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	ba 16 00 00 00       	mov    edx,0x16
c000dbaf:	85 c0                	test   eax,eax
c000dbb1:	0f 8f db 05 00 00    	jg     c000e192 <zoh_vari_process+0x69b>
c000dbb7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbba:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbbd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbc1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbc5:	68 00 00 f0 3f       	push   0x3ff00000
c000dbca:	6a 00                	push   0x0
c000dbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd4:	e8 46 87 01 00       	call   c002631f <__ltdf2>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	0f 89 da 01 00 00    	jns    c000ddbe <zoh_vari_process+0x2c7>
c000dbe4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbe7:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbea:	0f 8d ce 01 00 00    	jge    c000ddbe <zoh_vari_process+0x2c7>
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dbf6:	e8 b8 84 01 00       	call   c00260b3 <__floatsidf>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc15:	e8 36 7e 01 00       	call   c0025a50 <__muldf3>
c000dc1a:	59                   	pop    ecx
c000dc1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc1f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc23:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc26:	e8 88 84 01 00       	call   c00260b3 <__floatsidf>
c000dc2b:	83 c4 10             	add    esp,0x10
c000dc2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc36:	52                   	push   edx
c000dc37:	50                   	push   eax
c000dc38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc40:	e8 8e 77 01 00       	call   c00253d3 <__adddf3>
c000dc45:	59                   	pop    ecx
c000dc46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc4a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc4e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc51:	e8 5d 84 01 00       	call   c00260b3 <__floatsidf>
c000dc56:	83 c4 10             	add    esp,0x10
c000dc59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc5d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc61:	52                   	push   edx
c000dc62:	50                   	push   eax
c000dc63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc6b:	e8 ad 86 01 00       	call   c002631d <__gedf2>
c000dc70:	83 c4 10             	add    esp,0x10
c000dc73:	85 c0                	test   eax,eax
c000dc75:	0f 89 43 01 00 00    	jns    c000ddbe <zoh_vari_process+0x2c7>
c000dc7b:	85 ed                	test   ebp,ebp
c000dc7d:	0f 8e ec 00 00 00    	jle    c000dd6f <zoh_vari_process+0x278>
c000dc83:	83 ec 10             	sub    esp,0x10
c000dc86:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc89:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc8c:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc8f:	ff 37                	push   DWORD PTR [edi]
c000dc91:	e8 8e 7d 01 00       	call   c0025a24 <__subdf3>
c000dc96:	83 c4 18             	add    esp,0x18
c000dc99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dca1:	52                   	push   edx
c000dca2:	50                   	push   eax
c000dca3:	e8 08 88 01 00       	call   c00264b0 <fabs>
c000dca8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcb0:	83 c4 10             	add    esp,0x10
c000dcb3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcb8:	68 23 42 92 0c       	push   0xc924223
c000dcbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcc5:	e8 37 86 01 00       	call   c0026301 <__gtdf2>
c000dcca:	83 c4 10             	add    esp,0x10
c000dccd:	85 c0                	test   eax,eax
c000dccf:	0f 8e 9a 00 00 00    	jle    c000dd6f <zoh_vari_process+0x278>
c000dcd5:	8b 07                	mov    eax,DWORD PTR [edi]
c000dcd7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dcda:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcdd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dce1:	52                   	push   edx
c000dce2:	50                   	push   eax
c000dce3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dce6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dce9:	e8 36 7d 01 00       	call   c0025a24 <__subdf3>
c000dcee:	59                   	pop    ecx
c000dcef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcf3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcf7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcfa:	e8 b4 83 01 00       	call   c00260b3 <__floatsidf>
c000dcff:	83 c4 10             	add    esp,0x10
c000dd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd0a:	52                   	push   edx
c000dd0b:	50                   	push   eax
c000dd0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd14:	e8 37 7d 01 00       	call   c0025a50 <__muldf3>
c000dd19:	5d                   	pop    ebp
c000dd1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd22:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd25:	e8 89 83 01 00       	call   c00260b3 <__floatsidf>
c000dd2a:	83 c4 10             	add    esp,0x10
c000dd2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd31:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd35:	52                   	push   edx
c000dd36:	50                   	push   eax
c000dd37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd3f:	e8 f0 7f 01 00       	call   c0025d34 <__divdf3>
c000dd44:	83 c4 10             	add    esp,0x10
c000dd47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd4f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd53:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5f:	e8 6f 76 01 00       	call   c00253d3 <__adddf3>
c000dd64:	83 c4 10             	add    esp,0x10
c000dd67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd6f:	31 c0                	xor    eax,eax
c000dd71:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd74:	7e 13                	jle    c000dd89 <zoh_vari_process+0x292>
c000dd76:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd7a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd7d:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd80:	40                   	inc    eax
c000dd81:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd84:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd87:	eb e8                	jmp    c000dd71 <zoh_vari_process+0x27a>
c000dd89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd8d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd91:	68 00 00 f0 3f       	push   0x3ff00000
c000dd96:	6a 00                	push   0x0
c000dd98:	e8 97 7f 01 00       	call   c0025d34 <__divdf3>
c000dd9d:	83 c4 10             	add    esp,0x10
c000dda0:	89 04 24             	mov    DWORD PTR [esp],eax
c000dda3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dda7:	52                   	push   edx
c000dda8:	50                   	push   eax
c000dda9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddb1:	e8 1d 76 01 00       	call   c00253d3 <__adddf3>
c000ddb6:	83 c4 10             	add    esp,0x10
c000ddb9:	e9 ff fd ff ff       	jmp    c000dbbd <zoh_vari_process+0xc6>
c000ddbe:	55                   	push   ebp
c000ddbf:	55                   	push   ebp
c000ddc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc8:	e8 03 87 01 00       	call   c00264d0 <lrint>
c000ddcd:	83 ec 0c             	sub    esp,0xc
c000ddd0:	50                   	push   eax
c000ddd1:	e8 dd 82 01 00       	call   c00260b3 <__floatsidf>
c000ddd6:	83 c4 10             	add    esp,0x10
c000ddd9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dddd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dde1:	52                   	push   edx
c000dde2:	50                   	push   eax
c000dde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddeb:	e8 34 7c 01 00       	call   c0025a24 <__subdf3>
c000ddf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ddf4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ddf8:	83 c4 20             	add    esp,0x20
c000ddfb:	6a 00                	push   0x0
c000ddfd:	6a 00                	push   0x0
c000ddff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de07:	e8 13 85 01 00       	call   c002631f <__ltdf2>
c000de0c:	83 c4 10             	add    esp,0x10
c000de0f:	85 c0                	test   eax,eax
c000de11:	79 1e                	jns    c000de31 <zoh_vari_process+0x33a>
c000de13:	68 00 00 f0 3f       	push   0x3ff00000
c000de18:	6a 00                	push   0x0
c000de1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de22:	e8 ac 75 01 00       	call   c00253d3 <__adddf3>
c000de27:	83 c4 10             	add    esp,0x10
c000de2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000de2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de31:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de34:	83 ec 10             	sub    esp,0x10
c000de37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de47:	e8 d8 7b 01 00       	call   c0025a24 <__subdf3>
c000de4c:	83 c4 18             	add    esp,0x18
c000de4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de53:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de57:	52                   	push   edx
c000de58:	50                   	push   eax
c000de59:	e8 72 86 01 00       	call   c00264d0 <lrint>
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	0f af e8             	imul   ebp,eax
c000de64:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de67:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de6a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de6e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de71:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de78:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de7b:	0f 8d 7a 02 00 00    	jge    c000e0fb <zoh_vari_process+0x604>
c000de81:	83 ec 0c             	sub    esp,0xc
c000de84:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de87:	e8 27 82 01 00       	call   c00260b3 <__floatsidf>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000de9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dea7:	e8 a4 7b 01 00       	call   c0025a50 <__muldf3>
c000deac:	59                   	pop    ecx
c000dead:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000deb1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000deb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb9:	e8 f5 81 01 00       	call   c00260b3 <__floatsidf>
c000debe:	83 c4 10             	add    esp,0x10
c000dec1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dec5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dec9:	52                   	push   edx
c000deca:	50                   	push   eax
c000decb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000decf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ded3:	e8 fb 74 01 00       	call   c00253d3 <__adddf3>
c000ded8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000dedb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dedf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dee3:	e8 cb 81 01 00       	call   c00260b3 <__floatsidf>
c000dee8:	83 c4 10             	add    esp,0x10
c000deeb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000deef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000def3:	52                   	push   edx
c000def4:	50                   	push   eax
c000def5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000def9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000defd:	e8 1f 84 01 00       	call   c0026321 <__ledf2>
c000df02:	83 c4 10             	add    esp,0x10
c000df05:	85 c0                	test   eax,eax
c000df07:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df0b:	0f 8f ea 01 00 00    	jg     c000e0fb <zoh_vari_process+0x604>
c000df11:	85 c9                	test   ecx,ecx
c000df13:	0f 8e ed 00 00 00    	jle    c000e006 <zoh_vari_process+0x50f>
c000df19:	83 ec 10             	sub    esp,0x10
c000df1c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df1f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df22:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df25:	ff 37                	push   DWORD PTR [edi]
c000df27:	e8 f8 7a 01 00       	call   c0025a24 <__subdf3>
c000df2c:	83 c4 18             	add    esp,0x18
c000df2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df37:	52                   	push   edx
c000df38:	50                   	push   eax
c000df39:	e8 72 85 01 00       	call   c00264b0 <fabs>
c000df3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df42:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df4e:	68 23 42 92 0c       	push   0xc924223
c000df53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5b:	e8 a1 83 01 00       	call   c0026301 <__gtdf2>
c000df60:	83 c4 10             	add    esp,0x10
c000df63:	85 c0                	test   eax,eax
c000df65:	0f 8e 9b 00 00 00    	jle    c000e006 <zoh_vari_process+0x50f>
c000df6b:	8b 07                	mov    eax,DWORD PTR [edi]
c000df6d:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df78:	52                   	push   edx
c000df79:	50                   	push   eax
c000df7a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df7d:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df80:	e8 9f 7a 01 00       	call   c0025a24 <__subdf3>
c000df85:	5d                   	pop    ebp
c000df86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df8e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df91:	e8 1d 81 01 00       	call   c00260b3 <__floatsidf>
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfa1:	52                   	push   edx
c000dfa2:	50                   	push   eax
c000dfa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfab:	e8 a0 7a 01 00       	call   c0025a50 <__muldf3>
c000dfb0:	59                   	pop    ecx
c000dfb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfb5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfb9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfbc:	e8 f2 80 01 00       	call   c00260b3 <__floatsidf>
c000dfc1:	83 c4 10             	add    esp,0x10
c000dfc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 59 7d 01 00       	call   c0025d34 <__divdf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfe2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dfe6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff6:	e8 d8 73 01 00       	call   c00253d3 <__adddf3>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e002:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e006:	31 d2                	xor    edx,edx
c000e008:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e00b:	39 d0                	cmp    eax,edx
c000e00d:	7e 1d                	jle    c000e02c <zoh_vari_process+0x535>
c000e00f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e012:	29 c1                	sub    ecx,eax
c000e014:	89 c8                	mov    eax,ecx
c000e016:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e018:	01 d0                	add    eax,edx
c000e01a:	42                   	inc    edx
c000e01b:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e01e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e021:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e024:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e027:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e02a:	eb dc                	jmp    c000e008 <zoh_vari_process+0x511>
c000e02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e030:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e034:	68 00 00 f0 3f       	push   0x3ff00000
c000e039:	6a 00                	push   0x0
c000e03b:	e8 f4 7c 01 00       	call   c0025d34 <__divdf3>
c000e040:	83 c4 10             	add    esp,0x10
c000e043:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e047:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e04b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e04f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05b:	e8 73 73 01 00       	call   c00253d3 <__adddf3>
c000e060:	5d                   	pop    ebp
c000e061:	59                   	pop    ecx
c000e062:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e06a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e072:	e8 59 84 01 00       	call   c00264d0 <lrint>
c000e077:	83 ec 0c             	sub    esp,0xc
c000e07a:	50                   	push   eax
c000e07b:	e8 33 80 01 00       	call   c00260b3 <__floatsidf>
c000e080:	83 c4 10             	add    esp,0x10
c000e083:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e087:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e08b:	52                   	push   edx
c000e08c:	50                   	push   eax
c000e08d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e091:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e095:	e8 8a 79 01 00       	call   c0025a24 <__subdf3>
c000e09a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e09e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0a2:	83 c4 20             	add    esp,0x20
c000e0a5:	6a 00                	push   0x0
c000e0a7:	6a 00                	push   0x0
c000e0a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0ad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0b1:	e8 69 82 01 00       	call   c002631f <__ltdf2>
c000e0b6:	83 c4 10             	add    esp,0x10
c000e0b9:	85 c0                	test   eax,eax
c000e0bb:	79 1e                	jns    c000e0db <zoh_vari_process+0x5e4>
c000e0bd:	68 00 00 f0 3f       	push   0x3ff00000
c000e0c2:	6a 00                	push   0x0
c000e0c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0cc:	e8 02 73 01 00       	call   c00253d3 <__adddf3>
c000e0d1:	83 c4 10             	add    esp,0x10
c000e0d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0db:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0de:	83 ec 10             	sub    esp,0x10
c000e0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f1:	e8 2e 79 01 00       	call   c0025a24 <__subdf3>
c000e0f6:	e9 51 fd ff ff       	jmp    c000de4c <zoh_vari_process+0x355>
c000e0fb:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e0ff:	7d 3a                	jge    c000e13b <zoh_vari_process+0x644>
c000e101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e105:	83 ec 0c             	sub    esp,0xc
c000e108:	29 e8                	sub    eax,ebp
c000e10a:	99                   	cdq    
c000e10b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e10e:	50                   	push   eax
c000e10f:	e8 9f 7f 01 00       	call   c00260b3 <__floatsidf>
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e11b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e11f:	52                   	push   edx
c000e120:	50                   	push   eax
c000e121:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e125:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e129:	e8 a5 72 01 00       	call   c00253d3 <__adddf3>
c000e12e:	83 c4 10             	add    esp,0x10
c000e131:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e134:	89 04 24             	mov    DWORD PTR [esp],eax
c000e137:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e13b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e13e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e142:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e145:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e148:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e14b:	85 c0                	test   eax,eax
c000e14d:	7f 25                	jg     c000e174 <zoh_vari_process+0x67d>
c000e14f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e153:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e157:	89 07                	mov    DWORD PTR [edi],eax
c000e159:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e15c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15f:	99                   	cdq    
c000e160:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e163:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e166:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e169:	99                   	cdq    
c000e16a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e16d:	31 d2                	xor    edx,edx
c000e16f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e172:	eb 1e                	jmp    c000e192 <zoh_vari_process+0x69b>
c000e174:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e177:	31 d2                	xor    edx,edx
c000e179:	29 c8                	sub    eax,ecx
c000e17b:	c1 e0 02             	shl    eax,0x2
c000e17e:	39 d1                	cmp    ecx,edx
c000e180:	7e cd                	jle    c000e14f <zoh_vari_process+0x658>
c000e182:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e184:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e188:	83 c0 04             	add    eax,0x4
c000e18b:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e18f:	42                   	inc    edx
c000e190:	eb ec                	jmp    c000e17e <zoh_vari_process+0x687>
c000e192:	83 c4 3c             	add    esp,0x3c
c000e195:	89 d0                	mov    eax,edx
c000e197:	5b                   	pop    ebx
c000e198:	5e                   	pop    esi
c000e199:	5f                   	pop    edi
c000e19a:	5d                   	pop    ebp
c000e19b:	c3                   	ret    

c000e19c <zoh_reset>:
c000e19c:	83 ec 0c             	sub    esp,0xc
c000e19f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1a3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1a6:	85 c0                	test   eax,eax
c000e1a8:	74 20                	je     c000e1ca <zoh_reset+0x2e>
c000e1aa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1ad:	83 c0 1c             	add    eax,0x1c
c000e1b0:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1b3:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1ba:	c1 e2 02             	shl    edx,0x2
c000e1bd:	51                   	push   ecx
c000e1be:	52                   	push   edx
c000e1bf:	6a 00                	push   0x0
c000e1c1:	50                   	push   eax
c000e1c2:	e8 b5 24 ff ff       	call   c000067c <memset>
c000e1c7:	83 c4 10             	add    esp,0x10
c000e1ca:	83 c4 0c             	add    esp,0xc
c000e1cd:	c3                   	ret    

c000e1ce <zoh_get_name>:
c000e1ce:	31 c0                	xor    eax,eax
c000e1d0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1d5:	75 05                	jne    c000e1dc <zoh_get_name+0xe>
c000e1d7:	b8 7e 7d 02 c0       	mov    eax,0xc0027d7e
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_description>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_description+0xe>
c000e1e6:	b8 8f 7d 02 c0       	mov    eax,0xc0027d8f
c000e1eb:	c3                   	ret    

c000e1ec <zoh_set_converter>:
c000e1ec:	53                   	push   ebx
c000e1ed:	b8 0a 00 00 00       	mov    eax,0xa
c000e1f2:	83 ec 08             	sub    esp,0x8
c000e1f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1f9:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e1fe:	75 6e                	jne    c000e26e <zoh_set_converter+0x82>
c000e200:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e203:	85 c0                	test   eax,eax
c000e205:	74 13                	je     c000e21a <zoh_set_converter+0x2e>
c000e207:	83 ec 0c             	sub    esp,0xc
c000e20a:	50                   	push   eax
c000e20b:	e8 c0 12 00 00       	call   c000f4d0 <free>
c000e210:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e217:	83 c4 10             	add    esp,0x10
c000e21a:	50                   	push   eax
c000e21b:	50                   	push   eax
c000e21c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e21f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e226:	50                   	push   eax
c000e227:	6a 01                	push   0x1
c000e229:	e8 c2 12 00 00       	call   c000f4f0 <calloc>
c000e22e:	83 c4 10             	add    esp,0x10
c000e231:	89 c2                	mov    edx,eax
c000e233:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e236:	85 d2                	test   edx,edx
c000e238:	b8 01 00 00 00       	mov    eax,0x1
c000e23d:	74 2f                	je     c000e26e <zoh_set_converter+0x82>
c000e23f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e242:	83 ec 0c             	sub    esp,0xc
c000e245:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e248:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e24e:	c7 43 24 f7 da 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000daf7
c000e255:	c7 43 20 f7 da 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000daf7
c000e25c:	c7 43 28 9c e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e19c
c000e263:	53                   	push   ebx
c000e264:	e8 33 ff ff ff       	call   c000e19c <zoh_reset>
c000e269:	83 c4 10             	add    esp,0x10
c000e26c:	31 c0                	xor    eax,eax
c000e26e:	83 c4 08             	add    esp,0x8
c000e271:	5b                   	pop    ebx
c000e272:	c3                   	ret    

c000e273 <CPU::current()>:
c000e273:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000e278:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e27e:	90                   	nop
c000e27f:	c3                   	ret    

c000e280 <operator new(unsigned long)>:
c000e280:	83 ec 0c             	sub    esp,0xc
c000e283:	83 ec 0c             	sub    esp,0xc
c000e286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e28a:	e8 31 12 00 00       	call   c000f4c0 <malloc>
c000e28f:	83 c4 10             	add    esp,0x10
c000e292:	83 c4 0c             	add    esp,0xc
c000e295:	c3                   	ret    

c000e296 <Computer::close(int, int, void*)>:
c000e296:	57                   	push   edi
c000e297:	56                   	push   esi
c000e298:	53                   	push   ebx
c000e299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e29d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2a5:	83 ec 0c             	sub    esp,0xc
c000e2a8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2ae:	e8 3f 59 00 00       	call   c0013bf2 <Device::closeAll()>
c000e2b3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2be:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2c2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2ca:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d2:	5b                   	pop    ebx
c000e2d3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2d6:	5e                   	pop    esi
c000e2d7:	5f                   	pop    edi
c000e2d8:	ff e0                	jmp    eax

c000e2da <Computer::Computer()>:
c000e2da:	83 ec 0c             	sub    esp,0xc
c000e2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 c6 7d 02 c0       	push   0xc0027dc6
c000e2e9:	50                   	push   eax
c000e2ea:	e8 7d 59 00 00       	call   c0013c6c <Device::Device(char const*)>
c000e2ef:	83 c4 10             	add    esp,0x10
c000e2f2:	ba 90 7f 02 c0       	mov    edx,0xc0027f90
c000e2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fb:	89 10                	mov    DWORD PTR [eax],edx
c000e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e301:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e323:	83 ca 04             	or     edx,0x4
c000e326:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e330:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e336:	0f b6 d0             	movzx  edx,al
c000e339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e33d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e348:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e34e:	0f b6 d0             	movzx  edx,al
c000e351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e355:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e364:	8d 50 01             	lea    edx,[eax+0x1]
c000e367:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e36b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e371:	0f b6 d0             	movzx  edx,al
c000e374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e378:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e37c:	83 e1 3f             	and    ecx,0x3f
c000e37f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e387:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e38d:	0f b6 d0             	movzx  edx,al
c000e390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e394:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e39f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3a5:	0f b6 d0             	movzx  edx,al
c000e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ac:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3c8:	0f b6 d0             	movzx  edx,al
c000e3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3d3:	83 e1 3f             	and    ecx,0x3f
c000e3d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3e4:	0f b6 d0             	movzx  edx,al
c000e3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3eb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3fc:	0f b6 d0             	movzx  edx,al
c000e3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e403:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e412:	8d 50 01             	lea    edx,[eax+0x1]
c000e415:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e419:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e41f:	0f b6 d0             	movzx  edx,al
c000e422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e426:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e42a:	83 e1 3f             	and    ecx,0x3f
c000e42d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e431:	90                   	nop
c000e432:	83 c4 0c             	add    esp,0xc
c000e435:	c3                   	ret    

c000e436 <Computer::setBootMessage(char const*)>:
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <Computer::start()>:
c000e438:	56                   	push   esi
c000e439:	53                   	push   ebx
c000e43a:	83 ec 10             	sub    esp,0x10
c000e43d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e441:	fb                   	sti    
c000e442:	68 3b 07 00 00       	push   0x73b
c000e447:	e8 74 10 00 00       	call   c000f4c0 <malloc>
c000e44c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e453:	89 c6                	mov    esi,eax
c000e455:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c000e45b:	68 cf 7d 02 c0       	push   0xc0027dcf
c000e460:	6a 01                	push   0x1
c000e462:	50                   	push   eax
c000e463:	e8 84 db 00 00       	call   c001bfec <Process::Process(bool, char const*, Process*, char**)>
c000e468:	83 c4 20             	add    esp,0x20
c000e46b:	68 ff 00 00 00       	push   0xff
c000e470:	6a 00                	push   0x0
c000e472:	68 55 ee 00 c0       	push   0xc000ee55
c000e477:	56                   	push   esi
c000e478:	e8 51 de 00 00       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c000e47d:	6a 7a                	push   0x7a
c000e47f:	6a 00                	push   0x0
c000e481:	68 07 cb 01 c0       	push   0xc001cb07
c000e486:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c000e48c:	e8 3d de 00 00       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c000e491:	83 c4 20             	add    esp,0x20
c000e494:	a3 48 d2 02 c0       	mov    ds:0xc002d248,eax
c000e499:	e8 1b ea 00 00       	call   c001ceb9 <Vm::initialise8086()>
c000e49e:	c6 05 8d bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd8d,0x1
c000e4a5:	e8 3e 45 00 00       	call   c00129e8 <initVFS()>
c000e4aa:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4b2:	6a 00                	push   0x0
c000e4b4:	6a 00                	push   0x0
c000e4b6:	6a 00                	push   0x0
c000e4b8:	50                   	push   eax
c000e4b9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4bc:	e8 f0 c4 00 00       	call   c001a9b1 <setupSystemCalls()>
c000e4c1:	e8 34 50 00 00       	call   c00134fa <loadClockSettings()>
c000e4c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4c9:	e8 f8 56 00 00       	call   c0013bc6 <Device::loadDriversForAll()>
c000e4ce:	58                   	pop    eax
c000e4cf:	8b 1d 88 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd88
c000e4d5:	5a                   	pop    edx
c000e4d6:	6a 01                	push   0x1
c000e4d8:	68 dc 7d 02 c0       	push   0xc0027ddc
c000e4dd:	e8 7f d6 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c000e4e2:	59                   	pop    ecx
c000e4e3:	5e                   	pop    esi
c000e4e4:	53                   	push   ebx
c000e4e5:	50                   	push   eax
c000e4e6:	e8 85 d8 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c000e4eb:	c7 04 24 48 90 02 c0 	mov    DWORD PTR [esp],0xc0029048
c000e4f2:	e8 96 41 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	83 ec 0c             	sub    esp,0xc
c000e4fd:	6a 02                	push   0x2
c000e4ff:	e8 2e e1 00 00       	call   c001c632 <blockTask(TaskState)>
c000e504:	83 c4 10             	add    esp,0x10
c000e507:	eb f1                	jmp    c000e4fa <Computer::start()+0xc2>

c000e509 <firstTask()>:
c000e509:	83 ec 18             	sub    esp,0x18
c000e50c:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c000e512:	e8 21 ff ff ff       	call   c000e438 <Computer::start()>
c000e517:	90                   	nop

c000e518 <Computer::detectFeatures()>:
c000e518:	55                   	push   ebp
c000e519:	57                   	push   edi
c000e51a:	56                   	push   esi
c000e51b:	53                   	push   ebx
c000e51c:	83 ec 1c             	sub    esp,0x1c
c000e51f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e523:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e52d:	e8 67 1d ff ff       	call   c0000299 <detectCPUID>
c000e532:	85 c0                	test   eax,eax
c000e534:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e53a:	0f 95 c2             	setne  dl
c000e53d:	83 e0 fd             	and    eax,0xfffffffd
c000e540:	d1 e2                	shl    edx,1
c000e542:	09 d0                	or     eax,edx
c000e544:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e54a:	a8 02                	test   al,0x2
c000e54c:	75 46                	jne    c000e594 <Computer::detectFeatures()+0x7c>
c000e54e:	f6 05 a1 bd 02 c0 04 	test   BYTE PTR ds:0xc002bda1,0x4
c000e555:	74 07                	je     c000e55e <Computer::detectFeatures()+0x46>
c000e557:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e55e:	e8 b3 5f 01 00       	call   c0024516 <x87Detect>
c000e563:	83 e0 01             	and    eax,0x1
c000e566:	c1 e0 04             	shl    eax,0x4
c000e569:	88 c2                	mov    dl,al
c000e56b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e571:	83 e0 ef             	and    eax,0xffffffef
c000e574:	09 d0                	or     eax,edx
c000e576:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e57c:	a8 10                	test   al,0x10
c000e57e:	0f 85 2a 01 00 00    	jne    c000e6ae <Computer::detectFeatures()+0x196>
c000e584:	84 c0                	test   al,al
c000e586:	0f 88 45 01 00 00    	js     c000e6d1 <Computer::detectFeatures()+0x1b9>
c000e58c:	83 c4 1c             	add    esp,0x1c
c000e58f:	5b                   	pop    ebx
c000e590:	5e                   	pop    esi
c000e591:	5f                   	pop    edi
c000e592:	5d                   	pop    ebp
c000e593:	c3                   	ret    
c000e594:	83 ec 0c             	sub    esp,0xc
c000e597:	6a 20                	push   0x20
c000e599:	e8 16 9a 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e59e:	83 e0 01             	and    eax,0x1
c000e5a1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5a8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5ae:	83 e0 f7             	and    eax,0xfffffff7
c000e5b1:	09 d0                	or     eax,edx
c000e5b3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5b9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5c0:	e8 ef 99 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5c5:	83 e0 01             	and    eax,0x1
c000e5c8:	88 c2                	mov    dl,al
c000e5ca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5d0:	83 e0 fe             	and    eax,0xfffffffe
c000e5d3:	09 d0                	or     eax,edx
c000e5d5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5db:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5e2:	e8 cd 99 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e5e7:	c1 e0 07             	shl    eax,0x7
c000e5ea:	88 c2                	mov    dl,al
c000e5ec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5f2:	83 e0 7f             	and    eax,0x7f
c000e5f5:	09 d0                	or     eax,edx
c000e5f7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5fd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e604:	e8 ab 99 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e609:	83 c4 10             	add    esp,0x10
c000e60c:	83 e0 01             	and    eax,0x1
c000e60f:	c1 e0 05             	shl    eax,0x5
c000e612:	88 c2                	mov    dl,al
c000e614:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e61a:	83 e0 df             	and    eax,0xffffffdf
c000e61d:	09 d0                	or     eax,edx
c000e61f:	f7 05 a0 bd 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002bda0,0x401
c000e629:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e62f:	0f 84 c2 00 00 00    	je     c000e6f7 <Computer::detectFeatures()+0x1df>
c000e635:	83 e0 fe             	and    eax,0xfffffffe
c000e638:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e63e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e644:	88 c2                	mov    dl,al
c000e646:	83 e2 09             	and    edx,0x9
c000e649:	fe ca                	dec    dl
c000e64b:	75 09                	jne    c000e656 <Computer::detectFeatures()+0x13e>
c000e64d:	83 e0 fe             	and    eax,0xfffffffe
c000e650:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e656:	83 ec 0c             	sub    esp,0xc
c000e659:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e65d:	50                   	push   eax
c000e65e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e662:	55                   	push   ebp
c000e663:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e667:	57                   	push   edi
c000e668:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e66c:	56                   	push   esi
c000e66d:	68 00 00 00 80       	push   0x80000000
c000e672:	e8 b9 98 00 00       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e677:	83 c4 20             	add    esp,0x20
c000e67a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e681:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e685:	0f 86 c3 fe ff ff    	jbe    c000e54e <Computer::detectFeatures()+0x36>
c000e68b:	83 ec 0c             	sub    esp,0xc
c000e68e:	50                   	push   eax
c000e68f:	55                   	push   ebp
c000e690:	57                   	push   edi
c000e691:	56                   	push   esi
c000e692:	68 01 00 00 80       	push   0x80000001
c000e697:	e8 94 98 00 00       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e69c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6a6:	83 c4 20             	add    esp,0x20
c000e6a9:	e9 a0 fe ff ff       	jmp    c000e54e <Computer::detectFeatures()+0x36>
c000e6ae:	e8 1d 5e 01 00       	call   c00244d0 <absolutelyNoChanceInHell>
c000e6b3:	88 c2                	mov    dl,al
c000e6b5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6bb:	c1 e2 07             	shl    edx,0x7
c000e6be:	83 e0 7f             	and    eax,0x7f
c000e6c1:	09 d0                	or     eax,edx
c000e6c3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6c9:	84 c0                	test   al,al
c000e6cb:	0f 89 bb fe ff ff    	jns    c000e58c <Computer::detectFeatures()+0x74>
c000e6d1:	e8 da 5d 01 00       	call   c00244b0 <avxDetect>
c000e6d6:	83 e0 01             	and    eax,0x1
c000e6d9:	c1 e0 05             	shl    eax,0x5
c000e6dc:	88 c2                	mov    dl,al
c000e6de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6e4:	83 e0 df             	and    eax,0xffffffdf
c000e6e7:	09 d0                	or     eax,edx
c000e6e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e6ef:	83 c4 1c             	add    esp,0x1c
c000e6f2:	5b                   	pop    ebx
c000e6f3:	5e                   	pop    esi
c000e6f4:	5f                   	pop    edi
c000e6f5:	5d                   	pop    ebp
c000e6f6:	c3                   	ret    
c000e6f7:	83 ec 0c             	sub    esp,0xc
c000e6fa:	68 00 02 00 00       	push   0x200
c000e6ff:	e8 b0 98 00 00       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c000e704:	83 c4 10             	add    esp,0x10
c000e707:	83 e0 01             	and    eax,0x1
c000e70a:	88 c2                	mov    dl,al
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 fe             	and    eax,0xfffffffe
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	e9 1c ff ff ff       	jmp    c000e63e <Computer::detectFeatures()+0x126>

c000e722 <Computer::displayFeatures()>:
c000e722:	53                   	push   ebx
c000e723:	83 ec 14             	sub    esp,0x14
c000e726:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e72a:	68 ff 7d 02 c0       	push   0xc0027dff
c000e72f:	e8 59 3f 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e73e:	0f 85 73 02 00 00    	jne    c000e9b7 <Computer::displayFeatures()+0x295>
c000e744:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e749:	83 ec 08             	sub    esp,0x8
c000e74c:	50                   	push   eax
c000e74d:	68 12 7e 02 c0       	push   0xc0027e12
c000e752:	e8 36 3f 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e757:	83 c4 10             	add    esp,0x10
c000e75a:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e761:	0f 85 8c 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2d1>
c000e767:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e76c:	83 ec 08             	sub    esp,0x8
c000e76f:	50                   	push   eax
c000e770:	68 23 7e 02 c0       	push   0xc0027e23
c000e775:	e8 13 3f 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e77a:	83 c4 10             	add    esp,0x10
c000e77d:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e784:	0f 85 5f 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2c7>
c000e78a:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e78f:	83 ec 08             	sub    esp,0x8
c000e792:	50                   	push   eax
c000e793:	68 34 7e 02 c0       	push   0xc0027e34
c000e798:	e8 f0 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e79d:	83 c4 10             	add    esp,0x10
c000e7a0:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7a7:	0f 85 32 02 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2bd>
c000e7ad:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e7b2:	83 ec 08             	sub    esp,0x8
c000e7b5:	50                   	push   eax
c000e7b6:	68 45 7e 02 c0       	push   0xc0027e45
c000e7bb:	e8 cd 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e7c0:	83 c4 10             	add    esp,0x10
c000e7c3:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7ca:	0f 85 05 02 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x2b3>
c000e7d0:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e7d5:	83 ec 08             	sub    esp,0x8
c000e7d8:	50                   	push   eax
c000e7d9:	68 56 7e 02 c0       	push   0xc0027e56
c000e7de:	e8 aa 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e7ed:	0f 85 d8 01 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x2a9>
c000e7f3:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e7f8:	83 ec 08             	sub    esp,0x8
c000e7fb:	50                   	push   eax
c000e7fc:	68 67 7e 02 c0       	push   0xc0027e67
c000e801:	e8 87 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e806:	83 c4 10             	add    esp,0x10
c000e809:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e810:	0f 85 ab 01 00 00    	jne    c000e9c1 <Computer::displayFeatures()+0x29f>
c000e816:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e81b:	83 ec 08             	sub    esp,0x8
c000e81e:	50                   	push   eax
c000e81f:	68 78 7e 02 c0       	push   0xc0027e78
c000e824:	e8 64 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e833:	0f 88 1b 02 00 00    	js     c000ea54 <Computer::displayFeatures()+0x332>
c000e839:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e83e:	83 ec 08             	sub    esp,0x8
c000e841:	50                   	push   eax
c000e842:	68 89 7e 02 c0       	push   0xc0027e89
c000e847:	e8 41 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e84c:	83 c4 10             	add    esp,0x10
c000e84f:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e856:	0f 85 a1 01 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2db>
c000e85c:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	50                   	push   eax
c000e865:	68 9a 7e 02 c0       	push   0xc0027e9a
c000e86a:	e8 1e 3e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e86f:	83 c4 10             	add    esp,0x10
c000e872:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e879:	0f 85 cb 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x328>
c000e87f:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e884:	83 ec 08             	sub    esp,0x8
c000e887:	50                   	push   eax
c000e888:	68 ab 7e 02 c0       	push   0xc0027eab
c000e88d:	e8 fb 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e892:	83 c4 10             	add    esp,0x10
c000e895:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e89c:	0f 85 9e 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x31e>
c000e8a2:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e8a7:	83 ec 08             	sub    esp,0x8
c000e8aa:	50                   	push   eax
c000e8ab:	68 bc 7e 02 c0       	push   0xc0027ebc
c000e8b0:	e8 d8 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e8b5:	83 c4 10             	add    esp,0x10
c000e8b8:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8bf:	0f 85 71 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x314>
c000e8c5:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e8ca:	83 ec 08             	sub    esp,0x8
c000e8cd:	50                   	push   eax
c000e8ce:	68 cd 7e 02 c0       	push   0xc0027ecd
c000e8d3:	e8 b5 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8e2:	0f 85 44 01 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x30a>
c000e8e8:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e8ed:	83 ec 08             	sub    esp,0x8
c000e8f0:	50                   	push   eax
c000e8f1:	68 de 7e 02 c0       	push   0xc0027ede
c000e8f6:	e8 92 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e8fb:	83 c4 10             	add    esp,0x10
c000e8fe:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e905:	0f 85 17 01 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x300>
c000e90b:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e910:	83 ec 08             	sub    esp,0x8
c000e913:	50                   	push   eax
c000e914:	68 ef 7e 02 c0       	push   0xc0027eef
c000e919:	e8 6f 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e91e:	83 c4 10             	add    esp,0x10
c000e921:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e928:	0f 85 ea 00 00 00    	jne    c000ea18 <Computer::displayFeatures()+0x2f6>
c000e92e:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e933:	83 ec 08             	sub    esp,0x8
c000e936:	50                   	push   eax
c000e937:	68 00 7f 02 c0       	push   0xc0027f00
c000e93c:	e8 4c 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e94b:	0f 88 0d 01 00 00    	js     c000ea5e <Computer::displayFeatures()+0x33c>
c000e951:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e956:	83 ec 08             	sub    esp,0x8
c000e959:	50                   	push   eax
c000e95a:	68 11 7f 02 c0       	push   0xc0027f11
c000e95f:	e8 29 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e964:	83 c4 10             	add    esp,0x10
c000e967:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e96e:	0f 85 9a 00 00 00    	jne    c000ea0e <Computer::displayFeatures()+0x2ec>
c000e974:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e979:	83 ec 08             	sub    esp,0x8
c000e97c:	50                   	push   eax
c000e97d:	68 22 7f 02 c0       	push   0xc0027f22
c000e982:	e8 06 3d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e987:	83 c4 10             	add    esp,0x10
c000e98a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e991:	75 74                	jne    c000ea07 <Computer::displayFeatures()+0x2e5>
c000e993:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c000e998:	83 ec 08             	sub    esp,0x8
c000e99b:	50                   	push   eax
c000e99c:	68 33 7f 02 c0       	push   0xc0027f33
c000e9a1:	e8 e7 3c 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000e9a6:	c7 44 24 20 62 96 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029662
c000e9ae:	83 c4 18             	add    esp,0x18
c000e9b1:	5b                   	pop    ebx
c000e9b2:	e9 d6 3c 00 00       	jmp    c001268d <Dbg::kprintf(char const*, ...)>
c000e9b7:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9bc:	e9 88 fd ff ff       	jmp    c000e749 <Computer::displayFeatures()+0x27>
c000e9c1:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9c6:	e9 50 fe ff ff       	jmp    c000e81b <Computer::displayFeatures()+0xf9>
c000e9cb:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9d0:	e9 23 fe ff ff       	jmp    c000e7f8 <Computer::displayFeatures()+0xd6>
c000e9d5:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9da:	e9 f6 fd ff ff       	jmp    c000e7d5 <Computer::displayFeatures()+0xb3>
c000e9df:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9e4:	e9 c9 fd ff ff       	jmp    c000e7b2 <Computer::displayFeatures()+0x90>
c000e9e9:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9ee:	e9 9c fd ff ff       	jmp    c000e78f <Computer::displayFeatures()+0x6d>
c000e9f3:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000e9f8:	e9 6f fd ff ff       	jmp    c000e76c <Computer::displayFeatures()+0x4a>
c000e9fd:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea02:	e9 5a fe ff ff       	jmp    c000e861 <Computer::displayFeatures()+0x13f>
c000ea07:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea0c:	eb 8a                	jmp    c000e998 <Computer::displayFeatures()+0x276>
c000ea0e:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea13:	e9 61 ff ff ff       	jmp    c000e979 <Computer::displayFeatures()+0x257>
c000ea18:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea1d:	e9 11 ff ff ff       	jmp    c000e933 <Computer::displayFeatures()+0x211>
c000ea22:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea27:	e9 e4 fe ff ff       	jmp    c000e910 <Computer::displayFeatures()+0x1ee>
c000ea2c:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea31:	e9 b7 fe ff ff       	jmp    c000e8ed <Computer::displayFeatures()+0x1cb>
c000ea36:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea3b:	e9 8a fe ff ff       	jmp    c000e8ca <Computer::displayFeatures()+0x1a8>
c000ea40:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea45:	e9 5d fe ff ff       	jmp    c000e8a7 <Computer::displayFeatures()+0x185>
c000ea4a:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea4f:	e9 30 fe ff ff       	jmp    c000e884 <Computer::displayFeatures()+0x162>
c000ea54:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea59:	e9 e0 fd ff ff       	jmp    c000e83e <Computer::displayFeatures()+0x11c>
c000ea5e:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c000ea63:	e9 ee fe ff ff       	jmp    c000e956 <Computer::displayFeatures()+0x234>

c000ea68 <Computer::rdmsr(unsigned int)>:
c000ea68:	83 ec 0c             	sub    esp,0xc
c000ea6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea6f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea76:	74 0a                	je     c000ea82 <Computer::rdmsr(unsigned int)+0x1a>
c000ea78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea7c:	0f 32                	rdmsr  
c000ea7e:	83 c4 0c             	add    esp,0xc
c000ea81:	c3                   	ret    
c000ea82:	83 ec 0c             	sub    esp,0xc
c000ea85:	68 44 7f 02 c0       	push   0xc0027f44
c000ea8a:	e8 c8 a6 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ea8f:	83 c4 10             	add    esp,0x10
c000ea92:	eb e4                	jmp    c000ea78 <Computer::rdmsr(unsigned int)+0x10>

c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ea94:	57                   	push   edi
c000ea95:	56                   	push   esi
c000ea96:	52                   	push   edx
c000ea97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ea9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eaa3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaaa:	74 0e                	je     c000eaba <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eaac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eab0:	89 f0                	mov    eax,esi
c000eab2:	89 fa                	mov    edx,edi
c000eab4:	0f 30                	wrmsr  
c000eab6:	58                   	pop    eax
c000eab7:	5e                   	pop    esi
c000eab8:	5f                   	pop    edi
c000eab9:	c3                   	ret    
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	68 4a 7f 02 c0       	push   0xc0027f4a
c000eac2:	e8 90 a6 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	eb e0                	jmp    c000eaac <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eacc <Computer::nmiEnabled()>:
c000eacc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ead0:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ead6:	c3                   	ret    
c000ead7:	90                   	nop

c000ead8 <Computer::readCMOS(unsigned char)>:
c000ead8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eadc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eae3:	19 c0                	sbb    eax,eax
c000eae5:	83 e0 80             	and    eax,0xffffff80
c000eae8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eaec:	e6 70                	out    0x70,al
c000eaee:	e4 71                	in     al,0x71
c000eaf0:	c3                   	ret    
c000eaf1:	90                   	nop

c000eaf2 <Computer::enableNMI(bool)>:
c000eaf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eaf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eafa:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb00:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb08:	eb ce                	jmp    c000ead8 <Computer::readCMOS(unsigned char)>

c000eb0a <Computer::open(int, int, void*)>:
c000eb0a:	56                   	push   esi
c000eb0b:	53                   	push   ebx
c000eb0c:	83 ec 10             	sub    esp,0x10
c000eb0f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb13:	f6 05 a0 bd 02 c0 04 	test   BYTE PTR ds:0xc002bda0,0x4
c000eb1a:	68 68 22 00 00       	push   0x2268
c000eb1f:	0f 94 05 40 ad 02 c0 	sete   BYTE PTR ds:0xc002ad40
c000eb26:	e8 95 09 00 00       	call   c000f4c0 <malloc>
c000eb2b:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb2e:	89 c6                	mov    esi,eax
c000eb30:	e8 8b 8a 00 00       	call   c00175c0 <ACPI::ACPI()>
c000eb35:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb3b:	58                   	pop    eax
c000eb3c:	5a                   	pop    edx
c000eb3d:	56                   	push   esi
c000eb3e:	53                   	push   ebx
c000eb3f:	e8 38 4f 00 00       	call   c0013a7c <Device::addChild(Device*)>
c000eb44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb47:	e8 cc f9 ff ff       	call   c000e518 <Computer::detectFeatures()>
c000eb4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb4f:	e8 ce fb ff ff       	call   c000e722 <Computer::displayFeatures()>
c000eb54:	59                   	pop    ecx
c000eb55:	5e                   	pop    esi
c000eb56:	6a 01                	push   0x1
c000eb58:	53                   	push   ebx
c000eb59:	e8 94 ff ff ff       	call   c000eaf2 <Computer::enableNMI(bool)>
c000eb5e:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb65:	e8 56 09 00 00       	call   c000f4c0 <malloc>
c000eb6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6d:	89 c6                	mov    esi,eax
c000eb6f:	e8 f8 94 00 00       	call   c001806c <CPU::CPU()>
c000eb74:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb7a:	58                   	pop    eax
c000eb7b:	5a                   	pop    edx
c000eb7c:	56                   	push   esi
c000eb7d:	53                   	push   ebx
c000eb7e:	e8 f9 4e 00 00       	call   c0013a7c <Device::addChild(Device*)>
c000eb83:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb89:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb8f:	6a 00                	push   0x0
c000eb91:	6a 00                	push   0x0
c000eb93:	50                   	push   eax
c000eb94:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eb97:	83 c4 20             	add    esp,0x20
c000eb9a:	e8 4f 54 00 00       	call   c0013fee <setupFPU()>
c000eb9f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000eba5:	85 c0                	test   eax,eax
c000eba7:	74 1f                	je     c000ebc8 <Computer::open(int, int, void*)+0xbe>
c000eba9:	83 ec 08             	sub    esp,0x8
c000ebac:	50                   	push   eax
c000ebad:	53                   	push   ebx
c000ebae:	e8 c9 4e 00 00       	call   c0013a7c <Device::addChild(Device*)>
c000ebb3:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebb9:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebbb:	6a 00                	push   0x0
c000ebbd:	6a 00                	push   0x0
c000ebbf:	6a 00                	push   0x0
c000ebc1:	50                   	push   eax
c000ebc2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebc5:	83 c4 20             	add    esp,0x20
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	68 09 e5 00 c0       	push   0xc000e509
c000ebd0:	e8 f9 d7 00 00       	call   c001c3ce <setupMultitasking(void (*)())>
c000ebd5:	83 c4 14             	add    esp,0x14
c000ebd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebdd:	5b                   	pop    ebx
c000ebde:	5e                   	pop    esi
c000ebdf:	c3                   	ret    

c000ebe0 <Computer::disableNMI()>:
c000ebe0:	6a 00                	push   0x0
c000ebe2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebe6:	e8 07 ff ff ff       	call   c000eaf2 <Computer::enableNMI(bool)>
c000ebeb:	58                   	pop    eax
c000ebec:	5a                   	pop    edx
c000ebed:	c3                   	ret    

c000ebee <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ebee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebf9:	19 c0                	sbb    eax,eax
c000ebfb:	83 e0 80             	and    eax,0xffffff80
c000ebfe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec02:	e6 70                	out    0x70,al
c000ec04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec08:	e6 71                	out    0x71,al
c000ec0a:	c3                   	ret    
c000ec0b:	90                   	nop

c000ec0c <Computer::handleNMI()>:
c000ec0c:	56                   	push   esi
c000ec0d:	53                   	push   ebx
c000ec0e:	83 ec 10             	sub    esp,0x10
c000ec11:	e4 92                	in     al,0x92
c000ec13:	89 c6                	mov    esi,eax
c000ec15:	e4 61                	in     al,0x61
c000ec17:	68 50 7f 02 c0       	push   0xc0027f50
c000ec1c:	88 c3                	mov    bl,al
c000ec1e:	e8 6a 3a 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000ec23:	83 c4 10             	add    esp,0x10
c000ec26:	83 e6 10             	and    esi,0x10
c000ec29:	75 0d                	jne    c000ec38 <Computer::handleNMI()+0x2c>
c000ec2b:	f6 c3 40             	test   bl,0x40
c000ec2e:	75 1d                	jne    c000ec4d <Computer::handleNMI()+0x41>
c000ec30:	84 db                	test   bl,bl
c000ec32:	78 2d                	js     c000ec61 <Computer::handleNMI()+0x55>
c000ec34:	58                   	pop    eax
c000ec35:	5b                   	pop    ebx
c000ec36:	5e                   	pop    esi
c000ec37:	c3                   	ret    
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	68 61 7f 02 c0       	push   0xc0027f61
c000ec40:	e8 12 a5 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	f6 c3 40             	test   bl,0x40
c000ec4b:	74 e3                	je     c000ec30 <Computer::handleNMI()+0x24>
c000ec4d:	83 ec 0c             	sub    esp,0xc
c000ec50:	68 6e 7f 02 c0       	push   0xc0027f6e
c000ec55:	e8 fd a4 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ec5a:	83 c4 10             	add    esp,0x10
c000ec5d:	84 db                	test   bl,bl
c000ec5f:	79 d3                	jns    c000ec34 <Computer::handleNMI()+0x28>
c000ec61:	c7 44 24 10 78 7f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027f78
c000ec69:	5a                   	pop    edx
c000ec6a:	5b                   	pop    ebx
c000ec6b:	5e                   	pop    esi
c000ec6c:	e9 e6 a4 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c000ec71:	90                   	nop

c000ec72 <Computer::setDiskActivityLight(int, bool)>:
c000ec72:	56                   	push   esi
c000ec73:	53                   	push   ebx
c000ec74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec78:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec7d:	77 1b                	ja     c000ec9a <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec7f:	e4 92                	in     al,0x92
c000ec81:	bb 40 00 00 00       	mov    ebx,0x40
c000ec86:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec8a:	89 da                	mov    edx,ebx
c000ec8c:	d3 e2                	shl    edx,cl
c000ec8e:	89 f1                	mov    ecx,esi
c000ec90:	f7 d2                	not    edx
c000ec92:	d3 e3                	shl    ebx,cl
c000ec94:	21 d0                	and    eax,edx
c000ec96:	09 d8                	or     eax,ebx
c000ec98:	e6 92                	out    0x92,al
c000ec9a:	5b                   	pop    ebx
c000ec9b:	5e                   	pop    esi
c000ec9c:	c3                   	ret    
c000ec9d:	90                   	nop

c000ec9e <GDTEntry::setBase(unsigned int)>:
c000ec9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eca2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eca6:	89 c1                	mov    ecx,eax
c000eca8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecac:	c1 e9 10             	shr    ecx,0x10
c000ecaf:	c1 e8 18             	shr    eax,0x18
c000ecb2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecb5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecb8:	c3                   	ret    
c000ecb9:	90                   	nop

c000ecba <GDTEntry::setLimit(unsigned int)>:
c000ecba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecc5:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecc8:	83 e2 f0             	and    edx,0xfffffff0
c000eccb:	c1 e8 10             	shr    eax,0x10
c000ecce:	83 e0 0f             	and    eax,0xf
c000ecd1:	09 d0                	or     eax,edx
c000ecd3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecd6:	c3                   	ret    
c000ecd7:	90                   	nop

c000ecd8 <GDT::GDT()>:
c000ecd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecec:	90                   	nop
c000eced:	c3                   	ret    

c000ecee <GDT::addEntry(GDTEntry)>:
c000ecee:	53                   	push   ebx
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ecf8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ecff:	52                   	push   edx
c000ed00:	50                   	push   eax
c000ed01:	68 b4 7f 02 c0       	push   0xc0027fb4
c000ed06:	e8 82 39 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000ed0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed11:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed15:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed19:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed1d:	8d 50 01             	lea    edx,[eax+0x1]
c000ed20:	c1 e0 03             	shl    eax,0x3
c000ed23:	89 13                	mov    DWORD PTR [ebx],edx
c000ed25:	83 c4 18             	add    esp,0x18
c000ed28:	5b                   	pop    ebx
c000ed29:	c3                   	ret    

c000ed2a <GDT::getNumberOfEntries()>:
c000ed2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed30:	c3                   	ret    
c000ed31:	90                   	nop

c000ed32 <GDT::flush()>:
c000ed32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed36:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed38:	83 c0 04             	add    eax,0x4
c000ed3b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed42:	a3 92 bd 02 c0       	mov    ds:0xc002bd92,eax
c000ed47:	66 89 15 90 bd 02 c0 	mov    WORD PTR ds:0xc002bd90,dx
c000ed4e:	e9 ab 16 ff ff       	jmp    c00003fe <loadGDT>
c000ed53:	90                   	nop

c000ed54 <GDT::setup()>:
c000ed54:	55                   	push   ebp
c000ed55:	57                   	push   edi
c000ed56:	56                   	push   esi
c000ed57:	53                   	push   ebx
c000ed58:	83 ec 3c             	sub    esp,0x3c
c000ed5b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed5f:	6a 00                	push   0x0
c000ed61:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed65:	53                   	push   ebx
c000ed66:	e8 33 ff ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000ed6b:	6a 00                	push   0x0
c000ed6d:	53                   	push   ebx
c000ed6e:	e8 47 ff ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000ed73:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed7b:	6a 00                	push   0x0
c000ed7d:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed81:	53                   	push   ebx
c000ed82:	e8 17 ff ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000ed87:	68 ff ff ff 00       	push   0xffffff
c000ed8c:	53                   	push   ebx
c000ed8d:	e8 28 ff ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000ed92:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed96:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ed9b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000eda0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eda4:	83 c4 20             	add    esp,0x20
c000eda7:	6a 00                	push   0x0
c000eda9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edad:	53                   	push   ebx
c000edae:	e8 eb fe ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c000edb3:	68 ff ff ff 00       	push   0xffffff
c000edb8:	53                   	push   ebx
c000edb9:	e8 fc fe ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c000edbe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edc2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000edce:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000edd2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edd7:	0d 00 92 c0 00       	or     eax,0xc09200
c000eddc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ede0:	89 d8                	mov    eax,ebx
c000ede2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ede6:	80 cc 60             	or     ah,0x60
c000ede9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eded:	83 c4 0c             	add    esp,0xc
c000edf0:	89 f8                	mov    eax,edi
c000edf2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edf6:	80 cc 60             	or     ah,0x60
c000edf9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000edfd:	89 c7                	mov    edi,eax
c000edff:	55                   	push   ebp
c000ee00:	e8 e9 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee05:	83 c4 0c             	add    esp,0xc
c000ee08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee10:	55                   	push   ebp
c000ee11:	e8 d8 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee16:	83 c4 0c             	add    esp,0xc
c000ee19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee21:	55                   	push   ebp
c000ee22:	e8 c7 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee27:	83 c4 0c             	add    esp,0xc
c000ee2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee2e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee32:	53                   	push   ebx
c000ee33:	51                   	push   ecx
c000ee34:	55                   	push   ebp
c000ee35:	e8 b4 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee3a:	83 c4 0c             	add    esp,0xc
c000ee3d:	57                   	push   edi
c000ee3e:	56                   	push   esi
c000ee3f:	55                   	push   ebp
c000ee40:	e8 a9 fe ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c000ee45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee48:	e8 e5 fe ff ff       	call   c000ed32 <GDT::flush()>
c000ee4d:	83 c4 4c             	add    esp,0x4c
c000ee50:	5b                   	pop    ebx
c000ee51:	5e                   	pop    esi
c000ee52:	5f                   	pop    edi
c000ee53:	5d                   	pop    ebp
c000ee54:	c3                   	ret    

c000ee55 <idleFunction(void*)>:
c000ee55:	53                   	push   ebx
c000ee56:	83 ec 08             	sub    esp,0x8
c000ee59:	e8 41 d3 00 00       	call   c001c19f <unlockScheduler()>
c000ee5e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000ee63:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee69:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee70:	74 3c                	je     c000eeae <idleFunction(void*)+0x59>
c000ee72:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee79:	74 33                	je     c000eeae <idleFunction(void*)+0x59>
c000ee7b:	31 db                	xor    ebx,ebx
c000ee7d:	52                   	push   edx
c000ee7e:	52                   	push   edx
c000ee7f:	68 e1 00 00 00       	push   0xe1
c000ee84:	50                   	push   eax
c000ee85:	e8 de fb ff ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c000ee8a:	53                   	push   ebx
c000ee8b:	83 e0 02             	and    eax,0x2
c000ee8e:	50                   	push   eax
c000ee8f:	68 e1 00 00 00       	push   0xe1
c000ee94:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c000ee9a:	e8 f5 fb ff ff       	call   c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ee9f:	83 c4 20             	add    esp,0x20
c000eea2:	e8 8d 13 ff ff       	call   c0000234 <doTPAUSE>
c000eea7:	e8 a4 76 01 00       	call   c0026550 <idleCommon()>
c000eeac:	eb f4                	jmp    c000eea2 <idleFunction(void*)+0x4d>
c000eeae:	fb                   	sti    
c000eeaf:	f4                   	hlt    
c000eeb0:	e8 9b 76 01 00       	call   c0026550 <idleCommon()>
c000eeb5:	eb f7                	jmp    c000eeae <idleFunction(void*)+0x59>
c000eeb7:	90                   	nop

c000eeb8 <IDTEntry::IDTEntry(bool)>:
c000eeb8:	83 ec 04             	sub    esp,0x4
c000eebb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eebf:	88 04 24             	mov    BYTE PTR [esp],al
c000eec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eec6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eecc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eed4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eed8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eedb:	83 e2 f0             	and    edx,0xfffffff0
c000eede:	83 ca 0e             	or     edx,0xe
c000eee1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeeb:	83 e2 ef             	and    edx,0xffffffef
c000eeee:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eef5:	74 04                	je     c000eefb <IDTEntry::IDTEntry(bool)+0x43>
c000eef7:	b2 03                	mov    dl,0x3
c000eef9:	eb 02                	jmp    c000eefd <IDTEntry::IDTEntry(bool)+0x45>
c000eefb:	b2 00                	mov    dl,0x0
c000eefd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef01:	83 e2 03             	and    edx,0x3
c000ef04:	88 d1                	mov    cl,dl
c000ef06:	c1 e1 05             	shl    ecx,0x5
c000ef09:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef0c:	83 e2 9f             	and    edx,0xffffff9f
c000ef0f:	09 ca                	or     edx,ecx
c000ef11:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef18:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef1b:	83 ca 80             	or     edx,0xffffff80
c000ef1e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef21:	90                   	nop
c000ef22:	83 c4 04             	add    esp,0x4
c000ef25:	c3                   	ret    

c000ef26 <IDTEntry::setOffset(unsigned int)>:
c000ef26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef31:	c1 e8 10             	shr    eax,0x10
c000ef34:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef38:	c3                   	ret    
c000ef39:	90                   	nop

c000ef3a <IDT::IDT()>:
c000ef3a:	90                   	nop
c000ef3b:	c3                   	ret    

c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef40:	83 c0 30             	add    eax,0x30
c000ef43:	c3                   	ret    

c000ef44 <IDT::addEntry(IDTEntry, int)>:
c000ef44:	53                   	push   ebx
c000ef45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef55:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef58:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef5c:	5b                   	pop    ebx
c000ef5d:	c3                   	ret    

c000ef5e <IDT::addEntry(int, void (*)(), bool)>:
c000ef5e:	53                   	push   ebx
c000ef5f:	83 ec 10             	sub    esp,0x10
c000ef62:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef67:	50                   	push   eax
c000ef68:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef6c:	53                   	push   ebx
c000ef6d:	e8 46 ff ff ff       	call   c000eeb8 <IDTEntry::IDTEntry(bool)>
c000ef72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef76:	53                   	push   ebx
c000ef77:	e8 aa ff ff ff       	call   c000ef26 <IDTEntry::setOffset(unsigned int)>
c000ef7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef8c:	e8 b3 ff ff ff       	call   c000ef44 <IDT::addEntry(IDTEntry, int)>
c000ef91:	83 c4 30             	add    esp,0x30
c000ef94:	5b                   	pop    ebx
c000ef95:	c3                   	ret    

c000ef96 <IDT::flush()>:
c000ef96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef9a:	66 c7 05 98 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd98,0x7ff
c000efa3:	a3 9a bd 02 c0       	mov    ds:0xc002bd9a,eax
c000efa8:	0f 01 1d 98 bd 02 c0 	lidtd  ds:0xc002bd98
c000efaf:	c3                   	ret    

c000efb0 <IDT::setup()>:
c000efb0:	57                   	push   edi
c000efb1:	56                   	push   esi
c000efb2:	53                   	push   ebx
c000efb3:	83 ec 10             	sub    esp,0x10
c000efb6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efba:	6a 00                	push   0x0
c000efbc:	68 1e 04 00 c0       	push   0xc000041e
c000efc1:	6a 00                	push   0x0
c000efc3:	53                   	push   ebx
c000efc4:	e8 95 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efc9:	6a 00                	push   0x0
c000efcb:	68 2e 04 00 c0       	push   0xc000042e
c000efd0:	6a 01                	push   0x1
c000efd2:	53                   	push   ebx
c000efd3:	e8 86 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efd8:	83 c4 20             	add    esp,0x20
c000efdb:	6a 00                	push   0x0
c000efdd:	68 38 04 00 c0       	push   0xc0000438
c000efe2:	6a 02                	push   0x2
c000efe4:	53                   	push   ebx
c000efe5:	e8 74 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000efea:	6a 00                	push   0x0
c000efec:	68 42 04 00 c0       	push   0xc0000442
c000eff1:	6a 03                	push   0x3
c000eff3:	53                   	push   ebx
c000eff4:	e8 65 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000eff9:	83 c4 20             	add    esp,0x20
c000effc:	6a 00                	push   0x0
c000effe:	68 4c 04 00 c0       	push   0xc000044c
c000f003:	6a 04                	push   0x4
c000f005:	53                   	push   ebx
c000f006:	e8 53 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f00b:	6a 00                	push   0x0
c000f00d:	68 56 04 00 c0       	push   0xc0000456
c000f012:	6a 05                	push   0x5
c000f014:	53                   	push   ebx
c000f015:	e8 44 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f01a:	83 c4 20             	add    esp,0x20
c000f01d:	6a 00                	push   0x0
c000f01f:	68 60 04 00 c0       	push   0xc0000460
c000f024:	6a 06                	push   0x6
c000f026:	53                   	push   ebx
c000f027:	e8 32 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f02c:	6a 00                	push   0x0
c000f02e:	68 6a 04 00 c0       	push   0xc000046a
c000f033:	6a 07                	push   0x7
c000f035:	53                   	push   ebx
c000f036:	e8 23 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f03b:	83 c4 20             	add    esp,0x20
c000f03e:	6a 00                	push   0x0
c000f040:	68 74 04 00 c0       	push   0xc0000474
c000f045:	6a 08                	push   0x8
c000f047:	53                   	push   ebx
c000f048:	e8 11 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f04d:	6a 00                	push   0x0
c000f04f:	68 7c 04 00 c0       	push   0xc000047c
c000f054:	6a 09                	push   0x9
c000f056:	53                   	push   ebx
c000f057:	e8 02 ff ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f05c:	83 c4 20             	add    esp,0x20
c000f05f:	6a 00                	push   0x0
c000f061:	68 86 04 00 c0       	push   0xc0000486
c000f066:	6a 0a                	push   0xa
c000f068:	53                   	push   ebx
c000f069:	e8 f0 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f06e:	6a 00                	push   0x0
c000f070:	68 8e 04 00 c0       	push   0xc000048e
c000f075:	6a 0b                	push   0xb
c000f077:	53                   	push   ebx
c000f078:	e8 e1 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f07d:	83 c4 20             	add    esp,0x20
c000f080:	6a 00                	push   0x0
c000f082:	68 96 04 00 c0       	push   0xc0000496
c000f087:	6a 0c                	push   0xc
c000f089:	53                   	push   ebx
c000f08a:	e8 cf fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f08f:	6a 00                	push   0x0
c000f091:	68 9e 04 00 c0       	push   0xc000049e
c000f096:	6a 0d                	push   0xd
c000f098:	53                   	push   ebx
c000f099:	e8 c0 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f09e:	83 c4 20             	add    esp,0x20
c000f0a1:	6a 00                	push   0x0
c000f0a3:	68 a6 04 00 c0       	push   0xc00004a6
c000f0a8:	6a 0e                	push   0xe
c000f0aa:	53                   	push   ebx
c000f0ab:	e8 ae fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0b0:	6a 00                	push   0x0
c000f0b2:	68 ae 04 00 c0       	push   0xc00004ae
c000f0b7:	6a 0f                	push   0xf
c000f0b9:	53                   	push   ebx
c000f0ba:	e8 9f fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0bf:	83 c4 20             	add    esp,0x20
c000f0c2:	6a 00                	push   0x0
c000f0c4:	68 b8 04 00 c0       	push   0xc00004b8
c000f0c9:	6a 10                	push   0x10
c000f0cb:	53                   	push   ebx
c000f0cc:	e8 8d fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0d1:	6a 00                	push   0x0
c000f0d3:	68 c2 04 00 c0       	push   0xc00004c2
c000f0d8:	6a 11                	push   0x11
c000f0da:	53                   	push   ebx
c000f0db:	e8 7e fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0e0:	83 c4 20             	add    esp,0x20
c000f0e3:	6a 00                	push   0x0
c000f0e5:	68 cc 04 00 c0       	push   0xc00004cc
c000f0ea:	6a 12                	push   0x12
c000f0ec:	53                   	push   ebx
c000f0ed:	e8 6c fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f0f2:	6a 01                	push   0x1
c000f0f4:	68 66 05 00 c0       	push   0xc0000566
c000f0f9:	6a 60                	push   0x60
c000f0fb:	53                   	push   ebx
c000f0fc:	e8 5d fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f101:	83 c4 20             	add    esp,0x20
c000f104:	6a 00                	push   0x0
c000f106:	68 6d 05 00 c0       	push   0xc000056d
c000f10b:	6a 20                	push   0x20
c000f10d:	53                   	push   ebx
c000f10e:	e8 4b fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f113:	6a 00                	push   0x0
c000f115:	68 58 05 00 c0       	push   0xc0000558
c000f11a:	6a 21                	push   0x21
c000f11c:	53                   	push   ebx
c000f11d:	e8 3c fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f122:	83 c4 20             	add    esp,0x20
c000f125:	6a 00                	push   0x0
c000f127:	68 5f 05 00 c0       	push   0xc000055f
c000f12c:	6a 22                	push   0x22
c000f12e:	53                   	push   ebx
c000f12f:	e8 2a fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f134:	6a 00                	push   0x0
c000f136:	68 d6 04 00 c0       	push   0xc00004d6
c000f13b:	6a 23                	push   0x23
c000f13d:	53                   	push   ebx
c000f13e:	e8 1b fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f143:	83 c4 20             	add    esp,0x20
c000f146:	6a 00                	push   0x0
c000f148:	68 e0 04 00 c0       	push   0xc00004e0
c000f14d:	6a 24                	push   0x24
c000f14f:	53                   	push   ebx
c000f150:	e8 09 fe ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f155:	6a 00                	push   0x0
c000f157:	68 ea 04 00 c0       	push   0xc00004ea
c000f15c:	6a 25                	push   0x25
c000f15e:	53                   	push   ebx
c000f15f:	e8 fa fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f164:	83 c4 20             	add    esp,0x20
c000f167:	6a 00                	push   0x0
c000f169:	68 f4 04 00 c0       	push   0xc00004f4
c000f16e:	6a 26                	push   0x26
c000f170:	53                   	push   ebx
c000f171:	e8 e8 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f176:	6a 00                	push   0x0
c000f178:	68 fe 04 00 c0       	push   0xc00004fe
c000f17d:	6a 27                	push   0x27
c000f17f:	53                   	push   ebx
c000f180:	e8 d9 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f185:	83 c4 20             	add    esp,0x20
c000f188:	6a 00                	push   0x0
c000f18a:	68 08 05 00 c0       	push   0xc0000508
c000f18f:	6a 28                	push   0x28
c000f191:	53                   	push   ebx
c000f192:	e8 c7 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f197:	6a 00                	push   0x0
c000f199:	68 12 05 00 c0       	push   0xc0000512
c000f19e:	6a 29                	push   0x29
c000f1a0:	53                   	push   ebx
c000f1a1:	e8 b8 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1a6:	83 c4 20             	add    esp,0x20
c000f1a9:	6a 00                	push   0x0
c000f1ab:	68 1c 05 00 c0       	push   0xc000051c
c000f1b0:	6a 2a                	push   0x2a
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 a6 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1b8:	6a 00                	push   0x0
c000f1ba:	68 26 05 00 c0       	push   0xc0000526
c000f1bf:	6a 2b                	push   0x2b
c000f1c1:	53                   	push   ebx
c000f1c2:	e8 97 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1c7:	83 c4 20             	add    esp,0x20
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 30 05 00 c0       	push   0xc0000530
c000f1d1:	6a 2c                	push   0x2c
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 85 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1d9:	6a 00                	push   0x0
c000f1db:	68 3a 05 00 c0       	push   0xc000053a
c000f1e0:	6a 2d                	push   0x2d
c000f1e2:	53                   	push   ebx
c000f1e3:	e8 76 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1e8:	83 c4 20             	add    esp,0x20
c000f1eb:	6a 00                	push   0x0
c000f1ed:	68 44 05 00 c0       	push   0xc0000544
c000f1f2:	6a 2e                	push   0x2e
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 64 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f1fa:	6a 00                	push   0x0
c000f1fc:	68 4e 05 00 c0       	push   0xc000054e
c000f201:	6a 2f                	push   0x2f
c000f203:	53                   	push   ebx
c000f204:	e8 55 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f209:	83 c4 20             	add    esp,0x20
c000f20c:	6a 00                	push   0x0
c000f20e:	68 93 05 00 c0       	push   0xc0000593
c000f213:	6a 30                	push   0x30
c000f215:	53                   	push   ebx
c000f216:	e8 43 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f21b:	6a 00                	push   0x0
c000f21d:	68 9d 05 00 c0       	push   0xc000059d
c000f222:	6a 31                	push   0x31
c000f224:	53                   	push   ebx
c000f225:	e8 34 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f22a:	83 c4 20             	add    esp,0x20
c000f22d:	6a 00                	push   0x0
c000f22f:	68 a7 05 00 c0       	push   0xc00005a7
c000f234:	6a 32                	push   0x32
c000f236:	53                   	push   ebx
c000f237:	e8 22 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f23c:	6a 00                	push   0x0
c000f23e:	68 b1 05 00 c0       	push   0xc00005b1
c000f243:	6a 33                	push   0x33
c000f245:	53                   	push   ebx
c000f246:	e8 13 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f24b:	83 c4 20             	add    esp,0x20
c000f24e:	6a 00                	push   0x0
c000f250:	68 bb 05 00 c0       	push   0xc00005bb
c000f255:	6a 34                	push   0x34
c000f257:	53                   	push   ebx
c000f258:	e8 01 fd ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f25d:	6a 00                	push   0x0
c000f25f:	68 c5 05 00 c0       	push   0xc00005c5
c000f264:	6a 35                	push   0x35
c000f266:	53                   	push   ebx
c000f267:	e8 f2 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f26c:	83 c4 20             	add    esp,0x20
c000f26f:	6a 00                	push   0x0
c000f271:	68 cf 05 00 c0       	push   0xc00005cf
c000f276:	6a 36                	push   0x36
c000f278:	53                   	push   ebx
c000f279:	e8 e0 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f27e:	6a 00                	push   0x0
c000f280:	68 d9 05 00 c0       	push   0xc00005d9
c000f285:	6a 37                	push   0x37
c000f287:	53                   	push   ebx
c000f288:	e8 d1 fc ff ff       	call   c000ef5e <IDT::addEntry(int, void (*)(), bool)>
c000f28d:	83 c4 20             	add    esp,0x20
c000f290:	e8 98 25 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f295:	52                   	push   edx
c000f296:	6a 03                	push   0x3
c000f298:	6a 02                	push   0x2
c000f29a:	50                   	push   eax
c000f29b:	e8 c8 2b 00 00       	call   c0011e68 <VAS::allocatePages(int, int)>
c000f2a0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2a7:	89 c6                	mov    esi,eax
c000f2a9:	e8 12 02 00 00       	call   c000f4c0 <malloc>
c000f2ae:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2b7:	89 c7                	mov    edi,eax
c000f2b9:	e8 10 1d 00 00       	call   c0010fce <TSS::TSS()>
c000f2be:	83 c4 0c             	add    esp,0xc
c000f2c1:	68 74 04 00 c0       	push   0xc0000474
c000f2c6:	56                   	push   esi
c000f2c7:	57                   	push   edi
c000f2c8:	e8 41 1d 00 00       	call   c001100e <TSS::setup(unsigned long, unsigned long)>
c000f2cd:	59                   	pop    ecx
c000f2ce:	89 c6                	mov    esi,eax
c000f2d0:	5f                   	pop    edi
c000f2d1:	6a 00                	push   0x0
c000f2d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2d7:	50                   	push   eax
c000f2d8:	e8 db fb ff ff       	call   c000eeb8 <IDTEntry::IDTEntry(bool)>
c000f2dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2e1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2e6:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2ed:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f2f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2f7:	80 ce 05             	or     dh,0x5
c000f2fa:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f2fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f301:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f305:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f308:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f30b:	e8 86 fc ff ff       	call   c000ef96 <IDT::flush()>
c000f310:	83 c4 20             	add    esp,0x20
c000f313:	5b                   	pop    ebx
c000f314:	5e                   	pop    esi
c000f315:	5f                   	pop    edi
c000f316:	c3                   	ret    

c000f317 <sbrk>:
c000f317:	55                   	push   ebp
c000f318:	57                   	push   edi
c000f319:	56                   	push   esi
c000f31a:	53                   	push   ebx
c000f31b:	83 ec 1c             	sub    esp,0x1c
c000f31e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f322:	85 c0                	test   eax,eax
c000f324:	74 3e                	je     c000f364 <sbrk+0x4d>
c000f326:	78 43                	js     c000f36b <sbrk+0x54>
c000f328:	8b 15 88 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd88
c000f32e:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f334:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f33a:	83 e2 01             	and    edx,0x1
c000f33d:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f341:	8b 0d 34 ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad34
c000f347:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f34b:	05 ff 0f 00 00       	add    eax,0xfff
c000f350:	89 c2                	mov    edx,eax
c000f352:	78 2f                	js     c000f383 <sbrk+0x6c>
c000f354:	c1 fa 0c             	sar    edx,0xc
c000f357:	89 d7                	mov    edi,edx
c000f359:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f35d:	be 00 00 00 00       	mov    esi,0x0
c000f362:	eb 36                	jmp    c000f39a <sbrk+0x83>
c000f364:	a1 34 ad 02 c0       	mov    eax,ds:0xc002ad34
c000f369:	eb 74                	jmp    c000f3df <sbrk+0xc8>
c000f36b:	83 ec 08             	sub    esp,0x8
c000f36e:	50                   	push   eax
c000f36f:	68 d0 7f 02 c0       	push   0xc0027fd0
c000f374:	e8 14 33 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000f379:	83 c4 10             	add    esp,0x10
c000f37c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f381:	eb 5c                	jmp    c000f3df <sbrk+0xc8>
c000f383:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f389:	eb c9                	jmp    c000f354 <sbrk+0x3d>
c000f38b:	81 05 34 ad 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ad34,0x1000
c000f395:	46                   	inc    esi
c000f396:	39 f7                	cmp    edi,esi
c000f398:	74 34                	je     c000f3ce <sbrk+0xb7>
c000f39a:	e8 8e 24 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f39f:	89 c3                	mov    ebx,eax
c000f3a1:	8b 2d 34 ad 02 c0    	mov    ebp,DWORD PTR ds:0xc002ad34
c000f3a7:	e8 be 06 00 00       	call   c000fa6a <Phys::allocatePage()>
c000f3ac:	68 01 04 00 00       	push   0x401
c000f3b1:	55                   	push   ebp
c000f3b2:	50                   	push   eax
c000f3b3:	53                   	push   ebx
c000f3b4:	e8 af 29 00 00       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3c1:	74 c8                	je     c000f38b <sbrk+0x74>
c000f3c3:	8b 1d 34 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad34
c000f3c9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3cc:	eb bd                	jmp    c000f38b <sbrk+0x74>
c000f3ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d3:	75 12                	jne    c000f3e7 <sbrk+0xd0>
c000f3d5:	0f 20 d8             	mov    eax,cr3
c000f3d8:	0f 22 d8             	mov    cr3,eax
c000f3db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3df:	83 c4 1c             	add    esp,0x1c
c000f3e2:	5b                   	pop    ebx
c000f3e3:	5e                   	pop    esi
c000f3e4:	5f                   	pop    edi
c000f3e5:	5d                   	pop    ebp
c000f3e6:	c3                   	ret    
c000f3e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3eb:	89 cb                	mov    ebx,ecx
c000f3ed:	c1 eb 0a             	shr    ebx,0xa
c000f3f0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f3f6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f3fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f400:	c1 e0 0c             	shl    eax,0xc
c000f403:	01 c8                	add    eax,ecx
c000f405:	c1 e8 0a             	shr    eax,0xa
c000f408:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f40d:	2d 00 00 40 00       	sub    eax,0x400000
c000f412:	39 c3                	cmp    ebx,eax
c000f414:	77 c5                	ja     c000f3db <sbrk+0xc4>
c000f416:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f419:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f41f:	39 d8                	cmp    eax,ebx
c000f421:	73 f3                	jae    c000f416 <sbrk+0xff>
c000f423:	eb b6                	jmp    c000f3db <sbrk+0xc4>

c000f425 <mmap>:
c000f425:	83 ec 18             	sub    esp,0x18
c000f428:	68 00 80 02 c0       	push   0xc0028000
c000f42d:	e8 25 9d 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f432:	b8 00 00 00 00       	mov    eax,0x0
c000f437:	83 c4 1c             	add    esp,0x1c
c000f43a:	c3                   	ret    

c000f43b <munmap>:
c000f43b:	83 ec 18             	sub    esp,0x18
c000f43e:	68 05 80 02 c0       	push   0xc0028005
c000f443:	e8 0f 9d 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f448:	b8 00 00 00 00       	mov    eax,0x0
c000f44d:	83 c4 1c             	add    esp,0x1c
c000f450:	c3                   	ret    

c000f451 <liballoc_lock()>:
c000f451:	83 ec 0c             	sub    esp,0xc
c000f454:	e8 44 cd 00 00       	call   c001c19d <lockScheduler()>
c000f459:	b8 00 00 00 00       	mov    eax,0x0
c000f45e:	83 c4 0c             	add    esp,0xc
c000f461:	c3                   	ret    

c000f462 <liballoc_unlock()>:
c000f462:	83 ec 0c             	sub    esp,0xc
c000f465:	e8 35 cd 00 00       	call   c001c19f <unlockScheduler()>
c000f46a:	b8 00 00 00 00       	mov    eax,0x0
c000f46f:	83 c4 0c             	add    esp,0xc
c000f472:	c3                   	ret    

c000f473 <liballoc_alloc(int)>:
c000f473:	83 ec 0c             	sub    esp,0xc
c000f476:	e8 b2 23 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f47b:	83 ec 04             	sub    esp,0x4
c000f47e:	6a 01                	push   0x1
c000f480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f484:	50                   	push   eax
c000f485:	e8 de 29 00 00       	call   c0011e68 <VAS::allocatePages(int, int)>
c000f48a:	83 c4 1c             	add    esp,0x1c
c000f48d:	c3                   	ret    

c000f48e <liballoc_free(void*, int)>:
c000f48e:	83 ec 0c             	sub    esp,0xc
c000f491:	e8 97 23 00 00       	call   c001182d <Virt::getAKernelVAS()>
c000f496:	83 ec 08             	sub    esp,0x8
c000f499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f49d:	50                   	push   eax
c000f49e:	e8 81 26 00 00       	call   c0011b24 <VAS::freeAllocatedPages(unsigned long)>
c000f4a3:	b8 00 00 00 00       	mov    eax,0x0
c000f4a8:	83 c4 1c             	add    esp,0x1c
c000f4ab:	c3                   	ret    

c000f4ac <realloc>:
c000f4ac:	83 ec 14             	sub    esp,0x14
c000f4af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b7:	e8 39 1f ff ff       	call   c00013f5 <dlrealloc>
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <malloc>:
c000f4c0:	83 ec 18             	sub    esp,0x18
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	e8 ec 19 ff ff       	call   c0000eb8 <dlmalloc>
c000f4cc:	83 c4 1c             	add    esp,0x1c
c000f4cf:	c3                   	ret    

c000f4d0 <free>:
c000f4d0:	83 ec 18             	sub    esp,0x18
c000f4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4d7:	e8 81 16 ff ff       	call   c0000b5d <dlfree>
c000f4dc:	83 c4 1c             	add    esp,0x1c
c000f4df:	c3                   	ret    

c000f4e0 <rfree>:
c000f4e0:	83 ec 18             	sub    esp,0x18
c000f4e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4e7:	e8 71 16 ff ff       	call   c0000b5d <dlfree>
c000f4ec:	83 c4 1c             	add    esp,0x1c
c000f4ef:	c3                   	ret    

c000f4f0 <calloc>:
c000f4f0:	56                   	push   esi
c000f4f1:	53                   	push   ebx
c000f4f2:	83 ec 10             	sub    esp,0x10
c000f4f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f4f9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f4fe:	53                   	push   ebx
c000f4ff:	e8 bc ff ff ff       	call   c000f4c0 <malloc>
c000f504:	89 c6                	mov    esi,eax
c000f506:	83 c4 0c             	add    esp,0xc
c000f509:	53                   	push   ebx
c000f50a:	6a 00                	push   0x0
c000f50c:	50                   	push   eax
c000f50d:	e8 6a 11 ff ff       	call   c000067c <memset>
c000f512:	89 f0                	mov    eax,esi
c000f514:	83 c4 14             	add    esp,0x14
c000f517:	5b                   	pop    ebx
c000f518:	5e                   	pop    esi
c000f519:	c3                   	ret    

c000f51a <hwTextMode_loadInData(VgaText*)>:
c000f51a:	57                   	push   edi
c000f51b:	56                   	push   esi
c000f51c:	53                   	push   ebx
c000f51d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f521:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f527:	85 c0                	test   eax,eax
c000f529:	7e 30                	jle    c000f55b <hwTextMode_loadInData(VgaText*)+0x41>
c000f52b:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f52e:	31 f6                	xor    esi,esi
c000f530:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f533:	31 c0                	xor    eax,eax
c000f535:	c1 e1 05             	shl    ecx,0x5
c000f538:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f53e:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f542:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f546:	40                   	inc    eax
c000f547:	83 f8 50             	cmp    eax,0x50
c000f54a:	75 f2                	jne    c000f53e <hwTextMode_loadInData(VgaText*)+0x24>
c000f54c:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f552:	46                   	inc    esi
c000f553:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f559:	7f d5                	jg     c000f530 <hwTextMode_loadInData(VgaText*)+0x16>
c000f55b:	5b                   	pop    ebx
c000f55c:	5e                   	pop    esi
c000f55d:	5f                   	pop    edi
c000f55e:	c3                   	ret    

c000f55f <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f55f:	56                   	push   esi
c000f560:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f565:	53                   	push   ebx
c000f566:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f56a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f56e:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f574:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f57a:	c1 e0 04             	shl    eax,0x4
c000f57d:	83 e6 0f             	and    esi,0xf
c000f580:	0f b6 c0             	movzx  eax,al
c000f583:	41                   	inc    ecx
c000f584:	09 f0                	or     eax,esi
c000f586:	83 c2 02             	add    edx,0x2
c000f589:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f58d:	c1 e0 08             	shl    eax,0x8
c000f590:	09 f0                	or     eax,esi
c000f592:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f596:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f59c:	75 d0                	jne    c000f56e <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f59e:	5b                   	pop    ebx
c000f59f:	5e                   	pop    esi
c000f5a0:	c3                   	ret    

c000f5a1 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5a1:	56                   	push   esi
c000f5a2:	53                   	push   ebx
c000f5a3:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5a8:	74 38                	je     c000f5e2 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5aa:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5af:	b0 0a                	mov    al,0xa
c000f5b1:	89 da                	mov    edx,ebx
c000f5b3:	ee                   	out    dx,al
c000f5b4:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5b9:	89 ca                	mov    edx,ecx
c000f5bb:	ec                   	in     al,dx
c000f5bc:	b2 0f                	mov    dl,0xf
c000f5be:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5c2:	83 e0 c0             	and    eax,0xffffffc0
c000f5c5:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5cb:	09 d0                	or     eax,edx
c000f5cd:	89 ca                	mov    edx,ecx
c000f5cf:	ee                   	out    dx,al
c000f5d0:	b0 0b                	mov    al,0xb
c000f5d2:	89 da                	mov    edx,ebx
c000f5d4:	ee                   	out    dx,al
c000f5d5:	89 ca                	mov    edx,ecx
c000f5d7:	ec                   	in     al,dx
c000f5d8:	83 e0 e0             	and    eax,0xffffffe0
c000f5db:	83 c8 0f             	or     eax,0xf
c000f5de:	ee                   	out    dx,al
c000f5df:	5b                   	pop    ebx
c000f5e0:	5e                   	pop    esi
c000f5e1:	c3                   	ret    
c000f5e2:	b0 0a                	mov    al,0xa
c000f5e4:	ba d4 03 00 00       	mov    edx,0x3d4
c000f5e9:	ee                   	out    dx,al
c000f5ea:	b0 20                	mov    al,0x20
c000f5ec:	ba d5 03 00 00       	mov    edx,0x3d5
c000f5f1:	ee                   	out    dx,al
c000f5f2:	5b                   	pop    ebx
c000f5f3:	5e                   	pop    esi
c000f5f4:	c3                   	ret    

c000f5f5 <hwTextMode_update(VgaText*)>:
c000f5f5:	c3                   	ret    

c000f5f6 <hwTextMode_updateCursor(VgaText*)>:
c000f5f6:	56                   	push   esi
c000f5f7:	b9 19 00 00 00       	mov    ecx,0x19
c000f5fc:	53                   	push   ebx
c000f5fd:	be d4 03 00 00       	mov    esi,0x3d4
c000f602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f606:	89 f2                	mov    edx,esi
c000f608:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f60e:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f614:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f617:	c1 e1 04             	shl    ecx,0x4
c000f61a:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f620:	b0 0f                	mov    al,0xf
c000f622:	ee                   	out    dx,al
c000f623:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f628:	88 c8                	mov    al,cl
c000f62a:	89 da                	mov    edx,ebx
c000f62c:	ee                   	out    dx,al
c000f62d:	b0 0e                	mov    al,0xe
c000f62f:	89 f2                	mov    edx,esi
c000f631:	ee                   	out    dx,al
c000f632:	89 c8                	mov    eax,ecx
c000f634:	89 da                	mov    edx,ebx
c000f636:	66 c1 e8 08          	shr    ax,0x8
c000f63a:	ee                   	out    dx,al
c000f63b:	5b                   	pop    ebx
c000f63c:	5e                   	pop    esi
c000f63d:	c3                   	ret    

c000f63e <hwTextMode_disableBlink(VgaText*, bool)>:
c000f63e:	ba da 03 00 00       	mov    edx,0x3da
c000f643:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f648:	75 18                	jne    c000f662 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f64a:	ec                   	in     al,dx
c000f64b:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f650:	b0 30                	mov    al,0x30
c000f652:	89 ca                	mov    edx,ecx
c000f654:	ee                   	out    dx,al
c000f655:	ba c1 03 00 00       	mov    edx,0x3c1
c000f65a:	ec                   	in     al,dx
c000f65b:	83 c8 08             	or     eax,0x8
c000f65e:	89 ca                	mov    edx,ecx
c000f660:	ee                   	out    dx,al
c000f661:	c3                   	ret    
c000f662:	ec                   	in     al,dx
c000f663:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f668:	b0 30                	mov    al,0x30
c000f66a:	89 ca                	mov    edx,ecx
c000f66c:	ee                   	out    dx,al
c000f66d:	ba c1 03 00 00       	mov    edx,0x3c1
c000f672:	ec                   	in     al,dx
c000f673:	83 e0 f7             	and    eax,0xfffffff7
c000f676:	89 ca                	mov    edx,ecx
c000f678:	ee                   	out    dx,al
c000f679:	c3                   	ret    

c000f67a <hwTextMode_scrollScreen(VgaText*)>:
c000f67a:	55                   	push   ebp
c000f67b:	bd 02 00 00 00       	mov    ebp,0x2
c000f680:	57                   	push   edi
c000f681:	56                   	push   esi
c000f682:	53                   	push   ebx
c000f683:	83 ec 1c             	sub    esp,0x1c
c000f686:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f68e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f692:	31 c0                	xor    eax,eax
c000f694:	eb 0b                	jmp    c000f6a1 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f696:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f69c:	74 57                	je     c000f6f5 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f69e:	43                   	inc    ebx
c000f69f:	89 f0                	mov    eax,esi
c000f6a1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6a7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6ad:	88 13                	mov    BYTE PTR [ebx],dl
c000f6af:	8d 70 01             	lea    esi,[eax+0x1]
c000f6b2:	83 fd 18             	cmp    ebp,0x18
c000f6b5:	75 df                	jne    c000f696 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f6b7:	a8 01                	test   al,0x1
c000f6b9:	75 13                	jne    c000f6ce <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f6bb:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6be:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c4:	75 d8                	jne    c000f69e <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f6c6:	83 c4 1c             	add    esp,0x1c
c000f6c9:	5b                   	pop    ebx
c000f6ca:	5e                   	pop    esi
c000f6cb:	5f                   	pop    edi
c000f6cc:	5d                   	pop    ebp
c000f6cd:	c3                   	ret    
c000f6ce:	83 ec 08             	sub    esp,0x8
c000f6d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6d5:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f6dc:	50                   	push   eax
c000f6dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6e1:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f6e8:	50                   	push   eax
c000f6e9:	e8 c0 0b 00 00       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c000f6ee:	83 c4 10             	add    esp,0x10
c000f6f1:	88 07                	mov    BYTE PTR [edi],al
c000f6f3:	eb c9                	jmp    c000f6be <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f6f5:	45                   	inc    ebp
c000f6f6:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f6fe:	eb 8e                	jmp    c000f68e <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f700 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f700:	56                   	push   esi
c000f701:	53                   	push   ebx
c000f702:	83 ec 0c             	sub    esp,0xc
c000f705:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f709:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f70d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f712:	50                   	push   eax
c000f713:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f718:	50                   	push   eax
c000f719:	e8 90 0b 00 00       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c000f71e:	5a                   	pop    edx
c000f71f:	0f b6 c0             	movzx  eax,al
c000f722:	59                   	pop    ecx
c000f723:	50                   	push   eax
c000f724:	89 f0                	mov    eax,esi
c000f726:	0f be f0             	movsx  esi,al
c000f729:	56                   	push   esi
c000f72a:	e8 25 0c 00 00       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c000f72f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f733:	ba 19 00 00 00       	mov    edx,0x19
c000f738:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f73e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f741:	8d 14 92             	lea    edx,[edx+edx*4]
c000f744:	c1 e1 04             	shl    ecx,0x4
c000f747:	c1 e2 04             	shl    edx,0x4
c000f74a:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f74e:	01 ca                	add    edx,ecx
c000f750:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f758:	83 c4 14             	add    esp,0x14
c000f75b:	5b                   	pop    ebx
c000f75c:	5e                   	pop    esi
c000f75d:	c3                   	ret    

c000f75e <setupTextMode()>:
c000f75e:	c7 05 38 be 02 c0 3e f6 00 c0 	mov    DWORD PTR ds:0xc002be38,0xc000f63e
c000f768:	c7 05 24 be 02 c0 1a f5 00 c0 	mov    DWORD PTR ds:0xc002be24,0xc000f51a
c000f772:	c7 05 20 be 02 c0 5f f5 00 c0 	mov    DWORD PTR ds:0xc002be20,0xc000f55f
c000f77c:	c7 05 2c be 02 c0 7a f6 00 c0 	mov    DWORD PTR ds:0xc002be2c,0xc000f67a
c000f786:	c7 05 34 be 02 c0 a1 f5 00 c0 	mov    DWORD PTR ds:0xc002be34,0xc000f5a1
c000f790:	c7 05 28 be 02 c0 f5 f5 00 c0 	mov    DWORD PTR ds:0xc002be28,0xc000f5f5
c000f79a:	c7 05 30 be 02 c0 f6 f5 00 c0 	mov    DWORD PTR ds:0xc002be30,0xc000f5f6
c000f7a4:	c7 05 3c be 02 c0 00 f7 00 c0 	mov    DWORD PTR ds:0xc002be3c,0xc000f700
c000f7ae:	c3                   	ret    

c000f7af <kernel_main>:
c000f7af:	57                   	push   edi
c000f7b0:	bf f9 03 00 00       	mov    edi,0x3f9
c000f7b5:	56                   	push   esi
c000f7b6:	31 f6                	xor    esi,esi
c000f7b8:	53                   	push   ebx
c000f7b9:	83 ec 10             	sub    esp,0x10
c000f7bc:	e8 47 09 00 00       	call   c0010108 <installVgaTextImplementation()>
c000f7c1:	e8 98 ff ff ff       	call   c000f75e <setupTextMode()>
c000f7c6:	89 f0                	mov    eax,esi
c000f7c8:	89 fa                	mov    edx,edi
c000f7ca:	ee                   	out    dx,al
c000f7cb:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f7d0:	b0 80                	mov    al,0x80
c000f7d2:	89 da                	mov    edx,ebx
c000f7d4:	ee                   	out    dx,al
c000f7d5:	b1 03                	mov    cl,0x3
c000f7d7:	ba f8 03 00 00       	mov    edx,0x3f8
c000f7dc:	88 c8                	mov    al,cl
c000f7de:	ee                   	out    dx,al
c000f7df:	89 f0                	mov    eax,esi
c000f7e1:	89 fa                	mov    edx,edi
c000f7e3:	ee                   	out    dx,al
c000f7e4:	88 c8                	mov    al,cl
c000f7e6:	89 da                	mov    edx,ebx
c000f7e8:	ee                   	out    dx,al
c000f7e9:	b0 c7                	mov    al,0xc7
c000f7eb:	ba fa 03 00 00       	mov    edx,0x3fa
c000f7f0:	ee                   	out    dx,al
c000f7f1:	b0 0b                	mov    al,0xb
c000f7f3:	ba fc 03 00 00       	mov    edx,0x3fc
c000f7f8:	ee                   	out    dx,al
c000f7f9:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f7fe:	83 ec 0c             	sub    esp,0xc
c000f801:	05 ff 0f 00 00       	add    eax,0xfff
c000f806:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f80b:	50                   	push   eax
c000f80c:	e8 b3 03 00 00       	call   c000fbc4 <Phys::physicalMemorySetup(unsigned int)>
c000f811:	e8 98 1f 00 00       	call   c00117ae <Virt::virtualMemorySetup()>
c000f816:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f81c:	83 c4 10             	add    esp,0x10
c000f81f:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f825:	75 0e                	jne    c000f835 <kernel_main+0x86>
c000f827:	89 d8                	mov    eax,ebx
c000f829:	25 48 03 00 00       	and    eax,0x348
c000f82e:	3d 00 03 00 00       	cmp    eax,0x300
c000f833:	74 10                	je     c000f845 <kernel_main+0x96>
c000f835:	83 ec 0c             	sub    esp,0xc
c000f838:	68 63 96 02 c0       	push   0xc0029663
c000f83d:	e8 15 99 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	83 ec 0c             	sub    esp,0xc
c000f848:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000f84e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f852:	53                   	push   ebx
c000f853:	e8 0a 21 00 00       	call   c0011962 <VAS::VAS()>
c000f858:	89 1d e4 be 02 c0    	mov    DWORD PTR ds:0xc002bee4,ebx
c000f85e:	e8 bd 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f863:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f86a:	e8 51 fc ff ff       	call   c000f4c0 <malloc>
c000f86f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f872:	89 c6                	mov    esi,eax
c000f874:	e8 61 ea ff ff       	call   c000e2da <Computer::Computer()>
c000f879:	6a 00                	push   0x0
c000f87b:	89 35 88 bd 02 c0    	mov    DWORD PTR ds:0xc002bd88,esi
c000f881:	6a 00                	push   0x0
c000f883:	6a 00                	push   0x0
c000f885:	56                   	push   esi
c000f886:	e8 7f f2 ff ff       	call   c000eb0a <Computer::open(int, int, void*)>
c000f88b:	83 c4 14             	add    esp,0x14
c000f88e:	53                   	push   ebx
c000f88f:	e8 68 23 00 00       	call   c0011bfc <VAS::~VAS()>
c000f894:	c7 04 24 0c 80 02 c0 	mov    DWORD PTR [esp],0xc002800c
c000f89b:	e8 b7 98 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000f8a0:	83 c4 20             	add    esp,0x20
c000f8a3:	5b                   	pop    ebx
c000f8a4:	5e                   	pop    esi
c000f8a5:	5f                   	pop    edi
c000f8a6:	c3                   	ret    

c000f8a7 <Phys::allocateDMA(unsigned long)>:
c000f8a7:	55                   	push   ebp
c000f8a8:	31 d2                	xor    edx,edx
c000f8aa:	57                   	push   edi
c000f8ab:	31 ed                	xor    ebp,ebp
c000f8ad:	56                   	push   esi
c000f8ae:	31 c9                	xor    ecx,ecx
c000f8b0:	53                   	push   ebx
c000f8b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8b5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f8bb:	31 c0                	xor    eax,eax
c000f8bd:	c1 ee 0c             	shr    esi,0xc
c000f8c0:	eb 17                	jmp    c000f8d9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8c2:	85 c9                	test   ecx,ecx
c000f8c4:	75 04                	jne    c000f8ca <Phys::allocateDMA(unsigned long)+0x23>
c000f8c6:	89 d5                	mov    ebp,edx
c000f8c8:	89 d0                	mov    eax,edx
c000f8ca:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f8cd:	39 de                	cmp    esi,ebx
c000f8cf:	74 20                	je     c000f8f1 <Phys::allocateDMA(unsigned long)+0x4a>
c000f8d1:	42                   	inc    edx
c000f8d2:	89 d9                	mov    ecx,ebx
c000f8d4:	83 fa 2f             	cmp    edx,0x2f
c000f8d7:	7f 11                	jg     c000f8ea <Phys::allocateDMA(unsigned long)+0x43>
c000f8d9:	80 ba e0 bd 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd4220],0x0
c000f8e0:	74 e0                	je     c000f8c2 <Phys::allocateDMA(unsigned long)+0x1b>
c000f8e2:	31 c9                	xor    ecx,ecx
c000f8e4:	42                   	inc    edx
c000f8e5:	83 fa 2f             	cmp    edx,0x2f
c000f8e8:	7e ef                	jle    c000f8d9 <Phys::allocateDMA(unsigned long)+0x32>
c000f8ea:	5b                   	pop    ebx
c000f8eb:	31 c0                	xor    eax,eax
c000f8ed:	5e                   	pop    esi
c000f8ee:	5f                   	pop    edi
c000f8ef:	5d                   	pop    ebp
c000f8f0:	c3                   	ret    
c000f8f1:	8d 14 30             	lea    edx,[eax+esi*1]
c000f8f4:	89 d7                	mov    edi,edx
c000f8f6:	4f                   	dec    edi
c000f8f7:	79 03                	jns    c000f8fc <Phys::allocateDMA(unsigned long)+0x55>
c000f8f9:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f8fc:	c1 ff 04             	sar    edi,0x4
c000f8ff:	89 c2                	mov    edx,eax
c000f901:	c1 fa 04             	sar    edx,0x4
c000f904:	39 fa                	cmp    edx,edi
c000f906:	75 2f                	jne    c000f937 <Phys::allocateDMA(unsigned long)+0x90>
c000f908:	85 db                	test   ebx,ebx
c000f90a:	74 1a                	je     c000f926 <Phys::allocateDMA(unsigned long)+0x7f>
c000f90c:	be e0 bd 02 c0       	mov    esi,0xc002bde0
c000f911:	8d 90 e0 bd 02 c0    	lea    edx,[eax-0x3ffd4220]
c000f917:	f7 d6                	not    esi
c000f919:	29 c6                	sub    esi,eax
c000f91b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f91e:	42                   	inc    edx
c000f91f:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f922:	39 d9                	cmp    ecx,ebx
c000f924:	7f f5                	jg     c000f91b <Phys::allocateDMA(unsigned long)+0x74>
c000f926:	85 ff                	test   edi,edi
c000f928:	74 13                	je     c000f93d <Phys::allocateDMA(unsigned long)+0x96>
c000f92a:	5b                   	pop    ebx
c000f92b:	05 50 20 0c 00       	add    eax,0xc2050
c000f930:	5e                   	pop    esi
c000f931:	c1 e0 0c             	shl    eax,0xc
c000f934:	5f                   	pop    edi
c000f935:	5d                   	pop    ebp
c000f936:	c3                   	ret    
c000f937:	89 ea                	mov    edx,ebp
c000f939:	31 c9                	xor    ecx,ecx
c000f93b:	eb a7                	jmp    c000f8e4 <Phys::allocateDMA(unsigned long)+0x3d>
c000f93d:	5b                   	pop    ebx
c000f93e:	c1 e0 0c             	shl    eax,0xc
c000f941:	5e                   	pop    esi
c000f942:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f947:	5f                   	pop    edi
c000f948:	5d                   	pop    ebp
c000f949:	c3                   	ret    

c000f94a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f94e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f952:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f958:	c1 e9 0c             	shr    ecx,0xc
c000f95b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f960:	76 25                	jbe    c000f987 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f962:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f967:	c1 e8 0c             	shr    eax,0xc
c000f96a:	8d 50 10             	lea    edx,[eax+0x10]
c000f96d:	85 c9                	test   ecx,ecx
c000f96f:	74 15                	je     c000f986 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f971:	8d 82 e0 bd 02 c0    	lea    eax,[edx-0x3ffd4220]
c000f977:	8d 94 11 e0 bd 02 c0 	lea    edx,[ecx+edx*1-0x3ffd4220]
c000f97e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f981:	40                   	inc    eax
c000f982:	39 d0                	cmp    eax,edx
c000f984:	75 f8                	jne    c000f97e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f986:	c3                   	ret    
c000f987:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f98d:	c1 ea 0c             	shr    edx,0xc
c000f990:	eb db                	jmp    c000f96d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f992 <Phys::setPageState(unsigned long, bool)>:
c000f992:	56                   	push   esi
c000f993:	ba 01 00 00 00       	mov    edx,0x1
c000f998:	53                   	push   ebx
c000f999:	8b 35 38 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad38
c000f99f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f9a7:	89 c8                	mov    eax,ecx
c000f9a9:	83 e1 07             	and    ecx,0x7
c000f9ac:	c1 e8 03             	shr    eax,0x3
c000f9af:	d3 e3                	shl    ebx,cl
c000f9b1:	01 c6                	add    esi,eax
c000f9b3:	d3 e2                	shl    edx,cl
c000f9b5:	f7 d2                	not    edx
c000f9b7:	20 16                	and    BYTE PTR [esi],dl
c000f9b9:	03 05 38 ad 02 c0    	add    eax,DWORD PTR ds:0xc002ad38
c000f9bf:	08 18                	or     BYTE PTR [eax],bl
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <Phys::getPageState(unsigned long)>:
c000f9c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9c8:	8b 15 38 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad38
c000f9ce:	89 c8                	mov    eax,ecx
c000f9d0:	83 e1 07             	and    ecx,0x7
c000f9d3:	c1 e8 03             	shr    eax,0x3
c000f9d6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f9da:	d3 f8                	sar    eax,cl
c000f9dc:	83 e0 01             	and    eax,0x1
c000f9df:	c3                   	ret    

c000f9e0 <Phys::freePage(unsigned long)>:
c000f9e0:	53                   	push   ebx
c000f9e1:	83 ec 08             	sub    esp,0x8
c000f9e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9e8:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f9ee:	76 57                	jbe    c000fa47 <Phys::freePage(unsigned long)+0x67>
c000f9f0:	c1 eb 0c             	shr    ebx,0xc
c000f9f3:	53                   	push   ebx
c000f9f4:	e8 cb ff ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000f9f9:	5a                   	pop    edx
c000f9fa:	84 c0                	test   al,al
c000f9fc:	74 5b                	je     c000fa59 <Phys::freePage(unsigned long)+0x79>
c000f9fe:	a1 cc bd 02 c0       	mov    eax,ds:0xc002bdcc
c000fa03:	48                   	dec    eax
c000fa04:	a3 cc bd 02 c0       	mov    ds:0xc002bdcc,eax
c000fa09:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa0f:	c1 e0 02             	shl    eax,0x2
c000fa12:	99                   	cdq    
c000fa13:	f7 3d d0 bd 02 c0    	idiv   DWORD PTR ds:0xc002bdd0
c000fa19:	39 05 c8 bd 02 c0    	cmp    DWORD PTR ds:0xc002bdc8,eax
c000fa1f:	75 13                	jne    c000fa34 <Phys::freePage(unsigned long)+0x54>
c000fa21:	83 ec 08             	sub    esp,0x8
c000fa24:	6a 00                	push   0x0
c000fa26:	53                   	push   ebx
c000fa27:	e8 66 ff ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fa2c:	83 c4 10             	add    esp,0x10
c000fa2f:	83 c4 08             	add    esp,0x8
c000fa32:	5b                   	pop    ebx
c000fa33:	c3                   	ret    
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	a3 c8 bd 02 c0       	mov    ds:0xc002bdc8,eax
c000fa3c:	50                   	push   eax
c000fa3d:	e8 5a 0a 00 00       	call   c001049c <VgaText::updateRAMUsageDisplay(int)>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	eb da                	jmp    c000fa21 <Phys::freePage(unsigned long)+0x41>
c000fa47:	68 00 10 00 00       	push   0x1000
c000fa4c:	53                   	push   ebx
c000fa4d:	e8 f8 fe ff ff       	call   c000f94a <Phys::freeDMA(unsigned long, unsigned long)>
c000fa52:	59                   	pop    ecx
c000fa53:	5b                   	pop    ebx
c000fa54:	83 c4 08             	add    esp,0x8
c000fa57:	5b                   	pop    ebx
c000fa58:	c3                   	ret    
c000fa59:	c7 44 24 10 27 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028027
c000fa61:	83 c4 08             	add    esp,0x8
c000fa64:	5b                   	pop    ebx
c000fa65:	e9 ed 96 00 00       	jmp    c0019157 <Krnl::panic(char const*)>

c000fa6a <Phys::allocatePage()>:
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	51                   	push   ecx
c000fa6d:	8b 35 c0 bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdc0
c000fa73:	89 f3                	mov    ebx,esi
c000fa75:	eb 0a                	jmp    c000fa81 <Phys::allocatePage()+0x17>
c000fa77:	89 1d c0 bd 02 c0    	mov    DWORD PTR ds:0xc002bdc0,ebx
c000fa7d:	39 de                	cmp    esi,ebx
c000fa7f:	74 24                	je     c000faa5 <Phys::allocatePage()+0x3b>
c000fa81:	53                   	push   ebx
c000fa82:	e8 3d ff ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000fa87:	5a                   	pop    edx
c000fa88:	84 c0                	test   al,al
c000fa8a:	74 5a                	je     c000fae6 <Phys::allocatePage()+0x7c>
c000fa8c:	43                   	inc    ebx
c000fa8d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa93:	75 e2                	jne    c000fa77 <Phys::allocatePage()+0xd>
c000fa95:	31 db                	xor    ebx,ebx
c000fa97:	c7 05 c0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bdc0,0x0
c000faa1:	39 de                	cmp    esi,ebx
c000faa3:	75 dc                	jne    c000fa81 <Phys::allocatePage()+0x17>
c000faa5:	83 ec 0c             	sub    esp,0xc
c000faa8:	68 3d 80 02 c0       	push   0xc002803d
c000faad:	e8 db 2b 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fab2:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fab9:	e8 e9 fd ff ff       	call   c000f8a7 <Phys::allocateDMA(unsigned long)>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	85 c0                	test   eax,eax
c000fac3:	75 56                	jne    c000fb1b <Phys::allocatePage()+0xb1>
c000fac5:	83 ec 0c             	sub    esp,0xc
c000fac8:	68 4e 80 02 c0       	push   0xc002804e
c000facd:	e8 85 96 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	8b 1d c0 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bdc0
c000fadb:	53                   	push   ebx
c000fadc:	e8 e3 fe ff ff       	call   c000f9c4 <Phys::getPageState(unsigned long)>
c000fae1:	5a                   	pop    edx
c000fae2:	84 c0                	test   al,al
c000fae4:	75 a6                	jne    c000fa8c <Phys::allocatePage()+0x22>
c000fae6:	6a 01                	push   0x1
c000fae8:	53                   	push   ebx
c000fae9:	e8 a4 fe ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000faee:	a1 cc bd 02 c0       	mov    eax,ds:0xc002bdcc
c000faf3:	59                   	pop    ecx
c000faf4:	40                   	inc    eax
c000faf5:	5b                   	pop    ebx
c000faf6:	a3 cc bd 02 c0       	mov    ds:0xc002bdcc,eax
c000fafb:	8d 04 80             	lea    eax,[eax+eax*4]
c000fafe:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb01:	c1 e0 02             	shl    eax,0x2
c000fb04:	99                   	cdq    
c000fb05:	f7 3d d0 bd 02 c0    	idiv   DWORD PTR ds:0xc002bdd0
c000fb0b:	39 05 c8 bd 02 c0    	cmp    DWORD PTR ds:0xc002bdc8,eax
c000fb11:	75 0c                	jne    c000fb1f <Phys::allocatePage()+0xb5>
c000fb13:	a1 c0 bd 02 c0       	mov    eax,ds:0xc002bdc0
c000fb18:	c1 e0 0c             	shl    eax,0xc
c000fb1b:	5a                   	pop    edx
c000fb1c:	5b                   	pop    ebx
c000fb1d:	5e                   	pop    esi
c000fb1e:	c3                   	ret    
c000fb1f:	83 ec 0c             	sub    esp,0xc
c000fb22:	a3 c8 bd 02 c0       	mov    ds:0xc002bdc8,eax
c000fb27:	50                   	push   eax
c000fb28:	e8 6f 09 00 00       	call   c001049c <VgaText::updateRAMUsageDisplay(int)>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	eb e1                	jmp    c000fb13 <Phys::allocatePage()+0xa9>

c000fb32 <Phys::allocateContiguousPages(int)>:
c000fb32:	57                   	push   edi
c000fb33:	56                   	push   esi
c000fb34:	53                   	push   ebx
c000fb35:	31 db                	xor    ebx,ebx
c000fb37:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fb3b:	e8 5d c6 00 00       	call   c001c19d <lockScheduler()>
c000fb40:	85 db                	test   ebx,ebx
c000fb42:	75 11                	jne    c000fb55 <Phys::allocateContiguousPages(int)+0x23>
c000fb44:	e8 21 ff ff ff       	call   c000fa6a <Phys::allocatePage()>
c000fb49:	83 ff 01             	cmp    edi,0x1
c000fb4c:	89 c6                	mov    esi,eax
c000fb4e:	74 21                	je     c000fb71 <Phys::allocateContiguousPages(int)+0x3f>
c000fb50:	bb 01 00 00 00       	mov    ebx,0x1
c000fb55:	e8 10 ff ff ff       	call   c000fa6a <Phys::allocatePage()>
c000fb5a:	89 da                	mov    edx,ebx
c000fb5c:	c1 e2 0c             	shl    edx,0xc
c000fb5f:	01 f2                	add    edx,esi
c000fb61:	39 c2                	cmp    edx,eax
c000fb63:	74 17                	je     c000fb7c <Phys::allocateContiguousPages(int)+0x4a>
c000fb65:	bb 01 00 00 00       	mov    ebx,0x1
c000fb6a:	89 c6                	mov    esi,eax
c000fb6c:	83 ff 01             	cmp    edi,0x1
c000fb6f:	75 e4                	jne    c000fb55 <Phys::allocateContiguousPages(int)+0x23>
c000fb71:	e8 29 c6 00 00       	call   c001c19f <unlockScheduler()>
c000fb76:	89 f0                	mov    eax,esi
c000fb78:	5b                   	pop    ebx
c000fb79:	5e                   	pop    esi
c000fb7a:	5f                   	pop    edi
c000fb7b:	c3                   	ret    
c000fb7c:	43                   	inc    ebx
c000fb7d:	39 fb                	cmp    ebx,edi
c000fb7f:	75 bf                	jne    c000fb40 <Phys::allocateContiguousPages(int)+0xe>
c000fb81:	e8 19 c6 00 00       	call   c001c19f <unlockScheduler()>
c000fb86:	89 f0                	mov    eax,esi
c000fb88:	5b                   	pop    ebx
c000fb89:	5e                   	pop    esi
c000fb8a:	5f                   	pop    edi
c000fb8b:	c3                   	ret    

c000fb8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fb8c:	56                   	push   esi
c000fb8d:	53                   	push   ebx
c000fb8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb92:	39 1d c4 bd 02 c0    	cmp    DWORD PTR ds:0xc002bdc4,ebx
c000fb98:	73 06                	jae    c000fba0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fb9a:	89 1d c4 bd 02 c0    	mov    DWORD PTR ds:0xc002bdc4,ebx
c000fba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fba4:	c1 eb 0c             	shr    ebx,0xc
c000fba7:	c1 e8 0c             	shr    eax,0xc
c000fbaa:	39 d8                	cmp    eax,ebx
c000fbac:	73 13                	jae    c000fbc1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fbae:	6a 00                	push   0x0
c000fbb0:	8d 70 01             	lea    esi,[eax+0x1]
c000fbb3:	50                   	push   eax
c000fbb4:	e8 d9 fd ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fbb9:	5a                   	pop    edx
c000fbba:	89 f0                	mov    eax,esi
c000fbbc:	59                   	pop    ecx
c000fbbd:	39 f3                	cmp    ebx,esi
c000fbbf:	75 ed                	jne    c000fbae <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fbc1:	5b                   	pop    ebx
c000fbc2:	5e                   	pop    esi
c000fbc3:	c3                   	ret    

c000fbc4 <Phys::physicalMemorySetup(unsigned int)>:
c000fbc4:	55                   	push   ebp
c000fbc5:	57                   	push   edi
c000fbc6:	56                   	push   esi
c000fbc7:	53                   	push   ebx
c000fbc8:	31 db                	xor    ebx,ebx
c000fbca:	83 ec 40             	sub    esp,0x40
c000fbcd:	6a 30                	push   0x30
c000fbcf:	6a 00                	push   0x0
c000fbd1:	68 e0 bd 02 c0       	push   0xc002bde0
c000fbd6:	e8 a1 0a ff ff       	call   c000067c <memset>
c000fbdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fbdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fbe4:	05 00 10 00 00       	add    eax,0x1000
c000fbe9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fbed:	83 c4 10             	add    esp,0x10
c000fbf0:	83 ec 08             	sub    esp,0x8
c000fbf3:	6a 01                	push   0x1
c000fbf5:	53                   	push   ebx
c000fbf6:	43                   	inc    ebx
c000fbf7:	e8 96 fd ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fbfc:	83 c4 10             	add    esp,0x10
c000fbff:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc05:	75 e9                	jne    c000fbf0 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc07:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc0e:	66 85 c0             	test   ax,ax
c000fc11:	0f 84 8e 01 00 00    	je     c000fda5 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc17:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fc23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc27:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fc2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fc30:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fc38:	eb 15                	jmp    c000fc4f <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fc3a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fc3e:	83 c3 18             	add    ebx,0x18
c000fc41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc45:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fc49:	0f 84 66 01 00 00    	je     c000fdb5 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc4f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fc52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fc55:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fc58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc5c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc60:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fc62:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fc65:	01 f0                	add    eax,esi
c000fc67:	55                   	push   ebp
c000fc68:	11 fa                	adc    edx,edi
c000fc6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fc76:	56                   	push   esi
c000fc77:	68 88 80 02 c0       	push   0xc0028088
c000fc7c:	e8 0c 2a 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fc81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	09 f8                	or     eax,edi
c000fc8a:	0f 85 25 01 00 00    	jne    c000fdb5 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fc90:	4d                   	dec    ebp
c000fc91:	75 a7                	jne    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fc93:	ba 00 00 08 00       	mov    edx,0x80000
c000fc98:	89 c1                	mov    ecx,eax
c000fc9a:	39 f2                	cmp    edx,esi
c000fc9c:	19 f9                	sbb    ecx,edi
c000fc9e:	0f 82 a7 00 00 00    	jb     c000fd4b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fca4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fca8:	89 c1                	mov    ecx,eax
c000fcaa:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fcae:	0f 83 97 00 00 00    	jae    c000fd4b <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fcb4:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fcb9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fcbd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcc1:	39 fa                	cmp    edx,edi
c000fcc3:	19 e8                	sbb    eax,ebp
c000fcc5:	0f 82 14 01 00 00    	jb     c000fddf <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fccb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fccf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fcd3:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fcd9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcde:	83 d5 ff             	adc    ebp,0xffffffff
c000fce1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fce5:	31 c0                	xor    eax,eax
c000fce7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fceb:	39 fa                	cmp    edx,edi
c000fced:	89 c1                	mov    ecx,eax
c000fcef:	19 e9                	sbb    ecx,ebp
c000fcf1:	0f 83 43 ff ff ff    	jae    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fcf7:	be 00 00 08 00       	mov    esi,0x80000
c000fcfc:	50                   	push   eax
c000fcfd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd01:	57                   	push   edi
c000fd02:	56                   	push   esi
c000fd03:	68 ac 80 02 c0       	push   0xc00280ac
c000fd08:	e8 80 29 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fd0d:	5a                   	pop    edx
c000fd0e:	59                   	pop    ecx
c000fd0f:	57                   	push   edi
c000fd10:	56                   	push   esi
c000fd11:	e8 76 fe ff ff       	call   c000fb8c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd16:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd1e:	83 c4 0c             	add    esp,0xc
c000fd21:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fd25:	03 05 d0 bd 02 c0    	add    eax,DWORD PTR ds:0xc002bdd0
c000fd2b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fd32:	a3 d0 bd 02 c0       	mov    ds:0xc002bdd0,eax
c000fd37:	52                   	push   edx
c000fd38:	50                   	push   eax
c000fd39:	68 6a 80 02 c0       	push   0xc002806a
c000fd3e:	e8 4a 29 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	e9 ef fe ff ff       	jmp    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd4b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fd4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd57:	39 ea                	cmp    edx,ebp
c000fd59:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fd5d:	0f 82 d7 fe ff ff    	jb     c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd63:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd68:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fd6c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fd70:	0f 83 c4 fe ff ff    	jae    c000fc3a <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd76:	39 ee                	cmp    esi,ebp
c000fd78:	89 f8                	mov    eax,edi
c000fd7a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fd7e:	0f 83 78 ff ff ff    	jae    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd88:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fd8c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fd90:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fd94:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fda0:	e9 57 ff ff ff       	jmp    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fda5:	83 ec 0c             	sub    esp,0xc
c000fda8:	68 5c 80 02 c0       	push   0xc002805c
c000fdad:	e8 a5 93 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000fdb2:	83 c4 10             	add    esp,0x10
c000fdb5:	bb 40 01 00 00       	mov    ebx,0x140
c000fdba:	83 ec 08             	sub    esp,0x8
c000fdbd:	6a 00                	push   0x0
c000fdbf:	53                   	push   ebx
c000fdc0:	43                   	inc    ebx
c000fdc1:	e8 cc fb ff ff       	call   c000f992 <Phys::setPageState(unsigned long, bool)>
c000fdc6:	ff 05 d0 bd 02 c0    	inc    DWORD PTR ds:0xc002bdd0
c000fdcc:	83 c4 10             	add    esp,0x10
c000fdcf:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fdd5:	75 e3                	jne    c000fdba <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fdd7:	83 c4 3c             	add    esp,0x3c
c000fdda:	5b                   	pop    ebx
c000fddb:	5e                   	pop    esi
c000fddc:	5f                   	pop    edi
c000fddd:	5d                   	pop    ebp
c000fdde:	c3                   	ret    
c000fddf:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fde7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fdef:	e9 d7 fe ff ff       	jmp    c000fccb <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fdf4 <Pipe::isAtty()>:
c000fdf4:	31 c0                	xor    eax,eax
c000fdf6:	c3                   	ret    
c000fdf7:	90                   	nop

c000fdf8 <Pipe::~Pipe()>:
c000fdf8:	83 ec 0c             	sub    esp,0xc
c000fdfb:	ba 18 81 02 c0       	mov    edx,0xc0028118
c000fe00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe04:	89 10                	mov    DWORD PTR [eax],edx
c000fe06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0a:	83 ec 0c             	sub    esp,0xc
c000fe0d:	50                   	push   eax
c000fe0e:	e8 29 16 00 00       	call   c001143c <UnixFile::~UnixFile()>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	90                   	nop
c000fe17:	83 c4 0c             	add    esp,0xc
c000fe1a:	c3                   	ret    
c000fe1b:	90                   	nop

c000fe1c <Pipe::~Pipe()>:
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	83 ec 0c             	sub    esp,0xc
c000fe22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe26:	e8 cd ff ff ff       	call   c000fdf8 <Pipe::~Pipe()>
c000fe2b:	83 c4 10             	add    esp,0x10
c000fe2e:	83 ec 08             	sub    esp,0x8
c000fe31:	6a 20                	push   0x20
c000fe33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe37:	e8 71 27 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	83 c4 0c             	add    esp,0xc
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <Pipe::read(unsigned long long, void*, int*)>:
c000fe44:	55                   	push   ebp
c000fe45:	57                   	push   edi
c000fe46:	56                   	push   esi
c000fe47:	53                   	push   ebx
c000fe48:	83 ec 1c             	sub    esp,0x1c
c000fe4b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fe4f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fe53:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fe57:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fe5a:	89 c8                	mov    eax,ecx
c000fe5c:	99                   	cdq    
c000fe5d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fe61:	74 19                	je     c000fe7c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe63:	39 f9                	cmp    ecx,edi
c000fe65:	89 d1                	mov    ecx,edx
c000fe67:	19 f1                	sbb    ecx,esi
c000fe69:	73 11                	jae    c000fe7c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fe6b:	e8 2d c3 00 00       	call   c001c19d <lockScheduler()>
c000fe70:	e8 63 c6 00 00       	call   c001c4d8 <schedule()>
c000fe75:	e8 25 c3 00 00       	call   c001c19f <unlockScheduler()>
c000fe7a:	eb db                	jmp    c000fe57 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe7c:	39 f8                	cmp    eax,edi
c000fe7e:	89 d1                	mov    ecx,edx
c000fe80:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fe84:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fe88:	19 f1                	sbb    ecx,esi
c000fe8a:	73 08                	jae    c000fe94 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fe8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fe90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fe94:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe97:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe9a:	29 c6                	sub    esi,eax
c000fe9c:	89 f1                	mov    ecx,esi
c000fe9e:	c1 f9 1f             	sar    ecx,0x1f
c000fea1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fea5:	89 ca                	mov    edx,ecx
c000fea7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000feab:	19 d1                	sbb    ecx,edx
c000fead:	73 04                	jae    c000feb3 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000feaf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000feb3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000feb7:	89 fd                	mov    ebp,edi
c000feb9:	29 f5                	sub    ebp,esi
c000febb:	85 f6                	test   esi,esi
c000febd:	74 12                	je     c000fed1 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000febf:	52                   	push   edx
c000fec0:	56                   	push   esi
c000fec1:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000fec4:	50                   	push   eax
c000fec5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000fec9:	e8 78 07 ff ff       	call   c0000646 <memcpy>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	85 ed                	test   ebp,ebp
c000fed3:	74 12                	je     c000fee7 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fed5:	50                   	push   eax
c000fed6:	55                   	push   ebp
c000fed7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000feda:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fede:	56                   	push   esi
c000fedf:	e8 62 07 ff ff       	call   c0000646 <memcpy>
c000fee4:	83 c4 10             	add    esp,0x10
c000fee7:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000feea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000feed:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fef0:	99                   	cdq    
c000fef1:	89 f7                	mov    edi,esi
c000fef3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fef7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fefb:	c1 ff 1f             	sar    edi,0x1f
c000fefe:	57                   	push   edi
c000feff:	56                   	push   esi
c000ff00:	52                   	push   edx
c000ff01:	50                   	push   eax
c000ff02:	e8 45 4a 01 00       	call   c002494c <__umoddi3>
c000ff07:	83 c4 10             	add    esp,0x10
c000ff0a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff0d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff12:	75 10                	jne    c000ff24 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff14:	83 ec 0c             	sub    esp,0xc
c000ff17:	68 d5 80 02 c0       	push   0xc00280d5
c000ff1c:	e8 36 92 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ff21:	83 c4 10             	add    esp,0x10
c000ff24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff2c:	89 10                	mov    DWORD PTR [eax],edx
c000ff2e:	83 c4 1c             	add    esp,0x1c
c000ff31:	31 c0                	xor    eax,eax
c000ff33:	5b                   	pop    ebx
c000ff34:	5e                   	pop    esi
c000ff35:	5f                   	pop    edi
c000ff36:	5d                   	pop    ebp
c000ff37:	c3                   	ret    

c000ff38 <Pipe::write(unsigned long long, void*, int*)>:
c000ff38:	55                   	push   ebp
c000ff39:	57                   	push   edi
c000ff3a:	56                   	push   esi
c000ff3b:	53                   	push   ebx
c000ff3c:	83 ec 1c             	sub    esp,0x1c
c000ff3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ff47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ff4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff4e:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ff51:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ff54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff58:	89 de                	mov    esi,ebx
c000ff5a:	89 df                	mov    edi,ebx
c000ff5c:	c1 ff 1f             	sar    edi,0x1f
c000ff5f:	01 c6                	add    esi,eax
c000ff61:	89 c8                	mov    eax,ecx
c000ff63:	11 d7                	adc    edi,edx
c000ff65:	99                   	cdq    
c000ff66:	39 f1                	cmp    ecx,esi
c000ff68:	89 d0                	mov    eax,edx
c000ff6a:	19 f8                	sbb    eax,edi
c000ff6c:	b8 01 00 00 00       	mov    eax,0x1
c000ff71:	0f 82 80 00 00 00    	jb     c000fff7 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ff77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ff7a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ff7d:	01 d8                	add    eax,ebx
c000ff7f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ff83:	99                   	cdq    
c000ff84:	f7 f9                	idiv   ecx
c000ff86:	29 d1                	sub    ecx,edx
c000ff88:	89 d7                	mov    edi,edx
c000ff8a:	89 c8                	mov    eax,ecx
c000ff8c:	99                   	cdq    
c000ff8d:	39 ce                	cmp    esi,ecx
c000ff8f:	19 d3                	sbb    ebx,edx
c000ff91:	bb 00 00 00 00       	mov    ebx,0x0
c000ff96:	72 04                	jb     c000ff9c <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ff98:	89 f3                	mov    ebx,esi
c000ff9a:	29 cb                	sub    ebx,ecx
c000ff9c:	89 f1                	mov    ecx,esi
c000ff9e:	29 d9                	sub    ecx,ebx
c000ffa0:	74 1a                	je     c000ffbc <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ffa2:	52                   	push   edx
c000ffa3:	51                   	push   ecx
c000ffa4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ffa8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ffac:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ffaf:	57                   	push   edi
c000ffb0:	e8 91 06 ff ff       	call   c0000646 <memcpy>
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffbc:	85 db                	test   ebx,ebx
c000ffbe:	74 12                	je     c000ffd2 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000ffc0:	50                   	push   eax
c000ffc1:	53                   	push   ebx
c000ffc2:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ffc6:	51                   	push   ecx
c000ffc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ffca:	e8 77 06 ff ff       	call   c0000646 <memcpy>
c000ffcf:	83 c4 10             	add    esp,0x10
c000ffd2:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ffd5:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffda:	75 10                	jne    c000ffec <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	68 f1 80 02 c0       	push   0xc00280f1
c000ffe4:	e8 6e 91 00 00       	call   c0019157 <Krnl::panic(char const*)>
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fff0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fff3:	89 38                	mov    DWORD PTR [eax],edi
c000fff5:	31 c0                	xor    eax,eax
c000fff7:	83 c4 1c             	add    esp,0x1c
c000fffa:	5b                   	pop    ebx
c000fffb:	5e                   	pop    esi
c000fffc:	5f                   	pop    edi
c000fffd:	5d                   	pop    ebp
c000fffe:	c3                   	ret    
c000ffff:	90                   	nop

c0010000 <Pipe::Pipe(int)>:
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010007:	83 ec 08             	sub    esp,0x8
c001000a:	6a 00                	push   0x0
c001000c:	50                   	push   eax
c001000d:	e8 48 12 00 00       	call   c001125a <UnixFile::UnixFile(int)>
c0010012:	83 c4 10             	add    esp,0x10
c0010015:	ba 18 81 02 c0       	mov    edx,0xc0028118
c001001a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001e:	89 10                	mov    DWORD PTR [eax],edx
c0010020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010024:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010028:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001002b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010045:	83 ec 0c             	sub    esp,0xc
c0010048:	50                   	push   eax
c0010049:	e8 72 f4 ff ff       	call   c000f4c0 <malloc>
c001004e:	83 c4 10             	add    esp,0x10
c0010051:	89 c2                	mov    edx,eax
c0010053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010057:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001005a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010062:	90                   	nop
c0010063:	83 c4 0c             	add    esp,0xc
c0010066:	c3                   	ret    
c0010067:	90                   	nop

c0010068 <VgaText::isAtty()>:
c0010068:	b0 01                	mov    al,0x1
c001006a:	c3                   	ret    
c001006b:	90                   	nop

c001006c <VgaText::~VgaText()>:
c001006c:	83 ec 0c             	sub    esp,0xc
c001006f:	ba d4 81 02 c0       	mov    edx,0xc00281d4
c0010074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010078:	89 10                	mov    DWORD PTR [eax],edx
c001007a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	50                   	push   eax
c0010082:	e8 b5 13 00 00       	call   c001143c <UnixFile::~UnixFile()>
c0010087:	83 c4 10             	add    esp,0x10
c001008a:	90                   	nop
c001008b:	83 c4 0c             	add    esp,0xc
c001008e:	c3                   	ret    
c001008f:	90                   	nop

c0010090 <VgaText::~VgaText()>:
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	83 ec 0c             	sub    esp,0xc
c0010096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009a:	e8 cd ff ff ff       	call   c001006c <VgaText::~VgaText()>
c001009f:	83 c4 10             	add    esp,0x10
c00100a2:	83 ec 08             	sub    esp,0x8
c00100a5:	68 60 12 00 00       	push   0x1260
c00100aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ae:	e8 fa 24 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c00100b3:	83 c4 10             	add    esp,0x10
c00100b6:	83 c4 0c             	add    esp,0xc
c00100b9:	c3                   	ret    

c00100ba <VgaText::read(unsigned long long, void*, int*)>:
c00100ba:	83 ec 10             	sub    esp,0x10
c00100bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00100c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c9:	e8 78 57 00 00       	call   c0015846 <readKeyboard(VgaText*, char*, unsigned long)>
c00100ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00100d2:	89 02                	mov    DWORD PTR [edx],eax
c00100d4:	31 c0                	xor    eax,eax
c00100d6:	83 c4 1c             	add    esp,0x1c
c00100d9:	c3                   	ret    

c00100da <setTerminalScrollLock(bool)>:
c00100da:	c3                   	ret    

c00100db <addToTerminalCycle(VgaText*)>:
c00100db:	8b 15 40 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be40
c00100e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100e5:	85 d2                	test   edx,edx
c00100e7:	75 0c                	jne    c00100f5 <addToTerminalCycle(VgaText*)+0x1a>
c00100e9:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00100ef:	a3 40 be 02 c0       	mov    ds:0xc002be40,eax
c00100f4:	c3                   	ret    
c00100f5:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00100fb:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010101:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010107:	c3                   	ret    

c0010108 <installVgaTextImplementation()>:
c0010108:	83 ec 10             	sub    esp,0x10
c001010b:	6a 20                	push   0x20
c001010d:	6a 00                	push   0x0
c001010f:	68 20 be 02 c0       	push   0xc002be20
c0010114:	e8 63 05 ff ff       	call   c000067c <memset>
c0010119:	83 c4 1c             	add    esp,0x1c
c001011c:	c3                   	ret    

c001011d <scrollTerminalScrollLock(int)>:
c001011d:	c3                   	ret    

c001011e <VgaText::load()>:
c001011e:	53                   	push   ebx
c001011f:	31 c0                	xor    eax,eax
c0010121:	83 ec 58             	sub    esp,0x58
c0010124:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010128:	89 e2                	mov    edx,esp
c001012a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001012e:	40                   	inc    eax
c001012f:	83 f8 50             	cmp    eax,0x50
c0010132:	75 f6                	jne    c001012a <VgaText::load()+0xc>
c0010134:	31 c0                	xor    eax,eax
c0010136:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c001013d:	84 c9                	test   cl,cl
c001013f:	74 06                	je     c0010147 <VgaText::load()+0x29>
c0010141:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010144:	40                   	inc    eax
c0010145:	eb ef                	jmp    c0010136 <VgaText::load()+0x18>
c0010147:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c001014d:	85 c0                	test   eax,eax
c001014f:	74 09                	je     c001015a <VgaText::load()+0x3c>
c0010151:	51                   	push   ecx
c0010152:	51                   	push   ecx
c0010153:	52                   	push   edx
c0010154:	53                   	push   ebx
c0010155:	ff d0                	call   eax
c0010157:	83 c4 10             	add    esp,0x10
c001015a:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010160:	85 c0                	test   eax,eax
c0010162:	74 09                	je     c001016d <VgaText::load()+0x4f>
c0010164:	83 ec 0c             	sub    esp,0xc
c0010167:	53                   	push   ebx
c0010168:	ff d0                	call   eax
c001016a:	83 c4 10             	add    esp,0x10
c001016d:	83 c4 58             	add    esp,0x58
c0010170:	5b                   	pop    ebx
c0010171:	c3                   	ret    

c0010172 <VgaText::updateCursor()>:
c0010172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010176:	39 05 44 be 02 c0    	cmp    DWORD PTR ds:0xc002be44,eax
c001017c:	75 0c                	jne    c001018a <VgaText::updateCursor()+0x18>
c001017e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010184:	85 c0                	test   eax,eax
c0010186:	74 02                	je     c001018a <VgaText::updateCursor()+0x18>
c0010188:	ff e0                	jmp    eax
c001018a:	c3                   	ret    
c001018b:	90                   	nop

c001018c <VgaText::showCursor(bool)>:
c001018c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010194:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001019a:	c3                   	ret    
c001019b:	90                   	nop

c001019c <VgaText::disableBlink(bool)>:
c001019c:	56                   	push   esi
c001019d:	53                   	push   ebx
c001019e:	51                   	push   ecx
c001019f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00101a7:	39 1d 44 be 02 c0    	cmp    DWORD PTR ds:0xc002be44,ebx
c00101ad:	75 18                	jne    c00101c7 <VgaText::disableBlink(bool)+0x2b>
c00101af:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00101b5:	85 c0                	test   eax,eax
c00101b7:	74 0e                	je     c00101c7 <VgaText::disableBlink(bool)+0x2b>
c00101b9:	89 f1                	mov    ecx,esi
c00101bb:	52                   	push   edx
c00101bc:	52                   	push   edx
c00101bd:	0f b6 d1             	movzx  edx,cl
c00101c0:	52                   	push   edx
c00101c1:	53                   	push   ebx
c00101c2:	ff d0                	call   eax
c00101c4:	83 c4 10             	add    esp,0x10
c00101c7:	89 f0                	mov    eax,esi
c00101c9:	83 f0 01             	xor    eax,0x1
c00101cc:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00101d2:	58                   	pop    eax
c00101d3:	5b                   	pop    ebx
c00101d4:	5e                   	pop    esi
c00101d5:	c3                   	ret    

c00101d6 <VgaText::doANSI_SGR(int)>:
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101de:	85 d2                	test   edx,edx
c00101e0:	75 14                	jne    c00101f6 <VgaText::doANSI_SGR(int)+0x20>
c00101e2:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00101e8:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00101ee:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00101f4:	eb 65                	jmp    c001025b <VgaText::doANSI_SGR(int)+0x85>
c00101f6:	83 fa 07             	cmp    edx,0x7
c00101f9:	75 14                	jne    c001020f <VgaText::doANSI_SGR(int)+0x39>
c00101fb:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010201:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010207:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001020d:	eb 4c                	jmp    c001025b <VgaText::doANSI_SGR(int)+0x85>
c001020f:	83 fa 1b             	cmp    edx,0x1b
c0010212:	74 ce                	je     c00101e2 <VgaText::doANSI_SGR(int)+0xc>
c0010214:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010217:	83 f9 07             	cmp    ecx,0x7
c001021a:	77 09                	ja     c0010225 <VgaText::doANSI_SGR(int)+0x4f>
c001021c:	8b 14 8d 60 ad 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd52a0]
c0010223:	eb 20                	jmp    c0010245 <VgaText::doANSI_SGR(int)+0x6f>
c0010225:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010228:	83 f9 07             	cmp    ecx,0x7
c001022b:	77 09                	ja     c0010236 <VgaText::doANSI_SGR(int)+0x60>
c001022d:	8b 14 8d 60 ad 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd52a0]
c0010234:	eb 25                	jmp    c001025b <VgaText::doANSI_SGR(int)+0x85>
c0010236:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010239:	83 f9 07             	cmp    ecx,0x7
c001023c:	77 0e                	ja     c001024c <VgaText::doANSI_SGR(int)+0x76>
c001023e:	8b 14 95 18 ac 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd53e8]
c0010245:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001024b:	c3                   	ret    
c001024c:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001024f:	83 f9 07             	cmp    ecx,0x7
c0010252:	77 0d                	ja     c0010261 <VgaText::doANSI_SGR(int)+0x8b>
c0010254:	8b 14 95 f0 ab 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5410]
c001025b:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010261:	c3                   	ret    

c0010262 <VgaText::setDefaultBgColour(VgaColour)>:
c0010262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010266:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001026a:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010270:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010276:	c3                   	ret    
c0010277:	90                   	nop

c0010278 <VgaText::setDefaultFgColour(VgaColour)>:
c0010278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010280:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010286:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001028c:	c3                   	ret    
c001028d:	90                   	nop

c001028e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001028e:	53                   	push   ebx
c001028f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010293:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010297:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001029b:	51                   	push   ecx
c001029c:	e8 c1 ff ff ff       	call   c0010262 <VgaText::setDefaultBgColour(VgaColour)>
c00102a1:	58                   	pop    eax
c00102a2:	5a                   	pop    edx
c00102a3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00102a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00102ab:	5b                   	pop    ebx
c00102ac:	eb ca                	jmp    c0010278 <VgaText::setDefaultFgColour(VgaColour)>

c00102ae <VgaText::combineColours(unsigned char, unsigned char)>:
c00102ae:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00102b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00102b7:	83 e0 0f             	and    eax,0xf
c00102ba:	c1 e2 04             	shl    edx,0x4
c00102bd:	09 d0                	or     eax,edx
c00102bf:	c3                   	ret    

c00102c0 <VgaText::scrollScreen()>:
c00102c0:	57                   	push   edi
c00102c1:	56                   	push   esi
c00102c2:	be 01 00 00 00       	mov    esi,0x1
c00102c7:	53                   	push   ebx
c00102c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102cc:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00102d2:	31 ff                	xor    edi,edi
c00102d4:	01 d9                	add    ecx,ebx
c00102d6:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00102d9:	83 fe 17             	cmp    esi,0x17
c00102dc:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00102e2:	75 28                	jne    c001030c <VgaText::scrollScreen()+0x4c>
c00102e4:	f7 c7 01 00 00 00    	test   edi,0x1
c00102ea:	74 1c                	je     c0010308 <VgaText::scrollScreen()+0x48>
c00102ec:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00102f3:	50                   	push   eax
c00102f4:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00102fb:	50                   	push   eax
c00102fc:	e8 ad ff ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010301:	5a                   	pop    edx
c0010302:	5a                   	pop    edx
c0010303:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010306:	eb 04                	jmp    c001030c <VgaText::scrollScreen()+0x4c>
c0010308:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001030c:	47                   	inc    edi
c001030d:	41                   	inc    ecx
c001030e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010314:	75 c0                	jne    c00102d6 <VgaText::scrollScreen()+0x16>
c0010316:	46                   	inc    esi
c0010317:	83 fe 18             	cmp    esi,0x18
c001031a:	75 b0                	jne    c00102cc <VgaText::scrollScreen()+0xc>
c001031c:	39 1d 44 be 02 c0    	cmp    DWORD PTR ds:0xc002be44,ebx
c0010322:	75 24                	jne    c0010348 <VgaText::scrollScreen()+0x88>
c0010324:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c001032b:	74 08                	je     c0010335 <VgaText::scrollScreen()+0x75>
c001032d:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010333:	eb 13                	jmp    c0010348 <VgaText::scrollScreen()+0x88>
c0010335:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001033b:	85 c0                	test   eax,eax
c001033d:	74 09                	je     c0010348 <VgaText::scrollScreen()+0x88>
c001033f:	83 ec 0c             	sub    esp,0xc
c0010342:	53                   	push   ebx
c0010343:	ff d0                	call   eax
c0010345:	83 c4 10             	add    esp,0x10
c0010348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001034c:	5b                   	pop    ebx
c001034d:	5e                   	pop    esi
c001034e:	5f                   	pop    edi
c001034f:	e9 1e fe ff ff       	jmp    c0010172 <VgaText::updateCursor()>

c0010354 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010354:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010359:	c1 e0 08             	shl    eax,0x8
c001035c:	89 c2                	mov    edx,eax
c001035e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010363:	09 d0                	or     eax,edx
c0010365:	c3                   	ret    

c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010366:	53                   	push   ebx
c0010367:	83 ec 08             	sub    esp,0x8
c001036a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001036e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010373:	50                   	push   eax
c0010374:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010379:	50                   	push   eax
c001037a:	e8 2f ff ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c001037f:	5a                   	pop    edx
c0010380:	0f b6 c0             	movzx  eax,al
c0010383:	5b                   	pop    ebx
c0010384:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010389:	50                   	push   eax
c001038a:	53                   	push   ebx
c001038b:	e8 c4 ff ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010390:	5a                   	pop    edx
c0010391:	5a                   	pop    edx
c0010392:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010398:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001039c:	0f b7 d2             	movzx  edx,dx
c001039f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00103a4:	39 0d 44 be 02 c0    	cmp    DWORD PTR ds:0xc002be44,ecx
c00103aa:	75 14                	jne    c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103ac:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00103b2:	85 c0                	test   eax,eax
c00103b4:	74 0a                	je     c00103c0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00103b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00103ba:	83 c4 08             	add    esp,0x8
c00103bd:	5b                   	pop    ebx
c00103be:	ff e0                	jmp    eax
c00103c0:	83 c4 08             	add    esp,0x8
c00103c3:	5b                   	pop    ebx
c00103c4:	c3                   	ret    
c00103c5:	90                   	nop

c00103c6 <VgaText::getCursorX()>:
c00103c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ca:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00103d0:	c3                   	ret    
c00103d1:	90                   	nop

c00103d2 <VgaText::getCursorY()>:
c00103d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d6:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00103dc:	c3                   	ret    
c00103dd:	90                   	nop

c00103de <VgaText::setCursor(int, int)>:
c00103de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e6:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00103ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103f0:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00103f6:	e9 77 fd ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c00103fb:	90                   	nop

c00103fc <VgaText::setCursorX(int)>:
c00103fc:	83 ec 10             	sub    esp,0x10
c00103ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010403:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001040d:	50                   	push   eax
c001040e:	e8 cb ff ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010413:	83 c4 1c             	add    esp,0x1c
c0010416:	c3                   	ret    
c0010417:	90                   	nop

c0010418 <VgaText::setCursorY(int)>:
c0010418:	83 ec 10             	sub    esp,0x10
c001041b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001041f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010423:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010429:	50                   	push   eax
c001042a:	e8 af ff ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c001042f:	83 c4 1c             	add    esp,0x1c
c0010432:	c3                   	ret    
c0010433:	90                   	nop

c0010434 <VgaText::incrementCursor(bool)>:
c0010434:	56                   	push   esi
c0010435:	53                   	push   ebx
c0010436:	51                   	push   ecx
c0010437:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001043b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001043f:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010445:	40                   	inc    eax
c0010446:	83 f8 50             	cmp    eax,0x50
c0010449:	74 08                	je     c0010453 <VgaText::incrementCursor(bool)+0x1f>
c001044b:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010451:	eb 33                	jmp    c0010486 <VgaText::incrementCursor(bool)+0x52>
c0010453:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010459:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010463:	8d 50 01             	lea    edx,[eax+0x1]
c0010466:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001046c:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010472:	75 12                	jne    c0010486 <VgaText::incrementCursor(bool)+0x52>
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001047d:	53                   	push   ebx
c001047e:	e8 3d fe ff ff       	call   c00102c0 <VgaText::scrollScreen()>
c0010483:	83 c4 10             	add    esp,0x10
c0010486:	89 f0                	mov    eax,esi
c0010488:	84 c0                	test   al,al
c001048a:	74 0c                	je     c0010498 <VgaText::incrementCursor(bool)+0x64>
c001048c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010490:	5a                   	pop    edx
c0010491:	5b                   	pop    ebx
c0010492:	5e                   	pop    esi
c0010493:	e9 da fc ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c0010498:	58                   	pop    eax
c0010499:	5b                   	pop    ebx
c001049a:	5e                   	pop    esi
c001049b:	c3                   	ret    

c001049c <VgaText::updateRAMUsageDisplay(int)>:
c001049c:	53                   	push   ebx
c001049d:	bb 0a 00 00 00       	mov    ebx,0xa
c00104a2:	6a 0f                	push   0xf
c00104a4:	6a 00                	push   0x0
c00104a6:	e8 03 fe ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c00104ab:	5a                   	pop    edx
c00104ac:	59                   	pop    ecx
c00104ad:	0f b6 c8             	movzx  ecx,al
c00104b0:	51                   	push   ecx
c00104b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b5:	99                   	cdq    
c00104b6:	f7 fb                	idiv   ebx
c00104b8:	89 d3                	mov    ebx,edx
c00104ba:	83 c0 30             	add    eax,0x30
c00104bd:	83 c3 30             	add    ebx,0x30
c00104c0:	0f be c0             	movsx  eax,al
c00104c3:	0f b6 db             	movzx  ebx,bl
c00104c6:	50                   	push   eax
c00104c7:	e8 88 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00104cc:	5a                   	pop    edx
c00104cd:	5a                   	pop    edx
c00104ce:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c00104d4:	51                   	push   ecx
c00104d5:	53                   	push   ebx
c00104d6:	e8 79 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00104db:	5b                   	pop    ebx
c00104dc:	5a                   	pop    edx
c00104dd:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c00104e3:	51                   	push   ecx
c00104e4:	6a 25                	push   0x25
c00104e6:	e8 69 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00104eb:	59                   	pop    ecx
c00104ec:	5b                   	pop    ebx
c00104ed:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c00104f3:	5b                   	pop    ebx
c00104f4:	c3                   	ret    
c00104f5:	90                   	nop

c00104f6 <VgaText::updateDiskUsage()>:
c00104f6:	55                   	push   ebp
c00104f7:	bd 10 27 00 00       	mov    ebp,0x2710
c00104fc:	57                   	push   edi
c00104fd:	56                   	push   esi
c00104fe:	53                   	push   ebx
c00104ff:	6a 0f                	push   0xf
c0010501:	6a 00                	push   0x0
c0010503:	e8 a6 fd ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010508:	5a                   	pop    edx
c0010509:	0f b6 d8             	movzx  ebx,al
c001050c:	59                   	pop    ecx
c001050d:	a1 48 e0 02 c0       	mov    eax,ds:0xc002e048
c0010512:	53                   	push   ebx
c0010513:	b9 0a 00 00 00       	mov    ecx,0xa
c0010518:	99                   	cdq    
c0010519:	f7 fd                	idiv   ebp
c001051b:	99                   	cdq    
c001051c:	f7 f9                	idiv   ecx
c001051e:	8d 42 30             	lea    eax,[edx+0x30]
c0010521:	0f b6 c0             	movzx  eax,al
c0010524:	50                   	push   eax
c0010525:	e8 2a fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c001052a:	5e                   	pop    esi
c001052b:	5f                   	pop    edi
c001052c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c0010532:	bf e8 03 00 00       	mov    edi,0x3e8
c0010537:	53                   	push   ebx
c0010538:	a1 48 e0 02 c0       	mov    eax,ds:0xc002e048
c001053d:	99                   	cdq    
c001053e:	f7 ff                	idiv   edi
c0010540:	99                   	cdq    
c0010541:	f7 f9                	idiv   ecx
c0010543:	8d 42 30             	lea    eax,[edx+0x30]
c0010546:	0f b6 c0             	movzx  eax,al
c0010549:	50                   	push   eax
c001054a:	e8 05 fe ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c001054f:	5a                   	pop    edx
c0010550:	5e                   	pop    esi
c0010551:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010557:	be 64 00 00 00       	mov    esi,0x64
c001055c:	53                   	push   ebx
c001055d:	a1 48 e0 02 c0       	mov    eax,ds:0xc002e048
c0010562:	99                   	cdq    
c0010563:	f7 fe                	idiv   esi
c0010565:	99                   	cdq    
c0010566:	f7 f9                	idiv   ecx
c0010568:	8d 42 30             	lea    eax,[edx+0x30]
c001056b:	0f b6 c0             	movzx  eax,al
c001056e:	50                   	push   eax
c001056f:	e8 e0 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010574:	5a                   	pop    edx
c0010575:	5a                   	pop    edx
c0010576:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001057c:	53                   	push   ebx
c001057d:	a1 48 e0 02 c0       	mov    eax,ds:0xc002e048
c0010582:	99                   	cdq    
c0010583:	f7 f9                	idiv   ecx
c0010585:	99                   	cdq    
c0010586:	f7 f9                	idiv   ecx
c0010588:	8d 42 30             	lea    eax,[edx+0x30]
c001058b:	0f b6 c0             	movzx  eax,al
c001058e:	50                   	push   eax
c001058f:	e8 c0 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010594:	5a                   	pop    edx
c0010595:	5a                   	pop    edx
c0010596:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001059c:	53                   	push   ebx
c001059d:	a1 48 e0 02 c0       	mov    eax,ds:0xc002e048
c00105a2:	99                   	cdq    
c00105a3:	f7 f9                	idiv   ecx
c00105a5:	8d 42 30             	lea    eax,[edx+0x30]
c00105a8:	0f b6 c0             	movzx  eax,al
c00105ab:	50                   	push   eax
c00105ac:	e8 a3 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00105b1:	5a                   	pop    edx
c00105b2:	5a                   	pop    edx
c00105b3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00105b9:	53                   	push   ebx
c00105ba:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c00105bf:	99                   	cdq    
c00105c0:	f7 fd                	idiv   ebp
c00105c2:	99                   	cdq    
c00105c3:	f7 f9                	idiv   ecx
c00105c5:	8d 42 30             	lea    eax,[edx+0x30]
c00105c8:	0f b6 c0             	movzx  eax,al
c00105cb:	50                   	push   eax
c00105cc:	e8 83 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00105d1:	5d                   	pop    ebp
c00105d2:	5a                   	pop    edx
c00105d3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c00105d9:	53                   	push   ebx
c00105da:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c00105df:	99                   	cdq    
c00105e0:	f7 ff                	idiv   edi
c00105e2:	99                   	cdq    
c00105e3:	f7 f9                	idiv   ecx
c00105e5:	8d 42 30             	lea    eax,[edx+0x30]
c00105e8:	0f b6 c0             	movzx  eax,al
c00105eb:	50                   	push   eax
c00105ec:	e8 63 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c00105f1:	5f                   	pop    edi
c00105f2:	5d                   	pop    ebp
c00105f3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c00105f9:	53                   	push   ebx
c00105fa:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c00105ff:	99                   	cdq    
c0010600:	f7 fe                	idiv   esi
c0010602:	99                   	cdq    
c0010603:	f7 f9                	idiv   ecx
c0010605:	8d 42 30             	lea    eax,[edx+0x30]
c0010608:	0f b6 c0             	movzx  eax,al
c001060b:	50                   	push   eax
c001060c:	e8 43 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010611:	5a                   	pop    edx
c0010612:	5e                   	pop    esi
c0010613:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010619:	53                   	push   ebx
c001061a:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c001061f:	99                   	cdq    
c0010620:	f7 f9                	idiv   ecx
c0010622:	99                   	cdq    
c0010623:	f7 f9                	idiv   ecx
c0010625:	8d 42 30             	lea    eax,[edx+0x30]
c0010628:	0f b6 c0             	movzx  eax,al
c001062b:	50                   	push   eax
c001062c:	e8 23 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010631:	5f                   	pop    edi
c0010632:	5d                   	pop    ebp
c0010633:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010639:	53                   	push   ebx
c001063a:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c001063f:	99                   	cdq    
c0010640:	f7 f9                	idiv   ecx
c0010642:	83 c2 30             	add    edx,0x30
c0010645:	0f b6 d2             	movzx  edx,dl
c0010648:	52                   	push   edx
c0010649:	e8 06 fd ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c001064e:	5a                   	pop    edx
c001064f:	59                   	pop    ecx
c0010650:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010656:	5b                   	pop    ebx
c0010657:	5e                   	pop    esi
c0010658:	5f                   	pop    edi
c0010659:	5d                   	pop    ebp
c001065a:	c3                   	ret    
c001065b:	90                   	nop

c001065c <VgaText::updateTitle()>:
c001065c:	53                   	push   ebx
c001065d:	31 c0                	xor    eax,eax
c001065f:	83 ec 58             	sub    esp,0x58
c0010662:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010666:	89 e1                	mov    ecx,esp
c0010668:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001066c:	40                   	inc    eax
c001066d:	83 f8 50             	cmp    eax,0x50
c0010670:	75 f6                	jne    c0010668 <VgaText::updateTitle()+0xc>
c0010672:	31 c0                	xor    eax,eax
c0010674:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c001067b:	84 db                	test   bl,bl
c001067d:	74 06                	je     c0010685 <VgaText::updateTitle()+0x29>
c001067f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010682:	40                   	inc    eax
c0010683:	eb ef                	jmp    c0010674 <VgaText::updateTitle()+0x18>
c0010685:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c001068b:	85 c0                	test   eax,eax
c001068d:	74 09                	je     c0010698 <VgaText::updateTitle()+0x3c>
c001068f:	53                   	push   ebx
c0010690:	53                   	push   ebx
c0010691:	51                   	push   ecx
c0010692:	52                   	push   edx
c0010693:	ff d0                	call   eax
c0010695:	83 c4 10             	add    esp,0x10
c0010698:	e8 59 fe ff ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c001069d:	83 c4 58             	add    esp,0x58
c00106a0:	5b                   	pop    ebx
c00106a1:	c3                   	ret    

c00106a2 <VgaText::setTitleTextColour(VgaColour)>:
c00106a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106aa:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00106b0:	eb aa                	jmp    c001065c <VgaText::updateTitle()>

c00106b2 <VgaText::setTitleColour(VgaColour)>:
c00106b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ba:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00106c0:	eb 9a                	jmp    c001065c <VgaText::updateTitle()>

c00106c2 <VgaText::setTitle(char*)>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 10             	sub    esp,0x10
c00106c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ce:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c00106d4:	50                   	push   eax
c00106d5:	e8 41 00 ff ff       	call   c000071b <strcpy>
c00106da:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00106de:	83 c4 18             	add    esp,0x18
c00106e1:	5b                   	pop    ebx
c00106e2:	e9 75 ff ff ff       	jmp    c001065c <VgaText::updateTitle()>
c00106e7:	90                   	nop

c00106e8 <VgaText::decrementCursor(bool)>:
c00106e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106f0:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c00106f6:	85 c0                	test   eax,eax
c00106f8:	74 07                	je     c0010701 <VgaText::decrementCursor(bool)+0x19>
c00106fa:	48                   	dec    eax
c00106fb:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010701:	84 c9                	test   cl,cl
c0010703:	74 09                	je     c001070e <VgaText::decrementCursor(bool)+0x26>
c0010705:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010709:	e9 64 fa ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c001070e:	c3                   	ret    
c001070f:	90                   	nop

c0010710 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010710:	53                   	push   ebx
c0010711:	83 ec 08             	sub    esp,0x8
c0010714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010718:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001071c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010720:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010724:	3c 07                	cmp    al,0x7
c0010726:	75 2a                	jne    c0010752 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010728:	a1 ec be 02 c0       	mov    eax,ds:0xc002beec
c001072d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010735:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001073d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010745:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010749:	83 c4 08             	add    esp,0x8
c001074c:	5b                   	pop    ebx
c001074d:	e9 3a 2d 00 00       	jmp    c001348c <Buzzer::beep(int, int, bool)>
c0010752:	3c 0d                	cmp    al,0xd
c0010754:	75 0c                	jne    c0010762 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010756:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010760:	eb 3b                	jmp    c001079d <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010762:	3c 0a                	cmp    al,0xa
c0010764:	75 40                	jne    c00107a6 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010766:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001076c:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010776:	8d 50 01             	lea    edx,[eax+0x1]
c0010779:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c001077f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010785:	75 12                	jne    c0010799 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010787:	83 ec 0c             	sub    esp,0xc
c001078a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010790:	53                   	push   ebx
c0010791:	e8 2a fb ff ff       	call   c00102c0 <VgaText::scrollScreen()>
c0010796:	83 c4 10             	add    esp,0x10
c0010799:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001079d:	83 c4 08             	add    esp,0x8
c00107a0:	5b                   	pop    ebx
c00107a1:	e9 cc f9 ff ff       	jmp    c0010172 <VgaText::updateCursor()>
c00107a6:	3c 08                	cmp    al,0x8
c00107a8:	75 31                	jne    c00107db <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00107aa:	50                   	push   eax
c00107ab:	50                   	push   eax
c00107ac:	6a 01                	push   0x1
c00107ae:	53                   	push   ebx
c00107af:	e8 34 ff ff ff       	call   c00106e8 <VgaText::decrementCursor(bool)>
c00107b4:	5a                   	pop    edx
c00107b5:	59                   	pop    ecx
c00107b6:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107bc:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107c2:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00107c8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00107ce:	6a 20                	push   0x20
c00107d0:	53                   	push   ebx
c00107d1:	e8 90 fb ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107d6:	83 c4 28             	add    esp,0x28
c00107d9:	5b                   	pop    ebx
c00107da:	c3                   	ret    
c00107db:	83 ec 08             	sub    esp,0x8
c00107de:	0f be c0             	movsx  eax,al
c00107e1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00107e7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00107ed:	51                   	push   ecx
c00107ee:	52                   	push   edx
c00107ef:	50                   	push   eax
c00107f0:	53                   	push   ebx
c00107f1:	e8 70 fb ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107f6:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107fa:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010802:	83 c4 28             	add    esp,0x28
c0010805:	5b                   	pop    ebx
c0010806:	e9 29 fc ff ff       	jmp    c0010434 <VgaText::incrementCursor(bool)>
c001080b:	90                   	nop

c001080c <VgaText::isShowingCursor()>:
c001080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010810:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010816:	c3                   	ret    
c0010817:	90                   	nop

c0010818 <VgaText::isBlinkDisabled()>:
c0010818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001081c:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010822:	83 f0 01             	xor    eax,0x1
c0010825:	c3                   	ret    

c0010826 <VgaText::setCursorHeight(int)>:
c0010826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001082e:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010834:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001083b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001083f:	e9 48 f9 ff ff       	jmp    c001018c <VgaText::showCursor(bool)>

c0010844 <VgaText::getCursorHeight()>:
c0010844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010848:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001084e:	c3                   	ret    

c001084f <setActiveTerminal(VgaText*)>:
c001084f:	53                   	push   ebx
c0010850:	83 ec 08             	sub    esp,0x8
c0010853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010857:	85 db                	test   ebx,ebx
c0010859:	75 11                	jne    c001086c <setActiveTerminal(VgaText*)+0x1d>
c001085b:	c7 44 24 10 2c 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc002812c
c0010863:	83 c4 08             	add    esp,0x8
c0010866:	5b                   	pop    ebx
c0010867:	e9 eb 88 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c001086c:	50                   	push   eax
c001086d:	50                   	push   eax
c001086e:	53                   	push   ebx
c001086f:	68 3a 81 02 c0       	push   0xc002813a
c0010874:	e8 14 1e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0010879:	a1 44 be 02 c0       	mov    eax,ds:0xc002be44
c001087e:	83 c4 10             	add    esp,0x10
c0010881:	85 c0                	test   eax,eax
c0010883:	74 0c                	je     c0010891 <setActiveTerminal(VgaText*)+0x42>
c0010885:	83 ec 0c             	sub    esp,0xc
c0010888:	50                   	push   eax
c0010889:	e8 e4 f8 ff ff       	call   c0010172 <VgaText::updateCursor()>
c001088e:	83 c4 10             	add    esp,0x10
c0010891:	89 1d 44 be 02 c0    	mov    DWORD PTR ds:0xc002be44,ebx
c0010897:	51                   	push   ecx
c0010898:	51                   	push   ecx
c0010899:	53                   	push   ebx
c001089a:	68 52 81 02 c0       	push   0xc0028152
c001089f:	e8 e9 1d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00108a4:	83 c4 0c             	add    esp,0xc
c00108a7:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108ad:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108b3:	53                   	push   ebx
c00108b4:	e8 25 fb ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c00108b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108bc:	e8 57 ff ff ff       	call   c0010818 <VgaText::isBlinkDisabled()>
c00108c1:	5a                   	pop    edx
c00108c2:	0f b6 c0             	movzx  eax,al
c00108c5:	59                   	pop    ecx
c00108c6:	50                   	push   eax
c00108c7:	53                   	push   ebx
c00108c8:	e8 cf f8 ff ff       	call   c001019c <VgaText::disableBlink(bool)>
c00108cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d0:	e8 6f ff ff ff       	call   c0010844 <VgaText::getCursorHeight()>
c00108d5:	5a                   	pop    edx
c00108d6:	59                   	pop    ecx
c00108d7:	50                   	push   eax
c00108d8:	53                   	push   ebx
c00108d9:	e8 48 ff ff ff       	call   c0010826 <VgaText::setCursorHeight(int)>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00108e8:	75 0a                	jne    c00108f4 <setActiveTerminal(VgaText*)+0xa5>
c00108ea:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c00108f4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108f8:	83 c4 08             	add    esp,0x8
c00108fb:	5b                   	pop    ebx
c00108fc:	e9 1d f8 ff ff       	jmp    c001011e <VgaText::load()>

c0010901 <doTerminalCycle()>:
c0010901:	83 ec 18             	sub    esp,0x18
c0010904:	a1 40 be 02 c0       	mov    eax,ds:0xc002be40
c0010909:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001090f:	50                   	push   eax
c0010910:	a3 40 be 02 c0       	mov    ds:0xc002be40,eax
c0010915:	e8 35 ff ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c001091a:	83 c4 1c             	add    esp,0x1c
c001091d:	c3                   	ret    

c001091e <VgaText::doUpdate()>:
c001091e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010922:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010928:	85 c0                	test   eax,eax
c001092a:	74 02                	je     c001092e <VgaText::doUpdate()+0x10>
c001092c:	ff e0                	jmp    eax
c001092e:	c3                   	ret    
c001092f:	90                   	nop

c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010930:	55                   	push   ebp
c0010931:	57                   	push   edi
c0010932:	56                   	push   esi
c0010933:	53                   	push   ebx
c0010934:	83 ec 1c             	sub    esp,0x1c
c0010937:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001093b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010940:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010947:	8d 7d 0c             	lea    edi,[ebp+0xc]
c001094a:	50                   	push   eax
c001094b:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010950:	50                   	push   eax
c0010951:	e8 58 f9 ff ff       	call   c00102ae <VgaText::combineColours(unsigned char, unsigned char)>
c0010956:	59                   	pop    ecx
c0010957:	0f b6 c0             	movzx  eax,al
c001095a:	5b                   	pop    ebx
c001095b:	31 c9                	xor    ecx,ecx
c001095d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010965:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010969:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001096f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010973:	0f b7 db             	movzx  ebx,bx
c0010976:	01 db                	add    ebx,ebx
c0010978:	01 fb                	add    ebx,edi
c001097a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001097d:	84 c0                	test   al,al
c001097f:	0f 84 38 01 00 00    	je     c0010abd <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010985:	3c 0d                	cmp    al,0xd
c0010987:	75 0f                	jne    c0010998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010989:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010993:	e9 1f 01 00 00       	jmp    c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010998:	3c 0a                	cmp    al,0xa
c001099a:	75 5b                	jne    c00109f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c001099c:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00109a2:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00109ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00109af:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00109b5:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00109bb:	75 12                	jne    c00109cf <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00109bd:	83 ec 0c             	sub    esp,0xc
c00109c0:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00109c6:	55                   	push   ebp
c00109c7:	e8 f4 f8 ff ff       	call   c00102c0 <VgaText::scrollScreen()>
c00109cc:	83 c4 10             	add    esp,0x10
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	55                   	push   ebp
c00109d3:	e8 9a f7 ff ff       	call   c0010172 <VgaText::updateCursor()>
c00109d8:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00109e9:	31 c9                	xor    ecx,ecx
c00109eb:	0f b7 db             	movzx  ebx,bx
c00109ee:	01 db                	add    ebx,ebx
c00109f0:	01 fb                	add    ebx,edi
c00109f2:	e9 c0 00 00 00       	jmp    c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00109f7:	3c 08                	cmp    al,0x8
c00109f9:	75 4e                	jne    c0010a49 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c00109fb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109ff:	53                   	push   ebx
c0010a00:	53                   	push   ebx
c0010a01:	6a 01                	push   0x1
c0010a03:	55                   	push   ebp
c0010a04:	e8 df fc ff ff       	call   c00106e8 <VgaText::decrementCursor(bool)>
c0010a09:	58                   	pop    eax
c0010a0a:	5a                   	pop    edx
c0010a0b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a11:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a17:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010a1d:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010a23:	6a 20                	push   0x20
c0010a25:	55                   	push   ebp
c0010a26:	e8 3b f9 ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a2b:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a33:	83 c4 20             	add    esp,0x20
c0010a36:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010a3c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a40:	0f b7 db             	movzx  ebx,bx
c0010a43:	01 db                	add    ebx,ebx
c0010a45:	01 fb                	add    ebx,edi
c0010a47:	eb 6e                	jmp    c0010ab7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010a49:	51                   	push   ecx
c0010a4a:	51                   	push   ecx
c0010a4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a4f:	50                   	push   eax
c0010a50:	e8 ff f8 ff ff       	call   c0010354 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	66 89 03             	mov    WORD PTR [ebx],ax
c0010a5b:	39 2d 44 be 02 c0    	cmp    DWORD PTR ds:0xc002be44,ebp
c0010a61:	75 2a                	jne    c0010a8d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a63:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010a69:	85 c0                	test   eax,eax
c0010a6b:	74 20                	je     c0010a8d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010a6d:	52                   	push   edx
c0010a6e:	52                   	push   edx
c0010a6f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010a75:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010a7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010a83:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010a86:	51                   	push   ecx
c0010a87:	55                   	push   ebp
c0010a88:	ff d0                	call   eax
c0010a8a:	83 c4 20             	add    esp,0x20
c0010a8d:	83 c3 02             	add    ebx,0x2
c0010a90:	50                   	push   eax
c0010a91:	50                   	push   eax
c0010a92:	6a 00                	push   0x0
c0010a94:	55                   	push   ebp
c0010a95:	e8 9a f9 ff ff       	call   c0010434 <VgaText::incrementCursor(bool)>
c0010a9a:	83 c4 10             	add    esp,0x10
c0010a9d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010aa4:	75 0f                	jne    c0010ab5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010aa6:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010aae:	0f b7 db             	movzx  ebx,bx
c0010ab1:	01 db                	add    ebx,ebx
c0010ab3:	01 fb                	add    ebx,edi
c0010ab5:	b1 01                	mov    cl,0x1
c0010ab7:	46                   	inc    esi
c0010ab8:	e9 bd fe ff ff       	jmp    c001097a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010abd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010ac1:	83 ec 0c             	sub    esp,0xc
c0010ac4:	55                   	push   ebp
c0010ac5:	e8 a8 f6 ff ff       	call   c0010172 <VgaText::updateCursor()>
c0010aca:	83 c4 10             	add    esp,0x10
c0010acd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010ad1:	84 c9                	test   cl,cl
c0010ad3:	74 0c                	je     c0010ae1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010ad5:	83 ec 0c             	sub    esp,0xc
c0010ad8:	55                   	push   ebp
c0010ad9:	e8 40 fe ff ff       	call   c001091e <VgaText::doUpdate()>
c0010ade:	83 c4 10             	add    esp,0x10
c0010ae1:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ae8:	83 c4 1c             	add    esp,0x1c
c0010aeb:	5b                   	pop    ebx
c0010aec:	5e                   	pop    esi
c0010aed:	5f                   	pop    edi
c0010aee:	5d                   	pop    ebp
c0010aef:	c3                   	ret    

c0010af0 <VgaText::clearScreen()>:
c0010af0:	57                   	push   edi
c0010af1:	56                   	push   esi
c0010af2:	31 f6                	xor    esi,esi
c0010af4:	53                   	push   ebx
c0010af5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af9:	52                   	push   edx
c0010afa:	6a 00                	push   0x0
c0010afc:	6a 00                	push   0x0
c0010afe:	53                   	push   ebx
c0010aff:	e8 da f8 ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010b04:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010b14:	7e 26                	jle    c0010b3c <VgaText::clearScreen()+0x4c>
c0010b16:	31 ff                	xor    edi,edi
c0010b18:	50                   	push   eax
c0010b19:	50                   	push   eax
c0010b1a:	56                   	push   esi
c0010b1b:	57                   	push   edi
c0010b1c:	47                   	inc    edi
c0010b1d:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010b23:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010b29:	6a 20                	push   0x20
c0010b2b:	53                   	push   ebx
c0010b2c:	e8 35 f8 ff ff       	call   c0010366 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b31:	83 c4 20             	add    esp,0x20
c0010b34:	83 ff 50             	cmp    edi,0x50
c0010b37:	75 df                	jne    c0010b18 <VgaText::clearScreen()+0x28>
c0010b39:	46                   	inc    esi
c0010b3a:	eb d2                	jmp    c0010b0e <VgaText::clearScreen()+0x1e>
c0010b3c:	83 ec 0c             	sub    esp,0xc
c0010b3f:	53                   	push   ebx
c0010b40:	e8 d9 fd ff ff       	call   c001091e <VgaText::doUpdate()>
c0010b45:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010b4c:	83 c4 10             	add    esp,0x10
c0010b4f:	5b                   	pop    ebx
c0010b50:	5e                   	pop    esi
c0010b51:	5f                   	pop    edi
c0010b52:	c3                   	ret    
c0010b53:	90                   	nop

c0010b54 <VgaText::putchar(char)>:
c0010b54:	56                   	push   esi
c0010b55:	53                   	push   ebx
c0010b56:	83 ec 14             	sub    esp,0x14
c0010b59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b61:	3c 5b                	cmp    al,0x5b
c0010b63:	75 21                	jne    c0010b86 <VgaText::putchar(char)+0x32>
c0010b65:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010b6c:	74 28                	je     c0010b96 <VgaText::putchar(char)+0x42>
c0010b6e:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010b77:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010b81:	e9 e2 00 00 00       	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010b86:	3c 1b                	cmp    al,0x1b
c0010b88:	75 0c                	jne    c0010b96 <VgaText::putchar(char)+0x42>
c0010b8a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010b91:	e9 d2 00 00 00       	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010b96:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010b9c:	84 c9                	test   cl,cl
c0010b9e:	0f 84 ab 00 00 00    	je     c0010c4f <VgaText::putchar(char)+0xfb>
c0010ba4:	8d 50 c0             	lea    edx,[eax-0x40]
c0010ba7:	80 fa 3e             	cmp    dl,0x3e
c0010baa:	0f 87 82 00 00 00    	ja     c0010c32 <VgaText::putchar(char)+0xde>
c0010bb0:	3c 6d                	cmp    al,0x6d
c0010bb2:	75 4d                	jne    c0010c01 <VgaText::putchar(char)+0xad>
c0010bb4:	31 f6                	xor    esi,esi
c0010bb6:	31 d2                	xor    edx,edx
c0010bb8:	31 c0                	xor    eax,eax
c0010bba:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010bc0:	7e 30                	jle    c0010bf2 <VgaText::putchar(char)+0x9e>
c0010bc2:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010bca:	80 fa 3b             	cmp    dl,0x3b
c0010bcd:	75 17                	jne    c0010be6 <VgaText::putchar(char)+0x92>
c0010bcf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010bd3:	50                   	push   eax
c0010bd4:	53                   	push   ebx
c0010bd5:	e8 fc f5 ff ff       	call   c00101d6 <VgaText::doANSI_SGR(int)>
c0010bda:	59                   	pop    ecx
c0010bdb:	31 d2                	xor    edx,edx
c0010bdd:	58                   	pop    eax
c0010bde:	31 c0                	xor    eax,eax
c0010be0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010be4:	eb 09                	jmp    c0010bef <VgaText::putchar(char)+0x9b>
c0010be6:	6b c0 0a             	imul   eax,eax,0xa
c0010be9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010bed:	88 ca                	mov    dl,cl
c0010bef:	46                   	inc    esi
c0010bf0:	eb c8                	jmp    c0010bba <VgaText::putchar(char)+0x66>
c0010bf2:	84 d2                	test   dl,dl
c0010bf4:	74 31                	je     c0010c27 <VgaText::putchar(char)+0xd3>
c0010bf6:	50                   	push   eax
c0010bf7:	53                   	push   ebx
c0010bf8:	e8 d9 f5 ff ff       	call   c00101d6 <VgaText::doANSI_SGR(int)>
c0010bfd:	58                   	pop    eax
c0010bfe:	5a                   	pop    edx
c0010bff:	eb 26                	jmp    c0010c27 <VgaText::putchar(char)+0xd3>
c0010c01:	3c 4a                	cmp    al,0x4a
c0010c03:	75 22                	jne    c0010c27 <VgaText::putchar(char)+0xd3>
c0010c05:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010c0c:	75 19                	jne    c0010c27 <VgaText::putchar(char)+0xd3>
c0010c0e:	83 ec 0c             	sub    esp,0xc
c0010c11:	53                   	push   ebx
c0010c12:	e8 d9 fe ff ff       	call   c0010af0 <VgaText::clearScreen()>
c0010c17:	83 c4 0c             	add    esp,0xc
c0010c1a:	6a 00                	push   0x0
c0010c1c:	6a 00                	push   0x0
c0010c1e:	53                   	push   ebx
c0010c1f:	e8 ba f7 ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010c24:	83 c4 10             	add    esp,0x10
c0010c27:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010c30:	eb 36                	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010c32:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010c38:	83 fa 0e             	cmp    edx,0xe
c0010c3b:	7f 2b                	jg     c0010c68 <VgaText::putchar(char)+0x114>
c0010c3d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010c40:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010c46:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010c4d:	eb 19                	jmp    c0010c68 <VgaText::putchar(char)+0x114>
c0010c4f:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c55:	0f be c0             	movsx  eax,al
c0010c58:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c5e:	50                   	push   eax
c0010c5f:	53                   	push   ebx
c0010c60:	e8 ab fa ff ff       	call   c0010710 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010c65:	83 c4 10             	add    esp,0x10
c0010c68:	83 c4 14             	add    esp,0x14
c0010c6b:	5b                   	pop    ebx
c0010c6c:	5e                   	pop    esi
c0010c6d:	c3                   	ret    

c0010c6e <VgaText::puts(char const*)>:
c0010c6e:	53                   	push   ebx
c0010c6f:	83 ec 08             	sub    esp,0x8
c0010c72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c76:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010c79:	84 c0                	test   al,al
c0010c7b:	74 12                	je     c0010c8f <VgaText::puts(char const*)+0x21>
c0010c7d:	43                   	inc    ebx
c0010c7e:	51                   	push   ecx
c0010c7f:	51                   	push   ecx
c0010c80:	50                   	push   eax
c0010c81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c85:	e8 ca fe ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010c8a:	83 c4 10             	add    esp,0x10
c0010c8d:	eb e7                	jmp    c0010c76 <VgaText::puts(char const*)+0x8>
c0010c8f:	83 c4 08             	add    esp,0x8
c0010c92:	5b                   	pop    ebx
c0010c93:	c3                   	ret    

c0010c94 <VgaText::putx(unsigned int)>:
c0010c94:	57                   	push   edi
c0010c95:	b9 11 00 00 00       	mov    ecx,0x11
c0010c9a:	56                   	push   esi
c0010c9b:	be 6e 81 02 c0       	mov    esi,0xc002816e
c0010ca0:	53                   	push   ebx
c0010ca1:	83 ec 20             	sub    esp,0x20
c0010ca4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ca8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010cac:	fc                   	cld    
c0010cad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010caf:	be 08 00 00 00       	mov    esi,0x8
c0010cb4:	50                   	push   eax
c0010cb5:	50                   	push   eax
c0010cb6:	89 d8                	mov    eax,ebx
c0010cb8:	c1 e3 04             	shl    ebx,0x4
c0010cbb:	c1 e8 1c             	shr    eax,0x1c
c0010cbe:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010cc3:	50                   	push   eax
c0010cc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010cc8:	e8 87 fe ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010ccd:	83 c4 10             	add    esp,0x10
c0010cd0:	4e                   	dec    esi
c0010cd1:	75 e1                	jne    c0010cb4 <VgaText::putx(unsigned int)+0x20>
c0010cd3:	83 c4 20             	add    esp,0x20
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	c3                   	ret    

c0010cda <VgaText::VgaText(char const*)>:
c0010cda:	57                   	push   edi
c0010cdb:	56                   	push   esi
c0010cdc:	53                   	push   ebx
c0010cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ce1:	83 ec 08             	sub    esp,0x8
c0010ce4:	6a 00                	push   0x0
c0010ce6:	50                   	push   eax
c0010ce7:	e8 6e 05 00 00       	call   c001125a <UnixFile::UnixFile(int)>
c0010cec:	83 c4 10             	add    esp,0x10
c0010cef:	ba d4 81 02 c0       	mov    edx,0xc00281d4
c0010cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cf8:	89 10                	mov    DWORD PTR [eax],edx
c0010cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cfe:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d0c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1a:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d25:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d30:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d3e:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d4c:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d57:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d62:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010d68:	bb 20 be 02 c0       	mov    ebx,0xc002be20
c0010d6d:	b8 08 00 00 00       	mov    eax,0x8
c0010d72:	fc                   	cld    
c0010d73:	89 d7                	mov    edi,edx
c0010d75:	89 de                	mov    esi,ebx
c0010d77:	89 c1                	mov    ecx,eax
c0010d79:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d7f:	05 1e 10 00 00       	add    eax,0x101e
c0010d84:	83 ec 08             	sub    esp,0x8
c0010d87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d8b:	50                   	push   eax
c0010d8c:	e8 8a f9 fe ff       	call   c000071b <strcpy>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d98:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da6:	83 c0 0c             	add    eax,0xc
c0010da9:	83 ec 04             	sub    esp,0x4
c0010dac:	68 00 0f 00 00       	push   0xf00
c0010db1:	6a 00                	push   0x0
c0010db3:	50                   	push   eax
c0010db4:	e8 c3 f8 fe ff       	call   c000067c <memset>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	83 ec 04             	sub    esp,0x4
c0010dbf:	6a 00                	push   0x0
c0010dc1:	6a 07                	push   0x7
c0010dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dc7:	e8 c2 f4 ff ff       	call   c001028e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	83 ec 08             	sub    esp,0x8
c0010dd2:	6a 02                	push   0x2
c0010dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd8:	e8 49 fa ff ff       	call   c0010826 <VgaText::setCursorHeight(int)>
c0010ddd:	83 c4 10             	add    esp,0x10
c0010de0:	83 ec 04             	sub    esp,0x4
c0010de3:	6a 00                	push   0x0
c0010de5:	6a 00                	push   0x0
c0010de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010deb:	e8 ee f5 ff ff       	call   c00103de <VgaText::setCursor(int, int)>
c0010df0:	83 c4 10             	add    esp,0x10
c0010df3:	83 ec 08             	sub    esp,0x8
c0010df6:	6a 01                	push   0x1
c0010df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dfc:	e8 8b f3 ff ff       	call   c001018c <VgaText::showCursor(bool)>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	6a 01                	push   0x1
c0010e09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e0d:	e8 8a f3 ff ff       	call   c001019c <VgaText::disableBlink(bool)>
c0010e12:	83 c4 10             	add    esp,0x10
c0010e15:	83 ec 0c             	sub    esp,0xc
c0010e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e1c:	e8 cf fc ff ff       	call   c0010af0 <VgaText::clearScreen()>
c0010e21:	83 c4 10             	add    esp,0x10
c0010e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e28:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e33:	05 9e 10 00 00       	add    eax,0x109e
c0010e38:	83 ec 04             	sub    esp,0x4
c0010e3b:	68 96 00 00 00       	push   0x96
c0010e40:	6a 00                	push   0x0
c0010e42:	50                   	push   eax
c0010e43:	e8 34 f8 fe ff       	call   c000067c <memset>
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e4f:	05 34 11 00 00       	add    eax,0x1134
c0010e54:	83 ec 04             	sub    esp,0x4
c0010e57:	68 2c 01 00 00       	push   0x12c
c0010e5c:	6a 00                	push   0x0
c0010e5e:	50                   	push   eax
c0010e5f:	e8 18 f8 fe ff       	call   c000067c <memset>
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	90                   	nop
c0010e68:	5b                   	pop    ebx
c0010e69:	5e                   	pop    esi
c0010e6a:	5f                   	pop    edi
c0010e6b:	c3                   	ret    

c0010e6c <VgaText::receiveKey(unsigned char)>:
c0010e6c:	55                   	push   ebp
c0010e6d:	57                   	push   edi
c0010e6e:	56                   	push   esi
c0010e6f:	53                   	push   ebx
c0010e70:	83 ec 1c             	sub    esp,0x1c
c0010e73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010e77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e7b:	84 db                	test   bl,bl
c0010e7d:	0f 84 c9 00 00 00    	je     c0010f4c <VgaText::receiveKey(unsigned char)+0xe0>
c0010e83:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010e89:	80 fb 08             	cmp    bl,0x8
c0010e8c:	75 2c                	jne    c0010eba <VgaText::receiveKey(unsigned char)+0x4e>
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	57                   	push   edi
c0010e92:	e8 02 f8 fe ff       	call   c0000699 <strlen>
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	85 c0                	test   eax,eax
c0010e9c:	74 41                	je     c0010edf <VgaText::receiveKey(unsigned char)+0x73>
c0010e9e:	50                   	push   eax
c0010e9f:	50                   	push   eax
c0010ea0:	6a 08                	push   0x8
c0010ea2:	56                   	push   esi
c0010ea3:	e8 ac fc ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010ea8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eab:	e8 e9 f7 fe ff       	call   c0000699 <strlen>
c0010eb0:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010eb8:	eb 22                	jmp    c0010edc <VgaText::receiveKey(unsigned char)+0x70>
c0010eba:	0f be c3             	movsx  eax,bl
c0010ebd:	52                   	push   edx
c0010ebe:	52                   	push   edx
c0010ebf:	50                   	push   eax
c0010ec0:	56                   	push   esi
c0010ec1:	e8 8e fc ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010ec6:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010eca:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ecf:	59                   	pop    ecx
c0010ed0:	5d                   	pop    ebp
c0010ed1:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010ed5:	50                   	push   eax
c0010ed6:	57                   	push   edi
c0010ed7:	e8 f6 f8 fe ff       	call   c00007d2 <strcat>
c0010edc:	83 c4 10             	add    esp,0x10
c0010edf:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010ee6:	75 05                	jne    c0010eed <VgaText::receiveKey(unsigned char)+0x81>
c0010ee8:	80 fb 0a             	cmp    bl,0xa
c0010eeb:	75 53                	jne    c0010f40 <VgaText::receiveKey(unsigned char)+0xd4>
c0010eed:	83 ec 0c             	sub    esp,0xc
c0010ef0:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010ef6:	53                   	push   ebx
c0010ef7:	e8 9d f7 fe ff       	call   c0000699 <strlen>
c0010efc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010eff:	89 c5                	mov    ebp,eax
c0010f01:	e8 93 f7 fe ff       	call   c0000699 <strlen>
c0010f06:	83 c4 10             	add    esp,0x10
c0010f09:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010f0d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010f12:	76 10                	jbe    c0010f24 <VgaText::receiveKey(unsigned char)+0xb8>
c0010f14:	83 ec 0c             	sub    esp,0xc
c0010f17:	68 7f 81 02 c0       	push   0xc002817f
c0010f1c:	e8 36 82 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	50                   	push   eax
c0010f25:	50                   	push   eax
c0010f26:	57                   	push   edi
c0010f27:	53                   	push   ebx
c0010f28:	e8 a5 f8 fe ff       	call   c00007d2 <strcat>
c0010f2d:	83 c4 0c             	add    esp,0xc
c0010f30:	68 96 00 00 00       	push   0x96
c0010f35:	6a 00                	push   0x0
c0010f37:	57                   	push   edi
c0010f38:	e8 3f f7 fe ff       	call   c000067c <memset>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	56                   	push   esi
c0010f44:	e8 d5 f9 ff ff       	call   c001091e <VgaText::doUpdate()>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	83 c4 1c             	add    esp,0x1c
c0010f4f:	5b                   	pop    ebx
c0010f50:	5e                   	pop    esi
c0010f51:	5f                   	pop    edi
c0010f52:	5d                   	pop    ebp
c0010f53:	c3                   	ret    

c0010f54 <VgaText::write(unsigned long long, void*, int*)>:
c0010f54:	55                   	push   ebp
c0010f55:	57                   	push   edi
c0010f56:	56                   	push   esi
c0010f57:	53                   	push   ebx
c0010f58:	83 ec 0c             	sub    esp,0xc
c0010f5b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010f5f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010f63:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010f67:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010f6e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010f71:	39 eb                	cmp    ebx,ebp
c0010f73:	74 13                	je     c0010f88 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010f75:	43                   	inc    ebx
c0010f76:	50                   	push   eax
c0010f77:	50                   	push   eax
c0010f78:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010f7c:	50                   	push   eax
c0010f7d:	56                   	push   esi
c0010f7e:	e8 d1 fb ff ff       	call   c0010b54 <VgaText::putchar(char)>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	eb e9                	jmp    c0010f71 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010f88:	83 ec 0c             	sub    esp,0xc
c0010f8b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010f92:	56                   	push   esi
c0010f93:	e8 86 f9 ff ff       	call   c001091e <VgaText::doUpdate()>
c0010f98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f9c:	89 38                	mov    DWORD PTR [eax],edi
c0010f9e:	83 c4 1c             	add    esp,0x1c
c0010fa1:	31 c0                	xor    eax,eax
c0010fa3:	5b                   	pop    ebx
c0010fa4:	5e                   	pop    esi
c0010fa5:	5f                   	pop    edi
c0010fa6:	5d                   	pop    ebp
c0010fa7:	c3                   	ret    

c0010fa8 <newTerminal(char*)>:
c0010fa8:	83 ec 28             	sub    esp,0x28
c0010fab:	68 60 12 00 00       	push   0x1260
c0010fb0:	e8 0b e5 ff ff       	call   c000f4c0 <malloc>
c0010fb5:	5a                   	pop    edx
c0010fb6:	59                   	pop    ecx
c0010fb7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010fbb:	50                   	push   eax
c0010fbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fc0:	e8 15 fd ff ff       	call   c0010cda <VgaText::VgaText(char const*)>
c0010fc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc9:	83 c4 2c             	add    esp,0x2c
c0010fcc:	c3                   	ret    
c0010fcd:	90                   	nop

c0010fce <TSS::TSS()>:
c0010fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010fd9:	90                   	nop
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <TSS::setESP(unsigned long)>:
c0010fdc:	55                   	push   ebp
c0010fdd:	89 e5                	mov    ebp,esp
c0010fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fe8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010feb:	90                   	nop
c0010fec:	5d                   	pop    ebp
c0010fed:	c3                   	ret    

c0010fee <TSS::flush()>:
c0010fee:	55                   	push   ebp
c0010fef:	89 e5                	mov    ebp,esp
c0010ff1:	83 ec 10             	sub    esp,0x10
c0010ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ff9:	83 c8 03             	or     eax,0x3
c0010ffc:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011000:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011004:	66 89 d0             	mov    ax,dx
c0011007:	0f 00 d8             	ltr    ax
c001100a:	90                   	nop
c001100b:	c9                   	leave  
c001100c:	c3                   	ret    
c001100d:	90                   	nop

c001100e <TSS::setup(unsigned long, unsigned long)>:
c001100e:	55                   	push   ebp
c001100f:	89 e5                	mov    ebp,esp
c0011011:	83 ec 18             	sub    esp,0x18
c0011014:	83 ec 0c             	sub    esp,0xc
c0011017:	6a 68                	push   0x68
c0011019:	e8 a2 e4 ff ff       	call   c000f4c0 <malloc>
c001101e:	83 c4 10             	add    esp,0x10
c0011021:	89 c2                	mov    edx,eax
c0011023:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011026:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001102c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001102f:	83 ec 04             	sub    esp,0x4
c0011032:	6a 68                	push   0x68
c0011034:	6a 00                	push   0x0
c0011036:	50                   	push   eax
c0011037:	e8 40 f6 fe ff       	call   c000067c <memset>
c001103c:	83 c4 10             	add    esp,0x10
c001103f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011045:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001104b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001104e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011051:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011057:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001105a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001105d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011060:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011066:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011069:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001106f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011075:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001107b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001107e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011081:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001108a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001108d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011099:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001109f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110a5:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00110ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00110b4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00110b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00110c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00110c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110c9:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00110d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110d6:	0f 20 da             	mov    edx,cr3
c00110d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00110dc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00110df:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00110e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110e8:	83 ec 08             	sub    esp,0x8
c00110eb:	50                   	push   eax
c00110ec:	8d 45 ec             	lea    eax,[ebp-0x14]
c00110ef:	50                   	push   eax
c00110f0:	e8 a9 db ff ff       	call   c000ec9e <GDTEntry::setBase(unsigned int)>
c00110f5:	83 c4 10             	add    esp,0x10
c00110f8:	83 ec 08             	sub    esp,0x8
c00110fb:	6a 68                	push   0x68
c00110fd:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011100:	50                   	push   eax
c0011101:	e8 b4 db ff ff       	call   c000ecba <GDTEntry::setLimit(unsigned int)>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001110d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011110:	83 e0 0f             	and    eax,0xf
c0011113:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011116:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011119:	83 c8 40             	or     eax,0x40
c001111c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001111f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0011124:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001112a:	05 78 01 00 00       	add    eax,0x178
c001112f:	83 ec 04             	sub    esp,0x4
c0011132:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011135:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011138:	50                   	push   eax
c0011139:	e8 b0 db ff ff       	call   c000ecee <GDT::addEntry(GDTEntry)>
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	89 c2                	mov    edx,eax
c0011143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011146:	89 10                	mov    DWORD PTR [eax],edx
c0011148:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001114d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011153:	05 78 01 00 00       	add    eax,0x178
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	50                   	push   eax
c001115c:	e8 d1 db ff ff       	call   c000ed32 <GDT::flush()>
c0011161:	83 c4 10             	add    esp,0x10
c0011164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011167:	8b 00                	mov    eax,DWORD PTR [eax]
c0011169:	83 ec 08             	sub    esp,0x8
c001116c:	50                   	push   eax
c001116d:	68 e8 81 02 c0       	push   0xc00281e8
c0011172:	e8 16 15 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0011177:	83 c4 10             	add    esp,0x10
c001117a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001117d:	8b 00                	mov    eax,DWORD PTR [eax]
c001117f:	c9                   	leave  
c0011180:	c3                   	ret    
c0011181:	90                   	nop

c0011182 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011186:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001118a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001118d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011192:	75 08                	jne    c001119c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011194:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001119a:	eb 38                	jmp    c00111d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001119c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111a1:	75 17                	jne    c00111ba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00111a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111ab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00111b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111b7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00111ba:	89 c1                	mov    ecx,eax
c00111bc:	83 e1 fd             	and    ecx,0xfffffffd
c00111bf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00111c5:	74 cd                	je     c0011194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111c7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00111cc:	83 e0 ef             	and    eax,0xffffffef
c00111cf:	83 f8 08             	cmp    eax,0x8
c00111d2:	76 c0                	jbe    c0011194 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00111d4:	31 c0                	xor    eax,eax
c00111d6:	c3                   	ret    
c00111d7:	90                   	nop

c00111d8 <ReservedFilename::isAtty()>:
c00111d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111df:	31 c0                	xor    eax,eax
c00111e1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00111e7:	74 09                	je     c00111f2 <ReservedFilename::isAtty()+0x1a>
c00111e9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00111ef:	0f 94 c0             	sete   al
c00111f2:	c3                   	ret    
c00111f3:	90                   	nop

c00111f4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00111f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00111fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011203:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011208:	75 08                	jne    c0011212 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001120a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011210:	eb 3d                	jmp    c001124f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011212:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011217:	75 17                	jne    c0011230 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001121e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011221:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011227:	8b 10                	mov    edx,DWORD PTR [eax]
c0011229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001122d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011230:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011235:	75 04                	jne    c001123b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011237:	89 0a                	mov    DWORD PTR [edx],ecx
c0011239:	eb 14                	jmp    c001124f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001123b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011240:	74 c8                	je     c001120a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011242:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011247:	83 e0 ef             	and    eax,0xffffffef
c001124a:	83 f8 08             	cmp    eax,0x8
c001124d:	76 bb                	jbe    c001120a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001124f:	31 c0                	xor    eax,eax
c0011251:	c3                   	ret    

c0011252 <UnixFile::getFileDescriptor()>:
c0011252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011259:	c3                   	ret    

c001125a <UnixFile::UnixFile(int)>:
c001125a:	53                   	push   ebx
c001125b:	83 ec 28             	sub    esp,0x28
c001125e:	ba d4 82 02 c0       	mov    edx,0xc00282d4
c0011263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011267:	89 10                	mov    DWORD PTR [eax],edx
c0011269:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011271:	0f 8f 8c 01 00 00    	jg     c0011403 <UnixFile::UnixFile(int)+0x1a9>
c0011277:	a1 a0 ad 02 c0       	mov    eax,ds:0xc002ada0
c001127c:	8d 50 01             	lea    edx,[eax+0x1]
c001127f:	89 15 a0 ad 02 c0    	mov    DWORD PTR ds:0xc002ada0,edx
c0011285:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011289:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011293:	68 d8 be 02 c0       	push   0xc002bed8
c0011298:	e8 23 53 01 00       	call   c00265c0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	a0 d4 be 02 c0       	mov    al,ds:0xc002bed4
c00112a5:	83 f0 01             	xor    eax,0x1
c00112a8:	84 c0                	test   al,al
c00112aa:	0f 84 54 01 00 00    	je     c0011404 <UnixFile::UnixFile(int)+0x1aa>
c00112b0:	c6 05 d4 be 02 c0 01 	mov    BYTE PTR ds:0xc002bed4,0x1
c00112b7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00112bf:	83 ec 0c             	sub    esp,0xc
c00112c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c6:	e8 f5 e1 ff ff       	call   c000f4c0 <malloc>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	89 c3                	mov    ebx,eax
c00112d0:	83 ec 08             	sub    esp,0x8
c00112d3:	68 03 ff ff 0f       	push   0xfffff03
c00112d8:	53                   	push   ebx
c00112d9:	e8 2c 01 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	89 1d cc be 02 c0    	mov    DWORD PTR ds:0xc002becc,ebx
c00112e7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00112ef:	83 ec 0c             	sub    esp,0xc
c00112f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f6:	e8 c5 e1 ff ff       	call   c000f4c0 <malloc>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	89 c3                	mov    ebx,eax
c0011300:	83 ec 08             	sub    esp,0x8
c0011303:	68 01 ff ff 0f       	push   0xfffff01
c0011308:	53                   	push   ebx
c0011309:	e8 fc 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c001130e:	83 c4 10             	add    esp,0x10
c0011311:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c0011317:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001131f:	83 ec 0c             	sub    esp,0xc
c0011322:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011326:	e8 95 e1 ff ff       	call   c000f4c0 <malloc>
c001132b:	83 c4 10             	add    esp,0x10
c001132e:	89 c3                	mov    ebx,eax
c0011330:	83 ec 08             	sub    esp,0x8
c0011333:	68 00 ff ff 0f       	push   0xfffff00
c0011338:	53                   	push   ebx
c0011339:	e8 cc 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	89 1d c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,ebx
c0011347:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001134f:	83 ec 0c             	sub    esp,0xc
c0011352:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011356:	e8 65 e1 ff ff       	call   c000f4c0 <malloc>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	89 c3                	mov    ebx,eax
c0011360:	83 ec 08             	sub    esp,0x8
c0011363:	68 02 ff ff 0f       	push   0xfffff02
c0011368:	53                   	push   ebx
c0011369:	e8 9c 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c001136e:	83 c4 10             	add    esp,0x10
c0011371:	89 1d c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,ebx
c0011377:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001137f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011384:	7f 7e                	jg     c0011404 <UnixFile::UnixFile(int)+0x1aa>
c0011386:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001138e:	83 ec 0c             	sub    esp,0xc
c0011391:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011395:	e8 26 e1 ff ff       	call   c000f4c0 <malloc>
c001139a:	83 c4 10             	add    esp,0x10
c001139d:	89 c3                	mov    ebx,eax
c001139f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113a3:	05 10 ff ff 0f       	add    eax,0xfffff10
c00113a8:	83 ec 08             	sub    esp,0x8
c00113ab:	50                   	push   eax
c00113ac:	53                   	push   ebx
c00113ad:	e8 58 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113b9:	89 1c 85 a0 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4160],ebx
c00113c0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00113cf:	e8 ec e0 ff ff       	call   c000f4c0 <malloc>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	89 c3                	mov    ebx,eax
c00113d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113dd:	05 20 ff ff 0f       	add    eax,0xfffff20
c00113e2:	83 ec 08             	sub    esp,0x8
c00113e5:	50                   	push   eax
c00113e6:	53                   	push   ebx
c00113e7:	e8 1e 00 00 00       	call   c001140a <ReservedFilename::ReservedFilename(int)>
c00113ec:	83 c4 10             	add    esp,0x10
c00113ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113f3:	89 1c 85 60 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41a0],ebx
c00113fa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00113fe:	e9 7c ff ff ff       	jmp    c001137f <UnixFile::UnixFile(int)+0x125>
c0011403:	90                   	nop
c0011404:	83 c4 28             	add    esp,0x28
c0011407:	5b                   	pop    ebx
c0011408:	c3                   	ret    
c0011409:	90                   	nop

c001140a <ReservedFilename::ReservedFilename(int)>:
c001140a:	83 ec 0c             	sub    esp,0xc
c001140d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011411:	83 ec 08             	sub    esp,0x8
c0011414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011418:	50                   	push   eax
c0011419:	e8 3c fe ff ff       	call   c001125a <UnixFile::UnixFile(int)>
c001141e:	83 c4 10             	add    esp,0x10
c0011421:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c0011426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001142a:	89 10                	mov    DWORD PTR [eax],edx
c001142c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011430:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011434:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011437:	90                   	nop
c0011438:	83 c4 0c             	add    esp,0xc
c001143b:	c3                   	ret    

c001143c <UnixFile::~UnixFile()>:
c001143c:	83 ec 1c             	sub    esp,0x1c
c001143f:	ba d4 82 02 c0       	mov    edx,0xc00282d4
c0011444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011448:	89 10                	mov    DWORD PTR [eax],edx
c001144a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001144e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011451:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011456:	7f 73                	jg     c00114cb <UnixFile::~UnixFile()+0x8f>
c0011458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	68 d8 be 02 c0       	push   0xc002bed8
c0011468:	e8 27 52 01 00       	call   c0026694 <LinkedList<UnixFile>::getFirstElement()>
c001146d:	83 c4 10             	add    esp,0x10
c0011470:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011474:	83 ec 0c             	sub    esp,0xc
c0011477:	68 d8 be 02 c0       	push   0xc002bed8
c001147c:	e8 1b 52 01 00       	call   c002669c <LinkedList<UnixFile>::removeFirst()>
c0011481:	83 c4 10             	add    esp,0x10
c0011484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011488:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001148c:	74 40                	je     c00114ce <UnixFile::~UnixFile()+0x92>
c001148e:	83 ec 08             	sub    esp,0x8
c0011491:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011495:	68 d8 be 02 c0       	push   0xc002bed8
c001149a:	e8 21 51 01 00       	call   c00265c0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001149f:	83 c4 10             	add    esp,0x10
c00114a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a6:	8d 50 01             	lea    edx,[eax+0x1]
c00114a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114ad:	3d 88 13 00 00       	cmp    eax,0x1388
c00114b2:	0f 94 c0             	sete   al
c00114b5:	84 c0                	test   al,al
c00114b7:	74 a7                	je     c0011460 <UnixFile::~UnixFile()+0x24>
c00114b9:	83 ec 0c             	sub    esp,0xc
c00114bc:	68 ac 82 02 c0       	push   0xc00282ac
c00114c1:	e8 91 7c 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	eb 95                	jmp    c0011460 <UnixFile::~UnixFile()+0x24>
c00114cb:	90                   	nop
c00114cc:	eb 01                	jmp    c00114cf <UnixFile::~UnixFile()+0x93>
c00114ce:	90                   	nop
c00114cf:	90                   	nop
c00114d0:	83 c4 1c             	add    esp,0x1c
c00114d3:	c3                   	ret    

c00114d4 <UnixFile::~UnixFile()>:
c00114d4:	83 ec 0c             	sub    esp,0xc
c00114d7:	83 ec 0c             	sub    esp,0xc
c00114da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114de:	e8 59 ff ff ff       	call   c001143c <UnixFile::~UnixFile()>
c00114e3:	83 c4 10             	add    esp,0x10
c00114e6:	83 ec 08             	sub    esp,0x8
c00114e9:	6a 0c                	push   0xc
c00114eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114ef:	e8 b9 10 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c00114f4:	83 c4 10             	add    esp,0x10
c00114f7:	83 c4 0c             	add    esp,0xc
c00114fa:	c3                   	ret    
c00114fb:	90                   	nop

c00114fc <ReservedFilename::~ReservedFilename()>:
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c0011504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011508:	89 10                	mov    DWORD PTR [eax],edx
c001150a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001150e:	83 ec 0c             	sub    esp,0xc
c0011511:	50                   	push   eax
c0011512:	e8 25 ff ff ff       	call   c001143c <UnixFile::~UnixFile()>
c0011517:	83 c4 10             	add    esp,0x10
c001151a:	90                   	nop
c001151b:	83 c4 0c             	add    esp,0xc
c001151e:	c3                   	ret    
c001151f:	90                   	nop

c0011520 <ReservedFilename::~ReservedFilename()>:
c0011520:	83 ec 0c             	sub    esp,0xc
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001152a:	e8 cd ff ff ff       	call   c00114fc <ReservedFilename::~ReservedFilename()>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	83 ec 08             	sub    esp,0x8
c0011535:	6a 0c                	push   0xc
c0011537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153b:	e8 6d 10 00 00       	call   c00125ad <operator delete(void*, unsigned long)>
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	83 c4 0c             	add    esp,0xc
c0011546:	c3                   	ret    

c0011547 <getFromFileDescriptor(int)>:
c0011547:	53                   	push   ebx
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001154f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011555:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001155b:	7f 2c                	jg     c0011589 <getFromFileDescriptor(int)+0x42>
c001155d:	83 ec 0c             	sub    esp,0xc
c0011560:	68 d8 be 02 c0       	push   0xc002bed8
c0011565:	e8 2a 51 01 00       	call   c0026694 <LinkedList<UnixFile>::getFirstElement()>
c001156a:	83 c4 10             	add    esp,0x10
c001156d:	85 c0                	test   eax,eax
c001156f:	75 04                	jne    c0011575 <getFromFileDescriptor(int)+0x2e>
c0011571:	31 c0                	xor    eax,eax
c0011573:	eb 6e                	jmp    c00115e3 <getFromFileDescriptor(int)+0x9c>
c0011575:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011578:	74 69                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c001157a:	52                   	push   edx
c001157b:	52                   	push   edx
c001157c:	50                   	push   eax
c001157d:	68 d8 be 02 c0       	push   0xc002bed8
c0011582:	e8 b7 51 01 00       	call   c002673e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011587:	eb e1                	jmp    c001156a <getFromFileDescriptor(int)+0x23>
c0011589:	a1 cc be 02 c0       	mov    eax,ds:0xc002becc
c001158e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011594:	74 4d                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c0011596:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001159b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00115a1:	74 40                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115a3:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c00115a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00115ae:	74 33                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115b0:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00115b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00115bb:	74 26                	je     c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00115c3:	83 f8 08             	cmp    eax,0x8
c00115c6:	77 09                	ja     c00115d1 <getFromFileDescriptor(int)+0x8a>
c00115c8:	8b 04 85 a0 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4160]
c00115cf:	eb 12                	jmp    c00115e3 <getFromFileDescriptor(int)+0x9c>
c00115d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00115d7:	83 fb 08             	cmp    ebx,0x8
c00115da:	77 95                	ja     c0011571 <getFromFileDescriptor(int)+0x2a>
c00115dc:	8b 04 9d 60 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41a0]
c00115e3:	83 c4 08             	add    esp,0x8
c00115e6:	5b                   	pop    ebx
c00115e7:	c3                   	ret    

c00115e8 <__static_initialization_and_destruction_0(int, int)>:
c00115e8:	83 ec 0c             	sub    esp,0xc
c00115eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00115f0:	75 34                	jne    c0011626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00115fa:	75 2a                	jne    c0011626 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	68 d8 be 02 c0       	push   0xc002bed8
c0011604:	e8 5f 4f 01 00       	call   c0026568 <LinkedList<UnixFile>::LinkedList()>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	83 ec 04             	sub    esp,0x4
c001160f:	68 30 ad 02 c0       	push   0xc002ad30
c0011614:	68 d8 be 02 c0       	push   0xc002bed8
c0011619:	68 66 65 02 c0       	push   0xc0026566
c001161e:	e8 04 0f 00 00       	call   c0012527 <__cxa_atexit>
c0011623:	83 c4 10             	add    esp,0x10
c0011626:	90                   	nop
c0011627:	83 c4 0c             	add    esp,0xc
c001162a:	c3                   	ret    

c001162b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001162b:	83 ec 0c             	sub    esp,0xc
c001162e:	83 ec 08             	sub    esp,0x8
c0011631:	68 ff ff 00 00       	push   0xffff
c0011636:	6a 01                	push   0x1
c0011638:	e8 ab ff ff ff       	call   c00115e8 <__static_initialization_and_destruction_0(int, int)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	83 c4 0c             	add    esp,0xc
c0011643:	c3                   	ret    

c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011644:	53                   	push   ebx
c0011645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011649:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001164d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011653:	89 c8                	mov    eax,ecx
c0011655:	d1 e8                	shr    eax,1
c0011657:	03 05 a8 ad 02 c0    	add    eax,DWORD PTR ds:0xc002ada8
c001165d:	83 e1 01             	and    ecx,0x1
c0011660:	8a 10                	mov    dl,BYTE PTR [eax]
c0011662:	75 09                	jne    c001166d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011664:	83 e2 f0             	and    edx,0xfffffff0
c0011667:	09 da                	or     edx,ebx
c0011669:	88 10                	mov    BYTE PTR [eax],dl
c001166b:	5b                   	pop    ebx
c001166c:	c3                   	ret    
c001166d:	c1 e3 04             	shl    ebx,0x4
c0011670:	83 e2 0f             	and    edx,0xf
c0011673:	09 da                	or     edx,ebx
c0011675:	88 10                	mov    BYTE PTR [eax],dl
c0011677:	5b                   	pop    ebx
c0011678:	c3                   	ret    

c0011679 <Virt::getPageState(unsigned long)>:
c0011679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167d:	8b 0d a8 ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ada8
c0011683:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011689:	89 d0                	mov    eax,edx
c001168b:	d1 e8                	shr    eax,1
c001168d:	83 e2 01             	and    edx,0x1
c0011690:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011693:	75 04                	jne    c0011699 <Virt::getPageState(unsigned long)+0x20>
c0011695:	83 e0 0f             	and    eax,0xf
c0011698:	c3                   	ret    
c0011699:	c0 e8 04             	shr    al,0x4
c001169c:	c3                   	ret    

c001169d <Virt::allocateKernelVirtualPages(int)>:
c001169d:	55                   	push   ebp
c001169e:	31 ed                	xor    ebp,ebp
c00116a0:	57                   	push   edi
c00116a1:	56                   	push   esi
c00116a2:	53                   	push   ebx
c00116a3:	31 db                	xor    ebx,ebx
c00116a5:	83 ec 1c             	sub    esp,0x1c
c00116a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116ac:	8b 3d a4 ad 02 c0    	mov    edi,DWORD PTR ds:0xc002ada4
c00116b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00116b7:	57                   	push   edi
c00116b8:	e8 bc ff ff ff       	call   c0011679 <Virt::getPageState(unsigned long)>
c00116bd:	5a                   	pop    edx
c00116be:	84 c0                	test   al,al
c00116c0:	75 3a                	jne    c00116fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00116c2:	85 db                	test   ebx,ebx
c00116c4:	75 02                	jne    c00116c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00116c6:	89 fd                	mov    ebp,edi
c00116c8:	43                   	inc    ebx
c00116c9:	39 f3                	cmp    ebx,esi
c00116cb:	74 5a                	je     c0011727 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00116cd:	47                   	inc    edi
c00116ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00116d4:	76 31                	jbe    c0011707 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00116d6:	c7 05 a4 ad 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002ada4,0xc8000
c00116e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00116e5:	75 28                	jne    c001170f <Virt::allocateKernelVirtualPages(int)+0x72>
c00116e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00116ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00116f1:	57                   	push   edi
c00116f2:	e8 82 ff ff ff       	call   c0011679 <Virt::getPageState(unsigned long)>
c00116f7:	5a                   	pop    edx
c00116f8:	84 c0                	test   al,al
c00116fa:	74 c6                	je     c00116c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00116fc:	31 db                	xor    ebx,ebx
c00116fe:	47                   	inc    edi
c00116ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011705:	77 cf                	ja     c00116d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011707:	89 3d a4 ad 02 c0    	mov    DWORD PTR ds:0xc002ada4,edi
c001170d:	eb a8                	jmp    c00116b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	68 04 83 02 c0       	push   0xc0028304
c0011717:	e8 3b 7a 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001171c:	8b 3d a4 ad 02 c0    	mov    edi,DWORD PTR ds:0xc002ada4
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	eb 90                	jmp    c00116b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011727:	89 2d a4 ad 02 c0    	mov    DWORD PTR ds:0xc002ada4,ebp
c001172d:	4b                   	dec    ebx
c001172e:	74 5f                	je     c001178f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011730:	85 f6                	test   esi,esi
c0011732:	74 3d                	je     c0011771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011734:	89 e8                	mov    eax,ebp
c0011736:	31 db                	xor    ebx,ebx
c0011738:	8d 7e ff             	lea    edi,[esi-0x1]
c001173b:	eb 14                	jmp    c0011751 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001173d:	6a 01                	push   0x1
c001173f:	43                   	inc    ebx
c0011740:	50                   	push   eax
c0011741:	e8 fe fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011746:	58                   	pop    eax
c0011747:	39 f3                	cmp    ebx,esi
c0011749:	5a                   	pop    edx
c001174a:	74 25                	je     c0011771 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001174c:	a1 a4 ad 02 c0       	mov    eax,ds:0xc002ada4
c0011751:	8d 50 01             	lea    edx,[eax+0x1]
c0011754:	85 db                	test   ebx,ebx
c0011756:	89 15 a4 ad 02 c0    	mov    DWORD PTR ds:0xc002ada4,edx
c001175c:	74 20                	je     c001177e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001175e:	39 df                	cmp    edi,ebx
c0011760:	75 db                	jne    c001173d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011762:	6a 03                	push   0x3
c0011764:	43                   	inc    ebx
c0011765:	50                   	push   eax
c0011766:	e8 d9 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001176b:	59                   	pop    ecx
c001176c:	39 f3                	cmp    ebx,esi
c001176e:	58                   	pop    eax
c001176f:	75 db                	jne    c001174c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011771:	83 c4 1c             	add    esp,0x1c
c0011774:	89 e8                	mov    eax,ebp
c0011776:	5b                   	pop    ebx
c0011777:	c1 e0 0c             	shl    eax,0xc
c001177a:	5e                   	pop    esi
c001177b:	5f                   	pop    edi
c001177c:	5d                   	pop    ebp
c001177d:	c3                   	ret    
c001177e:	6a 02                	push   0x2
c0011780:	bb 01 00 00 00       	mov    ebx,0x1
c0011785:	50                   	push   eax
c0011786:	e8 b9 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001178b:	58                   	pop    eax
c001178c:	5a                   	pop    edx
c001178d:	eb bd                	jmp    c001174c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001178f:	6a 04                	push   0x4
c0011791:	8d 45 01             	lea    eax,[ebp+0x1]
c0011794:	55                   	push   ebp
c0011795:	a3 a4 ad 02 c0       	mov    ds:0xc002ada4,eax
c001179a:	e8 a5 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001179f:	59                   	pop    ecx
c00117a0:	89 e8                	mov    eax,ebp
c00117a2:	5b                   	pop    ebx
c00117a3:	c1 e0 0c             	shl    eax,0xc
c00117a6:	83 c4 1c             	add    esp,0x1c
c00117a9:	5b                   	pop    ebx
c00117aa:	5e                   	pop    esi
c00117ab:	5f                   	pop    edi
c00117ac:	5d                   	pop    ebp
c00117ad:	c3                   	ret    

c00117ae <Virt::virtualMemorySetup()>:
c00117ae:	53                   	push   ebx
c00117af:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	6a 0f                	push   0xf
c00117b9:	53                   	push   ebx
c00117ba:	43                   	inc    ebx
c00117bb:	e8 84 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117c0:	59                   	pop    ecx
c00117c1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117c7:	58                   	pop    eax
c00117c8:	75 ed                	jne    c00117b7 <Virt::virtualMemorySetup()+0x9>
c00117ca:	83 ec 08             	sub    esp,0x8
c00117cd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117d2:	68 00 00 00 c8       	push   0xc8000000
c00117d7:	68 8b 84 02 c0       	push   0xc002848b
c00117dc:	e8 ac 0e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00117e1:	58                   	pop    eax
c00117e2:	5a                   	pop    edx
c00117e3:	68 00 f0 ff ef       	push   0xeffff000
c00117e8:	68 9f 84 02 c0       	push   0xc002849f
c00117ed:	e8 9b 0e 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	83 ec 08             	sub    esp,0x8
c00117f8:	6a 00                	push   0x0
c00117fa:	53                   	push   ebx
c00117fb:	43                   	inc    ebx
c00117fc:	e8 43 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001180a:	75 e9                	jne    c00117f5 <Virt::virtualMemorySetup()+0x47>
c001180c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011811:	83 ec 08             	sub    esp,0x8
c0011814:	6a 0f                	push   0xf
c0011816:	53                   	push   ebx
c0011817:	43                   	inc    ebx
c0011818:	e8 27 fe ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001181d:	83 c4 10             	add    esp,0x10
c0011820:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011826:	75 e9                	jne    c0011811 <Virt::virtualMemorySetup()+0x63>
c0011828:	83 c4 08             	add    esp,0x8
c001182b:	5b                   	pop    ebx
c001182c:	c3                   	ret    

c001182d <Virt::getAKernelVAS()>:
c001182d:	a1 e4 be 02 c0       	mov    eax,ds:0xc002bee4
c0011832:	c3                   	ret    

c0011833 <Virt::setupPageSwapping(int)>:
c0011833:	57                   	push   edi
c0011834:	56                   	push   esi
c0011835:	53                   	push   ebx
c0011836:	83 ec 1c             	sub    esp,0x1c
c0011839:	68 14 01 00 00       	push   0x114
c001183e:	e8 7d dc ff ff       	call   c000f4c0 <malloc>
c0011843:	83 c4 0c             	add    esp,0xc
c0011846:	89 c6                	mov    esi,eax
c0011848:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c001184e:	68 b3 84 02 c0       	push   0xc00284b3
c0011853:	50                   	push   eax
c0011854:	e8 63 13 00 00       	call   c0012bbc <File::File(char const*, Process*)>
c0011859:	89 34 24             	mov    DWORD PTR [esp],esi
c001185c:	e8 37 15 00 00       	call   c0012d98 <File::unlink()>
c0011861:	58                   	pop    eax
c0011862:	5a                   	pop    edx
c0011863:	6a 12                	push   0x12
c0011865:	56                   	push   esi
c0011866:	e8 b5 13 00 00       	call   c0012c20 <File::open(FileOpenMode)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	85 c0                	test   eax,eax
c0011870:	0f 85 ca 00 00 00    	jne    c0011940 <Virt::setupPageSwapping(int)+0x10d>
c0011876:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001187a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011882:	c1 e3 08             	shl    ebx,0x8
c0011885:	83 ec 0c             	sub    esp,0xc
c0011888:	68 00 00 01 00       	push   0x10000
c001188d:	e8 2e dc ff ff       	call   c000f4c0 <malloc>
c0011892:	83 c4 0c             	add    esp,0xc
c0011895:	89 c7                	mov    edi,eax
c0011897:	68 00 00 01 00       	push   0x10000
c001189c:	6a 00                	push   0x0
c001189e:	50                   	push   eax
c001189f:	e8 d8 ed fe ff       	call   c000067c <memset>
c00118a4:	83 c4 10             	add    esp,0x10
c00118a7:	85 db                	test   ebx,ebx
c00118a9:	79 03                	jns    c00118ae <Virt::setupPageSwapping(int)+0x7b>
c00118ab:	83 c3 0f             	add    ebx,0xf
c00118ae:	c1 fb 04             	sar    ebx,0x4
c00118b1:	4b                   	dec    ebx
c00118b2:	83 fb ff             	cmp    ebx,0xffffffff
c00118b5:	74 4b                	je     c0011902 <Virt::setupPageSwapping(int)+0xcf>
c00118b7:	83 ec 0c             	sub    esp,0xc
c00118ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00118bc:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118c0:	52                   	push   edx
c00118c1:	57                   	push   edi
c00118c2:	6a 00                	push   0x0
c00118c4:	68 00 00 01 00       	push   0x10000
c00118c9:	56                   	push   esi
c00118ca:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118cd:	83 c4 20             	add    esp,0x20
c00118d0:	85 c0                	test   eax,eax
c00118d2:	75 59                	jne    c001192d <Virt::setupPageSwapping(int)+0xfa>
c00118d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d8:	3d 00 00 01 00       	cmp    eax,0x10000
c00118dd:	74 d2                	je     c00118b1 <Virt::setupPageSwapping(int)+0x7e>
c00118df:	83 ec 08             	sub    esp,0x8
c00118e2:	4b                   	dec    ebx
c00118e3:	50                   	push   eax
c00118e4:	68 06 85 02 c0       	push   0xc0028506
c00118e9:	e8 9f 0d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00118ee:	c7 04 24 0f 85 02 c0 	mov    DWORD PTR [esp],0xc002850f
c00118f5:	e8 5d 78 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00118fa:	83 c4 10             	add    esp,0x10
c00118fd:	83 fb ff             	cmp    ebx,0xffffffff
c0011900:	75 b5                	jne    c00118b7 <Virt::setupPageSwapping(int)+0x84>
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	56                   	push   esi
c0011906:	e8 73 13 00 00       	call   c0012c7e <File::close()>
c001190b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001190e:	e8 cd db ff ff       	call   c000f4e0 <rfree>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	85 f6                	test   esi,esi
c0011918:	74 0c                	je     c0011926 <Virt::setupPageSwapping(int)+0xf3>
c001191a:	83 ec 0c             	sub    esp,0xc
c001191d:	8b 06                	mov    eax,DWORD PTR [esi]
c001191f:	56                   	push   esi
c0011920:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	5b                   	pop    ebx
c001192a:	5e                   	pop    esi
c001192b:	5f                   	pop    edi
c001192c:	c3                   	ret    
c001192d:	83 ec 08             	sub    esp,0x8
c0011930:	50                   	push   eax
c0011931:	68 ee 84 02 c0       	push   0xc00284ee
c0011936:	e8 52 0d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	eb 94                	jmp    c00118d4 <Virt::setupPageSwapping(int)+0xa1>
c0011940:	83 ec 08             	sub    esp,0x8
c0011943:	50                   	push   eax
c0011944:	68 ca 84 02 c0       	push   0xc00284ca
c0011949:	e8 3f 0d 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001194e:	c7 04 24 d3 84 02 c0 	mov    DWORD PTR [esp],0xc00284d3
c0011955:	e8 fd 77 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001195a:	83 c4 10             	add    esp,0x10
c001195d:	e9 14 ff ff ff       	jmp    c0011876 <Virt::setupPageSwapping(int)+0x43>

c0011962 <VAS::VAS()>:
c0011962:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011966:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001196d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011971:	a3 e4 be 02 c0       	mov    ds:0xc002bee4,eax
c0011976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001197a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001197e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011982:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011989:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011990:	90                   	nop
c0011991:	c3                   	ret    

c0011992 <VAS::VAS(VAS*)>:
c0011992:	83 ec 0c             	sub    esp,0xc
c0011995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011999:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119a0:	83 ec 0c             	sub    esp,0xc
c00119a3:	68 24 83 02 c0       	push   0xc0028324
c00119a8:	e8 aa 77 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	90                   	nop
c00119b1:	83 c4 0c             	add    esp,0xc
c00119b4:	c3                   	ret    
c00119b5:	90                   	nop

c00119b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00119b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ba:	89 c2                	mov    edx,eax
c00119bc:	c1 e8 0a             	shr    eax,0xa
c00119bf:	c1 ea 16             	shr    edx,0x16
c00119c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00119c7:	19 c9                	sbb    ecx,ecx
c00119c9:	c1 e2 0c             	shl    edx,0xc
c00119cc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00119d2:	25 fc 0f 00 00       	and    eax,0xffc
c00119d7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00119de:	01 d0                	add    eax,edx
c00119e0:	c3                   	ret    
c00119e1:	90                   	nop

c00119e2 <VAS::getPageTableEntry(unsigned long)>:
c00119e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00119e6:	89 ca                	mov    edx,ecx
c00119e8:	c1 e9 0a             	shr    ecx,0xa
c00119eb:	c1 ea 16             	shr    edx,0x16
c00119ee:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119f4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119fa:	c1 e0 0c             	shl    eax,0xc
c00119fd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a00:	c3                   	ret    

c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a01:	57                   	push   edi
c0011a02:	56                   	push   esi
c0011a03:	be 01 00 00 00       	mov    esi,0x1
c0011a08:	53                   	push   ebx
c0011a09:	83 ec 10             	sub    esp,0x10
c0011a0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a10:	c1 eb 0c             	shr    ebx,0xc
c0011a13:	eb 3f                	jmp    c0011a54 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011a15:	e8 13 fe ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0011a1a:	83 ec 08             	sub    esp,0x8
c0011a1d:	57                   	push   edi
c0011a1e:	50                   	push   eax
c0011a1f:	e8 be ff ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a29:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a2d:	f6 c4 04             	test   ah,0x4
c0011a30:	75 5f                	jne    c0011a91 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011a32:	80 fa 04             	cmp    dl,0x4
c0011a35:	74 78                	je     c0011aaf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011a37:	80 fa 02             	cmp    dl,0x2
c0011a3a:	0f 84 88 00 00 00    	je     c0011ac8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011a40:	80 fa 03             	cmp    dl,0x3
c0011a43:	0f 84 ad 00 00 00    	je     c0011af6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011a49:	fe ca                	dec    dl
c0011a4b:	0f 84 92 00 00 00    	je     c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a51:	43                   	inc    ebx
c0011a52:	31 f6                	xor    esi,esi
c0011a54:	53                   	push   ebx
c0011a55:	e8 1f fc ff ff       	call   c0011679 <Virt::getPageState(unsigned long)>
c0011a5a:	5f                   	pop    edi
c0011a5b:	89 df                	mov    edi,ebx
c0011a5d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a61:	c1 e7 0c             	shl    edi,0xc
c0011a64:	84 c0                	test   al,al
c0011a66:	75 ad                	jne    c0011a15 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	68 15 85 02 c0       	push   0xc0028515
c0011a70:	e8 e2 76 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011a75:	e8 b3 fd ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0011a7a:	5a                   	pop    edx
c0011a7b:	59                   	pop    ecx
c0011a7c:	57                   	push   edi
c0011a7d:	50                   	push   eax
c0011a7e:	e8 5f ff ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011a83:	83 c4 10             	add    esp,0x10
c0011a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a88:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a8c:	f6 c4 04             	test   ah,0x4
c0011a8f:	74 c0                	je     c0011a51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a91:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a9a:	83 ec 0c             	sub    esp,0xc
c0011a9d:	50                   	push   eax
c0011a9e:	e8 3d df ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011aa3:	83 c4 10             	add    esp,0x10
c0011aa6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011aaa:	80 fa 04             	cmp    dl,0x4
c0011aad:	75 88                	jne    c0011a37 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011aaf:	89 f0                	mov    eax,esi
c0011ab1:	84 c0                	test   al,al
c0011ab3:	75 47                	jne    c0011afc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011ab5:	c7 44 24 20 48 83 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028348
c0011abd:	83 c4 10             	add    esp,0x10
c0011ac0:	5b                   	pop    ebx
c0011ac1:	5e                   	pop    esi
c0011ac2:	5f                   	pop    edi
c0011ac3:	e9 8f 76 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c0011ac8:	89 f0                	mov    eax,esi
c0011aca:	84 c0                	test   al,al
c0011acc:	75 15                	jne    c0011ae3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ace:	83 ec 0c             	sub    esp,0xc
c0011ad1:	68 31 85 02 c0       	push   0xc0028531
c0011ad6:	e8 7c 76 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	e9 6e ff ff ff       	jmp    c0011a51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ae3:	83 ec 08             	sub    esp,0x8
c0011ae6:	6a 00                	push   0x0
c0011ae8:	53                   	push   ebx
c0011ae9:	e8 56 fb ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	e9 5b ff ff ff       	jmp    c0011a51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011af6:	89 f0                	mov    eax,esi
c0011af8:	84 c0                	test   al,al
c0011afa:	75 15                	jne    c0011b11 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011afc:	83 ec 08             	sub    esp,0x8
c0011aff:	6a 00                	push   0x0
c0011b01:	53                   	push   ebx
c0011b02:	e8 3d fb ff ff       	call   c0011644 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	5b                   	pop    ebx
c0011b0e:	5e                   	pop    esi
c0011b0f:	5f                   	pop    edi
c0011b10:	c3                   	ret    
c0011b11:	c7 44 24 20 4d 85 02 c0 	mov    DWORD PTR [esp+0x20],0xc002854d
c0011b19:	83 c4 10             	add    esp,0x10
c0011b1c:	5b                   	pop    ebx
c0011b1d:	5e                   	pop    esi
c0011b1e:	5f                   	pop    edi
c0011b1f:	e9 33 76 00 00       	jmp    c0019157 <Krnl::panic(char const*)>

c0011b24 <VAS::freeAllocatedPages(unsigned long)>:
c0011b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b2c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011b30:	74 09                	je     c0011b3b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011b32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b36:	e9 c6 fe ff ff       	jmp    c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0011b3b:	c7 44 24 04 6c 83 02 c0 	mov    DWORD PTR [esp+0x4],0xc002836c
c0011b43:	e9 45 0b 00 00       	jmp    c001268d <Dbg::kprintf(char const*, ...)>

c0011b48 <VAS::virtualToPhysical(unsigned long)>:
c0011b48:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b50:	e8 8d fe ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011b55:	5a                   	pop    edx
c0011b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b58:	59                   	pop    ecx
c0011b59:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b5e:	c3                   	ret    
c0011b5f:	90                   	nop

c0011b60 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b60:	55                   	push   ebp
c0011b61:	57                   	push   edi
c0011b62:	56                   	push   esi
c0011b63:	53                   	push   ebx
c0011b64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b68:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b6c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b70:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b74:	85 db                	test   ebx,ebx
c0011b76:	7e 22                	jle    c0011b9a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b78:	c1 e3 0c             	shl    ebx,0xc
c0011b7b:	01 f3                	add    ebx,esi
c0011b7d:	56                   	push   esi
c0011b7e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b84:	55                   	push   ebp
c0011b85:	e8 58 fe ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0011b8a:	5a                   	pop    edx
c0011b8b:	59                   	pop    ecx
c0011b8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b8e:	21 f9                	and    ecx,edi
c0011b90:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b94:	39 f3                	cmp    ebx,esi
c0011b96:	89 08                	mov    DWORD PTR [eax],ecx
c0011b98:	75 e3                	jne    c0011b7d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b9a:	5b                   	pop    ebx
c0011b9b:	5e                   	pop    esi
c0011b9c:	5f                   	pop    edi
c0011b9d:	5d                   	pop    ebp
c0011b9e:	c3                   	ret    
c0011b9f:	90                   	nop

c0011ba0 <VAS::setToWriteCombining(unsigned long, int)>:
c0011ba0:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0011ba5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011bab:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011bb2:	75 01                	jne    c0011bb5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011bb4:	c3                   	ret    
c0011bb5:	68 80 00 00 00       	push   0x80
c0011bba:	6a ff                	push   0xffffffff
c0011bbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011bc8:	e8 93 ff ff ff       	call   c0011b60 <VAS::reflagRange(unsigned long, int, int, int)>
c0011bcd:	83 c4 14             	add    esp,0x14
c0011bd0:	c3                   	ret    
c0011bd1:	90                   	nop

c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011bd2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bdb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011bde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011be2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011be5:	19 c0                	sbb    eax,eax
c0011be7:	83 ca 03             	or     edx,0x3
c0011bea:	83 e0 fc             	and    eax,0xfffffffc
c0011bed:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011bf4:	0f 20 d8             	mov    eax,cr3
c0011bf7:	0f 22 d8             	mov    cr3,eax
c0011bfa:	c3                   	ret    
c0011bfb:	90                   	nop

c0011bfc <VAS::~VAS()>:
c0011bfc:	83 ec 2c             	sub    esp,0x2c
c0011bff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c07:	e8 91 a5 00 00       	call   c001c19d <lockScheduler()>
c0011c0c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c16:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c1c:	83 ec 04             	sub    esp,0x4
c0011c1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c23:	6a 01                	push   0x1
c0011c25:	50                   	push   eax
c0011c26:	e8 a7 ff ff ff       	call   c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c2b:	83 c4 10             	add    esp,0x10
c0011c2e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c36:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011c3e:	0f 8f d7 00 00 00    	jg     c0011d1b <VAS::~VAS()+0x11f>
c0011c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011c4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c4f:	c1 e2 02             	shl    edx,0x2
c0011c52:	01 d0                	add    eax,edx
c0011c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c5e:	83 e0 01             	and    eax,0x1
c0011c61:	0f 84 ab 00 00 00    	je     c0011d12 <VAS::~VAS()+0x116>
c0011c67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c6f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c77:	7f 75                	jg     c0011cee <VAS::~VAS()+0xf2>
c0011c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c7d:	c1 e0 0a             	shl    eax,0xa
c0011c80:	89 c2                	mov    edx,eax
c0011c82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c86:	01 d0                	add    eax,edx
c0011c88:	c1 e0 0c             	shl    eax,0xc
c0011c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c8f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c99:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c9f:	83 ec 04             	sub    esp,0x4
c0011ca2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011ca6:	6a 01                	push   0x1
c0011ca8:	50                   	push   eax
c0011ca9:	e8 08 fd ff ff       	call   c00119b6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011cb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011cbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc3:	25 01 04 00 00       	and    eax,0x401
c0011cc8:	3d 01 04 00 00       	cmp    eax,0x401
c0011ccd:	75 19                	jne    c0011ce8 <VAS::~VAS()+0xec>
c0011ccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	50                   	push   eax
c0011cdc:	e8 ff dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011ce1:	83 c4 10             	add    esp,0x10
c0011ce4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ce8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011cec:	eb 81                	jmp    c0011c6f <VAS::~VAS()+0x73>
c0011cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cf2:	25 00 04 00 00       	and    eax,0x400
c0011cf7:	74 19                	je     c0011d12 <VAS::~VAS()+0x116>
c0011cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cfd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d02:	83 ec 0c             	sub    esp,0xc
c0011d05:	50                   	push   eax
c0011d06:	e8 d5 dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d12:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011d16:	e9 1b ff ff ff       	jmp    c0011c36 <VAS::~VAS()+0x3a>
c0011d1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d22:	83 ec 0c             	sub    esp,0xc
c0011d25:	50                   	push   eax
c0011d26:	e8 d6 fc ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d32:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d35:	83 ec 0c             	sub    esp,0xc
c0011d38:	50                   	push   eax
c0011d39:	e8 a2 dc ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d49:	c1 e0 02             	shl    eax,0x2
c0011d4c:	83 ec 08             	sub    esp,0x8
c0011d4f:	50                   	push   eax
c0011d50:	68 90 83 02 c0       	push   0xc0028390
c0011d55:	e8 33 09 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	e8 3d a4 00 00       	call   c001c19f <unlockScheduler()>
c0011d62:	90                   	nop
c0011d63:	83 c4 2c             	add    esp,0x2c
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d68:	55                   	push   ebp
c0011d69:	57                   	push   edi
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d73:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d77:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d7d:	77 08                	ja     c0011d87 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d7f:	0f 20 d8             	mov    eax,cr3
c0011d82:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011d85:	75 47                	jne    c0011dce <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d8b:	09 d8                	or     eax,ebx
c0011d8d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d92:	75 57                	jne    c0011deb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d94:	89 de                	mov    esi,ebx
c0011d96:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d99:	c1 ee 16             	shr    esi,0x16
c0011d9c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011da3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011da7:	74 54                	je     c0011dfd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011da9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011dad:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011db3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011db7:	c1 e6 0c             	shl    esi,0xc
c0011dba:	c1 eb 0a             	shr    ebx,0xa
c0011dbd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011dc3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011dc6:	83 c4 1c             	add    esp,0x1c
c0011dc9:	5b                   	pop    ebx
c0011dca:	5e                   	pop    esi
c0011dcb:	5f                   	pop    edi
c0011dcc:	5d                   	pop    ebp
c0011dcd:	c3                   	ret    
c0011dce:	83 ec 0c             	sub    esp,0xc
c0011dd1:	68 b0 83 02 c0       	push   0xc00283b0
c0011dd6:	e8 b2 08 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0011ddb:	83 c4 10             	add    esp,0x10
c0011dde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011de2:	09 d8                	or     eax,ebx
c0011de4:	a9 ff 0f 00 00       	test   eax,0xfff
c0011de9:	74 a9                	je     c0011d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011deb:	83 ec 0c             	sub    esp,0xc
c0011dee:	68 18 84 02 c0       	push   0xc0028418
c0011df3:	e8 5f 73 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011df8:	83 c4 10             	add    esp,0x10
c0011dfb:	eb 97                	jmp    c0011d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011dfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e01:	e8 64 dc ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011e06:	89 c5                	mov    ebp,eax
c0011e08:	e8 20 fa ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0011e0d:	83 ec 0c             	sub    esp,0xc
c0011e10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e14:	6a 01                	push   0x1
c0011e16:	e8 82 f8 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0011e1b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e22:	6a 01                	push   0x1
c0011e24:	50                   	push   eax
c0011e25:	55                   	push   ebp
c0011e26:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e2c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e30:	51                   	push   ecx
c0011e31:	e8 26 02 00 00       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e36:	83 c4 1c             	add    esp,0x1c
c0011e39:	68 00 10 00 00       	push   0x1000
c0011e3e:	6a 00                	push   0x0
c0011e40:	50                   	push   eax
c0011e41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e45:	e8 32 e8 fe ff       	call   c000067c <memset>
c0011e4a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e4e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e51:	e8 ab fb ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e5a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e5d:	83 c4 10             	add    esp,0x10
c0011e60:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e63:	e9 41 ff ff ff       	jmp    c0011da9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011e68 <VAS::allocatePages(int, int)>:
c0011e68:	55                   	push   ebp
c0011e69:	57                   	push   edi
c0011e6a:	56                   	push   esi
c0011e6b:	53                   	push   ebx
c0011e6c:	83 ec 1c             	sub    esp,0x1c
c0011e6f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e73:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0011e78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e7e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e84:	83 e0 01             	and    eax,0x1
c0011e87:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e8b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e8f:	0f 85 cc 00 00 00    	jne    c0011f61 <VAS::allocatePages(int, int)+0xf9>
c0011e95:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e9c:	85 c0                	test   eax,eax
c0011e9e:	0f 84 a1 00 00 00    	je     c0011f45 <VAS::allocatePages(int, int)+0xdd>
c0011ea4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011ea8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011eac:	c1 e6 0c             	shl    esi,0xc
c0011eaf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011eb3:	85 c0                	test   eax,eax
c0011eb5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011eb8:	7e 33                	jle    c0011eed <VAS::allocatePages(int, int)+0x85>
c0011eba:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ebe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ec2:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ec8:	e8 9d db ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011ecd:	55                   	push   ebp
c0011ece:	53                   	push   ebx
c0011ecf:	50                   	push   eax
c0011ed0:	57                   	push   edi
c0011ed1:	e8 92 fe ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ed6:	83 c4 10             	add    esp,0x10
c0011ed9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ede:	74 03                	je     c0011ee3 <VAS::allocatePages(int, int)+0x7b>
c0011ee0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ee3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ee9:	39 de                	cmp    esi,ebx
c0011eeb:	75 db                	jne    c0011ec8 <VAS::allocatePages(int, int)+0x60>
c0011eed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ef2:	75 12                	jne    c0011f06 <VAS::allocatePages(int, int)+0x9e>
c0011ef4:	0f 20 d8             	mov    eax,cr3
c0011ef7:	0f 22 d8             	mov    cr3,eax
c0011efa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011efe:	83 c4 1c             	add    esp,0x1c
c0011f01:	5b                   	pop    ebx
c0011f02:	5e                   	pop    esi
c0011f03:	5f                   	pop    edi
c0011f04:	5d                   	pop    ebp
c0011f05:	c3                   	ret    
c0011f06:	c1 ee 0a             	shr    esi,0xa
c0011f09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f0d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011f13:	c1 eb 0a             	shr    ebx,0xa
c0011f16:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011f1c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f22:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f28:	39 c3                	cmp    ebx,eax
c0011f2a:	77 ce                	ja     c0011efa <VAS::allocatePages(int, int)+0x92>
c0011f2c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f2f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f35:	39 d8                	cmp    eax,ebx
c0011f37:	73 f3                	jae    c0011f2c <VAS::allocatePages(int, int)+0xc4>
c0011f39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f3d:	83 c4 1c             	add    esp,0x1c
c0011f40:	5b                   	pop    ebx
c0011f41:	5e                   	pop    esi
c0011f42:	5f                   	pop    edi
c0011f43:	5d                   	pop    ebp
c0011f44:	c3                   	ret    
c0011f45:	83 ec 0c             	sub    esp,0xc
c0011f48:	68 3c 84 02 c0       	push   0xc002843c
c0011f4d:	e8 05 72 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0011f52:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	e9 43 ff ff ff       	jmp    c0011ea4 <VAS::allocatePages(int, int)+0x3c>
c0011f61:	83 ec 0c             	sub    esp,0xc
c0011f64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f68:	e8 30 f7 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0011f6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f71:	83 c4 10             	add    esp,0x10
c0011f74:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f79:	0f 87 9b 00 00 00    	ja     c001201a <VAS::allocatePages(int, int)+0x1b2>
c0011f7f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f83:	85 d2                	test   edx,edx
c0011f85:	7e 3c                	jle    c0011fc3 <VAS::allocatePages(int, int)+0x15b>
c0011f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f93:	c1 e5 0c             	shl    ebp,0xc
c0011f96:	81 ce 00 04 00 00    	or     esi,0x400
c0011f9c:	01 dd                	add    ebp,ebx
c0011f9e:	e8 c7 da ff ff       	call   c000fa6a <Phys::allocatePage()>
c0011fa3:	56                   	push   esi
c0011fa4:	53                   	push   ebx
c0011fa5:	50                   	push   eax
c0011fa6:	57                   	push   edi
c0011fa7:	e8 bc fd ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011fac:	83 c4 10             	add    esp,0x10
c0011faf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fb4:	74 03                	je     c0011fb9 <VAS::allocatePages(int, int)+0x151>
c0011fb6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fbf:	39 dd                	cmp    ebp,ebx
c0011fc1:	75 db                	jne    c0011f9e <VAS::allocatePages(int, int)+0x136>
c0011fc3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fc8:	0f 84 26 ff ff ff    	je     c0011ef4 <VAS::allocatePages(int, int)+0x8c>
c0011fce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd6:	89 d3                	mov    ebx,edx
c0011fd8:	c1 e0 0c             	shl    eax,0xc
c0011fdb:	c1 eb 0a             	shr    ebx,0xa
c0011fde:	01 d0                	add    eax,edx
c0011fe0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fe6:	c1 e8 0a             	shr    eax,0xa
c0011fe9:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fef:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ff4:	2d 00 00 40 00       	sub    eax,0x400000
c0011ff9:	39 c3                	cmp    ebx,eax
c0011ffb:	0f 87 f9 fe ff ff    	ja     c0011efa <VAS::allocatePages(int, int)+0x92>
c0012001:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012004:	81 c3 00 10 00 00    	add    ebx,0x1000
c001200a:	39 d8                	cmp    eax,ebx
c001200c:	73 f3                	jae    c0012001 <VAS::allocatePages(int, int)+0x199>
c001200e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012012:	83 c4 1c             	add    esp,0x1c
c0012015:	5b                   	pop    ebx
c0012016:	5e                   	pop    esi
c0012017:	5f                   	pop    edi
c0012018:	5d                   	pop    ebp
c0012019:	c3                   	ret    
c001201a:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001201f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012025:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001202c:	0f 84 4d ff ff ff    	je     c0011f7f <VAS::allocatePages(int, int)+0x117>
c0012032:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001203a:	e9 40 ff ff ff       	jmp    c0011f7f <VAS::allocatePages(int, int)+0x117>
c001203f:	90                   	nop

c0012040 <VAS::setCPUSpecific(unsigned long)>:
c0012040:	83 ec 0c             	sub    esp,0xc
c0012043:	6a 05                	push   0x5
c0012045:	68 00 00 40 c2       	push   0xc2400000
c001204a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001204e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012052:	e8 11 fd ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012057:	83 c4 1c             	add    esp,0x1c
c001205a:	c3                   	ret    
c001205b:	90                   	nop

c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001205c:	55                   	push   ebp
c001205d:	57                   	push   edi
c001205e:	56                   	push   esi
c001205f:	53                   	push   ebx
c0012060:	83 ec 1c             	sub    esp,0x1c
c0012063:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0012068:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001206c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012072:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012076:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001207c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012080:	83 e0 01             	and    eax,0x1
c0012083:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012087:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001208b:	85 c0                	test   eax,eax
c001208d:	7e 39                	jle    c00120c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001208f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012093:	89 f3                	mov    ebx,esi
c0012095:	c1 e0 0c             	shl    eax,0xc
c0012098:	01 f0                	add    eax,esi
c001209a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001209e:	55                   	push   ebp
c001209f:	53                   	push   ebx
c00120a0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120a4:	29 f0                	sub    eax,esi
c00120a6:	01 d8                	add    eax,ebx
c00120a8:	50                   	push   eax
c00120a9:	57                   	push   edi
c00120aa:	e8 b9 fc ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120b7:	74 03                	je     c00120bc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00120b9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120bc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120c2:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00120c6:	75 d6                	jne    c001209e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00120c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120cd:	75 10                	jne    c00120df <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00120cf:	0f 20 d8             	mov    eax,cr3
c00120d2:	0f 22 d8             	mov    cr3,eax
c00120d5:	83 c4 1c             	add    esp,0x1c
c00120d8:	89 f0                	mov    eax,esi
c00120da:	5b                   	pop    ebx
c00120db:	5e                   	pop    esi
c00120dc:	5f                   	pop    edi
c00120dd:	5d                   	pop    ebp
c00120de:	c3                   	ret    
c00120df:	89 f3                	mov    ebx,esi
c00120e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120e5:	c1 eb 0a             	shr    ebx,0xa
c00120e8:	c1 e0 0c             	shl    eax,0xc
c00120eb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120f1:	01 f0                	add    eax,esi
c00120f3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120f9:	c1 e8 0a             	shr    eax,0xa
c00120fc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012101:	2d 00 00 40 00       	sub    eax,0x400000
c0012106:	39 c3                	cmp    ebx,eax
c0012108:	77 cb                	ja     c00120d5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001210a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001210d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012113:	39 d8                	cmp    eax,ebx
c0012115:	73 f3                	jae    c001210a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012117:	83 c4 1c             	add    esp,0x1c
c001211a:	89 f0                	mov    eax,esi
c001211c:	5b                   	pop    ebx
c001211d:	5e                   	pop    esi
c001211e:	5f                   	pop    edi
c001211f:	5d                   	pop    ebp
c0012120:	c3                   	ret    
c0012121:	90                   	nop

c0012122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012122:	55                   	push   ebp
c0012123:	57                   	push   edi
c0012124:	56                   	push   esi
c0012125:	53                   	push   ebx
c0012126:	83 ec 1c             	sub    esp,0x1c
c0012129:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001212d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012131:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012135:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012139:	a9 ff 0f 00 00       	test   eax,0xfff
c001213e:	75 4a                	jne    c001218a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012144:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012147:	c1 eb 16             	shr    ebx,0x16
c001214a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012151:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012155:	74 4d                	je     c00121a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012157:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001215b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001215f:	c1 e8 0a             	shr    eax,0xa
c0012162:	80 fa 01             	cmp    dl,0x1
c0012165:	19 d2                	sbb    edx,edx
c0012167:	c1 e3 0c             	shl    ebx,0xc
c001216a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001216e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012174:	25 fc 0f 00 00       	and    eax,0xffc
c0012179:	01 d8                	add    eax,ebx
c001217b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012182:	83 c4 1c             	add    esp,0x1c
c0012185:	5b                   	pop    ebx
c0012186:	5e                   	pop    esi
c0012187:	5f                   	pop    edi
c0012188:	5d                   	pop    ebp
c0012189:	c3                   	ret    
c001218a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001218e:	83 ec 0c             	sub    esp,0xc
c0012191:	68 68 84 02 c0       	push   0xc0028468
c0012196:	e8 bc 6f 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121a2:	eb 9c                	jmp    c0012140 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00121a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00121a8:	e8 bd d8 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00121ad:	89 c5                	mov    ebp,eax
c00121af:	e8 79 f6 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c00121b4:	83 ec 0c             	sub    esp,0xc
c00121b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121bb:	6a 01                	push   0x1
c00121bd:	e8 db f4 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c00121c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00121c9:	6a 01                	push   0x1
c00121cb:	50                   	push   eax
c00121cc:	55                   	push   ebp
c00121cd:	81 cd 07 04 00 00    	or     ebp,0x407
c00121d3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00121d7:	51                   	push   ecx
c00121d8:	e8 7f fe ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121dd:	83 c4 1c             	add    esp,0x1c
c00121e0:	68 00 10 00 00       	push   0x1000
c00121e5:	6a 00                	push   0x0
c00121e7:	50                   	push   eax
c00121e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121ec:	e8 8b e4 fe ff       	call   c000067c <memset>
c00121f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121f5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121f8:	e8 04 f8 ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c00121fd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012200:	83 c4 10             	add    esp,0x10
c0012203:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012206:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001220a:	e9 48 ff ff ff       	jmp    c0012157 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c001220f:	90                   	nop

c0012210 <VAS::VAS(bool)>:
c0012210:	53                   	push   ebx
c0012211:	83 ec 28             	sub    esp,0x28
c0012214:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012218:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001221c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012220:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012227:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001222f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012232:	e8 33 d8 ff ff       	call   c000fa6a <Phys::allocatePage()>
c0012237:	89 c2                	mov    edx,eax
c0012239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012240:	e8 e8 f5 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0012245:	89 c3                	mov    ebx,eax
c0012247:	83 ec 0c             	sub    esp,0xc
c001224a:	6a 01                	push   0x1
c001224c:	e8 4c f4 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0012251:	83 c4 10             	add    esp,0x10
c0012254:	89 c2                	mov    edx,eax
c0012256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	6a 03                	push   0x3
c0012262:	6a 01                	push   0x1
c0012264:	52                   	push   edx
c0012265:	50                   	push   eax
c0012266:	53                   	push   ebx
c0012267:	e8 f0 fd ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001226c:	83 c4 20             	add    esp,0x20
c001226f:	89 c2                	mov    edx,eax
c0012271:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012275:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012278:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012280:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012288:	7f 1c                	jg     c00122a6 <VAS::VAS(bool)+0x96>
c001228a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001228e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012291:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012295:	c1 e2 02             	shl    edx,0x2
c0012298:	01 d0                	add    eax,edx
c001229a:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122a0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122a4:	eb da                	jmp    c0012280 <VAS::VAS(bool)+0x70>
c00122a6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00122ae:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00122b6:	7f 7a                	jg     c0012332 <VAS::VAS(bool)+0x122>
c00122b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122bc:	2d 00 02 00 00       	sub    eax,0x200
c00122c1:	c1 e0 0c             	shl    eax,0xc
c00122c4:	83 c8 03             	or     eax,0x3
c00122c7:	89 c2                	mov    edx,eax
c00122c9:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00122ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122d4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122da:	83 e0 10             	and    eax,0x10
c00122dd:	84 c0                	test   al,al
c00122df:	74 07                	je     c00122e8 <VAS::VAS(bool)+0xd8>
c00122e1:	b8 00 01 00 00       	mov    eax,0x100
c00122e6:	eb 05                	jmp    c00122ed <VAS::VAS(bool)+0xdd>
c00122e8:	b8 00 00 00 00       	mov    eax,0x0
c00122ed:	09 d0                	or     eax,edx
c00122ef:	89 c1                	mov    ecx,eax
c00122f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122fc:	c1 e2 02             	shl    edx,0x2
c00122ff:	01 d0                	add    eax,edx
c0012301:	89 ca                	mov    edx,ecx
c0012303:	89 10                	mov    DWORD PTR [eax],edx
c0012305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012309:	2d 40 03 00 00       	sub    eax,0x340
c001230e:	83 f8 7f             	cmp    eax,0x7f
c0012311:	77 16                	ja     c0012329 <VAS::VAS(bool)+0x119>
c0012313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012317:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001231a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001231e:	c1 e2 02             	shl    edx,0x2
c0012321:	01 d0                	add    eax,edx
c0012323:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012329:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001232d:	e9 7c ff ff ff       	jmp    c00122ae <VAS::VAS(bool)+0x9e>
c0012332:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0012337:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012343:	83 e0 10             	and    eax,0x10
c0012346:	84 c0                	test   al,al
c0012348:	74 07                	je     c0012351 <VAS::VAS(bool)+0x141>
c001234a:	b8 03 41 00 00       	mov    eax,0x4103
c001234f:	eb 05                	jmp    c0012356 <VAS::VAS(bool)+0x146>
c0012351:	b8 03 40 00 00       	mov    eax,0x4003
c0012356:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001235a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001235d:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012363:	89 02                	mov    DWORD PTR [edx],eax
c0012365:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001236a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012370:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012376:	83 ec 08             	sub    esp,0x8
c0012379:	50                   	push   eax
c001237a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237e:	e8 bd fc ff ff       	call   c0012040 <VAS::setCPUSpecific(unsigned long)>
c0012383:	83 c4 10             	add    esp,0x10
c0012386:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001238a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001238d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0012392:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012398:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001239e:	83 e0 10             	and    eax,0x10
c00123a1:	84 c0                	test   al,al
c00123a3:	74 07                	je     c00123ac <VAS::VAS(bool)+0x19c>
c00123a5:	b8 00 01 00 00       	mov    eax,0x100
c00123aa:	eb 05                	jmp    c00123b1 <VAS::VAS(bool)+0x1a1>
c00123ac:	b8 00 00 00 00       	mov    eax,0x0
c00123b1:	09 c2                	or     edx,eax
c00123b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123ba:	05 fc 0f 00 00       	add    eax,0xffc
c00123bf:	83 ca 03             	or     edx,0x3
c00123c2:	89 10                	mov    DWORD PTR [eax],edx
c00123c4:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00123c9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123cf:	83 ec 0c             	sub    esp,0xc
c00123d2:	50                   	push   eax
c00123d3:	e8 90 19 00 00       	call   c0013d68 <Device::getName()>
c00123d8:	83 c4 10             	add    esp,0x10
c00123db:	83 ec 08             	sub    esp,0x8
c00123de:	68 67 85 02 c0       	push   0xc0028567
c00123e3:	50                   	push   eax
c00123e4:	e8 83 e3 fe ff       	call   c000076c <strcmp>
c00123e9:	83 c4 10             	add    esp,0x10
c00123ec:	85 c0                	test   eax,eax
c00123ee:	0f 94 c0             	sete   al
c00123f1:	84 c0                	test   al,al
c00123f3:	74 70                	je     c0012465 <VAS::VAS(bool)+0x255>
c00123f5:	e8 86 9d 00 00       	call   c001c180 <disableIRQs()>
c00123fa:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00123ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012405:	05 7c 09 00 00       	add    eax,0x97c
c001240a:	83 ec 0c             	sub    esp,0xc
c001240d:	50                   	push   eax
c001240e:	e8 29 cb ff ff       	call   c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012413:	83 c4 10             	add    esp,0x10
c0012416:	25 00 f0 ff ff       	and    eax,0xfffff000
c001241b:	89 c3                	mov    ebx,eax
c001241d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0012422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012428:	05 7c 09 00 00       	add    eax,0x97c
c001242d:	83 ec 0c             	sub    esp,0xc
c0012430:	50                   	push   eax
c0012431:	e8 06 cb ff ff       	call   c000ef3c <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012436:	83 c4 10             	add    esp,0x10
c0012439:	83 ec 08             	sub    esp,0x8
c001243c:	50                   	push   eax
c001243d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012441:	e8 9c f5 ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c0012446:	83 c4 10             	add    esp,0x10
c0012449:	8b 00                	mov    eax,DWORD PTR [eax]
c001244b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012450:	6a 11                	push   0x11
c0012452:	53                   	push   ebx
c0012453:	50                   	push   eax
c0012454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012458:	e8 0b f9 ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	e8 29 9d 00 00       	call   c001c18e <enableIRQs()>
c0012465:	90                   	nop
c0012466:	83 c4 28             	add    esp,0x28
c0012469:	5b                   	pop    ebx
c001246a:	c3                   	ret    

c001246b <mapVASFirstTime>:
c001246b:	55                   	push   ebp
c001246c:	57                   	push   edi
c001246d:	56                   	push   esi
c001246e:	53                   	push   ebx
c001246f:	83 ec 0c             	sub    esp,0xc
c0012472:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012477:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001247a:	4a                   	dec    edx
c001247b:	0f 84 8e 00 00 00    	je     c001250f <mapVASFirstTime+0xa4>
c0012481:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012484:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012487:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001248c:	c1 e5 15             	shl    ebp,0x15
c001248f:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c0012494:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001249a:	29 eb                	sub    ebx,ebp
c001249c:	29 ee                	sub    esi,ebp
c001249e:	e8 c7 d5 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00124a3:	83 ec 0c             	sub    esp,0xc
c00124a6:	68 03 04 00 00       	push   0x403
c00124ab:	6a 01                	push   0x1
c00124ad:	53                   	push   ebx
c00124ae:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00124b4:	50                   	push   eax
c00124b5:	57                   	push   edi
c00124b6:	e8 a1 fb ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124bb:	83 c4 20             	add    esp,0x20
c00124be:	39 f3                	cmp    ebx,esi
c00124c0:	75 dc                	jne    c001249e <mapVASFirstTime+0x33>
c00124c2:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00124c7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00124cc:	29 ee                	sub    esi,ebp
c00124ce:	29 e8                	sub    eax,ebp
c00124d0:	89 c5                	mov    ebp,eax
c00124d2:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00124d6:	19 db                	sbb    ebx,ebx
c00124d8:	e8 8d d5 ff ff       	call   c000fa6a <Phys::allocatePage()>
c00124dd:	83 e3 04             	and    ebx,0x4
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	81 c3 03 04 00 00    	add    ebx,0x403
c00124e9:	53                   	push   ebx
c00124ea:	6a 01                	push   0x1
c00124ec:	56                   	push   esi
c00124ed:	81 ee 00 10 00 00    	sub    esi,0x1000
c00124f3:	50                   	push   eax
c00124f4:	57                   	push   edi
c00124f5:	e8 62 fb ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124fa:	83 c4 20             	add    esp,0x20
c00124fd:	39 f5                	cmp    ebp,esi
c00124ff:	75 d1                	jne    c00124d2 <mapVASFirstTime+0x67>
c0012501:	0f 20 d8             	mov    eax,cr3
c0012504:	0f 22 d8             	mov    cr3,eax
c0012507:	83 c4 0c             	add    esp,0xc
c001250a:	5b                   	pop    ebx
c001250b:	5e                   	pop    esi
c001250c:	5f                   	pop    edi
c001250d:	5d                   	pop    ebp
c001250e:	c3                   	ret    
c001250f:	83 ec 0c             	sub    esp,0xc
c0012512:	68 75 85 02 c0       	push   0xc0028575
c0012517:	e8 71 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001251c:	83 c4 10             	add    esp,0x10
c001251f:	83 c4 0c             	add    esp,0xc
c0012522:	5b                   	pop    ebx
c0012523:	5e                   	pop    esi
c0012524:	5f                   	pop    edi
c0012525:	5d                   	pop    ebp
c0012526:	c3                   	ret    

c0012527 <__cxa_atexit>:
c0012527:	31 c0                	xor    eax,eax
c0012529:	c3                   	ret    

c001252a <__cxa_finalize>:
c001252a:	c3                   	ret    

c001252b <__stack_chk_fail>:
c001252b:	55                   	push   ebp
c001252c:	89 e5                	mov    ebp,esp
c001252e:	83 ec 14             	sub    esp,0x14
c0012531:	68 8e 85 02 c0       	push   0xc002858e
c0012536:	e8 52 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001253b:	58                   	pop    eax
c001253c:	5a                   	pop    edx
c001253d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012540:	68 de 85 02 c0       	push   0xc00285de
c0012545:	e8 43 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001254a:	59                   	pop    ecx
c001254b:	58                   	pop    eax
c001254c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001254f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012552:	68 de 85 02 c0       	push   0xc00285de
c0012557:	e8 31 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001255c:	5a                   	pop    edx
c001255d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012560:	59                   	pop    ecx
c0012561:	8b 00                	mov    eax,DWORD PTR [eax]
c0012563:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012566:	68 de 85 02 c0       	push   0xc00285de
c001256b:	e8 1d 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0012570:	5a                   	pop    edx
c0012571:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012574:	59                   	pop    ecx
c0012575:	8b 00                	mov    eax,DWORD PTR [eax]
c0012577:	8b 00                	mov    eax,DWORD PTR [eax]
c0012579:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001257c:	68 de 85 02 c0       	push   0xc00285de
c0012581:	e8 07 01 00 00       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0012586:	c7 04 24 e6 85 02 c0 	mov    DWORD PTR [esp],0xc00285e6
c001258d:	e8 c5 6b 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	c9                   	leave  
c0012596:	c3                   	ret    

c0012597 <__cxa_pure_virtual>:
c0012597:	83 ec 18             	sub    esp,0x18
c001259a:	68 fe 85 02 c0       	push   0xc00285fe
c001259f:	e8 b3 6b 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00125a4:	83 c4 1c             	add    esp,0x1c
c00125a7:	c3                   	ret    

c00125a8 <operator new[](unsigned long)>:
c00125a8:	e9 13 cf ff ff       	jmp    c000f4c0 <malloc>

c00125ad <operator delete(void*, unsigned long)>:
c00125ad:	e9 2e cf ff ff       	jmp    c000f4e0 <rfree>

c00125b2 <operator delete[](void*)>:
c00125b2:	e9 29 cf ff ff       	jmp    c000f4e0 <rfree>

c00125b7 <operator delete[](void*, unsigned long)>:
c00125b7:	e9 24 cf ff ff       	jmp    c000f4e0 <rfree>

c00125bc <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125bc:	57                   	push   edi
c00125bd:	b9 3f 00 00 00       	mov    ecx,0x3f
c00125c2:	56                   	push   esi
c00125c3:	be 14 86 02 c0       	mov    esi,0xc0028614
c00125c8:	53                   	push   ebx
c00125c9:	83 ec 40             	sub    esp,0x40
c00125cc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00125d0:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00125d4:	fc                   	cld    
c00125d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00125d7:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00125db:	83 f9 3e             	cmp    ecx,0x3e
c00125de:	7e 05                	jle    c00125e5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00125e0:	b9 3e 00 00 00       	mov    ecx,0x3e
c00125e5:	89 df                	mov    edi,ebx
c00125e7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00125eb:	eb 02                	jmp    c00125ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00125ed:	89 c7                	mov    edi,eax
c00125ef:	31 d2                	xor    edx,edx
c00125f1:	46                   	inc    esi
c00125f2:	89 f8                	mov    eax,edi
c00125f4:	f7 f1                	div    ecx
c00125f6:	39 cf                	cmp    edi,ecx
c00125f8:	73 f3                	jae    c00125ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00125fa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125fd:	eb 02                	jmp    c0012601 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00125ff:	89 c3                	mov    ebx,eax
c0012601:	31 d2                	xor    edx,edx
c0012603:	4e                   	dec    esi
c0012604:	89 d8                	mov    eax,ebx
c0012606:	f7 f1                	div    ecx
c0012608:	39 cb                	cmp    ebx,ecx
c001260a:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c001260e:	88 16                	mov    BYTE PTR [esi],dl
c0012610:	73 ed                	jae    c00125ff <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012612:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012616:	83 c4 40             	add    esp,0x40
c0012619:	5b                   	pop    ebx
c001261a:	5e                   	pop    esi
c001261b:	5f                   	pop    edi
c001261c:	c3                   	ret    

c001261d <Dbg::logc(char)>:
c001261d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012621:	ba fd 03 00 00       	mov    edx,0x3fd
c0012626:	ec                   	in     al,dx
c0012627:	a8 20                	test   al,0x20
c0012629:	74 fb                	je     c0012626 <Dbg::logc(char)+0x9>
c001262b:	ba f8 03 00 00       	mov    edx,0x3f8
c0012630:	88 c8                	mov    al,cl
c0012632:	ee                   	out    dx,al
c0012633:	c3                   	ret    

c0012634 <Dbg::logs(char*)>:
c0012634:	53                   	push   ebx
c0012635:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012639:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001263c:	84 c0                	test   al,al
c001263e:	74 0f                	je     c001264f <Dbg::logs(char*)+0x1b>
c0012640:	50                   	push   eax
c0012641:	43                   	inc    ebx
c0012642:	e8 d6 ff ff ff       	call   c001261d <Dbg::logc(char)>
c0012647:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001264a:	5a                   	pop    edx
c001264b:	84 c0                	test   al,al
c001264d:	75 f1                	jne    c0012640 <Dbg::logs(char*)+0xc>
c001264f:	5b                   	pop    ebx
c0012650:	c3                   	ret    

c0012651 <Dbg::logWriteInt(unsigned int)>:
c0012651:	83 ec 10             	sub    esp,0x10
c0012654:	6a 0a                	push   0xa
c0012656:	8d 44 24 08          	lea    eax,[esp+0x8]
c001265a:	50                   	push   eax
c001265b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265f:	e8 58 ff ff ff       	call   c00125bc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012664:	50                   	push   eax
c0012665:	e8 ca ff ff ff       	call   c0012634 <Dbg::logs(char*)>
c001266a:	83 c4 20             	add    esp,0x20
c001266d:	c3                   	ret    

c001266e <Dbg::logWriteIntBase(unsigned int, int)>:
c001266e:	83 ec 10             	sub    esp,0x10
c0012671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012675:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012679:	50                   	push   eax
c001267a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001267e:	e8 39 ff ff ff       	call   c00125bc <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012683:	50                   	push   eax
c0012684:	e8 ab ff ff ff       	call   c0012634 <Dbg::logs(char*)>
c0012689:	83 c4 20             	add    esp,0x20
c001268c:	c3                   	ret    

c001268d <Dbg::kprintf(char const*, ...)>:
c001268d:	55                   	push   ebp
c001268e:	57                   	push   edi
c001268f:	56                   	push   esi
c0012690:	53                   	push   ebx
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012698:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001269c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126a0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126a3:	84 c0                	test   al,al
c00126a5:	74 4a                	je     c00126f1 <Dbg::kprintf(char const*, ...)+0x64>
c00126a7:	31 db                	xor    ebx,ebx
c00126a9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126ac:	3c 25                	cmp    al,0x25
c00126ae:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126b1:	0f 85 e4 00 00 00    	jne    c001279b <Dbg::kprintf(char const*, ...)+0x10e>
c00126b7:	83 c3 02             	add    ebx,0x2
c00126ba:	8a 07                	mov    al,BYTE PTR [edi]
c00126bc:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126bf:	83 e8 25             	sub    eax,0x25
c00126c2:	3c 53                	cmp    al,0x53
c00126c4:	0f 87 ba 00 00 00    	ja     c0012784 <Dbg::kprintf(char const*, ...)+0xf7>
c00126ca:	0f b6 c0             	movzx  eax,al
c00126cd:	ff 24 85 54 86 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd79ac]
c00126d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126d8:	89 c8                	mov    eax,ecx
c00126da:	83 c1 04             	add    ecx,0x4
c00126dd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00126e1:	ff 30                	push   DWORD PTR [eax]
c00126e3:	e8 4c ff ff ff       	call   c0012634 <Dbg::logs(char*)>
c00126e8:	58                   	pop    eax
c00126e9:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00126ed:	84 c0                	test   al,al
c00126ef:	75 b8                	jne    c00126a9 <Dbg::kprintf(char const*, ...)+0x1c>
c00126f1:	83 c4 0c             	add    esp,0xc
c00126f4:	5b                   	pop    ebx
c00126f5:	5e                   	pop    esi
c00126f6:	5f                   	pop    edi
c00126f7:	5d                   	pop    ebp
c00126f8:	c3                   	ret    
c00126f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126fd:	89 d0                	mov    eax,edx
c00126ff:	83 c2 04             	add    edx,0x4
c0012702:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012706:	ff 30                	push   DWORD PTR [eax]
c0012708:	e8 44 ff ff ff       	call   c0012651 <Dbg::logWriteInt(unsigned int)>
c001270d:	58                   	pop    eax
c001270e:	eb d9                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012710:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012714:	89 d0                	mov    eax,edx
c0012716:	83 c2 04             	add    edx,0x4
c0012719:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001271c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012720:	50                   	push   eax
c0012721:	e8 f7 fe ff ff       	call   c001261d <Dbg::logc(char)>
c0012726:	58                   	pop    eax
c0012727:	eb c0                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012729:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001272d:	89 c8                	mov    eax,ecx
c001272f:	83 c1 04             	add    ecx,0x4
c0012732:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012736:	ff 30                	push   DWORD PTR [eax]
c0012738:	e8 14 ff ff ff       	call   c0012651 <Dbg::logWriteInt(unsigned int)>
c001273d:	5f                   	pop    edi
c001273e:	eb a9                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012740:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012744:	89 c8                	mov    eax,ecx
c0012746:	83 c1 04             	add    ecx,0x4
c0012749:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001274d:	6a 10                	push   0x10
c001274f:	ff 30                	push   DWORD PTR [eax]
c0012751:	e8 18 ff ff ff       	call   c001266e <Dbg::logWriteIntBase(unsigned int, int)>
c0012756:	59                   	pop    ecx
c0012757:	5f                   	pop    edi
c0012758:	eb 8f                	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c001275a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001275e:	89 d0                	mov    eax,edx
c0012760:	83 c2 08             	add    edx,0x8
c0012763:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012767:	6a 10                	push   0x10
c0012769:	ff 30                	push   DWORD PTR [eax]
c001276b:	e8 fe fe ff ff       	call   c001266e <Dbg::logWriteIntBase(unsigned int, int)>
c0012770:	58                   	pop    eax
c0012771:	5a                   	pop    edx
c0012772:	e9 72 ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012777:	6a 25                	push   0x25
c0012779:	e8 9f fe ff ff       	call   c001261d <Dbg::logc(char)>
c001277e:	58                   	pop    eax
c001277f:	e9 65 ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c0012784:	6a 25                	push   0x25
c0012786:	e8 92 fe ff ff       	call   c001261d <Dbg::logc(char)>
c001278b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001278e:	50                   	push   eax
c001278f:	e8 89 fe ff ff       	call   c001261d <Dbg::logc(char)>
c0012794:	5a                   	pop    edx
c0012795:	59                   	pop    ecx
c0012796:	e9 4e ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c001279b:	50                   	push   eax
c001279c:	89 eb                	mov    ebx,ebp
c001279e:	e8 7a fe ff ff       	call   c001261d <Dbg::logc(char)>
c00127a3:	89 fd                	mov    ebp,edi
c00127a5:	58                   	pop    eax
c00127a6:	e9 3e ff ff ff       	jmp    c00126e9 <Dbg::kprintf(char const*, ...)+0x5c>
c00127ab:	90                   	nop

c00127ac <File::read(unsigned long long, void*, int*)>:
c00127ac:	53                   	push   ebx
c00127ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127bc:	3c 19                	cmp    al,0x19
c00127be:	77 35                	ja     c00127f5 <File::read(unsigned long long, void*, int*)+0x49>
c00127c0:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c00127c7:	85 c0                	test   eax,eax
c00127c9:	74 2a                	je     c00127f5 <File::read(unsigned long long, void*, int*)+0x49>
c00127cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127d1:	85 c0                	test   eax,eax
c00127d3:	74 20                	je     c00127f5 <File::read(unsigned long long, void*, int*)+0x49>
c00127d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127d9:	74 21                	je     c00127fc <File::read(unsigned long long, void*, int*)+0x50>
c00127db:	8b 08                	mov    ecx,DWORD PTR [eax]
c00127dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00127e1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00127e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ef:	5b                   	pop    ebx
c00127f0:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00127f3:	ff e0                	jmp    eax
c00127f5:	b8 0b 00 00 00       	mov    eax,0xb
c00127fa:	eb 05                	jmp    c0012801 <File::read(unsigned long long, void*, int*)+0x55>
c00127fc:	b8 05 00 00 00       	mov    eax,0x5
c0012801:	5b                   	pop    ebx
c0012802:	c3                   	ret    
c0012803:	90                   	nop

c0012804 <File::write(unsigned long long, void*, int*)>:
c0012804:	53                   	push   ebx
c0012805:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012809:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001280d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012814:	3c 19                	cmp    al,0x19
c0012816:	77 35                	ja     c001284d <File::write(unsigned long long, void*, int*)+0x49>
c0012818:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c001281f:	85 c0                	test   eax,eax
c0012821:	74 2a                	je     c001284d <File::write(unsigned long long, void*, int*)+0x49>
c0012823:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012829:	85 c0                	test   eax,eax
c001282b:	74 20                	je     c001284d <File::write(unsigned long long, void*, int*)+0x49>
c001282d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012831:	74 21                	je     c0012854 <File::write(unsigned long long, void*, int*)+0x50>
c0012833:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012835:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012839:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001283f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012843:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012847:	5b                   	pop    ebx
c0012848:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001284b:	ff e0                	jmp    eax
c001284d:	b8 0b 00 00 00       	mov    eax,0xb
c0012852:	eb 05                	jmp    c0012859 <File::write(unsigned long long, void*, int*)+0x55>
c0012854:	b8 05 00 00 00       	mov    eax,0x5
c0012859:	5b                   	pop    ebx
c001285a:	c3                   	ret    
c001285b:	90                   	nop

c001285c <Directory::read(unsigned long long, void*, int*)>:
c001285c:	53                   	push   ebx
c001285d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012861:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012865:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001286c:	3c 19                	cmp    al,0x19
c001286e:	77 35                	ja     c00128a5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012870:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c0012877:	85 c0                	test   eax,eax
c0012879:	74 2a                	je     c00128a5 <Directory::read(unsigned long long, void*, int*)+0x49>
c001287b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012881:	85 c0                	test   eax,eax
c0012883:	74 20                	je     c00128a5 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012885:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012889:	74 21                	je     c00128ac <Directory::read(unsigned long long, void*, int*)+0x50>
c001288b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001288d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012891:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012897:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001289b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001289f:	5b                   	pop    ebx
c00128a0:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128a3:	ff e0                	jmp    eax
c00128a5:	b8 0b 00 00 00       	mov    eax,0xb
c00128aa:	eb 05                	jmp    c00128b1 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128ac:	b8 05 00 00 00       	mov    eax,0x5
c00128b1:	5b                   	pop    ebx
c00128b2:	c3                   	ret    
c00128b3:	90                   	nop

c00128b4 <Directory::write(unsigned long long, void*, int*)>:
c00128b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128b8:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128bf:	b8 0b 00 00 00       	mov    eax,0xb
c00128c4:	80 fa 19             	cmp    dl,0x19
c00128c7:	77 18                	ja     c00128e1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128c9:	8b 14 95 80 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c80]
c00128d0:	85 d2                	test   edx,edx
c00128d2:	74 0d                	je     c00128e1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128d4:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00128db:	19 c0                	sbb    eax,eax
c00128dd:	83 e0 0a             	and    eax,0xa
c00128e0:	40                   	inc    eax
c00128e1:	c3                   	ret    

c00128e2 <File::isAtty()>:
c00128e2:	31 c0                	xor    eax,eax
c00128e4:	c3                   	ret    
c00128e5:	90                   	nop

c00128e6 <Directory::isAtty()>:
c00128e6:	31 c0                	xor    eax,eax
c00128e8:	c3                   	ret    
c00128e9:	90                   	nop

c00128ea <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00128ea:	b8 0a 00 00 00       	mov    eax,0xa
c00128ef:	c3                   	ret    

c00128f0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00128f0:	b8 0a 00 00 00       	mov    eax,0xa
c00128f5:	c3                   	ret    

c00128f6 <File::~File()>:
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	ba 10 88 02 c0       	mov    edx,0xc0028810
c00128fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012902:	89 10                	mov    DWORD PTR [eax],edx
c0012904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012908:	83 ec 0c             	sub    esp,0xc
c001290b:	50                   	push   eax
c001290c:	e8 2b eb ff ff       	call   c001143c <UnixFile::~UnixFile()>
c0012911:	83 c4 10             	add    esp,0x10
c0012914:	90                   	nop
c0012915:	83 c4 0c             	add    esp,0xc
c0012918:	c3                   	ret    
c0012919:	90                   	nop

c001291a <File::~File()>:
c001291a:	83 ec 0c             	sub    esp,0xc
c001291d:	83 ec 0c             	sub    esp,0xc
c0012920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012924:	e8 cd ff ff ff       	call   c00128f6 <File::~File()>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	68 14 01 00 00       	push   0x114
c0012934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012938:	e8 70 fc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	83 c4 0c             	add    esp,0xc
c0012943:	c3                   	ret    

c0012944 <Directory::~Directory()>:
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	ba 2c 88 02 c0       	mov    edx,0xc002882c
c001294c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012950:	89 10                	mov    DWORD PTR [eax],edx
c0012952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012956:	83 ec 0c             	sub    esp,0xc
c0012959:	50                   	push   eax
c001295a:	e8 dd ea ff ff       	call   c001143c <UnixFile::~UnixFile()>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	90                   	nop
c0012963:	83 c4 0c             	add    esp,0xc
c0012966:	c3                   	ret    
c0012967:	90                   	nop

c0012968 <Directory::~Directory()>:
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	83 ec 0c             	sub    esp,0xc
c001296e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012972:	e8 cd ff ff ff       	call   c0012944 <Directory::~Directory()>
c0012977:	83 c4 10             	add    esp,0x10
c001297a:	83 ec 08             	sub    esp,0x8
c001297d:	68 14 01 00 00       	push   0x114
c0012982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012986:	e8 22 fc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	83 c4 0c             	add    esp,0xc
c0012991:	c3                   	ret    

c0012992 <Filesystem::Filesystem()>:
c0012992:	ba ac 87 02 c0       	mov    edx,0xc00287ac
c0012997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001299b:	89 10                	mov    DWORD PTR [eax],edx
c001299d:	8b 15 e8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bee8
c00129a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ae:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00129b3:	90                   	nop
c00129b4:	c3                   	ret    
c00129b5:	90                   	nop

c00129b6 <Filesystem::~Filesystem()>:
c00129b6:	ba ac 87 02 c0       	mov    edx,0xc00287ac
c00129bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129bf:	89 10                	mov    DWORD PTR [eax],edx
c00129c1:	90                   	nop
c00129c2:	c3                   	ret    
c00129c3:	90                   	nop

c00129c4 <Filesystem::~Filesystem()>:
c00129c4:	83 ec 0c             	sub    esp,0xc
c00129c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129cb:	e8 e6 ff ff ff       	call   c00129b6 <Filesystem::~Filesystem()>
c00129d0:	83 c4 04             	add    esp,0x4
c00129d3:	83 ec 08             	sub    esp,0x8
c00129d6:	6a 08                	push   0x8
c00129d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129dc:	e8 cc fb ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	83 c4 0c             	add    esp,0xc
c00129e7:	c3                   	ret    

c00129e8 <initVFS()>:
c00129e8:	83 ec 18             	sub    esp,0x18
c00129eb:	6a 08                	push   0x8
c00129ed:	e8 ce ca ff ff       	call   c000f4c0 <malloc>
c00129f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00129f5:	e8 3e c9 00 00       	call   c001f338 <FAT::FAT()>
c00129fa:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a01:	e8 ba ca ff ff       	call   c000f4c0 <malloc>
c0012a06:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a09:	e8 a0 db 00 00       	call   c00205ae <ISO9660::ISO9660()>
c0012a0e:	83 c4 1c             	add    esp,0x1c
c0012a11:	c3                   	ret    

c0012a12 <standardiseFiles(char*, char const*, char const*)>:
c0012a12:	55                   	push   ebp
c0012a13:	57                   	push   edi
c0012a14:	56                   	push   esi
c0012a15:	53                   	push   ebx
c0012a16:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a1c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a23:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a2a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a31:	68 00 04 00 00       	push   0x400
c0012a36:	6a 00                	push   0x0
c0012a38:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a3c:	56                   	push   esi
c0012a3d:	e8 3a dc fe ff       	call   c000067c <memset>
c0012a42:	83 c4 10             	add    esp,0x10
c0012a45:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a49:	75 0b                	jne    c0012a56 <standardiseFiles(char*, char const*, char const*)+0x44>
c0012a4b:	50                   	push   eax
c0012a4c:	50                   	push   eax
c0012a4d:	57                   	push   edi
c0012a4e:	56                   	push   esi
c0012a4f:	e8 c7 dc fe ff       	call   c000071b <strcpy>
c0012a54:	eb 41                	jmp    c0012a97 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012a56:	8a 07                	mov    al,BYTE PTR [edi]
c0012a58:	3c 5c                	cmp    al,0x5c
c0012a5a:	74 04                	je     c0012a60 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012a5c:	3c 2f                	cmp    al,0x2f
c0012a5e:	75 18                	jne    c0012a78 <standardiseFiles(char*, char const*, char const*)+0x66>
c0012a60:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012a63:	3c 60                	cmp    al,0x60
c0012a65:	7e 03                	jle    c0012a6a <standardiseFiles(char*, char const*, char const*)+0x58>
c0012a67:	83 e8 20             	sub    eax,0x20
c0012a6a:	88 04 24             	mov    BYTE PTR [esp],al
c0012a6d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012a74:	50                   	push   eax
c0012a75:	50                   	push   eax
c0012a76:	eb 18                	jmp    c0012a90 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012a78:	50                   	push   eax
c0012a79:	50                   	push   eax
c0012a7a:	55                   	push   ebp
c0012a7b:	56                   	push   esi
c0012a7c:	e8 9a dc fe ff       	call   c000071b <strcpy>
c0012a81:	5a                   	pop    edx
c0012a82:	59                   	pop    ecx
c0012a83:	68 89 9b 02 c0       	push   0xc0029b89
c0012a88:	56                   	push   esi
c0012a89:	e8 44 dd fe ff       	call   c00007d2 <strcat>
c0012a8e:	5d                   	pop    ebp
c0012a8f:	58                   	pop    eax
c0012a90:	57                   	push   edi
c0012a91:	56                   	push   esi
c0012a92:	e8 3b dd fe ff       	call   c00007d2 <strcat>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012a9d:	3c 60                	cmp    al,0x60
c0012a9f:	7e 03                	jle    c0012aa4 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012aa1:	83 e8 20             	sub    eax,0x20
c0012aa4:	88 04 24             	mov    BYTE PTR [esp],al
c0012aa7:	88 03                	mov    BYTE PTR [ebx],al
c0012aa9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ab0:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012ab6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012aba:	bf 03 00 00 00       	mov    edi,0x3
c0012abf:	b8 03 00 00 00       	mov    eax,0x3
c0012ac4:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ac7:	84 d2                	test   dl,dl
c0012ac9:	0f 84 91 00 00 00    	je     c0012b60 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012acf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012ad2:	80 fa 5c             	cmp    dl,0x5c
c0012ad5:	74 05                	je     c0012adc <standardiseFiles(char*, char const*, char const*)+0xca>
c0012ad7:	80 fa 2f             	cmp    dl,0x2f
c0012ada:	75 12                	jne    c0012aee <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012adc:	89 c5                	mov    ebp,eax
c0012ade:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ae3:	74 09                	je     c0012aee <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ae5:	40                   	inc    eax
c0012ae6:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012aea:	89 cf                	mov    edi,ecx
c0012aec:	eb d6                	jmp    c0012ac4 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012aee:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012af3:	75 5b                	jne    c0012b50 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012af5:	80 fa 2e             	cmp    dl,0x2e
c0012af8:	75 56                	jne    c0012b50 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012afa:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012afe:	74 19                	je     c0012b19 <standardiseFiles(char*, char const*, char const*)+0x107>
c0012b00:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b05:	74 53                	je     c0012b5a <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b07:	89 f9                	mov    ecx,edi
c0012b09:	41                   	inc    ecx
c0012b0a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b0d:	80 fa 2f             	cmp    dl,0x2f
c0012b10:	74 f7                	je     c0012b09 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b12:	80 fa 5c             	cmp    dl,0x5c
c0012b15:	74 f2                	je     c0012b09 <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b17:	eb d1                	jmp    c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b19:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b1e:	74 3a                	je     c0012b5a <standardiseFiles(char*, char const*, char const*)+0x148>
c0012b20:	83 f8 03             	cmp    eax,0x3
c0012b23:	74 c5                	je     c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b25:	41                   	inc    ecx
c0012b26:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b29:	80 fa 2f             	cmp    dl,0x2f
c0012b2c:	74 f7                	je     c0012b25 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b2e:	80 fa 5c             	cmp    dl,0x5c
c0012b31:	74 f2                	je     c0012b25 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012b33:	48                   	dec    eax
c0012b34:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b38:	75 06                	jne    c0012b40 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b3a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b3e:	eb f3                	jmp    c0012b33 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012b40:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b44:	74 07                	je     c0012b4d <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b4a:	48                   	dec    eax
c0012b4b:	eb f3                	jmp    c0012b40 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b4d:	40                   	inc    eax
c0012b4e:	eb 9a                	jmp    c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b50:	80 fa 2f             	cmp    dl,0x2f
c0012b53:	74 95                	je     c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b55:	80 fa 5c             	cmp    dl,0x5c
c0012b58:	74 90                	je     c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b5a:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012b5d:	40                   	inc    eax
c0012b5e:	eb 8a                	jmp    c0012aea <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b60:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b64:	83 ec 0c             	sub    esp,0xc
c0012b67:	53                   	push   ebx
c0012b68:	e8 2c db fe ff       	call   c0000699 <strlen>
c0012b6d:	83 c4 10             	add    esp,0x10
c0012b70:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012b75:	75 26                	jne    c0012b9d <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012b77:	83 ec 0c             	sub    esp,0xc
c0012b7a:	53                   	push   ebx
c0012b7b:	e8 19 db fe ff       	call   c0000699 <strlen>
c0012b80:	83 c4 10             	add    esp,0x10
c0012b83:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012b88:	74 26                	je     c0012bb0 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	53                   	push   ebx
c0012b8e:	e8 06 db fe ff       	call   c0000699 <strlen>
c0012b93:	83 c4 10             	add    esp,0x10
c0012b96:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012b9b:	eb c7                	jmp    c0012b64 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012b9d:	83 ec 0c             	sub    esp,0xc
c0012ba0:	53                   	push   ebx
c0012ba1:	e8 f3 da fe ff       	call   c0000699 <strlen>
c0012ba6:	83 c4 10             	add    esp,0x10
c0012ba9:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012bae:	74 c7                	je     c0012b77 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012bb0:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012bb6:	5b                   	pop    ebx
c0012bb7:	5e                   	pop    esi
c0012bb8:	5f                   	pop    edi
c0012bb9:	5d                   	pop    ebp
c0012bba:	c3                   	ret    
c0012bbb:	90                   	nop

c0012bbc <File::File(char const*, Process*)>:
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc3:	83 ec 08             	sub    esp,0x8
c0012bc6:	6a 00                	push   0x0
c0012bc8:	50                   	push   eax
c0012bc9:	e8 8c e6 ff ff       	call   c001125a <UnixFile::UnixFile(int)>
c0012bce:	83 c4 10             	add    esp,0x10
c0012bd1:	ba 10 88 02 c0       	mov    edx,0xc0028810
c0012bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bda:	89 10                	mov    DWORD PTR [eax],edx
c0012bdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012be0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bea:	83 c0 0d             	add    eax,0xd
c0012bed:	83 ec 04             	sub    esp,0x4
c0012bf0:	52                   	push   edx
c0012bf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bf5:	50                   	push   eax
c0012bf6:	e8 17 fe ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c0012bfb:	83 c4 10             	add    esp,0x10
c0012bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c02:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c05:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c16:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c1a:	90                   	nop
c0012c1b:	83 c4 0c             	add    esp,0xc
c0012c1e:	c3                   	ret    
c0012c1f:	90                   	nop

c0012c20 <File::open(FileOpenMode)>:
c0012c20:	53                   	push   ebx
c0012c21:	b8 0b 00 00 00       	mov    eax,0xb
c0012c26:	83 ec 08             	sub    esp,0x8
c0012c29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c2d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c34:	80 fa 19             	cmp    dl,0x19
c0012c37:	77 40                	ja     c0012c79 <File::open(FileOpenMode)+0x59>
c0012c39:	8b 14 95 80 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c80]
c0012c40:	85 d2                	test   edx,edx
c0012c42:	74 35                	je     c0012c79 <File::open(FileOpenMode)+0x59>
c0012c44:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c4a:	85 d2                	test   edx,edx
c0012c4c:	74 2b                	je     c0012c79 <File::open(FileOpenMode)+0x59>
c0012c4e:	b8 06 00 00 00       	mov    eax,0x6
c0012c53:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012c57:	75 20                	jne    c0012c79 <File::open(FileOpenMode)+0x59>
c0012c59:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c5b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c65:	51                   	push   ecx
c0012c66:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012c69:	51                   	push   ecx
c0012c6a:	52                   	push   edx
c0012c6b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	85 c0                	test   eax,eax
c0012c73:	75 04                	jne    c0012c79 <File::open(FileOpenMode)+0x59>
c0012c75:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012c79:	83 c4 08             	add    esp,0x8
c0012c7c:	5b                   	pop    ebx
c0012c7d:	c3                   	ret    

c0012c7e <File::close()>:
c0012c7e:	53                   	push   ebx
c0012c7f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c8b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c92:	80 fa 19             	cmp    dl,0x19
c0012c95:	77 41                	ja     c0012cd8 <File::close()+0x5a>
c0012c97:	8b 1c 95 80 c3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3c80]
c0012c9e:	85 db                	test   ebx,ebx
c0012ca0:	74 36                	je     c0012cd8 <File::close()+0x5a>
c0012ca2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ca9:	74 2d                	je     c0012cd8 <File::close()+0x5a>
c0012cab:	b8 05 00 00 00       	mov    eax,0x5
c0012cb0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012cb4:	74 22                	je     c0012cd8 <File::close()+0x5a>
c0012cb6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012cba:	8b 04 95 80 c3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3c80]
c0012cc1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cc7:	53                   	push   ebx
c0012cc8:	53                   	push   ebx
c0012cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ccb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012cd1:	50                   	push   eax
c0012cd2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012cd5:	83 c4 10             	add    esp,0x10
c0012cd8:	83 c4 08             	add    esp,0x8
c0012cdb:	5b                   	pop    ebx
c0012cdc:	c3                   	ret    
c0012cdd:	90                   	nop

c0012cde <File::seek(unsigned long long)>:
c0012cde:	56                   	push   esi
c0012cdf:	53                   	push   ebx
c0012ce0:	b8 0b 00 00 00       	mov    eax,0xb
c0012ce5:	51                   	push   ecx
c0012ce6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012cee:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012cf5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cf9:	80 fa 19             	cmp    dl,0x19
c0012cfc:	77 31                	ja     c0012d2f <File::seek(unsigned long long)+0x51>
c0012cfe:	8b 14 95 80 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c80]
c0012d05:	85 d2                	test   edx,edx
c0012d07:	74 26                	je     c0012d2f <File::seek(unsigned long long)+0x51>
c0012d09:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d0f:	85 d2                	test   edx,edx
c0012d11:	74 1c                	je     c0012d2f <File::seek(unsigned long long)+0x51>
c0012d13:	b8 05 00 00 00       	mov    eax,0x5
c0012d18:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d1c:	74 11                	je     c0012d2f <File::seek(unsigned long long)+0x51>
c0012d1e:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d20:	53                   	push   ebx
c0012d21:	51                   	push   ecx
c0012d22:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d28:	52                   	push   edx
c0012d29:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d2c:	83 c4 10             	add    esp,0x10
c0012d2f:	5a                   	pop    edx
c0012d30:	5b                   	pop    ebx
c0012d31:	5e                   	pop    esi
c0012d32:	c3                   	ret    
c0012d33:	90                   	nop

c0012d34 <File::tell(unsigned long long*)>:
c0012d34:	83 ec 0c             	sub    esp,0xc
c0012d37:	b8 0b 00 00 00       	mov    eax,0xb
c0012d3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d47:	80 fa 19             	cmp    dl,0x19
c0012d4a:	77 34                	ja     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d4c:	8b 14 95 80 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c80]
c0012d53:	85 d2                	test   edx,edx
c0012d55:	74 29                	je     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d57:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d5d:	85 d2                	test   edx,edx
c0012d5f:	74 1f                	je     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d61:	b8 05 00 00 00       	mov    eax,0x5
c0012d66:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d6a:	74 14                	je     c0012d80 <File::tell(unsigned long long*)+0x4c>
c0012d6c:	50                   	push   eax
c0012d6d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d73:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d79:	52                   	push   edx
c0012d7a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012d7d:	83 c4 10             	add    esp,0x10
c0012d80:	83 c4 0c             	add    esp,0xc
c0012d83:	c3                   	ret    

c0012d84 <File::rewind()>:
c0012d84:	83 ec 10             	sub    esp,0x10
c0012d87:	6a 00                	push   0x0
c0012d89:	6a 00                	push   0x0
c0012d8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d8f:	e8 4a ff ff ff       	call   c0012cde <File::seek(unsigned long long)>
c0012d94:	83 c4 1c             	add    esp,0x1c
c0012d97:	c3                   	ret    

c0012d98 <File::unlink()>:
c0012d98:	83 ec 0c             	sub    esp,0xc
c0012d9b:	b8 0b 00 00 00       	mov    eax,0xb
c0012da0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012da4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dab:	80 f9 19             	cmp    cl,0x19
c0012dae:	77 2f                	ja     c0012ddf <File::unlink()+0x47>
c0012db0:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c0012db7:	85 c9                	test   ecx,ecx
c0012db9:	74 24                	je     c0012ddf <File::unlink()+0x47>
c0012dbb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dc1:	85 c9                	test   ecx,ecx
c0012dc3:	74 1a                	je     c0012ddf <File::unlink()+0x47>
c0012dc5:	b8 06 00 00 00       	mov    eax,0x6
c0012dca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012dce:	75 0f                	jne    c0012ddf <File::unlink()+0x47>
c0012dd0:	83 c2 0d             	add    edx,0xd
c0012dd3:	50                   	push   eax
c0012dd4:	50                   	push   eax
c0012dd5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dd7:	52                   	push   edx
c0012dd8:	51                   	push   ecx
c0012dd9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	83 c4 0c             	add    esp,0xc
c0012de2:	c3                   	ret    
c0012de3:	90                   	nop

c0012de4 <File::rename(char const*)>:
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012df0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012df7:	80 f9 19             	cmp    cl,0x19
c0012dfa:	77 32                	ja     c0012e2e <File::rename(char const*)+0x4a>
c0012dfc:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c0012e03:	85 c9                	test   ecx,ecx
c0012e05:	74 27                	je     c0012e2e <File::rename(char const*)+0x4a>
c0012e07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e0d:	85 c9                	test   ecx,ecx
c0012e0f:	74 1d                	je     c0012e2e <File::rename(char const*)+0x4a>
c0012e11:	b8 06 00 00 00       	mov    eax,0x6
c0012e16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e1a:	75 12                	jne    c0012e2e <File::rename(char const*)+0x4a>
c0012e1c:	83 c2 0d             	add    edx,0xd
c0012e1f:	50                   	push   eax
c0012e20:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e26:	52                   	push   edx
c0012e27:	51                   	push   ecx
c0012e28:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e2b:	83 c4 10             	add    esp,0x10
c0012e2e:	83 c4 0c             	add    esp,0xc
c0012e31:	c3                   	ret    

c0012e32 <File::chfatattr(unsigned char, unsigned char)>:
c0012e32:	57                   	push   edi
c0012e33:	b8 0b 00 00 00       	mov    eax,0xb
c0012e38:	56                   	push   esi
c0012e39:	53                   	push   ebx
c0012e3a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e3e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012e4d:	80 f9 19             	cmp    cl,0x19
c0012e50:	77 37                	ja     c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e52:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c0012e59:	85 c9                	test   ecx,ecx
c0012e5b:	74 2c                	je     c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e63:	85 c9                	test   ecx,ecx
c0012e65:	74 22                	je     c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e67:	b8 06 00 00 00       	mov    eax,0x6
c0012e6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e70:	75 17                	jne    c0012e89 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012e72:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012e74:	89 f0                	mov    eax,esi
c0012e76:	83 c2 0d             	add    edx,0xd
c0012e79:	0f b6 f0             	movzx  esi,al
c0012e7c:	0f b6 db             	movzx  ebx,bl
c0012e7f:	56                   	push   esi
c0012e80:	53                   	push   ebx
c0012e81:	52                   	push   edx
c0012e82:	51                   	push   ecx
c0012e83:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012e86:	83 c4 10             	add    esp,0x10
c0012e89:	5b                   	pop    ebx
c0012e8a:	5e                   	pop    esi
c0012e8b:	5f                   	pop    edi
c0012e8c:	c3                   	ret    
c0012e8d:	90                   	nop

c0012e8e <File::exists()>:
c0012e8e:	83 ec 0c             	sub    esp,0xc
c0012e91:	31 c0                	xor    eax,eax
c0012e93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e97:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9e:	80 f9 19             	cmp    cl,0x19
c0012ea1:	77 24                	ja     c0012ec7 <File::exists()+0x39>
c0012ea3:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c0012eaa:	85 c9                	test   ecx,ecx
c0012eac:	74 19                	je     c0012ec7 <File::exists()+0x39>
c0012eae:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb4:	85 c9                	test   ecx,ecx
c0012eb6:	74 0f                	je     c0012ec7 <File::exists()+0x39>
c0012eb8:	83 c2 0d             	add    edx,0xd
c0012ebb:	50                   	push   eax
c0012ebc:	50                   	push   eax
c0012ebd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ebf:	52                   	push   edx
c0012ec0:	51                   	push   ecx
c0012ec1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	83 c4 0c             	add    esp,0xc
c0012eca:	c3                   	ret    
c0012ecb:	90                   	nop

c0012ecc <File::stat(unsigned long long*, bool*)>:
c0012ecc:	56                   	push   esi
c0012ecd:	53                   	push   ebx
c0012ece:	50                   	push   eax
c0012ecf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012edc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ee7:	80 f9 19             	cmp    cl,0x19
c0012eea:	77 3d                	ja     c0012f29 <File::stat(unsigned long long*, bool*)+0x5d>
c0012eec:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c0012ef3:	85 c9                	test   ecx,ecx
c0012ef5:	74 32                	je     c0012f29 <File::stat(unsigned long long*, bool*)+0x5d>
c0012ef7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012efd:	85 c9                	test   ecx,ecx
c0012eff:	74 28                	je     c0012f29 <File::stat(unsigned long long*, bool*)+0x5d>
c0012f01:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f07:	74 13                	je     c0012f1c <File::stat(unsigned long long*, bool*)+0x50>
c0012f09:	83 ec 04             	sub    esp,0x4
c0012f0c:	56                   	push   esi
c0012f0d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f13:	51                   	push   ecx
c0012f14:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f17:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f1a:	eb 0a                	jmp    c0012f26 <File::stat(unsigned long long*, bool*)+0x5a>
c0012f1c:	53                   	push   ebx
c0012f1d:	83 c2 0d             	add    edx,0xd
c0012f20:	56                   	push   esi
c0012f21:	52                   	push   edx
c0012f22:	51                   	push   ecx
c0012f23:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	5a                   	pop    edx
c0012f2a:	5b                   	pop    ebx
c0012f2b:	5e                   	pop    esi
c0012f2c:	c3                   	ret    

c0012f2d <getcwd(Process*, char*, int)>:
c0012f2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f31:	31 c0                	xor    eax,eax
c0012f33:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012f36:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012f3a:	7d 15                	jge    c0012f51 <getcwd(Process*, char*, int)+0x24>
c0012f3c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f40:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012f47:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012f4a:	84 c9                	test   cl,cl
c0012f4c:	74 06                	je     c0012f54 <getcwd(Process*, char*, int)+0x27>
c0012f4e:	40                   	inc    eax
c0012f4f:	eb e2                	jmp    c0012f33 <getcwd(Process*, char*, int)+0x6>
c0012f51:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012f54:	31 c0                	xor    eax,eax
c0012f56:	c3                   	ret    

c0012f57 <setcwd(Process*, char*)>:
c0012f57:	55                   	push   ebp
c0012f58:	57                   	push   edi
c0012f59:	56                   	push   esi
c0012f5a:	53                   	push   ebx
c0012f5b:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f61:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f68:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f6e:	57                   	push   edi
c0012f6f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012f76:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012f7a:	56                   	push   esi
c0012f7b:	e8 92 fa ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c0012f80:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f83:	e8 11 d7 fe ff       	call   c0000699 <strlen>
c0012f88:	83 c4 10             	add    esp,0x10
c0012f8b:	83 f8 02             	cmp    eax,0x2
c0012f8e:	77 17                	ja     c0012fa7 <setcwd(Process*, char*)+0x50>
c0012f90:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012f95:	83 e8 41             	sub    eax,0x41
c0012f98:	83 f8 19             	cmp    eax,0x19
c0012f9b:	76 24                	jbe    c0012fc1 <setcwd(Process*, char*)+0x6a>
c0012f9d:	b8 03 00 00 00       	mov    eax,0x3
c0012fa2:	e9 e0 00 00 00       	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0012fa7:	83 ec 0c             	sub    esp,0xc
c0012faa:	56                   	push   esi
c0012fab:	e8 e9 d6 fe ff       	call   c0000699 <strlen>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	83 f8 03             	cmp    eax,0x3
c0012fb6:	75 34                	jne    c0012fec <setcwd(Process*, char*)+0x95>
c0012fb8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fbd:	75 2d                	jne    c0012fec <setcwd(Process*, char*)+0x95>
c0012fbf:	eb cf                	jmp    c0012f90 <setcwd(Process*, char*)+0x39>
c0012fc1:	8b 14 85 80 c3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3c80]
c0012fc8:	b8 05 00 00 00       	mov    eax,0x5
c0012fcd:	85 d2                	test   edx,edx
c0012fcf:	0f 84 b2 00 00 00    	je     c0013087 <setcwd(Process*, char*)+0x130>
c0012fd5:	b8 06 00 00 00       	mov    eax,0x6
c0012fda:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fe1:	0f 85 92 00 00 00    	jne    c0013079 <setcwd(Process*, char*)+0x122>
c0012fe7:	e9 9b 00 00 00       	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0012fec:	83 ec 0c             	sub    esp,0xc
c0012fef:	68 14 01 00 00       	push   0x114
c0012ff4:	e8 c7 c4 ff ff       	call   c000f4c0 <malloc>
c0012ff9:	83 c4 0c             	add    esp,0xc
c0012ffc:	89 c3                	mov    ebx,eax
c0012ffe:	55                   	push   ebp
c0012fff:	56                   	push   esi
c0013000:	50                   	push   eax
c0013001:	e8 b6 fb ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0013006:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001300b:	83 c4 0c             	add    esp,0xc
c001300e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013012:	50                   	push   eax
c0013013:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013017:	50                   	push   eax
c0013018:	53                   	push   ebx
c0013019:	e8 ae fe ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	83 f8 02             	cmp    eax,0x2
c0013024:	74 04                	je     c001302a <setcwd(Process*, char*)+0xd3>
c0013026:	85 c0                	test   eax,eax
c0013028:	74 1c                	je     c0013046 <setcwd(Process*, char*)+0xef>
c001302a:	b8 01 00 00 00       	mov    eax,0x1
c001302f:	85 db                	test   ebx,ebx
c0013031:	74 54                	je     c0013087 <setcwd(Process*, char*)+0x130>
c0013033:	83 ec 0c             	sub    esp,0xc
c0013036:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013038:	53                   	push   ebx
c0013039:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001303c:	83 c4 10             	add    esp,0x10
c001303f:	b8 01 00 00 00       	mov    eax,0x1
c0013044:	eb 41                	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0013046:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001304b:	75 1c                	jne    c0013069 <setcwd(Process*, char*)+0x112>
c001304d:	b8 02 00 00 00       	mov    eax,0x2
c0013052:	85 db                	test   ebx,ebx
c0013054:	74 31                	je     c0013087 <setcwd(Process*, char*)+0x130>
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	8b 03                	mov    eax,DWORD PTR [ebx]
c001305b:	53                   	push   ebx
c001305c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001305f:	83 c4 10             	add    esp,0x10
c0013062:	b8 02 00 00 00       	mov    eax,0x2
c0013067:	eb 1e                	jmp    c0013087 <setcwd(Process*, char*)+0x130>
c0013069:	85 db                	test   ebx,ebx
c001306b:	74 0c                	je     c0013079 <setcwd(Process*, char*)+0x122>
c001306d:	83 ec 0c             	sub    esp,0xc
c0013070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013072:	53                   	push   ebx
c0013073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	50                   	push   eax
c001307a:	50                   	push   eax
c001307b:	56                   	push   esi
c001307c:	57                   	push   edi
c001307d:	e8 99 d6 fe ff       	call   c000071b <strcpy>
c0013082:	83 c4 10             	add    esp,0x10
c0013085:	31 c0                	xor    eax,eax
c0013087:	81 c4 1c 02 00 00    	add    esp,0x21c
c001308d:	5b                   	pop    ebx
c001308e:	5e                   	pop    esi
c001308f:	5f                   	pop    edi
c0013090:	5d                   	pop    ebp
c0013091:	c3                   	ret    

c0013092 <Directory::Directory(char const*, Process*)>:
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013099:	83 ec 08             	sub    esp,0x8
c001309c:	6a 00                	push   0x0
c001309e:	50                   	push   eax
c001309f:	e8 b6 e1 ff ff       	call   c001125a <UnixFile::UnixFile(int)>
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	ba 2c 88 02 c0       	mov    edx,0xc002882c
c00130ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b0:	89 10                	mov    DWORD PTR [eax],edx
c00130b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c0:	83 c0 0d             	add    eax,0xd
c00130c3:	83 ec 04             	sub    esp,0x4
c00130c6:	52                   	push   edx
c00130c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cb:	50                   	push   eax
c00130cc:	e8 41 f9 ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130db:	8d 50 bf             	lea    edx,[eax-0x41]
c00130de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ec:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130f0:	90                   	nop
c00130f1:	83 c4 0c             	add    esp,0xc
c00130f4:	c3                   	ret    
c00130f5:	90                   	nop

c00130f6 <Directory::open()>:
c00130f6:	53                   	push   ebx
c00130f7:	b8 0b 00 00 00       	mov    eax,0xb
c00130fc:	83 ec 08             	sub    esp,0x8
c00130ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013103:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001310a:	80 fa 19             	cmp    dl,0x19
c001310d:	77 3d                	ja     c001314c <Directory::open()+0x56>
c001310f:	8b 14 95 80 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c80]
c0013116:	85 d2                	test   edx,edx
c0013118:	74 32                	je     c001314c <Directory::open()+0x56>
c001311a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013120:	85 d2                	test   edx,edx
c0013122:	74 28                	je     c001314c <Directory::open()+0x56>
c0013124:	b8 06 00 00 00       	mov    eax,0x6
c0013129:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001312d:	75 1d                	jne    c001314c <Directory::open()+0x56>
c001312f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013135:	50                   	push   eax
c0013136:	8b 02                	mov    eax,DWORD PTR [edx]
c0013138:	51                   	push   ecx
c0013139:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001313c:	51                   	push   ecx
c001313d:	52                   	push   edx
c001313e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	85 c0                	test   eax,eax
c0013146:	75 04                	jne    c001314c <Directory::open()+0x56>
c0013148:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001314c:	83 c4 08             	add    esp,0x8
c001314f:	5b                   	pop    ebx
c0013150:	c3                   	ret    
c0013151:	90                   	nop

c0013152 <Directory::close()>:
c0013152:	53                   	push   ebx
c0013153:	b8 0b 00 00 00       	mov    eax,0xb
c0013158:	83 ec 08             	sub    esp,0x8
c001315b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001315f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013166:	80 fa 19             	cmp    dl,0x19
c0013169:	77 41                	ja     c00131ac <Directory::close()+0x5a>
c001316b:	8b 1c 95 80 c3 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3c80]
c0013172:	85 db                	test   ebx,ebx
c0013174:	74 36                	je     c00131ac <Directory::close()+0x5a>
c0013176:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001317d:	74 2d                	je     c00131ac <Directory::close()+0x5a>
c001317f:	b8 05 00 00 00       	mov    eax,0x5
c0013184:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013188:	74 22                	je     c00131ac <Directory::close()+0x5a>
c001318a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001318e:	8b 04 95 80 c3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3c80]
c0013195:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001319b:	53                   	push   ebx
c001319c:	53                   	push   ebx
c001319d:	8b 10                	mov    edx,DWORD PTR [eax]
c001319f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131a5:	50                   	push   eax
c00131a6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131a9:	83 c4 10             	add    esp,0x10
c00131ac:	83 c4 08             	add    esp,0x8
c00131af:	5b                   	pop    ebx
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <Directory::unlink()>:
c00131b2:	83 ec 0c             	sub    esp,0xc
c00131b5:	b8 0b 00 00 00       	mov    eax,0xb
c00131ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131c5:	80 f9 19             	cmp    cl,0x19
c00131c8:	77 2f                	ja     c00131f9 <Directory::unlink()+0x47>
c00131ca:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c00131d1:	85 c9                	test   ecx,ecx
c00131d3:	74 24                	je     c00131f9 <Directory::unlink()+0x47>
c00131d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131db:	85 c9                	test   ecx,ecx
c00131dd:	74 1a                	je     c00131f9 <Directory::unlink()+0x47>
c00131df:	b8 06 00 00 00       	mov    eax,0x6
c00131e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131e8:	75 0f                	jne    c00131f9 <Directory::unlink()+0x47>
c00131ea:	83 c2 0d             	add    edx,0xd
c00131ed:	50                   	push   eax
c00131ee:	50                   	push   eax
c00131ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131f1:	52                   	push   edx
c00131f2:	51                   	push   ecx
c00131f3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	83 c4 0c             	add    esp,0xc
c00131fc:	c3                   	ret    
c00131fd:	90                   	nop

c00131fe <Directory::rename(char const*)>:
c00131fe:	83 ec 0c             	sub    esp,0xc
c0013201:	b8 0b 00 00 00       	mov    eax,0xb
c0013206:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001320a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013211:	80 f9 19             	cmp    cl,0x19
c0013214:	77 32                	ja     c0013248 <Directory::rename(char const*)+0x4a>
c0013216:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c001321d:	85 c9                	test   ecx,ecx
c001321f:	74 27                	je     c0013248 <Directory::rename(char const*)+0x4a>
c0013221:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013227:	85 c9                	test   ecx,ecx
c0013229:	74 1d                	je     c0013248 <Directory::rename(char const*)+0x4a>
c001322b:	b8 06 00 00 00       	mov    eax,0x6
c0013230:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013234:	75 12                	jne    c0013248 <Directory::rename(char const*)+0x4a>
c0013236:	83 c2 0d             	add    edx,0xd
c0013239:	50                   	push   eax
c001323a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001323c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013240:	52                   	push   edx
c0013241:	51                   	push   ecx
c0013242:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013245:	83 c4 10             	add    esp,0x10
c0013248:	83 c4 0c             	add    esp,0xc
c001324b:	c3                   	ret    

c001324c <Directory::exists()>:
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	31 c0                	xor    eax,eax
c0013251:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013255:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001325c:	80 f9 19             	cmp    cl,0x19
c001325f:	77 24                	ja     c0013285 <Directory::exists()+0x39>
c0013261:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c0013268:	85 c9                	test   ecx,ecx
c001326a:	74 19                	je     c0013285 <Directory::exists()+0x39>
c001326c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013272:	85 c9                	test   ecx,ecx
c0013274:	74 0f                	je     c0013285 <Directory::exists()+0x39>
c0013276:	83 c2 0d             	add    edx,0xd
c0013279:	50                   	push   eax
c001327a:	50                   	push   eax
c001327b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001327d:	52                   	push   edx
c001327e:	51                   	push   ecx
c001327f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	83 c4 0c             	add    esp,0xc
c0013288:	c3                   	ret    
c0013289:	90                   	nop

c001328a <Directory::read(dirent*)>:
c001328a:	83 ec 1c             	sub    esp,0x1c
c001328d:	b8 0b 00 00 00       	mov    eax,0xb
c0013292:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013296:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001329d:	80 fa 19             	cmp    dl,0x19
c00132a0:	77 30                	ja     c00132d2 <Directory::read(dirent*)+0x48>
c00132a2:	8b 14 95 80 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c80]
c00132a9:	85 d2                	test   edx,edx
c00132ab:	74 25                	je     c00132d2 <Directory::read(dirent*)+0x48>
c00132ad:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132b4:	74 1c                	je     c00132d2 <Directory::read(dirent*)+0x48>
c00132b6:	83 ec 0c             	sub    esp,0xc
c00132b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132bf:	52                   	push   edx
c00132c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132c4:	6a 00                	push   0x0
c00132c6:	68 10 01 00 00       	push   0x110
c00132cb:	51                   	push   ecx
c00132cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132cf:	83 c4 20             	add    esp,0x20
c00132d2:	83 c4 1c             	add    esp,0x1c
c00132d5:	c3                   	ret    

c00132d6 <Directory::create()>:
c00132d6:	83 ec 0c             	sub    esp,0xc
c00132d9:	b8 0b 00 00 00       	mov    eax,0xb
c00132de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132e9:	80 f9 19             	cmp    cl,0x19
c00132ec:	77 2f                	ja     c001331d <Directory::create()+0x47>
c00132ee:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c00132f5:	85 c9                	test   ecx,ecx
c00132f7:	74 24                	je     c001331d <Directory::create()+0x47>
c00132f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132ff:	85 c9                	test   ecx,ecx
c0013301:	74 1a                	je     c001331d <Directory::create()+0x47>
c0013303:	b8 06 00 00 00       	mov    eax,0x6
c0013308:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001330c:	75 0f                	jne    c001331d <Directory::create()+0x47>
c001330e:	83 c2 0d             	add    edx,0xd
c0013311:	50                   	push   eax
c0013312:	50                   	push   eax
c0013313:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013315:	52                   	push   edx
c0013316:	51                   	push   ecx
c0013317:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	83 c4 0c             	add    esp,0xc
c0013320:	c3                   	ret    
c0013321:	90                   	nop

c0013322 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013322:	b8 0a 00 00 00       	mov    eax,0xa
c0013327:	c3                   	ret    

c0013328 <Bus::Bus(char const*)>:
c0013328:	83 ec 0c             	sub    esp,0xc
c001332b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332f:	83 ec 08             	sub    esp,0x8
c0013332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013336:	50                   	push   eax
c0013337:	e8 30 09 00 00       	call   c0013c6c <Device::Device(char const*)>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	ba 48 88 02 c0       	mov    edx,0xc0028848
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	89 10                	mov    DWORD PTR [eax],edx
c001334a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013358:	90                   	nop
c0013359:	83 c4 0c             	add    esp,0xc
c001335c:	c3                   	ret    
c001335d:	90                   	nop

c001335e <Bus::~Bus()>:
c001335e:	83 ec 0c             	sub    esp,0xc
c0013361:	ba 48 88 02 c0       	mov    edx,0xc0028848
c0013366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001336a:	89 10                	mov    DWORD PTR [eax],edx
c001336c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013370:	83 ec 0c             	sub    esp,0xc
c0013373:	50                   	push   eax
c0013374:	e8 d5 05 00 00       	call   c001394e <Device::~Device()>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	90                   	nop
c001337d:	83 c4 0c             	add    esp,0xc
c0013380:	c3                   	ret    
c0013381:	90                   	nop

c0013382 <Bus::~Bus()>:
c0013382:	83 ec 0c             	sub    esp,0xc
c0013385:	83 ec 0c             	sub    esp,0xc
c0013388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001338c:	e8 cd ff ff ff       	call   c001335e <Bus::~Bus()>
c0013391:	83 c4 10             	add    esp,0x10
c0013394:	83 ec 08             	sub    esp,0x8
c0013397:	68 58 01 00 00       	push   0x158
c001339c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133a0:	e8 08 f2 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	83 c4 0c             	add    esp,0xc
c00133ab:	c3                   	ret    

c00133ac <Buzzer::Buzzer(char const*)>:
c00133ac:	83 ec 0c             	sub    esp,0xc
c00133af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b3:	83 ec 08             	sub    esp,0x8
c00133b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133ba:	50                   	push   eax
c00133bb:	e8 ac 08 00 00       	call   c0013c6c <Device::Device(char const*)>
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	ba 74 88 02 c0       	mov    edx,0xc0028874
c00133c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cc:	89 10                	mov    DWORD PTR [eax],edx
c00133ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00133dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00133ea:	90                   	nop
c00133eb:	83 c4 0c             	add    esp,0xc
c00133ee:	c3                   	ret    
c00133ef:	90                   	nop

c00133f0 <Buzzer::~Buzzer()>:
c00133f0:	83 ec 0c             	sub    esp,0xc
c00133f3:	ba 74 88 02 c0       	mov    edx,0xc0028874
c00133f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fc:	89 10                	mov    DWORD PTR [eax],edx
c00133fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013402:	83 ec 0c             	sub    esp,0xc
c0013405:	50                   	push   eax
c0013406:	e8 43 05 00 00       	call   c001394e <Device::~Device()>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	90                   	nop
c001340f:	83 c4 0c             	add    esp,0xc
c0013412:	c3                   	ret    
c0013413:	90                   	nop

c0013414 <Buzzer::~Buzzer()>:
c0013414:	83 ec 0c             	sub    esp,0xc
c0013417:	83 ec 0c             	sub    esp,0xc
c001341a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001341e:	e8 cd ff ff ff       	call   c00133f0 <Buzzer::~Buzzer()>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	83 ec 08             	sub    esp,0x8
c0013429:	68 5c 01 00 00       	push   0x15c
c001342e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013432:	e8 76 f1 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013437:	83 c4 10             	add    esp,0x10
c001343a:	83 c4 0c             	add    esp,0xc
c001343d:	c3                   	ret    

c001343e <Buzzer::stop()>:
c001343e:	83 ec 14             	sub    esp,0x14
c0013441:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013445:	8b 10                	mov    edx,DWORD PTR [eax]
c0013447:	6a 00                	push   0x0
c0013449:	50                   	push   eax
c001344a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001344d:	83 c4 1c             	add    esp,0x1c
c0013450:	c3                   	ret    

c0013451 <beepThread(void*)>:
c0013451:	53                   	push   ebx
c0013452:	83 ec 08             	sub    esp,0x8
c0013455:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013459:	e8 41 8d 00 00       	call   c001c19f <unlockScheduler()>
c001345e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013463:	52                   	push   edx
c0013464:	52                   	push   edx
c0013465:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001346b:	52                   	push   edx
c001346c:	50                   	push   eax
c001346d:	e8 7a 92 00 00       	call   c001c6ec <nanoSleep(unsigned long long)>
c0013472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013475:	e8 c4 ff ff ff       	call   c001343e <Buzzer::stop()>
c001347a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013482:	83 c4 18             	add    esp,0x18
c0013485:	5b                   	pop    ebx
c0013486:	e9 a7 91 00 00       	jmp    c001c632 <blockTask(TaskState)>
c001348b:	90                   	nop

c001348c <Buzzer::beep(int, int, bool)>:
c001348c:	57                   	push   edi
c001348d:	56                   	push   esi
c001348e:	53                   	push   ebx
c001348f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013493:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013497:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001349b:	52                   	push   edx
c001349c:	52                   	push   edx
c001349d:	8b 06                	mov    eax,DWORD PTR [esi]
c001349f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a3:	56                   	push   esi
c00134a4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	89 f8                	mov    eax,edi
c00134ac:	84 c0                	test   al,al
c00134ae:	74 1f                	je     c00134cf <Buzzer::beep(int, int, bool)+0x43>
c00134b0:	50                   	push   eax
c00134b1:	50                   	push   eax
c00134b2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134b8:	99                   	cdq    
c00134b9:	52                   	push   edx
c00134ba:	50                   	push   eax
c00134bb:	e8 2c 92 00 00       	call   c001c6ec <nanoSleep(unsigned long long)>
c00134c0:	83 c4 10             	add    esp,0x10
c00134c3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134c7:	5b                   	pop    ebx
c00134c8:	5e                   	pop    esi
c00134c9:	5f                   	pop    edi
c00134ca:	e9 6f ff ff ff       	jmp    c001343e <Buzzer::stop()>
c00134cf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00134d5:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00134da:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00134e2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00134e6:	c7 44 24 14 51 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013451
c00134ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134f2:	5b                   	pop    ebx
c00134f3:	5e                   	pop    esi
c00134f4:	5f                   	pop    edi
c00134f5:	e9 d4 8d 00 00       	jmp    c001c2ce <Process::createThread(void (*)(void*), void*, int)>

c00134fa <loadClockSettings()>:
c00134fa:	c7 05 f4 be 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002bef4,0xa
c0013504:	c6 05 f1 be 02 c0 00 	mov    BYTE PTR ds:0xc002bef1,0x0
c001350b:	c6 05 f0 be 02 c0 01 	mov    BYTE PTR ds:0xc002bef0,0x1
c0013512:	c3                   	ret    
c0013513:	90                   	nop

c0013514 <Clock::Clock(char const*)>:
c0013514:	83 ec 0c             	sub    esp,0xc
c0013517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001351b:	83 ec 08             	sub    esp,0x8
c001351e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013522:	50                   	push   eax
c0013523:	e8 44 07 00 00       	call   c0013c6c <Device::Device(char const*)>
c0013528:	83 c4 10             	add    esp,0x10
c001352b:	ba a4 88 02 c0       	mov    edx,0xc00288a4
c0013530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013534:	89 10                	mov    DWORD PTR [eax],edx
c0013536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013544:	90                   	nop
c0013545:	83 c4 0c             	add    esp,0xc
c0013548:	c3                   	ret    
c0013549:	90                   	nop

c001354a <Clock::~Clock()>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	ba a4 88 02 c0       	mov    edx,0xc00288a4
c0013552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013556:	89 10                	mov    DWORD PTR [eax],edx
c0013558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	50                   	push   eax
c0013560:	e8 e9 03 00 00       	call   c001394e <Device::~Device()>
c0013565:	83 c4 10             	add    esp,0x10
c0013568:	90                   	nop
c0013569:	83 c4 0c             	add    esp,0xc
c001356c:	c3                   	ret    
c001356d:	90                   	nop

c001356e <Clock::~Clock()>:
c001356e:	83 ec 0c             	sub    esp,0xc
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013578:	e8 cd ff ff ff       	call   c001354a <Clock::~Clock()>
c001357d:	83 c4 10             	add    esp,0x10
c0013580:	83 ec 08             	sub    esp,0x8
c0013583:	68 58 01 00 00       	push   0x158
c0013588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358c:	e8 1c f0 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013591:	83 c4 10             	add    esp,0x10
c0013594:	83 c4 0c             	add    esp,0xc
c0013597:	c3                   	ret    

c0013598 <Clock::timeInSecondsLocal()>:
c0013598:	53                   	push   ebx
c0013599:	83 ec 14             	sub    esp,0x14
c001359c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00135a2:	50                   	push   eax
c00135a3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00135a6:	0f b6 0d f0 be 02 c0 	movzx  ecx,BYTE PTR ds:0xc002bef0
c00135ad:	03 0d f4 be 02 c0    	add    ecx,DWORD PTR ds:0xc002bef4
c00135b3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00135b9:	89 cb                	mov    ebx,ecx
c00135bb:	c1 fb 1f             	sar    ebx,0x1f
c00135be:	01 c8                	add    eax,ecx
c00135c0:	11 da                	adc    edx,ebx
c00135c2:	83 c4 10             	add    esp,0x10
c00135c5:	31 c9                	xor    ecx,ecx
c00135c7:	80 3d f1 be 02 c0 00 	cmp    BYTE PTR ds:0xc002bef1,0x0
c00135ce:	74 05                	je     c00135d5 <Clock::timeInSecondsLocal()+0x3d>
c00135d0:	b9 08 07 00 00       	mov    ecx,0x708
c00135d5:	31 db                	xor    ebx,ebx
c00135d7:	01 c8                	add    eax,ecx
c00135d9:	11 da                	adc    edx,ebx
c00135db:	83 c4 08             	add    esp,0x8
c00135de:	5b                   	pop    ebx
c00135df:	c3                   	ret    

c00135e0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00135e0:	57                   	push   edi
c00135e1:	56                   	push   esi
c00135e2:	53                   	push   ebx
c00135e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00135f1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00135f4:	0f b6 05 f0 be 02 c0 	movzx  eax,BYTE PTR ds:0xc002bef0
c00135fb:	03 05 f4 be 02 c0    	add    eax,DWORD PTR ds:0xc002bef4
c0013601:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013607:	99                   	cdq    
c0013608:	29 c6                	sub    esi,eax
c001360a:	19 d7                	sbb    edi,edx
c001360c:	89 f0                	mov    eax,esi
c001360e:	89 fa                	mov    edx,edi
c0013610:	31 f6                	xor    esi,esi
c0013612:	80 3d f1 be 02 c0 00 	cmp    BYTE PTR ds:0xc002bef1,0x0
c0013619:	74 05                	je     c0013620 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001361b:	be 08 07 00 00       	mov    esi,0x708
c0013620:	31 ff                	xor    edi,edi
c0013622:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013626:	29 f0                	sub    eax,esi
c0013628:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001362c:	19 fa                	sbb    edx,edi
c001362e:	89 d8                	mov    eax,ebx
c0013630:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013634:	5b                   	pop    ebx
c0013635:	5e                   	pop    esi
c0013636:	5f                   	pop    edi
c0013637:	ff e0                	jmp    eax

c0013639 <datetimeToSeconds(datetime_t)>:
c0013639:	55                   	push   ebp
c001363a:	57                   	push   edi
c001363b:	56                   	push   esi
c001363c:	53                   	push   ebx
c001363d:	83 ec 14             	sub    esp,0x14
c0013640:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013644:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013648:	89 d3                	mov    ebx,edx
c001364a:	0f b6 c6             	movzx  eax,dh
c001364d:	c1 eb 10             	shr    ebx,0x10
c0013650:	48                   	dec    eax
c0013651:	66 81 eb 6c 07       	sub    bx,0x76c
c0013656:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001365a:	0f b6 f5             	movzx  esi,ch
c001365d:	89 cf                	mov    edi,ecx
c001365f:	6b f6 3c             	imul   esi,esi,0x3c
c0013662:	c1 ef 10             	shr    edi,0x10
c0013665:	0f b6 c9             	movzx  ecx,cl
c0013668:	89 f8                	mov    eax,edi
c001366a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013670:	0f b6 f8             	movzx  edi,al
c0013673:	0f b6 d2             	movzx  edx,dl
c0013676:	01 fe                	add    esi,edi
c0013678:	01 f1                	add    ecx,esi
c001367a:	0f b7 f3             	movzx  esi,bx
c001367d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013681:	c1 f9 1f             	sar    ecx,0x1f
c0013684:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013689:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001368d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013692:	8b 0c 8d e0 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7720]
c0013699:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001369d:	76 29                	jbe    c00136c8 <datetimeToSeconds(datetime_t)+0x8f>
c001369f:	f6 c3 03             	test   bl,0x3
c00136a2:	75 24                	jne    c00136c8 <datetimeToSeconds(datetime_t)+0x8f>
c00136a4:	31 d2                	xor    edx,edx
c00136a6:	bf 64 00 00 00       	mov    edi,0x64
c00136ab:	89 d8                	mov    eax,ebx
c00136ad:	66 f7 f7             	div    di
c00136b0:	66 85 d2             	test   dx,dx
c00136b3:	75 12                	jne    c00136c7 <datetimeToSeconds(datetime_t)+0x8e>
c00136b5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00136bb:	bf 90 01 00 00       	mov    edi,0x190
c00136c0:	99                   	cdq    
c00136c1:	f7 ff                	idiv   edi
c00136c3:	85 d2                	test   edx,edx
c00136c5:	75 01                	jne    c00136c8 <datetimeToSeconds(datetime_t)+0x8f>
c00136c7:	41                   	inc    ecx
c00136c8:	66 83 fb 46          	cmp    bx,0x46
c00136cc:	76 45                	jbe    c0013713 <datetimeToSeconds(datetime_t)+0xda>
c00136ce:	bb 46 00 00 00       	mov    ebx,0x46
c00136d3:	bf 64 00 00 00       	mov    edi,0x64
c00136d8:	bd 90 01 00 00       	mov    ebp,0x190
c00136dd:	b8 6d 01 00 00       	mov    eax,0x16d
c00136e2:	f6 c3 03             	test   bl,0x3
c00136e5:	75 23                	jne    c001370a <datetimeToSeconds(datetime_t)+0xd1>
c00136e7:	89 d8                	mov    eax,ebx
c00136e9:	99                   	cdq    
c00136ea:	f7 ff                	idiv   edi
c00136ec:	b8 6e 01 00 00       	mov    eax,0x16e
c00136f1:	85 d2                	test   edx,edx
c00136f3:	75 15                	jne    c001370a <datetimeToSeconds(datetime_t)+0xd1>
c00136f5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00136fb:	99                   	cdq    
c00136fc:	f7 fd                	idiv   ebp
c00136fe:	83 fa 01             	cmp    edx,0x1
c0013701:	19 c0                	sbb    eax,eax
c0013703:	f7 d0                	not    eax
c0013705:	05 6e 01 00 00       	add    eax,0x16e
c001370a:	01 c1                	add    ecx,eax
c001370c:	43                   	inc    ebx
c001370d:	39 f3                	cmp    ebx,esi
c001370f:	7c cc                	jl     c00136dd <datetimeToSeconds(datetime_t)+0xa4>
c0013711:	eb 35                	jmp    c0013748 <datetimeToSeconds(datetime_t)+0x10f>
c0013713:	74 33                	je     c0013748 <datetimeToSeconds(datetime_t)+0x10f>
c0013715:	b8 45 00 00 00       	mov    eax,0x45
c001371a:	89 c2                	mov    edx,eax
c001371c:	83 e2 03             	and    edx,0x3
c001371f:	39 f0                	cmp    eax,esi
c0013721:	7e 0f                	jle    c0013732 <datetimeToSeconds(datetime_t)+0xf9>
c0013723:	83 fa 01             	cmp    edx,0x1
c0013726:	19 d2                	sbb    edx,edx
c0013728:	48                   	dec    eax
c0013729:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013730:	eb e8                	jmp    c001371a <datetimeToSeconds(datetime_t)+0xe1>
c0013732:	b8 6d 01 00 00       	mov    eax,0x16d
c0013737:	85 d2                	test   edx,edx
c0013739:	75 0b                	jne    c0013746 <datetimeToSeconds(datetime_t)+0x10d>
c001373b:	66 83 fb 01          	cmp    bx,0x1
c001373f:	19 c0                	sbb    eax,eax
c0013741:	05 6e 01 00 00       	add    eax,0x16e
c0013746:	29 c1                	sub    ecx,eax
c0013748:	b8 80 51 01 00       	mov    eax,0x15180
c001374d:	f7 e9                	imul   ecx
c001374f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013753:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013757:	83 c4 14             	add    esp,0x14
c001375a:	5b                   	pop    ebx
c001375b:	5e                   	pop    esi
c001375c:	5f                   	pop    edi
c001375d:	5d                   	pop    ebp
c001375e:	c3                   	ret    
c001375f:	90                   	nop

c0013760 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013760:	57                   	push   edi
c0013761:	56                   	push   esi
c0013762:	53                   	push   ebx
c0013763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013767:	8b 06                	mov    eax,DWORD PTR [esi]
c0013769:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001376c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013774:	e8 c0 fe ff ff       	call   c0013639 <datetimeToSeconds(datetime_t)>
c0013779:	59                   	pop    ecx
c001377a:	0f b6 0d f0 be 02 c0 	movzx  ecx,BYTE PTR ds:0xc002bef0
c0013781:	5b                   	pop    ebx
c0013782:	03 0d f4 be 02 c0    	add    ecx,DWORD PTR ds:0xc002bef4
c0013788:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001378e:	89 cb                	mov    ebx,ecx
c0013790:	c1 fb 1f             	sar    ebx,0x1f
c0013793:	29 c8                	sub    eax,ecx
c0013795:	19 da                	sbb    edx,ebx
c0013797:	31 c9                	xor    ecx,ecx
c0013799:	80 3d f1 be 02 c0 00 	cmp    BYTE PTR ds:0xc002bef1,0x0
c00137a0:	74 05                	je     c00137a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00137a2:	b9 08 07 00 00       	mov    ecx,0x708
c00137a7:	31 db                	xor    ebx,ebx
c00137a9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00137ad:	29 c8                	sub    eax,ecx
c00137af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137b3:	19 da                	sbb    edx,ebx
c00137b5:	89 f8                	mov    eax,edi
c00137b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00137bb:	5b                   	pop    ebx
c00137bc:	5e                   	pop    esi
c00137bd:	5f                   	pop    edi
c00137be:	ff e0                	jmp    eax

c00137c0 <secondsToDatetime(unsigned long long)>:
c00137c0:	55                   	push   ebp
c00137c1:	57                   	push   edi
c00137c2:	56                   	push   esi
c00137c3:	53                   	push   ebx
c00137c4:	83 ec 1c             	sub    esp,0x1c
c00137c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00137cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00137cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00137d3:	6a 00                	push   0x0
c00137d5:	68 80 51 01 00       	push   0x15180
c00137da:	55                   	push   ebp
c00137db:	57                   	push   edi
c00137dc:	e8 6b 10 01 00       	call   c002484c <__udivdi3>
c00137e1:	83 c4 10             	add    esp,0x10
c00137e4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00137ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137ee:	6a 00                	push   0x0
c00137f0:	68 80 51 01 00       	push   0x15180
c00137f5:	55                   	push   ebp
c00137f6:	57                   	push   edi
c00137f7:	bf 10 0e 00 00       	mov    edi,0xe10
c00137fc:	e8 4b 11 01 00       	call   c002494c <__umoddi3>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	99                   	cdq    
c0013805:	f7 ff                	idiv   edi
c0013807:	bf 3c 00 00 00       	mov    edi,0x3c
c001380c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001380f:	89 d0                	mov    eax,edx
c0013811:	99                   	cdq    
c0013812:	f7 ff                	idiv   edi
c0013814:	85 db                	test   ebx,ebx
c0013816:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013819:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001381c:	79 11                	jns    c001382f <secondsToDatetime(unsigned long long)+0x6f>
c001381e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013822:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013828:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001382d:	eb 07                	jmp    c0013836 <secondsToDatetime(unsigned long long)+0x76>
c001382f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013834:	89 d8                	mov    eax,ebx
c0013836:	bf b4 05 00 00       	mov    edi,0x5b4
c001383b:	99                   	cdq    
c001383c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013841:	f7 f9                	idiv   ecx
c0013843:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001384c:	31 d2                	xor    edx,edx
c001384e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013856:	01 c3                	add    ebx,eax
c0013858:	89 d8                	mov    eax,ebx
c001385a:	f7 f1                	div    ecx
c001385c:	31 d2                	xor    edx,edx
c001385e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013861:	89 d8                	mov    eax,ebx
c0013863:	f7 f7                	div    edi
c0013865:	31 d2                	xor    edx,edx
c0013867:	29 c1                	sub    ecx,eax
c0013869:	89 d8                	mov    eax,ebx
c001386b:	f7 f5                	div    ebp
c001386d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013872:	29 c1                	sub    ecx,eax
c0013874:	31 d2                	xor    edx,edx
c0013876:	89 c8                	mov    eax,ecx
c0013878:	f7 f5                	div    ebp
c001387a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001387f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013883:	31 d2                	xor    edx,edx
c0013885:	89 c8                	mov    eax,ecx
c0013887:	f7 f5                	div    ebp
c0013889:	31 d2                	xor    edx,edx
c001388b:	01 c3                	add    ebx,eax
c001388d:	89 c8                	mov    eax,ecx
c001388f:	f7 f7                	div    edi
c0013891:	bf 99 00 00 00       	mov    edi,0x99
c0013896:	29 c3                	sub    ebx,eax
c0013898:	31 d2                	xor    edx,edx
c001389a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00138a2:	29 c3                	sub    ebx,eax
c00138a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00138a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00138aa:	bb 05 00 00 00       	mov    ebx,0x5
c00138af:	83 c1 02             	add    ecx,0x2
c00138b2:	89 c8                	mov    eax,ecx
c00138b4:	f7 f7                	div    edi
c00138b6:	31 d2                	xor    edx,edx
c00138b8:	89 c7                	mov    edi,eax
c00138ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00138c0:	83 c0 02             	add    eax,0x2
c00138c3:	f7 f3                	div    ebx
c00138c5:	89 eb                	mov    ebx,ebp
c00138c7:	29 c3                	sub    ebx,eax
c00138c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00138cf:	88 1e                	mov    BYTE PTR [esi],bl
c00138d1:	19 c0                	sbb    eax,eax
c00138d3:	31 d2                	xor    edx,edx
c00138d5:	83 e0 0c             	and    eax,0xc
c00138d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00138dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00138e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00138e8:	83 f9 01             	cmp    ecx,0x1
c00138eb:	0f 96 c2             	setbe  dl
c00138ee:	41                   	inc    ecx
c00138ef:	01 d0                	add    eax,edx
c00138f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00138f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00138f8:	83 c4 1c             	add    esp,0x1c
c00138fb:	89 f0                	mov    eax,esi
c00138fd:	5b                   	pop    ebx
c00138fe:	5e                   	pop    esi
c00138ff:	5f                   	pop    edi
c0013900:	5d                   	pop    ebp
c0013901:	c2 04 00             	ret    0x4

c0013904 <Clock::timeInDatetimeLocal()>:
c0013904:	53                   	push   ebx
c0013905:	83 ec 14             	sub    esp,0x14
c0013908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001390c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013910:	e8 83 fc ff ff       	call   c0013598 <Clock::timeInSecondsLocal()>
c0013915:	83 c4 0c             	add    esp,0xc
c0013918:	52                   	push   edx
c0013919:	50                   	push   eax
c001391a:	53                   	push   ebx
c001391b:	e8 a0 fe ff ff       	call   c00137c0 <secondsToDatetime(unsigned long long)>
c0013920:	89 d8                	mov    eax,ebx
c0013922:	83 c4 14             	add    esp,0x14
c0013925:	5b                   	pop    ebx
c0013926:	c2 04 00             	ret    0x4
c0013929:	90                   	nop

c001392a <Device::hibernate()>:
c001392a:	c3                   	ret    
c001392b:	90                   	nop

c001392c <Device::wake()>:
c001392c:	c3                   	ret    
c001392d:	90                   	nop

c001392e <Device::detect()>:
c001392e:	c3                   	ret    
c001392f:	90                   	nop

c0013930 <Device::disableLegacy()>:
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <Device::powerSaving(PowerSavingLevel)>:
c0013932:	c3                   	ret    
c0013933:	90                   	nop

c0013934 <DriverlessDevice::close(int, int, void*)>:
c0013934:	31 c0                	xor    eax,eax
c0013936:	c3                   	ret    
c0013937:	90                   	nop

c0013938 <DriverlessDevice::detect()>:
c0013938:	c3                   	ret    
c0013939:	90                   	nop

c001393a <DriverlessDevice::open(int, int, void*)>:
c001393a:	83 ec 18             	sub    esp,0x18
c001393d:	68 10 89 02 c0       	push   0xc0028910
c0013942:	e8 10 58 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0013947:	83 c8 ff             	or     eax,0xffffffff
c001394a:	83 c4 1c             	add    esp,0x1c
c001394d:	c3                   	ret    

c001394e <Device::~Device()>:
c001394e:	ba 38 89 02 c0       	mov    edx,0xc0028938
c0013953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013957:	89 10                	mov    DWORD PTR [eax],edx
c0013959:	90                   	nop
c001395a:	c3                   	ret    
c001395b:	90                   	nop

c001395c <Device::~Device()>:
c001395c:	83 ec 0c             	sub    esp,0xc
c001395f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013963:	e8 e6 ff ff ff       	call   c001394e <Device::~Device()>
c0013968:	83 c4 04             	add    esp,0x4
c001396b:	83 ec 08             	sub    esp,0x8
c001396e:	68 58 01 00 00       	push   0x158
c0013973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013977:	e8 31 ec ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001397c:	83 c4 10             	add    esp,0x10
c001397f:	83 c4 0c             	add    esp,0xc
c0013982:	c3                   	ret    
c0013983:	90                   	nop

c0013984 <Device::findAndLoadDriver()>:
c0013984:	c3                   	ret    
c0013985:	90                   	nop

c0013986 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013986:	57                   	push   edi
c0013987:	b9 09 00 00 00       	mov    ecx,0x9
c001398c:	56                   	push   esi
c001398d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013991:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013995:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001399f:	81 c7 18 01 00 00    	add    edi,0x118
c00139a5:	fc                   	cld    
c00139a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139a8:	5e                   	pop    esi
c00139a9:	5f                   	pop    edi
c00139aa:	c3                   	ret    
c00139ab:	90                   	nop

c00139ac <Device::preOpenACPI(void*, char*, char*)>:
c00139ac:	56                   	push   esi
c00139ad:	53                   	push   ebx
c00139ae:	83 ec 08             	sub    esp,0x8
c00139b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00139b5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00139b9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00139c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139c7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00139cd:	6a 1e                	push   0x1e
c00139cf:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00139d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139d9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00139df:	50                   	push   eax
c00139e0:	e8 61 cc fe ff       	call   c0000646 <memcpy>
c00139e5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00139e9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00139ed:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00139f5:	83 c4 14             	add    esp,0x14
c00139f8:	5b                   	pop    ebx
c00139f9:	5e                   	pop    esi
c00139fa:	e9 47 cc fe ff       	jmp    c0000646 <memcpy>
c00139ff:	90                   	nop

c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a04:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a09:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a10:	75 0b                	jne    c0013a1d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a12:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a14:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a18:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a1b:	eb 1e                	jmp    c0013a3b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a1d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0013a22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a28:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a30:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a38:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a3b:	ff e0                	jmp    eax
c0013a3d:	90                   	nop

c0013a3e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a42:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a47:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a4e:	75 0b                	jne    c0013a5b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a56:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013a59:	eb 1e                	jmp    c0013a79 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013a5b:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0013a60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a66:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a76:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013a79:	ff e0                	jmp    eax
c0013a7b:	90                   	nop

c0013a7c <Device::addChild(Device*)>:
c0013a7c:	53                   	push   ebx
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a88:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013a8e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013a94:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013a96:	85 d2                	test   edx,edx
c0013a98:	74 04                	je     c0013a9e <Device::addChild(Device*)+0x22>
c0013a9a:	89 d3                	mov    ebx,edx
c0013a9c:	eb f6                	jmp    c0013a94 <Device::addChild(Device*)+0x18>
c0013a9e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013aa1:	83 ec 0c             	sub    esp,0xc
c0013aa4:	6a 08                	push   0x8
c0013aa6:	e8 15 ba ff ff       	call   c000f4c0 <malloc>
c0013aab:	89 03                	mov    DWORD PTR [ebx],eax
c0013aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013aba:	83 c4 18             	add    esp,0x18
c0013abd:	5b                   	pop    ebx
c0013abe:	c3                   	ret    
c0013abf:	90                   	nop

c0013ac0 <Device::removeAllChildren()>:
c0013ac0:	56                   	push   esi
c0013ac1:	53                   	push   ebx
c0013ac2:	52                   	push   edx
c0013ac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ac7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013acd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ad0:	74 17                	je     c0013ae9 <Device::removeAllChildren()+0x29>
c0013ad2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ad5:	85 c0                	test   eax,eax
c0013ad7:	74 0c                	je     c0013ae5 <Device::removeAllChildren()+0x25>
c0013ad9:	83 ec 0c             	sub    esp,0xc
c0013adc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ade:	50                   	push   eax
c0013adf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013ae2:	83 c4 10             	add    esp,0x10
c0013ae5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ae7:	eb e4                	jmp    c0013acd <Device::removeAllChildren()+0xd>
c0013ae9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013aef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013af5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013afb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b02:	58                   	pop    eax
c0013b03:	5b                   	pop    ebx
c0013b04:	5e                   	pop    esi
c0013b05:	c3                   	ret    

c0013b06 <Device::hibernateAll()>:
c0013b06:	53                   	push   ebx
c0013b07:	83 ec 14             	sub    esp,0x14
c0013b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b10:	53                   	push   ebx
c0013b11:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b1a:	83 c4 10             	add    esp,0x10
c0013b1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b20:	74 0f                	je     c0013b31 <Device::hibernateAll()+0x2b>
c0013b22:	83 ec 0c             	sub    esp,0xc
c0013b25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b28:	e8 d9 ff ff ff       	call   c0013b06 <Device::hibernateAll()>
c0013b2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b2f:	eb e9                	jmp    c0013b1a <Device::hibernateAll()+0x14>
c0013b31:	83 c4 08             	add    esp,0x8
c0013b34:	5b                   	pop    ebx
c0013b35:	c3                   	ret    

c0013b36 <Device::wakeAll()>:
c0013b36:	53                   	push   ebx
c0013b37:	83 ec 14             	sub    esp,0x14
c0013b3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b40:	53                   	push   ebx
c0013b41:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013b44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b4a:	83 c4 10             	add    esp,0x10
c0013b4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b50:	74 0f                	je     c0013b61 <Device::wakeAll()+0x2b>
c0013b52:	83 ec 0c             	sub    esp,0xc
c0013b55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b58:	e8 d9 ff ff ff       	call   c0013b36 <Device::wakeAll()>
c0013b5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b5f:	eb e9                	jmp    c0013b4a <Device::wakeAll()+0x14>
c0013b61:	83 c4 08             	add    esp,0x8
c0013b64:	5b                   	pop    ebx
c0013b65:	c3                   	ret    

c0013b66 <Device::detectAll()>:
c0013b66:	53                   	push   ebx
c0013b67:	83 ec 14             	sub    esp,0x14
c0013b6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b70:	53                   	push   ebx
c0013b71:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013b74:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b7a:	83 c4 10             	add    esp,0x10
c0013b7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b80:	74 0f                	je     c0013b91 <Device::detectAll()+0x2b>
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b88:	e8 d9 ff ff ff       	call   c0013b66 <Device::detectAll()>
c0013b8d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b8f:	eb e9                	jmp    c0013b7a <Device::detectAll()+0x14>
c0013b91:	83 c4 08             	add    esp,0x8
c0013b94:	5b                   	pop    ebx
c0013b95:	c3                   	ret    

c0013b96 <Device::disableLegacyAll()>:
c0013b96:	53                   	push   ebx
c0013b97:	83 ec 14             	sub    esp,0x14
c0013b9a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba0:	53                   	push   ebx
c0013ba1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ba4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013baa:	83 c4 10             	add    esp,0x10
c0013bad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bb0:	74 0f                	je     c0013bc1 <Device::disableLegacyAll()+0x2b>
c0013bb2:	83 ec 0c             	sub    esp,0xc
c0013bb5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bb8:	e8 d9 ff ff ff       	call   c0013b96 <Device::disableLegacyAll()>
c0013bbd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bbf:	eb e9                	jmp    c0013baa <Device::disableLegacyAll()+0x14>
c0013bc1:	83 c4 08             	add    esp,0x8
c0013bc4:	5b                   	pop    ebx
c0013bc5:	c3                   	ret    

c0013bc6 <Device::loadDriversForAll()>:
c0013bc6:	53                   	push   ebx
c0013bc7:	83 ec 08             	sub    esp,0x8
c0013bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bce:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013bd4:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013bd6:	85 db                	test   ebx,ebx
c0013bd8:	74 12                	je     c0013bec <Device::loadDriversForAll()+0x26>
c0013bda:	83 ec 0c             	sub    esp,0xc
c0013bdd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013be0:	e8 e1 ff ff ff       	call   c0013bc6 <Device::loadDriversForAll()>
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	89 d8                	mov    eax,ebx
c0013bea:	eb e8                	jmp    c0013bd4 <Device::loadDriversForAll()+0xe>
c0013bec:	83 c4 08             	add    esp,0x8
c0013bef:	5b                   	pop    ebx
c0013bf0:	c3                   	ret    
c0013bf1:	90                   	nop

c0013bf2 <Device::closeAll()>:
c0013bf2:	53                   	push   ebx
c0013bf3:	83 ec 08             	sub    esp,0x8
c0013bf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013bfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bfc:	6a 00                	push   0x0
c0013bfe:	6a 00                	push   0x0
c0013c00:	6a 00                	push   0x0
c0013c02:	53                   	push   ebx
c0013c03:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c06:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c0c:	83 c4 10             	add    esp,0x10
c0013c0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c12:	74 0f                	je     c0013c23 <Device::closeAll()+0x31>
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c1a:	e8 d3 ff ff ff       	call   c0013bf2 <Device::closeAll()>
c0013c1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c21:	eb e9                	jmp    c0013c0c <Device::closeAll()+0x1a>
c0013c23:	83 c4 08             	add    esp,0x8
c0013c26:	5b                   	pop    ebx
c0013c27:	c3                   	ret    

c0013c28 <Device::powerSavingAll(PowerSavingLevel)>:
c0013c28:	56                   	push   esi
c0013c29:	53                   	push   ebx
c0013c2a:	83 ec 0c             	sub    esp,0xc
c0013c2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c31:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c37:	56                   	push   esi
c0013c38:	53                   	push   ebx
c0013c39:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013c3c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c42:	83 c4 10             	add    esp,0x10
c0013c45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c48:	74 0f                	je     c0013c59 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013c4a:	52                   	push   edx
c0013c4b:	52                   	push   edx
c0013c4c:	56                   	push   esi
c0013c4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c50:	e8 d3 ff ff ff       	call   c0013c28 <Device::powerSavingAll(PowerSavingLevel)>
c0013c55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c57:	eb e9                	jmp    c0013c42 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013c59:	58                   	pop    eax
c0013c5a:	5b                   	pop    ebx
c0013c5b:	5e                   	pop    esi
c0013c5c:	c3                   	ret    
c0013c5d:	90                   	nop

c0013c5e <Device::setName(char const*)>:
c0013c5e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013c66:	e9 b0 ca fe ff       	jmp    c000071b <strcpy>
c0013c6b:	90                   	nop

c0013c6c <Device::Device(char const*)>:
c0013c6c:	83 ec 1c             	sub    esp,0x1c
c0013c6f:	ba 38 89 02 c0       	mov    edx,0xc0028938
c0013c74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c78:	89 10                	mov    DWORD PTR [eax],edx
c0013c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c7e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c8c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c9a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ca8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013cb2:	83 ec 08             	sub    esp,0x8
c0013cb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cbd:	e8 9c ff ff ff       	call   c0013c5e <Device::setName(char const*)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013ccd:	83 ec 0c             	sub    esp,0xc
c0013cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013cd4:	e8 e7 b7 ff ff       	call   c000f4c0 <malloc>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ce2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ce9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013ced:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013cf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cf7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013cfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d07:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d18:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013d1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d23:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d4a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d58:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013d62:	90                   	nop
c0013d63:	83 c4 1c             	add    esp,0x1c
c0013d66:	c3                   	ret    
c0013d67:	90                   	nop

c0013d68 <Device::getName()>:
c0013d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d6c:	05 d0 00 00 00       	add    eax,0xd0
c0013d71:	c3                   	ret    

c0013d72 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013d72:	83 ec 0c             	sub    esp,0xc
c0013d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d79:	83 ec 08             	sub    esp,0x8
c0013d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d80:	50                   	push   eax
c0013d81:	e8 e6 fe ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013d86:	83 c4 10             	add    esp,0x10
c0013d89:	ba 64 89 02 c0       	mov    edx,0xc0028964
c0013d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d92:	89 10                	mov    DWORD PTR [eax],edx
c0013d94:	90                   	nop
c0013d95:	83 c4 0c             	add    esp,0xc
c0013d98:	c3                   	ret    
c0013d99:	90                   	nop

c0013d9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013d9a:	57                   	push   edi
c0013d9b:	56                   	push   esi
c0013d9c:	53                   	push   ebx
c0013d9d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013da1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013da5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013da9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013daf:	75 0c                	jne    c0013dbd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013db1:	52                   	push   edx
c0013db2:	52                   	push   edx
c0013db3:	53                   	push   ebx
c0013db4:	56                   	push   esi
c0013db5:	e8 d0 29 01 00       	call   c002678a <LinkedList<Device>::addElement(Device*)>
c0013dba:	83 c4 10             	add    esp,0x10
c0013dbd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dc3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dc6:	74 12                	je     c0013dda <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013dc8:	50                   	push   eax
c0013dc9:	57                   	push   edi
c0013dca:	56                   	push   esi
c0013dcb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dce:	e8 c7 ff ff ff       	call   c0013d9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013dd3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	eb e9                	jmp    c0013dc3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013dda:	5b                   	pop    ebx
c0013ddb:	5e                   	pop    esi
c0013ddc:	5f                   	pop    edi
c0013ddd:	c3                   	ret    

c0013dde <getDevicesOfType(DeviceType)>:
c0013dde:	53                   	push   ebx
c0013ddf:	83 ec 14             	sub    esp,0x14
c0013de2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013de6:	53                   	push   ebx
c0013de7:	e8 7a 2a 01 00       	call   c0026866 <LinkedList<Device>::LinkedList()>
c0013dec:	83 c4 0c             	add    esp,0xc
c0013def:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013df3:	53                   	push   ebx
c0013df4:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c0013dfa:	e8 9b ff ff ff       	call   c0013d9a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013dff:	89 d8                	mov    eax,ebx
c0013e01:	83 c4 18             	add    esp,0x18
c0013e04:	5b                   	pop    ebx
c0013e05:	c2 04 00             	ret    0x4

c0013e08 <HardDiskController::HardDiskController(char const*)>:
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e0f:	83 ec 08             	sub    esp,0x8
c0013e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e16:	50                   	push   eax
c0013e17:	e8 50 fe ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013e1c:	83 c4 10             	add    esp,0x10
c0013e1f:	ba 90 89 02 c0       	mov    edx,0xc0028990
c0013e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e28:	89 10                	mov    DWORD PTR [eax],edx
c0013e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013e38:	90                   	nop
c0013e39:	83 c4 0c             	add    esp,0xc
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <HardDiskController::~HardDiskController()>:
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	ba 90 89 02 c0       	mov    edx,0xc0028990
c0013e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4a:	89 10                	mov    DWORD PTR [eax],edx
c0013e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e50:	83 ec 0c             	sub    esp,0xc
c0013e53:	50                   	push   eax
c0013e54:	e8 f5 fa ff ff       	call   c001394e <Device::~Device()>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	90                   	nop
c0013e5d:	83 c4 0c             	add    esp,0xc
c0013e60:	c3                   	ret    
c0013e61:	90                   	nop

c0013e62 <HardDiskController::~HardDiskController()>:
c0013e62:	83 ec 0c             	sub    esp,0xc
c0013e65:	83 ec 0c             	sub    esp,0xc
c0013e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e6c:	e8 cd ff ff ff       	call   c0013e3e <HardDiskController::~HardDiskController()>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	83 ec 08             	sub    esp,0x8
c0013e77:	68 58 01 00 00       	push   0x158
c0013e7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e80:	e8 28 e7 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013e85:	83 c4 10             	add    esp,0x10
c0013e88:	83 c4 0c             	add    esp,0xc
c0013e8b:	c3                   	ret    

c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013e8c:	83 ec 0c             	sub    esp,0xc
c0013e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e93:	83 ec 08             	sub    esp,0x8
c0013e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e9a:	50                   	push   eax
c0013e9b:	e8 cc fd ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013ea0:	83 c4 10             	add    esp,0x10
c0013ea3:	ba bc 89 02 c0       	mov    edx,0xc00289bc
c0013ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eac:	89 10                	mov    DWORD PTR [eax],edx
c0013eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013eb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ebd:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eda:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eee:	90                   	nop
c0013eef:	83 c4 0c             	add    esp,0xc
c0013ef2:	c3                   	ret    
c0013ef3:	90                   	nop

c0013ef4 <PhysicalDisk::startCache()>:
c0013ef4:	56                   	push   esi
c0013ef5:	53                   	push   ebx
c0013ef6:	83 ec 10             	sub    esp,0x10
c0013ef9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013efd:	6a 30                	push   0x30
c0013eff:	e8 bc b5 ff ff       	call   c000f4c0 <malloc>
c0013f04:	89 c6                	mov    esi,eax
c0013f06:	58                   	pop    eax
c0013f07:	5a                   	pop    edx
c0013f08:	53                   	push   ebx
c0013f09:	56                   	push   esi
c0013f0a:	e8 63 25 00 00       	call   c0016472 <VCache::VCache(PhysicalDisk*)>
c0013f0f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013f15:	83 c4 14             	add    esp,0x14
c0013f18:	5b                   	pop    ebx
c0013f19:	5e                   	pop    esi
c0013f1a:	c3                   	ret    
c0013f1b:	90                   	nop

c0013f1c <PhysicalDisk::~PhysicalDisk()>:
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	ba bc 89 02 c0       	mov    edx,0xc00289bc
c0013f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f28:	89 10                	mov    DWORD PTR [eax],edx
c0013f2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f2e:	83 ec 0c             	sub    esp,0xc
c0013f31:	50                   	push   eax
c0013f32:	e8 17 fa ff ff       	call   c001394e <Device::~Device()>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	90                   	nop
c0013f3b:	83 c4 0c             	add    esp,0xc
c0013f3e:	c3                   	ret    
c0013f3f:	90                   	nop

c0013f40 <PhysicalDisk::~PhysicalDisk()>:
c0013f40:	83 ec 0c             	sub    esp,0xc
c0013f43:	83 ec 0c             	sub    esp,0xc
c0013f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4a:	e8 cd ff ff ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0013f4f:	83 c4 10             	add    esp,0x10
c0013f52:	83 ec 08             	sub    esp,0x8
c0013f55:	68 6c 01 00 00       	push   0x16c
c0013f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f5e:	e8 4a e6 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	83 c4 0c             	add    esp,0xc
c0013f69:	c3                   	ret    

c0013f6a <FPU::FPU(char const*)>:
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f71:	83 ec 08             	sub    esp,0x8
c0013f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f78:	50                   	push   eax
c0013f79:	e8 ee fc ff ff       	call   c0013c6c <Device::Device(char const*)>
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	ba fc 89 02 c0       	mov    edx,0xc00289fc
c0013f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f8a:	89 10                	mov    DWORD PTR [eax],edx
c0013f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f90:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013f9a:	90                   	nop
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	c3                   	ret    
c0013f9f:	90                   	nop

c0013fa0 <FPU::~FPU()>:
c0013fa0:	83 ec 0c             	sub    esp,0xc
c0013fa3:	ba fc 89 02 c0       	mov    edx,0xc00289fc
c0013fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fac:	89 10                	mov    DWORD PTR [eax],edx
c0013fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	50                   	push   eax
c0013fb6:	e8 93 f9 ff ff       	call   c001394e <Device::~Device()>
c0013fbb:	83 c4 10             	add    esp,0x10
c0013fbe:	90                   	nop
c0013fbf:	83 c4 0c             	add    esp,0xc
c0013fc2:	c3                   	ret    
c0013fc3:	90                   	nop

c0013fc4 <FPU::~FPU()>:
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	83 ec 0c             	sub    esp,0xc
c0013fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fce:	e8 cd ff ff ff       	call   c0013fa0 <FPU::~FPU()>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	83 ec 08             	sub    esp,0x8
c0013fd9:	68 58 01 00 00       	push   0x158
c0013fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe2:	e8 c6 e5 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0013fe7:	83 c4 10             	add    esp,0x10
c0013fea:	83 c4 0c             	add    esp,0xc
c0013fed:	c3                   	ret    

c0013fee <setupFPU()>:
c0013fee:	53                   	push   ebx
c0013fef:	83 ec 08             	sub    esp,0x8
c0013ff2:	8b 15 88 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd88
c0013ff8:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013fff:	74 19                	je     c001401a <setupFPU()+0x2c>
c0014001:	83 ec 0c             	sub    esp,0xc
c0014004:	68 58 01 00 00       	push   0x158
c0014009:	e8 b2 b4 ff ff       	call   c000f4c0 <malloc>
c001400e:	89 c3                	mov    ebx,eax
c0014010:	89 04 24             	mov    DWORD PTR [esp],eax
c0014013:	e8 be f3 00 00       	call   c00233d6 <AVX::AVX()>
c0014018:	eb 5b                	jmp    c0014075 <setupFPU()+0x87>
c001401a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014020:	84 c0                	test   al,al
c0014022:	79 19                	jns    c001403d <setupFPU()+0x4f>
c0014024:	83 ec 0c             	sub    esp,0xc
c0014027:	68 58 01 00 00       	push   0x158
c001402c:	e8 8f b4 ff ff       	call   c000f4c0 <malloc>
c0014031:	89 c3                	mov    ebx,eax
c0014033:	89 04 24             	mov    DWORD PTR [esp],eax
c0014036:	e8 c1 f4 00 00       	call   c00234fc <SSE::SSE()>
c001403b:	eb 38                	jmp    c0014075 <setupFPU()+0x87>
c001403d:	a8 20                	test   al,0x20
c001403f:	74 19                	je     c001405a <setupFPU()+0x6c>
c0014041:	83 ec 0c             	sub    esp,0xc
c0014044:	68 58 01 00 00       	push   0x158
c0014049:	e8 72 b4 ff ff       	call   c000f4c0 <malloc>
c001404e:	89 c3                	mov    ebx,eax
c0014050:	89 04 24             	mov    DWORD PTR [esp],eax
c0014053:	e8 0e f4 00 00       	call   c0023466 <MMX::MMX()>
c0014058:	eb 1b                	jmp    c0014075 <setupFPU()+0x87>
c001405a:	a8 10                	test   al,0x10
c001405c:	74 1c                	je     c001407a <setupFPU()+0x8c>
c001405e:	83 ec 0c             	sub    esp,0xc
c0014061:	68 58 01 00 00       	push   0x158
c0014066:	e8 55 b4 ff ff       	call   c000f4c0 <malloc>
c001406b:	89 c3                	mov    ebx,eax
c001406d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014070:	e8 15 f5 00 00       	call   c002358a <x87::x87()>
c0014075:	83 c4 10             	add    esp,0x10
c0014078:	eb 24                	jmp    c001409e <setupFPU()+0xb0>
c001407a:	83 e0 ef             	and    eax,0xffffffef
c001407d:	83 ec 0c             	sub    esp,0xc
c0014080:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014086:	68 e8 89 02 c0       	push   0xc00289e8
c001408b:	e8 fd e5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014090:	0f 20 c0             	mov    eax,cr0
c0014093:	83 c8 04             	or     eax,0x4
c0014096:	0f 22 c0             	mov    cr0,eax
c0014099:	31 db                	xor    ebx,ebx
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	89 d8                	mov    eax,ebx
c00140a0:	83 c4 08             	add    esp,0x8
c00140a3:	5b                   	pop    ebx
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00140a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140ae:	c1 e0 04             	shl    eax,0x4
c00140b1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00140b5:	8d 50 10             	lea    edx,[eax+0x10]
c00140b8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00140be:	74 08                	je     c00140c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00140c0:	83 c0 04             	add    eax,0x4
c00140c3:	39 d0                	cmp    eax,edx
c00140c5:	75 f1                	jne    c00140b8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00140c7:	c3                   	ret    
c00140c8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00140d2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00140dc:	eb e2                	jmp    c00140c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00140de <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00140de:	57                   	push   edi
c00140df:	31 c0                	xor    eax,eax
c00140e1:	56                   	push   esi
c00140e2:	53                   	push   ebx
c00140e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00140e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140eb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00140ef:	89 da                	mov    edx,ebx
c00140f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140f5:	c1 e2 04             	shl    edx,0x4
c00140f8:	01 ca                	add    edx,ecx
c00140fa:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014102:	74 16                	je     c001411a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014104:	40                   	inc    eax
c0014105:	83 f8 04             	cmp    eax,0x4
c0014108:	75 f0                	jne    c00140fa <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001410a:	c7 44 24 10 2c 8a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028a2c
c0014112:	5b                   	pop    ebx
c0014113:	5e                   	pop    esi
c0014114:	5f                   	pop    edi
c0014115:	e9 3d 50 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c001411a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001411d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014120:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014126:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001412c:	5b                   	pop    ebx
c001412d:	5e                   	pop    esi
c001412e:	5f                   	pop    edi
c001412f:	c3                   	ret    

c0014130 <doubleFault(regs*, void*)>:
c0014130:	55                   	push   ebp
c0014131:	89 e5                	mov    ebp,esp
c0014133:	83 ec 08             	sub    esp,0x8
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	68 67 8a 02 c0       	push   0xc0028a67
c001413e:	e8 14 50 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	90                   	nop
c0014147:	c9                   	leave  
c0014148:	c3                   	ret    
c0014149:	90                   	nop

c001414a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001414a:	56                   	push   esi
c001414b:	53                   	push   ebx
c001414c:	50                   	push   eax
c001414d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014151:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014155:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001415a:	75 35                	jne    c0014191 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001415c:	8d 43 20             	lea    eax,[ebx+0x20]
c001415f:	31 d2                	xor    edx,edx
c0014161:	89 c1                	mov    ecx,eax
c0014163:	c1 e1 04             	shl    ecx,0x4
c0014166:	01 f1                	add    ecx,esi
c0014168:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014170:	74 3e                	je     c00141b0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014172:	42                   	inc    edx
c0014173:	83 fa 04             	cmp    edx,0x4
c0014176:	75 f0                	jne    c0014168 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014178:	83 ec 0c             	sub    esp,0xc
c001417b:	68 ac 8a 02 c0       	push   0xc0028aac
c0014180:	e8 d2 4f 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014185:	83 c4 10             	add    esp,0x10
c0014188:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001418d:	5a                   	pop    edx
c001418e:	5b                   	pop    ebx
c001418f:	5e                   	pop    esi
c0014190:	c3                   	ret    
c0014191:	83 ec 0c             	sub    esp,0xc
c0014194:	56                   	push   esi
c0014195:	e8 ce fb ff ff       	call   c0013d68 <Device::getName()>
c001419a:	83 c4 10             	add    esp,0x10
c001419d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00141a0:	75 ba                	jne    c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141a2:	83 fb 0f             	cmp    ebx,0xf
c00141a5:	7f 29                	jg     c00141d0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00141a7:	0f b6 9b 60 b0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4fa0]
c00141ae:	eb ac                	jmp    c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00141b3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141b7:	8d 04 86             	lea    eax,[esi+eax*4]
c00141ba:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00141c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141c4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00141ca:	89 d8                	mov    eax,ebx
c00141cc:	5a                   	pop    edx
c00141cd:	5b                   	pop    ebx
c00141ce:	5e                   	pop    esi
c00141cf:	c3                   	ret    
c00141d0:	83 ec 0c             	sub    esp,0xc
c00141d3:	68 74 8a 02 c0       	push   0xc0028a74
c00141d8:	e8 7a 4f 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	e9 77 ff ff ff       	jmp    c001415c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00141e5:	90                   	nop

c00141e6 <InterruptController::clearAllHandlers(int, bool)>:
c00141e6:	56                   	push   esi
c00141e7:	53                   	push   ebx
c00141e8:	52                   	push   edx
c00141e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141f1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00141f6:	75 61                	jne    c0014259 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00141f8:	8d 46 20             	lea    eax,[esi+0x20]
c00141fb:	c1 e6 04             	shl    esi,0x4
c00141fe:	c1 e0 04             	shl    eax,0x4
c0014201:	01 de                	add    esi,ebx
c0014203:	01 d8                	add    eax,ebx
c0014205:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001420f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014219:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014223:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001422d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014237:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014241:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001424b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014255:	58                   	pop    eax
c0014256:	5b                   	pop    ebx
c0014257:	5e                   	pop    esi
c0014258:	c3                   	ret    
c0014259:	83 ec 0c             	sub    esp,0xc
c001425c:	53                   	push   ebx
c001425d:	e8 06 fb ff ff       	call   c0013d68 <Device::getName()>
c0014262:	83 c4 10             	add    esp,0x10
c0014265:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014268:	75 8e                	jne    c00141f8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001426a:	83 fe 0f             	cmp    esi,0xf
c001426d:	7f 09                	jg     c0014278 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001426f:	0f b6 b6 60 b0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4fa0]
c0014276:	eb 80                	jmp    c00141f8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014278:	83 ec 0c             	sub    esp,0xc
c001427b:	68 e8 8a 02 c0       	push   0xc0028ae8
c0014280:	e8 d2 4e 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	e9 6b ff ff ff       	jmp    c00141f8 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001428d:	90                   	nop

c001428e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001428e:	56                   	push   esi
c001428f:	53                   	push   ebx
c0014290:	52                   	push   edx
c0014291:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014295:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014299:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001429e:	75 3a                	jne    c00142da <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00142a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142a4:	8d 50 20             	lea    edx,[eax+0x20]
c00142a7:	c1 e2 04             	shl    edx,0x4
c00142aa:	8d 04 16             	lea    eax,[esi+edx*1]
c00142ad:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00142b1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00142b7:	74 0b                	je     c00142c4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00142b9:	83 c0 04             	add    eax,0x4
c00142bc:	39 d0                	cmp    eax,edx
c00142be:	75 f1                	jne    c00142b1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00142c0:	58                   	pop    eax
c00142c1:	5b                   	pop    ebx
c00142c2:	5e                   	pop    esi
c00142c3:	c3                   	ret    
c00142c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142ce:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00142d8:	eb df                	jmp    c00142b9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00142da:	83 ec 0c             	sub    esp,0xc
c00142dd:	56                   	push   esi
c00142de:	e8 85 fa ff ff       	call   c0013d68 <Device::getName()>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142e9:	75 b5                	jne    c00142a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00142eb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00142f0:	7f 11                	jg     c0014303 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00142f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142f6:	0f b6 80 60 b0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4fa0]
c00142fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014301:	eb 9d                	jmp    c00142a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	68 e8 8a 02 c0       	push   0xc0028ae8
c001430b:	e8 47 4e 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	eb 8b                	jmp    c00142a0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014315 <nmiHandler(regs*, void*)>:
c0014315:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001431a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001431e:	e9 e9 a8 ff ff       	jmp    c000ec0c <Computer::handleNMI()>

c0014323 <int_handler>:
c0014323:	55                   	push   ebp
c0014324:	57                   	push   edi
c0014325:	56                   	push   esi
c0014326:	53                   	push   ebx
c0014327:	83 ec 0c             	sub    esp,0xc
c001432a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001432e:	80 3d 94 c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c894,0x0
c0014335:	74 0b                	je     c0014342 <int_handler+0x1f>
c0014337:	fa                   	cli    
c0014338:	f4                   	hlt    
c0014339:	80 3d 94 c8 02 c0 00 	cmp    BYTE PTR ds:0xc002c894,0x0
c0014340:	75 f5                	jne    c0014337 <int_handler+0x14>
c0014342:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0014347:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001434a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014350:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014356:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014359:	83 f8 17             	cmp    eax,0x17
c001435c:	77 13                	ja     c0014371 <int_handler+0x4e>
c001435e:	83 ec 08             	sub    esp,0x8
c0014361:	8b 17                	mov    edx,DWORD PTR [edi]
c0014363:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014366:	0f b6 c0             	movzx  eax,al
c0014369:	50                   	push   eax
c001436a:	57                   	push   edi
c001436b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001436e:	83 c4 10             	add    esp,0x10
c0014371:	83 c3 15             	add    ebx,0x15
c0014374:	c1 e3 04             	shl    ebx,0x4
c0014377:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001437b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014382:	31 db                	xor    ebx,ebx
c0014384:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014388:	85 c0                	test   eax,eax
c001438a:	74 13                	je     c001439f <int_handler+0x7c>
c001438c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001438f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014393:	74 1c                	je     c00143b1 <int_handler+0x8e>
c0014395:	83 ec 08             	sub    esp,0x8
c0014398:	52                   	push   edx
c0014399:	56                   	push   esi
c001439a:	ff d0                	call   eax
c001439c:	83 c4 10             	add    esp,0x10
c001439f:	43                   	inc    ebx
c00143a0:	83 fb 04             	cmp    ebx,0x4
c00143a3:	75 df                	jne    c0014384 <int_handler+0x61>
c00143a5:	83 c4 0c             	add    esp,0xc
c00143a8:	31 c0                	xor    eax,eax
c00143aa:	5b                   	pop    ebx
c00143ab:	31 d2                	xor    edx,edx
c00143ad:	5e                   	pop    esi
c00143ae:	5f                   	pop    edi
c00143af:	5d                   	pop    ebp
c00143b0:	c3                   	ret    
c00143b1:	83 ec 08             	sub    esp,0x8
c00143b4:	52                   	push   edx
c00143b5:	56                   	push   esi
c00143b6:	ff d0                	call   eax
c00143b8:	83 c4 10             	add    esp,0x10
c00143bb:	83 c4 0c             	add    esp,0xc
c00143be:	5b                   	pop    ebx
c00143bf:	5e                   	pop    esi
c00143c0:	5f                   	pop    edi
c00143c1:	5d                   	pop    ebp
c00143c2:	c3                   	ret    
c00143c3:	90                   	nop

c00143c4 <InterruptController::InterruptController(char const*)>:
c00143c4:	83 ec 1c             	sub    esp,0x1c
c00143c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143cb:	83 ec 08             	sub    esp,0x8
c00143ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143d2:	50                   	push   eax
c00143d3:	e8 94 f8 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	ba 1c 8d 02 c0       	mov    edx,0xc0028d1c
c00143e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e4:	89 10                	mov    DWORD PTR [eax],edx
c00143e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ea:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00143f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00143fc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014404:	7f 5e                	jg     c0014464 <InterruptController::InterruptController(char const*)+0xa0>
c0014406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001440e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014413:	7f 49                	jg     c001445e <InterruptController::InterruptController(char const*)+0x9a>
c0014415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014419:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001441d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014424:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014428:	01 ca                	add    edx,ecx
c001442a:	83 c2 54             	add    edx,0x54
c001442d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014439:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001443d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014448:	01 ca                	add    edx,ecx
c001444a:	81 c2 54 04 00 00    	add    edx,0x454
c0014450:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014458:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001445c:	eb b0                	jmp    c001440e <InterruptController::InterruptController(char const*)+0x4a>
c001445e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014462:	eb 98                	jmp    c00143fc <InterruptController::InterruptController(char const*)+0x38>
c0014464:	90                   	nop
c0014465:	83 c4 1c             	add    esp,0x1c
c0014468:	c3                   	ret    
c0014469:	90                   	nop

c001446a <InterruptController::~InterruptController()>:
c001446a:	83 ec 0c             	sub    esp,0xc
c001446d:	ba 1c 8d 02 c0       	mov    edx,0xc0028d1c
c0014472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014476:	89 10                	mov    DWORD PTR [eax],edx
c0014478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001447c:	83 ec 0c             	sub    esp,0xc
c001447f:	50                   	push   eax
c0014480:	e8 c9 f4 ff ff       	call   c001394e <Device::~Device()>
c0014485:	83 c4 10             	add    esp,0x10
c0014488:	90                   	nop
c0014489:	83 c4 0c             	add    esp,0xc
c001448c:	c3                   	ret    
c001448d:	90                   	nop

c001448e <InterruptController::~InterruptController()>:
c001448e:	83 ec 0c             	sub    esp,0xc
c0014491:	83 ec 0c             	sub    esp,0xc
c0014494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014498:	e8 cd ff ff ff       	call   c001446a <InterruptController::~InterruptController()>
c001449d:	83 c4 10             	add    esp,0x10
c00144a0:	83 ec 08             	sub    esp,0x8
c00144a3:	68 58 21 00 00       	push   0x2158
c00144a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144ac:	e8 fc e0 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	83 c4 0c             	add    esp,0xc
c00144b7:	c3                   	ret    

c00144b8 <displayDebugInfo(regs*)>:
c00144b8:	55                   	push   ebp
c00144b9:	57                   	push   edi
c00144ba:	56                   	push   esi
c00144bb:	53                   	push   ebx
c00144bc:	83 ec 24             	sub    esp,0x24
c00144bf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00144c3:	0f 20 c2             	mov    edx,cr0
c00144c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00144ca:	0f 20 d7             	mov    edi,cr2
c00144cd:	0f 20 de             	mov    esi,cr3
c00144d0:	0f 20 e5             	mov    ebp,cr4
c00144d3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00144d6:	68 22 8b 02 c0       	push   0xc0028b22
c00144db:	e8 ad e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00144e0:	58                   	pop    eax
c00144e1:	5a                   	pop    edx
c00144e2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144e5:	68 2d 8b 02 c0       	push   0xc0028b2d
c00144ea:	e8 9e e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00144ef:	59                   	pop    ecx
c00144f0:	58                   	pop    eax
c00144f1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00144f4:	68 38 8b 02 c0       	push   0xc0028b38
c00144f9:	e8 8f e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00144fe:	58                   	pop    eax
c00144ff:	5a                   	pop    edx
c0014500:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014503:	68 43 8b 02 c0       	push   0xc0028b43
c0014508:	e8 80 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001450d:	59                   	pop    ecx
c001450e:	58                   	pop    eax
c001450f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014512:	68 4e 8b 02 c0       	push   0xc0028b4e
c0014517:	e8 71 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001451c:	58                   	pop    eax
c001451d:	5a                   	pop    edx
c001451e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014521:	68 59 8b 02 c0       	push   0xc0028b59
c0014526:	e8 62 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001452b:	59                   	pop    ecx
c001452c:	58                   	pop    eax
c001452d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014530:	68 64 8b 02 c0       	push   0xc0028b64
c0014535:	e8 53 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001453a:	58                   	pop    eax
c001453b:	5a                   	pop    edx
c001453c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001453f:	68 6f 8b 02 c0       	push   0xc0028b6f
c0014544:	e8 44 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014549:	59                   	pop    ecx
c001454a:	58                   	pop    eax
c001454b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001454e:	68 7a 8b 02 c0       	push   0xc0028b7a
c0014553:	e8 35 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014558:	58                   	pop    eax
c0014559:	5a                   	pop    edx
c001455a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001455d:	68 89 8b 02 c0       	push   0xc0028b89
c0014562:	e8 26 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014567:	59                   	pop    ecx
c0014568:	58                   	pop    eax
c0014569:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001456c:	68 94 8b 02 c0       	push   0xc0028b94
c0014571:	e8 17 e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014576:	58                   	pop    eax
c0014577:	5a                   	pop    edx
c0014578:	57                   	push   edi
c0014579:	68 9f 8b 02 c0       	push   0xc0028b9f
c001457e:	e8 0a e1 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014583:	59                   	pop    ecx
c0014584:	58                   	pop    eax
c0014585:	56                   	push   esi
c0014586:	68 aa 8b 02 c0       	push   0xc0028baa
c001458b:	e8 fd e0 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014590:	58                   	pop    eax
c0014591:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014596:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001459c:	e8 ae c2 ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c00145a1:	58                   	pop    eax
c00145a2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00145a5:	5a                   	pop    edx
c00145a6:	c1 e0 05             	shl    eax,0x5
c00145a9:	05 c0 ad 02 c0       	add    eax,0xc002adc0
c00145ae:	50                   	push   eax
c00145af:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00145b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ba:	e8 af c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00145bf:	59                   	pop    ecx
c00145c0:	58                   	pop    eax
c00145c1:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00145c6:	68 b5 8b 02 c0       	push   0xc0028bb5
c00145cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145d1:	e8 98 c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00145d6:	58                   	pop    eax
c00145d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145dc:	5a                   	pop    edx
c00145dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00145e0:	83 c0 0c             	add    eax,0xc
c00145e3:	50                   	push   eax
c00145e4:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00145e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ef:	e8 7a c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00145f4:	59                   	pop    ecx
c00145f5:	58                   	pop    eax
c00145f6:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00145fb:	68 be 8b 02 c0       	push   0xc0028bbe
c0014600:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014606:	e8 63 c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001460b:	58                   	pop    eax
c001460c:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014611:	5a                   	pop    edx
c0014612:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014615:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001461b:	e8 74 c6 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014620:	59                   	pop    ecx
c0014621:	58                   	pop    eax
c0014622:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014627:	68 c6 8b 02 c0       	push   0xc0028bc6
c001462c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014632:	e8 37 c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014637:	58                   	pop    eax
c0014638:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001463d:	5a                   	pop    edx
c001463e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014641:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014647:	e8 48 c6 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001464c:	59                   	pop    ecx
c001464d:	58                   	pop    eax
c001464e:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014653:	68 ce 8b 02 c0       	push   0xc0028bce
c0014658:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001465e:	e8 0b c6 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014663:	58                   	pop    eax
c0014664:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014669:	5a                   	pop    edx
c001466a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001466d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014673:	e8 1c c6 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014678:	59                   	pop    ecx
c0014679:	58                   	pop    eax
c001467a:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001467f:	68 d6 8b 02 c0       	push   0xc0028bd6
c0014684:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001468a:	e8 df c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001468f:	58                   	pop    eax
c0014690:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014695:	5a                   	pop    edx
c0014696:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014699:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469f:	e8 f0 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00146a4:	59                   	pop    ecx
c00146a5:	58                   	pop    eax
c00146a6:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00146ab:	68 de 8b 02 c0       	push   0xc0028bde
c00146b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b6:	e8 b3 c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00146bb:	58                   	pop    eax
c00146bc:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00146c1:	5a                   	pop    edx
c00146c2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146cb:	e8 c4 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00146d0:	59                   	pop    ecx
c00146d1:	58                   	pop    eax
c00146d2:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00146d7:	68 e6 8b 02 c0       	push   0xc0028be6
c00146dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e2:	e8 87 c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00146e7:	58                   	pop    eax
c00146e8:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00146ed:	5a                   	pop    edx
c00146ee:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00146f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f7:	e8 98 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00146fc:	59                   	pop    ecx
c00146fd:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014702:	5b                   	pop    ebx
c0014703:	68 ee 8b 02 c0       	push   0xc0028bee
c0014708:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001470e:	e8 5b c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014713:	58                   	pop    eax
c0014714:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014719:	5a                   	pop    edx
c001471a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001471e:	52                   	push   edx
c001471f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014725:	e8 6a c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001472a:	59                   	pop    ecx
c001472b:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014730:	5b                   	pop    ebx
c0014731:	68 f7 8b 02 c0       	push   0xc0028bf7
c0014736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473c:	e8 2d c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014741:	58                   	pop    eax
c0014742:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014747:	5a                   	pop    edx
c0014748:	57                   	push   edi
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 40 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014754:	59                   	pop    ecx
c0014755:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001475a:	5b                   	pop    ebx
c001475b:	68 ff 8b 02 c0       	push   0xc0028bff
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 03 c5 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001476b:	5f                   	pop    edi
c001476c:	58                   	pop    eax
c001476d:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014772:	56                   	push   esi
c0014773:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014779:	e8 16 c5 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001477e:	58                   	pop    eax
c001477f:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014784:	5a                   	pop    edx
c0014785:	68 07 8c 02 c0       	push   0xc0028c07
c001478a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014790:	e8 d9 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014795:	59                   	pop    ecx
c0014796:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001479b:	5b                   	pop    ebx
c001479c:	55                   	push   ebp
c001479d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a3:	e8 ec c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00147a8:	5e                   	pop    esi
c00147a9:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00147ae:	5f                   	pop    edi
c00147af:	68 0f 8c 02 c0       	push   0xc0028c0f
c00147b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ba:	e8 af c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00147bf:	0f 21 c0             	mov    eax,db0
c00147c2:	5d                   	pop    ebp
c00147c3:	5a                   	pop    edx
c00147c4:	50                   	push   eax
c00147c5:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00147ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d0:	e8 bf c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00147d5:	59                   	pop    ecx
c00147d6:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00147db:	5b                   	pop    ebx
c00147dc:	68 18 8c 02 c0       	push   0xc0028c18
c00147e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e7:	e8 82 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00147ec:	0f 21 c8             	mov    eax,db1
c00147ef:	5e                   	pop    esi
c00147f0:	5f                   	pop    edi
c00147f1:	50                   	push   eax
c00147f2:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00147f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fd:	e8 92 c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014802:	5d                   	pop    ebp
c0014803:	58                   	pop    eax
c0014804:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014809:	68 20 8c 02 c0       	push   0xc0028c20
c001480e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014814:	e8 55 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014819:	0f 21 d0             	mov    eax,db2
c001481c:	5a                   	pop    edx
c001481d:	59                   	pop    ecx
c001481e:	50                   	push   eax
c001481f:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014824:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482a:	e8 65 c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001482f:	5b                   	pop    ebx
c0014830:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014835:	5e                   	pop    esi
c0014836:	68 28 8c 02 c0       	push   0xc0028c28
c001483b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014841:	e8 28 c4 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014846:	0f 21 d8             	mov    eax,db3
c0014849:	5f                   	pop    edi
c001484a:	5d                   	pop    ebp
c001484b:	50                   	push   eax
c001484c:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014851:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014857:	e8 38 c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001485c:	58                   	pop    eax
c001485d:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0014862:	5a                   	pop    edx
c0014863:	68 30 8c 02 c0       	push   0xc0028c30
c0014868:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486e:	e8 fb c3 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0014873:	0f 21 f0             	mov    eax,db6
c0014876:	59                   	pop    ecx
c0014877:	5b                   	pop    ebx
c0014878:	50                   	push   eax
c0014879:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001487e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014884:	e8 0b c4 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0014889:	5e                   	pop    esi
c001488a:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001488f:	5f                   	pop    edi
c0014890:	68 38 8c 02 c0       	push   0xc0028c38
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 ce c3 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00148a0:	0f 21 f8             	mov    eax,db7
c00148a3:	5d                   	pop    ebp
c00148a4:	5a                   	pop    edx
c00148a5:	50                   	push   eax
c00148a6:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00148ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b1:	e8 de c3 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00148b6:	fa                   	cli    
c00148b7:	f4                   	hlt    
c00148b8:	83 c4 10             	add    esp,0x10
c00148bb:	eb fe                	jmp    c00148bb <displayDebugInfo(regs*)+0x403>

c00148bd <x87EmulHandler(regs*, void*)>:
c00148bd:	53                   	push   ebx
c00148be:	83 ec 14             	sub    esp,0x14
c00148c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148c5:	53                   	push   ebx
c00148c6:	e8 8d 95 00 00       	call   c001de58 <Vm::x87Handler(regs*)>
c00148cb:	83 c4 10             	add    esp,0x10
c00148ce:	84 c0                	test   al,al
c00148d0:	74 05                	je     c00148d7 <x87EmulHandler(regs*, void*)+0x1a>
c00148d2:	83 c4 08             	add    esp,0x8
c00148d5:	5b                   	pop    ebx
c00148d6:	c3                   	ret    
c00148d7:	83 ec 0c             	sub    esp,0xc
c00148da:	68 40 8c 02 c0       	push   0xc0028c40
c00148df:	e8 a9 dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00148e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148e7:	e8 cc fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c00148ec <gpFault(regs*, void*)>:
c00148ec:	53                   	push   ebx
c00148ed:	83 ec 14             	sub    esp,0x14
c00148f0:	c7 05 10 bf 02 c0 e4 d1 01 c0 	mov    DWORD PTR ds:0xc002bf10,0xc001d1e4
c00148fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148fe:	53                   	push   ebx
c00148ff:	e8 e0 88 00 00       	call   c001d1e4 <Vm::faultHandler(regs*)>
c0014904:	83 c4 10             	add    esp,0x10
c0014907:	84 c0                	test   al,al
c0014909:	74 05                	je     c0014910 <gpFault(regs*, void*)+0x24>
c001490b:	83 c4 08             	add    esp,0x8
c001490e:	5b                   	pop    ebx
c001490f:	c3                   	ret    
c0014910:	83 ec 0c             	sub    esp,0xc
c0014913:	68 56 8c 02 c0       	push   0xc0028c56
c0014918:	e8 70 dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001491d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014920:	e8 93 fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c0014925 <pgFault(regs*, void*)>:
c0014925:	83 ec 18             	sub    esp,0x18
c0014928:	68 71 8c 02 c0       	push   0xc0028c71
c001492d:	e8 5b dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014932:	58                   	pop    eax
c0014933:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014937:	e8 7c fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c001493c <otherISRHandler(regs*, void*)>:
c001493c:	53                   	push   ebx
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014944:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014947:	50                   	push   eax
c0014948:	50                   	push   eax
c0014949:	68 7e 8c 02 c0       	push   0xc0028c7e
c001494e:	e8 3a dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014956:	e8 5d fb ff ff       	call   c00144b8 <displayDebugInfo(regs*)>

c001495b <opcodeFault(regs*, void*)>:
c001495b:	55                   	push   ebp
c001495c:	89 e5                	mov    ebp,esp
c001495e:	56                   	push   esi
c001495f:	53                   	push   ebx
c0014960:	83 ec 40             	sub    esp,0x40
c0014963:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0014968:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001496e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014974:	84 c0                	test   al,al
c0014976:	74 24                	je     c001499c <opcodeFault(regs*, void*)+0x41>
c0014978:	83 ec 0c             	sub    esp,0xc
c001497b:	68 9c 8c 02 c0       	push   0xc0028c9c
c0014980:	e8 08 dd ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001498b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001498e:	8d 50 19             	lea    edx,[eax+0x19]
c0014991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014994:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014997:	e9 77 05 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c001499c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149a5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149a9:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149b9:	8a 00                	mov    al,BYTE PTR [eax]
c00149bb:	3c f0                	cmp    al,0xf0
c00149bd:	75 17                	jne    c00149d6 <opcodeFault(regs*, void*)+0x7b>
c00149bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149c8:	8d 50 01             	lea    edx,[eax+0x1]
c00149cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149d1:	e9 da 00 00 00       	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c00149d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149d9:	8a 00                	mov    al,BYTE PTR [eax]
c00149db:	3c f2                	cmp    al,0xf2
c00149dd:	74 09                	je     c00149e8 <opcodeFault(regs*, void*)+0x8d>
c00149df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e2:	8a 00                	mov    al,BYTE PTR [eax]
c00149e4:	3c f3                	cmp    al,0xf3
c00149e6:	75 1b                	jne    c0014a03 <opcodeFault(regs*, void*)+0xa8>
c00149e8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149ec:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149f5:	8d 50 01             	lea    edx,[eax+0x1]
c00149f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149fe:	e9 ad 00 00 00       	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a06:	8a 00                	mov    al,BYTE PTR [eax]
c0014a08:	3c 66                	cmp    al,0x66
c0014a0a:	75 1f                	jne    c0014a2b <opcodeFault(regs*, void*)+0xd0>
c0014a0c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a10:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a14:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a1d:	8d 50 01             	lea    edx,[eax+0x1]
c0014a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a23:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a26:	e9 85 00 00 00       	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014a30:	3c 67                	cmp    al,0x67
c0014a32:	75 18                	jne    c0014a4c <opcodeFault(regs*, void*)+0xf1>
c0014a34:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a38:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a3e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a41:	8d 50 01             	lea    edx,[eax+0x1]
c0014a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a47:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a4a:	eb 64                	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014a51:	3c 2e                	cmp    al,0x2e
c0014a53:	74 09                	je     c0014a5e <opcodeFault(regs*, void*)+0x103>
c0014a55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a58:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5a:	3c 3e                	cmp    al,0x3e
c0014a5c:	75 18                	jne    c0014a76 <opcodeFault(regs*, void*)+0x11b>
c0014a5e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a62:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a71:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a74:	eb 3a                	jmp    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a79:	8a 00                	mov    al,BYTE PTR [eax]
c0014a7b:	3c 36                	cmp    al,0x36
c0014a7d:	74 1b                	je     c0014a9a <opcodeFault(regs*, void*)+0x13f>
c0014a7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a82:	8a 00                	mov    al,BYTE PTR [eax]
c0014a84:	3c 26                	cmp    al,0x26
c0014a86:	74 12                	je     c0014a9a <opcodeFault(regs*, void*)+0x13f>
c0014a88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8d:	3c 64                	cmp    al,0x64
c0014a8f:	74 09                	je     c0014a9a <opcodeFault(regs*, void*)+0x13f>
c0014a91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a94:	8a 00                	mov    al,BYTE PTR [eax]
c0014a96:	3c 65                	cmp    al,0x65
c0014a98:	75 16                	jne    c0014ab0 <opcodeFault(regs*, void*)+0x155>
c0014a9a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0014aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ab0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ab3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ab5:	3c 0f                	cmp    al,0xf
c0014ab7:	0f 85 ad 00 00 00    	jne    c0014b6a <opcodeFault(regs*, void*)+0x20f>
c0014abd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ac0:	40                   	inc    eax
c0014ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac3:	3c c2                	cmp    al,0xc2
c0014ac5:	74 0e                	je     c0014ad5 <opcodeFault(regs*, void*)+0x17a>
c0014ac7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aca:	40                   	inc    eax
c0014acb:	8a 00                	mov    al,BYTE PTR [eax]
c0014acd:	3c c3                	cmp    al,0xc3
c0014acf:	0f 85 95 00 00 00    	jne    c0014b6a <opcodeFault(regs*, void*)+0x20f>
c0014ad5:	83 ec 0c             	sub    esp,0xc
c0014ad8:	68 bf 8c 02 c0       	push   0xc0028cbf
c0014add:	e8 ab db ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014aeb:	8d 50 01             	lea    edx,[eax+0x1]
c0014aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014af4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014afa:	8a 00                	mov    al,BYTE PTR [eax]
c0014afc:	8d 50 fe             	lea    edx,[eax-0x2]
c0014aff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b02:	88 10                	mov    BYTE PTR [eax],dl
c0014b04:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b07:	50                   	push   eax
c0014b08:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b0b:	50                   	push   eax
c0014b0c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b0f:	50                   	push   eax
c0014b10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b13:	e8 44 44 00 00       	call   c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b18:	83 c4 10             	add    esp,0x10
c0014b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b1e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b21:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b24:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b27:	01 d0                	add    eax,edx
c0014b29:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b32:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b35:	48                   	dec    eax
c0014b36:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b3f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b45:	83 ec 04             	sub    esp,0x4
c0014b48:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b4b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b4e:	50                   	push   eax
c0014b4f:	e8 15 b6 fe ff       	call   c0000169 <voodooXADD>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b5d:	01 c2                	add    edx,eax
c0014b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b65:	e9 a9 03 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c0014b6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b6f:	3c 0f                	cmp    al,0xf
c0014b71:	0f 85 8b 01 00 00    	jne    c0014d02 <opcodeFault(regs*, void*)+0x3a7>
c0014b77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b7a:	40                   	inc    eax
c0014b7b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7d:	3c c7                	cmp    al,0xc7
c0014b7f:	0f 86 7d 01 00 00    	jbe    c0014d02 <opcodeFault(regs*, void*)+0x3a7>
c0014b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b88:	40                   	inc    eax
c0014b89:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8b:	3c cf                	cmp    al,0xcf
c0014b8d:	0f 87 6f 01 00 00    	ja     c0014d02 <opcodeFault(regs*, void*)+0x3a7>
c0014b93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b96:	40                   	inc    eax
c0014b97:	8a 00                	mov    al,BYTE PTR [eax]
c0014b99:	83 c0 38             	add    eax,0x38
c0014b9c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014b9f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ba3:	75 0b                	jne    c0014bb0 <opcodeFault(regs*, void*)+0x255>
c0014ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bae:	eb 75                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bb0:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bb4:	75 0b                	jne    c0014bc1 <opcodeFault(regs*, void*)+0x266>
c0014bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bbc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bbf:	eb 64                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bc1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bc5:	75 0b                	jne    c0014bd2 <opcodeFault(regs*, void*)+0x277>
c0014bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bca:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bcd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bd0:	eb 53                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bd2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014bd6:	75 0b                	jne    c0014be3 <opcodeFault(regs*, void*)+0x288>
c0014bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014bde:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014be1:	eb 42                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014be3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014be7:	75 0b                	jne    c0014bf4 <opcodeFault(regs*, void*)+0x299>
c0014be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bec:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bef:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bf2:	eb 31                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014bf4:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014bf8:	75 0b                	jne    c0014c05 <opcodeFault(regs*, void*)+0x2aa>
c0014bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c03:	eb 20                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014c05:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c09:	75 0b                	jne    c0014c16 <opcodeFault(regs*, void*)+0x2bb>
c0014c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c11:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c14:	eb 0f                	jmp    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014c16:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c1a:	75 09                	jne    c0014c25 <opcodeFault(regs*, void*)+0x2ca>
c0014c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c22:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c25:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c29:	74 10                	je     c0014c3b <opcodeFault(regs*, void*)+0x2e0>
c0014c2b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c32:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c39:	eb 2d                	jmp    c0014c68 <opcodeFault(regs*, void*)+0x30d>
c0014c3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c3e:	c1 e0 18             	shl    eax,0x18
c0014c41:	89 c2                	mov    edx,eax
c0014c43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c46:	c1 e0 08             	shl    eax,0x8
c0014c49:	25 00 00 ff 00       	and    eax,0xff0000
c0014c4e:	09 c2                	or     edx,eax
c0014c50:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c53:	c1 e8 08             	shr    eax,0x8
c0014c56:	25 00 ff 00 00       	and    eax,0xff00
c0014c5b:	09 c2                	or     edx,eax
c0014c5d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c60:	c1 e8 18             	shr    eax,0x18
c0014c63:	09 d0                	or     eax,edx
c0014c65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c68:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c6c:	75 0b                	jne    c0014c79 <opcodeFault(regs*, void*)+0x31e>
c0014c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c71:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c74:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c77:	eb 75                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014c79:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c7d:	75 0b                	jne    c0014c8a <opcodeFault(regs*, void*)+0x32f>
c0014c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c85:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c88:	eb 64                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014c8a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c8e:	75 0b                	jne    c0014c9b <opcodeFault(regs*, void*)+0x340>
c0014c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c96:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014c99:	eb 53                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014c9b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014c9f:	75 0b                	jne    c0014cac <opcodeFault(regs*, void*)+0x351>
c0014ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014caa:	eb 42                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cac:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cb0:	75 0b                	jne    c0014cbd <opcodeFault(regs*, void*)+0x362>
c0014cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb8:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014cbb:	eb 31                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cbd:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014cc1:	75 0b                	jne    c0014cce <opcodeFault(regs*, void*)+0x373>
c0014cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ccc:	eb 20                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cce:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cd2:	75 0b                	jne    c0014cdf <opcodeFault(regs*, void*)+0x384>
c0014cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cda:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014cdd:	eb 0f                	jmp    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014cdf:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014ce3:	75 09                	jne    c0014cee <opcodeFault(regs*, void*)+0x393>
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ceb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf4:	8d 50 02             	lea    edx,[eax+0x2]
c0014cf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfd:	e9 11 02 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c0014d02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d05:	8a 00                	mov    al,BYTE PTR [eax]
c0014d07:	3c 0f                	cmp    al,0xf
c0014d09:	0f 85 76 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d12:	40                   	inc    eax
c0014d13:	8a 00                	mov    al,BYTE PTR [eax]
c0014d15:	3c c7                	cmp    al,0xc7
c0014d17:	0f 85 68 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d26:	8d 50 01             	lea    edx,[eax+0x1]
c0014d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d2f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d32:	50                   	push   eax
c0014d33:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d36:	50                   	push   eax
c0014d37:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d3a:	50                   	push   eax
c0014d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d3e:	e8 19 42 00 00       	call   c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d43:	83 c4 10             	add    esp,0x10
c0014d46:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d49:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d4c:	83 f0 01             	xor    eax,0x1
c0014d4f:	84 c0                	test   al,al
c0014d51:	0f 84 2e 01 00 00    	je     c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d57:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d5a:	3c 01                	cmp    al,0x1
c0014d5c:	0f 85 23 01 00 00    	jne    c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d62:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d65:	83 f0 01             	xor    eax,0x1
c0014d68:	84 c0                	test   al,al
c0014d6a:	0f 84 15 01 00 00    	je     c0014e85 <opcodeFault(regs*, void*)+0x52a>
c0014d70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d76:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d79:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d80:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d83:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d86:	89 c2                	mov    edx,eax
c0014d88:	b8 00 00 00 00       	mov    eax,0x0
c0014d8d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d90:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d96:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d99:	ba 00 00 00 00       	mov    edx,0x0
c0014d9e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014da1:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014daa:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dad:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014db4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014db7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dba:	89 c2                	mov    edx,eax
c0014dbc:	b8 00 00 00 00       	mov    eax,0x0
c0014dc1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dc4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dcd:	ba 00 00 00 00       	mov    edx,0x0
c0014dd2:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014dd5:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014dd8:	e8 c0 73 00 00       	call   c001c19d <lockScheduler()>
c0014ddd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014de0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014de3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014de5:	89 c1                	mov    ecx,eax
c0014de7:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dea:	89 cb                	mov    ebx,ecx
c0014dec:	89 d0                	mov    eax,edx
c0014dee:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014df1:	89 c6                	mov    esi,eax
c0014df3:	89 f0                	mov    eax,esi
c0014df5:	09 d8                	or     eax,ebx
c0014df7:	85 c0                	test   eax,eax
c0014df9:	75 21                	jne    c0014e1c <opcodeFault(regs*, void*)+0x4c1>
c0014dfb:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014dfe:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e01:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e04:	89 01                	mov    DWORD PTR [ecx],eax
c0014e06:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e0f:	83 c8 40             	or     eax,0x40
c0014e12:	89 c2                	mov    edx,eax
c0014e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e17:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e1a:	eb 3e                	jmp    c0014e5a <opcodeFault(regs*, void*)+0x4ff>
c0014e1c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e1f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e24:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e27:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e2a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e30:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e33:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e36:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e39:	89 d0                	mov    eax,edx
c0014e3b:	31 d2                	xor    edx,edx
c0014e3d:	89 c3                	mov    ebx,eax
c0014e3f:	89 d6                	mov    esi,edx
c0014e41:	89 da                	mov    edx,ebx
c0014e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e46:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e4f:	83 e0 bf             	and    eax,0xffffffbf
c0014e52:	89 c2                	mov    edx,eax
c0014e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e57:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e5a:	e8 40 73 00 00       	call   c001c19f <unlockScheduler()>
c0014e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e62:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e65:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e68:	01 c2                	add    edx,eax
c0014e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e70:	83 ec 0c             	sub    esp,0xc
c0014e73:	68 ce 8c 02 c0       	push   0xc0028cce
c0014e78:	e8 10 d8 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014e7d:	83 c4 10             	add    esp,0x10
c0014e80:	e9 8e 00 00 00       	jmp    c0014f13 <opcodeFault(regs*, void*)+0x5b8>
c0014e85:	83 ec 0c             	sub    esp,0xc
c0014e88:	68 e1 8c 02 c0       	push   0xc0028ce1
c0014e8d:	e8 fb d7 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014e92:	83 c4 10             	add    esp,0x10
c0014e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e98:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ea1:	c1 e0 04             	shl    eax,0x4
c0014ea4:	01 d0                	add    eax,edx
c0014ea6:	83 c0 03             	add    eax,0x3
c0014ea9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eab:	0f b6 d8             	movzx  ebx,al
c0014eae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eba:	c1 e0 04             	shl    eax,0x4
c0014ebd:	01 d0                	add    eax,edx
c0014ebf:	83 c0 02             	add    eax,0x2
c0014ec2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec4:	0f b6 c8             	movzx  ecx,al
c0014ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eca:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ed3:	c1 e0 04             	shl    eax,0x4
c0014ed6:	01 d0                	add    eax,edx
c0014ed8:	40                   	inc    eax
c0014ed9:	8a 00                	mov    al,BYTE PTR [eax]
c0014edb:	0f b6 d0             	movzx  edx,al
c0014ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee1:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014eea:	c1 e0 04             	shl    eax,0x4
c0014eed:	01 f0                	add    eax,esi
c0014eef:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef1:	0f b6 c0             	movzx  eax,al
c0014ef4:	83 ec 0c             	sub    esp,0xc
c0014ef7:	53                   	push   ebx
c0014ef8:	51                   	push   ecx
c0014ef9:	52                   	push   edx
c0014efa:	50                   	push   eax
c0014efb:	68 f4 8c 02 c0       	push   0xc0028cf4
c0014f00:	e8 88 d7 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0014f05:	83 c4 20             	add    esp,0x20
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f0e:	e8 a5 f5 ff ff       	call   c00144b8 <displayDebugInfo(regs*)>
c0014f13:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f16:	5b                   	pop    ebx
c0014f17:	5e                   	pop    esi
c0014f18:	5d                   	pop    ebp
c0014f19:	c3                   	ret    

c0014f1a <displayProgramFault(char const*)>:
c0014f1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f22:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f28:	85 c0                	test   eax,eax
c0014f2a:	74 15                	je     c0014f41 <displayProgramFault(char const*)+0x27>
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	6a 04                	push   0x4
c0014f31:	6a 0f                	push   0xf
c0014f33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f37:	50                   	push   eax
c0014f38:	e8 f3 b9 ff ff       	call   c0010930 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014f3d:	83 c4 1c             	add    esp,0x1c
c0014f40:	c3                   	ret    
c0014f41:	c3                   	ret    

c0014f42 <setupInterruptController()>:
c0014f42:	55                   	push   ebp
c0014f43:	89 e5                	mov    ebp,esp
c0014f45:	53                   	push   ebx
c0014f46:	83 ec 24             	sub    esp,0x24
c0014f49:	b8 00 00 00 00       	mov    eax,0x0
c0014f4e:	85 c0                	test   eax,eax
c0014f50:	0f 95 c0             	setne  al
c0014f53:	84 c0                	test   al,al
c0014f55:	74 5b                	je     c0014fb2 <setupInterruptController()+0x70>
c0014f57:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014f5e:	83 ec 0c             	sub    esp,0xc
c0014f61:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014f64:	e8 57 a5 ff ff       	call   c000f4c0 <malloc>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	89 c3                	mov    ebx,eax
c0014f6e:	83 ec 0c             	sub    esp,0xc
c0014f71:	53                   	push   ebx
c0014f72:	e8 51 e8 00 00       	call   c00237c8 <APIC::APIC()>
c0014f77:	83 c4 10             	add    esp,0x10
c0014f7a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014f7d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014f80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014f83:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f85:	83 c0 08             	add    eax,0x8
c0014f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f8a:	6a 00                	push   0x0
c0014f8c:	6a 00                	push   0x0
c0014f8e:	6a 00                	push   0x0
c0014f90:	52                   	push   edx
c0014f91:	ff d0                	call   eax
c0014f93:	83 c4 10             	add    esp,0x10
c0014f96:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0014f9b:	83 ec 08             	sub    esp,0x8
c0014f9e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014fa1:	50                   	push   eax
c0014fa2:	e8 d5 ea ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0014fa7:	83 c4 10             	add    esp,0x10
c0014faa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fad:	e9 52 03 00 00       	jmp    c0015304 <setupInterruptController()+0x3c2>
c0014fb2:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0014fb7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014fbd:	83 e0 01             	and    eax,0x1
c0014fc0:	84 c0                	test   al,al
c0014fc2:	0f 95 c0             	setne  al
c0014fc5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014fc8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0014fcf:	83 ec 0c             	sub    esp,0xc
c0014fd2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014fd5:	e8 e6 a4 ff ff       	call   c000f4c0 <malloc>
c0014fda:	83 c4 10             	add    esp,0x10
c0014fdd:	89 c3                	mov    ebx,eax
c0014fdf:	83 ec 0c             	sub    esp,0xc
c0014fe2:	53                   	push   ebx
c0014fe3:	e8 38 ed 00 00       	call   c0023d20 <PIC::PIC()>
c0014fe8:	83 c4 10             	add    esp,0x10
c0014feb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014fee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014ff1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff6:	83 c0 08             	add    eax,0x8
c0014ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ffb:	6a 00                	push   0x0
c0014ffd:	6a 00                	push   0x0
c0014fff:	6a 00                	push   0x0
c0015001:	52                   	push   edx
c0015002:	ff d0                	call   eax
c0015004:	83 c4 10             	add    esp,0x10
c0015007:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001500b:	74 73                	je     c0015080 <setupInterruptController()+0x13e>
c001500d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015013:	8b 00                	mov    eax,DWORD PTR [eax]
c0015015:	83 c0 0c             	add    eax,0xc
c0015018:	8b 00                	mov    eax,DWORD PTR [eax]
c001501a:	6a 00                	push   0x0
c001501c:	6a 00                	push   0x0
c001501e:	6a 00                	push   0x0
c0015020:	52                   	push   edx
c0015021:	ff d0                	call   eax
c0015023:	83 c4 10             	add    esp,0x10
c0015026:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001502a:	74 15                	je     c0015041 <setupInterruptController()+0xff>
c001502c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001502f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015031:	83 c0 04             	add    eax,0x4
c0015034:	8b 00                	mov    eax,DWORD PTR [eax]
c0015036:	83 ec 0c             	sub    esp,0xc
c0015039:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001503c:	ff d0                	call   eax
c001503e:	83 c4 10             	add    esp,0x10
c0015041:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015048:	83 ec 0c             	sub    esp,0xc
c001504b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001504e:	e8 6d a4 ff ff       	call   c000f4c0 <malloc>
c0015053:	83 c4 10             	add    esp,0x10
c0015056:	89 c3                	mov    ebx,eax
c0015058:	83 ec 0c             	sub    esp,0xc
c001505b:	53                   	push   ebx
c001505c:	e8 67 e7 00 00       	call   c00237c8 <APIC::APIC()>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015067:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001506a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506d:	8b 00                	mov    eax,DWORD PTR [eax]
c001506f:	83 c0 08             	add    eax,0x8
c0015072:	8b 00                	mov    eax,DWORD PTR [eax]
c0015074:	6a 00                	push   0x0
c0015076:	6a 00                	push   0x0
c0015078:	6a 00                	push   0x0
c001507a:	52                   	push   edx
c001507b:	ff d0                	call   eax
c001507d:	83 c4 10             	add    esp,0x10
c0015080:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0015085:	83 ec 08             	sub    esp,0x8
c0015088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001508b:	50                   	push   eax
c001508c:	e8 eb e9 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015097:	8b 00                	mov    eax,DWORD PTR [eax]
c0015099:	83 c0 24             	add    eax,0x24
c001509c:	8b 00                	mov    eax,DWORD PTR [eax]
c001509e:	6a 00                	push   0x0
c00150a0:	68 3c 49 01 c0       	push   0xc001493c
c00150a5:	6a 00                	push   0x0
c00150a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150aa:	ff d0                	call   eax
c00150ac:	83 c4 10             	add    esp,0x10
c00150af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b4:	83 c0 24             	add    eax,0x24
c00150b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b9:	6a 00                	push   0x0
c00150bb:	68 3c 49 01 c0       	push   0xc001493c
c00150c0:	6a 01                	push   0x1
c00150c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150c5:	ff d0                	call   eax
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cf:	83 c0 24             	add    eax,0x24
c00150d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150d4:	6a 00                	push   0x0
c00150d6:	68 15 43 01 c0       	push   0xc0014315
c00150db:	6a 02                	push   0x2
c00150dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150e0:	ff d0                	call   eax
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ea:	83 c0 24             	add    eax,0x24
c00150ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00150ef:	6a 00                	push   0x0
c00150f1:	68 3c 49 01 c0       	push   0xc001493c
c00150f6:	6a 03                	push   0x3
c00150f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150fb:	ff d0                	call   eax
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015103:	8b 00                	mov    eax,DWORD PTR [eax]
c0015105:	83 c0 24             	add    eax,0x24
c0015108:	8b 00                	mov    eax,DWORD PTR [eax]
c001510a:	6a 00                	push   0x0
c001510c:	68 3c 49 01 c0       	push   0xc001493c
c0015111:	6a 04                	push   0x4
c0015113:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015116:	ff d0                	call   eax
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001511e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015120:	83 c0 24             	add    eax,0x24
c0015123:	8b 00                	mov    eax,DWORD PTR [eax]
c0015125:	6a 00                	push   0x0
c0015127:	68 3c 49 01 c0       	push   0xc001493c
c001512c:	6a 05                	push   0x5
c001512e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015131:	ff d0                	call   eax
c0015133:	83 c4 10             	add    esp,0x10
c0015136:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015139:	8b 00                	mov    eax,DWORD PTR [eax]
c001513b:	83 c0 24             	add    eax,0x24
c001513e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015140:	6a 00                	push   0x0
c0015142:	68 5b 49 01 c0       	push   0xc001495b
c0015147:	6a 06                	push   0x6
c0015149:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001514c:	ff d0                	call   eax
c001514e:	83 c4 10             	add    esp,0x10
c0015151:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015154:	8b 00                	mov    eax,DWORD PTR [eax]
c0015156:	83 c0 24             	add    eax,0x24
c0015159:	8b 00                	mov    eax,DWORD PTR [eax]
c001515b:	6a 00                	push   0x0
c001515d:	68 bd 48 01 c0       	push   0xc00148bd
c0015162:	6a 07                	push   0x7
c0015164:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015167:	ff d0                	call   eax
c0015169:	83 c4 10             	add    esp,0x10
c001516c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001516f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015171:	83 c0 24             	add    eax,0x24
c0015174:	8b 00                	mov    eax,DWORD PTR [eax]
c0015176:	6a 00                	push   0x0
c0015178:	68 30 41 01 c0       	push   0xc0014130
c001517d:	6a 08                	push   0x8
c001517f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015182:	ff d0                	call   eax
c0015184:	83 c4 10             	add    esp,0x10
c0015187:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001518a:	8b 00                	mov    eax,DWORD PTR [eax]
c001518c:	83 c0 24             	add    eax,0x24
c001518f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015191:	6a 00                	push   0x0
c0015193:	68 3c 49 01 c0       	push   0xc001493c
c0015198:	6a 09                	push   0x9
c001519a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001519d:	ff d0                	call   eax
c001519f:	83 c4 10             	add    esp,0x10
c00151a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a7:	83 c0 24             	add    eax,0x24
c00151aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ac:	6a 00                	push   0x0
c00151ae:	68 3c 49 01 c0       	push   0xc001493c
c00151b3:	6a 0a                	push   0xa
c00151b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151b8:	ff d0                	call   eax
c00151ba:	83 c4 10             	add    esp,0x10
c00151bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c2:	83 c0 24             	add    eax,0x24
c00151c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c7:	6a 00                	push   0x0
c00151c9:	68 3c 49 01 c0       	push   0xc001493c
c00151ce:	6a 0b                	push   0xb
c00151d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151d3:	ff d0                	call   eax
c00151d5:	83 c4 10             	add    esp,0x10
c00151d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151db:	8b 00                	mov    eax,DWORD PTR [eax]
c00151dd:	83 c0 24             	add    eax,0x24
c00151e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e2:	6a 00                	push   0x0
c00151e4:	68 3c 49 01 c0       	push   0xc001493c
c00151e9:	6a 0c                	push   0xc
c00151eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151ee:	ff d0                	call   eax
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151f8:	83 c0 24             	add    eax,0x24
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	6a 00                	push   0x0
c00151ff:	68 ec 48 01 c0       	push   0xc00148ec
c0015204:	6a 0d                	push   0xd
c0015206:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015209:	ff d0                	call   eax
c001520b:	83 c4 10             	add    esp,0x10
c001520e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015211:	8b 00                	mov    eax,DWORD PTR [eax]
c0015213:	83 c0 24             	add    eax,0x24
c0015216:	8b 00                	mov    eax,DWORD PTR [eax]
c0015218:	6a 00                	push   0x0
c001521a:	68 25 49 01 c0       	push   0xc0014925
c001521f:	6a 0e                	push   0xe
c0015221:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015224:	ff d0                	call   eax
c0015226:	83 c4 10             	add    esp,0x10
c0015229:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001522c:	8b 00                	mov    eax,DWORD PTR [eax]
c001522e:	83 c0 24             	add    eax,0x24
c0015231:	8b 00                	mov    eax,DWORD PTR [eax]
c0015233:	6a 00                	push   0x0
c0015235:	68 3c 49 01 c0       	push   0xc001493c
c001523a:	6a 0f                	push   0xf
c001523c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001523f:	ff d0                	call   eax
c0015241:	83 c4 10             	add    esp,0x10
c0015244:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015247:	8b 00                	mov    eax,DWORD PTR [eax]
c0015249:	83 c0 24             	add    eax,0x24
c001524c:	8b 00                	mov    eax,DWORD PTR [eax]
c001524e:	6a 00                	push   0x0
c0015250:	68 3c 49 01 c0       	push   0xc001493c
c0015255:	6a 10                	push   0x10
c0015257:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001525a:	ff d0                	call   eax
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015262:	8b 00                	mov    eax,DWORD PTR [eax]
c0015264:	83 c0 24             	add    eax,0x24
c0015267:	8b 00                	mov    eax,DWORD PTR [eax]
c0015269:	6a 00                	push   0x0
c001526b:	68 3c 49 01 c0       	push   0xc001493c
c0015270:	6a 11                	push   0x11
c0015272:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015275:	ff d0                	call   eax
c0015277:	83 c4 10             	add    esp,0x10
c001527a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527d:	8b 00                	mov    eax,DWORD PTR [eax]
c001527f:	83 c0 24             	add    eax,0x24
c0015282:	8b 00                	mov    eax,DWORD PTR [eax]
c0015284:	6a 00                	push   0x0
c0015286:	68 3c 49 01 c0       	push   0xc001493c
c001528b:	6a 12                	push   0x12
c001528d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015290:	ff d0                	call   eax
c0015292:	83 c4 10             	add    esp,0x10
c0015295:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015298:	8b 00                	mov    eax,DWORD PTR [eax]
c001529a:	83 c0 24             	add    eax,0x24
c001529d:	8b 00                	mov    eax,DWORD PTR [eax]
c001529f:	6a 00                	push   0x0
c00152a1:	68 3c 49 01 c0       	push   0xc001493c
c00152a6:	6a 13                	push   0x13
c00152a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ab:	ff d0                	call   eax
c00152ad:	83 c4 10             	add    esp,0x10
c00152b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b5:	83 c0 24             	add    eax,0x24
c00152b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ba:	6a 00                	push   0x0
c00152bc:	68 3c 49 01 c0       	push   0xc001493c
c00152c1:	6a 14                	push   0x14
c00152c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c6:	ff d0                	call   eax
c00152c8:	83 c4 10             	add    esp,0x10
c00152cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d0:	83 c0 24             	add    eax,0x24
c00152d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d5:	6a 00                	push   0x0
c00152d7:	68 3c 49 01 c0       	push   0xc001493c
c00152dc:	6a 1e                	push   0x1e
c00152de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152e1:	ff d0                	call   eax
c00152e3:	83 c4 10             	add    esp,0x10
c00152e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152eb:	83 c0 24             	add    eax,0x24
c00152ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f0:	6a 00                	push   0x0
c00152f2:	68 6a ab 01 c0       	push   0xc001ab6a
c00152f7:	6a 60                	push   0x60
c00152f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fc:	ff d0                	call   eax
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015304:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015307:	c9                   	leave  
c0015308:	c3                   	ret    
c0015309:	90                   	nop

c001530a <InterruptController::convertLegacyIRQNumber(int)>:
c001530a:	55                   	push   ebp
c001530b:	89 e5                	mov    ebp,esp
c001530d:	83 ec 08             	sub    esp,0x8
c0015310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015313:	83 ec 0c             	sub    esp,0xc
c0015316:	50                   	push   eax
c0015317:	e8 4c ea ff ff       	call   c0013d68 <Device::getName()>
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	8a 00                	mov    al,BYTE PTR [eax]
c0015321:	3c 41                	cmp    al,0x41
c0015323:	0f 94 c0             	sete   al
c0015326:	84 c0                	test   al,al
c0015328:	74 28                	je     c0015352 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001532a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001532e:	7f 12                	jg     c0015342 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015330:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015333:	05 60 b0 02 c0       	add    eax,0xc002b060
c0015338:	8a 00                	mov    al,BYTE PTR [eax]
c001533a:	0f b6 c0             	movzx  eax,al
c001533d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015340:	eb 10                	jmp    c0015352 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	68 74 8a 02 c0       	push   0xc0028a74
c001534a:	e8 08 3e 00 00       	call   c0019157 <Krnl::panic(char const*)>
c001534f:	83 c4 10             	add    esp,0x10
c0015352:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015355:	c9                   	leave  
c0015356:	c3                   	ret    
c0015357:	90                   	nop

c0015358 <startGUI(void*)>:
c0015358:	55                   	push   ebp
c0015359:	89 e5                	mov    ebp,esp
c001535b:	53                   	push   ebx
c001535c:	83 ec 04             	sub    esp,0x4
c001535f:	e8 3b 6e 00 00       	call   c001c19f <unlockScheduler()>
c0015364:	e8 1f 6e 00 00       	call   c001c188 <getIRQNestingLevel()>
c0015369:	83 ec 08             	sub    esp,0x8
c001536c:	50                   	push   eax
c001536d:	68 5c 8d 02 c0       	push   0xc0028d5c
c0015372:	e8 16 d3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0015377:	83 c4 10             	add    esp,0x10
c001537a:	8b 1d 88 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd88
c0015380:	83 ec 08             	sub    esp,0x8
c0015383:	6a 01                	push   0x1
c0015385:	68 76 8d 02 c0       	push   0xc0028d76
c001538a:	e8 d2 67 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c001538f:	83 c4 10             	add    esp,0x10
c0015392:	83 ec 08             	sub    esp,0x8
c0015395:	53                   	push   ebx
c0015396:	50                   	push   eax
c0015397:	e8 d4 69 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	8b 1d 88 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd88
c00153a5:	83 ec 08             	sub    esp,0x8
c00153a8:	6a 01                	push   0x1
c00153aa:	68 90 8d 02 c0       	push   0xc0028d90
c00153af:	e8 ad 67 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	83 ec 08             	sub    esp,0x8
c00153ba:	53                   	push   ebx
c00153bb:	50                   	push   eax
c00153bc:	e8 af 69 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	90                   	nop
c00153c5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00153c8:	c9                   	leave  
c00153c9:	c3                   	ret    

c00153ca <sendKeyToTerminal(unsigned char)>:
c00153ca:	55                   	push   ebp
c00153cb:	89 e5                	mov    ebp,esp
c00153cd:	83 ec 28             	sub    esp,0x28
c00153d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00153d6:	a1 44 be 02 c0       	mov    eax,ds:0xc002be44
c00153db:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00153df:	83 ec 08             	sub    esp,0x8
c00153e2:	52                   	push   edx
c00153e3:	50                   	push   eax
c00153e4:	e8 83 ba ff ff       	call   c0010e6c <VgaText::receiveKey(unsigned char)>
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00153f0:	75 41                	jne    c0015433 <sendKeyToTerminal(unsigned char)+0x69>
c00153f2:	e8 cd 6d 00 00       	call   c001c1c4 <lockStuff()>
c00153f7:	a1 20 bf 02 c0       	mov    eax,ds:0xc002bf20
c00153fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00153ff:	c7 05 20 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bf20,0x0
c0015409:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001540d:	74 1f                	je     c001542e <sendKeyToTerminal(unsigned char)+0x64>
c001540f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015412:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015415:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015418:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001541b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001541e:	83 ec 0c             	sub    esp,0xc
c0015421:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015424:	e8 8b 73 00 00       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	eb db                	jmp    c0015409 <sendKeyToTerminal(unsigned char)+0x3f>
c001542e:	e8 2a 71 00 00       	call   c001c55d <unlockStuff()>
c0015433:	90                   	nop
c0015434:	c9                   	leave  
c0015435:	c3                   	ret    

c0015436 <sendKeyboardToken(KeyboardToken)>:
c0015436:	55                   	push   ebp
c0015437:	89 e5                	mov    ebp,esp
c0015439:	83 ec 18             	sub    esp,0x18
c001543c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001543f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015442:	0f b7 c0             	movzx  eax,ax
c0015445:	83 f2 01             	xor    edx,0x1
c0015448:	88 90 40 bf 02 c0    	mov    BYTE PTR [eax-0x3ffd40c0],dl
c001544e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015451:	66 3d 03 02          	cmp    ax,0x203
c0015455:	75 07                	jne    c001545e <sendKeyboardToken(KeyboardToken)+0x28>
c0015457:	a0 40 c0 02 c0       	mov    al,ds:0xc002c040
c001545c:	84 c0                	test   al,al
c001545e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015462:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015465:	a0 48 c3 02 c0       	mov    al,ds:0xc002c348
c001546a:	38 c2                	cmp    dl,al
c001546c:	74 1c                	je     c001548a <sendKeyboardToken(KeyboardToken)+0x54>
c001546e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015471:	a2 48 c3 02 c0       	mov    ds:0xc002c348,al
c0015476:	a0 48 c3 02 c0       	mov    al,ds:0xc002c348
c001547b:	0f b6 c0             	movzx  eax,al
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	50                   	push   eax
c0015482:	e8 53 ac ff ff       	call   c00100da <setTerminalScrollLock(bool)>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001548d:	84 c0                	test   al,al
c001548f:	0f 84 ae 00 00 00    	je     c0015543 <sendKeyboardToken(KeyboardToken)+0x10d>
c0015495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015498:	66 3d 10 03          	cmp    ax,0x310
c001549c:	75 06                	jne    c00154a4 <sendKeyboardToken(KeyboardToken)+0x6e>
c001549e:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	66 3d 11 03          	cmp    ax,0x311
c00154ab:	75 06                	jne    c00154b3 <sendKeyboardToken(KeyboardToken)+0x7d>
c00154ad:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	66 3d 12 03          	cmp    ax,0x312
c00154ba:	75 06                	jne    c00154c2 <sendKeyboardToken(KeyboardToken)+0x8c>
c00154bc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	66 3d 13 03          	cmp    ax,0x313
c00154c9:	75 06                	jne    c00154d1 <sendKeyboardToken(KeyboardToken)+0x9b>
c00154cb:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00154d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d4:	66 3d 14 03          	cmp    ax,0x314
c00154d8:	75 06                	jne    c00154e0 <sendKeyboardToken(KeyboardToken)+0xaa>
c00154da:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	66 3d 15 03          	cmp    ax,0x315
c00154e7:	75 06                	jne    c00154ef <sendKeyboardToken(KeyboardToken)+0xb9>
c00154e9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00154ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f2:	66 3d 16 03          	cmp    ax,0x316
c00154f6:	75 06                	jne    c00154fe <sendKeyboardToken(KeyboardToken)+0xc8>
c00154f8:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	66 3d 17 03          	cmp    ax,0x317
c0015505:	75 06                	jne    c001550d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015507:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001550d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015510:	66 3d 18 03          	cmp    ax,0x318
c0015514:	75 06                	jne    c001551c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015516:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001551c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551f:	66 3d 19 03          	cmp    ax,0x319
c0015523:	75 06                	jne    c001552b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015525:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001552b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552e:	66 3d 1a 03          	cmp    ax,0x31a
c0015532:	0f 85 c9 00 00 00    	jne    c0015601 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015538:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001553e:	e9 be 00 00 00       	jmp    c0015601 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015546:	66 3d 10 03          	cmp    ax,0x310
c001554a:	75 0a                	jne    c0015556 <sendKeyboardToken(KeyboardToken)+0x120>
c001554c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015552:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015559:	66 3d 11 03          	cmp    ax,0x311
c001555d:	75 0a                	jne    c0015569 <sendKeyboardToken(KeyboardToken)+0x133>
c001555f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015565:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	66 3d 12 03          	cmp    ax,0x312
c0015570:	75 0a                	jne    c001557c <sendKeyboardToken(KeyboardToken)+0x146>
c0015572:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015578:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	66 3d 13 03          	cmp    ax,0x313
c0015583:	75 0a                	jne    c001558f <sendKeyboardToken(KeyboardToken)+0x159>
c0015585:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001558b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001558f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015592:	66 3d 14 03          	cmp    ax,0x314
c0015596:	75 0a                	jne    c00155a2 <sendKeyboardToken(KeyboardToken)+0x16c>
c0015598:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001559e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a5:	66 3d 15 03          	cmp    ax,0x315
c00155a9:	75 0a                	jne    c00155b5 <sendKeyboardToken(KeyboardToken)+0x17f>
c00155ab:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00155b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b8:	66 3d 16 03          	cmp    ax,0x316
c00155bc:	75 0a                	jne    c00155c8 <sendKeyboardToken(KeyboardToken)+0x192>
c00155be:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00155c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cb:	66 3d 17 03          	cmp    ax,0x317
c00155cf:	75 0a                	jne    c00155db <sendKeyboardToken(KeyboardToken)+0x1a5>
c00155d1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00155d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	66 3d 18 03          	cmp    ax,0x318
c00155e2:	75 0a                	jne    c00155ee <sendKeyboardToken(KeyboardToken)+0x1b8>
c00155e4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00155ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00155ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f1:	66 3d 19 03          	cmp    ax,0x319
c00155f5:	75 0a                	jne    c0015601 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00155f7:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00155fd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015604:	66 3d 00 02          	cmp    ax,0x200
c0015608:	75 2a                	jne    c0015634 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001560a:	a0 40 c3 02 c0       	mov    al,ds:0xc002c340
c001560f:	83 f0 01             	xor    eax,0x1
c0015612:	84 c0                	test   al,al
c0015614:	74 1e                	je     c0015634 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0015616:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001561b:	6a 01                	push   0x1
c001561d:	6a 00                	push   0x0
c001561f:	68 58 53 01 c0       	push   0xc0015358
c0015624:	50                   	push   eax
c0015625:	e8 a4 6c 00 00       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	c6 05 40 c3 02 c0 01 	mov    BYTE PTR ds:0xc002c340,0x1
c0015634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015637:	66 3d 1d 03          	cmp    ax,0x31d
c001563b:	75 06                	jne    c0015643 <sendKeyboardToken(KeyboardToken)+0x20d>
c001563d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015646:	66 3d 1c 03          	cmp    ax,0x31c
c001564a:	75 06                	jne    c0015652 <sendKeyboardToken(KeyboardToken)+0x21c>
c001564c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	66 3d 1b 03          	cmp    ax,0x31b
c0015659:	75 06                	jne    c0015661 <sendKeyboardToken(KeyboardToken)+0x22b>
c001565b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	66 3d 1e 03          	cmp    ax,0x31e
c0015668:	75 06                	jne    c0015670 <sendKeyboardToken(KeyboardToken)+0x23a>
c001566a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015673:	66 3d 1f 03          	cmp    ax,0x31f
c0015677:	75 06                	jne    c001567f <sendKeyboardToken(KeyboardToken)+0x249>
c0015679:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001567f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015682:	66 3d 1a 03          	cmp    ax,0x31a
c0015686:	75 06                	jne    c001568e <sendKeyboardToken(KeyboardToken)+0x258>
c0015688:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001568e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015692:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015695:	83 f0 01             	xor    eax,0x1
c0015698:	84 c0                	test   al,al
c001569a:	74 77                	je     c0015713 <sendKeyboardToken(KeyboardToken)+0x2dd>
c001569c:	a0 41 c0 02 c0       	mov    al,ds:0xc002c041
c00156a1:	84 c0                	test   al,al
c00156a3:	74 41                	je     c00156e6 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00156a5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00156a9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00156ad:	74 2b                	je     c00156da <sendKeyboardToken(KeyboardToken)+0x2a4>
c00156af:	8b 15 44 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c344
c00156b5:	89 d0                	mov    eax,edx
c00156b7:	c1 e0 02             	shl    eax,0x2
c00156ba:	01 d0                	add    eax,edx
c00156bc:	01 c0                	add    eax,eax
c00156be:	a3 44 c3 02 c0       	mov    ds:0xc002c344,eax
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	0f b7 c0             	movzx  eax,ax
c00156c9:	8d 50 d0             	lea    edx,[eax-0x30]
c00156cc:	a1 44 c3 02 c0       	mov    eax,ds:0xc002c344
c00156d1:	01 d0                	add    eax,edx
c00156d3:	a3 44 c3 02 c0       	mov    ds:0xc002c344,eax
c00156d8:	eb 6d                	jmp    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c00156da:	c7 05 44 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c344,0x0
c00156e4:	eb 61                	jmp    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c00156e6:	a1 44 c3 02 c0       	mov    eax,ds:0xc002c344
c00156eb:	85 c0                	test   eax,eax
c00156ed:	74 18                	je     c0015707 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00156ef:	a1 44 c3 02 c0       	mov    eax,ds:0xc002c344
c00156f4:	0f b6 c0             	movzx  eax,al
c00156f7:	83 ec 0c             	sub    esp,0xc
c00156fa:	50                   	push   eax
c00156fb:	e8 ca fc ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c0015700:	83 c4 10             	add    esp,0x10
c0015703:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015707:	c7 05 44 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c344,0x0
c0015711:	eb 34                	jmp    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	66 3d 01 01          	cmp    ax,0x101
c001571a:	75 2b                	jne    c0015747 <sendKeyboardToken(KeyboardToken)+0x311>
c001571c:	a1 44 c3 02 c0       	mov    eax,ds:0xc002c344
c0015721:	85 c0                	test   eax,eax
c0015723:	74 18                	je     c001573d <sendKeyboardToken(KeyboardToken)+0x307>
c0015725:	a1 44 c3 02 c0       	mov    eax,ds:0xc002c344
c001572a:	0f b6 c0             	movzx  eax,al
c001572d:	83 ec 0c             	sub    esp,0xc
c0015730:	50                   	push   eax
c0015731:	e8 94 fc ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c0015736:	83 c4 10             	add    esp,0x10
c0015739:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001573d:	c7 05 44 c3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c344,0x0
c0015747:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001574a:	83 f0 01             	xor    eax,0x1
c001574d:	84 c0                	test   al,al
c001574f:	74 4c                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c0015751:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015754:	83 f0 01             	xor    eax,0x1
c0015757:	84 c0                	test   al,al
c0015759:	74 42                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c001575b:	a0 40 c0 02 c0       	mov    al,ds:0xc002c040
c0015760:	83 f0 01             	xor    eax,0x1
c0015763:	84 c0                	test   al,al
c0015765:	74 36                	je     c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c0015767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576a:	66 83 f8 1f          	cmp    ax,0x1f
c001576e:	76 09                	jbe    c0015779 <sendKeyboardToken(KeyboardToken)+0x343>
c0015770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015773:	66 83 f8 7e          	cmp    ax,0x7e
c0015777:	76 12                	jbe    c001578b <sendKeyboardToken(KeyboardToken)+0x355>
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	66 83 f8 0a          	cmp    ax,0xa
c0015780:	74 09                	je     c001578b <sendKeyboardToken(KeyboardToken)+0x355>
c0015782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015785:	66 83 f8 08          	cmp    ax,0x8
c0015789:	75 12                	jne    c001579d <sendKeyboardToken(KeyboardToken)+0x367>
c001578b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578e:	0f b6 c0             	movzx  eax,al
c0015791:	83 ec 0c             	sub    esp,0xc
c0015794:	50                   	push   eax
c0015795:	e8 30 fc ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00157a0:	83 f0 01             	xor    eax,0x1
c00157a3:	84 c0                	test   al,al
c00157a5:	74 4f                	je     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00157aa:	83 f0 01             	xor    eax,0x1
c00157ad:	84 c0                	test   al,al
c00157af:	74 45                	je     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157b1:	a0 40 c0 02 c0       	mov    al,ds:0xc002c040
c00157b6:	84 c0                	test   al,al
c00157b8:	74 3c                	je     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bd:	66 83 f8 3f          	cmp    ax,0x3f
c00157c1:	76 33                	jbe    c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c6:	66 83 f8 7f          	cmp    ax,0x7f
c00157ca:	77 2a                	ja     c00157f6 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00157cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cf:	88 c2                	mov    dl,al
c00157d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d4:	66 83 f8 5f          	cmp    ax,0x5f
c00157d8:	76 04                	jbe    c00157de <sendKeyboardToken(KeyboardToken)+0x3a8>
c00157da:	b0 20                	mov    al,0x20
c00157dc:	eb 02                	jmp    c00157e0 <sendKeyboardToken(KeyboardToken)+0x3aa>
c00157de:	b0 00                	mov    al,0x0
c00157e0:	29 c2                	sub    edx,eax
c00157e2:	88 d0                	mov    al,dl
c00157e4:	83 e8 40             	sub    eax,0x40
c00157e7:	0f b6 c0             	movzx  eax,al
c00157ea:	83 ec 0c             	sub    esp,0xc
c00157ed:	50                   	push   eax
c00157ee:	e8 d7 fb ff ff       	call   c00153ca <sendKeyToTerminal(unsigned char)>
c00157f3:	83 c4 10             	add    esp,0x10
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	66 3d 00 03          	cmp    ax,0x300
c00157fd:	75 0f                	jne    c001580e <sendKeyboardToken(KeyboardToken)+0x3d8>
c00157ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015802:	83 f0 01             	xor    eax,0x1
c0015805:	84 c0                	test   al,al
c0015807:	74 05                	je     c001580e <sendKeyboardToken(KeyboardToken)+0x3d8>
c0015809:	e8 f3 b0 ff ff       	call   c0010901 <doTerminalCycle()>
c001580e:	90                   	nop
c001580f:	c9                   	leave  
c0015810:	c3                   	ret    

c0015811 <clearInternalKeybuffer(VgaText*)>:
c0015811:	55                   	push   ebp
c0015812:	89 e5                	mov    ebp,esp
c0015814:	83 ec 08             	sub    esp,0x8
c0015817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581a:	05 34 11 00 00       	add    eax,0x1134
c001581f:	83 ec 0c             	sub    esp,0xc
c0015822:	50                   	push   eax
c0015823:	e8 71 ae fe ff       	call   c0000699 <strlen>
c0015828:	83 c4 10             	add    esp,0x10
c001582b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001582e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015834:	83 ec 04             	sub    esp,0x4
c0015837:	50                   	push   eax
c0015838:	6a 00                	push   0x0
c001583a:	52                   	push   edx
c001583b:	e8 3c ae fe ff       	call   c000067c <memset>
c0015840:	83 c4 10             	add    esp,0x10
c0015843:	90                   	nop
c0015844:	c9                   	leave  
c0015845:	c3                   	ret    

c0015846 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015846:	55                   	push   ebp
c0015847:	89 e5                	mov    ebp,esp
c0015849:	83 ec 18             	sub    esp,0x18
c001584c:	fb                   	sti    
c001584d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015854:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015858:	0f 84 8a 00 00 00    	je     c00158e8 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c001585e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015861:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015867:	84 c0                	test   al,al
c0015869:	75 11                	jne    c001587c <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001586b:	e8 2d 69 00 00       	call   c001c19d <lockScheduler()>
c0015870:	e8 63 6c 00 00       	call   c001c4d8 <schedule()>
c0015875:	e8 25 69 00 00       	call   c001c19f <unlockScheduler()>
c001587a:	eb e2                	jmp    c001585e <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c001587c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001587f:	8d 50 01             	lea    edx,[eax+0x1]
c0015882:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015888:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001588e:	88 10                	mov    BYTE PTR [eax],dl
c0015890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015893:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015899:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001589c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001589f:	05 34 11 00 00       	add    eax,0x1134
c00158a4:	83 ec 0c             	sub    esp,0xc
c00158a7:	50                   	push   eax
c00158a8:	e8 ec ad fe ff       	call   c0000699 <strlen>
c00158ad:	83 c4 10             	add    esp,0x10
c00158b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158b3:	81 c2 34 11 00 00    	add    edx,0x1134
c00158b9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00158bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00158bf:	81 c2 34 11 00 00    	add    edx,0x1134
c00158c5:	83 ec 04             	sub    esp,0x4
c00158c8:	50                   	push   eax
c00158c9:	51                   	push   ecx
c00158ca:	52                   	push   edx
c00158cb:	e8 3e ad fe ff       	call   c000060e <memmove>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00158d6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00158d9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00158dd:	0f 85 71 ff ff ff    	jne    c0015854 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00158e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158e6:	eb 03                	jmp    c00158eb <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00158e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158eb:	c9                   	leave  
c00158ec:	c3                   	ret    
c00158ed:	90                   	nop

c00158ee <Keyboard::Keyboard(char const*)>:
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f5:	83 ec 08             	sub    esp,0x8
c00158f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158fc:	50                   	push   eax
c00158fd:	e8 6a e3 ff ff       	call   c0013c6c <Device::Device(char const*)>
c0015902:	83 c4 10             	add    esp,0x10
c0015905:	ba b4 8d 02 c0       	mov    edx,0xc0028db4
c001590a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590e:	89 10                	mov    DWORD PTR [eax],edx
c0015910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015914:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001591e:	c6 05 24 bf 02 c0 01 	mov    BYTE PTR ds:0xc002bf24,0x1
c0015925:	90                   	nop
c0015926:	83 c4 0c             	add    esp,0xc
c0015929:	c3                   	ret    

c001592a <Keyboard::~Keyboard()>:
c001592a:	83 ec 0c             	sub    esp,0xc
c001592d:	ba b4 8d 02 c0       	mov    edx,0xc0028db4
c0015932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015936:	89 10                	mov    DWORD PTR [eax],edx
c0015938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001593c:	83 ec 0c             	sub    esp,0xc
c001593f:	50                   	push   eax
c0015940:	e8 09 e0 ff ff       	call   c001394e <Device::~Device()>
c0015945:	83 c4 10             	add    esp,0x10
c0015948:	90                   	nop
c0015949:	83 c4 0c             	add    esp,0xc
c001594c:	c3                   	ret    
c001594d:	90                   	nop

c001594e <Keyboard::~Keyboard()>:
c001594e:	83 ec 0c             	sub    esp,0xc
c0015951:	83 ec 0c             	sub    esp,0xc
c0015954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015958:	e8 cd ff ff ff       	call   c001592a <Keyboard::~Keyboard()>
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	83 ec 08             	sub    esp,0x8
c0015963:	68 5c 01 00 00       	push   0x15c
c0015968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001596c:	e8 3c cc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0015971:	83 c4 10             	add    esp,0x10
c0015974:	83 c4 0c             	add    esp,0xc
c0015977:	c3                   	ret    

c0015978 <LogicalDisk::close(int, int, void*)>:
c0015978:	83 c8 ff             	or     eax,0xffffffff
c001597b:	c3                   	ret    

c001597c <LogicalDisk::~LogicalDisk()>:
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	ba 64 8e 02 c0       	mov    edx,0xc0028e64
c0015984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015988:	89 10                	mov    DWORD PTR [eax],edx
c001598a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001598e:	83 ec 0c             	sub    esp,0xc
c0015991:	50                   	push   eax
c0015992:	e8 b7 df ff ff       	call   c001394e <Device::~Device()>
c0015997:	83 c4 10             	add    esp,0x10
c001599a:	90                   	nop
c001599b:	83 c4 0c             	add    esp,0xc
c001599e:	c3                   	ret    
c001599f:	90                   	nop

c00159a0 <LogicalDisk::~LogicalDisk()>:
c00159a0:	83 ec 0c             	sub    esp,0xc
c00159a3:	83 ec 0c             	sub    esp,0xc
c00159a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159aa:	e8 cd ff ff ff       	call   c001597c <LogicalDisk::~LogicalDisk()>
c00159af:	83 c4 10             	add    esp,0x10
c00159b2:	83 ec 08             	sub    esp,0x8
c00159b5:	68 74 01 00 00       	push   0x174
c00159ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159be:	e8 ea cb ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00159c3:	83 c4 10             	add    esp,0x10
c00159c6:	83 c4 0c             	add    esp,0xc
c00159c9:	c3                   	ret    

c00159ca <LogicalDisk::open(int, int, void*)>:
c00159ca:	83 ec 18             	sub    esp,0x18
c00159cd:	68 e0 8d 02 c0       	push   0xc0028de0
c00159d2:	e8 80 37 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00159d7:	83 c8 ff             	or     eax,0xffffffff
c00159da:	83 c4 1c             	add    esp,0x1c
c00159dd:	c3                   	ret    

c00159de <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00159de:	53                   	push   ebx
c00159df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00159e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00159e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159eb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00159f1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00159f7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00159fd:	77 10                	ja     c0015a0f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00159ff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015a05:	89 d3                	mov    ebx,edx
c0015a07:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015a0d:	72 05                	jb     c0015a14 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015a0f:	83 c8 ff             	or     eax,0xffffffff
c0015a12:	89 c2                	mov    edx,eax
c0015a14:	5b                   	pop    ebx
c0015a15:	c3                   	ret    

c0015a16 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015a16:	56                   	push   esi
c0015a17:	83 c8 ff             	or     eax,0xffffffff
c0015a1a:	53                   	push   ebx
c0015a1b:	89 c2                	mov    edx,eax
c0015a1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a21:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015a25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015a2f:	77 27                	ja     c0015a58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015a31:	89 d8                	mov    eax,ebx
c0015a33:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015a39:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015a3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a44:	89 c2                	mov    edx,eax
c0015a46:	73 10                	jae    c0015a58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015a48:	89 c8                	mov    eax,ecx
c0015a4a:	89 da                	mov    edx,ebx
c0015a4c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015a52:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015a58:	5b                   	pop    ebx
c0015a59:	5e                   	pop    esi
c0015a5a:	c3                   	ret    
c0015a5b:	90                   	nop

c0015a5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015a5c:	83 ec 1c             	sub    esp,0x1c
c0015a5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015a73:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015a7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a82:	83 ec 08             	sub    esp,0x8
c0015a85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a89:	50                   	push   eax
c0015a8a:	e8 dd e1 ff ff       	call   c0013c6c <Device::Device(char const*)>
c0015a8f:	83 c4 10             	add    esp,0x10
c0015a92:	ba 64 8e 02 c0       	mov    edx,0xc0028e64
c0015a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a9b:	89 10                	mov    DWORD PTR [eax],edx
c0015a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aac:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ab7:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015ac1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015acd:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015ad3:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ad9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015add:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015ae0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ae4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015aea:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015af8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b02:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015b0c:	90                   	nop
c0015b0d:	83 c4 1c             	add    esp,0x1c
c0015b10:	c3                   	ret    
c0015b11:	90                   	nop

c0015b12 <LogicalDisk::assignDriveLetter()>:
c0015b12:	55                   	push   ebp
c0015b13:	57                   	push   edi
c0015b14:	56                   	push   esi
c0015b15:	53                   	push   ebx
c0015b16:	83 ec 14             	sub    esp,0x14
c0015b19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015b1d:	8b 3d 60 c3 02 c0    	mov    edi,DWORD PTR ds:0xc002c360
c0015b23:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015b29:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015b2d:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015b33:	8b 3d 64 c3 02 c0    	mov    edi,DWORD PTR ds:0xc002c364
c0015b39:	3c 01                	cmp    al,0x1
c0015b3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015b3f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015b43:	19 c0                	sbb    eax,eax
c0015b45:	83 e0 02             	and    eax,0x2
c0015b48:	83 c0 41             	add    eax,0x41
c0015b4b:	0f be e8             	movsx  ebp,al
c0015b4e:	3c 43                	cmp    al,0x43
c0015b50:	75 10                	jne    c0015b62 <LogicalDisk::assignDriveLetter()+0x50>
c0015b52:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015b59:	75 5d                	jne    c0015bb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b5b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b60:	75 56                	jne    c0015bb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b62:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015b65:	ba 01 00 00 00       	mov    edx,0x1
c0015b6a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015b6e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015b72:	d3 e2                	shl    edx,cl
c0015b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b78:	89 d7                	mov    edi,edx
c0015b7a:	89 d6                	mov    esi,edx
c0015b7c:	c1 ff 1f             	sar    edi,0x1f
c0015b7f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015b83:	21 f9                	and    ecx,edi
c0015b85:	09 d1                	or     ecx,edx
c0015b87:	75 2f                	jne    c0015bb8 <LogicalDisk::assignDriveLetter()+0xa6>
c0015b89:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015b8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b91:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015b97:	09 f2                	or     edx,esi
c0015b99:	89 15 60 c3 02 c0    	mov    DWORD PTR ds:0xc002c360,edx
c0015b9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ba3:	09 fa                	or     edx,edi
c0015ba5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ba9:	89 15 64 c3 02 c0    	mov    DWORD PTR ds:0xc002c364,edx
c0015baf:	89 1c bd 80 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3c80],ebx
c0015bb6:	eb 08                	jmp    c0015bc0 <LogicalDisk::assignDriveLetter()+0xae>
c0015bb8:	45                   	inc    ebp
c0015bb9:	40                   	inc    eax
c0015bba:	3c 5b                	cmp    al,0x5b
c0015bbc:	75 90                	jne    c0015b4e <LogicalDisk::assignDriveLetter()+0x3c>
c0015bbe:	31 c0                	xor    eax,eax
c0015bc0:	83 c4 14             	add    esp,0x14
c0015bc3:	5b                   	pop    ebx
c0015bc4:	5e                   	pop    esi
c0015bc5:	5f                   	pop    edi
c0015bc6:	5d                   	pop    ebp
c0015bc7:	c3                   	ret    

c0015bc8 <LogicalDisk::mount()>:
c0015bc8:	56                   	push   esi
c0015bc9:	53                   	push   ebx
c0015bca:	51                   	push   ecx
c0015bcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015bcf:	8b 1d e8 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee8
c0015bd5:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015bdf:	85 db                	test   ebx,ebx
c0015be1:	74 50                	je     c0015c33 <LogicalDisk::mount()+0x6b>
c0015be3:	e8 a0 65 00 00       	call   c001c188 <getIRQNestingLevel()>
c0015be8:	52                   	push   edx
c0015be9:	52                   	push   edx
c0015bea:	50                   	push   eax
c0015beb:	68 04 8e 02 c0       	push   0xc0028e04
c0015bf0:	e8 98 ca ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0015bf5:	83 c4 0c             	add    esp,0xc
c0015bf8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015bff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c01:	83 e8 41             	sub    eax,0x41
c0015c04:	50                   	push   eax
c0015c05:	56                   	push   esi
c0015c06:	53                   	push   ebx
c0015c07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	84 c0                	test   al,al
c0015c0f:	74 08                	je     c0015c19 <LogicalDisk::mount()+0x51>
c0015c11:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015c17:	eb 1c                	jmp    c0015c35 <LogicalDisk::mount()+0x6d>
c0015c19:	e8 6a 65 00 00       	call   c001c188 <getIRQNestingLevel()>
c0015c1e:	51                   	push   ecx
c0015c1f:	51                   	push   ecx
c0015c20:	50                   	push   eax
c0015c21:	68 1f 8e 02 c0       	push   0xc0028e1f
c0015c26:	e8 62 ca ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0015c2b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	eb ac                	jmp    c0015bdf <LogicalDisk::mount()+0x17>
c0015c33:	31 c0                	xor    eax,eax
c0015c35:	5a                   	pop    edx
c0015c36:	5b                   	pop    ebx
c0015c37:	5e                   	pop    esi
c0015c38:	c3                   	ret    
c0015c39:	90                   	nop

c0015c3a <LogicalDisk::unmount()>:
c0015c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015c48:	c3                   	ret    
c0015c49:	90                   	nop

c0015c4a <LogicalDisk::unassignDriveLetter()>:
c0015c4a:	57                   	push   edi
c0015c4b:	56                   	push   esi
c0015c4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c50:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015c57:	84 c9                	test   cl,cl
c0015c59:	75 0f                	jne    c0015c6a <LogicalDisk::unassignDriveLetter()+0x20>
c0015c5b:	c7 44 24 0c 3a 8e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028e3a
c0015c63:	5e                   	pop    esi
c0015c64:	5f                   	pop    edi
c0015c65:	e9 ed 34 00 00       	jmp    c0019157 <Krnl::panic(char const*)>
c0015c6a:	83 e9 41             	sub    ecx,0x41
c0015c6d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015c74:	b8 01 00 00 00       	mov    eax,0x1
c0015c79:	c7 04 8d 80 c3 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3c80],0x0
c0015c84:	d3 e0                	shl    eax,cl
c0015c86:	89 c7                	mov    edi,eax
c0015c88:	f7 d0                	not    eax
c0015c8a:	c1 ff 1f             	sar    edi,0x1f
c0015c8d:	21 05 60 c3 02 c0    	and    DWORD PTR ds:0xc002c360,eax
c0015c93:	89 fe                	mov    esi,edi
c0015c95:	f7 d6                	not    esi
c0015c97:	21 35 64 c3 02 c0    	and    DWORD PTR ds:0xc002c364,esi
c0015c9d:	5e                   	pop    esi
c0015c9e:	5f                   	pop    edi
c0015c9f:	c3                   	ret    

c0015ca0 <LogicalDisk::read(unsigned long long, int, void*)>:
c0015ca0:	57                   	push   edi
c0015ca1:	56                   	push   esi
c0015ca2:	53                   	push   ebx
c0015ca3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ca7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cb3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015cb9:	77 41                	ja     c0015cfc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015cbb:	99                   	cdq    
c0015cbc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015cc2:	01 c8                	add    eax,ecx
c0015cc4:	11 da                	adc    edx,ebx
c0015cc6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ccc:	19 d7                	sbb    edi,edx
c0015cce:	72 33                	jb     c0015d03 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015cd0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015cd6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015cdc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ce0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ce4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015cea:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015cf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015cf4:	5b                   	pop    ebx
c0015cf5:	5e                   	pop    esi
c0015cf6:	5f                   	pop    edi
c0015cf7:	e9 f8 09 00 00       	jmp    c00166f4 <VCache::read(unsigned long long, int, void*)>
c0015cfc:	b8 05 00 00 00       	mov    eax,0x5
c0015d01:	eb 05                	jmp    c0015d08 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015d03:	b8 07 00 00 00       	mov    eax,0x7
c0015d08:	5b                   	pop    ebx
c0015d09:	5e                   	pop    esi
c0015d0a:	5f                   	pop    edi
c0015d0b:	c3                   	ret    

c0015d0c <LogicalDisk::write(unsigned long long, int, void*)>:
c0015d0c:	57                   	push   edi
c0015d0d:	56                   	push   esi
c0015d0e:	53                   	push   ebx
c0015d0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015d13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d17:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015d1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d1f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d25:	77 41                	ja     c0015d68 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015d27:	99                   	cdq    
c0015d28:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015d2e:	01 c8                	add    eax,ecx
c0015d30:	11 da                	adc    edx,ebx
c0015d32:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015d38:	19 d7                	sbb    edi,edx
c0015d3a:	72 33                	jb     c0015d6f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015d3c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015d42:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015d48:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015d4c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015d50:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015d56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015d60:	5b                   	pop    ebx
c0015d61:	5e                   	pop    esi
c0015d62:	5f                   	pop    edi
c0015d63:	e9 a8 08 00 00       	jmp    c0016610 <VCache::write(unsigned long long, int, void*)>
c0015d68:	b8 05 00 00 00       	mov    eax,0x5
c0015d6d:	eb 05                	jmp    c0015d74 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015d6f:	b8 07 00 00 00       	mov    eax,0x7
c0015d74:	5b                   	pop    ebx
c0015d75:	5e                   	pop    esi
c0015d76:	5f                   	pop    edi
c0015d77:	c3                   	ret    

c0015d78 <Mouse::Mouse(char const*)>:
c0015d78:	83 ec 0c             	sub    esp,0xc
c0015d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d7f:	83 ec 08             	sub    esp,0x8
c0015d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d86:	50                   	push   eax
c0015d87:	e8 e0 de ff ff       	call   c0013c6c <Device::Device(char const*)>
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	ba 90 8e 02 c0       	mov    edx,0xc0028e90
c0015d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d98:	89 10                	mov    DWORD PTR [eax],edx
c0015d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d9e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015da8:	90                   	nop
c0015da9:	83 c4 0c             	add    esp,0xc
c0015dac:	c3                   	ret    
c0015dad:	90                   	nop

c0015dae <Mouse::~Mouse()>:
c0015dae:	83 ec 0c             	sub    esp,0xc
c0015db1:	ba 90 8e 02 c0       	mov    edx,0xc0028e90
c0015db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dba:	89 10                	mov    DWORD PTR [eax],edx
c0015dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	50                   	push   eax
c0015dc4:	e8 85 db ff ff       	call   c001394e <Device::~Device()>
c0015dc9:	83 c4 10             	add    esp,0x10
c0015dcc:	90                   	nop
c0015dcd:	83 c4 0c             	add    esp,0xc
c0015dd0:	c3                   	ret    
c0015dd1:	90                   	nop

c0015dd2 <Mouse::~Mouse()>:
c0015dd2:	83 ec 0c             	sub    esp,0xc
c0015dd5:	83 ec 0c             	sub    esp,0xc
c0015dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ddc:	e8 cd ff ff ff       	call   c0015dae <Mouse::~Mouse()>
c0015de1:	83 c4 10             	add    esp,0x10
c0015de4:	83 ec 08             	sub    esp,0x8
c0015de7:	68 58 01 00 00       	push   0x158
c0015dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df0:	e8 b8 c7 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	83 c4 0c             	add    esp,0xc
c0015dfb:	c3                   	ret    

c0015dfc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dfc:	55                   	push   ebp
c0015dfd:	57                   	push   edi
c0015dfe:	56                   	push   esi
c0015dff:	53                   	push   ebx
c0015e00:	81 ec 28 01 00 00    	sub    esp,0x128
c0015e06:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015e0d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015e14:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015e1b:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015e22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015e26:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015e2a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e31:	e8 32 df ff ff       	call   c0013d68 <Device::getName()>
c0015e36:	5a                   	pop    edx
c0015e37:	59                   	pop    ecx
c0015e38:	50                   	push   eax
c0015e39:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015e3d:	55                   	push   ebp
c0015e3e:	e8 d8 a8 fe ff       	call   c000071b <strcpy>
c0015e43:	5b                   	pop    ebx
c0015e44:	58                   	pop    eax
c0015e45:	68 b4 8e 02 c0       	push   0xc0028eb4
c0015e4a:	55                   	push   ebp
c0015e4b:	e8 82 a9 fe ff       	call   c00007d2 <strcat>
c0015e50:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015e57:	e8 64 96 ff ff       	call   c000f4c0 <malloc>
c0015e5c:	83 c4 0c             	add    esp,0xc
c0015e5f:	89 c3                	mov    ebx,eax
c0015e61:	57                   	push   edi
c0015e62:	56                   	push   esi
c0015e63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e6b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015e72:	55                   	push   ebp
c0015e73:	50                   	push   eax
c0015e74:	e8 e3 fb ff ff       	call   c0015a5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015e79:	83 c4 14             	add    esp,0x14
c0015e7c:	53                   	push   ebx
c0015e7d:	e8 90 fc ff ff       	call   c0015b12 <LogicalDisk::assignDriveLetter()>
c0015e82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e85:	e8 3e fd ff ff       	call   c0015bc8 <LogicalDisk::mount()>
c0015e8a:	58                   	pop    eax
c0015e8b:	5a                   	pop    edx
c0015e8c:	53                   	push   ebx
c0015e8d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015e94:	e8 e3 db ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0015e99:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e9f:	5b                   	pop    ebx
c0015ea0:	5e                   	pop    esi
c0015ea1:	5f                   	pop    edi
c0015ea2:	5d                   	pop    ebp
c0015ea3:	c3                   	ret    

c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>:
c0015ea4:	55                   	push   ebp
c0015ea5:	57                   	push   edi
c0015ea6:	56                   	push   esi
c0015ea7:	53                   	push   ebx
c0015ea8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015eae:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015eb5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015ebb:	3d 00 02 00 00       	cmp    eax,0x200
c0015ec0:	74 27                	je     c0015ee9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015ec2:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015ec8:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015ece:	83 ec 10             	sub    esp,0x10
c0015ed1:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015ed5:	99                   	cdq    
c0015ed6:	c1 e6 0a             	shl    esi,0xa
c0015ed9:	52                   	push   edx
c0015eda:	89 fd                	mov    ebp,edi
c0015edc:	50                   	push   eax
c0015edd:	55                   	push   ebp
c0015ede:	56                   	push   esi
c0015edf:	e8 68 e9 00 00       	call   c002484c <__udivdi3>
c0015ee4:	e9 b1 00 00 00       	jmp    c0015f9a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ee9:	83 ec 0c             	sub    esp,0xc
c0015eec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015eee:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015ef2:	56                   	push   esi
c0015ef3:	6a 01                	push   0x1
c0015ef5:	6a 00                	push   0x0
c0015ef7:	6a 00                	push   0x0
c0015ef9:	53                   	push   ebx
c0015efa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015efd:	83 c4 20             	add    esp,0x20
c0015f00:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015f08:	75 0a                	jne    c0015f14 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015f0a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015f12:	74 2c                	je     c0015f40 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015f14:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f1a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f20:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f26:	83 ec 10             	sub    esp,0x10
c0015f29:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f2d:	89 f7                	mov    edi,esi
c0015f2f:	c1 e0 0a             	shl    eax,0xa
c0015f32:	c1 ff 1f             	sar    edi,0x1f
c0015f35:	57                   	push   edi
c0015f36:	56                   	push   esi
c0015f37:	52                   	push   edx
c0015f38:	50                   	push   eax
c0015f39:	e8 0e e9 00 00       	call   c002484c <__udivdi3>
c0015f3e:	eb 5a                	jmp    c0015f9a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015f40:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015f47:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015f4e:	83 e1 7f             	and    ecx,0x7f
c0015f51:	83 e0 7f             	and    eax,0x7f
c0015f54:	01 c1                	add    ecx,eax
c0015f56:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015f5d:	83 e0 7f             	and    eax,0x7f
c0015f60:	01 c1                	add    ecx,eax
c0015f62:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015f69:	83 e0 7f             	and    eax,0x7f
c0015f6c:	00 c1                	add    cl,al
c0015f6e:	74 41                	je     c0015fb1 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015f70:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015f76:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015f7c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015f82:	83 ec 10             	sub    esp,0x10
c0015f85:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015f89:	89 f7                	mov    edi,esi
c0015f8b:	c1 e0 0a             	shl    eax,0xa
c0015f8e:	c1 ff 1f             	sar    edi,0x1f
c0015f91:	57                   	push   edi
c0015f92:	56                   	push   esi
c0015f93:	52                   	push   edx
c0015f94:	50                   	push   eax
c0015f95:	e8 b2 e8 00 00       	call   c002484c <__udivdi3>
c0015f9a:	83 c4 14             	add    esp,0x14
c0015f9d:	52                   	push   edx
c0015f9e:	50                   	push   eax
c0015f9f:	6a 00                	push   0x0
c0015fa1:	6a 00                	push   0x0
c0015fa3:	53                   	push   ebx
c0015fa4:	e8 53 fe ff ff       	call   c0015dfc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015fa9:	83 c4 20             	add    esp,0x20
c0015fac:	e9 79 01 00 00       	jmp    c001612a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015fb1:	89 f0                	mov    eax,esi
c0015fb3:	31 f6                	xor    esi,esi
c0015fb5:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015fbc:	75 02                	jne    c0015fc0 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015fbe:	89 f1                	mov    ecx,esi
c0015fc0:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015fc7:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015fce:	c1 e2 08             	shl    edx,0x8
c0015fd1:	c1 e7 10             	shl    edi,0x10
c0015fd4:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015fdc:	09 fa                	or     edx,edi
c0015fde:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015fe6:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015fed:	83 c0 10             	add    eax,0x10
c0015ff0:	09 fa                	or     edx,edi
c0015ff2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015ff9:	c1 e7 18             	shl    edi,0x18
c0015ffc:	09 fa                	or     edx,edi
c0015ffe:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016005:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016009:	c1 e7 10             	shl    edi,0x10
c001600c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016013:	c1 e2 08             	shl    edx,0x8
c0016016:	09 fa                	or     edx,edi
c0016018:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001601f:	09 fa                	or     edx,edi
c0016021:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016028:	c1 e7 18             	shl    edi,0x18
c001602b:	09 fa                	or     edx,edi
c001602d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016031:	46                   	inc    esi
c0016032:	83 fe 04             	cmp    esi,0x4
c0016035:	0f 85 7a ff ff ff    	jne    c0015fb5 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001603b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603f:	83 f0 01             	xor    eax,0x1
c0016042:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016046:	75 57                	jne    c001609f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016048:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001604c:	83 f0 01             	xor    eax,0x1
c001604f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016053:	75 4a                	jne    c001609f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016055:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016059:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016061:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016069:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001606f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016075:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001607b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001607f:	89 f7                	mov    edi,esi
c0016081:	c1 e0 0a             	shl    eax,0xa
c0016084:	c1 ff 1f             	sar    edi,0x1f
c0016087:	57                   	push   edi
c0016088:	56                   	push   esi
c0016089:	52                   	push   edx
c001608a:	50                   	push   eax
c001608b:	e8 bc e7 00 00       	call   c002484c <__udivdi3>
c0016090:	83 c4 10             	add    esp,0x10
c0016093:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016097:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001609b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001609f:	84 c9                	test   cl,cl
c00160a1:	74 53                	je     c00160f6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00160a3:	0f b6 c9             	movzx  ecx,cl
c00160a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00160ae:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00160b2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00160b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00160be:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00160c2:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00160c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00160ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160d6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00160da:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00160de:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00160e2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00160e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00160ea:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00160ee:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00160f2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00160f6:	31 ed                	xor    ebp,ebp
c00160f8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00160fc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016100:	89 f8                	mov    eax,edi
c0016102:	09 f0                	or     eax,esi
c0016104:	74 1e                	je     c0016124 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016106:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001610a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001610e:	89 d1                	mov    ecx,edx
c0016110:	09 c1                	or     ecx,eax
c0016112:	74 10                	je     c0016124 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016114:	83 ec 0c             	sub    esp,0xc
c0016117:	57                   	push   edi
c0016118:	56                   	push   esi
c0016119:	52                   	push   edx
c001611a:	50                   	push   eax
c001611b:	53                   	push   ebx
c001611c:	e8 db fc ff ff       	call   c0015dfc <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016121:	83 c4 20             	add    esp,0x20
c0016124:	45                   	inc    ebp
c0016125:	83 fd 04             	cmp    ebp,0x4
c0016128:	75 ce                	jne    c00160f8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001612a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016130:	5b                   	pop    ebx
c0016131:	5e                   	pop    esi
c0016132:	5f                   	pop    edi
c0016133:	5d                   	pop    ebp
c0016134:	c3                   	ret    
c0016135:	90                   	nop

c0016136 <Serial::Serial(char const*)>:
c0016136:	83 ec 0c             	sub    esp,0xc
c0016139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001613d:	83 ec 08             	sub    esp,0x8
c0016140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016144:	50                   	push   eax
c0016145:	e8 22 db ff ff       	call   c0013c6c <Device::Device(char const*)>
c001614a:	83 c4 10             	add    esp,0x10
c001614d:	ba c8 8e 02 c0       	mov    edx,0xc0028ec8
c0016152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016156:	89 10                	mov    DWORD PTR [eax],edx
c0016158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016166:	90                   	nop
c0016167:	83 c4 0c             	add    esp,0xc
c001616a:	c3                   	ret    
c001616b:	90                   	nop

c001616c <Serial::~Serial()>:
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	ba c8 8e 02 c0       	mov    edx,0xc0028ec8
c0016174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016178:	89 10                	mov    DWORD PTR [eax],edx
c001617a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001617e:	83 ec 0c             	sub    esp,0xc
c0016181:	50                   	push   eax
c0016182:	e8 c7 d7 ff ff       	call   c001394e <Device::~Device()>
c0016187:	83 c4 10             	add    esp,0x10
c001618a:	90                   	nop
c001618b:	83 c4 0c             	add    esp,0xc
c001618e:	c3                   	ret    
c001618f:	90                   	nop

c0016190 <Serial::~Serial()>:
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	83 ec 0c             	sub    esp,0xc
c0016196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001619a:	e8 cd ff ff ff       	call   c001616c <Serial::~Serial()>
c001619f:	83 c4 10             	add    esp,0x10
c00161a2:	83 ec 08             	sub    esp,0x8
c00161a5:	68 58 01 00 00       	push   0x158
c00161aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ae:	e8 fa c3 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	83 c4 0c             	add    esp,0xc
c00161b9:	c3                   	ret    

c00161ba <Timer::Timer(char const*)>:
c00161ba:	83 ec 0c             	sub    esp,0xc
c00161bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c1:	83 ec 08             	sub    esp,0x8
c00161c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161c8:	50                   	push   eax
c00161c9:	e8 9e da ff ff       	call   c0013c6c <Device::Device(char const*)>
c00161ce:	83 c4 10             	add    esp,0x10
c00161d1:	ba 0c 8f 02 c0       	mov    edx,0xc0028f0c
c00161d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161da:	89 10                	mov    DWORD PTR [eax],edx
c00161dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e0:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00161ea:	90                   	nop
c00161eb:	83 c4 0c             	add    esp,0xc
c00161ee:	c3                   	ret    
c00161ef:	90                   	nop

c00161f0 <Timer::~Timer()>:
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	ba 0c 8f 02 c0       	mov    edx,0xc0028f0c
c00161f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161fc:	89 10                	mov    DWORD PTR [eax],edx
c00161fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016202:	83 ec 0c             	sub    esp,0xc
c0016205:	50                   	push   eax
c0016206:	e8 43 d7 ff ff       	call   c001394e <Device::~Device()>
c001620b:	83 c4 10             	add    esp,0x10
c001620e:	90                   	nop
c001620f:	83 c4 0c             	add    esp,0xc
c0016212:	c3                   	ret    
c0016213:	90                   	nop

c0016214 <Timer::~Timer()>:
c0016214:	83 ec 0c             	sub    esp,0xc
c0016217:	83 ec 0c             	sub    esp,0xc
c001621a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001621e:	e8 cd ff ff ff       	call   c00161f0 <Timer::~Timer()>
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	83 ec 08             	sub    esp,0x8
c0016229:	68 5c 01 00 00       	push   0x15c
c001622e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016232:	e8 76 c3 ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0016237:	83 c4 10             	add    esp,0x10
c001623a:	83 c4 0c             	add    esp,0xc
c001623d:	c3                   	ret    

c001623e <Timer::read()>:
c001623e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016242:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016248:	c3                   	ret    

c0016249 <timerHandler(unsigned long long)>:
c0016249:	55                   	push   ebp
c001624a:	57                   	push   edi
c001624b:	56                   	push   esi
c001624c:	53                   	push   ebx
c001624d:	83 ec 0c             	sub    esp,0xc
c0016250:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016254:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016258:	01 35 f0 c3 02 c0    	add    DWORD PTR ds:0xc002c3f0,esi
c001625e:	11 3d f4 c3 02 c0    	adc    DWORD PTR ds:0xc002c3f4,edi
c0016264:	80 3d 8d bd 02 c0 00 	cmp    BYTE PTR ds:0xc002bd8d,0x0
c001626b:	0f 84 07 01 00 00    	je     c0016378 <timerHandler(unsigned long long)+0x12f>
c0016271:	e8 4e 5f 00 00       	call   c001c1c4 <lockStuff()>
c0016276:	83 ec 0c             	sub    esp,0xc
c0016279:	68 7c d2 02 c0       	push   0xc002d27c
c001627e:	e8 3b 06 01 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016283:	c7 04 24 7c d2 02 c0 	mov    DWORD PTR [esp],0xc002d27c
c001628a:	89 c3                	mov    ebx,eax
c001628c:	e8 35 06 01 00       	call   c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016291:	83 c4 10             	add    esp,0x10
c0016294:	84 c0                	test   al,al
c0016296:	74 60                	je     c00162f8 <timerHandler(unsigned long long)+0xaf>
c0016298:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001629e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00162a1:	85 c0                	test   eax,eax
c00162a3:	0f 85 91 00 00 00    	jne    c001633a <timerHandler(unsigned long long)+0xf1>
c00162a9:	e9 be 00 00 00       	jmp    c001636c <timerHandler(unsigned long long)+0x123>
c00162ae:	83 ec 0c             	sub    esp,0xc
c00162b1:	55                   	push   ebp
c00162b2:	e8 fd 64 00 00       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	39 eb                	cmp    ebx,ebp
c00162bc:	75 12                	jne    c00162d0 <timerHandler(unsigned long long)+0x87>
c00162be:	83 ec 0c             	sub    esp,0xc
c00162c1:	68 7c d2 02 c0       	push   0xc002d27c
c00162c6:	e8 f3 05 01 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162cb:	89 c3                	mov    ebx,eax
c00162cd:	83 c4 10             	add    esp,0x10
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	68 7c d2 02 c0       	push   0xc002d27c
c00162d8:	e8 e9 05 01 00       	call   c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	84 c0                	test   al,al
c00162e2:	75 b4                	jne    c0016298 <timerHandler(unsigned long long)+0x4f>
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	68 7c d2 02 c0       	push   0xc002d27c
c00162ec:	e8 cd 05 01 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	39 d8                	cmp    eax,ebx
c00162f6:	74 a0                	je     c0016298 <timerHandler(unsigned long long)+0x4f>
c00162f8:	83 ec 0c             	sub    esp,0xc
c00162fb:	68 7c d2 02 c0       	push   0xc002d27c
c0016300:	e8 b9 05 01 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016305:	c7 04 24 7c d2 02 c0 	mov    DWORD PTR [esp],0xc002d27c
c001630c:	89 c5                	mov    ebp,eax
c001630e:	e8 cf 05 01 00       	call   c00268e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016313:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016316:	83 c4 10             	add    esp,0x10
c0016319:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001631c:	39 15 f0 c3 02 c0    	cmp    DWORD PTR ds:0xc002c3f0,edx
c0016322:	a1 f4 c3 02 c0       	mov    eax,ds:0xc002c3f4
c0016327:	19 c8                	sbb    eax,ecx
c0016329:	73 83                	jae    c00162ae <timerHandler(unsigned long long)+0x65>
c001632b:	50                   	push   eax
c001632c:	50                   	push   eax
c001632d:	55                   	push   ebp
c001632e:	68 7c d2 02 c0       	push   0xc002d27c
c0016333:	e8 58 06 01 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016338:	eb 93                	jmp    c00162cd <timerHandler(unsigned long long)+0x84>
c001633a:	80 3d 8c bd 02 c0 00 	cmp    BYTE PTR ds:0xc002bd8c,0x0
c0016341:	74 29                	je     c001636c <timerHandler(unsigned long long)+0x123>
c0016343:	39 c6                	cmp    esi,eax
c0016345:	bb 00 00 00 00       	mov    ebx,0x0
c001634a:	19 df                	sbb    edi,ebx
c001634c:	72 19                	jb     c0016367 <timerHandler(unsigned long long)+0x11e>
c001634e:	e8 4a 5e 00 00       	call   c001c19d <lockScheduler()>
c0016353:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016358:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001635b:	e8 78 61 00 00       	call   c001c4d8 <schedule()>
c0016360:	e8 3a 5e 00 00       	call   c001c19f <unlockScheduler()>
c0016365:	eb 05                	jmp    c001636c <timerHandler(unsigned long long)+0x123>
c0016367:	29 f0                	sub    eax,esi
c0016369:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001636c:	83 c4 0c             	add    esp,0xc
c001636f:	5b                   	pop    ebx
c0016370:	5e                   	pop    esi
c0016371:	5f                   	pop    edi
c0016372:	5d                   	pop    ebp
c0016373:	e9 e5 61 00 00       	jmp    c001c55d <unlockStuff()>
c0016378:	83 c4 0c             	add    esp,0xc
c001637b:	5b                   	pop    ebx
c001637c:	5e                   	pop    esi
c001637d:	5f                   	pop    edi
c001637e:	5d                   	pop    ebp
c001637f:	c3                   	ret    

c0016380 <setupTimer(int)>:
c0016380:	57                   	push   edi
c0016381:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0016386:	56                   	push   esi
c0016387:	53                   	push   ebx
c0016388:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001638c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016392:	83 ec 0c             	sub    esp,0xc
c0016395:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001639b:	e8 c8 d9 ff ff       	call   c0013d68 <Device::getName()>
c00163a0:	83 c4 10             	add    esp,0x10
c00163a3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00163a6:	0f 85 8d 00 00 00    	jne    c0016439 <setupTimer(int)+0xb9>
c00163ac:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00163b1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00163b8:	74 7f                	je     c0016439 <setupTimer(int)+0xb9>
c00163ba:	83 ec 0c             	sub    esp,0xc
c00163bd:	68 5c 01 00 00       	push   0x15c
c00163c2:	e8 f9 90 ff ff       	call   c000f4c0 <malloc>
c00163c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00163ca:	89 c3                	mov    ebx,eax
c00163cc:	e8 59 e0 00 00       	call   c002442a <PIT::PIT()>
c00163d1:	59                   	pop    ecx
c00163d2:	5f                   	pop    edi
c00163d3:	53                   	push   ebx
c00163d4:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c00163da:	e8 9d d6 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c00163df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163e1:	6a 00                	push   0x0
c00163e3:	6a 00                	push   0x0
c00163e5:	56                   	push   esi
c00163e6:	53                   	push   ebx
c00163e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163ea:	83 c4 14             	add    esp,0x14
c00163ed:	68 60 01 00 00       	push   0x160
c00163f2:	e8 c9 90 ff ff       	call   c000f4c0 <malloc>
c00163f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00163fa:	89 c7                	mov    edi,eax
c00163fc:	e8 d9 de 00 00       	call   c00242da <APICTimer::APICTimer()>
c0016401:	6a 00                	push   0x0
c0016403:	6a 00                	push   0x0
c0016405:	56                   	push   esi
c0016406:	57                   	push   edi
c0016407:	e8 d0 dd 00 00       	call   c00241dc <APICTimer::open(int, int, void*)>
c001640c:	83 c4 20             	add    esp,0x20
c001640f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016411:	6a 00                	push   0x0
c0016413:	6a 00                	push   0x0
c0016415:	6a 00                	push   0x0
c0016417:	53                   	push   ebx
c0016418:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001641b:	58                   	pop    eax
c001641c:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0016421:	5a                   	pop    edx
c0016422:	57                   	push   edi
c0016423:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016429:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001642f:	e8 48 d6 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0016434:	83 c4 10             	add    esp,0x10
c0016437:	eb 33                	jmp    c001646c <setupTimer(int)+0xec>
c0016439:	83 ec 0c             	sub    esp,0xc
c001643c:	68 5c 01 00 00       	push   0x15c
c0016441:	e8 7a 90 ff ff       	call   c000f4c0 <malloc>
c0016446:	89 04 24             	mov    DWORD PTR [esp],eax
c0016449:	89 c3                	mov    ebx,eax
c001644b:	e8 da df 00 00       	call   c002442a <PIT::PIT()>
c0016450:	58                   	pop    eax
c0016451:	5a                   	pop    edx
c0016452:	53                   	push   ebx
c0016453:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c0016459:	e8 1e d6 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c001645e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016460:	6a 00                	push   0x0
c0016462:	6a 00                	push   0x0
c0016464:	56                   	push   esi
c0016465:	53                   	push   ebx
c0016466:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016469:	83 c4 20             	add    esp,0x20
c001646c:	89 d8                	mov    eax,ebx
c001646e:	5b                   	pop    ebx
c001646f:	5e                   	pop    esi
c0016470:	5f                   	pop    edi
c0016471:	c3                   	ret    

c0016472 <VCache::VCache(PhysicalDisk*)>:
c0016472:	53                   	push   ebx
c0016473:	83 ec 18             	sub    esp,0x18
c0016476:	ba 3c 8f 02 c0       	mov    edx,0xc0028f3c
c001647b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001647f:	89 10                	mov    DWORD PTR [eax],edx
c0016481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016485:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001648c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016490:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001649b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00164a2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00164a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ad:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00164b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00164bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00164c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164ca:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00164ce:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164dd:	e8 de 8f ff ff       	call   c000f4c0 <malloc>
c00164e2:	83 c4 10             	add    esp,0x10
c00164e5:	89 c3                	mov    ebx,eax
c00164e7:	83 ec 0c             	sub    esp,0xc
c00164ea:	53                   	push   ebx
c00164eb:	e8 cc 5d 00 00       	call   c001c2bc <Mutex::Mutex()>
c00164f0:	83 c4 10             	add    esp,0x10
c00164f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164f7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00164fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164fe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016502:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016509:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016510:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016514:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001651a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001651e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016521:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016525:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001652b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016531:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016535:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016538:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001653b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653f:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016543:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016547:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001654d:	c1 e0 06             	shl    eax,0x6
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	50                   	push   eax
c0016554:	e8 67 8f ff ff       	call   c000f4c0 <malloc>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	89 c2                	mov    edx,eax
c001655e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016562:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016565:	90                   	nop
c0016566:	83 c4 18             	add    esp,0x18
c0016569:	5b                   	pop    ebx
c001656a:	c3                   	ret    
c001656b:	90                   	nop

c001656c <VCache::writeWriteBuffer()>:
c001656c:	53                   	push   ebx
c001656d:	83 ec 14             	sub    esp,0x14
c0016570:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016574:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016577:	8b 10                	mov    edx,DWORD PTR [eax]
c0016579:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001657c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001657f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016582:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016585:	50                   	push   eax
c0016586:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016589:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016590:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016597:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001659b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00165a2:	83 c4 28             	add    esp,0x28
c00165a5:	5b                   	pop    ebx
c00165a6:	c3                   	ret    
c00165a7:	90                   	nop

c00165a8 <VCache::~VCache()>:
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	ba 3c 8f 02 c0       	mov    edx,0xc0028f3c
c00165b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b4:	89 10                	mov    DWORD PTR [eax],edx
c00165b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ba:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00165bd:	84 c0                	test   al,al
c00165bf:	74 0f                	je     c00165d0 <VCache::~VCache()+0x28>
c00165c1:	83 ec 0c             	sub    esp,0xc
c00165c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c8:	e8 9f ff ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165d7:	83 ec 0c             	sub    esp,0xc
c00165da:	50                   	push   eax
c00165db:	e8 f0 8e ff ff       	call   c000f4d0 <free>
c00165e0:	83 c4 10             	add    esp,0x10
c00165e3:	90                   	nop
c00165e4:	83 c4 0c             	add    esp,0xc
c00165e7:	c3                   	ret    

c00165e8 <VCache::~VCache()>:
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	83 ec 0c             	sub    esp,0xc
c00165ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f2:	e8 b1 ff ff ff       	call   c00165a8 <VCache::~VCache()>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	83 ec 08             	sub    esp,0x8
c00165fd:	6a 30                	push   0x30
c00165ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016603:	e8 a5 bf ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0016608:	83 c4 10             	add    esp,0x10
c001660b:	83 c4 0c             	add    esp,0xc
c001660e:	c3                   	ret    
c001660f:	90                   	nop

c0016610 <VCache::write(unsigned long long, int, void*)>:
c0016610:	55                   	push   ebp
c0016611:	57                   	push   edi
c0016612:	56                   	push   esi
c0016613:	53                   	push   ebx
c0016614:	83 ec 28             	sub    esp,0x28
c0016617:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001661b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001661f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016623:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016627:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001662a:	e8 ef 60 00 00       	call   c001c71e <Semaphore::acquire()>
c001662f:	83 c4 10             	add    esp,0x10
c0016632:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016636:	74 66                	je     c001669e <VCache::write(unsigned long long, int, void*)+0x8e>
c0016638:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001663b:	99                   	cdq    
c001663c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016640:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016643:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016646:	89 c1                	mov    ecx,eax
c0016648:	89 d0                	mov    eax,edx
c001664a:	31 f1                	xor    ecx,esi
c001664c:	31 f8                	xor    eax,edi
c001664e:	89 ca                	mov    edx,ecx
c0016650:	09 c2                	or     edx,eax
c0016652:	75 3e                	jne    c0016692 <VCache::write(unsigned long long, int, void*)+0x82>
c0016654:	83 fd 01             	cmp    ebp,0x1
c0016657:	75 39                	jne    c0016692 <VCache::write(unsigned long long, int, void*)+0x82>
c0016659:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001665c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016662:	51                   	push   ecx
c0016663:	50                   	push   eax
c0016664:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016668:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001666c:	0f af c8             	imul   ecx,eax
c001666f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016672:	51                   	push   ecx
c0016673:	e8 ce 9f fe ff       	call   c0000646 <memcpy>
c0016678:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001667b:	83 c4 10             	add    esp,0x10
c001667e:	40                   	inc    eax
c001667f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016682:	83 f8 40             	cmp    eax,0x40
c0016685:	75 57                	jne    c00166de <VCache::write(unsigned long long, int, void*)+0xce>
c0016687:	83 ec 0c             	sub    esp,0xc
c001668a:	53                   	push   ebx
c001668b:	e8 dc fe ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c0016690:	eb 34                	jmp    c00166c6 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016692:	83 ec 0c             	sub    esp,0xc
c0016695:	53                   	push   ebx
c0016696:	e8 d1 fe ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00166a1:	83 fd 3f             	cmp    ebp,0x3f
c00166a4:	7f 25                	jg     c00166cb <VCache::write(unsigned long long, int, void*)+0xbb>
c00166a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00166a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00166ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00166af:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00166b3:	52                   	push   edx
c00166b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00166ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00166c1:	e8 80 9f fe ff       	call   c0000646 <memcpy>
c00166c6:	83 c4 10             	add    esp,0x10
c00166c9:	eb 13                	jmp    c00166de <VCache::write(unsigned long long, int, void*)+0xce>
c00166cb:	83 ec 0c             	sub    esp,0xc
c00166ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00166d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00166d4:	55                   	push   ebp
c00166d5:	57                   	push   edi
c00166d6:	56                   	push   esi
c00166d7:	50                   	push   eax
c00166d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00166db:	83 c4 20             	add    esp,0x20
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00166e4:	e8 bd 65 00 00       	call   c001cca6 <Semaphore::release()>
c00166e9:	83 c4 2c             	add    esp,0x2c
c00166ec:	31 c0                	xor    eax,eax
c00166ee:	5b                   	pop    ebx
c00166ef:	5e                   	pop    esi
c00166f0:	5f                   	pop    edi
c00166f1:	5d                   	pop    ebp
c00166f2:	c3                   	ret    
c00166f3:	90                   	nop

c00166f4 <VCache::read(unsigned long long, int, void*)>:
c00166f4:	57                   	push   edi
c00166f5:	56                   	push   esi
c00166f6:	53                   	push   ebx
c00166f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00166fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00166ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016703:	83 ec 0c             	sub    esp,0xc
c0016706:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016709:	e8 10 60 00 00       	call   c001c71e <Semaphore::acquire()>
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016715:	74 0c                	je     c0016723 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016717:	83 ec 0c             	sub    esp,0xc
c001671a:	53                   	push   ebx
c001671b:	e8 4c fe ff ff       	call   c001656c <VCache::writeWriteBuffer()>
c0016720:	83 c4 10             	add    esp,0x10
c0016723:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016726:	83 ec 0c             	sub    esp,0xc
c0016729:	8b 10                	mov    edx,DWORD PTR [eax]
c001672b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001672f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016733:	57                   	push   edi
c0016734:	56                   	push   esi
c0016735:	50                   	push   eax
c0016736:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016739:	83 c4 14             	add    esp,0x14
c001673c:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001673f:	e8 62 65 00 00       	call   c001cca6 <Semaphore::release()>
c0016744:	83 c4 10             	add    esp,0x10
c0016747:	31 c0                	xor    eax,eax
c0016749:	5b                   	pop    ebx
c001674a:	5e                   	pop    esi
c001674b:	5f                   	pop    edi
c001674c:	c3                   	ret    
c001674d:	90                   	nop

c001674e <Video::putrect(int, int, int, int, unsigned int)>:
c001674e:	55                   	push   ebp
c001674f:	57                   	push   edi
c0016750:	56                   	push   esi
c0016751:	53                   	push   ebx
c0016752:	83 ec 1c             	sub    esp,0x1c
c0016755:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016759:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001675d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016761:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016765:	01 e8                	add    eax,ebp
c0016767:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001676b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001676f:	01 df                	add    edi,ebx
c0016771:	39 fb                	cmp    ebx,edi
c0016773:	7d 1b                	jge    c0016790 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0016775:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016779:	7d 12                	jge    c001678d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c001677b:	8b 16                	mov    edx,DWORD PTR [esi]
c001677d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016781:	53                   	push   ebx
c0016782:	55                   	push   ebp
c0016783:	45                   	inc    ebp
c0016784:	56                   	push   esi
c0016785:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016788:	83 c4 10             	add    esp,0x10
c001678b:	eb e8                	jmp    c0016775 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c001678d:	43                   	inc    ebx
c001678e:	eb e1                	jmp    c0016771 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0016790:	83 c4 1c             	add    esp,0x1c
c0016793:	5b                   	pop    ebx
c0016794:	5e                   	pop    esi
c0016795:	5f                   	pop    edi
c0016796:	5d                   	pop    ebp
c0016797:	c3                   	ret    

c0016798 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016798:	55                   	push   ebp
c0016799:	57                   	push   edi
c001679a:	31 ff                	xor    edi,edi
c001679c:	56                   	push   esi
c001679d:	53                   	push   ebx
c001679e:	83 ec 1c             	sub    esp,0x1c
c00167a1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00167a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00167a9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00167b0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00167b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00167b9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00167bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00167c1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00167c4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00167c8:	01 f9                	add    ecx,edi
c00167ca:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00167ce:	7d 2f                	jge    c00167ff <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00167d0:	31 f6                	xor    esi,esi
c00167d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00167d6:	01 f2                	add    edx,esi
c00167d8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00167dc:	7d 1a                	jge    c00167f8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00167de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00167e1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00167e4:	46                   	inc    esi
c00167e5:	51                   	push   ecx
c00167e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167ea:	52                   	push   edx
c00167eb:	55                   	push   ebp
c00167ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167f6:	eb da                	jmp    c00167d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00167f8:	47                   	inc    edi
c00167f9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00167fd:	eb c5                	jmp    c00167c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00167ff:	83 c4 1c             	add    esp,0x1c
c0016802:	5b                   	pop    ebx
c0016803:	5e                   	pop    esi
c0016804:	5f                   	pop    edi
c0016805:	5d                   	pop    ebp
c0016806:	c3                   	ret    
c0016807:	90                   	nop

c0016808 <Video::blit(unsigned int*, int, int, int, int)>:
c0016808:	55                   	push   ebp
c0016809:	57                   	push   edi
c001680a:	56                   	push   esi
c001680b:	53                   	push   ebx
c001680c:	83 ec 1c             	sub    esp,0x1c
c001680f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016813:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016817:	85 c0                	test   eax,eax
c0016819:	79 02                	jns    c001681d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001681b:	31 c0                	xor    eax,eax
c001681d:	c1 e0 02             	shl    eax,0x2
c0016820:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016828:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001682c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016830:	39 d8                	cmp    eax,ebx
c0016832:	7e 49                	jle    c001687d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016834:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001683a:	7c 41                	jl     c001687d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001683c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016844:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016848:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001684c:	39 f9                	cmp    ecx,edi
c001684e:	7e 22                	jle    c0016872 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016850:	83 c5 04             	add    ebp,0x4
c0016853:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016859:	7c 14                	jl     c001686f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001685b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001685d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016860:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016864:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016868:	56                   	push   esi
c0016869:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001686c:	83 c4 10             	add    esp,0x10
c001686f:	47                   	inc    edi
c0016870:	eb d2                	jmp    c0016844 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016876:	43                   	inc    ebx
c0016877:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001687b:	eb ab                	jmp    c0016828 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001687d:	83 c4 1c             	add    esp,0x1c
c0016880:	5b                   	pop    ebx
c0016881:	5e                   	pop    esi
c0016882:	5f                   	pop    edi
c0016883:	5d                   	pop    ebp
c0016884:	c3                   	ret    
c0016885:	90                   	nop

c0016886 <Video::clearScreen(unsigned int)>:
c0016886:	57                   	push   edi
c0016887:	56                   	push   esi
c0016888:	53                   	push   ebx
c0016889:	31 db                	xor    ebx,ebx
c001688b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001688f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016895:	7e 1f                	jle    c00168b6 <Video::clearScreen(unsigned int)+0x30>
c0016897:	31 ff                	xor    edi,edi
c0016899:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001689f:	7e 12                	jle    c00168b3 <Video::clearScreen(unsigned int)+0x2d>
c00168a1:	8b 06                	mov    eax,DWORD PTR [esi]
c00168a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00168a7:	53                   	push   ebx
c00168a8:	57                   	push   edi
c00168a9:	47                   	inc    edi
c00168aa:	56                   	push   esi
c00168ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00168ae:	83 c4 10             	add    esp,0x10
c00168b1:	eb e6                	jmp    c0016899 <Video::clearScreen(unsigned int)+0x13>
c00168b3:	43                   	inc    ebx
c00168b4:	eb d9                	jmp    c001688f <Video::clearScreen(unsigned int)+0x9>
c00168b6:	5b                   	pop    ebx
c00168b7:	5e                   	pop    esi
c00168b8:	5f                   	pop    edi
c00168b9:	c3                   	ret    

c00168ba <Video::putpixel(int, int, unsigned int)>:
c00168ba:	c7 44 24 04 44 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028f44
c00168c2:	e9 c6 bd ff ff       	jmp    c001268d <Dbg::kprintf(char const*, ...)>
c00168c7:	90                   	nop

c00168c8 <Video::Video(char const*)>:
c00168c8:	83 ec 0c             	sub    esp,0xc
c00168cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cf:	83 ec 08             	sub    esp,0x8
c00168d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168d6:	50                   	push   eax
c00168d7:	e8 90 d3 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00168dc:	83 c4 10             	add    esp,0x10
c00168df:	ba b8 8f 02 c0       	mov    edx,0xc0028fb8
c00168e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e8:	89 10                	mov    DWORD PTR [eax],edx
c00168ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ee:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00168f8:	90                   	nop
c00168f9:	83 c4 0c             	add    esp,0xc
c00168fc:	c3                   	ret    
c00168fd:	90                   	nop

c00168fe <Video::~Video()>:
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	ba b8 8f 02 c0       	mov    edx,0xc0028fb8
c0016906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690a:	89 10                	mov    DWORD PTR [eax],edx
c001690c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016910:	83 ec 0c             	sub    esp,0xc
c0016913:	50                   	push   eax
c0016914:	e8 35 d0 ff ff       	call   c001394e <Device::~Device()>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	90                   	nop
c001691d:	83 c4 0c             	add    esp,0xc
c0016920:	c3                   	ret    
c0016921:	90                   	nop

c0016922 <Video::~Video()>:
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	83 ec 0c             	sub    esp,0xc
c0016928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001692c:	e8 cd ff ff ff       	call   c00168fe <Video::~Video()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	83 ec 08             	sub    esp,0x8
c0016937:	68 64 01 00 00       	push   0x164
c001693c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016940:	e8 68 bc ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	83 c4 0c             	add    esp,0xc
c001694b:	c3                   	ret    

c001694c <Video::isMonochrome()>:
c001694c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016950:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016956:	c3                   	ret    
c0016957:	90                   	nop

c0016958 <Video::getWidth()>:
c0016958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001695c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016962:	c3                   	ret    
c0016963:	90                   	nop

c0016964 <Video::getHeight()>:
c0016964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016968:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001696e:	c3                   	ret    
c001696f:	90                   	nop

c0016970 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016970:	55                   	push   ebp
c0016971:	57                   	push   edi
c0016972:	56                   	push   esi
c0016973:	53                   	push   ebx
c0016974:	83 ec 2c             	sub    esp,0x2c
c0016977:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001697b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001697f:	83 f8 01             	cmp    eax,0x1
c0016982:	19 c9                	sbb    ecx,ecx
c0016984:	31 db                	xor    ebx,ebx
c0016986:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001698a:	89 cd                	mov    ebp,ecx
c001698c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016994:	f7 d5                	not    ebp
c0016996:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001699c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00169a0:	01 d8                	add    eax,ebx
c00169a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169a6:	56                   	push   esi
c00169a7:	e8 b8 ff ff ff       	call   c0016964 <Video::getHeight()>
c00169ac:	59                   	pop    ecx
c00169ad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00169b1:	7e 70                	jle    c0016a23 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00169b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00169b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00169bb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00169be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00169c6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00169cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00169d1:	89 f8                	mov    eax,edi
c00169d3:	83 c0 20             	add    eax,0x20
c00169d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00169da:	56                   	push   esi
c00169db:	e8 78 ff ff ff       	call   c0016958 <Video::getWidth()>
c00169e0:	5a                   	pop    edx
c00169e1:	39 c7                	cmp    edi,eax
c00169e3:	7d 34                	jge    c0016a19 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00169e5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00169ea:	74 05                	je     c00169f1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00169ec:	8b 06                	mov    eax,DWORD PTR [esi]
c00169ee:	55                   	push   ebp
c00169ef:	eb 0d                	jmp    c00169fe <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00169f1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00169f6:	74 12                	je     c0016a0a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00169f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00169fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a02:	57                   	push   edi
c0016a03:	56                   	push   esi
c0016a04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a07:	83 c4 10             	add    esp,0x10
c0016a0a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016a0e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016a12:	47                   	inc    edi
c0016a13:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016a17:	75 c1                	jne    c00169da <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016a19:	43                   	inc    ebx
c0016a1a:	83 fb 20             	cmp    ebx,0x20
c0016a1d:	0f 85 79 ff ff ff    	jne    c001699c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016a23:	83 c4 2c             	add    esp,0x2c
c0016a26:	5b                   	pop    ebx
c0016a27:	5e                   	pop    esi
c0016a28:	5f                   	pop    edi
c0016a29:	5d                   	pop    ebp
c0016a2a:	c3                   	ret    
c0016a2b:	90                   	nop

c0016a2c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016a2c:	55                   	push   ebp
c0016a2d:	57                   	push   edi
c0016a2e:	56                   	push   esi
c0016a2f:	53                   	push   ebx
c0016a30:	83 ec 28             	sub    esp,0x28
c0016a33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016a37:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016a3b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016a3f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016a43:	c1 e7 08             	shl    edi,0x8
c0016a46:	01 c7                	add    edi,eax
c0016a48:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016a4c:	c1 e0 08             	shl    eax,0x8
c0016a4f:	01 d0                	add    eax,edx
c0016a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a59:	0f af c7             	imul   eax,edi
c0016a5c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016a63:	50                   	push   eax
c0016a64:	e8 57 8a ff ff       	call   c000f4c0 <malloc>
c0016a69:	83 c4 10             	add    esp,0x10
c0016a6c:	89 c5                	mov    ebp,eax
c0016a6e:	85 c0                	test   eax,eax
c0016a70:	75 15                	jne    c0016a87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016a72:	83 ec 0c             	sub    esp,0xc
c0016a75:	68 53 8f 02 c0       	push   0xc0028f53
c0016a7a:	e8 0e bc ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016a7f:	83 c4 10             	add    esp,0x10
c0016a82:	e9 1c 01 00 00       	jmp    c0016ba3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016a87:	be 12 00 00 00       	mov    esi,0x12
c0016a8c:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016a90:	74 11                	je     c0016aa3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016a92:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016a96:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016a9a:	c1 fe 03             	sar    esi,0x3
c0016a9d:	0f af f0             	imul   esi,eax
c0016aa0:	83 c6 12             	add    esi,0x12
c0016aa3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016aa7:	74 04                	je     c0016aad <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016aa9:	85 ff                	test   edi,edi
c0016aab:	75 12                	jne    c0016abf <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016aad:	83 ec 0c             	sub    esp,0xc
c0016ab0:	68 6a 8f 02 c0       	push   0xc0028f6a
c0016ab5:	e8 d3 bb ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016aba:	e9 ce 00 00 00       	jmp    c0016b8d <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016abf:	52                   	push   edx
c0016ac0:	52                   	push   edx
c0016ac1:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016ac5:	50                   	push   eax
c0016ac6:	68 7f 8f 02 c0       	push   0xc0028f7f
c0016acb:	e8 bd bb ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016ad0:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016ad4:	83 c4 10             	add    esp,0x10
c0016ad7:	80 fa 02             	cmp    dl,0x2
c0016ada:	0f 85 98 00 00 00    	jne    c0016b78 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ae0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016ae5:	75 10                	jne    c0016af7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ae7:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016aeb:	75 0a                	jne    c0016af7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016aed:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016af0:	83 e8 18             	sub    eax,0x18
c0016af3:	a8 f7                	test   al,0xf7
c0016af5:	74 0a                	je     c0016b01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016af7:	83 ec 0c             	sub    esp,0xc
c0016afa:	68 8c 8f 02 c0       	push   0xc0028f8c
c0016aff:	eb 7f                	jmp    c0016b80 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016b01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b09:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b15:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016b1d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016b21:	75 0c                	jne    c0016b2f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016b23:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016b28:	c1 e0 18             	shl    eax,0x18
c0016b2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b2f:	41                   	inc    ecx
c0016b30:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016b35:	c1 e2 10             	shl    edx,0x10
c0016b38:	89 d0                	mov    eax,edx
c0016b3a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016b3f:	c1 e2 08             	shl    edx,0x8
c0016b42:	09 c2                	or     edx,eax
c0016b44:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016b48:	09 c2                	or     edx,eax
c0016b4a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016b4e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016b52:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016b56:	c1 f8 03             	sar    eax,0x3
c0016b59:	01 c6                	add    esi,eax
c0016b5b:	89 c8                	mov    eax,ecx
c0016b5d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016b61:	39 c7                	cmp    edi,eax
c0016b63:	7f b0                	jg     c0016b15 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016b65:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016b69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b6d:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016b70:	7e 22                	jle    c0016b94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016b72:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016b76:	eb 99                	jmp    c0016b11 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016b78:	50                   	push   eax
c0016b79:	50                   	push   eax
c0016b7a:	52                   	push   edx
c0016b7b:	68 9a 8f 02 c0       	push   0xc0028f9a
c0016b80:	e8 08 bb ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016b85:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b88:	e8 43 89 ff ff       	call   c000f4d0 <free>
c0016b8d:	83 c4 10             	add    esp,0x10
c0016b90:	31 ed                	xor    ebp,ebp
c0016b92:	eb 0f                	jmp    c0016ba3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016b94:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b9b:	89 38                	mov    DWORD PTR [eax],edi
c0016b9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ba1:	89 08                	mov    DWORD PTR [eax],ecx
c0016ba3:	83 c4 1c             	add    esp,0x1c
c0016ba6:	89 e8                	mov    eax,ebp
c0016ba8:	5b                   	pop    ebx
c0016ba9:	5e                   	pop    esi
c0016baa:	5f                   	pop    edi
c0016bab:	5d                   	pop    ebp
c0016bac:	c3                   	ret    
c0016bad:	90                   	nop

c0016bae <Video::putTGA(int, int, unsigned char*, int)>:
c0016bae:	55                   	push   ebp
c0016baf:	57                   	push   edi
c0016bb0:	56                   	push   esi
c0016bb1:	53                   	push   ebx
c0016bb2:	83 ec 28             	sub    esp,0x28
c0016bb5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016bb9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bbd:	50                   	push   eax
c0016bbe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016bc2:	50                   	push   eax
c0016bc3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016bc7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016bcb:	56                   	push   esi
c0016bcc:	e8 5b fe ff ff       	call   c0016a2c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016bd1:	83 c4 20             	add    esp,0x20
c0016bd4:	85 c0                	test   eax,eax
c0016bd6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016bda:	74 35                	je     c0016c11 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016bdc:	89 c7                	mov    edi,eax
c0016bde:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016be2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016be6:	39 d8                	cmp    eax,ebx
c0016be8:	7e 27                	jle    c0016c11 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016bea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016bee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016bf2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016bf6:	39 e8                	cmp    eax,ebp
c0016bf8:	7e 14                	jle    c0016c0e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016bfa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bfc:	83 c7 04             	add    edi,0x4
c0016bff:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016c02:	53                   	push   ebx
c0016c03:	55                   	push   ebp
c0016c04:	45                   	inc    ebp
c0016c05:	56                   	push   esi
c0016c06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	eb e0                	jmp    c0016bee <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016c0e:	43                   	inc    ebx
c0016c0f:	eb cd                	jmp    c0016bde <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016c11:	83 c4 1c             	add    esp,0x1c
c0016c14:	5b                   	pop    ebx
c0016c15:	5e                   	pop    esi
c0016c16:	5f                   	pop    edi
c0016c17:	5d                   	pop    ebp
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <ACPI::close(int, int, void*)>:
c0016c1a:	83 ec 1c             	sub    esp,0x1c
c0016c1d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016c25:	74 0a                	je     c0016c31 <ACPI::close(int, int, void*)+0x17>
c0016c27:	b8 00 00 00 00       	mov    eax,0x0
c0016c2c:	e9 9a 00 00 00       	jmp    c0016ccb <ACPI::close(int, int, void*)+0xb1>
c0016c31:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016c36:	75 37                	jne    c0016c6f <ACPI::close(int, int, void*)+0x55>
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	68 f8 8f 02 c0       	push   0xc0028ff8
c0016c40:	e8 48 ba ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0016c45:	83 c4 10             	add    esp,0x10
c0016c48:	a1 08 c4 02 c0       	mov    eax,ds:0xc002c408
c0016c4d:	85 c0                	test   eax,eax
c0016c4f:	74 07                	je     c0016c58 <ACPI::close(int, int, void*)+0x3e>
c0016c51:	a1 08 c4 02 c0       	mov    eax,ds:0xc002c408
c0016c56:	ff d0                	call   eax
c0016c58:	83 ec 0c             	sub    esp,0xc
c0016c5b:	68 cc 90 02 c0       	push   0xc00290cc
c0016c60:	e8 f2 24 00 00       	call   c0019157 <Krnl::panic(char const*)>
c0016c65:	83 c4 10             	add    esp,0x10
c0016c68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c6d:	eb 5c                	jmp    c0016ccb <ACPI::close(int, int, void*)+0xb1>
c0016c6f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016c74:	75 50                	jne    c0016cc6 <ACPI::close(int, int, void*)+0xac>
c0016c76:	a1 04 c4 02 c0       	mov    eax,ds:0xc002c404
c0016c7b:	85 c0                	test   eax,eax
c0016c7d:	74 07                	je     c0016c86 <ACPI::close(int, int, void*)+0x6c>
c0016c7f:	a1 04 c4 02 c0       	mov    eax,ds:0xc002c404
c0016c84:	ff d0                	call   eax
c0016c86:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016c8b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c90:	83 e0 02             	and    eax,0x2
c0016c93:	74 1c                	je     c0016cb1 <ACPI::close(int, int, void*)+0x97>
c0016c95:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016c9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ca0:	89 c2                	mov    edx,eax
c0016ca2:	ec                   	in     al,dx
c0016ca3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016ca7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016cab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016caf:	eb da                	jmp    c0016c8b <ACPI::close(int, int, void*)+0x71>
c0016cb1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016cb8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016cbd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016cc1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016cc5:	ee                   	out    dx,al
c0016cc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ccb:	83 c4 1c             	add    esp,0x1c
c0016cce:	c3                   	ret    

c0016ccf <findRSDP()>:
c0016ccf:	83 ec 1c             	sub    esp,0x1c
c0016cd2:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0016cd7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016cdd:	83 e0 04             	and    eax,0x4
c0016ce0:	84 c0                	test   al,al
c0016ce2:	75 07                	jne    c0016ceb <findRSDP()+0x1c>
c0016ce4:	b8 00 00 00 00       	mov    eax,0x0
c0016ce9:	eb 6a                	jmp    c0016d55 <findRSDP()+0x86>
c0016ceb:	a1 d0 bd 02 c0       	mov    eax,ds:0xc002bdd0
c0016cf0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016cf5:	7f 1b                	jg     c0016d12 <findRSDP()+0x43>
c0016cf7:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0016cfc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016d02:	83 e2 fb             	and    edx,0xfffffffb
c0016d05:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016d0b:	b8 00 00 00 00       	mov    eax,0x0
c0016d10:	eb 43                	jmp    c0016d55 <findRSDP()+0x86>
c0016d12:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016d1a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016d22:	77 2c                	ja     c0016d50 <findRSDP()+0x81>
c0016d24:	83 ec 04             	sub    esp,0x4
c0016d27:	6a 08                	push   0x8
c0016d29:	68 05 90 02 c0       	push   0xc0029005
c0016d2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d32:	e8 ac 98 fe ff       	call   c00005e3 <memcmp>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	85 c0                	test   eax,eax
c0016d3c:	0f 94 c0             	sete   al
c0016d3f:	84 c0                	test   al,al
c0016d41:	74 06                	je     c0016d49 <findRSDP()+0x7a>
c0016d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d47:	eb 0c                	jmp    c0016d55 <findRSDP()+0x86>
c0016d49:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016d4e:	eb ca                	jmp    c0016d1a <findRSDP()+0x4b>
c0016d50:	b8 00 00 00 00       	mov    eax,0x0
c0016d55:	83 c4 1c             	add    esp,0x1c
c0016d58:	c3                   	ret    

c0016d59 <loadACPITables(unsigned char*)>:
c0016d59:	56                   	push   esi
c0016d5a:	53                   	push   ebx
c0016d5b:	83 ec 44             	sub    esp,0x44
c0016d5e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0016d63:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016d69:	83 e0 04             	and    eax,0x4
c0016d6c:	84 c0                	test   al,al
c0016d6e:	0f 84 05 02 00 00    	je     c0016f79 <loadACPITables(unsigned char*)+0x220>
c0016d74:	a0 20 c6 02 c0       	mov    al,ds:0xc002c620
c0016d79:	84 c0                	test   al,al
c0016d7b:	74 75                	je     c0016df2 <loadACPITables(unsigned char*)+0x99>
c0016d7d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016d8c:	83 e8 24             	sub    eax,0x24
c0016d8f:	c1 e8 03             	shr    eax,0x3
c0016d92:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016d96:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016d9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016da2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016da6:	0f 8d b2 00 00 00    	jge    c0016e5e <loadACPITables(unsigned char*)+0x105>
c0016dac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016db0:	83 c0 24             	add    eax,0x24
c0016db3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016db7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016dbb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016dbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016dc3:	c1 e0 03             	shl    eax,0x3
c0016dc6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016dca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016dce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016dd3:	89 c1                	mov    ecx,eax
c0016dd5:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c0016dda:	8d 50 01             	lea    edx,[eax+0x1]
c0016ddd:	89 15 0c c4 02 c0    	mov    DWORD PTR ds:0xc002c40c,edx
c0016de3:	89 ca                	mov    edx,ecx
c0016de5:	89 14 c5 24 c4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3bdc],edx
c0016dec:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016df0:	eb ac                	jmp    c0016d9e <loadACPITables(unsigned char*)+0x45>
c0016df2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016df6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016e01:	83 e8 24             	sub    eax,0x24
c0016e04:	c1 e8 02             	shr    eax,0x2
c0016e07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e0b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016e13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e17:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016e1b:	7d 41                	jge    c0016e5e <loadACPITables(unsigned char*)+0x105>
c0016e1d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e21:	83 c0 24             	add    eax,0x24
c0016e24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016e34:	c1 e0 02             	shl    eax,0x2
c0016e37:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016e3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e41:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c0016e46:	8d 50 01             	lea    edx,[eax+0x1]
c0016e49:	89 15 0c c4 02 c0    	mov    DWORD PTR ds:0xc002c40c,edx
c0016e4f:	89 ca                	mov    edx,ecx
c0016e51:	89 14 c5 24 c4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3bdc],edx
c0016e58:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0016e5c:	eb b5                	jmp    c0016e13 <loadACPITables(unsigned char*)+0xba>
c0016e5e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016e66:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c0016e6b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016e6f:	0f 8d 05 01 00 00    	jge    c0016f7a <loadACPITables(unsigned char*)+0x221>
c0016e75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e79:	8b 04 c5 24 c4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd3bdc]
c0016e80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e90:	25 ff 0f 00 00       	and    eax,0xfff
c0016e95:	89 c6                	mov    esi,eax
c0016e97:	e8 91 a9 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0016e9c:	89 c3                	mov    ebx,eax
c0016e9e:	83 ec 0c             	sub    esp,0xc
c0016ea1:	6a 01                	push   0x1
c0016ea3:	e8 f5 a7 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0016ea8:	83 c4 10             	add    esp,0x10
c0016eab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016eaf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016eb5:	83 ec 0c             	sub    esp,0xc
c0016eb8:	6a 01                	push   0x1
c0016eba:	6a 01                	push   0x1
c0016ebc:	50                   	push   eax
c0016ebd:	52                   	push   edx
c0016ebe:	53                   	push   ebx
c0016ebf:	e8 98 b1 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ec4:	83 c4 20             	add    esp,0x20
c0016ec7:	09 f0                	or     eax,esi
c0016ec9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ecd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ed1:	c1 e0 03             	shl    eax,0x3
c0016ed4:	05 20 c4 02 c0       	add    eax,0xc002c420
c0016ed9:	83 ec 04             	sub    esp,0x4
c0016edc:	6a 04                	push   0x4
c0016ede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee2:	50                   	push   eax
c0016ee3:	e8 5e 97 fe ff       	call   c0000646 <memcpy>
c0016ee8:	83 c4 10             	add    esp,0x10
c0016eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016eef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ef6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016efa:	05 00 10 00 00       	add    eax,0x1000
c0016eff:	c1 e8 0c             	shr    eax,0xc
c0016f02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f11:	25 ff 0f 00 00       	and    eax,0xfff
c0016f16:	89 c6                	mov    esi,eax
c0016f18:	e8 10 a9 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0016f1d:	89 c3                	mov    ebx,eax
c0016f1f:	83 ec 0c             	sub    esp,0xc
c0016f22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f26:	e8 72 a7 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0016f2b:	83 c4 10             	add    esp,0x10
c0016f2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f32:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016f38:	83 ec 0c             	sub    esp,0xc
c0016f3b:	6a 01                	push   0x1
c0016f3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f41:	50                   	push   eax
c0016f42:	52                   	push   edx
c0016f43:	53                   	push   ebx
c0016f44:	e8 13 b1 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016f49:	83 c4 20             	add    esp,0x20
c0016f4c:	09 f0                	or     eax,esi
c0016f4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016f55:	83 ec 0c             	sub    esp,0xc
c0016f58:	50                   	push   eax
c0016f59:	e8 a3 aa ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c0016f5e:	83 c4 10             	add    esp,0x10
c0016f61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016f69:	89 14 c5 24 c4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd3bdc],edx
c0016f70:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016f74:	e9 ed fe ff ff       	jmp    c0016e66 <loadACPITables(unsigned char*)+0x10d>
c0016f79:	90                   	nop
c0016f7a:	83 c4 44             	add    esp,0x44
c0016f7d:	5b                   	pop    ebx
c0016f7e:	5e                   	pop    esi
c0016f7f:	c3                   	ret    

c0016f80 <findRSDT(unsigned char*)>:
c0016f80:	56                   	push   esi
c0016f81:	53                   	push   ebx
c0016f82:	83 ec 44             	sub    esp,0x44
c0016f85:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0016f8a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016f90:	83 e0 04             	and    eax,0x4
c0016f93:	84 c0                	test   al,al
c0016f95:	75 0a                	jne    c0016fa1 <findRSDT(unsigned char*)+0x21>
c0016f97:	b8 00 00 00 00       	mov    eax,0x0
c0016f9c:	e9 f7 00 00 00       	jmp    c0017098 <findRSDT(unsigned char*)+0x118>
c0016fa1:	83 ec 04             	sub    esp,0x4
c0016fa4:	6a 24                	push   0x24
c0016fa6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0016faa:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fae:	50                   	push   eax
c0016faf:	e8 92 96 fe ff       	call   c0000646 <memcpy>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016fbb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0016fbf:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016fc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fcb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016fcf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fd7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016fdb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fdf:	25 ff 0f 00 00       	and    eax,0xfff
c0016fe4:	89 c6                	mov    esi,eax
c0016fe6:	e8 42 a8 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c0016feb:	89 c3                	mov    ebx,eax
c0016fed:	83 ec 0c             	sub    esp,0xc
c0016ff0:	6a 02                	push   0x2
c0016ff2:	e8 a6 a6 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0016ff7:	83 c4 10             	add    esp,0x10
c0016ffa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ffe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017004:	83 ec 0c             	sub    esp,0xc
c0017007:	6a 01                	push   0x1
c0017009:	6a 02                	push   0x2
c001700b:	50                   	push   eax
c001700c:	52                   	push   edx
c001700d:	53                   	push   ebx
c001700e:	e8 49 b0 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017013:	83 c4 20             	add    esp,0x20
c0017016:	09 f0                	or     eax,esi
c0017018:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001701c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017020:	25 ff 0f 00 00       	and    eax,0xfff
c0017025:	89 c6                	mov    esi,eax
c0017027:	e8 01 a8 ff ff       	call   c001182d <Virt::getAKernelVAS()>
c001702c:	89 c3                	mov    ebx,eax
c001702e:	83 ec 0c             	sub    esp,0xc
c0017031:	6a 02                	push   0x2
c0017033:	e8 65 a6 ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c0017038:	83 c4 10             	add    esp,0x10
c001703b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001703f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017045:	83 ec 0c             	sub    esp,0xc
c0017048:	6a 01                	push   0x1
c001704a:	6a 02                	push   0x2
c001704c:	50                   	push   eax
c001704d:	52                   	push   edx
c001704e:	53                   	push   ebx
c001704f:	e8 08 b0 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017054:	83 c4 20             	add    esp,0x20
c0017057:	09 f0                	or     eax,esi
c0017059:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001705d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017062:	75 11                	jne    c0017075 <findRSDT(unsigned char*)+0xf5>
c0017064:	c6 05 20 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c620,0x0
c001706b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001706f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017073:	eb 1f                	jmp    c0017094 <findRSDT(unsigned char*)+0x114>
c0017075:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001707a:	75 11                	jne    c001708d <findRSDT(unsigned char*)+0x10d>
c001707c:	c6 05 20 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c620,0x1
c0017083:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017087:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001708b:	eb 07                	jmp    c0017094 <findRSDT(unsigned char*)+0x114>
c001708d:	b8 00 00 00 00       	mov    eax,0x0
c0017092:	eb 04                	jmp    c0017098 <findRSDT(unsigned char*)+0x118>
c0017094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017098:	83 c4 44             	add    esp,0x44
c001709b:	5b                   	pop    ebx
c001709c:	5e                   	pop    esi
c001709d:	c3                   	ret    

c001709e <findDataTable(unsigned char*, char*)>:
c001709e:	83 ec 1c             	sub    esp,0x1c
c00170a1:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00170a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170ac:	83 e0 04             	and    eax,0x4
c00170af:	84 c0                	test   al,al
c00170b1:	75 07                	jne    c00170ba <findDataTable(unsigned char*, char*)+0x1c>
c00170b3:	b8 00 00 00 00       	mov    eax,0x0
c00170b8:	eb 7c                	jmp    c0017136 <findDataTable(unsigned char*, char*)+0x98>
c00170ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170c2:	a1 0c c4 02 c0       	mov    eax,ds:0xc002c40c
c00170c7:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00170cb:	7d 3a                	jge    c0017107 <findDataTable(unsigned char*, char*)+0x69>
c00170cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d1:	c1 e0 03             	shl    eax,0x3
c00170d4:	05 20 c4 02 c0       	add    eax,0xc002c420
c00170d9:	83 ec 04             	sub    esp,0x4
c00170dc:	6a 04                	push   0x4
c00170de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170e2:	50                   	push   eax
c00170e3:	e8 fb 94 fe ff       	call   c00005e3 <memcmp>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	85 c0                	test   eax,eax
c00170ed:	0f 94 c0             	sete   al
c00170f0:	84 c0                	test   al,al
c00170f2:	74 0d                	je     c0017101 <findDataTable(unsigned char*, char*)+0x63>
c00170f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170f8:	8b 04 c5 24 c4 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd3bdc]
c00170ff:	eb 35                	jmp    c0017136 <findDataTable(unsigned char*, char*)+0x98>
c0017101:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017105:	eb bb                	jmp    c00170c2 <findDataTable(unsigned char*, char*)+0x24>
c0017107:	a0 20 c6 02 c0       	mov    al,ds:0xc002c620
c001710c:	84 c0                	test   al,al
c001710e:	74 07                	je     c0017117 <findDataTable(unsigned char*, char*)+0x79>
c0017110:	b8 58 00 00 00       	mov    eax,0x58
c0017115:	eb 05                	jmp    c001711c <findDataTable(unsigned char*, char*)+0x7e>
c0017117:	b8 52 00 00 00       	mov    eax,0x52
c001711c:	83 ec 04             	sub    esp,0x4
c001711f:	50                   	push   eax
c0017120:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017124:	68 f0 90 02 c0       	push   0xc00290f0
c0017129:	e8 5f b5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	b8 00 00 00 00       	mov    eax,0x0
c0017136:	83 c4 1c             	add    esp,0x1c
c0017139:	c3                   	ret    

c001713a <scanMADT()>:
c001713a:	53                   	push   ebx
c001713b:	83 ec 38             	sub    esp,0x38
c001713e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0017143:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017149:	83 e0 04             	and    eax,0x4
c001714c:	84 c0                	test   al,al
c001714e:	0f 84 63 04 00 00    	je     c00175b7 <scanMADT()+0x47d>
c0017154:	e8 76 fb ff ff       	call   c0016ccf <findRSDP()>
c0017159:	a3 2c c6 02 c0       	mov    ds:0xc002c62c,eax
c001715e:	a1 2c c6 02 c0       	mov    eax,ds:0xc002c62c
c0017163:	85 c0                	test   eax,eax
c0017165:	75 19                	jne    c0017180 <scanMADT()+0x46>
c0017167:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001716c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017172:	83 e2 fb             	and    edx,0xfffffffb
c0017175:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001717b:	e9 3b 04 00 00       	jmp    c00175bb <scanMADT()+0x481>
c0017180:	a1 2c c6 02 c0       	mov    eax,ds:0xc002c62c
c0017185:	83 ec 0c             	sub    esp,0xc
c0017188:	50                   	push   eax
c0017189:	e8 f2 fd ff ff       	call   c0016f80 <findRSDT(unsigned char*)>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	a3 28 c6 02 c0       	mov    ds:0xc002c628,eax
c0017196:	a1 28 c6 02 c0       	mov    eax,ds:0xc002c628
c001719b:	85 c0                	test   eax,eax
c001719d:	75 19                	jne    c00171b8 <scanMADT()+0x7e>
c001719f:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00171a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171aa:	83 e2 fb             	and    edx,0xfffffffb
c00171ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171b3:	e9 03 04 00 00       	jmp    c00175bb <scanMADT()+0x481>
c00171b8:	a1 28 c6 02 c0       	mov    eax,ds:0xc002c628
c00171bd:	83 ec 0c             	sub    esp,0xc
c00171c0:	50                   	push   eax
c00171c1:	e8 93 fb ff ff       	call   c0016d59 <loadACPITables(unsigned char*)>
c00171c6:	83 c4 10             	add    esp,0x10
c00171c9:	a1 28 c6 02 c0       	mov    eax,ds:0xc002c628
c00171ce:	83 ec 08             	sub    esp,0x8
c00171d1:	68 0e 90 02 c0       	push   0xc002900e
c00171d6:	50                   	push   eax
c00171d7:	e8 c2 fe ff ff       	call   c001709e <findDataTable(unsigned char*, char*)>
c00171dc:	83 c4 10             	add    esp,0x10
c00171df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00171e3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00171e8:	75 19                	jne    c0017203 <scanMADT()+0xc9>
c00171ea:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00171ef:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171f5:	83 e2 fe             	and    edx,0xfffffffe
c00171f8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171fe:	e9 b8 03 00 00       	jmp    c00175bb <scanMADT()+0x481>
c0017203:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001720b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001720f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017212:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017216:	0f 87 9f 03 00 00    	ja     c00175bb <scanMADT()+0x481>
c001721c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017224:	0f 87 91 03 00 00    	ja     c00175bb <scanMADT()+0x481>
c001722a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001722e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017232:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017236:	8d 50 01             	lea    edx,[eax+0x1]
c0017239:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001723d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017241:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017245:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017249:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001724d:	8d 50 01             	lea    edx,[eax+0x1]
c0017250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017254:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017258:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001725c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017260:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017265:	0f 86 4f 03 00 00    	jbe    c00175ba <scanMADT()+0x480>
c001726b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017270:	75 57                	jne    c00172c9 <scanMADT()+0x18f>
c0017272:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017276:	8d 50 01             	lea    edx,[eax+0x1]
c0017279:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001727d:	8a 15 20 c8 02 c0    	mov    dl,BYTE PTR ds:0xc002c820
c0017283:	0f b6 d2             	movzx  edx,dl
c0017286:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001728a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001728e:	88 82 60 c8 02 c0    	mov    BYTE PTR [edx-0x3ffd37a0],al
c0017294:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017298:	8d 50 01             	lea    edx,[eax+0x1]
c001729b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001729f:	8a 15 20 c8 02 c0    	mov    dl,BYTE PTR ds:0xc002c820
c00172a5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00172a8:	88 0d 20 c8 02 c0    	mov    BYTE PTR ds:0xc002c820,cl
c00172ae:	0f b6 d2             	movzx  edx,dl
c00172b1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00172b5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00172b9:	88 82 40 c8 02 c0    	mov    BYTE PTR [edx-0x3ffd37c0],al
c00172bf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00172c4:	e9 da 02 00 00       	jmp    c00175a3 <scanMADT()+0x469>
c00172c9:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00172ce:	0f 85 14 01 00 00    	jne    c00173e8 <scanMADT()+0x2ae>
c00172d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00172d8:	8d 50 01             	lea    edx,[eax+0x1]
c00172db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00172df:	8a 15 e0 c6 02 c0    	mov    dl,BYTE PTR ds:0xc002c6e0
c00172e5:	0f b6 d2             	movzx  edx,dl
c00172e8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00172ec:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00172f0:	88 82 00 c7 02 c0    	mov    BYTE PTR [edx-0x3ffd3900],al
c00172f6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00172fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017302:	01 d0                	add    eax,edx
c0017304:	83 c0 2c             	add    eax,0x2c
c0017307:	8a 00                	mov    al,BYTE PTR [eax]
c0017309:	0f b6 d0             	movzx  edx,al
c001730c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017310:	8d 48 01             	lea    ecx,[eax+0x1]
c0017313:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017317:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001731b:	0f b6 c0             	movzx  eax,al
c001731e:	c1 e0 08             	shl    eax,0x8
c0017321:	89 d1                	mov    ecx,edx
c0017323:	09 c1                	or     ecx,eax
c0017325:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017329:	8d 50 02             	lea    edx,[eax+0x2]
c001732c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017330:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017334:	0f b6 c0             	movzx  eax,al
c0017337:	c1 e0 10             	shl    eax,0x10
c001733a:	09 c1                	or     ecx,eax
c001733c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017340:	8d 50 03             	lea    edx,[eax+0x3]
c0017343:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017347:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001734b:	0f b6 c0             	movzx  eax,al
c001734e:	c1 e0 18             	shl    eax,0x18
c0017351:	09 c1                	or     ecx,eax
c0017353:	89 ca                	mov    edx,ecx
c0017355:	a0 e0 c6 02 c0       	mov    al,ds:0xc002c6e0
c001735a:	0f b6 c0             	movzx  eax,al
c001735d:	89 14 85 20 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd38e0],edx
c0017364:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017369:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001736d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017371:	01 d0                	add    eax,edx
c0017373:	83 c0 2c             	add    eax,0x2c
c0017376:	8a 00                	mov    al,BYTE PTR [eax]
c0017378:	0f b6 d0             	movzx  edx,al
c001737b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001737f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017386:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001738a:	0f b6 c0             	movzx  eax,al
c001738d:	c1 e0 08             	shl    eax,0x8
c0017390:	89 d1                	mov    ecx,edx
c0017392:	09 c1                	or     ecx,eax
c0017394:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017398:	8d 50 02             	lea    edx,[eax+0x2]
c001739b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001739f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173a3:	0f b6 c0             	movzx  eax,al
c00173a6:	c1 e0 10             	shl    eax,0x10
c00173a9:	09 c1                	or     ecx,eax
c00173ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173af:	8d 50 03             	lea    edx,[eax+0x3]
c00173b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173b6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00173ba:	0f b6 c0             	movzx  eax,al
c00173bd:	c1 e0 18             	shl    eax,0x18
c00173c0:	09 c1                	or     ecx,eax
c00173c2:	89 ca                	mov    edx,ecx
c00173c4:	a0 e0 c6 02 c0       	mov    al,ds:0xc002c6e0
c00173c9:	0f b6 c0             	movzx  eax,al
c00173cc:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c00173d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00173d8:	a0 e0 c6 02 c0       	mov    al,ds:0xc002c6e0
c00173dd:	40                   	inc    eax
c00173de:	a2 e0 c6 02 c0       	mov    ds:0xc002c6e0,al
c00173e3:	e9 bb 01 00 00       	jmp    c00175a3 <scanMADT()+0x469>
c00173e8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00173ed:	0f 85 e9 00 00 00    	jne    c00174dc <scanMADT()+0x3a2>
c00173f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173f7:	8d 50 01             	lea    edx,[eax+0x1]
c00173fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017402:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017406:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001740a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001740e:	8d 50 01             	lea    edx,[eax+0x1]
c0017411:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017419:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001741d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017421:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017425:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017429:	01 d0                	add    eax,edx
c001742b:	83 c0 2c             	add    eax,0x2c
c001742e:	8a 00                	mov    al,BYTE PTR [eax]
c0017430:	0f b6 d0             	movzx  edx,al
c0017433:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017437:	8d 48 01             	lea    ecx,[eax+0x1]
c001743a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001743e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017442:	0f b6 c0             	movzx  eax,al
c0017445:	c1 e0 08             	shl    eax,0x8
c0017448:	89 d1                	mov    ecx,edx
c001744a:	09 c1                	or     ecx,eax
c001744c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017450:	8d 50 02             	lea    edx,[eax+0x2]
c0017453:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017457:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001745b:	0f b6 c0             	movzx  eax,al
c001745e:	c1 e0 10             	shl    eax,0x10
c0017461:	09 c1                	or     ecx,eax
c0017463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017467:	8d 50 03             	lea    edx,[eax+0x3]
c001746a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001746e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017472:	0f b6 c0             	movzx  eax,al
c0017475:	c1 e0 18             	shl    eax,0x18
c0017478:	09 c8                	or     eax,ecx
c001747a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001747e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017483:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017487:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001748b:	01 d0                	add    eax,edx
c001748d:	83 c0 2c             	add    eax,0x2c
c0017490:	8a 00                	mov    al,BYTE PTR [eax]
c0017492:	0f b6 c0             	movzx  eax,al
c0017495:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017499:	8d 4a 01             	lea    ecx,[edx+0x1]
c001749c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174a0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00174a4:	0f b6 d2             	movzx  edx,dl
c00174a7:	c1 e2 08             	shl    edx,0x8
c00174aa:	09 d0                	or     eax,edx
c00174ac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00174b1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00174b6:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00174bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174bf:	88 90 60 b0 02 c0    	mov    BYTE PTR [eax-0x3ffd4fa0],dl
c00174c5:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00174ca:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00174cf:	66 89 84 12 c0 c6 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd3940],ax
c00174d7:	e9 c7 00 00 00       	jmp    c00175a3 <scanMADT()+0x469>
c00174dc:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00174e1:	0f 85 b0 00 00 00    	jne    c0017597 <scanMADT()+0x45d>
c00174e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174eb:	8d 50 01             	lea    edx,[eax+0x1]
c00174ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00174f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00174fa:	0f b6 c0             	movzx  eax,al
c00174fd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017501:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017505:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017509:	01 d0                	add    eax,edx
c001750b:	83 c0 2c             	add    eax,0x2c
c001750e:	8a 00                	mov    al,BYTE PTR [eax]
c0017510:	0f b6 d0             	movzx  edx,al
c0017513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017517:	8d 48 01             	lea    ecx,[eax+0x1]
c001751a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001751e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017522:	0f b6 c0             	movzx  eax,al
c0017525:	c1 e0 08             	shl    eax,0x8
c0017528:	09 d0                	or     eax,edx
c001752a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001752e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017533:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017537:	8d 50 01             	lea    edx,[eax+0x1]
c001753a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001753e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017542:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017546:	0f b6 c0             	movzx  eax,al
c0017549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001754d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017551:	c1 e0 08             	shl    eax,0x8
c0017554:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017558:	89 c1                	mov    ecx,eax
c001755a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001755e:	c1 e0 18             	shl    eax,0x18
c0017561:	89 c3                	mov    ebx,eax
c0017563:	a1 30 c6 02 c0       	mov    eax,ds:0xc002c630
c0017568:	8d 50 01             	lea    edx,[eax+0x1]
c001756b:	89 15 30 c6 02 c0    	mov    DWORD PTR ds:0xc002c630,edx
c0017571:	09 d9                	or     ecx,ebx
c0017573:	89 ca                	mov    edx,ecx
c0017575:	89 14 85 40 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39c0],edx
c001757c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017580:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017588:	68 20 91 02 c0       	push   0xc0029120
c001758d:	e8 fb b0 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0017592:	83 c4 10             	add    esp,0x10
c0017595:	eb 0c                	jmp    c00175a3 <scanMADT()+0x469>
c0017597:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001759c:	75 05                	jne    c00175a3 <scanMADT()+0x469>
c001759e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00175a3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00175a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175ac:	01 d0                	add    eax,edx
c00175ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175b2:	e9 54 fc ff ff       	jmp    c001720b <scanMADT()+0xd1>
c00175b7:	90                   	nop
c00175b8:	eb 01                	jmp    c00175bb <scanMADT()+0x481>
c00175ba:	90                   	nop
c00175bb:	83 c4 38             	add    esp,0x38
c00175be:	5b                   	pop    ebx
c00175bf:	c3                   	ret    

c00175c0 <ACPI::ACPI()>:
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c7:	83 ec 08             	sub    esp,0x8
c00175ca:	68 13 90 02 c0       	push   0xc0029013
c00175cf:	50                   	push   eax
c00175d0:	e8 97 c6 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	ba f8 91 02 c0       	mov    edx,0xc00291f8
c00175dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e1:	89 10                	mov    DWORD PTR [eax],edx
c00175e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00175ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f2:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00175fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017600:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017615:	e8 20 fb ff ff       	call   c001713a <scanMADT()>
c001761a:	90                   	nop
c001761b:	83 c4 0c             	add    esp,0xc
c001761e:	c3                   	ret    
c001761f:	90                   	nop

c0017620 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017620:	83 ec 2c             	sub    esp,0x2c
c0017623:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001762b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001762f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017633:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017638:	88 d0                	mov    al,dl
c001763a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001763e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017643:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001764b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001764f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017655:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017659:	0f 8d 97 00 00 00    	jge    c00176f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001765f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017663:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017667:	83 c2 2a             	add    edx,0x2a
c001766a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001766e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017673:	75 78                	jne    c00176ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017675:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001767d:	83 c2 2a             	add    edx,0x2a
c0017680:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017684:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017688:	75 63                	jne    c00176ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001768a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001768f:	74 3a                	je     c00176cb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017691:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017695:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017699:	83 c2 2a             	add    edx,0x2a
c001769c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00176a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176a7:	39 c2                	cmp    edx,eax
c00176a9:	74 10                	je     c00176bb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00176ab:	83 ec 0c             	sub    esp,0xc
c00176ae:	68 5c 91 02 c0       	push   0xc002915c
c00176b3:	e8 9f 1a 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	83 ec 0c             	sub    esp,0xc
c00176be:	68 18 90 02 c0       	push   0xc0029018
c00176c3:	e8 8f 1a 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00176cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00176d7:	83 c2 2a             	add    edx,0x2a
c00176da:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00176de:	8b 02                	mov    eax,DWORD PTR [edx]
c00176e0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00176e3:	89 01                	mov    DWORD PTR [ecx],eax
c00176e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00176e8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00176ed:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00176f1:	e9 55 ff ff ff       	jmp    c001764b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00176f6:	90                   	nop
c00176f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176fb:	83 c4 2c             	add    esp,0x2c
c00176fe:	c2 04 00             	ret    0x4
c0017701:	90                   	nop

c0017702 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017702:	56                   	push   esi
c0017703:	53                   	push   ebx
c0017704:	83 ec 14             	sub    esp,0x14
c0017707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001770b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001770f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017713:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017718:	88 c8                	mov    al,cl
c001771a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001771e:	88 d0                	mov    al,dl
c0017720:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017724:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017728:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c001772e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017732:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017738:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c001773d:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017742:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017747:	83 ec 04             	sub    esp,0x4
c001774a:	56                   	push   esi
c001774b:	53                   	push   ebx
c001774c:	51                   	push   ecx
c001774d:	52                   	push   edx
c001774e:	50                   	push   eax
c001774f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017753:	68 8c 91 02 c0       	push   0xc002918c
c0017758:	e8 30 af ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001775d:	83 c4 20             	add    esp,0x20
c0017760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017764:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001776a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001776e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017771:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017775:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001777d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017783:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017787:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001778a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001778e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017797:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001779d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00177a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00177a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a8:	83 c2 2a             	add    edx,0x2a
c00177ab:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00177af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177b3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00177b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177bd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00177c0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00177c4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00177c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177cc:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177d2:	8d 50 01             	lea    edx,[eax+0x1]
c00177d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177d9:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00177df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00177e9:	3d 00 08 00 00       	cmp    eax,0x800
c00177ee:	75 10                	jne    c0017800 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00177f0:	83 ec 0c             	sub    esp,0xc
c00177f3:	68 27 90 02 c0       	push   0xc0029027
c00177f8:	e8 5a 19 00 00       	call   c0019157 <Krnl::panic(char const*)>
c00177fd:	83 c4 10             	add    esp,0x10
c0017800:	90                   	nop
c0017801:	83 c4 14             	add    esp,0x14
c0017804:	5b                   	pop    ebx
c0017805:	5e                   	pop    esi
c0017806:	c3                   	ret    
c0017807:	90                   	nop

c0017808 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017808:	b8 00 00 00 00       	mov    eax,0x0
c001780d:	c3                   	ret    

c001780e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001780e:	83 ec 1c             	sub    esp,0x1c
c0017811:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017815:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017818:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001781c:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0017821:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017826:	83 ec 08             	sub    esp,0x8
c0017829:	52                   	push   edx
c001782a:	50                   	push   eax
c001782b:	e8 a8 72 ff ff       	call   c000ead8 <Computer::readCMOS(unsigned char)>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017837:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001783c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017841:	83 ec 04             	sub    esp,0x4
c0017844:	6a 01                	push   0x1
c0017846:	52                   	push   edx
c0017847:	50                   	push   eax
c0017848:	e8 a1 73 ff ff       	call   c000ebee <Computer::writeCMOS(unsigned char, unsigned char)>
c001784d:	83 c4 10             	add    esp,0x10
c0017850:	90                   	nop
c0017851:	83 c4 1c             	add    esp,0x1c
c0017854:	c3                   	ret    
c0017855:	90                   	nop

c0017856 <ACPI::open(int, int, void*)>:
c0017856:	53                   	push   ebx
c0017857:	83 ec 28             	sub    esp,0x28
c001785a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001785e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017869:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001786f:	84 c0                	test   al,al
c0017871:	74 67                	je     c00178da <ACPI::open(int, int, void*)+0x84>
c0017873:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c001787b:	83 ec 0c             	sub    esp,0xc
c001787e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017882:	e8 39 7c ff ff       	call   c000f4c0 <malloc>
c0017887:	83 c4 10             	add    esp,0x10
c001788a:	89 c3                	mov    ebx,eax
c001788c:	83 ec 0c             	sub    esp,0xc
c001788f:	53                   	push   ebx
c0017890:	e8 51 94 00 00       	call   c0020ce6 <PCI::PCI()>
c0017895:	83 c4 10             	add    esp,0x10
c0017898:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001789c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178a0:	83 ec 08             	sub    esp,0x8
c00178a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00178a7:	50                   	push   eax
c00178a8:	e8 cf c1 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00178b6:	83 c0 08             	add    eax,0x8
c00178b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00178bb:	6a 00                	push   0x0
c00178bd:	6a 00                	push   0x0
c00178bf:	6a 00                	push   0x0
c00178c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00178c5:	ff d0                	call   eax
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	83 ec 0c             	sub    esp,0xc
c00178cd:	68 44 90 02 c0       	push   0xc0029044
c00178d2:	e8 b6 ad ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00178d7:	83 c4 10             	add    esp,0x10
c00178da:	83 ec 0c             	sub    esp,0xc
c00178dd:	68 4f 90 02 c0       	push   0xc002904f
c00178e2:	e8 ba 37 00 00       	call   c001b0a1 <Thr::loadKernelSymbolTable(char const*)>
c00178e7:	83 c4 10             	add    esp,0x10
c00178ea:	8b 1d 88 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd88
c00178f0:	83 ec 08             	sub    esp,0x8
c00178f3:	6a 01                	push   0x1
c00178f5:	68 6d 90 02 c0       	push   0xc002906d
c00178fa:	e8 62 42 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	83 ec 08             	sub    esp,0x8
c0017905:	53                   	push   ebx
c0017906:	50                   	push   eax
c0017907:	e8 64 44 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c001790c:	83 c4 10             	add    esp,0x10
c001790f:	8b 1d 88 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd88
c0017915:	83 ec 08             	sub    esp,0x8
c0017918:	6a 01                	push   0x1
c001791a:	68 8a 90 02 c0       	push   0xc002908a
c001791f:	e8 3d 42 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c0017924:	83 c4 10             	add    esp,0x10
c0017927:	83 ec 08             	sub    esp,0x8
c001792a:	53                   	push   ebx
c001792b:	50                   	push   eax
c001792c:	e8 3f 44 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0017939:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001793f:	83 e0 04             	and    eax,0x4
c0017942:	84 c0                	test   al,al
c0017944:	0f 84 d6 00 00 00    	je     c0017a20 <ACPI::open(int, int, void*)+0x1ca>
c001794a:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017952:	83 ec 0c             	sub    esp,0xc
c0017955:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017959:	e8 62 7b ff ff       	call   c000f4c0 <malloc>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	89 c3                	mov    ebx,eax
c0017963:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0017968:	83 ec 04             	sub    esp,0x4
c001796b:	50                   	push   eax
c001796c:	68 a7 90 02 c0       	push   0xc00290a7
c0017971:	53                   	push   ebx
c0017972:	e8 45 b2 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001797e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017983:	74 17                	je     c001799c <ACPI::open(int, int, void*)+0x146>
c0017985:	83 ec 0c             	sub    esp,0xc
c0017988:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001798c:	e8 fd b4 ff ff       	call   c0012e8e <File::exists()>
c0017991:	83 c4 10             	add    esp,0x10
c0017994:	84 c0                	test   al,al
c0017996:	74 04                	je     c001799c <ACPI::open(int, int, void*)+0x146>
c0017998:	b0 01                	mov    al,0x1
c001799a:	eb 02                	jmp    c001799e <ACPI::open(int, int, void*)+0x148>
c001799c:	b0 00                	mov    al,0x0
c001799e:	84 c0                	test   al,al
c00179a0:	74 25                	je     c00179c7 <ACPI::open(int, int, void*)+0x171>
c00179a2:	8b 1d 88 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd88
c00179a8:	83 ec 08             	sub    esp,0x8
c00179ab:	6a 01                	push   0x1
c00179ad:	68 a7 90 02 c0       	push   0xc00290a7
c00179b2:	e8 aa 41 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c00179b7:	83 c4 10             	add    esp,0x10
c00179ba:	83 ec 08             	sub    esp,0x8
c00179bd:	53                   	push   ebx
c00179be:	50                   	push   eax
c00179bf:	e8 ac 43 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00179cc:	74 1e                	je     c00179ec <ACPI::open(int, int, void*)+0x196>
c00179ce:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00179d3:	74 17                	je     c00179ec <ACPI::open(int, int, void*)+0x196>
c00179d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00179d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179db:	83 c0 08             	add    eax,0x8
c00179de:	8b 00                	mov    eax,DWORD PTR [eax]
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00179e7:	ff d0                	call   eax
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	a1 28 c6 02 c0       	mov    eax,ds:0xc002c628
c00179f1:	83 ec 08             	sub    esp,0x8
c00179f4:	68 c4 90 02 c0       	push   0xc00290c4
c00179f9:	50                   	push   eax
c00179fa:	e8 9f f6 ff ff       	call   c001709e <findDataTable(unsigned char*, char*)>
c00179ff:	83 c4 10             	add    esp,0x10
c0017a02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a06:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017a0b:	74 13                	je     c0017a20 <ACPI::open(int, int, void*)+0x1ca>
c0017a0d:	83 ec 08             	sub    esp,0x8
c0017a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a18:	e8 f1 fd ff ff       	call   c001780e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	b8 00 00 00 00       	mov    eax,0x0
c0017a25:	83 c4 28             	add    esp,0x28
c0017a28:	5b                   	pop    ebx
c0017a29:	c3                   	ret    

c0017a2a <ACPI::sleep()>:
c0017a2a:	83 ec 0c             	sub    esp,0xc
c0017a2d:	a1 00 c4 02 c0       	mov    eax,ds:0xc002c400
c0017a32:	85 c0                	test   eax,eax
c0017a34:	74 07                	je     c0017a3d <ACPI::sleep()+0x13>
c0017a36:	a1 00 c4 02 c0       	mov    eax,ds:0xc002c400
c0017a3b:	ff d0                	call   eax
c0017a3d:	90                   	nop
c0017a3e:	83 c4 0c             	add    esp,0xc
c0017a41:	c3                   	ret    

c0017a42 <CPU::close(int, int, void*)>:
c0017a42:	31 c0                	xor    eax,eax
c0017a44:	c3                   	ret    
c0017a45:	90                   	nop

c0017a46 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017a46:	55                   	push   ebp
c0017a47:	57                   	push   edi
c0017a48:	56                   	push   esi
c0017a49:	53                   	push   ebx
c0017a4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017a4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a52:	89 ce                	mov    esi,ecx
c0017a54:	89 d5                	mov    ebp,edx
c0017a56:	80 f9 04             	cmp    cl,0x4
c0017a59:	75 28                	jne    c0017a83 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017a5b:	8d 42 f9             	lea    eax,[edx-0x7]
c0017a5e:	3c 03                	cmp    al,0x3
c0017a60:	0f 86 63 01 00 00    	jbe    c0017bc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017a66:	80 fa 03             	cmp    dl,0x3
c0017a69:	0f 84 5a 01 00 00    	je     c0017bc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017a6f:	8d 7a f2             	lea    edi,[edx-0xe]
c0017a72:	b8 30 b2 02 c0       	mov    eax,0xc002b230
c0017a77:	89 fb                	mov    ebx,edi
c0017a79:	80 fb 01             	cmp    bl,0x1
c0017a7c:	77 4e                	ja     c0017acc <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017a7e:	e9 52 01 00 00       	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a83:	80 f9 05             	cmp    cl,0x5
c0017a86:	75 4d                	jne    c0017ad5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017a88:	b8 40 b2 02 c0       	mov    eax,0xc002b240
c0017a8d:	80 fa 03             	cmp    dl,0x3
c0017a90:	0f 86 3f 01 00 00    	jbe    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017a96:	8d 7a fa             	lea    edi,[edx-0x6]
c0017a99:	b8 50 b2 02 c0       	mov    eax,0xc002b250
c0017a9e:	89 fb                	mov    ebx,edi
c0017aa0:	80 fb 01             	cmp    bl,0x1
c0017aa3:	0f 86 2c 01 00 00    	jbe    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017aa9:	b8 60 b2 02 c0       	mov    eax,0xc002b260
c0017aae:	80 fa 08             	cmp    dl,0x8
c0017ab1:	0f 84 1e 01 00 00    	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ab7:	89 d7                	mov    edi,edx
c0017ab9:	b8 70 b2 02 c0       	mov    eax,0xc002b270
c0017abe:	83 e7 fb             	and    edi,0xfffffffb
c0017ac1:	89 fb                	mov    ebx,edi
c0017ac3:	80 fb 09             	cmp    bl,0x9
c0017ac6:	0f 84 09 01 00 00    	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017acc:	31 c0                	xor    eax,eax
c0017ace:	89 eb                	mov    ebx,ebp
c0017ad0:	0f b6 fb             	movzx  edi,bl
c0017ad3:	eb 30                	jmp    c0017b05 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017ad5:	31 c0                	xor    eax,eax
c0017ad7:	80 f9 06             	cmp    cl,0x6
c0017ada:	75 f2                	jne    c0017ace <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017adc:	80 fa 0a             	cmp    dl,0xa
c0017adf:	77 ed                	ja     c0017ace <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017ae1:	bf de 05 00 00       	mov    edi,0x5de
c0017ae6:	0f a3 d7             	bt     edi,edx
c0017ae9:	73 e3                	jae    c0017ace <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017aeb:	b8 80 b2 02 c0       	mov    eax,0xc002b280
c0017af0:	e9 e0 00 00 00       	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017af5:	39 c7                	cmp    edi,eax
c0017af7:	0f 84 d3 00 00 00    	je     c0017bd0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017afd:	40                   	inc    eax
c0017afe:	3d d0 00 00 00       	cmp    eax,0xd0
c0017b03:	74 09                	je     c0017b0e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017b05:	89 f3                	mov    ebx,esi
c0017b07:	80 fb 0f             	cmp    bl,0xf
c0017b0a:	75 f1                	jne    c0017afd <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017b0c:	eb e7                	jmp    c0017af5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017b0e:	80 f9 10             	cmp    cl,0x10
c0017b11:	75 14                	jne    c0017b27 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017b13:	8d 42 fc             	lea    eax,[edx-0x4]
c0017b16:	83 e0 fb             	and    eax,0xfffffffb
c0017b19:	3c 02                	cmp    al,0x2
c0017b1b:	76 34                	jbe    c0017b51 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017b1d:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017b22:	80 fa 02             	cmp    dl,0x2
c0017b25:	eb 24                	jmp    c0017b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017b27:	80 f9 11             	cmp    cl,0x11
c0017b2a:	75 13                	jne    c0017b3f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017b2c:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017b31:	80 fa 03             	cmp    dl,0x3
c0017b34:	0f 85 9b 00 00 00    	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b3a:	e9 91 00 00 00       	jmp    c0017bd0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017b3f:	80 f9 12             	cmp    cl,0x12
c0017b42:	75 14                	jne    c0017b58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017b44:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017b49:	fe ca                	dec    dl
c0017b4b:	0f 85 84 00 00 00    	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b51:	b8 a0 b2 02 c0       	mov    eax,0xc002b2a0
c0017b56:	eb 7d                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b58:	80 f9 14             	cmp    cl,0x14
c0017b5b:	75 12                	jne    c0017b6f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017b5d:	4a                   	dec    edx
c0017b5e:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017b63:	80 fa 01             	cmp    dl,0x1
c0017b66:	77 6d                	ja     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b68:	b8 b0 b2 02 c0       	mov    eax,0xc002b2b0
c0017b6d:	eb 66                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b6f:	80 f9 15             	cmp    cl,0x15
c0017b72:	75 31                	jne    c0017ba5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017b74:	b8 c0 b2 02 c0       	mov    eax,0xc002b2c0
c0017b79:	80 fa 01             	cmp    dl,0x1
c0017b7c:	74 57                	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b7e:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017b83:	80 fa 13             	cmp    dl,0x13
c0017b86:	76 0c                	jbe    c0017b94 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017b88:	80 fa 30             	cmp    dl,0x30
c0017b8b:	75 48                	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b8d:	b8 e0 b2 02 c0       	mov    eax,0xc002b2e0
c0017b92:	eb 41                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b94:	b9 04 00 09 00       	mov    ecx,0x90004
c0017b99:	0f a3 d1             	bt     ecx,edx
c0017b9c:	73 37                	jae    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017b9e:	b8 d0 b2 02 c0       	mov    eax,0xc002b2d0
c0017ba3:	eb 30                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ba5:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017baa:	80 f9 16             	cmp    cl,0x16
c0017bad:	75 26                	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017baf:	b8 f0 b2 02 c0       	mov    eax,0xc002b2f0
c0017bb4:	84 d2                	test   dl,dl
c0017bb6:	74 1d                	je     c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bb8:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017bbd:	80 fa 30             	cmp    dl,0x30
c0017bc0:	75 13                	jne    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc2:	b8 00 b3 02 c0       	mov    eax,0xc002b300
c0017bc7:	eb 0c                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bc9:	b8 20 b2 02 c0       	mov    eax,0xc002b220
c0017bce:	eb 05                	jmp    c0017bd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017bd0:	b8 90 b2 02 c0       	mov    eax,0xc002b290
c0017bd5:	5b                   	pop    ebx
c0017bd6:	5e                   	pop    esi
c0017bd7:	5f                   	pop    edi
c0017bd8:	5d                   	pop    ebp
c0017bd9:	c3                   	ret    

c0017bda <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017bda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017bde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017be2:	80 f9 04             	cmp    cl,0x4
c0017be5:	75 6b                	jne    c0017c52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017be7:	b8 80 b0 02 c0       	mov    eax,0xc002b080
c0017bec:	80 fa 01             	cmp    dl,0x1
c0017bef:	0f 86 92 02 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017bf5:	b8 90 b0 02 c0       	mov    eax,0xc002b090
c0017bfa:	80 fa 02             	cmp    dl,0x2
c0017bfd:	0f 84 84 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c03:	b8 a0 b0 02 c0       	mov    eax,0xc002b0a0
c0017c08:	80 fa 03             	cmp    dl,0x3
c0017c0b:	0f 84 76 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c11:	b8 b0 b0 02 c0       	mov    eax,0xc002b0b0
c0017c16:	80 fa 04             	cmp    dl,0x4
c0017c19:	0f 84 68 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c1f:	b8 c0 b0 02 c0       	mov    eax,0xc002b0c0
c0017c24:	80 fa 05             	cmp    dl,0x5
c0017c27:	0f 84 5a 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c2d:	b8 a0 b0 02 c0       	mov    eax,0xc002b0a0
c0017c32:	80 fa 07             	cmp    dl,0x7
c0017c35:	0f 84 4c 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c3b:	83 ea 08             	sub    edx,0x8
c0017c3e:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017c43:	80 fa 01             	cmp    dl,0x1
c0017c46:	0f 87 3b 02 00 00    	ja     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c4c:	b8 d0 b0 02 c0       	mov    eax,0xc002b0d0
c0017c51:	c3                   	ret    
c0017c52:	80 f9 05             	cmp    cl,0x5
c0017c55:	75 45                	jne    c0017c9c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017c57:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017c5a:	b8 e0 b0 02 c0       	mov    eax,0xc002b0e0
c0017c5f:	80 f9 02             	cmp    cl,0x2
c0017c62:	0f 86 1f 02 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c68:	80 fa 04             	cmp    dl,0x4
c0017c6b:	0f 84 f3 01 00 00    	je     c0017e64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017c71:	80 fa 07             	cmp    dl,0x7
c0017c74:	0f 84 0d 02 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c7a:	b8 f0 b0 02 c0       	mov    eax,0xc002b0f0
c0017c7f:	80 fa 08             	cmp    dl,0x8
c0017c82:	0f 84 ff 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c88:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017c8d:	80 fa 09             	cmp    dl,0x9
c0017c90:	0f 85 f1 01 00 00    	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017c96:	b8 00 b1 02 c0       	mov    eax,0xc002b100
c0017c9b:	c3                   	ret    
c0017c9c:	80 f9 06             	cmp    cl,0x6
c0017c9f:	0f 85 85 01 00 00    	jne    c0017e2a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017ca5:	b8 10 b1 02 c0       	mov    eax,0xc002b110
c0017caa:	80 fa 01             	cmp    dl,0x1
c0017cad:	0f 84 d4 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cb3:	8d 42 fb             	lea    eax,[edx-0x5]
c0017cb6:	3c 01                	cmp    al,0x1
c0017cb8:	0f 86 ac 01 00 00    	jbe    c0017e6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017cbe:	80 fa 03             	cmp    dl,0x3
c0017cc1:	0f 84 a3 01 00 00    	je     c0017e6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017cc7:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017cca:	b8 30 b1 02 c0       	mov    eax,0xc002b130
c0017ccf:	80 f9 01             	cmp    cl,0x1
c0017cd2:	0f 86 af 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cd8:	80 fa 09             	cmp    dl,0x9
c0017cdb:	0f 84 8f 01 00 00    	je     c0017e70 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017ce1:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017ce4:	80 f9 01             	cmp    cl,0x1
c0017ce7:	0f 86 9a 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ced:	b8 40 b1 02 c0       	mov    eax,0xc002b140
c0017cf2:	80 fa 0d             	cmp    dl,0xd
c0017cf5:	0f 84 8c 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017cfb:	b8 50 b1 02 c0       	mov    eax,0xc002b150
c0017d00:	80 fa 0e             	cmp    dl,0xe
c0017d03:	0f 84 7e 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d09:	b8 60 b1 02 c0       	mov    eax,0xc002b160
c0017d0e:	80 fa 0f             	cmp    dl,0xf
c0017d11:	0f 84 70 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d17:	b8 40 b1 02 c0       	mov    eax,0xc002b140
c0017d1c:	80 fa 15             	cmp    dl,0x15
c0017d1f:	0f 84 62 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d25:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017d28:	b8 60 b1 02 c0       	mov    eax,0xc002b160
c0017d2d:	80 f9 01             	cmp    cl,0x1
c0017d30:	0f 86 51 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d36:	80 fa 1a             	cmp    dl,0x1a
c0017d39:	0f 84 37 01 00 00    	je     c0017e76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017d3f:	80 fa 1c             	cmp    dl,0x1c
c0017d42:	0f 84 34 01 00 00    	je     c0017e7c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017d48:	80 fa 1d             	cmp    dl,0x1d
c0017d4b:	0f 84 36 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d51:	b8 90 b1 02 c0       	mov    eax,0xc002b190
c0017d56:	80 fa 25             	cmp    dl,0x25
c0017d59:	0f 84 28 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d5f:	8d 4a da             	lea    ecx,[edx-0x26]
c0017d62:	b8 80 b1 02 c0       	mov    eax,0xc002b180
c0017d67:	80 f9 01             	cmp    cl,0x1
c0017d6a:	0f 86 17 01 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d70:	b8 a0 b1 02 c0       	mov    eax,0xc002b1a0
c0017d75:	80 fa 2a             	cmp    dl,0x2a
c0017d78:	0f 84 09 01 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d7e:	b8 90 b1 02 c0       	mov    eax,0xc002b190
c0017d83:	80 fa 2c             	cmp    dl,0x2c
c0017d86:	0f 84 fb 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d8c:	b8 a0 b1 02 c0       	mov    eax,0xc002b1a0
c0017d91:	80 fa 2d             	cmp    dl,0x2d
c0017d94:	0f 84 ed 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017d9a:	b8 70 b1 02 c0       	mov    eax,0xc002b170
c0017d9f:	80 fa 2e             	cmp    dl,0x2e
c0017da2:	0f 84 df 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da8:	b8 90 b1 02 c0       	mov    eax,0xc002b190
c0017dad:	80 fa 2f             	cmp    dl,0x2f
c0017db0:	0f 84 d1 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db6:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017db9:	b8 80 b1 02 c0       	mov    eax,0xc002b180
c0017dbe:	80 f9 01             	cmp    cl,0x1
c0017dc1:	0f 86 c0 00 00 00    	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc7:	b8 b0 b1 02 c0       	mov    eax,0xc002b1b0
c0017dcc:	80 fa 37             	cmp    dl,0x37
c0017dcf:	0f 84 b2 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dd5:	b8 c0 b1 02 c0       	mov    eax,0xc002b1c0
c0017dda:	80 fa 3a             	cmp    dl,0x3a
c0017ddd:	0f 84 a4 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017de3:	b8 d0 b1 02 c0       	mov    eax,0xc002b1d0
c0017de8:	80 fa 3c             	cmp    dl,0x3c
c0017deb:	0f 84 96 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017df1:	b8 e0 b1 02 c0       	mov    eax,0xc002b1e0
c0017df6:	80 fa 3d             	cmp    dl,0x3d
c0017df9:	0f 84 88 00 00 00    	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dff:	b8 c0 b1 02 c0       	mov    eax,0xc002b1c0
c0017e04:	80 fa 3e             	cmp    dl,0x3e
c0017e07:	74 7e                	je     c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e09:	8d 42 bb             	lea    eax,[edx-0x45]
c0017e0c:	3c 01                	cmp    al,0x1
c0017e0e:	76 72                	jbe    c0017e82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e10:	80 fa 3f             	cmp    dl,0x3f
c0017e13:	74 6d                	je     c0017e82 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017e15:	80 fa 4a             	cmp    dl,0x4a
c0017e18:	74 0a                	je     c0017e24 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017e1a:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017e1f:	80 fa 4d             	cmp    dl,0x4d
c0017e22:	75 63                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e24:	b8 b0 b1 02 c0       	mov    eax,0xc002b1b0
c0017e29:	c3                   	ret    
c0017e2a:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017e2f:	80 f9 0b             	cmp    cl,0xb
c0017e32:	75 0a                	jne    c0017e3e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017e34:	fe ca                	dec    dl
c0017e36:	75 4f                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e38:	b8 f0 b1 02 c0       	mov    eax,0xc002b1f0
c0017e3d:	c3                   	ret    
c0017e3e:	80 f9 0f             	cmp    cl,0xf
c0017e41:	75 44                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e43:	b8 00 b2 02 c0       	mov    eax,0xc002b200
c0017e48:	80 fa 02             	cmp    dl,0x2
c0017e4b:	76 3a                	jbe    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e4d:	8d 42 fd             	lea    eax,[edx-0x3]
c0017e50:	3c 01                	cmp    al,0x1
c0017e52:	76 0a                	jbe    c0017e5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0017e54:	b8 0e 95 02 c0       	mov    eax,0xc002950e
c0017e59:	80 fa 06             	cmp    dl,0x6
c0017e5c:	75 29                	jne    c0017e87 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e5e:	b8 10 b2 02 c0       	mov    eax,0xc002b210
c0017e63:	c3                   	ret    
c0017e64:	b8 f0 b0 02 c0       	mov    eax,0xc002b0f0
c0017e69:	c3                   	ret    
c0017e6a:	b8 20 b1 02 c0       	mov    eax,0xc002b120
c0017e6f:	c3                   	ret    
c0017e70:	b8 40 b1 02 c0       	mov    eax,0xc002b140
c0017e75:	c3                   	ret    
c0017e76:	b8 70 b1 02 c0       	mov    eax,0xc002b170
c0017e7b:	c3                   	ret    
c0017e7c:	b8 80 b1 02 c0       	mov    eax,0xc002b180
c0017e81:	c3                   	ret    
c0017e82:	b8 d0 b1 02 c0       	mov    eax,0xc002b1d0
c0017e87:	c3                   	ret    

c0017e88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017e88:	60                   	pusha  
c0017e89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017e95:	9c                   	pushf  
c0017e96:	fa                   	cli    
c0017e97:	0f 09                	wbinvd 
c0017e99:	0f 30                	wrmsr  
c0017e9b:	9d                   	popf   
c0017e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ea0:	89 02                	mov    DWORD PTR [edx],eax
c0017ea2:	61                   	popa   
c0017ea3:	c3                   	ret    

c0017ea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0017ea4:	60                   	pusha  
c0017ea5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017ea9:	9c                   	pushf  
c0017eaa:	fa                   	cli    
c0017eab:	0f 09                	wbinvd 
c0017ead:	31 c0                	xor    eax,eax
c0017eaf:	31 d2                	xor    edx,edx
c0017eb1:	0f 32                	rdmsr  
c0017eb3:	9d                   	popf   
c0017eb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017eb8:	89 02                	mov    DWORD PTR [edx],eax
c0017eba:	61                   	popa   
c0017ebb:	c3                   	ret    

c0017ebc <CPU::AMD_K6_writeback(int, int, int)>:
c0017ebc:	56                   	push   esi
c0017ebd:	53                   	push   ebx
c0017ebe:	83 ec 10             	sub    esp,0x10
c0017ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017eca:	75 5d                	jne    c0017f29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017ecc:	83 f8 08             	cmp    eax,0x8
c0017ecf:	75 09                	jne    c0017eda <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0017ed1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017ed6:	7e 13                	jle    c0017eeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017ed8:	eb 30                	jmp    c0017f0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017eda:	83 f8 06             	cmp    eax,0x6
c0017edd:	7c 4a                	jl     c0017f29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017edf:	83 f8 07             	cmp    eax,0x7
c0017ee2:	7e 07                	jle    c0017eeb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0017ee4:	83 f8 09             	cmp    eax,0x9
c0017ee7:	74 21                	je     c0017f0a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0017ee9:	eb 3e                	jmp    c0017f29 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0017eeb:	89 e6                	mov    esi,esp
c0017eed:	8b 1d c4 bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bdc4
c0017ef3:	56                   	push   esi
c0017ef4:	c1 eb 15             	shr    ebx,0x15
c0017ef7:	68 82 00 00 c0       	push   0xc0000082
c0017efc:	83 e3 7e             	and    ebx,0x7e
c0017eff:	e8 a0 ff ff ff       	call   c0017ea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f04:	56                   	push   esi
c0017f05:	6a 00                	push   0x0
c0017f07:	53                   	push   ebx
c0017f08:	eb 12                	jmp    c0017f1c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017f0a:	89 e3                	mov    ebx,esp
c0017f0c:	53                   	push   ebx
c0017f0d:	68 82 00 00 c0       	push   0xc0000082
c0017f12:	e8 8d ff ff ff       	call   c0017ea4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017f17:	53                   	push   ebx
c0017f18:	6a 00                	push   0x0
c0017f1a:	6a 00                	push   0x0
c0017f1c:	68 82 00 00 c0       	push   0xc0000082
c0017f21:	e8 62 ff ff ff       	call   c0017e88 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017f26:	83 c4 18             	add    esp,0x18
c0017f29:	83 c4 10             	add    esp,0x10
c0017f2c:	5b                   	pop    ebx
c0017f2d:	5e                   	pop    esi
c0017f2e:	c3                   	ret    
c0017f2f:	90                   	nop

c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017f30:	55                   	push   ebp
c0017f31:	57                   	push   edi
c0017f32:	56                   	push   esi
c0017f33:	53                   	push   ebx
c0017f34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017f3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017f44:	39 05 20 b3 02 c0    	cmp    DWORD PTR ds:0xc002b320,eax
c0017f4a:	75 23                	jne    c0017f6f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017f4c:	a1 8c c8 02 c0       	mov    eax,ds:0xc002c88c
c0017f51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f55:	89 06                	mov    DWORD PTR [esi],eax
c0017f57:	a1 88 c8 02 c0       	mov    eax,ds:0xc002c888
c0017f5c:	89 07                	mov    DWORD PTR [edi],eax
c0017f5e:	a1 84 c8 02 c0       	mov    eax,ds:0xc002c884
c0017f63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017f66:	a1 80 c8 02 c0       	mov    eax,ds:0xc002c880
c0017f6b:	89 02                	mov    DWORD PTR [edx],eax
c0017f6d:	eb 3f                	jmp    c0017fae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017f6f:	31 c9                	xor    ecx,ecx
c0017f71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f75:	0f a2                	cpuid  
c0017f77:	89 06                	mov    DWORD PTR [esi],eax
c0017f79:	89 1f                	mov    DWORD PTR [edi],ebx
c0017f7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0017f82:	89 10                	mov    DWORD PTR [eax],edx
c0017f84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f88:	a3 20 b3 02 c0       	mov    ds:0xc002b320,eax
c0017f8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0017f8f:	a3 8c c8 02 c0       	mov    ds:0xc002c88c,eax
c0017f94:	8b 07                	mov    eax,DWORD PTR [edi]
c0017f96:	a3 88 c8 02 c0       	mov    ds:0xc002c888,eax
c0017f9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017f9e:	a3 84 c8 02 c0       	mov    ds:0xc002c884,eax
c0017fa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017fa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fa9:	a3 80 c8 02 c0       	mov    ds:0xc002c880,eax
c0017fae:	5b                   	pop    ebx
c0017faf:	5e                   	pop    esi
c0017fb0:	5f                   	pop    edi
c0017fb1:	5d                   	pop    ebp
c0017fb2:	c3                   	ret    
c0017fb3:	90                   	nop

c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>:
c0017fb4:	83 ec 10             	sub    esp,0x10
c0017fb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fbb:	50                   	push   eax
c0017fbc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fc0:	50                   	push   eax
c0017fc1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fc5:	50                   	push   eax
c0017fc6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fca:	50                   	push   eax
c0017fcb:	6a 01                	push   0x1
c0017fcd:	e8 5e ff ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fd6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017fda:	0f 95 c0             	setne  al
c0017fdd:	83 c4 24             	add    esp,0x24
c0017fe0:	c3                   	ret    
c0017fe1:	90                   	nop

c0017fe2 <CPU::cpuidCheckECX(unsigned int)>:
c0017fe2:	83 ec 10             	sub    esp,0x10
c0017fe5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fe9:	50                   	push   eax
c0017fea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017fee:	50                   	push   eax
c0017fef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ff3:	50                   	push   eax
c0017ff4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017ff8:	50                   	push   eax
c0017ff9:	6a 01                	push   0x1
c0017ffb:	e8 30 ff ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018000:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018004:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018008:	0f 95 c0             	setne  al
c001800b:	83 c4 24             	add    esp,0x24
c001800e:	c3                   	ret    
c001800f:	90                   	nop

c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018010:	83 ec 10             	sub    esp,0x10
c0018013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018017:	50                   	push   eax
c0018018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001801c:	50                   	push   eax
c001801d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018021:	50                   	push   eax
c0018022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018026:	50                   	push   eax
c0018027:	6a 07                	push   0x7
c0018029:	e8 02 ff ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001802e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018032:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018036:	0f 95 c0             	setne  al
c0018039:	83 c4 24             	add    esp,0x24
c001803c:	c3                   	ret    
c001803d:	90                   	nop

c001803e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001803e:	83 ec 10             	sub    esp,0x10
c0018041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018045:	50                   	push   eax
c0018046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804a:	50                   	push   eax
c001804b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001804f:	50                   	push   eax
c0018050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018054:	50                   	push   eax
c0018055:	6a 07                	push   0x7
c0018057:	e8 d4 fe ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001805c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018064:	0f 95 c0             	setne  al
c0018067:	83 c4 24             	add    esp,0x24
c001806a:	c3                   	ret    
c001806b:	90                   	nop

c001806c <CPU::CPU()>:
c001806c:	83 ec 0c             	sub    esp,0xc
c001806f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018073:	83 ec 08             	sub    esp,0x8
c0018076:	68 0e 95 02 c0       	push   0xc002950e
c001807b:	50                   	push   eax
c001807c:	e8 eb bb ff ff       	call   c0013c6c <Device::Device(char const*)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	ba e8 95 02 c0       	mov    edx,0xc00295e8
c0018089:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001808d:	89 10                	mov    DWORD PTR [eax],edx
c001808f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018093:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001809d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a1:	05 78 01 00 00       	add    eax,0x178
c00180a6:	83 ec 0c             	sub    esp,0xc
c00180a9:	50                   	push   eax
c00180aa:	e8 29 6c ff ff       	call   c000ecd8 <GDT::GDT()>
c00180af:	83 c4 10             	add    esp,0x10
c00180b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b6:	05 7c 09 00 00       	add    eax,0x97c
c00180bb:	83 ec 0c             	sub    esp,0xc
c00180be:	50                   	push   eax
c00180bf:	e8 76 6e ff ff       	call   c000ef3a <IDT::IDT()>
c00180c4:	83 c4 10             	add    esp,0x10
c00180c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cb:	05 7c 11 00 00       	add    eax,0x117c
c00180d0:	83 ec 0c             	sub    esp,0xc
c00180d3:	50                   	push   eax
c00180d4:	e8 f5 8e ff ff       	call   c0010fce <TSS::TSS()>
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e0:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00180e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180eb:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00180f5:	90                   	nop
c00180f6:	83 c4 0c             	add    esp,0xc
c00180f9:	c3                   	ret    

c00180fa <CPU::displayFeatures()>:
c00180fa:	53                   	push   ebx
c00180fb:	83 ec 10             	sub    esp,0x10
c00180fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018102:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018108:	68 1c 92 02 c0       	push   0xc002921c
c001810d:	e8 7b a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018112:	59                   	pop    ecx
c0018113:	58                   	pop    eax
c0018114:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001811a:	50                   	push   eax
c001811b:	68 2d 92 02 c0       	push   0xc002922d
c0018120:	e8 68 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018125:	58                   	pop    eax
c0018126:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001812c:	5a                   	pop    edx
c001812d:	c1 e8 0e             	shr    eax,0xe
c0018130:	0f b6 c0             	movzx  eax,al
c0018133:	50                   	push   eax
c0018134:	68 3e 92 02 c0       	push   0xc002923e
c0018139:	e8 4f a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001813e:	59                   	pop    ecx
c001813f:	58                   	pop    eax
c0018140:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018146:	66 c1 e8 06          	shr    ax,0x6
c001814a:	0f b6 c0             	movzx  eax,al
c001814d:	50                   	push   eax
c001814e:	68 4f 92 02 c0       	push   0xc002924f
c0018153:	e8 35 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018158:	c7 04 24 62 96 02 c0 	mov    DWORD PTR [esp],0xc0029662
c001815f:	e8 29 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c001816c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018173:	74 05                	je     c001817a <CPU::displayFeatures()+0x80>
c0018175:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c001817a:	52                   	push   edx
c001817b:	52                   	push   edx
c001817c:	50                   	push   eax
c001817d:	68 60 92 02 c0       	push   0xc0029260
c0018182:	e8 06 a5 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c001818f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018196:	78 05                	js     c001819d <CPU::displayFeatures()+0xa3>
c0018198:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c001819d:	51                   	push   ecx
c001819e:	51                   	push   ecx
c001819f:	50                   	push   eax
c00181a0:	68 77 92 02 c0       	push   0xc0029277
c00181a5:	e8 e3 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00181aa:	83 c4 10             	add    esp,0x10
c00181ad:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c00181b2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00181b9:	75 05                	jne    c00181c0 <CPU::displayFeatures()+0xc6>
c00181bb:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c00181c0:	52                   	push   edx
c00181c1:	52                   	push   edx
c00181c2:	50                   	push   eax
c00181c3:	68 8e 92 02 c0       	push   0xc002928e
c00181c8:	e8 c0 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00181cd:	83 c4 10             	add    esp,0x10
c00181d0:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c00181d5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00181dc:	75 05                	jne    c00181e3 <CPU::displayFeatures()+0xe9>
c00181de:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c00181e3:	51                   	push   ecx
c00181e4:	51                   	push   ecx
c00181e5:	50                   	push   eax
c00181e6:	68 a5 92 02 c0       	push   0xc00292a5
c00181eb:	e8 9d a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c00181f8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00181ff:	75 05                	jne    c0018206 <CPU::displayFeatures()+0x10c>
c0018201:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c0018206:	52                   	push   edx
c0018207:	52                   	push   edx
c0018208:	50                   	push   eax
c0018209:	68 bc 92 02 c0       	push   0xc00292bc
c001820e:	e8 7a a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c001821b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018222:	75 05                	jne    c0018229 <CPU::displayFeatures()+0x12f>
c0018224:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c0018229:	51                   	push   ecx
c001822a:	51                   	push   ecx
c001822b:	50                   	push   eax
c001822c:	68 d3 92 02 c0       	push   0xc00292d3
c0018231:	e8 57 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018236:	83 c4 10             	add    esp,0x10
c0018239:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c001823e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018245:	75 05                	jne    c001824c <CPU::displayFeatures()+0x152>
c0018247:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c001824c:	52                   	push   edx
c001824d:	52                   	push   edx
c001824e:	50                   	push   eax
c001824f:	68 ea 92 02 c0       	push   0xc00292ea
c0018254:	e8 34 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c0018261:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018268:	75 05                	jne    c001826f <CPU::displayFeatures()+0x175>
c001826a:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c001826f:	51                   	push   ecx
c0018270:	51                   	push   ecx
c0018271:	50                   	push   eax
c0018272:	68 01 93 02 c0       	push   0xc0029301
c0018277:	e8 11 a4 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001827c:	83 c4 10             	add    esp,0x10
c001827f:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c0018284:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001828b:	75 05                	jne    c0018292 <CPU::displayFeatures()+0x198>
c001828d:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c0018292:	52                   	push   edx
c0018293:	52                   	push   edx
c0018294:	50                   	push   eax
c0018295:	68 18 93 02 c0       	push   0xc0029318
c001829a:	e8 ee a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001829f:	83 c4 10             	add    esp,0x10
c00182a2:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c00182a7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00182ae:	75 05                	jne    c00182b5 <CPU::displayFeatures()+0x1bb>
c00182b0:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c00182b5:	51                   	push   ecx
c00182b6:	51                   	push   ecx
c00182b7:	50                   	push   eax
c00182b8:	68 2f 93 02 c0       	push   0xc002932f
c00182bd:	e8 cb a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00182c2:	83 c4 10             	add    esp,0x10
c00182c5:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c00182ca:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00182d1:	75 05                	jne    c00182d8 <CPU::displayFeatures()+0x1de>
c00182d3:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c00182d8:	52                   	push   edx
c00182d9:	52                   	push   edx
c00182da:	50                   	push   eax
c00182db:	68 46 93 02 c0       	push   0xc0029346
c00182e0:	e8 a8 a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c00182ed:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00182f4:	75 05                	jne    c00182fb <CPU::displayFeatures()+0x201>
c00182f6:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c00182fb:	51                   	push   ecx
c00182fc:	51                   	push   ecx
c00182fd:	50                   	push   eax
c00182fe:	68 5d 93 02 c0       	push   0xc002935d
c0018303:	e8 85 a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c0018310:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018317:	75 05                	jne    c001831e <CPU::displayFeatures()+0x224>
c0018319:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c001831e:	52                   	push   edx
c001831f:	52                   	push   edx
c0018320:	50                   	push   eax
c0018321:	68 74 93 02 c0       	push   0xc0029374
c0018326:	e8 62 a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c0018333:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001833a:	78 05                	js     c0018341 <CPU::displayFeatures()+0x247>
c001833c:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c0018341:	51                   	push   ecx
c0018342:	51                   	push   ecx
c0018343:	50                   	push   eax
c0018344:	68 8b 93 02 c0       	push   0xc002938b
c0018349:	e8 3f a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001834e:	83 c4 10             	add    esp,0x10
c0018351:	b8 f8 7d 02 c0       	mov    eax,0xc0027df8
c0018356:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001835d:	75 05                	jne    c0018364 <CPU::displayFeatures()+0x26a>
c001835f:	b8 fc 7d 02 c0       	mov    eax,0xc0027dfc
c0018364:	52                   	push   edx
c0018365:	52                   	push   edx
c0018366:	50                   	push   eax
c0018367:	68 a2 93 02 c0       	push   0xc00293a2
c001836c:	e8 1c a3 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0018371:	83 c4 18             	add    esp,0x18
c0018374:	5b                   	pop    ebx
c0018375:	c3                   	ret    

c0018376 <CPU::detectFeatures()>:
c0018376:	55                   	push   ebp
c0018377:	57                   	push   edi
c0018378:	56                   	push   esi
c0018379:	53                   	push   ebx
c001837a:	83 ec 50             	sub    esp,0x50
c001837d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018381:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001838b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018392:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018398:	6a 0d                	push   0xd
c001839a:	6a 00                	push   0x0
c001839c:	57                   	push   edi
c001839d:	e8 da 82 fe ff       	call   c000067c <memset>
c00183a2:	83 c4 10             	add    esp,0x10
c00183a5:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00183aa:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00183b1:	0f 84 20 09 00 00    	je     c0018cd7 <CPU::detectFeatures()+0x961>
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	6a 10                	push   0x10
c00183bc:	e8 f3 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c00183c1:	83 e0 01             	and    eax,0x1
c00183c4:	8d 14 00             	lea    edx,[eax+eax*1]
c00183c7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00183cd:	83 e0 fd             	and    eax,0xfffffffd
c00183d0:	09 d0                	or     eax,edx
c00183d2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00183d8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00183df:	e8 d0 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c00183e4:	83 e0 01             	and    eax,0x1
c00183e7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00183ee:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00183f4:	83 e0 fb             	and    eax,0xfffffffb
c00183f7:	09 d0                	or     eax,edx
c00183f9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00183ff:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018406:	e8 a9 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c001840b:	83 e0 01             	and    eax,0x1
c001840e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018415:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001841b:	83 e0 f7             	and    eax,0xfffffff7
c001841e:	09 d0                	or     eax,edx
c0018420:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018426:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001842d:	e8 82 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018432:	83 e0 01             	and    eax,0x1
c0018435:	c1 e0 04             	shl    eax,0x4
c0018438:	88 c2                	mov    dl,al
c001843a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018440:	83 e0 ef             	and    eax,0xffffffef
c0018443:	09 d0                	or     eax,edx
c0018445:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001844b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018452:	e8 5d fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c0018457:	83 e0 01             	and    eax,0x1
c001845a:	c1 e0 05             	shl    eax,0x5
c001845d:	88 c2                	mov    dl,al
c001845f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018465:	83 e0 df             	and    eax,0xffffffdf
c0018468:	09 d0                	or     eax,edx
c001846a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018470:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018477:	e8 38 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c001847c:	83 e0 01             	and    eax,0x1
c001847f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018482:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018488:	83 e0 fd             	and    eax,0xfffffffd
c001848b:	09 d0                	or     eax,edx
c001848d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018493:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001849a:	e8 15 fb ff ff       	call   c0017fb4 <CPU::cpuidCheckEDX(unsigned int)>
c001849f:	83 e0 01             	and    eax,0x1
c00184a2:	c1 e0 06             	shl    eax,0x6
c00184a5:	88 c2                	mov    dl,al
c00184a7:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00184ad:	83 e0 bf             	and    eax,0xffffffbf
c00184b0:	09 d0                	or     eax,edx
c00184b2:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00184b8:	58                   	pop    eax
c00184b9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00184bd:	56                   	push   esi
c00184be:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00184c2:	55                   	push   ebp
c00184c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184c7:	50                   	push   eax
c00184c8:	8d 54 24 28          	lea    edx,[esp+0x28]
c00184cc:	52                   	push   edx
c00184cd:	6a 00                	push   0x0
c00184cf:	e8 5c fa ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184d4:	83 c4 1c             	add    esp,0x1c
c00184d7:	6a 04                	push   0x4
c00184d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00184dd:	50                   	push   eax
c00184de:	57                   	push   edi
c00184df:	e8 62 81 fe ff       	call   c0000646 <memcpy>
c00184e4:	83 c4 0c             	add    esp,0xc
c00184e7:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00184ed:	6a 04                	push   0x4
c00184ef:	56                   	push   esi
c00184f0:	50                   	push   eax
c00184f1:	e8 50 81 fe ff       	call   c0000646 <memcpy>
c00184f6:	83 c4 0c             	add    esp,0xc
c00184f9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00184ff:	6a 04                	push   0x4
c0018501:	55                   	push   ebp
c0018502:	50                   	push   eax
c0018503:	e8 3e 81 fe ff       	call   c0000646 <memcpy>
c0018508:	58                   	pop    eax
c0018509:	5a                   	pop    edx
c001850a:	68 b9 93 02 c0       	push   0xc00293b9
c001850f:	57                   	push   edi
c0018510:	e8 57 82 fe ff       	call   c000076c <strcmp>
c0018515:	83 c4 10             	add    esp,0x10
c0018518:	85 c0                	test   eax,eax
c001851a:	75 0f                	jne    c001852b <CPU::detectFeatures()+0x1b5>
c001851c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018526:	e9 22 02 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001852b:	50                   	push   eax
c001852c:	50                   	push   eax
c001852d:	68 c6 93 02 c0       	push   0xc00293c6
c0018532:	57                   	push   edi
c0018533:	e8 34 82 fe ff       	call   c000076c <strcmp>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	85 c0                	test   eax,eax
c001853d:	74 dd                	je     c001851c <CPU::detectFeatures()+0x1a6>
c001853f:	51                   	push   ecx
c0018540:	51                   	push   ecx
c0018541:	68 d3 93 02 c0       	push   0xc00293d3
c0018546:	57                   	push   edi
c0018547:	e8 20 82 fe ff       	call   c000076c <strcmp>
c001854c:	83 c4 10             	add    esp,0x10
c001854f:	85 c0                	test   eax,eax
c0018551:	74 2a                	je     c001857d <CPU::detectFeatures()+0x207>
c0018553:	52                   	push   edx
c0018554:	52                   	push   edx
c0018555:	68 e0 93 02 c0       	push   0xc00293e0
c001855a:	57                   	push   edi
c001855b:	e8 0c 82 fe ff       	call   c000076c <strcmp>
c0018560:	83 c4 10             	add    esp,0x10
c0018563:	85 c0                	test   eax,eax
c0018565:	74 16                	je     c001857d <CPU::detectFeatures()+0x207>
c0018567:	50                   	push   eax
c0018568:	50                   	push   eax
c0018569:	68 ed 93 02 c0       	push   0xc00293ed
c001856e:	57                   	push   edi
c001856f:	e8 f8 81 fe ff       	call   c000076c <strcmp>
c0018574:	83 c4 10             	add    esp,0x10
c0018577:	85 c0                	test   eax,eax
c0018579:	74 48                	je     c00185c3 <CPU::detectFeatures()+0x24d>
c001857b:	eb 0f                	jmp    c001858c <CPU::detectFeatures()+0x216>
c001857d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018587:	e9 c1 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001858c:	50                   	push   eax
c001858d:	50                   	push   eax
c001858e:	68 fa 93 02 c0       	push   0xc00293fa
c0018593:	57                   	push   edi
c0018594:	e8 d3 81 fe ff       	call   c000076c <strcmp>
c0018599:	83 c4 10             	add    esp,0x10
c001859c:	85 c0                	test   eax,eax
c001859e:	74 23                	je     c00185c3 <CPU::detectFeatures()+0x24d>
c00185a0:	50                   	push   eax
c00185a1:	50                   	push   eax
c00185a2:	68 07 94 02 c0       	push   0xc0029407
c00185a7:	57                   	push   edi
c00185a8:	e8 bf 81 fe ff       	call   c000076c <strcmp>
c00185ad:	83 c4 10             	add    esp,0x10
c00185b0:	85 c0                	test   eax,eax
c00185b2:	75 1e                	jne    c00185d2 <CPU::detectFeatures()+0x25c>
c00185b4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00185be:	e9 8a 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00185c3:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00185cd:	e9 7b 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00185d2:	50                   	push   eax
c00185d3:	50                   	push   eax
c00185d4:	68 14 94 02 c0       	push   0xc0029414
c00185d9:	57                   	push   edi
c00185da:	e8 8d 81 fe ff       	call   c000076c <strcmp>
c00185df:	83 c4 10             	add    esp,0x10
c00185e2:	85 c0                	test   eax,eax
c00185e4:	75 0f                	jne    c00185f5 <CPU::detectFeatures()+0x27f>
c00185e6:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00185f0:	e9 58 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00185f5:	50                   	push   eax
c00185f6:	50                   	push   eax
c00185f7:	68 d3 93 02 c0       	push   0xc00293d3
c00185fc:	57                   	push   edi
c00185fd:	e8 6a 81 fe ff       	call   c000076c <strcmp>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	85 c0                	test   eax,eax
c0018607:	75 0f                	jne    c0018618 <CPU::detectFeatures()+0x2a2>
c0018609:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018613:	e9 35 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c0018618:	50                   	push   eax
c0018619:	50                   	push   eax
c001861a:	68 21 94 02 c0       	push   0xc0029421
c001861f:	57                   	push   edi
c0018620:	e8 47 81 fe ff       	call   c000076c <strcmp>
c0018625:	83 c4 10             	add    esp,0x10
c0018628:	85 c0                	test   eax,eax
c001862a:	75 0f                	jne    c001863b <CPU::detectFeatures()+0x2c5>
c001862c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018636:	e9 12 01 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001863b:	51                   	push   ecx
c001863c:	51                   	push   ecx
c001863d:	68 2e 94 02 c0       	push   0xc002942e
c0018642:	57                   	push   edi
c0018643:	e8 24 81 fe ff       	call   c000076c <strcmp>
c0018648:	83 c4 10             	add    esp,0x10
c001864b:	85 c0                	test   eax,eax
c001864d:	75 0f                	jne    c001865e <CPU::detectFeatures()+0x2e8>
c001864f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018659:	e9 ef 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c001865e:	52                   	push   edx
c001865f:	52                   	push   edx
c0018660:	68 3b 94 02 c0       	push   0xc002943b
c0018665:	57                   	push   edi
c0018666:	e8 01 81 fe ff       	call   c000076c <strcmp>
c001866b:	83 c4 10             	add    esp,0x10
c001866e:	85 c0                	test   eax,eax
c0018670:	75 0f                	jne    c0018681 <CPU::detectFeatures()+0x30b>
c0018672:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001867c:	e9 cc 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c0018681:	50                   	push   eax
c0018682:	50                   	push   eax
c0018683:	68 48 94 02 c0       	push   0xc0029448
c0018688:	57                   	push   edi
c0018689:	e8 de 80 fe ff       	call   c000076c <strcmp>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	85 c0                	test   eax,eax
c0018693:	75 0f                	jne    c00186a4 <CPU::detectFeatures()+0x32e>
c0018695:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001869f:	e9 a9 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00186a4:	50                   	push   eax
c00186a5:	50                   	push   eax
c00186a6:	68 55 94 02 c0       	push   0xc0029455
c00186ab:	57                   	push   edi
c00186ac:	e8 bb 80 fe ff       	call   c000076c <strcmp>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	85 c0                	test   eax,eax
c00186b6:	75 0f                	jne    c00186c7 <CPU::detectFeatures()+0x351>
c00186b8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00186c2:	e9 86 00 00 00       	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00186c7:	50                   	push   eax
c00186c8:	50                   	push   eax
c00186c9:	68 62 94 02 c0       	push   0xc0029462
c00186ce:	57                   	push   edi
c00186cf:	e8 98 80 fe ff       	call   c000076c <strcmp>
c00186d4:	83 c4 10             	add    esp,0x10
c00186d7:	85 c0                	test   eax,eax
c00186d9:	75 0c                	jne    c00186e7 <CPU::detectFeatures()+0x371>
c00186db:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00186e5:	eb 66                	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c00186e7:	50                   	push   eax
c00186e8:	50                   	push   eax
c00186e9:	68 6f 94 02 c0       	push   0xc002946f
c00186ee:	57                   	push   edi
c00186ef:	e8 78 80 fe ff       	call   c000076c <strcmp>
c00186f4:	83 c4 10             	add    esp,0x10
c00186f7:	85 c0                	test   eax,eax
c00186f9:	75 0c                	jne    c0018707 <CPU::detectFeatures()+0x391>
c00186fb:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018705:	eb 46                	jmp    c001874d <CPU::detectFeatures()+0x3d7>
c0018707:	50                   	push   eax
c0018708:	50                   	push   eax
c0018709:	68 7c 94 02 c0       	push   0xc002947c
c001870e:	57                   	push   edi
c001870f:	e8 58 80 fe ff       	call   c000076c <strcmp>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	85 c0                	test   eax,eax
c0018719:	74 e0                	je     c00186fb <CPU::detectFeatures()+0x385>
c001871b:	50                   	push   eax
c001871c:	50                   	push   eax
c001871d:	68 89 94 02 c0       	push   0xc0029489
c0018722:	57                   	push   edi
c0018723:	e8 44 80 fe ff       	call   c000076c <strcmp>
c0018728:	83 c4 10             	add    esp,0x10
c001872b:	85 c0                	test   eax,eax
c001872d:	74 cc                	je     c00186fb <CPU::detectFeatures()+0x385>
c001872f:	51                   	push   ecx
c0018730:	51                   	push   ecx
c0018731:	68 96 94 02 c0       	push   0xc0029496
c0018736:	57                   	push   edi
c0018737:	e8 30 80 fe ff       	call   c000076c <strcmp>
c001873c:	83 c4 10             	add    esp,0x10
c001873f:	85 c0                	test   eax,eax
c0018741:	74 b8                	je     c00186fb <CPU::detectFeatures()+0x385>
c0018743:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001874d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018752:	0f 86 be 00 00 00    	jbe    c0018816 <CPU::detectFeatures()+0x4a0>
c0018758:	83 ec 0c             	sub    esp,0xc
c001875b:	68 80 00 00 00       	push   0x80
c0018760:	e8 ab f8 ff ff       	call   c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018765:	83 e0 01             	and    eax,0x1
c0018768:	c1 e0 06             	shl    eax,0x6
c001876b:	88 c2                	mov    dl,al
c001876d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018773:	83 e0 bf             	and    eax,0xffffffbf
c0018776:	09 d0                	or     eax,edx
c0018778:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001877e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018785:	e8 86 f8 ff ff       	call   c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001878a:	83 e0 01             	and    eax,0x1
c001878d:	c1 e0 04             	shl    eax,0x4
c0018790:	88 c2                	mov    dl,al
c0018792:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018798:	83 e0 ef             	and    eax,0xffffffef
c001879b:	09 d0                	or     eax,edx
c001879d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00187a3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00187aa:	e8 61 f8 ff ff       	call   c0018010 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00187af:	c1 e0 07             	shl    eax,0x7
c00187b2:	88 c2                	mov    dl,al
c00187b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00187ba:	83 e0 7f             	and    eax,0x7f
c00187bd:	09 d0                	or     eax,edx
c00187bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00187c5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00187cc:	e8 6d f8 ff ff       	call   c001803e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00187d1:	83 e0 01             	and    eax,0x1
c00187d4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00187db:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00187e1:	83 e0 f7             	and    eax,0xfffffff7
c00187e4:	09 d0                	or     eax,edx
c00187e6:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00187ec:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00187f3:	e8 46 f8 ff ff       	call   c001803e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	83 e0 01             	and    eax,0x1
c00187fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018805:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001880b:	83 e0 fb             	and    eax,0xfffffffb
c001880e:	09 d0                	or     eax,edx
c0018810:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018816:	83 ec 0c             	sub    esp,0xc
c0018819:	56                   	push   esi
c001881a:	55                   	push   ebp
c001881b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001881f:	57                   	push   edi
c0018820:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018824:	50                   	push   eax
c0018825:	6a 01                	push   0x1
c0018827:	e8 04 f7 ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001882c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018830:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018836:	88 ca                	mov    dl,cl
c0018838:	83 e0 f0             	and    eax,0xfffffff0
c001883b:	83 e2 0f             	and    edx,0xf
c001883e:	09 d0                	or     eax,edx
c0018840:	88 ca                	mov    dl,cl
c0018842:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018848:	c0 ea 04             	shr    dl,0x4
c001884b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001884f:	0f b6 c2             	movzx  eax,dl
c0018852:	83 c4 20             	add    esp,0x20
c0018855:	c1 e0 06             	shl    eax,0x6
c0018858:	89 c5                	mov    ebp,eax
c001885a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018860:	66 25 3f c0          	and    ax,0xc03f
c0018864:	09 e8                	or     eax,ebp
c0018866:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001886d:	89 c8                	mov    eax,ecx
c001886f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018875:	c1 e8 08             	shr    eax,0x8
c0018878:	83 e2 3f             	and    edx,0x3f
c001887b:	83 e0 0f             	and    eax,0xf
c001887e:	89 c5                	mov    ebp,eax
c0018880:	c1 e5 06             	shl    ebp,0x6
c0018883:	09 d5                	or     ebp,edx
c0018885:	89 ea                	mov    edx,ebp
c0018887:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001888d:	88 c2                	mov    dl,al
c001888f:	c0 ea 02             	shr    dl,0x2
c0018892:	89 d5                	mov    ebp,edx
c0018894:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001889a:	83 e2 c0             	and    edx,0xffffffc0
c001889d:	09 d5                	or     ebp,edx
c001889f:	89 ea                	mov    edx,ebp
c00188a1:	89 cd                	mov    ebp,ecx
c00188a3:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00188a9:	c1 ed 0c             	shr    ebp,0xc
c00188ac:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00188b2:	83 e5 03             	and    ebp,0x3
c00188b5:	83 e2 cf             	and    edx,0xffffffcf
c00188b8:	c1 e5 04             	shl    ebp,0x4
c00188bb:	09 d5                	or     ebp,edx
c00188bd:	3c 06                	cmp    al,0x6
c00188bf:	89 ea                	mov    edx,ebp
c00188c1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00188c7:	74 04                	je     c00188cd <CPU::detectFeatures()+0x557>
c00188c9:	3c 0f                	cmp    al,0xf
c00188cb:	75 5c                	jne    c0018929 <CPU::detectFeatures()+0x5b3>
c00188cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00188d1:	89 cd                	mov    ebp,ecx
c00188d3:	c1 ed 10             	shr    ebp,0x10
c00188d6:	c1 e5 04             	shl    ebp,0x4
c00188d9:	09 ea                	or     edx,ebp
c00188db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00188e1:	0f b6 d2             	movzx  edx,dl
c00188e4:	66 81 e5 3f c0       	and    bp,0xc03f
c00188e9:	c1 e2 06             	shl    edx,0x6
c00188ec:	09 ea                	or     edx,ebp
c00188ee:	3c 0f                	cmp    al,0xf
c00188f0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00188f7:	75 30                	jne    c0018929 <CPU::detectFeatures()+0x5b3>
c00188f9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00188ff:	c1 e9 14             	shr    ecx,0x14
c0018902:	83 e0 3f             	and    eax,0x3f
c0018905:	83 c1 0f             	add    ecx,0xf
c0018908:	88 ca                	mov    dl,cl
c001890a:	c0 e9 02             	shr    cl,0x2
c001890d:	c1 e2 06             	shl    edx,0x6
c0018910:	09 d0                	or     eax,edx
c0018912:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018918:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001891e:	83 e0 c0             	and    eax,0xffffffc0
c0018921:	09 c1                	or     ecx,eax
c0018923:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018929:	83 ec 0c             	sub    esp,0xc
c001892c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018933:	56                   	push   esi
c0018934:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018938:	50                   	push   eax
c0018939:	57                   	push   edi
c001893a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001893e:	55                   	push   ebp
c001893f:	68 00 00 00 80       	push   0x80000000
c0018944:	e8 e7 f5 ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018949:	83 c4 20             	add    esp,0x20
c001894c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018954:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018958:	76 1e                	jbe    c0018978 <CPU::detectFeatures()+0x602>
c001895a:	83 ec 0c             	sub    esp,0xc
c001895d:	56                   	push   esi
c001895e:	50                   	push   eax
c001895f:	57                   	push   edi
c0018960:	55                   	push   ebp
c0018961:	68 01 00 00 80       	push   0x80000001
c0018966:	e8 c5 f5 ff ff       	call   c0017f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001896b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018975:	83 c4 20             	add    esp,0x20
c0018978:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001897e:	83 f8 01             	cmp    eax,0x1
c0018981:	75 6f                	jne    c00189f2 <CPU::detectFeatures()+0x67c>
c0018983:	51                   	push   ecx
c0018984:	51                   	push   ecx
c0018985:	68 a2 94 02 c0       	push   0xc00294a2
c001898a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001898e:	56                   	push   esi
c001898f:	e8 87 7d fe ff       	call   c000071b <strcpy>
c0018994:	5f                   	pop    edi
c0018995:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001899b:	5d                   	pop    ebp
c001899c:	66 c1 e8 06          	shr    ax,0x6
c00189a0:	0f b6 c0             	movzx  eax,al
c00189a3:	50                   	push   eax
c00189a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189aa:	c1 e8 0e             	shr    eax,0xe
c00189ad:	0f b6 c0             	movzx  eax,al
c00189b0:	50                   	push   eax
c00189b1:	e8 24 f2 ff ff       	call   c0017bda <CPU::lookupIntelName(unsigned char, unsigned char)>
c00189b6:	5a                   	pop    edx
c00189b7:	59                   	pop    ecx
c00189b8:	50                   	push   eax
c00189b9:	56                   	push   esi
c00189ba:	e8 13 7e fe ff       	call   c00007d2 <strcat>
c00189bf:	5f                   	pop    edi
c00189c0:	5d                   	pop    ebp
c00189c1:	56                   	push   esi
c00189c2:	53                   	push   ebx
c00189c3:	e8 96 b2 ff ff       	call   c0013c5e <Device::setName(char const*)>
c00189c8:	58                   	pop    eax
c00189c9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00189cf:	5a                   	pop    edx
c00189d0:	68 a9 94 02 c0       	push   0xc00294a9
c00189d5:	50                   	push   eax
c00189d6:	e8 91 7d fe ff       	call   c000076c <strcmp>
c00189db:	83 c4 10             	add    esp,0x10
c00189de:	85 c0                	test   eax,eax
c00189e0:	0f 85 71 03 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c00189e6:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00189ed:	e9 65 03 00 00       	jmp    c0018d57 <CPU::detectFeatures()+0x9e1>
c00189f2:	83 f8 02             	cmp    eax,0x2
c00189f5:	0f 85 b5 00 00 00    	jne    c0018ab0 <CPU::detectFeatures()+0x73a>
c00189fb:	57                   	push   edi
c00189fc:	57                   	push   edi
c00189fd:	68 bb 94 02 c0       	push   0xc00294bb
c0018a02:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018a06:	56                   	push   esi
c0018a07:	e8 0f 7d fe ff       	call   c000071b <strcpy>
c0018a0c:	5d                   	pop    ebp
c0018a0d:	58                   	pop    eax
c0018a0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a14:	66 c1 e8 06          	shr    ax,0x6
c0018a18:	0f b6 c0             	movzx  eax,al
c0018a1b:	50                   	push   eax
c0018a1c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a22:	c1 e8 0e             	shr    eax,0xe
c0018a25:	0f b6 c0             	movzx  eax,al
c0018a28:	50                   	push   eax
c0018a29:	e8 18 f0 ff ff       	call   c0017a46 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018a2e:	5a                   	pop    edx
c0018a2f:	59                   	pop    ecx
c0018a30:	50                   	push   eax
c0018a31:	56                   	push   esi
c0018a32:	e8 9b 7d fe ff       	call   c00007d2 <strcat>
c0018a37:	5f                   	pop    edi
c0018a38:	5d                   	pop    ebp
c0018a39:	56                   	push   esi
c0018a3a:	53                   	push   ebx
c0018a3b:	e8 1e b2 ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018a40:	58                   	pop    eax
c0018a41:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018a47:	5a                   	pop    edx
c0018a48:	68 c0 94 02 c0       	push   0xc00294c0
c0018a4d:	50                   	push   eax
c0018a4e:	e8 19 7d fe ff       	call   c000076c <strcmp>
c0018a53:	83 c4 10             	add    esp,0x10
c0018a56:	85 c0                	test   eax,eax
c0018a58:	75 20                	jne    c0018a7a <CPU::detectFeatures()+0x704>
c0018a5a:	8b 15 88 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd88
c0018a60:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018a66:	a8 01                	test   al,0x1
c0018a68:	74 10                	je     c0018a7a <CPU::detectFeatures()+0x704>
c0018a6a:	83 e0 fe             	and    eax,0xfffffffe
c0018a6d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018a73:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018a7a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a80:	c1 e8 0e             	shr    eax,0xe
c0018a83:	3c 05                	cmp    al,0x5
c0018a85:	0f 85 cc 02 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018a8b:	56                   	push   esi
c0018a8c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018a92:	83 e0 0f             	and    eax,0xf
c0018a95:	50                   	push   eax
c0018a96:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a9c:	66 c1 e8 06          	shr    ax,0x6
c0018aa0:	0f b6 c0             	movzx  eax,al
c0018aa3:	50                   	push   eax
c0018aa4:	6a 05                	push   0x5
c0018aa6:	e8 11 f4 ff ff       	call   c0017ebc <CPU::AMD_K6_writeback(int, int, int)>
c0018aab:	e9 1f 02 00 00       	jmp    c0018ccf <CPU::detectFeatures()+0x959>
c0018ab0:	8d 50 fd             	lea    edx,[eax-0x3]
c0018ab3:	83 fa 01             	cmp    edx,0x1
c0018ab6:	76 09                	jbe    c0018ac1 <CPU::detectFeatures()+0x74b>
c0018ab8:	83 f8 06             	cmp    eax,0x6
c0018abb:	0f 85 91 01 00 00    	jne    c0018c52 <CPU::detectFeatures()+0x8dc>
c0018ac1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ac7:	c1 ea 0e             	shr    edx,0xe
c0018aca:	80 fa 05             	cmp    dl,0x5
c0018acd:	75 7b                	jne    c0018b4a <CPU::detectFeatures()+0x7d4>
c0018acf:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018ad5:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018ada:	66 81 fa 00 01       	cmp    dx,0x100
c0018adf:	75 0c                	jne    c0018aed <CPU::detectFeatures()+0x777>
c0018ae1:	51                   	push   ecx
c0018ae2:	51                   	push   ecx
c0018ae3:	68 c7 94 02 c0       	push   0xc00294c7
c0018ae8:	e9 dc 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018aed:	66 81 fa 00 02       	cmp    dx,0x200
c0018af2:	75 0c                	jne    c0018b00 <CPU::detectFeatures()+0x78a>
c0018af4:	52                   	push   edx
c0018af5:	52                   	push   edx
c0018af6:	68 da 94 02 c0       	push   0xc00294da
c0018afb:	e9 c9 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b00:	66 81 fa 40 02       	cmp    dx,0x240
c0018b05:	75 0c                	jne    c0018b13 <CPU::detectFeatures()+0x79d>
c0018b07:	50                   	push   eax
c0018b08:	50                   	push   eax
c0018b09:	68 ec 94 02 c0       	push   0xc00294ec
c0018b0e:	e9 b6 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b13:	83 f8 06             	cmp    eax,0x6
c0018b16:	75 0c                	jne    c0018b24 <CPU::detectFeatures()+0x7ae>
c0018b18:	50                   	push   eax
c0018b19:	50                   	push   eax
c0018b1a:	68 fe 94 02 c0       	push   0xc00294fe
c0018b1f:	e9 a5 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b24:	83 f8 04             	cmp    eax,0x4
c0018b27:	75 0c                	jne    c0018b35 <CPU::detectFeatures()+0x7bf>
c0018b29:	50                   	push   eax
c0018b2a:	50                   	push   eax
c0018b2b:	68 0a 95 02 c0       	push   0xc002950a
c0018b30:	e9 94 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b35:	83 f8 03             	cmp    eax,0x3
c0018b38:	0f 85 19 02 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018b3e:	50                   	push   eax
c0018b3f:	50                   	push   eax
c0018b40:	68 12 95 02 c0       	push   0xc0029512
c0018b45:	e9 7f 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b4a:	80 fa 06             	cmp    dl,0x6
c0018b4d:	0f 85 db 00 00 00    	jne    c0018c2e <CPU::detectFeatures()+0x8b8>
c0018b53:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018b59:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018b5e:	66 81 fa 80 01       	cmp    dx,0x180
c0018b63:	75 0c                	jne    c0018b71 <CPU::detectFeatures()+0x7fb>
c0018b65:	50                   	push   eax
c0018b66:	50                   	push   eax
c0018b67:	68 1d 95 02 c0       	push   0xc002951d
c0018b6c:	e9 58 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b71:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018b77:	66 f7 c1 80 ff       	test   cx,0xff80
c0018b7c:	75 0c                	jne    c0018b8a <CPU::detectFeatures()+0x814>
c0018b7e:	50                   	push   eax
c0018b7f:	50                   	push   eax
c0018b80:	68 2d 95 02 c0       	push   0xc002952d
c0018b85:	e9 3f 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b8a:	66 81 fa 40 02       	cmp    dx,0x240
c0018b8f:	75 0c                	jne    c0018b9d <CPU::detectFeatures()+0x827>
c0018b91:	55                   	push   ebp
c0018b92:	55                   	push   ebp
c0018b93:	68 34 95 02 c0       	push   0xc0029534
c0018b98:	e9 2c 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018b9d:	66 81 fa 80 02       	cmp    dx,0x280
c0018ba2:	75 0c                	jne    c0018bb0 <CPU::detectFeatures()+0x83a>
c0018ba4:	57                   	push   edi
c0018ba5:	57                   	push   edi
c0018ba6:	68 3d 95 02 c0       	push   0xc002953d
c0018bab:	e9 19 01 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018bb0:	66 81 fa 40 03       	cmp    dx,0x340
c0018bb5:	74 ed                	je     c0018ba4 <CPU::detectFeatures()+0x82e>
c0018bb7:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018bbc:	75 0c                	jne    c0018bca <CPU::detectFeatures()+0x854>
c0018bbe:	56                   	push   esi
c0018bbf:	56                   	push   esi
c0018bc0:	68 44 95 02 c0       	push   0xc0029544
c0018bc5:	e9 ff 00 00 00       	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018bca:	83 f8 06             	cmp    eax,0x6
c0018bcd:	0f 84 45 ff ff ff    	je     c0018b18 <CPU::detectFeatures()+0x7a2>
c0018bd3:	83 f8 04             	cmp    eax,0x4
c0018bd6:	0f 84 4d ff ff ff    	je     c0018b29 <CPU::detectFeatures()+0x7b3>
c0018bdc:	83 f8 03             	cmp    eax,0x3
c0018bdf:	0f 85 72 01 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018be5:	51                   	push   ecx
c0018be6:	51                   	push   ecx
c0018be7:	68 4d 95 02 c0       	push   0xc002954d
c0018bec:	53                   	push   ebx
c0018bed:	e8 6c b0 ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018bf2:	b1 c1                	mov    cl,0xc1
c0018bf4:	88 c8                	mov    al,cl
c0018bf6:	e6 22                	out    0x22,al
c0018bf8:	e4 23                	in     al,0x23
c0018bfa:	88 c2                	mov    dl,al
c0018bfc:	88 c8                	mov    al,cl
c0018bfe:	e6 22                	out    0x22,al
c0018c00:	88 d0                	mov    al,dl
c0018c02:	83 c8 10             	or     eax,0x10
c0018c05:	e6 23                	out    0x23,al
c0018c07:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018c0e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018c11:	89 d0                	mov    eax,edx
c0018c13:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018c19:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018c1d:	40                   	inc    eax
c0018c1e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018c24:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018c29:	e9 a1 00 00 00       	jmp    c0018ccf <CPU::detectFeatures()+0x959>
c0018c2e:	83 f8 06             	cmp    eax,0x6
c0018c31:	0f 84 e1 fe ff ff    	je     c0018b18 <CPU::detectFeatures()+0x7a2>
c0018c37:	83 f8 04             	cmp    eax,0x4
c0018c3a:	0f 84 e9 fe ff ff    	je     c0018b29 <CPU::detectFeatures()+0x7b3>
c0018c40:	83 f8 03             	cmp    eax,0x3
c0018c43:	0f 85 0e 01 00 00    	jne    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018c49:	52                   	push   edx
c0018c4a:	52                   	push   edx
c0018c4b:	68 58 95 02 c0       	push   0xc0029558
c0018c50:	eb 77                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c52:	83 f8 07             	cmp    eax,0x7
c0018c55:	75 09                	jne    c0018c60 <CPU::detectFeatures()+0x8ea>
c0018c57:	50                   	push   eax
c0018c58:	50                   	push   eax
c0018c59:	68 62 95 02 c0       	push   0xc0029562
c0018c5e:	eb 69                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c60:	83 f8 0a             	cmp    eax,0xa
c0018c63:	75 09                	jne    c0018c6e <CPU::detectFeatures()+0x8f8>
c0018c65:	50                   	push   eax
c0018c66:	50                   	push   eax
c0018c67:	68 6d 95 02 c0       	push   0xc002956d
c0018c6c:	eb 5b                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c6e:	83 f8 0b             	cmp    eax,0xb
c0018c71:	75 09                	jne    c0018c7c <CPU::detectFeatures()+0x906>
c0018c73:	50                   	push   eax
c0018c74:	50                   	push   eax
c0018c75:	68 75 95 02 c0       	push   0xc0029575
c0018c7a:	eb 4d                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c7c:	83 f8 08             	cmp    eax,0x8
c0018c7f:	75 09                	jne    c0018c8a <CPU::detectFeatures()+0x914>
c0018c81:	50                   	push   eax
c0018c82:	50                   	push   eax
c0018c83:	68 7e 95 02 c0       	push   0xc002957e
c0018c88:	eb 3f                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c8a:	83 f8 09             	cmp    eax,0x9
c0018c8d:	75 09                	jne    c0018c98 <CPU::detectFeatures()+0x922>
c0018c8f:	50                   	push   eax
c0018c90:	50                   	push   eax
c0018c91:	68 86 95 02 c0       	push   0xc0029586
c0018c96:	eb 31                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018c98:	83 f8 05             	cmp    eax,0x5
c0018c9b:	75 09                	jne    c0018ca6 <CPU::detectFeatures()+0x930>
c0018c9d:	50                   	push   eax
c0018c9e:	50                   	push   eax
c0018c9f:	68 8e 95 02 c0       	push   0xc002958e
c0018ca4:	eb 23                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018ca6:	83 f8 0c             	cmp    eax,0xc
c0018ca9:	75 09                	jne    c0018cb4 <CPU::detectFeatures()+0x93e>
c0018cab:	55                   	push   ebp
c0018cac:	55                   	push   ebp
c0018cad:	68 9c 95 02 c0       	push   0xc002959c
c0018cb2:	eb 15                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018cb4:	83 f8 0d             	cmp    eax,0xd
c0018cb7:	75 09                	jne    c0018cc2 <CPU::detectFeatures()+0x94c>
c0018cb9:	57                   	push   edi
c0018cba:	57                   	push   edi
c0018cbb:	68 a7 95 02 c0       	push   0xc00295a7
c0018cc0:	eb 07                	jmp    c0018cc9 <CPU::detectFeatures()+0x953>
c0018cc2:	56                   	push   esi
c0018cc3:	56                   	push   esi
c0018cc4:	68 bb 95 02 c0       	push   0xc00295bb
c0018cc9:	53                   	push   ebx
c0018cca:	e8 8f af ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018ccf:	83 c4 10             	add    esp,0x10
c0018cd2:	e9 80 00 00 00       	jmp    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018cd7:	51                   	push   ecx
c0018cd8:	51                   	push   ecx
c0018cd9:	68 07 94 02 c0       	push   0xc0029407
c0018cde:	57                   	push   edi
c0018cdf:	e8 37 7a fe ff       	call   c000071b <strcpy>
c0018ce4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018cee:	e8 70 75 fe ff       	call   c0000263 <is486>
c0018cf3:	83 c4 10             	add    esp,0x10
c0018cf6:	85 c0                	test   eax,eax
c0018cf8:	74 2b                	je     c0018d25 <CPU::detectFeatures()+0x9af>
c0018cfa:	52                   	push   edx
c0018cfb:	52                   	push   edx
c0018cfc:	68 c7 95 02 c0       	push   0xc00295c7
c0018d01:	53                   	push   ebx
c0018d02:	e8 57 af ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018d07:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d0e:	0f 20 c0             	mov    eax,cr0
c0018d11:	83 e0 14             	and    eax,0x14
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	83 f8 04             	cmp    eax,0x4
c0018d1a:	75 1f                	jne    c0018d3b <CPU::detectFeatures()+0x9c5>
c0018d1c:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018d23:	eb 32                	jmp    c0018d57 <CPU::detectFeatures()+0x9e1>
c0018d25:	50                   	push   eax
c0018d26:	50                   	push   eax
c0018d27:	68 d2 95 02 c0       	push   0xc00295d2
c0018d2c:	53                   	push   ebx
c0018d2d:	e8 2c af ff ff       	call   c0013c5e <Device::setName(char const*)>
c0018d32:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018d39:	eb d3                	jmp    c0018d0e <CPU::detectFeatures()+0x998>
c0018d3b:	e8 fe 74 fe ff       	call   c000023e <hasLegacyFPU>
c0018d40:	83 e0 01             	and    eax,0x1
c0018d43:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d4c:	83 e0 fd             	and    eax,0xfffffffd
c0018d4f:	09 d0                	or     eax,edx
c0018d51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d57:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018d5e:	83 c4 4c             	add    esp,0x4c
c0018d61:	5b                   	pop    ebx
c0018d62:	5e                   	pop    esi
c0018d63:	5f                   	pop    edi
c0018d64:	5d                   	pop    ebp
c0018d65:	c3                   	ret    

c0018d66 <CPU::setupSMEP()>:
c0018d66:	0f 20 e0             	mov    eax,cr4
c0018d69:	0d 00 00 10 00       	or     eax,0x100000
c0018d6e:	0f 22 e0             	mov    cr4,eax
c0018d71:	c3                   	ret    

c0018d72 <CPU::setupUMIP()>:
c0018d72:	0f 20 e0             	mov    eax,cr4
c0018d75:	80 cc 08             	or     ah,0x8
c0018d78:	0f 22 e0             	mov    cr4,eax
c0018d7b:	c3                   	ret    

c0018d7c <CPU::setupTSC()>:
c0018d7c:	0f 20 e0             	mov    eax,cr4
c0018d7f:	83 c8 04             	or     eax,0x4
c0018d82:	0f 22 e0             	mov    cr4,eax
c0018d85:	c3                   	ret    

c0018d86 <CPU::setupLargePages()>:
c0018d86:	0f 20 e0             	mov    eax,cr4
c0018d89:	83 c8 10             	or     eax,0x10
c0018d8c:	0f 22 e0             	mov    cr4,eax
c0018d8f:	c3                   	ret    

c0018d90 <CPU::setupPAT()>:
c0018d90:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0018d95:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018d9c:	74 2c                	je     c0018dca <CPU::setupPAT()+0x3a>
c0018d9e:	53                   	push   ebx
c0018d9f:	83 ec 10             	sub    esp,0x10
c0018da2:	68 77 02 00 00       	push   0x277
c0018da7:	50                   	push   eax
c0018da8:	e8 bb 5c ff ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c0018dad:	83 e2 f8             	and    edx,0xfffffff8
c0018db0:	83 ca 01             	or     edx,0x1
c0018db3:	52                   	push   edx
c0018db4:	50                   	push   eax
c0018db5:	68 77 02 00 00       	push   0x277
c0018dba:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c0018dc0:	e8 cf 5c ff ff       	call   c000ea94 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018dc5:	83 c4 28             	add    esp,0x28
c0018dc8:	5b                   	pop    ebx
c0018dc9:	c3                   	ret    
c0018dca:	c3                   	ret    
c0018dcb:	90                   	nop

c0018dcc <CPU::setupMTRR()>:
c0018dcc:	c3                   	ret    
c0018dcd:	90                   	nop

c0018dce <CPU::setupGlobalPages()>:
c0018dce:	0f 20 e0             	mov    eax,cr4
c0018dd1:	0c 80                	or     al,0x80
c0018dd3:	0f 22 e0             	mov    cr4,eax
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <CPU::allowUsermodeDataAccess()>:
c0018dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ddc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018de3:	74 03                	je     c0018de8 <CPU::allowUsermodeDataAccess()+0x10>
c0018de5:	0f 01 cb             	stac   
c0018de8:	c3                   	ret    
c0018de9:	90                   	nop

c0018dea <CPU::prohibitUsermodeDataAccess()>:
c0018dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018df5:	74 03                	je     c0018dfa <CPU::prohibitUsermodeDataAccess()+0x10>
c0018df7:	0f 01 ca             	clac   
c0018dfa:	c3                   	ret    
c0018dfb:	90                   	nop

c0018dfc <CPU::setupSMAP()>:
c0018dfc:	0f 20 e0             	mov    eax,cr4
c0018dff:	0d 00 00 20 00       	or     eax,0x200000
c0018e04:	0f 22 e0             	mov    cr4,eax
c0018e07:	eb e1                	jmp    c0018dea <CPU::prohibitUsermodeDataAccess()>
c0018e09:	90                   	nop

c0018e0a <CPU::setupFeatures()>:
c0018e0a:	83 ec 0c             	sub    esp,0xc
c0018e0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e11:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018e18:	74 07                	je     c0018e21 <CPU::setupFeatures()+0x17>
c0018e1a:	52                   	push   edx
c0018e1b:	e8 46 ff ff ff       	call   c0018d66 <CPU::setupSMEP()>
c0018e20:	58                   	pop    eax
c0018e21:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018e28:	74 07                	je     c0018e31 <CPU::setupFeatures()+0x27>
c0018e2a:	52                   	push   edx
c0018e2b:	e8 cc ff ff ff       	call   c0018dfc <CPU::setupSMAP()>
c0018e30:	58                   	pop    eax
c0018e31:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018e38:	74 07                	je     c0018e41 <CPU::setupFeatures()+0x37>
c0018e3a:	52                   	push   edx
c0018e3b:	e8 32 ff ff ff       	call   c0018d72 <CPU::setupUMIP()>
c0018e40:	58                   	pop    eax
c0018e41:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018e48:	74 07                	je     c0018e51 <CPU::setupFeatures()+0x47>
c0018e4a:	52                   	push   edx
c0018e4b:	e8 2c ff ff ff       	call   c0018d7c <CPU::setupTSC()>
c0018e50:	58                   	pop    eax
c0018e51:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0018e58:	74 07                	je     c0018e61 <CPU::setupFeatures()+0x57>
c0018e5a:	52                   	push   edx
c0018e5b:	e8 26 ff ff ff       	call   c0018d86 <CPU::setupLargePages()>
c0018e60:	59                   	pop    ecx
c0018e61:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0018e68:	74 07                	je     c0018e71 <CPU::setupFeatures()+0x67>
c0018e6a:	52                   	push   edx
c0018e6b:	e8 5e ff ff ff       	call   c0018dce <CPU::setupGlobalPages()>
c0018e70:	58                   	pop    eax
c0018e71:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0018e78:	74 0c                	je     c0018e86 <CPU::setupFeatures()+0x7c>
c0018e7a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018e7e:	83 c4 0c             	add    esp,0xc
c0018e81:	e9 0a ff ff ff       	jmp    c0018d90 <CPU::setupPAT()>
c0018e86:	83 c4 0c             	add    esp,0xc
c0018e89:	c3                   	ret    

c0018e8a <CPU::open(int, int, void*)>:
c0018e8a:	57                   	push   edi
c0018e8b:	56                   	push   esi
c0018e8c:	53                   	push   ebx
c0018e8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018e91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018e95:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0018e9b:	83 ec 0c             	sub    esp,0xc
c0018e9e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018ea4:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0018eaa:	50                   	push   eax
c0018eab:	e8 a4 5e ff ff       	call   c000ed54 <GDT::setup()>
c0018eb0:	83 c4 0c             	add    esp,0xc
c0018eb3:	6a 00                	push   0x0
c0018eb5:	68 ef be ad de       	push   0xdeadbeef
c0018eba:	57                   	push   edi
c0018ebb:	e8 4e 81 ff ff       	call   c001100e <TSS::setup(unsigned long, unsigned long)>
c0018ec0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018ec3:	e8 26 81 ff ff       	call   c0010fee <TSS::flush()>
c0018ec8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ed1:	e8 da 60 ff ff       	call   c000efb0 <IDT::setup()>
c0018ed6:	b8 00 04 00 00       	mov    eax,0x400
c0018edb:	0f 23 f8             	mov    db7,eax
c0018ede:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0018ee8:	e8 7d 6b ff ff       	call   c000fa6a <Phys::allocatePage()>
c0018eed:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018ef3:	89 30                	mov    DWORD PTR [eax],esi
c0018ef5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018efb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018efe:	58                   	pop    eax
c0018eff:	5a                   	pop    edx
c0018f00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0018f06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018f0a:	e8 31 91 ff ff       	call   c0012040 <VAS::setCPUSpecific(unsigned long)>
c0018f0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f12:	e8 5f f4 ff ff       	call   c0018376 <CPU::detectFeatures()>
c0018f17:	e8 26 c0 ff ff       	call   c0014f42 <setupInterruptController()>
c0018f1c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0018f22:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0018f27:	83 e0 10             	and    eax,0x10
c0018f2a:	83 f8 01             	cmp    eax,0x1
c0018f2d:	19 c0                	sbb    eax,eax
c0018f2f:	83 e0 46             	and    eax,0x46
c0018f32:	83 c0 1e             	add    eax,0x1e
c0018f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f38:	e8 43 d4 ff ff       	call   c0016380 <setupTimer(int)>
c0018f3d:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0018f43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f46:	e8 bf fe ff ff       	call   c0018e0a <CPU::setupFeatures()>
c0018f4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f4e:	e8 a7 f1 ff ff       	call   c00180fa <CPU::displayFeatures()>
c0018f53:	83 c4 10             	add    esp,0x10
c0018f56:	31 c0                	xor    eax,eax
c0018f58:	5b                   	pop    ebx
c0018f59:	5e                   	pop    esi
c0018f5a:	5f                   	pop    edi
c0018f5b:	c3                   	ret    

c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0018f5c:	57                   	push   edi
c0018f5d:	56                   	push   esi
c0018f5e:	53                   	push   ebx
c0018f5f:	51                   	push   ecx
c0018f60:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018f64:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0018f67:	0f 02 c0             	lar    eax,ax
c0018f6a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018f6d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018f71:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0018f74:	88 ca                	mov    dl,cl
c0018f76:	c0 ea 06             	shr    dl,0x6
c0018f79:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018f7d:	89 ca                	mov    edx,ecx
c0018f7f:	66 c1 ea 03          	shr    dx,0x3
c0018f83:	83 e2 07             	and    edx,0x7
c0018f86:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018f8b:	88 17                	mov    BYTE PTR [edi],dl
c0018f8d:	0f 84 a6 01 00 00    	je     c0019139 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018f93:	83 e1 07             	and    ecx,0x7
c0018f96:	80 f9 04             	cmp    cl,0x4
c0018f99:	0f 84 98 00 00 00    	je     c0019037 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018f9f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018fa4:	0f 95 c0             	setne  al
c0018fa7:	80 f9 05             	cmp    cl,0x5
c0018faa:	0f 95 c2             	setne  dl
c0018fad:	08 c2                	or     dl,al
c0018faf:	74 79                	je     c001902a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018fb1:	84 c9                	test   cl,cl
c0018fb3:	75 05                	jne    c0018fba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0018fb5:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0018fb8:	eb 3c                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fba:	80 f9 01             	cmp    cl,0x1
c0018fbd:	75 05                	jne    c0018fc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018fbf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018fc2:	eb 32                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fc4:	80 f9 02             	cmp    cl,0x2
c0018fc7:	75 05                	jne    c0018fce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0018fc9:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018fcc:	eb 28                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fce:	31 c0                	xor    eax,eax
c0018fd0:	80 f9 03             	cmp    cl,0x3
c0018fd3:	75 05                	jne    c0018fda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0018fd5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0018fd8:	eb 1c                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fda:	80 f9 05             	cmp    cl,0x5
c0018fdd:	75 05                	jne    c0018fe4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018fdf:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018fe2:	eb 12                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fe4:	80 f9 06             	cmp    cl,0x6
c0018fe7:	75 05                	jne    c0018fee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0018fe9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018fec:	eb 08                	jmp    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018fee:	80 f9 07             	cmp    cl,0x7
c0018ff1:	75 03                	jne    c0018ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018ff3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018ff6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018ffb:	75 10                	jne    c001900d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018ffd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019001:	b9 03 00 00 00       	mov    ecx,0x3
c0019006:	01 d0                	add    eax,edx
c0019008:	e9 37 01 00 00       	jmp    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001900d:	b9 02 00 00 00       	mov    ecx,0x2
c0019012:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019017:	0f 85 27 01 00 00    	jne    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001901d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019020:	b9 06 00 00 00       	mov    ecx,0x6
c0019025:	e9 1a 01 00 00       	jmp    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001902a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001902d:	b9 06 00 00 00       	mov    ecx,0x6
c0019032:	e9 0f 01 00 00       	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019037:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001903a:	88 ca                	mov    dl,cl
c001903c:	c0 ea 06             	shr    dl,0x6
c001903f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019043:	89 ca                	mov    edx,ecx
c0019045:	66 c1 ea 03          	shr    dx,0x3
c0019049:	83 e2 07             	and    edx,0x7
c001904c:	80 e1 07             	and    cl,0x7
c001904f:	75 05                	jne    c0019056 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019051:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019054:	eb 4c                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019056:	80 f9 01             	cmp    cl,0x1
c0019059:	75 05                	jne    c0019060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001905b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001905e:	eb 42                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019060:	80 f9 02             	cmp    cl,0x2
c0019063:	75 05                	jne    c001906a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019065:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019068:	eb 38                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001906a:	80 f9 03             	cmp    cl,0x3
c001906d:	75 05                	jne    c0019074 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001906f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019072:	eb 2e                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019074:	80 f9 04             	cmp    cl,0x4
c0019077:	75 12                	jne    c001908b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019079:	f6 c4 60             	test   ah,0x60
c001907c:	75 08                	jne    c0019086 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001907e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019081:	8d 78 14             	lea    edi,[eax+0x14]
c0019084:	eb 1c                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019086:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019089:	eb 17                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001908b:	80 f9 05             	cmp    cl,0x5
c001908e:	75 05                	jne    c0019095 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019090:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019093:	eb 0d                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019095:	80 f9 06             	cmp    cl,0x6
c0019098:	75 05                	jne    c001909f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001909a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001909d:	eb 03                	jmp    c00190a2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001909f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00190a2:	84 d2                	test   dl,dl
c00190a4:	75 05                	jne    c00190ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00190a6:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00190a9:	eb 3c                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190ab:	80 fa 01             	cmp    dl,0x1
c00190ae:	75 05                	jne    c00190b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c00190b0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00190b3:	eb 32                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190b5:	80 fa 02             	cmp    dl,0x2
c00190b8:	75 05                	jne    c00190bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00190ba:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00190bd:	eb 28                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190bf:	80 fa 03             	cmp    dl,0x3
c00190c2:	75 05                	jne    c00190c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00190c4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00190c7:	eb 1e                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190c9:	31 c0                	xor    eax,eax
c00190cb:	80 fa 04             	cmp    dl,0x4
c00190ce:	74 17                	je     c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190d0:	80 fa 05             	cmp    dl,0x5
c00190d3:	75 05                	jne    c00190da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00190d5:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00190d8:	eb 0d                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190da:	80 fa 06             	cmp    dl,0x6
c00190dd:	75 05                	jne    c00190e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00190df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00190e2:	eb 03                	jmp    c00190e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00190e4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00190e7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00190ec:	0f 94 c2             	sete   dl
c00190ef:	80 f9 05             	cmp    cl,0x5
c00190f2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00190f6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00190fb:	d3 e0                	shl    eax,cl
c00190fd:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019101:	74 0a                	je     c001910d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019103:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019106:	b9 07 00 00 00       	mov    ecx,0x7
c001910b:	eb 37                	jmp    c0019144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001910d:	01 f8                	add    eax,edi
c001910f:	b9 03 00 00 00       	mov    ecx,0x3
c0019114:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019119:	74 2b                	je     c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001911b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019120:	75 0d                	jne    c001912f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019122:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019126:	01 c8                	add    eax,ecx
c0019128:	b9 04 00 00 00       	mov    ecx,0x4
c001912d:	eb 17                	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001912f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019132:	b9 07 00 00 00       	mov    ecx,0x7
c0019137:	eb 0d                	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019139:	b9 02 00 00 00       	mov    ecx,0x2
c001913e:	b2 01                	mov    dl,0x1
c0019140:	31 c0                	xor    eax,eax
c0019142:	eb 02                	jmp    c0019146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019144:	31 d2                	xor    edx,edx
c0019146:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001914a:	89 0b                	mov    DWORD PTR [ebx],ecx
c001914c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019150:	88 11                	mov    BYTE PTR [ecx],dl
c0019152:	5a                   	pop    edx
c0019153:	5b                   	pop    ebx
c0019154:	5e                   	pop    esi
c0019155:	5f                   	pop    edi
c0019156:	c3                   	ret    

c0019157 <Krnl::panic(char const*)>:
c0019157:	55                   	push   ebp
c0019158:	89 e5                	mov    ebp,esp
c001915a:	53                   	push   ebx
c001915b:	50                   	push   eax
c001915c:	a1 90 c8 02 c0       	mov    eax,ds:0xc002c890
c0019161:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019164:	85 c0                	test   eax,eax
c0019166:	74 02                	je     c001916a <Krnl::panic(char const*)+0x13>
c0019168:	ff d0                	call   eax
c001916a:	fa                   	cli    
c001916b:	c6 05 94 c8 02 c0 01 	mov    BYTE PTR ds:0xc002c894,0x1
c0019172:	83 ec 08             	sub    esp,0x8
c0019175:	c6 05 40 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad40,0x0
c001917c:	53                   	push   ebx
c001917d:	68 0c 96 02 c0       	push   0xc002960c
c0019182:	e8 06 95 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019187:	58                   	pop    eax
c0019188:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001918d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019193:	e8 b7 76 ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c0019198:	83 c4 0c             	add    esp,0xc
c001919b:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00191a0:	6a 01                	push   0x1
c00191a2:	6a 0f                	push   0xf
c00191a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191aa:	e8 df 70 ff ff       	call   c001028e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00191af:	5a                   	pop    edx
c00191b0:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00191b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191bb:	e8 30 79 ff ff       	call   c0010af0 <VgaText::clearScreen()>
c00191c0:	59                   	pop    ecx
c00191c1:	58                   	pop    eax
c00191c2:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00191c7:	68 25 96 02 c0       	push   0xc0029625
c00191cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191d2:	e8 97 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00191d7:	58                   	pop    eax
c00191d8:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00191dd:	5a                   	pop    edx
c00191de:	68 cc 96 02 c0       	push   0xc00296cc
c00191e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00191e9:	e8 80 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00191ee:	59                   	pop    ecx
c00191ef:	58                   	pop    eax
c00191f0:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00191f5:	68 41 96 02 c0       	push   0xc0029641
c00191fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019200:	e8 69 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019205:	58                   	pop    eax
c0019206:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001920b:	5a                   	pop    edx
c001920c:	53                   	push   ebx
c001920d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019213:	e8 56 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019218:	59                   	pop    ecx
c0019219:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001921e:	5b                   	pop    ebx
c001921f:	68 61 96 02 c0       	push   0xc0029661
c0019224:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001922a:	e8 3f 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001922f:	58                   	pop    eax
c0019230:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019235:	5a                   	pop    edx
c0019236:	68 08 97 02 c0       	push   0xc0029708
c001923b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019241:	e8 28 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019246:	59                   	pop    ecx
c0019247:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001924c:	5b                   	pop    ebx
c001924d:	68 41 96 02 c0       	push   0xc0029641
c0019252:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019258:	e8 11 7a ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001925d:	58                   	pop    eax
c001925e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019263:	5a                   	pop    edx
c0019264:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019267:	83 c0 0c             	add    eax,0xc
c001926a:	50                   	push   eax
c001926b:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019270:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019276:	e8 f3 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001927b:	59                   	pop    ecx
c001927c:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019281:	5b                   	pop    ebx
c0019282:	68 60 96 02 c0       	push   0xc0029660
c0019287:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001928d:	e8 dc 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019292:	58                   	pop    eax
c0019293:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019298:	5a                   	pop    edx
c0019299:	68 34 97 02 c0       	push   0xc0029734
c001929e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192a4:	e8 c5 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00192a9:	59                   	pop    ecx
c00192aa:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00192af:	5b                   	pop    ebx
c00192b0:	68 74 97 02 c0       	push   0xc0029774
c00192b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192bb:	e8 ae 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00192c0:	58                   	pop    eax
c00192c1:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00192c6:	5a                   	pop    edx
c00192c7:	68 4c 96 02 c0       	push   0xc002964c
c00192cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00192d2:	e8 97 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00192d7:	59                   	pop    ecx
c00192d8:	5b                   	pop    ebx
c00192d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00192dc:	68 64 96 02 c0       	push   0xc0029664
c00192e1:	e8 a7 93 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00192e6:	58                   	pop    eax
c00192e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192ea:	5a                   	pop    edx
c00192eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00192ee:	68 6d 96 02 c0       	push   0xc002966d
c00192f3:	e8 95 93 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00192f8:	59                   	pop    ecx
c00192f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192fc:	5b                   	pop    ebx
c00192fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00192ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019302:	68 76 96 02 c0       	push   0xc0029676
c0019307:	e8 81 93 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001930c:	58                   	pop    eax
c001930d:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019312:	5a                   	pop    edx
c0019313:	68 b8 97 02 c0       	push   0xc00297b8
c0019318:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001931e:	e8 4b 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019323:	59                   	pop    ecx
c0019324:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019329:	5b                   	pop    ebx
c001932a:	68 7f 96 02 c0       	push   0xc002967f
c001932f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019335:	e8 34 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001933a:	0f 20 c0             	mov    eax,cr0
c001933d:	5a                   	pop    edx
c001933e:	59                   	pop    ecx
c001933f:	50                   	push   eax
c0019340:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019345:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001934b:	e8 44 79 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019350:	5b                   	pop    ebx
c0019351:	58                   	pop    eax
c0019352:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019357:	68 89 96 02 c0       	push   0xc0029689
c001935c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019362:	e8 07 79 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019367:	0f 20 d0             	mov    eax,cr2
c001936a:	5a                   	pop    edx
c001936b:	59                   	pop    ecx
c001936c:	50                   	push   eax
c001936d:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019372:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019378:	e8 17 79 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c001937d:	5b                   	pop    ebx
c001937e:	58                   	pop    eax
c001937f:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019384:	68 93 96 02 c0       	push   0xc0029693
c0019389:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001938f:	e8 da 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c0019394:	0f 20 d8             	mov    eax,cr3
c0019397:	5a                   	pop    edx
c0019398:	59                   	pop    ecx
c0019399:	50                   	push   eax
c001939a:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001939f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193a5:	e8 ea 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00193aa:	5b                   	pop    ebx
c00193ab:	58                   	pop    eax
c00193ac:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00193b1:	68 a6 96 02 c0       	push   0xc00296a6
c00193b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193bc:	e8 ad 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00193c1:	0f 20 e0             	mov    eax,cr4
c00193c4:	5a                   	pop    edx
c00193c5:	59                   	pop    ecx
c00193c6:	50                   	push   eax
c00193c7:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00193cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193d2:	e8 bd 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c00193d7:	5b                   	pop    ebx
c00193d8:	58                   	pop    eax
c00193d9:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00193de:	68 b0 96 02 c0       	push   0xc00296b0
c00193e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00193e9:	e8 80 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c00193ee:	5a                   	pop    edx
c00193ef:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c00193f4:	59                   	pop    ecx
c00193f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00193fb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00193fe:	50                   	push   eax
c00193ff:	e8 90 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019404:	5b                   	pop    ebx
c0019405:	58                   	pop    eax
c0019406:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001940b:	68 c7 96 02 c0       	push   0xc00296c7
c0019410:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019416:	e8 53 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001941b:	5a                   	pop    edx
c001941c:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019421:	59                   	pop    ecx
c0019422:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019428:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001942b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001942e:	50                   	push   eax
c001942f:	e8 60 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019434:	5b                   	pop    ebx
c0019435:	58                   	pop    eax
c0019436:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001943b:	68 c7 96 02 c0       	push   0xc00296c7
c0019440:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019446:	e8 23 78 ff ff       	call   c0010c6e <VgaText::puts(char const*)>
c001944b:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c0019450:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019453:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019459:	8b 12                	mov    edx,DWORD PTR [edx]
c001945b:	59                   	pop    ecx
c001945c:	5b                   	pop    ebx
c001945d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019460:	50                   	push   eax
c0019461:	e8 2e 78 ff ff       	call   c0010c94 <VgaText::putx(unsigned int)>
c0019466:	83 c4 10             	add    esp,0x10
c0019469:	b2 fe                	mov    dl,0xfe
c001946b:	e4 60                	in     al,0x60
c001946d:	3c 1c                	cmp    al,0x1c
c001946f:	74 04                	je     c0019475 <Krnl::panic(char const*)+0x31e>
c0019471:	3c 5a                	cmp    al,0x5a
c0019473:	75 f6                	jne    c001946b <Krnl::panic(char const*)+0x314>
c0019475:	e4 64                	in     al,0x64
c0019477:	a8 02                	test   al,0x2
c0019479:	75 fa                	jne    c0019475 <Krnl::panic(char const*)+0x31e>
c001947b:	88 d0                	mov    al,dl
c001947d:	e6 64                	out    0x64,al
c001947f:	fa                   	cli    
c0019480:	f4                   	hlt    
c0019481:	eb e8                	jmp    c001946b <Krnl::panic(char const*)+0x314>

c0019483 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019483:	55                   	push   ebp
c0019484:	57                   	push   edi
c0019485:	56                   	push   esi
c0019486:	53                   	push   ebx
c0019487:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001948d:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019494:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019496:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019499:	80 fb 40             	cmp    bl,0x40
c001949c:	75 1b                	jne    c00194b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001949e:	8a 16                	mov    dl,BYTE PTR [esi]
c00194a0:	84 d2                	test   dl,dl
c00194a2:	0f 84 f1 00 00 00    	je     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194a8:	8d 46 01             	lea    eax,[esi+0x1]
c00194ab:	80 fa 3a             	cmp    dl,0x3a
c00194ae:	74 04                	je     c00194b4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00194b0:	89 c6                	mov    esi,eax
c00194b2:	eb ea                	jmp    c001949e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00194b4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00194b7:	89 c6                	mov    esi,eax
c00194b9:	50                   	push   eax
c00194ba:	6a 40                	push   0x40
c00194bc:	6a 00                	push   0x0
c00194be:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194c2:	50                   	push   eax
c00194c3:	e8 b4 71 fe ff       	call   c000067c <memset>
c00194c8:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00194cf:	31 c0                	xor    eax,eax
c00194d1:	83 c4 10             	add    esp,0x10
c00194d4:	8a 0f                	mov    cl,BYTE PTR [edi]
c00194d6:	84 c9                	test   cl,cl
c00194d8:	0f 84 bb 00 00 00    	je     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194de:	3d c7 00 00 00       	cmp    eax,0xc7
c00194e3:	0f 8f b0 00 00 00    	jg     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00194e9:	80 f9 0a             	cmp    cl,0xa
c00194ec:	0f 85 98 00 00 00    	jne    c001958a <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00194f2:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00194f7:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00194fb:	a8 df                	test   al,0xdf
c00194fd:	0f 94 c1             	sete   cl
c0019500:	3c 23                	cmp    al,0x23
c0019502:	0f 94 c2             	sete   dl
c0019505:	08 d1                	or     cl,dl
c0019507:	75 4a                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019509:	8d 50 f7             	lea    edx,[eax-0x9]
c001950c:	80 fa 01             	cmp    dl,0x1
c001950f:	76 42                	jbe    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019511:	3c 5b                	cmp    al,0x5b
c0019513:	75 42                	jne    c0019557 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0019515:	80 fb 40             	cmp    bl,0x40
c0019518:	75 39                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001951a:	83 ec 0c             	sub    esp,0xc
c001951d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0019521:	52                   	push   edx
c0019522:	e8 72 71 fe ff       	call   c0000699 <strlen>
c0019527:	83 c4 10             	add    esp,0x10
c001952a:	83 f8 3f             	cmp    eax,0x3f
c001952d:	77 6a                	ja     c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001952f:	50                   	push   eax
c0019530:	50                   	push   eax
c0019531:	8d 54 24 61          	lea    edx,[esp+0x61]
c0019535:	52                   	push   edx
c0019536:	8d 54 24 24          	lea    edx,[esp+0x24]
c001953a:	52                   	push   edx
c001953b:	e8 db 71 fe ff       	call   c000071b <strcpy>
c0019540:	58                   	pop    eax
c0019541:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019545:	52                   	push   edx
c0019546:	e8 4e 71 fe ff       	call   c0000699 <strlen>
c001954b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0019550:	83 c4 10             	add    esp,0x10
c0019553:	31 d2                	xor    edx,edx
c0019555:	eb 3a                	jmp    c0019591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0019557:	80 fb 40             	cmp    bl,0x40
c001955a:	74 06                	je     c0019562 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001955c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0019560:	eb 20                	jmp    c0019582 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0019562:	50                   	push   eax
c0019563:	50                   	push   eax
c0019564:	55                   	push   ebp
c0019565:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019569:	50                   	push   eax
c001956a:	e8 fd 71 fe ff       	call   c000076c <strcmp>
c001956f:	83 c4 10             	add    esp,0x10
c0019572:	85 c0                	test   eax,eax
c0019574:	75 dd                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0019576:	eb e4                	jmp    c001955c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0019578:	8d 50 01             	lea    edx,[eax+0x1]
c001957b:	80 f9 3d             	cmp    cl,0x3d
c001957e:	74 1d                	je     c001959d <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0019580:	89 d0                	mov    eax,edx
c0019582:	8a 08                	mov    cl,BYTE PTR [eax]
c0019584:	84 c9                	test   cl,cl
c0019586:	75 f0                	jne    c0019578 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0019588:	eb 0f                	jmp    c0019599 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001958a:	8d 50 01             	lea    edx,[eax+0x1]
c001958d:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0019591:	47                   	inc    edi
c0019592:	89 d0                	mov    eax,edx
c0019594:	e9 3b ff ff ff       	jmp    c00194d4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0019599:	31 c0                	xor    eax,eax
c001959b:	eb 33                	jmp    c00195d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001959d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00195a1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00195a4:	50                   	push   eax
c00195a5:	50                   	push   eax
c00195a6:	8d 44 24 60          	lea    eax,[esp+0x60]
c00195aa:	50                   	push   eax
c00195ab:	56                   	push   esi
c00195ac:	e8 bb 71 fe ff       	call   c000076c <strcmp>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	85 c0                	test   eax,eax
c00195b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195ba:	75 97                	jne    c0019553 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00195bc:	51                   	push   ecx
c00195bd:	51                   	push   ecx
c00195be:	52                   	push   edx
c00195bf:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00195c6:	e8 50 71 fe ff       	call   c000071b <strcpy>
c00195cb:	83 c4 10             	add    esp,0x10
c00195ce:	b0 01                	mov    al,0x1
c00195d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00195d6:	5b                   	pop    ebx
c00195d7:	5e                   	pop    esi
c00195d8:	5f                   	pop    edi
c00195d9:	5d                   	pop    ebp
c00195da:	c3                   	ret    

c00195db <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00195db:	57                   	push   edi
c00195dc:	56                   	push   esi
c00195dd:	53                   	push   ebx
c00195de:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00195e4:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00195eb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00195f2:	53                   	push   ebx
c00195f3:	e8 a1 70 fe ff       	call   c0000699 <strlen>
c00195f8:	89 34 24             	mov    DWORD PTR [esp],esi
c00195fb:	89 c7                	mov    edi,eax
c00195fd:	e8 97 70 fe ff       	call   c0000699 <strlen>
c0019602:	83 c4 10             	add    esp,0x10
c0019605:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0019609:	3d ff 00 00 00       	cmp    eax,0xff
c001960e:	0f 87 d3 00 00 00    	ja     c00196e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019614:	57                   	push   edi
c0019615:	57                   	push   edi
c0019616:	56                   	push   esi
c0019617:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001961b:	56                   	push   esi
c001961c:	e8 fa 70 fe ff       	call   c000071b <strcpy>
c0019621:	58                   	pop    eax
c0019622:	5a                   	pop    edx
c0019623:	68 89 9b 02 c0       	push   0xc0029b89
c0019628:	56                   	push   esi
c0019629:	e8 a4 71 fe ff       	call   c00007d2 <strcat>
c001962e:	59                   	pop    ecx
c001962f:	5f                   	pop    edi
c0019630:	53                   	push   ebx
c0019631:	56                   	push   esi
c0019632:	e8 9b 71 fe ff       	call   c00007d2 <strcat>
c0019637:	58                   	pop    eax
c0019638:	5a                   	pop    edx
c0019639:	68 de 97 02 c0       	push   0xc00297de
c001963e:	56                   	push   esi
c001963f:	e8 8e 71 fe ff       	call   c00007d2 <strcat>
c0019644:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001964b:	e8 70 5e ff ff       	call   c000f4c0 <malloc>
c0019650:	83 c4 0c             	add    esp,0xc
c0019653:	89 c3                	mov    ebx,eax
c0019655:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c001965b:	56                   	push   esi
c001965c:	50                   	push   eax
c001965d:	e8 5a 95 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0019662:	83 c4 10             	add    esp,0x10
c0019665:	85 db                	test   ebx,ebx
c0019667:	74 7e                	je     c00196e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0019669:	51                   	push   ecx
c001966a:	51                   	push   ecx
c001966b:	6a 01                	push   0x1
c001966d:	53                   	push   ebx
c001966e:	e8 ad 95 ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	85 c0                	test   eax,eax
c0019678:	74 08                	je     c0019682 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001967a:	83 ec 0c             	sub    esp,0xc
c001967d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001967f:	53                   	push   ebx
c0019680:	eb 5f                	jmp    c00196e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0019682:	52                   	push   edx
c0019683:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019687:	50                   	push   eax
c0019688:	8d 44 24 20          	lea    eax,[esp+0x20]
c001968c:	50                   	push   eax
c001968d:	53                   	push   ebx
c001968e:	e8 39 98 ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c0019693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	89 c1                	mov    ecx,eax
c001969c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00196a0:	74 31                	je     c00196d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00196a2:	83 ec 0c             	sub    esp,0xc
c00196a5:	50                   	push   eax
c00196a6:	e8 15 5e ff ff       	call   c000f4c0 <malloc>
c00196ab:	89 c6                	mov    esi,eax
c00196ad:	58                   	pop    eax
c00196ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00196b4:	52                   	push   edx
c00196b5:	56                   	push   esi
c00196b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196be:	53                   	push   ebx
c00196bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00196c2:	83 c4 20             	add    esp,0x20
c00196c5:	85 c0                	test   eax,eax
c00196c7:	75 0a                	jne    c00196d3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00196c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196cd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00196d1:	74 18                	je     c00196eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00196d3:	83 ec 0c             	sub    esp,0xc
c00196d6:	53                   	push   ebx
c00196d7:	e8 a2 95 ff ff       	call   c0012c7e <File::close()>
c00196dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	31 c0                	xor    eax,eax
c00196e9:	eb 3b                	jmp    c0019726 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00196eb:	83 ec 0c             	sub    esp,0xc
c00196ee:	53                   	push   ebx
c00196ef:	e8 8a 95 ff ff       	call   c0012c7e <File::close()>
c00196f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196fc:	83 c4 0c             	add    esp,0xc
c00196ff:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0019706:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001970d:	56                   	push   esi
c001970e:	e8 70 fd ff ff       	call   c0019483 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0019713:	89 34 24             	mov    DWORD PTR [esp],esi
c0019716:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001971a:	e8 b1 5d ff ff       	call   c000f4d0 <free>
c001971f:	83 c4 10             	add    esp,0x10
c0019722:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019726:	81 c4 20 01 00 00    	add    esp,0x120
c001972c:	5b                   	pop    ebx
c001972d:	5e                   	pop    esi
c001972e:	5f                   	pop    edi
c001972f:	c3                   	ret    

c0019730 <Reg::getLine(char*, char*, char*)>:
c0019730:	57                   	push   edi
c0019731:	56                   	push   esi
c0019732:	53                   	push   ebx
c0019733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019737:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001973b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001973f:	57                   	push   edi
c0019740:	56                   	push   esi
c0019741:	53                   	push   ebx
c0019742:	68 e3 97 02 c0       	push   0xc00297e3
c0019747:	e8 8f fe ff ff       	call   c00195db <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001974c:	83 c4 10             	add    esp,0x10
c001974f:	84 c0                	test   al,al
c0019751:	75 10                	jne    c0019763 <Reg::getLine(char*, char*, char*)+0x33>
c0019753:	57                   	push   edi
c0019754:	56                   	push   esi
c0019755:	53                   	push   ebx
c0019756:	68 08 98 02 c0       	push   0xc0029808
c001975b:	e8 7b fe ff ff       	call   c00195db <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0019760:	83 c4 10             	add    esp,0x10
c0019763:	5b                   	pop    ebx
c0019764:	5e                   	pop    esi
c0019765:	5f                   	pop    edi
c0019766:	c3                   	ret    

c0019767 <Reg::readInt(char*, char*, int*)>:
c0019767:	55                   	push   ebp
c0019768:	57                   	push   edi
c0019769:	56                   	push   esi
c001976a:	53                   	push   ebx
c001976b:	81 ec f0 00 00 00    	sub    esp,0xf0
c0019771:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019775:	57                   	push   edi
c0019776:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001977d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019784:	e8 a7 ff ff ff       	call   c0019730 <Reg::getLine(char*, char*, char*)>
c0019789:	83 c4 10             	add    esp,0x10
c001978c:	84 c0                	test   al,al
c001978e:	0f 84 b3 00 00 00    	je     c0019847 <Reg::readInt(char*, char*, int*)+0xe0>
c0019794:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019798:	80 fa 2b             	cmp    dl,0x2b
c001979b:	74 0c                	je     c00197a9 <Reg::readInt(char*, char*, int*)+0x42>
c001979d:	80 fa 2d             	cmp    dl,0x2d
c00197a0:	75 0e                	jne    c00197b0 <Reg::readInt(char*, char*, int*)+0x49>
c00197a2:	ba 01 00 00 00       	mov    edx,0x1
c00197a7:	eb 0b                	jmp    c00197b4 <Reg::readInt(char*, char*, int*)+0x4d>
c00197a9:	ba 01 00 00 00       	mov    edx,0x1
c00197ae:	eb 02                	jmp    c00197b2 <Reg::readInt(char*, char*, int*)+0x4b>
c00197b0:	31 d2                	xor    edx,edx
c00197b2:	31 c0                	xor    eax,eax
c00197b4:	be 0a 00 00 00       	mov    esi,0xa
c00197b9:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00197be:	75 20                	jne    c00197e0 <Reg::readInt(char*, char*, int*)+0x79>
c00197c0:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00197c4:	80 f9 78             	cmp    cl,0x78
c00197c7:	75 0a                	jne    c00197d3 <Reg::readInt(char*, char*, int*)+0x6c>
c00197c9:	83 c2 02             	add    edx,0x2
c00197cc:	be 10 00 00 00       	mov    esi,0x10
c00197d1:	eb 0d                	jmp    c00197e0 <Reg::readInt(char*, char*, int*)+0x79>
c00197d3:	80 f9 62             	cmp    cl,0x62
c00197d6:	75 08                	jne    c00197e0 <Reg::readInt(char*, char*, int*)+0x79>
c00197d8:	83 c2 02             	add    edx,0x2
c00197db:	be 02 00 00 00       	mov    esi,0x2
c00197e0:	01 d7                	add    edi,edx
c00197e2:	31 d2                	xor    edx,edx
c00197e4:	8a 1f                	mov    bl,BYTE PTR [edi]
c00197e6:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00197ea:	80 fb 0d             	cmp    bl,0xd
c00197ed:	0f 94 c3             	sete   bl
c00197f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00197f5:	0f 94 c1             	sete   cl
c00197f8:	08 cb                	or     bl,cl
c00197fa:	75 3a                	jne    c0019836 <Reg::readInt(char*, char*, int*)+0xcf>
c00197fc:	0f af d6             	imul   edx,esi
c00197ff:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0019804:	83 fe 10             	cmp    esi,0x10
c0019807:	75 26                	jne    c001982f <Reg::readInt(char*, char*, int*)+0xc8>
c0019809:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001980d:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0019810:	89 e9                	mov    ecx,ebp
c0019812:	80 f9 05             	cmp    cl,0x5
c0019815:	77 06                	ja     c001981d <Reg::readInt(char*, char*, int*)+0xb6>
c0019817:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001981b:	eb 16                	jmp    c0019833 <Reg::readInt(char*, char*, int*)+0xcc>
c001981d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0019821:	83 e9 61             	sub    ecx,0x61
c0019824:	80 f9 05             	cmp    cl,0x5
c0019827:	77 06                	ja     c001982f <Reg::readInt(char*, char*, int*)+0xc8>
c0019829:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001982d:	eb 04                	jmp    c0019833 <Reg::readInt(char*, char*, int*)+0xcc>
c001982f:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0019833:	47                   	inc    edi
c0019834:	eb ae                	jmp    c00197e4 <Reg::readInt(char*, char*, int*)+0x7d>
c0019836:	84 c0                	test   al,al
c0019838:	74 02                	je     c001983c <Reg::readInt(char*, char*, int*)+0xd5>
c001983a:	f7 da                	neg    edx
c001983c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0019843:	89 10                	mov    DWORD PTR [eax],edx
c0019845:	88 d8                	mov    al,bl
c0019847:	81 c4 ec 00 00 00    	add    esp,0xec
c001984d:	5b                   	pop    ebx
c001984e:	5e                   	pop    esi
c001984f:	5f                   	pop    edi
c0019850:	5d                   	pop    ebp
c0019851:	c3                   	ret    

c0019852 <Reg::readString(char*, char*, char*, int)>:
c0019852:	57                   	push   edi
c0019853:	56                   	push   esi
c0019854:	53                   	push   ebx
c0019855:	81 ec d4 00 00 00    	sub    esp,0xd4
c001985b:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0019862:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019866:	57                   	push   edi
c0019867:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001986e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019875:	e8 b6 fe ff ff       	call   c0019730 <Reg::getLine(char*, char*, char*)>
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	89 c6                	mov    esi,eax
c001987f:	84 c0                	test   al,al
c0019881:	74 44                	je     c00198c7 <Reg::readString(char*, char*, char*, int)+0x75>
c0019883:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001988a:	31 c0                	xor    eax,eax
c001988c:	4a                   	dec    edx
c001988d:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0019890:	84 c9                	test   cl,cl
c0019892:	74 0f                	je     c00198a3 <Reg::readString(char*, char*, char*, int)+0x51>
c0019894:	39 c2                	cmp    edx,eax
c0019896:	7e 0b                	jle    c00198a3 <Reg::readString(char*, char*, char*, int)+0x51>
c0019898:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001989b:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00198a0:	40                   	inc    eax
c00198a1:	eb ea                	jmp    c001988d <Reg::readString(char*, char*, char*, int)+0x3b>
c00198a3:	83 ec 0c             	sub    esp,0xc
c00198a6:	53                   	push   ebx
c00198a7:	e8 ed 6d fe ff       	call   c0000699 <strlen>
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00198b4:	75 11                	jne    c00198c7 <Reg::readString(char*, char*, char*, int)+0x75>
c00198b6:	83 ec 0c             	sub    esp,0xc
c00198b9:	53                   	push   ebx
c00198ba:	e8 da 6d fe ff       	call   c0000699 <strlen>
c00198bf:	83 c4 10             	add    esp,0x10
c00198c2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00198c7:	81 c4 d0 00 00 00    	add    esp,0xd0
c00198cd:	89 f0                	mov    eax,esi
c00198cf:	5b                   	pop    ebx
c00198d0:	5e                   	pop    esi
c00198d1:	5f                   	pop    edi
c00198d2:	c3                   	ret    

c00198d3 <Reg::readBool(char*, char*, bool*)>:
c00198d3:	83 ec 20             	sub    esp,0x20
c00198d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198da:	50                   	push   eax
c00198db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e3:	e8 7f fe ff ff       	call   c0019767 <Reg::readInt(char*, char*, int*)>
c00198e8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00198ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00198f1:	0f 95 02             	setne  BYTE PTR [edx]
c00198f4:	83 c4 2c             	add    esp,0x2c
c00198f7:	c3                   	ret    

c00198f8 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00198f8:	53                   	push   ebx
c00198f9:	83 ec 1c             	sub    esp,0x1c
c00198fc:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019900:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019904:	50                   	push   eax
c0019905:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019909:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001990d:	e8 c1 ff ff ff       	call   c00198d3 <Reg::readBool(char*, char*, bool*)>
c0019912:	83 c4 10             	add    esp,0x10
c0019915:	84 c0                	test   al,al
c0019917:	74 04                	je     c001991d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0019919:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001991d:	88 d8                	mov    al,bl
c001991f:	83 c4 18             	add    esp,0x18
c0019922:	5b                   	pop    ebx
c0019923:	c3                   	ret    

c0019924 <Reg::readIntWithDefault(char*, char*, int)>:
c0019924:	53                   	push   ebx
c0019925:	83 ec 1c             	sub    esp,0x1c
c0019928:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001992c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019930:	50                   	push   eax
c0019931:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019935:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019939:	e8 29 fe ff ff       	call   c0019767 <Reg::readInt(char*, char*, int*)>
c001993e:	83 c4 10             	add    esp,0x10
c0019941:	84 c0                	test   al,al
c0019943:	74 04                	je     c0019949 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0019945:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019949:	89 d8                	mov    eax,ebx
c001994b:	83 c4 18             	add    esp,0x18
c001994e:	5b                   	pop    ebx
c001994f:	c3                   	ret    

c0019950 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0019950:	57                   	push   edi
c0019951:	56                   	push   esi
c0019952:	53                   	push   ebx
c0019953:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019957:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001995b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001995f:	56                   	push   esi
c0019960:	53                   	push   ebx
c0019961:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019965:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019969:	e8 e4 fe ff ff       	call   c0019852 <Reg::readString(char*, char*, char*, int)>
c001996e:	83 c4 10             	add    esp,0x10
c0019971:	84 c0                	test   al,al
c0019973:	75 1b                	jne    c0019990 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c0019975:	50                   	push   eax
c0019976:	56                   	push   esi
c0019977:	4e                   	dec    esi
c0019978:	6a 00                	push   0x0
c001997a:	53                   	push   ebx
c001997b:	e8 fc 6c fe ff       	call   c000067c <memset>
c0019980:	83 c4 0c             	add    esp,0xc
c0019983:	56                   	push   esi
c0019984:	57                   	push   edi
c0019985:	53                   	push   ebx
c0019986:	89 fb                	mov    ebx,edi
c0019988:	e8 b9 6c fe ff       	call   c0000646 <memcpy>
c001998d:	83 c4 10             	add    esp,0x10
c0019990:	89 d8                	mov    eax,ebx
c0019992:	5b                   	pop    ebx
c0019993:	5e                   	pop    esi
c0019994:	5f                   	pop    edi
c0019995:	c3                   	ret    

c0019996 <Sys::exit(regs*)>:
c0019996:	83 ec 18             	sub    esp,0x18
c0019999:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001999d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199a0:	e8 15 32 00 00       	call   c001cbba <terminateTask(int)>
c00199a5:	83 c8 ff             	or     eax,0xffffffff
c00199a8:	83 c4 1c             	add    esp,0x1c
c00199ab:	89 c2                	mov    edx,eax
c00199ad:	c3                   	ret    

c00199ae <Sys::getCwd(regs*)>:
c00199ae:	83 ec 10             	sub    esp,0x10
c00199b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199b5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00199b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00199bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199c3:	e8 65 95 ff ff       	call   c0012f2d <getcwd(Process*, char*, int)>
c00199c8:	83 c4 1c             	add    esp,0x1c
c00199cb:	99                   	cdq    
c00199cc:	c3                   	ret    

c00199cd <Sys::getPID(regs*)>:
c00199cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00199d7:	99                   	cdq    
c00199d8:	c3                   	ret    

c00199d9 <Sys::loadDLL(regs*)>:
c00199d9:	56                   	push   esi
c00199da:	53                   	push   ebx
c00199db:	31 d2                	xor    edx,edx
c00199dd:	51                   	push   ecx
c00199de:	b8 01 00 00 00       	mov    eax,0x1
c00199e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199e7:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00199eb:	0f 84 8c 00 00 00    	je     c0019a7d <Sys::loadDLL(regs*)+0xa4>
c00199f1:	83 ec 0c             	sub    esp,0xc
c00199f4:	68 14 01 00 00       	push   0x114
c00199f9:	e8 c2 5a ff ff       	call   c000f4c0 <malloc>
c00199fe:	83 c4 0c             	add    esp,0xc
c0019a01:	89 c3                	mov    ebx,eax
c0019a03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a08:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a0b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019a0e:	53                   	push   ebx
c0019a0f:	e8 a8 91 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	31 d2                	xor    edx,edx
c0019a19:	b8 02 00 00 00       	mov    eax,0x2
c0019a1e:	85 db                	test   ebx,ebx
c0019a20:	74 5b                	je     c0019a7d <Sys::loadDLL(regs*)+0xa4>
c0019a22:	83 ec 0c             	sub    esp,0xc
c0019a25:	53                   	push   ebx
c0019a26:	e8 63 94 ff ff       	call   c0012e8e <File::exists()>
c0019a2b:	83 c4 10             	add    esp,0x10
c0019a2e:	84 c0                	test   al,al
c0019a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a32:	75 11                	jne    c0019a45 <Sys::loadDLL(regs*)+0x6c>
c0019a34:	83 ec 0c             	sub    esp,0xc
c0019a37:	53                   	push   ebx
c0019a38:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a3b:	83 c4 10             	add    esp,0x10
c0019a3e:	b8 03 00 00 00       	mov    eax,0x3
c0019a43:	eb 36                	jmp    c0019a7b <Sys::loadDLL(regs*)+0xa2>
c0019a45:	83 ec 0c             	sub    esp,0xc
c0019a48:	53                   	push   ebx
c0019a49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a4c:	58                   	pop    eax
c0019a4d:	5a                   	pop    edx
c0019a4e:	6a 00                	push   0x0
c0019a50:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019a53:	e8 09 21 00 00       	call   c001bb61 <Thr::loadDLL(char const*, bool)>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	89 c1                	mov    ecx,eax
c0019a5d:	31 d2                	xor    edx,edx
c0019a5f:	b8 04 00 00 00       	mov    eax,0x4
c0019a64:	85 c9                	test   ecx,ecx
c0019a66:	74 15                	je     c0019a7d <Sys::loadDLL(regs*)+0xa4>
c0019a68:	53                   	push   ebx
c0019a69:	53                   	push   ebx
c0019a6a:	ff 35 88 bd 02 c0    	push   DWORD PTR ds:0xc002bd88
c0019a70:	51                   	push   ecx
c0019a71:	e8 fa 22 00 00       	call   c001bd70 <Thr::executeDLL(unsigned long, void*)>
c0019a76:	83 c4 10             	add    esp,0x10
c0019a79:	31 c0                	xor    eax,eax
c0019a7b:	31 d2                	xor    edx,edx
c0019a7d:	59                   	pop    ecx
c0019a7e:	5b                   	pop    ebx
c0019a7f:	5e                   	pop    esi
c0019a80:	c3                   	ret    

c0019a81 <Sys::read(regs*)>:
c0019a81:	57                   	push   edi
c0019a82:	56                   	push   esi
c0019a83:	53                   	push   ebx
c0019a84:	83 ec 10             	sub    esp,0x10
c0019a87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019a8b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019a8e:	83 f8 02             	cmp    eax,0x2
c0019a91:	77 10                	ja     c0019aa3 <Sys::read(regs*)+0x22>
c0019a93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019a9b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019aa1:	eb 0e                	jmp    c0019ab1 <Sys::read(regs*)+0x30>
c0019aa3:	83 ec 0c             	sub    esp,0xc
c0019aa6:	50                   	push   eax
c0019aa7:	e8 9b 7a ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019aac:	83 c4 10             	add    esp,0x10
c0019aaf:	89 c1                	mov    ecx,eax
c0019ab1:	83 c8 ff             	or     eax,0xffffffff
c0019ab4:	85 c9                	test   ecx,ecx
c0019ab6:	89 c2                	mov    edx,eax
c0019ab8:	74 28                	je     c0019ae2 <Sys::read(regs*)+0x61>
c0019aba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ac2:	31 ff                	xor    edi,edi
c0019ac4:	83 ec 0c             	sub    esp,0xc
c0019ac7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019ac9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019acd:	52                   	push   edx
c0019ace:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019ad1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019ad4:	57                   	push   edi
c0019ad5:	56                   	push   esi
c0019ad6:	51                   	push   ecx
c0019ad7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019ade:	83 c4 20             	add    esp,0x20
c0019ae1:	99                   	cdq    
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	5b                   	pop    ebx
c0019ae6:	5e                   	pop    esi
c0019ae7:	5f                   	pop    edi
c0019ae8:	c3                   	ret    

c0019ae9 <Sys::sbrk(regs*)>:
c0019ae9:	56                   	push   esi
c0019aea:	53                   	push   ebx
c0019aeb:	50                   	push   eax
c0019aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019af1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019af5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019af8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0019afb:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019b01:	85 db                	test   ebx,ebx
c0019b03:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0019b06:	74 02                	je     c0019b0a <Sys::sbrk(regs*)+0x21>
c0019b08:	79 06                	jns    c0019b10 <Sys::sbrk(regs*)+0x27>
c0019b0a:	89 f0                	mov    eax,esi
c0019b0c:	31 d2                	xor    edx,edx
c0019b0e:	eb 2a                	jmp    c0019b3a <Sys::sbrk(regs*)+0x51>
c0019b10:	83 c8 ff             	or     eax,0xffffffff
c0019b13:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0019b19:	89 c2                	mov    edx,eax
c0019b1b:	77 1d                	ja     c0019b3a <Sys::sbrk(regs*)+0x51>
c0019b1d:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019b23:	50                   	push   eax
c0019b24:	c1 ea 0c             	shr    edx,0xc
c0019b27:	68 07 04 00 00       	push   0x407
c0019b2c:	52                   	push   edx
c0019b2d:	51                   	push   ecx
c0019b2e:	e8 35 83 ff ff       	call   c0011e68 <VAS::allocatePages(int, int)>
c0019b33:	89 f0                	mov    eax,esi
c0019b35:	31 d2                	xor    edx,edx
c0019b37:	83 c4 10             	add    esp,0x10
c0019b3a:	59                   	pop    ecx
c0019b3b:	5b                   	pop    ebx
c0019b3c:	5e                   	pop    esi
c0019b3d:	c3                   	ret    

c0019b3e <Sys::setCwd(regs*)>:
c0019b3e:	83 ec 14             	sub    esp,0x14
c0019b41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b45:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b4d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b50:	e8 02 94 ff ff       	call   c0012f57 <setcwd(Process*, char*)>
c0019b55:	83 c4 1c             	add    esp,0x1c
c0019b58:	99                   	cdq    
c0019b59:	c3                   	ret    

c0019b5a <Sys::write(regs*)>:
c0019b5a:	57                   	push   edi
c0019b5b:	56                   	push   esi
c0019b5c:	53                   	push   ebx
c0019b5d:	83 ec 10             	sub    esp,0x10
c0019b60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019b64:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019b67:	83 f8 02             	cmp    eax,0x2
c0019b6a:	77 10                	ja     c0019b7c <Sys::write(regs*)+0x22>
c0019b6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b71:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b74:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0019b7a:	eb 0e                	jmp    c0019b8a <Sys::write(regs*)+0x30>
c0019b7c:	83 ec 0c             	sub    esp,0xc
c0019b7f:	50                   	push   eax
c0019b80:	e8 c2 79 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019b85:	83 c4 10             	add    esp,0x10
c0019b88:	89 c1                	mov    ecx,eax
c0019b8a:	83 c8 ff             	or     eax,0xffffffff
c0019b8d:	85 c9                	test   ecx,ecx
c0019b8f:	89 c2                	mov    edx,eax
c0019b91:	74 28                	je     c0019bbb <Sys::write(regs*)+0x61>
c0019b93:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019b9b:	31 ff                	xor    edi,edi
c0019b9d:	83 ec 0c             	sub    esp,0xc
c0019ba0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019ba2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ba6:	52                   	push   edx
c0019ba7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019baa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019bad:	57                   	push   edi
c0019bae:	56                   	push   esi
c0019baf:	51                   	push   ecx
c0019bb0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019bb7:	83 c4 20             	add    esp,0x20
c0019bba:	99                   	cdq    
c0019bbb:	83 c4 10             	add    esp,0x10
c0019bbe:	5b                   	pop    ebx
c0019bbf:	5e                   	pop    esi
c0019bc0:	5f                   	pop    edi
c0019bc1:	c3                   	ret    

c0019bc2 <Sys::yield(regs*)>:
c0019bc2:	57                   	push   edi
c0019bc3:	56                   	push   esi
c0019bc4:	53                   	push   ebx
c0019bc5:	e8 d3 25 00 00       	call   c001c19d <lockScheduler()>
c0019bca:	e8 09 29 00 00       	call   c001c4d8 <schedule()>
c0019bcf:	e8 cb 25 00 00       	call   c001c19f <unlockScheduler()>
c0019bd4:	8b 35 f0 c3 02 c0    	mov    esi,DWORD PTR ds:0xc002c3f0
c0019bda:	8b 3d f4 c3 02 c0    	mov    edi,DWORD PTR ds:0xc002c3f4
c0019be0:	89 f0                	mov    eax,esi
c0019be2:	89 fb                	mov    ebx,edi
c0019be4:	89 f1                	mov    ecx,esi
c0019be6:	c1 e0 07             	shl    eax,0x7
c0019be9:	0f ac d9 17          	shrd   ecx,ebx,0x17
c0019bed:	25 80 30 0f 00       	and    eax,0xf3080
c0019bf2:	c1 eb 17             	shr    ebx,0x17
c0019bf5:	31 c8                	xor    eax,ecx
c0019bf7:	89 da                	mov    edx,ebx
c0019bf9:	5b                   	pop    ebx
c0019bfa:	5e                   	pop    esi
c0019bfb:	5f                   	pop    edi
c0019bfc:	c3                   	ret    

c0019bfd <sysCallSeekDir(regs*)>:
c0019bfd:	31 c0                	xor    eax,eax
c0019bff:	31 d2                	xor    edx,edx
c0019c01:	c3                   	ret    

c0019c02 <sysCallTellDir(regs*)>:
c0019c02:	31 c0                	xor    eax,eax
c0019c04:	31 d2                	xor    edx,edx
c0019c06:	c3                   	ret    

c0019c07 <sysCallVerify(regs*)>:
c0019c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c0b:	31 d2                	xor    edx,edx
c0019c0d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019c10:	c3                   	ret    

c0019c11 <sysCallGetArgc(regs*)>:
c0019c11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c19:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019c1f:	99                   	cdq    
c0019c20:	c3                   	ret    

c0019c21 <sysFormatDisk(regs*)>:
c0019c21:	56                   	push   esi
c0019c22:	53                   	push   ebx
c0019c23:	53                   	push   ebx
c0019c24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c28:	8b 1d e8 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee8
c0019c2e:	eb 25                	jmp    c0019c55 <sysFormatDisk(regs*)+0x34>
c0019c30:	83 ec 0c             	sub    esp,0xc
c0019c33:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c36:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019c38:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019c3b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c3e:	50                   	push   eax
c0019c3f:	ff 34 85 80 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3c80]
c0019c46:	53                   	push   ebx
c0019c47:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019c4a:	83 c4 20             	add    esp,0x20
c0019c4d:	83 f8 08             	cmp    eax,0x8
c0019c50:	75 12                	jne    c0019c64 <sysFormatDisk(regs*)+0x43>
c0019c52:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0019c55:	85 db                	test   ebx,ebx
c0019c57:	75 d7                	jne    c0019c30 <sysFormatDisk(regs*)+0xf>
c0019c59:	59                   	pop    ecx
c0019c5a:	b8 03 00 00 00       	mov    eax,0x3
c0019c5f:	31 d2                	xor    edx,edx
c0019c61:	5b                   	pop    ebx
c0019c62:	5e                   	pop    esi
c0019c63:	c3                   	ret    
c0019c64:	85 c0                	test   eax,eax
c0019c66:	74 1b                	je     c0019c83 <sysFormatDisk(regs*)+0x62>
c0019c68:	83 f8 09             	cmp    eax,0x9
c0019c6b:	74 0b                	je     c0019c78 <sysFormatDisk(regs*)+0x57>
c0019c6d:	59                   	pop    ecx
c0019c6e:	b8 02 00 00 00       	mov    eax,0x2
c0019c73:	31 d2                	xor    edx,edx
c0019c75:	5b                   	pop    ebx
c0019c76:	5e                   	pop    esi
c0019c77:	c3                   	ret    
c0019c78:	59                   	pop    ecx
c0019c79:	b8 01 00 00 00       	mov    eax,0x1
c0019c7e:	31 d2                	xor    edx,edx
c0019c80:	5b                   	pop    ebx
c0019c81:	5e                   	pop    esi
c0019c82:	c3                   	ret    
c0019c83:	59                   	pop    ecx
c0019c84:	31 c0                	xor    eax,eax
c0019c86:	31 d2                	xor    edx,edx
c0019c88:	5b                   	pop    ebx
c0019c89:	5e                   	pop    esi
c0019c8a:	c3                   	ret    

c0019c8b <sysSetDiskVolumeLabel(regs*)>:
c0019c8b:	56                   	push   esi
c0019c8c:	53                   	push   ebx
c0019c8d:	53                   	push   ebx
c0019c8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c92:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019c95:	83 f8 19             	cmp    eax,0x19
c0019c98:	77 29                	ja     c0019cc3 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019c9a:	8b 0c 85 80 c3 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3c80]
c0019ca1:	85 c9                	test   ecx,ecx
c0019ca3:	74 1e                	je     c0019cc3 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019ca5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0019ca8:	85 d2                	test   edx,edx
c0019caa:	74 17                	je     c0019cc3 <sysSetDiskVolumeLabel(regs*)+0x38>
c0019cac:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0019cb2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019cb4:	52                   	push   edx
c0019cb5:	50                   	push   eax
c0019cb6:	51                   	push   ecx
c0019cb7:	53                   	push   ebx
c0019cb8:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0019cbb:	83 c4 10             	add    esp,0x10
c0019cbe:	99                   	cdq    
c0019cbf:	59                   	pop    ecx
c0019cc0:	5b                   	pop    ebx
c0019cc1:	5e                   	pop    esi
c0019cc2:	c3                   	ret    
c0019cc3:	59                   	pop    ecx
c0019cc4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019cc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019cce:	5b                   	pop    ebx
c0019ccf:	5e                   	pop    esi
c0019cd0:	c3                   	ret    

c0019cd1 <sysGetDiskVolumeLabel(regs*)>:
c0019cd1:	57                   	push   edi
c0019cd2:	56                   	push   esi
c0019cd3:	53                   	push   ebx
c0019cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019cdb:	83 fa 19             	cmp    edx,0x19
c0019cde:	77 34                	ja     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019ce0:	8b 0c 95 80 c3 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3c80]
c0019ce7:	85 c9                	test   ecx,ecx
c0019ce9:	74 29                	je     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019ceb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019cee:	85 db                	test   ebx,ebx
c0019cf0:	74 22                	je     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019cf2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019cf5:	85 c0                	test   eax,eax
c0019cf7:	74 1b                	je     c0019d14 <sysGetDiskVolumeLabel(regs*)+0x43>
c0019cf9:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019cff:	83 ec 0c             	sub    esp,0xc
c0019d02:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019d04:	50                   	push   eax
c0019d05:	53                   	push   ebx
c0019d06:	52                   	push   edx
c0019d07:	51                   	push   ecx
c0019d08:	56                   	push   esi
c0019d09:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019d0c:	83 c4 20             	add    esp,0x20
c0019d0f:	99                   	cdq    
c0019d10:	5b                   	pop    ebx
c0019d11:	5e                   	pop    esi
c0019d12:	5f                   	pop    edi
c0019d13:	c3                   	ret    
c0019d14:	5b                   	pop    ebx
c0019d15:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019d1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d1f:	5e                   	pop    esi
c0019d20:	5f                   	pop    edi
c0019d21:	c3                   	ret    

c0019d22 <sysShutdown(regs*)>:
c0019d22:	83 ec 0c             	sub    esp,0xc
c0019d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d29:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019d2c:	85 c0                	test   eax,eax
c0019d2e:	74 18                	je     c0019d48 <sysShutdown(regs*)+0x26>
c0019d30:	83 f8 01             	cmp    eax,0x1
c0019d33:	74 38                	je     c0019d6d <sysShutdown(regs*)+0x4b>
c0019d35:	83 f8 02             	cmp    eax,0x2
c0019d38:	74 24                	je     c0019d5e <sysShutdown(regs*)+0x3c>
c0019d3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019d3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019d44:	83 c4 0c             	add    esp,0xc
c0019d47:	c3                   	ret    
c0019d48:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0019d4d:	8b 10                	mov    edx,DWORD PTR [eax]
c0019d4f:	6a 00                	push   0x0
c0019d51:	6a 00                	push   0x0
c0019d53:	6a 00                	push   0x0
c0019d55:	50                   	push   eax
c0019d56:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	eb dc                	jmp    c0019d3a <sysShutdown(regs*)+0x18>
c0019d5e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0019d63:	8b 10                	mov    edx,DWORD PTR [eax]
c0019d65:	6a 00                	push   0x0
c0019d67:	6a 00                	push   0x0
c0019d69:	6a 01                	push   0x1
c0019d6b:	eb e8                	jmp    c0019d55 <sysShutdown(regs*)+0x33>
c0019d6d:	a1 00 c4 02 c0       	mov    eax,ds:0xc002c400
c0019d72:	85 c0                	test   eax,eax
c0019d74:	74 02                	je     c0019d78 <sysShutdown(regs*)+0x56>
c0019d76:	ff d0                	call   eax
c0019d78:	31 c0                	xor    eax,eax
c0019d7a:	31 d2                	xor    edx,edx
c0019d7c:	83 c4 0c             	add    esp,0xc
c0019d7f:	c3                   	ret    

c0019d80 <sysCallRealpath(regs*)>:
c0019d80:	83 ec 0c             	sub    esp,0xc
c0019d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d87:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0019d8a:	85 d2                	test   edx,edx
c0019d8c:	74 07                	je     c0019d95 <sysCallRealpath(regs*)+0x15>
c0019d8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019d91:	85 c0                	test   eax,eax
c0019d93:	75 0b                	jne    c0019da0 <sysCallRealpath(regs*)+0x20>
c0019d95:	b8 01 00 00 00       	mov    eax,0x1
c0019d9a:	31 d2                	xor    edx,edx
c0019d9c:	83 c4 0c             	add    esp,0xc
c0019d9f:	c3                   	ret    
c0019da0:	51                   	push   ecx
c0019da1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019da7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019daa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019db0:	51                   	push   ecx
c0019db1:	52                   	push   edx
c0019db2:	50                   	push   eax
c0019db3:	e8 5a 8c ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c0019db8:	83 c4 10             	add    esp,0x10
c0019dbb:	31 c0                	xor    eax,eax
c0019dbd:	31 d2                	xor    edx,edx
c0019dbf:	83 c4 0c             	add    esp,0xc
c0019dc2:	c3                   	ret    

c0019dc3 <sysCallReadDir(regs*)>:
c0019dc3:	53                   	push   ebx
c0019dc4:	83 ec 18             	sub    esp,0x18
c0019dc7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019dcb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019dce:	83 f8 02             	cmp    eax,0x2
c0019dd1:	76 53                	jbe    c0019e26 <sysCallReadDir(regs*)+0x63>
c0019dd3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019dd6:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019ddc:	77 4f                	ja     c0019e2d <sysCallReadDir(regs*)+0x6a>
c0019dde:	83 ec 0c             	sub    esp,0xc
c0019de1:	50                   	push   eax
c0019de2:	e8 60 77 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019de7:	83 c4 10             	add    esp,0x10
c0019dea:	85 c0                	test   eax,eax
c0019dec:	74 50                	je     c0019e3e <sysCallReadDir(regs*)+0x7b>
c0019dee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019df6:	83 ec 0c             	sub    esp,0xc
c0019df9:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dfb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019dff:	51                   	push   ecx
c0019e00:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019e03:	6a 00                	push   0x0
c0019e05:	68 10 01 00 00       	push   0x110
c0019e0a:	50                   	push   eax
c0019e0b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e0e:	83 c4 20             	add    esp,0x20
c0019e11:	85 c0                	test   eax,eax
c0019e13:	74 38                	je     c0019e4d <sysCallReadDir(regs*)+0x8a>
c0019e15:	83 f8 07             	cmp    eax,0x7
c0019e18:	74 0c                	je     c0019e26 <sysCallReadDir(regs*)+0x63>
c0019e1a:	b8 02 00 00 00       	mov    eax,0x2
c0019e1f:	31 d2                	xor    edx,edx
c0019e21:	83 c4 18             	add    esp,0x18
c0019e24:	5b                   	pop    ebx
c0019e25:	c3                   	ret    
c0019e26:	b8 01 00 00 00       	mov    eax,0x1
c0019e2b:	eb f2                	jmp    c0019e1f <sysCallReadDir(regs*)+0x5c>
c0019e2d:	83 ec 08             	sub    esp,0x8
c0019e30:	52                   	push   edx
c0019e31:	68 24 98 02 c0       	push   0xc0029824
c0019e36:	e8 52 88 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019e3b:	83 c4 10             	add    esp,0x10
c0019e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019e43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019e48:	83 c4 18             	add    esp,0x18
c0019e4b:	5b                   	pop    ebx
c0019e4c:	c3                   	ret    
c0019e4d:	31 c0                	xor    eax,eax
c0019e4f:	eb ce                	jmp    c0019e1f <sysCallReadDir(regs*)+0x5c>

c0019e51 <sysCallIsATTY(regs*)>:
c0019e51:	83 ec 0c             	sub    esp,0xc
c0019e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019e5b:	83 f8 02             	cmp    eax,0x2
c0019e5e:	76 07                	jbe    c0019e67 <sysCallIsATTY(regs*)+0x16>
c0019e60:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019e65:	75 26                	jne    c0019e8d <sysCallIsATTY(regs*)+0x3c>
c0019e67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e6f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019e75:	85 c0                	test   eax,eax
c0019e77:	74 24                	je     c0019e9d <sysCallIsATTY(regs*)+0x4c>
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e7e:	50                   	push   eax
c0019e7f:	ff 12                	call   DWORD PTR [edx]
c0019e81:	31 d2                	xor    edx,edx
c0019e83:	0f b6 c0             	movzx  eax,al
c0019e86:	83 c4 10             	add    esp,0x10
c0019e89:	83 c4 0c             	add    esp,0xc
c0019e8c:	c3                   	ret    
c0019e8d:	83 ec 0c             	sub    esp,0xc
c0019e90:	50                   	push   eax
c0019e91:	e8 b1 76 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019e96:	83 c4 10             	add    esp,0x10
c0019e99:	85 c0                	test   eax,eax
c0019e9b:	75 dc                	jne    c0019e79 <sysCallIsATTY(regs*)+0x28>
c0019e9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ea2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ea7:	83 c4 0c             	add    esp,0xc
c0019eaa:	c3                   	ret    

c0019eab <sysCallSeek(regs*)>:
c0019eab:	53                   	push   ebx
c0019eac:	83 ec 08             	sub    esp,0x8
c0019eaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019eb3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019eb6:	83 f8 02             	cmp    eax,0x2
c0019eb9:	76 4a                	jbe    c0019f05 <sysCallSeek(regs*)+0x5a>
c0019ebb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019ec0:	77 32                	ja     c0019ef4 <sysCallSeek(regs*)+0x49>
c0019ec2:	83 ec 0c             	sub    esp,0xc
c0019ec5:	50                   	push   eax
c0019ec6:	e8 7c 76 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019ecb:	83 c4 0c             	add    esp,0xc
c0019ece:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019ed1:	31 db                	xor    ebx,ebx
c0019ed3:	53                   	push   ebx
c0019ed4:	51                   	push   ecx
c0019ed5:	50                   	push   eax
c0019ed6:	e8 03 8e ff ff       	call   c0012cde <File::seek(unsigned long long)>
c0019edb:	83 c4 10             	add    esp,0x10
c0019ede:	85 c0                	test   eax,eax
c0019ee0:	0f 95 c0             	setne  al
c0019ee3:	31 d2                	xor    edx,edx
c0019ee5:	0f b6 c0             	movzx  eax,al
c0019ee8:	f7 d8                	neg    eax
c0019eea:	83 d2 00             	adc    edx,0x0
c0019eed:	83 c4 08             	add    esp,0x8
c0019ef0:	f7 da                	neg    edx
c0019ef2:	5b                   	pop    ebx
c0019ef3:	c3                   	ret    
c0019ef4:	83 ec 08             	sub    esp,0x8
c0019ef7:	50                   	push   eax
c0019ef8:	68 e0 98 02 c0       	push   0xc00298e0
c0019efd:	e8 8b 87 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019f02:	83 c4 10             	add    esp,0x10
c0019f05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f0f:	83 c4 08             	add    esp,0x8
c0019f12:	5b                   	pop    ebx
c0019f13:	c3                   	ret    

c0019f14 <sysCallTell(regs*)>:
c0019f14:	53                   	push   ebx
c0019f15:	83 ec 08             	sub    esp,0x8
c0019f18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019f1f:	83 f8 02             	cmp    eax,0x2
c0019f22:	76 5e                	jbe    c0019f82 <sysCallTell(regs*)+0x6e>
c0019f24:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019f29:	77 2d                	ja     c0019f58 <sysCallTell(regs*)+0x44>
c0019f2b:	83 ec 0c             	sub    esp,0xc
c0019f2e:	50                   	push   eax
c0019f2f:	e8 13 76 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019f34:	5a                   	pop    edx
c0019f35:	59                   	pop    ecx
c0019f36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019f39:	50                   	push   eax
c0019f3a:	e8 f5 8d ff ff       	call   c0012d34 <File::tell(unsigned long long*)>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	85 c0                	test   eax,eax
c0019f44:	0f 95 c0             	setne  al
c0019f47:	31 d2                	xor    edx,edx
c0019f49:	0f b6 c0             	movzx  eax,al
c0019f4c:	f7 d8                	neg    eax
c0019f4e:	83 d2 00             	adc    edx,0x0
c0019f51:	83 c4 08             	add    esp,0x8
c0019f54:	f7 da                	neg    edx
c0019f56:	5b                   	pop    ebx
c0019f57:	c3                   	ret    
c0019f58:	83 ec 08             	sub    esp,0x8
c0019f5b:	50                   	push   eax
c0019f5c:	68 fa 98 02 c0       	push   0xc00298fa
c0019f61:	e8 27 87 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019f66:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019f69:	83 c4 10             	add    esp,0x10
c0019f6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f79:	31 d2                	xor    edx,edx
c0019f7b:	31 c0                	xor    eax,eax
c0019f7d:	83 c4 08             	add    esp,0x8
c0019f80:	5b                   	pop    ebx
c0019f81:	c3                   	ret    
c0019f82:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019f87:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019f8c:	83 c4 08             	add    esp,0x8
c0019f8f:	5b                   	pop    ebx
c0019f90:	c3                   	ret    

c0019f91 <sysCallSize(regs*)>:
c0019f91:	53                   	push   ebx
c0019f92:	83 ec 18             	sub    esp,0x18
c0019f95:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019f99:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019f9c:	83 f8 02             	cmp    eax,0x2
c0019f9f:	76 64                	jbe    c001a005 <sysCallSize(regs*)+0x74>
c0019fa1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019fa6:	77 33                	ja     c0019fdb <sysCallSize(regs*)+0x4a>
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	50                   	push   eax
c0019fac:	e8 96 75 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c0019fb1:	83 c4 0c             	add    esp,0xc
c0019fb4:	8d 54 24 13          	lea    edx,[esp+0x13]
c0019fb8:	52                   	push   edx
c0019fb9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019fbc:	50                   	push   eax
c0019fbd:	e8 0a 8f ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c0019fc2:	83 c4 10             	add    esp,0x10
c0019fc5:	85 c0                	test   eax,eax
c0019fc7:	0f 95 c0             	setne  al
c0019fca:	31 d2                	xor    edx,edx
c0019fcc:	0f b6 c0             	movzx  eax,al
c0019fcf:	f7 d8                	neg    eax
c0019fd1:	83 d2 00             	adc    edx,0x0
c0019fd4:	83 c4 18             	add    esp,0x18
c0019fd7:	f7 da                	neg    edx
c0019fd9:	5b                   	pop    ebx
c0019fda:	c3                   	ret    
c0019fdb:	83 ec 08             	sub    esp,0x8
c0019fde:	50                   	push   eax
c0019fdf:	68 14 99 02 c0       	push   0xc0029914
c0019fe4:	e8 a4 86 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0019fe9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019ff5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ffc:	31 d2                	xor    edx,edx
c0019ffe:	31 c0                	xor    eax,eax
c001a000:	83 c4 18             	add    esp,0x18
c001a003:	5b                   	pop    ebx
c001a004:	c3                   	ret    
c001a005:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a00a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a00f:	83 c4 18             	add    esp,0x18
c001a012:	5b                   	pop    ebx
c001a013:	c3                   	ret    

c001a014 <sysCallSizeFromFilename(regs*)>:
c001a014:	57                   	push   edi
c001a015:	56                   	push   esi
c001a016:	53                   	push   ebx
c001a017:	83 ec 20             	sub    esp,0x20
c001a01a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a01e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001a021:	83 fb 02             	cmp    ebx,0x2
c001a024:	0f 86 99 00 00 00    	jbe    c001a0c3 <sysCallSizeFromFilename(regs*)+0xaf>
c001a02a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001a030:	77 65                	ja     c001a097 <sysCallSizeFromFilename(regs*)+0x83>
c001a032:	83 ec 0c             	sub    esp,0xc
c001a035:	68 14 01 00 00       	push   0x114
c001a03a:	e8 81 54 ff ff       	call   c000f4c0 <malloc>
c001a03f:	83 c4 0c             	add    esp,0xc
c001a042:	89 c6                	mov    esi,eax
c001a044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a049:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a04c:	53                   	push   ebx
c001a04d:	56                   	push   esi
c001a04e:	e8 69 8b ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a053:	83 c4 0c             	add    esp,0xc
c001a056:	8d 44 24 23          	lea    eax,[esp+0x23]
c001a05a:	50                   	push   eax
c001a05b:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001a05e:	56                   	push   esi
c001a05f:	e8 68 8e ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001a064:	83 c4 10             	add    esp,0x10
c001a067:	85 f6                	test   esi,esi
c001a069:	74 14                	je     c001a07f <sysCallSizeFromFilename(regs*)+0x6b>
c001a06b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a06f:	8b 16                	mov    edx,DWORD PTR [esi]
c001a071:	83 ec 0c             	sub    esp,0xc
c001a074:	56                   	push   esi
c001a075:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a07f:	85 c0                	test   eax,eax
c001a081:	0f 95 c0             	setne  al
c001a084:	31 d2                	xor    edx,edx
c001a086:	0f b6 c0             	movzx  eax,al
c001a089:	f7 d8                	neg    eax
c001a08b:	83 d2 00             	adc    edx,0x0
c001a08e:	83 c4 20             	add    esp,0x20
c001a091:	f7 da                	neg    edx
c001a093:	5b                   	pop    ebx
c001a094:	5e                   	pop    esi
c001a095:	5f                   	pop    edi
c001a096:	c3                   	ret    
c001a097:	83 ec 08             	sub    esp,0x8
c001a09a:	53                   	push   ebx
c001a09b:	68 14 99 02 c0       	push   0xc0029914
c001a0a0:	e8 e8 85 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a0a5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001a0a8:	83 c4 10             	add    esp,0x10
c001a0ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a0b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a0b8:	31 d2                	xor    edx,edx
c001a0ba:	83 c4 20             	add    esp,0x20
c001a0bd:	31 c0                	xor    eax,eax
c001a0bf:	5b                   	pop    ebx
c001a0c0:	5e                   	pop    esi
c001a0c1:	5f                   	pop    edi
c001a0c2:	c3                   	ret    
c001a0c3:	83 c4 20             	add    esp,0x20
c001a0c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a0cb:	5b                   	pop    ebx
c001a0cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a0d1:	5e                   	pop    esi
c001a0d2:	5f                   	pop    edi
c001a0d3:	c3                   	ret    

c001a0d4 <sysCallClose(regs*)>:
c001a0d4:	53                   	push   ebx
c001a0d5:	83 ec 08             	sub    esp,0x8
c001a0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a0df:	83 f8 02             	cmp    eax,0x2
c001a0e2:	76 50                	jbe    c001a134 <sysCallClose(regs*)+0x60>
c001a0e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a0e9:	74 58                	je     c001a143 <sysCallClose(regs*)+0x6f>
c001a0eb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a0f0:	74 60                	je     c001a152 <sysCallClose(regs*)+0x7e>
c001a0f2:	77 2f                	ja     c001a123 <sysCallClose(regs*)+0x4f>
c001a0f4:	83 ec 0c             	sub    esp,0xc
c001a0f7:	50                   	push   eax
c001a0f8:	e8 4a 74 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c001a0fd:	89 c3                	mov    ebx,eax
c001a0ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001a102:	e8 77 8b ff ff       	call   c0012c7e <File::close()>
c001a107:	83 c4 10             	add    esp,0x10
c001a10a:	85 db                	test   ebx,ebx
c001a10c:	74 0c                	je     c001a11a <sysCallClose(regs*)+0x46>
c001a10e:	83 ec 0c             	sub    esp,0xc
c001a111:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a113:	53                   	push   ebx
c001a114:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a117:	83 c4 10             	add    esp,0x10
c001a11a:	31 c0                	xor    eax,eax
c001a11c:	31 d2                	xor    edx,edx
c001a11e:	83 c4 08             	add    esp,0x8
c001a121:	5b                   	pop    ebx
c001a122:	c3                   	ret    
c001a123:	83 ec 08             	sub    esp,0x8
c001a126:	50                   	push   eax
c001a127:	68 48 98 02 c0       	push   0xc0029848
c001a12c:	e8 5c 85 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a131:	83 c4 10             	add    esp,0x10
c001a134:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a139:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a13e:	83 c4 08             	add    esp,0x8
c001a141:	5b                   	pop    ebx
c001a142:	c3                   	ret    
c001a143:	83 ec 0c             	sub    esp,0xc
c001a146:	68 2f 99 02 c0       	push   0xc002992f
c001a14b:	e8 3d 85 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a150:	eb c5                	jmp    c001a117 <sysCallClose(regs*)+0x43>
c001a152:	83 ec 0c             	sub    esp,0xc
c001a155:	68 3d 99 02 c0       	push   0xc002993d
c001a15a:	eb ef                	jmp    c001a14b <sysCallClose(regs*)+0x77>

c001a15c <sysCallOpenDir(regs*)>:
c001a15c:	56                   	push   esi
c001a15d:	53                   	push   ebx
c001a15e:	53                   	push   ebx
c001a15f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a163:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001a166:	85 f6                	test   esi,esi
c001a168:	74 59                	je     c001a1c3 <sysCallOpenDir(regs*)+0x67>
c001a16a:	83 ec 0c             	sub    esp,0xc
c001a16d:	68 14 01 00 00       	push   0x114
c001a172:	e8 49 53 ff ff       	call   c000f4c0 <malloc>
c001a177:	83 c4 0c             	add    esp,0xc
c001a17a:	89 c6                	mov    esi,eax
c001a17c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a181:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a184:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a187:	56                   	push   esi
c001a188:	e8 05 8f ff ff       	call   c0013092 <Directory::Directory(char const*, Process*)>
c001a18d:	83 c4 10             	add    esp,0x10
c001a190:	85 f6                	test   esi,esi
c001a192:	74 2f                	je     c001a1c3 <sysCallOpenDir(regs*)+0x67>
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	56                   	push   esi
c001a198:	e8 59 8f ff ff       	call   c00130f6 <Directory::open()>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	85 c0                	test   eax,eax
c001a1a2:	75 1f                	jne    c001a1c3 <sysCallOpenDir(regs*)+0x67>
c001a1a4:	83 ec 0c             	sub    esp,0xc
c001a1a7:	56                   	push   esi
c001a1a8:	e8 a5 70 ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a1ad:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a1b0:	83 c4 10             	add    esp,0x10
c001a1b3:	89 02                	mov    DWORD PTR [edx],eax
c001a1b5:	c1 f8 1f             	sar    eax,0x1f
c001a1b8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a1bb:	31 c0                	xor    eax,eax
c001a1bd:	59                   	pop    ecx
c001a1be:	31 d2                	xor    edx,edx
c001a1c0:	5b                   	pop    ebx
c001a1c1:	5e                   	pop    esi
c001a1c2:	c3                   	ret    
c001a1c3:	59                   	pop    ecx
c001a1c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a1c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a1ce:	5b                   	pop    ebx
c001a1cf:	5e                   	pop    esi
c001a1d0:	c3                   	ret    

c001a1d1 <sysCallCloseDir(regs*)>:
c001a1d1:	53                   	push   ebx
c001a1d2:	83 ec 08             	sub    esp,0x8
c001a1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a1dc:	83 f8 02             	cmp    eax,0x2
c001a1df:	76 47                	jbe    c001a228 <sysCallCloseDir(regs*)+0x57>
c001a1e1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a1e6:	77 2f                	ja     c001a217 <sysCallCloseDir(regs*)+0x46>
c001a1e8:	83 ec 0c             	sub    esp,0xc
c001a1eb:	50                   	push   eax
c001a1ec:	e8 56 73 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c001a1f1:	89 c3                	mov    ebx,eax
c001a1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1f6:	e8 57 8f ff ff       	call   c0013152 <Directory::close()>
c001a1fb:	83 c4 10             	add    esp,0x10
c001a1fe:	85 db                	test   ebx,ebx
c001a200:	74 0c                	je     c001a20e <sysCallCloseDir(regs*)+0x3d>
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a207:	53                   	push   ebx
c001a208:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	31 c0                	xor    eax,eax
c001a210:	31 d2                	xor    edx,edx
c001a212:	83 c4 08             	add    esp,0x8
c001a215:	5b                   	pop    ebx
c001a216:	c3                   	ret    
c001a217:	83 ec 08             	sub    esp,0x8
c001a21a:	50                   	push   eax
c001a21b:	68 70 98 02 c0       	push   0xc0029870
c001a220:	e8 68 84 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a225:	83 c4 10             	add    esp,0x10
c001a228:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a22d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a232:	83 c4 08             	add    esp,0x8
c001a235:	5b                   	pop    ebx
c001a236:	c3                   	ret    

c001a237 <sysCallMakeDir(regs*)>:
c001a237:	56                   	push   esi
c001a238:	53                   	push   ebx
c001a239:	83 ec 10             	sub    esp,0x10
c001a23c:	68 14 01 00 00       	push   0x114
c001a241:	e8 7a 52 ff ff       	call   c000f4c0 <malloc>
c001a246:	83 c4 0c             	add    esp,0xc
c001a249:	89 c3                	mov    ebx,eax
c001a24b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a250:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a253:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a257:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a25a:	53                   	push   ebx
c001a25b:	e8 32 8e ff ff       	call   c0013092 <Directory::Directory(char const*, Process*)>
c001a260:	83 c4 10             	add    esp,0x10
c001a263:	85 db                	test   ebx,ebx
c001a265:	74 32                	je     c001a299 <sysCallMakeDir(regs*)+0x62>
c001a267:	83 ec 0c             	sub    esp,0xc
c001a26a:	53                   	push   ebx
c001a26b:	e8 66 90 ff ff       	call   c00132d6 <Directory::create()>
c001a270:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a273:	89 c6                	mov    esi,eax
c001a275:	e8 d8 8e ff ff       	call   c0013152 <Directory::close()>
c001a27a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a27c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a27f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a282:	83 c4 10             	add    esp,0x10
c001a285:	31 c0                	xor    eax,eax
c001a287:	59                   	pop    ecx
c001a288:	85 f6                	test   esi,esi
c001a28a:	5b                   	pop    ebx
c001a28b:	0f 95 c0             	setne  al
c001a28e:	5e                   	pop    esi
c001a28f:	31 d2                	xor    edx,edx
c001a291:	f7 d8                	neg    eax
c001a293:	83 d2 00             	adc    edx,0x0
c001a296:	f7 da                	neg    edx
c001a298:	c3                   	ret    
c001a299:	59                   	pop    ecx
c001a29a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a29f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a2a4:	5b                   	pop    ebx
c001a2a5:	5e                   	pop    esi
c001a2a6:	c3                   	ret    

c001a2a7 <sysCallWait(regs*)>:
c001a2a7:	83 ec 10             	sub    esp,0x10
c001a2aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2ae:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a2b1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a2b4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a2b7:	e8 97 23 00 00       	call   c001c653 <waitTask(int, int*, int)>
c001a2bc:	83 c4 1c             	add    esp,0x1c
c001a2bf:	99                   	cdq    
c001a2c0:	c3                   	ret    

c001a2c1 <sysCallNotImpl(regs*)>:
c001a2c1:	83 ec 18             	sub    esp,0x18
c001a2c4:	68 4b 99 02 c0       	push   0xc002994b
c001a2c9:	e8 89 ee ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001a2ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a2d3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a2d8:	83 c4 1c             	add    esp,0x1c
c001a2db:	c3                   	ret    

c001a2dc <sysPanic(regs*)>:
c001a2dc:	83 ec 18             	sub    esp,0x18
c001a2df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2e3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001a2e6:	e8 6c ee ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001a2eb:	c7 04 24 65 99 02 c0 	mov    DWORD PTR [esp],0xc0029965
c001a2f2:	e8 60 ee ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001a2f7:	b8 01 00 00 00       	mov    eax,0x1
c001a2fc:	31 d2                	xor    edx,edx
c001a2fe:	83 c4 1c             	add    esp,0x1c
c001a301:	c3                   	ret    

c001a302 <sysCallRmdir(regs*)>:
c001a302:	56                   	push   esi
c001a303:	53                   	push   ebx
c001a304:	83 ec 20             	sub    esp,0x20
c001a307:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a30b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a30e:	68 14 01 00 00       	push   0x114
c001a313:	e8 a8 51 ff ff       	call   c000f4c0 <malloc>
c001a318:	83 c4 0c             	add    esp,0xc
c001a31b:	89 c3                	mov    ebx,eax
c001a31d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a322:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a325:	56                   	push   esi
c001a326:	53                   	push   ebx
c001a327:	e8 90 88 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a32c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a32f:	e8 64 8a ff ff       	call   c0012d98 <File::unlink()>
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	85 db                	test   ebx,ebx
c001a339:	74 14                	je     c001a34f <sysCallRmdir(regs*)+0x4d>
c001a33b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a33f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a341:	83 ec 0c             	sub    esp,0xc
c001a344:	53                   	push   ebx
c001a345:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a34f:	85 c0                	test   eax,eax
c001a351:	0f 95 c0             	setne  al
c001a354:	31 d2                	xor    edx,edx
c001a356:	0f b6 c0             	movzx  eax,al
c001a359:	f7 d8                	neg    eax
c001a35b:	83 d2 00             	adc    edx,0x0
c001a35e:	83 c4 14             	add    esp,0x14
c001a361:	f7 da                	neg    edx
c001a363:	5b                   	pop    ebx
c001a364:	5e                   	pop    esi
c001a365:	c3                   	ret    

c001a366 <sysCallUnlink(regs*)>:
c001a366:	56                   	push   esi
c001a367:	53                   	push   ebx
c001a368:	83 ec 20             	sub    esp,0x20
c001a36b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a36f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001a372:	68 14 01 00 00       	push   0x114
c001a377:	e8 44 51 ff ff       	call   c000f4c0 <malloc>
c001a37c:	83 c4 0c             	add    esp,0xc
c001a37f:	89 c3                	mov    ebx,eax
c001a381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a386:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a389:	56                   	push   esi
c001a38a:	53                   	push   ebx
c001a38b:	e8 2c 88 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a390:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a393:	e8 00 8a ff ff       	call   c0012d98 <File::unlink()>
c001a398:	83 c4 10             	add    esp,0x10
c001a39b:	85 db                	test   ebx,ebx
c001a39d:	74 14                	je     c001a3b3 <sysCallUnlink(regs*)+0x4d>
c001a39f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3a5:	83 ec 0c             	sub    esp,0xc
c001a3a8:	53                   	push   ebx
c001a3a9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a3ac:	83 c4 10             	add    esp,0x10
c001a3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3b3:	85 c0                	test   eax,eax
c001a3b5:	0f 95 c0             	setne  al
c001a3b8:	31 d2                	xor    edx,edx
c001a3ba:	0f b6 c0             	movzx  eax,al
c001a3bd:	f7 d8                	neg    eax
c001a3bf:	83 d2 00             	adc    edx,0x0
c001a3c2:	83 c4 14             	add    esp,0x14
c001a3c5:	f7 da                	neg    edx
c001a3c7:	5b                   	pop    ebx
c001a3c8:	5e                   	pop    esi
c001a3c9:	c3                   	ret    

c001a3ca <sysCallGetArgv(regs*)>:
c001a3ca:	83 ec 0c             	sub    esp,0xc
c001a3cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a3d1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a3d4:	85 c0                	test   eax,eax
c001a3d6:	78 2b                	js     c001a403 <sysCallGetArgv(regs*)+0x39>
c001a3d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a3de:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a3e1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001a3e7:	7d 1a                	jge    c001a403 <sysCallGetArgv(regs*)+0x39>
c001a3e9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001a3f0:	85 c0                	test   eax,eax
c001a3f2:	74 17                	je     c001a40b <sysCallGetArgv(regs*)+0x41>
c001a3f4:	83 ec 08             	sub    esp,0x8
c001a3f7:	50                   	push   eax
c001a3f8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001a3fb:	e8 1b 63 fe ff       	call   c000071b <strcpy>
c001a400:	83 c4 10             	add    esp,0x10
c001a403:	31 c0                	xor    eax,eax
c001a405:	31 d2                	xor    edx,edx
c001a407:	83 c4 0c             	add    esp,0xc
c001a40a:	c3                   	ret    
c001a40b:	b8 01 00 00 00       	mov    eax,0x1
c001a410:	31 d2                	xor    edx,edx
c001a412:	83 c4 0c             	add    esp,0xc
c001a415:	c3                   	ret    

c001a416 <sysCallTTYName(regs*)>:
c001a416:	56                   	push   esi
c001a417:	53                   	push   ebx
c001a418:	53                   	push   ebx
c001a419:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a41d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a420:	85 c0                	test   eax,eax
c001a422:	74 5f                	je     c001a483 <sysCallTTYName(regs*)+0x6d>
c001a424:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a427:	83 f8 02             	cmp    eax,0x2
c001a42a:	77 3e                	ja     c001a46a <sysCallTTYName(regs*)+0x54>
c001a42c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a431:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a434:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001a43a:	85 db                	test   ebx,ebx
c001a43c:	74 45                	je     c001a483 <sysCallTTYName(regs*)+0x6d>
c001a43e:	83 ec 0c             	sub    esp,0xc
c001a441:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a443:	53                   	push   ebx
c001a444:	ff 10                	call   DWORD PTR [eax]
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	84 c0                	test   al,al
c001a44b:	74 41                	je     c001a48e <sysCallTTYName(regs*)+0x78>
c001a44d:	83 ec 08             	sub    esp,0x8
c001a450:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001a456:	53                   	push   ebx
c001a457:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a45a:	e8 bc 62 fe ff       	call   c000071b <strcpy>
c001a45f:	83 c4 10             	add    esp,0x10
c001a462:	31 c0                	xor    eax,eax
c001a464:	59                   	pop    ecx
c001a465:	31 d2                	xor    edx,edx
c001a467:	5b                   	pop    ebx
c001a468:	5e                   	pop    esi
c001a469:	c3                   	ret    
c001a46a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a46f:	74 bb                	je     c001a42c <sysCallTTYName(regs*)+0x16>
c001a471:	83 ec 0c             	sub    esp,0xc
c001a474:	50                   	push   eax
c001a475:	e8 cd 70 ff ff       	call   c0011547 <getFromFileDescriptor(int)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	89 c3                	mov    ebx,eax
c001a47f:	85 db                	test   ebx,ebx
c001a481:	75 bb                	jne    c001a43e <sysCallTTYName(regs*)+0x28>
c001a483:	59                   	pop    ecx
c001a484:	b8 01 00 00 00       	mov    eax,0x1
c001a489:	31 d2                	xor    edx,edx
c001a48b:	5b                   	pop    ebx
c001a48c:	5e                   	pop    esi
c001a48d:	c3                   	ret    
c001a48e:	59                   	pop    ecx
c001a48f:	b8 02 00 00 00       	mov    eax,0x2
c001a494:	31 d2                	xor    edx,edx
c001a496:	5b                   	pop    ebx
c001a497:	5e                   	pop    esi
c001a498:	c3                   	ret    

c001a499 <sysCallGetEnv(regs*)>:
c001a499:	83 ec 0c             	sub    esp,0xc
c001a49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001a4a3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a4a6:	85 c9                	test   ecx,ecx
c001a4a8:	75 22                	jne    c001a4cc <sysCallGetEnv(regs*)+0x33>
c001a4aa:	85 d2                	test   edx,edx
c001a4ac:	74 08                	je     c001a4b6 <sysCallGetEnv(regs*)+0x1d>
c001a4ae:	31 c0                	xor    eax,eax
c001a4b0:	31 d2                	xor    edx,edx
c001a4b2:	83 c4 0c             	add    esp,0xc
c001a4b5:	c3                   	ret    
c001a4b6:	83 ec 0c             	sub    esp,0xc
c001a4b9:	68 94 98 02 c0       	push   0xc0029894
c001a4be:	e8 d6 61 fe ff       	call   c0000699 <strlen>
c001a4c3:	83 c4 10             	add    esp,0x10
c001a4c6:	31 d2                	xor    edx,edx
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	c3                   	ret    
c001a4cc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a4cf:	85 d2                	test   edx,edx
c001a4d1:	74 05                	je     c001a4d8 <sysCallGetEnv(regs*)+0x3f>
c001a4d3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a4d6:	eb d6                	jmp    c001a4ae <sysCallGetEnv(regs*)+0x15>
c001a4d8:	83 ec 08             	sub    esp,0x8
c001a4db:	68 94 98 02 c0       	push   0xc0029894
c001a4e0:	50                   	push   eax
c001a4e1:	e8 35 62 fe ff       	call   c000071b <strcpy>
c001a4e6:	83 c4 10             	add    esp,0x10
c001a4e9:	eb c3                	jmp    c001a4ae <sysCallGetEnv(regs*)+0x15>

c001a4eb <sysCallUSleep(regs*)>:
c001a4eb:	83 ec 14             	sub    esp,0x14
c001a4ee:	b8 e8 03 00 00       	mov    eax,0x3e8
c001a4f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a4f7:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001a4fe:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001a501:	01 ca                	add    edx,ecx
c001a503:	52                   	push   edx
c001a504:	50                   	push   eax
c001a505:	e8 e2 21 00 00       	call   c001c6ec <nanoSleep(unsigned long long)>
c001a50a:	31 c0                	xor    eax,eax
c001a50c:	31 d2                	xor    edx,edx
c001a50e:	83 c4 1c             	add    esp,0x1c
c001a511:	c3                   	ret    

c001a512 <sysCallSpawn(regs*)>:
c001a512:	56                   	push   esi
c001a513:	53                   	push   ebx
c001a514:	53                   	push   ebx
c001a515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a519:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001a51c:	85 f6                	test   esi,esi
c001a51e:	75 08                	jne    c001a528 <sysCallSpawn(regs*)+0x16>
c001a520:	59                   	pop    ecx
c001a521:	31 c0                	xor    eax,eax
c001a523:	31 d2                	xor    edx,edx
c001a525:	5b                   	pop    ebx
c001a526:	5e                   	pop    esi
c001a527:	c3                   	ret    
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	68 3b 07 00 00       	push   0x73b
c001a530:	e8 8b 4f ff ff       	call   c000f4c0 <malloc>
c001a535:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001a538:	89 c6                	mov    esi,eax
c001a53a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a53f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a542:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a545:	56                   	push   esi
c001a546:	e8 d9 18 00 00       	call   c001be24 <Process::Process(char const*, Process*, char**)>
c001a54b:	83 c4 20             	add    esp,0x20
c001a54e:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c001a555:	75 c9                	jne    c001a520 <sysCallSpawn(regs*)+0xe>
c001a557:	83 ec 0c             	sub    esp,0xc
c001a55a:	56                   	push   esi
c001a55b:	e8 52 1e 00 00       	call   c001c3b2 <Process::createUserThread()>
c001a560:	8b 06                	mov    eax,DWORD PTR [esi]
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	99                   	cdq    
c001a566:	59                   	pop    ecx
c001a567:	5b                   	pop    ebx
c001a568:	5e                   	pop    esi
c001a569:	c3                   	ret    

c001a56a <sysAppSettings(regs*)>:
c001a56a:	53                   	push   ebx
c001a56b:	83 ec 08             	sub    esp,0x8
c001a56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a572:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a575:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001a57b:	25 e0 1f 00 00       	and    eax,0x1fe0
c001a580:	66 3d c0 09          	cmp    ax,0x9c0
c001a584:	75 2f                	jne    c001a5b5 <sysAppSettings(regs*)+0x4b>
c001a586:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001a58c:	83 e0 1f             	and    eax,0x1f
c001a58f:	3c 01                	cmp    al,0x1
c001a591:	74 2e                	je     c001a5c1 <sysAppSettings(regs*)+0x57>
c001a593:	3c 07                	cmp    al,0x7
c001a595:	0f 84 bd 00 00 00    	je     c001a658 <sysAppSettings(regs*)+0xee>
c001a59b:	84 c0                	test   al,al
c001a59d:	0f 84 dc 00 00 00    	je     c001a67f <sysAppSettings(regs*)+0x115>
c001a5a3:	3c 08                	cmp    al,0x8
c001a5a5:	74 6d                	je     c001a614 <sysAppSettings(regs*)+0xaa>
c001a5a7:	0f b6 c0             	movzx  eax,al
c001a5aa:	83 c4 08             	add    esp,0x8
c001a5ad:	05 e8 03 00 00       	add    eax,0x3e8
c001a5b2:	5b                   	pop    ebx
c001a5b3:	99                   	cdq    
c001a5b4:	c3                   	ret    
c001a5b5:	b8 01 00 00 00       	mov    eax,0x1
c001a5ba:	31 d2                	xor    edx,edx
c001a5bc:	83 c4 08             	add    esp,0x8
c001a5bf:	5b                   	pop    ebx
c001a5c0:	c3                   	ret    
c001a5c1:	51                   	push   ecx
c001a5c2:	68 00 01 00 00       	push   0x100
c001a5c7:	6a 00                	push   0x0
c001a5c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5ce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5d1:	83 c0 0c             	add    eax,0xc
c001a5d4:	50                   	push   eax
c001a5d5:	e8 a2 60 fe ff       	call   c000067c <memset>
c001a5da:	83 c4 0c             	add    esp,0xc
c001a5dd:	68 ff 00 00 00       	push   0xff
c001a5e2:	53                   	push   ebx
c001a5e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5eb:	83 c0 0c             	add    eax,0xc
c001a5ee:	50                   	push   eax
c001a5ef:	e8 52 60 fe ff       	call   c0000646 <memcpy>
c001a5f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5f9:	5b                   	pop    ebx
c001a5fa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5fd:	5a                   	pop    edx
c001a5fe:	8d 50 0c             	lea    edx,[eax+0xc]
c001a601:	52                   	push   edx
c001a602:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a608:	e8 b5 60 ff ff       	call   c00106c2 <VgaText::setTitle(char*)>
c001a60d:	83 c4 10             	add    esp,0x10
c001a610:	31 c0                	xor    eax,eax
c001a612:	eb a6                	jmp    c001a5ba <sysAppSettings(regs*)+0x50>
c001a614:	83 ec 08             	sub    esp,0x8
c001a617:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a61d:	83 e0 0f             	and    eax,0xf
c001a620:	50                   	push   eax
c001a621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a629:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a62f:	e8 7e 60 ff ff       	call   c00106b2 <VgaText::setTitleColour(VgaColour)>
c001a634:	58                   	pop    eax
c001a635:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001a63b:	5a                   	pop    edx
c001a63c:	c1 e8 04             	shr    eax,0x4
c001a63f:	83 e0 0f             	and    eax,0xf
c001a642:	50                   	push   eax
c001a643:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a648:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a64b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a651:	e8 4c 60 ff ff       	call   c00106a2 <VgaText::setTitleTextColour(VgaColour)>
c001a656:	eb b5                	jmp    c001a60d <sysAppSettings(regs*)+0xa3>
c001a658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a65d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a660:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001a666:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001a66c:	c0 e8 06             	shr    al,0x6
c001a66f:	83 e0 01             	and    eax,0x1
c001a672:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001a678:	31 c0                	xor    eax,eax
c001a67a:	e9 3b ff ff ff       	jmp    c001a5ba <sysAppSettings(regs*)+0x50>
c001a67f:	b8 02 00 00 00       	mov    eax,0x2
c001a684:	e9 31 ff ff ff       	jmp    c001a5ba <sysAppSettings(regs*)+0x50>

c001a689 <sysSetFatAttrib(regs*)>:
c001a689:	57                   	push   edi
c001a68a:	56                   	push   esi
c001a68b:	53                   	push   ebx
c001a68c:	83 ec 1c             	sub    esp,0x1c
c001a68f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a693:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a696:	68 14 01 00 00       	push   0x114
c001a69b:	e8 20 4e ff ff       	call   c000f4c0 <malloc>
c001a6a0:	83 c4 0c             	add    esp,0xc
c001a6a3:	89 c3                	mov    ebx,eax
c001a6a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6aa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a6ad:	57                   	push   edi
c001a6ae:	53                   	push   ebx
c001a6af:	e8 08 85 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a6b4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a6b7:	83 c4 0c             	add    esp,0xc
c001a6ba:	0f b6 d4             	movzx  edx,ah
c001a6bd:	0f b6 c0             	movzx  eax,al
c001a6c0:	52                   	push   edx
c001a6c1:	50                   	push   eax
c001a6c2:	53                   	push   ebx
c001a6c3:	e8 6a 87 ff ff       	call   c0012e32 <File::chfatattr(unsigned char, unsigned char)>
c001a6c8:	83 c4 10             	add    esp,0x10
c001a6cb:	85 db                	test   ebx,ebx
c001a6cd:	74 14                	je     c001a6e3 <sysSetFatAttrib(regs*)+0x5a>
c001a6cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6d3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a6d5:	83 ec 0c             	sub    esp,0xc
c001a6d8:	53                   	push   ebx
c001a6d9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001a6dc:	83 c4 10             	add    esp,0x10
c001a6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6e3:	85 c0                	test   eax,eax
c001a6e5:	0f 95 c0             	setne  al
c001a6e8:	31 d2                	xor    edx,edx
c001a6ea:	0f b6 c0             	movzx  eax,al
c001a6ed:	f7 d8                	neg    eax
c001a6ef:	83 d2 00             	adc    edx,0x0
c001a6f2:	83 c4 10             	add    esp,0x10
c001a6f5:	f7 da                	neg    edx
c001a6f7:	5b                   	pop    ebx
c001a6f8:	5e                   	pop    esi
c001a6f9:	5f                   	pop    edi
c001a6fa:	c3                   	ret    

c001a6fb <sysPipe(regs*)>:
c001a6fb:	57                   	push   edi
c001a6fc:	56                   	push   esi
c001a6fd:	53                   	push   ebx
c001a6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a702:	83 ec 0c             	sub    esp,0xc
c001a705:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001a708:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001a70b:	6a 20                	push   0x20
c001a70d:	e8 ae 4d ff ff       	call   c000f4c0 <malloc>
c001a712:	89 c3                	mov    ebx,eax
c001a714:	58                   	pop    eax
c001a715:	5a                   	pop    edx
c001a716:	68 00 50 00 00       	push   0x5000
c001a71b:	53                   	push   ebx
c001a71c:	e8 df 58 ff ff       	call   c0010000 <Pipe::Pipe(int)>
c001a721:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a724:	e8 29 6b ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a729:	89 07                	mov    DWORD PTR [edi],eax
c001a72b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a72e:	e8 1f 6b ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a733:	83 c4 10             	add    esp,0x10
c001a736:	89 06                	mov    DWORD PTR [esi],eax
c001a738:	31 d2                	xor    edx,edx
c001a73a:	5b                   	pop    ebx
c001a73b:	31 c0                	xor    eax,eax
c001a73d:	5e                   	pop    esi
c001a73e:	5f                   	pop    edi
c001a73f:	c3                   	ret    

c001a740 <sysGetUnixTime(regs*)>:
c001a740:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001a745:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a74b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a74f:	e9 44 8e ff ff       	jmp    c0013598 <Clock::timeInSecondsLocal()>

c001a754 <string_ends_with(char const*, char const*)>:
c001a754:	57                   	push   edi
c001a755:	56                   	push   esi
c001a756:	53                   	push   ebx
c001a757:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a75b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a75f:	83 ec 0c             	sub    esp,0xc
c001a762:	53                   	push   ebx
c001a763:	e8 31 5f fe ff       	call   c0000699 <strlen>
c001a768:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a76b:	89 c6                	mov    esi,eax
c001a76d:	e8 27 5f fe ff       	call   c0000699 <strlen>
c001a772:	83 c4 10             	add    esp,0x10
c001a775:	39 c6                	cmp    esi,eax
c001a777:	7d 06                	jge    c001a77f <string_ends_with(char const*, char const*)+0x2b>
c001a779:	5b                   	pop    ebx
c001a77a:	31 c0                	xor    eax,eax
c001a77c:	5e                   	pop    esi
c001a77d:	5f                   	pop    edi
c001a77e:	c3                   	ret    
c001a77f:	83 ec 08             	sub    esp,0x8
c001a782:	29 c6                	sub    esi,eax
c001a784:	57                   	push   edi
c001a785:	01 f3                	add    ebx,esi
c001a787:	53                   	push   ebx
c001a788:	e8 df 5f fe ff       	call   c000076c <strcmp>
c001a78d:	83 c4 10             	add    esp,0x10
c001a790:	85 c0                	test   eax,eax
c001a792:	5b                   	pop    ebx
c001a793:	0f 94 c0             	sete   al
c001a796:	5e                   	pop    esi
c001a797:	0f b6 c0             	movzx  eax,al
c001a79a:	5f                   	pop    edi
c001a79b:	c3                   	ret    

c001a79c <sysCallOpen(regs*)>:
c001a79c:	56                   	push   esi
c001a79d:	53                   	push   ebx
c001a79e:	81 ec 04 01 00 00    	sub    esp,0x104
c001a7a4:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001a7ab:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001a7ae:	85 c9                	test   ecx,ecx
c001a7b0:	0f 84 b3 00 00 00    	je     c001a869 <sysCallOpen(regs*)+0xcd>
c001a7b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001a7b9:	85 c0                	test   eax,eax
c001a7bb:	0f 84 a8 00 00 00    	je     c001a869 <sysCallOpen(regs*)+0xcd>
c001a7c1:	52                   	push   edx
c001a7c2:	68 74 99 02 c0       	push   0xc0029974
c001a7c7:	50                   	push   eax
c001a7c8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a7cc:	56                   	push   esi
c001a7cd:	e8 40 82 ff ff       	call   c0012a12 <standardiseFiles(char*, char const*, char const*)>
c001a7d2:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7d5:	e8 bf 5e fe ff       	call   c0000699 <strlen>
c001a7da:	83 c4 10             	add    esp,0x10
c001a7dd:	48                   	dec    eax
c001a7de:	74 1d                	je     c001a7fd <sysCallOpen(regs*)+0x61>
c001a7e0:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001a7e3:	eb 0f                	jmp    c001a7f4 <sysCallOpen(regs*)+0x58>
c001a7e5:	80 fa 3a             	cmp    dl,0x3a
c001a7e8:	74 0f                	je     c001a7f9 <sysCallOpen(regs*)+0x5d>
c001a7ea:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a7ee:	48                   	dec    eax
c001a7ef:	74 0c                	je     c001a7fd <sysCallOpen(regs*)+0x61>
c001a7f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001a7f4:	80 fa 2e             	cmp    dl,0x2e
c001a7f7:	75 ec                	jne    c001a7e5 <sysCallOpen(regs*)+0x49>
c001a7f9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001a7fd:	83 ec 08             	sub    esp,0x8
c001a800:	68 78 99 02 c0       	push   0xc0029978
c001a805:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a808:	e8 47 ff ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a80d:	83 c4 10             	add    esp,0x10
c001a810:	85 c0                	test   eax,eax
c001a812:	75 17                	jne    c001a82b <sysCallOpen(regs*)+0x8f>
c001a814:	83 ec 08             	sub    esp,0x8
c001a817:	68 99 99 02 c0       	push   0xc0029999
c001a81c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a81f:	e8 30 ff ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a824:	83 c4 10             	add    esp,0x10
c001a827:	85 c0                	test   eax,eax
c001a829:	74 51                	je     c001a87c <sysCallOpen(regs*)+0xe0>
c001a82b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a82e:	83 ec 08             	sub    esp,0x8
c001a831:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a837:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a83e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a841:	ff 30                	push   DWORD PTR [eax]
c001a843:	68 7d 99 02 c0       	push   0xc002997d
c001a848:	e8 40 7e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a84d:	c7 04 24 8c 99 02 c0 	mov    DWORD PTR [esp],0xc002998c
c001a854:	e8 34 7e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001a859:	83 c4 10             	add    esp,0x10
c001a85c:	81 c4 04 01 00 00    	add    esp,0x104
c001a862:	31 c0                	xor    eax,eax
c001a864:	31 d2                	xor    edx,edx
c001a866:	5b                   	pop    ebx
c001a867:	5e                   	pop    esi
c001a868:	c3                   	ret    
c001a869:	81 c4 04 01 00 00    	add    esp,0x104
c001a86f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a874:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a879:	5b                   	pop    ebx
c001a87a:	5e                   	pop    esi
c001a87b:	c3                   	ret    
c001a87c:	83 ec 08             	sub    esp,0x8
c001a87f:	68 79 99 02 c0       	push   0xc0029979
c001a884:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a887:	e8 e0 5e fe ff       	call   c000076c <strcmp>
c001a88c:	83 c4 10             	add    esp,0x10
c001a88f:	85 c0                	test   eax,eax
c001a891:	74 98                	je     c001a82b <sysCallOpen(regs*)+0x8f>
c001a893:	83 ec 08             	sub    esp,0x8
c001a896:	68 78 99 02 c0       	push   0xc0029978
c001a89b:	56                   	push   esi
c001a89c:	e8 b3 fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a8a1:	83 c4 10             	add    esp,0x10
c001a8a4:	85 c0                	test   eax,eax
c001a8a6:	75 83                	jne    c001a82b <sysCallOpen(regs*)+0x8f>
c001a8a8:	83 ec 08             	sub    esp,0x8
c001a8ab:	68 9e 99 02 c0       	push   0xc002999e
c001a8b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8b3:	e8 9c fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a8b8:	83 c4 10             	add    esp,0x10
c001a8bb:	85 c0                	test   eax,eax
c001a8bd:	0f 85 d9 00 00 00    	jne    c001a99c <sysCallOpen(regs*)+0x200>
c001a8c3:	83 ec 08             	sub    esp,0x8
c001a8c6:	68 a3 99 02 c0       	push   0xc00299a3
c001a8cb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8ce:	e8 81 fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a8d3:	83 c4 10             	add    esp,0x10
c001a8d6:	85 c0                	test   eax,eax
c001a8d8:	0f 85 be 00 00 00    	jne    c001a99c <sysCallOpen(regs*)+0x200>
c001a8de:	83 ec 08             	sub    esp,0x8
c001a8e1:	68 9f 99 02 c0       	push   0xc002999f
c001a8e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8e9:	e8 7e 5e fe ff       	call   c000076c <strcmp>
c001a8ee:	83 c4 10             	add    esp,0x10
c001a8f1:	85 c0                	test   eax,eax
c001a8f3:	0f 84 a3 00 00 00    	je     c001a99c <sysCallOpen(regs*)+0x200>
c001a8f9:	83 ec 08             	sub    esp,0x8
c001a8fc:	68 9e 99 02 c0       	push   0xc002999e
c001a901:	56                   	push   esi
c001a902:	e8 4d fe ff ff       	call   c001a754 <string_ends_with(char const*, char const*)>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	85 c0                	test   eax,eax
c001a90c:	0f 85 8a 00 00 00    	jne    c001a99c <sysCallOpen(regs*)+0x200>
c001a912:	83 ec 0c             	sub    esp,0xc
c001a915:	68 14 01 00 00       	push   0x114
c001a91a:	e8 a1 4b ff ff       	call   c000f4c0 <malloc>
c001a91f:	83 c4 0c             	add    esp,0xc
c001a922:	89 c6                	mov    esi,eax
c001a924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a929:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a92c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a92f:	56                   	push   esi
c001a930:	e8 87 82 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001a935:	83 c4 10             	add    esp,0x10
c001a938:	85 f6                	test   esi,esi
c001a93a:	0f 84 29 ff ff ff    	je     c001a869 <sysCallOpen(regs*)+0xcd>
c001a940:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a943:	0f b6 c2             	movzx  eax,dl
c001a946:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a949:	89 d0                	mov    eax,edx
c001a94b:	83 e0 01             	and    eax,0x1
c001a94e:	f6 c2 02             	test   dl,0x2
c001a951:	74 03                	je     c001a956 <sysCallOpen(regs*)+0x1ba>
c001a953:	83 c8 02             	or     eax,0x2
c001a956:	f6 c2 04             	test   dl,0x4
c001a959:	74 03                	je     c001a95e <sysCallOpen(regs*)+0x1c2>
c001a95b:	83 c8 04             	or     eax,0x4
c001a95e:	f6 c2 08             	test   dl,0x8
c001a961:	74 03                	je     c001a966 <sysCallOpen(regs*)+0x1ca>
c001a963:	83 c8 0a             	or     eax,0xa
c001a966:	83 e2 10             	and    edx,0x10
c001a969:	74 03                	je     c001a96e <sysCallOpen(regs*)+0x1d2>
c001a96b:	83 c8 12             	or     eax,0x12
c001a96e:	83 ec 08             	sub    esp,0x8
c001a971:	50                   	push   eax
c001a972:	56                   	push   esi
c001a973:	e8 a8 82 ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001a978:	83 c4 10             	add    esp,0x10
c001a97b:	85 c0                	test   eax,eax
c001a97d:	0f 85 e6 fe ff ff    	jne    c001a869 <sysCallOpen(regs*)+0xcd>
c001a983:	83 ec 0c             	sub    esp,0xc
c001a986:	56                   	push   esi
c001a987:	e8 c6 68 ff ff       	call   c0011252 <UnixFile::getFileDescriptor()>
c001a98c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a98f:	89 02                	mov    DWORD PTR [edx],eax
c001a991:	c1 f8 1f             	sar    eax,0x1f
c001a994:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a997:	e9 bd fe ff ff       	jmp    c001a859 <sysCallOpen(regs*)+0xbd>
c001a99c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a99f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a9a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a9ac:	e9 ab fe ff ff       	jmp    c001a85c <sysCallOpen(regs*)+0xc0>

c001a9b1 <setupSystemCalls()>:
c001a9b1:	c7 05 a0 c8 02 c0 c2 9b 01 c0 	mov    DWORD PTR ds:0xc002c8a0,0xc0019bc2
c001a9bb:	c7 05 a4 c8 02 c0 96 99 01 c0 	mov    DWORD PTR ds:0xc002c8a4,0xc0019996
c001a9c5:	c7 05 a8 c8 02 c0 e9 9a 01 c0 	mov    DWORD PTR ds:0xc002c8a8,0xc0019ae9
c001a9cf:	c7 05 ac c8 02 c0 5a 9b 01 c0 	mov    DWORD PTR ds:0xc002c8ac,0xc0019b5a
c001a9d9:	c7 05 b0 c8 02 c0 81 9a 01 c0 	mov    DWORD PTR ds:0xc002c8b0,0xc0019a81
c001a9e3:	c7 05 b4 c8 02 c0 cd 99 01 c0 	mov    DWORD PTR ds:0xc002c8b4,0xc00199cd
c001a9ed:	c7 05 b8 c8 02 c0 ae 99 01 c0 	mov    DWORD PTR ds:0xc002c8b8,0xc00199ae
c001a9f7:	c7 05 bc c8 02 c0 3e 9b 01 c0 	mov    DWORD PTR ds:0xc002c8bc,0xc0019b3e
c001aa01:	c7 05 c4 c8 02 c0 d4 a0 01 c0 	mov    DWORD PTR ds:0xc002c8c4,0xc001a0d4
c001aa0b:	c7 05 c0 c8 02 c0 9c a7 01 c0 	mov    DWORD PTR ds:0xc002c8c0,0xc001a79c
c001aa15:	c7 05 c8 c8 02 c0 5c a1 01 c0 	mov    DWORD PTR ds:0xc002c8c8,0xc001a15c
c001aa1f:	c7 05 cc c8 02 c0 c3 9d 01 c0 	mov    DWORD PTR ds:0xc002c8cc,0xc0019dc3
c001aa29:	c7 05 d0 c8 02 c0 fd 9b 01 c0 	mov    DWORD PTR ds:0xc002c8d0,0xc0019bfd
c001aa33:	c7 05 d4 c8 02 c0 02 9c 01 c0 	mov    DWORD PTR ds:0xc002c8d4,0xc0019c02
c001aa3d:	c7 05 d8 c8 02 c0 37 a2 01 c0 	mov    DWORD PTR ds:0xc002c8d8,0xc001a237
c001aa47:	c7 05 dc c8 02 c0 d1 a1 01 c0 	mov    DWORD PTR ds:0xc002c8dc,0xc001a1d1
c001aa51:	c7 05 e0 c8 02 c0 ab 9e 01 c0 	mov    DWORD PTR ds:0xc002c8e0,0xc0019eab
c001aa5b:	c7 05 e4 c8 02 c0 14 9f 01 c0 	mov    DWORD PTR ds:0xc002c8e4,0xc0019f14
c001aa65:	c7 05 e8 c8 02 c0 91 9f 01 c0 	mov    DWORD PTR ds:0xc002c8e8,0xc0019f91
c001aa6f:	c7 05 ec c8 02 c0 07 9c 01 c0 	mov    DWORD PTR ds:0xc002c8ec,0xc0019c07
c001aa79:	c7 05 f0 c8 02 c0 a7 a2 01 c0 	mov    DWORD PTR ds:0xc002c8f0,0xc001a2a7
c001aa83:	c7 05 f4 c8 02 c0 c1 a2 01 c0 	mov    DWORD PTR ds:0xc002c8f4,0xc001a2c1
c001aa8d:	c7 05 f8 c8 02 c0 c1 a2 01 c0 	mov    DWORD PTR ds:0xc002c8f8,0xc001a2c1
c001aa97:	c7 05 fc c8 02 c0 02 a3 01 c0 	mov    DWORD PTR ds:0xc002c8fc,0xc001a302
c001aaa1:	c7 05 00 c9 02 c0 66 a3 01 c0 	mov    DWORD PTR ds:0xc002c900,0xc001a366
c001aaab:	c7 05 04 c9 02 c0 11 9c 01 c0 	mov    DWORD PTR ds:0xc002c904,0xc0019c11
c001aab5:	c7 05 08 c9 02 c0 ca a3 01 c0 	mov    DWORD PTR ds:0xc002c908,0xc001a3ca
c001aabf:	c7 05 0c c9 02 c0 80 9d 01 c0 	mov    DWORD PTR ds:0xc002c90c,0xc0019d80
c001aac9:	c7 05 10 c9 02 c0 16 a4 01 c0 	mov    DWORD PTR ds:0xc002c910,0xc001a416
c001aad3:	c7 05 14 c9 02 c0 51 9e 01 c0 	mov    DWORD PTR ds:0xc002c914,0xc0019e51
c001aadd:	c7 05 18 c9 02 c0 eb a4 01 c0 	mov    DWORD PTR ds:0xc002c918,0xc001a4eb
c001aae7:	c7 05 1c c9 02 c0 14 a0 01 c0 	mov    DWORD PTR ds:0xc002c91c,0xc001a014
c001aaf1:	c7 05 20 c9 02 c0 12 a5 01 c0 	mov    DWORD PTR ds:0xc002c920,0xc001a512
c001aafb:	c7 05 24 c9 02 c0 99 a4 01 c0 	mov    DWORD PTR ds:0xc002c924,0xc001a499
c001ab05:	c7 05 28 c9 02 c0 6a a5 01 c0 	mov    DWORD PTR ds:0xc002c928,0xc001a56a
c001ab0f:	c7 05 2c c9 02 c0 21 9c 01 c0 	mov    DWORD PTR ds:0xc002c92c,0xc0019c21
c001ab19:	c7 05 30 c9 02 c0 8b 9c 01 c0 	mov    DWORD PTR ds:0xc002c930,0xc0019c8b
c001ab23:	c7 05 34 c9 02 c0 d1 9c 01 c0 	mov    DWORD PTR ds:0xc002c934,0xc0019cd1
c001ab2d:	c7 05 38 c9 02 c0 89 a6 01 c0 	mov    DWORD PTR ds:0xc002c938,0xc001a689
c001ab37:	c7 05 3c c9 02 c0 dc a2 01 c0 	mov    DWORD PTR ds:0xc002c93c,0xc001a2dc
c001ab41:	c7 05 40 c9 02 c0 22 9d 01 c0 	mov    DWORD PTR ds:0xc002c940,0xc0019d22
c001ab4b:	c7 05 44 c9 02 c0 fb a6 01 c0 	mov    DWORD PTR ds:0xc002c944,0xc001a6fb
c001ab55:	c7 05 48 c9 02 c0 40 a7 01 c0 	mov    DWORD PTR ds:0xc002c948,0xc001a740
c001ab5f:	c7 05 4c c9 02 c0 d9 99 01 c0 	mov    DWORD PTR ds:0xc002c94c,0xc00199d9
c001ab69:	c3                   	ret    

c001ab6a <systemCall(regs*, void*)>:
c001ab6a:	53                   	push   ebx
c001ab6b:	83 ec 08             	sub    esp,0x8
c001ab6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab72:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ab75:	83 f8 7f             	cmp    eax,0x7f
c001ab78:	77 16                	ja     c001ab90 <systemCall(regs*, void*)+0x26>
c001ab7a:	8b 14 85 a0 c8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3760]
c001ab81:	85 d2                	test   edx,edx
c001ab83:	74 0b                	je     c001ab90 <systemCall(regs*, void*)+0x26>
c001ab85:	83 ec 0c             	sub    esp,0xc
c001ab88:	53                   	push   ebx
c001ab89:	ff d2                	call   edx
c001ab8b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ab8e:	eb 0d                	jmp    c001ab9d <systemCall(regs*, void*)+0x33>
c001ab90:	52                   	push   edx
c001ab91:	52                   	push   edx
c001ab92:	50                   	push   eax
c001ab93:	68 a8 99 02 c0       	push   0xc00299a8
c001ab98:	e8 f0 7a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aba5:	31 d2                	xor    edx,edx
c001aba7:	83 c4 08             	add    esp,0x8
c001abaa:	5b                   	pop    ebx
c001abab:	c3                   	ret    

c001abac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001abac:	55                   	push   ebp
c001abad:	89 e5                	mov    ebp,esp
c001abaf:	57                   	push   edi
c001abb0:	56                   	push   esi
c001abb1:	53                   	push   ebx
c001abb2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001abb8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001abbb:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001abbe:	85 c0                	test   eax,eax
c001abc0:	0f 95 c1             	setne  cl
c001abc3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001abc7:	0f 94 c2             	sete   dl
c001abca:	84 d1                	test   cl,dl
c001abcc:	74 26                	je     c001abf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001abce:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001abd5:	74 1d                	je     c001abf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001abd7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001abda:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001abe0:	89 d6                	mov    esi,edx
c001abe2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001abe8:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001abee:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001abf1:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	05 ff 0f 00 00       	add    eax,0xfff
c001abfc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001abff:	6a 01                	push   0x1
c001ac01:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001ac07:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001ac0d:	e8 8b 6a ff ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c001ac12:	83 c4 10             	add    esp,0x10
c001ac15:	89 c6                	mov    esi,eax
c001ac17:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001ac1d:	0f 86 21 01 00 00    	jbe    c001ad44 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001ac23:	c1 eb 0c             	shr    ebx,0xc
c001ac26:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001ac30:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001ac36:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ac39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ac3c:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001ac42:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001ac45:	29 d8                	sub    eax,ebx
c001ac47:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001ac4d:	0f 83 f4 00 00 00    	jae    c001ad47 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001ac53:	83 ec 0c             	sub    esp,0xc
c001ac56:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001ac5c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001ac5f:	3d 00 10 00 00       	cmp    eax,0x1000
c001ac64:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001ac66:	52                   	push   edx
c001ac67:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001ac6d:	52                   	push   edx
c001ac6e:	76 05                	jbe    c001ac75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001ac70:	b8 00 10 00 00       	mov    eax,0x1000
c001ac75:	31 d2                	xor    edx,edx
c001ac77:	52                   	push   edx
c001ac78:	50                   	push   eax
c001ac79:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001ac7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac7f:	83 c4 20             	add    esp,0x20
c001ac82:	85 c0                	test   eax,eax
c001ac84:	74 1f                	je     c001aca5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001ac86:	51                   	push   ecx
c001ac87:	51                   	push   ecx
c001ac88:	50                   	push   eax
c001ac89:	68 bc 99 02 c0       	push   0xc00299bc
c001ac8e:	e8 fa 79 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ac93:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac96:	e8 66 6d ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c001ac9b:	83 c4 10             	add    esp,0x10
c001ac9e:	31 c0                	xor    eax,eax
c001aca0:	e9 7c 01 00 00       	jmp    c001ae21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001aca5:	e8 f3 14 00 00       	call   c001c19d <lockScheduler()>
c001acaa:	e8 bb 4d ff ff       	call   c000fa6a <Phys::allocatePage()>
c001acaf:	6a 07                	push   0x7
c001acb1:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001acb7:	56                   	push   esi
c001acb8:	50                   	push   eax
c001acb9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001acbf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001acc2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001acc8:	e8 9b 70 ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c001accd:	83 c4 0c             	add    esp,0xc
c001acd0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001acd6:	6a 00                	push   0x0
c001acd8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001acde:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001ace1:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001ace7:	e8 e6 6e ff ff       	call   c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>
c001acec:	58                   	pop    eax
c001aced:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001acf3:	5a                   	pop    edx
c001acf4:	68 07 04 00 00       	push   0x407
c001acf9:	53                   	push   ebx
c001acfa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ad00:	50                   	push   eax
c001ad01:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad07:	6a 00                	push   0x0
c001ad09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad11:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ad17:	e8 06 74 ff ff       	call   c0012122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ad1c:	83 c4 1c             	add    esp,0x1c
c001ad1f:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001ad25:	68 00 10 00 00       	push   0x1000
c001ad2a:	50                   	push   eax
c001ad2b:	56                   	push   esi
c001ad2c:	e8 15 59 fe ff       	call   c0000646 <memcpy>
c001ad31:	e8 69 14 00 00       	call   c001c19f <unlockScheduler()>
c001ad36:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001ad3c:	83 c4 10             	add    esp,0x10
c001ad3f:	e9 f5 fe ff ff       	jmp    c001ac39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001ad44:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001ad47:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001ad51:	0f 86 bc 00 00 00    	jbe    c001ae13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001ad57:	e8 41 14 00 00       	call   c001c19d <lockScheduler()>
c001ad5c:	51                   	push   ecx
c001ad5d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001ad63:	6a 00                	push   0x0
c001ad65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad6a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad6d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ad73:	e8 5a 6e ff ff       	call   c0011bd2 <VAS::mapOtherVASIn(bool, VAS*)>
c001ad78:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	c1 e8 0c             	shr    eax,0xc
c001ad84:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001ad8e:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001ad94:	e8 d1 4c ff ff       	call   c000fa6a <Phys::allocatePage()>
c001ad99:	6a 07                	push   0x7
c001ad9b:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001ada1:	56                   	push   esi
c001ada2:	50                   	push   eax
c001ada3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ada9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001adac:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001adb2:	e8 b1 6f ff ff       	call   c0011d68 <VAS::mapPage(unsigned long, unsigned long, int)>
c001adb7:	58                   	pop    eax
c001adb8:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001adbe:	5a                   	pop    edx
c001adbf:	68 07 04 00 00       	push   0x407
c001adc4:	53                   	push   ebx
c001adc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c001adcb:	50                   	push   eax
c001adcc:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001add2:	6a 00                	push   0x0
c001add4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001add9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001addc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ade2:	e8 3b 73 ff ff       	call   c0012122 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ade7:	83 c4 1c             	add    esp,0x1c
c001adea:	68 00 10 00 00       	push   0x1000
c001adef:	6a 00                	push   0x0
c001adf1:	56                   	push   esi
c001adf2:	e8 85 58 fe ff       	call   c000067c <memset>
c001adf7:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001ae06:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001ae0c:	77 86                	ja     c001ad94 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001ae0e:	e8 8c 13 00 00       	call   c001c19f <unlockScheduler()>
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	56                   	push   esi
c001ae17:	e8 e5 6b ff ff       	call   c0011a01 <Virt::freeKernelVirtualPages(unsigned long)>
c001ae1c:	83 c4 10             	add    esp,0x10
c001ae1f:	b0 01                	mov    al,0x1
c001ae21:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ae24:	5b                   	pop    ebx
c001ae25:	5e                   	pop    esi
c001ae26:	5f                   	pop    edi
c001ae27:	5d                   	pop    ebp
c001ae28:	c3                   	ret    

c001ae29 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ae29:	55                   	push   ebp
c001ae2a:	57                   	push   edi
c001ae2b:	56                   	push   esi
c001ae2c:	53                   	push   ebx
c001ae2d:	83 ec 48             	sub    esp,0x48
c001ae30:	68 14 01 00 00       	push   0x114
c001ae35:	e8 86 46 ff ff       	call   c000f4c0 <malloc>
c001ae3a:	83 c4 0c             	add    esp,0xc
c001ae3d:	89 c6                	mov    esi,eax
c001ae3f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ae43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ae47:	50                   	push   eax
c001ae48:	e8 6f 7d ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001ae4d:	58                   	pop    eax
c001ae4e:	5a                   	pop    edx
c001ae4f:	6a 01                	push   0x1
c001ae51:	56                   	push   esi
c001ae52:	e8 c9 7d ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001ae57:	83 c4 10             	add    esp,0x10
c001ae5a:	85 c0                	test   eax,eax
c001ae5c:	0f 85 47 01 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae62:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ae6a:	83 ec 0c             	sub    esp,0xc
c001ae6d:	6a 34                	push   0x34
c001ae6f:	e8 4c 46 ff ff       	call   c000f4c0 <malloc>
c001ae74:	89 c3                	mov    ebx,eax
c001ae76:	58                   	pop    eax
c001ae77:	8b 06                	mov    eax,DWORD PTR [esi]
c001ae79:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ae7d:	57                   	push   edi
c001ae7e:	53                   	push   ebx
c001ae7f:	6a 00                	push   0x0
c001ae81:	6a 34                	push   0x34
c001ae83:	56                   	push   esi
c001ae84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae87:	83 c4 20             	add    esp,0x20
c001ae8a:	85 c0                	test   eax,eax
c001ae8c:	0f 85 17 01 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae92:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ae98:	0f 85 0b 01 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ae9e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aea1:	85 c0                	test   eax,eax
c001aea3:	0f 84 00 01 00 00    	je     c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aea9:	31 d2                	xor    edx,edx
c001aeab:	55                   	push   ebp
c001aeac:	52                   	push   edx
c001aead:	50                   	push   eax
c001aeae:	56                   	push   esi
c001aeaf:	e8 2a 7e ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001aeb4:	83 c4 10             	add    esp,0x10
c001aeb7:	85 c0                	test   eax,eax
c001aeb9:	0f 85 ea 00 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001aebf:	83 ec 0c             	sub    esp,0xc
c001aec2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001aec5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001aec9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aecd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001aed1:	0f af c2             	imul   eax,edx
c001aed4:	50                   	push   eax
c001aed5:	e8 e6 45 ff ff       	call   c000f4c0 <malloc>
c001aeda:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001aedc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aee0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001aee3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aee7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001aeeb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001aeef:	0f af c2             	imul   eax,edx
c001aef2:	99                   	cdq    
c001aef3:	52                   	push   edx
c001aef4:	50                   	push   eax
c001aef5:	56                   	push   esi
c001aef6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001aef9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001aefc:	83 c4 20             	add    esp,0x20
c001aeff:	85 c0                	test   eax,eax
c001af01:	0f 84 a2 00 00 00    	je     c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af07:	31 d2                	xor    edx,edx
c001af09:	51                   	push   ecx
c001af0a:	52                   	push   edx
c001af0b:	50                   	push   eax
c001af0c:	56                   	push   esi
c001af0d:	e8 cc 7d ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	85 c0                	test   eax,eax
c001af17:	0f 85 8c 00 00 00    	jne    c001afa9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001af1d:	83 ec 0c             	sub    esp,0xc
c001af20:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001af24:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001af28:	31 ed                	xor    ebp,ebp
c001af2a:	0f af c2             	imul   eax,edx
c001af2d:	50                   	push   eax
c001af2e:	e8 8d 45 ff ff       	call   c000f4c0 <malloc>
c001af33:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001af35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af39:	89 3c 24             	mov    DWORD PTR [esp],edi
c001af3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af40:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001af44:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001af48:	0f af c2             	imul   eax,edx
c001af4b:	99                   	cdq    
c001af4c:	52                   	push   edx
c001af4d:	50                   	push   eax
c001af4e:	56                   	push   esi
c001af4f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af52:	83 c4 20             	add    esp,0x20
c001af55:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001af5d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001af61:	0f 86 80 00 00 00    	jbe    c001afe7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001af67:	0f b7 fd             	movzx  edi,bp
c001af6a:	c1 e7 05             	shl    edi,0x5
c001af6d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001af71:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001af74:	75 6b                	jne    c001afe1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001af76:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001af79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af7d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001af80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af84:	52                   	push   edx
c001af85:	31 d2                	xor    edx,edx
c001af87:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001af8a:	52                   	push   edx
c001af8b:	50                   	push   eax
c001af8c:	56                   	push   esi
c001af8d:	e8 4c 7d ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001af92:	83 c4 10             	add    esp,0x10
c001af95:	85 c0                	test   eax,eax
c001af97:	74 17                	je     c001afb0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	68 e7 99 02 c0       	push   0xc00299e7
c001afa1:	e8 e7 76 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	31 c0                	xor    eax,eax
c001afab:	e9 87 00 00 00       	jmp    c001b037 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001afb0:	83 ec 0c             	sub    esp,0xc
c001afb3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001afb6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001afb9:	50                   	push   eax
c001afba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afbe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afc2:	56                   	push   esi
c001afc3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001afc7:	e8 e0 fb ff ff       	call   c001abac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001afcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afd0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001afd4:	83 c4 20             	add    esp,0x20
c001afd7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001afdb:	73 04                	jae    c001afe1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001afdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afe1:	45                   	inc    ebp
c001afe2:	e9 76 ff ff ff       	jmp    c001af5d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001afe7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001afeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001afef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aff3:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001b002:	25 00 f0 ff ff       	and    eax,0xfffff000
c001b007:	05 00 10 00 00       	add    eax,0x1000
c001b00c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b013:	e8 b8 44 ff ff       	call   c000f4d0 <free>
c001b018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b01b:	e8 b0 44 ff ff       	call   c000f4d0 <free>
c001b020:	58                   	pop    eax
c001b021:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b025:	e8 a6 44 ff ff       	call   c000f4d0 <free>
c001b02a:	89 34 24             	mov    DWORD PTR [esp],esi
c001b02d:	e8 4c 7c ff ff       	call   c0012c7e <File::close()>
c001b032:	83 c4 10             	add    esp,0x10
c001b035:	b0 01                	mov    al,0x1
c001b037:	83 c4 3c             	add    esp,0x3c
c001b03a:	5b                   	pop    ebx
c001b03b:	5e                   	pop    esi
c001b03c:	5f                   	pop    edi
c001b03d:	5d                   	pop    ebp
c001b03e:	c3                   	ret    

c001b03f <Thr::runtimeReferenceHelper()>:
c001b03f:	83 ec 18             	sub    esp,0x18
c001b042:	68 ef 99 02 c0       	push   0xc00299ef
c001b047:	e8 41 76 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001b04c:	fa                   	cli    
c001b04d:	83 c4 10             	add    esp,0x10
c001b050:	eb fe                	jmp    c001b050 <Thr::runtimeReferenceHelper()+0x11>

c001b052 <Thr::getAddressOfKernelSymbol(char const*)>:
c001b052:	57                   	push   edi
c001b053:	56                   	push   esi
c001b054:	53                   	push   ebx
c001b055:	31 db                	xor    ebx,ebx
c001b057:	39 1d 40 d2 02 c0    	cmp    DWORD PTR ds:0xc002d240,ebx
c001b05d:	7e 3c                	jle    c001b09b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001b05f:	8b 34 9d c0 d1 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2e40]
c001b066:	31 ff                	xor    edi,edi
c001b068:	39 3c 9d c0 d0 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2f40],edi
c001b06f:	7e 27                	jle    c001b098 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001b071:	50                   	push   eax
c001b072:	50                   	push   eax
c001b073:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b077:	8b 06                	mov    eax,DWORD PTR [esi]
c001b079:	03 04 9d 40 d1 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2ec0]
c001b080:	50                   	push   eax
c001b081:	e8 e6 56 fe ff       	call   c000076c <strcmp>
c001b086:	83 c4 10             	add    esp,0x10
c001b089:	85 c0                	test   eax,eax
c001b08b:	75 05                	jne    c001b092 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001b08d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b090:	eb 0b                	jmp    c001b09d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001b092:	83 c6 10             	add    esi,0x10
c001b095:	47                   	inc    edi
c001b096:	eb d0                	jmp    c001b068 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001b098:	43                   	inc    ebx
c001b099:	eb bc                	jmp    c001b057 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001b09b:	31 c0                	xor    eax,eax
c001b09d:	5b                   	pop    ebx
c001b09e:	5e                   	pop    esi
c001b09f:	5f                   	pop    edi
c001b0a0:	c3                   	ret    

c001b0a1 <Thr::loadKernelSymbolTable(char const*)>:
c001b0a1:	55                   	push   ebp
c001b0a2:	57                   	push   edi
c001b0a3:	56                   	push   esi
c001b0a4:	53                   	push   ebx
c001b0a5:	83 ec 68             	sub    esp,0x68
c001b0a8:	8b 35 94 d2 02 c0    	mov    esi,DWORD PTR ds:0xc002d294
c001b0ae:	68 14 01 00 00       	push   0x114
c001b0b3:	e8 08 44 ff ff       	call   c000f4c0 <malloc>
c001b0b8:	83 c4 0c             	add    esp,0xc
c001b0bb:	89 c3                	mov    ebx,eax
c001b0bd:	56                   	push   esi
c001b0be:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b0c2:	50                   	push   eax
c001b0c3:	e8 f4 7a ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001b0c8:	5e                   	pop    esi
c001b0c9:	5f                   	pop    edi
c001b0ca:	6a 01                	push   0x1
c001b0cc:	53                   	push   ebx
c001b0cd:	e8 4e 7b ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001b0d2:	83 c4 10             	add    esp,0x10
c001b0d5:	31 d2                	xor    edx,edx
c001b0d7:	85 c0                	test   eax,eax
c001b0d9:	0f 85 74 02 00 00    	jne    c001b353 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b0df:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b0e7:	83 ec 0c             	sub    esp,0xc
c001b0ea:	6a 34                	push   0x34
c001b0ec:	e8 cf 43 ff ff       	call   c000f4c0 <malloc>
c001b0f1:	59                   	pop    ecx
c001b0f2:	89 c7                	mov    edi,eax
c001b0f4:	8d 74 24 34          	lea    esi,[esp+0x34]
c001b0f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b0fa:	56                   	push   esi
c001b0fb:	57                   	push   edi
c001b0fc:	6a 00                	push   0x0
c001b0fe:	6a 34                	push   0x34
c001b100:	53                   	push   ebx
c001b101:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b104:	83 c4 20             	add    esp,0x20
c001b107:	85 c0                	test   eax,eax
c001b109:	74 17                	je     c001b122 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001b10b:	83 ec 0c             	sub    esp,0xc
c001b10e:	68 11 9a 02 c0       	push   0xc0029a11
c001b113:	e8 3f e0 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b118:	83 c4 10             	add    esp,0x10
c001b11b:	31 d2                	xor    edx,edx
c001b11d:	e9 31 02 00 00       	jmp    c001b353 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001b122:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b128:	75 e1                	jne    c001b10b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b12a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b12d:	85 c0                	test   eax,eax
c001b12f:	74 da                	je     c001b10b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b131:	52                   	push   edx
c001b132:	31 d2                	xor    edx,edx
c001b134:	52                   	push   edx
c001b135:	50                   	push   eax
c001b136:	53                   	push   ebx
c001b137:	e8 a2 7b ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b13c:	83 c4 10             	add    esp,0x10
c001b13f:	85 c0                	test   eax,eax
c001b141:	75 c8                	jne    c001b10b <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001b143:	83 ec 0c             	sub    esp,0xc
c001b146:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b14a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b14e:	31 ed                	xor    ebp,ebp
c001b150:	0f af c2             	imul   eax,edx
c001b153:	50                   	push   eax
c001b154:	e8 67 43 ff ff       	call   c000f4c0 <malloc>
c001b159:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b15b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b15f:	89 34 24             	mov    DWORD PTR [esp],esi
c001b162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b166:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b16a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b16e:	0f af c2             	imul   eax,edx
c001b171:	99                   	cdq    
c001b172:	52                   	push   edx
c001b173:	50                   	push   eax
c001b174:	53                   	push   ebx
c001b175:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b178:	83 c4 20             	add    esp,0x20
c001b17b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b183:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b18b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b193:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b19b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001b19f:	0f 86 aa 00 00 00    	jbe    c001b24f <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001b1a5:	0f b7 f5             	movzx  esi,bp
c001b1a8:	6b f6 28             	imul   esi,esi,0x28
c001b1ab:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001b1af:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b1b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b1b6:	50                   	push   eax
c001b1b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b1bb:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001b1bf:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1c1:	6b c0 28             	imul   eax,eax,0x28
c001b1c4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001b1c8:	89 d0                	mov    eax,edx
c001b1ca:	31 d2                	xor    edx,edx
c001b1cc:	52                   	push   edx
c001b1cd:	50                   	push   eax
c001b1ce:	53                   	push   ebx
c001b1cf:	e8 0a 7b ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b1d4:	83 c4 0c             	add    esp,0xc
c001b1d7:	6a 20                	push   0x20
c001b1d9:	6a 00                	push   0x0
c001b1db:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b1df:	52                   	push   edx
c001b1e0:	e8 97 54 fe ff       	call   c000067c <memset>
c001b1e5:	58                   	pop    eax
c001b1e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1e8:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001b1ec:	51                   	push   ecx
c001b1ed:	8d 54 24 40          	lea    edx,[esp+0x40]
c001b1f1:	52                   	push   edx
c001b1f2:	6a 00                	push   0x0
c001b1f4:	6a 1f                	push   0x1f
c001b1f6:	53                   	push   ebx
c001b1f7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b1fa:	83 c4 18             	add    esp,0x18
c001b1fd:	68 28 9a 02 c0       	push   0xc0029a28
c001b202:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001b206:	52                   	push   edx
c001b207:	e8 60 55 fe ff       	call   c000076c <strcmp>
c001b20c:	83 c4 10             	add    esp,0x10
c001b20f:	85 c0                	test   eax,eax
c001b211:	75 0f                	jne    c001b222 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001b213:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b216:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b21a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b21e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b222:	50                   	push   eax
c001b223:	50                   	push   eax
c001b224:	68 30 9a 02 c0       	push   0xc0029a30
c001b229:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b22d:	50                   	push   eax
c001b22e:	e8 39 55 fe ff       	call   c000076c <strcmp>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	85 c0                	test   eax,eax
c001b238:	75 0f                	jne    c001b249 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001b23a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b23d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b241:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b245:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b249:	45                   	inc    ebp
c001b24a:	e9 4c ff ff ff       	jmp    c001b19b <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001b24f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b254:	75 10                	jne    c001b266 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001b256:	83 ec 0c             	sub    esp,0xc
c001b259:	68 38 9a 02 c0       	push   0xc0029a38
c001b25e:	e8 f4 de ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b263:	83 c4 10             	add    esp,0x10
c001b266:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001b26b:	75 10                	jne    c001b27d <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001b26d:	83 ec 0c             	sub    esp,0xc
c001b270:	68 38 9a 02 c0       	push   0xc0029a38
c001b275:	e8 dd de ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b27a:	83 c4 10             	add    esp,0x10
c001b27d:	31 d2                	xor    edx,edx
c001b27f:	50                   	push   eax
c001b280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b284:	52                   	push   edx
c001b285:	50                   	push   eax
c001b286:	53                   	push   ebx
c001b287:	e8 52 7a ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b28c:	5a                   	pop    edx
c001b28d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b291:	e8 2a 42 ff ff       	call   c000f4c0 <malloc>
c001b296:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b29a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b29e:	31 c9                	xor    ecx,ecx
c001b2a0:	5e                   	pop    esi
c001b2a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2a3:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001b2a7:	55                   	push   ebp
c001b2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2ac:	51                   	push   ecx
c001b2ad:	52                   	push   edx
c001b2ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b2b2:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001b2b6:	53                   	push   ebx
c001b2b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2ba:	83 c4 14             	add    esp,0x14
c001b2bd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b2c1:	e8 fa 41 ff ff       	call   c000f4c0 <malloc>
c001b2c6:	89 c6                	mov    esi,eax
c001b2c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2cd:	56                   	push   esi
c001b2ce:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b2d2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b2d6:	51                   	push   ecx
c001b2d7:	52                   	push   edx
c001b2d8:	53                   	push   ebx
c001b2d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b2e0:	8b 15 40 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d240
c001b2e6:	83 c4 1c             	add    esp,0x1c
c001b2e9:	c1 e8 04             	shr    eax,0x4
c001b2ec:	89 04 95 c0 d0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2f40],eax
c001b2f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2f7:	31 d2                	xor    edx,edx
c001b2f9:	52                   	push   edx
c001b2fa:	50                   	push   eax
c001b2fb:	53                   	push   ebx
c001b2fc:	e8 dd 79 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b301:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001b303:	31 d2                	xor    edx,edx
c001b305:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b308:	56                   	push   esi
c001b309:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b30d:	52                   	push   edx
c001b30e:	50                   	push   eax
c001b30f:	53                   	push   ebx
c001b310:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b313:	83 c4 14             	add    esp,0x14
c001b316:	53                   	push   ebx
c001b317:	e8 62 79 ff ff       	call   c0012c7e <File::close()>
c001b31c:	5d                   	pop    ebp
c001b31d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b321:	e8 aa 41 ff ff       	call   c000f4d0 <free>
c001b326:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b329:	e8 a2 41 ff ff       	call   c000f4d0 <free>
c001b32e:	a1 40 d2 02 c0       	mov    eax,ds:0xc002d240
c001b333:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b337:	8d 50 01             	lea    edx,[eax+0x1]
c001b33a:	89 0c 85 c0 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e40],ecx
c001b341:	89 15 40 d2 02 c0    	mov    DWORD PTR ds:0xc002d240,edx
c001b347:	89 34 85 40 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ec0],esi
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	b2 01                	mov    dl,0x1
c001b353:	83 c4 5c             	add    esp,0x5c
c001b356:	88 d0                	mov    al,dl
c001b358:	5b                   	pop    ebx
c001b359:	5e                   	pop    esi
c001b35a:	5f                   	pop    edi
c001b35b:	5d                   	pop    ebp
c001b35c:	c3                   	ret    

c001b35d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001b35d:	55                   	push   ebp
c001b35e:	57                   	push   edi
c001b35f:	56                   	push   esi
c001b360:	53                   	push   ebx
c001b361:	81 ec 68 03 00 00    	sub    esp,0x368
c001b367:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001b36e:	8b 1d 94 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d294
c001b374:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b378:	68 14 01 00 00       	push   0x114
c001b37d:	e8 3e 41 ff ff       	call   c000f4c0 <malloc>
c001b382:	83 c4 0c             	add    esp,0xc
c001b385:	89 c5                	mov    ebp,eax
c001b387:	53                   	push   ebx
c001b388:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001b38f:	50                   	push   eax
c001b390:	e8 27 78 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001b395:	58                   	pop    eax
c001b396:	5a                   	pop    edx
c001b397:	6a 01                	push   0x1
c001b399:	55                   	push   ebp
c001b39a:	e8 81 78 ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001b39f:	83 c4 10             	add    esp,0x10
c001b3a2:	85 c0                	test   eax,eax
c001b3a4:	0f 85 f2 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3aa:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b3b2:	83 ec 0c             	sub    esp,0xc
c001b3b5:	6a 34                	push   0x34
c001b3b7:	e8 04 41 ff ff       	call   c000f4c0 <malloc>
c001b3bc:	89 c7                	mov    edi,eax
c001b3be:	58                   	pop    eax
c001b3bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b3c2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b3c6:	53                   	push   ebx
c001b3c7:	57                   	push   edi
c001b3c8:	6a 00                	push   0x0
c001b3ca:	6a 34                	push   0x34
c001b3cc:	55                   	push   ebp
c001b3cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b3d0:	83 c4 20             	add    esp,0x20
c001b3d3:	85 c0                	test   eax,eax
c001b3d5:	0f 85 c1 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3db:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001b3e1:	0f 85 b5 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3e7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001b3ea:	85 c0                	test   eax,eax
c001b3ec:	0f 84 aa 06 00 00    	je     c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	56                   	push   esi
c001b3f5:	52                   	push   edx
c001b3f6:	50                   	push   eax
c001b3f7:	55                   	push   ebp
c001b3f8:	e8 e1 78 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	85 c0                	test   eax,eax
c001b402:	0f 85 94 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b408:	83 ec 0c             	sub    esp,0xc
c001b40b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001b40e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b412:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b416:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b41a:	0f af c2             	imul   eax,edx
c001b41d:	50                   	push   eax
c001b41e:	e8 9d 40 ff ff       	call   c000f4c0 <malloc>
c001b423:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b426:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b42a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b42d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b431:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001b435:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b439:	0f af c2             	imul   eax,edx
c001b43c:	99                   	cdq    
c001b43d:	52                   	push   edx
c001b43e:	50                   	push   eax
c001b43f:	55                   	push   ebp
c001b440:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b443:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001b446:	83 c4 20             	add    esp,0x20
c001b449:	85 c0                	test   eax,eax
c001b44b:	0f 84 4b 06 00 00    	je     c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b451:	31 d2                	xor    edx,edx
c001b453:	51                   	push   ecx
c001b454:	52                   	push   edx
c001b455:	50                   	push   eax
c001b456:	55                   	push   ebp
c001b457:	e8 82 78 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	85 c0                	test   eax,eax
c001b461:	0f 85 35 06 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b467:	83 ec 0c             	sub    esp,0xc
c001b46a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b46e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b472:	31 f6                	xor    esi,esi
c001b474:	0f af c2             	imul   eax,edx
c001b477:	50                   	push   eax
c001b478:	e8 43 40 ff ff       	call   c000f4c0 <malloc>
c001b47d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b480:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b484:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001b48f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001b493:	0f af c2             	imul   eax,edx
c001b496:	99                   	cdq    
c001b497:	52                   	push   edx
c001b498:	50                   	push   eax
c001b499:	55                   	push   ebp
c001b49a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b49d:	83 c4 20             	add    esp,0x20
c001b4a0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001b4a4:	0f 86 8a 00 00 00    	jbe    c001b534 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001b4aa:	0f b7 de             	movzx  ebx,si
c001b4ad:	c1 e3 05             	shl    ebx,0x5
c001b4b0:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001b4b4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001b4b7:	75 75                	jne    c001b52e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001b4b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b4bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b4c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4c7:	52                   	push   edx
c001b4c8:	31 d2                	xor    edx,edx
c001b4ca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b4cd:	52                   	push   edx
c001b4ce:	50                   	push   eax
c001b4cf:	55                   	push   ebp
c001b4d0:	e8 09 78 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b4d5:	83 c4 10             	add    esp,0x10
c001b4d8:	85 c0                	test   eax,eax
c001b4da:	0f 85 bc 05 00 00    	jne    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001b4e0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b4e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b4ea:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001b4ee:	31 d2                	xor    edx,edx
c001b4f0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001b4f4:	83 ec 0c             	sub    esp,0xc
c001b4f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b4fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b502:	50                   	push   eax
c001b503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b50b:	52                   	push   edx
c001b50c:	50                   	push   eax
c001b50d:	55                   	push   ebp
c001b50e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b511:	83 c4 1c             	add    esp,0x1c
c001b514:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b517:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001b51a:	50                   	push   eax
c001b51b:	6a 00                	push   0x0
c001b51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b521:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b525:	50                   	push   eax
c001b526:	e8 51 51 fe ff       	call   c000067c <memset>
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	46                   	inc    esi
c001b52f:	e9 6c ff ff ff       	jmp    c001b4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001b534:	31 db                	xor    ebx,ebx
c001b536:	50                   	push   eax
c001b537:	68 00 01 00 00       	push   0x100
c001b53c:	6a 00                	push   0x0
c001b53e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b542:	50                   	push   eax
c001b543:	e8 34 51 fe ff       	call   c000067c <memset>
c001b548:	83 c4 0c             	add    esp,0xc
c001b54b:	68 00 01 00 00       	push   0x100
c001b550:	6a 00                	push   0x0
c001b552:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001b559:	50                   	push   eax
c001b55a:	e8 1d 51 fe ff       	call   c000067c <memset>
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b56a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001b572:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b57a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b582:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b58a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001b58e:	0f 86 30 01 00 00    	jbe    c001b6c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001b594:	0f b7 f3             	movzx  esi,bx
c001b597:	6b f6 28             	imul   esi,esi,0x28
c001b59a:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001b59e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b5a5:	50                   	push   eax
c001b5a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5aa:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001b5ae:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5b0:	6b d2 28             	imul   edx,edx,0x28
c001b5b3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001b5b7:	31 d2                	xor    edx,edx
c001b5b9:	52                   	push   edx
c001b5ba:	50                   	push   eax
c001b5bb:	55                   	push   ebp
c001b5bc:	e8 1d 77 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b5c1:	83 c4 0c             	add    esp,0xc
c001b5c4:	6a 20                	push   0x20
c001b5c6:	6a 00                	push   0x0
c001b5c8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b5cf:	51                   	push   ecx
c001b5d0:	e8 a7 50 fe ff       	call   c000067c <memset>
c001b5d5:	58                   	pop    eax
c001b5d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b5d9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b5dd:	52                   	push   edx
c001b5de:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001b5e5:	51                   	push   ecx
c001b5e6:	6a 00                	push   0x0
c001b5e8:	6a 1f                	push   0x1f
c001b5ea:	55                   	push   ebp
c001b5eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b5ee:	83 c4 1c             	add    esp,0x1c
c001b5f1:	6a 09                	push   0x9
c001b5f3:	68 52 9a 02 c0       	push   0xc0029a52
c001b5f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001b5ff:	51                   	push   ecx
c001b600:	e8 de 4f fe ff       	call   c00005e3 <memcmp>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	85 c0                	test   eax,eax
c001b60a:	75 21                	jne    c001b62d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001b60c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b610:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b618:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b61c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b61f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b626:	89 c8                	mov    eax,ecx
c001b628:	40                   	inc    eax
c001b629:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b62d:	50                   	push   eax
c001b62e:	6a 09                	push   0x9
c001b630:	68 5c 9a 02 c0       	push   0xc0029a5c
c001b635:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b63c:	50                   	push   eax
c001b63d:	e8 a1 4f fe ff       	call   c00005e3 <memcmp>
c001b642:	83 c4 10             	add    esp,0x10
c001b645:	85 c0                	test   eax,eax
c001b647:	75 21                	jne    c001b66a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001b649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b64d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b651:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b655:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001b659:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b65c:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001b663:	89 c8                	mov    eax,ecx
c001b665:	40                   	inc    eax
c001b666:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b66a:	50                   	push   eax
c001b66b:	50                   	push   eax
c001b66c:	68 28 9a 02 c0       	push   0xc0029a28
c001b671:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b678:	50                   	push   eax
c001b679:	e8 ee 50 fe ff       	call   c000076c <strcmp>
c001b67e:	83 c4 10             	add    esp,0x10
c001b681:	85 c0                	test   eax,eax
c001b683:	75 0f                	jne    c001b694 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001b685:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b68c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b690:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b694:	50                   	push   eax
c001b695:	50                   	push   eax
c001b696:	68 30 9a 02 c0       	push   0xc0029a30
c001b69b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001b6a2:	50                   	push   eax
c001b6a3:	e8 c4 50 fe ff       	call   c000076c <strcmp>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	85 c0                	test   eax,eax
c001b6ad:	75 0f                	jne    c001b6be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001b6af:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b6b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b6be:	43                   	inc    ebx
c001b6bf:	e9 c6 fe ff ff       	jmp    c001b58a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001b6c4:	31 d2                	xor    edx,edx
c001b6c6:	50                   	push   eax
c001b6c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6cb:	52                   	push   edx
c001b6cc:	50                   	push   eax
c001b6cd:	55                   	push   ebp
c001b6ce:	e8 0b 76 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b6d3:	5a                   	pop    edx
c001b6d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6d8:	e8 e3 3d ff ff       	call   c000f4c0 <malloc>
c001b6dd:	31 d2                	xor    edx,edx
c001b6df:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001b6e3:	59                   	pop    ecx
c001b6e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b6e7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001b6eb:	53                   	push   ebx
c001b6ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b6f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6f4:	52                   	push   edx
c001b6f5:	50                   	push   eax
c001b6f6:	55                   	push   ebp
c001b6f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b6fa:	83 c4 14             	add    esp,0x14
c001b6fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b701:	e8 ba 3d ff ff       	call   c000f4c0 <malloc>
c001b706:	31 d2                	xor    edx,edx
c001b708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b70c:	83 c4 0c             	add    esp,0xc
c001b70f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b713:	52                   	push   edx
c001b714:	50                   	push   eax
c001b715:	55                   	push   ebp
c001b716:	e8 c3 75 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b71b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b71e:	31 d2                	xor    edx,edx
c001b720:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b723:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b727:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b72b:	52                   	push   edx
c001b72c:	50                   	push   eax
c001b72d:	55                   	push   ebp
c001b72e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b731:	83 c4 20             	add    esp,0x20
c001b734:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001b73c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b740:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001b744:	0f 84 56 03 00 00    	je     c001baa0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001b74a:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001b751:	31 d2                	xor    edx,edx
c001b753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b757:	c1 e8 03             	shr    eax,0x3
c001b75a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001b75e:	50                   	push   eax
c001b75f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b763:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001b767:	52                   	push   edx
c001b768:	50                   	push   eax
c001b769:	55                   	push   ebp
c001b76a:	e8 6f 75 ff ff       	call   c0012cde <File::seek(unsigned long long)>
c001b76f:	58                   	pop    eax
c001b770:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b774:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001b77b:	e8 40 3d ff ff       	call   c000f4c0 <malloc>
c001b780:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001b783:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b787:	31 d2                	xor    edx,edx
c001b789:	58                   	pop    eax
c001b78a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b78e:	50                   	push   eax
c001b78f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b797:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001b79e:	52                   	push   edx
c001b79f:	50                   	push   eax
c001b7a0:	55                   	push   ebp
c001b7a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b7a4:	83 c4 20             	add    esp,0x20
c001b7a7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001b7af:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001b7b3:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001b7b7:	0f 8d c7 02 00 00    	jge    c001ba84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001b7bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b7c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7c5:	31 db                	xor    ebx,ebx
c001b7c7:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001b7ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b7ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7d2:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001b7d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b7da:	c1 e8 08             	shr    eax,0x8
c001b7dd:	89 c6                	mov    esi,eax
c001b7df:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b7e3:	c1 e6 04             	shl    esi,0x4
c001b7e6:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001b7ea:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001b7ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7f1:	85 c0                	test   eax,eax
c001b7f3:	0f 85 17 01 00 00    	jne    c001b910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b7f9:	83 ec 0c             	sub    esp,0xc
c001b7fc:	b3 01                	mov    bl,0x1
c001b7fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b802:	03 06                	add    eax,DWORD PTR [esi]
c001b804:	50                   	push   eax
c001b805:	e8 48 f8 ff ff       	call   c001b052 <Thr::getAddressOfKernelSymbol(char const*)>
c001b80a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b80e:	83 c4 10             	add    esp,0x10
c001b811:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b816:	0f 85 f4 00 00 00    	jne    c001b910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b81c:	50                   	push   eax
c001b81d:	50                   	push   eax
c001b81e:	68 66 9a 02 c0       	push   0xc0029a66
c001b823:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b827:	03 06                	add    eax,DWORD PTR [esi]
c001b829:	50                   	push   eax
c001b82a:	e8 3d 4f fe ff       	call   c000076c <strcmp>
c001b82f:	83 c4 10             	add    esp,0x10
c001b832:	85 c0                	test   eax,eax
c001b834:	75 0a                	jne    c001b840 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001b836:	b8 4c 48 02 c0       	mov    eax,0xc002484c
c001b83b:	e9 ca 00 00 00       	jmp    c001b90a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b840:	50                   	push   eax
c001b841:	50                   	push   eax
c001b842:	68 70 9a 02 c0       	push   0xc0029a70
c001b847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b84b:	03 06                	add    eax,DWORD PTR [esi]
c001b84d:	50                   	push   eax
c001b84e:	e8 19 4f fe ff       	call   c000076c <strcmp>
c001b853:	83 c4 10             	add    esp,0x10
c001b856:	85 c0                	test   eax,eax
c001b858:	75 0a                	jne    c001b864 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001b85a:	b8 80 45 02 c0       	mov    eax,0xc0024580
c001b85f:	e9 a6 00 00 00       	jmp    c001b90a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b864:	53                   	push   ebx
c001b865:	53                   	push   ebx
c001b866:	68 79 9a 02 c0       	push   0xc0029a79
c001b86b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b86f:	03 06                	add    eax,DWORD PTR [esi]
c001b871:	50                   	push   eax
c001b872:	e8 f5 4e fe ff       	call   c000076c <strcmp>
c001b877:	83 c4 10             	add    esp,0x10
c001b87a:	85 c0                	test   eax,eax
c001b87c:	75 0a                	jne    c001b888 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001b87e:	b8 4c 49 02 c0       	mov    eax,0xc002494c
c001b883:	e9 82 00 00 00       	jmp    c001b90a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001b888:	51                   	push   ecx
c001b889:	51                   	push   ecx
c001b88a:	68 83 9a 02 c0       	push   0xc0029a83
c001b88f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b893:	03 06                	add    eax,DWORD PTR [esi]
c001b895:	50                   	push   eax
c001b896:	e8 d1 4e fe ff       	call   c000076c <strcmp>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	85 c0                	test   eax,eax
c001b8a0:	74 63                	je     c001b905 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001b8a2:	50                   	push   eax
c001b8a3:	50                   	push   eax
c001b8a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8a8:	03 06                	add    eax,DWORD PTR [esi]
c001b8aa:	50                   	push   eax
c001b8ab:	68 8c 9a 02 c0       	push   0xc0029a8c
c001b8b0:	e8 d8 6d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001b8b5:	58                   	pop    eax
c001b8b6:	5a                   	pop    edx
c001b8b7:	68 a6 9a 02 c0       	push   0xc0029aa6
c001b8bc:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b8c3:	53                   	push   ebx
c001b8c4:	e8 52 4e fe ff       	call   c000071b <strcpy>
c001b8c9:	59                   	pop    ecx
c001b8ca:	58                   	pop    eax
c001b8cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8cf:	03 06                	add    eax,DWORD PTR [esi]
c001b8d1:	50                   	push   eax
c001b8d2:	53                   	push   ebx
c001b8d3:	e8 fa 4e fe ff       	call   c00007d2 <strcat>
c001b8d8:	58                   	pop    eax
c001b8d9:	5a                   	pop    edx
c001b8da:	68 3c 9b 02 c0       	push   0xc0029b3c
c001b8df:	53                   	push   ebx
c001b8e0:	e8 ed 4e fe ff       	call   c00007d2 <strcat>
c001b8e5:	83 c4 10             	add    esp,0x10
c001b8e8:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b8ed:	0f 84 4b 01 00 00    	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	53                   	push   ebx
c001b8f7:	e8 5b d8 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b903:	eb 0b                	jmp    c001b910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001b905:	b8 cc 46 02 c0       	mov    eax,0xc00246cc
c001b90a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b90e:	b3 01                	mov    bl,0x1
c001b910:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b915:	0f 85 80 00 00 00    	jne    c001b99b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001b91b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b922:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b926:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b92a:	01 ce                	add    esi,ecx
c001b92c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b934:	8b 06                	mov    eax,DWORD PTR [esi]
c001b936:	0f 94 c2             	sete   dl
c001b939:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b941:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b946:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b94a:	84 db                	test   bl,bl
c001b94c:	74 31                	je     c001b97f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001b94e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b952:	01 c3                	add    ebx,eax
c001b954:	84 d2                	test   dl,dl
c001b956:	75 0a                	jne    c001b962 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001b958:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b95c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b960:	76 32                	jbe    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b962:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b967:	0f 84 d1 00 00 00    	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b96d:	83 ec 0c             	sub    esp,0xc
c001b970:	68 bd 9a 02 c0       	push   0xc0029abd
c001b975:	e8 dd d7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b97a:	83 c4 10             	add    esp,0x10
c001b97d:	eb 15                	jmp    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b97f:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b982:	84 d2                	test   dl,dl
c001b984:	75 0e                	jne    c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b986:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b98a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b98e:	77 04                	ja     c001b994 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001b990:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b994:	89 1e                	mov    DWORD PTR [esi],ebx
c001b996:	e9 e0 00 00 00       	jmp    c001ba7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001b99b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b9a0:	75 6e                	jne    c001ba10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001b9a2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b9a9:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b9ad:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b9b1:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b9b9:	74 17                	je     c001b9d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b9bb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b9c3:	74 0d                	je     c001b9d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001b9c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001b9c9:	83 e8 04             	sub    eax,0x4
c001b9cc:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b9d0:	76 17                	jbe    c001b9e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001b9d2:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b9d7:	74 65                	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001b9d9:	83 ec 0c             	sub    esp,0xc
c001b9dc:	68 d9 9a 02 c0       	push   0xc0029ad9
c001b9e1:	e8 71 d7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001b9e6:	83 c4 10             	add    esp,0x10
c001b9e9:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9eb:	84 db                	test   bl,bl
c001b9ed:	74 13                	je     c001ba02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001b9ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b9f3:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b9fa:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b9fe:	01 d0                	add    eax,edx
c001ba00:	eb 06                	jmp    c001ba08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001ba02:	89 d0                	mov    eax,edx
c001ba04:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001ba08:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ba0c:	89 06                	mov    DWORD PTR [esi],eax
c001ba0e:	eb 6b                	jmp    c001ba7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001ba10:	50                   	push   eax
c001ba11:	50                   	push   eax
c001ba12:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001ba17:	50                   	push   eax
c001ba18:	68 f5 9a 02 c0       	push   0xc0029af5
c001ba1d:	e8 6b 6c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ba22:	83 c4 10             	add    esp,0x10
c001ba25:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001ba2a:	74 12                	je     c001ba3e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001ba2c:	83 ec 0c             	sub    esp,0xc
c001ba2f:	68 00 9b 02 c0       	push   0xc0029b00
c001ba34:	e8 1e d7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001ba39:	83 c4 10             	add    esp,0x10
c001ba3c:	eb 3d                	jmp    c001ba7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	55                   	push   ebp
c001ba42:	e8 37 72 ff ff       	call   c0012c7e <File::close()>
c001ba47:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ba4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ba4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba50:	59                   	pop    ecx
c001ba51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba55:	e8 76 3a ff ff       	call   c000f4d0 <free>
c001ba5a:	5b                   	pop    ebx
c001ba5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba5f:	e8 6c 3a ff ff       	call   c000f4d0 <free>
c001ba64:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba67:	e8 64 3a ff ff       	call   c000f4d0 <free>
c001ba6c:	5e                   	pop    esi
c001ba6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ba71:	e8 5a 3a ff ff       	call   c000f4d0 <free>
c001ba76:	83 c4 10             	add    esp,0x10
c001ba79:	eb 21                	jmp    c001ba9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001ba7b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001ba7f:	e9 2b fd ff ff       	jmp    c001b7af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ba84:	83 ec 0c             	sub    esp,0xc
c001ba87:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba8b:	e8 40 3a ff ff       	call   c000f4d0 <free>
c001ba90:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001ba94:	83 c4 10             	add    esp,0x10
c001ba97:	e9 a0 fc ff ff       	jmp    c001b73c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ba9c:	31 c0                	xor    eax,eax
c001ba9e:	eb 33                	jmp    c001bad3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001baa0:	83 ec 0c             	sub    esp,0xc
c001baa3:	55                   	push   ebp
c001baa4:	e8 d5 71 ff ff       	call   c0012c7e <File::close()>
c001baa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001baac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001baaf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bab2:	58                   	pop    eax
c001bab3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bab7:	e8 14 3a ff ff       	call   c000f4d0 <free>
c001babc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001babf:	e8 0c 3a ff ff       	call   c000f4d0 <free>
c001bac4:	5a                   	pop    edx
c001bac5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bac9:	e8 02 3a ff ff       	call   c000f4d0 <free>
c001bace:	83 c4 10             	add    esp,0x10
c001bad1:	b0 01                	mov    al,0x1
c001bad3:	81 c4 5c 03 00 00    	add    esp,0x35c
c001bad9:	5b                   	pop    ebx
c001bada:	5e                   	pop    esi
c001badb:	5f                   	pop    edi
c001badc:	5d                   	pop    ebp
c001badd:	c3                   	ret    

c001bade <Thr::getDriverBaseFromAddress(unsigned long)>:
c001bade:	56                   	push   esi
c001badf:	31 d2                	xor    edx,edx
c001bae1:	53                   	push   ebx
c001bae2:	8b 1d a0 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002caa0
c001bae8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001baec:	39 d3                	cmp    ebx,edx
c001baee:	7e 1b                	jle    c001bb0b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001baf0:	8b 04 95 c0 cc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3340]
c001baf7:	39 c8                	cmp    eax,ecx
c001baf9:	77 0d                	ja     c001bb08 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001bafb:	8b 34 95 c0 ca 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd3540]
c001bb02:	01 c6                	add    esi,eax
c001bb04:	39 ce                	cmp    esi,ecx
c001bb06:	77 05                	ja     c001bb0d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001bb08:	42                   	inc    edx
c001bb09:	eb e1                	jmp    c001baec <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001bb0b:	31 c0                	xor    eax,eax
c001bb0d:	5b                   	pop    ebx
c001bb0e:	5e                   	pop    esi
c001bb0f:	c3                   	ret    

c001bb10 <Thr::getDriverNameFromAddress(unsigned long)>:
c001bb10:	53                   	push   ebx
c001bb11:	31 c0                	xor    eax,eax
c001bb13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb17:	8b 1d a0 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002caa0
c001bb1d:	39 c3                	cmp    ebx,eax
c001bb1f:	7e 22                	jle    c001bb43 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001bb21:	8b 14 85 c0 cc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3340]
c001bb28:	39 ca                	cmp    edx,ecx
c001bb2a:	77 14                	ja     c001bb40 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bb2c:	03 14 85 c0 ca 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd3540]
c001bb33:	39 ca                	cmp    edx,ecx
c001bb35:	76 09                	jbe    c001bb40 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001bb37:	8b 04 85 c0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3140]
c001bb3e:	eb 05                	jmp    c001bb45 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001bb40:	40                   	inc    eax
c001bb41:	eb da                	jmp    c001bb1d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001bb43:	31 c0                	xor    eax,eax
c001bb45:	5b                   	pop    ebx
c001bb46:	c3                   	ret    

c001bb47 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001bb47:	53                   	push   ebx
c001bb48:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bb4c:	53                   	push   ebx
c001bb4d:	e8 8c ff ff ff       	call   c001bade <Thr::getDriverBaseFromAddress(unsigned long)>
c001bb52:	5a                   	pop    edx
c001bb53:	31 d2                	xor    edx,edx
c001bb55:	85 c0                	test   eax,eax
c001bb57:	74 04                	je     c001bb5d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001bb59:	89 da                	mov    edx,ebx
c001bb5b:	29 c2                	sub    edx,eax
c001bb5d:	89 d0                	mov    eax,edx
c001bb5f:	5b                   	pop    ebx
c001bb60:	c3                   	ret    

c001bb61 <Thr::loadDLL(char const*, bool)>:
c001bb61:	55                   	push   ebp
c001bb62:	57                   	push   edi
c001bb63:	56                   	push   esi
c001bb64:	53                   	push   ebx
c001bb65:	81 ec 34 01 00 00    	sub    esp,0x134
c001bb6b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001bb72:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001bb79:	56                   	push   esi
c001bb7a:	68 18 9b 02 c0       	push   0xc0029b18
c001bb7f:	e8 09 6b ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001bb84:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001bb8b:	e8 30 39 ff ff       	call   c000f4c0 <malloc>
c001bb90:	83 c4 0c             	add    esp,0xc
c001bb93:	89 c3                	mov    ebx,eax
c001bb95:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c001bb9b:	56                   	push   esi
c001bb9c:	50                   	push   eax
c001bb9d:	e8 1a 70 ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	85 db                	test   ebx,ebx
c001bba7:	75 3c                	jne    c001bbe5 <Thr::loadDLL(char const*, bool)+0x84>
c001bba9:	89 e8                	mov    eax,ebp
c001bbab:	84 c0                	test   al,al
c001bbad:	0f 84 b0 01 00 00    	je     c001bd63 <Thr::loadDLL(char const*, bool)+0x202>
c001bbb3:	50                   	push   eax
c001bbb4:	50                   	push   eax
c001bbb5:	68 29 9b 02 c0       	push   0xc0029b29
c001bbba:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001bbbe:	57                   	push   edi
c001bbbf:	e8 57 4b fe ff       	call   c000071b <strcpy>
c001bbc4:	58                   	pop    eax
c001bbc5:	5a                   	pop    edx
c001bbc6:	56                   	push   esi
c001bbc7:	57                   	push   edi
c001bbc8:	e8 05 4c fe ff       	call   c00007d2 <strcat>
c001bbcd:	59                   	pop    ecx
c001bbce:	58                   	pop    eax
c001bbcf:	68 3c 9b 02 c0       	push   0xc0029b3c
c001bbd4:	57                   	push   edi
c001bbd5:	e8 f8 4b fe ff       	call   c00007d2 <strcat>
c001bbda:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bbdd:	e8 75 d5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bbe2:	83 c4 10             	add    esp,0x10
c001bbe5:	50                   	push   eax
c001bbe6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001bbea:	50                   	push   eax
c001bbeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bbef:	50                   	push   eax
c001bbf0:	53                   	push   ebx
c001bbf1:	e8 d6 72 ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001bbf6:	83 c4 10             	add    esp,0x10
c001bbf9:	85 db                	test   ebx,ebx
c001bbfb:	74 0c                	je     c001bc09 <Thr::loadDLL(char const*, bool)+0xa8>
c001bbfd:	83 ec 0c             	sub    esp,0xc
c001bc00:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc02:	53                   	push   ebx
c001bc03:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001bc0e:	75 0a                	jne    c001bc1a <Thr::loadDLL(char const*, bool)+0xb9>
c001bc10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc14:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001bc18:	75 3c                	jne    c001bc56 <Thr::loadDLL(char const*, bool)+0xf5>
c001bc1a:	89 e8                	mov    eax,ebp
c001bc1c:	84 c0                	test   al,al
c001bc1e:	0f 84 3d 01 00 00    	je     c001bd61 <Thr::loadDLL(char const*, bool)+0x200>
c001bc24:	50                   	push   eax
c001bc25:	50                   	push   eax
c001bc26:	68 29 9b 02 c0       	push   0xc0029b29
c001bc2b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001bc2f:	53                   	push   ebx
c001bc30:	e8 e6 4a fe ff       	call   c000071b <strcpy>
c001bc35:	58                   	pop    eax
c001bc36:	5a                   	pop    edx
c001bc37:	56                   	push   esi
c001bc38:	53                   	push   ebx
c001bc39:	e8 94 4b fe ff       	call   c00007d2 <strcat>
c001bc3e:	59                   	pop    ecx
c001bc3f:	5f                   	pop    edi
c001bc40:	68 3c 9b 02 c0       	push   0xc0029b3c
c001bc45:	53                   	push   ebx
c001bc46:	e8 87 4b fe ff       	call   c00007d2 <strcat>
c001bc4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc4e:	e8 04 d5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bc53:	83 c4 10             	add    esp,0x10
c001bc56:	e8 d2 5b ff ff       	call   c001182d <Virt::getAKernelVAS()>
c001bc5b:	51                   	push   ecx
c001bc5c:	6a 03                	push   0x3
c001bc5e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001bc62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bc66:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001bc6c:	83 d3 00             	adc    ebx,0x0
c001bc6f:	89 ca                	mov    edx,ecx
c001bc71:	89 d1                	mov    ecx,edx
c001bc73:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001bc77:	51                   	push   ecx
c001bc78:	50                   	push   eax
c001bc79:	e8 ea 61 ff ff       	call   c0011e68 <VAS::allocatePages(int, int)>
c001bc7e:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc81:	89 c3                	mov    ebx,eax
c001bc83:	e8 11 4a fe ff       	call   c0000699 <strlen>
c001bc88:	8b 3d a0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002caa0
c001bc8e:	40                   	inc    eax
c001bc8f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc92:	e8 29 38 ff ff       	call   c000f4c0 <malloc>
c001bc97:	89 04 bd c0 ce 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3140],eax
c001bc9e:	5f                   	pop    edi
c001bc9f:	58                   	pop    eax
c001bca0:	a1 a0 ca 02 c0       	mov    eax,ds:0xc002caa0
c001bca5:	56                   	push   esi
c001bca6:	ff 34 85 c0 ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd3140]
c001bcad:	e8 69 4a fe ff       	call   c000071b <strcpy>
c001bcb2:	a1 a0 ca 02 c0       	mov    eax,ds:0xc002caa0
c001bcb7:	8d 50 01             	lea    edx,[eax+0x1]
c001bcba:	89 1c 85 c0 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3340],ebx
c001bcc1:	89 15 a0 ca 02 c0    	mov    DWORD PTR ds:0xc002caa0,edx
c001bcc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bccb:	83 c4 0c             	add    esp,0xc
c001bcce:	89 14 85 c0 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3540],edx
c001bcd5:	6a 01                	push   0x1
c001bcd7:	53                   	push   ebx
c001bcd8:	56                   	push   esi
c001bcd9:	e8 7f f6 ff ff       	call   c001b35d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	89 c7                	mov    edi,eax
c001bce3:	fe c8                	dec    al
c001bce5:	74 16                	je     c001bcfd <Thr::loadDLL(char const*, bool)+0x19c>
c001bce7:	89 e8                	mov    eax,ebp
c001bce9:	84 c0                	test   al,al
c001bceb:	74 10                	je     c001bcfd <Thr::loadDLL(char const*, bool)+0x19c>
c001bced:	83 ec 0c             	sub    esp,0xc
c001bcf0:	68 3e 9b 02 c0       	push   0xc0029b3e
c001bcf5:	e8 5d d4 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	31 f6                	xor    esi,esi
c001bcff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd07:	05 ff 0f 00 00       	add    eax,0xfff
c001bd0c:	83 d2 00             	adc    edx,0x0
c001bd0f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001bd13:	c1 ea 0c             	shr    edx,0xc
c001bd16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bd1e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001bd22:	ba 00 00 00 00       	mov    edx,0x0
c001bd27:	89 d0                	mov    eax,edx
c001bd29:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001bd2d:	73 2c                	jae    c001bd5b <Thr::loadDLL(char const*, bool)+0x1fa>
c001bd2f:	e8 f9 5a ff ff       	call   c001182d <Virt::getAKernelVAS()>
c001bd34:	89 f5                	mov    ebp,esi
c001bd36:	c1 e5 0c             	shl    ebp,0xc
c001bd39:	52                   	push   edx
c001bd3a:	01 dd                	add    ebp,ebx
c001bd3c:	52                   	push   edx
c001bd3d:	55                   	push   ebp
c001bd3e:	50                   	push   eax
c001bd3f:	e8 9e 5c ff ff       	call   c00119e2 <VAS::getPageTableEntry(unsigned long)>
c001bd44:	83 c4 10             	add    esp,0x10
c001bd47:	f6 00 60             	test   BYTE PTR [eax],0x60
c001bd4a:	75 0c                	jne    c001bd58 <Thr::loadDLL(char const*, bool)+0x1f7>
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	55                   	push   ebp
c001bd50:	e8 8b 3c ff ff       	call   c000f9e0 <Phys::freePage(unsigned long)>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	46                   	inc    esi
c001bd59:	eb a4                	jmp    c001bcff <Thr::loadDLL(char const*, bool)+0x19e>
c001bd5b:	89 f8                	mov    eax,edi
c001bd5d:	84 c0                	test   al,al
c001bd5f:	75 02                	jne    c001bd63 <Thr::loadDLL(char const*, bool)+0x202>
c001bd61:	31 db                	xor    ebx,ebx
c001bd63:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bd69:	89 d8                	mov    eax,ebx
c001bd6b:	5b                   	pop    ebx
c001bd6c:	5e                   	pop    esi
c001bd6d:	5f                   	pop    edi
c001bd6e:	5d                   	pop    ebp
c001bd6f:	c3                   	ret    

c001bd70 <Thr::executeDLL(unsigned long, void*)>:
c001bd70:	56                   	push   esi
c001bd71:	53                   	push   ebx
c001bd72:	51                   	push   ecx
c001bd73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bd7b:	85 db                	test   ebx,ebx
c001bd7d:	75 10                	jne    c001bd8f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001bd7f:	83 ec 0c             	sub    esp,0xc
c001bd82:	68 5d 9b 02 c0       	push   0xc0029b5d
c001bd87:	e8 cb d3 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001bd8c:	83 c4 10             	add    esp,0x10
c001bd8f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001bd93:	89 d8                	mov    eax,ebx
c001bd95:	5a                   	pop    edx
c001bd96:	5b                   	pop    ebx
c001bd97:	5e                   	pop    esi
c001bd98:	ff e0                	jmp    eax

c001bd9a <changeTSS>:
c001bd9a:	83 ec 14             	sub    esp,0x14
c001bd9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bda2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bda5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001bdaa:	c1 e2 15             	shl    edx,0x15
c001bdad:	29 d0                	sub    eax,edx
c001bdaf:	50                   	push   eax
c001bdb0:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001bdb5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bdbb:	05 7c 11 00 00       	add    eax,0x117c
c001bdc0:	50                   	push   eax
c001bdc1:	e8 16 52 ff ff       	call   c0010fdc <TSS::setESP(unsigned long)>
c001bdc6:	83 c4 1c             	add    esp,0x1c
c001bdc9:	c3                   	ret    

c001bdca <Process::addArgs(char**)>:
c001bdca:	57                   	push   edi
c001bdcb:	56                   	push   esi
c001bdcc:	53                   	push   ebx
c001bdcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bdd1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bdd5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001bddf:	85 ff                	test   edi,edi
c001bde1:	74 3d                	je     c001be20 <Process::addArgs(char**)+0x56>
c001bde3:	8b 07                	mov    eax,DWORD PTR [edi]
c001bde5:	85 c0                	test   eax,eax
c001bde7:	74 37                	je     c001be20 <Process::addArgs(char**)+0x56>
c001bde9:	31 db                	xor    ebx,ebx
c001bdeb:	83 ec 0c             	sub    esp,0xc
c001bdee:	50                   	push   eax
c001bdef:	e8 a5 48 fe ff       	call   c0000699 <strlen>
c001bdf4:	40                   	inc    eax
c001bdf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdf8:	e8 c3 36 ff ff       	call   c000f4c0 <malloc>
c001bdfd:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001be04:	5a                   	pop    edx
c001be05:	59                   	pop    ecx
c001be06:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001be09:	43                   	inc    ebx
c001be0a:	50                   	push   eax
c001be0b:	e8 0b 49 fe ff       	call   c000071b <strcpy>
c001be10:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001be1c:	85 c0                	test   eax,eax
c001be1e:	75 cb                	jne    c001bdeb <Process::addArgs(char**)+0x21>
c001be20:	5b                   	pop    ebx
c001be21:	5e                   	pop    esi
c001be22:	5f                   	pop    edi
c001be23:	c3                   	ret    

c001be24 <Process::Process(char const*, Process*, char**)>:
c001be24:	56                   	push   esi
c001be25:	53                   	push   ebx
c001be26:	83 ec 14             	sub    esp,0x14
c001be29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be2d:	05 0c 02 00 00       	add    eax,0x20c
c001be32:	bb 07 00 00 00       	mov    ebx,0x7
c001be37:	89 c6                	mov    esi,eax
c001be39:	85 db                	test   ebx,ebx
c001be3b:	78 12                	js     c001be4f <Process::Process(char const*, Process*, char**)+0x2b>
c001be3d:	83 ec 0c             	sub    esp,0xc
c001be40:	56                   	push   esi
c001be41:	e8 bc ac 00 00       	call   c0026b02 <ThreadControlBlock::ThreadControlBlock()>
c001be46:	83 c4 10             	add    esp,0x10
c001be49:	83 c6 63             	add    esi,0x63
c001be4c:	4b                   	dec    ebx
c001be4d:	eb ea                	jmp    c001be39 <Process::Process(char const*, Process*, char**)+0x15>
c001be4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be53:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001be5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be5e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001be67:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c001be6c:	8d 50 01             	lea    edx,[eax+0x1]
c001be6f:	89 15 24 b3 02 c0    	mov    DWORD PTR ds:0xc002b324,edx
c001be75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be79:	89 02                	mov    DWORD PTR [edx],eax
c001be7b:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001be83:	83 ec 0c             	sub    esp,0xc
c001be86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001be8a:	e8 31 36 ff ff       	call   c000f4c0 <malloc>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	89 c3                	mov    ebx,eax
c001be94:	83 ec 08             	sub    esp,0x8
c001be97:	6a 00                	push   0x0
c001be99:	53                   	push   ebx
c001be9a:	e8 71 63 ff ff       	call   c0012210 <VAS::VAS(bool)>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea6:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001beac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beb0:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001beba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bebe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bec2:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001bec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001becc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bed2:	85 c0                	test   eax,eax
c001bed4:	74 42                	je     c001bf18 <Process::Process(char const*, Process*, char**)+0xf4>
c001bed6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beda:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001bee0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001beea:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001bef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bef4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001befa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001bf00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf04:	05 0c 01 00 00       	add    eax,0x10c
c001bf09:	83 ec 08             	sub    esp,0x8
c001bf0c:	52                   	push   edx
c001bf0d:	50                   	push   eax
c001bf0e:	e8 08 48 fe ff       	call   c000071b <strcpy>
c001bf13:	83 c4 10             	add    esp,0x10
c001bf16:	eb 63                	jmp    c001bf7b <Process::Process(char const*, Process*, char**)+0x157>
c001bf18:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001bf20:	83 ec 0c             	sub    esp,0xc
c001bf23:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf27:	e8 94 35 ff ff       	call   c000f4c0 <malloc>
c001bf2c:	83 c4 10             	add    esp,0x10
c001bf2f:	89 c3                	mov    ebx,eax
c001bf31:	83 ec 08             	sub    esp,0x8
c001bf34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf38:	53                   	push   ebx
c001bf39:	e8 9c 4d ff ff       	call   c0010cda <VgaText::VgaText(char const*)>
c001bf3e:	83 c4 10             	add    esp,0x10
c001bf41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf45:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001bf4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bf55:	83 ec 0c             	sub    esp,0xc
c001bf58:	50                   	push   eax
c001bf59:	e8 7d 41 ff ff       	call   c00100db <addToTerminalCycle(VgaText*)>
c001bf5e:	83 c4 10             	add    esp,0x10
c001bf61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf65:	05 0c 01 00 00       	add    eax,0x10c
c001bf6a:	83 ec 08             	sub    esp,0x8
c001bf6d:	68 87 9b 02 c0       	push   0xc0029b87
c001bf72:	50                   	push   eax
c001bf73:	e8 a3 47 fe ff       	call   c000071b <strcpy>
c001bf78:	83 c4 10             	add    esp,0x10
c001bf7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf7f:	83 c0 0c             	add    eax,0xc
c001bf82:	83 ec 08             	sub    esp,0x8
c001bf85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf89:	50                   	push   eax
c001bf8a:	e8 8c 47 fe ff       	call   c000071b <strcpy>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	83 ec 08             	sub    esp,0x8
c001bf95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bf99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf9d:	e8 28 fe ff ff       	call   c001bdca <Process::addArgs(char**)>
c001bfa2:	83 c4 10             	add    esp,0x10
c001bfa5:	83 ec 08             	sub    esp,0x8
c001bfa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfb0:	e8 74 ee ff ff       	call   c001ae29 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001bfb5:	83 c4 10             	add    esp,0x10
c001bfb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bfbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bfc0:	83 f0 01             	xor    eax,0x1
c001bfc3:	88 c2                	mov    dl,al
c001bfc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfc9:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001bfcf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001bfd4:	83 ec 08             	sub    esp,0x8
c001bfd7:	50                   	push   eax
c001bfd8:	68 84 9c 02 c0       	push   0xc0029c84
c001bfdd:	e8 ab 66 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	90                   	nop
c001bfe6:	83 c4 14             	add    esp,0x14
c001bfe9:	5b                   	pop    ebx
c001bfea:	5e                   	pop    esi
c001bfeb:	c3                   	ret    

c001bfec <Process::Process(bool, char const*, Process*, char**)>:
c001bfec:	56                   	push   esi
c001bfed:	53                   	push   ebx
c001bfee:	83 ec 24             	sub    esp,0x24
c001bff1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bff5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bff9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bffd:	05 0c 02 00 00       	add    eax,0x20c
c001c002:	bb 07 00 00 00       	mov    ebx,0x7
c001c007:	89 c6                	mov    esi,eax
c001c009:	85 db                	test   ebx,ebx
c001c00b:	78 12                	js     c001c01f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001c00d:	83 ec 0c             	sub    esp,0xc
c001c010:	56                   	push   esi
c001c011:	e8 ec aa 00 00       	call   c0026b02 <ThreadControlBlock::ThreadControlBlock()>
c001c016:	83 c4 10             	add    esp,0x10
c001c019:	83 c6 63             	add    esi,0x63
c001c01c:	4b                   	dec    ebx
c001c01d:	eb ea                	jmp    c001c009 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001c01f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c023:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001c02a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c02e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001c037:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c001c03c:	8d 50 01             	lea    edx,[eax+0x1]
c001c03f:	89 15 24 b3 02 c0    	mov    DWORD PTR ds:0xc002b324,edx
c001c045:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c049:	89 02                	mov    DWORD PTR [edx],eax
c001c04b:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001c053:	83 ec 0c             	sub    esp,0xc
c001c056:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c05a:	e8 61 34 ff ff       	call   c000f4c0 <malloc>
c001c05f:	83 c4 10             	add    esp,0x10
c001c062:	89 c3                	mov    ebx,eax
c001c064:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c069:	83 ec 08             	sub    esp,0x8
c001c06c:	50                   	push   eax
c001c06d:	53                   	push   ebx
c001c06e:	e8 9d 61 ff ff       	call   c0012210 <VAS::VAS(bool)>
c001c073:	83 c4 10             	add    esp,0x10
c001c076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c07a:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001c080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c084:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c08e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c092:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c096:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001c09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0a0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0a6:	85 c0                	test   eax,eax
c001c0a8:	74 42                	je     c001c0ec <Process::Process(bool, char const*, Process*, char**)+0x100>
c001c0aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0b4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c0ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0be:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001c0c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0c8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001c0d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c0d8:	05 0c 01 00 00       	add    eax,0x10c
c001c0dd:	83 ec 08             	sub    esp,0x8
c001c0e0:	52                   	push   edx
c001c0e1:	50                   	push   eax
c001c0e2:	e8 34 46 fe ff       	call   c000071b <strcpy>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	eb 63                	jmp    c001c14f <Process::Process(bool, char const*, Process*, char**)+0x163>
c001c0ec:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001c0f4:	83 ec 0c             	sub    esp,0xc
c001c0f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c0fb:	e8 c0 33 ff ff       	call   c000f4c0 <malloc>
c001c100:	83 c4 10             	add    esp,0x10
c001c103:	89 c3                	mov    ebx,eax
c001c105:	83 ec 08             	sub    esp,0x8
c001c108:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c10c:	53                   	push   ebx
c001c10d:	e8 c8 4b ff ff       	call   c0010cda <VgaText::VgaText(char const*)>
c001c112:	83 c4 10             	add    esp,0x10
c001c115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c119:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001c11f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c123:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c129:	83 ec 0c             	sub    esp,0xc
c001c12c:	50                   	push   eax
c001c12d:	e8 a9 3f ff ff       	call   c00100db <addToTerminalCycle(VgaText*)>
c001c132:	83 c4 10             	add    esp,0x10
c001c135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c139:	05 0c 01 00 00       	add    eax,0x10c
c001c13e:	83 ec 08             	sub    esp,0x8
c001c141:	68 87 9b 02 c0       	push   0xc0029b87
c001c146:	50                   	push   eax
c001c147:	e8 cf 45 fe ff       	call   c000071b <strcpy>
c001c14c:	83 c4 10             	add    esp,0x10
c001c14f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c153:	83 c0 0c             	add    eax,0xc
c001c156:	83 ec 08             	sub    esp,0x8
c001c159:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c15d:	50                   	push   eax
c001c15e:	e8 b8 45 fe ff       	call   c000071b <strcpy>
c001c163:	83 c4 10             	add    esp,0x10
c001c166:	83 ec 08             	sub    esp,0x8
c001c169:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c16d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c171:	e8 54 fc ff ff       	call   c001bdca <Process::addArgs(char**)>
c001c176:	83 c4 10             	add    esp,0x10
c001c179:	90                   	nop
c001c17a:	83 c4 24             	add    esp,0x24
c001c17d:	5b                   	pop    ebx
c001c17e:	5e                   	pop    esi
c001c17f:	c3                   	ret    

c001c180 <disableIRQs()>:
c001c180:	fa                   	cli    
c001c181:	ff 05 6c d2 02 c0    	inc    DWORD PTR ds:0xc002d26c
c001c187:	c3                   	ret    

c001c188 <getIRQNestingLevel()>:
c001c188:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c001c18d:	c3                   	ret    

c001c18e <enableIRQs()>:
c001c18e:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c001c193:	48                   	dec    eax
c001c194:	a3 6c d2 02 c0       	mov    ds:0xc002d26c,eax
c001c199:	75 01                	jne    c001c19c <enableIRQs()+0xe>
c001c19b:	fb                   	sti    
c001c19c:	c3                   	ret    

c001c19d <lockScheduler()>:
c001c19d:	eb e1                	jmp    c001c180 <disableIRQs()>

c001c19f <unlockScheduler()>:
c001c19f:	eb ed                	jmp    c001c18e <enableIRQs()>

c001c1a1 <userModeEntryPoint(void*)>:
c001c1a1:	83 ec 0c             	sub    esp,0xc
c001c1a4:	e8 f6 ff ff ff       	call   c001c19f <unlockScheduler()>
c001c1a9:	fb                   	sti    
c001c1aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b2:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001c1b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c1bc:	83 c4 0c             	add    esp,0xc
c001c1bf:	e9 1c 41 fe ff       	jmp    c00002e0 <goToUsermode>

c001c1c4 <lockStuff()>:
c001c1c4:	e8 b7 ff ff ff       	call   c001c180 <disableIRQs()>
c001c1c9:	ff 05 68 d2 02 c0    	inc    DWORD PTR ds:0xc002d268
c001c1cf:	c3                   	ret    

c001c1d0 <taskStartupFunction>:
c001c1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d5:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001c1d8:	c3                   	ret    

c001c1d9 <updateTimeUsed()>:
c001c1d9:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001c1de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c1e4:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001c1eb:	74 50                	je     c001c23d <updateTimeUsed()+0x64>
c001c1ed:	57                   	push   edi
c001c1ee:	56                   	push   esi
c001c1ef:	53                   	push   ebx
c001c1f0:	0f 31                	rdtsc  
c001c1f2:	89 c1                	mov    ecx,eax
c001c1f4:	a3 a8 d2 02 c0       	mov    ds:0xc002d2a8,eax
c001c1f9:	2b 0d 98 d2 02 c0    	sub    ecx,DWORD PTR ds:0xc002d298
c001c1ff:	89 d3                	mov    ebx,edx
c001c201:	89 0d a0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a0,ecx
c001c207:	1b 1d 9c d2 02 c0    	sbb    ebx,DWORD PTR ds:0xc002d29c
c001c20d:	a3 98 d2 02 c0       	mov    ds:0xc002d298,eax
c001c212:	89 1d a4 d2 02 c0    	mov    DWORD PTR ds:0xc002d2a4,ebx
c001c218:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c21d:	89 15 ac d2 02 c0    	mov    DWORD PTR ds:0xc002d2ac,edx
c001c223:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001c226:	89 15 9c d2 02 c0    	mov    DWORD PTR ds:0xc002d29c,edx
c001c22c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001c22f:	01 f1                	add    ecx,esi
c001c231:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001c234:	11 fb                	adc    ebx,edi
c001c236:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001c239:	5b                   	pop    ebx
c001c23a:	5e                   	pop    esi
c001c23b:	5f                   	pop    edi
c001c23c:	c3                   	ret    
c001c23d:	c3                   	ret    

c001c23e <switchToThread(ThreadControlBlock*)>:
c001c23e:	53                   	push   ebx
c001c23f:	83 ec 08             	sub    esp,0x8
c001c242:	a1 68 d2 02 c0       	mov    eax,ds:0xc002d268
c001c247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c24b:	85 c0                	test   eax,eax
c001c24d:	75 30                	jne    c001c27f <switchToThread(ThreadControlBlock*)+0x41>
c001c24f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001c252:	3c ff                	cmp    al,0xff
c001c254:	74 25                	je     c001c27b <switchToThread(ThreadControlBlock*)+0x3d>
c001c256:	0f b6 d0             	movzx  edx,al
c001c259:	b8 84 03 00 00       	mov    eax,0x384
c001c25e:	29 d0                	sub    eax,edx
c001c260:	c1 e0 10             	shl    eax,0x10
c001c263:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001c266:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001c269:	e8 6b ff ff ff       	call   c001c1d9 <updateTimeUsed()>
c001c26e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001c272:	83 c4 08             	add    esp,0x8
c001c275:	5b                   	pop    ebx
c001c276:	e9 9d 40 fe ff       	jmp    c0000318 <switchToThreadASM>
c001c27b:	31 c0                	xor    eax,eax
c001c27d:	eb e7                	jmp    c001c266 <switchToThread(ThreadControlBlock*)+0x28>
c001c27f:	c7 05 64 d2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d264,0x1
c001c289:	83 c4 08             	add    esp,0x8
c001c28c:	5b                   	pop    ebx
c001c28d:	c3                   	ret    

c001c28e <Semaphore::Semaphore(int)>:
c001c28e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c296:	89 10                	mov    DWORD PTR [eax],edx
c001c298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c29c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c2a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c2b9:	90                   	nop
c001c2ba:	c3                   	ret    
c001c2bb:	90                   	nop

c001c2bc <Mutex::Mutex()>:
c001c2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2c0:	6a 01                	push   0x1
c001c2c2:	50                   	push   eax
c001c2c3:	e8 c6 ff ff ff       	call   c001c28e <Semaphore::Semaphore(int)>
c001c2c8:	83 c4 08             	add    esp,0x8
c001c2cb:	90                   	nop
c001c2cc:	c3                   	ret    
c001c2cd:	90                   	nop

c001c2ce <Process::createThread(void (*)(void*), void*, int)>:
c001c2ce:	55                   	push   ebp
c001c2cf:	31 c9                	xor    ecx,ecx
c001c2d1:	57                   	push   edi
c001c2d2:	56                   	push   esi
c001c2d3:	53                   	push   ebx
c001c2d4:	83 ec 1c             	sub    esp,0x1c
c001c2d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c2db:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001c2e2:	89 f2                	mov    edx,esi
c001c2e4:	0f b7 c2             	movzx  eax,dx
c001c2e7:	83 e2 01             	and    edx,0x1
c001c2ea:	74 14                	je     c001c300 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001c2ec:	d1 f8                	sar    eax,1
c001c2ee:	41                   	inc    ecx
c001c2ef:	89 c2                	mov    edx,eax
c001c2f1:	83 f9 10             	cmp    ecx,0x10
c001c2f4:	75 ee                	jne    c001c2e4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001c2f6:	83 c4 1c             	add    esp,0x1c
c001c2f9:	31 c0                	xor    eax,eax
c001c2fb:	5b                   	pop    ebx
c001c2fc:	5e                   	pop    esi
c001c2fd:	5f                   	pop    edi
c001c2fe:	5d                   	pop    ebp
c001c2ff:	c3                   	ret    
c001c300:	83 ec 08             	sub    esp,0x8
c001c303:	b8 01 00 00 00       	mov    eax,0x1
c001c308:	d3 e0                	shl    eax,cl
c001c30a:	09 c6                	or     esi,eax
c001c30c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c312:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001c319:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001c31c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c31f:	01 ce                	add    esi,ecx
c001c321:	89 f0                	mov    eax,esi
c001c323:	c1 e0 05             	shl    eax,0x5
c001c326:	01 c6                	add    esi,eax
c001c328:	8d 04 33             	lea    eax,[ebx+esi*1]
c001c32b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001c331:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001c337:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001c33b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001c341:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001c347:	89 ca                	mov    edx,ecx
c001c349:	f7 da                	neg    edx
c001c34b:	c1 e2 15             	shl    edx,0x15
c001c34e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001c354:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001c35a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001c35e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001c368:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001c36e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c372:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001c378:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001c382:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001c38c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001c393:	50                   	push   eax
c001c394:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c398:	68 88 d2 02 c0       	push   0xc002d288
c001c39d:	e8 ee a5 00 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c3a2:	83 c4 10             	add    esp,0x10
c001c3a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3a9:	83 c4 1c             	add    esp,0x1c
c001c3ac:	5b                   	pop    ebx
c001c3ad:	5e                   	pop    esi
c001c3ae:	5f                   	pop    edi
c001c3af:	5d                   	pop    ebp
c001c3b0:	c3                   	ret    
c001c3b1:	90                   	nop

c001c3b2 <Process::createUserThread()>:
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	68 80 00 00 00       	push   0x80
c001c3ba:	6a 00                	push   0x0
c001c3bc:	68 a1 c1 01 c0       	push   0xc001c1a1
c001c3c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c5:	e8 04 ff ff ff       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c001c3ca:	83 c4 1c             	add    esp,0x1c
c001c3cd:	c3                   	ret    

c001c3ce <setupMultitasking(void (*)())>:
c001c3ce:	56                   	push   esi
c001c3cf:	53                   	push   ebx
c001c3d0:	53                   	push   ebx
c001c3d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3d5:	eb 10                	jmp    c001c3e7 <setupMultitasking(void (*)())+0x19>
c001c3d7:	83 ec 0c             	sub    esp,0xc
c001c3da:	68 88 d2 02 c0       	push   0xc002d288
c001c3df:	e8 fe a4 00 00       	call   c00268e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	83 ec 0c             	sub    esp,0xc
c001c3ea:	68 88 d2 02 c0       	push   0xc002d288
c001c3ef:	e8 d2 a4 00 00       	call   c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	84 c0                	test   al,al
c001c3f9:	74 dc                	je     c001c3d7 <setupMultitasking(void (*)())+0x9>
c001c3fb:	83 ec 0c             	sub    esp,0xc
c001c3fe:	68 3b 07 00 00       	push   0x73b
c001c403:	e8 b8 30 ff ff       	call   c000f4c0 <malloc>
c001c408:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001c40f:	89 c3                	mov    ebx,eax
c001c411:	6a 00                	push   0x0
c001c413:	68 8b 9b 02 c0       	push   0xc0029b8b
c001c418:	6a 01                	push   0x1
c001c41a:	50                   	push   eax
c001c41b:	e8 cc fb ff ff       	call   c001bfec <Process::Process(bool, char const*, Process*, char**)>
c001c420:	83 c4 18             	add    esp,0x18
c001c423:	89 1d 94 d2 02 c0    	mov    DWORD PTR ds:0xc002d294,ebx
c001c429:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c42f:	68 ac 9c 02 c0       	push   0xc0029cac
c001c434:	e8 54 62 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c439:	58                   	pop    eax
c001c43a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001c440:	e8 0a 44 ff ff       	call   c001084f <setActiveTerminal(VgaText*)>
c001c445:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001c44d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001c453:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c456:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001c460:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001c466:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001c46c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001c476:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001c480:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001c48a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001c490:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001c496:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001c4a0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001c4a6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001c4b0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001c4b6:	5a                   	pop    edx
c001c4b7:	59                   	pop    ecx
c001c4b8:	68 87 9b 02 c0       	push   0xc0029b87
c001c4bd:	50                   	push   eax
c001c4be:	e8 58 42 fe ff       	call   c000071b <strcpy>
c001c4c3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001c4ca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001c4ce:	83 c4 14             	add    esp,0x14
c001c4d1:	5b                   	pop    ebx
c001c4d2:	5e                   	pop    esi
c001c4d3:	e9 32 3e fe ff       	jmp    c000030a <switchToThreadASMFirstTime>

c001c4d8 <schedule()>:
c001c4d8:	a1 68 d2 02 c0       	mov    eax,ds:0xc002d268
c001c4dd:	85 c0                	test   eax,eax
c001c4df:	74 0b                	je     c001c4ec <schedule()+0x14>
c001c4e1:	c7 05 64 d2 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d264,0x1
c001c4eb:	c3                   	ret    
c001c4ec:	53                   	push   ebx
c001c4ed:	83 ec 14             	sub    esp,0x14
c001c4f0:	68 88 d2 02 c0       	push   0xc002d288
c001c4f5:	e8 cc a3 00 00       	call   c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c4fa:	83 c4 10             	add    esp,0x10
c001c4fd:	84 c0                	test   al,al
c001c4ff:	75 38                	jne    c001c539 <schedule()+0x61>
c001c501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c506:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c509:	4a                   	dec    edx
c001c50a:	74 32                	je     c001c53e <schedule()+0x66>
c001c50c:	83 ec 0c             	sub    esp,0xc
c001c50f:	68 88 d2 02 c0       	push   0xc002d288
c001c514:	e8 a5 a3 00 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c519:	c7 04 24 88 d2 02 c0 	mov    DWORD PTR [esp],0xc002d288
c001c520:	89 c3                	mov    ebx,eax
c001c522:	e8 bb a3 00 00       	call   c00268e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c527:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001c52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c531:	e8 08 fd ff ff       	call   c001c23e <switchToThread(ThreadControlBlock*)>
c001c536:	83 c4 10             	add    esp,0x10
c001c539:	83 c4 08             	add    esp,0x8
c001c53c:	5b                   	pop    ebx
c001c53d:	c3                   	ret    
c001c53e:	83 ec 08             	sub    esp,0x8
c001c541:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001c548:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c54e:	68 88 d2 02 c0       	push   0xc002d288
c001c553:	e8 38 a4 00 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c558:	83 c4 10             	add    esp,0x10
c001c55b:	eb af                	jmp    c001c50c <schedule()+0x34>

c001c55d <unlockStuff()>:
c001c55d:	a1 68 d2 02 c0       	mov    eax,ds:0xc002d268
c001c562:	48                   	dec    eax
c001c563:	a3 68 d2 02 c0       	mov    ds:0xc002d268,eax
c001c568:	75 09                	jne    c001c573 <unlockStuff()+0x16>
c001c56a:	a1 64 d2 02 c0       	mov    eax,ds:0xc002d264
c001c56f:	85 c0                	test   eax,eax
c001c571:	75 05                	jne    c001c578 <unlockStuff()+0x1b>
c001c573:	e9 16 fc ff ff       	jmp    c001c18e <enableIRQs()>
c001c578:	83 ec 0c             	sub    esp,0xc
c001c57b:	c7 05 64 d2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d264,0x0
c001c585:	e8 4e ff ff ff       	call   c001c4d8 <schedule()>
c001c58a:	83 c4 0c             	add    esp,0xc
c001c58d:	e9 fc fb ff ff       	jmp    c001c18e <enableIRQs()>

c001c592 <Semaphore::tryAcquire()>:
c001c592:	83 ec 0c             	sub    esp,0xc
c001c595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c599:	e8 26 fc ff ff       	call   c001c1c4 <lockStuff()>
c001c59e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c5a1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c5a3:	7c 0b                	jl     c001c5b0 <Semaphore::tryAcquire()+0x1e>
c001c5a5:	e8 b3 ff ff ff       	call   c001c55d <unlockStuff()>
c001c5aa:	31 c0                	xor    eax,eax
c001c5ac:	83 c4 0c             	add    esp,0xc
c001c5af:	c3                   	ret    
c001c5b0:	42                   	inc    edx
c001c5b1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c5b4:	e8 a4 ff ff ff       	call   c001c55d <unlockStuff()>
c001c5b9:	b0 01                	mov    al,0x1
c001c5bb:	83 c4 0c             	add    esp,0xc
c001c5be:	c3                   	ret    
c001c5bf:	90                   	nop

c001c5c0 <Semaphore::assertLocked(char const*)>:
c001c5c0:	83 ec 0c             	sub    esp,0xc
c001c5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5cb:	e8 f4 fb ff ff       	call   c001c1c4 <lockStuff()>
c001c5d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c5d2:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001c5d5:	7c 05                	jl     c001c5dc <Semaphore::assertLocked(char const*)+0x1c>
c001c5d7:	83 c4 0c             	add    esp,0xc
c001c5da:	eb 81                	jmp    c001c55d <unlockStuff()>
c001c5dc:	83 ec 0c             	sub    esp,0xc
c001c5df:	52                   	push   edx
c001c5e0:	e8 72 cb ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	83 c4 0c             	add    esp,0xc
c001c5eb:	e9 6d ff ff ff       	jmp    c001c55d <unlockStuff()>

c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001c5f0:	83 ec 0c             	sub    esp,0xc
c001c5f3:	e8 90 fb ff ff       	call   c001c188 <getIRQNestingLevel()>
c001c5f8:	83 ec 08             	sub    esp,0x8
c001c5fb:	50                   	push   eax
c001c5fc:	68 e0 9c 02 c0       	push   0xc0029ce0
c001c601:	e8 87 60 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c606:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c60a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c60f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c612:	e8 c1 fe ff ff       	call   c001c4d8 <schedule()>
c001c617:	e8 83 fb ff ff       	call   c001c19f <unlockScheduler()>
c001c61c:	e8 67 fb ff ff       	call   c001c188 <getIRQNestingLevel()>
c001c621:	5a                   	pop    edx
c001c622:	59                   	pop    ecx
c001c623:	50                   	push   eax
c001c624:	68 14 9d 02 c0       	push   0xc0029d14
c001c629:	e8 5f 60 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c62e:	83 c4 1c             	add    esp,0x1c
c001c631:	c3                   	ret    

c001c632 <blockTask(TaskState)>:
c001c632:	83 ec 0c             	sub    esp,0xc
c001c635:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c639:	e8 5f fb ff ff       	call   c001c19d <lockScheduler()>
c001c63e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c643:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c646:	e8 8d fe ff ff       	call   c001c4d8 <schedule()>
c001c64b:	83 c4 0c             	add    esp,0xc
c001c64e:	e9 4c fb ff ff       	jmp    c001c19f <unlockScheduler()>

c001c653 <waitTask(int, int*, int)>:
c001c653:	83 ec 18             	sub    esp,0x18
c001c656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c65b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c65f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001c662:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c666:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c66b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001c66e:	6a 07                	push   0x7
c001c670:	e8 bd ff ff ff       	call   c001c632 <blockTask(TaskState)>
c001c675:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c67a:	83 c4 10             	add    esp,0x10
c001c67d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001c680:	85 d2                	test   edx,edx
c001c682:	74 0a                	je     c001c68e <waitTask(int, int*, int)+0x3b>
c001c684:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001c687:	89 02                	mov    DWORD PTR [edx],eax
c001c689:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c68e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001c691:	83 c4 0c             	add    esp,0xc
c001c694:	c3                   	ret    

c001c695 <nanoSleepUntil(unsigned long long)>:
c001c695:	83 ec 0c             	sub    esp,0xc
c001c698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6a0:	3b 05 f0 c3 02 c0    	cmp    eax,DWORD PTR ds:0xc002c3f0
c001c6a6:	89 d1                	mov    ecx,edx
c001c6a8:	1b 0d f4 c3 02 c0    	sbb    ecx,DWORD PTR ds:0xc002c3f4
c001c6ae:	73 04                	jae    c001c6b4 <nanoSleepUntil(unsigned long long)+0x1f>
c001c6b0:	83 c4 0c             	add    esp,0xc
c001c6b3:	c3                   	ret    
c001c6b4:	e8 0b fb ff ff       	call   c001c1c4 <lockStuff()>
c001c6b9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c6bf:	83 ec 08             	sub    esp,0x8
c001c6c2:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001c6c5:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001c6c8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001c6ce:	68 7c d2 02 c0       	push   0xc002d27c
c001c6d3:	e8 b8 a2 00 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c6d8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001c6df:	e8 4e ff ff ff       	call   c001c632 <blockTask(TaskState)>
c001c6e4:	83 c4 1c             	add    esp,0x1c
c001c6e7:	e9 71 fe ff ff       	jmp    c001c55d <unlockStuff()>

c001c6ec <nanoSleep(unsigned long long)>:
c001c6ec:	a1 f0 c3 02 c0       	mov    eax,ds:0xc002c3f0
c001c6f1:	8b 15 f4 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c3f4
c001c6f7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001c6fb:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001c6ff:	eb 94                	jmp    c001c695 <nanoSleepUntil(unsigned long long)>

c001c701 <sleep(unsigned long long)>:
c001c701:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001c709:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001c70e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001c712:	01 ca                	add    edx,ecx
c001c714:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c718:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c71c:	eb ce                	jmp    c001c6ec <nanoSleep(unsigned long long)>

c001c71e <Semaphore::acquire()>:
c001c71e:	83 ec 0c             	sub    esp,0xc
c001c721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c725:	e8 9a fa ff ff       	call   c001c1c4 <lockStuff()>
c001c72a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001c72d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001c72f:	7d 0c                	jge    c001c73d <Semaphore::acquire()+0x1f>
c001c731:	42                   	inc    edx
c001c732:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c735:	83 c4 0c             	add    esp,0xc
c001c738:	e9 20 fe ff ff       	jmp    c001c55d <unlockStuff()>
c001c73d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c743:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001c74a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c74d:	85 d2                	test   edx,edx
c001c74f:	74 2a                	je     c001c77b <Semaphore::acquire()+0x5d>
c001c751:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c754:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c75a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001c75d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c763:	83 ec 0c             	sub    esp,0xc
c001c766:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c769:	6a 05                	push   0x5
c001c76b:	e8 c2 fe ff ff       	call   c001c632 <blockTask(TaskState)>
c001c770:	83 c4 10             	add    esp,0x10
c001c773:	83 c4 0c             	add    esp,0xc
c001c776:	e9 e2 fd ff ff       	jmp    c001c55d <unlockStuff()>
c001c77b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c781:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c784:	eb d7                	jmp    c001c75d <Semaphore::acquire()+0x3f>

c001c786 <taskReturned>:
c001c786:	83 ec 18             	sub    esp,0x18
c001c789:	68 48 9d 02 c0       	push   0xc0029d48
c001c78e:	e8 c4 c9 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001c793:	83 c4 10             	add    esp,0x10
c001c796:	83 ec 0c             	sub    esp,0xc
c001c799:	6a 02                	push   0x2
c001c79b:	e8 92 fe ff ff       	call   c001c632 <blockTask(TaskState)>
c001c7a0:	e8 f8 f9 ff ff       	call   c001c19d <lockScheduler()>
c001c7a5:	e8 2e fd ff ff       	call   c001c4d8 <schedule()>
c001c7aa:	e8 f0 f9 ff ff       	call   c001c19f <unlockScheduler()>
c001c7af:	83 c4 10             	add    esp,0x10
c001c7b2:	eb e2                	jmp    c001c796 <taskReturned+0x10>

c001c7b4 <unblockTask(ThreadControlBlock*)>:
c001c7b4:	53                   	push   ebx
c001c7b5:	83 ec 08             	sub    esp,0x8
c001c7b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7bc:	e8 dc f9 ff ff       	call   c001c19d <lockScheduler()>
c001c7c1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c7c4:	85 c0                	test   eax,eax
c001c7c6:	74 5c                	je     c001c824 <unblockTask(ThreadControlBlock*)+0x70>
c001c7c8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c7cb:	48                   	dec    eax
c001c7cc:	74 31                	je     c001c7ff <unblockTask(ThreadControlBlock*)+0x4b>
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	68 88 d2 02 c0       	push   0xc002d288
c001c7d6:	e8 e3 a0 00 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c7db:	83 c4 10             	add    esp,0x10
c001c7de:	85 c0                	test   eax,eax
c001c7e0:	75 17                	jne    c001c7f9 <unblockTask(ThreadControlBlock*)+0x45>
c001c7e2:	eb 65                	jmp    c001c849 <unblockTask(ThreadControlBlock*)+0x95>
c001c7e4:	83 ec 08             	sub    esp,0x8
c001c7e7:	50                   	push   eax
c001c7e8:	68 88 d2 02 c0       	push   0xc002d288
c001c7ed:	e8 a6 a3 00 00       	call   c0026b98 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001c7f2:	83 c4 10             	add    esp,0x10
c001c7f5:	85 c0                	test   eax,eax
c001c7f7:	74 50                	je     c001c849 <unblockTask(ThreadControlBlock*)+0x95>
c001c7f9:	39 c3                	cmp    ebx,eax
c001c7fb:	75 e7                	jne    c001c7e4 <unblockTask(ThreadControlBlock*)+0x30>
c001c7fd:	eb 1c                	jmp    c001c81b <unblockTask(ThreadControlBlock*)+0x67>
c001c7ff:	83 ec 0c             	sub    esp,0xc
c001c802:	68 38 9e 02 c0       	push   0xc0029e38
c001c807:	e8 81 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c80c:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c001c813:	e8 75 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	83 c4 08             	add    esp,0x8
c001c81e:	5b                   	pop    ebx
c001c81f:	e9 7b f9 ff ff       	jmp    c001c19f <unlockScheduler()>
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	68 7c 9d 02 c0       	push   0xc0029d7c
c001c82c:	e8 5c 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c831:	c7 04 24 c4 9d 02 c0 	mov    DWORD PTR [esp],0xc0029dc4
c001c838:	e8 50 5e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001c83d:	83 c4 10             	add    esp,0x10
c001c840:	83 c4 08             	add    esp,0x8
c001c843:	5b                   	pop    ebx
c001c844:	e9 56 f9 ff ff       	jmp    c001c19f <unlockScheduler()>
c001c849:	83 ec 08             	sub    esp,0x8
c001c84c:	53                   	push   ebx
c001c84d:	68 88 d2 02 c0       	push   0xc002d288
c001c852:	e8 39 a1 00 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	83 c4 08             	add    esp,0x8
c001c85d:	5b                   	pop    ebx
c001c85e:	e9 3c f9 ff ff       	jmp    c001c19f <unlockScheduler()>

c001c863 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001c863:	55                   	push   ebp
c001c864:	57                   	push   edi
c001c865:	56                   	push   esi
c001c866:	53                   	push   ebx
c001c867:	83 ec 1c             	sub    esp,0x1c
c001c86a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c86e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c871:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c877:	85 c9                	test   ecx,ecx
c001c879:	7e 20                	jle    c001c89b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c87b:	31 f6                	xor    esi,esi
c001c87d:	83 ec 0c             	sub    esp,0xc
c001c880:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c887:	46                   	inc    esi
c001c888:	e8 43 2c ff ff       	call   c000f4d0 <free>
c001c88d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c890:	83 c4 10             	add    esp,0x10
c001c893:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c899:	7f e2                	jg     c001c87d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c89b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c8a5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c8aa:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c8ad:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c8b0:	d3 c0                	rol    eax,cl
c001c8b2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c8b9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c8bc:	89 f7                	mov    edi,esi
c001c8be:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c8c6:	0f 85 4f 01 00 00    	jne    c001ca1b <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c8cc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c8d2:	85 c0                	test   eax,eax
c001c8d4:	0f 84 aa 00 00 00    	je     c001c984 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c8da:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c8dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c8e1:	31 c9                	xor    ecx,ecx
c001c8e3:	eb 10                	jmp    c001c8f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c8e5:	41                   	inc    ecx
c001c8e6:	83 f9 10             	cmp    ecx,0x10
c001c8e9:	0f 84 95 00 00 00    	je     c001c984 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c8ef:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c8f5:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c8fc:	d3 fa                	sar    edx,cl
c001c8fe:	83 e2 01             	and    edx,0x1
c001c901:	74 e2                	je     c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c903:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c906:	01 ca                	add    edx,ecx
c001c908:	89 d5                	mov    ebp,edx
c001c90a:	c1 e5 05             	shl    ebp,0x5
c001c90d:	01 ea                	add    edx,ebp
c001c90f:	01 d0                	add    eax,edx
c001c911:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c917:	83 fd 07             	cmp    ebp,0x7
c001c91a:	75 c9                	jne    c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c91c:	05 40 02 00 00       	add    eax,0x240
c001c921:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c924:	83 fd ff             	cmp    ebp,0xffffffff
c001c927:	0f 8c 08 01 00 00    	jl     c001ca35 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c92d:	0f 84 b9 01 00 00    	je     c001caec <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c933:	85 ed                	test   ebp,ebp
c001c935:	0f 84 a0 01 00 00    	je     c001cadb <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c93b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c93d:	75 a6                	jne    c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c93f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c945:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c949:	01 d0                	add    eax,edx
c001c94b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c94f:	83 ec 0c             	sub    esp,0xc
c001c952:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c958:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c95b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c961:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c968:	50                   	push   eax
c001c969:	e8 46 fe ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001c96e:	83 c4 10             	add    esp,0x10
c001c971:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c978:	89 f7                	mov    edi,esi
c001c97a:	41                   	inc    ecx
c001c97b:	83 f9 10             	cmp    ecx,0x10
c001c97e:	0f 85 6b ff ff ff    	jne    c001c8ef <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c984:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c98a:	85 c0                	test   eax,eax
c001c98c:	74 5d                	je     c001c9eb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c98e:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c994:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c99a:	74 4f                	je     c001c9eb <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c99c:	83 ec 0c             	sub    esp,0xc
c001c99f:	68 88 d2 02 c0       	push   0xc002d288
c001c9a4:	e8 15 9f 00 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c9a9:	c7 04 24 88 d2 02 c0 	mov    DWORD PTR [esp],0xc002d288
c001c9b0:	89 c7                	mov    edi,eax
c001c9b2:	e8 0f 9f 00 00       	call   c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c9b7:	83 c4 10             	add    esp,0x10
c001c9ba:	84 c0                	test   al,al
c001c9bc:	0f 84 e4 00 00 00    	je     c001caa6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c9c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c9c5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c9cb:	85 d2                	test   edx,edx
c001c9cd:	74 0f                	je     c001c9de <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	8b 02                	mov    eax,DWORD PTR [edx]
c001c9d4:	52                   	push   edx
c001c9d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c9d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c9db:	83 c4 10             	add    esp,0x10
c001c9de:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c9e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c9eb:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c9f1:	85 db                	test   ebx,ebx
c001c9f3:	74 16                	je     c001ca0b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c9f5:	83 ec 0c             	sub    esp,0xc
c001c9f8:	53                   	push   ebx
c001c9f9:	e8 fe 51 ff ff       	call   c0011bfc <VAS::~VAS()>
c001c9fe:	58                   	pop    eax
c001c9ff:	5a                   	pop    edx
c001ca00:	6a 10                	push   0x10
c001ca02:	53                   	push   ebx
c001ca03:	e8 a5 5b ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001ca08:	83 c4 10             	add    esp,0x10
c001ca0b:	83 ec 0c             	sub    esp,0xc
c001ca0e:	68 92 9b 02 c0       	push   0xc0029b92
c001ca13:	e8 75 5c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	83 ec 08             	sub    esp,0x8
c001ca1e:	68 3b 07 00 00       	push   0x73b
c001ca23:	68 a0 9b 02 c0       	push   0xc0029ba0
c001ca28:	e8 60 5c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ca2d:	83 c4 2c             	add    esp,0x2c
c001ca30:	5b                   	pop    ebx
c001ca31:	5e                   	pop    esi
c001ca32:	5f                   	pop    edi
c001ca33:	5d                   	pop    ebp
c001ca34:	c3                   	ret    
c001ca35:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca39:	83 ec 0c             	sub    esp,0xc
c001ca3c:	68 7c 9e 02 c0       	push   0xc0029e7c
c001ca41:	e8 11 c7 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001ca46:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ca49:	83 c4 10             	add    esp,0x10
c001ca4c:	89 f7                	mov    edi,esi
c001ca4e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca52:	e9 8e fe ff ff       	jmp    c001c8e5 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001ca57:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ca5d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ca63:	75 1c                	jne    c001ca81 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001ca65:	83 ec 0c             	sub    esp,0xc
c001ca68:	68 e4 9e 02 c0       	push   0xc0029ee4
c001ca6d:	e8 1b 5c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ca72:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ca79:	e8 b4 fb ff ff       	call   c001c632 <blockTask(TaskState)>
c001ca7e:	83 c4 10             	add    esp,0x10
c001ca81:	83 ec 08             	sub    esp,0x8
c001ca84:	56                   	push   esi
c001ca85:	68 88 d2 02 c0       	push   0xc002d288
c001ca8a:	e8 01 9f 00 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ca8f:	c7 04 24 88 d2 02 c0 	mov    DWORD PTR [esp],0xc002d288
c001ca96:	e8 23 9e 00 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	39 f8                	cmp    eax,edi
c001caa0:	0f 84 1c ff ff ff    	je     c001c9c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001caa6:	83 ec 0c             	sub    esp,0xc
c001caa9:	68 88 d2 02 c0       	push   0xc002d288
c001caae:	e8 0b 9e 00 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cab3:	c7 04 24 88 d2 02 c0 	mov    DWORD PTR [esp],0xc002d288
c001caba:	89 c6                	mov    esi,eax
c001cabc:	e8 21 9e 00 00       	call   c00268e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cac1:	83 c4 10             	add    esp,0x10
c001cac4:	39 f3                	cmp    ebx,esi
c001cac6:	74 b9                	je     c001ca81 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cac8:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001cacb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001cace:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001cad4:	75 ab                	jne    c001ca81 <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001cad6:	e9 7c ff ff ff       	jmp    c001ca57 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001cadb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cadf:	83 ec 0c             	sub    esp,0xc
c001cae2:	68 b0 9e 02 c0       	push   0xc0029eb0
c001cae7:	e9 55 ff ff ff       	jmp    c001ca41 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001caec:	8b 36                	mov    esi,DWORD PTR [esi]
c001caee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001caf2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001caf5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001caf8:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001cafe:	01 d7                	add    edi,edx
c001cb00:	89 f8                	mov    eax,edi
c001cb02:	e9 44 fe ff ff       	jmp    c001c94b <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001cb07 <cleanerTaskFunction(void*)>:
c001cb07:	53                   	push   ebx
c001cb08:	83 ec 08             	sub    esp,0x8
c001cb0b:	e8 8f f6 ff ff       	call   c001c19f <unlockScheduler()>
c001cb10:	e8 88 f6 ff ff       	call   c001c19d <lockScheduler()>
c001cb15:	80 3d 4c d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d24c,0x0
c001cb1c:	0f 85 8e 00 00 00    	jne    c001cbb0 <cleanerTaskFunction(void*)+0xa9>
c001cb22:	83 ec 0c             	sub    esp,0xc
c001cb25:	6a 02                	push   0x2
c001cb27:	e8 c4 fa ff ff       	call   c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001cb2c:	83 c4 10             	add    esp,0x10
c001cb2f:	c6 05 4c d2 02 c0 00 	mov    BYTE PTR ds:0xc002d24c,0x0
c001cb36:	e8 89 f6 ff ff       	call   c001c1c4 <lockStuff()>
c001cb3b:	e8 5d f6 ff ff       	call   c001c19d <lockScheduler()>
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	68 70 d2 02 c0       	push   0xc002d270
c001cb48:	e8 79 9d 00 00       	call   c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cb4d:	83 c4 10             	add    esp,0x10
c001cb50:	84 c0                	test   al,al
c001cb52:	75 40                	jne    c001cb94 <cleanerTaskFunction(void*)+0x8d>
c001cb54:	83 ec 0c             	sub    esp,0xc
c001cb57:	68 70 d2 02 c0       	push   0xc002d270
c001cb5c:	e8 5d 9d 00 00       	call   c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cb61:	c7 04 24 70 d2 02 c0 	mov    DWORD PTR [esp],0xc002d270
c001cb68:	89 c3                	mov    ebx,eax
c001cb6a:	e8 73 9d 00 00       	call   c00268e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cb6f:	c7 04 24 b6 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bb6
c001cb76:	e8 12 5b ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cb7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb7e:	e8 e0 fc ff ff       	call   c001c863 <cleanupTerminatedTask(ThreadControlBlock*)>
c001cb83:	c7 04 24 cf 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bcf
c001cb8a:	e8 fe 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	eb ac                	jmp    c001cb40 <cleanerTaskFunction(void*)+0x39>
c001cb94:	e8 06 f6 ff ff       	call   c001c19f <unlockScheduler()>
c001cb99:	e8 bf f9 ff ff       	call   c001c55d <unlockStuff()>
c001cb9e:	e8 fa f5 ff ff       	call   c001c19d <lockScheduler()>
c001cba3:	80 3d 4c d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d24c,0x0
c001cbaa:	0f 84 72 ff ff ff    	je     c001cb22 <cleanerTaskFunction(void*)+0x1b>
c001cbb0:	e8 ea f5 ff ff       	call   c001c19f <unlockScheduler()>
c001cbb5:	e9 75 ff ff ff       	jmp    c001cb2f <cleanerTaskFunction(void*)+0x28>

c001cbba <terminateTask(int)>:
c001cbba:	83 ec 14             	sub    esp,0x14
c001cbbd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cbc5:	83 c0 0c             	add    eax,0xc
c001cbc8:	50                   	push   eax
c001cbc9:	68 0c 9f 02 c0       	push   0xc0029f0c
c001cbce:	e8 ba 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cbd3:	e8 ec f5 ff ff       	call   c001c1c4 <lockStuff()>
c001cbd8:	e8 c0 f5 ff ff       	call   c001c19d <lockScheduler()>
c001cbdd:	c7 04 24 e2 9b 02 c0 	mov    DWORD PTR [esp],0xc0029be2
c001cbe4:	e8 a4 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cbe9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cbed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbf2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001cbf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cbfa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001cbfd:	5a                   	pop    edx
c001cbfe:	59                   	pop    ecx
c001cbff:	50                   	push   eax
c001cc00:	68 70 d2 02 c0       	push   0xc002d270
c001cc05:	e8 86 9d 00 00       	call   c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cc0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc0f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001cc16:	c7 04 24 fc 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bfc
c001cc1d:	e8 6b 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc22:	83 c4 10             	add    esp,0x10
c001cc25:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c001cc2a:	85 c0                	test   eax,eax
c001cc2c:	74 5a                	je     c001cc88 <terminateTask(int)+0xce>
c001cc2e:	83 ec 0c             	sub    esp,0xc
c001cc31:	68 16 9c 02 c0       	push   0xc0029c16
c001cc36:	e8 52 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc3b:	58                   	pop    eax
c001cc3c:	c6 05 4c d2 02 c0 01 	mov    BYTE PTR ds:0xc002d24c,0x1
c001cc43:	ff 35 48 d2 02 c0    	push   DWORD PTR ds:0xc002d248
c001cc49:	e8 66 fb ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001cc4e:	c7 04 24 30 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c30
c001cc55:	e8 33 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc5a:	83 c4 10             	add    esp,0x10
c001cc5d:	e8 3d f5 ff ff       	call   c001c19f <unlockScheduler()>
c001cc62:	e8 f6 f8 ff ff       	call   c001c55d <unlockStuff()>
c001cc67:	83 ec 0c             	sub    esp,0xc
c001cc6a:	68 68 9c 02 c0       	push   0xc0029c68
c001cc6f:	e8 19 5a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	e8 21 f5 ff ff       	call   c001c19d <lockScheduler()>
c001cc7c:	e8 57 f8 ff ff       	call   c001c4d8 <schedule()>
c001cc81:	e8 19 f5 ff ff       	call   c001c19f <unlockScheduler()>
c001cc86:	eb ef                	jmp    c001cc77 <terminateTask(int)+0xbd>
c001cc88:	83 ec 0c             	sub    esp,0xc
c001cc8b:	68 4a 9c 02 c0       	push   0xc0029c4a
c001cc90:	e8 f8 59 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cc95:	83 c4 10             	add    esp,0x10
c001cc98:	eb c3                	jmp    c001cc5d <terminateTask(int)+0xa3>

c001cc9a <Thr::terminateFromIRQ(int)>:
c001cc9a:	83 ec 18             	sub    esp,0x18
c001cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca1:	e8 14 ff ff ff       	call   c001cbba <terminateTask(int)>

c001cca6 <Semaphore::release()>:
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccad:	e8 12 f5 ff ff       	call   c001c1c4 <lockStuff()>
c001ccb2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ccb5:	85 d2                	test   edx,edx
c001ccb7:	74 1a                	je     c001ccd3 <Semaphore::release()+0x2d>
c001ccb9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ccc2:	52                   	push   edx
c001ccc3:	e8 ec fa ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001ccc8:	83 c4 10             	add    esp,0x10
c001cccb:	83 c4 0c             	add    esp,0xc
c001ccce:	e9 8a f8 ff ff       	jmp    c001c55d <unlockStuff()>
c001ccd3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ccd6:	83 c4 0c             	add    esp,0xc
c001ccd9:	e9 7f f8 ff ff       	jmp    c001c55d <unlockStuff()>

c001ccde <__static_initialization_and_destruction_0(int, int)>:
c001ccde:	83 ec 0c             	sub    esp,0xc
c001cce1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001cce6:	0f 85 88 00 00 00    	jne    c001cd74 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ccec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ccf4:	75 7e                	jne    c001cd74 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ccf6:	83 ec 0c             	sub    esp,0xc
c001ccf9:	68 88 d2 02 c0       	push   0xc002d288
c001ccfe:	e8 3d 9e 00 00       	call   c0026b40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd03:	83 c4 10             	add    esp,0x10
c001cd06:	83 ec 04             	sub    esp,0x4
c001cd09:	68 30 ad 02 c0       	push   0xc002ad30
c001cd0e:	68 88 d2 02 c0       	push   0xc002d288
c001cd13:	68 00 6b 02 c0       	push   0xc0026b00
c001cd18:	e8 0a 58 ff ff       	call   c0012527 <__cxa_atexit>
c001cd1d:	83 c4 10             	add    esp,0x10
c001cd20:	83 ec 0c             	sub    esp,0xc
c001cd23:	68 7c d2 02 c0       	push   0xc002d27c
c001cd28:	e8 13 9e 00 00       	call   c0026b40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd2d:	83 c4 10             	add    esp,0x10
c001cd30:	83 ec 04             	sub    esp,0x4
c001cd33:	68 30 ad 02 c0       	push   0xc002ad30
c001cd38:	68 7c d2 02 c0       	push   0xc002d27c
c001cd3d:	68 00 6b 02 c0       	push   0xc0026b00
c001cd42:	e8 e0 57 ff ff       	call   c0012527 <__cxa_atexit>
c001cd47:	83 c4 10             	add    esp,0x10
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	68 70 d2 02 c0       	push   0xc002d270
c001cd52:	e8 e9 9d 00 00       	call   c0026b40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001cd57:	83 c4 10             	add    esp,0x10
c001cd5a:	83 ec 04             	sub    esp,0x4
c001cd5d:	68 30 ad 02 c0       	push   0xc002ad30
c001cd62:	68 70 d2 02 c0       	push   0xc002d270
c001cd67:	68 00 6b 02 c0       	push   0xc0026b00
c001cd6c:	e8 b6 57 ff ff       	call   c0012527 <__cxa_atexit>
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	90                   	nop
c001cd75:	83 c4 0c             	add    esp,0xc
c001cd78:	c3                   	ret    

c001cd79 <_GLOBAL__sub_I_kernelProcess>:
c001cd79:	83 ec 0c             	sub    esp,0xc
c001cd7c:	83 ec 08             	sub    esp,0x8
c001cd7f:	68 ff ff 00 00       	push   0xffff
c001cd84:	6a 01                	push   0x1
c001cd86:	e8 53 ff ff ff       	call   c001ccde <__static_initialization_and_destruction_0(int, int)>
c001cd8b:	83 c4 10             	add    esp,0x10
c001cd8e:	83 c4 0c             	add    esp,0xc
c001cd91:	c3                   	ret    

c001cd92 <Vm::inbv(unsigned short)>:
c001cd92:	53                   	push   ebx
c001cd93:	83 ec 10             	sub    esp,0x10
c001cd96:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cd9a:	0f b7 c3             	movzx  eax,bx
c001cd9d:	50                   	push   eax
c001cd9e:	68 2b 9f 02 c0       	push   0xc0029f2b
c001cda3:	e8 e5 58 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cda8:	89 da                	mov    edx,ebx
c001cdaa:	ec                   	in     al,dx
c001cdab:	83 c4 18             	add    esp,0x18
c001cdae:	5b                   	pop    ebx
c001cdaf:	c3                   	ret    

c001cdb0 <Vm::outbv(unsigned short, unsigned char)>:
c001cdb0:	56                   	push   esi
c001cdb1:	53                   	push   ebx
c001cdb2:	83 ec 08             	sub    esp,0x8
c001cdb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cdb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cdbd:	0f b6 c3             	movzx  eax,bl
c001cdc0:	50                   	push   eax
c001cdc1:	0f b7 c6             	movzx  eax,si
c001cdc4:	50                   	push   eax
c001cdc5:	68 3c 9f 02 c0       	push   0xc0029f3c
c001cdca:	e8 be 58 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cdcf:	88 d8                	mov    al,bl
c001cdd1:	89 f2                	mov    edx,esi
c001cdd3:	ee                   	out    dx,al
c001cdd4:	83 c4 14             	add    esp,0x14
c001cdd7:	5b                   	pop    ebx
c001cdd8:	5e                   	pop    esi
c001cdd9:	c3                   	ret    

c001cdda <Vm::realToLinear(unsigned short, unsigned short)>:
c001cdda:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001cddf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001cde4:	c1 e0 04             	shl    eax,0x4
c001cde7:	01 d0                	add    eax,edx
c001cde9:	c3                   	ret    

c001cdea <Vm::getSegment(unsigned int)>:
c001cdea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdee:	c1 e8 10             	shr    eax,0x10
c001cdf1:	c3                   	ret    

c001cdf2 <Vm::getOffset(unsigned int)>:
c001cdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdf6:	c3                   	ret    

c001cdf7 <Vm::mainloop2()>:
c001cdf7:	83 ec 18             	sub    esp,0x18
c001cdfa:	68 54 9f 02 c0       	push   0xc0029f54
c001cdff:	e8 89 58 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ce04:	e8 94 f3 ff ff       	call   c001c19d <lockScheduler()>
c001ce09:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ce10:	c6 05 b5 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2b5,0x1
c001ce17:	e8 d4 f7 ff ff       	call   c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ce1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce21:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ce25:	89 14 24             	mov    DWORD PTR [esp],edx
c001ce28:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ce2c:	52                   	push   edx
c001ce2d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001ce31:	52                   	push   edx
c001ce32:	0f b7 40 5b          	movzx  eax,WORD PTR [eax+0x5b]
c001ce36:	50                   	push   eax
c001ce37:	68 5f 9f 02 c0       	push   0xc0029f5f
c001ce3c:	e8 4c 58 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ce41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce46:	83 c4 20             	add    esp,0x20
c001ce49:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ce4d:	52                   	push   edx
c001ce4e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ce52:	52                   	push   edx
c001ce53:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ce57:	52                   	push   edx
c001ce58:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ce5c:	50                   	push   eax
c001ce5d:	e8 4d 34 fe ff       	call   c00002af <goToVM86>
c001ce62:	83 c4 1c             	add    esp,0x1c
c001ce65:	c3                   	ret    

c001ce66 <Vm::mainVm8086Loop(void*)>:
c001ce66:	83 ec 18             	sub    esp,0x18
c001ce69:	68 87 9f 02 c0       	push   0xc0029f87
c001ce6e:	e8 1a 58 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ce73:	e8 27 f3 ff ff       	call   c001c19f <unlockScheduler()>
c001ce78:	83 c4 1c             	add    esp,0x1c
c001ce7b:	e9 77 ff ff ff       	jmp    c001cdf7 <Vm::mainloop2()>

c001ce80 <Vm::mainloop3(unsigned long)>:
c001ce80:	53                   	push   ebx
c001ce81:	83 ec 14             	sub    esp,0x14
c001ce84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce88:	68 97 9f 02 c0       	push   0xc0029f97
c001ce8d:	e8 fb 57 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ce92:	e8 06 f3 ff ff       	call   c001c19d <lockScheduler()>
c001ce97:	89 1d b0 d2 02 c0    	mov    DWORD PTR ds:0xc002d2b0,ebx
c001ce9d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001cea4:	c6 05 b4 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2b4,0x1
c001ceab:	e8 40 f7 ff ff       	call   c001c5f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ceb0:	83 c4 18             	add    esp,0x18
c001ceb3:	5b                   	pop    ebx
c001ceb4:	e9 3e ff ff ff       	jmp    c001cdf7 <Vm::mainloop2()>

c001ceb9 <Vm::initialise8086()>:
c001ceb9:	83 ec 18             	sub    esp,0x18
c001cebc:	68 a2 9f 02 c0       	push   0xc0029fa2
c001cec1:	e8 c7 57 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cec6:	68 80 00 00 00       	push   0x80
c001cecb:	6a 00                	push   0x0
c001cecd:	68 66 ce 01 c0       	push   0xc001ce66
c001ced2:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c001ced8:	e8 f1 f3 ff ff       	call   c001c2ce <Process::createThread(void (*)(void*), void*, int)>
c001cedd:	83 c4 14             	add    esp,0x14
c001cee0:	a3 b8 d2 02 c0       	mov    ds:0xc002d2b8,eax
c001cee5:	6a 07                	push   0x7
c001cee7:	a1 94 d2 02 c0       	mov    eax,ds:0xc002d294
c001ceec:	68 00 01 00 00       	push   0x100
c001cef1:	6a 00                	push   0x0
c001cef3:	6a 00                	push   0x0
c001cef5:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cefb:	e8 5c 51 ff ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001cf00:	83 c4 14             	add    esp,0x14
c001cf03:	68 b2 9f 02 c0       	push   0xc0029fb2
c001cf08:	e8 80 57 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cf0d:	83 c4 1c             	add    esp,0x1c
c001cf10:	c3                   	ret    

c001cf11 <Vm::finish8086()>:
c001cf11:	53                   	push   ebx
c001cf12:	83 ec 14             	sub    esp,0x14
c001cf15:	68 c4 9f 02 c0       	push   0xc0029fc4
c001cf1a:	e8 6e 57 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cf1f:	83 c4 10             	add    esp,0x10
c001cf22:	e8 76 f2 ff ff       	call   c001c19d <lockScheduler()>
c001cf27:	80 3d b4 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d2b4,0x0
c001cf2e:	75 0c                	jne    c001cf3c <Vm::finish8086()+0x2b>
c001cf30:	e8 a3 f5 ff ff       	call   c001c4d8 <schedule()>
c001cf35:	e8 65 f2 ff ff       	call   c001c19f <unlockScheduler()>
c001cf3a:	eb e6                	jmp    c001cf22 <Vm::finish8086()+0x11>
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	68 d0 9f 02 c0       	push   0xc0029fd0
c001cf44:	e8 44 57 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cf49:	58                   	pop    eax
c001cf4a:	8b 1d b0 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d2b0
c001cf50:	ff 35 b8 d2 02 c0    	push   DWORD PTR ds:0xc002d2b8
c001cf56:	c6 05 b4 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2b4,0x0
c001cf5d:	e8 52 f8 ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001cf62:	e8 38 f2 ff ff       	call   c001c19f <unlockScheduler()>
c001cf67:	c7 04 24 df 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fdf
c001cf6e:	e8 1a 57 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cf73:	89 d8                	mov    eax,ebx
c001cf75:	83 c4 18             	add    esp,0x18
c001cf78:	5b                   	pop    ebx
c001cf79:	c3                   	ret    

c001cf7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001cf7a:	55                   	push   ebp
c001cf7b:	57                   	push   edi
c001cf7c:	56                   	push   esi
c001cf7d:	53                   	push   ebx
c001cf7e:	83 ec 38             	sub    esp,0x38
c001cf81:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cf85:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cf89:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001cf8d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001cf91:	68 ee 9f 02 c0       	push   0xc0029fee
c001cf96:	e8 f2 56 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cf9b:	83 c4 10             	add    esp,0x10
c001cf9e:	e8 fa f1 ff ff       	call   c001c19d <lockScheduler()>
c001cfa3:	a0 b5 d2 02 c0       	mov    al,ds:0xc002d2b5
c001cfa8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cfac:	84 c0                	test   al,al
c001cfae:	75 0c                	jne    c001cfbc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x42>
c001cfb0:	e8 23 f5 ff ff       	call   c001c4d8 <schedule()>
c001cfb5:	e8 e5 f1 ff ff       	call   c001c19f <unlockScheduler()>
c001cfba:	eb e2                	jmp    c001cf9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x24>
c001cfbc:	83 ec 0c             	sub    esp,0xc
c001cfbf:	68 f9 9f 02 c0       	push   0xc0029ff9
c001cfc4:	e8 c4 56 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001cfc9:	a1 b8 d2 02 c0       	mov    eax,ds:0xc002d2b8
c001cfce:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001cfd2:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001cfd6:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001cfda:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001cfde:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001cfe2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cfe9:	e8 d2 24 ff ff       	call   c000f4c0 <malloc>
c001cfee:	83 c4 0c             	add    esp,0xc
c001cff1:	89 c7                	mov    edi,eax
c001cff3:	ff 35 94 d2 02 c0    	push   DWORD PTR ds:0xc002d294
c001cff9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cffd:	50                   	push   eax
c001cffe:	e8 b9 5b ff ff       	call   c0012bbc <File::File(char const*, Process*)>
c001d003:	83 c4 10             	add    esp,0x10
c001d006:	85 ff                	test   edi,edi
c001d008:	75 0a                	jne    c001d014 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x9a>
c001d00a:	83 ec 0c             	sub    esp,0xc
c001d00d:	68 0b a0 02 c0       	push   0xc002a00b
c001d012:	eb 27                	jmp    c001d03b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc1>
c001d014:	50                   	push   eax
c001d015:	8d 44 24 17          	lea    eax,[esp+0x17]
c001d019:	50                   	push   eax
c001d01a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d01e:	50                   	push   eax
c001d01f:	57                   	push   edi
c001d020:	e8 a7 5e ff ff       	call   c0012ecc <File::stat(unsigned long long*, bool*)>
c001d025:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001d02a:	83 c4 10             	add    esp,0x10
c001d02d:	89 e8                	mov    eax,ebp
c001d02f:	84 c0                	test   al,al
c001d031:	74 1c                	je     c001d04f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd5>
c001d033:	83 ec 0c             	sub    esp,0xc
c001d036:	68 1f a0 02 c0       	push   0xc002a01f
c001d03b:	e8 17 c1 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001d040:	31 ed                	xor    ebp,ebp
c001d042:	e8 58 f1 ff ff       	call   c001c19f <unlockScheduler()>
c001d047:	83 c4 10             	add    esp,0x10
c001d04a:	e9 8d 00 00 00       	jmp    c001d0dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x162>
c001d04f:	50                   	push   eax
c001d050:	50                   	push   eax
c001d051:	6a 01                	push   0x1
c001d053:	57                   	push   edi
c001d054:	e8 c7 5b ff ff       	call   c0012c20 <File::open(FileOpenMode)>
c001d059:	83 c4 10             	add    esp,0x10
c001d05c:	85 c0                	test   eax,eax
c001d05e:	74 17                	je     c001d077 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001d060:	83 ec 0c             	sub    esp,0xc
c001d063:	68 38 a0 02 c0       	push   0xc002a038
c001d068:	e8 ea c0 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001d06d:	e8 2d f1 ff ff       	call   c001c19f <unlockScheduler()>
c001d072:	83 c4 10             	add    esp,0x10
c001d075:	eb 65                	jmp    c001d0dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x162>
c001d077:	0f b7 f6             	movzx  esi,si
c001d07a:	50                   	push   eax
c001d07b:	0f b7 db             	movzx  ebx,bx
c001d07e:	50                   	push   eax
c001d07f:	56                   	push   esi
c001d080:	53                   	push   ebx
c001d081:	e8 54 fd ff ff       	call   c001cdda <Vm::realToLinear(unsigned short, unsigned short)>
c001d086:	5a                   	pop    edx
c001d087:	8b 17                	mov    edx,DWORD PTR [edi]
c001d089:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001d08d:	51                   	push   ecx
c001d08e:	50                   	push   eax
c001d08f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d093:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001d097:	57                   	push   edi
c001d098:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d09b:	83 c4 14             	add    esp,0x14
c001d09e:	57                   	push   edi
c001d09f:	e8 da 5b ff ff       	call   c0012c7e <File::close()>
c001d0a4:	c7 04 24 51 a0 02 c0 	mov    DWORD PTR [esp],0xc002a051
c001d0ab:	e8 dd 55 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d0b0:	c6 05 b5 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d2b5,0x0
c001d0b7:	e8 e3 f0 ff ff       	call   c001c19f <unlockScheduler()>
c001d0bc:	59                   	pop    ecx
c001d0bd:	ff 35 b8 d2 02 c0    	push   DWORD PTR ds:0xc002d2b8
c001d0c3:	e8 ec f6 ff ff       	call   c001c7b4 <unblockTask(ThreadControlBlock*)>
c001d0c8:	c7 04 24 73 a0 02 c0 	mov    DWORD PTR [esp],0xc002a073
c001d0cf:	e8 b9 55 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d0d4:	83 c4 10             	add    esp,0x10
c001d0d7:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d0dc:	83 c4 2c             	add    esp,0x2c
c001d0df:	89 e8                	mov    eax,ebp
c001d0e1:	5b                   	pop    ebx
c001d0e2:	5e                   	pop    esi
c001d0e3:	5f                   	pop    edi
c001d0e4:	5d                   	pop    ebp
c001d0e5:	c3                   	ret    

c001d0e6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001d0e6:	57                   	push   edi
c001d0e7:	56                   	push   esi
c001d0e8:	53                   	push   ebx
c001d0e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0f5:	83 e8 06             	sub    eax,0x6
c001d0f8:	0f b7 c0             	movzx  eax,ax
c001d0fb:	50                   	push   eax
c001d0fc:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001d101:	50                   	push   eax
c001d102:	e8 d3 fc ff ff       	call   c001cdda <Vm::realToLinear(unsigned short, unsigned short)>
c001d107:	5a                   	pop    edx
c001d108:	5e                   	pop    esi
c001d109:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001d10c:	8d 56 fa             	lea    edx,[esi-0x6]
c001d10f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d115:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001d118:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001d11b:	83 c2 02             	add    edx,0x2
c001d11e:	66 89 10             	mov    WORD PTR [eax],dx
c001d121:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001d124:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001d128:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001d12b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001d12f:	89 d6                	mov    esi,edx
c001d131:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001d137:	66 81 e6 ff fd       	and    si,0xfdff
c001d13c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001d140:	74 07                	je     c001d149 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001d142:	89 d6                	mov    esi,edx
c001d144:	66 81 ce 00 02       	or     si,0x200
c001d149:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001d14d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d152:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d156:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001d15e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001d161:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001d169:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d16c:	5b                   	pop    ebx
c001d16d:	5e                   	pop    esi
c001d16e:	5f                   	pop    edi
c001d16f:	c3                   	ret    

c001d170 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001d170:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d175:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d17a:	c1 e0 04             	shl    eax,0x4
c001d17d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001d180:	c3                   	ret    

c001d181 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001d181:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d186:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d18b:	c1 e0 04             	shl    eax,0x4
c001d18e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001d192:	c3                   	ret    

c001d193 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001d193:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d198:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d19d:	c1 e0 04             	shl    eax,0x4
c001d1a0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001d1a3:	c3                   	ret    

c001d1a4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001d1a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1ae:	c1 e0 04             	shl    eax,0x4
c001d1b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1b5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001d1b8:	c3                   	ret    

c001d1b9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001d1b9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1be:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1c3:	c1 e0 04             	shl    eax,0x4
c001d1c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1ca:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001d1ce:	c3                   	ret    

c001d1cf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001d1cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d1d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d1d9:	c1 e0 04             	shl    eax,0x4
c001d1dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d1e0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001d1e3:	c3                   	ret    

c001d1e4 <Vm::faultHandler(regs*)>:
c001d1e4:	55                   	push   ebp
c001d1e5:	57                   	push   edi
c001d1e6:	56                   	push   esi
c001d1e7:	53                   	push   ebx
c001d1e8:	83 ec 1c             	sub    esp,0x1c
c001d1eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d1ef:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001d1f2:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001d1f5:	0f b7 c1             	movzx  eax,cx
c001d1f8:	50                   	push   eax
c001d1f9:	0f b7 c3             	movzx  eax,bx
c001d1fc:	c1 e3 04             	shl    ebx,0x4
c001d1ff:	50                   	push   eax
c001d200:	e8 d5 fb ff ff       	call   c001cdda <Vm::realToLinear(unsigned short, unsigned short)>
c001d205:	5a                   	pop    edx
c001d206:	89 c5                	mov    ebp,eax
c001d208:	5e                   	pop    esi
c001d209:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001d20d:	50                   	push   eax
c001d20e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001d212:	50                   	push   eax
c001d213:	e8 c2 fb ff ff       	call   c001cdda <Vm::realToLinear(unsigned short, unsigned short)>
c001d218:	01 cb                	add    ebx,ecx
c001d21a:	89 c6                	mov    esi,eax
c001d21c:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001d220:	50                   	push   eax
c001d221:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d225:	50                   	push   eax
c001d226:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001d22a:	50                   	push   eax
c001d22b:	55                   	push   ebp
c001d22c:	53                   	push   ebx
c001d22d:	b3 06                	mov    bl,0x6
c001d22f:	68 85 a0 02 c0       	push   0xc002a085
c001d234:	e8 54 54 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d239:	83 c4 20             	add    esp,0x20
c001d23c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d241:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d246:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001d24a:	3c 9d                	cmp    al,0x9d
c001d24c:	0f 84 ca 02 00 00    	je     c001d51c <Vm::faultHandler(regs*)+0x338>
c001d252:	0f 87 a3 00 00 00    	ja     c001d2fb <Vm::faultHandler(regs*)+0x117>
c001d258:	3c 66                	cmp    al,0x66
c001d25a:	0f 84 08 02 00 00    	je     c001d468 <Vm::faultHandler(regs*)+0x284>
c001d260:	77 5f                	ja     c001d2c1 <Vm::faultHandler(regs*)+0xdd>
c001d262:	3c 36                	cmp    al,0x36
c001d264:	0f 84 e4 01 00 00    	je     c001d44e <Vm::faultHandler(regs*)+0x26a>
c001d26a:	77 28                	ja     c001d294 <Vm::faultHandler(regs*)+0xb0>
c001d26c:	3c 26                	cmp    al,0x26
c001d26e:	0f 84 8c 01 00 00    	je     c001d400 <Vm::faultHandler(regs*)+0x21c>
c001d274:	3c 2e                	cmp    al,0x2e
c001d276:	0f 85 2c 07 00 00    	jne    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d27c:	83 ec 0c             	sub    esp,0xc
c001d27f:	31 db                	xor    ebx,ebx
c001d281:	68 9a a0 02 c0       	push   0xc002a09a
c001d286:	e8 02 54 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d28b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d28e:	83 c4 10             	add    esp,0x10
c001d291:	45                   	inc    ebp
c001d292:	eb b2                	jmp    c001d246 <Vm::faultHandler(regs*)+0x62>
c001d294:	3c 64                	cmp    al,0x64
c001d296:	0f 84 7e 01 00 00    	je     c001d41a <Vm::faultHandler(regs*)+0x236>
c001d29c:	0f 87 92 01 00 00    	ja     c001d434 <Vm::faultHandler(regs*)+0x250>
c001d2a2:	3c 3e                	cmp    al,0x3e
c001d2a4:	0f 85 fe 06 00 00    	jne    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d2aa:	83 ec 0c             	sub    esp,0xc
c001d2ad:	b3 01                	mov    bl,0x1
c001d2af:	68 9e a0 02 c0       	push   0xc002a09e
c001d2b4:	e8 d4 53 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d2b9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d2bc:	83 c4 10             	add    esp,0x10
c001d2bf:	eb d0                	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d2c1:	3c 6d                	cmp    al,0x6d
c001d2c3:	0f 84 a0 03 00 00    	je     c001d669 <Vm::faultHandler(regs*)+0x485>
c001d2c9:	77 15                	ja     c001d2e0 <Vm::faultHandler(regs*)+0xfc>
c001d2cb:	3c 67                	cmp    al,0x67
c001d2cd:	0f 84 b2 01 00 00    	je     c001d485 <Vm::faultHandler(regs*)+0x2a1>
c001d2d3:	3c 6c                	cmp    al,0x6c
c001d2d5:	0f 84 30 03 00 00    	je     c001d60b <Vm::faultHandler(regs*)+0x427>
c001d2db:	e9 c8 06 00 00       	jmp    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d2e0:	3c 6f                	cmp    al,0x6f
c001d2e2:	0f 84 95 04 00 00    	je     c001d77d <Vm::faultHandler(regs*)+0x599>
c001d2e8:	0f 82 02 04 00 00    	jb     c001d6f0 <Vm::faultHandler(regs*)+0x50c>
c001d2ee:	3c 9c                	cmp    al,0x9c
c001d2f0:	0f 84 ad 01 00 00    	je     c001d4a3 <Vm::faultHandler(regs*)+0x2bf>
c001d2f6:	e9 ad 06 00 00       	jmp    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d2fb:	3c ec                	cmp    al,0xec
c001d2fd:	0f 84 15 06 00 00    	je     c001d918 <Vm::faultHandler(regs*)+0x734>
c001d303:	0f 87 86 00 00 00    	ja     c001d38f <Vm::faultHandler(regs*)+0x1ab>
c001d309:	3c e4                	cmp    al,0xe4
c001d30b:	0f 84 4d 05 00 00    	je     c001d85e <Vm::faultHandler(regs*)+0x67a>
c001d311:	77 5d                	ja     c001d370 <Vm::faultHandler(regs*)+0x18c>
c001d313:	3c cd                	cmp    al,0xcd
c001d315:	0f 84 71 02 00 00    	je     c001d58c <Vm::faultHandler(regs*)+0x3a8>
c001d31b:	3c cf                	cmp    al,0xcf
c001d31d:	0f 85 85 06 00 00    	jne    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d323:	83 ec 0c             	sub    esp,0xc
c001d326:	68 e2 a0 02 c0       	push   0xc002a0e2
c001d32b:	e8 5d 53 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d330:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001d333:	89 47 38             	mov    DWORD PTR [edi+0x38],eax
c001d336:	0f b7 46 02          	movzx  eax,WORD PTR [esi+0x2]
c001d33a:	89 47 3c             	mov    DWORD PTR [edi+0x3c],eax
c001d33d:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001d341:	0d 00 02 02 00       	or     eax,0x20200
c001d346:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001d349:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001d34d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d353:	66 c1 e8 09          	shr    ax,0x9
c001d357:	83 e0 01             	and    eax,0x1
c001d35a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d35d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001d360:	83 c0 06             	add    eax,0x6
c001d363:	25 ff ff 00 00       	and    eax,0xffff
c001d368:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001d36b:	e9 06 06 00 00       	jmp    c001d976 <Vm::faultHandler(regs*)+0x792>
c001d370:	3c e6                	cmp    al,0xe6
c001d372:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001d376:	0f 84 4c 05 00 00    	je     c001d8c8 <Vm::faultHandler(regs*)+0x6e4>
c001d37c:	0f 82 08 05 00 00    	jb     c001d88a <Vm::faultHandler(regs*)+0x6a6>
c001d382:	3c e7                	cmp    al,0xe7
c001d384:	0f 84 67 05 00 00    	je     c001d8f1 <Vm::faultHandler(regs*)+0x70d>
c001d38a:	e9 19 06 00 00       	jmp    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d38f:	3c ef                	cmp    al,0xef
c001d391:	0f 84 e4 05 00 00    	je     c001d97b <Vm::faultHandler(regs*)+0x797>
c001d397:	77 37                	ja     c001d3d0 <Vm::faultHandler(regs*)+0x1ec>
c001d399:	3c ed                	cmp    al,0xed
c001d39b:	0f 84 a1 05 00 00    	je     c001d942 <Vm::faultHandler(regs*)+0x75e>
c001d3a1:	3c ee                	cmp    al,0xee
c001d3a3:	0f 85 ff 05 00 00    	jne    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d3a9:	52                   	push   edx
c001d3aa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d3ad:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001d3b0:	68 50 a1 02 c0       	push   0xc002a150
c001d3b5:	e8 d3 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d3ba:	59                   	pop    ecx
c001d3bb:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001d3bf:	5b                   	pop    ebx
c001d3c0:	50                   	push   eax
c001d3c1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001d3c5:	50                   	push   eax
c001d3c6:	e8 e5 f9 ff ff       	call   c001cdb0 <Vm::outbv(unsigned short, unsigned char)>
c001d3cb:	e9 a3 05 00 00       	jmp    c001d973 <Vm::faultHandler(regs*)+0x78f>
c001d3d0:	3c fa                	cmp    al,0xfa
c001d3d2:	0f 84 fd 01 00 00    	je     c001d5d5 <Vm::faultHandler(regs*)+0x3f1>
c001d3d8:	3c fb                	cmp    al,0xfb
c001d3da:	0f 84 10 02 00 00    	je     c001d5f0 <Vm::faultHandler(regs*)+0x40c>
c001d3e0:	3c f3                	cmp    al,0xf3
c001d3e2:	0f 85 c0 05 00 00    	jne    c001d9a8 <Vm::faultHandler(regs*)+0x7c4>
c001d3e8:	83 ec 0c             	sub    esp,0xc
c001d3eb:	68 bb a0 02 c0       	push   0xc002a0bb
c001d3f0:	e8 98 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d3f5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d3f8:	83 c4 10             	add    esp,0x10
c001d3fb:	e9 91 fe ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	b3 02                	mov    bl,0x2
c001d405:	68 96 a0 02 c0       	push   0xc002a096
c001d40a:	e8 7e 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d40f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	e9 77 fe ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d41a:	83 ec 0c             	sub    esp,0xc
c001d41d:	b3 03                	mov    bl,0x3
c001d41f:	68 a2 a0 02 c0       	push   0xc002a0a2
c001d424:	e8 64 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d429:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	e9 5d fe ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d434:	83 ec 0c             	sub    esp,0xc
c001d437:	b3 04                	mov    bl,0x4
c001d439:	68 a6 a0 02 c0       	push   0xc002a0a6
c001d43e:	e8 4a 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d443:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d446:	83 c4 10             	add    esp,0x10
c001d449:	e9 43 fe ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d44e:	83 ec 0c             	sub    esp,0xc
c001d451:	b3 05                	mov    bl,0x5
c001d453:	68 aa a0 02 c0       	push   0xc002a0aa
c001d458:	e8 30 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d45d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d460:	83 c4 10             	add    esp,0x10
c001d463:	e9 29 fe ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	68 ae a0 02 c0       	push   0xc002a0ae
c001d470:	e8 18 52 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d475:	83 c4 10             	add    esp,0x10
c001d478:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d47b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d480:	e9 0c fe ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d485:	50                   	push   eax
c001d486:	50                   	push   eax
c001d487:	6a 01                	push   0x1
c001d489:	68 b3 a0 02 c0       	push   0xc002a0b3
c001d48e:	e8 fa 51 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d499:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001d49e:	e9 ee fd ff ff       	jmp    c001d291 <Vm::faultHandler(regs*)+0xad>
c001d4a3:	83 ec 0c             	sub    esp,0xc
c001d4a6:	68 c1 a0 02 c0       	push   0xc002a0c1
c001d4ab:	e8 dd 51 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d4b0:	83 c4 10             	add    esp,0x10
c001d4b3:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001d4b6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d4bb:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001d4be:	74 2f                	je     c001d4ef <Vm::faultHandler(regs*)+0x30b>
c001d4c0:	83 ea 04             	sub    edx,0x4
c001d4c3:	25 ff 0d 00 00       	and    eax,0xdff
c001d4c8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d4ce:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001d4d1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001d4d4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d4da:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001d4de:	0f 84 bd 04 00 00    	je     c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d4e4:	80 cc 02             	or     ah,0x2
c001d4e7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001d4ea:	e9 b2 04 00 00       	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d4ef:	83 ea 02             	sub    edx,0x2
c001d4f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001d4f8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001d4fb:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001d4ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d505:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001d509:	74 05                	je     c001d510 <Vm::faultHandler(regs*)+0x32c>
c001d50b:	80 cc 02             	or     ah,0x2
c001d50e:	eb 03                	jmp    c001d513 <Vm::faultHandler(regs*)+0x32f>
c001d510:	80 e4 fd             	and    ah,0xfd
c001d513:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001d517:	e9 85 04 00 00       	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d51c:	83 ec 0c             	sub    esp,0xc
c001d51f:	68 c8 a0 02 c0       	push   0xc002a0c8
c001d524:	e8 64 51 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d529:	83 c4 10             	add    esp,0x10
c001d52c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d531:	74 28                	je     c001d55b <Vm::faultHandler(regs*)+0x377>
c001d533:	8b 06                	mov    eax,DWORD PTR [esi]
c001d535:	25 ff 0d 00 00       	and    eax,0xdff
c001d53a:	0d 00 02 02 00       	or     eax,0x20200
c001d53f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001d542:	8b 06                	mov    eax,DWORD PTR [esi]
c001d544:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d54a:	c1 e8 09             	shr    eax,0x9
c001d54d:	83 e0 01             	and    eax,0x1
c001d550:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d553:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001d556:	83 c0 04             	add    eax,0x4
c001d559:	eb 24                	jmp    c001d57f <Vm::faultHandler(regs*)+0x39b>
c001d55b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001d55e:	0d 00 02 02 00       	or     eax,0x20200
c001d563:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001d566:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d569:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d56f:	66 c1 e8 09          	shr    ax,0x9
c001d573:	83 e0 01             	and    eax,0x1
c001d576:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001d579:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001d57c:	83 c0 02             	add    eax,0x2
c001d57f:	25 ff ff 00 00       	and    eax,0xffff
c001d584:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001d587:	e9 15 04 00 00       	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d58c:	53                   	push   ebx
c001d58d:	53                   	push   ebx
c001d58e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d592:	50                   	push   eax
c001d593:	68 ce a0 02 c0       	push   0xc002a0ce
c001d598:	e8 f0 50 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d59d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5a1:	83 c4 10             	add    esp,0x10
c001d5a4:	3c ee                	cmp    al,0xee
c001d5a6:	75 10                	jne    c001d5b8 <Vm::faultHandler(regs*)+0x3d4>
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d5ae:	e8 cd f8 ff ff       	call   c001ce80 <Vm::mainloop3(unsigned long)>
c001d5b3:	e9 be 03 00 00       	jmp    c001d976 <Vm::faultHandler(regs*)+0x792>
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001d5bf:	53                   	push   ebx
c001d5c0:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001d5c4:	53                   	push   ebx
c001d5c5:	55                   	push   ebp
c001d5c6:	50                   	push   eax
c001d5c7:	57                   	push   edi
c001d5c8:	e8 19 fb ff ff       	call   c001d0e6 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001d5cd:	83 c4 20             	add    esp,0x20
c001d5d0:	e9 cf 03 00 00       	jmp    c001d9a4 <Vm::faultHandler(regs*)+0x7c0>
c001d5d5:	83 ec 0c             	sub    esp,0xc
c001d5d8:	68 d8 a0 02 c0       	push   0xc002a0d8
c001d5dd:	e8 ab 50 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d5e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5e7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001d5eb:	e9 83 03 00 00       	jmp    c001d973 <Vm::faultHandler(regs*)+0x78f>
c001d5f0:	83 ec 0c             	sub    esp,0xc
c001d5f3:	68 dd a0 02 c0       	push   0xc002a0dd
c001d5f8:	e8 90 50 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d5fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d602:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001d606:	e9 68 03 00 00       	jmp    c001d973 <Vm::faultHandler(regs*)+0x78f>
c001d60b:	83 ec 0c             	sub    esp,0xc
c001d60e:	68 e8 a0 02 c0       	push   0xc002a0e8
c001d613:	e8 75 50 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d618:	83 c4 10             	add    esp,0x10
c001d61b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001d61e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d623:	74 0d                	je     c001d632 <Vm::faultHandler(regs*)+0x44e>
c001d625:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001d62c:	0f 87 9e 01 00 00    	ja     c001d7d0 <Vm::faultHandler(regs*)+0x5ec>
c001d632:	83 ec 0c             	sub    esp,0xc
c001d635:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001d639:	0f b7 db             	movzx  ebx,bx
c001d63c:	50                   	push   eax
c001d63d:	e8 50 f7 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d642:	83 c4 0c             	add    esp,0xc
c001d645:	0f b6 c0             	movzx  eax,al
c001d648:	50                   	push   eax
c001d649:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001d64d:	50                   	push   eax
c001d64e:	53                   	push   ebx
c001d64f:	e8 50 fb ff ff       	call   c001d1a4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d65a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001d65e:	74 03                	je     c001d663 <Vm::faultHandler(regs*)+0x47f>
c001d660:	48                   	dec    eax
c001d661:	eb 01                	jmp    c001d664 <Vm::faultHandler(regs*)+0x480>
c001d663:	40                   	inc    eax
c001d664:	0f b7 c0             	movzx  eax,ax
c001d667:	eb 7f                	jmp    c001d6e8 <Vm::faultHandler(regs*)+0x504>
c001d669:	83 ec 0c             	sub    esp,0xc
c001d66c:	68 1a a1 02 c0       	push   0xc002a11a
c001d671:	e8 17 50 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d676:	83 c4 10             	add    esp,0x10
c001d679:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001d67c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d681:	74 0d                	je     c001d690 <Vm::faultHandler(regs*)+0x4ac>
c001d683:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001d68a:	0f 87 40 01 00 00    	ja     c001d7d0 <Vm::faultHandler(regs*)+0x5ec>
c001d690:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001d693:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001d697:	0f b7 db             	movzx  ebx,bx
c001d69a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d69f:	74 20                	je     c001d6c1 <Vm::faultHandler(regs*)+0x4dd>
c001d6a1:	ed                   	in     eax,dx
c001d6a2:	51                   	push   ecx
c001d6a3:	50                   	push   eax
c001d6a4:	56                   	push   esi
c001d6a5:	53                   	push   ebx
c001d6a6:	e8 24 fb ff ff       	call   c001d1cf <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001d6ab:	83 c4 10             	add    esp,0x10
c001d6ae:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d6b1:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001d6b5:	74 05                	je     c001d6bc <Vm::faultHandler(regs*)+0x4d8>
c001d6b7:	83 e8 04             	sub    eax,0x4
c001d6ba:	eb 27                	jmp    c001d6e3 <Vm::faultHandler(regs*)+0x4ff>
c001d6bc:	83 c0 04             	add    eax,0x4
c001d6bf:	eb 22                	jmp    c001d6e3 <Vm::faultHandler(regs*)+0x4ff>
c001d6c1:	66 ed                	in     ax,dx
c001d6c3:	0f b7 c0             	movzx  eax,ax
c001d6c6:	52                   	push   edx
c001d6c7:	50                   	push   eax
c001d6c8:	56                   	push   esi
c001d6c9:	53                   	push   ebx
c001d6ca:	e8 ea fa ff ff       	call   c001d1b9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001d6cf:	83 c4 10             	add    esp,0x10
c001d6d2:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d6d5:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001d6d9:	74 05                	je     c001d6e0 <Vm::faultHandler(regs*)+0x4fc>
c001d6db:	83 e8 02             	sub    eax,0x2
c001d6de:	eb 03                	jmp    c001d6e3 <Vm::faultHandler(regs*)+0x4ff>
c001d6e0:	83 c0 02             	add    eax,0x2
c001d6e3:	25 ff ff 00 00       	and    eax,0xffff
c001d6e8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001d6eb:	e9 b1 02 00 00       	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d6f0:	83 ec 0c             	sub    esp,0xc
c001d6f3:	4b                   	dec    ebx
c001d6f4:	68 20 a1 02 c0       	push   0xc002a120
c001d6f9:	e8 8f 4f ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	80 fb 05             	cmp    bl,0x5
c001d704:	77 0a                	ja     c001d710 <Vm::faultHandler(regs*)+0x52c>
c001d706:	0f b6 db             	movzx  ebx,bl
c001d709:	ff 24 9d 90 a1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5e70]
c001d710:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001d714:	eb 1b                	jmp    c001d731 <Vm::faultHandler(regs*)+0x54d>
c001d716:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001d71a:	eb 15                	jmp    c001d731 <Vm::faultHandler(regs*)+0x54d>
c001d71c:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001d720:	eb 0f                	jmp    c001d731 <Vm::faultHandler(regs*)+0x54d>
c001d722:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001d726:	eb 09                	jmp    c001d731 <Vm::faultHandler(regs*)+0x54d>
c001d728:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001d72b:	eb 04                	jmp    c001d731 <Vm::faultHandler(regs*)+0x54d>
c001d72d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001d731:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d736:	74 0d                	je     c001d745 <Vm::faultHandler(regs*)+0x561>
c001d738:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001d73f:	0f 87 8b 00 00 00    	ja     c001d7d0 <Vm::faultHandler(regs*)+0x5ec>
c001d745:	53                   	push   ebx
c001d746:	53                   	push   ebx
c001d747:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001d74b:	52                   	push   edx
c001d74c:	50                   	push   eax
c001d74d:	e8 1e fa ff ff       	call   c001d170 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001d752:	5e                   	pop    esi
c001d753:	0f b6 c0             	movzx  eax,al
c001d756:	5d                   	pop    ebp
c001d757:	50                   	push   eax
c001d758:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001d75c:	50                   	push   eax
c001d75d:	e8 4e f6 ff ff       	call   c001cdb0 <Vm::outbv(unsigned short, unsigned char)>
c001d762:	83 c4 10             	add    esp,0x10
c001d765:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d768:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001d76c:	74 03                	je     c001d771 <Vm::faultHandler(regs*)+0x58d>
c001d76e:	48                   	dec    eax
c001d76f:	eb 01                	jmp    c001d772 <Vm::faultHandler(regs*)+0x58e>
c001d771:	40                   	inc    eax
c001d772:	0f b7 c0             	movzx  eax,ax
c001d775:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001d778:	e9 24 02 00 00       	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d77d:	83 ec 0c             	sub    esp,0xc
c001d780:	4b                   	dec    ebx
c001d781:	68 20 a1 02 c0       	push   0xc002a120
c001d786:	e8 02 4f ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d78b:	83 c4 10             	add    esp,0x10
c001d78e:	80 fb 05             	cmp    bl,0x5
c001d791:	77 0a                	ja     c001d79d <Vm::faultHandler(regs*)+0x5b9>
c001d793:	0f b6 db             	movzx  ebx,bl
c001d796:	ff 24 9d a8 a1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd5e58]
c001d79d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001d7a1:	eb 1b                	jmp    c001d7be <Vm::faultHandler(regs*)+0x5da>
c001d7a3:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001d7a7:	eb 15                	jmp    c001d7be <Vm::faultHandler(regs*)+0x5da>
c001d7a9:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001d7ad:	eb 0f                	jmp    c001d7be <Vm::faultHandler(regs*)+0x5da>
c001d7af:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001d7b3:	eb 09                	jmp    c001d7be <Vm::faultHandler(regs*)+0x5da>
c001d7b5:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001d7b8:	eb 04                	jmp    c001d7be <Vm::faultHandler(regs*)+0x5da>
c001d7ba:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001d7be:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001d7c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d7c6:	74 39                	je     c001d801 <Vm::faultHandler(regs*)+0x61d>
c001d7c8:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001d7ce:	76 31                	jbe    c001d801 <Vm::faultHandler(regs*)+0x61d>
c001d7d0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001d7d4:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001d7d8:	51                   	push   ecx
c001d7d9:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001d7dd:	51                   	push   ecx
c001d7de:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001d7e2:	51                   	push   ecx
c001d7e3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001d7e7:	51                   	push   ecx
c001d7e8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001d7ec:	52                   	push   edx
c001d7ed:	50                   	push   eax
c001d7ee:	50                   	push   eax
c001d7ef:	68 ed a0 02 c0       	push   0xc002a0ed
c001d7f4:	e8 94 4e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d7f9:	83 c4 20             	add    esp,0x20
c001d7fc:	e9 fb 01 00 00       	jmp    c001d9fc <Vm::faultHandler(regs*)+0x818>
c001d801:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001d804:	0f b7 d3             	movzx  edx,bx
c001d807:	81 e6 00 04 00 00    	and    esi,0x400
c001d80d:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001d810:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d815:	74 1d                	je     c001d834 <Vm::faultHandler(regs*)+0x650>
c001d817:	51                   	push   ecx
c001d818:	51                   	push   ecx
c001d819:	52                   	push   edx
c001d81a:	50                   	push   eax
c001d81b:	e8 73 f9 ff ff       	call   c001d193 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001d820:	83 c4 10             	add    esp,0x10
c001d823:	89 ea                	mov    edx,ebp
c001d825:	ef                   	out    dx,eax
c001d826:	85 f6                	test   esi,esi
c001d828:	74 05                	je     c001d82f <Vm::faultHandler(regs*)+0x64b>
c001d82a:	83 eb 04             	sub    ebx,0x4
c001d82d:	eb 21                	jmp    c001d850 <Vm::faultHandler(regs*)+0x66c>
c001d82f:	83 c3 04             	add    ebx,0x4
c001d832:	eb 1c                	jmp    c001d850 <Vm::faultHandler(regs*)+0x66c>
c001d834:	51                   	push   ecx
c001d835:	51                   	push   ecx
c001d836:	52                   	push   edx
c001d837:	50                   	push   eax
c001d838:	e8 44 f9 ff ff       	call   c001d181 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001d83d:	83 c4 10             	add    esp,0x10
c001d840:	89 ea                	mov    edx,ebp
c001d842:	66 ef                	out    dx,ax
c001d844:	85 f6                	test   esi,esi
c001d846:	74 05                	je     c001d84d <Vm::faultHandler(regs*)+0x669>
c001d848:	83 eb 02             	sub    ebx,0x2
c001d84b:	eb 03                	jmp    c001d850 <Vm::faultHandler(regs*)+0x66c>
c001d84d:	83 c3 02             	add    ebx,0x2
c001d850:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001d856:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001d859:	e9 43 01 00 00       	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d85e:	53                   	push   ebx
c001d85f:	53                   	push   ebx
c001d860:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d864:	50                   	push   eax
c001d865:	68 26 a1 02 c0       	push   0xc002a126
c001d86a:	e8 1e 4e ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d86f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001d876:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d87a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d87d:	e8 10 f5 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d882:	0f b6 c0             	movzx  eax,al
c001d885:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001d888:	eb 5e                	jmp    c001d8e8 <Vm::faultHandler(regs*)+0x704>
c001d88a:	51                   	push   ecx
c001d88b:	51                   	push   ecx
c001d88c:	53                   	push   ebx
c001d88d:	68 2c a1 02 c0       	push   0xc002a12c
c001d892:	e8 f6 4d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d897:	83 c4 10             	add    esp,0x10
c001d89a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d89f:	74 07                	je     c001d8a8 <Vm::faultHandler(regs*)+0x6c4>
c001d8a1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001d8a5:	ed                   	in     eax,dx
c001d8a6:	eb 14                	jmp    c001d8bc <Vm::faultHandler(regs*)+0x6d8>
c001d8a8:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001d8ab:	66 31 db             	xor    bx,bx
c001d8ae:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001d8b1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001d8b5:	66 ed                	in     ax,dx
c001d8b7:	0f b7 c0             	movzx  eax,ax
c001d8ba:	09 d8                	or     eax,ebx
c001d8bc:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001d8bf:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001d8c3:	e9 dc 00 00 00       	jmp    c001d9a4 <Vm::faultHandler(regs*)+0x7c0>
c001d8c8:	50                   	push   eax
c001d8c9:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d8cc:	53                   	push   ebx
c001d8cd:	68 32 a1 02 c0       	push   0xc002a132
c001d8d2:	e8 b6 4d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d8d7:	58                   	pop    eax
c001d8d8:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001d8dc:	5a                   	pop    edx
c001d8dd:	50                   	push   eax
c001d8de:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d8e2:	50                   	push   eax
c001d8e3:	e8 c8 f4 ff ff       	call   c001cdb0 <Vm::outbv(unsigned short, unsigned char)>
c001d8e8:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001d8ec:	e9 85 00 00 00       	jmp    c001d976 <Vm::faultHandler(regs*)+0x792>
c001d8f1:	50                   	push   eax
c001d8f2:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d8f5:	53                   	push   ebx
c001d8f6:	68 3b a1 02 c0       	push   0xc002a13b
c001d8fb:	e8 8d 4d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d900:	83 c4 10             	add    esp,0x10
c001d903:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001d907:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d90c:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001d90f:	74 03                	je     c001d914 <Vm::faultHandler(regs*)+0x730>
c001d911:	ef                   	out    dx,eax
c001d912:	eb ab                	jmp    c001d8bf <Vm::faultHandler(regs*)+0x6db>
c001d914:	66 ef                	out    dx,ax
c001d916:	eb a7                	jmp    c001d8bf <Vm::faultHandler(regs*)+0x6db>
c001d918:	55                   	push   ebp
c001d919:	55                   	push   ebp
c001d91a:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001d91d:	68 44 a1 02 c0       	push   0xc002a144
c001d922:	e8 66 4d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d927:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001d92e:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001d932:	89 04 24             	mov    DWORD PTR [esp],eax
c001d935:	e8 58 f4 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d93a:	0f b6 c0             	movzx  eax,al
c001d93d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001d940:	eb 31                	jmp    c001d973 <Vm::faultHandler(regs*)+0x78f>
c001d942:	56                   	push   esi
c001d943:	56                   	push   esi
c001d944:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001d947:	68 4a a1 02 c0       	push   0xc002a14a
c001d94c:	e8 3c 4d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001d957:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d95c:	74 03                	je     c001d961 <Vm::faultHandler(regs*)+0x77d>
c001d95e:	ed                   	in     eax,dx
c001d95f:	eb 0d                	jmp    c001d96e <Vm::faultHandler(regs*)+0x78a>
c001d961:	66 ed                	in     ax,dx
c001d963:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001d966:	0f b7 c0             	movzx  eax,ax
c001d969:	66 31 d2             	xor    dx,dx
c001d96c:	09 d0                	or     eax,edx
c001d96e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001d971:	eb 2e                	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d973:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	eb 29                	jmp    c001d9a4 <Vm::faultHandler(regs*)+0x7c0>
c001d97b:	50                   	push   eax
c001d97c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001d97f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001d982:	68 59 a1 02 c0       	push   0xc002a159
c001d987:	e8 01 4d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d98c:	83 c4 10             	add    esp,0x10
c001d98f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001d992:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001d997:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001d99a:	74 03                	je     c001d99f <Vm::faultHandler(regs*)+0x7bb>
c001d99c:	ef                   	out    dx,eax
c001d99d:	eb 02                	jmp    c001d9a1 <Vm::faultHandler(regs*)+0x7bd>
c001d99f:	66 ef                	out    dx,ax
c001d9a1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001d9a4:	b0 01                	mov    al,0x1
c001d9a6:	eb 56                	jmp    c001d9fe <Vm::faultHandler(regs*)+0x81a>
c001d9a8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001d9ac:	51                   	push   ecx
c001d9ad:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001d9b1:	51                   	push   ecx
c001d9b2:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001d9b6:	51                   	push   ecx
c001d9b7:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001d9bb:	51                   	push   ecx
c001d9bc:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001d9c0:	52                   	push   edx
c001d9c1:	50                   	push   eax
c001d9c2:	50                   	push   eax
c001d9c3:	68 62 a1 02 c0       	push   0xc002a162
c001d9c8:	e8 c0 4c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001d9cd:	83 c4 20             	add    esp,0x20
c001d9d0:	83 ec 0c             	sub    esp,0xc
c001d9d3:	6a 60                	push   0x60
c001d9d5:	e8 b8 f3 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d9da:	83 c4 10             	add    esp,0x10
c001d9dd:	3c 1c                	cmp    al,0x1c
c001d9df:	74 04                	je     c001d9e5 <Vm::faultHandler(regs*)+0x801>
c001d9e1:	3c 5a                	cmp    al,0x5a
c001d9e3:	75 eb                	jne    c001d9d0 <Vm::faultHandler(regs*)+0x7ec>
c001d9e5:	3c 1c                	cmp    al,0x1c
c001d9e7:	74 04                	je     c001d9ed <Vm::faultHandler(regs*)+0x809>
c001d9e9:	3c 5a                	cmp    al,0x5a
c001d9eb:	75 0f                	jne    c001d9fc <Vm::faultHandler(regs*)+0x818>
c001d9ed:	83 ec 0c             	sub    esp,0xc
c001d9f0:	6a 60                	push   0x60
c001d9f2:	e8 9b f3 ff ff       	call   c001cd92 <Vm::inbv(unsigned short)>
c001d9f7:	83 c4 10             	add    esp,0x10
c001d9fa:	eb e9                	jmp    c001d9e5 <Vm::faultHandler(regs*)+0x801>
c001d9fc:	31 c0                	xor    eax,eax
c001d9fe:	83 c4 1c             	add    esp,0x1c
c001da01:	5b                   	pop    ebx
c001da02:	5e                   	pop    esi
c001da03:	5f                   	pop    edi
c001da04:	5d                   	pop    ebp
c001da05:	c3                   	ret    

c001da06 <Vm::fpuInternalTo32(unsigned long long)>:
c001da06:	57                   	push   edi
c001da07:	56                   	push   esi
c001da08:	53                   	push   ebx
c001da09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da11:	89 d6                	mov    esi,edx
c001da13:	89 d7                	mov    edi,edx
c001da15:	89 c1                	mov    ecx,eax
c001da17:	c1 ef 14             	shr    edi,0x14
c001da1a:	89 d3                	mov    ebx,edx
c001da1c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001da22:	31 d2                	xor    edx,edx
c001da24:	89 f8                	mov    eax,edi
c001da26:	81 e6 00 00 00 80    	and    esi,0x80000000
c001da2c:	bf ff 00 00 00       	mov    edi,0xff
c001da31:	05 80 fc ff ff       	add    eax,0xfffffc80
c001da36:	83 d2 ff             	adc    edx,0xffffffff
c001da39:	39 c7                	cmp    edi,eax
c001da3b:	bf 00 00 00 00       	mov    edi,0x0
c001da40:	19 d7                	sbb    edi,edx
c001da42:	72 15                	jb     c001da59 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001da44:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001da48:	c1 e0 17             	shl    eax,0x17
c001da4b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001da51:	09 f1                	or     ecx,esi
c001da53:	09 c1                	or     ecx,eax
c001da55:	89 cf                	mov    edi,ecx
c001da57:	eb 02                	jmp    c001da5b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001da59:	31 ff                	xor    edi,edi
c001da5b:	89 f8                	mov    eax,edi
c001da5d:	5b                   	pop    ebx
c001da5e:	5e                   	pop    esi
c001da5f:	5f                   	pop    edi
c001da60:	c3                   	ret    

c001da61 <Vm::fpuInternalTo64(unsigned long long)>:
c001da61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da69:	c3                   	ret    

c001da6a <Vm::fpu32ToInternal(unsigned int)>:
c001da6a:	57                   	push   edi
c001da6b:	31 ff                	xor    edi,edi
c001da6d:	56                   	push   esi
c001da6e:	53                   	push   ebx
c001da6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da73:	89 cb                	mov    ebx,ecx
c001da75:	89 ce                	mov    esi,ecx
c001da77:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001da7d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001da83:	c1 e9 17             	shr    ecx,0x17
c001da86:	89 f0                	mov    eax,esi
c001da88:	0f b6 d1             	movzx  edx,cl
c001da8b:	81 c2 80 03 00 00    	add    edx,0x380
c001da91:	89 d1                	mov    ecx,edx
c001da93:	89 fa                	mov    edx,edi
c001da95:	c1 e1 14             	shl    ecx,0x14
c001da98:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001da9c:	c1 e0 1d             	shl    eax,0x1d
c001da9f:	89 d7                	mov    edi,edx
c001daa1:	89 c6                	mov    esi,eax
c001daa3:	89 ca                	mov    edx,ecx
c001daa5:	89 f0                	mov    eax,esi
c001daa7:	09 fa                	or     edx,edi
c001daa9:	09 da                	or     edx,ebx
c001daab:	5b                   	pop    ebx
c001daac:	5e                   	pop    esi
c001daad:	5f                   	pop    edi
c001daae:	c3                   	ret    

c001daaf <Vm::fpu64ToInternal(unsigned long long)>:
c001daaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dab7:	c3                   	ret    

c001dab8 <Vm::fpuFloatToLong(unsigned long long)>:
c001dab8:	57                   	push   edi
c001dab9:	31 c0                	xor    eax,eax
c001dabb:	56                   	push   esi
c001dabc:	31 d2                	xor    edx,edx
c001dabe:	53                   	push   ebx
c001dabf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dac7:	89 d9                	mov    ecx,ebx
c001dac9:	c1 e9 14             	shr    ecx,0x14
c001dacc:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001dad2:	89 cf                	mov    edi,ecx
c001dad4:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001dada:	78 33                	js     c001db0f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001dadc:	89 d9                	mov    ecx,ebx
c001dade:	89 f0                	mov    eax,esi
c001dae0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001dae6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001daec:	89 ca                	mov    edx,ecx
c001daee:	b9 34 00 00 00       	mov    ecx,0x34
c001daf3:	29 f9                	sub    ecx,edi
c001daf5:	0f ad d0             	shrd   eax,edx,cl
c001daf8:	d3 fa                	sar    edx,cl
c001dafa:	f6 c1 20             	test   cl,0x20
c001dafd:	74 05                	je     c001db04 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001daff:	89 d0                	mov    eax,edx
c001db01:	c1 fa 1f             	sar    edx,0x1f
c001db04:	85 db                	test   ebx,ebx
c001db06:	79 07                	jns    c001db0f <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001db08:	f7 d8                	neg    eax
c001db0a:	83 d2 00             	adc    edx,0x0
c001db0d:	f7 da                	neg    edx
c001db0f:	5b                   	pop    ebx
c001db10:	5e                   	pop    esi
c001db11:	5f                   	pop    edi
c001db12:	c3                   	ret    

c001db13 <Vm::fpuULongToFloat(unsigned long long)>:
c001db13:	57                   	push   edi
c001db14:	31 c9                	xor    ecx,ecx
c001db16:	56                   	push   esi
c001db17:	53                   	push   ebx
c001db18:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db20:	0f ba e7 14          	bt     edi,0x14
c001db24:	72 07                	jb     c001db2d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001db26:	01 f6                	add    esi,esi
c001db28:	11 ff                	adc    edi,edi
c001db2a:	41                   	inc    ecx
c001db2b:	eb f3                	jmp    c001db20 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001db2d:	89 fa                	mov    edx,edi
c001db2f:	89 f0                	mov    eax,esi
c001db31:	bb 33 04 00 00       	mov    ebx,0x433
c001db36:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001db3c:	29 cb                	sub    ebx,ecx
c001db3e:	89 d9                	mov    ecx,ebx
c001db40:	5b                   	pop    ebx
c001db41:	c1 e1 14             	shl    ecx,0x14
c001db44:	5e                   	pop    esi
c001db45:	09 ca                	or     edx,ecx
c001db47:	5f                   	pop    edi
c001db48:	c3                   	ret    

c001db49 <Vm::fpuLongToFloat(long long)>:
c001db49:	56                   	push   esi
c001db4a:	31 c0                	xor    eax,eax
c001db4c:	53                   	push   ebx
c001db4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db55:	39 c8                	cmp    eax,ecx
c001db57:	19 d8                	sbb    eax,ebx
c001db59:	7d 04                	jge    c001db5f <Vm::fpuLongToFloat(long long)+0x16>
c001db5b:	31 f6                	xor    esi,esi
c001db5d:	eb 0c                	jmp    c001db6b <Vm::fpuLongToFloat(long long)+0x22>
c001db5f:	f7 d9                	neg    ecx
c001db61:	be 01 00 00 00       	mov    esi,0x1
c001db66:	83 d3 00             	adc    ebx,0x0
c001db69:	f7 db                	neg    ebx
c001db6b:	31 c0                	xor    eax,eax
c001db6d:	0f ba e3 14          	bt     ebx,0x14
c001db71:	72 07                	jb     c001db7a <Vm::fpuLongToFloat(long long)+0x31>
c001db73:	01 c9                	add    ecx,ecx
c001db75:	11 db                	adc    ebx,ebx
c001db77:	40                   	inc    eax
c001db78:	eb f3                	jmp    c001db6d <Vm::fpuLongToFloat(long long)+0x24>
c001db7a:	ba 33 04 00 00       	mov    edx,0x433
c001db7f:	29 c2                	sub    edx,eax
c001db81:	89 c8                	mov    eax,ecx
c001db83:	c1 e2 14             	shl    edx,0x14
c001db86:	89 d9                	mov    ecx,ebx
c001db88:	89 f3                	mov    ebx,esi
c001db8a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001db90:	09 ca                	or     edx,ecx
c001db92:	84 db                	test   bl,bl
c001db94:	74 06                	je     c001db9c <Vm::fpuLongToFloat(long long)+0x53>
c001db96:	81 ca 00 00 00 80    	or     edx,0x80000000
c001db9c:	5b                   	pop    ebx
c001db9d:	5e                   	pop    esi
c001db9e:	c3                   	ret    

c001db9f <Vm::fpuGet0()>:
c001db9f:	31 c0                	xor    eax,eax
c001dba1:	31 d2                	xor    edx,edx
c001dba3:	c3                   	ret    

c001dba4 <Vm::fpuGet1()>:
c001dba4:	b8 01 00 00 00       	mov    eax,0x1
c001dba9:	31 d2                	xor    edx,edx
c001dbab:	c3                   	ret    

c001dbac <Vm::fpuGetPi()>:
c001dbac:	b8 03 00 00 00       	mov    eax,0x3
c001dbb1:	31 d2                	xor    edx,edx
c001dbb3:	c3                   	ret    

c001dbb4 <Vm::fpuGetLog2E()>:
c001dbb4:	83 ec 18             	sub    esp,0x18
c001dbb7:	68 c0 a1 02 c0       	push   0xc002a1c0
c001dbbc:	e8 96 b5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001dbc1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dbc6:	31 d2                	xor    edx,edx
c001dbc8:	83 c4 1c             	add    esp,0x1c
c001dbcb:	c3                   	ret    

c001dbcc <Vm::fpuGetLogE2()>:
c001dbcc:	83 ec 18             	sub    esp,0x18
c001dbcf:	68 cc a1 02 c0       	push   0xc002a1cc
c001dbd4:	e8 7e b5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001dbd9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dbde:	31 d2                	xor    edx,edx
c001dbe0:	83 c4 1c             	add    esp,0x1c
c001dbe3:	c3                   	ret    

c001dbe4 <Vm::fpuGetLog210()>:
c001dbe4:	83 ec 18             	sub    esp,0x18
c001dbe7:	68 d8 a1 02 c0       	push   0xc002a1d8
c001dbec:	e8 66 b5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001dbf1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dbf6:	31 d2                	xor    edx,edx
c001dbf8:	83 c4 1c             	add    esp,0x1c
c001dbfb:	c3                   	ret    

c001dbfc <Vm::fpuGetLog102()>:
c001dbfc:	83 ec 18             	sub    esp,0x18
c001dbff:	68 e5 a1 02 c0       	push   0xc002a1e5
c001dc04:	e8 4e b5 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001dc09:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001dc0e:	31 d2                	xor    edx,edx
c001dc10:	83 c4 1c             	add    esp,0x1c
c001dc13:	c3                   	ret    

c001dc14 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001dc14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc18:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001dc1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dc20:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001dc24:	0f 92 c0             	setb   al
c001dc27:	c3                   	ret    

c001dc28 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001dc28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc30:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001dc34:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001dc38:	09 c2                	or     edx,eax
c001dc3a:	0f 94 c0             	sete   al
c001dc3d:	c3                   	ret    

c001dc3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001dc3e:	57                   	push   edi
c001dc3f:	56                   	push   esi
c001dc40:	53                   	push   ebx
c001dc41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001dc4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dc51:	57                   	push   edi
c001dc52:	56                   	push   esi
c001dc53:	53                   	push   ebx
c001dc54:	51                   	push   ecx
c001dc55:	e8 ce ff ff ff       	call   c001dc28 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	88 c2                	mov    dl,al
c001dc5f:	31 c0                	xor    eax,eax
c001dc61:	84 d2                	test   dl,dl
c001dc63:	75 0c                	jne    c001dc71 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001dc65:	57                   	push   edi
c001dc66:	56                   	push   esi
c001dc67:	53                   	push   ebx
c001dc68:	51                   	push   ecx
c001dc69:	e8 a6 ff ff ff       	call   c001dc14 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001dc6e:	83 c4 10             	add    esp,0x10
c001dc71:	83 e0 01             	and    eax,0x1
c001dc74:	5b                   	pop    ebx
c001dc75:	88 c1                	mov    cl,al
c001dc77:	83 e2 01             	and    edx,0x1
c001dc7a:	a0 c1 d2 02 c0       	mov    al,ds:0xc002d2c1
c001dc7f:	c1 e2 06             	shl    edx,0x6
c001dc82:	83 e0 ba             	and    eax,0xffffffba
c001dc85:	5e                   	pop    esi
c001dc86:	09 c8                	or     eax,ecx
c001dc88:	5f                   	pop    edi
c001dc89:	09 d0                	or     eax,edx
c001dc8b:	a2 c1 d2 02 c0       	mov    ds:0xc002d2c1,al
c001dc90:	c3                   	ret    

c001dc91 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001dc91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc99:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001dc9d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001dca1:	c3                   	ret    

c001dca2 <Vm::fpuAbs(unsigned long long)>:
c001dca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dca6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcaa:	c3                   	ret    

c001dcab <Vm::fpuChs(unsigned long long)>:
c001dcab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcaf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcb3:	f7 d8                	neg    eax
c001dcb5:	83 d2 00             	adc    edx,0x0
c001dcb8:	f7 da                	neg    edx
c001dcba:	c3                   	ret    

c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001dcbb:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001dcbf:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001dcc4:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001dcc8:	eb c7                	jmp    c001dc91 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001dcca <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001dcca:	53                   	push   ebx
c001dccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dccf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcd7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dcdb:	0f af ca             	imul   ecx,edx
c001dcde:	0f af d8             	imul   ebx,eax
c001dce1:	f7 e2                	mul    edx
c001dce3:	01 d9                	add    ecx,ebx
c001dce5:	5b                   	pop    ebx
c001dce6:	01 ca                	add    edx,ecx
c001dce8:	c3                   	ret    

c001dce9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001dce9:	83 ec 0c             	sub    esp,0xc
c001dcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcfc:	e8 4b 6b 00 00       	call   c002484c <__udivdi3>
c001dd01:	83 c4 1c             	add    esp,0x1c
c001dd04:	c3                   	ret    

c001dd05 <Vm::fpuSquare(unsigned long long)>:
c001dd05:	50                   	push   eax
c001dd06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dd0e:	52                   	push   edx
c001dd0f:	50                   	push   eax
c001dd10:	52                   	push   edx
c001dd11:	50                   	push   eax
c001dd12:	e8 b3 ff ff ff       	call   c001dcca <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dd17:	83 c4 14             	add    esp,0x14
c001dd1a:	c3                   	ret    

c001dd1b <Vm::fpuGetReg(int)>:
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001dd23:	76 10                	jbe    c001dd35 <Vm::fpuGetReg(int)+0x1a>
c001dd25:	83 ec 0c             	sub    esp,0xc
c001dd28:	68 f2 a1 02 c0       	push   0xc002a1f2
c001dd2d:	e8 25 b4 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001dd32:	83 c4 10             	add    esp,0x10
c001dd35:	a0 c1 d2 02 c0       	mov    al,ds:0xc002d2c1
c001dd3a:	b9 08 00 00 00       	mov    ecx,0x8
c001dd3f:	c0 e8 03             	shr    al,0x3
c001dd42:	83 e0 07             	and    eax,0x7
c001dd45:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd49:	99                   	cdq    
c001dd4a:	f7 f9                	idiv   ecx
c001dd4c:	8b 04 d5 c4 d2 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd2d3c]
c001dd53:	8b 14 d5 c8 d2 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd2d38]
c001dd5a:	83 c4 0c             	add    esp,0xc
c001dd5d:	c3                   	ret    

c001dd5e <Vm::fpuSetReg(int, unsigned long long)>:
c001dd5e:	57                   	push   edi
c001dd5f:	56                   	push   esi
c001dd60:	52                   	push   edx
c001dd61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dd65:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001dd69:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001dd6e:	76 10                	jbe    c001dd80 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001dd70:	83 ec 0c             	sub    esp,0xc
c001dd73:	68 05 a2 02 c0       	push   0xc002a205
c001dd78:	e8 da b3 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001dd7d:	83 c4 10             	add    esp,0x10
c001dd80:	a0 c1 d2 02 c0       	mov    al,ds:0xc002d2c1
c001dd85:	b9 08 00 00 00       	mov    ecx,0x8
c001dd8a:	c0 e8 03             	shr    al,0x3
c001dd8d:	83 e0 07             	and    eax,0x7
c001dd90:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dd94:	99                   	cdq    
c001dd95:	f7 f9                	idiv   ecx
c001dd97:	89 34 d5 c4 d2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2d3c],esi
c001dd9e:	89 3c d5 c8 d2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd2d38],edi
c001dda5:	58                   	pop    eax
c001dda6:	5e                   	pop    esi
c001dda7:	5f                   	pop    edi
c001dda8:	c3                   	ret    

c001dda9 <Vm::fpuPush(unsigned long long)>:
c001dda9:	a0 c1 d2 02 c0       	mov    al,ds:0xc002d2c1
c001ddae:	c0 e8 03             	shr    al,0x3
c001ddb1:	83 e0 07             	and    eax,0x7
c001ddb4:	83 c0 07             	add    eax,0x7
c001ddb7:	88 c2                	mov    dl,al
c001ddb9:	83 e0 07             	and    eax,0x7
c001ddbc:	83 e2 07             	and    edx,0x7
c001ddbf:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ddc6:	8a 15 c1 d2 02 c0    	mov    dl,BYTE PTR ds:0xc002d2c1
c001ddcc:	83 e2 c7             	and    edx,0xffffffc7
c001ddcf:	09 ca                	or     edx,ecx
c001ddd1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ddd5:	88 15 c1 d2 02 c0    	mov    BYTE PTR ds:0xc002d2c1,dl
c001dddb:	89 0c c5 c8 d2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2d38],ecx
c001dde2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dde6:	89 14 c5 c4 d2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2d3c],edx
c001dded:	a1 04 d3 02 c0       	mov    eax,ds:0xc002d304
c001ddf2:	83 f8 08             	cmp    eax,0x8
c001ddf5:	75 08                	jne    c001ddff <Vm::fpuPush(unsigned long long)+0x56>
c001ddf7:	80 0d c0 d2 02 c0 40 	or     BYTE PTR ds:0xc002d2c0,0x40
c001ddfe:	c3                   	ret    
c001ddff:	40                   	inc    eax
c001de00:	a3 04 d3 02 c0       	mov    ds:0xc002d304,eax
c001de05:	c3                   	ret    

c001de06 <Vm::fpuPop()>:
c001de06:	8a 0d c1 d2 02 c0    	mov    cl,BYTE PTR ds:0xc002d2c1
c001de0c:	53                   	push   ebx
c001de0d:	c0 e9 03             	shr    cl,0x3
c001de10:	8a 1d c1 d2 02 c0    	mov    bl,BYTE PTR ds:0xc002d2c1
c001de16:	83 e1 07             	and    ecx,0x7
c001de19:	83 e3 c7             	and    ebx,0xffffffc7
c001de1c:	8b 04 cd c4 d2 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd2d3c]
c001de23:	8b 14 cd c8 d2 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd2d38]
c001de2a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001de31:	83 e1 38             	and    ecx,0x38
c001de34:	09 d9                	or     ecx,ebx
c001de36:	88 0d c1 d2 02 c0    	mov    BYTE PTR ds:0xc002d2c1,cl
c001de3c:	8b 0d 04 d3 02 c0    	mov    ecx,DWORD PTR ds:0xc002d304
c001de42:	85 c9                	test   ecx,ecx
c001de44:	74 09                	je     c001de4f <Vm::fpuPop()+0x49>
c001de46:	49                   	dec    ecx
c001de47:	89 0d 04 d3 02 c0    	mov    DWORD PTR ds:0xc002d304,ecx
c001de4d:	eb 07                	jmp    c001de56 <Vm::fpuPop()+0x50>
c001de4f:	80 0d c0 d2 02 c0 40 	or     BYTE PTR ds:0xc002d2c0,0x40
c001de56:	5b                   	pop    ebx
c001de57:	c3                   	ret    

c001de58 <Vm::x87Handler(regs*)>:
c001de58:	55                   	push   ebp
c001de59:	57                   	push   edi
c001de5a:	56                   	push   esi
c001de5b:	53                   	push   ebx
c001de5c:	83 ec 1c             	sub    esp,0x1c
c001de5f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de63:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001de68:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001de6b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001de73:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001de77:	50                   	push   eax
c001de78:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001de7c:	50                   	push   eax
c001de7d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001de81:	50                   	push   eax
c001de82:	53                   	push   ebx
c001de83:	e8 d4 b0 ff ff       	call   c0018f5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001de88:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001de8b:	83 c4 10             	add    esp,0x10
c001de8e:	89 c6                	mov    esi,eax
c001de90:	80 fa d9             	cmp    dl,0xd9
c001de93:	0f 85 52 01 00 00    	jne    c001dfeb <Vm::x87Handler(regs*)+0x193>
c001de99:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001de9d:	8d 50 20             	lea    edx,[eax+0x20]
c001dea0:	80 fa 0e             	cmp    dl,0xe
c001dea3:	0f 87 86 00 00 00    	ja     c001df2f <Vm::x87Handler(regs*)+0xd7>
c001dea9:	0f b6 d2             	movzx  edx,dl
c001deac:	ff 24 95 18 a2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5de8]
c001deb3:	e8 e7 fc ff ff       	call   c001db9f <Vm::fpuGet0()>
c001deb8:	eb 05                	jmp    c001debf <Vm::x87Handler(regs*)+0x67>
c001deba:	e8 e5 fc ff ff       	call   c001dba4 <Vm::fpuGet1()>
c001debf:	57                   	push   edi
c001dec0:	57                   	push   edi
c001dec1:	52                   	push   edx
c001dec2:	50                   	push   eax
c001dec3:	e8 e1 fe ff ff       	call   c001dda9 <Vm::fpuPush(unsigned long long)>
c001dec8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001decc:	83 c4 10             	add    esp,0x10
c001decf:	b0 01                	mov    al,0x1
c001ded1:	e9 e3 09 00 00       	jmp    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	6a 00                	push   0x0
c001dedb:	e8 3b fe ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001dee0:	59                   	pop    ecx
c001dee1:	5e                   	pop    esi
c001dee2:	52                   	push   edx
c001dee3:	50                   	push   eax
c001dee4:	e8 c2 fd ff ff       	call   c001dcab <Vm::fpuChs(unsigned long long)>
c001dee9:	eb 13                	jmp    c001defe <Vm::x87Handler(regs*)+0xa6>
c001deeb:	83 ec 0c             	sub    esp,0xc
c001deee:	6a 00                	push   0x0
c001def0:	e8 26 fe ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001def5:	5f                   	pop    edi
c001def6:	5d                   	pop    ebp
c001def7:	52                   	push   edx
c001def8:	50                   	push   eax
c001def9:	e8 a4 fd ff ff       	call   c001dca2 <Vm::fpuAbs(unsigned long long)>
c001defe:	83 c4 0c             	add    esp,0xc
c001df01:	52                   	push   edx
c001df02:	50                   	push   eax
c001df03:	6a 00                	push   0x0
c001df05:	e8 54 fe ff ff       	call   c001dd5e <Vm::fpuSetReg(int, unsigned long long)>
c001df0a:	eb bc                	jmp    c001dec8 <Vm::x87Handler(regs*)+0x70>
c001df0c:	e8 d3 fc ff ff       	call   c001dbe4 <Vm::fpuGetLog210()>
c001df11:	eb ac                	jmp    c001debf <Vm::x87Handler(regs*)+0x67>
c001df13:	e8 9c fc ff ff       	call   c001dbb4 <Vm::fpuGetLog2E()>
c001df18:	eb a5                	jmp    c001debf <Vm::x87Handler(regs*)+0x67>
c001df1a:	e8 8d fc ff ff       	call   c001dbac <Vm::fpuGetPi()>
c001df1f:	eb 9e                	jmp    c001debf <Vm::x87Handler(regs*)+0x67>
c001df21:	e8 d6 fc ff ff       	call   c001dbfc <Vm::fpuGetLog102()>
c001df26:	eb 97                	jmp    c001debf <Vm::x87Handler(regs*)+0x67>
c001df28:	e8 9f fc ff ff       	call   c001dbcc <Vm::fpuGetLogE2()>
c001df2d:	eb 90                	jmp    c001debf <Vm::x87Handler(regs*)+0x67>
c001df2f:	8d 50 40             	lea    edx,[eax+0x40]
c001df32:	80 fa 07             	cmp    dl,0x7
c001df35:	77 15                	ja     c001df4c <Vm::x87Handler(regs*)+0xf4>
c001df37:	83 ec 0c             	sub    esp,0xc
c001df3a:	2d c0 00 00 00       	sub    eax,0xc0
c001df3f:	50                   	push   eax
c001df40:	e8 d6 fd ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001df45:	59                   	pop    ecx
c001df46:	5e                   	pop    esi
c001df47:	e9 75 ff ff ff       	jmp    c001dec1 <Vm::x87Handler(regs*)+0x69>
c001df4c:	8d 50 38             	lea    edx,[eax+0x38]
c001df4f:	80 fa 07             	cmp    dl,0x7
c001df52:	77 3c                	ja     c001df90 <Vm::x87Handler(regs*)+0x138>
c001df54:	83 ec 0c             	sub    esp,0xc
c001df57:	2d c8 00 00 00       	sub    eax,0xc8
c001df5c:	50                   	push   eax
c001df5d:	e8 b9 fd ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001df62:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df69:	89 c6                	mov    esi,eax
c001df6b:	89 d7                	mov    edi,edx
c001df6d:	e8 a9 fd ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001df72:	83 c4 0c             	add    esp,0xc
c001df75:	52                   	push   edx
c001df76:	50                   	push   eax
c001df77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001df7b:	2d c8 00 00 00       	sub    eax,0xc8
c001df80:	50                   	push   eax
c001df81:	e8 d8 fd ff ff       	call   c001dd5e <Vm::fpuSetReg(int, unsigned long long)>
c001df86:	83 c4 0c             	add    esp,0xc
c001df89:	57                   	push   edi
c001df8a:	56                   	push   esi
c001df8b:	e9 73 ff ff ff       	jmp    c001df03 <Vm::x87Handler(regs*)+0xab>
c001df90:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001df94:	84 d2                	test   dl,dl
c001df96:	75 0f                	jne    c001dfa7 <Vm::x87Handler(regs*)+0x14f>
c001df98:	83 ec 0c             	sub    esp,0xc
c001df9b:	ff 36                	push   DWORD PTR [esi]
c001df9d:	e8 c8 fa ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001dfa2:	e9 bf 00 00 00       	jmp    c001e066 <Vm::x87Handler(regs*)+0x20e>
c001dfa7:	80 fa 03             	cmp    dl,0x3
c001dfaa:	75 13                	jne    c001dfbf <Vm::x87Handler(regs*)+0x167>
c001dfac:	e8 55 fe ff ff       	call   c001de06 <Vm::fpuPop()>
c001dfb1:	55                   	push   ebp
c001dfb2:	55                   	push   ebp
c001dfb3:	52                   	push   edx
c001dfb4:	50                   	push   eax
c001dfb5:	e8 4c fa ff ff       	call   c001da06 <Vm::fpuInternalTo32(unsigned long long)>
c001dfba:	e9 88 00 00 00       	jmp    c001e047 <Vm::x87Handler(regs*)+0x1ef>
c001dfbf:	80 fa 05             	cmp    dl,0x5
c001dfc2:	75 0e                	jne    c001dfd2 <Vm::x87Handler(regs*)+0x17a>
c001dfc4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dfc7:	66 a3 c2 d2 02 c0    	mov    ds:0xc002d2c2,ax
c001dfcd:	e9 df 00 00 00       	jmp    c001e0b1 <Vm::x87Handler(regs*)+0x259>
c001dfd2:	31 c0                	xor    eax,eax
c001dfd4:	80 fa 07             	cmp    dl,0x7
c001dfd7:	0f 85 dc 08 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001dfdd:	66 a1 c2 d2 02 c0    	mov    ax,ds:0xc002d2c2
c001dfe3:	66 89 06             	mov    WORD PTR [esi],ax
c001dfe6:	e9 c6 00 00 00       	jmp    c001e0b1 <Vm::x87Handler(regs*)+0x259>
c001dfeb:	80 fa d8             	cmp    dl,0xd8
c001dfee:	0f 84 c9 00 00 00    	je     c001e0bd <Vm::x87Handler(regs*)+0x265>
c001dff4:	80 fa dc             	cmp    dl,0xdc
c001dff7:	0f 84 0d 02 00 00    	je     c001e20a <Vm::x87Handler(regs*)+0x3b2>
c001dffd:	80 fa de             	cmp    dl,0xde
c001e000:	0f 84 cd 02 00 00    	je     c001e2d3 <Vm::x87Handler(regs*)+0x47b>
c001e006:	80 fa dd             	cmp    dl,0xdd
c001e009:	0f 84 5f 04 00 00    	je     c001e46e <Vm::x87Handler(regs*)+0x616>
c001e00f:	80 fa da             	cmp    dl,0xda
c001e012:	0f 84 24 05 00 00    	je     c001e53c <Vm::x87Handler(regs*)+0x6e4>
c001e018:	80 fa df             	cmp    dl,0xdf
c001e01b:	0f 84 68 05 00 00    	je     c001e589 <Vm::x87Handler(regs*)+0x731>
c001e021:	31 c0                	xor    eax,eax
c001e023:	80 fa db             	cmp    dl,0xdb
c001e026:	0f 85 8d 08 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e02c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e030:	80 fa 03             	cmp    dl,0x3
c001e033:	0f 85 70 06 00 00    	jne    c001e6a9 <Vm::x87Handler(regs*)+0x851>
c001e039:	e8 c8 fd ff ff       	call   c001de06 <Vm::fpuPop()>
c001e03e:	55                   	push   ebp
c001e03f:	55                   	push   ebp
c001e040:	52                   	push   edx
c001e041:	50                   	push   eax
c001e042:	e8 71 fa ff ff       	call   c001dab8 <Vm::fpuFloatToLong(unsigned long long)>
c001e047:	83 c4 10             	add    esp,0x10
c001e04a:	89 06                	mov    DWORD PTR [esi],eax
c001e04c:	eb 63                	jmp    c001e0b1 <Vm::x87Handler(regs*)+0x259>
c001e04e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e052:	84 d2                	test   dl,dl
c001e054:	0f 85 e6 05 00 00    	jne    c001e640 <Vm::x87Handler(regs*)+0x7e8>
c001e05a:	57                   	push   edi
c001e05b:	57                   	push   edi
c001e05c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e05f:	ff 36                	push   DWORD PTR [esi]
c001e061:	e8 49 fa ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e066:	5e                   	pop    esi
c001e067:	5f                   	pop    edi
c001e068:	52                   	push   edx
c001e069:	50                   	push   eax
c001e06a:	e8 3a fd ff ff       	call   c001dda9 <Vm::fpuPush(unsigned long long)>
c001e06f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e073:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e076:	e9 51 fe ff ff       	jmp    c001decc <Vm::x87Handler(regs*)+0x74>
c001e07b:	80 fa 03             	cmp    dl,0x3
c001e07e:	0f 85 d7 06 00 00    	jne    c001e75b <Vm::x87Handler(regs*)+0x903>
c001e084:	57                   	push   edi
c001e085:	57                   	push   edi
c001e086:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e089:	ff 36                	push   DWORD PTR [esi]
c001e08b:	e8 1f fa ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e090:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e097:	89 c6                	mov    esi,eax
c001e099:	89 d7                	mov    edi,edx
c001e09b:	e8 7b fc ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e0a0:	57                   	push   edi
c001e0a1:	56                   	push   esi
c001e0a2:	52                   	push   edx
c001e0a3:	50                   	push   eax
c001e0a4:	e8 95 fb ff ff       	call   c001dc3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e0a9:	83 c4 20             	add    esp,0x20
c001e0ac:	e8 55 fd ff ff       	call   c001de06 <Vm::fpuPop()>
c001e0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0b5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e0b8:	e9 12 fe ff ff       	jmp    c001decf <Vm::x87Handler(regs*)+0x77>
c001e0bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e0c1:	8d 50 40             	lea    edx,[eax+0x40]
c001e0c4:	80 fa 07             	cmp    dl,0x7
c001e0c7:	77 29                	ja     c001e0f2 <Vm::x87Handler(regs*)+0x29a>
c001e0c9:	83 ec 0c             	sub    esp,0xc
c001e0cc:	2d c0 00 00 00       	sub    eax,0xc0
c001e0d1:	50                   	push   eax
c001e0d2:	e8 44 fc ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e0d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0de:	89 c6                	mov    esi,eax
c001e0e0:	89 d7                	mov    edi,edx
c001e0e2:	e8 34 fc ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e0e7:	57                   	push   edi
c001e0e8:	56                   	push   esi
c001e0e9:	52                   	push   edx
c001e0ea:	50                   	push   eax
c001e0eb:	e8 a1 fb ff ff       	call   c001dc91 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e0f0:	eb 2f                	jmp    c001e121 <Vm::x87Handler(regs*)+0x2c9>
c001e0f2:	8d 50 38             	lea    edx,[eax+0x38]
c001e0f5:	80 fa 07             	cmp    dl,0x7
c001e0f8:	77 2f                	ja     c001e129 <Vm::x87Handler(regs*)+0x2d1>
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	2d c8 00 00 00       	sub    eax,0xc8
c001e102:	50                   	push   eax
c001e103:	e8 13 fc ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e108:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e10f:	89 c6                	mov    esi,eax
c001e111:	89 d7                	mov    edi,edx
c001e113:	e8 03 fc ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e118:	57                   	push   edi
c001e119:	56                   	push   esi
c001e11a:	52                   	push   edx
c001e11b:	50                   	push   eax
c001e11c:	e8 a9 fb ff ff       	call   c001dcca <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e121:	83 c4 1c             	add    esp,0x1c
c001e124:	e9 d8 fd ff ff       	jmp    c001df01 <Vm::x87Handler(regs*)+0xa9>
c001e129:	8d 50 30             	lea    edx,[eax+0x30]
c001e12c:	80 fa 07             	cmp    dl,0x7
c001e12f:	77 0d                	ja     c001e13e <Vm::x87Handler(regs*)+0x2e6>
c001e131:	83 ec 0c             	sub    esp,0xc
c001e134:	2d d0 00 00 00       	sub    eax,0xd0
c001e139:	e9 99 03 00 00       	jmp    c001e4d7 <Vm::x87Handler(regs*)+0x67f>
c001e13e:	8d 50 28             	lea    edx,[eax+0x28]
c001e141:	80 fa 07             	cmp    dl,0x7
c001e144:	77 0d                	ja     c001e153 <Vm::x87Handler(regs*)+0x2fb>
c001e146:	83 ec 0c             	sub    esp,0xc
c001e149:	2d d8 00 00 00       	sub    eax,0xd8
c001e14e:	e9 c0 03 00 00       	jmp    c001e513 <Vm::x87Handler(regs*)+0x6bb>
c001e153:	8d 50 20             	lea    edx,[eax+0x20]
c001e156:	80 fa 07             	cmp    dl,0x7
c001e159:	77 1b                	ja     c001e176 <Vm::x87Handler(regs*)+0x31e>
c001e15b:	83 ec 0c             	sub    esp,0xc
c001e15e:	2d e0 00 00 00       	sub    eax,0xe0
c001e163:	50                   	push   eax
c001e164:	e8 b2 fb ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e169:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e170:	89 c6                	mov    esi,eax
c001e172:	89 d7                	mov    edi,edx
c001e174:	eb 22                	jmp    c001e198 <Vm::x87Handler(regs*)+0x340>
c001e176:	8d 50 18             	lea    edx,[eax+0x18]
c001e179:	80 fa 07             	cmp    dl,0x7
c001e17c:	77 2d                	ja     c001e1ab <Vm::x87Handler(regs*)+0x353>
c001e17e:	83 ec 0c             	sub    esp,0xc
c001e181:	6a 00                	push   0x0
c001e183:	e8 93 fb ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e188:	89 c6                	mov    esi,eax
c001e18a:	89 d7                	mov    edi,edx
c001e18c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e190:	2d e8 00 00 00       	sub    eax,0xe8
c001e195:	89 04 24             	mov    DWORD PTR [esp],eax
c001e198:	e8 7e fb ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e19d:	57                   	push   edi
c001e19e:	56                   	push   esi
c001e19f:	52                   	push   edx
c001e1a0:	50                   	push   eax
c001e1a1:	e8 15 fb ff ff       	call   c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e1a6:	e9 76 ff ff ff       	jmp    c001e121 <Vm::x87Handler(regs*)+0x2c9>
c001e1ab:	8d 50 10             	lea    edx,[eax+0x10]
c001e1ae:	80 fa 07             	cmp    dl,0x7
c001e1b1:	77 1b                	ja     c001e1ce <Vm::x87Handler(regs*)+0x376>
c001e1b3:	83 ec 0c             	sub    esp,0xc
c001e1b6:	2d f0 00 00 00       	sub    eax,0xf0
c001e1bb:	50                   	push   eax
c001e1bc:	e8 5a fb ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e1c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e1c8:	89 c6                	mov    esi,eax
c001e1ca:	89 d7                	mov    edi,edx
c001e1cc:	eb 22                	jmp    c001e1f0 <Vm::x87Handler(regs*)+0x398>
c001e1ce:	3c f7                	cmp    al,0xf7
c001e1d0:	0f 86 d1 03 00 00    	jbe    c001e5a7 <Vm::x87Handler(regs*)+0x74f>
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	6a 00                	push   0x0
c001e1db:	e8 3b fb ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e1e0:	89 c6                	mov    esi,eax
c001e1e2:	89 d7                	mov    edi,edx
c001e1e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1e8:	2d f8 00 00 00       	sub    eax,0xf8
c001e1ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1f0:	e8 26 fb ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e1f5:	57                   	push   edi
c001e1f6:	56                   	push   esi
c001e1f7:	52                   	push   edx
c001e1f8:	50                   	push   eax
c001e1f9:	e8 eb fa ff ff       	call   c001dce9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e1fe:	83 c4 1c             	add    esp,0x1c
c001e201:	52                   	push   edx
c001e202:	50                   	push   eax
c001e203:	6a 00                	push   0x0
c001e205:	e9 51 02 00 00       	jmp    c001e45b <Vm::x87Handler(regs*)+0x603>
c001e20a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e20e:	8d 50 40             	lea    edx,[eax+0x40]
c001e211:	80 fa 07             	cmp    dl,0x7
c001e214:	77 37                	ja     c001e24d <Vm::x87Handler(regs*)+0x3f5>
c001e216:	83 ec 0c             	sub    esp,0xc
c001e219:	2d c0 00 00 00       	sub    eax,0xc0
c001e21e:	50                   	push   eax
c001e21f:	e8 f7 fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e224:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e22b:	89 c6                	mov    esi,eax
c001e22d:	89 d7                	mov    edi,edx
c001e22f:	e8 e7 fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e234:	57                   	push   edi
c001e235:	56                   	push   esi
c001e236:	52                   	push   edx
c001e237:	50                   	push   eax
c001e238:	e8 54 fa ff ff       	call   c001dc91 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e23d:	83 c4 1c             	add    esp,0x1c
c001e240:	52                   	push   edx
c001e241:	50                   	push   eax
c001e242:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e246:	2d c0 00 00 00       	sub    eax,0xc0
c001e24b:	eb 3d                	jmp    c001e28a <Vm::x87Handler(regs*)+0x432>
c001e24d:	8d 50 38             	lea    edx,[eax+0x38]
c001e250:	80 fa 07             	cmp    dl,0x7
c001e253:	77 3b                	ja     c001e290 <Vm::x87Handler(regs*)+0x438>
c001e255:	83 ec 0c             	sub    esp,0xc
c001e258:	2d c8 00 00 00       	sub    eax,0xc8
c001e25d:	50                   	push   eax
c001e25e:	e8 b8 fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e263:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e26a:	89 c6                	mov    esi,eax
c001e26c:	89 d7                	mov    edi,edx
c001e26e:	e8 a8 fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e273:	57                   	push   edi
c001e274:	56                   	push   esi
c001e275:	52                   	push   edx
c001e276:	50                   	push   eax
c001e277:	e8 4e fa ff ff       	call   c001dcca <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e27c:	83 c4 1c             	add    esp,0x1c
c001e27f:	52                   	push   edx
c001e280:	50                   	push   eax
c001e281:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e285:	2d c8 00 00 00       	sub    eax,0xc8
c001e28a:	50                   	push   eax
c001e28b:	e9 75 fc ff ff       	jmp    c001df05 <Vm::x87Handler(regs*)+0xad>
c001e290:	83 c0 18             	add    eax,0x18
c001e293:	3c 07                	cmp    al,0x7
c001e295:	0f 87 3b 04 00 00    	ja     c001e6d6 <Vm::x87Handler(regs*)+0x87e>
c001e29b:	83 ec 0c             	sub    esp,0xc
c001e29e:	6a 00                	push   0x0
c001e2a0:	e8 76 fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e2a5:	89 c6                	mov    esi,eax
c001e2a7:	89 d7                	mov    edi,edx
c001e2a9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2ad:	2d e8 00 00 00       	sub    eax,0xe8
c001e2b2:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2b5:	e8 61 fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e2ba:	57                   	push   edi
c001e2bb:	56                   	push   esi
c001e2bc:	52                   	push   edx
c001e2bd:	50                   	push   eax
c001e2be:	e8 f8 f9 ff ff       	call   c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e2c3:	83 c4 1c             	add    esp,0x1c
c001e2c6:	52                   	push   edx
c001e2c7:	50                   	push   eax
c001e2c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2cc:	2d e8 00 00 00       	sub    eax,0xe8
c001e2d1:	eb b7                	jmp    c001e28a <Vm::x87Handler(regs*)+0x432>
c001e2d3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e2d7:	8d 50 40             	lea    edx,[eax+0x40]
c001e2da:	80 fa 07             	cmp    dl,0x7
c001e2dd:	77 3a                	ja     c001e319 <Vm::x87Handler(regs*)+0x4c1>
c001e2df:	83 ec 0c             	sub    esp,0xc
c001e2e2:	2d c0 00 00 00       	sub    eax,0xc0
c001e2e7:	50                   	push   eax
c001e2e8:	e8 2e fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e2ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e2f4:	89 c6                	mov    esi,eax
c001e2f6:	89 d7                	mov    edi,edx
c001e2f8:	e8 1e fa ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e2fd:	57                   	push   edi
c001e2fe:	56                   	push   esi
c001e2ff:	52                   	push   edx
c001e300:	50                   	push   eax
c001e301:	e8 8b f9 ff ff       	call   c001dc91 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e306:	83 c4 1c             	add    esp,0x1c
c001e309:	52                   	push   edx
c001e30a:	50                   	push   eax
c001e30b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e30f:	2d c0 00 00 00       	sub    eax,0xc0
c001e314:	e9 9e 01 00 00       	jmp    c001e4b7 <Vm::x87Handler(regs*)+0x65f>
c001e319:	8d 50 20             	lea    edx,[eax+0x20]
c001e31c:	80 fa 07             	cmp    dl,0x7
c001e31f:	77 3a                	ja     c001e35b <Vm::x87Handler(regs*)+0x503>
c001e321:	83 ec 0c             	sub    esp,0xc
c001e324:	2d e0 00 00 00       	sub    eax,0xe0
c001e329:	50                   	push   eax
c001e32a:	e8 ec f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e32f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e336:	89 c6                	mov    esi,eax
c001e338:	89 d7                	mov    edi,edx
c001e33a:	e8 dc f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e33f:	57                   	push   edi
c001e340:	56                   	push   esi
c001e341:	52                   	push   edx
c001e342:	50                   	push   eax
c001e343:	e8 73 f9 ff ff       	call   c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e348:	83 c4 1c             	add    esp,0x1c
c001e34b:	52                   	push   edx
c001e34c:	50                   	push   eax
c001e34d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e351:	2d e0 00 00 00       	sub    eax,0xe0
c001e356:	e9 5c 01 00 00       	jmp    c001e4b7 <Vm::x87Handler(regs*)+0x65f>
c001e35b:	8d 50 18             	lea    edx,[eax+0x18]
c001e35e:	80 fa 07             	cmp    dl,0x7
c001e361:	77 3b                	ja     c001e39e <Vm::x87Handler(regs*)+0x546>
c001e363:	83 ec 0c             	sub    esp,0xc
c001e366:	6a 00                	push   0x0
c001e368:	e8 ae f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e36d:	89 c6                	mov    esi,eax
c001e36f:	89 d7                	mov    edi,edx
c001e371:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e375:	2d e8 00 00 00       	sub    eax,0xe8
c001e37a:	89 04 24             	mov    DWORD PTR [esp],eax
c001e37d:	e8 99 f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e382:	57                   	push   edi
c001e383:	56                   	push   esi
c001e384:	52                   	push   edx
c001e385:	50                   	push   eax
c001e386:	e8 30 f9 ff ff       	call   c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e38b:	83 c4 1c             	add    esp,0x1c
c001e38e:	52                   	push   edx
c001e38f:	50                   	push   eax
c001e390:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e394:	2d e8 00 00 00       	sub    eax,0xe8
c001e399:	e9 19 01 00 00       	jmp    c001e4b7 <Vm::x87Handler(regs*)+0x65f>
c001e39e:	8d 50 38             	lea    edx,[eax+0x38]
c001e3a1:	80 fa 07             	cmp    dl,0x7
c001e3a4:	77 37                	ja     c001e3dd <Vm::x87Handler(regs*)+0x585>
c001e3a6:	83 ec 0c             	sub    esp,0xc
c001e3a9:	2d c8 00 00 00       	sub    eax,0xc8
c001e3ae:	50                   	push   eax
c001e3af:	e8 67 f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e3b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3bb:	89 c6                	mov    esi,eax
c001e3bd:	89 d7                	mov    edi,edx
c001e3bf:	e8 57 f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e3c4:	57                   	push   edi
c001e3c5:	56                   	push   esi
c001e3c6:	52                   	push   edx
c001e3c7:	50                   	push   eax
c001e3c8:	e8 fd f8 ff ff       	call   c001dcca <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e3cd:	83 c4 1c             	add    esp,0x1c
c001e3d0:	52                   	push   edx
c001e3d1:	50                   	push   eax
c001e3d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3d6:	2d c8 00 00 00       	sub    eax,0xc8
c001e3db:	eb 7d                	jmp    c001e45a <Vm::x87Handler(regs*)+0x602>
c001e3dd:	3c f7                	cmp    al,0xf7
c001e3df:	76 38                	jbe    c001e419 <Vm::x87Handler(regs*)+0x5c1>
c001e3e1:	83 ec 0c             	sub    esp,0xc
c001e3e4:	6a 00                	push   0x0
c001e3e6:	e8 30 f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e3eb:	89 c6                	mov    esi,eax
c001e3ed:	89 d7                	mov    edi,edx
c001e3ef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e3f3:	2d f8 00 00 00       	sub    eax,0xf8
c001e3f8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3fb:	e8 1b f9 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e400:	57                   	push   edi
c001e401:	56                   	push   esi
c001e402:	52                   	push   edx
c001e403:	50                   	push   eax
c001e404:	e8 e0 f8 ff ff       	call   c001dce9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e409:	83 c4 1c             	add    esp,0x1c
c001e40c:	52                   	push   edx
c001e40d:	50                   	push   eax
c001e40e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e412:	2d f8 00 00 00       	sub    eax,0xf8
c001e417:	eb 41                	jmp    c001e45a <Vm::x87Handler(regs*)+0x602>
c001e419:	8d 50 10             	lea    edx,[eax+0x10]
c001e41c:	80 fa 07             	cmp    dl,0x7
c001e41f:	0f 87 5a 01 00 00    	ja     c001e57f <Vm::x87Handler(regs*)+0x727>
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	2d f0 00 00 00       	sub    eax,0xf0
c001e42d:	50                   	push   eax
c001e42e:	e8 e8 f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e433:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e43a:	89 c6                	mov    esi,eax
c001e43c:	89 d7                	mov    edi,edx
c001e43e:	e8 d8 f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e443:	57                   	push   edi
c001e444:	56                   	push   esi
c001e445:	52                   	push   edx
c001e446:	50                   	push   eax
c001e447:	e8 9d f8 ff ff       	call   c001dce9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e44c:	83 c4 1c             	add    esp,0x1c
c001e44f:	52                   	push   edx
c001e450:	50                   	push   eax
c001e451:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e455:	2d f0 00 00 00       	sub    eax,0xf0
c001e45a:	50                   	push   eax
c001e45b:	e8 fe f8 ff ff       	call   c001dd5e <Vm::fpuSetReg(int, unsigned long long)>
c001e460:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e464:	e8 9d f9 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e469:	e9 5e fa ff ff       	jmp    c001decc <Vm::x87Handler(regs*)+0x74>
c001e46e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e472:	8d 50 30             	lea    edx,[eax+0x30]
c001e475:	80 fa 07             	cmp    dl,0x7
c001e478:	77 1d                	ja     c001e497 <Vm::x87Handler(regs*)+0x63f>
c001e47a:	83 ec 0c             	sub    esp,0xc
c001e47d:	6a 00                	push   0x0
c001e47f:	e8 97 f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e484:	83 c4 0c             	add    esp,0xc
c001e487:	52                   	push   edx
c001e488:	50                   	push   eax
c001e489:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e48d:	2d d0 00 00 00       	sub    eax,0xd0
c001e492:	e9 f3 fd ff ff       	jmp    c001e28a <Vm::x87Handler(regs*)+0x432>
c001e497:	8d 50 28             	lea    edx,[eax+0x28]
c001e49a:	80 fa 07             	cmp    dl,0x7
c001e49d:	77 28                	ja     c001e4c7 <Vm::x87Handler(regs*)+0x66f>
c001e49f:	83 ec 0c             	sub    esp,0xc
c001e4a2:	6a 00                	push   0x0
c001e4a4:	e8 72 f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e4a9:	83 c4 0c             	add    esp,0xc
c001e4ac:	52                   	push   edx
c001e4ad:	50                   	push   eax
c001e4ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e4b2:	2d d8 00 00 00       	sub    eax,0xd8
c001e4b7:	50                   	push   eax
c001e4b8:	e8 a1 f8 ff ff       	call   c001dd5e <Vm::fpuSetReg(int, unsigned long long)>
c001e4bd:	e8 44 f9 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e4c2:	e9 01 fa ff ff       	jmp    c001dec8 <Vm::x87Handler(regs*)+0x70>
c001e4c7:	8d 50 20             	lea    edx,[eax+0x20]
c001e4ca:	80 fa 07             	cmp    dl,0x7
c001e4cd:	77 30                	ja     c001e4ff <Vm::x87Handler(regs*)+0x6a7>
c001e4cf:	83 ec 0c             	sub    esp,0xc
c001e4d2:	2d e0 00 00 00       	sub    eax,0xe0
c001e4d7:	50                   	push   eax
c001e4d8:	e8 3e f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e4dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e4e4:	89 c6                	mov    esi,eax
c001e4e6:	89 d7                	mov    edi,edx
c001e4e8:	e8 2e f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e4ed:	57                   	push   edi
c001e4ee:	56                   	push   esi
c001e4ef:	52                   	push   edx
c001e4f0:	50                   	push   eax
c001e4f1:	e8 48 f7 ff ff       	call   c001dc3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e4f6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e4fa:	e9 54 02 00 00       	jmp    c001e753 <Vm::x87Handler(regs*)+0x8fb>
c001e4ff:	8d 50 18             	lea    edx,[eax+0x18]
c001e502:	80 fa 07             	cmp    dl,0x7
c001e505:	0f 87 43 fb ff ff    	ja     c001e04e <Vm::x87Handler(regs*)+0x1f6>
c001e50b:	83 ec 0c             	sub    esp,0xc
c001e50e:	2d e8 00 00 00       	sub    eax,0xe8
c001e513:	50                   	push   eax
c001e514:	e8 02 f8 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e519:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e520:	89 c6                	mov    esi,eax
c001e522:	89 d7                	mov    edi,edx
c001e524:	e8 f2 f7 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e529:	57                   	push   edi
c001e52a:	56                   	push   esi
c001e52b:	52                   	push   edx
c001e52c:	50                   	push   eax
c001e52d:	e8 0c f7 ff ff       	call   c001dc3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e532:	83 c4 20             	add    esp,0x20
c001e535:	e8 cc f8 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e53a:	eb 62                	jmp    c001e59e <Vm::x87Handler(regs*)+0x746>
c001e53c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001e540:	0f 85 0f 01 00 00    	jne    c001e655 <Vm::x87Handler(regs*)+0x7fd>
c001e546:	83 ec 0c             	sub    esp,0xc
c001e549:	6a 01                	push   0x1
c001e54b:	e8 cb f7 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e550:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e557:	89 c6                	mov    esi,eax
c001e559:	89 d7                	mov    edi,edx
c001e55b:	e8 bb f7 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e560:	57                   	push   edi
c001e561:	56                   	push   esi
c001e562:	52                   	push   edx
c001e563:	50                   	push   eax
c001e564:	e8 d5 f6 ff ff       	call   c001dc3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e569:	83 c4 20             	add    esp,0x20
c001e56c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e570:	e8 91 f8 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e575:	e8 8c f8 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e57a:	e9 50 f9 ff ff       	jmp    c001decf <Vm::x87Handler(regs*)+0x77>
c001e57f:	3c d9                	cmp    al,0xd9
c001e581:	0f 85 b5 02 00 00    	jne    c001e83c <Vm::x87Handler(regs*)+0x9e4>
c001e587:	eb bd                	jmp    c001e546 <Vm::x87Handler(regs*)+0x6ee>
c001e589:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001e58d:	0f 85 ea 02 00 00    	jne    c001e87d <Vm::x87Handler(regs*)+0xa25>
c001e593:	0f b7 05 c0 d2 02 c0 	movzx  eax,WORD PTR ds:0xc002d2c0
c001e59a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001e59e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001e5a2:	e9 28 f9 ff ff       	jmp    c001decf <Vm::x87Handler(regs*)+0x77>
c001e5a7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e5ab:	84 d2                	test   dl,dl
c001e5ad:	75 0f                	jne    c001e5be <Vm::x87Handler(regs*)+0x766>
c001e5af:	83 ec 0c             	sub    esp,0xc
c001e5b2:	ff 36                	push   DWORD PTR [esi]
c001e5b4:	e8 b1 f4 ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001e5b9:	e9 2c 01 00 00       	jmp    c001e6ea <Vm::x87Handler(regs*)+0x892>
c001e5be:	80 fa 01             	cmp    dl,0x1
c001e5c1:	75 0f                	jne    c001e5d2 <Vm::x87Handler(regs*)+0x77a>
c001e5c3:	83 ec 0c             	sub    esp,0xc
c001e5c6:	ff 36                	push   DWORD PTR [esi]
c001e5c8:	e8 9d f4 ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001e5cd:	e9 81 02 00 00       	jmp    c001e853 <Vm::x87Handler(regs*)+0x9fb>
c001e5d2:	80 fa 04             	cmp    dl,0x4
c001e5d5:	75 0f                	jne    c001e5e6 <Vm::x87Handler(regs*)+0x78e>
c001e5d7:	83 ec 0c             	sub    esp,0xc
c001e5da:	ff 36                	push   DWORD PTR [esi]
c001e5dc:	e8 89 f4 ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001e5e1:	e9 86 01 00 00       	jmp    c001e76c <Vm::x87Handler(regs*)+0x914>
c001e5e6:	80 fa 05             	cmp    dl,0x5
c001e5e9:	75 1b                	jne    c001e606 <Vm::x87Handler(regs*)+0x7ae>
c001e5eb:	83 ec 0c             	sub    esp,0xc
c001e5ee:	6a 00                	push   0x0
c001e5f0:	e8 26 f7 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e5f5:	89 c7                	mov    edi,eax
c001e5f7:	89 d5                	mov    ebp,edx
c001e5f9:	58                   	pop    eax
c001e5fa:	ff 36                	push   DWORD PTR [esi]
c001e5fc:	e8 69 f4 ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001e601:	e9 a3 01 00 00       	jmp    c001e7a9 <Vm::x87Handler(regs*)+0x951>
c001e606:	80 fa 06             	cmp    dl,0x6
c001e609:	75 0f                	jne    c001e61a <Vm::x87Handler(regs*)+0x7c2>
c001e60b:	83 ec 0c             	sub    esp,0xc
c001e60e:	ff 36                	push   DWORD PTR [esi]
c001e610:	e8 55 f4 ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001e615:	e9 ae 01 00 00       	jmp    c001e7c8 <Vm::x87Handler(regs*)+0x970>
c001e61a:	31 c0                	xor    eax,eax
c001e61c:	80 fa 07             	cmp    dl,0x7
c001e61f:	0f 85 94 02 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e625:	83 ec 0c             	sub    esp,0xc
c001e628:	6a 00                	push   0x0
c001e62a:	e8 ec f6 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e62f:	89 c7                	mov    edi,eax
c001e631:	89 d5                	mov    ebp,edx
c001e633:	58                   	pop    eax
c001e634:	ff 36                	push   DWORD PTR [esi]
c001e636:	e8 2f f4 ff ff       	call   c001da6a <Vm::fpu32ToInternal(unsigned int)>
c001e63b:	e9 cb 01 00 00       	jmp    c001e80b <Vm::x87Handler(regs*)+0x9b3>
c001e640:	80 fa 03             	cmp    dl,0x3
c001e643:	0f 85 d3 01 00 00    	jne    c001e81c <Vm::x87Handler(regs*)+0x9c4>
c001e649:	e8 b8 f7 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e64e:	51                   	push   ecx
c001e64f:	51                   	push   ecx
c001e650:	e9 de 01 00 00       	jmp    c001e833 <Vm::x87Handler(regs*)+0x9db>
c001e655:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e659:	80 fa 01             	cmp    dl,0x1
c001e65c:	75 09                	jne    c001e667 <Vm::x87Handler(regs*)+0x80f>
c001e65e:	57                   	push   edi
c001e65f:	57                   	push   edi
c001e660:	8b 06                	mov    eax,DWORD PTR [esi]
c001e662:	e9 e3 01 00 00       	jmp    c001e84a <Vm::x87Handler(regs*)+0x9f2>
c001e667:	80 fa 04             	cmp    dl,0x4
c001e66a:	75 12                	jne    c001e67e <Vm::x87Handler(regs*)+0x826>
c001e66c:	31 d2                	xor    edx,edx
c001e66e:	51                   	push   ecx
c001e66f:	51                   	push   ecx
c001e670:	8b 06                	mov    eax,DWORD PTR [esi]
c001e672:	52                   	push   edx
c001e673:	50                   	push   eax
c001e674:	e8 d0 f4 ff ff       	call   c001db49 <Vm::fpuLongToFloat(long long)>
c001e679:	e9 ee 00 00 00       	jmp    c001e76c <Vm::x87Handler(regs*)+0x914>
c001e67e:	31 c0                	xor    eax,eax
c001e680:	80 fa 07             	cmp    dl,0x7
c001e683:	0f 85 30 02 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e689:	83 ec 0c             	sub    esp,0xc
c001e68c:	6a 00                	push   0x0
c001e68e:	e8 88 f6 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e693:	89 c7                	mov    edi,eax
c001e695:	89 d5                	mov    ebp,edx
c001e697:	58                   	pop    eax
c001e698:	8b 06                	mov    eax,DWORD PTR [esi]
c001e69a:	5a                   	pop    edx
c001e69b:	31 d2                	xor    edx,edx
c001e69d:	52                   	push   edx
c001e69e:	50                   	push   eax
c001e69f:	e8 a5 f4 ff ff       	call   c001db49 <Vm::fpuLongToFloat(long long)>
c001e6a4:	e9 62 01 00 00       	jmp    c001e80b <Vm::x87Handler(regs*)+0x9b3>
c001e6a9:	84 d2                	test   dl,dl
c001e6ab:	75 0d                	jne    c001e6ba <Vm::x87Handler(regs*)+0x862>
c001e6ad:	31 d2                	xor    edx,edx
c001e6af:	55                   	push   ebp
c001e6b0:	55                   	push   ebp
c001e6b1:	8b 06                	mov    eax,DWORD PTR [esi]
c001e6b3:	52                   	push   edx
c001e6b4:	50                   	push   eax
c001e6b5:	e9 d3 01 00 00       	jmp    c001e88d <Vm::x87Handler(regs*)+0xa35>
c001e6ba:	31 c0                	xor    eax,eax
c001e6bc:	80 fa 02             	cmp    dl,0x2
c001e6bf:	0f 85 f4 01 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e6c5:	83 ec 0c             	sub    esp,0xc
c001e6c8:	6a 00                	push   0x0
c001e6ca:	e8 4c f6 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e6cf:	59                   	pop    ecx
c001e6d0:	5f                   	pop    edi
c001e6d1:	e9 6a f9 ff ff       	jmp    c001e040 <Vm::x87Handler(regs*)+0x1e8>
c001e6d6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e6da:	84 d2                	test   dl,dl
c001e6dc:	75 2a                	jne    c001e708 <Vm::x87Handler(regs*)+0x8b0>
c001e6de:	50                   	push   eax
c001e6df:	50                   	push   eax
c001e6e0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e6e3:	ff 36                	push   DWORD PTR [esi]
c001e6e5:	e8 c5 f3 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e6ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e6f1:	89 c6                	mov    esi,eax
c001e6f3:	89 d7                	mov    edi,edx
c001e6f5:	e8 21 f6 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e6fa:	57                   	push   edi
c001e6fb:	56                   	push   esi
c001e6fc:	52                   	push   edx
c001e6fd:	50                   	push   eax
c001e6fe:	e8 8e f5 ff ff       	call   c001dc91 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001e703:	e9 64 01 00 00       	jmp    c001e86c <Vm::x87Handler(regs*)+0xa14>
c001e708:	80 fa 01             	cmp    dl,0x1
c001e70b:	75 11                	jne    c001e71e <Vm::x87Handler(regs*)+0x8c6>
c001e70d:	50                   	push   eax
c001e70e:	50                   	push   eax
c001e70f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e712:	ff 36                	push   DWORD PTR [esi]
c001e714:	e8 96 f3 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e719:	e9 35 01 00 00       	jmp    c001e853 <Vm::x87Handler(regs*)+0x9fb>
c001e71e:	80 fa 02             	cmp    dl,0x2
c001e721:	0f 85 54 f9 ff ff    	jne    c001e07b <Vm::x87Handler(regs*)+0x223>
c001e727:	55                   	push   ebp
c001e728:	55                   	push   ebp
c001e729:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e72c:	ff 36                	push   DWORD PTR [esi]
c001e72e:	e8 7c f3 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e733:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e73a:	89 c6                	mov    esi,eax
c001e73c:	89 d7                	mov    edi,edx
c001e73e:	e8 d8 f5 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e743:	57                   	push   edi
c001e744:	56                   	push   esi
c001e745:	52                   	push   edx
c001e746:	50                   	push   eax
c001e747:	e8 f2 f4 ff ff       	call   c001dc3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001e74c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e750:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001e753:	83 c4 20             	add    esp,0x20
c001e756:	e9 74 f7 ff ff       	jmp    c001decf <Vm::x87Handler(regs*)+0x77>
c001e75b:	80 fa 04             	cmp    dl,0x4
c001e75e:	75 2a                	jne    c001e78a <Vm::x87Handler(regs*)+0x932>
c001e760:	51                   	push   ecx
c001e761:	51                   	push   ecx
c001e762:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e765:	ff 36                	push   DWORD PTR [esi]
c001e767:	e8 43 f3 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e76c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e773:	89 c6                	mov    esi,eax
c001e775:	89 d7                	mov    edi,edx
c001e777:	e8 9f f5 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e77c:	57                   	push   edi
c001e77d:	56                   	push   esi
c001e77e:	52                   	push   edx
c001e77f:	50                   	push   eax
c001e780:	e8 36 f5 ff ff       	call   c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e785:	e9 e2 00 00 00       	jmp    c001e86c <Vm::x87Handler(regs*)+0xa14>
c001e78a:	80 fa 05             	cmp    dl,0x5
c001e78d:	75 28                	jne    c001e7b7 <Vm::x87Handler(regs*)+0x95f>
c001e78f:	83 ec 0c             	sub    esp,0xc
c001e792:	6a 00                	push   0x0
c001e794:	e8 82 f5 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e799:	89 c7                	mov    edi,eax
c001e79b:	89 d5                	mov    ebp,edx
c001e79d:	58                   	pop    eax
c001e79e:	5a                   	pop    edx
c001e79f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e7a2:	ff 36                	push   DWORD PTR [esi]
c001e7a4:	e8 06 f3 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e7a9:	83 c4 10             	add    esp,0x10
c001e7ac:	55                   	push   ebp
c001e7ad:	57                   	push   edi
c001e7ae:	52                   	push   edx
c001e7af:	50                   	push   eax
c001e7b0:	e8 06 f5 ff ff       	call   c001dcbb <Vm::fpuSub(unsigned long long, unsigned long long)>
c001e7b5:	eb 60                	jmp    c001e817 <Vm::x87Handler(regs*)+0x9bf>
c001e7b7:	80 fa 06             	cmp    dl,0x6
c001e7ba:	75 2a                	jne    c001e7e6 <Vm::x87Handler(regs*)+0x98e>
c001e7bc:	51                   	push   ecx
c001e7bd:	51                   	push   ecx
c001e7be:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e7c1:	ff 36                	push   DWORD PTR [esi]
c001e7c3:	e8 e7 f2 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e7c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e7cf:	89 c6                	mov    esi,eax
c001e7d1:	89 d7                	mov    edi,edx
c001e7d3:	e8 43 f5 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e7d8:	57                   	push   edi
c001e7d9:	56                   	push   esi
c001e7da:	52                   	push   edx
c001e7db:	50                   	push   eax
c001e7dc:	e8 08 f5 ff ff       	call   c001dce9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e7e1:	e9 86 00 00 00       	jmp    c001e86c <Vm::x87Handler(regs*)+0xa14>
c001e7e6:	31 c0                	xor    eax,eax
c001e7e8:	80 fa 07             	cmp    dl,0x7
c001e7eb:	0f 85 c8 00 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e7f1:	83 ec 0c             	sub    esp,0xc
c001e7f4:	6a 00                	push   0x0
c001e7f6:	e8 20 f5 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e7fb:	89 c7                	mov    edi,eax
c001e7fd:	89 d5                	mov    ebp,edx
c001e7ff:	58                   	pop    eax
c001e800:	5a                   	pop    edx
c001e801:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e804:	ff 36                	push   DWORD PTR [esi]
c001e806:	e8 a4 f2 ff ff       	call   c001daaf <Vm::fpu64ToInternal(unsigned long long)>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	55                   	push   ebp
c001e80f:	57                   	push   edi
c001e810:	52                   	push   edx
c001e811:	50                   	push   eax
c001e812:	e8 d2 f4 ff ff       	call   c001dce9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001e817:	83 c4 0c             	add    esp,0xc
c001e81a:	eb 53                	jmp    c001e86f <Vm::x87Handler(regs*)+0xa17>
c001e81c:	31 c0                	xor    eax,eax
c001e81e:	80 fa 02             	cmp    dl,0x2
c001e821:	0f 85 92 00 00 00    	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e827:	83 ec 0c             	sub    esp,0xc
c001e82a:	6a 00                	push   0x0
c001e82c:	e8 ea f4 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e831:	59                   	pop    ecx
c001e832:	5f                   	pop    edi
c001e833:	52                   	push   edx
c001e834:	50                   	push   eax
c001e835:	e8 27 f2 ff ff       	call   c001da61 <Vm::fpuInternalTo64(unsigned long long)>
c001e83a:	eb 70                	jmp    c001e8ac <Vm::x87Handler(regs*)+0xa54>
c001e83c:	31 c0                	xor    eax,eax
c001e83e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001e843:	75 74                	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e845:	50                   	push   eax
c001e846:	50                   	push   eax
c001e847:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e84a:	31 d2                	xor    edx,edx
c001e84c:	52                   	push   edx
c001e84d:	50                   	push   eax
c001e84e:	e8 f6 f2 ff ff       	call   c001db49 <Vm::fpuLongToFloat(long long)>
c001e853:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e85a:	89 c6                	mov    esi,eax
c001e85c:	89 d7                	mov    edi,edx
c001e85e:	e8 b8 f4 ff ff       	call   c001dd1b <Vm::fpuGetReg(int)>
c001e863:	57                   	push   edi
c001e864:	56                   	push   esi
c001e865:	52                   	push   edx
c001e866:	50                   	push   eax
c001e867:	e8 5e f4 ff ff       	call   c001dcca <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e86c:	83 c4 1c             	add    esp,0x1c
c001e86f:	52                   	push   edx
c001e870:	50                   	push   eax
c001e871:	6a 00                	push   0x0
c001e873:	e8 e6 f4 ff ff       	call   c001dd5e <Vm::fpuSetReg(int, unsigned long long)>
c001e878:	e9 f2 f7 ff ff       	jmp    c001e06f <Vm::x87Handler(regs*)+0x217>
c001e87d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001e881:	80 fa 05             	cmp    dl,0x5
c001e884:	75 11                	jne    c001e897 <Vm::x87Handler(regs*)+0xa3f>
c001e886:	55                   	push   ebp
c001e887:	55                   	push   ebp
c001e888:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001e88b:	ff 36                	push   DWORD PTR [esi]
c001e88d:	e8 81 f2 ff ff       	call   c001db13 <Vm::fpuULongToFloat(unsigned long long)>
c001e892:	e9 cf f7 ff ff       	jmp    c001e066 <Vm::x87Handler(regs*)+0x20e>
c001e897:	31 c0                	xor    eax,eax
c001e899:	80 fa 07             	cmp    dl,0x7
c001e89c:	75 1b                	jne    c001e8b9 <Vm::x87Handler(regs*)+0xa61>
c001e89e:	e8 63 f5 ff ff       	call   c001de06 <Vm::fpuPop()>
c001e8a3:	51                   	push   ecx
c001e8a4:	51                   	push   ecx
c001e8a5:	52                   	push   edx
c001e8a6:	50                   	push   eax
c001e8a7:	e8 0c f2 ff ff       	call   c001dab8 <Vm::fpuFloatToLong(unsigned long long)>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	89 06                	mov    DWORD PTR [esi],eax
c001e8b1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001e8b4:	e9 f8 f7 ff ff       	jmp    c001e0b1 <Vm::x87Handler(regs*)+0x259>
c001e8b9:	83 c4 1c             	add    esp,0x1c
c001e8bc:	5b                   	pop    ebx
c001e8bd:	5e                   	pop    esi
c001e8be:	5f                   	pop    edi
c001e8bf:	5d                   	pop    ebp
c001e8c0:	c3                   	ret    

c001e8c1 <__static_initialization_and_destruction_0(int, int)>:
c001e8c1:	83 ec 0c             	sub    esp,0xc
c001e8c4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e8c9:	75 1a                	jne    c001e8e5 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e8cb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e8d3:	75 10                	jne    c001e8e5 <__static_initialization_and_destruction_0(int, int)+0x24>
c001e8d5:	83 ec 0c             	sub    esp,0xc
c001e8d8:	68 c0 d2 02 c0       	push   0xc002d2c0
c001e8dd:	e8 be 82 00 00       	call   c0026ba0 <Vm::_FPUState::_FPUState()>
c001e8e2:	83 c4 10             	add    esp,0x10
c001e8e5:	90                   	nop
c001e8e6:	83 c4 0c             	add    esp,0xc
c001e8e9:	c3                   	ret    

c001e8ea <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001e8ea:	83 ec 0c             	sub    esp,0xc
c001e8ed:	83 ec 08             	sub    esp,0x8
c001e8f0:	68 ff ff 00 00       	push   0xffff
c001e8f5:	6a 01                	push   0x1
c001e8f7:	e8 c5 ff ff ff       	call   c001e8c1 <__static_initialization_and_destruction_0(int, int)>
c001e8fc:	83 c4 10             	add    esp,0x10
c001e8ff:	83 c4 0c             	add    esp,0xc
c001e902:	c3                   	ret    
c001e903:	90                   	nop

c001e904 <FAT::getName()>:
c001e904:	b8 54 a2 02 c0       	mov    eax,0xc002a254
c001e909:	c3                   	ret    

c001e90a <FAT::tell(void*, unsigned long long*)>:
c001e90a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e90f:	75 06                	jne    c001e917 <FAT::tell(void*, unsigned long long*)+0xd>
c001e911:	b8 04 00 00 00       	mov    eax,0x4
c001e916:	c3                   	ret    
c001e917:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e91c:	75 06                	jne    c001e924 <FAT::tell(void*, unsigned long long*)+0x1a>
c001e91e:	b8 04 00 00 00       	mov    eax,0x4
c001e923:	c3                   	ret    
c001e924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e928:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001e92b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001e92e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e932:	89 01                	mov    DWORD PTR [ecx],eax
c001e934:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e937:	b8 00 00 00 00       	mov    eax,0x0
c001e93c:	c3                   	ret    
c001e93d:	90                   	nop

c001e93e <FAT::stat(void*, unsigned long long*)>:
c001e93e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001e943:	75 06                	jne    c001e94b <FAT::stat(void*, unsigned long long*)+0xd>
c001e945:	b8 04 00 00 00       	mov    eax,0x4
c001e94a:	c3                   	ret    
c001e94b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e950:	75 06                	jne    c001e958 <FAT::stat(void*, unsigned long long*)+0x1a>
c001e952:	b8 04 00 00 00       	mov    eax,0x4
c001e957:	c3                   	ret    
c001e958:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e95c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001e95f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e962:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e966:	89 01                	mov    DWORD PTR [ecx],eax
c001e968:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e96b:	b8 00 00 00 00       	mov    eax,0x0
c001e970:	c3                   	ret    
c001e971:	90                   	nop

c001e972 <FAT::~FAT()>:
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	ba d8 a2 02 c0       	mov    edx,0xc002a2d8
c001e97a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e97e:	89 10                	mov    DWORD PTR [eax],edx
c001e980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	50                   	push   eax
c001e988:	e8 29 40 ff ff       	call   c00129b6 <Filesystem::~Filesystem()>
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	90                   	nop
c001e991:	83 c4 0c             	add    esp,0xc
c001e994:	c3                   	ret    
c001e995:	90                   	nop

c001e996 <FAT::~FAT()>:
c001e996:	83 ec 0c             	sub    esp,0xc
c001e999:	83 ec 0c             	sub    esp,0xc
c001e99c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a0:	e8 cd ff ff ff       	call   c001e972 <FAT::~FAT()>
c001e9a5:	83 c4 10             	add    esp,0x10
c001e9a8:	83 ec 08             	sub    esp,0x8
c001e9ab:	6a 08                	push   0x8
c001e9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9b1:	e8 f7 3b ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	83 c4 0c             	add    esp,0xc
c001e9bc:	c3                   	ret    
c001e9bd:	90                   	nop

c001e9be <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001e9be:	83 ec 1c             	sub    esp,0x1c
c001e9c1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001e9c8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001e9cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e9d1:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001e9d8:	83 f8 ff             	cmp    eax,0xffffffff
c001e9db:	75 34                	jne    c001ea11 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001e9dd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e9e1:	88 c2                	mov    dl,al
c001e9e3:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001e9e8:	01 d0                	add    eax,edx
c001e9ea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e9ee:	8b 15 20 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d320
c001e9f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e9f8:	89 14 85 40 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cc0],edx
c001e9ff:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001ea04:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ea08:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c001ea0f:	eb 17                	jmp    c001ea28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ea11:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ea15:	88 c2                	mov    dl,al
c001ea17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ea1b:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001ea22:	01 d0                	add    eax,edx
c001ea24:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ea28:	83 ec 04             	sub    esp,0x4
c001ea2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ea33:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ea37:	50                   	push   eax
c001ea38:	e8 9c 80 fe ff       	call   c0006ad9 <f_getlabel>
c001ea3d:	83 c4 10             	add    esp,0x10
c001ea40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ea49:	75 07                	jne    c001ea52 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ea4b:	b8 00 00 00 00       	mov    eax,0x0
c001ea50:	eb 05                	jmp    c001ea57 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ea52:	b8 01 00 00 00       	mov    eax,0x1
c001ea57:	83 c4 1c             	add    esp,0x1c
c001ea5a:	c3                   	ret    
c001ea5b:	90                   	nop

c001ea5c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ea5c:	57                   	push   edi
c001ea5d:	83 ec 58             	sub    esp,0x58
c001ea60:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ea68:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ea6c:	b9 0f 00 00 00       	mov    ecx,0xf
c001ea71:	b8 00 00 00 00       	mov    eax,0x0
c001ea76:	fc                   	cld    
c001ea77:	89 d7                	mov    edi,edx
c001ea79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea7b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ea7f:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001ea86:	83 f8 ff             	cmp    eax,0xffffffff
c001ea89:	75 34                	jne    c001eabf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ea8b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea8f:	88 c2                	mov    dl,al
c001ea91:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001ea96:	01 d0                	add    eax,edx
c001ea98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ea9c:	8b 15 20 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d320
c001eaa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eaa6:	89 14 85 40 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cc0],edx
c001eaad:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001eab2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001eab6:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c001eabd:	eb 17                	jmp    c001ead6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001eabf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eac3:	88 c2                	mov    dl,al
c001eac5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001eac9:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001ead0:	01 d0                	add    eax,edx
c001ead2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ead6:	83 ec 08             	sub    esp,0x8
c001ead9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001eadd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eae1:	50                   	push   eax
c001eae2:	e8 eb 1c fe ff       	call   c00007d2 <strcat>
c001eae7:	83 c4 10             	add    esp,0x10
c001eaea:	83 ec 0c             	sub    esp,0xc
c001eaed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eaf1:	50                   	push   eax
c001eaf2:	e8 d0 81 fe ff       	call   c0006cc7 <f_setlabel>
c001eaf7:	83 c4 10             	add    esp,0x10
c001eafa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eafe:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001eb03:	75 07                	jne    c001eb0c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001eb05:	b8 00 00 00 00       	mov    eax,0x0
c001eb0a:	eb 05                	jmp    c001eb11 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001eb0c:	b8 01 00 00 00       	mov    eax,0x1
c001eb11:	83 c4 58             	add    esp,0x58
c001eb14:	5f                   	pop    edi
c001eb15:	c3                   	ret    

c001eb16 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001eb16:	83 ec 2c             	sub    esp,0x2c
c001eb19:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001eb21:	83 ec 08             	sub    esp,0x8
c001eb24:	68 78 a2 02 c0       	push   0xc002a278
c001eb29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb2d:	e8 3a 1c fe ff       	call   c000076c <strcmp>
c001eb32:	83 c4 10             	add    esp,0x10
c001eb35:	85 c0                	test   eax,eax
c001eb37:	0f 94 c0             	sete   al
c001eb3a:	84 c0                	test   al,al
c001eb3c:	74 0d                	je     c001eb4b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001eb3e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001eb46:	e9 a6 00 00 00       	jmp    c001ebf1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001eb4b:	83 ec 08             	sub    esp,0x8
c001eb4e:	68 6a a2 02 c0       	push   0xc002a26a
c001eb53:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb57:	e8 10 1c fe ff       	call   c000076c <strcmp>
c001eb5c:	83 c4 10             	add    esp,0x10
c001eb5f:	85 c0                	test   eax,eax
c001eb61:	0f 94 c0             	sete   al
c001eb64:	84 c0                	test   al,al
c001eb66:	74 0a                	je     c001eb72 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001eb68:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001eb70:	eb 7f                	jmp    c001ebf1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001eb72:	83 ec 08             	sub    esp,0x8
c001eb75:	68 70 a2 02 c0       	push   0xc002a270
c001eb7a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eb7e:	e8 e9 1b fe ff       	call   c000076c <strcmp>
c001eb83:	83 c4 10             	add    esp,0x10
c001eb86:	85 c0                	test   eax,eax
c001eb88:	0f 94 c0             	sete   al
c001eb8b:	84 c0                	test   al,al
c001eb8d:	74 0a                	je     c001eb99 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001eb8f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001eb97:	eb 58                	jmp    c001ebf1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001eb99:	83 ec 08             	sub    esp,0x8
c001eb9c:	68 ac 72 02 c0       	push   0xc00272ac
c001eba1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eba5:	e8 c2 1b fe ff       	call   c000076c <strcmp>
c001ebaa:	83 c4 10             	add    esp,0x10
c001ebad:	85 c0                	test   eax,eax
c001ebaf:	0f 94 c0             	sete   al
c001ebb2:	84 c0                	test   al,al
c001ebb4:	74 0a                	je     c001ebc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ebb6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ebbe:	eb 31                	jmp    c001ebf1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ebc0:	83 ec 08             	sub    esp,0x8
c001ebc3:	68 76 a2 02 c0       	push   0xc002a276
c001ebc8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ebcc:	e8 9b 1b fe ff       	call   c000076c <strcmp>
c001ebd1:	83 c4 10             	add    esp,0x10
c001ebd4:	85 c0                	test   eax,eax
c001ebd6:	0f 94 c0             	sete   al
c001ebd9:	84 c0                	test   al,al
c001ebdb:	74 0a                	je     c001ebe7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ebdd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ebe5:	eb 0a                	jmp    c001ebf1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ebe7:	b8 08 00 00 00       	mov    eax,0x8
c001ebec:	e9 04 01 00 00       	jmp    c001ecf5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ebf1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ebf8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ebfd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec01:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001ec08:	83 f8 ff             	cmp    eax,0xffffffff
c001ec0b:	75 34                	jne    c001ec41 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ec0d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ec11:	88 c2                	mov    dl,al
c001ec13:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001ec18:	01 d0                	add    eax,edx
c001ec1a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ec1e:	8b 15 20 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d320
c001ec24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec28:	89 14 85 40 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cc0],edx
c001ec2f:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001ec34:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ec38:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c001ec3f:	eb 17                	jmp    c001ec58 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ec41:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ec45:	88 c2                	mov    dl,al
c001ec47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec4b:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001ec52:	01 d0                	add    eax,edx
c001ec54:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ec58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec5c:	88 04 24             	mov    BYTE PTR [esp],al
c001ec5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ec63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ec67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ec6f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ec74:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	68 00 20 00 00       	push   0x2000
c001ec84:	e8 37 08 ff ff       	call   c000f4c0 <malloc>
c001ec89:	83 c4 10             	add    esp,0x10
c001ec8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ec90:	68 00 20 00 00       	push   0x2000
c001ec95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec99:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ec9d:	50                   	push   eax
c001ec9e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001eca2:	50                   	push   eax
c001eca3:	e8 6a 84 fe ff       	call   c0007112 <f_mkfs>
c001eca8:	83 c4 10             	add    esp,0x10
c001ecab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ecaf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecb4:	75 07                	jne    c001ecbd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001ecb6:	b8 00 00 00 00       	mov    eax,0x0
c001ecbb:	eb 38                	jmp    c001ecf5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ecbd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ecc2:	75 17                	jne    c001ecdb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001ecc4:	83 ec 0c             	sub    esp,0xc
c001ecc7:	68 a8 a2 02 c0       	push   0xc002a2a8
c001eccc:	e8 bc 39 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001ecd1:	83 c4 10             	add    esp,0x10
c001ecd4:	b8 09 00 00 00       	mov    eax,0x9
c001ecd9:	eb 1a                	jmp    c001ecf5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001ecdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ecdf:	83 ec 08             	sub    esp,0x8
c001ece2:	50                   	push   eax
c001ece3:	68 7c a2 02 c0       	push   0xc002a27c
c001ece8:	e8 a0 39 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001eced:	83 c4 10             	add    esp,0x10
c001ecf0:	b8 01 00 00 00       	mov    eax,0x1
c001ecf5:	83 c4 2c             	add    esp,0x2c
c001ecf8:	c3                   	ret    
c001ecf9:	90                   	nop

c001ecfa <FAT::tryMount(LogicalDisk*, int)>:
c001ecfa:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ed00:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001ed05:	83 f8 14             	cmp    eax,0x14
c001ed08:	75 17                	jne    c001ed21 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001ed0a:	83 ec 0c             	sub    esp,0xc
c001ed0d:	68 8e a2 02 c0       	push   0xc002a28e
c001ed12:	e8 40 a4 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c001ed17:	83 c4 10             	add    esp,0x10
c001ed1a:	b0 00                	mov    al,0x0
c001ed1c:	e9 d7 01 00 00       	jmp    c001eef8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ed21:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ed28:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ed2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ed34:	3d 00 02 00 00       	cmp    eax,0x200
c001ed39:	74 07                	je     c001ed42 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001ed3b:	b0 00                	mov    al,0x0
c001ed3d:	e9 b6 01 00 00       	jmp    c001eef8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ed42:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ed4a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ed51:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001ed58:	83 f8 ff             	cmp    eax,0xffffffff
c001ed5b:	74 07                	je     c001ed64 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001ed5d:	b0 01                	mov    al,0x1
c001ed5f:	e9 94 01 00 00       	jmp    c001eef8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ed64:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ed6e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ed76:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ed7d:	88 c2                	mov    dl,al
c001ed7f:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001ed84:	01 d0                	add    eax,edx
c001ed86:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ed8d:	8b 15 20 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d320
c001ed93:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ed9a:	89 14 85 40 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cc0],edx
c001eda1:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001eda6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001edad:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c001edb4:	83 ec 0c             	sub    esp,0xc
c001edb7:	68 54 02 00 00       	push   0x254
c001edbc:	e8 ff 06 ff ff       	call   c000f4c0 <malloc>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001edcb:	83 ec 04             	sub    esp,0x4
c001edce:	6a 00                	push   0x0
c001edd0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001edd7:	50                   	push   eax
c001edd8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001eddf:	e8 ec 5e fe ff       	call   c0004cd0 <f_mount>
c001ede4:	83 c4 10             	add    esp,0x10
c001ede7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001edee:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001edf6:	74 19                	je     c001ee11 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001edf8:	83 ec 0c             	sub    esp,0xc
c001edfb:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ee02:	e8 d9 06 ff ff       	call   c000f4e0 <rfree>
c001ee07:	83 c4 10             	add    esp,0x10
c001ee0a:	b0 00                	mov    al,0x0
c001ee0c:	e9 e7 00 00 00       	jmp    c001eef8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ee11:	83 ec 04             	sub    esp,0x4
c001ee14:	68 00 01 00 00       	push   0x100
c001ee19:	6a 00                	push   0x0
c001ee1b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ee22:	50                   	push   eax
c001ee23:	e8 54 18 fe ff       	call   c000067c <memset>
c001ee28:	83 c4 10             	add    esp,0x10
c001ee2b:	83 ec 08             	sub    esp,0x8
c001ee2e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ee35:	50                   	push   eax
c001ee36:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ee3d:	50                   	push   eax
c001ee3e:	e8 8f 19 fe ff       	call   c00007d2 <strcat>
c001ee43:	83 c4 10             	add    esp,0x10
c001ee46:	83 ec 08             	sub    esp,0x8
c001ee49:	68 9c a2 02 c0       	push   0xc002a29c
c001ee4e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001ee55:	50                   	push   eax
c001ee56:	e8 77 19 fe ff       	call   c00007d2 <strcat>
c001ee5b:	83 c4 10             	add    esp,0x10
c001ee5e:	83 ec 04             	sub    esp,0x4
c001ee61:	6a 01                	push   0x1
c001ee63:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001ee6a:	50                   	push   eax
c001ee6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee6f:	50                   	push   eax
c001ee70:	e8 bd 5e fe ff       	call   c0004d32 <f_open>
c001ee75:	83 c4 10             	add    esp,0x10
c001ee78:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001ee7f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001ee86:	85 c0                	test   eax,eax
c001ee88:	74 0a                	je     c001ee94 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001ee8a:	78 2d                	js     c001eeb9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ee8c:	83 e8 04             	sub    eax,0x4
c001ee8f:	83 f8 01             	cmp    eax,0x1
c001ee92:	77 25                	ja     c001eeb9 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001ee94:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eea3:	50                   	push   eax
c001eea4:	e8 db 69 fe ff       	call   c0005884 <f_close>
c001eea9:	83 c4 10             	add    esp,0x10
c001eeac:	90                   	nop
c001eead:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001eeb5:	74 3a                	je     c001eef1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001eeb7:	eb 2d                	jmp    c001eee6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001eec3:	e8 18 06 ff ff       	call   c000f4e0 <rfree>
c001eec8:	83 c4 10             	add    esp,0x10
c001eecb:	83 ec 04             	sub    esp,0x4
c001eece:	6a 00                	push   0x0
c001eed0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001eed7:	50                   	push   eax
c001eed8:	6a 00                	push   0x0
c001eeda:	e8 f1 5d fe ff       	call   c0004cd0 <f_mount>
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	b0 00                	mov    al,0x0
c001eee4:	eb 12                	jmp    c001eef8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001eee6:	a1 20 d3 02 c0       	mov    eax,ds:0xc002d320
c001eeeb:	40                   	inc    eax
c001eeec:	a3 20 d3 02 c0       	mov    ds:0xc002d320,eax
c001eef1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001eef8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001eefe:	c3                   	ret    
c001eeff:	90                   	nop

c001ef00 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ef00:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001ef06:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001ef0e:	74 0a                	je     c001ef1a <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001ef10:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001ef18:	75 0a                	jne    c001ef24 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001ef1a:	b8 04 00 00 00       	mov    eax,0x4
c001ef1f:	e9 db 00 00 00       	jmp    c001efff <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ef24:	83 ec 08             	sub    esp,0x8
c001ef27:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ef2e:	50                   	push   eax
c001ef2f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001ef36:	e8 53 6f fe ff       	call   c0005e8e <f_readdir>
c001ef3b:	83 c4 10             	add    esp,0x10
c001ef3e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001ef45:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ef4b:	83 ec 0c             	sub    esp,0xc
c001ef4e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ef55:	83 c0 1a             	add    eax,0x1a
c001ef58:	50                   	push   eax
c001ef59:	e8 3b 17 fe ff       	call   c0000699 <strlen>
c001ef5e:	83 c4 10             	add    esp,0x10
c001ef61:	ba 00 00 00 00       	mov    edx,0x0
c001ef66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ef6a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ef6e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ef75:	0f b6 c0             	movzx  eax,al
c001ef78:	83 e0 10             	and    eax,0x10
c001ef7b:	74 07                	je     c001ef84 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ef7d:	b8 02 00 00 00       	mov    eax,0x2
c001ef82:	eb 05                	jmp    c001ef89 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001ef84:	b8 01 00 00 00       	mov    eax,0x1
c001ef89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef8d:	83 ec 08             	sub    esp,0x8
c001ef90:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ef97:	83 c0 1a             	add    eax,0x1a
c001ef9a:	50                   	push   eax
c001ef9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef9f:	83 c0 10             	add    eax,0x10
c001efa2:	50                   	push   eax
c001efa3:	e8 73 17 fe ff       	call   c000071b <strcpy>
c001efa8:	83 c4 10             	add    esp,0x10
c001efab:	83 ec 04             	sub    esp,0x4
c001efae:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001efb5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efb9:	50                   	push   eax
c001efba:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001efc1:	e8 80 16 fe ff       	call   c0000646 <memcpy>
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001efd0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001efd6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001efdd:	84 c0                	test   al,al
c001efdf:	75 07                	jne    c001efe8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001efe1:	b8 07 00 00 00       	mov    eax,0x7
c001efe6:	eb 17                	jmp    c001efff <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001efe8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001efef:	85 c0                	test   eax,eax
c001eff1:	75 07                	jne    c001effa <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001eff3:	b8 00 00 00 00       	mov    eax,0x0
c001eff8:	eb 05                	jmp    c001efff <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001effa:	b8 01 00 00 00       	mov    eax,0x1
c001efff:	81 c4 3c 02 00 00    	add    esp,0x23c
c001f005:	c3                   	ret    

c001f006 <FAT::read(void*, unsigned long, void*, int*)>:
c001f006:	83 ec 1c             	sub    esp,0x1c
c001f009:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f00e:	74 07                	je     c001f017 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001f010:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f015:	75 07                	jne    c001f01e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001f017:	b8 04 00 00 00       	mov    eax,0x4
c001f01c:	eb 3d                	jmp    c001f05b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001f01e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f022:	50                   	push   eax
c001f023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f027:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f02b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f02f:	e8 3a 61 fe ff       	call   c000516e <f_read>
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f03b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f03f:	89 c2                	mov    edx,eax
c001f041:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f045:	89 10                	mov    DWORD PTR [eax],edx
c001f047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f04b:	85 c0                	test   eax,eax
c001f04d:	75 07                	jne    c001f056 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001f04f:	b8 00 00 00 00       	mov    eax,0x0
c001f054:	eb 05                	jmp    c001f05b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001f056:	b8 01 00 00 00       	mov    eax,0x1
c001f05b:	83 c4 1c             	add    esp,0x1c
c001f05e:	c3                   	ret    
c001f05f:	90                   	nop

c001f060 <FAT::write(void*, unsigned long, void*, int*)>:
c001f060:	83 ec 1c             	sub    esp,0x1c
c001f063:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f068:	74 07                	je     c001f071 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001f06a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001f06f:	75 07                	jne    c001f078 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001f071:	b8 04 00 00 00       	mov    eax,0x4
c001f076:	eb 3d                	jmp    c001f0b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001f078:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f07c:	50                   	push   eax
c001f07d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f081:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f085:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f089:	e8 60 63 fe ff       	call   c00053ee <f_write>
c001f08e:	83 c4 10             	add    esp,0x10
c001f091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f095:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f099:	89 c2                	mov    edx,eax
c001f09b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f09f:	89 10                	mov    DWORD PTR [eax],edx
c001f0a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a5:	85 c0                	test   eax,eax
c001f0a7:	75 07                	jne    c001f0b0 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001f0a9:	b8 00 00 00 00       	mov    eax,0x0
c001f0ae:	eb 05                	jmp    c001f0b5 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001f0b0:	b8 01 00 00 00       	mov    eax,0x1
c001f0b5:	83 c4 1c             	add    esp,0x1c
c001f0b8:	c3                   	ret    
c001f0b9:	90                   	nop

c001f0ba <FAT::close(void*)>:
c001f0ba:	83 ec 1c             	sub    esp,0x1c
c001f0bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f0c2:	75 07                	jne    c001f0cb <FAT::close(void*)+0x11>
c001f0c4:	b8 04 00 00 00       	mov    eax,0x4
c001f0c9:	eb 36                	jmp    c001f101 <FAT::close(void*)+0x47>
c001f0cb:	83 ec 0c             	sub    esp,0xc
c001f0ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f0d2:	e8 ad 67 fe ff       	call   c0005884 <f_close>
c001f0d7:	83 c4 10             	add    esp,0x10
c001f0da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0de:	83 ec 0c             	sub    esp,0xc
c001f0e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f0e5:	e8 e6 03 ff ff       	call   c000f4d0 <free>
c001f0ea:	83 c4 10             	add    esp,0x10
c001f0ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0f1:	85 c0                	test   eax,eax
c001f0f3:	75 07                	jne    c001f0fc <FAT::close(void*)+0x42>
c001f0f5:	b8 00 00 00 00       	mov    eax,0x0
c001f0fa:	eb 05                	jmp    c001f101 <FAT::close(void*)+0x47>
c001f0fc:	b8 01 00 00 00       	mov    eax,0x1
c001f101:	83 c4 1c             	add    esp,0x1c
c001f104:	c3                   	ret    
c001f105:	90                   	nop

c001f106 <FAT::closeDir(void*)>:
c001f106:	83 ec 1c             	sub    esp,0x1c
c001f109:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001f10e:	75 07                	jne    c001f117 <FAT::closeDir(void*)+0x11>
c001f110:	b8 04 00 00 00       	mov    eax,0x4
c001f115:	eb 36                	jmp    c001f14d <FAT::closeDir(void*)+0x47>
c001f117:	83 ec 0c             	sub    esp,0xc
c001f11a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f11e:	e8 49 6d fe ff       	call   c0005e6c <f_closedir>
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f12a:	83 ec 0c             	sub    esp,0xc
c001f12d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f131:	e8 9a 03 ff ff       	call   c000f4d0 <free>
c001f136:	83 c4 10             	add    esp,0x10
c001f139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f13d:	85 c0                	test   eax,eax
c001f13f:	75 07                	jne    c001f148 <FAT::closeDir(void*)+0x42>
c001f141:	b8 00 00 00 00       	mov    eax,0x0
c001f146:	eb 05                	jmp    c001f14d <FAT::closeDir(void*)+0x47>
c001f148:	b8 01 00 00 00       	mov    eax,0x1
c001f14d:	83 c4 1c             	add    esp,0x1c
c001f150:	c3                   	ret    
c001f151:	90                   	nop

c001f152 <FAT::seek(void*, unsigned long long)>:
c001f152:	83 ec 2c             	sub    esp,0x2c
c001f155:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f15d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f161:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f165:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001f16a:	75 07                	jne    c001f173 <FAT::seek(void*, unsigned long long)+0x21>
c001f16c:	b8 04 00 00 00       	mov    eax,0x4
c001f171:	eb 2f                	jmp    c001f1a2 <FAT::seek(void*, unsigned long long)+0x50>
c001f173:	83 ec 04             	sub    esp,0x4
c001f176:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f17a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f17e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f182:	e8 2c 67 fe ff       	call   c00058b3 <f_lseek>
c001f187:	83 c4 10             	add    esp,0x10
c001f18a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f18e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f192:	85 c0                	test   eax,eax
c001f194:	75 07                	jne    c001f19d <FAT::seek(void*, unsigned long long)+0x4b>
c001f196:	b8 00 00 00 00       	mov    eax,0x0
c001f19b:	eb 05                	jmp    c001f1a2 <FAT::seek(void*, unsigned long long)+0x50>
c001f19d:	b8 01 00 00 00       	mov    eax,0x1
c001f1a2:	83 c4 2c             	add    esp,0x2c
c001f1a5:	c3                   	ret    

c001f1a6 <fatWrapperReadDisk>:
c001f1a6:	83 ec 1c             	sub    esp,0x1c
c001f1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1ad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f1b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f1bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f1c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f1c5:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c001f1cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f1d0:	83 ec 0c             	sub    esp,0xc
c001f1d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f1d7:	52                   	push   edx
c001f1d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1e0:	50                   	push   eax
c001f1e1:	e8 ba 6a ff ff       	call   c0015ca0 <LogicalDisk::read(unsigned long long, int, void*)>
c001f1e6:	83 c4 20             	add    esp,0x20
c001f1e9:	83 c4 1c             	add    esp,0x1c
c001f1ec:	c3                   	ret    

c001f1ed <fatWrapperWriteDisk>:
c001f1ed:	83 ec 1c             	sub    esp,0x1c
c001f1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f1f4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f1f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1fc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f1ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f203:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f207:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f20c:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c001f213:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f217:	83 ec 0c             	sub    esp,0xc
c001f21a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f21e:	52                   	push   edx
c001f21f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f223:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f227:	50                   	push   eax
c001f228:	e8 df 6a ff ff       	call   c0015d0c <LogicalDisk::write(unsigned long long, int, void*)>
c001f22d:	83 c4 20             	add    esp,0x20
c001f230:	83 c4 1c             	add    esp,0x1c
c001f233:	c3                   	ret    

c001f234 <fatWrapperIoctl>:
c001f234:	53                   	push   ebx
c001f235:	83 ec 28             	sub    esp,0x28
c001f238:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f23c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f240:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f244:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f248:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001f24d:	75 31                	jne    c001f280 <fatWrapperIoctl+0x4c>
c001f24f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f253:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f257:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f25c:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c001f263:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f269:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f26f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f273:	66 89 02             	mov    WORD PTR [edx],ax
c001f276:	b8 00 00 00 00       	mov    eax,0x0
c001f27b:	e9 b2 00 00 00       	jmp    c001f332 <fatWrapperIoctl+0xfe>
c001f280:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001f285:	75 6a                	jne    c001f2f1 <fatWrapperIoctl+0xbd>
c001f287:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f28f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f294:	8b 04 85 80 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3c80]
c001f29b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f2a1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001f2a7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001f2ad:	89 c8                	mov    eax,ecx
c001f2af:	89 da                	mov    edx,ebx
c001f2b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001f2b5:	c1 e0 0a             	shl    eax,0xa
c001f2b8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001f2bd:	8b 0c 8d 80 c3 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3c80]
c001f2c4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001f2ca:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001f2d0:	89 cb                	mov    ebx,ecx
c001f2d2:	c1 fb 1f             	sar    ebx,0x1f
c001f2d5:	53                   	push   ebx
c001f2d6:	51                   	push   ecx
c001f2d7:	52                   	push   edx
c001f2d8:	50                   	push   eax
c001f2d9:	e8 6e 55 00 00       	call   c002484c <__udivdi3>
c001f2de:	83 c4 10             	add    esp,0x10
c001f2e1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f2e5:	89 01                	mov    DWORD PTR [ecx],eax
c001f2e7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f2ea:	b8 00 00 00 00       	mov    eax,0x0
c001f2ef:	eb 41                	jmp    c001f332 <fatWrapperIoctl+0xfe>
c001f2f1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001f2f6:	75 07                	jne    c001f2ff <fatWrapperIoctl+0xcb>
c001f2f8:	b8 00 00 00 00       	mov    eax,0x0
c001f2fd:	eb 33                	jmp    c001f332 <fatWrapperIoctl+0xfe>
c001f2ff:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001f304:	75 19                	jne    c001f31f <fatWrapperIoctl+0xeb>
c001f306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f30a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f30e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f312:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001f318:	b8 00 00 00 00       	mov    eax,0x0
c001f31d:	eb 13                	jmp    c001f332 <fatWrapperIoctl+0xfe>
c001f31f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001f324:	75 07                	jne    c001f32d <fatWrapperIoctl+0xf9>
c001f326:	b8 00 00 00 00       	mov    eax,0x0
c001f32b:	eb 05                	jmp    c001f332 <fatWrapperIoctl+0xfe>
c001f32d:	b8 04 00 00 00       	mov    eax,0x4
c001f332:	83 c4 28             	add    esp,0x28
c001f335:	5b                   	pop    ebx
c001f336:	c3                   	ret    
c001f337:	90                   	nop

c001f338 <FAT::FAT()>:
c001f338:	83 ec 1c             	sub    esp,0x1c
c001f33b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f33f:	83 ec 0c             	sub    esp,0xc
c001f342:	50                   	push   eax
c001f343:	e8 4a 36 ff ff       	call   c0012992 <Filesystem::Filesystem()>
c001f348:	83 c4 10             	add    esp,0x10
c001f34b:	ba d8 a2 02 c0       	mov    edx,0xc002a2d8
c001f350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f354:	89 10                	mov    DWORD PTR [eax],edx
c001f356:	c7 05 20 d3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d320,0x0
c001f360:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f368:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001f36d:	7f 15                	jg     c001f384 <FAT::FAT()+0x4c>
c001f36f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f373:	c7 04 85 40 d3 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2cc0],0xffffffff
c001f37e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001f382:	eb e4                	jmp    c001f368 <FAT::FAT()+0x30>
c001f384:	90                   	nop
c001f385:	83 c4 1c             	add    esp,0x1c
c001f388:	c3                   	ret    
c001f389:	90                   	nop

c001f38a <FAT::fixFilepath(char*)>:
c001f38a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f38e:	8a 00                	mov    al,BYTE PTR [eax]
c001f390:	3c 40                	cmp    al,0x40
c001f392:	7e 2c                	jle    c001f3c0 <FAT::fixFilepath(char*)+0x36>
c001f394:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f398:	8a 00                	mov    al,BYTE PTR [eax]
c001f39a:	83 e8 41             	sub    eax,0x41
c001f39d:	88 c2                	mov    dl,al
c001f39f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3a3:	88 10                	mov    BYTE PTR [eax],dl
c001f3a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3a9:	8a 00                	mov    al,BYTE PTR [eax]
c001f3ab:	0f be c0             	movsx  eax,al
c001f3ae:	8b 04 85 40 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2cc0]
c001f3b5:	83 c0 30             	add    eax,0x30
c001f3b8:	88 c2                	mov    dl,al
c001f3ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f3be:	88 10                	mov    BYTE PTR [eax],dl
c001f3c0:	90                   	nop
c001f3c1:	c3                   	ret    

c001f3c2 <FAT::open(char const*, void**, FileOpenMode)>:
c001f3c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f3c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f3d0:	74 0a                	je     c001f3dc <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001f3d2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f3da:	75 0a                	jne    c001f3e6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001f3dc:	b8 04 00 00 00       	mov    eax,0x4
c001f3e1:	e9 fd 00 00 00       	jmp    c001f4e3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f3e6:	83 ec 08             	sub    esp,0x8
c001f3e9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f3f0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f3f4:	50                   	push   eax
c001f3f5:	e8 21 13 fe ff       	call   c000071b <strcpy>
c001f3fa:	83 c4 10             	add    esp,0x10
c001f3fd:	83 ec 08             	sub    esp,0x8
c001f400:	8d 44 24 10          	lea    eax,[esp+0x10]
c001f404:	50                   	push   eax
c001f405:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f40c:	e8 79 ff ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001f41c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f423:	83 e0 01             	and    eax,0x1
c001f426:	74 08                	je     c001f430 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001f428:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001f430:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f437:	83 e0 04             	and    eax,0x4
c001f43a:	74 10                	je     c001f44c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001f43c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001f444:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f44c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f453:	83 e0 02             	and    eax,0x2
c001f456:	74 08                	je     c001f460 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001f458:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001f460:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f467:	83 e0 08             	and    eax,0x8
c001f46a:	74 08                	je     c001f474 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001f46c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001f474:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001f47b:	83 e0 10             	and    eax,0x10
c001f47e:	74 08                	je     c001f488 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001f480:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001f488:	83 ec 0c             	sub    esp,0xc
c001f48b:	68 50 02 00 00       	push   0x250
c001f490:	e8 2b 00 ff ff       	call   c000f4c0 <malloc>
c001f495:	83 c4 10             	add    esp,0x10
c001f498:	89 c2                	mov    edx,eax
c001f49a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f4a1:	89 10                	mov    DWORD PTR [eax],edx
c001f4a3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001f4ab:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f4b2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4b4:	83 ec 04             	sub    esp,0x4
c001f4b7:	52                   	push   edx
c001f4b8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f4bc:	52                   	push   edx
c001f4bd:	50                   	push   eax
c001f4be:	e8 6f 58 fe ff       	call   c0004d32 <f_open>
c001f4c3:	83 c4 10             	add    esp,0x10
c001f4c6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001f4cd:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001f4d5:	74 07                	je     c001f4de <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001f4d7:	b8 01 00 00 00       	mov    eax,0x1
c001f4dc:	eb 05                	jmp    c001f4e3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001f4de:	b8 00 00 00 00       	mov    eax,0x0
c001f4e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f4e9:	c3                   	ret    

c001f4ea <FAT::openDir(char const*, void**)>:
c001f4ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f4f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f4f8:	74 0a                	je     c001f504 <FAT::openDir(char const*, void**)+0x1a>
c001f4fa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001f502:	75 07                	jne    c001f50b <FAT::openDir(char const*, void**)+0x21>
c001f504:	b8 04 00 00 00       	mov    eax,0x4
c001f509:	eb 7d                	jmp    c001f588 <FAT::openDir(char const*, void**)+0x9e>
c001f50b:	83 ec 08             	sub    esp,0x8
c001f50e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f515:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f519:	50                   	push   eax
c001f51a:	e8 fc 11 fe ff       	call   c000071b <strcpy>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	83 ec 08             	sub    esp,0x8
c001f525:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f529:	50                   	push   eax
c001f52a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f531:	e8 54 fe ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	83 ec 0c             	sub    esp,0xc
c001f53c:	6a 4c                	push   0x4c
c001f53e:	e8 7d ff fe ff       	call   c000f4c0 <malloc>
c001f543:	83 c4 10             	add    esp,0x10
c001f546:	89 c2                	mov    edx,eax
c001f548:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f54f:	89 10                	mov    DWORD PTR [eax],edx
c001f551:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001f558:	8b 00                	mov    eax,DWORD PTR [eax]
c001f55a:	83 ec 08             	sub    esp,0x8
c001f55d:	8d 54 24 14          	lea    edx,[esp+0x14]
c001f561:	52                   	push   edx
c001f562:	50                   	push   eax
c001f563:	e8 02 68 fe ff       	call   c0005d6a <f_opendir>
c001f568:	83 c4 10             	add    esp,0x10
c001f56b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f572:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001f57a:	74 07                	je     c001f583 <FAT::openDir(char const*, void**)+0x99>
c001f57c:	b8 01 00 00 00       	mov    eax,0x1
c001f581:	eb 05                	jmp    c001f588 <FAT::openDir(char const*, void**)+0x9e>
c001f583:	b8 00 00 00 00       	mov    eax,0x0
c001f588:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f58e:	c3                   	ret    
c001f58f:	90                   	nop

c001f590 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001f590:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f596:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001f59e:	75 0a                	jne    c001f5aa <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001f5a0:	b8 04 00 00 00       	mov    eax,0x4
c001f5a5:	e9 c9 00 00 00       	jmp    c001f673 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f5aa:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001f5b2:	75 0a                	jne    c001f5be <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001f5b4:	b8 04 00 00 00       	mov    eax,0x4
c001f5b9:	e9 b5 00 00 00       	jmp    c001f673 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f5be:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001f5c6:	75 0a                	jne    c001f5d2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001f5c8:	b8 04 00 00 00       	mov    eax,0x4
c001f5cd:	e9 a1 00 00 00       	jmp    c001f673 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f5d2:	83 ec 08             	sub    esp,0x8
c001f5d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f5dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f5e3:	50                   	push   eax
c001f5e4:	e8 32 11 fe ff       	call   c000071b <strcpy>
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	83 ec 08             	sub    esp,0x8
c001f5ef:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001f5f6:	50                   	push   eax
c001f5f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f5fe:	e8 87 fd ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	83 ec 08             	sub    esp,0x8
c001f609:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f60d:	50                   	push   eax
c001f60e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001f615:	50                   	push   eax
c001f616:	e8 0e 69 fe ff       	call   c0005f29 <f_stat>
c001f61b:	83 c4 10             	add    esp,0x10
c001f61e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f625:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f62c:	85 c0                	test   eax,eax
c001f62e:	74 07                	je     c001f637 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001f630:	83 f8 04             	cmp    eax,0x4
c001f633:	74 32                	je     c001f667 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001f635:	eb 37                	jmp    c001f66e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001f637:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f63b:	0f b6 c0             	movzx  eax,al
c001f63e:	83 e0 10             	and    eax,0x10
c001f641:	0f 95 c2             	setne  dl
c001f644:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001f64b:	88 10                	mov    BYTE PTR [eax],dl
c001f64d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f650:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f654:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001f65b:	89 01                	mov    DWORD PTR [ecx],eax
c001f65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f660:	b8 00 00 00 00       	mov    eax,0x0
c001f665:	eb 0c                	jmp    c001f673 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f667:	b8 02 00 00 00       	mov    eax,0x2
c001f66c:	eb 05                	jmp    c001f673 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001f66e:	b8 01 00 00 00       	mov    eax,0x1
c001f673:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f679:	c3                   	ret    

c001f67a <FAT::unlink(char const*)>:
c001f67a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f680:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f688:	75 07                	jne    c001f691 <FAT::unlink(char const*)+0x17>
c001f68a:	b8 04 00 00 00       	mov    eax,0x4
c001f68f:	eb 5c                	jmp    c001f6ed <FAT::unlink(char const*)+0x73>
c001f691:	83 ec 08             	sub    esp,0x8
c001f694:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f69b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f69f:	50                   	push   eax
c001f6a0:	e8 76 10 fe ff       	call   c000071b <strcpy>
c001f6a5:	83 c4 10             	add    esp,0x10
c001f6a8:	83 ec 08             	sub    esp,0x8
c001f6ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f6af:	50                   	push   eax
c001f6b0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f6b7:	e8 ce fc ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f6bc:	83 c4 10             	add    esp,0x10
c001f6bf:	83 ec 0c             	sub    esp,0xc
c001f6c2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f6c6:	50                   	push   eax
c001f6c7:	e8 af 6b fe ff       	call   c000627b <f_unlink>
c001f6cc:	83 c4 10             	add    esp,0x10
c001f6cf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f6d6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f6dd:	85 c0                	test   eax,eax
c001f6df:	75 07                	jne    c001f6e8 <FAT::unlink(char const*)+0x6e>
c001f6e1:	b8 00 00 00 00       	mov    eax,0x0
c001f6e6:	eb 05                	jmp    c001f6ed <FAT::unlink(char const*)+0x73>
c001f6e8:	b8 01 00 00 00       	mov    eax,0x1
c001f6ed:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6f3:	c3                   	ret    

c001f6f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001f6f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001f6fa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001f701:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001f708:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001f70c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f710:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001f718:	75 0a                	jne    c001f724 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001f71a:	b8 04 00 00 00       	mov    eax,0x4
c001f71f:	e9 1c 01 00 00       	jmp    c001f840 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f724:	83 ec 08             	sub    esp,0x8
c001f727:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f72e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f732:	50                   	push   eax
c001f733:	e8 e3 0f fe ff       	call   c000071b <strcpy>
c001f738:	83 c4 10             	add    esp,0x10
c001f73b:	83 ec 08             	sub    esp,0x8
c001f73e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f742:	50                   	push   eax
c001f743:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001f74a:	e8 3b fc ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f74f:	83 c4 10             	add    esp,0x10
c001f752:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001f75a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001f762:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f767:	83 e0 01             	and    eax,0x1
c001f76a:	74 08                	je     c001f774 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001f76c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001f774:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f779:	83 e0 02             	and    eax,0x2
c001f77c:	74 08                	je     c001f786 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001f77e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001f786:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f78b:	83 e0 04             	and    eax,0x4
c001f78e:	74 08                	je     c001f798 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001f790:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001f798:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f79d:	83 e0 08             	and    eax,0x8
c001f7a0:	74 08                	je     c001f7aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001f7a2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001f7aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f7af:	83 e0 01             	and    eax,0x1
c001f7b2:	74 08                	je     c001f7bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001f7b4:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001f7bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f7c1:	83 e0 02             	and    eax,0x2
c001f7c4:	74 08                	je     c001f7ce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001f7c6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001f7ce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f7d3:	83 e0 04             	and    eax,0x4
c001f7d6:	74 08                	je     c001f7e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001f7d8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001f7e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001f7e5:	83 e0 08             	and    eax,0x8
c001f7e8:	74 08                	je     c001f7f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001f7ea:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001f7f2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001f7f9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001f800:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001f808:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001f810:	83 ec 04             	sub    esp,0x4
c001f813:	52                   	push   edx
c001f814:	50                   	push   eax
c001f815:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f819:	50                   	push   eax
c001f81a:	e8 fe 70 fe ff       	call   c000691d <f_chmod>
c001f81f:	83 c4 10             	add    esp,0x10
c001f822:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001f829:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001f830:	85 c0                	test   eax,eax
c001f832:	75 07                	jne    c001f83b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001f834:	b8 00 00 00 00       	mov    eax,0x0
c001f839:	eb 05                	jmp    c001f840 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001f83b:	b8 01 00 00 00       	mov    eax,0x1
c001f840:	81 c4 2c 01 00 00    	add    esp,0x12c
c001f846:	c3                   	ret    
c001f847:	90                   	nop

c001f848 <FAT::rename(char const*, char const*)>:
c001f848:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f84e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001f856:	74 0a                	je     c001f862 <FAT::rename(char const*, char const*)+0x1a>
c001f858:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001f860:	75 0a                	jne    c001f86c <FAT::rename(char const*, char const*)+0x24>
c001f862:	b8 04 00 00 00       	mov    eax,0x4
c001f867:	e9 98 00 00 00       	jmp    c001f904 <FAT::rename(char const*, char const*)+0xbc>
c001f86c:	83 ec 08             	sub    esp,0x8
c001f86f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f876:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f87d:	50                   	push   eax
c001f87e:	e8 98 0e fe ff       	call   c000071b <strcpy>
c001f883:	83 c4 10             	add    esp,0x10
c001f886:	83 ec 08             	sub    esp,0x8
c001f889:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001f890:	50                   	push   eax
c001f891:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f898:	e8 ed fa ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f89d:	83 c4 10             	add    esp,0x10
c001f8a0:	83 ec 08             	sub    esp,0x8
c001f8a3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001f8aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f8ae:	50                   	push   eax
c001f8af:	e8 67 0e fe ff       	call   c000071b <strcpy>
c001f8b4:	83 c4 10             	add    esp,0x10
c001f8b7:	83 ec 08             	sub    esp,0x8
c001f8ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f8be:	50                   	push   eax
c001f8bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001f8c6:	e8 bf fa ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	83 ec 08             	sub    esp,0x8
c001f8d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f8d5:	50                   	push   eax
c001f8d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001f8dd:	50                   	push   eax
c001f8de:	e8 47 6d fe ff       	call   c000662a <f_rename>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001f8ed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001f8f4:	85 c0                	test   eax,eax
c001f8f6:	75 07                	jne    c001f8ff <FAT::rename(char const*, char const*)+0xb7>
c001f8f8:	b8 00 00 00 00       	mov    eax,0x0
c001f8fd:	eb 05                	jmp    c001f904 <FAT::rename(char const*, char const*)+0xbc>
c001f8ff:	b8 01 00 00 00       	mov    eax,0x1
c001f904:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f90a:	c3                   	ret    
c001f90b:	90                   	nop

c001f90c <FAT::mkdir(char const*)>:
c001f90c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f912:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001f91a:	75 07                	jne    c001f923 <FAT::mkdir(char const*)+0x17>
c001f91c:	b8 04 00 00 00       	mov    eax,0x4
c001f921:	eb 5c                	jmp    c001f97f <FAT::mkdir(char const*)+0x73>
c001f923:	83 ec 08             	sub    esp,0x8
c001f926:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f92d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f931:	50                   	push   eax
c001f932:	e8 e4 0d fe ff       	call   c000071b <strcpy>
c001f937:	83 c4 10             	add    esp,0x10
c001f93a:	83 ec 08             	sub    esp,0x8
c001f93d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f941:	50                   	push   eax
c001f942:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001f949:	e8 3c fa ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f94e:	83 c4 10             	add    esp,0x10
c001f951:	83 ec 0c             	sub    esp,0xc
c001f954:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f958:	50                   	push   eax
c001f959:	e8 a0 6a fe ff       	call   c00063fe <f_mkdir>
c001f95e:	83 c4 10             	add    esp,0x10
c001f961:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001f968:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001f96f:	85 c0                	test   eax,eax
c001f971:	75 07                	jne    c001f97a <FAT::mkdir(char const*)+0x6e>
c001f973:	b8 00 00 00 00       	mov    eax,0x0
c001f978:	eb 05                	jmp    c001f97f <FAT::mkdir(char const*)+0x73>
c001f97a:	b8 01 00 00 00       	mov    eax,0x1
c001f97f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f985:	c3                   	ret    

c001f986 <FAT::exists(char const*)>:
c001f986:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001f98c:	83 ec 08             	sub    esp,0x8
c001f98f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f996:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f99a:	50                   	push   eax
c001f99b:	e8 7b 0d fe ff       	call   c000071b <strcpy>
c001f9a0:	83 c4 10             	add    esp,0x10
c001f9a3:	83 ec 08             	sub    esp,0x8
c001f9a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f9aa:	50                   	push   eax
c001f9ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001f9b2:	e8 d3 f9 ff ff       	call   c001f38a <FAT::fixFilepath(char*)>
c001f9b7:	83 c4 10             	add    esp,0x10
c001f9ba:	83 ec 08             	sub    esp,0x8
c001f9bd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001f9c4:	50                   	push   eax
c001f9c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f9c9:	50                   	push   eax
c001f9ca:	e8 5a 65 fe ff       	call   c0005f29 <f_stat>
c001f9cf:	83 c4 10             	add    esp,0x10
c001f9d2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001f9d9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001f9e0:	85 c0                	test   eax,eax
c001f9e2:	75 04                	jne    c001f9e8 <FAT::exists(char const*)+0x62>
c001f9e4:	b0 01                	mov    al,0x1
c001f9e6:	eb 02                	jmp    c001f9ea <FAT::exists(char const*)+0x64>
c001f9e8:	b0 00                	mov    al,0x0
c001f9ea:	81 c4 2c 02 00 00    	add    esp,0x22c
c001f9f0:	c3                   	ret    
c001f9f1:	90                   	nop

c001f9f2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001f9f2:	b8 08 00 00 00       	mov    eax,0x8
c001f9f7:	c3                   	ret    

c001f9f8 <ISO9660::seek(void*, unsigned long long)>:
c001f9f8:	53                   	push   ebx
c001f9f9:	b8 04 00 00 00       	mov    eax,0x4
c001f9fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fa06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa0a:	85 d2                	test   edx,edx
c001fa0c:	74 17                	je     c001fa25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001fa0e:	89 c8                	mov    eax,ecx
c001fa10:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001fa13:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001fa16:	b8 01 00 00 00       	mov    eax,0x1
c001fa1b:	73 08                	jae    c001fa25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001fa1d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001fa20:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001fa23:	31 c0                	xor    eax,eax
c001fa25:	5b                   	pop    ebx
c001fa26:	c3                   	ret    
c001fa27:	90                   	nop

c001fa28 <ISO9660::tell(void*, unsigned long long*)>:
c001fa28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa30:	85 d2                	test   edx,edx
c001fa32:	74 12                	je     c001fa46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001fa34:	85 c0                	test   eax,eax
c001fa36:	74 0e                	je     c001fa46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001fa38:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001fa3b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001fa3e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001fa41:	89 10                	mov    DWORD PTR [eax],edx
c001fa43:	31 c0                	xor    eax,eax
c001fa45:	c3                   	ret    
c001fa46:	b8 04 00 00 00       	mov    eax,0x4
c001fa4b:	c3                   	ret    

c001fa4c <ISO9660::getName()>:
c001fa4c:	b8 34 a3 02 c0       	mov    eax,0xc002a334
c001fa51:	c3                   	ret    

c001fa52 <ISO9660::stat(void*, unsigned long long*)>:
c001fa52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa5a:	85 d2                	test   edx,edx
c001fa5c:	74 12                	je     c001fa70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001fa5e:	85 c0                	test   eax,eax
c001fa60:	74 0e                	je     c001fa70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001fa62:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001fa65:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001fa68:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001fa6b:	89 10                	mov    DWORD PTR [eax],edx
c001fa6d:	31 c0                	xor    eax,eax
c001fa6f:	c3                   	ret    
c001fa70:	b8 04 00 00 00       	mov    eax,0x4
c001fa75:	c3                   	ret    

c001fa76 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001fa76:	b8 01 00 00 00       	mov    eax,0x1
c001fa7b:	c3                   	ret    

c001fa7c <ISO9660::unlink(char const*)>:
c001fa7c:	b8 01 00 00 00       	mov    eax,0x1
c001fa81:	c3                   	ret    

c001fa82 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001fa82:	b8 01 00 00 00       	mov    eax,0x1
c001fa87:	c3                   	ret    

c001fa88 <ISO9660::rename(char const*, char const*)>:
c001fa88:	b8 01 00 00 00       	mov    eax,0x1
c001fa8d:	c3                   	ret    

c001fa8e <ISO9660::mkdir(char const*)>:
c001fa8e:	b8 01 00 00 00       	mov    eax,0x1
c001fa93:	c3                   	ret    

c001fa94 <ISO9660::close(void*)>:
c001fa94:	83 ec 0c             	sub    esp,0xc
c001fa97:	b8 04 00 00 00       	mov    eax,0x4
c001fa9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa0:	85 d2                	test   edx,edx
c001faa2:	74 0e                	je     c001fab2 <ISO9660::close(void*)+0x1e>
c001faa4:	83 ec 0c             	sub    esp,0xc
c001faa7:	52                   	push   edx
c001faa8:	e8 23 fa fe ff       	call   c000f4d0 <free>
c001faad:	83 c4 10             	add    esp,0x10
c001fab0:	31 c0                	xor    eax,eax
c001fab2:	83 c4 0c             	add    esp,0xc
c001fab5:	c3                   	ret    

c001fab6 <ISO9660::closeDir(void*)>:
c001fab6:	83 ec 0c             	sub    esp,0xc
c001fab9:	b8 04 00 00 00       	mov    eax,0x4
c001fabe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fac2:	85 d2                	test   edx,edx
c001fac4:	74 0e                	je     c001fad4 <ISO9660::closeDir(void*)+0x1e>
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	52                   	push   edx
c001faca:	e8 01 fa fe ff       	call   c000f4d0 <free>
c001facf:	83 c4 10             	add    esp,0x10
c001fad2:	31 c0                	xor    eax,eax
c001fad4:	83 c4 0c             	add    esp,0xc
c001fad7:	c3                   	ret    

c001fad8 <ISO9660::~ISO9660()>:
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c001fae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae4:	89 10                	mov    DWORD PTR [eax],edx
c001fae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	50                   	push   eax
c001faee:	e8 c3 2e ff ff       	call   c00129b6 <Filesystem::~Filesystem()>
c001faf3:	83 c4 10             	add    esp,0x10
c001faf6:	90                   	nop
c001faf7:	83 c4 0c             	add    esp,0xc
c001fafa:	c3                   	ret    
c001fafb:	90                   	nop

c001fafc <ISO9660::~ISO9660()>:
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	83 ec 0c             	sub    esp,0xc
c001fb02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb06:	e8 cd ff ff ff       	call   c001fad8 <ISO9660::~ISO9660()>
c001fb0b:	83 c4 10             	add    esp,0x10
c001fb0e:	83 ec 08             	sub    esp,0x8
c001fb11:	6a 08                	push   0x8
c001fb13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb17:	e8 91 2a ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c001fb1c:	83 c4 10             	add    esp,0x10
c001fb1f:	83 c4 0c             	add    esp,0xc
c001fb22:	c3                   	ret    

c001fb23 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001fb23:	55                   	push   ebp
c001fb24:	31 c9                	xor    ecx,ecx
c001fb26:	57                   	push   edi
c001fb27:	56                   	push   esi
c001fb28:	53                   	push   ebx
c001fb29:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001fb2d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fb31:	89 eb                	mov    ebx,ebp
c001fb33:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001fb37:	39 ce                	cmp    esi,ecx
c001fb39:	7e 17                	jle    c001fb52 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001fb3b:	31 d2                	xor    edx,edx
c001fb3d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001fb41:	7d 13                	jge    c001fb56 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001fb43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fb47:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001fb4a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001fb4d:	75 0d                	jne    c001fb5c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001fb4f:	42                   	inc    edx
c001fb50:	eb eb                	jmp    c001fb3d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001fb52:	31 c0                	xor    eax,eax
c001fb54:	eb 0a                	jmp    c001fb60 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001fb56:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001fb5a:	eb 04                	jmp    c001fb60 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001fb5c:	41                   	inc    ecx
c001fb5d:	43                   	inc    ebx
c001fb5e:	eb d7                	jmp    c001fb37 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001fb60:	5b                   	pop    ebx
c001fb61:	5e                   	pop    esi
c001fb62:	5f                   	pop    edi
c001fb63:	5d                   	pop    ebp
c001fb64:	c3                   	ret    

c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001fb65:	56                   	push   esi
c001fb66:	53                   	push   ebx
c001fb67:	52                   	push   edx
c001fb68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fb6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fb70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb74:	39 0d 20 d4 02 c0    	cmp    DWORD PTR ds:0xc002d420,ecx
c001fb7a:	75 08                	jne    c001fb84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001fb7c:	38 05 28 b3 02 c0    	cmp    BYTE PTR ds:0xc002b328,al
c001fb82:	74 2b                	je     c001fbaf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	a2 28 b3 02 c0       	mov    ds:0xc002b328,al
c001fb8c:	68 40 d4 02 c0       	push   0xc002d440
c001fb91:	0f be c0             	movsx  eax,al
c001fb94:	6a 01                	push   0x1
c001fb96:	89 0d 20 d4 02 c0    	mov    DWORD PTR ds:0xc002d420,ecx
c001fb9c:	31 db                	xor    ebx,ebx
c001fb9e:	53                   	push   ebx
c001fb9f:	51                   	push   ecx
c001fba0:	ff 34 85 7c c2 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d84]
c001fba7:	e8 f4 60 ff ff       	call   c0015ca0 <LogicalDisk::read(unsigned long long, int, void*)>
c001fbac:	83 c4 20             	add    esp,0x20
c001fbaf:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001fbb7:	c7 44 24 14 40 d4 02 c0 	mov    DWORD PTR [esp+0x14],0xc002d440
c001fbbf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001fbc3:	58                   	pop    eax
c001fbc4:	5b                   	pop    ebx
c001fbc5:	5e                   	pop    esi
c001fbc6:	e9 7b 0a fe ff       	jmp    c0000646 <memcpy>
c001fbcb:	90                   	nop

c001fbcc <ISO9660::tryMount(LogicalDisk*, int)>:
c001fbcc:	81 ec 10 08 00 00    	sub    esp,0x810
c001fbd2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001fbd9:	83 c0 41             	add    eax,0x41
c001fbdc:	0f be c0             	movsx  eax,al
c001fbdf:	50                   	push   eax
c001fbe0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbe4:	50                   	push   eax
c001fbe5:	6a 10                	push   0x10
c001fbe7:	e8 79 ff ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fbec:	83 c4 10             	add    esp,0x10
c001fbef:	31 c0                	xor    eax,eax
c001fbf1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001fbf6:	75 1d                	jne    c001fc15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fbf8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001fbfd:	75 16                	jne    c001fc15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fbff:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001fc04:	75 0f                	jne    c001fc15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fc06:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001fc0b:	75 08                	jne    c001fc15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001fc0d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001fc12:	0f 94 c0             	sete   al
c001fc15:	81 c4 0c 08 00 00    	add    esp,0x80c
c001fc1b:	c3                   	ret    

c001fc1c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001fc1c:	55                   	push   ebp
c001fc1d:	57                   	push   edi
c001fc1e:	56                   	push   esi
c001fc1f:	53                   	push   ebx
c001fc20:	81 ec 34 08 00 00    	sub    esp,0x834
c001fc26:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001fc2d:	55                   	push   ebp
c001fc2e:	68 4f a3 02 c0       	push   0xc002a34f
c001fc33:	e8 55 2a ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c001fc38:	83 c4 10             	add    esp,0x10
c001fc3b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001fc43:	0f 84 06 02 00 00    	je     c001fe4f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001fc49:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001fc51:	0f 84 f8 01 00 00    	je     c001fe4f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001fc57:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001fc5e:	b8 01 00 00 00       	mov    eax,0x1
c001fc63:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001fc67:	0f 85 e7 01 00 00    	jne    c001fe54 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001fc6d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001fc70:	31 d2                	xor    edx,edx
c001fc72:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001fc75:	89 e9                	mov    ecx,ebp
c001fc77:	89 d3                	mov    ebx,edx
c001fc79:	01 f1                	add    ecx,esi
c001fc7b:	11 fb                	adc    ebx,edi
c001fc7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001fc81:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fc85:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001fc8c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001fc8f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001fc92:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fc96:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001fc9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc9e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fca2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001fca6:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001fcaa:	72 19                	jb     c001fcc5 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001fcac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fcb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcb8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fcbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fcbf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fcc3:	eb 13                	jmp    c001fcd8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001fcc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fccd:	29 f0                	sub    eax,esi
c001fccf:	19 fa                	sbb    edx,edi
c001fcd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcd4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fcd8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001fcdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001fce2:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce4:	53                   	push   ebx
c001fce5:	0f a4 c2 0b          	shld   edx,eax,0xb
c001fce9:	c1 e0 0b             	shl    eax,0xb
c001fcec:	01 c6                	add    esi,eax
c001fcee:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fcf5:	11 d7                	adc    edi,edx
c001fcf7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fcfb:	89 fa                	mov    edx,edi
c001fcfd:	50                   	push   eax
c001fcfe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001fd02:	50                   	push   eax
c001fd03:	89 f0                	mov    eax,esi
c001fd05:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fd09:	50                   	push   eax
c001fd0a:	e8 56 fe ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fd0f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001fd16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fd1a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fd1d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001fd21:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001fd27:	83 c4 10             	add    esp,0x10
c001fd2a:	b8 00 08 00 00       	mov    eax,0x800
c001fd2f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001fd33:	29 d0                	sub    eax,edx
c001fd35:	39 c1                	cmp    ecx,eax
c001fd37:	83 db 00             	sbb    ebx,0x0
c001fd3a:	7d 19                	jge    c001fd55 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001fd3c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001fd41:	75 16                	jne    c001fd59 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001fd43:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fd4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd50:	e9 f6 00 00 00       	jmp    c001fe4b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001fd55:	89 c5                	mov    ebp,eax
c001fd57:	eb 03                	jmp    c001fd5c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001fd59:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001fd5c:	51                   	push   ecx
c001fd5d:	55                   	push   ebp
c001fd5e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001fd62:	50                   	push   eax
c001fd63:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001fd6a:	e8 d7 08 fe ff       	call   c0000646 <memcpy>
c001fd6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fd73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd77:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001fd7e:	01 e8                	add    eax,ebp
c001fd80:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fd84:	89 e8                	mov    eax,ebp
c001fd86:	99                   	cdq    
c001fd87:	01 ee                	add    esi,ebp
c001fd89:	11 d7                	adc    edi,edx
c001fd8b:	29 e9                	sub    ecx,ebp
c001fd8d:	19 d3                	sbb    ebx,edx
c001fd8f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001fd93:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001fd97:	83 c4 10             	add    esp,0x10
c001fd9a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001fd9f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001fda2:	b8 00 00 00 00       	mov    eax,0x0
c001fda7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001fdab:	7d 3f                	jge    c001fdec <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001fdad:	52                   	push   edx
c001fdae:	89 fa                	mov    edx,edi
c001fdb0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fdb7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fdbb:	50                   	push   eax
c001fdbc:	89 f0                	mov    eax,esi
c001fdbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdc2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fdc6:	50                   	push   eax
c001fdc7:	e8 99 fd ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fdcc:	81 c6 00 08 00 00    	add    esi,0x800
c001fdd2:	83 d7 00             	adc    edi,0x0
c001fdd5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001fddd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001fde5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001fdea:	eb ab                	jmp    c001fd97 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001fdec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001fdf3:	74 34                	je     c001fe29 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001fdf5:	89 fa                	mov    edx,edi
c001fdf7:	50                   	push   eax
c001fdf8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001fdff:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001fe03:	50                   	push   eax
c001fe04:	89 f0                	mov    eax,esi
c001fe06:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001fe0a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001fe0e:	55                   	push   ebp
c001fe0f:	50                   	push   eax
c001fe10:	e8 50 fd ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001fe15:	83 c4 0c             	add    esp,0xc
c001fe18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001fe1c:	55                   	push   ebp
c001fe1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe21:	e8 20 08 fe ff       	call   c0000646 <memcpy>
c001fe26:	83 c4 10             	add    esp,0x10
c001fe29:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001fe30:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fe34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fe38:	89 38                	mov    DWORD PTR [eax],edi
c001fe3a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001fe41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe45:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001fe48:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fe4b:	31 c0                	xor    eax,eax
c001fe4d:	eb 05                	jmp    c001fe54 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001fe4f:	b8 04 00 00 00       	mov    eax,0x4
c001fe54:	81 c4 2c 08 00 00    	add    esp,0x82c
c001fe5a:	5b                   	pop    ebx
c001fe5b:	5e                   	pop    esi
c001fe5c:	5f                   	pop    edi
c001fe5d:	5d                   	pop    ebp
c001fe5e:	c3                   	ret    
c001fe5f:	90                   	nop

c001fe60 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001fe60:	55                   	push   ebp
c001fe61:	57                   	push   edi
c001fe62:	56                   	push   esi
c001fe63:	53                   	push   ebx
c001fe64:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001fe6a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001fe71:	85 f6                	test   esi,esi
c001fe73:	0f 84 64 02 00 00    	je     c00200dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fe79:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001fe81:	0f 84 56 02 00 00    	je     c00200dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001fe87:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001fe8a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001fe8d:	75 0a                	jne    c001fe99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001fe8f:	b8 07 00 00 00       	mov    eax,0x7
c001fe94:	e9 49 02 00 00       	jmp    c00200e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001fe99:	50                   	push   eax
c001fe9a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001fe9e:	50                   	push   eax
c001fe9f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001fea6:	53                   	push   ebx
c001fea7:	8b 06                	mov    eax,DWORD PTR [esi]
c001fea9:	c1 e0 0b             	shl    eax,0xb
c001feac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001feaf:	c1 e8 0b             	shr    eax,0xb
c001feb2:	50                   	push   eax
c001feb3:	e8 ad fc ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001feb8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001febb:	83 c4 10             	add    esp,0x10
c001febe:	89 c1                	mov    ecx,eax
c001fec0:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001fec3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fec9:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001fecc:	84 db                	test   bl,bl
c001fece:	0f 85 90 00 00 00    	jne    c001ff64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001fed4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001feda:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fee0:	29 c7                	sub    edi,eax
c001fee2:	89 fb                	mov    ebx,edi
c001fee4:	c1 fb 1f             	sar    ebx,0x1f
c001fee7:	01 f8                	add    eax,edi
c001fee9:	11 da                	adc    edx,ebx
c001feeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001feef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fef3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001fef6:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001fef9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001fefc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001feff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ff06:	89 d8                	mov    eax,ebx
c001ff08:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ff0b:	ba 00 00 00 00       	mov    edx,0x0
c001ff10:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001ff14:	b8 00 00 00 00       	mov    eax,0x0
c001ff19:	73 0b                	jae    c001ff26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001ff1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ff1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ff22:	29 f8                	sub    eax,edi
c001ff24:	19 da                	sbb    edx,ebx
c001ff26:	89 d3                	mov    ebx,edx
c001ff28:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001ff2b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001ff2e:	09 c3                	or     ebx,eax
c001ff30:	0f 84 59 ff ff ff    	je     c001fe8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001ff36:	55                   	push   ebp
c001ff37:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001ff3b:	50                   	push   eax
c001ff3c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ff43:	53                   	push   ebx
c001ff44:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff46:	c1 e0 0b             	shl    eax,0xb
c001ff49:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001ff4d:	c1 e8 0b             	shr    eax,0xb
c001ff50:	50                   	push   eax
c001ff51:	e8 0f fc ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ff56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ff59:	83 c4 10             	add    esp,0x10
c001ff5c:	25 ff 07 00 00       	and    eax,0x7ff
c001ff61:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001ff64:	57                   	push   edi
c001ff65:	6a 28                	push   0x28
c001ff67:	6a 00                	push   0x0
c001ff69:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ff6d:	50                   	push   eax
c001ff6e:	e8 09 07 fe ff       	call   c000067c <memset>
c001ff73:	31 d2                	xor    edx,edx
c001ff75:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001ff78:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ff7e:	89 f8                	mov    eax,edi
c001ff80:	83 c0 21             	add    eax,0x21
c001ff83:	83 d2 00             	adc    edx,0x0
c001ff86:	89 c7                	mov    edi,eax
c001ff88:	89 d5                	mov    ebp,edx
c001ff8a:	83 c4 10             	add    esp,0x10
c001ff8d:	31 c9                	xor    ecx,ecx
c001ff8f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001ff96:	83 f9 28             	cmp    ecx,0x28
c001ff99:	88 04 24             	mov    BYTE PTR [esp],al
c001ff9c:	0f 94 c2             	sete   dl
c001ff9f:	88 d0                	mov    al,dl
c001ffa1:	ba ff 07 00 00       	mov    edx,0x7ff
c001ffa6:	39 fa                	cmp    edx,edi
c001ffa8:	ba 00 00 00 00       	mov    edx,0x0
c001ffad:	19 ea                	sbb    edx,ebp
c001ffaf:	0f 92 c2             	setb   dl
c001ffb2:	09 c2                	or     edx,eax
c001ffb4:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001ffb8:	0f 94 c0             	sete   al
c001ffbb:	08 d0                	or     al,dl
c001ffbd:	75 16                	jne    c001ffd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001ffbf:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001ffc3:	74 10                	je     c001ffd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001ffc5:	8a 04 24             	mov    al,BYTE PTR [esp]
c001ffc8:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001ffcc:	41                   	inc    ecx
c001ffcd:	83 c7 01             	add    edi,0x1
c001ffd0:	83 d5 00             	adc    ebp,0x0
c001ffd3:	eb ba                	jmp    c001ff8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001ffd5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ffe3:	57                   	push   edi
c001ffe4:	e8 b0 06 fe ff       	call   c0000699 <strlen>
c001ffe9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001fff1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001fff5:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001fffc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ffff:	5a                   	pop    edx
c0020000:	25 ff 07 00 00       	and    eax,0x7ff
c0020005:	01 c8                	add    eax,ecx
c0020007:	59                   	pop    ecx
c0020008:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002000e:	83 e0 02             	and    eax,0x2
c0020011:	3c 01                	cmp    al,0x1
c0020013:	19 c0                	sbb    eax,eax
c0020015:	83 c0 02             	add    eax,0x2
c0020018:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002001c:	57                   	push   edi
c002001d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020021:	50                   	push   eax
c0020022:	e8 f4 06 fe ff       	call   c000071b <strcpy>
c0020027:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002002b:	83 c4 10             	add    esp,0x10
c002002e:	84 c0                	test   al,al
c0020030:	75 21                	jne    c0020053 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020032:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002003a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020042:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002004a:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020051:	eb 28                	jmp    c002007b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020053:	fe c8                	dec    al
c0020055:	75 24                	jne    c002007b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020057:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002005f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020067:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002006f:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020076:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002007b:	0f b6 fb             	movzx  edi,bl
c002007e:	31 db                	xor    ebx,ebx
c0020080:	50                   	push   eax
c0020081:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020088:	8d 44 24 48          	lea    eax,[esp+0x48]
c002008c:	50                   	push   eax
c002008d:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020094:	e8 ad 05 fe ff       	call   c0000646 <memcpy>
c0020099:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00200a0:	89 f9                	mov    ecx,edi
c00200a2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00200a8:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00200ab:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00200ae:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00200b1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00200b4:	83 c4 10             	add    esp,0x10
c00200b7:	39 c7                	cmp    edi,eax
c00200b9:	89 df                	mov    edi,ebx
c00200bb:	19 d7                	sbb    edi,edx
c00200bd:	72 10                	jb     c00200cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00200bf:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00200c6:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00200cd:	eb 0a                	jmp    c00200d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00200cf:	29 c8                	sub    eax,ecx
c00200d1:	19 da                	sbb    edx,ebx
c00200d3:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00200d6:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00200d9:	31 c0                	xor    eax,eax
c00200db:	eb 05                	jmp    c00200e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00200dd:	b8 04 00 00 00       	mov    eax,0x4
c00200e2:	81 c4 5c 09 00 00    	add    esp,0x95c
c00200e8:	5b                   	pop    ebx
c00200e9:	5e                   	pop    esi
c00200ea:	5f                   	pop    edi
c00200eb:	5d                   	pop    ebp
c00200ec:	c3                   	ret    

c00200ed <readRoot(unsigned int*, unsigned int*, char)>:
c00200ed:	81 ec 40 08 00 00    	sub    esp,0x840
c00200f3:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00200fb:	50                   	push   eax
c00200fc:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020100:	50                   	push   eax
c0020101:	6a 10                	push   0x10
c0020103:	e8 5d fa ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020108:	83 c4 0c             	add    esp,0xc
c002010b:	6a 22                	push   0x22
c002010d:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020114:	50                   	push   eax
c0020115:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020119:	50                   	push   eax
c002011a:	e8 27 05 fe ff       	call   c0000646 <memcpy>
c002011f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002012a:	89 10                	mov    DWORD PTR [eax],edx
c002012c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020133:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020137:	89 10                	mov    DWORD PTR [eax],edx
c0020139:	b0 01                	mov    al,0x1
c002013b:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020141:	c3                   	ret    

c0020142 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020142:	55                   	push   ebp
c0020143:	57                   	push   edi
c0020144:	56                   	push   esi
c0020145:	53                   	push   ebx
c0020146:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002014c:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020153:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002015a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002015e:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020162:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020166:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002016a:	75 03                	jne    c002016f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002016c:	83 c3 02             	add    ebx,0x2
c002016f:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020172:	75 03                	jne    c0020177 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020174:	43                   	inc    ebx
c0020175:	eb f8                	jmp    c002016f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020177:	51                   	push   ecx
c0020178:	68 00 01 00 00       	push   0x100
c002017d:	6a 00                	push   0x0
c002017f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020183:	50                   	push   eax
c0020184:	e8 f3 04 fe ff       	call   c000067c <memset>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	31 d2                	xor    edx,edx
c002018e:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020191:	84 c0                	test   al,al
c0020193:	74 21                	je     c00201b6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020195:	3c 2f                	cmp    al,0x2f
c0020197:	75 0b                	jne    c00201a4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020199:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002019d:	bd 01 00 00 00       	mov    ebp,0x1
c00201a2:	eb 14                	jmp    c00201b8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00201a4:	8d 48 9f             	lea    ecx,[eax-0x61]
c00201a7:	80 f9 19             	cmp    cl,0x19
c00201aa:	77 03                	ja     c00201af <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00201ac:	83 e8 20             	sub    eax,0x20
c00201af:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00201b3:	42                   	inc    edx
c00201b4:	eb d8                	jmp    c002018e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00201b6:	31 ed                	xor    ebp,ebp
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00201c2:	e8 f9 f2 fe ff       	call   c000f4c0 <malloc>
c00201c7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00201ce:	89 c6                	mov    esi,eax
c00201d0:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00201d6:	c1 ef 0b             	shr    edi,0xb
c00201d9:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00201e0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00201e4:	83 c4 10             	add    esp,0x10
c00201e7:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00201ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00201f0:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00201f7:	74 28                	je     c0020221 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00201f9:	52                   	push   edx
c00201fa:	57                   	push   edi
c00201fb:	50                   	push   eax
c00201fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020200:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020207:	e8 59 f9 ff ff       	call   c001fb65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002020c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020210:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020217:	05 00 08 00 00       	add    eax,0x800
c002021c:	83 c4 10             	add    esp,0x10
c002021f:	eb cb                	jmp    c00201ec <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020221:	83 ec 0c             	sub    esp,0xc
c0020224:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020228:	57                   	push   edi
c0020229:	e8 6b 04 fe ff       	call   c0000699 <strlen>
c002022e:	50                   	push   eax
c002022f:	57                   	push   edi
c0020230:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020237:	56                   	push   esi
c0020238:	e8 e6 f8 ff ff       	call   c001fb23 <__memmem(unsigned char*, int, unsigned char*, int)>
c002023d:	83 c4 20             	add    esp,0x20
c0020240:	85 c0                	test   eax,eax
c0020242:	75 13                	jne    c0020257 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	56                   	push   esi
c0020248:	e8 83 f2 fe ff       	call   c000f4d0 <free>
c002024d:	83 c4 10             	add    esp,0x10
c0020250:	31 c0                	xor    eax,eax
c0020252:	e9 b3 00 00 00       	jmp    c002030a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020257:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002025b:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002025f:	c1 e7 08             	shl    edi,0x8
c0020262:	c1 e2 10             	shl    edx,0x10
c0020265:	09 d7                	or     edi,edx
c0020267:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002026b:	09 d7                	or     edi,edx
c002026d:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020271:	c1 e2 18             	shl    edx,0x18
c0020274:	09 d7                	or     edi,edx
c0020276:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002027a:	89 d1                	mov    ecx,edx
c002027c:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020280:	c1 e1 08             	shl    ecx,0x8
c0020283:	c1 e2 10             	shl    edx,0x10
c0020286:	09 ca                	or     edx,ecx
c0020288:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002028c:	09 ca                	or     edx,ecx
c002028e:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020292:	c1 e1 18             	shl    ecx,0x18
c0020295:	09 ca                	or     edx,ecx
c0020297:	89 e9                	mov    ecx,ebp
c0020299:	84 c9                	test   cl,cl
c002029b:	74 3c                	je     c00202d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002029d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	56                   	push   esi
c00202a5:	e8 26 f2 fe ff       	call   c000f4d0 <free>
c00202aa:	83 c4 0c             	add    esp,0xc
c00202ad:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00202b4:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00202b9:	50                   	push   eax
c00202ba:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00202c1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00202c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202cc:	52                   	push   edx
c00202cd:	57                   	push   edi
c00202ce:	53                   	push   ebx
c00202cf:	e8 6e fe ff ff       	call   c0020142 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00202d4:	83 c4 20             	add    esp,0x20
c00202d7:	eb 31                	jmp    c002030a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00202d9:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00202dc:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00202e3:	d0 e8                	shr    al,1
c00202e5:	89 3b                	mov    DWORD PTR [ebx],edi
c00202e7:	83 e0 01             	and    eax,0x1
c00202ea:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00202f1:	83 ec 0c             	sub    esp,0xc
c00202f4:	89 13                	mov    DWORD PTR [ebx],edx
c00202f6:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00202fd:	89 03                	mov    DWORD PTR [ebx],eax
c00202ff:	56                   	push   esi
c0020300:	e8 cb f1 fe ff       	call   c000f4d0 <free>
c0020305:	83 c4 10             	add    esp,0x10
c0020308:	b0 01                	mov    al,0x1
c002030a:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020310:	5b                   	pop    ebx
c0020311:	5e                   	pop    esi
c0020312:	5f                   	pop    edi
c0020313:	5d                   	pop    ebp
c0020314:	c3                   	ret    

c0020315 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020315:	55                   	push   ebp
c0020316:	57                   	push   edi
c0020317:	56                   	push   esi
c0020318:	53                   	push   ebx
c0020319:	83 ec 20             	sub    esp,0x20
c002031c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020320:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020324:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020328:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020330:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020338:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002033d:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020343:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020349:	57                   	push   edi
c002034a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002034e:	50                   	push   eax
c002034f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020353:	50                   	push   eax
c0020354:	e8 94 fd ff ff       	call   c00200ed <readRoot(unsigned int*, unsigned int*, char)>
c0020359:	5a                   	pop    edx
c002035a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002035e:	e8 36 03 fe ff       	call   c0000699 <strlen>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	83 f8 03             	cmp    eax,0x3
c0020369:	77 17                	ja     c0020382 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002036b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002036f:	89 03                	mov    DWORD PTR [ebx],eax
c0020371:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020375:	89 06                	mov    DWORD PTR [esi],eax
c0020377:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002037e:	b0 01                	mov    al,0x1
c0020380:	eb 19                	jmp    c002039b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020382:	50                   	push   eax
c0020383:	55                   	push   ebp
c0020384:	57                   	push   edi
c0020385:	56                   	push   esi
c0020386:	53                   	push   ebx
c0020387:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002038b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002038f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020393:	e8 aa fd ff ff       	call   c0020142 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020398:	83 c4 20             	add    esp,0x20
c002039b:	83 c4 1c             	add    esp,0x1c
c002039e:	5b                   	pop    ebx
c002039f:	5e                   	pop    esi
c00203a0:	5f                   	pop    edi
c00203a1:	5d                   	pop    ebp
c00203a2:	c3                   	ret    
c00203a3:	90                   	nop

c00203a4 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00203a4:	57                   	push   edi
c00203a5:	56                   	push   esi
c00203a6:	53                   	push   ebx
c00203a7:	83 ec 10             	sub    esp,0x10
c00203aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00203ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00203b2:	85 ff                	test   edi,edi
c00203b4:	74 7b                	je     c0020431 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c00203b6:	85 f6                	test   esi,esi
c00203b8:	74 77                	je     c0020431 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c00203ba:	83 ec 0c             	sub    esp,0xc
c00203bd:	6a 1c                	push   0x1c
c00203bf:	e8 fc f0 fe ff       	call   c000f4c0 <malloc>
c00203c4:	89 07                	mov    DWORD PTR [edi],eax
c00203c6:	89 c3                	mov    ebx,eax
c00203c8:	58                   	pop    eax
c00203c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00203cd:	50                   	push   eax
c00203ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00203d1:	50                   	push   eax
c00203d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00203d6:	50                   	push   eax
c00203d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00203db:	50                   	push   eax
c00203dc:	56                   	push   esi
c00203dd:	e8 33 ff ff ff       	call   c0020315 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00203e2:	83 c4 20             	add    esp,0x20
c00203e5:	84 c0                	test   al,al
c00203e7:	74 07                	je     c00203f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c00203e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203ee:	74 0b                	je     c00203fb <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00203f0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00203f4:	b8 01 00 00 00       	mov    eax,0x1
c00203f9:	eb 3b                	jmp    c0020436 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c00203fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ff:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020403:	89 03                	mov    DWORD PTR [ebx],eax
c0020405:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002040c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020410:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020417:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002041e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020421:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020428:	8a 06                	mov    al,BYTE PTR [esi]
c002042a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002042d:	31 c0                	xor    eax,eax
c002042f:	eb 05                	jmp    c0020436 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020431:	b8 04 00 00 00       	mov    eax,0x4
c0020436:	83 c4 10             	add    esp,0x10
c0020439:	5b                   	pop    ebx
c002043a:	5e                   	pop    esi
c002043b:	5f                   	pop    edi
c002043c:	c3                   	ret    
c002043d:	90                   	nop

c002043e <ISO9660::exists(char const*)>:
c002043e:	83 ec 28             	sub    esp,0x28
c0020441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020445:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020449:	52                   	push   edx
c002044a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002044d:	52                   	push   edx
c002044e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020452:	52                   	push   edx
c0020453:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020457:	52                   	push   edx
c0020458:	50                   	push   eax
c0020459:	e8 b7 fe ff ff       	call   c0020315 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002045e:	83 c4 3c             	add    esp,0x3c
c0020461:	c3                   	ret    

c0020462 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0020462:	56                   	push   esi
c0020463:	53                   	push   ebx
c0020464:	83 ec 14             	sub    esp,0x14
c0020467:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002046b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002046f:	85 db                	test   ebx,ebx
c0020471:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020475:	0f 94 c2             	sete   dl
c0020478:	85 f6                	test   esi,esi
c002047a:	0f 94 c0             	sete   al
c002047d:	08 c2                	or     dl,al
c002047f:	75 68                	jne    c00204e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020481:	85 c9                	test   ecx,ecx
c0020483:	74 64                	je     c00204e9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0020485:	83 ec 0c             	sub    esp,0xc
c0020488:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002048b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002048f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020495:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002049c:	50                   	push   eax
c002049d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00204a0:	50                   	push   eax
c00204a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204a5:	50                   	push   eax
c00204a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204aa:	50                   	push   eax
c00204ab:	51                   	push   ecx
c00204ac:	e8 64 fe ff ff       	call   c0020315 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00204b1:	83 c4 20             	add    esp,0x20
c00204b4:	ba 01 00 00 00       	mov    edx,0x1
c00204b9:	84 c0                	test   al,al
c00204bb:	74 31                	je     c00204ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00204bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204c1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00204c8:	89 03                	mov    DWORD PTR [ebx],eax
c00204ca:	ba 00 00 00 00       	mov    edx,0x0
c00204cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204d3:	85 c0                	test   eax,eax
c00204d5:	0f 95 06             	setne  BYTE PTR [esi]
c00204d8:	74 14                	je     c00204ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00204da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00204e0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00204e7:	eb 05                	jmp    c00204ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00204e9:	ba 04 00 00 00       	mov    edx,0x4
c00204ee:	83 c4 14             	add    esp,0x14
c00204f1:	89 d0                	mov    eax,edx
c00204f3:	5b                   	pop    ebx
c00204f4:	5e                   	pop    esi
c00204f5:	c3                   	ret    

c00204f6 <ISO9660::openDir(char const*, void**)>:
c00204f6:	57                   	push   edi
c00204f7:	56                   	push   esi
c00204f8:	53                   	push   ebx
c00204f9:	83 ec 10             	sub    esp,0x10
c00204fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020500:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020504:	85 ff                	test   edi,edi
c0020506:	0f 84 95 00 00 00    	je     c00205a1 <ISO9660::openDir(char const*, void**)+0xab>
c002050c:	85 f6                	test   esi,esi
c002050e:	0f 84 8d 00 00 00    	je     c00205a1 <ISO9660::openDir(char const*, void**)+0xab>
c0020514:	83 ec 0c             	sub    esp,0xc
c0020517:	6a 1c                	push   0x1c
c0020519:	e8 a2 ef fe ff       	call   c000f4c0 <malloc>
c002051e:	89 07                	mov    DWORD PTR [edi],eax
c0020520:	89 c3                	mov    ebx,eax
c0020522:	59                   	pop    ecx
c0020523:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020527:	50                   	push   eax
c0020528:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002052b:	50                   	push   eax
c002052c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020530:	50                   	push   eax
c0020531:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020535:	50                   	push   eax
c0020536:	56                   	push   esi
c0020537:	e8 d9 fd ff ff       	call   c0020315 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002053c:	83 c4 20             	add    esp,0x20
c002053f:	84 c0                	test   al,al
c0020541:	74 07                	je     c002054a <ISO9660::openDir(char const*, void**)+0x54>
c0020543:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020548:	75 21                	jne    c002056b <ISO9660::openDir(char const*, void**)+0x75>
c002054a:	0f b6 c0             	movzx  eax,al
c002054d:	52                   	push   edx
c002054e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020552:	50                   	push   eax
c0020553:	68 62 a3 02 c0       	push   0xc002a362
c0020558:	e8 30 21 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c002055d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020561:	83 c4 10             	add    esp,0x10
c0020564:	b8 01 00 00 00       	mov    eax,0x1
c0020569:	eb 3b                	jmp    c00205a6 <ISO9660::openDir(char const*, void**)+0xb0>
c002056b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002056f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020573:	89 03                	mov    DWORD PTR [ebx],eax
c0020575:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002057c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020580:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020587:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002058e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020591:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020598:	8a 06                	mov    al,BYTE PTR [esi]
c002059a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002059d:	31 c0                	xor    eax,eax
c002059f:	eb 05                	jmp    c00205a6 <ISO9660::openDir(char const*, void**)+0xb0>
c00205a1:	b8 04 00 00 00       	mov    eax,0x4
c00205a6:	83 c4 10             	add    esp,0x10
c00205a9:	5b                   	pop    ebx
c00205aa:	5e                   	pop    esi
c00205ab:	5f                   	pop    edi
c00205ac:	c3                   	ret    
c00205ad:	90                   	nop

c00205ae <ISO9660::ISO9660()>:
c00205ae:	83 ec 0c             	sub    esp,0xc
c00205b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b5:	83 ec 0c             	sub    esp,0xc
c00205b8:	50                   	push   eax
c00205b9:	e8 d4 23 ff ff       	call   c0012992 <Filesystem::Filesystem()>
c00205be:	83 c4 10             	add    esp,0x10
c00205c1:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c00205c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ca:	89 10                	mov    DWORD PTR [eax],edx
c00205cc:	90                   	nop
c00205cd:	83 c4 0c             	add    esp,0xc
c00205d0:	c3                   	ret    
c00205d1:	90                   	nop

c00205d2 <SoundChannel::~SoundChannel()>:
c00205d2:	83 ec 0c             	sub    esp,0xc
c00205d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00205dc:	83 ec 0c             	sub    esp,0xc
c00205df:	50                   	push   eax
c00205e0:	e8 eb ee fe ff       	call   c000f4d0 <free>
c00205e5:	83 c4 10             	add    esp,0x10
c00205e8:	90                   	nop
c00205e9:	83 c4 0c             	add    esp,0xc
c00205ec:	c3                   	ret    
c00205ed:	90                   	nop

c00205ee <SoundChannel::setSpeed(float)>:
c00205ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205f6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00205f9:	c3                   	ret    

c00205fa <SoundChannel::getSpeed()>:
c00205fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00205fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0020601:	c3                   	ret    

c0020602 <SoundChannel::setVolume(int)>:
c0020602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020606:	83 f8 64             	cmp    eax,0x64
c0020609:	7e 05                	jle    c0020610 <SoundChannel::setVolume(int)+0xe>
c002060b:	b8 64 00 00 00       	mov    eax,0x64
c0020610:	85 c0                	test   eax,eax
c0020612:	79 02                	jns    c0020616 <SoundChannel::setVolume(int)+0x14>
c0020614:	31 c0                	xor    eax,eax
c0020616:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002061a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002061d:	c3                   	ret    

c002061e <SoundChannel::getVolume()>:
c002061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020622:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020625:	c3                   	ret    

c0020626 <SoundChannel::pause()>:
c0020626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002062a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002062e:	c3                   	ret    
c002062f:	90                   	nop

c0020630 <SoundChannel::SoundChannel(int, int, int, int)>:
c0020630:	83 ec 1c             	sub    esp,0x1c
c0020633:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020637:	e8 ea ff ff ff       	call   c0020626 <SoundChannel::pause()>
c002063c:	83 c4 04             	add    esp,0x4
c002063f:	6a 50                	push   0x50
c0020641:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020645:	e8 b8 ff ff ff       	call   c0020602 <SoundChannel::setVolume(int)>
c002064a:	83 c4 08             	add    esp,0x8
c002064d:	a1 00 a4 02 c0       	mov    eax,ds:0xc002a400
c0020652:	50                   	push   eax
c0020653:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020657:	e8 92 ff ff ff       	call   c00205ee <SoundChannel::setSpeed(float)>
c002065c:	83 c4 08             	add    esp,0x8
c002065f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020663:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020667:	89 10                	mov    DWORD PTR [eax],edx
c0020669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002066d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020671:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020678:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002067c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002067f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0020684:	75 23                	jne    c00206a9 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0020686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002068a:	8b 10                	mov    edx,DWORD PTR [eax]
c002068c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020693:	0f af c2             	imul   eax,edx
c0020696:	85 c0                	test   eax,eax
c0020698:	79 03                	jns    c002069d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002069a:	83 c0 03             	add    eax,0x3
c002069d:	c1 f8 02             	sar    eax,0x2
c00206a0:	05 a0 0f 00 00       	add    eax,0xfa0
c00206a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00206a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206b1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00206b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206b8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00206bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206c3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00206ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206ce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00206d1:	c1 e0 02             	shl    eax,0x2
c00206d4:	83 ec 0c             	sub    esp,0xc
c00206d7:	50                   	push   eax
c00206d8:	e8 e3 ed fe ff       	call   c000f4c0 <malloc>
c00206dd:	83 c4 10             	add    esp,0x10
c00206e0:	89 c2                	mov    edx,eax
c00206e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00206e9:	83 ec 04             	sub    esp,0x4
c00206ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206f0:	50                   	push   eax
c00206f1:	6a 01                	push   0x1
c00206f3:	6a 04                	push   0x4
c00206f5:	e8 46 82 fe ff       	call   c0008940 <src_new>
c00206fa:	83 c4 10             	add    esp,0x10
c00206fd:	89 c2                	mov    edx,eax
c00206ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020703:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002070a:	85 c0                	test   eax,eax
c002070c:	74 10                	je     c002071e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	68 e4 a3 02 c0       	push   0xc002a3e4
c0020716:	e8 3c 8a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002071b:	83 c4 10             	add    esp,0x10
c002071e:	a0 40 e0 02 c0       	mov    al,ds:0xc002e040
c0020723:	83 f0 01             	xor    eax,0x1
c0020726:	84 c0                	test   al,al
c0020728:	74 57                	je     c0020781 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c002072a:	a1 04 a4 02 c0       	mov    eax,ds:0xc002a404
c002072f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020733:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002073b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0020743:	7f 35                	jg     c002077a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0020745:	83 ec 0c             	sub    esp,0xc
c0020748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002074c:	e8 26 4a 00 00       	call   c0025177 <__floatsisf>
c0020751:	83 c4 10             	add    esp,0x10
c0020754:	8b 15 04 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a404
c002075a:	83 ec 08             	sub    esp,0x8
c002075d:	52                   	push   edx
c002075e:	50                   	push   eax
c002075f:	e8 25 46 00 00       	call   c0024d89 <__mulsf3>
c0020764:	83 c4 10             	add    esp,0x10
c0020767:	89 c2                	mov    edx,eax
c0020769:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002076d:	89 14 85 40 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23c0],edx
c0020774:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020778:	eb c1                	jmp    c002073b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002077a:	c6 05 40 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e040,0x1
c0020781:	90                   	nop
c0020782:	83 c4 1c             	add    esp,0x1c
c0020785:	c3                   	ret    

c0020786 <SoundChannel::play()>:
c0020786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002078a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002078e:	c3                   	ret    
c002078f:	90                   	nop

c0020790 <SoundChannel::paused()>:
c0020790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020794:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0020797:	c3                   	ret    

c0020798 <SoundChannel::getSampleRate()>:
c0020798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002079c:	8b 00                	mov    eax,DWORD PTR [eax]
c002079e:	c3                   	ret    
c002079f:	90                   	nop

c00207a0 <SoundChannel::getBits()>:
c00207a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207a7:	c3                   	ret    

c00207a8 <SoundChannel::getBufferUsed()>:
c00207a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207ac:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00207af:	c3                   	ret    

c00207b0 <SoundChannel::getBufferSize()>:
c00207b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00207b7:	c3                   	ret    

c00207b8 <SoundChannel::unbuffer(float*, int, int)>:
c00207b8:	56                   	push   esi
c00207b9:	53                   	push   ebx
c00207ba:	83 ec 40             	sub    esp,0x40
c00207bd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00207c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00207c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00207c8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00207cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00207cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00207d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00207d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00207db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00207df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00207e3:	e8 8f 49 00 00       	call   c0025177 <__floatsisf>
c00207e8:	5a                   	pop    edx
c00207e9:	89 c6                	mov    esi,eax
c00207eb:	ff 33                	push   DWORD PTR [ebx]
c00207ed:	e8 85 49 00 00       	call   c0025177 <__floatsisf>
c00207f2:	59                   	pop    ecx
c00207f3:	5a                   	pop    edx
c00207f4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00207f7:	50                   	push   eax
c00207f8:	e8 8c 45 00 00       	call   c0024d89 <__mulsf3>
c00207fd:	59                   	pop    ecx
c00207fe:	5a                   	pop    edx
c00207ff:	50                   	push   eax
c0020800:	56                   	push   esi
c0020801:	e8 46 47 00 00       	call   c0024f4c <__divsf3>
c0020806:	89 04 24             	mov    DWORD PTR [esp],eax
c0020809:	e8 39 5c 00 00       	call   c0026447 <__extendsfdf2>
c002080e:	59                   	pop    ecx
c002080f:	5e                   	pop    esi
c0020810:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020814:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0020818:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0020820:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020824:	50                   	push   eax
c0020825:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0020828:	e8 08 7d fe ff       	call   c0008535 <src_process>
c002082d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020831:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0020834:	83 c4 0c             	add    esp,0xc
c0020837:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002083a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002083d:	29 d0                	sub    eax,edx
c002083f:	c1 e0 02             	shl    eax,0x2
c0020842:	50                   	push   eax
c0020843:	8d 04 91             	lea    eax,[ecx+edx*4]
c0020846:	50                   	push   eax
c0020847:	51                   	push   ecx
c0020848:	e8 c1 fd fd ff       	call   c000060e <memmove>
c002084d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020851:	83 c4 44             	add    esp,0x44
c0020854:	5b                   	pop    ebx
c0020855:	5e                   	pop    esi
c0020856:	c3                   	ret    
c0020857:	90                   	nop

c0020858 <SoundChannel::buffer8(unsigned char*, int)>:
c0020858:	55                   	push   ebp
c0020859:	57                   	push   edi
c002085a:	56                   	push   esi
c002085b:	53                   	push   ebx
c002085c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020860:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0020864:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0020867:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002086b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002086e:	74 7a                	je     c00208ea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020870:	85 ff                	test   edi,edi
c0020872:	7e 76                	jle    c00208ea <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0020874:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0020878:	8d 70 01             	lea    esi,[eax+0x1]
c002087b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002087e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0020881:	8b 1c 9d 40 dc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd23c0]
c0020888:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002088b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002088e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0020891:	74 5e                	je     c00208f1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0020893:	83 ff 01             	cmp    edi,0x1
c0020896:	74 4b                	je     c00208e3 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0020898:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002089c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002089f:	8d 70 01             	lea    esi,[eax+0x1]
c00208a2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00208a5:	8b 1c 9d 40 dc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd23c0]
c00208ac:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00208af:	b8 02 00 00 00       	mov    eax,0x2
c00208b4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00208b7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00208ba:	75 23                	jne    c00208df <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00208bc:	eb 27                	jmp    c00208e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00208be:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00208c3:	8d 71 01             	lea    esi,[ecx+0x1]
c00208c6:	40                   	inc    eax
c00208c7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00208ca:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00208cd:	8b 1c 9d 40 dc 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd23c0]
c00208d4:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00208d7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00208da:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00208dd:	74 06                	je     c00208e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00208df:	39 c7                	cmp    edi,eax
c00208e1:	75 db                	jne    c00208be <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00208e3:	89 f8                	mov    eax,edi
c00208e5:	5b                   	pop    ebx
c00208e6:	5e                   	pop    esi
c00208e7:	5f                   	pop    edi
c00208e8:	5d                   	pop    ebp
c00208e9:	c3                   	ret    
c00208ea:	5b                   	pop    ebx
c00208eb:	31 c0                	xor    eax,eax
c00208ed:	5e                   	pop    esi
c00208ee:	5f                   	pop    edi
c00208ef:	5d                   	pop    ebp
c00208f0:	c3                   	ret    
c00208f1:	b8 01 00 00 00       	mov    eax,0x1
c00208f6:	eb ed                	jmp    c00208e5 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00208f8 <SoundDevice::SoundDevice(char const*)>:
c00208f8:	83 ec 1c             	sub    esp,0x1c
c00208fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ff:	83 ec 08             	sub    esp,0x8
c0020902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020906:	50                   	push   eax
c0020907:	e8 60 33 ff ff       	call   c0013c6c <Device::Device(char const*)>
c002090c:	83 c4 10             	add    esp,0x10
c002090f:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c0020914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020918:	89 10                	mov    DWORD PTR [eax],edx
c002091a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002091e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0020928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002092c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0020936:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002093e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020943:	7f 19                	jg     c002095e <SoundDevice::SoundDevice(char const*)+0x66>
c0020945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002094d:	83 c2 54             	add    edx,0x54
c0020950:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0020958:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002095c:	eb e0                	jmp    c002093e <SoundDevice::SoundDevice(char const*)+0x46>
c002095e:	90                   	nop
c002095f:	83 c4 1c             	add    esp,0x1c
c0020962:	c3                   	ret    
c0020963:	90                   	nop

c0020964 <SoundDevice::~SoundDevice()>:
c0020964:	53                   	push   ebx
c0020965:	83 ec 18             	sub    esp,0x18
c0020968:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c002096d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020971:	89 10                	mov    DWORD PTR [eax],edx
c0020973:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002097b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0020980:	7f 46                	jg     c00209c8 <SoundDevice::~SoundDevice()+0x64>
c0020982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020986:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002098a:	83 c2 54             	add    edx,0x54
c002098d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0020991:	85 c0                	test   eax,eax
c0020993:	74 2d                	je     c00209c2 <SoundDevice::~SoundDevice()+0x5e>
c0020995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020999:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002099d:	83 c2 54             	add    edx,0x54
c00209a0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00209a4:	85 db                	test   ebx,ebx
c00209a6:	74 1a                	je     c00209c2 <SoundDevice::~SoundDevice()+0x5e>
c00209a8:	83 ec 0c             	sub    esp,0xc
c00209ab:	53                   	push   ebx
c00209ac:	e8 21 fc ff ff       	call   c00205d2 <SoundChannel::~SoundChannel()>
c00209b1:	83 c4 10             	add    esp,0x10
c00209b4:	83 ec 08             	sub    esp,0x8
c00209b7:	6a 2c                	push   0x2c
c00209b9:	53                   	push   ebx
c00209ba:	e8 ee 1b ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c00209bf:	83 c4 10             	add    esp,0x10
c00209c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00209c6:	eb b3                	jmp    c002097b <SoundDevice::~SoundDevice()+0x17>
c00209c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209cc:	83 ec 0c             	sub    esp,0xc
c00209cf:	50                   	push   eax
c00209d0:	e8 79 2f ff ff       	call   c001394e <Device::~Device()>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	90                   	nop
c00209d9:	83 c4 18             	add    esp,0x18
c00209dc:	5b                   	pop    ebx
c00209dd:	c3                   	ret    

c00209de <SoundDevice::~SoundDevice()>:
c00209de:	83 ec 0c             	sub    esp,0xc
c00209e1:	83 ec 0c             	sub    esp,0xc
c00209e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209e8:	e8 77 ff ff ff       	call   c0020964 <SoundDevice::~SoundDevice()>
c00209ed:	83 c4 10             	add    esp,0x10
c00209f0:	83 ec 08             	sub    esp,0x8
c00209f3:	68 e4 01 00 00       	push   0x1e4
c00209f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209fc:	e8 ac 1b ff ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0020a01:	83 c4 10             	add    esp,0x10
c0020a04:	83 c4 0c             	add    esp,0xc
c0020a07:	c3                   	ret    

c0020a08 <SoundDevice::getFreeChannelNum()>:
c0020a08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020a0c:	31 c0                	xor    eax,eax
c0020a0e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0020a16:	74 09                	je     c0020a21 <SoundDevice::getFreeChannelNum()+0x19>
c0020a18:	40                   	inc    eax
c0020a19:	83 f8 20             	cmp    eax,0x20
c0020a1c:	75 f0                	jne    c0020a0e <SoundDevice::getFreeChannelNum()+0x6>
c0020a1e:	83 c8 ff             	or     eax,0xffffffff
c0020a21:	c3                   	ret    

c0020a22 <SoundDevice::addChannel(SoundChannel*)>:
c0020a22:	56                   	push   esi
c0020a23:	53                   	push   ebx
c0020a24:	51                   	push   ecx
c0020a25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020a2d:	53                   	push   ebx
c0020a2e:	e8 d5 ff ff ff       	call   c0020a08 <SoundDevice::getFreeChannelNum()>
c0020a33:	5a                   	pop    edx
c0020a34:	83 f8 ff             	cmp    eax,0xffffffff
c0020a37:	74 51                	je     c0020a8a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020a39:	85 f6                	test   esi,esi
c0020a3b:	74 4d                	je     c0020a8a <SoundDevice::addChannel(SoundChannel*)+0x68>
c0020a3d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0020a44:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0020a4b:	75 30                	jne    c0020a7d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0020a4d:	83 ec 0c             	sub    esp,0xc
c0020a50:	56                   	push   esi
c0020a51:	e8 42 fd ff ff       	call   c0020798 <SoundChannel::getSampleRate()>
c0020a56:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0020a5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0020a5f:	e8 3c fd ff ff       	call   c00207a0 <SoundChannel::getBits()>
c0020a64:	83 c4 0c             	add    esp,0xc
c0020a67:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0020a6d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020a6f:	50                   	push   eax
c0020a70:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0020a76:	53                   	push   ebx
c0020a77:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0020a7a:	83 c4 10             	add    esp,0x10
c0020a7d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0020a83:	b8 01 00 00 00       	mov    eax,0x1
c0020a88:	eb 03                	jmp    c0020a8d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0020a8a:	83 c8 ff             	or     eax,0xffffffff
c0020a8d:	5a                   	pop    edx
c0020a8e:	5b                   	pop    ebx
c0020a8f:	5e                   	pop    esi
c0020a90:	c3                   	ret    
c0020a91:	90                   	nop

c0020a92 <SoundDevice::removeChannel(int)>:
c0020a92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020a9a:	83 fa 1f             	cmp    edx,0x1f
c0020a9d:	77 23                	ja     c0020ac2 <SoundDevice::removeChannel(int)+0x30>
c0020a9f:	8d 14 90             	lea    edx,[eax+edx*4]
c0020aa2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0020aa9:	74 17                	je     c0020ac2 <SoundDevice::removeChannel(int)+0x30>
c0020aab:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0020ab5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0020abb:	75 05                	jne    c0020ac2 <SoundDevice::removeChannel(int)+0x30>
c0020abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0020abf:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0020ac2:	c3                   	ret    
c0020ac3:	90                   	nop

c0020ac4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0020ac4:	57                   	push   edi
c0020ac5:	56                   	push   esi
c0020ac6:	53                   	push   ebx
c0020ac7:	31 db                	xor    ebx,ebx
c0020ac9:	83 ec 10             	sub    esp,0x10
c0020acc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020ad0:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0020ad4:	0f 8d cb 00 00 00    	jge    c0020ba5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0020ada:	83 ec 0c             	sub    esp,0xc
c0020add:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ae1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0020ae4:	e8 5e 59 00 00       	call   c0026447 <__extendsfdf2>
c0020ae9:	83 c4 10             	add    esp,0x10
c0020aec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020af0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020af4:	68 00 00 f0 3f       	push   0x3ff00000
c0020af9:	6a 00                	push   0x0
c0020afb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020aff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b03:	e8 cb 48 00 00       	call   c00253d3 <__adddf3>
c0020b08:	83 c4 10             	add    esp,0x10
c0020b0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b13:	68 00 00 e0 3f       	push   0x3fe00000
c0020b18:	6a 00                	push   0x0
c0020b1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b22:	e8 29 4f 00 00       	call   c0025a50 <__muldf3>
c0020b27:	83 c4 10             	add    esp,0x10
c0020b2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020b32:	68 00 00 60 40       	push   0x40600000
c0020b37:	6a 00                	push   0x0
c0020b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b41:	e8 0a 4f 00 00       	call   c0025a50 <__muldf3>
c0020b46:	59                   	pop    ecx
c0020b47:	5f                   	pop    edi
c0020b48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0020b50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020b58:	e8 c6 57 00 00       	call   c0026323 <__truncdfsf2>
c0020b5d:	5a                   	pop    edx
c0020b5e:	89 c7                	mov    edi,eax
c0020b60:	59                   	pop    ecx
c0020b61:	68 00 00 fe 42       	push   0x42fe0000
c0020b66:	50                   	push   eax
c0020b67:	e8 61 48 00 00       	call   c00253cd <__gesf2>
c0020b6c:	83 c4 10             	add    esp,0x10
c0020b6f:	85 c0                	test   eax,eax
c0020b71:	78 06                	js     c0020b79 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0020b73:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0020b77:	eb 26                	jmp    c0020b9f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020b79:	50                   	push   eax
c0020b7a:	50                   	push   eax
c0020b7b:	6a 00                	push   0x0
c0020b7d:	57                   	push   edi
c0020b7e:	e8 4e 48 00 00       	call   c00253d1 <__lesf2>
c0020b83:	83 c4 10             	add    esp,0x10
c0020b86:	85 c0                	test   eax,eax
c0020b88:	7f 06                	jg     c0020b90 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0020b8a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0020b8e:	eb 0f                	jmp    c0020b9f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0020b90:	83 ec 0c             	sub    esp,0xc
c0020b93:	57                   	push   edi
c0020b94:	e8 43 59 00 00       	call   c00264dc <lrintf>
c0020b99:	83 c4 10             	add    esp,0x10
c0020b9c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0020b9f:	43                   	inc    ebx
c0020ba0:	e9 2b ff ff ff       	jmp    c0020ad0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0020ba5:	83 c4 10             	add    esp,0x10
c0020ba8:	5b                   	pop    ebx
c0020ba9:	5e                   	pop    esi
c0020baa:	5f                   	pop    edi
c0020bab:	c3                   	ret    

c0020bac <SoundDevice::getAudio(int, float*, float*)>:
c0020bac:	55                   	push   ebp
c0020bad:	57                   	push   edi
c0020bae:	56                   	push   esi
c0020baf:	53                   	push   ebx
c0020bb0:	31 db                	xor    ebx,ebx
c0020bb2:	83 ec 20             	sub    esp,0x20
c0020bb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020bb9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020bbd:	c1 e0 02             	shl    eax,0x2
c0020bc0:	50                   	push   eax
c0020bc1:	6a 00                	push   0x0
c0020bc3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020bc7:	e8 b0 fa fd ff       	call   c000067c <memset>
c0020bcc:	83 c4 10             	add    esp,0x10
c0020bcf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020bd3:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0020bda:	85 c0                	test   eax,eax
c0020bdc:	0f 84 d7 00 00 00    	je     c0020cb9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020be2:	83 ec 0c             	sub    esp,0xc
c0020be5:	50                   	push   eax
c0020be6:	e8 a5 fb ff ff       	call   c0020790 <SoundChannel::paused()>
c0020beb:	83 c4 10             	add    esp,0x10
c0020bee:	84 c0                	test   al,al
c0020bf0:	0f 85 c3 00 00 00    	jne    c0020cb9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020c00:	e8 19 fa ff ff       	call   c002061e <SoundChannel::getVolume()>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	85 c0                	test   eax,eax
c0020c0a:	0f 84 a9 00 00 00    	je     c0020cb9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020c10:	83 ec 0c             	sub    esp,0xc
c0020c13:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020c1a:	e8 ff f9 ff ff       	call   c002061e <SoundChannel::getVolume()>
c0020c1f:	83 ec 0c             	sub    esp,0xc
c0020c22:	50                   	push   eax
c0020c23:	e8 4f 45 00 00       	call   c0025177 <__floatsisf>
c0020c28:	59                   	pop    ecx
c0020c29:	5d                   	pop    ebp
c0020c2a:	31 ed                	xor    ebp,ebp
c0020c2c:	68 00 00 c8 42       	push   0x42c80000
c0020c31:	50                   	push   eax
c0020c32:	e8 15 43 00 00       	call   c0024f4c <__divsf3>
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020c42:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0020c48:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020c4c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020c53:	e8 60 fb ff ff       	call   c00207b8 <SoundChannel::unbuffer(float*, int, int)>
c0020c58:	83 c4 20             	add    esp,0x20
c0020c5b:	89 c1                	mov    ecx,eax
c0020c5d:	39 cd                	cmp    ebp,ecx
c0020c5f:	7d 52                	jge    c0020cb3 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020c61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020c65:	50                   	push   eax
c0020c66:	50                   	push   eax
c0020c67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020c6b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020c6e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c72:	e8 12 41 00 00       	call   c0024d89 <__mulsf3>
c0020c77:	5a                   	pop    edx
c0020c78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c7c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020c82:	e8 f0 44 00 00       	call   c0025177 <__floatsisf>
c0020c87:	59                   	pop    ecx
c0020c88:	5a                   	pop    edx
c0020c89:	50                   	push   eax
c0020c8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020c8e:	e8 b9 42 00 00       	call   c0024f4c <__divsf3>
c0020c93:	59                   	pop    ecx
c0020c94:	5a                   	pop    edx
c0020c95:	50                   	push   eax
c0020c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c9a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020c9d:	e8 c4 3d 00 00       	call   c0024a66 <__addsf3>
c0020ca2:	83 c4 10             	add    esp,0x10
c0020ca5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020ca9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020cad:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020cb0:	45                   	inc    ebp
c0020cb1:	eb aa                	jmp    c0020c5d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020cb3:	39 cf                	cmp    edi,ecx
c0020cb5:	7e 02                	jle    c0020cb9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0020cb7:	89 cf                	mov    edi,ecx
c0020cb9:	43                   	inc    ebx
c0020cba:	83 fb 20             	cmp    ebx,0x20
c0020cbd:	0f 85 10 ff ff ff    	jne    c0020bd3 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0020cc3:	83 c4 1c             	add    esp,0x1c
c0020cc6:	89 f8                	mov    eax,edi
c0020cc8:	5b                   	pop    ebx
c0020cc9:	5e                   	pop    esi
c0020cca:	5f                   	pop    edi
c0020ccb:	5d                   	pop    ebp
c0020ccc:	c3                   	ret    
c0020ccd:	90                   	nop

c0020cce <PCI::open(int, int, void*)>:
c0020cce:	83 ec 18             	sub    esp,0x18
c0020cd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0020cd7:	50                   	push   eax
c0020cd8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0020cdb:	31 c0                	xor    eax,eax
c0020cdd:	83 c4 1c             	add    esp,0x1c
c0020ce0:	c3                   	ret    
c0020ce1:	90                   	nop

c0020ce2 <PCI::close(int, int, void*)>:
c0020ce2:	31 c0                	xor    eax,eax
c0020ce4:	c3                   	ret    
c0020ce5:	90                   	nop

c0020ce6 <PCI::PCI()>:
c0020ce6:	83 ec 0c             	sub    esp,0xc
c0020ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ced:	83 ec 08             	sub    esp,0x8
c0020cf0:	68 40 a4 02 c0       	push   0xc002a440
c0020cf5:	50                   	push   eax
c0020cf6:	e8 2d 26 ff ff       	call   c0013328 <Bus::Bus(char const*)>
c0020cfb:	83 c4 10             	add    esp,0x10
c0020cfe:	ba ac a4 02 c0       	mov    edx,0xc002a4ac
c0020d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d07:	89 10                	mov    DWORD PTR [eax],edx
c0020d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020d13:	0f b6 d0             	movzx  edx,al
c0020d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d1a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020d2b:	0f b6 d0             	movzx  edx,al
c0020d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d32:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0020d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020d41:	8d 50 01             	lea    edx,[eax+0x1]
c0020d44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d48:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020d4e:	0f b6 d0             	movzx  edx,al
c0020d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d55:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020d59:	83 c9 c0             	or     ecx,0xffffffc0
c0020d5c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020d60:	90                   	nop
c0020d61:	83 c4 0c             	add    esp,0xc
c0020d64:	c3                   	ret    
c0020d65:	90                   	nop

c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020d66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020d6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d6f:	89 ca                	mov    edx,ecx
c0020d71:	c1 e0 10             	shl    eax,0x10
c0020d74:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020d7a:	09 d0                	or     eax,edx
c0020d7c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020d81:	c1 e2 08             	shl    edx,0x8
c0020d84:	09 d0                	or     eax,edx
c0020d86:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020d8b:	c1 e2 0b             	shl    edx,0xb
c0020d8e:	09 d0                	or     eax,edx
c0020d90:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020d95:	0d 00 00 00 80       	or     eax,0x80000000
c0020d9a:	ef                   	out    dx,eax
c0020d9b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020da0:	ed                   	in     eax,dx
c0020da1:	83 e1 02             	and    ecx,0x2
c0020da4:	0f b6 c9             	movzx  ecx,cl
c0020da7:	c1 e1 03             	shl    ecx,0x3
c0020daa:	d3 e8                	shr    eax,cl
c0020dac:	c3                   	ret    
c0020dad:	90                   	nop

c0020dae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020dae:	6a 00                	push   0x0
c0020db0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020db5:	50                   	push   eax
c0020db6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020dbb:	50                   	push   eax
c0020dbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020dc1:	50                   	push   eax
c0020dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020dc6:	e8 9b ff ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020dcb:	83 c4 14             	add    esp,0x14
c0020dce:	c3                   	ret    
c0020dcf:	90                   	nop

c0020dd0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0020dd0:	6a 0e                	push   0xe
c0020dd2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020dd7:	50                   	push   eax
c0020dd8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ddd:	50                   	push   eax
c0020dde:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020de3:	50                   	push   eax
c0020de4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020de8:	e8 79 ff ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ded:	83 c4 14             	add    esp,0x14
c0020df0:	0f b6 c0             	movzx  eax,al
c0020df3:	c3                   	ret    

c0020df4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0020df4:	55                   	push   ebp
c0020df5:	57                   	push   edi
c0020df6:	56                   	push   esi
c0020df7:	53                   	push   ebx
c0020df8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0020dfd:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0020e02:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0020e07:	6a 0a                	push   0xa
c0020e09:	56                   	push   esi
c0020e0a:	55                   	push   ebp
c0020e0b:	57                   	push   edi
c0020e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020e10:	e8 51 ff ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e15:	6a 0a                	push   0xa
c0020e17:	89 c3                	mov    ebx,eax
c0020e19:	56                   	push   esi
c0020e1a:	0f b6 db             	movzx  ebx,bl
c0020e1d:	55                   	push   ebp
c0020e1e:	57                   	push   edi
c0020e1f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020e23:	e8 3e ff ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e28:	83 c4 28             	add    esp,0x28
c0020e2b:	25 00 ff 00 00       	and    eax,0xff00
c0020e30:	09 d8                	or     eax,ebx
c0020e32:	5b                   	pop    ebx
c0020e33:	5e                   	pop    esi
c0020e34:	5f                   	pop    edi
c0020e35:	5d                   	pop    ebp
c0020e36:	c3                   	ret    
c0020e37:	90                   	nop

c0020e38 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0020e38:	6a 08                	push   0x8
c0020e3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e3f:	50                   	push   eax
c0020e40:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e45:	50                   	push   eax
c0020e46:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e4b:	50                   	push   eax
c0020e4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020e50:	e8 11 ff ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e55:	83 c4 14             	add    esp,0x14
c0020e58:	0f b6 c4             	movzx  eax,ah
c0020e5b:	c3                   	ret    

c0020e5c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020e5c:	6a 08                	push   0x8
c0020e5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e63:	50                   	push   eax
c0020e64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e69:	50                   	push   eax
c0020e6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e6f:	50                   	push   eax
c0020e70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020e74:	e8 ed fe ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e79:	83 c4 14             	add    esp,0x14
c0020e7c:	c3                   	ret    
c0020e7d:	90                   	nop

c0020e7e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020e7e:	6a 3c                	push   0x3c
c0020e80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e85:	50                   	push   eax
c0020e86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e8b:	50                   	push   eax
c0020e8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020e91:	50                   	push   eax
c0020e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020e96:	e8 cb fe ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020e9b:	83 c4 14             	add    esp,0x14
c0020e9e:	c3                   	ret    
c0020e9f:	90                   	nop

c0020ea0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020ea0:	6a 18                	push   0x18
c0020ea2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ea7:	50                   	push   eax
c0020ea8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020ead:	50                   	push   eax
c0020eae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020eb3:	50                   	push   eax
c0020eb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020eb8:	e8 a9 fe ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020ebd:	83 c4 14             	add    esp,0x14
c0020ec0:	0f b6 c4             	movzx  eax,ah
c0020ec3:	c3                   	ret    

c0020ec4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0020ec4:	55                   	push   ebp
c0020ec5:	57                   	push   edi
c0020ec6:	56                   	push   esi
c0020ec7:	53                   	push   ebx
c0020ec8:	50                   	push   eax
c0020ec9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020ecd:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0020ed2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0020ed7:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0020edc:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0020ee3:	8d 43 12             	lea    eax,[ebx+0x12]
c0020ee6:	83 c3 10             	add    ebx,0x10
c0020ee9:	0f b6 c0             	movzx  eax,al
c0020eec:	0f b6 db             	movzx  ebx,bl
c0020eef:	50                   	push   eax
c0020ef0:	51                   	push   ecx
c0020ef1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020ef5:	57                   	push   edi
c0020ef6:	55                   	push   ebp
c0020ef7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020efb:	e8 66 fe ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f00:	53                   	push   ebx
c0020f01:	89 c6                	mov    esi,eax
c0020f03:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f07:	c1 e6 10             	shl    esi,0x10
c0020f0a:	51                   	push   ecx
c0020f0b:	57                   	push   edi
c0020f0c:	55                   	push   ebp
c0020f0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f11:	e8 50 fe ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020f16:	83 c4 2c             	add    esp,0x2c
c0020f19:	0f b7 c0             	movzx  eax,ax
c0020f1c:	5b                   	pop    ebx
c0020f1d:	09 f0                	or     eax,esi
c0020f1f:	5e                   	pop    esi
c0020f20:	5f                   	pop    edi
c0020f21:	5d                   	pop    ebp
c0020f22:	c3                   	ret    
c0020f23:	90                   	nop

c0020f24 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0020f24:	53                   	push   ebx
c0020f25:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020f2a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020f33:	c1 e1 10             	shl    ecx,0x10
c0020f36:	25 fc 00 00 00       	and    eax,0xfc
c0020f3b:	09 c1                	or     ecx,eax
c0020f3d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020f42:	c1 e0 08             	shl    eax,0x8
c0020f45:	09 c1                	or     ecx,eax
c0020f47:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020f4c:	c1 e0 0b             	shl    eax,0xb
c0020f4f:	09 c1                	or     ecx,eax
c0020f51:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0020f57:	89 c8                	mov    eax,ecx
c0020f59:	ef                   	out    dx,eax
c0020f5a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020f5f:	ed                   	in     eax,dx
c0020f60:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0020f65:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020f6a:	74 0a                	je     c0020f76 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020f6c:	0f b7 d8             	movzx  ebx,ax
c0020f6f:	89 d0                	mov    eax,edx
c0020f71:	c1 e0 10             	shl    eax,0x10
c0020f74:	eb 05                	jmp    c0020f7b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0020f76:	66 31 c0             	xor    ax,ax
c0020f79:	89 d3                	mov    ebx,edx
c0020f7b:	09 c3                	or     ebx,eax
c0020f7d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020f82:	89 c8                	mov    eax,ecx
c0020f84:	ef                   	out    dx,eax
c0020f85:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020f8a:	89 d8                	mov    eax,ebx
c0020f8c:	ef                   	out    dx,eax
c0020f8d:	5b                   	pop    ebx
c0020f8e:	c3                   	ret    
c0020f8f:	90                   	nop

c0020f90 <PCI::checkBus(unsigned char)>:
c0020f90:	56                   	push   esi
c0020f91:	53                   	push   ebx
c0020f92:	31 db                	xor    ebx,ebx
c0020f94:	51                   	push   ecx
c0020f95:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020f9a:	52                   	push   edx
c0020f9b:	53                   	push   ebx
c0020f9c:	43                   	inc    ebx
c0020f9d:	56                   	push   esi
c0020f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fa2:	e8 2b 03 00 00       	call   c00212d2 <PCI::checkDevice(unsigned char, unsigned char)>
c0020fa7:	83 c4 10             	add    esp,0x10
c0020faa:	83 fb 20             	cmp    ebx,0x20
c0020fad:	75 eb                	jne    c0020f9a <PCI::checkBus(unsigned char)+0xa>
c0020faf:	58                   	pop    eax
c0020fb0:	5b                   	pop    ebx
c0020fb1:	5e                   	pop    esi
c0020fb2:	c3                   	ret    
c0020fb3:	90                   	nop

c0020fb4 <PCI::foundDevice(PCIDeviceInfo)>:
c0020fb4:	55                   	push   ebp
c0020fb5:	57                   	push   edi
c0020fb6:	56                   	push   esi
c0020fb7:	53                   	push   ebx
c0020fb8:	83 ec 1c             	sub    esp,0x1c
c0020fbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020fbf:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0020fc5:	0f 84 52 01 00 00    	je     c002111d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0020fcb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0020fcf:	66 81 f9 06 04       	cmp    cx,0x406
c0020fd4:	75 2c                	jne    c0021002 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0020fd6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0020fdb:	50                   	push   eax
c0020fdc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0020fe1:	50                   	push   eax
c0020fe2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0020fe7:	50                   	push   eax
c0020fe8:	56                   	push   esi
c0020fe9:	e8 b2 fe ff ff       	call   c0020ea0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0020fee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020ff2:	0f b6 c0             	movzx  eax,al
c0020ff5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0020ff9:	83 c4 2c             	add    esp,0x2c
c0020ffc:	5b                   	pop    ebx
c0020ffd:	5e                   	pop    esi
c0020ffe:	5f                   	pop    edi
c0020fff:	5d                   	pop    ebp
c0021000:	eb 8e                	jmp    c0020f90 <PCI::checkBus(unsigned char)>
c0021002:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021006:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002100c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021010:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021014:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021018:	88 d3                	mov    bl,dl
c002101a:	85 c0                	test   eax,eax
c002101c:	74 33                	je     c0021051 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002101e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021021:	85 d2                	test   edx,edx
c0021023:	74 28                	je     c002104d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021025:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002102b:	31 ef                	xor    edi,ebp
c002102d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021033:	75 18                	jne    c002104d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021035:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021039:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002103f:	75 0c                	jne    c002104d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021041:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021047:	0f 84 d0 00 00 00    	je     c002111d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002104d:	8b 00                	mov    eax,DWORD PTR [eax]
c002104f:	eb c9                	jmp    c002101a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021051:	66 81 f9 01 06       	cmp    cx,0x601
c0021056:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002105a:	75 19                	jne    c0021075 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002105c:	83 ec 0c             	sub    esp,0xc
c002105f:	68 64 01 00 00       	push   0x164
c0021064:	e8 57 e4 fe ff       	call   c000f4c0 <malloc>
c0021069:	89 c5                	mov    ebp,eax
c002106b:	89 04 24             	mov    DWORD PTR [esp],eax
c002106e:	e8 95 0f 00 00       	call   c0022008 <SATABus::SATABus()>
c0021073:	eb 1e                	jmp    c0021093 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021075:	66 81 f9 01 01       	cmp    cx,0x101
c002107a:	75 60                	jne    c00210dc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002107c:	83 ec 0c             	sub    esp,0xc
c002107f:	68 70 02 00 00       	push   0x270
c0021084:	e8 37 e4 fe ff       	call   c000f4c0 <malloc>
c0021089:	89 c5                	mov    ebp,eax
c002108b:	89 04 24             	mov    DWORD PTR [esp],eax
c002108e:	e8 03 03 00 00       	call   c0021396 <IDE::IDE()>
c0021093:	58                   	pop    eax
c0021094:	5a                   	pop    edx
c0021095:	55                   	push   ebp
c0021096:	56                   	push   esi
c0021097:	e8 e0 29 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c002109c:	83 ec 1c             	sub    esp,0x1c
c002109f:	b9 09 00 00 00       	mov    ecx,0x9
c00210a4:	fc                   	cld    
c00210a5:	89 e7                	mov    edi,esp
c00210a7:	89 de                	mov    esi,ebx
c00210a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00210ab:	55                   	push   ebp
c00210ac:	e8 d5 28 ff ff       	call   c0013986 <Device::preOpenPCI(PCIDeviceInfo)>
c00210b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00210b4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00210b8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00210c0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00210c8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00210d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210d3:	83 c4 4c             	add    esp,0x4c
c00210d6:	5b                   	pop    ebx
c00210d7:	5e                   	pop    esi
c00210d8:	5f                   	pop    edi
c00210d9:	5d                   	pop    ebp
c00210da:	ff e0                	jmp    eax
c00210dc:	83 ec 0c             	sub    esp,0xc
c00210df:	68 58 01 00 00       	push   0x158
c00210e4:	e8 d7 e3 fe ff       	call   c000f4c0 <malloc>
c00210e9:	89 c5                	mov    ebp,eax
c00210eb:	58                   	pop    eax
c00210ec:	5a                   	pop    edx
c00210ed:	68 48 a4 02 c0       	push   0xc002a448
c00210f2:	55                   	push   ebp
c00210f3:	e8 7a 2c ff ff       	call   c0013d72 <DriverlessDevice::DriverlessDevice(char const*)>
c00210f8:	59                   	pop    ecx
c00210f9:	5f                   	pop    edi
c00210fa:	55                   	push   ebp
c00210fb:	56                   	push   esi
c00210fc:	e8 7b 29 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0021101:	b9 09 00 00 00       	mov    ecx,0x9
c0021106:	fc                   	cld    
c0021107:	89 df                	mov    edi,ebx
c0021109:	89 de                	mov    esi,ebx
c002110b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002110d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021111:	83 c4 2c             	add    esp,0x2c
c0021114:	5b                   	pop    ebx
c0021115:	5e                   	pop    esi
c0021116:	5f                   	pop    edi
c0021117:	5d                   	pop    ebp
c0021118:	e9 69 28 ff ff       	jmp    c0013986 <Device::preOpenPCI(PCIDeviceInfo)>
c002111d:	83 c4 1c             	add    esp,0x1c
c0021120:	5b                   	pop    ebx
c0021121:	5e                   	pop    esi
c0021122:	5f                   	pop    edi
c0021123:	5d                   	pop    ebp
c0021124:	c3                   	ret    
c0021125:	90                   	nop

c0021126 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021126:	55                   	push   ebp
c0021127:	57                   	push   edi
c0021128:	56                   	push   esi
c0021129:	53                   	push   ebx
c002112a:	83 ec 5c             	sub    esp,0x5c
c002112d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021131:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021135:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021139:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002113e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021142:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021146:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002114b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002114f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021154:	6a 0c                	push   0xc
c0021156:	55                   	push   ebp
c0021157:	53                   	push   ebx
c0021158:	57                   	push   edi
c0021159:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021160:	e8 01 fc ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021165:	55                   	push   ebp
c0021166:	53                   	push   ebx
c0021167:	57                   	push   edi
c0021168:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002116f:	e8 80 fc ff ff       	call   c0020df4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021174:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021179:	83 c4 24             	add    esp,0x24
c002117c:	55                   	push   ebp
c002117d:	53                   	push   ebx
c002117e:	57                   	push   edi
c002117f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021183:	e8 f6 fc ff ff       	call   c0020e7e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021188:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002118c:	6a 3c                	push   0x3c
c002118e:	55                   	push   ebp
c002118f:	53                   	push   ebx
c0021190:	57                   	push   edi
c0021191:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021198:	e8 c9 fb ff ff       	call   c0020d66 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002119d:	0f b6 c4             	movzx  eax,ah
c00211a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00211a4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00211a8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00211ac:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00211b1:	83 c4 24             	add    esp,0x24
c00211b4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00211ba:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00211c1:	74 6c                	je     c002122f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00211c3:	31 f6                	xor    esi,esi
c00211c5:	8b 15 88 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd88
c00211cb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00211d1:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00211d7:	7e 56                	jle    c002122f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00211d9:	8d 14 f2             	lea    edx,[edx+esi*8]
c00211dc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00211e3:	39 cb                	cmp    ebx,ecx
c00211e5:	75 45                	jne    c002122c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00211e7:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00211ee:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00211f2:	75 38                	jne    c002122c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00211f4:	83 ec 0c             	sub    esp,0xc
c00211f7:	68 62 a4 02 c0       	push   0xc002a462
c00211fc:	e8 8c 14 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021201:	8b 15 88 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd88
c0021207:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002120d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021215:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021219:	52                   	push   edx
c002121a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002121e:	53                   	push   ebx
c002121f:	68 87 a4 02 c0       	push   0xc002a487
c0021224:	e8 64 14 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021229:	83 c4 20             	add    esp,0x20
c002122c:	46                   	inc    esi
c002122d:	eb 96                	jmp    c00211c5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002122f:	31 d2                	xor    edx,edx
c0021231:	83 ec 0c             	sub    esp,0xc
c0021234:	55                   	push   ebp
c0021235:	53                   	push   ebx
c0021236:	57                   	push   edi
c0021237:	52                   	push   edx
c0021238:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002123c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021243:	e8 7c fc ff ff       	call   c0020ec4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021248:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002124c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021250:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021254:	42                   	inc    edx
c0021255:	83 c4 20             	add    esp,0x20
c0021258:	83 fa 06             	cmp    edx,0x6
c002125b:	75 d4                	jne    c0021231 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002125d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021261:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021265:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021269:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002126d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021271:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021275:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002127a:	86 e0                	xchg   al,ah
c002127c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021281:	55                   	push   ebp
c0021282:	53                   	push   ebx
c0021283:	57                   	push   edi
c0021284:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021288:	e8 ab fb ff ff       	call   c0020e38 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002128d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021291:	55                   	push   ebp
c0021292:	53                   	push   ebx
c0021293:	57                   	push   edi
c0021294:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002129b:	e8 0e fb ff ff       	call   c0020dae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00212a0:	83 ec 0c             	sub    esp,0xc
c00212a3:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00212a8:	b9 09 00 00 00       	mov    ecx,0x9
c00212ad:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00212b1:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00212b5:	fc                   	cld    
c00212b6:	89 e7                	mov    edi,esp
c00212b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00212ba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00212c1:	e8 ee fc ff ff       	call   c0020fb4 <PCI::foundDevice(PCIDeviceInfo)>
c00212c6:	81 c4 8c 00 00 00    	add    esp,0x8c
c00212cc:	5b                   	pop    ebx
c00212cd:	5e                   	pop    esi
c00212ce:	5f                   	pop    edi
c00212cf:	5d                   	pop    ebp
c00212d0:	c3                   	ret    
c00212d1:	90                   	nop

c00212d2 <PCI::checkDevice(unsigned char, unsigned char)>:
c00212d2:	55                   	push   ebp
c00212d3:	57                   	push   edi
c00212d4:	56                   	push   esi
c00212d5:	53                   	push   ebx
c00212d6:	83 ec 0c             	sub    esp,0xc
c00212d9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00212dd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00212e2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00212e7:	6a 00                	push   0x0
c00212e9:	56                   	push   esi
c00212ea:	57                   	push   edi
c00212eb:	55                   	push   ebp
c00212ec:	e8 bd fa ff ff       	call   c0020dae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00212f1:	6a 00                	push   0x0
c00212f3:	56                   	push   esi
c00212f4:	57                   	push   edi
c00212f5:	55                   	push   ebp
c00212f6:	e8 2b fe ff ff       	call   c0021126 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00212fb:	83 c4 20             	add    esp,0x20
c00212fe:	6a 00                	push   0x0
c0021300:	56                   	push   esi
c0021301:	57                   	push   edi
c0021302:	55                   	push   ebp
c0021303:	e8 c8 fa ff ff       	call   c0020dd0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	84 c0                	test   al,al
c002130d:	79 27                	jns    c0021336 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002130f:	bb 01 00 00 00       	mov    ebx,0x1
c0021314:	53                   	push   ebx
c0021315:	56                   	push   esi
c0021316:	57                   	push   edi
c0021317:	55                   	push   ebp
c0021318:	e8 91 fa ff ff       	call   c0020dae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002131d:	83 c4 10             	add    esp,0x10
c0021320:	66 40                	inc    ax
c0021322:	74 0c                	je     c0021330 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021324:	53                   	push   ebx
c0021325:	56                   	push   esi
c0021326:	57                   	push   edi
c0021327:	55                   	push   ebp
c0021328:	e8 f9 fd ff ff       	call   c0021126 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002132d:	83 c4 10             	add    esp,0x10
c0021330:	43                   	inc    ebx
c0021331:	83 fb 08             	cmp    ebx,0x8
c0021334:	75 de                	jne    c0021314 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021336:	83 c4 0c             	add    esp,0xc
c0021339:	5b                   	pop    ebx
c002133a:	5e                   	pop    esi
c002133b:	5f                   	pop    edi
c002133c:	5d                   	pop    ebp
c002133d:	c3                   	ret    

c002133e <PCI::detect()>:
c002133e:	56                   	push   esi
c002133f:	53                   	push   ebx
c0021340:	53                   	push   ebx
c0021341:	31 db                	xor    ebx,ebx
c0021343:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021347:	6a 00                	push   0x0
c0021349:	6a 00                	push   0x0
c002134b:	6a 00                	push   0x0
c002134d:	56                   	push   esi
c002134e:	e8 7d fa ff ff       	call   c0020dd0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021353:	83 c4 10             	add    esp,0x10
c0021356:	a8 80                	test   al,0x80
c0021358:	75 21                	jne    c002137b <PCI::detect()+0x3d>
c002135a:	51                   	push   ecx
c002135b:	51                   	push   ecx
c002135c:	6a 00                	push   0x0
c002135e:	56                   	push   esi
c002135f:	e8 2c fc ff ff       	call   c0020f90 <PCI::checkBus(unsigned char)>
c0021364:	83 c4 10             	add    esp,0x10
c0021367:	eb 24                	jmp    c002138d <PCI::detect()+0x4f>
c0021369:	52                   	push   edx
c002136a:	52                   	push   edx
c002136b:	53                   	push   ebx
c002136c:	43                   	inc    ebx
c002136d:	56                   	push   esi
c002136e:	e8 1d fc ff ff       	call   c0020f90 <PCI::checkBus(unsigned char)>
c0021373:	83 c4 10             	add    esp,0x10
c0021376:	83 fb 08             	cmp    ebx,0x8
c0021379:	74 12                	je     c002138d <PCI::detect()+0x4f>
c002137b:	53                   	push   ebx
c002137c:	6a 00                	push   0x0
c002137e:	6a 00                	push   0x0
c0021380:	56                   	push   esi
c0021381:	e8 28 fa ff ff       	call   c0020dae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021386:	83 c4 10             	add    esp,0x10
c0021389:	66 40                	inc    ax
c002138b:	74 dc                	je     c0021369 <PCI::detect()+0x2b>
c002138d:	58                   	pop    eax
c002138e:	5b                   	pop    ebx
c002138f:	5e                   	pop    esi
c0021390:	c3                   	ret    
c0021391:	90                   	nop

c0021392 <IDE::close(int, int, void*)>:
c0021392:	83 c8 ff             	or     eax,0xffffffff
c0021395:	c3                   	ret    

c0021396 <IDE::IDE()>:
c0021396:	83 ec 0c             	sub    esp,0xc
c0021399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002139d:	83 ec 08             	sub    esp,0x8
c00213a0:	68 d0 a4 02 c0       	push   0xc002a4d0
c00213a5:	50                   	push   eax
c00213a6:	e8 5d 2a ff ff       	call   c0013e08 <HardDiskController::HardDiskController(char const*)>
c00213ab:	83 c4 10             	add    esp,0x10
c00213ae:	ba 10 a7 02 c0       	mov    edx,0xc002a710
c00213b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b7:	89 10                	mov    DWORD PTR [eax],edx
c00213b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213bd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00213c4:	90                   	nop
c00213c5:	83 c4 0c             	add    esp,0xc
c00213c8:	c3                   	ret    
c00213c9:	90                   	nop

c00213ca <IDE::prepareInterrupt(unsigned char)>:
c00213ca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00213cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00213d3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00213db:	c3                   	ret    

c00213dc <selectDrive(unsigned char, unsigned char)>:
c00213dc:	c3                   	ret    
c00213dd:	90                   	nop

c00213de <IDE::getBase(unsigned char)>:
c00213de:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00213e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213e7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00213ef:	c3                   	ret    

c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00213f0:	55                   	push   ebp
c00213f1:	57                   	push   edi
c00213f2:	56                   	push   esi
c00213f3:	53                   	push   ebx
c00213f4:	83 ec 1c             	sub    esp,0x1c
c00213f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00213fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00213ff:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021402:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021406:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002140a:	80 f9 03             	cmp    cl,0x3
c002140d:	77 51                	ja     c0021460 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002140f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021413:	0f b6 f2             	movzx  esi,dl
c0021416:	0f b6 db             	movzx  ebx,bl
c0021419:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002141c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021420:	83 ca 80             	or     edx,0xffffff80
c0021423:	0f b6 d2             	movzx  edx,dl
c0021426:	52                   	push   edx
c0021427:	6a 0c                	push   0xc
c0021429:	56                   	push   esi
c002142a:	57                   	push   edi
c002142b:	e8 c0 ff ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021430:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021439:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002143d:	ee                   	out    dx,al
c002143e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021443:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021447:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002144b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002144f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021457:	83 c4 2c             	add    esp,0x2c
c002145a:	5b                   	pop    ebx
c002145b:	5e                   	pop    esi
c002145c:	5f                   	pop    edi
c002145d:	5d                   	pop    ebp
c002145e:	eb 90                	jmp    c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021460:	80 fb 07             	cmp    bl,0x7
c0021463:	77 12                	ja     c0021477 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0021465:	0f b6 d2             	movzx  edx,dl
c0021468:	0f b6 db             	movzx  ebx,bl
c002146b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0021473:	89 da                	mov    edx,ebx
c0021475:	eb 2f                	jmp    c00214a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0021477:	80 fb 0d             	cmp    bl,0xd
c002147a:	77 13                	ja     c002148f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002147c:	0f b6 d2             	movzx  edx,dl
c002147f:	0f b6 db             	movzx  ebx,bl
c0021482:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0021489:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002148d:	eb 17                	jmp    c00214a6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002148f:	80 fb 15             	cmp    bl,0x15
c0021492:	77 13                	ja     c00214a7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0021494:	0f b6 d2             	movzx  edx,dl
c0021497:	0f b6 db             	movzx  ebx,bl
c002149a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00214a2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00214a6:	ee                   	out    dx,al
c00214a7:	83 c4 1c             	add    esp,0x1c
c00214aa:	5b                   	pop    ebx
c00214ab:	5e                   	pop    esi
c00214ac:	5f                   	pop    edi
c00214ad:	5d                   	pop    ebp
c00214ae:	c3                   	ret    
c00214af:	90                   	nop

c00214b0 <IDE::read(unsigned char, unsigned char)>:
c00214b0:	55                   	push   ebp
c00214b1:	57                   	push   edi
c00214b2:	56                   	push   esi
c00214b3:	53                   	push   ebx
c00214b4:	83 ec 1c             	sub    esp,0x1c
c00214b7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00214bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00214bf:	8d 43 f8             	lea    eax,[ebx-0x8]
c00214c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00214c6:	3c 03                	cmp    al,0x3
c00214c8:	77 43                	ja     c002150d <IDE::read(unsigned char, unsigned char)+0x5d>
c00214ca:	0f b6 f2             	movzx  esi,dl
c00214cd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00214d0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00214d4:	83 c8 80             	or     eax,0xffffff80
c00214d7:	0f b6 c0             	movzx  eax,al
c00214da:	50                   	push   eax
c00214db:	6a 0c                	push   0xc
c00214dd:	56                   	push   esi
c00214de:	57                   	push   edi
c00214df:	e8 0c ff ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00214e4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00214e9:	0f b6 c3             	movzx  eax,bl
c00214ec:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00214f0:	ec                   	in     al,dx
c00214f1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00214f5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00214fa:	52                   	push   edx
c00214fb:	6a 0c                	push   0xc
c00214fd:	56                   	push   esi
c00214fe:	57                   	push   edi
c00214ff:	e8 ec fe ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021504:	83 c4 20             	add    esp,0x20
c0021507:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002150b:	eb 49                	jmp    c0021556 <IDE::read(unsigned char, unsigned char)+0xa6>
c002150d:	80 fb 07             	cmp    bl,0x7
c0021510:	77 12                	ja     c0021524 <IDE::read(unsigned char, unsigned char)+0x74>
c0021512:	0f b6 d2             	movzx  edx,dl
c0021515:	0f b6 c3             	movzx  eax,bl
c0021518:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0021520:	89 c2                	mov    edx,eax
c0021522:	eb 31                	jmp    c0021555 <IDE::read(unsigned char, unsigned char)+0xa5>
c0021524:	80 fb 0d             	cmp    bl,0xd
c0021527:	77 13                	ja     c002153c <IDE::read(unsigned char, unsigned char)+0x8c>
c0021529:	0f b6 d2             	movzx  edx,dl
c002152c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0021533:	0f b6 d3             	movzx  edx,bl
c0021536:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002153a:	eb 19                	jmp    c0021555 <IDE::read(unsigned char, unsigned char)+0xa5>
c002153c:	31 c0                	xor    eax,eax
c002153e:	80 fb 15             	cmp    bl,0x15
c0021541:	77 13                	ja     c0021556 <IDE::read(unsigned char, unsigned char)+0xa6>
c0021543:	0f b6 d2             	movzx  edx,dl
c0021546:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002154e:	0f b6 d3             	movzx  edx,bl
c0021551:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0021555:	ec                   	in     al,dx
c0021556:	83 c4 1c             	add    esp,0x1c
c0021559:	5b                   	pop    ebx
c002155a:	5e                   	pop    esi
c002155b:	5f                   	pop    edi
c002155c:	5d                   	pop    ebp
c002155d:	c3                   	ret    

c002155e <IDE::waitInterrupt(unsigned char)>:
c002155e:	55                   	push   ebp
c002155f:	57                   	push   edi
c0021560:	56                   	push   esi
c0021561:	53                   	push   ebx
c0021562:	31 db                	xor    ebx,ebx
c0021564:	83 ec 0c             	sub    esp,0xc
c0021567:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002156b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0021570:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0021578:	89 e8                	mov    eax,ebp
c002157a:	84 c0                	test   al,al
c002157c:	75 34                	jne    c00215b2 <IDE::waitInterrupt(unsigned char)+0x54>
c002157e:	52                   	push   edx
c002157f:	6a 0c                	push   0xc
c0021581:	56                   	push   esi
c0021582:	57                   	push   edi
c0021583:	e8 28 ff ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021588:	83 c4 10             	add    esp,0x10
c002158b:	a8 01                	test   al,0x1
c002158d:	75 2b                	jne    c00215ba <IDE::waitInterrupt(unsigned char)+0x5c>
c002158f:	f6 c3 04             	test   bl,0x4
c0021592:	75 16                	jne    c00215aa <IDE::waitInterrupt(unsigned char)+0x4c>
c0021594:	83 fb 32             	cmp    ebx,0x32
c0021597:	7e 11                	jle    c00215aa <IDE::waitInterrupt(unsigned char)+0x4c>
c0021599:	50                   	push   eax
c002159a:	50                   	push   eax
c002159b:	6a 00                	push   0x0
c002159d:	68 80 96 98 00       	push   0x989680
c00215a2:	e8 45 b1 ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	83 fb 3c             	cmp    ebx,0x3c
c00215ad:	74 0b                	je     c00215ba <IDE::waitInterrupt(unsigned char)+0x5c>
c00215af:	43                   	inc    ebx
c00215b0:	eb be                	jmp    c0021570 <IDE::waitInterrupt(unsigned char)+0x12>
c00215b2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00215ba:	83 c4 0c             	add    esp,0xc
c00215bd:	89 e8                	mov    eax,ebp
c00215bf:	5b                   	pop    ebx
c00215c0:	5e                   	pop    esi
c00215c1:	5f                   	pop    edi
c00215c2:	5d                   	pop    ebp
c00215c3:	c3                   	ret    

c00215c4 <ideChannel0IRQHandler(regs*, void*)>:
c00215c4:	83 ec 10             	sub    esp,0x10
c00215c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00215cb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00215d2:	6a 07                	push   0x7
c00215d4:	6a 00                	push   0x0
c00215d6:	50                   	push   eax
c00215d7:	e8 d4 fe ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c00215dc:	83 c4 1c             	add    esp,0x1c
c00215df:	c3                   	ret    

c00215e0 <ideChannel1IRQHandler(regs*, void*)>:
c00215e0:	83 ec 10             	sub    esp,0x10
c00215e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00215e7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00215ee:	6a 07                	push   0x7
c00215f0:	6a 01                	push   0x1
c00215f2:	50                   	push   eax
c00215f3:	e8 b8 fe ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c00215f8:	83 c4 1c             	add    esp,0x1c
c00215fb:	c3                   	ret    

c00215fc <IDE::enableIRQs(unsigned char, bool)>:
c00215fc:	57                   	push   edi
c00215fd:	56                   	push   esi
c00215fe:	be 04 00 00 00       	mov    esi,0x4
c0021603:	53                   	push   ebx
c0021604:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0021609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002160d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0021612:	0f 94 c0             	sete   al
c0021615:	d1 e0                	shl    eax,1
c0021617:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002161e:	0f b6 c0             	movzx  eax,al
c0021621:	50                   	push   eax
c0021622:	6a 0c                	push   0xc
c0021624:	57                   	push   edi
c0021625:	53                   	push   ebx
c0021626:	e8 c5 fd ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002162b:	83 c4 10             	add    esp,0x10
c002162e:	50                   	push   eax
c002162f:	6a 0c                	push   0xc
c0021631:	57                   	push   edi
c0021632:	53                   	push   ebx
c0021633:	e8 78 fe ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021638:	83 c4 10             	add    esp,0x10
c002163b:	4e                   	dec    esi
c002163c:	75 f0                	jne    c002162e <IDE::enableIRQs(unsigned char, bool)+0x32>
c002163e:	5b                   	pop    ebx
c002163f:	5e                   	pop    esi
c0021640:	5f                   	pop    edi
c0021641:	c3                   	ret    

c0021642 <IDE::open(int, int, void*)>:
c0021642:	55                   	push   ebp
c0021643:	57                   	push   edi
c0021644:	56                   	push   esi
c0021645:	53                   	push   ebx
c0021646:	83 ec 1c             	sub    esp,0x1c
c0021649:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002164d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0021656:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002165f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0021666:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002166d:	0f 85 b0 02 00 00    	jne    c0021923 <IDE::open(int, int, void*)+0x2e1>
c0021673:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0021679:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002167d:	83 e0 7f             	and    eax,0x7f
c0021680:	3c 05                	cmp    al,0x5
c0021682:	74 04                	je     c0021688 <IDE::open(int, int, void*)+0x46>
c0021684:	3c 0f                	cmp    al,0xf
c0021686:	75 32                	jne    c00216ba <IDE::open(int, int, void*)+0x78>
c0021688:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002168e:	83 e0 fc             	and    eax,0xfffffffc
c0021691:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0021698:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002169e:	83 e0 fc             	and    eax,0xfffffffc
c00216a1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00216a8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00216ae:	83 e0 fc             	and    eax,0xfffffffc
c00216b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00216b8:	eb 14                	jmp    c00216ce <IDE::open(int, int, void*)+0x8c>
c00216ba:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00216c4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00216ce:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00216d5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00216dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216e0:	89 c6                	mov    esi,eax
c00216e2:	bf f8 0c 00 00       	mov    edi,0xcf8
c00216e7:	c1 e6 10             	shl    esi,0x10
c00216ea:	89 e8                	mov    eax,ebp
c00216ec:	89 fa                	mov    edx,edi
c00216ee:	c1 e0 0b             	shl    eax,0xb
c00216f1:	09 f0                	or     eax,esi
c00216f3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00216fa:	c1 e6 08             	shl    esi,0x8
c00216fd:	09 c6                	or     esi,eax
c00216ff:	89 f0                	mov    eax,esi
c0021701:	0d 08 00 00 80       	or     eax,0x80000008
c0021706:	ef                   	out    dx,eax
c0021707:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002170c:	89 ca                	mov    edx,ecx
c002170e:	ed                   	in     eax,dx
c002170f:	c1 e8 10             	shr    eax,0x10
c0021712:	3d ff ff 00 00       	cmp    eax,0xffff
c0021717:	0f 84 f5 00 00 00    	je     c0021812 <IDE::open(int, int, void*)+0x1d0>
c002171d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0021723:	89 fa                	mov    edx,edi
c0021725:	89 f0                	mov    eax,esi
c0021727:	ef                   	out    dx,eax
c0021728:	b0 fe                	mov    al,0xfe
c002172a:	89 ca                	mov    edx,ecx
c002172c:	ee                   	out    dx,al
c002172d:	89 f0                	mov    eax,esi
c002172f:	89 fa                	mov    edx,edi
c0021731:	ef                   	out    dx,eax
c0021732:	89 ca                	mov    edx,ecx
c0021734:	ed                   	in     eax,dx
c0021735:	3c fe                	cmp    al,0xfe
c0021737:	0f 85 a9 00 00 00    	jne    c00217e6 <IDE::open(int, int, void*)+0x1a4>
c002173d:	8b 15 88 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bd88
c0021743:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002174a:	74 33                	je     c002177f <IDE::open(int, int, void*)+0x13d>
c002174c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0021752:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0021756:	40                   	inc    eax
c0021757:	83 ec 0c             	sub    esp,0xc
c002175a:	0f b6 c0             	movzx  eax,al
c002175d:	50                   	push   eax
c002175e:	55                   	push   ebp
c002175f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021763:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0021769:	51                   	push   ecx
c002176a:	e8 b1 5e ff ff       	call   c0017620 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002176f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0021774:	83 c4 1c             	add    esp,0x1c
c0021777:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002177d:	eb 0a                	jmp    c0021789 <IDE::open(int, int, void*)+0x147>
c002177f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0021789:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0021790:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0021797:	c1 e1 10             	shl    ecx,0x10
c002179a:	c1 e0 08             	shl    eax,0x8
c002179d:	bf f8 0c 00 00       	mov    edi,0xcf8
c00217a2:	09 c1                	or     ecx,eax
c00217a4:	89 fa                	mov    edx,edi
c00217a6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00217ad:	c1 e0 0b             	shl    eax,0xb
c00217b0:	09 c1                	or     ecx,eax
c00217b2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00217b8:	89 c8                	mov    eax,ecx
c00217ba:	ef                   	out    dx,eax
c00217bb:	be fc 0c 00 00       	mov    esi,0xcfc
c00217c0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00217c6:	89 f2                	mov    edx,esi
c00217c8:	ee                   	out    dx,al
c00217c9:	89 c8                	mov    eax,ecx
c00217cb:	89 fa                	mov    edx,edi
c00217cd:	ef                   	out    dx,eax
c00217ce:	89 f2                	mov    edx,esi
c00217d0:	ed                   	in     eax,dx
c00217d1:	0f b6 c0             	movzx  eax,al
c00217d4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00217da:	74 46                	je     c0021822 <IDE::open(int, int, void*)+0x1e0>
c00217dc:	83 ec 0c             	sub    esp,0xc
c00217df:	68 e8 a4 02 c0       	push   0xc002a4e8
c00217e4:	eb 34                	jmp    c002181a <IDE::open(int, int, void*)+0x1d8>
c00217e6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00217ef:	75 17                	jne    c0021808 <IDE::open(int, int, void*)+0x1c6>
c00217f1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00217f6:	74 07                	je     c00217ff <IDE::open(int, int, void*)+0x1bd>
c00217f8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00217fd:	75 09                	jne    c0021808 <IDE::open(int, int, void*)+0x1c6>
c00217ff:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0021806:	eb 1a                	jmp    c0021822 <IDE::open(int, int, void*)+0x1e0>
c0021808:	83 ec 0c             	sub    esp,0xc
c002180b:	68 f0 a4 02 c0       	push   0xc002a4f0
c0021810:	eb 08                	jmp    c002181a <IDE::open(int, int, void*)+0x1d8>
c0021812:	83 ec 0c             	sub    esp,0xc
c0021815:	68 21 a5 02 c0       	push   0xc002a521
c002181a:	e8 38 79 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002181f:	83 c4 10             	add    esp,0x10
c0021822:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0021829:	79 1a                	jns    c0021845 <IDE::open(int, int, void*)+0x203>
c002182b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0021831:	83 e0 fc             	and    eax,0xfffffffc
c0021834:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002183b:	83 c0 08             	add    eax,0x8
c002183e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0021845:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002184b:	89 c2                	mov    edx,eax
c002184d:	83 e2 0f             	and    edx,0xf
c0021850:	66 83 fa 08          	cmp    dx,0x8
c0021854:	75 0a                	jne    c0021860 <IDE::open(int, int, void*)+0x21e>
c0021856:	83 e8 02             	sub    eax,0x2
c0021859:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0021860:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0021866:	89 c2                	mov    edx,eax
c0021868:	83 e2 0f             	and    edx,0xf
c002186b:	66 83 fa 08          	cmp    dx,0x8
c002186f:	75 0a                	jne    c002187b <IDE::open(int, int, void*)+0x239>
c0021871:	83 e8 02             	sub    eax,0x2
c0021874:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002187b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0021882:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0021889:	89 d0                	mov    eax,edx
c002188b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002188e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021892:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0021896:	8d 4a 01             	lea    ecx,[edx+0x1]
c0021899:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002189e:	0f b6 c9             	movzx  ecx,cl
c00218a1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00218a8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00218ab:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00218af:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00218b3:	8d 50 02             	lea    edx,[eax+0x2]
c00218b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00218bb:	0f b6 d2             	movzx  edx,dl
c00218be:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00218c4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00218c7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00218cb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00218cf:	8d 48 03             	lea    ecx,[eax+0x3]
c00218d2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00218d7:	0f b6 c9             	movzx  ecx,cl
c00218da:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00218e0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00218e3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00218e7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00218eb:	8d 50 04             	lea    edx,[eax+0x4]
c00218ee:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00218f4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00218f9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0021900:	66 85 f6             	test   si,si
c0021903:	74 3e                	je     c0021943 <IDE::open(int, int, void*)+0x301>
c0021905:	0f b6 d2             	movzx  edx,dl
c0021908:	83 c0 05             	add    eax,0x5
c002190b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002190e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0021912:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0021916:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002191c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0021921:	eb 20                	jmp    c0021943 <IDE::open(int, int, void*)+0x301>
c0021923:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002192d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0021937:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002193e:	e9 02 ff ff ff       	jmp    c0021845 <IDE::open(int, int, void*)+0x203>
c0021943:	52                   	push   edx
c0021944:	52                   	push   edx
c0021945:	6a 00                	push   0x0
c0021947:	53                   	push   ebx
c0021948:	e8 7d fa ff ff       	call   c00213ca <IDE::prepareInterrupt(unsigned char)>
c002194d:	59                   	pop    ecx
c002194e:	5e                   	pop    esi
c002194f:	6a 01                	push   0x1
c0021951:	53                   	push   ebx
c0021952:	e8 73 fa ff ff       	call   c00213ca <IDE::prepareInterrupt(unsigned char)>
c0021957:	83 c4 0c             	add    esp,0xc
c002195a:	6a 00                	push   0x0
c002195c:	6a 00                	push   0x0
c002195e:	53                   	push   ebx
c002195f:	e8 98 fc ff ff       	call   c00215fc <IDE::enableIRQs(unsigned char, bool)>
c0021964:	83 c4 0c             	add    esp,0xc
c0021967:	6a 00                	push   0x0
c0021969:	6a 01                	push   0x1
c002196b:	53                   	push   ebx
c002196c:	e8 8b fc ff ff       	call   c00215fc <IDE::enableIRQs(unsigned char, bool)>
c0021971:	83 c4 10             	add    esp,0x10
c0021974:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002197b:	74 40                	je     c00219bd <IDE::open(int, int, void*)+0x37b>
c002197d:	83 ec 0c             	sub    esp,0xc
c0021980:	68 4b a5 02 c0       	push   0xc002a54b
c0021985:	e8 03 0d ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c002198a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002198d:	6a 01                	push   0x1
c002198f:	68 c4 15 02 c0       	push   0xc00215c4
c0021994:	6a 0e                	push   0xe
c0021996:	53                   	push   ebx
c0021997:	e8 64 20 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002199c:	83 c4 14             	add    esp,0x14
c002199f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00219a5:	53                   	push   ebx
c00219a6:	6a 01                	push   0x1
c00219a8:	68 e0 15 02 c0       	push   0xc00215e0
c00219ad:	6a 0f                	push   0xf
c00219af:	53                   	push   ebx
c00219b0:	e8 4b 20 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00219b5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00219bb:	eb 4a                	jmp    c0021a07 <IDE::open(int, int, void*)+0x3c5>
c00219bd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00219c7:	50                   	push   eax
c00219c8:	6a 0f                	push   0xf
c00219ca:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00219d0:	68 67 a5 02 c0       	push   0xc002a567
c00219d5:	e8 b3 0c ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00219da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00219dd:	6a 00                	push   0x0
c00219df:	68 c4 15 02 c0       	push   0xc00215c4
c00219e4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00219ea:	53                   	push   ebx
c00219eb:	e8 10 20 ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00219f0:	83 c4 14             	add    esp,0x14
c00219f3:	53                   	push   ebx
c00219f4:	6a 00                	push   0x0
c00219f6:	68 e0 15 02 c0       	push   0xc00215e0
c00219fb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0021a01:	53                   	push   ebx
c0021a02:	e8 f9 1f ff ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021a07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021a09:	83 c4 20             	add    esp,0x20
c0021a0c:	83 ec 0c             	sub    esp,0xc
c0021a0f:	53                   	push   ebx
c0021a10:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0021a13:	83 c4 0c             	add    esp,0xc
c0021a16:	6a 07                	push   0x7
c0021a18:	6a 00                	push   0x0
c0021a1a:	53                   	push   ebx
c0021a1b:	e8 90 fa ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021a20:	83 c4 0c             	add    esp,0xc
c0021a23:	6a 07                	push   0x7
c0021a25:	6a 01                	push   0x1
c0021a27:	53                   	push   ebx
c0021a28:	e8 83 fa ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021a2d:	83 c4 0c             	add    esp,0xc
c0021a30:	6a 01                	push   0x1
c0021a32:	6a 00                	push   0x0
c0021a34:	53                   	push   ebx
c0021a35:	e8 c2 fb ff ff       	call   c00215fc <IDE::enableIRQs(unsigned char, bool)>
c0021a3a:	83 c4 0c             	add    esp,0xc
c0021a3d:	6a 01                	push   0x1
c0021a3f:	6a 01                	push   0x1
c0021a41:	53                   	push   ebx
c0021a42:	e8 b5 fb ff ff       	call   c00215fc <IDE::enableIRQs(unsigned char, bool)>
c0021a47:	83 c4 2c             	add    esp,0x2c
c0021a4a:	31 c0                	xor    eax,eax
c0021a4c:	5b                   	pop    ebx
c0021a4d:	5e                   	pop    esi
c0021a4e:	5f                   	pop    edi
c0021a4f:	5d                   	pop    ebp
c0021a50:	c3                   	ret    
c0021a51:	90                   	nop

c0021a52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0021a52:	55                   	push   ebp
c0021a53:	57                   	push   edi
c0021a54:	56                   	push   esi
c0021a55:	53                   	push   ebx
c0021a56:	83 ec 1c             	sub    esp,0x1c
c0021a59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021a5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021a61:	8d 50 f8             	lea    edx,[eax-0x8]
c0021a64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021a68:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0021a6c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021a70:	80 fa 03             	cmp    dl,0x3
c0021a73:	77 5d                	ja     c0021ad2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0021a75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021a79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a7d:	0f b6 db             	movzx  ebx,bl
c0021a80:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0021a83:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0021a87:	83 ca 80             	or     edx,0xffffff80
c0021a8a:	0f b6 d2             	movzx  edx,dl
c0021a8d:	52                   	push   edx
c0021a8e:	6a 0c                	push   0xc
c0021a90:	53                   	push   ebx
c0021a91:	56                   	push   esi
c0021a92:	e8 59 f9 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021a97:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0021a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021aa0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021aa4:	0f b6 c0             	movzx  eax,al
c0021aa7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0021aab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021aad:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0021ab2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0021ab6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021aba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021abe:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021ac6:	83 c4 2c             	add    esp,0x2c
c0021ac9:	5b                   	pop    ebx
c0021aca:	5e                   	pop    esi
c0021acb:	5f                   	pop    edi
c0021acc:	5d                   	pop    ebp
c0021acd:	e9 1e f9 ff ff       	jmp    c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ad2:	3c 07                	cmp    al,0x7
c0021ad4:	77 10                	ja     c0021ae6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0021ad6:	0f b6 db             	movzx  ebx,bl
c0021ad9:	0f b6 d0             	movzx  edx,al
c0021adc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0021ae4:	eb 2d                	jmp    c0021b13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0021ae6:	3c 0d                	cmp    al,0xd
c0021ae8:	77 13                	ja     c0021afd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0021aea:	0f b6 db             	movzx  ebx,bl
c0021aed:	0f b6 c0             	movzx  eax,al
c0021af0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0021af7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0021afb:	eb 16                	jmp    c0021b13 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0021afd:	3c 15                	cmp    al,0x15
c0021aff:	77 14                	ja     c0021b15 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0021b01:	0f b6 db             	movzx  ebx,bl
c0021b04:	0f b6 c0             	movzx  eax,al
c0021b07:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0021b0f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0021b13:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0021b15:	83 c4 1c             	add    esp,0x1c
c0021b18:	5b                   	pop    ebx
c0021b19:	5e                   	pop    esi
c0021b1a:	5f                   	pop    edi
c0021b1b:	5d                   	pop    ebp
c0021b1c:	c3                   	ret    
c0021b1d:	90                   	nop

c0021b1e <IDE::detect()>:
c0021b1e:	55                   	push   ebp
c0021b1f:	57                   	push   edi
c0021b20:	56                   	push   esi
c0021b21:	53                   	push   ebx
c0021b22:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021b28:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0021b2f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0021b36:	0f 85 be 02 00 00    	jne    c0021dfa <IDE::detect()+0x2dc>
c0021b3c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0021b43:	31 f6                	xor    esi,esi
c0021b45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021b4d:	31 ed                	xor    ebp,ebp
c0021b4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b53:	c1 e0 06             	shl    eax,0x6
c0021b56:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0021b5e:	89 e8                	mov    eax,ebp
c0021b60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021b64:	c1 e0 04             	shl    eax,0x4
c0021b67:	83 c8 a0             	or     eax,0xffffffa0
c0021b6a:	0f b6 c0             	movzx  eax,al
c0021b6d:	50                   	push   eax
c0021b6e:	6a 06                	push   0x6
c0021b70:	56                   	push   esi
c0021b71:	53                   	push   ebx
c0021b72:	e8 79 f8 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	6a 0c                	push   0xc
c0021b7c:	56                   	push   esi
c0021b7d:	53                   	push   ebx
c0021b7e:	e8 2d f9 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021b83:	83 c4 0c             	add    esp,0xc
c0021b86:	6a 0c                	push   0xc
c0021b88:	56                   	push   esi
c0021b89:	53                   	push   ebx
c0021b8a:	e8 21 f9 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021b8f:	83 c4 0c             	add    esp,0xc
c0021b92:	6a 0c                	push   0xc
c0021b94:	56                   	push   esi
c0021b95:	53                   	push   ebx
c0021b96:	e8 15 f9 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021b9b:	83 c4 0c             	add    esp,0xc
c0021b9e:	6a 0c                	push   0xc
c0021ba0:	56                   	push   esi
c0021ba1:	53                   	push   ebx
c0021ba2:	e8 09 f9 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021ba7:	68 ec 00 00 00       	push   0xec
c0021bac:	6a 07                	push   0x7
c0021bae:	56                   	push   esi
c0021baf:	53                   	push   ebx
c0021bb0:	e8 3b f8 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021bb5:	83 c4 1c             	add    esp,0x1c
c0021bb8:	6a 0c                	push   0xc
c0021bba:	56                   	push   esi
c0021bbb:	53                   	push   ebx
c0021bbc:	e8 ef f8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021bc1:	83 c4 0c             	add    esp,0xc
c0021bc4:	6a 0c                	push   0xc
c0021bc6:	56                   	push   esi
c0021bc7:	53                   	push   ebx
c0021bc8:	e8 e3 f8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021bcd:	83 c4 0c             	add    esp,0xc
c0021bd0:	6a 0c                	push   0xc
c0021bd2:	56                   	push   esi
c0021bd3:	53                   	push   ebx
c0021bd4:	e8 d7 f8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021bd9:	83 c4 0c             	add    esp,0xc
c0021bdc:	6a 0c                	push   0xc
c0021bde:	56                   	push   esi
c0021bdf:	53                   	push   ebx
c0021be0:	e8 cb f8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021be5:	83 c4 0c             	add    esp,0xc
c0021be8:	6a 0c                	push   0xc
c0021bea:	56                   	push   esi
c0021beb:	53                   	push   ebx
c0021bec:	e8 bf f8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021bf1:	83 c4 10             	add    esp,0x10
c0021bf4:	84 c0                	test   al,al
c0021bf6:	0f 84 8b 01 00 00    	je     c0021d87 <IDE::detect()+0x269>
c0021bfc:	31 ff                	xor    edi,edi
c0021bfe:	50                   	push   eax
c0021bff:	6a 0c                	push   0xc
c0021c01:	56                   	push   esi
c0021c02:	53                   	push   ebx
c0021c03:	e8 a8 f8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021c08:	83 c4 10             	add    esp,0x10
c0021c0b:	a8 01                	test   al,0x1
c0021c0d:	0f 85 8e 01 00 00    	jne    c0021da1 <IDE::detect()+0x283>
c0021c13:	84 c0                	test   al,al
c0021c15:	78 04                	js     c0021c1b <IDE::detect()+0xfd>
c0021c17:	a8 08                	test   al,0x8
c0021c19:	75 27                	jne    c0021c42 <IDE::detect()+0x124>
c0021c1b:	47                   	inc    edi
c0021c1c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021c22:	7e da                	jle    c0021bfe <IDE::detect()+0xe0>
c0021c24:	50                   	push   eax
c0021c25:	50                   	push   eax
c0021c26:	6a 00                	push   0x0
c0021c28:	68 40 4b 4c 00       	push   0x4c4b40
c0021c2d:	e8 ba aa ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0021c32:	83 c4 10             	add    esp,0x10
c0021c35:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0021c3b:	75 c1                	jne    c0021bfe <IDE::detect()+0xe0>
c0021c3d:	e9 5f 01 00 00       	jmp    c0021da1 <IDE::detect()+0x283>
c0021c42:	31 c9                	xor    ecx,ecx
c0021c44:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0021c48:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021c4c:	83 ec 0c             	sub    esp,0xc
c0021c4f:	68 80 00 00 00       	push   0x80
c0021c54:	57                   	push   edi
c0021c55:	6a 00                	push   0x0
c0021c57:	56                   	push   esi
c0021c58:	53                   	push   ebx
c0021c59:	e8 f4 fd ff ff       	call   c0021a52 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021c5e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021c63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0021c67:	89 d1                	mov    ecx,edx
c0021c69:	c1 e0 06             	shl    eax,0x6
c0021c6c:	01 d8                	add    eax,ebx
c0021c6e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021c75:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021c7c:	89 f2                	mov    edx,esi
c0021c7e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021c84:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0021c88:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021c8e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021c92:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0021c99:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021ca1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0021ca8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021cb0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0021cb6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0021cbd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0021cc3:	8d 54 24 58          	lea    edx,[esp+0x58]
c0021cc7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021ccb:	83 c4 20             	add    esp,0x20
c0021cce:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0021cd1:	83 c0 02             	add    eax,0x2
c0021cd4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0021cda:	83 c7 02             	add    edi,0x2
c0021cdd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0021ce0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0021ce6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0021cea:	75 e2                	jne    c0021cce <IDE::detect()+0x1b0>
c0021cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf0:	c1 e0 06             	shl    eax,0x6
c0021cf3:	01 d8                	add    eax,ebx
c0021cf5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0021cfb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0021d02:	66 c1 ea 09          	shr    dx,0x9
c0021d06:	83 e2 01             	and    edx,0x1
c0021d09:	84 c9                	test   cl,cl
c0021d0b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0021d11:	75 2f                	jne    c0021d42 <IDE::detect()+0x224>
c0021d13:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0021d19:	85 c0                	test   eax,eax
c0021d1b:	74 66                	je     c0021d83 <IDE::detect()+0x265>
c0021d1d:	50                   	push   eax
c0021d1e:	55                   	push   ebp
c0021d1f:	56                   	push   esi
c0021d20:	68 83 a5 02 c0       	push   0xc002a583
c0021d25:	e8 63 09 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021d2a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021d31:	e8 8a d7 fe ff       	call   c000f4c0 <malloc>
c0021d36:	89 c7                	mov    edi,eax
c0021d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d3b:	e8 62 06 00 00       	call   c00223a2 <ATA::ATA()>
c0021d40:	eb 28                	jmp    c0021d6a <IDE::detect()+0x24c>
c0021d42:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0021d48:	55                   	push   ebp
c0021d49:	56                   	push   esi
c0021d4a:	68 b2 a5 02 c0       	push   0xc002a5b2
c0021d4f:	e8 39 09 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021d54:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0021d5b:	e8 60 d7 fe ff       	call   c000f4c0 <malloc>
c0021d60:	89 c7                	mov    edi,eax
c0021d62:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d65:	e8 68 0c 00 00       	call   c00229d2 <ATAPI::ATAPI()>
c0021d6a:	5a                   	pop    edx
c0021d6b:	59                   	pop    ecx
c0021d6c:	57                   	push   edi
c0021d6d:	53                   	push   ebx
c0021d6e:	e8 09 1d ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0021d73:	8b 07                	mov    eax,DWORD PTR [edi]
c0021d75:	53                   	push   ebx
c0021d76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d7a:	6a 00                	push   0x0
c0021d7c:	57                   	push   edi
c0021d7d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021d80:	83 c4 20             	add    esp,0x20
c0021d83:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0021d87:	4d                   	dec    ebp
c0021d88:	74 0a                	je     c0021d94 <IDE::detect()+0x276>
c0021d8a:	bd 01 00 00 00       	mov    ebp,0x1
c0021d8f:	e9 bb fd ff ff       	jmp    c0021b4f <IDE::detect()+0x31>
c0021d94:	4e                   	dec    esi
c0021d95:	74 63                	je     c0021dfa <IDE::detect()+0x2dc>
c0021d97:	be 01 00 00 00       	mov    esi,0x1
c0021d9c:	e9 ac fd ff ff       	jmp    c0021b4d <IDE::detect()+0x2f>
c0021da1:	50                   	push   eax
c0021da2:	6a 04                	push   0x4
c0021da4:	56                   	push   esi
c0021da5:	53                   	push   ebx
c0021da6:	e8 05 f7 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021dab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021daf:	83 c4 0c             	add    esp,0xc
c0021db2:	6a 05                	push   0x5
c0021db4:	56                   	push   esi
c0021db5:	53                   	push   ebx
c0021db6:	e8 f5 f6 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021dbb:	83 c4 10             	add    esp,0x10
c0021dbe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0021dc2:	80 fa 14             	cmp    dl,0x14
c0021dc5:	75 04                	jne    c0021dcb <IDE::detect()+0x2ad>
c0021dc7:	3c eb                	cmp    al,0xeb
c0021dc9:	eb 07                	jmp    c0021dd2 <IDE::detect()+0x2b4>
c0021dcb:	3c 96                	cmp    al,0x96
c0021dcd:	75 b8                	jne    c0021d87 <IDE::detect()+0x269>
c0021dcf:	80 fa 69             	cmp    dl,0x69
c0021dd2:	75 b3                	jne    c0021d87 <IDE::detect()+0x269>
c0021dd4:	68 a1 00 00 00       	push   0xa1
c0021dd9:	6a 07                	push   0x7
c0021ddb:	56                   	push   esi
c0021ddc:	53                   	push   ebx
c0021ddd:	e8 0e f6 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021de2:	5f                   	pop    edi
c0021de3:	58                   	pop    eax
c0021de4:	6a 00                	push   0x0
c0021de6:	68 40 42 0f 00       	push   0xf4240
c0021deb:	e8 fc a8 ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0021df0:	83 c4 10             	add    esp,0x10
c0021df3:	b1 01                	mov    cl,0x1
c0021df5:	e9 4a fe ff ff       	jmp    c0021c44 <IDE::detect()+0x126>
c0021dfa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021e00:	5b                   	pop    ebx
c0021e01:	5e                   	pop    esi
c0021e02:	5f                   	pop    edi
c0021e03:	5d                   	pop    ebp
c0021e04:	c3                   	ret    
c0021e05:	90                   	nop

c0021e06 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0021e06:	55                   	push   ebp
c0021e07:	57                   	push   edi
c0021e08:	56                   	push   esi
c0021e09:	53                   	push   ebx
c0021e0a:	83 ec 1c             	sub    esp,0x1c
c0021e0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021e11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021e15:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021e19:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021e1d:	88 c3                	mov    bl,al
c0021e1f:	84 c0                	test   al,al
c0021e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e25:	0f 84 67 01 00 00    	je     c0021f92 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0021e2b:	83 ec 0c             	sub    esp,0xc
c0021e2e:	68 e3 a5 02 c0       	push   0xc002a5e3
c0021e33:	e8 55 08 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021e38:	83 c4 10             	add    esp,0x10
c0021e3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e3f:	3c 01                	cmp    al,0x1
c0021e41:	75 17                	jne    c0021e5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021e43:	83 ec 0c             	sub    esp,0xc
c0021e46:	b3 13                	mov    bl,0x13
c0021e48:	68 ef a5 02 c0       	push   0xc002a5ef
c0021e4d:	e8 3b 08 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021e52:	83 c4 10             	add    esp,0x10
c0021e55:	e9 25 01 00 00       	jmp    c0021f7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021e5a:	3c 02                	cmp    al,0x2
c0021e5c:	0f 85 ef 00 00 00    	jne    c0021f51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021e62:	d1 e6                	shl    esi,1
c0021e64:	09 ee                	or     esi,ebp
c0021e66:	52                   	push   edx
c0021e67:	89 f0                	mov    eax,esi
c0021e69:	6a 01                	push   0x1
c0021e6b:	0f b6 f0             	movzx  esi,al
c0021e6e:	c1 e6 06             	shl    esi,0x6
c0021e71:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0021e79:	50                   	push   eax
c0021e7a:	57                   	push   edi
c0021e7b:	e8 30 f6 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021e80:	83 c4 10             	add    esp,0x10
c0021e83:	89 c6                	mov    esi,eax
c0021e85:	a8 01                	test   al,0x1
c0021e87:	74 12                	je     c0021e9b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0021e89:	83 ec 0c             	sub    esp,0xc
c0021e8c:	b3 07                	mov    bl,0x7
c0021e8e:	68 04 a6 02 c0       	push   0xc002a604
c0021e93:	e8 f5 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021e98:	83 c4 10             	add    esp,0x10
c0021e9b:	f7 c6 02 00 00 00    	test   esi,0x2
c0021ea1:	74 12                	je     c0021eb5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021ea3:	83 ec 0c             	sub    esp,0xc
c0021ea6:	b3 03                	mov    bl,0x3
c0021ea8:	68 22 a6 02 c0       	push   0xc002a622
c0021ead:	e8 db 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021eb2:	83 c4 10             	add    esp,0x10
c0021eb5:	f7 c6 04 00 00 00    	test   esi,0x4
c0021ebb:	74 12                	je     c0021ecf <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0021ebd:	83 ec 0c             	sub    esp,0xc
c0021ec0:	b3 14                	mov    bl,0x14
c0021ec2:	68 42 a6 02 c0       	push   0xc002a642
c0021ec7:	e8 c1 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021ecc:	83 c4 10             	add    esp,0x10
c0021ecf:	f7 c6 08 00 00 00    	test   esi,0x8
c0021ed5:	74 12                	je     c0021ee9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0021ed7:	83 ec 0c             	sub    esp,0xc
c0021eda:	b3 03                	mov    bl,0x3
c0021edc:	68 22 a6 02 c0       	push   0xc002a622
c0021ee1:	e8 a7 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021ee6:	83 c4 10             	add    esp,0x10
c0021ee9:	f7 c6 10 00 00 00    	test   esi,0x10
c0021eef:	74 12                	je     c0021f03 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0021ef1:	83 ec 0c             	sub    esp,0xc
c0021ef4:	b3 15                	mov    bl,0x15
c0021ef6:	68 5a a6 02 c0       	push   0xc002a65a
c0021efb:	e8 8d 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f00:	83 c4 10             	add    esp,0x10
c0021f03:	f7 c6 20 00 00 00    	test   esi,0x20
c0021f09:	74 12                	je     c0021f1d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0021f0b:	83 ec 0c             	sub    esp,0xc
c0021f0e:	b3 03                	mov    bl,0x3
c0021f10:	68 22 a6 02 c0       	push   0xc002a622
c0021f15:	e8 73 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f1a:	83 c4 10             	add    esp,0x10
c0021f1d:	f7 c6 40 00 00 00    	test   esi,0x40
c0021f23:	74 12                	je     c0021f37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021f25:	83 ec 0c             	sub    esp,0xc
c0021f28:	b3 16                	mov    bl,0x16
c0021f2a:	68 74 a6 02 c0       	push   0xc002a674
c0021f2f:	e8 59 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f34:	83 c4 10             	add    esp,0x10
c0021f37:	89 f0                	mov    eax,esi
c0021f39:	84 c0                	test   al,al
c0021f3b:	79 42                	jns    c0021f7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021f3d:	83 ec 0c             	sub    esp,0xc
c0021f40:	b3 0d                	mov    bl,0xd
c0021f42:	68 95 a6 02 c0       	push   0xc002a695
c0021f47:	e8 41 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f4c:	83 c4 10             	add    esp,0x10
c0021f4f:	eb 2e                	jmp    c0021f7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021f51:	3c 03                	cmp    al,0x3
c0021f53:	75 14                	jne    c0021f69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	b3 17                	mov    bl,0x17
c0021f5a:	68 a9 a6 02 c0       	push   0xc002a6a9
c0021f5f:	e8 29 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f64:	83 c4 10             	add    esp,0x10
c0021f67:	eb 16                	jmp    c0021f7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021f69:	3c 04                	cmp    al,0x4
c0021f6b:	75 12                	jne    c0021f7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021f6d:	83 ec 0c             	sub    esp,0xc
c0021f70:	b3 08                	mov    bl,0x8
c0021f72:	68 bf a6 02 c0       	push   0xc002a6bf
c0021f77:	e8 11 07 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f7c:	83 c4 10             	add    esp,0x10
c0021f7f:	50                   	push   eax
c0021f80:	50                   	push   eax
c0021f81:	0f b6 c3             	movzx  eax,bl
c0021f84:	50                   	push   eax
c0021f85:	68 d7 a6 02 c0       	push   0xc002a6d7
c0021f8a:	e8 fe 06 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021f8f:	83 c4 10             	add    esp,0x10
c0021f92:	83 c4 1c             	add    esp,0x1c
c0021f95:	88 d8                	mov    al,bl
c0021f97:	5b                   	pop    ebx
c0021f98:	5e                   	pop    esi
c0021f99:	5f                   	pop    edi
c0021f9a:	5d                   	pop    ebp
c0021f9b:	c3                   	ret    

c0021f9c <IDE::polling(unsigned char, unsigned int)>:
c0021f9c:	57                   	push   edi
c0021f9d:	56                   	push   esi
c0021f9e:	53                   	push   ebx
c0021f9f:	bb 04 00 00 00       	mov    ebx,0x4
c0021fa4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0021fa8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021fad:	52                   	push   edx
c0021fae:	6a 0c                	push   0xc
c0021fb0:	56                   	push   esi
c0021fb1:	57                   	push   edi
c0021fb2:	e8 f9 f4 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021fb7:	83 c4 10             	add    esp,0x10
c0021fba:	4b                   	dec    ebx
c0021fbb:	75 f0                	jne    c0021fad <IDE::polling(unsigned char, unsigned int)+0x11>
c0021fbd:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021fc2:	50                   	push   eax
c0021fc3:	6a 0c                	push   0xc
c0021fc5:	56                   	push   esi
c0021fc6:	57                   	push   edi
c0021fc7:	e8 e4 f4 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0021fcc:	83 c4 10             	add    esp,0x10
c0021fcf:	a8 01                	test   al,0x1
c0021fd1:	74 12                	je     c0021fe5 <IDE::polling(unsigned char, unsigned int)+0x49>
c0021fd3:	83 ec 0c             	sub    esp,0xc
c0021fd6:	68 f1 a6 02 c0       	push   0xc002a6f1
c0021fdb:	e8 ad 06 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0021fe0:	83 c4 10             	add    esp,0x10
c0021fe3:	eb 17                	jmp    c0021ffc <IDE::polling(unsigned char, unsigned int)+0x60>
c0021fe5:	a8 20                	test   al,0x20
c0021fe7:	75 0f                	jne    c0021ff8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0021fe9:	4b                   	dec    ebx
c0021fea:	74 10                	je     c0021ffc <IDE::polling(unsigned char, unsigned int)+0x60>
c0021fec:	84 c0                	test   al,al
c0021fee:	78 d2                	js     c0021fc2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021ff0:	a8 08                	test   al,0x8
c0021ff2:	74 ce                	je     c0021fc2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0021ff4:	31 c0                	xor    eax,eax
c0021ff6:	eb 06                	jmp    c0021ffe <IDE::polling(unsigned char, unsigned int)+0x62>
c0021ff8:	b0 01                	mov    al,0x1
c0021ffa:	eb 02                	jmp    c0021ffe <IDE::polling(unsigned char, unsigned int)+0x62>
c0021ffc:	b0 02                	mov    al,0x2
c0021ffe:	5b                   	pop    ebx
c0021fff:	5e                   	pop    esi
c0022000:	5f                   	pop    edi
c0022001:	c3                   	ret    

c0022002 <SATABus::close(int, int, void*)>:
c0022002:	31 c0                	xor    eax,eax
c0022004:	c3                   	ret    
c0022005:	90                   	nop

c0022006 <SATABus::detect()>:
c0022006:	c3                   	ret    
c0022007:	90                   	nop

c0022008 <SATABus::SATABus()>:
c0022008:	83 ec 0c             	sub    esp,0xc
c002200b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002200f:	83 ec 08             	sub    esp,0x8
c0022012:	68 34 a7 02 c0       	push   0xc002a734
c0022017:	50                   	push   eax
c0022018:	e8 eb 1d ff ff       	call   c0013e08 <HardDiskController::HardDiskController(char const*)>
c002201d:	83 c4 10             	add    esp,0x10
c0022020:	ba f0 a7 02 c0       	mov    edx,0xc002a7f0
c0022025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022029:	89 10                	mov    DWORD PTR [eax],edx
c002202b:	83 ec 0c             	sub    esp,0xc
c002202e:	6a 50                	push   0x50
c0022030:	e8 fd da fe ff       	call   c000fb32 <Phys::allocateContiguousPages(int)>
c0022035:	83 c4 10             	add    esp,0x10
c0022038:	89 c2                	mov    edx,eax
c002203a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022044:	83 ec 0c             	sub    esp,0xc
c0022047:	6a 50                	push   0x50
c0022049:	e8 4f f6 fe ff       	call   c001169d <Virt::allocateKernelVirtualPages(int)>
c002204e:	83 c4 10             	add    esp,0x10
c0022051:	89 c2                	mov    edx,eax
c0022053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022057:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002205d:	e8 cb f7 fe ff       	call   c001182d <Virt::getAKernelVAS()>
c0022062:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022066:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002206c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022070:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022076:	83 ec 0c             	sub    esp,0xc
c0022079:	6a 03                	push   0x3
c002207b:	6a 50                	push   0x50
c002207d:	51                   	push   ecx
c002207e:	52                   	push   edx
c002207f:	50                   	push   eax
c0022080:	e8 d7 ff fe ff       	call   c001205c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022085:	83 c4 20             	add    esp,0x20
c0022088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022096:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002209c:	83 ec 04             	sub    esp,0x4
c002209f:	52                   	push   edx
c00220a0:	50                   	push   eax
c00220a1:	68 58 a7 02 c0       	push   0xc002a758
c00220a6:	e8 e2 05 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00220ab:	83 c4 10             	add    esp,0x10
c00220ae:	90                   	nop
c00220af:	83 c4 0c             	add    esp,0xc
c00220b2:	c3                   	ret    
c00220b3:	90                   	nop

c00220b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00220b4:	83 ec 0c             	sub    esp,0xc
c00220b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220bb:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00220be:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00220c1:	09 c2                	or     edx,eax
c00220c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00220cd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00220cf:	31 c0                	xor    eax,eax
c00220d1:	c1 e9 08             	shr    ecx,0x8
c00220d4:	83 e1 0f             	and    ecx,0xf
c00220d7:	39 c8                	cmp    eax,ecx
c00220d9:	74 0a                	je     c00220e5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00220db:	f6 c2 01             	test   dl,0x1
c00220de:	74 18                	je     c00220f8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00220e0:	d1 ea                	shr    edx,1
c00220e2:	40                   	inc    eax
c00220e3:	eb f2                	jmp    c00220d7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00220e5:	83 ec 0c             	sub    esp,0xc
c00220e8:	68 7c a7 02 c0       	push   0xc002a77c
c00220ed:	e8 65 70 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00220f2:	83 c4 10             	add    esp,0x10
c00220f5:	83 c8 ff             	or     eax,0xffffffff
c00220f8:	83 c4 0c             	add    esp,0xc
c00220fb:	c3                   	ret    

c00220fc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00220fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022100:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022103:	89 c2                	mov    edx,eax
c0022105:	c1 ea 08             	shr    edx,0x8
c0022108:	83 e2 0f             	and    edx,0xf
c002210b:	fe ca                	dec    dl
c002210d:	75 31                	jne    c0022140 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002210f:	83 e0 0f             	and    eax,0xf
c0022112:	3c 03                	cmp    al,0x3
c0022114:	75 2a                	jne    c0022140 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022116:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022119:	b8 02 00 00 00       	mov    eax,0x2
c002211e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022124:	74 1c                	je     c0022142 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022126:	b8 04 00 00 00       	mov    eax,0x4
c002212b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022131:	74 0f                	je     c0022142 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022133:	31 c0                	xor    eax,eax
c0022135:	83 fa 03             	cmp    edx,0x3
c0022138:	0f 94 c0             	sete   al
c002213b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002213f:	c3                   	ret    
c0022140:	31 c0                	xor    eax,eax
c0022142:	c3                   	ret    
c0022143:	90                   	nop

c0022144 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022144:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022148:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002214b:	0f ba e2 0f          	bt     edx,0xf
c002214f:	72 f7                	jb     c0022148 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022151:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022154:	83 ca 10             	or     edx,0x10
c0022157:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002215a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002215d:	83 ca 01             	or     edx,0x1
c0022160:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022163:	c3                   	ret    

c0022164 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022168:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002216b:	83 e2 fe             	and    edx,0xfffffffe
c002216e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022171:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022174:	83 e2 ef             	and    edx,0xffffffef
c0022177:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002217a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002217d:	0f ba e2 0e          	bt     edx,0xe
c0022181:	72 f7                	jb     c002217a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022183:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022186:	0f ba e2 0f          	bt     edx,0xf
c002218a:	72 ee                	jb     c002217a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002218c:	c3                   	ret    
c002218d:	90                   	nop

c002218e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002218e:	55                   	push   ebp
c002218f:	57                   	push   edi
c0022190:	56                   	push   esi
c0022191:	53                   	push   ebx
c0022192:	83 ec 1c             	sub    esp,0x1c
c0022195:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022199:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002219d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00221a1:	53                   	push   ebx
c00221a2:	89 fd                	mov    ebp,edi
c00221a4:	56                   	push   esi
c00221a5:	c1 e5 0a             	shl    ebp,0xa
c00221a8:	e8 b7 ff ff ff       	call   c0022164 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00221ad:	83 ec 0c             	sub    esp,0xc
c00221b0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00221b6:	01 e8                	add    eax,ebp
c00221b8:	89 03                	mov    DWORD PTR [ebx],eax
c00221ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00221bc:	68 00 04 00 00       	push   0x400
c00221c1:	6a 00                	push   0x0
c00221c3:	50                   	push   eax
c00221c4:	e8 b3 e4 fd ff       	call   c000067c <memset>
c00221c9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00221cf:	89 fa                	mov    edx,edi
c00221d1:	01 e8                	add    eax,ebp
c00221d3:	c1 e7 0d             	shl    edi,0xd
c00221d6:	89 03                	mov    DWORD PTR [ebx],eax
c00221d8:	c1 e2 08             	shl    edx,0x8
c00221db:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221e2:	81 c2 00 80 00 00    	add    edx,0x8000
c00221e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00221ec:	89 d0                	mov    eax,edx
c00221ee:	83 c4 1c             	add    esp,0x1c
c00221f1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00221f7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00221fd:	68 00 01 00 00       	push   0x100
c0022202:	6a 00                	push   0x0
c0022204:	50                   	push   eax
c0022205:	e8 72 e4 fd ff       	call   c000067c <memset>
c002220a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002220e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022214:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002221a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002221e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022221:	83 c4 10             	add    esp,0x10
c0022224:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002222b:	31 ff                	xor    edi,edi
c002222d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022233:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022239:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002223d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022243:	83 c5 20             	add    ebp,0x20
c0022246:	01 f8                	add    eax,edi
c0022248:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002224b:	52                   	push   edx
c002224c:	68 00 01 00 00       	push   0x100
c0022251:	6a 00                	push   0x0
c0022253:	50                   	push   eax
c0022254:	e8 23 e4 fd ff       	call   c000067c <memset>
c0022259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002225d:	83 c4 10             	add    esp,0x10
c0022260:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022266:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002226d:	01 f8                	add    eax,edi
c002226f:	81 c7 00 01 00 00    	add    edi,0x100
c0022275:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022278:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002227e:	75 b3                	jne    c0022233 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022280:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022284:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022288:	83 c4 1c             	add    esp,0x1c
c002228b:	5b                   	pop    ebx
c002228c:	5e                   	pop    esi
c002228d:	5f                   	pop    edi
c002228e:	5d                   	pop    ebp
c002228f:	e9 b0 fe ff ff       	jmp    c0022144 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022294 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022294:	55                   	push   ebp
c0022295:	57                   	push   edi
c0022296:	56                   	push   esi
c0022297:	53                   	push   ebx
c0022298:	31 db                	xor    ebx,ebx
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00222a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00222a5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00222a8:	f7 c7 01 00 00 00    	test   edi,0x1
c00222ae:	0f 84 94 00 00 00    	je     c0022348 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c00222b4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00222b8:	89 d8                	mov    eax,ebx
c00222ba:	c1 e0 07             	shl    eax,0x7
c00222bd:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00222c4:	55                   	push   ebp
c00222c5:	56                   	push   esi
c00222c6:	e8 31 fe ff ff       	call   c00220fc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00222cb:	59                   	pop    ecx
c00222cc:	83 f8 01             	cmp    eax,0x1
c00222cf:	5a                   	pop    edx
c00222d0:	75 47                	jne    c0022319 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c00222d2:	51                   	push   ecx
c00222d3:	51                   	push   ecx
c00222d4:	53                   	push   ebx
c00222d5:	68 a1 a7 02 c0       	push   0xc002a7a1
c00222da:	e8 ae 03 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00222df:	83 c4 0c             	add    esp,0xc
c00222e2:	53                   	push   ebx
c00222e3:	55                   	push   ebp
c00222e4:	56                   	push   esi
c00222e5:	e8 a4 fe ff ff       	call   c002218e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00222ea:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00222f1:	e8 ca d1 fe ff       	call   c000f4c0 <malloc>
c00222f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00222f9:	89 c5                	mov    ebp,eax
c00222fb:	e8 de 0c 00 00       	call   c0022fde <SATA::SATA()>
c0022300:	58                   	pop    eax
c0022301:	5a                   	pop    edx
c0022302:	55                   	push   ebp
c0022303:	56                   	push   esi
c0022304:	e8 73 17 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c0022309:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002230c:	56                   	push   esi
c002230d:	6a 00                	push   0x0
c002230f:	53                   	push   ebx
c0022310:	55                   	push   ebp
c0022311:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022314:	83 c4 20             	add    esp,0x20
c0022317:	eb 2f                	jmp    c0022348 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022319:	83 f8 04             	cmp    eax,0x4
c002231c:	75 1a                	jne    c0022338 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c002231e:	52                   	push   edx
c002231f:	52                   	push   edx
c0022320:	53                   	push   ebx
c0022321:	68 b8 a7 02 c0       	push   0xc002a7b8
c0022326:	e8 62 03 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c002232b:	83 c4 0c             	add    esp,0xc
c002232e:	53                   	push   ebx
c002232f:	55                   	push   ebp
c0022330:	56                   	push   esi
c0022331:	e8 58 fe ff ff       	call   c002218e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022336:	eb 0d                	jmp    c0022345 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022338:	50                   	push   eax
c0022339:	50                   	push   eax
c002233a:	53                   	push   ebx
c002233b:	68 d1 a7 02 c0       	push   0xc002a7d1
c0022340:	e8 48 03 ff ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022345:	83 c4 10             	add    esp,0x10
c0022348:	d1 ef                	shr    edi,1
c002234a:	43                   	inc    ebx
c002234b:	83 fb 20             	cmp    ebx,0x20
c002234e:	0f 85 54 ff ff ff    	jne    c00222a8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022354:	83 c4 0c             	add    esp,0xc
c0022357:	5b                   	pop    ebx
c0022358:	5e                   	pop    esi
c0022359:	5f                   	pop    edi
c002235a:	5d                   	pop    ebp
c002235b:	c3                   	ret    

c002235c <SATABus::open(int, int, void*)>:
c002235c:	83 ec 14             	sub    esp,0x14
c002235f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022363:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022369:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002236f:	52                   	push   edx
c0022370:	50                   	push   eax
c0022371:	e8 1e ff ff ff       	call   c0022294 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022376:	31 c0                	xor    eax,eax
c0022378:	83 c4 1c             	add    esp,0x1c
c002237b:	c3                   	ret    

c002237c <ATA::close(int, int, void*)>:
c002237c:	83 ec 0c             	sub    esp,0xc
c002237f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022383:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022389:	85 c0                	test   eax,eax
c002238b:	74 0c                	je     c0022399 <ATA::close(int, int, void*)+0x1d>
c002238d:	83 ec 0c             	sub    esp,0xc
c0022390:	8b 10                	mov    edx,DWORD PTR [eax]
c0022392:	50                   	push   eax
c0022393:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022396:	83 c4 10             	add    esp,0x10
c0022399:	31 c0                	xor    eax,eax
c002239b:	83 c4 0c             	add    esp,0xc
c002239e:	c3                   	ret    
c002239f:	90                   	nop

c00223a0 <ATA::powerSaving(PowerSavingLevel)>:
c00223a0:	c3                   	ret    
c00223a1:	90                   	nop

c00223a2 <ATA::ATA()>:
c00223a2:	83 ec 0c             	sub    esp,0xc
c00223a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a9:	83 ec 04             	sub    esp,0x4
c00223ac:	68 00 02 00 00       	push   0x200
c00223b1:	68 e4 a8 02 c0       	push   0xc002a8e4
c00223b6:	50                   	push   eax
c00223b7:	e8 d0 1a ff ff       	call   c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00223bc:	83 c4 10             	add    esp,0x10
c00223bf:	ba 30 a8 02 c0       	mov    edx,0xc002a830
c00223c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c8:	89 10                	mov    DWORD PTR [eax],edx
c00223ca:	90                   	nop
c00223cb:	83 c4 0c             	add    esp,0xc
c00223ce:	c3                   	ret    
c00223cf:	90                   	nop

c00223d0 <ATA::flush(bool)>:
c00223d0:	53                   	push   ebx
c00223d1:	83 ec 08             	sub    esp,0x8
c00223d4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00223d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00223dd:	19 c0                	sbb    eax,eax
c00223df:	83 e0 fd             	and    eax,0xfffffffd
c00223e2:	05 ea 00 00 00       	add    eax,0xea
c00223e7:	50                   	push   eax
c00223e8:	6a 07                	push   0x7
c00223ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00223f1:	50                   	push   eax
c00223f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00223f8:	e8 f3 ef ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223fd:	83 c4 0c             	add    esp,0xc
c0022400:	6a 00                	push   0x0
c0022402:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022409:	50                   	push   eax
c002240a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022410:	e8 87 fb ff ff       	call   c0021f9c <IDE::polling(unsigned char, unsigned int)>
c0022415:	83 c4 18             	add    esp,0x18
c0022418:	5b                   	pop    ebx
c0022419:	c3                   	ret    

c002241a <ATA::readyForCommand()>:
c002241a:	56                   	push   esi
c002241b:	53                   	push   ebx
c002241c:	31 db                	xor    ebx,ebx
c002241e:	50                   	push   eax
c002241f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022423:	50                   	push   eax
c0022424:	6a 0c                	push   0xc
c0022426:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002242d:	50                   	push   eax
c002242e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022434:	e8 77 f0 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0022439:	83 c4 10             	add    esp,0x10
c002243c:	a8 88                	test   al,0x88
c002243e:	74 23                	je     c0022463 <ATA::readyForCommand()+0x49>
c0022440:	43                   	inc    ebx
c0022441:	83 fb 63             	cmp    ebx,0x63
c0022444:	7e dd                	jle    c0022423 <ATA::readyForCommand()+0x9>
c0022446:	51                   	push   ecx
c0022447:	51                   	push   ecx
c0022448:	6a 00                	push   0x0
c002244a:	68 40 42 0f 00       	push   0xf4240
c002244f:	e8 98 a2 ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0022454:	83 c4 10             	add    esp,0x10
c0022457:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002245d:	75 c4                	jne    c0022423 <ATA::readyForCommand()+0x9>
c002245f:	31 c0                	xor    eax,eax
c0022461:	eb 02                	jmp    c0022465 <ATA::readyForCommand()+0x4b>
c0022463:	b0 01                	mov    al,0x1
c0022465:	5a                   	pop    edx
c0022466:	5b                   	pop    ebx
c0022467:	5e                   	pop    esi
c0022468:	c3                   	ret    
c0022469:	90                   	nop

c002246a <ATA::access(unsigned long long, int, void*, bool)>:
c002246a:	55                   	push   ebp
c002246b:	57                   	push   edi
c002246c:	56                   	push   esi
c002246d:	53                   	push   ebx
c002246e:	83 ec 2c             	sub    esp,0x2c
c0022471:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022475:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022479:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002247d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022481:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0022485:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022489:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002248d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0022493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022497:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002249d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224a1:	c1 e0 06             	shl    eax,0x6
c00224a4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00224ac:	74 5d                	je     c002250b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00224ae:	89 fa                	mov    edx,edi
c00224b0:	89 f0                	mov    eax,esi
c00224b2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00224b6:	c1 ea 1c             	shr    edx,0x1c
c00224b9:	89 d1                	mov    ecx,edx
c00224bb:	09 c1                	or     ecx,eax
c00224bd:	74 25                	je     c00224e4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00224bf:	31 ed                	xor    ebp,ebp
c00224c1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00224c8:	89 fa                	mov    edx,edi
c00224ca:	89 f0                	mov    eax,esi
c00224cc:	0f ad d0             	shrd   eax,edx,cl
c00224cf:	d3 ea                	shr    edx,cl
c00224d1:	f6 c1 20             	test   cl,0x20
c00224d4:	74 02                	je     c00224d8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00224d6:	89 d0                	mov    eax,edx
c00224d8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00224dc:	45                   	inc    ebp
c00224dd:	83 fd 06             	cmp    ebp,0x6
c00224e0:	75 df                	jne    c00224c1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00224e2:	eb 76                	jmp    c002255a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00224e4:	89 f0                	mov    eax,esi
c00224e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00224eb:	89 fa                	mov    edx,edi
c00224ed:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00224f4:	0f ac d0 10          	shrd   eax,edx,0x10
c00224f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00224fd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0022501:	c1 ee 18             	shr    esi,0x18
c0022504:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0022509:	eb 56                	jmp    c0022561 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002250b:	6a 00                	push   0x0
c002250d:	6a 3f                	push   0x3f
c002250f:	57                   	push   edi
c0022510:	56                   	push   esi
c0022511:	e8 36 24 00 00       	call   c002494c <__umoddi3>
c0022516:	83 c4 10             	add    esp,0x10
c0022519:	40                   	inc    eax
c002251a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002251e:	6a 00                	push   0x0
c0022520:	68 f0 03 00 00       	push   0x3f0
c0022525:	57                   	push   edi
c0022526:	56                   	push   esi
c0022527:	e8 20 23 00 00       	call   c002484c <__udivdi3>
c002252c:	83 c4 10             	add    esp,0x10
c002252f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0022534:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002253b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0022540:	6a 00                	push   0x0
c0022542:	6a 3f                	push   0x3f
c0022544:	57                   	push   edi
c0022545:	56                   	push   esi
c0022546:	e8 01 23 00 00       	call   c002484c <__udivdi3>
c002254b:	83 c4 10             	add    esp,0x10
c002254e:	89 c6                	mov    esi,eax
c0022550:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0022555:	83 e6 0f             	and    esi,0xf
c0022558:	eb 07                	jmp    c0022561 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002255a:	31 f6                	xor    esi,esi
c002255c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0022561:	bf 01 00 00 00       	mov    edi,0x1
c0022566:	50                   	push   eax
c0022567:	6a 00                	push   0x0
c0022569:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022570:	50                   	push   eax
c0022571:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022575:	e8 82 f0 ff ff       	call   c00215fc <IDE::enableIRQs(unsigned char, bool)>
c002257a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002257d:	e8 98 fe ff ff       	call   c002241a <ATA::readyForCommand()>
c0022582:	83 c4 10             	add    esp,0x10
c0022585:	84 c0                	test   al,al
c0022587:	0f 84 50 02 00 00    	je     c00227dd <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002258d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0022593:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022599:	c1 e0 04             	shl    eax,0x4
c002259c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00225a3:	09 c6                	or     esi,eax
c00225a5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00225aa:	75 05                	jne    c00225b1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00225ac:	83 ce a0             	or     esi,0xffffffa0
c00225af:	eb 03                	jmp    c00225b4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00225b1:	83 ce e0             	or     esi,0xffffffe0
c00225b4:	89 f0                	mov    eax,esi
c00225b6:	0f b6 f0             	movzx  esi,al
c00225b9:	56                   	push   esi
c00225ba:	6a 06                	push   0x6
c00225bc:	51                   	push   ecx
c00225bd:	52                   	push   edx
c00225be:	e8 2d ee ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225c3:	83 c4 10             	add    esp,0x10
c00225c6:	6a 00                	push   0x0
c00225c8:	6a 01                	push   0x1
c00225ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225d1:	50                   	push   eax
c00225d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225d8:	e8 13 ee ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225dd:	83 c4 10             	add    esp,0x10
c00225e0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00225e5:	75 6e                	jne    c0022655 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00225e7:	6a 00                	push   0x0
c00225e9:	6a 08                	push   0x8
c00225eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00225f2:	50                   	push   eax
c00225f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00225f9:	e8 f2 ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225fe:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022603:	50                   	push   eax
c0022604:	6a 09                	push   0x9
c0022606:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002260d:	50                   	push   eax
c002260e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022614:	e8 d7 ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022619:	83 c4 20             	add    esp,0x20
c002261c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0022621:	50                   	push   eax
c0022622:	6a 0a                	push   0xa
c0022624:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002262b:	50                   	push   eax
c002262c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022632:	e8 b9 ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022637:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002263c:	50                   	push   eax
c002263d:	6a 0b                	push   0xb
c002263f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022646:	50                   	push   eax
c0022647:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002264d:	e8 9e ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022652:	83 c4 20             	add    esp,0x20
c0022655:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002265a:	50                   	push   eax
c002265b:	6a 02                	push   0x2
c002265d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022664:	50                   	push   eax
c0022665:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002266b:	e8 80 ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022670:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0022675:	50                   	push   eax
c0022676:	6a 03                	push   0x3
c0022678:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002267f:	50                   	push   eax
c0022680:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022686:	e8 65 ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002268b:	83 c4 20             	add    esp,0x20
c002268e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0022693:	50                   	push   eax
c0022694:	6a 04                	push   0x4
c0022696:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002269d:	50                   	push   eax
c002269e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00226a4:	e8 47 ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226ae:	50                   	push   eax
c00226af:	6a 05                	push   0x5
c00226b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00226b8:	50                   	push   eax
c00226b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00226bf:	e8 2c ed ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226c4:	83 c4 20             	add    esp,0x20
c00226c7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00226cc:	0f 94 c0             	sete   al
c00226cf:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00226d4:	74 09                	je     c00226df <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00226d6:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00226dd:	eb 07                	jmp    c00226e6 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00226df:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00226e6:	0f b6 c0             	movzx  eax,al
c00226e9:	50                   	push   eax
c00226ea:	6a 07                	push   0x7
c00226ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00226f3:	50                   	push   eax
c00226f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00226fa:	e8 f1 ec ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00226ff:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0022703:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0022707:	83 c4 10             	add    esp,0x10
c002270a:	85 f6                	test   esi,esi
c002270c:	0f 84 ac 00 00 00    	je     c00227be <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0022712:	50                   	push   eax
c0022713:	6a 01                	push   0x1
c0022715:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002271c:	50                   	push   eax
c002271d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022723:	e8 74 f8 ff ff       	call   c0021f9c <IDE::polling(unsigned char, unsigned int)>
c0022728:	83 c4 10             	add    esp,0x10
c002272b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0022731:	84 c0                	test   al,al
c0022733:	74 20                	je     c0022755 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0022735:	0f b6 f8             	movzx  edi,al
c0022738:	0f b6 d2             	movzx  edx,dl
c002273b:	57                   	push   edi
c002273c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0022743:	50                   	push   eax
c0022744:	52                   	push   edx
c0022745:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002274b:	e8 b6 f6 ff ff       	call   c0021e06 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022750:	e9 85 00 00 00       	jmp    c00227da <ATA::access(unsigned long long, int, void*, bool)+0x370>
c0022755:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002275a:	74 41                	je     c002279d <ATA::access(unsigned long long, int, void*, bool)+0x333>
c002275c:	31 c9                	xor    ecx,ecx
c002275e:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0022762:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022766:	50                   	push   eax
c0022767:	50                   	push   eax
c0022768:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002276f:	50                   	push   eax
c0022770:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022776:	e8 63 ec ff ff       	call   c00213de <IDE::getBase(unsigned char)>
c002277b:	89 c2                	mov    edx,eax
c002277d:	89 e8                	mov    eax,ebp
c002277f:	66 ef                	out    dx,ax
c0022781:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022785:	83 c4 10             	add    esp,0x10
c0022788:	41                   	inc    ecx
c0022789:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002278f:	75 cd                	jne    c002275e <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0022791:	4e                   	dec    esi
c0022792:	81 c7 00 02 00 00    	add    edi,0x200
c0022798:	e9 6d ff ff ff       	jmp    c002270a <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002279d:	0f b6 d2             	movzx  edx,dl
c00227a0:	51                   	push   ecx
c00227a1:	51                   	push   ecx
c00227a2:	52                   	push   edx
c00227a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00227a9:	e8 30 ec ff ff       	call   c00213de <IDE::getBase(unsigned char)>
c00227ae:	b9 00 01 00 00       	mov    ecx,0x100
c00227b3:	89 c2                	mov    edx,eax
c00227b5:	fc                   	cld    
c00227b6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00227b9:	83 c4 10             	add    esp,0x10
c00227bc:	eb d3                	jmp    c0022791 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c00227be:	31 ff                	xor    edi,edi
c00227c0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00227c5:	74 16                	je     c00227dd <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00227c7:	50                   	push   eax
c00227c8:	50                   	push   eax
c00227c9:	31 c0                	xor    eax,eax
c00227cb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00227d0:	0f 94 c0             	sete   al
c00227d3:	50                   	push   eax
c00227d4:	53                   	push   ebx
c00227d5:	e8 f6 fb ff ff       	call   c00223d0 <ATA::flush(bool)>
c00227da:	83 c4 10             	add    esp,0x10
c00227dd:	83 c4 2c             	add    esp,0x2c
c00227e0:	89 f8                	mov    eax,edi
c00227e2:	5b                   	pop    ebx
c00227e3:	5e                   	pop    esi
c00227e4:	5f                   	pop    edi
c00227e5:	5d                   	pop    ebp
c00227e6:	c3                   	ret    
c00227e7:	90                   	nop

c00227e8 <ATA::read(unsigned long long, int, void*)>:
c00227e8:	57                   	push   edi
c00227e9:	b8 04 00 00 00       	mov    eax,0x4
c00227ee:	56                   	push   esi
c00227ef:	53                   	push   ebx
c00227f0:	83 ec 10             	sub    esp,0x10
c00227f3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00227f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00227fb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00227fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022802:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022806:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002280c:	77 3b                	ja     c0022849 <ATA::read(unsigned long long, int, void*)+0x61>
c002280e:	b8 06 00 00 00       	mov    eax,0x6
c0022813:	85 d2                	test   edx,edx
c0022815:	74 32                	je     c0022849 <ATA::read(unsigned long long, int, void*)+0x61>
c0022817:	50                   	push   eax
c0022818:	50                   	push   eax
c0022819:	6a 00                	push   0x0
c002281b:	52                   	push   edx
c002281c:	53                   	push   ebx
c002281d:	57                   	push   edi
c002281e:	56                   	push   esi
c002281f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022823:	e8 42 fc ff ff       	call   c002246a <ATA::access(unsigned long long, int, void*, bool)>
c0022828:	83 c4 20             	add    esp,0x20
c002282b:	85 c0                	test   eax,eax
c002282d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022831:	75 11                	jne    c0022844 <ATA::read(unsigned long long, int, void*)+0x5c>
c0022833:	01 1d 48 e0 02 c0    	add    DWORD PTR ds:0xc002e048,ebx
c0022839:	e8 b8 dc fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c002283e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022842:	eb 05                	jmp    c0022849 <ATA::read(unsigned long long, int, void*)+0x61>
c0022844:	b8 01 00 00 00       	mov    eax,0x1
c0022849:	83 c4 10             	add    esp,0x10
c002284c:	5b                   	pop    ebx
c002284d:	5e                   	pop    esi
c002284e:	5f                   	pop    edi
c002284f:	c3                   	ret    

c0022850 <ATA::write(unsigned long long, int, void*)>:
c0022850:	57                   	push   edi
c0022851:	b8 04 00 00 00       	mov    eax,0x4
c0022856:	56                   	push   esi
c0022857:	53                   	push   ebx
c0022858:	83 ec 10             	sub    esp,0x10
c002285b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002285f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022863:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0022866:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002286a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002286e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0022874:	77 3b                	ja     c00228b1 <ATA::write(unsigned long long, int, void*)+0x61>
c0022876:	b8 06 00 00 00       	mov    eax,0x6
c002287b:	85 d2                	test   edx,edx
c002287d:	74 32                	je     c00228b1 <ATA::write(unsigned long long, int, void*)+0x61>
c002287f:	50                   	push   eax
c0022880:	50                   	push   eax
c0022881:	6a 01                	push   0x1
c0022883:	52                   	push   edx
c0022884:	53                   	push   ebx
c0022885:	57                   	push   edi
c0022886:	56                   	push   esi
c0022887:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002288b:	e8 da fb ff ff       	call   c002246a <ATA::access(unsigned long long, int, void*, bool)>
c0022890:	83 c4 20             	add    esp,0x20
c0022893:	85 c0                	test   eax,eax
c0022895:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022899:	75 11                	jne    c00228ac <ATA::write(unsigned long long, int, void*)+0x5c>
c002289b:	01 1d 44 e0 02 c0    	add    DWORD PTR ds:0xc002e044,ebx
c00228a1:	e8 50 dc fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c00228a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228aa:	eb 05                	jmp    c00228b1 <ATA::write(unsigned long long, int, void*)+0x61>
c00228ac:	b8 01 00 00 00       	mov    eax,0x1
c00228b1:	83 c4 10             	add    esp,0x10
c00228b4:	5b                   	pop    ebx
c00228b5:	5e                   	pop    esi
c00228b6:	5f                   	pop    edi
c00228b7:	c3                   	ret    

c00228b8 <ATA::detectCHS()>:
c00228b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228bc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00228c2:	c1 e0 06             	shl    eax,0x6
c00228c5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00228cb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00228d5:	c7 44 24 04 14 a8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a814
c00228dd:	e9 75 68 ff ff       	jmp    c0019157 <Krnl::panic(char const*)>

c00228e2 <ATA::open(int, int, void*)>:
c00228e2:	53                   	push   ebx
c00228e3:	83 ec 08             	sub    esp,0x8
c00228e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00228ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00228f2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00228f8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00228fe:	c1 e0 06             	shl    eax,0x6
c0022901:	01 d0                	add    eax,edx
c0022903:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002290a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0022910:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0022917:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022921:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0022927:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002292e:	75 0c                	jne    c002293c <ATA::open(int, int, void*)+0x5a>
c0022930:	83 ec 0c             	sub    esp,0xc
c0022933:	53                   	push   ebx
c0022934:	e8 7f ff ff ff       	call   c00228b8 <ATA::detectCHS()>
c0022939:	83 c4 10             	add    esp,0x10
c002293c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0022942:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0022948:	c1 e0 06             	shl    eax,0x6
c002294b:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0022952:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002295c:	d1 e8                	shr    eax,1
c002295e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0022964:	6a 04                	push   0x4
c0022966:	6a 0c                	push   0xc
c0022968:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002296f:	50                   	push   eax
c0022970:	52                   	push   edx
c0022971:	e8 7a ea ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022976:	90                   	nop
c0022977:	90                   	nop
c0022978:	6a 00                	push   0x0
c002297a:	6a 0c                	push   0xc
c002297c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022983:	50                   	push   eax
c0022984:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002298a:	e8 61 ea ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002298f:	83 c4 14             	add    esp,0x14
c0022992:	53                   	push   ebx
c0022993:	e8 5c 15 ff ff       	call   c0013ef4 <PhysicalDisk::startCache()>
c0022998:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002299b:	e8 04 35 ff ff       	call   c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>
c00229a0:	31 c0                	xor    eax,eax
c00229a2:	83 c4 18             	add    esp,0x18
c00229a5:	5b                   	pop    ebx
c00229a6:	c3                   	ret    
c00229a7:	90                   	nop

c00229a8 <ATAPI::write(unsigned long long, int, void*)>:
c00229a8:	b8 03 00 00 00       	mov    eax,0x3
c00229ad:	c3                   	ret    

c00229ae <ATAPI::close(int, int, void*)>:
c00229ae:	83 ec 0c             	sub    esp,0xc
c00229b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00229bb:	85 c0                	test   eax,eax
c00229bd:	74 0c                	je     c00229cb <ATAPI::close(int, int, void*)+0x1d>
c00229bf:	83 ec 0c             	sub    esp,0xc
c00229c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00229c4:	50                   	push   eax
c00229c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00229c8:	83 c4 10             	add    esp,0x10
c00229cb:	31 c0                	xor    eax,eax
c00229cd:	83 c4 0c             	add    esp,0xc
c00229d0:	c3                   	ret    
c00229d1:	90                   	nop

c00229d2 <ATAPI::ATAPI()>:
c00229d2:	83 ec 0c             	sub    esp,0xc
c00229d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d9:	83 ec 04             	sub    esp,0x4
c00229dc:	68 00 08 00 00       	push   0x800
c00229e1:	68 5c a8 02 c0       	push   0xc002a85c
c00229e6:	50                   	push   eax
c00229e7:	e8 a0 14 ff ff       	call   c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00229ec:	83 c4 10             	add    esp,0x10
c00229ef:	ba 9c a8 02 c0       	mov    edx,0xc002a89c
c00229f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f8:	89 10                	mov    DWORD PTR [eax],edx
c00229fa:	90                   	nop
c00229fb:	83 c4 0c             	add    esp,0xc
c00229fe:	c3                   	ret    
c00229ff:	90                   	nop

c0022a00 <ATAPI::readyForCommand()>:
c0022a00:	56                   	push   esi
c0022a01:	53                   	push   ebx
c0022a02:	31 db                	xor    ebx,ebx
c0022a04:	50                   	push   eax
c0022a05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022a09:	50                   	push   eax
c0022a0a:	6a 0c                	push   0xc
c0022a0c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022a13:	50                   	push   eax
c0022a14:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022a1a:	e8 91 ea ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0022a1f:	83 c4 10             	add    esp,0x10
c0022a22:	a8 88                	test   al,0x88
c0022a24:	74 23                	je     c0022a49 <ATAPI::readyForCommand()+0x49>
c0022a26:	43                   	inc    ebx
c0022a27:	83 fb 63             	cmp    ebx,0x63
c0022a2a:	7e dd                	jle    c0022a09 <ATAPI::readyForCommand()+0x9>
c0022a2c:	51                   	push   ecx
c0022a2d:	51                   	push   ecx
c0022a2e:	6a 00                	push   0x0
c0022a30:	68 40 42 0f 00       	push   0xf4240
c0022a35:	e8 b2 9c ff ff       	call   c001c6ec <nanoSleep(unsigned long long)>
c0022a3a:	83 c4 10             	add    esp,0x10
c0022a3d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0022a43:	75 c4                	jne    c0022a09 <ATAPI::readyForCommand()+0x9>
c0022a45:	31 c0                	xor    eax,eax
c0022a47:	eb 02                	jmp    c0022a4b <ATAPI::readyForCommand()+0x4b>
c0022a49:	b0 01                	mov    al,0x1
c0022a4b:	5a                   	pop    edx
c0022a4c:	5b                   	pop    ebx
c0022a4d:	5e                   	pop    esi
c0022a4e:	c3                   	ret    
c0022a4f:	90                   	nop

c0022a50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0022a50:	55                   	push   ebp
c0022a51:	57                   	push   edi
c0022a52:	56                   	push   esi
c0022a53:	53                   	push   ebx
c0022a54:	83 ec 20             	sub    esp,0x20
c0022a57:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022a5b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022a5f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022a63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022a67:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022a6b:	6a 01                	push   0x1
c0022a6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a74:	50                   	push   eax
c0022a75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a7b:	e8 7c eb ff ff       	call   c00215fc <IDE::enableIRQs(unsigned char, bool)>
c0022a80:	5e                   	pop    esi
c0022a81:	58                   	pop    eax
c0022a82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022a89:	50                   	push   eax
c0022a8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022a90:	e8 35 e9 ff ff       	call   c00213ca <IDE::prepareInterrupt(unsigned char)>
c0022a95:	89 3c 24             	mov    DWORD PTR [esp],edi
c0022a98:	e8 63 ff ff ff       	call   c0022a00 <ATAPI::readyForCommand()>
c0022a9d:	83 c4 10             	add    esp,0x10
c0022aa0:	84 c0                	test   al,al
c0022aa2:	75 0a                	jne    c0022aae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0022aa4:	bb 01 00 00 00       	mov    ebx,0x1
c0022aa9:	e9 57 02 00 00       	jmp    c0022d05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022aae:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0022ab4:	c1 e0 04             	shl    eax,0x4
c0022ab7:	0f b6 c0             	movzx  eax,al
c0022aba:	50                   	push   eax
c0022abb:	6a 06                	push   0x6
c0022abd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ac4:	50                   	push   eax
c0022ac5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022acb:	e8 20 e9 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ad0:	6a 00                	push   0x0
c0022ad2:	6a 01                	push   0x1
c0022ad4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022adb:	50                   	push   eax
c0022adc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022ae2:	e8 09 e9 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ae7:	83 c4 20             	add    esp,0x20
c0022aea:	0f b6 c3             	movzx  eax,bl
c0022aed:	0f b6 df             	movzx  ebx,bh
c0022af0:	50                   	push   eax
c0022af1:	6a 04                	push   0x4
c0022af3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022afa:	50                   	push   eax
c0022afb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b01:	e8 ea e8 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b06:	53                   	push   ebx
c0022b07:	6a 05                	push   0x5
c0022b09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022b10:	50                   	push   eax
c0022b11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b17:	e8 d4 e8 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b1c:	83 c4 20             	add    esp,0x20
c0022b1f:	68 a0 00 00 00       	push   0xa0
c0022b24:	6a 07                	push   0x7
c0022b26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022b2d:	50                   	push   eax
c0022b2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b34:	e8 b7 e8 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b39:	83 c4 0c             	add    esp,0xc
c0022b3c:	6a 01                	push   0x1
c0022b3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022b45:	50                   	push   eax
c0022b46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b4c:	e8 4b f4 ff ff       	call   c0021f9c <IDE::polling(unsigned char, unsigned int)>
c0022b51:	83 c4 10             	add    esp,0x10
c0022b54:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0022b5a:	84 c0                	test   al,al
c0022b5c:	74 23                	je     c0022b81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0022b5e:	0f b6 d8             	movzx  ebx,al
c0022b61:	0f b6 d2             	movzx  edx,dl
c0022b64:	53                   	push   ebx
c0022b65:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0022b6c:	50                   	push   eax
c0022b6d:	52                   	push   edx
c0022b6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b74:	e8 8d f2 ff ff       	call   c0021e06 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0022b79:	83 c4 10             	add    esp,0x10
c0022b7c:	e9 84 01 00 00       	jmp    c0022d05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022b81:	0f b6 d2             	movzx  edx,dl
c0022b84:	53                   	push   ebx
c0022b85:	53                   	push   ebx
c0022b86:	52                   	push   edx
c0022b87:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022b8d:	e8 4c e8 ff ff       	call   c00213de <IDE::getBase(unsigned char)>
c0022b92:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0022b96:	b9 06 00 00 00       	mov    ecx,0x6
c0022b9b:	89 c2                	mov    edx,eax
c0022b9d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0022ba0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022ba4:	83 c4 10             	add    esp,0x10
c0022ba7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022bad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022bb4:	85 db                	test   ebx,ebx
c0022bb6:	0f 84 ec 00 00 00    	je     c0022ca8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0022bbc:	51                   	push   ecx
c0022bbd:	51                   	push   ecx
c0022bbe:	52                   	push   edx
c0022bbf:	50                   	push   eax
c0022bc0:	e8 99 e9 ff ff       	call   c002155e <IDE::waitInterrupt(unsigned char)>
c0022bc5:	83 c4 10             	add    esp,0x10
c0022bc8:	84 c0                	test   al,al
c0022bca:	0f 84 d4 fe ff ff    	je     c0022aa4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022bd0:	56                   	push   esi
c0022bd1:	56                   	push   esi
c0022bd2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022bd9:	50                   	push   eax
c0022bda:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022be0:	e8 e5 e7 ff ff       	call   c00213ca <IDE::prepareInterrupt(unsigned char)>
c0022be5:	83 c4 0c             	add    esp,0xc
c0022be8:	6a 04                	push   0x4
c0022bea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022bf1:	50                   	push   eax
c0022bf2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022bf8:	e8 b3 e8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0022bfd:	83 c4 0c             	add    esp,0xc
c0022c00:	89 c6                	mov    esi,eax
c0022c02:	6a 05                	push   0x5
c0022c04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022c0b:	50                   	push   eax
c0022c0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022c12:	e8 99 e8 ff ff       	call   c00214b0 <IDE::read(unsigned char, unsigned char)>
c0022c17:	89 f1                	mov    ecx,esi
c0022c19:	0f b6 c0             	movzx  eax,al
c0022c1c:	0f b6 f1             	movzx  esi,cl
c0022c1f:	c1 e0 08             	shl    eax,0x8
c0022c22:	09 c6                	or     esi,eax
c0022c24:	d1 fe                	sar    esi,1
c0022c26:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0022c2a:	83 c4 10             	add    esp,0x10
c0022c2d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022c32:	74 41                	je     c0022c75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0022c34:	31 c9                	xor    ecx,ecx
c0022c36:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022c3c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022c43:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0022c47:	75 0a                	jne    c0022c53 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0022c49:	01 c9                	add    ecx,ecx
c0022c4b:	01 cd                	add    ebp,ecx
c0022c4d:	4b                   	dec    ebx
c0022c4e:	e9 54 ff ff ff       	jmp    c0022ba7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0022c53:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0022c58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022c5c:	51                   	push   ecx
c0022c5d:	51                   	push   ecx
c0022c5e:	52                   	push   edx
c0022c5f:	50                   	push   eax
c0022c60:	e8 79 e7 ff ff       	call   c00213de <IDE::getBase(unsigned char)>
c0022c65:	89 c2                	mov    edx,eax
c0022c67:	89 f0                	mov    eax,esi
c0022c69:	66 ef                	out    dx,ax
c0022c6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022c6f:	83 c4 10             	add    esp,0x10
c0022c72:	41                   	inc    ecx
c0022c73:	eb c1                	jmp    c0022c36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0022c75:	31 f6                	xor    esi,esi
c0022c77:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0022c7d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0022c84:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0022c88:	75 06                	jne    c0022c90 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0022c8a:	01 f6                	add    esi,esi
c0022c8c:	01 f5                	add    ebp,esi
c0022c8e:	eb bd                	jmp    c0022c4d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0022c90:	51                   	push   ecx
c0022c91:	51                   	push   ecx
c0022c92:	52                   	push   edx
c0022c93:	50                   	push   eax
c0022c94:	e8 45 e7 ff ff       	call   c00213de <IDE::getBase(unsigned char)>
c0022c99:	89 c2                	mov    edx,eax
c0022c9b:	66 ed                	in     ax,dx
c0022c9d:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0022ca2:	83 c4 10             	add    esp,0x10
c0022ca5:	46                   	inc    esi
c0022ca6:	eb cf                	jmp    c0022c77 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0022ca8:	51                   	push   ecx
c0022ca9:	51                   	push   ecx
c0022caa:	52                   	push   edx
c0022cab:	50                   	push   eax
c0022cac:	e8 ad e8 ff ff       	call   c002155e <IDE::waitInterrupt(unsigned char)>
c0022cb1:	83 c4 10             	add    esp,0x10
c0022cb4:	84 c0                	test   al,al
c0022cb6:	0f 84 e8 fd ff ff    	je     c0022aa4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0022cbc:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022cc1:	52                   	push   edx
c0022cc2:	52                   	push   edx
c0022cc3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022cca:	50                   	push   eax
c0022ccb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022cd1:	e8 f4 e6 ff ff       	call   c00213ca <IDE::prepareInterrupt(unsigned char)>
c0022cd6:	83 c4 10             	add    esp,0x10
c0022cd9:	50                   	push   eax
c0022cda:	50                   	push   eax
c0022cdb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0022ce2:	50                   	push   eax
c0022ce3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0022ce9:	e8 f0 e6 ff ff       	call   c00213de <IDE::getBase(unsigned char)>
c0022cee:	8d 50 07             	lea    edx,[eax+0x7]
c0022cf1:	ec                   	in     al,dx
c0022cf2:	83 c4 10             	add    esp,0x10
c0022cf5:	a8 88                	test   al,0x88
c0022cf7:	74 0a                	je     c0022d03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0022cf9:	4b                   	dec    ebx
c0022cfa:	75 dd                	jne    c0022cd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0022cfc:	bb 02 00 00 00       	mov    ebx,0x2
c0022d01:	eb 02                	jmp    c0022d05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0022d03:	31 db                	xor    ebx,ebx
c0022d05:	83 c4 1c             	add    esp,0x1c
c0022d08:	89 d8                	mov    eax,ebx
c0022d0a:	5b                   	pop    ebx
c0022d0b:	5e                   	pop    esi
c0022d0c:	5f                   	pop    edi
c0022d0d:	5d                   	pop    ebp
c0022d0e:	c3                   	ret    
c0022d0f:	90                   	nop

c0022d10 <ATAPI::diskRemoved()>:
c0022d10:	83 ec 18             	sub    esp,0x18
c0022d13:	68 67 a8 02 c0       	push   0xc002a867
c0022d18:	e8 70 f9 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d21:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0022d28:	83 c4 1c             	add    esp,0x1c
c0022d2b:	c3                   	ret    

c0022d2c <ATAPI::eject()>:
c0022d2c:	57                   	push   edi
c0022d2d:	b9 03 00 00 00       	mov    ecx,0x3
c0022d32:	53                   	push   ebx
c0022d33:	83 ec 14             	sub    esp,0x14
c0022d36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022d3a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022d3e:	fc                   	cld    
c0022d3f:	31 c0                	xor    eax,eax
c0022d41:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022d43:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0022d48:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0022d4d:	50                   	push   eax
c0022d4e:	50                   	push   eax
c0022d4f:	6a 00                	push   0x0
c0022d51:	6a 00                	push   0x0
c0022d53:	6a 00                	push   0x0
c0022d55:	6a 02                	push   0x2
c0022d57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022d5b:	50                   	push   eax
c0022d5c:	53                   	push   ebx
c0022d5d:	e8 ee fc ff ff       	call   c0022a50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022d62:	83 c4 14             	add    esp,0x14
c0022d65:	53                   	push   ebx
c0022d66:	e8 a5 ff ff ff       	call   c0022d10 <ATAPI::diskRemoved()>
c0022d6b:	83 c4 24             	add    esp,0x24
c0022d6e:	5b                   	pop    ebx
c0022d6f:	5f                   	pop    edi
c0022d70:	c3                   	ret    
c0022d71:	90                   	nop

c0022d72 <ATAPI::diskInserted()>:
c0022d72:	53                   	push   ebx
c0022d73:	83 ec 14             	sub    esp,0x14
c0022d76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022d7a:	68 7d a8 02 c0       	push   0xc002a87d
c0022d7f:	e8 09 f9 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022d84:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0022d8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022d8e:	e8 61 11 ff ff       	call   c0013ef4 <PhysicalDisk::startCache()>
c0022d93:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0022d97:	83 c4 18             	add    esp,0x18
c0022d9a:	5b                   	pop    ebx
c0022d9b:	e9 04 31 ff ff       	jmp    c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>

c0022da0 <ATAPI::detectMedia()>:
c0022da0:	56                   	push   esi
c0022da1:	53                   	push   ebx
c0022da2:	83 ec 28             	sub    esp,0x28
c0022da5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022da9:	6a 0c                	push   0xc
c0022dab:	6a 00                	push   0x0
c0022dad:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0022db1:	56                   	push   esi
c0022db2:	e8 c5 d8 fd ff       	call   c000067c <memset>
c0022db7:	58                   	pop    eax
c0022db8:	5a                   	pop    edx
c0022db9:	6a 00                	push   0x0
c0022dbb:	6a 00                	push   0x0
c0022dbd:	6a 00                	push   0x0
c0022dbf:	6a 00                	push   0x0
c0022dc1:	56                   	push   esi
c0022dc2:	53                   	push   ebx
c0022dc3:	e8 88 fc ff ff       	call   c0022a50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022dc8:	83 c4 1c             	add    esp,0x1c
c0022dcb:	6a 0c                	push   0xc
c0022dcd:	6a 00                	push   0x0
c0022dcf:	56                   	push   esi
c0022dd0:	e8 a7 d8 fd ff       	call   c000067c <memset>
c0022dd5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0022dda:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0022ddf:	59                   	pop    ecx
c0022de0:	58                   	pop    eax
c0022de1:	6a 01                	push   0x1
c0022de3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022de7:	50                   	push   eax
c0022de8:	6a 00                	push   0x0
c0022dea:	6a 12                	push   0x12
c0022dec:	56                   	push   esi
c0022ded:	53                   	push   ebx
c0022dee:	e8 5d fc ff ff       	call   c0022a50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022df3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0022df7:	83 c4 20             	add    esp,0x20
c0022dfa:	83 e0 7f             	and    eax,0x7f
c0022dfd:	3c 70                	cmp    al,0x70
c0022dff:	74 15                	je     c0022e16 <ATAPI::detectMedia()+0x76>
c0022e01:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022e08:	75 0c                	jne    c0022e16 <ATAPI::detectMedia()+0x76>
c0022e0a:	83 ec 0c             	sub    esp,0xc
c0022e0d:	53                   	push   ebx
c0022e0e:	e8 5f ff ff ff       	call   c0022d72 <ATAPI::diskInserted()>
c0022e13:	83 c4 10             	add    esp,0x10
c0022e16:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022e1a:	83 e0 0f             	and    eax,0xf
c0022e1d:	3c 02                	cmp    al,0x2
c0022e1f:	75 1b                	jne    c0022e3c <ATAPI::detectMedia()+0x9c>
c0022e21:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0022e26:	75 2d                	jne    c0022e55 <ATAPI::detectMedia()+0xb5>
c0022e28:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022e2f:	74 24                	je     c0022e55 <ATAPI::detectMedia()+0xb5>
c0022e31:	83 ec 0c             	sub    esp,0xc
c0022e34:	53                   	push   ebx
c0022e35:	e8 d6 fe ff ff       	call   c0022d10 <ATAPI::diskRemoved()>
c0022e3a:	eb 16                	jmp    c0022e52 <ATAPI::detectMedia()+0xb2>
c0022e3c:	84 c0                	test   al,al
c0022e3e:	75 15                	jne    c0022e55 <ATAPI::detectMedia()+0xb5>
c0022e40:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0022e47:	75 0c                	jne    c0022e55 <ATAPI::detectMedia()+0xb5>
c0022e49:	83 ec 0c             	sub    esp,0xc
c0022e4c:	53                   	push   ebx
c0022e4d:	e8 20 ff ff ff       	call   c0022d72 <ATAPI::diskInserted()>
c0022e52:	83 c4 10             	add    esp,0x10
c0022e55:	83 c4 24             	add    esp,0x24
c0022e58:	5b                   	pop    ebx
c0022e59:	5e                   	pop    esi
c0022e5a:	c3                   	ret    
c0022e5b:	90                   	nop

c0022e5c <ATAPI::open(int, int, void*)>:
c0022e5c:	53                   	push   ebx
c0022e5d:	83 ec 08             	sub    esp,0x8
c0022e60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022e6c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0022e72:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0022e78:	c1 e0 06             	shl    eax,0x6
c0022e7b:	01 d0                	add    eax,edx
c0022e7d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0022e84:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0022e8a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0022e91:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0022e9b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0022ea1:	6a 04                	push   0x4
c0022ea3:	6a 0c                	push   0xc
c0022ea5:	51                   	push   ecx
c0022ea6:	52                   	push   edx
c0022ea7:	e8 44 e5 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022eac:	90                   	nop
c0022ead:	90                   	nop
c0022eae:	6a 00                	push   0x0
c0022eb0:	6a 0c                	push   0xc
c0022eb2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022eb9:	50                   	push   eax
c0022eba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022ec0:	e8 2b e5 ff ff       	call   c00213f0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ec5:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0022ecc:	83 c4 14             	add    esp,0x14
c0022ecf:	53                   	push   ebx
c0022ed0:	e8 cb fe ff ff       	call   c0022da0 <ATAPI::detectMedia()>
c0022ed5:	31 c0                	xor    eax,eax
c0022ed7:	83 c4 18             	add    esp,0x18
c0022eda:	5b                   	pop    ebx
c0022edb:	c3                   	ret    

c0022edc <ATAPI::read(unsigned long long, int, void*)>:
c0022edc:	55                   	push   ebp
c0022edd:	57                   	push   edi
c0022ede:	56                   	push   esi
c0022edf:	53                   	push   ebx
c0022ee0:	83 ec 1c             	sub    esp,0x1c
c0022ee3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ee7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022eeb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0022eef:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022ef6:	74 41                	je     c0022f39 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0022ef8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022efc:	b9 03 00 00 00       	mov    ecx,0x3
c0022f01:	fc                   	cld    
c0022f02:	31 c0                	xor    eax,eax
c0022f04:	86 fb                	xchg   bl,bh
c0022f06:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0022f08:	c1 c3 10             	rol    ebx,0x10
c0022f0b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0022f10:	89 e8                	mov    eax,ebp
c0022f12:	86 fb                	xchg   bl,bh
c0022f14:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022f18:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0022f1c:	50                   	push   eax
c0022f1d:	50                   	push   eax
c0022f1e:	55                   	push   ebp
c0022f1f:	c1 e5 0b             	shl    ebp,0xb
c0022f22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022f26:	6a 00                	push   0x0
c0022f28:	55                   	push   ebp
c0022f29:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022f2d:	50                   	push   eax
c0022f2e:	56                   	push   esi
c0022f2f:	e8 1c fb ff ff       	call   c0022a50 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0022f34:	83 c4 20             	add    esp,0x20
c0022f37:	eb 1a                	jmp    c0022f53 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0022f39:	83 ec 0c             	sub    esp,0xc
c0022f3c:	56                   	push   esi
c0022f3d:	e8 5e fe ff ff       	call   c0022da0 <ATAPI::detectMedia()>
c0022f42:	83 c4 10             	add    esp,0x10
c0022f45:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0022f4c:	75 aa                	jne    c0022ef8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0022f4e:	b8 02 00 00 00       	mov    eax,0x2
c0022f53:	83 c4 1c             	add    esp,0x1c
c0022f56:	5b                   	pop    ebx
c0022f57:	5e                   	pop    esi
c0022f58:	5f                   	pop    edi
c0022f59:	5d                   	pop    ebp
c0022f5a:	c3                   	ret    
c0022f5b:	90                   	nop

c0022f5c <SATA::close(int, int, void*)>:
c0022f5c:	83 ec 0c             	sub    esp,0xc
c0022f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f63:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022f69:	85 c0                	test   eax,eax
c0022f6b:	74 0c                	je     c0022f79 <SATA::close(int, int, void*)+0x1d>
c0022f6d:	83 ec 0c             	sub    esp,0xc
c0022f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f72:	50                   	push   eax
c0022f73:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022f76:	83 c4 10             	add    esp,0x10
c0022f79:	31 c0                	xor    eax,eax
c0022f7b:	83 c4 0c             	add    esp,0xc
c0022f7e:	c3                   	ret    
c0022f7f:	90                   	nop

c0022f80 <SATA::powerSaving(PowerSavingLevel)>:
c0022f80:	c3                   	ret    
c0022f81:	90                   	nop

c0022f82 <SATA::open(int, int, void*)>:
c0022f82:	53                   	push   ebx
c0022f83:	83 ec 14             	sub    esp,0x14
c0022f86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022f8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022f8e:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0022f98:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0022f9e:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0022fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022fac:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0022fb6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0022fbc:	68 c8 a8 02 c0       	push   0xc002a8c8
c0022fc1:	e8 c7 f6 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0022fc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fc9:	e8 26 0f ff ff       	call   c0013ef4 <PhysicalDisk::startCache()>
c0022fce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022fd1:	e8 ce 2e ff ff       	call   c0015ea4 <createPartitionsForDisk(PhysicalDisk*)>
c0022fd6:	31 c0                	xor    eax,eax
c0022fd8:	83 c4 18             	add    esp,0x18
c0022fdb:	5b                   	pop    ebx
c0022fdc:	c3                   	ret    
c0022fdd:	90                   	nop

c0022fde <SATA::SATA()>:
c0022fde:	83 ec 0c             	sub    esp,0xc
c0022fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe5:	83 ec 04             	sub    esp,0x4
c0022fe8:	68 00 02 00 00       	push   0x200
c0022fed:	68 e3 a8 02 c0       	push   0xc002a8e3
c0022ff2:	50                   	push   eax
c0022ff3:	e8 94 0e ff ff       	call   c0013e8c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022ff8:	83 c4 10             	add    esp,0x10
c0022ffb:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c0023000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023004:	89 10                	mov    DWORD PTR [eax],edx
c0023006:	90                   	nop
c0023007:	83 c4 0c             	add    esp,0xc
c002300a:	c3                   	ret    
c002300b:	90                   	nop

c002300c <SATA::access(unsigned long long, int, void*, bool)>:
c002300c:	55                   	push   ebp
c002300d:	57                   	push   edi
c002300e:	56                   	push   esi
c002300f:	53                   	push   ebx
c0023010:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023016:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c002301d:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023024:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c002302b:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023032:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023036:	83 ff 08             	cmp    edi,0x8
c0023039:	7e 10                	jle    c002304b <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c002303b:	83 ec 0c             	sub    esp,0xc
c002303e:	68 f3 a8 02 c0       	push   0xc002a8f3
c0023043:	e8 0f 61 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023048:	83 c4 10             	add    esp,0x10
c002304b:	51                   	push   ecx
c002304c:	68 00 02 00 00       	push   0x200
c0023051:	68 ee 00 00 00       	push   0xee
c0023056:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c002305a:	55                   	push   ebp
c002305b:	e8 1c d6 fd ff       	call   c000067c <memset>
c0023060:	83 c4 0c             	add    esp,0xc
c0023063:	68 00 02 00 00       	push   0x200
c0023068:	68 ee 00 00 00       	push   0xee
c002306d:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023074:	50                   	push   eax
c0023075:	e8 02 d6 fd ff       	call   c000067c <memset>
c002307a:	55                   	push   ebp
c002307b:	57                   	push   edi
c002307c:	56                   	push   esi
c002307d:	68 25 a9 02 c0       	push   0xc002a925
c0023082:	e8 06 f6 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0023087:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002308d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023093:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023097:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002309d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00230a1:	c1 e0 07             	shl    eax,0x7
c00230a4:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c00230a8:	83 c4 18             	add    esp,0x18
c00230ab:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00230b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230b9:	8d 50 02             	lea    edx,[eax+0x2]
c00230bc:	c1 e2 07             	shl    edx,0x7
c00230bf:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c00230c3:	52                   	push   edx
c00230c4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00230c8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00230ce:	e8 e1 ef ff ff       	call   c00220b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00230d3:	89 c1                	mov    ecx,eax
c00230d5:	58                   	pop    eax
c00230d6:	5a                   	pop    edx
c00230d7:	51                   	push   ecx
c00230d8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00230dc:	68 5a a9 02 c0       	push   0xc002a95a
c00230e1:	e8 a7 f5 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00230e6:	83 c4 10             	add    esp,0x10
c00230e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00230ed:	83 f9 ff             	cmp    ecx,0xffffffff
c00230f0:	0f 84 9a 01 00 00    	je     c0023290 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c00230f6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00230fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023100:	8b 12                	mov    edx,DWORD PTR [edx]
c0023102:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023108:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c002310e:	89 c8                	mov    eax,ecx
c0023110:	c1 e0 05             	shl    eax,0x5
c0023113:	01 c2                	add    edx,eax
c0023115:	8a 02                	mov    al,BYTE PTR [edx]
c0023117:	83 e0 a0             	and    eax,0xffffffa0
c002311a:	83 c8 05             	or     eax,0x5
c002311d:	88 02                	mov    BYTE PTR [edx],al
c002311f:	8d 47 ff             	lea    eax,[edi-0x1]
c0023122:	c1 f8 04             	sar    eax,0x4
c0023125:	40                   	inc    eax
c0023126:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c002312a:	0f b7 c0             	movzx  eax,ax
c002312d:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023133:	83 c0 08             	add    eax,0x8
c0023136:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c002313c:	c1 e0 04             	shl    eax,0x4
c002313f:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023145:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023148:	01 cb                	add    ebx,ecx
c002314a:	52                   	push   edx
c002314b:	50                   	push   eax
c002314c:	6a 00                	push   0x0
c002314e:	53                   	push   ebx
c002314f:	e8 28 d5 fd ff       	call   c000067c <memset>
c0023154:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002315a:	83 c4 10             	add    esp,0x10
c002315d:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023163:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023168:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c002316f:	0d ff 01 00 80       	or     eax,0x800001ff
c0023174:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023178:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002317e:	b8 01 00 00 00       	mov    eax,0x1
c0023183:	89 c2                	mov    edx,eax
c0023185:	c1 e2 04             	shl    edx,0x4
c0023188:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c002318f:	8d 50 08             	lea    edx,[eax+0x8]
c0023192:	40                   	inc    eax
c0023193:	c1 e2 04             	shl    edx,0x4
c0023196:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c002319e:	83 f8 10             	cmp    eax,0x10
c00231a1:	75 e0                	jne    c0023183 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c00231a3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00231a6:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c00231aa:	66 25 00 7f          	and    ax,0x7f00
c00231ae:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c00231b2:	66 0d 27 80          	or     ax,0x8027
c00231b6:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00231ba:	66 89 03             	mov    WORD PTR [ebx],ax
c00231bd:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c00231c1:	89 f0                	mov    eax,esi
c00231c3:	31 d2                	xor    edx,edx
c00231c5:	c1 e8 10             	shr    eax,0x10
c00231c8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00231cb:	89 f0                	mov    eax,esi
c00231cd:	c1 e8 18             	shr    eax,0x18
c00231d0:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00231d3:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00231d7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00231da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00231de:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00231e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231e5:	c1 e0 07             	shl    eax,0x7
c00231e8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00231ec:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c00231f2:	80 e3 88             	and    bl,0x88
c00231f5:	74 0b                	je     c0023202 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c00231f7:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c00231fd:	74 0b                	je     c002320a <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c00231ff:	42                   	inc    edx
c0023200:	eb ea                	jmp    c00231ec <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023202:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023208:	75 0a                	jne    c0023214 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c002320a:	83 ec 0c             	sub    esp,0xc
c002320d:	68 63 a9 02 c0       	push   0xc002a963
c0023212:	eb 60                	jmp    c0023274 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023214:	be 01 00 00 00       	mov    esi,0x1
c0023219:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002321d:	d3 e6                	shl    esi,cl
c002321f:	c1 e3 07             	shl    ebx,0x7
c0023222:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023228:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c002322c:	83 ec 0c             	sub    esp,0xc
c002322f:	68 71 a9 02 c0       	push   0xc002a971
c0023234:	e8 54 f4 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0023239:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002323f:	83 c4 10             	add    esp,0x10
c0023242:	85 c6                	test   esi,eax
c0023244:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002324a:	74 1a                	je     c0023266 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c002324c:	0f ba e0 1e          	bt     eax,0x1e
c0023250:	73 da                	jae    c002322c <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023252:	83 ec 0c             	sub    esp,0xc
c0023255:	68 7e a9 02 c0       	push   0xc002a97e
c002325a:	e8 f8 5e ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002325f:	83 c4 10             	add    esp,0x10
c0023262:	31 c0                	xor    eax,eax
c0023264:	eb 2f                	jmp    c0023295 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023266:	0f ba e0 1e          	bt     eax,0x1e
c002326a:	73 12                	jae    c002327e <SATA::access(unsigned long long, int, void*, bool)+0x272>
c002326c:	83 ec 0c             	sub    esp,0xc
c002326f:	68 7e a9 02 c0       	push   0xc002a97e
c0023274:	e8 de 5e ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023279:	83 c4 10             	add    esp,0x10
c002327c:	eb 12                	jmp    c0023290 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c002327e:	83 ec 0c             	sub    esp,0xc
c0023281:	68 8f a9 02 c0       	push   0xc002a98f
c0023286:	e8 cc 5e ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002328b:	83 c4 10             	add    esp,0x10
c002328e:	eb fe                	jmp    c002328e <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023290:	b8 01 00 00 00       	mov    eax,0x1
c0023295:	81 c4 2c 04 00 00    	add    esp,0x42c
c002329b:	5b                   	pop    ebx
c002329c:	5e                   	pop    esi
c002329d:	5f                   	pop    edi
c002329e:	5d                   	pop    ebp
c002329f:	c3                   	ret    

c00232a0 <SATA::read(unsigned long long, int, void*)>:
c00232a0:	57                   	push   edi
c00232a1:	b8 04 00 00 00       	mov    eax,0x4
c00232a6:	56                   	push   esi
c00232a7:	53                   	push   ebx
c00232a8:	83 ec 10             	sub    esp,0x10
c00232ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00232af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00232b3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00232b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00232ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00232be:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00232c4:	77 3b                	ja     c0023301 <SATA::read(unsigned long long, int, void*)+0x61>
c00232c6:	b8 06 00 00 00       	mov    eax,0x6
c00232cb:	85 d2                	test   edx,edx
c00232cd:	74 32                	je     c0023301 <SATA::read(unsigned long long, int, void*)+0x61>
c00232cf:	50                   	push   eax
c00232d0:	50                   	push   eax
c00232d1:	6a 00                	push   0x0
c00232d3:	52                   	push   edx
c00232d4:	53                   	push   ebx
c00232d5:	57                   	push   edi
c00232d6:	56                   	push   esi
c00232d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232db:	e8 2c fd ff ff       	call   c002300c <SATA::access(unsigned long long, int, void*, bool)>
c00232e0:	83 c4 20             	add    esp,0x20
c00232e3:	85 c0                	test   eax,eax
c00232e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00232e9:	75 11                	jne    c00232fc <SATA::read(unsigned long long, int, void*)+0x5c>
c00232eb:	01 1d 48 e0 02 c0    	add    DWORD PTR ds:0xc002e048,ebx
c00232f1:	e8 00 d2 fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c00232f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232fa:	eb 05                	jmp    c0023301 <SATA::read(unsigned long long, int, void*)+0x61>
c00232fc:	b8 01 00 00 00       	mov    eax,0x1
c0023301:	83 c4 10             	add    esp,0x10
c0023304:	5b                   	pop    ebx
c0023305:	5e                   	pop    esi
c0023306:	5f                   	pop    edi
c0023307:	c3                   	ret    

c0023308 <SATA::write(unsigned long long, int, void*)>:
c0023308:	57                   	push   edi
c0023309:	b8 04 00 00 00       	mov    eax,0x4
c002330e:	56                   	push   esi
c002330f:	53                   	push   ebx
c0023310:	83 ec 10             	sub    esp,0x10
c0023313:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023317:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002331b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002331e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023322:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023326:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002332c:	77 3b                	ja     c0023369 <SATA::write(unsigned long long, int, void*)+0x61>
c002332e:	b8 06 00 00 00       	mov    eax,0x6
c0023333:	85 d2                	test   edx,edx
c0023335:	74 32                	je     c0023369 <SATA::write(unsigned long long, int, void*)+0x61>
c0023337:	50                   	push   eax
c0023338:	50                   	push   eax
c0023339:	6a 01                	push   0x1
c002333b:	52                   	push   edx
c002333c:	53                   	push   ebx
c002333d:	57                   	push   edi
c002333e:	56                   	push   esi
c002333f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023343:	e8 c4 fc ff ff       	call   c002300c <SATA::access(unsigned long long, int, void*, bool)>
c0023348:	83 c4 20             	add    esp,0x20
c002334b:	85 c0                	test   eax,eax
c002334d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023351:	75 11                	jne    c0023364 <SATA::write(unsigned long long, int, void*)+0x5c>
c0023353:	01 1d 44 e0 02 c0    	add    DWORD PTR ds:0xc002e044,ebx
c0023359:	e8 98 d1 fe ff       	call   c00104f6 <VgaText::updateDiskUsage()>
c002335e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023362:	eb 05                	jmp    c0023369 <SATA::write(unsigned long long, int, void*)+0x61>
c0023364:	b8 01 00 00 00       	mov    eax,0x1
c0023369:	83 c4 10             	add    esp,0x10
c002336c:	5b                   	pop    ebx
c002336d:	5e                   	pop    esi
c002336e:	5f                   	pop    edi
c002336f:	c3                   	ret    

c0023370 <AVX::open(int, int, void*)>:
c0023370:	83 ec 0c             	sub    esp,0xc
c0023373:	e8 40 11 00 00       	call   c00244b8 <avxInit>
c0023378:	b8 00 00 00 00       	mov    eax,0x0
c002337d:	83 c4 0c             	add    esp,0xc
c0023380:	c3                   	ret    
c0023381:	90                   	nop

c0023382 <AVX::close(int, int, void*)>:
c0023382:	83 ec 0c             	sub    esp,0xc
c0023385:	e8 2f 11 00 00       	call   c00244b9 <avxClose>
c002338a:	b8 00 00 00 00       	mov    eax,0x0
c002338f:	83 c4 0c             	add    esp,0xc
c0023392:	c3                   	ret    
c0023393:	90                   	nop

c0023394 <AVX::available()>:
c0023394:	83 ec 0c             	sub    esp,0xc
c0023397:	e8 14 11 00 00       	call   c00244b0 <avxDetect>
c002339c:	85 c0                	test   eax,eax
c002339e:	0f 95 c0             	setne  al
c00233a1:	83 c4 0c             	add    esp,0xc
c00233a4:	c3                   	ret    
c00233a5:	90                   	nop

c00233a6 <AVX::save(void*)>:
c00233a6:	83 ec 0c             	sub    esp,0xc
c00233a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233ad:	83 ec 0c             	sub    esp,0xc
c00233b0:	50                   	push   eax
c00233b1:	e8 00 11 00 00       	call   c00244b6 <avxSave>
c00233b6:	83 c4 10             	add    esp,0x10
c00233b9:	90                   	nop
c00233ba:	83 c4 0c             	add    esp,0xc
c00233bd:	c3                   	ret    

c00233be <AVX::load(void*)>:
c00233be:	83 ec 0c             	sub    esp,0xc
c00233c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00233c5:	83 ec 0c             	sub    esp,0xc
c00233c8:	50                   	push   eax
c00233c9:	e8 e9 10 00 00       	call   c00244b7 <avxLoad>
c00233ce:	83 c4 10             	add    esp,0x10
c00233d1:	90                   	nop
c00233d2:	83 c4 0c             	add    esp,0xc
c00233d5:	c3                   	ret    

c00233d6 <AVX::AVX()>:
c00233d6:	83 ec 0c             	sub    esp,0xc
c00233d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233dd:	83 ec 08             	sub    esp,0x8
c00233e0:	68 ec a9 02 c0       	push   0xc002a9ec
c00233e5:	50                   	push   eax
c00233e6:	e8 7f 0b ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c00233eb:	83 c4 10             	add    esp,0x10
c00233ee:	ba fc a9 02 c0       	mov    edx,0xc002a9fc
c00233f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f7:	89 10                	mov    DWORD PTR [eax],edx
c00233f9:	90                   	nop
c00233fa:	83 c4 0c             	add    esp,0xc
c00233fd:	c3                   	ret    

c00233fe <MMX::available()>:
c00233fe:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0023403:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023409:	83 e0 20             	and    eax,0x20
c002340c:	84 c0                	test   al,al
c002340e:	0f 95 c0             	setne  al
c0023411:	c3                   	ret    

c0023412 <MMX::open(int, int, void*)>:
c0023412:	83 ec 0c             	sub    esp,0xc
c0023415:	e8 22 11 00 00       	call   c002453c <x87Init>
c002341a:	b8 00 00 00 00       	mov    eax,0x0
c002341f:	83 c4 0c             	add    esp,0xc
c0023422:	c3                   	ret    
c0023423:	90                   	nop

c0023424 <MMX::close(int, int, void*)>:
c0023424:	83 ec 0c             	sub    esp,0xc
c0023427:	e8 2a 11 00 00       	call   c0024556 <x87Close>
c002342c:	b8 00 00 00 00       	mov    eax,0x0
c0023431:	83 c4 0c             	add    esp,0xc
c0023434:	c3                   	ret    
c0023435:	90                   	nop

c0023436 <MMX::save(void*)>:
c0023436:	83 ec 0c             	sub    esp,0xc
c0023439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002343d:	83 ec 0c             	sub    esp,0xc
c0023440:	50                   	push   eax
c0023441:	e8 eb 10 00 00       	call   c0024531 <x87Save>
c0023446:	83 c4 10             	add    esp,0x10
c0023449:	90                   	nop
c002344a:	83 c4 0c             	add    esp,0xc
c002344d:	c3                   	ret    

c002344e <MMX::load(void*)>:
c002344e:	83 ec 0c             	sub    esp,0xc
c0023451:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023455:	83 ec 0c             	sub    esp,0xc
c0023458:	50                   	push   eax
c0023459:	e8 d9 10 00 00       	call   c0024537 <x87Load>
c002345e:	83 c4 10             	add    esp,0x10
c0023461:	90                   	nop
c0023462:	83 c4 0c             	add    esp,0xc
c0023465:	c3                   	ret    

c0023466 <MMX::MMX()>:
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002346d:	83 ec 08             	sub    esp,0x8
c0023470:	68 2c aa 02 c0       	push   0xc002aa2c
c0023475:	50                   	push   eax
c0023476:	e8 ef 0a ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c002347b:	83 c4 10             	add    esp,0x10
c002347e:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c0023483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023487:	89 10                	mov    DWORD PTR [eax],edx
c0023489:	90                   	nop
c002348a:	83 c4 0c             	add    esp,0xc
c002348d:	c3                   	ret    

c002348e <SSE::open(int, int, void*)>:
c002348e:	83 ec 0c             	sub    esp,0xc
c0023491:	e8 5e 10 00 00       	call   c00244f4 <sseInit>
c0023496:	b8 00 00 00 00       	mov    eax,0x0
c002349b:	83 c4 0c             	add    esp,0xc
c002349e:	c3                   	ret    
c002349f:	90                   	nop

c00234a0 <SSE::close(int, int, void*)>:
c00234a0:	83 ec 0c             	sub    esp,0xc
c00234a3:	e8 5c 10 00 00       	call   c0024504 <sseClose>
c00234a8:	b8 00 00 00 00       	mov    eax,0x0
c00234ad:	83 c4 0c             	add    esp,0xc
c00234b0:	c3                   	ret    
c00234b1:	90                   	nop

c00234b2 <SSE::available()>:
c00234b2:	83 ec 1c             	sub    esp,0x1c
c00234b5:	e8 16 10 00 00       	call   c00244d0 <absolutelyNoChanceInHell>
c00234ba:	85 c0                	test   eax,eax
c00234bc:	0f 95 c0             	setne  al
c00234bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00234c7:	83 c4 1c             	add    esp,0x1c
c00234ca:	c3                   	ret    
c00234cb:	90                   	nop

c00234cc <SSE::save(void*)>:
c00234cc:	83 ec 0c             	sub    esp,0xc
c00234cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00234d3:	83 ec 0c             	sub    esp,0xc
c00234d6:	50                   	push   eax
c00234d7:	e8 0c 10 00 00       	call   c00244e8 <sseSave>
c00234dc:	83 c4 10             	add    esp,0x10
c00234df:	90                   	nop
c00234e0:	83 c4 0c             	add    esp,0xc
c00234e3:	c3                   	ret    

c00234e4 <SSE::load(void*)>:
c00234e4:	83 ec 0c             	sub    esp,0xc
c00234e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00234eb:	83 ec 0c             	sub    esp,0xc
c00234ee:	50                   	push   eax
c00234ef:	e8 fa 0f 00 00       	call   c00244ee <sseLoad>
c00234f4:	83 c4 10             	add    esp,0x10
c00234f7:	90                   	nop
c00234f8:	83 c4 0c             	add    esp,0xc
c00234fb:	c3                   	ret    

c00234fc <SSE::SSE()>:
c00234fc:	83 ec 0c             	sub    esp,0xc
c00234ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023503:	83 ec 08             	sub    esp,0x8
c0023506:	68 6c aa 02 c0       	push   0xc002aa6c
c002350b:	50                   	push   eax
c002350c:	e8 59 0a ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c0023511:	83 c4 10             	add    esp,0x10
c0023514:	ba 7c aa 02 c0       	mov    edx,0xc002aa7c
c0023519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002351d:	89 10                	mov    DWORD PTR [eax],edx
c002351f:	90                   	nop
c0023520:	83 c4 0c             	add    esp,0xc
c0023523:	c3                   	ret    

c0023524 <x87::open(int, int, void*)>:
c0023524:	83 ec 0c             	sub    esp,0xc
c0023527:	e8 10 10 00 00       	call   c002453c <x87Init>
c002352c:	b8 00 00 00 00       	mov    eax,0x0
c0023531:	83 c4 0c             	add    esp,0xc
c0023534:	c3                   	ret    
c0023535:	90                   	nop

c0023536 <x87::close(int, int, void*)>:
c0023536:	83 ec 0c             	sub    esp,0xc
c0023539:	e8 18 10 00 00       	call   c0024556 <x87Close>
c002353e:	b8 00 00 00 00       	mov    eax,0x0
c0023543:	83 c4 0c             	add    esp,0xc
c0023546:	c3                   	ret    
c0023547:	90                   	nop

c0023548 <x87::available()>:
c0023548:	83 ec 0c             	sub    esp,0xc
c002354b:	e8 c6 0f 00 00       	call   c0024516 <x87Detect>
c0023550:	85 c0                	test   eax,eax
c0023552:	0f 95 c0             	setne  al
c0023555:	83 c4 0c             	add    esp,0xc
c0023558:	c3                   	ret    
c0023559:	90                   	nop

c002355a <x87::save(void*)>:
c002355a:	83 ec 0c             	sub    esp,0xc
c002355d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023561:	83 ec 0c             	sub    esp,0xc
c0023564:	50                   	push   eax
c0023565:	e8 c7 0f 00 00       	call   c0024531 <x87Save>
c002356a:	83 c4 10             	add    esp,0x10
c002356d:	90                   	nop
c002356e:	83 c4 0c             	add    esp,0xc
c0023571:	c3                   	ret    

c0023572 <x87::load(void*)>:
c0023572:	83 ec 0c             	sub    esp,0xc
c0023575:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023579:	83 ec 0c             	sub    esp,0xc
c002357c:	50                   	push   eax
c002357d:	e8 b5 0f 00 00       	call   c0024537 <x87Load>
c0023582:	83 c4 10             	add    esp,0x10
c0023585:	90                   	nop
c0023586:	83 c4 0c             	add    esp,0xc
c0023589:	c3                   	ret    

c002358a <x87::x87()>:
c002358a:	83 ec 0c             	sub    esp,0xc
c002358d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023591:	83 ec 08             	sub    esp,0x8
c0023594:	68 ac aa 02 c0       	push   0xc002aaac
c0023599:	50                   	push   eax
c002359a:	e8 cb 09 ff ff       	call   c0013f6a <FPU::FPU(char const*)>
c002359f:	83 c4 10             	add    esp,0x10
c00235a2:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c00235a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ab:	89 10                	mov    DWORD PTR [eax],edx
c00235ad:	90                   	nop
c00235ae:	83 c4 0c             	add    esp,0xc
c00235b1:	c3                   	ret    

c00235b2 <APIC::disable()>:
c00235b2:	90                   	nop
c00235b3:	c3                   	ret    

c00235b4 <APIC::close(int, int, void*)>:
c00235b4:	55                   	push   ebp
c00235b5:	89 e5                	mov    ebp,esp
c00235b7:	83 ec 08             	sub    esp,0x8
c00235ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00235bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00235bf:	83 c0 3c             	add    eax,0x3c
c00235c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00235c4:	83 ec 0c             	sub    esp,0xc
c00235c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00235ca:	ff d0                	call   eax
c00235cc:	83 c4 10             	add    esp,0x10
c00235cf:	b8 00 00 00 00       	mov    eax,0x0
c00235d4:	c9                   	leave  
c00235d5:	c3                   	ret    

c00235d6 <IOAPIC::close(int, int, void*)>:
c00235d6:	b8 00 00 00 00       	mov    eax,0x0
c00235db:	c3                   	ret    

c00235dc <APIC::io_wait()>:
c00235dc:	eb 00                	jmp    c00235de <APIC::io_wait()+0x2>
c00235de:	eb 00                	jmp    c00235e0 <APIC::io_wait()+0x4>
c00235e0:	90                   	nop
c00235e1:	c3                   	ret    

c00235e2 <APIC::getBase()>:
c00235e2:	55                   	push   ebp
c00235e3:	89 e5                	mov    ebp,esp
c00235e5:	83 ec 18             	sub    esp,0x18
c00235e8:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00235ed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00235f3:	83 e0 08             	and    eax,0x8
c00235f6:	84 c0                	test   al,al
c00235f8:	75 07                	jne    c0023601 <APIC::getBase()+0x1f>
c00235fa:	b8 00 00 00 00       	mov    eax,0x0
c00235ff:	eb 21                	jmp    c0023622 <APIC::getBase()+0x40>
c0023601:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0023606:	83 ec 08             	sub    esp,0x8
c0023609:	6a 1b                	push   0x1b
c002360b:	50                   	push   eax
c002360c:	e8 57 b4 fe ff       	call   c000ea68 <Computer::rdmsr(unsigned int)>
c0023611:	83 c4 10             	add    esp,0x10
c0023614:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023617:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002361a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002361d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023622:	c9                   	leave  
c0023623:	c3                   	ret    

c0023624 <APIC::eoi(unsigned char)>:
c0023624:	55                   	push   ebp
c0023625:	89 e5                	mov    ebp,esp
c0023627:	83 ec 28             	sub    esp,0x28
c002362a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002362d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0023630:	83 ec 0c             	sub    esp,0xc
c0023633:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023636:	e8 a7 ff ff ff       	call   c00235e2 <APIC::getBase()>
c002363b:	83 c4 10             	add    esp,0x10
c002363e:	05 b0 00 00 00       	add    eax,0xb0
c0023643:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0023646:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023649:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002364f:	90                   	nop
c0023650:	c9                   	leave  
c0023651:	c3                   	ret    

c0023652 <APIC::open(int, int, void*)>:
c0023652:	55                   	push   ebp
c0023653:	89 e5                	mov    ebp,esp
c0023655:	57                   	push   edi
c0023656:	56                   	push   esi
c0023657:	53                   	push   ebx
c0023658:	83 ec 2c             	sub    esp,0x2c
c002365b:	83 ec 0c             	sub    esp,0xc
c002365e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023661:	e8 7c ff ff ff       	call   c00235e2 <APIC::getBase()>
c0023666:	83 c4 10             	add    esp,0x10
c0023669:	89 c2                	mov    edx,eax
c002366b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002366e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023674:	0f b6 f8             	movzx  edi,al
c0023677:	89 d0                	mov    eax,edx
c0023679:	ba 00 00 00 00       	mov    edx,0x0
c002367e:	89 c1                	mov    ecx,eax
c0023680:	80 e5 ff             	and    ch,0xff
c0023683:	89 cb                	mov    ebx,ecx
c0023685:	0f b6 f2             	movzx  esi,dl
c0023688:	89 d8                	mov    eax,ebx
c002368a:	89 f2                	mov    edx,esi
c002368c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002368f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023692:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023696:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002369a:	83 e0 00             	and    eax,0x0
c002369d:	09 d0                	or     eax,edx
c002369f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00236a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00236a6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00236ac:	8d 50 01             	lea    edx,[eax+0x1]
c00236af:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00236b2:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00236b8:	0f b6 d0             	movzx  edx,al
c00236bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00236be:	83 c2 08             	add    edx,0x8
c00236c1:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00236c5:	0f b6 c9             	movzx  ecx,cl
c00236c8:	81 c9 00 00 01 00    	or     ecx,0x10000
c00236ce:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00236d2:	83 ec 0c             	sub    esp,0xc
c00236d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00236d8:	e8 05 ff ff ff       	call   c00235e2 <APIC::getBase()>
c00236dd:	83 c4 10             	add    esp,0x10
c00236e0:	05 f0 00 00 00       	add    eax,0xf0
c00236e5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00236e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00236eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00236ed:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00236f0:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00236f7:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00236fe:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023701:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023704:	89 10                	mov    DWORD PTR [eax],edx
c0023706:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002370d:	a1 30 c6 02 c0       	mov    eax,ds:0xc002c630
c0023712:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0023715:	7d 7c                	jge    c0023793 <APIC::open(int, int, void*)+0x141>
c0023717:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002371a:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c0023721:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0023724:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023727:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c002372e:	c1 e8 08             	shr    eax,0x8
c0023731:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0023735:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023738:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c002373f:	c1 e8 18             	shr    eax,0x18
c0023742:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0023745:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0023749:	75 40                	jne    c002378b <APIC::open(int, int, void*)+0x139>
c002374b:	83 ec 0c             	sub    esp,0xc
c002374e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023751:	e8 8c fe ff ff       	call   c00235e2 <APIC::getBase()>
c0023756:	83 c4 10             	add    esp,0x10
c0023759:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002375d:	75 07                	jne    c0023766 <APIC::open(int, int, void*)+0x114>
c002375f:	ba 60 03 00 00       	mov    edx,0x360
c0023764:	eb 05                	jmp    c002376b <APIC::open(int, int, void*)+0x119>
c0023766:	ba 50 03 00 00       	mov    edx,0x350
c002376b:	01 d0                	add    eax,edx
c002376d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0023770:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023773:	8b 00                	mov    eax,DWORD PTR [eax]
c0023775:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0023778:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002377f:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0023783:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0023786:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023789:	89 10                	mov    DWORD PTR [eax],edx
c002378b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002378e:	e9 7a ff ff ff       	jmp    c002370d <APIC::open(int, int, void*)+0xbb>
c0023793:	b8 00 00 00 00       	mov    eax,0x0
c0023798:	8d 65 f4             	lea    esp,[ebp-0xc]
c002379b:	5b                   	pop    ebx
c002379c:	5e                   	pop    esi
c002379d:	5f                   	pop    edi
c002379e:	5d                   	pop    ebp
c002379f:	c3                   	ret    

c00237a0 <IOAPIC::IOAPIC()>:
c00237a0:	83 ec 0c             	sub    esp,0xc
c00237a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a7:	83 ec 08             	sub    esp,0x8
c00237aa:	68 ec aa 02 c0       	push   0xc002aaec
c00237af:	50                   	push   eax
c00237b0:	e8 b7 04 ff ff       	call   c0013c6c <Device::Device(char const*)>
c00237b5:	83 c4 10             	add    esp,0x10
c00237b8:	ba 14 ac 02 c0       	mov    edx,0xc002ac14
c00237bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237c1:	89 10                	mov    DWORD PTR [eax],edx
c00237c3:	90                   	nop
c00237c4:	83 c4 0c             	add    esp,0xc
c00237c7:	c3                   	ret    

c00237c8 <APIC::APIC()>:
c00237c8:	53                   	push   ebx
c00237c9:	83 ec 18             	sub    esp,0x18
c00237cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00237d0:	83 ec 08             	sub    esp,0x8
c00237d3:	68 f4 aa 02 c0       	push   0xc002aaf4
c00237d8:	50                   	push   eax
c00237d9:	e8 e6 0b ff ff       	call   c00143c4 <InterruptController::InterruptController(char const*)>
c00237de:	83 c4 10             	add    esp,0x10
c00237e1:	ba cc ab 02 c0       	mov    edx,0xc002abcc
c00237e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00237ea:	89 10                	mov    DWORD PTR [eax],edx
c00237ec:	a0 a0 e0 02 c0       	mov    al,ds:0xc002e0a0
c00237f1:	83 f0 01             	xor    eax,0x1
c00237f4:	84 c0                	test   al,al
c00237f6:	0f 84 a1 00 00 00    	je     c002389d <APIC::APIC()+0xd5>
c00237fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0023801:	a0 e0 c6 02 c0       	mov    al,ds:0xc002c6e0
c0023806:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002380a:	0f 83 86 00 00 00    	jae    c0023896 <APIC::APIC()+0xce>
c0023810:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0023818:	83 ec 0c             	sub    esp,0xc
c002381b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002381f:	e8 9c bc fe ff       	call   c000f4c0 <malloc>
c0023824:	83 c4 10             	add    esp,0x10
c0023827:	89 c3                	mov    ebx,eax
c0023829:	83 ec 0c             	sub    esp,0xc
c002382c:	53                   	push   ebx
c002382d:	e8 6e ff ff ff       	call   c00237a0 <IOAPIC::IOAPIC()>
c0023832:	83 c4 10             	add    esp,0x10
c0023835:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0023839:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002383e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023842:	89 14 85 80 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f80],edx
c0023849:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c002384e:	40                   	inc    eax
c002384f:	a3 60 e0 02 c0       	mov    ds:0xc002e060,eax
c0023854:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c0023859:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002385f:	83 ec 08             	sub    esp,0x8
c0023862:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023866:	50                   	push   eax
c0023867:	e8 10 02 ff ff       	call   c0013a7c <Device::addChild(Device*)>
c002386c:	83 c4 10             	add    esp,0x10
c002386f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023873:	8b 00                	mov    eax,DWORD PTR [eax]
c0023875:	83 c0 08             	add    eax,0x8
c0023878:	8b 00                	mov    eax,DWORD PTR [eax]
c002387a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002387f:	6a 00                	push   0x0
c0023881:	6a 00                	push   0x0
c0023883:	52                   	push   edx
c0023884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023888:	ff d0                	call   eax
c002388a:	83 c4 10             	add    esp,0x10
c002388d:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0023891:	e9 6b ff ff ff       	jmp    c0023801 <APIC::APIC()+0x39>
c0023896:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c002389d:	90                   	nop
c002389e:	83 c4 18             	add    esp,0x18
c00238a1:	5b                   	pop    ebx
c00238a2:	c3                   	ret    
c00238a3:	90                   	nop

c00238a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00238a4:	55                   	push   ebp
c00238a5:	89 e5                	mov    ebp,esp
c00238a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00238b0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00238b3:	72 1d                	jb     c00238d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00238b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238b8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00238be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238c1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00238c7:	01 d0                	add    eax,edx
c00238c9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00238cc:	73 04                	jae    c00238d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00238ce:	b0 01                	mov    al,0x1
c00238d0:	eb 02                	jmp    c00238d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00238d2:	b0 00                	mov    al,0x0
c00238d4:	5d                   	pop    ebp
c00238d5:	c3                   	ret    

c00238d6 <IOAPIC::read(int)>:
c00238d6:	55                   	push   ebp
c00238d7:	89 e5                	mov    ebp,esp
c00238d9:	83 ec 10             	sub    esp,0x10
c00238dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00238df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00238e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00238e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238eb:	0f b6 d0             	movzx  edx,al
c00238ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00238f1:	89 10                	mov    DWORD PTR [eax],edx
c00238f3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00238f6:	83 c0 10             	add    eax,0x10
c00238f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00238fb:	c9                   	leave  
c00238fc:	c3                   	ret    
c00238fd:	90                   	nop

c00238fe <IOAPIC::open(int, int, void*)>:
c00238fe:	55                   	push   ebp
c00238ff:	89 e5                	mov    ebp,esp
c0023901:	57                   	push   edi
c0023902:	56                   	push   esi
c0023903:	53                   	push   ebx
c0023904:	83 ec 0c             	sub    esp,0xc
c0023907:	83 ec 0c             	sub    esp,0xc
c002390a:	68 1f ab 02 c0       	push   0xc002ab1f
c002390f:	e8 79 ed fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0023914:	83 c4 10             	add    esp,0x10
c0023917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002391a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002391d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023926:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002392c:	8b 14 85 20 c7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd38e0]
c0023933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023936:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002393c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002393f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023945:	8b 14 85 a0 c7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3860]
c002394c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002394f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023958:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002395e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023961:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0023967:	0f b6 f8             	movzx  edi,al
c002396a:	89 d0                	mov    eax,edx
c002396c:	ba 00 00 00 00       	mov    edx,0x0
c0023971:	89 c1                	mov    ecx,eax
c0023973:	80 e5 ff             	and    ch,0xff
c0023976:	89 cb                	mov    ebx,ecx
c0023978:	0f b6 f2             	movzx  esi,dl
c002397b:	89 d8                	mov    eax,ebx
c002397d:	89 f2                	mov    edx,esi
c002397f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0023982:	8d 5f 08             	lea    ebx,[edi+0x8]
c0023985:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0023989:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002398d:	83 e0 00             	and    eax,0x0
c0023990:	09 d0                	or     eax,edx
c0023992:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0023996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023999:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002399f:	8d 50 01             	lea    edx,[eax+0x1]
c00239a2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00239a5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00239ab:	0f b6 d0             	movzx  edx,al
c00239ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00239b1:	83 c2 08             	add    edx,0x8
c00239b4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00239b8:	0f b6 c9             	movzx  ecx,cl
c00239bb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00239c1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00239c5:	83 ec 08             	sub    esp,0x8
c00239c8:	6a 01                	push   0x1
c00239ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00239cd:	e8 04 ff ff ff       	call   c00238d6 <IOAPIC::read(int)>
c00239d2:	83 c4 10             	add    esp,0x10
c00239d5:	c1 f8 10             	sar    eax,0x10
c00239d8:	0f b6 c0             	movzx  eax,al
c00239db:	8d 50 01             	lea    edx,[eax+0x1]
c00239de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00239e1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00239e7:	b8 00 00 00 00       	mov    eax,0x0
c00239ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00239ef:	5b                   	pop    ebx
c00239f0:	5e                   	pop    esi
c00239f1:	5f                   	pop    edi
c00239f2:	5d                   	pop    ebp
c00239f3:	c3                   	ret    

c00239f4 <IOAPIC::write(int, int)>:
c00239f4:	55                   	push   ebp
c00239f5:	89 e5                	mov    ebp,esp
c00239f7:	83 ec 10             	sub    esp,0x10
c00239fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00239fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023a03:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0023a06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a09:	0f b6 d0             	movzx  edx,al
c0023a0c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023a0f:	89 10                	mov    DWORD PTR [eax],edx
c0023a11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023a14:	8d 50 10             	lea    edx,[eax+0x10]
c0023a17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023a1a:	89 02                	mov    DWORD PTR [edx],eax
c0023a1c:	90                   	nop
c0023a1d:	c9                   	leave  
c0023a1e:	c3                   	ret    
c0023a1f:	90                   	nop

c0023a20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0023a20:	55                   	push   ebp
c0023a21:	89 e5                	mov    ebp,esp
c0023a23:	53                   	push   ebx
c0023a24:	83 ec 2c             	sub    esp,0x2c
c0023a27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a2a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0023a2d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0023a30:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0023a33:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0023a36:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023a39:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023a3c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023a3f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a42:	88 d8                	mov    al,bl
c0023a44:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0023a47:	88 c8                	mov    al,cl
c0023a49:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023a4c:	88 d0                	mov    al,dl
c0023a4e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0023a51:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a55:	83 c0 08             	add    eax,0x8
c0023a58:	01 c0                	add    eax,eax
c0023a5a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023a5d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a61:	83 c0 08             	add    eax,0x8
c0023a64:	01 c0                	add    eax,eax
c0023a66:	40                   	inc    eax
c0023a67:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0023a6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023a6d:	50                   	push   eax
c0023a6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023a71:	e8 60 fe ff ff       	call   c00238d6 <IOAPIC::read(int)>
c0023a76:	83 c4 08             	add    esp,0x8
c0023a79:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a7c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0023a83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0023a86:	c1 e0 18             	shl    eax,0x18
c0023a89:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0023a8c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0023a8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0023a92:	52                   	push   edx
c0023a93:	50                   	push   eax
c0023a94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023a97:	e8 58 ff ff ff       	call   c00239f4 <IOAPIC::write(int, int)>
c0023a9c:	83 c4 0c             	add    esp,0xc
c0023a9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023aa2:	50                   	push   eax
c0023aa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023aa6:	e8 2b fe ff ff       	call   c00238d6 <IOAPIC::read(int)>
c0023aab:	83 c4 08             	add    esp,0x8
c0023aae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0023ab1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0023ab8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0023abf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0023ac6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023aca:	74 09                	je     c0023ad5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0023acc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0023ad3:	eb 07                	jmp    c0023adc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0023ad5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0023adc:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0023ae0:	74 09                	je     c0023aeb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0023ae2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0023ae9:	eb 07                	jmp    c0023af2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0023aeb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0023af2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0023af9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0023afd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0023b00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0023b03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023b06:	52                   	push   edx
c0023b07:	50                   	push   eax
c0023b08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023b0b:	e8 e4 fe ff ff       	call   c00239f4 <IOAPIC::write(int, int)>
c0023b10:	83 c4 0c             	add    esp,0xc
c0023b13:	90                   	nop
c0023b14:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0023b17:	c9                   	leave  
c0023b18:	c3                   	ret    
c0023b19:	90                   	nop

c0023b1a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0023b1a:	55                   	push   ebp
c0023b1b:	89 e5                	mov    ebp,esp
c0023b1d:	57                   	push   edi
c0023b1e:	56                   	push   esi
c0023b1f:	53                   	push   ebx
c0023b20:	83 ec 2c             	sub    esp,0x2c
c0023b23:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023b26:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0023b29:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023b2d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0023b31:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0023b35:	74 5a                	je     c0023b91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023b37:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0023b3b:	7f 44                	jg     c0023b81 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0023b3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b40:	05 60 b0 02 c0       	add    eax,0xc002b060
c0023b45:	8a 00                	mov    al,BYTE PTR [eax]
c0023b47:	0f b6 c0             	movzx  eax,al
c0023b4a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023b4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b50:	66 8b 84 00 c0 c6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd3940]
c0023b58:	0f b7 c0             	movzx  eax,ax
c0023b5b:	83 e0 02             	and    eax,0x2
c0023b5e:	85 c0                	test   eax,eax
c0023b60:	74 04                	je     c0023b66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0023b62:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0023b66:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023b69:	66 8b 84 00 c0 c6 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd3940]
c0023b71:	0f b7 c0             	movzx  eax,ax
c0023b74:	83 e0 08             	and    eax,0x8
c0023b77:	85 c0                	test   eax,eax
c0023b79:	74 16                	je     c0023b91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023b7b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0023b7f:	eb 10                	jmp    c0023b91 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0023b81:	83 ec 0c             	sub    esp,0xc
c0023b84:	68 30 ab 02 c0       	push   0xc002ab30
c0023b89:	e8 c9 55 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023b8e:	83 c4 10             	add    esp,0x10
c0023b91:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0023b95:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c0023b9a:	83 ec 08             	sub    esp,0x8
c0023b9d:	50                   	push   eax
c0023b9e:	68 68 ab 02 c0       	push   0xc002ab68
c0023ba3:	e8 e5 ea fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0023ba8:	83 c4 10             	add    esp,0x10
c0023bab:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0023bb2:	a1 60 e0 02 c0       	mov    eax,ds:0xc002e060
c0023bb7:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0023bba:	7d 67                	jge    c0023c23 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0023bbc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023bbf:	8b 04 85 80 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f80]
c0023bc6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023bc9:	83 ec 08             	sub    esp,0x8
c0023bcc:	52                   	push   edx
c0023bcd:	50                   	push   eax
c0023bce:	e8 d1 fc ff ff       	call   c00238a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0023bd3:	83 c4 10             	add    esp,0x10
c0023bd6:	84 c0                	test   al,al
c0023bd8:	74 44                	je     c0023c1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0023bda:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0023bdd:	8b 1c 85 80 e0 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1f80]
c0023be4:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0023be8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0023beb:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0023bef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023bf2:	83 c0 20             	add    eax,0x20
c0023bf5:	0f b6 f0             	movzx  esi,al
c0023bf8:	b8 00 00 00 00       	mov    eax,0x0
c0023bfd:	99                   	cdq    
c0023bfe:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023c01:	0f b6 c9             	movzx  ecx,cl
c0023c04:	83 ec 04             	sub    esp,0x4
c0023c07:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0023c0a:	57                   	push   edi
c0023c0b:	56                   	push   esi
c0023c0c:	52                   	push   edx
c0023c0d:	50                   	push   eax
c0023c0e:	51                   	push   ecx
c0023c0f:	53                   	push   ebx
c0023c10:	e8 0b fe ff ff       	call   c0023a20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0023c15:	83 c4 20             	add    esp,0x20
c0023c18:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0023c1c:	eb 05                	jmp    c0023c23 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0023c1e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0023c21:	eb 8f                	jmp    c0023bb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0023c23:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0023c26:	83 f0 01             	xor    eax,0x1
c0023c29:	84 c0                	test   al,al
c0023c2b:	74 10                	je     c0023c3d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0023c2d:	83 ec 0c             	sub    esp,0xc
c0023c30:	68 7f ab 02 c0       	push   0xc002ab7f
c0023c35:	e8 1d 55 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023c3a:	83 c4 10             	add    esp,0x10
c0023c3d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0023c41:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0023c48:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0023c4c:	7f 65                	jg     c0023cb3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0023c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023c51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023c54:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023c5b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023c5e:	01 ca                	add    edx,ecx
c0023c60:	83 c2 54             	add    edx,0x54
c0023c63:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0023c67:	85 c0                	test   eax,eax
c0023c69:	75 43                	jne    c0023cae <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0023c6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023c6e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023c71:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023c78:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023c7b:	01 ca                	add    edx,ecx
c0023c7d:	8d 4a 54             	lea    ecx,[edx+0x54]
c0023c80:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0023c83:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0023c87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023c8a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0023c8d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0023c94:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023c97:	01 ca                	add    edx,ecx
c0023c99:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0023c9f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023ca2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0023ca6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023ca9:	83 e8 20             	sub    eax,0x20
c0023cac:	eb 1a                	jmp    c0023cc8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0023cae:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0023cb1:	eb 95                	jmp    c0023c48 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0023cb3:	83 ec 0c             	sub    esp,0xc
c0023cb6:	68 8c ab 02 c0       	push   0xc002ab8c
c0023cbb:	e8 97 54 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0023cc0:	83 c4 10             	add    esp,0x10
c0023cc3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023cc8:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023ccb:	5b                   	pop    ebx
c0023ccc:	5e                   	pop    esi
c0023ccd:	5f                   	pop    edi
c0023cce:	5d                   	pop    ebp
c0023ccf:	c3                   	ret    

c0023cd0 <PIC::disable()>:
c0023cd0:	55                   	push   ebp
c0023cd1:	89 e5                	mov    ebp,esp
c0023cd3:	83 ec 10             	sub    esp,0x10
c0023cd6:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0023cdc:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0023ce0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023ce3:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0023ce7:	ee                   	out    dx,al
c0023ce8:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0023cee:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0023cf2:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0023cf5:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0023cf9:	ee                   	out    dx,al
c0023cfa:	90                   	nop
c0023cfb:	c9                   	leave  
c0023cfc:	c3                   	ret    
c0023cfd:	90                   	nop

c0023cfe <PIC::close(int, int, void*)>:
c0023cfe:	55                   	push   ebp
c0023cff:	89 e5                	mov    ebp,esp
c0023d01:	83 ec 08             	sub    esp,0x8
c0023d04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023d07:	8b 00                	mov    eax,DWORD PTR [eax]
c0023d09:	83 c0 3c             	add    eax,0x3c
c0023d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0023d0e:	83 ec 0c             	sub    esp,0xc
c0023d11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023d14:	ff d0                	call   eax
c0023d16:	83 c4 10             	add    esp,0x10
c0023d19:	b8 00 00 00 00       	mov    eax,0x0
c0023d1e:	c9                   	leave  
c0023d1f:	c3                   	ret    

c0023d20 <PIC::PIC()>:
c0023d20:	83 ec 0c             	sub    esp,0xc
c0023d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d27:	83 ec 08             	sub    esp,0x8
c0023d2a:	68 38 ac 02 c0       	push   0xc002ac38
c0023d2f:	50                   	push   eax
c0023d30:	e8 8f 06 ff ff       	call   c00143c4 <InterruptController::InterruptController(char const*)>
c0023d35:	83 c4 10             	add    esp,0x10
c0023d38:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0023d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d41:	89 10                	mov    DWORD PTR [eax],edx
c0023d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d47:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023d4d:	0f b6 d0             	movzx  edx,al
c0023d50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d54:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0023d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023d65:	0f b6 d0             	movzx  edx,al
c0023d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6c:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d75:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0023d7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023d82:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023d88:	0f b6 d0             	movzx  edx,al
c0023d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d8f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023d93:	83 e1 3f             	and    ecx,0x3f
c0023d96:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d9e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023da4:	0f b6 d0             	movzx  edx,al
c0023da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dab:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0023db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023dbc:	0f b6 d0             	movzx  edx,al
c0023dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dc3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0023dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dcc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023dd2:	8d 50 01             	lea    edx,[eax+0x1]
c0023dd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023dd9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023ddf:	0f b6 d0             	movzx  edx,al
c0023de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023de6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0023dea:	83 e1 3f             	and    ecx,0x3f
c0023ded:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023df1:	90                   	nop
c0023df2:	83 c4 0c             	add    esp,0xc
c0023df5:	c3                   	ret    

c0023df6 <PIC::ioWait()>:
c0023df6:	eb 00                	jmp    c0023df8 <PIC::ioWait()+0x2>
c0023df8:	eb 00                	jmp    c0023dfa <PIC::ioWait()+0x4>
c0023dfa:	90                   	nop
c0023dfb:	c3                   	ret    

c0023dfc <PIC::getIRQReg(int)>:
c0023dfc:	55                   	push   ebp
c0023dfd:	89 e5                	mov    ebp,esp
c0023dff:	83 ec 10             	sub    esp,0x10
c0023e02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023e05:	0f b6 c0             	movzx  eax,al
c0023e08:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023e0e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0023e11:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023e14:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023e18:	ee                   	out    dx,al
c0023e19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023e1c:	0f b6 c0             	movzx  eax,al
c0023e1f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023e25:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0023e28:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023e2b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023e2f:	ee                   	out    dx,al
c0023e30:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0023e36:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0023e3a:	89 c2                	mov    edx,eax
c0023e3c:	ec                   	in     al,dx
c0023e3d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0023e40:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023e43:	0f b6 c0             	movzx  eax,al
c0023e46:	c1 e0 08             	shl    eax,0x8
c0023e49:	89 c1                	mov    ecx,eax
c0023e4b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0023e51:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0023e55:	89 c2                	mov    edx,eax
c0023e57:	ec                   	in     al,dx
c0023e58:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0023e5b:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0023e5e:	0f b6 c0             	movzx  eax,al
c0023e61:	09 c8                	or     eax,ecx
c0023e63:	c9                   	leave  
c0023e64:	c3                   	ret    
c0023e65:	90                   	nop

c0023e66 <PIC::eoi(unsigned char)>:
c0023e66:	55                   	push   ebp
c0023e67:	89 e5                	mov    ebp,esp
c0023e69:	83 ec 14             	sub    esp,0x14
c0023e6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023e6f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0023e72:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023e76:	75 1e                	jne    c0023e96 <PIC::eoi(unsigned char)+0x30>
c0023e78:	6a 0b                	push   0xb
c0023e7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e7d:	e8 7a ff ff ff       	call   c0023dfc <PIC::getIRQReg(int)>
c0023e82:	83 c4 08             	add    esp,0x8
c0023e85:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0023e89:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0023e8d:	25 80 00 00 00       	and    eax,0x80
c0023e92:	85 c0                	test   eax,eax
c0023e94:	74 5f                	je     c0023ef5 <PIC::eoi(unsigned char)+0x8f>
c0023e96:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0023e9a:	75 2d                	jne    c0023ec9 <PIC::eoi(unsigned char)+0x63>
c0023e9c:	6a 0b                	push   0xb
c0023e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ea1:	e8 56 ff ff ff       	call   c0023dfc <PIC::getIRQReg(int)>
c0023ea6:	83 c4 08             	add    esp,0x8
c0023ea9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0023ead:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0023eb0:	66 85 c0             	test   ax,ax
c0023eb3:	78 14                	js     c0023ec9 <PIC::eoi(unsigned char)+0x63>
c0023eb5:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0023ebb:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0023ebf:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0023ec2:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0023ec6:	ee                   	out    dx,al
c0023ec7:	eb 2d                	jmp    c0023ef6 <PIC::eoi(unsigned char)+0x90>
c0023ec9:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0023ecd:	76 12                	jbe    c0023ee1 <PIC::eoi(unsigned char)+0x7b>
c0023ecf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0023ed5:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0023ed9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0023edc:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0023ee0:	ee                   	out    dx,al
c0023ee1:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0023ee7:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0023eeb:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0023eee:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0023ef2:	ee                   	out    dx,al
c0023ef3:	eb 01                	jmp    c0023ef6 <PIC::eoi(unsigned char)+0x90>
c0023ef5:	90                   	nop
c0023ef6:	c9                   	leave  
c0023ef7:	c3                   	ret    

c0023ef8 <PIC::remap()>:
c0023ef8:	55                   	push   ebp
c0023ef9:	89 e5                	mov    ebp,esp
c0023efb:	83 ec 48             	sub    esp,0x48
c0023efe:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0023f05:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0023f0c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0023f12:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0023f15:	89 c2                	mov    edx,eax
c0023f17:	ec                   	in     al,dx
c0023f18:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0023f1b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0023f1e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0023f21:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0023f27:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0023f2a:	89 c2                	mov    edx,eax
c0023f2c:	ec                   	in     al,dx
c0023f2d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0023f30:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0023f33:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0023f36:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0023f3c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0023f40:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0023f43:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0023f46:	ee                   	out    dx,al
c0023f47:	83 ec 0c             	sub    esp,0xc
c0023f4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f4d:	e8 a4 fe ff ff       	call   c0023df6 <PIC::ioWait()>
c0023f52:	83 c4 10             	add    esp,0x10
c0023f55:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0023f5b:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0023f5f:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0023f62:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0023f65:	ee                   	out    dx,al
c0023f66:	83 ec 0c             	sub    esp,0xc
c0023f69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f6c:	e8 85 fe ff ff       	call   c0023df6 <PIC::ioWait()>
c0023f71:	83 c4 10             	add    esp,0x10
c0023f74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0023f77:	0f b6 c0             	movzx  eax,al
c0023f7a:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0023f80:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0023f83:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0023f86:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0023f89:	ee                   	out    dx,al
c0023f8a:	83 ec 0c             	sub    esp,0xc
c0023f8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023f90:	e8 61 fe ff ff       	call   c0023df6 <PIC::ioWait()>
c0023f95:	83 c4 10             	add    esp,0x10
c0023f98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023f9b:	0f b6 c0             	movzx  eax,al
c0023f9e:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0023fa4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0023fa7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0023faa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0023fad:	ee                   	out    dx,al
c0023fae:	83 ec 0c             	sub    esp,0xc
c0023fb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023fb4:	e8 3d fe ff ff       	call   c0023df6 <PIC::ioWait()>
c0023fb9:	83 c4 10             	add    esp,0x10
c0023fbc:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0023fc2:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0023fc6:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0023fc9:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0023fcc:	ee                   	out    dx,al
c0023fcd:	83 ec 0c             	sub    esp,0xc
c0023fd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023fd3:	e8 1e fe ff ff       	call   c0023df6 <PIC::ioWait()>
c0023fd8:	83 c4 10             	add    esp,0x10
c0023fdb:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0023fe1:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0023fe5:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0023fe8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0023feb:	ee                   	out    dx,al
c0023fec:	83 ec 0c             	sub    esp,0xc
c0023fef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ff2:	e8 ff fd ff ff       	call   c0023df6 <PIC::ioWait()>
c0023ff7:	83 c4 10             	add    esp,0x10
c0023ffa:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024000:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024004:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024007:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002400a:	ee                   	out    dx,al
c002400b:	83 ec 0c             	sub    esp,0xc
c002400e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024011:	e8 e0 fd ff ff       	call   c0023df6 <PIC::ioWait()>
c0024016:	83 c4 10             	add    esp,0x10
c0024019:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002401f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024023:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024026:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024029:	ee                   	out    dx,al
c002402a:	83 ec 0c             	sub    esp,0xc
c002402d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024030:	e8 c1 fd ff ff       	call   c0023df6 <PIC::ioWait()>
c0024035:	83 c4 10             	add    esp,0x10
c0024038:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002403c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024042:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024045:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024048:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002404b:	ee                   	out    dx,al
c002404c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024050:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024056:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024059:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002405c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002405f:	ee                   	out    dx,al
c0024060:	90                   	nop
c0024061:	c9                   	leave  
c0024062:	c3                   	ret    
c0024063:	90                   	nop

c0024064 <PIC::open(int, int, void*)>:
c0024064:	55                   	push   ebp
c0024065:	89 e5                	mov    ebp,esp
c0024067:	83 ec 18             	sub    esp,0x18
c002406a:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024070:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024074:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024077:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002407b:	ee                   	out    dx,al
c002407c:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024082:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024086:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024089:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002408d:	ee                   	out    dx,al
c002408e:	83 ec 0c             	sub    esp,0xc
c0024091:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024094:	e8 5f fe ff ff       	call   c0023ef8 <PIC::remap()>
c0024099:	83 c4 10             	add    esp,0x10
c002409c:	b8 00 00 00 00       	mov    eax,0x0
c00240a1:	c9                   	leave  
c00240a2:	c3                   	ret    
c00240a3:	90                   	nop

c00240a4 <APICTimer::close(int, int, void*)>:
c00240a4:	b8 00 00 00 00       	mov    eax,0x0
c00240a9:	c3                   	ret    

c00240aa <apicTimerHandler(regs*, void*)>:
c00240aa:	83 ec 0c             	sub    esp,0xc
c00240ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00240b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00240b3:	99                   	cdq    
c00240b4:	52                   	push   edx
c00240b5:	50                   	push   eax
c00240b6:	6a 00                	push   0x0
c00240b8:	68 00 ca 9a 3b       	push   0x3b9aca00
c00240bd:	e8 8a 07 00 00       	call   c002484c <__udivdi3>
c00240c2:	83 c4 10             	add    esp,0x10
c00240c5:	83 ec 08             	sub    esp,0x8
c00240c8:	52                   	push   edx
c00240c9:	50                   	push   eax
c00240ca:	e8 7a 21 ff ff       	call   c0016249 <timerHandler(unsigned long long)>
c00240cf:	83 c4 10             	add    esp,0x10
c00240d2:	90                   	nop
c00240d3:	83 c4 0c             	add    esp,0xc
c00240d6:	c3                   	ret    
c00240d7:	90                   	nop

c00240d8 <APICTimer::write(int)>:
c00240d8:	53                   	push   ebx
c00240d9:	83 ec 28             	sub    esp,0x28
c00240dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00240e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00240e4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00240ea:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00240ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00240f5:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00240fb:	83 ec 0c             	sub    esp,0xc
c00240fe:	50                   	push   eax
c00240ff:	e8 de f4 ff ff       	call   c00235e2 <APIC::getBase()>
c0024104:	83 c4 10             	add    esp,0x10
c0024107:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002410b:	a1 f0 c3 02 c0       	mov    eax,ds:0xc002c3f0
c0024110:	8b 15 f4 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c3f4
c0024116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002411a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002411e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024122:	05 e0 03 00 00       	add    eax,0x3e0
c0024127:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002412d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024131:	05 80 03 00 00       	add    eax,0x380
c0024136:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002413c:	fb                   	sti    
c002413d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024141:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024145:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002414a:	83 d2 00             	adc    edx,0x0
c002414d:	89 c1                	mov    ecx,eax
c002414f:	89 d3                	mov    ebx,edx
c0024151:	a1 f0 c3 02 c0       	mov    eax,ds:0xc002c3f0
c0024156:	8b 15 f4 c3 02 c0    	mov    edx,DWORD PTR ds:0xc002c3f4
c002415c:	39 c8                	cmp    eax,ecx
c002415e:	89 d0                	mov    eax,edx
c0024160:	19 d8                	sbb    eax,ebx
c0024162:	73 02                	jae    c0024166 <APICTimer::write(int)+0x8e>
c0024164:	eb d7                	jmp    c002413d <APICTimer::write(int)+0x65>
c0024166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002416a:	05 20 03 00 00       	add    eax,0x320
c002416f:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024179:	05 90 03 00 00       	add    eax,0x390
c002417e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024180:	f7 d0                	not    eax
c0024182:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024186:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002418a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002418e:	ba 00 00 00 00       	mov    edx,0x0
c0024193:	f7 f3                	div    ebx
c0024195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002419d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00241a3:	0d 00 00 02 00       	or     eax,0x20000
c00241a8:	89 c2                	mov    edx,eax
c00241aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00241ae:	05 20 03 00 00       	add    eax,0x320
c00241b3:	89 10                	mov    DWORD PTR [eax],edx
c00241b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00241b9:	05 e0 03 00 00       	add    eax,0x3e0
c00241be:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00241c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00241c8:	05 80 03 00 00       	add    eax,0x380
c00241cd:	89 c2                	mov    edx,eax
c00241cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00241d3:	89 02                	mov    DWORD PTR [edx],eax
c00241d5:	90                   	nop
c00241d6:	83 c4 28             	add    esp,0x28
c00241d9:	5b                   	pop    ebx
c00241da:	c3                   	ret    
c00241db:	90                   	nop

c00241dc <APICTimer::open(int, int, void*)>:
c00241dc:	57                   	push   edi
c00241dd:	56                   	push   esi
c00241de:	53                   	push   ebx
c00241df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00241e5:	83 c0 24             	add    eax,0x24
c00241e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00241ea:	83 ec 08             	sub    esp,0x8
c00241ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00241f5:	ff d0                	call   eax
c00241f7:	83 c4 10             	add    esp,0x10
c00241fa:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c00241ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024205:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002420b:	83 ec 0c             	sub    esp,0xc
c002420e:	50                   	push   eax
c002420f:	e8 ce f3 ff ff       	call   c00235e2 <APIC::getBase()>
c0024214:	83 c4 10             	add    esp,0x10
c0024217:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002421d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024221:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024227:	0f b6 f8             	movzx  edi,al
c002422a:	89 d0                	mov    eax,edx
c002422c:	ba 00 00 00 00       	mov    edx,0x0
c0024231:	89 c1                	mov    ecx,eax
c0024233:	80 e5 ff             	and    ch,0xff
c0024236:	89 cb                	mov    ebx,ecx
c0024238:	0f b6 f2             	movzx  esi,dl
c002423b:	89 d8                	mov    eax,ebx
c002423d:	89 f2                	mov    edx,esi
c002423f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024243:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024246:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002424a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002424e:	83 e0 00             	and    eax,0x0
c0024251:	09 d0                	or     eax,edx
c0024253:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002425b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024261:	8d 50 01             	lea    edx,[eax+0x1]
c0024264:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024268:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002426e:	0f b6 d0             	movzx  edx,al
c0024271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024275:	83 c2 08             	add    edx,0x8
c0024278:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002427c:	0f b6 c9             	movzx  ecx,cl
c002427f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024285:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002428d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024291:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002429b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002429f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00242a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00242a9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00242af:	83 ec 0c             	sub    esp,0xc
c00242b2:	51                   	push   ecx
c00242b3:	6a 01                	push   0x1
c00242b5:	68 aa 40 02 c0       	push   0xc00240aa
c00242ba:	52                   	push   edx
c00242bb:	50                   	push   eax
c00242bc:	e8 3f f7 fe ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00242c1:	83 c4 20             	add    esp,0x20
c00242c4:	89 c2                	mov    edx,eax
c00242c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242ca:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00242d0:	b8 00 00 00 00       	mov    eax,0x0
c00242d5:	5b                   	pop    ebx
c00242d6:	5e                   	pop    esi
c00242d7:	5f                   	pop    edi
c00242d8:	c3                   	ret    
c00242d9:	90                   	nop

c00242da <APICTimer::APICTimer()>:
c00242da:	83 ec 0c             	sub    esp,0xc
c00242dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242e1:	83 ec 08             	sub    esp,0x8
c00242e4:	68 a4 ac 02 c0       	push   0xc002aca4
c00242e9:	50                   	push   eax
c00242ea:	e8 cb 1e ff ff       	call   c00161ba <Timer::Timer(char const*)>
c00242ef:	83 c4 10             	add    esp,0x10
c00242f2:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c00242f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00242fb:	89 10                	mov    DWORD PTR [eax],edx
c00242fd:	90                   	nop
c00242fe:	83 c4 0c             	add    esp,0xc
c0024301:	c3                   	ret    

c0024302 <PIT::write(int)>:
c0024302:	83 ec 10             	sub    esp,0x10
c0024305:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002430d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024313:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024317:	a3 a4 e0 02 c0       	mov    ds:0xc002e0a4,eax
c002431c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024321:	99                   	cdq    
c0024322:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024326:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002432a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024331:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024336:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002433a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002433f:	ee                   	out    dx,al
c0024340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024344:	0f b6 c0             	movzx  eax,al
c0024347:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002434e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024352:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024356:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002435b:	ee                   	out    dx,al
c002435c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024360:	c1 f8 08             	sar    eax,0x8
c0024363:	0f b6 c0             	movzx  eax,al
c0024366:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002436d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024371:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024375:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002437a:	ee                   	out    dx,al
c002437b:	90                   	nop
c002437c:	83 c4 10             	add    esp,0x10
c002437f:	c3                   	ret    

c0024380 <pitHandler(regs*, void*)>:
c0024380:	83 ec 0c             	sub    esp,0xc
c0024383:	a1 a4 e0 02 c0       	mov    eax,ds:0xc002e0a4
c0024388:	99                   	cdq    
c0024389:	52                   	push   edx
c002438a:	50                   	push   eax
c002438b:	6a 00                	push   0x0
c002438d:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024392:	e8 b5 04 00 00       	call   c002484c <__udivdi3>
c0024397:	83 c4 10             	add    esp,0x10
c002439a:	83 ec 08             	sub    esp,0x8
c002439d:	52                   	push   edx
c002439e:	50                   	push   eax
c002439f:	e8 a5 1e ff ff       	call   c0016249 <timerHandler(unsigned long long)>
c00243a4:	83 c4 10             	add    esp,0x10
c00243a7:	90                   	nop
c00243a8:	83 c4 0c             	add    esp,0xc
c00243ab:	c3                   	ret    

c00243ac <PIT::open(int, int, void*)>:
c00243ac:	83 ec 0c             	sub    esp,0xc
c00243af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00243b5:	83 c0 24             	add    eax,0x24
c00243b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00243ba:	83 ec 08             	sub    esp,0x8
c00243bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00243c5:	ff d0                	call   eax
c00243c7:	83 c4 10             	add    esp,0x10
c00243ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ce:	83 ec 0c             	sub    esp,0xc
c00243d1:	6a 00                	push   0x0
c00243d3:	6a 01                	push   0x1
c00243d5:	68 80 43 02 c0       	push   0xc0024380
c00243da:	6a 00                	push   0x0
c00243dc:	50                   	push   eax
c00243dd:	e8 1e f6 fe ff       	call   c0013a00 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00243e2:	83 c4 20             	add    esp,0x20
c00243e5:	89 c2                	mov    edx,eax
c00243e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243eb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00243f1:	b8 00 00 00 00       	mov    eax,0x0
c00243f6:	83 c4 0c             	add    esp,0xc
c00243f9:	c3                   	ret    

c00243fa <PIT::close(int, int, void*)>:
c00243fa:	83 ec 0c             	sub    esp,0xc
c00243fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024401:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002440b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002440f:	6a 01                	push   0x1
c0024411:	68 80 43 02 c0       	push   0xc0024380
c0024416:	6a 00                	push   0x0
c0024418:	50                   	push   eax
c0024419:	e8 20 f6 fe ff       	call   c0013a3e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002441e:	83 c4 10             	add    esp,0x10
c0024421:	b8 00 00 00 00       	mov    eax,0x0
c0024426:	83 c4 0c             	add    esp,0xc
c0024429:	c3                   	ret    

c002442a <PIT::PIT()>:
c002442a:	83 ec 0c             	sub    esp,0xc
c002442d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024431:	83 ec 08             	sub    esp,0x8
c0024434:	68 e0 ac 02 c0       	push   0xc002ace0
c0024439:	50                   	push   eax
c002443a:	e8 7b 1d ff ff       	call   c00161ba <Timer::Timer(char const*)>
c002443f:	83 c4 10             	add    esp,0x10
c0024442:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0024447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002444b:	89 10                	mov    DWORD PTR [eax],edx
c002444d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024451:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024457:	0f b6 d0             	movzx  edx,al
c002445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002445e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0024465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024469:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002446f:	0f b6 d0             	movzx  edx,al
c0024472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024476:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002447b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002447f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024485:	8d 50 01             	lea    edx,[eax+0x1]
c0024488:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002448c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024492:	0f b6 d0             	movzx  edx,al
c0024495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024499:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002449d:	83 e1 3f             	and    ecx,0x3f
c00244a0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00244a4:	90                   	nop
c00244a5:	83 c4 0c             	add    esp,0xc
c00244a8:	c3                   	ret    
c00244a9:	66 90                	xchg   ax,ax
c00244ab:	66 90                	xchg   ax,ax
c00244ad:	66 90                	xchg   ax,ax
c00244af:	90                   	nop

c00244b0 <avxDetect>:
c00244b0:	b8 00 00 00 00       	mov    eax,0x0
c00244b5:	c3                   	ret    

c00244b6 <avxSave>:
c00244b6:	c3                   	ret    

c00244b7 <avxLoad>:
c00244b7:	c3                   	ret    

c00244b8 <avxInit>:
c00244b8:	c3                   	ret    

c00244b9 <avxClose>:
c00244b9:	c3                   	ret    

c00244ba <wouldSheSayYes>:
c00244ba:	c3                   	ret    
c00244bb:	49                   	dec    ecx
c00244bc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00244c0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00244c4:	75 20                	jne    c00244e6 <sseDetect.noSSE+0x1>
c00244c6:	4e                   	dec    esi
c00244c7:	79 61                	jns    c002452a <x87Detect+0x14>
c00244c9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00244ce:	66 90                	xchg   ax,ax

c00244d0 <absolutelyNoChanceInHell>:
c00244d0:	b8 01 00 00 00       	mov    eax,0x1
c00244d5:	0f a2                	cpuid  
c00244d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00244dd:	74 06                	je     c00244e5 <sseDetect.noSSE>
c00244df:	b8 01 00 00 00       	mov    eax,0x1
c00244e4:	c3                   	ret    

c00244e5 <sseDetect.noSSE>:
c00244e5:	31 c0                	xor    eax,eax
c00244e7:	c3                   	ret    

c00244e8 <sseSave>:
c00244e8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00244ed:	c3                   	ret    

c00244ee <sseLoad>:
c00244ee:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c00244f3:	c3                   	ret    

c00244f4 <sseInit>:
c00244f4:	e8 43 00 00 00       	call   c002453c <x87Init>
c00244f9:	0f 20 e0             	mov    eax,cr4
c00244fc:	66 0d 00 06          	or     ax,0x600
c0024500:	0f 22 e0             	mov    cr4,eax
c0024503:	c3                   	ret    

c0024504 <sseClose>:
c0024504:	c3                   	ret    
c0024505:	66 90                	xchg   ax,ax
c0024507:	66 90                	xchg   ax,ax
c0024509:	66 90                	xchg   ax,ax
c002450b:	66 90                	xchg   ax,ax
c002450d:	66 90                	xchg   ax,ax
c002450f:	90                   	nop

c0024510 <value_37F>:
c0024510:	7f 03                	jg     c0024515 <value_37A+0x1>

c0024512 <value_37E>:
c0024512:	7e 03                	jle    c0024517 <x87Detect+0x1>

c0024514 <value_37A>:
c0024514:	7a 03                	jp     c0024519 <x87Detect+0x3>

c0024516 <x87Detect>:
c0024516:	b8 01 00 00 00       	mov    eax,0x1
c002451b:	0f a2                	cpuid  
c002451d:	f7 c2 01 00 00 00    	test   edx,0x1
c0024523:	74 06                	je     c002452b <x87Detect.nox87>
c0024525:	b8 01 00 00 00       	mov    eax,0x1
c002452a:	c3                   	ret    

c002452b <x87Detect.nox87>:
c002452b:	b8 00 00 00 00       	mov    eax,0x0
c0024530:	c3                   	ret    

c0024531 <x87Save>:
c0024531:	9b dd 74 24 08       	fsave  [esp+0x8]
c0024536:	c3                   	ret    

c0024537 <x87Load>:
c0024537:	dd 64 24 08          	frstor [esp+0x8]
c002453b:	c3                   	ret    

c002453c <x87Init>:
c002453c:	9b db e3             	finit  
c002453f:	0f 20 c0             	mov    eax,cr0
c0024542:	66 25 fb ff          	and    ax,0xfffb
c0024546:	66 0d 22 00          	or     ax,0x22
c002454a:	0f 22 c0             	mov    cr0,eax
c002454d:	0f 06                	clts   
c002454f:	d9 2d 14 45 02 c0    	fldcw  WORD PTR ds:0xc0024514
c0024555:	c3                   	ret    

c0024556 <x87Close>:
c0024556:	c3                   	ret    
c0024557:	90                   	nop

c0024558 <__do_global_ctors_aux>:
c0024558:	a1 4c 70 02 c0       	mov    eax,ds:0xc002704c
c002455d:	83 f8 ff             	cmp    eax,0xffffffff
c0024560:	74 1a                	je     c002457c <__do_global_ctors_aux+0x24>
c0024562:	55                   	push   ebp
c0024563:	89 e5                	mov    ebp,esp
c0024565:	53                   	push   ebx
c0024566:	52                   	push   edx
c0024567:	bb 4c 70 02 c0       	mov    ebx,0xc002704c
c002456c:	ff d0                	call   eax
c002456e:	83 eb 04             	sub    ebx,0x4
c0024571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024573:	83 f8 ff             	cmp    eax,0xffffffff
c0024576:	75 f4                	jne    c002456c <__do_global_ctors_aux+0x14>
c0024578:	58                   	pop    eax
c0024579:	5b                   	pop    ebx
c002457a:	5d                   	pop    ebp
c002457b:	c3                   	ret    
c002457c:	c3                   	ret    
c002457d:	66 90                	xchg   ax,ax
c002457f:	90                   	nop

c0024580 <__divdi3>:
c0024580:	55                   	push   ebp
c0024581:	57                   	push   edi
c0024582:	56                   	push   esi
c0024583:	53                   	push   ebx
c0024584:	83 ec 1c             	sub    esp,0x1c
c0024587:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002458b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002458f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0024592:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024596:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002459a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002459e:	85 db                	test   ebx,ebx
c00245a0:	0f 88 8e 00 00 00    	js     c0024634 <__divdi3+0xb4>
c00245a6:	89 dd                	mov    ebp,ebx
c00245a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00245b0:	89 d3                	mov    ebx,edx
c00245b2:	85 d2                	test   edx,edx
c00245b4:	79 0d                	jns    c00245c3 <__divdi3+0x43>
c00245b6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00245ba:	f7 d8                	neg    eax
c00245bc:	83 d2 00             	adc    edx,0x0
c00245bf:	f7 da                	neg    edx
c00245c1:	89 d3                	mov    ebx,edx
c00245c3:	89 c7                	mov    edi,eax
c00245c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00245c8:	85 db                	test   ebx,ebx
c00245ca:	75 48                	jne    c0024614 <__divdi3+0x94>
c00245cc:	39 ef                	cmp    edi,ebp
c00245ce:	76 24                	jbe    c00245f4 <__divdi3+0x74>
c00245d0:	89 ea                	mov    edx,ebp
c00245d2:	f7 f7                	div    edi
c00245d4:	89 c1                	mov    ecx,eax
c00245d6:	31 f6                	xor    esi,esi
c00245d8:	89 c8                	mov    eax,ecx
c00245da:	89 f2                	mov    edx,esi
c00245dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245e0:	85 c9                	test   ecx,ecx
c00245e2:	74 07                	je     c00245eb <__divdi3+0x6b>
c00245e4:	f7 d8                	neg    eax
c00245e6:	83 d2 00             	adc    edx,0x0
c00245e9:	f7 da                	neg    edx
c00245eb:	83 c4 1c             	add    esp,0x1c
c00245ee:	5b                   	pop    ebx
c00245ef:	5e                   	pop    esi
c00245f0:	5f                   	pop    edi
c00245f1:	5d                   	pop    ebp
c00245f2:	c3                   	ret    
c00245f3:	90                   	nop
c00245f4:	85 ff                	test   edi,edi
c00245f6:	75 0b                	jne    c0024603 <__divdi3+0x83>
c00245f8:	b8 01 00 00 00       	mov    eax,0x1
c00245fd:	31 d2                	xor    edx,edx
c00245ff:	f7 f3                	div    ebx
c0024601:	89 c7                	mov    edi,eax
c0024603:	31 d2                	xor    edx,edx
c0024605:	89 e8                	mov    eax,ebp
c0024607:	f7 f7                	div    edi
c0024609:	89 c6                	mov    esi,eax
c002460b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002460e:	f7 f7                	div    edi
c0024610:	89 c1                	mov    ecx,eax
c0024612:	eb c4                	jmp    c00245d8 <__divdi3+0x58>
c0024614:	39 eb                	cmp    ebx,ebp
c0024616:	77 3c                	ja     c0024654 <__divdi3+0xd4>
c0024618:	0f bd f3             	bsr    esi,ebx
c002461b:	83 f6 1f             	xor    esi,0x1f
c002461e:	75 40                	jne    c0024660 <__divdi3+0xe0>
c0024620:	39 eb                	cmp    ebx,ebp
c0024622:	72 09                	jb     c002462d <__divdi3+0xad>
c0024624:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0024627:	0f 87 97 00 00 00    	ja     c00246c4 <__divdi3+0x144>
c002462d:	b9 01 00 00 00       	mov    ecx,0x1
c0024632:	eb a4                	jmp    c00245d8 <__divdi3+0x58>
c0024634:	f7 d9                	neg    ecx
c0024636:	83 d3 00             	adc    ebx,0x0
c0024639:	f7 db                	neg    ebx
c002463b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002463e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0024642:	89 dd                	mov    ebp,ebx
c0024644:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002464c:	e9 5f ff ff ff       	jmp    c00245b0 <__divdi3+0x30>
c0024651:	8d 76 00             	lea    esi,[esi+0x0]
c0024654:	31 f6                	xor    esi,esi
c0024656:	31 c9                	xor    ecx,ecx
c0024658:	e9 7b ff ff ff       	jmp    c00245d8 <__divdi3+0x58>
c002465d:	8d 76 00             	lea    esi,[esi+0x0]
c0024660:	b8 20 00 00 00       	mov    eax,0x20
c0024665:	29 f0                	sub    eax,esi
c0024667:	89 f1                	mov    ecx,esi
c0024669:	d3 e3                	shl    ebx,cl
c002466b:	89 fa                	mov    edx,edi
c002466d:	88 c1                	mov    cl,al
c002466f:	d3 ea                	shr    edx,cl
c0024671:	09 da                	or     edx,ebx
c0024673:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024677:	89 f1                	mov    ecx,esi
c0024679:	d3 e7                	shl    edi,cl
c002467b:	89 eb                	mov    ebx,ebp
c002467d:	88 c1                	mov    cl,al
c002467f:	d3 eb                	shr    ebx,cl
c0024681:	89 f1                	mov    ecx,esi
c0024683:	d3 e5                	shl    ebp,cl
c0024685:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024688:	88 c1                	mov    cl,al
c002468a:	d3 ea                	shr    edx,cl
c002468c:	09 d5                	or     ebp,edx
c002468e:	89 e8                	mov    eax,ebp
c0024690:	89 da                	mov    edx,ebx
c0024692:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0024696:	89 d3                	mov    ebx,edx
c0024698:	89 c5                	mov    ebp,eax
c002469a:	f7 e7                	mul    edi
c002469c:	39 d3                	cmp    ebx,edx
c002469e:	72 18                	jb     c00246b8 <__divdi3+0x138>
c00246a0:	74 0a                	je     c00246ac <__divdi3+0x12c>
c00246a2:	89 e9                	mov    ecx,ebp
c00246a4:	31 f6                	xor    esi,esi
c00246a6:	e9 2d ff ff ff       	jmp    c00245d8 <__divdi3+0x58>
c00246ab:	90                   	nop
c00246ac:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00246af:	89 f1                	mov    ecx,esi
c00246b1:	d3 e7                	shl    edi,cl
c00246b3:	39 c7                	cmp    edi,eax
c00246b5:	73 eb                	jae    c00246a2 <__divdi3+0x122>
c00246b7:	90                   	nop
c00246b8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00246bb:	31 f6                	xor    esi,esi
c00246bd:	e9 16 ff ff ff       	jmp    c00245d8 <__divdi3+0x58>
c00246c2:	66 90                	xchg   ax,ax
c00246c4:	31 c9                	xor    ecx,ecx
c00246c6:	e9 0d ff ff ff       	jmp    c00245d8 <__divdi3+0x58>
c00246cb:	90                   	nop

c00246cc <__moddi3>:
c00246cc:	55                   	push   ebp
c00246cd:	57                   	push   edi
c00246ce:	56                   	push   esi
c00246cf:	53                   	push   ebx
c00246d0:	83 ec 2c             	sub    esp,0x2c
c00246d3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00246d7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00246db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00246df:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00246e3:	85 db                	test   ebx,ebx
c00246e5:	0f 88 85 00 00 00    	js     c0024770 <__moddi3+0xa4>
c00246eb:	89 de                	mov    esi,ebx
c00246ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00246f5:	89 d7                	mov    edi,edx
c00246f7:	85 d2                	test   edx,edx
c00246f9:	79 09                	jns    c0024704 <__moddi3+0x38>
c00246fb:	f7 d8                	neg    eax
c00246fd:	83 d2 00             	adc    edx,0x0
c0024700:	f7 da                	neg    edx
c0024702:	89 d7                	mov    edi,edx
c0024704:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024708:	89 cd                	mov    ebp,ecx
c002470a:	85 ff                	test   edi,edi
c002470c:	75 52                	jne    c0024760 <__moddi3+0x94>
c002470e:	89 c3                	mov    ebx,eax
c0024710:	39 f0                	cmp    eax,esi
c0024712:	76 24                	jbe    c0024738 <__moddi3+0x6c>
c0024714:	89 c8                	mov    eax,ecx
c0024716:	89 f2                	mov    edx,esi
c0024718:	f7 f3                	div    ebx
c002471a:	89 d6                	mov    esi,edx
c002471c:	89 f0                	mov    eax,esi
c002471e:	31 d2                	xor    edx,edx
c0024720:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024724:	85 c9                	test   ecx,ecx
c0024726:	74 07                	je     c002472f <__moddi3+0x63>
c0024728:	f7 d8                	neg    eax
c002472a:	83 d2 00             	adc    edx,0x0
c002472d:	f7 da                	neg    edx
c002472f:	83 c4 2c             	add    esp,0x2c
c0024732:	5b                   	pop    ebx
c0024733:	5e                   	pop    esi
c0024734:	5f                   	pop    edi
c0024735:	5d                   	pop    ebp
c0024736:	c3                   	ret    
c0024737:	90                   	nop
c0024738:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002473c:	85 db                	test   ebx,ebx
c002473e:	75 0d                	jne    c002474d <__moddi3+0x81>
c0024740:	b8 01 00 00 00       	mov    eax,0x1
c0024745:	31 d2                	xor    edx,edx
c0024747:	f7 f7                	div    edi
c0024749:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002474d:	89 f0                	mov    eax,esi
c002474f:	31 d2                	xor    edx,edx
c0024751:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024755:	f7 f7                	div    edi
c0024757:	89 e8                	mov    eax,ebp
c0024759:	f7 f7                	div    edi
c002475b:	89 d6                	mov    esi,edx
c002475d:	eb bd                	jmp    c002471c <__moddi3+0x50>
c002475f:	90                   	nop
c0024760:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0024764:	39 f7                	cmp    edi,esi
c0024766:	76 20                	jbe    c0024788 <__moddi3+0xbc>
c0024768:	89 c8                	mov    eax,ecx
c002476a:	89 f2                	mov    edx,esi
c002476c:	eb b2                	jmp    c0024720 <__moddi3+0x54>
c002476e:	66 90                	xchg   ax,ax
c0024770:	f7 d9                	neg    ecx
c0024772:	83 d3 00             	adc    ebx,0x0
c0024775:	f7 db                	neg    ebx
c0024777:	89 de                	mov    esi,ebx
c0024779:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0024781:	e9 6f ff ff ff       	jmp    c00246f5 <__moddi3+0x29>
c0024786:	66 90                	xchg   ax,ax
c0024788:	0f bd c7             	bsr    eax,edi
c002478b:	83 f0 1f             	xor    eax,0x1f
c002478e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024792:	75 24                	jne    c00247b8 <__moddi3+0xec>
c0024794:	39 f7                	cmp    edi,esi
c0024796:	72 06                	jb     c002479e <__moddi3+0xd2>
c0024798:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002479c:	77 0c                	ja     c00247aa <__moddi3+0xde>
c002479e:	89 e9                	mov    ecx,ebp
c00247a0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00247a4:	19 fe                	sbb    esi,edi
c00247a6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00247aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00247ae:	89 f2                	mov    edx,esi
c00247b0:	e9 6b ff ff ff       	jmp    c0024720 <__moddi3+0x54>
c00247b5:	8d 76 00             	lea    esi,[esi+0x0]
c00247b8:	b8 20 00 00 00       	mov    eax,0x20
c00247bd:	89 c2                	mov    edx,eax
c00247bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00247c3:	29 da                	sub    edx,ebx
c00247c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00247c9:	88 d9                	mov    cl,bl
c00247cb:	d3 e7                	shl    edi,cl
c00247cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00247d1:	88 d1                	mov    cl,dl
c00247d3:	d3 e8                	shr    eax,cl
c00247d5:	09 c7                	or     edi,eax
c00247d7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00247db:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00247df:	89 d8                	mov    eax,ebx
c00247e1:	88 d9                	mov    cl,bl
c00247e3:	d3 e7                	shl    edi,cl
c00247e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00247e9:	89 f3                	mov    ebx,esi
c00247eb:	88 d1                	mov    cl,dl
c00247ed:	d3 eb                	shr    ebx,cl
c00247ef:	89 c7                	mov    edi,eax
c00247f1:	88 c1                	mov    cl,al
c00247f3:	d3 e6                	shl    esi,cl
c00247f5:	89 e8                	mov    eax,ebp
c00247f7:	88 d1                	mov    cl,dl
c00247f9:	d3 e8                	shr    eax,cl
c00247fb:	09 f0                	or     eax,esi
c00247fd:	89 f9                	mov    ecx,edi
c00247ff:	d3 e5                	shl    ebp,cl
c0024801:	89 da                	mov    edx,ebx
c0024803:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0024807:	89 d3                	mov    ebx,edx
c0024809:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002480d:	89 c6                	mov    esi,eax
c002480f:	89 d1                	mov    ecx,edx
c0024811:	39 d3                	cmp    ebx,edx
c0024813:	72 27                	jb     c002483c <__moddi3+0x170>
c0024815:	74 21                	je     c0024838 <__moddi3+0x16c>
c0024817:	29 f5                	sub    ebp,esi
c0024819:	19 cb                	sbb    ebx,ecx
c002481b:	89 de                	mov    esi,ebx
c002481d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0024821:	d3 e6                	shl    esi,cl
c0024823:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0024827:	89 f9                	mov    ecx,edi
c0024829:	d3 ed                	shr    ebp,cl
c002482b:	09 ee                	or     esi,ebp
c002482d:	89 f0                	mov    eax,esi
c002482f:	d3 eb                	shr    ebx,cl
c0024831:	89 da                	mov    edx,ebx
c0024833:	e9 e8 fe ff ff       	jmp    c0024720 <__moddi3+0x54>
c0024838:	39 c5                	cmp    ebp,eax
c002483a:	73 db                	jae    c0024817 <__moddi3+0x14b>
c002483c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024840:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0024844:	89 d1                	mov    ecx,edx
c0024846:	89 c6                	mov    esi,eax
c0024848:	eb cd                	jmp    c0024817 <__moddi3+0x14b>
c002484a:	66 90                	xchg   ax,ax

c002484c <__udivdi3>:
c002484c:	55                   	push   ebp
c002484d:	57                   	push   edi
c002484e:	56                   	push   esi
c002484f:	53                   	push   ebx
c0024850:	83 ec 1c             	sub    esp,0x1c
c0024853:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024857:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002485b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002485f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024863:	85 d2                	test   edx,edx
c0024865:	75 41                	jne    c00248a8 <__udivdi3+0x5c>
c0024867:	39 f7                	cmp    edi,esi
c0024869:	76 15                	jbe    c0024880 <__udivdi3+0x34>
c002486b:	89 e8                	mov    eax,ebp
c002486d:	89 f2                	mov    edx,esi
c002486f:	f7 f7                	div    edi
c0024871:	31 db                	xor    ebx,ebx
c0024873:	89 da                	mov    edx,ebx
c0024875:	83 c4 1c             	add    esp,0x1c
c0024878:	5b                   	pop    ebx
c0024879:	5e                   	pop    esi
c002487a:	5f                   	pop    edi
c002487b:	5d                   	pop    ebp
c002487c:	c3                   	ret    
c002487d:	8d 76 00             	lea    esi,[esi+0x0]
c0024880:	89 f9                	mov    ecx,edi
c0024882:	85 ff                	test   edi,edi
c0024884:	75 0b                	jne    c0024891 <__udivdi3+0x45>
c0024886:	b8 01 00 00 00       	mov    eax,0x1
c002488b:	31 d2                	xor    edx,edx
c002488d:	f7 f7                	div    edi
c002488f:	89 c1                	mov    ecx,eax
c0024891:	31 d2                	xor    edx,edx
c0024893:	89 f0                	mov    eax,esi
c0024895:	f7 f1                	div    ecx
c0024897:	89 c3                	mov    ebx,eax
c0024899:	89 e8                	mov    eax,ebp
c002489b:	f7 f1                	div    ecx
c002489d:	89 da                	mov    edx,ebx
c002489f:	83 c4 1c             	add    esp,0x1c
c00248a2:	5b                   	pop    ebx
c00248a3:	5e                   	pop    esi
c00248a4:	5f                   	pop    edi
c00248a5:	5d                   	pop    ebp
c00248a6:	c3                   	ret    
c00248a7:	90                   	nop
c00248a8:	39 f2                	cmp    edx,esi
c00248aa:	77 1c                	ja     c00248c8 <__udivdi3+0x7c>
c00248ac:	0f bd da             	bsr    ebx,edx
c00248af:	83 f3 1f             	xor    ebx,0x1f
c00248b2:	75 24                	jne    c00248d8 <__udivdi3+0x8c>
c00248b4:	39 f2                	cmp    edx,esi
c00248b6:	72 08                	jb     c00248c0 <__udivdi3+0x74>
c00248b8:	39 ef                	cmp    edi,ebp
c00248ba:	0f 87 84 00 00 00    	ja     c0024944 <__udivdi3+0xf8>
c00248c0:	b8 01 00 00 00       	mov    eax,0x1
c00248c5:	eb ac                	jmp    c0024873 <__udivdi3+0x27>
c00248c7:	90                   	nop
c00248c8:	31 db                	xor    ebx,ebx
c00248ca:	31 c0                	xor    eax,eax
c00248cc:	89 da                	mov    edx,ebx
c00248ce:	83 c4 1c             	add    esp,0x1c
c00248d1:	5b                   	pop    ebx
c00248d2:	5e                   	pop    esi
c00248d3:	5f                   	pop    edi
c00248d4:	5d                   	pop    ebp
c00248d5:	c3                   	ret    
c00248d6:	66 90                	xchg   ax,ax
c00248d8:	b8 20 00 00 00       	mov    eax,0x20
c00248dd:	29 d8                	sub    eax,ebx
c00248df:	88 d9                	mov    cl,bl
c00248e1:	d3 e2                	shl    edx,cl
c00248e3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00248e7:	89 fa                	mov    edx,edi
c00248e9:	88 c1                	mov    cl,al
c00248eb:	d3 ea                	shr    edx,cl
c00248ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248f1:	09 d1                	or     ecx,edx
c00248f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00248f7:	88 d9                	mov    cl,bl
c00248f9:	d3 e7                	shl    edi,cl
c00248fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00248ff:	89 f7                	mov    edi,esi
c0024901:	88 c1                	mov    cl,al
c0024903:	d3 ef                	shr    edi,cl
c0024905:	88 d9                	mov    cl,bl
c0024907:	d3 e6                	shl    esi,cl
c0024909:	89 ea                	mov    edx,ebp
c002490b:	88 c1                	mov    cl,al
c002490d:	d3 ea                	shr    edx,cl
c002490f:	09 d6                	or     esi,edx
c0024911:	89 f0                	mov    eax,esi
c0024913:	89 fa                	mov    edx,edi
c0024915:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024919:	89 d7                	mov    edi,edx
c002491b:	89 c6                	mov    esi,eax
c002491d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024921:	39 d7                	cmp    edi,edx
c0024923:	72 13                	jb     c0024938 <__udivdi3+0xec>
c0024925:	74 09                	je     c0024930 <__udivdi3+0xe4>
c0024927:	89 f0                	mov    eax,esi
c0024929:	31 db                	xor    ebx,ebx
c002492b:	e9 43 ff ff ff       	jmp    c0024873 <__udivdi3+0x27>
c0024930:	88 d9                	mov    cl,bl
c0024932:	d3 e5                	shl    ebp,cl
c0024934:	39 c5                	cmp    ebp,eax
c0024936:	73 ef                	jae    c0024927 <__udivdi3+0xdb>
c0024938:	8d 46 ff             	lea    eax,[esi-0x1]
c002493b:	31 db                	xor    ebx,ebx
c002493d:	e9 31 ff ff ff       	jmp    c0024873 <__udivdi3+0x27>
c0024942:	66 90                	xchg   ax,ax
c0024944:	31 c0                	xor    eax,eax
c0024946:	e9 28 ff ff ff       	jmp    c0024873 <__udivdi3+0x27>
c002494b:	90                   	nop

c002494c <__umoddi3>:
c002494c:	55                   	push   ebp
c002494d:	57                   	push   edi
c002494e:	56                   	push   esi
c002494f:	53                   	push   ebx
c0024950:	83 ec 1c             	sub    esp,0x1c
c0024953:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024957:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002495b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002495f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024963:	89 da                	mov    edx,ebx
c0024965:	85 c0                	test   eax,eax
c0024967:	75 37                	jne    c00249a0 <__umoddi3+0x54>
c0024969:	39 df                	cmp    edi,ebx
c002496b:	76 13                	jbe    c0024980 <__umoddi3+0x34>
c002496d:	89 f0                	mov    eax,esi
c002496f:	f7 f7                	div    edi
c0024971:	89 d0                	mov    eax,edx
c0024973:	31 d2                	xor    edx,edx
c0024975:	83 c4 1c             	add    esp,0x1c
c0024978:	5b                   	pop    ebx
c0024979:	5e                   	pop    esi
c002497a:	5f                   	pop    edi
c002497b:	5d                   	pop    ebp
c002497c:	c3                   	ret    
c002497d:	8d 76 00             	lea    esi,[esi+0x0]
c0024980:	89 fd                	mov    ebp,edi
c0024982:	85 ff                	test   edi,edi
c0024984:	75 0b                	jne    c0024991 <__umoddi3+0x45>
c0024986:	b8 01 00 00 00       	mov    eax,0x1
c002498b:	31 d2                	xor    edx,edx
c002498d:	f7 f7                	div    edi
c002498f:	89 c5                	mov    ebp,eax
c0024991:	89 d8                	mov    eax,ebx
c0024993:	31 d2                	xor    edx,edx
c0024995:	f7 f5                	div    ebp
c0024997:	89 f0                	mov    eax,esi
c0024999:	f7 f5                	div    ebp
c002499b:	89 d0                	mov    eax,edx
c002499d:	eb d4                	jmp    c0024973 <__umoddi3+0x27>
c002499f:	90                   	nop
c00249a0:	89 f1                	mov    ecx,esi
c00249a2:	39 d8                	cmp    eax,ebx
c00249a4:	76 0a                	jbe    c00249b0 <__umoddi3+0x64>
c00249a6:	89 f0                	mov    eax,esi
c00249a8:	83 c4 1c             	add    esp,0x1c
c00249ab:	5b                   	pop    ebx
c00249ac:	5e                   	pop    esi
c00249ad:	5f                   	pop    edi
c00249ae:	5d                   	pop    ebp
c00249af:	c3                   	ret    
c00249b0:	0f bd e8             	bsr    ebp,eax
c00249b3:	83 f5 1f             	xor    ebp,0x1f
c00249b6:	75 1c                	jne    c00249d4 <__umoddi3+0x88>
c00249b8:	39 d8                	cmp    eax,ebx
c00249ba:	72 04                	jb     c00249c0 <__umoddi3+0x74>
c00249bc:	39 f7                	cmp    edi,esi
c00249be:	77 08                	ja     c00249c8 <__umoddi3+0x7c>
c00249c0:	89 da                	mov    edx,ebx
c00249c2:	29 fe                	sub    esi,edi
c00249c4:	19 c2                	sbb    edx,eax
c00249c6:	89 f1                	mov    ecx,esi
c00249c8:	89 c8                	mov    eax,ecx
c00249ca:	83 c4 1c             	add    esp,0x1c
c00249cd:	5b                   	pop    ebx
c00249ce:	5e                   	pop    esi
c00249cf:	5f                   	pop    edi
c00249d0:	5d                   	pop    ebp
c00249d1:	c3                   	ret    
c00249d2:	66 90                	xchg   ax,ax
c00249d4:	ba 20 00 00 00       	mov    edx,0x20
c00249d9:	29 ea                	sub    edx,ebp
c00249db:	89 e9                	mov    ecx,ebp
c00249dd:	d3 e0                	shl    eax,cl
c00249df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00249e3:	89 f8                	mov    eax,edi
c00249e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00249e9:	88 d1                	mov    cl,dl
c00249eb:	d3 e8                	shr    eax,cl
c00249ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00249f1:	09 c1                	or     ecx,eax
c00249f3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00249f7:	89 e9                	mov    ecx,ebp
c00249f9:	d3 e7                	shl    edi,cl
c00249fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00249ff:	89 d8                	mov    eax,ebx
c0024a01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024a05:	88 d1                	mov    cl,dl
c0024a07:	d3 e8                	shr    eax,cl
c0024a09:	89 c7                	mov    edi,eax
c0024a0b:	89 e9                	mov    ecx,ebp
c0024a0d:	d3 e3                	shl    ebx,cl
c0024a0f:	89 f0                	mov    eax,esi
c0024a11:	88 d1                	mov    cl,dl
c0024a13:	d3 e8                	shr    eax,cl
c0024a15:	09 d8                	or     eax,ebx
c0024a17:	89 e9                	mov    ecx,ebp
c0024a19:	d3 e6                	shl    esi,cl
c0024a1b:	89 f3                	mov    ebx,esi
c0024a1d:	89 fa                	mov    edx,edi
c0024a1f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0024a23:	89 d1                	mov    ecx,edx
c0024a25:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0024a29:	89 c6                	mov    esi,eax
c0024a2b:	89 d7                	mov    edi,edx
c0024a2d:	39 d1                	cmp    ecx,edx
c0024a2f:	72 27                	jb     c0024a58 <__umoddi3+0x10c>
c0024a31:	74 21                	je     c0024a54 <__umoddi3+0x108>
c0024a33:	89 ca                	mov    edx,ecx
c0024a35:	29 f3                	sub    ebx,esi
c0024a37:	19 fa                	sbb    edx,edi
c0024a39:	89 d0                	mov    eax,edx
c0024a3b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024a3f:	d3 e0                	shl    eax,cl
c0024a41:	89 e9                	mov    ecx,ebp
c0024a43:	d3 eb                	shr    ebx,cl
c0024a45:	09 d8                	or     eax,ebx
c0024a47:	d3 ea                	shr    edx,cl
c0024a49:	83 c4 1c             	add    esp,0x1c
c0024a4c:	5b                   	pop    ebx
c0024a4d:	5e                   	pop    esi
c0024a4e:	5f                   	pop    edi
c0024a4f:	5d                   	pop    ebp
c0024a50:	c3                   	ret    
c0024a51:	8d 76 00             	lea    esi,[esi+0x0]
c0024a54:	39 c3                	cmp    ebx,eax
c0024a56:	73 db                	jae    c0024a33 <__umoddi3+0xe7>
c0024a58:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0024a5c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0024a60:	89 d7                	mov    edi,edx
c0024a62:	89 c6                	mov    esi,eax
c0024a64:	eb cd                	jmp    c0024a33 <__umoddi3+0xe7>

c0024a66 <__addsf3>:
c0024a66:	55                   	push   ebp
c0024a67:	89 e5                	mov    ebp,esp
c0024a69:	57                   	push   edi
c0024a6a:	56                   	push   esi
c0024a6b:	53                   	push   ebx
c0024a6c:	83 ec 08             	sub    esp,0x8
c0024a6f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024a72:	89 fa                	mov    edx,edi
c0024a74:	89 f8                	mov    eax,edi
c0024a76:	c1 f8 17             	sar    eax,0x17
c0024a79:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024a7c:	c1 e2 08             	shl    edx,0x8
c0024a7f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024a85:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024a88:	89 de                	mov    esi,ebx
c0024a8a:	c1 fe 17             	sar    esi,0x17
c0024a8d:	c1 e3 08             	shl    ebx,0x8
c0024a90:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0024a96:	31 f0                	xor    eax,esi
c0024a98:	0f 88 3b 01 00 00    	js     c0024bd9 <__addsf3+0x173>
c0024a9e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0024aa1:	29 f1                	sub    ecx,esi
c0024aa3:	85 c9                	test   ecx,ecx
c0024aa5:	7e 54                	jle    c0024afb <__addsf3+0x95>
c0024aa7:	89 f0                	mov    eax,esi
c0024aa9:	84 c0                	test   al,al
c0024aab:	75 10                	jne    c0024abd <__addsf3+0x57>
c0024aad:	85 db                	test   ebx,ebx
c0024aaf:	0f 84 aa 02 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024ab5:	49                   	dec    ecx
c0024ab6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024ab9:	74 38                	je     c0024af3 <__addsf3+0x8d>
c0024abb:	eb 13                	jmp    c0024ad0 <__addsf3+0x6a>
c0024abd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024ac0:	f7 d0                	not    eax
c0024ac2:	84 c0                	test   al,al
c0024ac4:	0f 84 95 02 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024aca:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024ad0:	83 f9 1f             	cmp    ecx,0x1f
c0024ad3:	0f 8f 86 02 00 00    	jg     c0024d5f <__addsf3+0x2f9>
c0024ad9:	89 de                	mov    esi,ebx
c0024adb:	d3 ee                	shr    esi,cl
c0024add:	b8 20 00 00 00       	mov    eax,0x20
c0024ae2:	29 c8                	sub    eax,ecx
c0024ae4:	89 c1                	mov    ecx,eax
c0024ae6:	d3 e3                	shl    ebx,cl
c0024ae8:	31 c0                	xor    eax,eax
c0024aea:	85 db                	test   ebx,ebx
c0024aec:	0f 95 c0             	setne  al
c0024aef:	09 f0                	or     eax,esi
c0024af1:	01 d0                	add    eax,edx
c0024af3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024af6:	e9 b6 00 00 00       	jmp    c0024bb1 <__addsf3+0x14b>
c0024afb:	74 5c                	je     c0024b59 <__addsf3+0xf3>
c0024afd:	89 f1                	mov    ecx,esi
c0024aff:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0024b02:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024b05:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0024b09:	75 14                	jne    c0024b1f <__addsf3+0xb9>
c0024b0b:	85 d2                	test   edx,edx
c0024b0d:	0f 84 4c 02 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024b13:	49                   	dec    ecx
c0024b14:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024b17:	0f 84 94 00 00 00    	je     c0024bb1 <__addsf3+0x14b>
c0024b1d:	eb 12                	jmp    c0024b31 <__addsf3+0xcb>
c0024b1f:	89 f0                	mov    eax,esi
c0024b21:	f7 d0                	not    eax
c0024b23:	84 c0                	test   al,al
c0024b25:	0f 84 34 02 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024b2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b31:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024b34:	83 f9 1f             	cmp    ecx,0x1f
c0024b37:	0f 8f 22 02 00 00    	jg     c0024d5f <__addsf3+0x2f9>
c0024b3d:	89 d7                	mov    edi,edx
c0024b3f:	d3 ef                	shr    edi,cl
c0024b41:	b8 20 00 00 00       	mov    eax,0x20
c0024b46:	29 c8                	sub    eax,ecx
c0024b48:	89 c1                	mov    ecx,eax
c0024b4a:	d3 e2                	shl    edx,cl
c0024b4c:	31 c0                	xor    eax,eax
c0024b4e:	85 d2                	test   edx,edx
c0024b50:	0f 95 c0             	setne  al
c0024b53:	09 f8                	or     eax,edi
c0024b55:	01 d8                	add    eax,ebx
c0024b57:	eb 58                	jmp    c0024bb1 <__addsf3+0x14b>
c0024b59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b5c:	8d 70 01             	lea    esi,[eax+0x1]
c0024b5f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0024b65:	75 32                	jne    c0024b99 <__addsf3+0x133>
c0024b67:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0024b6b:	75 1f                	jne    c0024b8c <__addsf3+0x126>
c0024b6d:	85 d2                	test   edx,edx
c0024b6f:	0f 84 e0 01 00 00    	je     c0024d55 <__addsf3+0x2ef>
c0024b75:	85 db                	test   ebx,ebx
c0024b77:	0f 84 e2 01 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024b7d:	89 d0                	mov    eax,edx
c0024b7f:	01 d8                	add    eax,ebx
c0024b81:	0f 89 a9 01 00 00    	jns    c0024d30 <__addsf3+0x2ca>
c0024b87:	e9 9d 01 00 00       	jmp    c0024d29 <__addsf3+0x2c3>
c0024b8c:	85 d2                	test   edx,edx
c0024b8e:	0f 85 cb 01 00 00    	jne    c0024d5f <__addsf3+0x2f9>
c0024b94:	e9 bc 01 00 00       	jmp    c0024d55 <__addsf3+0x2ef>
c0024b99:	31 c0                	xor    eax,eax
c0024b9b:	89 f1                	mov    ecx,esi
c0024b9d:	f7 d1                	not    ecx
c0024b9f:	84 c9                	test   cl,cl
c0024ba1:	0f 84 90 01 00 00    	je     c0024d37 <__addsf3+0x2d1>
c0024ba7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0024baa:	d1 e8                	shr    eax,1
c0024bac:	e9 86 01 00 00       	jmp    c0024d37 <__addsf3+0x2d1>
c0024bb1:	85 c0                	test   eax,eax
c0024bb3:	0f 89 7e 01 00 00    	jns    c0024d37 <__addsf3+0x2d1>
c0024bb9:	46                   	inc    esi
c0024bba:	89 f2                	mov    edx,esi
c0024bbc:	f7 d2                	not    edx
c0024bbe:	84 d2                	test   dl,dl
c0024bc0:	0f 84 6f 01 00 00    	je     c0024d35 <__addsf3+0x2cf>
c0024bc6:	89 c2                	mov    edx,eax
c0024bc8:	83 e2 01             	and    edx,0x1
c0024bcb:	d1 e8                	shr    eax,1
c0024bcd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0024bd2:	09 d0                	or     eax,edx
c0024bd4:	e9 5e 01 00 00       	jmp    c0024d37 <__addsf3+0x2d1>
c0024bd9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0024bdd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024be0:	89 f0                	mov    eax,esi
c0024be2:	0f b6 c0             	movzx  eax,al
c0024be5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024be8:	29 c1                	sub    ecx,eax
c0024bea:	85 c9                	test   ecx,ecx
c0024bec:	7e 55                	jle    c0024c43 <__addsf3+0x1dd>
c0024bee:	85 c0                	test   eax,eax
c0024bf0:	75 11                	jne    c0024c03 <__addsf3+0x19d>
c0024bf2:	85 db                	test   ebx,ebx
c0024bf4:	0f 84 65 01 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024bfa:	49                   	dec    ecx
c0024bfb:	75 19                	jne    c0024c16 <__addsf3+0x1b0>
c0024bfd:	89 d0                	mov    eax,edx
c0024bff:	29 d8                	sub    eax,ebx
c0024c01:	eb 38                	jmp    c0024c3b <__addsf3+0x1d5>
c0024c03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024c06:	f7 d0                	not    eax
c0024c08:	84 c0                	test   al,al
c0024c0a:	0f 84 4f 01 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024c10:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0024c16:	83 f9 1f             	cmp    ecx,0x1f
c0024c19:	0f 8f 40 01 00 00    	jg     c0024d5f <__addsf3+0x2f9>
c0024c1f:	89 de                	mov    esi,ebx
c0024c21:	d3 ee                	shr    esi,cl
c0024c23:	b8 20 00 00 00       	mov    eax,0x20
c0024c28:	29 c8                	sub    eax,ecx
c0024c2a:	89 c1                	mov    ecx,eax
c0024c2c:	d3 e3                	shl    ebx,cl
c0024c2e:	31 c0                	xor    eax,eax
c0024c30:	85 db                	test   ebx,ebx
c0024c32:	0f 95 c0             	setne  al
c0024c35:	09 f0                	or     eax,esi
c0024c37:	29 c2                	sub    edx,eax
c0024c39:	89 d0                	mov    eax,edx
c0024c3b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024c3e:	e9 af 00 00 00       	jmp    c0024cf2 <__addsf3+0x28c>
c0024c43:	74 5c                	je     c0024ca1 <__addsf3+0x23b>
c0024c45:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0024c48:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024c4b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0024c4f:	75 14                	jne    c0024c65 <__addsf3+0x1ff>
c0024c51:	85 d2                	test   edx,edx
c0024c53:	0f 84 06 01 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024c59:	48                   	dec    eax
c0024c5a:	75 1b                	jne    c0024c77 <__addsf3+0x211>
c0024c5c:	89 d8                	mov    eax,ebx
c0024c5e:	29 d0                	sub    eax,edx
c0024c60:	e9 8d 00 00 00       	jmp    c0024cf2 <__addsf3+0x28c>
c0024c65:	89 f1                	mov    ecx,esi
c0024c67:	f7 d1                	not    ecx
c0024c69:	84 c9                	test   cl,cl
c0024c6b:	0f 84 ee 00 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024c71:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024c77:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024c7a:	83 f8 1f             	cmp    eax,0x1f
c0024c7d:	0f 8f dc 00 00 00    	jg     c0024d5f <__addsf3+0x2f9>
c0024c83:	89 d7                	mov    edi,edx
c0024c85:	88 c1                	mov    cl,al
c0024c87:	d3 ef                	shr    edi,cl
c0024c89:	b9 20 00 00 00       	mov    ecx,0x20
c0024c8e:	29 c1                	sub    ecx,eax
c0024c90:	d3 e2                	shl    edx,cl
c0024c92:	31 c0                	xor    eax,eax
c0024c94:	85 d2                	test   edx,edx
c0024c96:	0f 95 c0             	setne  al
c0024c99:	09 f8                	or     eax,edi
c0024c9b:	29 c3                	sub    ebx,eax
c0024c9d:	89 d8                	mov    eax,ebx
c0024c9f:	eb 51                	jmp    c0024cf2 <__addsf3+0x28c>
c0024ca1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024ca4:	40                   	inc    eax
c0024ca5:	a8 fe                	test   al,0xfe
c0024ca7:	75 3d                	jne    c0024ce6 <__addsf3+0x280>
c0024ca9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0024cad:	0f 85 a7 00 00 00    	jne    c0024d5a <__addsf3+0x2f4>
c0024cb3:	85 d2                	test   edx,edx
c0024cb5:	75 12                	jne    c0024cc9 <__addsf3+0x263>
c0024cb7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024cba:	85 db                	test   ebx,ebx
c0024cbc:	0f 85 9d 00 00 00    	jne    c0024d5f <__addsf3+0x2f9>
c0024cc2:	31 ff                	xor    edi,edi
c0024cc4:	e9 96 00 00 00       	jmp    c0024d5f <__addsf3+0x2f9>
c0024cc9:	85 db                	test   ebx,ebx
c0024ccb:	0f 84 8e 00 00 00    	je     c0024d5f <__addsf3+0x2f9>
c0024cd1:	89 d0                	mov    eax,edx
c0024cd3:	29 d8                	sub    eax,ebx
c0024cd5:	79 06                	jns    c0024cdd <__addsf3+0x277>
c0024cd7:	89 d8                	mov    eax,ebx
c0024cd9:	29 d0                	sub    eax,edx
c0024cdb:	eb 5a                	jmp    c0024d37 <__addsf3+0x2d1>
c0024cdd:	bf 00 00 00 00       	mov    edi,0x0
c0024ce2:	74 7b                	je     c0024d5f <__addsf3+0x2f9>
c0024ce4:	eb 4a                	jmp    c0024d30 <__addsf3+0x2ca>
c0024ce6:	89 d0                	mov    eax,edx
c0024ce8:	29 d8                	sub    eax,ebx
c0024cea:	79 12                	jns    c0024cfe <__addsf3+0x298>
c0024cec:	89 d8                	mov    eax,ebx
c0024cee:	29 d0                	sub    eax,edx
c0024cf0:	eb 09                	jmp    c0024cfb <__addsf3+0x295>
c0024cf2:	85 c0                	test   eax,eax
c0024cf4:	79 41                	jns    c0024d37 <__addsf3+0x2d1>
c0024cf6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024cfb:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0024cfe:	31 f6                	xor    esi,esi
c0024d00:	85 c0                	test   eax,eax
c0024d02:	74 33                	je     c0024d37 <__addsf3+0x2d1>
c0024d04:	0f bd c8             	bsr    ecx,eax
c0024d07:	83 f1 1f             	xor    ecx,0x1f
c0024d0a:	d3 e0                	shl    eax,cl
c0024d0c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0024d10:	39 ca                	cmp    edx,ecx
c0024d12:	7f 10                	jg     c0024d24 <__addsf3+0x2be>
c0024d14:	29 d1                	sub    ecx,edx
c0024d16:	41                   	inc    ecx
c0024d17:	d3 e8                	shr    eax,cl
c0024d19:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024d1c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0024d22:	eb 13                	jmp    c0024d37 <__addsf3+0x2d1>
c0024d24:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024d27:	29 ce                	sub    esi,ecx
c0024d29:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024d2e:	eb 07                	jmp    c0024d37 <__addsf3+0x2d1>
c0024d30:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0024d33:	eb 02                	jmp    c0024d37 <__addsf3+0x2d1>
c0024d35:	31 c0                	xor    eax,eax
c0024d37:	89 c2                	mov    edx,eax
c0024d39:	c1 ea 08             	shr    edx,0x8
c0024d3c:	a8 7f                	test   al,0x7f
c0024d3e:	0f 95 c1             	setne  cl
c0024d41:	09 d1                	or     ecx,edx
c0024d43:	83 e1 01             	and    ecx,0x1
c0024d46:	c1 e8 07             	shr    eax,0x7
c0024d49:	21 c8                	and    eax,ecx
c0024d4b:	c1 e6 17             	shl    esi,0x17
c0024d4e:	09 d6                	or     esi,edx
c0024d50:	8d 3c 30             	lea    edi,[eax+esi*1]
c0024d53:	eb 0a                	jmp    c0024d5f <__addsf3+0x2f9>
c0024d55:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0024d58:	eb 05                	jmp    c0024d5f <__addsf3+0x2f9>
c0024d5a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0024d5f:	89 f8                	mov    eax,edi
c0024d61:	5a                   	pop    edx
c0024d62:	59                   	pop    ecx
c0024d63:	5b                   	pop    ebx
c0024d64:	5e                   	pop    esi
c0024d65:	5f                   	pop    edi
c0024d66:	5d                   	pop    ebp
c0024d67:	c3                   	ret    

c0024d68 <__subsf3>:
c0024d68:	55                   	push   ebp
c0024d69:	89 e5                	mov    ebp,esp
c0024d6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d6e:	05 00 00 00 80       	add    eax,0x80000000
c0024d73:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024d76:	5d                   	pop    ebp
c0024d77:	e9 ea fc ff ff       	jmp    c0024a66 <__addsf3>

c0024d7c <__negsf2>:
c0024d7c:	55                   	push   ebp
c0024d7d:	89 e5                	mov    ebp,esp
c0024d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024d82:	05 00 00 00 80       	add    eax,0x80000000
c0024d87:	5d                   	pop    ebp
c0024d88:	c3                   	ret    

c0024d89 <__mulsf3>:
c0024d89:	55                   	push   ebp
c0024d8a:	89 e5                	mov    ebp,esp
c0024d8c:	57                   	push   edi
c0024d8d:	56                   	push   esi
c0024d8e:	53                   	push   ebx
c0024d8f:	83 ec 1c             	sub    esp,0x1c
c0024d92:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0024d95:	89 f0                	mov    eax,esi
c0024d97:	89 f1                	mov    ecx,esi
c0024d99:	c1 f9 17             	sar    ecx,0x17
c0024d9c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024d9f:	c1 e0 08             	shl    eax,0x8
c0024da2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024da7:	89 c1                	mov    ecx,eax
c0024da9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024dac:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024daf:	89 c7                	mov    edi,eax
c0024db1:	c1 ff 17             	sar    edi,0x17
c0024db4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024db8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024dbb:	89 f8                	mov    eax,edi
c0024dbd:	0f b6 c0             	movzx  eax,al
c0024dc0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024dc3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0024dc7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024dca:	42                   	inc    edx
c0024dcb:	80 e2 fe             	and    dl,0xfe
c0024dce:	75 7b                	jne    c0024e4b <__mulsf3+0xc2>
c0024dd0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024dd4:	74 54                	je     c0024e2a <__mulsf3+0xa1>
c0024dd6:	85 c9                	test   ecx,ecx
c0024dd8:	0f 85 64 01 00 00    	jne    c0024f42 <__mulsf3+0x1b9>
c0024dde:	8d 57 01             	lea    edx,[edi+0x1]
c0024de1:	80 e2 fe             	and    dl,0xfe
c0024de4:	75 1f                	jne    c0024e05 <__mulsf3+0x7c>
c0024de6:	85 c0                	test   eax,eax
c0024de8:	b8 00 00 00 00       	mov    eax,0x0
c0024ded:	74 29                	je     c0024e18 <__mulsf3+0x8f>
c0024def:	53                   	push   ebx
c0024df0:	53                   	push   ebx
c0024df1:	50                   	push   eax
c0024df2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024df5:	e8 96 05 00 00       	call   c0025390 <__nesf2>
c0024dfa:	83 c4 10             	add    esp,0x10
c0024dfd:	85 c0                	test   eax,eax
c0024dff:	0f 85 3a 01 00 00    	jne    c0024f3f <__mulsf3+0x1b6>
c0024e05:	85 ff                	test   edi,edi
c0024e07:	0f 89 35 01 00 00    	jns    c0024f42 <__mulsf3+0x1b9>
c0024e0d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0024e13:	e9 2a 01 00 00       	jmp    c0024f42 <__mulsf3+0x1b9>
c0024e18:	51                   	push   ecx
c0024e19:	51                   	push   ecx
c0024e1a:	50                   	push   eax
c0024e1b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e1e:	e8 6d 05 00 00       	call   c0025390 <__nesf2>
c0024e23:	83 c4 10             	add    esp,0x10
c0024e26:	85 c0                	test   eax,eax
c0024e28:	eb 15                	jmp    c0024e3f <__mulsf3+0xb6>
c0024e2a:	85 c9                	test   ecx,ecx
c0024e2c:	74 0b                	je     c0024e39 <__mulsf3+0xb0>
c0024e2e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0024e31:	01 c9                	add    ecx,ecx
c0024e33:	78 16                	js     c0024e4b <__mulsf3+0xc2>
c0024e35:	89 d3                	mov    ebx,edx
c0024e37:	eb f5                	jmp    c0024e2e <__mulsf3+0xa5>
c0024e39:	89 f8                	mov    eax,edi
c0024e3b:	f7 d0                	not    eax
c0024e3d:	84 c0                	test   al,al
c0024e3f:	75 c4                	jne    c0024e05 <__mulsf3+0x7c>
c0024e41:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0024e46:	e9 f7 00 00 00       	jmp    c0024f42 <__mulsf3+0x1b9>
c0024e4b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0024e4e:	c1 e6 08             	shl    esi,0x8
c0024e51:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0024e57:	8d 57 01             	lea    edx,[edi+0x1]
c0024e5a:	80 e2 fe             	and    dl,0xfe
c0024e5d:	75 63                	jne    c0024ec2 <__mulsf3+0x139>
c0024e5f:	85 c0                	test   eax,eax
c0024e61:	74 2f                	je     c0024e92 <__mulsf3+0x109>
c0024e63:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024e67:	0f 89 d2 00 00 00    	jns    c0024f3f <__mulsf3+0x1b6>
c0024e6d:	52                   	push   edx
c0024e6e:	52                   	push   edx
c0024e6f:	6a 00                	push   0x0
c0024e71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e74:	e8 dc 04 00 00       	call   c0025355 <__eqsf2>
c0024e79:	83 c4 10             	add    esp,0x10
c0024e7c:	85 c0                	test   eax,eax
c0024e7e:	0f 85 bb 00 00 00    	jne    c0024f3f <__mulsf3+0x1b6>
c0024e84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024e87:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0024e8d:	e9 b0 00 00 00       	jmp    c0024f42 <__mulsf3+0x1b9>
c0024e92:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0024e95:	50                   	push   eax
c0024e96:	50                   	push   eax
c0024e97:	6a 00                	push   0x0
c0024e99:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e9c:	e8 b4 04 00 00       	call   c0025355 <__eqsf2>
c0024ea1:	83 c4 10             	add    esp,0x10
c0024ea4:	85 c0                	test   eax,eax
c0024ea6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024ea9:	75 0c                	jne    c0024eb7 <__mulsf3+0x12e>
c0024eab:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024eaf:	0f 89 8a 00 00 00    	jns    c0024f3f <__mulsf3+0x1b6>
c0024eb5:	eb cd                	jmp    c0024e84 <__mulsf3+0xfb>
c0024eb7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0024eba:	01 f6                	add    esi,esi
c0024ebc:	78 04                	js     c0024ec2 <__mulsf3+0x139>
c0024ebe:	89 c3                	mov    ebx,eax
c0024ec0:	eb f5                	jmp    c0024eb7 <__mulsf3+0x12e>
c0024ec2:	89 c8                	mov    eax,ecx
c0024ec4:	0d 00 00 00 80       	or     eax,0x80000000
c0024ec9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024ecf:	f7 e6                	mul    esi
c0024ed1:	85 c0                	test   eax,eax
c0024ed3:	0f 95 c0             	setne  al
c0024ed6:	0f b6 c0             	movzx  eax,al
c0024ed9:	09 c2                	or     edx,eax
c0024edb:	78 03                	js     c0024ee0 <__mulsf3+0x157>
c0024edd:	01 d2                	add    edx,edx
c0024edf:	4b                   	dec    ebx
c0024ee0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0024ee6:	7f 22                	jg     c0024f0a <__mulsf3+0x181>
c0024ee8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024eee:	85 db                	test   ebx,ebx
c0024ef0:	7f 23                	jg     c0024f15 <__mulsf3+0x18c>
c0024ef2:	83 fb e9             	cmp    ebx,0xffffffe9
c0024ef5:	7c 1a                	jl     c0024f11 <__mulsf3+0x188>
c0024ef7:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024efd:	b9 01 00 00 00       	mov    ecx,0x1
c0024f02:	29 d9                	sub    ecx,ebx
c0024f04:	d3 ea                	shr    edx,cl
c0024f06:	31 db                	xor    ebx,ebx
c0024f08:	eb 0b                	jmp    c0024f15 <__mulsf3+0x18c>
c0024f0a:	bb ff 00 00 00       	mov    ebx,0xff
c0024f0f:	eb 02                	jmp    c0024f13 <__mulsf3+0x18a>
c0024f11:	31 db                	xor    ebx,ebx
c0024f13:	31 d2                	xor    edx,edx
c0024f15:	89 d0                	mov    eax,edx
c0024f17:	c1 e8 08             	shr    eax,0x8
c0024f1a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0024f1d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0024f23:	09 fb                	or     ebx,edi
c0024f25:	c1 e3 17             	shl    ebx,0x17
c0024f28:	09 c3                	or     ebx,eax
c0024f2a:	f6 c2 7f             	test   dl,0x7f
c0024f2d:	0f 95 c1             	setne  cl
c0024f30:	09 c8                	or     eax,ecx
c0024f32:	83 e0 01             	and    eax,0x1
c0024f35:	c1 ea 07             	shr    edx,0x7
c0024f38:	21 c2                	and    edx,eax
c0024f3a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0024f3d:	eb 03                	jmp    c0024f42 <__mulsf3+0x1b9>
c0024f3f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0024f42:	89 f0                	mov    eax,esi
c0024f44:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024f47:	5b                   	pop    ebx
c0024f48:	5e                   	pop    esi
c0024f49:	5f                   	pop    edi
c0024f4a:	5d                   	pop    ebp
c0024f4b:	c3                   	ret    

c0024f4c <__divsf3>:
c0024f4c:	55                   	push   ebp
c0024f4d:	89 e5                	mov    ebp,esp
c0024f4f:	57                   	push   edi
c0024f50:	56                   	push   esi
c0024f51:	53                   	push   ebx
c0024f52:	83 ec 1c             	sub    esp,0x1c
c0024f55:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024f58:	89 d8                	mov    eax,ebx
c0024f5a:	89 d9                	mov    ecx,ebx
c0024f5c:	c1 f9 17             	sar    ecx,0x17
c0024f5f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0024f62:	c1 e0 08             	shl    eax,0x8
c0024f65:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0024f6a:	89 c1                	mov    ecx,eax
c0024f6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024f6f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024f72:	89 c7                	mov    edi,eax
c0024f74:	c1 ff 17             	sar    edi,0x17
c0024f77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024f7b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024f7e:	89 f8                	mov    eax,edi
c0024f80:	0f b6 c0             	movzx  eax,al
c0024f83:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024f86:	29 c6                	sub    esi,eax
c0024f88:	83 c6 7f             	add    esi,0x7f
c0024f8b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024f8e:	42                   	inc    edx
c0024f8f:	80 e2 fe             	and    dl,0xfe
c0024f92:	0f 85 9c 00 00 00    	jne    c0025034 <__divsf3+0xe8>
c0024f98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0024f9c:	74 33                	je     c0024fd1 <__divsf3+0x85>
c0024f9e:	85 c9                	test   ecx,ecx
c0024fa0:	0f 85 c7 01 00 00    	jne    c002516d <__divsf3+0x221>
c0024fa6:	8d 57 01             	lea    edx,[edi+0x1]
c0024fa9:	80 e2 fe             	and    dl,0xfe
c0024fac:	75 2f                	jne    c0024fdd <__divsf3+0x91>
c0024fae:	85 c0                	test   eax,eax
c0024fb0:	74 2b                	je     c0024fdd <__divsf3+0x91>
c0024fb2:	51                   	push   ecx
c0024fb3:	51                   	push   ecx
c0024fb4:	6a 00                	push   0x0
c0024fb6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024fb9:	e8 d2 03 00 00       	call   c0025390 <__nesf2>
c0024fbe:	83 c4 10             	add    esp,0x10
c0024fc1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0024fc4:	85 c0                	test   eax,eax
c0024fc6:	0f 85 a1 01 00 00    	jne    c002516d <__divsf3+0x221>
c0024fcc:	e9 92 01 00 00       	jmp    c0025163 <__divsf3+0x217>
c0024fd1:	85 c9                	test   ecx,ecx
c0024fd3:	75 1b                	jne    c0024ff0 <__divsf3+0xa4>
c0024fd5:	8d 57 01             	lea    edx,[edi+0x1]
c0024fd8:	80 e2 fe             	and    dl,0xfe
c0024fdb:	74 1e                	je     c0024ffb <__divsf3+0xaf>
c0024fdd:	85 ff                	test   edi,edi
c0024fdf:	0f 89 88 01 00 00    	jns    c002516d <__divsf3+0x221>
c0024fe5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0024feb:	e9 7d 01 00 00       	jmp    c002516d <__divsf3+0x221>
c0024ff0:	8d 56 ff             	lea    edx,[esi-0x1]
c0024ff3:	01 c9                	add    ecx,ecx
c0024ff5:	78 3d                	js     c0025034 <__divsf3+0xe8>
c0024ff7:	89 d6                	mov    esi,edx
c0024ff9:	eb f5                	jmp    c0024ff0 <__divsf3+0xa4>
c0024ffb:	85 c0                	test   eax,eax
c0024ffd:	b8 00 00 00 00       	mov    eax,0x0
c0025002:	74 18                	je     c002501c <__divsf3+0xd0>
c0025004:	52                   	push   edx
c0025005:	52                   	push   edx
c0025006:	50                   	push   eax
c0025007:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002500a:	e8 81 03 00 00       	call   c0025390 <__nesf2>
c002500f:	83 c4 10             	add    esp,0x10
c0025012:	85 c0                	test   eax,eax
c0025014:	0f 85 50 01 00 00    	jne    c002516a <__divsf3+0x21e>
c002501a:	eb c1                	jmp    c0024fdd <__divsf3+0x91>
c002501c:	56                   	push   esi
c002501d:	56                   	push   esi
c002501e:	50                   	push   eax
c002501f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025022:	e8 69 03 00 00       	call   c0025390 <__nesf2>
c0025027:	83 c4 10             	add    esp,0x10
c002502a:	85 c0                	test   eax,eax
c002502c:	0f 84 31 01 00 00    	je     c0025163 <__divsf3+0x217>
c0025032:	eb a9                	jmp    c0024fdd <__divsf3+0x91>
c0025034:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025037:	c1 e3 08             	shl    ebx,0x8
c002503a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025040:	8d 57 01             	lea    edx,[edi+0x1]
c0025043:	80 e2 fe             	and    dl,0xfe
c0025046:	75 71                	jne    c00250b9 <__divsf3+0x16d>
c0025048:	85 c0                	test   eax,eax
c002504a:	ba 00 00 00 00       	mov    edx,0x0
c002504f:	74 2f                	je     c0025080 <__divsf3+0x134>
c0025051:	51                   	push   ecx
c0025052:	51                   	push   ecx
c0025053:	52                   	push   edx
c0025054:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025057:	e8 f9 02 00 00       	call   c0025355 <__eqsf2>
c002505c:	83 c4 10             	add    esp,0x10
c002505f:	85 c0                	test   eax,eax
c0025061:	0f 85 03 01 00 00    	jne    c002516a <__divsf3+0x21e>
c0025067:	31 d2                	xor    edx,edx
c0025069:	89 d3                	mov    ebx,edx
c002506b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002506e:	31 f8                	xor    eax,edi
c0025070:	0f 89 f7 00 00 00    	jns    c002516d <__divsf3+0x221>
c0025076:	bb 00 00 00 80       	mov    ebx,0x80000000
c002507b:	e9 ed 00 00 00       	jmp    c002516d <__divsf3+0x221>
c0025080:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025083:	50                   	push   eax
c0025084:	50                   	push   eax
c0025085:	52                   	push   edx
c0025086:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025089:	e8 c7 02 00 00       	call   c0025355 <__eqsf2>
c002508e:	83 c4 10             	add    esp,0x10
c0025091:	85 c0                	test   eax,eax
c0025093:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025096:	75 16                	jne    c00250ae <__divsf3+0x162>
c0025098:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002509b:	31 fb                	xor    ebx,edi
c002509d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00250a3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00250a9:	e9 bf 00 00 00       	jmp    c002516d <__divsf3+0x221>
c00250ae:	8d 46 01             	lea    eax,[esi+0x1]
c00250b1:	01 db                	add    ebx,ebx
c00250b3:	78 04                	js     c00250b9 <__divsf3+0x16d>
c00250b5:	89 c6                	mov    esi,eax
c00250b7:	eb f5                	jmp    c00250ae <__divsf3+0x162>
c00250b9:	89 c8                	mov    eax,ecx
c00250bb:	0d 00 00 00 80       	or     eax,0x80000000
c00250c0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00250c6:	31 d2                	xor    edx,edx
c00250c8:	39 d8                	cmp    eax,ebx
c00250ca:	72 07                	jb     c00250d3 <__divsf3+0x187>
c00250cc:	29 d8                	sub    eax,ebx
c00250ce:	ba 01 00 00 00       	mov    edx,0x1
c00250d3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00250da:	01 d2                	add    edx,edx
c00250dc:	89 c1                	mov    ecx,eax
c00250de:	01 c0                	add    eax,eax
c00250e0:	85 c9                	test   ecx,ecx
c00250e2:	78 04                	js     c00250e8 <__divsf3+0x19c>
c00250e4:	39 c3                	cmp    ebx,eax
c00250e6:	77 05                	ja     c00250ed <__divsf3+0x1a1>
c00250e8:	29 d8                	sub    eax,ebx
c00250ea:	83 ca 01             	or     edx,0x1
c00250ed:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c00250f0:	75 e8                	jne    c00250da <__divsf3+0x18e>
c00250f2:	85 c0                	test   eax,eax
c00250f4:	0f 95 c0             	setne  al
c00250f7:	0f b6 c0             	movzx  eax,al
c00250fa:	c1 e2 06             	shl    edx,0x6
c00250fd:	09 c2                	or     edx,eax
c00250ff:	78 03                	js     c0025104 <__divsf3+0x1b8>
c0025101:	01 d2                	add    edx,edx
c0025103:	4e                   	dec    esi
c0025104:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002510a:	7f 22                	jg     c002512e <__divsf3+0x1e2>
c002510c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025112:	85 f6                	test   esi,esi
c0025114:	7f 23                	jg     c0025139 <__divsf3+0x1ed>
c0025116:	83 fe e9             	cmp    esi,0xffffffe9
c0025119:	7c 1a                	jl     c0025135 <__divsf3+0x1e9>
c002511b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025121:	b9 01 00 00 00       	mov    ecx,0x1
c0025126:	29 f1                	sub    ecx,esi
c0025128:	d3 ea                	shr    edx,cl
c002512a:	31 f6                	xor    esi,esi
c002512c:	eb 0b                	jmp    c0025139 <__divsf3+0x1ed>
c002512e:	be ff 00 00 00       	mov    esi,0xff
c0025133:	eb 02                	jmp    c0025137 <__divsf3+0x1eb>
c0025135:	31 f6                	xor    esi,esi
c0025137:	31 d2                	xor    edx,edx
c0025139:	89 d0                	mov    eax,edx
c002513b:	c1 e8 08             	shr    eax,0x8
c002513e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025141:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025147:	09 fe                	or     esi,edi
c0025149:	c1 e6 17             	shl    esi,0x17
c002514c:	09 c6                	or     esi,eax
c002514e:	f6 c2 7f             	test   dl,0x7f
c0025151:	0f 95 c1             	setne  cl
c0025154:	09 c8                	or     eax,ecx
c0025156:	83 e0 01             	and    eax,0x1
c0025159:	c1 ea 07             	shr    edx,0x7
c002515c:	21 c2                	and    edx,eax
c002515e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025161:	eb 0a                	jmp    c002516d <__divsf3+0x221>
c0025163:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025168:	eb 03                	jmp    c002516d <__divsf3+0x221>
c002516a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002516d:	89 d8                	mov    eax,ebx
c002516f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025172:	5b                   	pop    ebx
c0025173:	5e                   	pop    esi
c0025174:	5f                   	pop    edi
c0025175:	5d                   	pop    ebp
c0025176:	c3                   	ret    

c0025177 <__floatsisf>:
c0025177:	55                   	push   ebp
c0025178:	89 e5                	mov    ebp,esp
c002517a:	53                   	push   ebx
c002517b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002517e:	85 d2                	test   edx,edx
c0025180:	7e 2b                	jle    c00251ad <__floatsisf+0x36>
c0025182:	0f bd ca             	bsr    ecx,edx
c0025185:	83 f1 1f             	xor    ecx,0x1f
c0025188:	d3 e2                	shl    edx,cl
c002518a:	89 d0                	mov    eax,edx
c002518c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025191:	89 c3                	mov    ebx,eax
c0025193:	c1 eb 08             	shr    ebx,0x8
c0025196:	80 e2 7f             	and    dl,0x7f
c0025199:	0f 95 c2             	setne  dl
c002519c:	09 da                	or     edx,ebx
c002519e:	83 e2 01             	and    edx,0x1
c00251a1:	c1 e8 07             	shr    eax,0x7
c00251a4:	21 c2                	and    edx,eax
c00251a6:	b8 9e 00 00 00       	mov    eax,0x9e
c00251ab:	eb 32                	jmp    c00251df <__floatsisf+0x68>
c00251ad:	b8 00 00 00 00       	mov    eax,0x0
c00251b2:	74 34                	je     c00251e8 <__floatsisf+0x71>
c00251b4:	f7 da                	neg    edx
c00251b6:	0f bd ca             	bsr    ecx,edx
c00251b9:	83 f1 1f             	xor    ecx,0x1f
c00251bc:	d3 e2                	shl    edx,cl
c00251be:	89 d0                	mov    eax,edx
c00251c0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00251c5:	89 c3                	mov    ebx,eax
c00251c7:	c1 eb 08             	shr    ebx,0x8
c00251ca:	80 e2 7f             	and    dl,0x7f
c00251cd:	0f 95 c2             	setne  dl
c00251d0:	09 da                	or     edx,ebx
c00251d2:	83 e2 01             	and    edx,0x1
c00251d5:	c1 e8 07             	shr    eax,0x7
c00251d8:	21 c2                	and    edx,eax
c00251da:	b8 9e 01 00 00       	mov    eax,0x19e
c00251df:	29 c8                	sub    eax,ecx
c00251e1:	c1 e0 17             	shl    eax,0x17
c00251e4:	09 d8                	or     eax,ebx
c00251e6:	01 d0                	add    eax,edx
c00251e8:	5b                   	pop    ebx
c00251e9:	5d                   	pop    ebp
c00251ea:	c3                   	ret    

c00251eb <__floatunsisf>:
c00251eb:	55                   	push   ebp
c00251ec:	89 e5                	mov    ebp,esp
c00251ee:	53                   	push   ebx
c00251ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00251f2:	31 c0                	xor    eax,eax
c00251f4:	85 d2                	test   edx,edx
c00251f6:	74 32                	je     c002522a <__floatunsisf+0x3f>
c00251f8:	0f bd ca             	bsr    ecx,edx
c00251fb:	83 f1 1f             	xor    ecx,0x1f
c00251fe:	d3 e2                	shl    edx,cl
c0025200:	89 d0                	mov    eax,edx
c0025202:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025207:	89 c3                	mov    ebx,eax
c0025209:	c1 eb 08             	shr    ebx,0x8
c002520c:	80 e2 7f             	and    dl,0x7f
c002520f:	0f 95 c2             	setne  dl
c0025212:	09 da                	or     edx,ebx
c0025214:	83 e2 01             	and    edx,0x1
c0025217:	c1 e8 07             	shr    eax,0x7
c002521a:	21 c2                	and    edx,eax
c002521c:	b8 9e 00 00 00       	mov    eax,0x9e
c0025221:	29 c8                	sub    eax,ecx
c0025223:	c1 e0 17             	shl    eax,0x17
c0025226:	09 d8                	or     eax,ebx
c0025228:	01 d0                	add    eax,edx
c002522a:	5b                   	pop    ebx
c002522b:	5d                   	pop    ebp
c002522c:	c3                   	ret    

c002522d <__fixsfsi>:
c002522d:	55                   	push   ebp
c002522e:	89 e5                	mov    ebp,esp
c0025230:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025233:	89 d1                	mov    ecx,edx
c0025235:	c1 e1 08             	shl    ecx,0x8
c0025238:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002523e:	c1 fa 17             	sar    edx,0x17
c0025241:	78 1c                	js     c002525f <__fixsfsi+0x32>
c0025243:	83 ea 7f             	sub    edx,0x7f
c0025246:	31 c0                	xor    eax,eax
c0025248:	83 fa 1e             	cmp    edx,0x1e
c002524b:	77 40                	ja     c002528d <__fixsfsi+0x60>
c002524d:	89 c8                	mov    eax,ecx
c002524f:	0d 00 00 00 80       	or     eax,0x80000000
c0025254:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025259:	29 d1                	sub    ecx,edx
c002525b:	d3 e8                	shr    eax,cl
c002525d:	eb 2e                	jmp    c002528d <__fixsfsi+0x60>
c002525f:	31 c0                	xor    eax,eax
c0025261:	81 c2 81 00 00 00    	add    edx,0x81
c0025267:	78 24                	js     c002528d <__fixsfsi+0x60>
c0025269:	83 fa 1e             	cmp    edx,0x1e
c002526c:	7e 09                	jle    c0025277 <__fixsfsi+0x4a>
c002526e:	83 fa 1f             	cmp    edx,0x1f
c0025271:	75 18                	jne    c002528b <__fixsfsi+0x5e>
c0025273:	85 c9                	test   ecx,ecx
c0025275:	75 14                	jne    c002528b <__fixsfsi+0x5e>
c0025277:	89 c8                	mov    eax,ecx
c0025279:	0d 00 00 00 80       	or     eax,0x80000000
c002527e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025283:	29 d1                	sub    ecx,edx
c0025285:	d3 e8                	shr    eax,cl
c0025287:	f7 d8                	neg    eax
c0025289:	eb 02                	jmp    c002528d <__fixsfsi+0x60>
c002528b:	31 c0                	xor    eax,eax
c002528d:	5d                   	pop    ebp
c002528e:	c3                   	ret    

c002528f <__fixunssfsi>:
c002528f:	55                   	push   ebp
c0025290:	89 e5                	mov    ebp,esp
c0025292:	53                   	push   ebx
c0025293:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025296:	89 d3                	mov    ebx,edx
c0025298:	c1 fb 17             	sar    ebx,0x17
c002529b:	83 eb 7f             	sub    ebx,0x7f
c002529e:	31 c0                	xor    eax,eax
c00252a0:	83 fb 1f             	cmp    ebx,0x1f
c00252a3:	77 18                	ja     c00252bd <__fixunssfsi+0x2e>
c00252a5:	89 d0                	mov    eax,edx
c00252a7:	c1 e0 08             	shl    eax,0x8
c00252aa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00252af:	0d 00 00 00 80       	or     eax,0x80000000
c00252b4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00252b9:	29 d9                	sub    ecx,ebx
c00252bb:	d3 e8                	shr    eax,cl
c00252bd:	5b                   	pop    ebx
c00252be:	5d                   	pop    ebp
c00252bf:	c3                   	ret    

c00252c0 <__cmpsf2>:
c00252c0:	55                   	push   ebp
c00252c1:	89 e5                	mov    ebp,esp
c00252c3:	57                   	push   edi
c00252c4:	56                   	push   esi
c00252c5:	53                   	push   ebx
c00252c6:	83 ec 24             	sub    esp,0x24
c00252c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00252cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252cf:	e8 4f 10 00 00       	call   c0026323 <__truncdfsf2>
c00252d4:	5a                   	pop    edx
c00252d5:	59                   	pop    ecx
c00252d6:	89 c3                	mov    ebx,eax
c00252d8:	c1 e8 17             	shr    eax,0x17
c00252db:	0f b6 f0             	movzx  esi,al
c00252de:	89 d8                	mov    eax,ebx
c00252e0:	c1 e8 1f             	shr    eax,0x1f
c00252e3:	31 c6                	xor    esi,eax
c00252e5:	c1 e3 08             	shl    ebx,0x8
c00252e8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00252eb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00252ee:	e8 30 10 00 00       	call   c0026323 <__truncdfsf2>
c00252f3:	83 c4 10             	add    esp,0x10
c00252f6:	89 c1                	mov    ecx,eax
c00252f8:	c1 e9 17             	shr    ecx,0x17
c00252fb:	0f b6 c9             	movzx  ecx,cl
c00252fe:	89 c7                	mov    edi,eax
c0025300:	c1 ef 1f             	shr    edi,0x1f
c0025303:	89 ca                	mov    edx,ecx
c0025305:	31 fa                	xor    edx,edi
c0025307:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002530a:	c1 e0 08             	shl    eax,0x8
c002530d:	89 c2                	mov    edx,eax
c002530f:	89 d8                	mov    eax,ebx
c0025311:	09 d0                	or     eax,edx
c0025313:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025318:	09 f0                	or     eax,esi
c002531a:	75 08                	jne    c0025324 <__cmpsf2+0x64>
c002531c:	31 c0                	xor    eax,eax
c002531e:	39 f9                	cmp    ecx,edi
c0025320:	75 0c                	jne    c002532e <__cmpsf2+0x6e>
c0025322:	eb 29                	jmp    c002534d <__cmpsf2+0x8d>
c0025324:	b8 01 00 00 00       	mov    eax,0x1
c0025329:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002532c:	7f 1f                	jg     c002534d <__cmpsf2+0x8d>
c002532e:	83 c8 ff             	or     eax,0xffffffff
c0025331:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025334:	7c 17                	jl     c002534d <__cmpsf2+0x8d>
c0025336:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002533c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025342:	b8 01 00 00 00       	mov    eax,0x1
c0025347:	39 d3                	cmp    ebx,edx
c0025349:	77 02                	ja     c002534d <__cmpsf2+0x8d>
c002534b:	19 c0                	sbb    eax,eax
c002534d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025350:	5b                   	pop    ebx
c0025351:	5e                   	pop    esi
c0025352:	5f                   	pop    edi
c0025353:	5d                   	pop    ebp
c0025354:	c3                   	ret    

c0025355 <__eqsf2>:
c0025355:	55                   	push   ebp
c0025356:	89 e5                	mov    ebp,esp
c0025358:	83 ec 24             	sub    esp,0x24
c002535b:	6a 01                	push   0x1
c002535d:	83 ec 0c             	sub    esp,0xc
c0025360:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025363:	e8 df 10 00 00       	call   c0026447 <__extendsfdf2>
c0025368:	83 c4 10             	add    esp,0x10
c002536b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002536e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025371:	52                   	push   edx
c0025372:	50                   	push   eax
c0025373:	50                   	push   eax
c0025374:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025377:	e8 cb 10 00 00       	call   c0026447 <__extendsfdf2>
c002537c:	59                   	pop    ecx
c002537d:	59                   	pop    ecx
c002537e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025381:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025384:	52                   	push   edx
c0025385:	50                   	push   eax
c0025386:	e8 35 ff ff ff       	call   c00252c0 <__cmpsf2>
c002538b:	83 c4 20             	add    esp,0x20
c002538e:	c9                   	leave  
c002538f:	c3                   	ret    

c0025390 <__nesf2>:
c0025390:	eb c3                	jmp    c0025355 <__eqsf2>

c0025392 <__gtsf2>:
c0025392:	55                   	push   ebp
c0025393:	89 e5                	mov    ebp,esp
c0025395:	83 ec 24             	sub    esp,0x24
c0025398:	6a ff                	push   0xffffffff
c002539a:	83 ec 0c             	sub    esp,0xc
c002539d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00253a0:	e8 a2 10 00 00       	call   c0026447 <__extendsfdf2>
c00253a5:	83 c4 10             	add    esp,0x10
c00253a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253ae:	52                   	push   edx
c00253af:	50                   	push   eax
c00253b0:	50                   	push   eax
c00253b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253b4:	e8 8e 10 00 00       	call   c0026447 <__extendsfdf2>
c00253b9:	59                   	pop    ecx
c00253ba:	59                   	pop    ecx
c00253bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253c1:	52                   	push   edx
c00253c2:	50                   	push   eax
c00253c3:	e8 f8 fe ff ff       	call   c00252c0 <__cmpsf2>
c00253c8:	83 c4 20             	add    esp,0x20
c00253cb:	c9                   	leave  
c00253cc:	c3                   	ret    

c00253cd <__gesf2>:
c00253cd:	eb c3                	jmp    c0025392 <__gtsf2>

c00253cf <__ltsf2>:
c00253cf:	eb 84                	jmp    c0025355 <__eqsf2>

c00253d1 <__lesf2>:
c00253d1:	eb 82                	jmp    c0025355 <__eqsf2>

c00253d3 <__adddf3>:
c00253d3:	55                   	push   ebp
c00253d4:	89 e5                	mov    ebp,esp
c00253d6:	57                   	push   edi
c00253d7:	56                   	push   esi
c00253d8:	53                   	push   ebx
c00253d9:	83 ec 24             	sub    esp,0x24
c00253dc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00253df:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00253e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00253e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00253e8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00253eb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00253ee:	89 c8                	mov    eax,ecx
c00253f0:	89 ce                	mov    esi,ecx
c00253f2:	c1 fe 14             	sar    esi,0x14
c00253f5:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00253f8:	89 fb                	mov    ebx,edi
c00253fa:	89 fa                	mov    edx,edi
c00253fc:	c1 e2 0b             	shl    edx,0xb
c00253ff:	c1 e0 0b             	shl    eax,0xb
c0025402:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025407:	c1 eb 15             	shr    ebx,0x15
c002540a:	09 d8                	or     eax,ebx
c002540c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002540f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025412:	c1 fe 14             	sar    esi,0x14
c0025415:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025418:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002541b:	89 f3                	mov    ebx,esi
c002541d:	c1 e3 0b             	shl    ebx,0xb
c0025420:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025423:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025426:	c1 e3 0b             	shl    ebx,0xb
c0025429:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002542f:	c1 ee 15             	shr    esi,0x15
c0025432:	09 f3                	or     ebx,esi
c0025434:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025437:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002543a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002543d:	0f 88 5f 02 00 00    	js     c00256a2 <__adddf3+0x2cf>
c0025443:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025446:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025449:	85 db                	test   ebx,ebx
c002544b:	0f 8e c7 00 00 00    	jle    c0025518 <__adddf3+0x145>
c0025451:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025458:	75 1a                	jne    c0025474 <__adddf3+0xa1>
c002545a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002545d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0025460:	0f 84 b2 05 00 00    	je     c0025a18 <__adddf3+0x645>
c0025466:	4b                   	dec    ebx
c0025467:	75 23                	jne    c002548c <__adddf3+0xb9>
c0025469:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002546c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002546f:	e9 99 00 00 00       	jmp    c002550d <__adddf3+0x13a>
c0025474:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025477:	f7 d6                	not    esi
c0025479:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002547f:	0f 84 93 05 00 00    	je     c0025a18 <__adddf3+0x645>
c0025485:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002548c:	83 fb 1f             	cmp    ebx,0x1f
c002548f:	7e 42                	jle    c00254d3 <__adddf3+0x100>
c0025491:	83 fb 3f             	cmp    ebx,0x3f
c0025494:	0f 8f 7e 05 00 00    	jg     c0025a18 <__adddf3+0x645>
c002549a:	83 e3 1f             	and    ebx,0x1f
c002549d:	89 d9                	mov    ecx,ebx
c002549f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00254a2:	d3 ef                	shr    edi,cl
c00254a4:	31 db                	xor    ebx,ebx
c00254a6:	85 c9                	test   ecx,ecx
c00254a8:	74 15                	je     c00254bf <__adddf3+0xec>
c00254aa:	be 20 00 00 00       	mov    esi,0x20
c00254af:	29 ce                	sub    esi,ecx
c00254b1:	89 f1                	mov    ecx,esi
c00254b3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00254b6:	d3 e6                	shl    esi,cl
c00254b8:	31 db                	xor    ebx,ebx
c00254ba:	85 f6                	test   esi,esi
c00254bc:	0f 95 c3             	setne  bl
c00254bf:	31 c9                	xor    ecx,ecx
c00254c1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00254c5:	0f 95 c1             	setne  cl
c00254c8:	09 cf                	or     edi,ecx
c00254ca:	09 fb                	or     ebx,edi
c00254cc:	01 da                	add    edx,ebx
c00254ce:	83 d0 00             	adc    eax,0x0
c00254d1:	eb 3a                	jmp    c002550d <__adddf3+0x13a>
c00254d3:	bf 20 00 00 00       	mov    edi,0x20
c00254d8:	29 df                	sub    edi,ebx
c00254da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00254dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00254e0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00254e3:	d3 e6                	shl    esi,cl
c00254e5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00254e8:	88 d9                	mov    cl,bl
c00254ea:	d3 ef                	shr    edi,cl
c00254ec:	09 fe                	or     esi,edi
c00254ee:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00254f1:	88 d9                	mov    cl,bl
c00254f3:	d3 ef                	shr    edi,cl
c00254f5:	89 fb                	mov    ebx,edi
c00254f7:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00254fa:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00254fd:	d3 e7                	shl    edi,cl
c00254ff:	85 ff                	test   edi,edi
c0025501:	0f 95 c1             	setne  cl
c0025504:	0f b6 c9             	movzx  ecx,cl
c0025507:	09 ce                	or     esi,ecx
c0025509:	01 f2                	add    edx,esi
c002550b:	11 d8                	adc    eax,ebx
c002550d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025510:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0025513:	e9 52 01 00 00       	jmp    c002566a <__adddf3+0x297>
c0025518:	0f 84 d5 00 00 00    	je     c00255f3 <__adddf3+0x220>
c002551e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025521:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0025524:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025527:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002552a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0025531:	75 20                	jne    c0025553 <__adddf3+0x180>
c0025533:	89 d6                	mov    esi,edx
c0025535:	09 c6                	or     esi,eax
c0025537:	0f 84 db 04 00 00    	je     c0025a18 <__adddf3+0x645>
c002553d:	4b                   	dec    ebx
c002553e:	75 29                	jne    c0025569 <__adddf3+0x196>
c0025540:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025543:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025546:	01 d1                	add    ecx,edx
c0025548:	11 c6                	adc    esi,eax
c002554a:	89 f0                	mov    eax,esi
c002554c:	89 ca                	mov    edx,ecx
c002554e:	e9 17 01 00 00       	jmp    c002566a <__adddf3+0x297>
c0025553:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025556:	f7 d6                	not    esi
c0025558:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002555e:	0f 84 b4 04 00 00    	je     c0025a18 <__adddf3+0x645>
c0025564:	0d 00 00 00 80       	or     eax,0x80000000
c0025569:	83 fb 1f             	cmp    ebx,0x1f
c002556c:	7e 48                	jle    c00255b6 <__adddf3+0x1e3>
c002556e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025571:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025574:	83 fb 3f             	cmp    ebx,0x3f
c0025577:	0f 8f 9b 04 00 00    	jg     c0025a18 <__adddf3+0x645>
c002557d:	83 e3 1f             	and    ebx,0x1f
c0025580:	89 d9                	mov    ecx,ebx
c0025582:	89 c7                	mov    edi,eax
c0025584:	d3 ef                	shr    edi,cl
c0025586:	31 db                	xor    ebx,ebx
c0025588:	85 c9                	test   ecx,ecx
c002558a:	74 12                	je     c002559e <__adddf3+0x1cb>
c002558c:	be 20 00 00 00       	mov    esi,0x20
c0025591:	29 ce                	sub    esi,ecx
c0025593:	89 f1                	mov    ecx,esi
c0025595:	d3 e0                	shl    eax,cl
c0025597:	31 db                	xor    ebx,ebx
c0025599:	85 c0                	test   eax,eax
c002559b:	0f 95 c3             	setne  bl
c002559e:	31 c0                	xor    eax,eax
c00255a0:	85 d2                	test   edx,edx
c00255a2:	0f 95 c0             	setne  al
c00255a5:	09 c7                	or     edi,eax
c00255a7:	09 fb                	or     ebx,edi
c00255a9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00255ac:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00255af:	01 da                	add    edx,ebx
c00255b1:	83 d6 00             	adc    esi,0x0
c00255b4:	eb 39                	jmp    c00255ef <__adddf3+0x21c>
c00255b6:	be 20 00 00 00       	mov    esi,0x20
c00255bb:	29 de                	sub    esi,ebx
c00255bd:	89 c7                	mov    edi,eax
c00255bf:	89 f1                	mov    ecx,esi
c00255c1:	d3 e7                	shl    edi,cl
c00255c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00255c6:	89 d7                	mov    edi,edx
c00255c8:	88 d9                	mov    cl,bl
c00255ca:	d3 ef                	shr    edi,cl
c00255cc:	89 f9                	mov    ecx,edi
c00255ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00255d1:	09 cf                	or     edi,ecx
c00255d3:	88 d9                	mov    cl,bl
c00255d5:	d3 e8                	shr    eax,cl
c00255d7:	89 f1                	mov    ecx,esi
c00255d9:	d3 e2                	shl    edx,cl
c00255db:	85 d2                	test   edx,edx
c00255dd:	0f 95 c2             	setne  dl
c00255e0:	0f b6 d2             	movzx  edx,dl
c00255e3:	09 d7                	or     edi,edx
c00255e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00255e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00255eb:	01 fa                	add    edx,edi
c00255ed:	11 c6                	adc    esi,eax
c00255ef:	89 f0                	mov    eax,esi
c00255f1:	eb 77                	jmp    c002566a <__adddf3+0x297>
c00255f3:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00255f6:	46                   	inc    esi
c00255f7:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00255fa:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0025600:	75 41                	jne    c0025643 <__adddf3+0x270>
c0025602:	89 d3                	mov    ebx,edx
c0025604:	09 c3                	or     ebx,eax
c0025606:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002560d:	75 27                	jne    c0025636 <__adddf3+0x263>
c002560f:	85 db                	test   ebx,ebx
c0025611:	0f 84 fb 03 00 00    	je     c0025a12 <__adddf3+0x63f>
c0025617:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002561a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002561d:	0f 84 f5 03 00 00    	je     c0025a18 <__adddf3+0x645>
c0025623:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025626:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025629:	85 c0                	test   eax,eax
c002562b:	0f 89 91 03 00 00    	jns    c00259c2 <__adddf3+0x5ef>
c0025631:	e9 85 03 00 00       	jmp    c00259bb <__adddf3+0x5e8>
c0025636:	85 db                	test   ebx,ebx
c0025638:	0f 85 da 03 00 00    	jne    c0025a18 <__adddf3+0x645>
c002563e:	e9 cf 03 00 00       	jmp    c0025a12 <__adddf3+0x63f>
c0025643:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0025646:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0025649:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002564c:	f7 d1                	not    ecx
c002564e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025654:	0f 84 70 03 00 00    	je     c00259ca <__adddf3+0x5f7>
c002565a:	d1 ea                	shr    edx,1
c002565c:	89 c1                	mov    ecx,eax
c002565e:	c1 e1 1f             	shl    ecx,0x1f
c0025661:	09 ca                	or     edx,ecx
c0025663:	d1 e8                	shr    eax,1
c0025665:	e9 6f 03 00 00       	jmp    c00259d9 <__adddf3+0x606>
c002566a:	85 c0                	test   eax,eax
c002566c:	0f 89 67 03 00 00    	jns    c00259d9 <__adddf3+0x606>
c0025672:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0025675:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025678:	f7 d1                	not    ecx
c002567a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0025680:	0f 84 44 03 00 00    	je     c00259ca <__adddf3+0x5f7>
c0025686:	89 d1                	mov    ecx,edx
c0025688:	d1 e9                	shr    ecx,1
c002568a:	83 e2 01             	and    edx,0x1
c002568d:	09 ca                	or     edx,ecx
c002568f:	89 c1                	mov    ecx,eax
c0025691:	c1 e1 1f             	shl    ecx,0x1f
c0025694:	09 ca                	or     edx,ecx
c0025696:	d1 e8                	shr    eax,1
c0025698:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002569d:	e9 37 03 00 00       	jmp    c00259d9 <__adddf3+0x606>
c00256a2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00256a5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00256ab:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00256ae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00256b1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00256b7:	29 de                	sub    esi,ebx
c00256b9:	85 f6                	test   esi,esi
c00256bb:	0f 8e bd 00 00 00    	jle    c002577e <__adddf3+0x3ab>
c00256c1:	85 db                	test   ebx,ebx
c00256c3:	75 17                	jne    c00256dc <__adddf3+0x309>
c00256c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00256c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00256cb:	0f 84 47 03 00 00    	je     c0025a18 <__adddf3+0x645>
c00256d1:	4e                   	dec    esi
c00256d2:	75 20                	jne    c00256f4 <__adddf3+0x321>
c00256d4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00256d7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00256da:	eb 5b                	jmp    c0025737 <__adddf3+0x364>
c00256dc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00256df:	f7 d3                	not    ebx
c00256e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00256e7:	0f 84 2b 03 00 00    	je     c0025a18 <__adddf3+0x645>
c00256ed:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00256f4:	83 fe 1f             	cmp    esi,0x1f
c00256f7:	7e 49                	jle    c0025742 <__adddf3+0x36f>
c00256f9:	83 fe 3f             	cmp    esi,0x3f
c00256fc:	0f 8f 16 03 00 00    	jg     c0025a18 <__adddf3+0x645>
c0025702:	83 e6 1f             	and    esi,0x1f
c0025705:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025708:	89 f1                	mov    ecx,esi
c002570a:	d3 ef                	shr    edi,cl
c002570c:	31 db                	xor    ebx,ebx
c002570e:	85 f6                	test   esi,esi
c0025710:	74 13                	je     c0025725 <__adddf3+0x352>
c0025712:	b9 20 00 00 00       	mov    ecx,0x20
c0025717:	29 f1                	sub    ecx,esi
c0025719:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002571c:	d3 e6                	shl    esi,cl
c002571e:	31 db                	xor    ebx,ebx
c0025720:	85 f6                	test   esi,esi
c0025722:	0f 95 c3             	setne  bl
c0025725:	31 c9                	xor    ecx,ecx
c0025727:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002572b:	0f 95 c1             	setne  cl
c002572e:	09 cf                	or     edi,ecx
c0025730:	09 fb                	or     ebx,edi
c0025732:	29 da                	sub    edx,ebx
c0025734:	83 d8 00             	sbb    eax,0x0
c0025737:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002573a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002573d:	e9 aa 01 00 00       	jmp    c00258ec <__adddf3+0x519>
c0025742:	bf 20 00 00 00       	mov    edi,0x20
c0025747:	29 f7                	sub    edi,esi
c0025749:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002574c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002574f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0025752:	d3 e3                	shl    ebx,cl
c0025754:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025757:	89 f1                	mov    ecx,esi
c0025759:	d3 ef                	shr    edi,cl
c002575b:	09 fb                	or     ebx,edi
c002575d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0025760:	89 f1                	mov    ecx,esi
c0025762:	d3 ef                	shr    edi,cl
c0025764:	89 fe                	mov    esi,edi
c0025766:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025769:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002576c:	d3 e7                	shl    edi,cl
c002576e:	85 ff                	test   edi,edi
c0025770:	0f 95 c1             	setne  cl
c0025773:	0f b6 c9             	movzx  ecx,cl
c0025776:	09 cb                	or     ebx,ecx
c0025778:	29 da                	sub    edx,ebx
c002577a:	19 f0                	sbb    eax,esi
c002577c:	eb b9                	jmp    c0025737 <__adddf3+0x364>
c002577e:	0f 84 cd 00 00 00    	je     c0025851 <__adddf3+0x47e>
c0025784:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0025787:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002578a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002578d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025791:	75 1b                	jne    c00257ae <__adddf3+0x3db>
c0025793:	89 d6                	mov    esi,edx
c0025795:	09 c6                	or     esi,eax
c0025797:	0f 84 7b 02 00 00    	je     c0025a18 <__adddf3+0x645>
c002579d:	4b                   	dec    ebx
c002579e:	75 24                	jne    c00257c4 <__adddf3+0x3f1>
c00257a0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00257a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00257a6:	29 d1                	sub    ecx,edx
c00257a8:	19 c6                	sbb    esi,eax
c00257aa:	89 ca                	mov    edx,ecx
c00257ac:	eb 61                	jmp    c002580f <__adddf3+0x43c>
c00257ae:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00257b1:	f7 d6                	not    esi
c00257b3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00257b9:	0f 84 59 02 00 00    	je     c0025a18 <__adddf3+0x645>
c00257bf:	0d 00 00 00 80       	or     eax,0x80000000
c00257c4:	83 fb 1f             	cmp    ebx,0x1f
c00257c7:	7e 4d                	jle    c0025816 <__adddf3+0x443>
c00257c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00257cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00257cf:	83 fb 3f             	cmp    ebx,0x3f
c00257d2:	0f 8f 40 02 00 00    	jg     c0025a18 <__adddf3+0x645>
c00257d8:	83 e3 1f             	and    ebx,0x1f
c00257db:	89 d9                	mov    ecx,ebx
c00257dd:	89 c7                	mov    edi,eax
c00257df:	d3 ef                	shr    edi,cl
c00257e1:	31 db                	xor    ebx,ebx
c00257e3:	85 c9                	test   ecx,ecx
c00257e5:	74 12                	je     c00257f9 <__adddf3+0x426>
c00257e7:	be 20 00 00 00       	mov    esi,0x20
c00257ec:	29 ce                	sub    esi,ecx
c00257ee:	89 f1                	mov    ecx,esi
c00257f0:	d3 e0                	shl    eax,cl
c00257f2:	31 db                	xor    ebx,ebx
c00257f4:	85 c0                	test   eax,eax
c00257f6:	0f 95 c3             	setne  bl
c00257f9:	31 c0                	xor    eax,eax
c00257fb:	85 d2                	test   edx,edx
c00257fd:	0f 95 c0             	setne  al
c0025800:	09 c7                	or     edi,eax
c0025802:	09 fb                	or     ebx,edi
c0025804:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025807:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002580a:	29 da                	sub    edx,ebx
c002580c:	83 de 00             	sbb    esi,0x0
c002580f:	89 f0                	mov    eax,esi
c0025811:	e9 d6 00 00 00       	jmp    c00258ec <__adddf3+0x519>
c0025816:	be 20 00 00 00       	mov    esi,0x20
c002581b:	29 de                	sub    esi,ebx
c002581d:	89 c7                	mov    edi,eax
c002581f:	89 f1                	mov    ecx,esi
c0025821:	d3 e7                	shl    edi,cl
c0025823:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0025826:	89 d7                	mov    edi,edx
c0025828:	88 d9                	mov    cl,bl
c002582a:	d3 ef                	shr    edi,cl
c002582c:	89 f9                	mov    ecx,edi
c002582e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025831:	09 cf                	or     edi,ecx
c0025833:	88 d9                	mov    cl,bl
c0025835:	d3 e8                	shr    eax,cl
c0025837:	89 f1                	mov    ecx,esi
c0025839:	d3 e2                	shl    edx,cl
c002583b:	85 d2                	test   edx,edx
c002583d:	0f 95 c2             	setne  dl
c0025840:	0f b6 d2             	movzx  edx,dl
c0025843:	09 d7                	or     edi,edx
c0025845:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025848:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002584b:	29 fa                	sub    edx,edi
c002584d:	19 c6                	sbb    esi,eax
c002584f:	eb be                	jmp    c002580f <__adddf3+0x43c>
c0025851:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025854:	8d 5e 01             	lea    ebx,[esi+0x1]
c0025857:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002585d:	75 6a                	jne    c00258c9 <__adddf3+0x4f6>
c002585f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025863:	75 58                	jne    c00258bd <__adddf3+0x4ea>
c0025865:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025868:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002586b:	89 d6                	mov    esi,edx
c002586d:	09 c6                	or     esi,eax
c002586f:	75 17                	jne    c0025888 <__adddf3+0x4b5>
c0025871:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025874:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025877:	85 db                	test   ebx,ebx
c0025879:	0f 85 99 01 00 00    	jne    c0025a18 <__adddf3+0x645>
c002587f:	31 ff                	xor    edi,edi
c0025881:	31 c9                	xor    ecx,ecx
c0025883:	e9 90 01 00 00       	jmp    c0025a18 <__adddf3+0x645>
c0025888:	85 db                	test   ebx,ebx
c002588a:	0f 84 88 01 00 00    	je     c0025a18 <__adddf3+0x645>
c0025890:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0025893:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0025896:	85 c0                	test   eax,eax
c0025898:	79 10                	jns    c00258aa <__adddf3+0x4d7>
c002589a:	31 c9                	xor    ecx,ecx
c002589c:	f7 da                	neg    edx
c002589e:	0f 95 c1             	setne  cl
c00258a1:	01 c8                	add    eax,ecx
c00258a3:	f7 d8                	neg    eax
c00258a5:	e9 2f 01 00 00       	jmp    c00259d9 <__adddf3+0x606>
c00258aa:	31 ff                	xor    edi,edi
c00258ac:	31 c9                	xor    ecx,ecx
c00258ae:	89 c3                	mov    ebx,eax
c00258b0:	09 d3                	or     ebx,edx
c00258b2:	0f 84 60 01 00 00    	je     c0025a18 <__adddf3+0x645>
c00258b8:	e9 05 01 00 00       	jmp    c00259c2 <__adddf3+0x5ef>
c00258bd:	31 ff                	xor    edi,edi
c00258bf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00258c4:	e9 4f 01 00 00       	jmp    c0025a18 <__adddf3+0x645>
c00258c9:	89 c1                	mov    ecx,eax
c00258cb:	89 d0                	mov    eax,edx
c00258cd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00258d0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00258d3:	89 ca                	mov    edx,ecx
c00258d5:	85 c9                	test   ecx,ecx
c00258d7:	79 2c                	jns    c0025905 <__adddf3+0x532>
c00258d9:	31 c9                	xor    ecx,ecx
c00258db:	f7 d8                	neg    eax
c00258dd:	0f 95 c1             	setne  cl
c00258e0:	01 ca                	add    edx,ecx
c00258e2:	f7 da                	neg    edx
c00258e4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00258e7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00258ea:	eb 19                	jmp    c0025905 <__adddf3+0x532>
c00258ec:	85 c0                	test   eax,eax
c00258ee:	0f 89 e5 00 00 00    	jns    c00259d9 <__adddf3+0x606>
c00258f4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00258f9:	89 c1                	mov    ecx,eax
c00258fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00258fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0025901:	89 d0                	mov    eax,edx
c0025903:	89 ca                	mov    edx,ecx
c0025905:	85 d2                	test   edx,edx
c0025907:	74 59                	je     c0025962 <__adddf3+0x58f>
c0025909:	0f bd da             	bsr    ebx,edx
c002590c:	83 f3 1f             	xor    ebx,0x1f
c002590f:	88 d9                	mov    cl,bl
c0025911:	d3 e2                	shl    edx,cl
c0025913:	bf 20 00 00 00       	mov    edi,0x20
c0025918:	89 f9                	mov    ecx,edi
c002591a:	29 d9                	sub    ecx,ebx
c002591c:	89 c6                	mov    esi,eax
c002591e:	d3 ee                	shr    esi,cl
c0025920:	09 d6                	or     esi,edx
c0025922:	88 d9                	mov    cl,bl
c0025924:	d3 e0                	shl    eax,cl
c0025926:	89 c2                	mov    edx,eax
c0025928:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002592b:	25 ff 07 00 00       	and    eax,0x7ff
c0025930:	39 d8                	cmp    eax,ebx
c0025932:	7f 22                	jg     c0025956 <__adddf3+0x583>
c0025934:	29 c3                	sub    ebx,eax
c0025936:	43                   	inc    ebx
c0025937:	88 d9                	mov    cl,bl
c0025939:	d3 ea                	shr    edx,cl
c002593b:	29 df                	sub    edi,ebx
c002593d:	89 f9                	mov    ecx,edi
c002593f:	89 f0                	mov    eax,esi
c0025941:	d3 e0                	shl    eax,cl
c0025943:	09 c2                	or     edx,eax
c0025945:	89 f0                	mov    eax,esi
c0025947:	88 d9                	mov    cl,bl
c0025949:	d3 e8                	shr    eax,cl
c002594b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002594e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0025954:	eb 6f                	jmp    c00259c5 <__adddf3+0x5f2>
c0025956:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025959:	29 d8                	sub    eax,ebx
c002595b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002595e:	89 f0                	mov    eax,esi
c0025960:	eb 59                	jmp    c00259bb <__adddf3+0x5e8>
c0025962:	85 c0                	test   eax,eax
c0025964:	74 6a                	je     c00259d0 <__adddf3+0x5fd>
c0025966:	0f bd c8             	bsr    ecx,eax
c0025969:	83 f1 1f             	xor    ecx,0x1f
c002596c:	d3 e0                	shl    eax,cl
c002596e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025971:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025977:	83 c1 20             	add    ecx,0x20
c002597a:	39 cb                	cmp    ebx,ecx
c002597c:	7f 35                	jg     c00259b3 <__adddf3+0x5e0>
c002597e:	29 d9                	sub    ecx,ebx
c0025980:	8d 71 01             	lea    esi,[ecx+0x1]
c0025983:	83 fe 1f             	cmp    esi,0x1f
c0025986:	7e 09                	jle    c0025991 <__adddf3+0x5be>
c0025988:	83 e9 1f             	sub    ecx,0x1f
c002598b:	d3 e8                	shr    eax,cl
c002598d:	89 c3                	mov    ebx,eax
c002598f:	eb 11                	jmp    c00259a2 <__adddf3+0x5cf>
c0025991:	b9 20 00 00 00       	mov    ecx,0x20
c0025996:	29 f1                	sub    ecx,esi
c0025998:	89 c3                	mov    ebx,eax
c002599a:	d3 e3                	shl    ebx,cl
c002599c:	89 f1                	mov    ecx,esi
c002599e:	d3 e8                	shr    eax,cl
c00259a0:	89 c2                	mov    edx,eax
c00259a2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00259a5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00259aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00259ad:	89 d0                	mov    eax,edx
c00259af:	89 da                	mov    edx,ebx
c00259b1:	eb 26                	jmp    c00259d9 <__adddf3+0x606>
c00259b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00259b6:	29 cf                	sub    edi,ecx
c00259b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00259bb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00259c0:	eb 17                	jmp    c00259d9 <__adddf3+0x606>
c00259c2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00259c5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00259c8:	eb 0f                	jmp    c00259d9 <__adddf3+0x606>
c00259ca:	31 d2                	xor    edx,edx
c00259cc:	31 c0                	xor    eax,eax
c00259ce:	eb 09                	jmp    c00259d9 <__adddf3+0x606>
c00259d0:	89 c2                	mov    edx,eax
c00259d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00259d9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00259dc:	c1 e1 14             	shl    ecx,0x14
c00259df:	89 c3                	mov    ebx,eax
c00259e1:	c1 eb 0b             	shr    ebx,0xb
c00259e4:	09 d9                	or     ecx,ebx
c00259e6:	89 d3                	mov    ebx,edx
c00259e8:	c1 eb 0b             	shr    ebx,0xb
c00259eb:	c1 e0 15             	shl    eax,0x15
c00259ee:	09 d8                	or     eax,ebx
c00259f0:	89 c7                	mov    edi,eax
c00259f2:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00259f8:	0f 95 c0             	setne  al
c00259fb:	89 c6                	mov    esi,eax
c00259fd:	09 f3                	or     ebx,esi
c00259ff:	83 e3 01             	and    ebx,0x1
c0025a02:	c1 ea 0a             	shr    edx,0xa
c0025a05:	21 da                	and    edx,ebx
c0025a07:	89 f8                	mov    eax,edi
c0025a09:	01 d0                	add    eax,edx
c0025a0b:	83 d1 00             	adc    ecx,0x0
c0025a0e:	89 c7                	mov    edi,eax
c0025a10:	eb 06                	jmp    c0025a18 <__adddf3+0x645>
c0025a12:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0025a15:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0025a18:	89 f8                	mov    eax,edi
c0025a1a:	89 ca                	mov    edx,ecx
c0025a1c:	83 c4 24             	add    esp,0x24
c0025a1f:	5b                   	pop    ebx
c0025a20:	5e                   	pop    esi
c0025a21:	5f                   	pop    edi
c0025a22:	5d                   	pop    ebp
c0025a23:	c3                   	ret    

c0025a24 <__subdf3>:
c0025a24:	55                   	push   ebp
c0025a25:	89 e5                	mov    ebp,esp
c0025a27:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a2a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0025a2d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025a33:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0025a36:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0025a39:	5d                   	pop    ebp
c0025a3a:	e9 94 f9 ff ff       	jmp    c00253d3 <__adddf3>

c0025a3f <__negdf2>:
c0025a3f:	55                   	push   ebp
c0025a40:	89 e5                	mov    ebp,esp
c0025a42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a45:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025a48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025a4e:	5d                   	pop    ebp
c0025a4f:	c3                   	ret    

c0025a50 <__muldf3>:
c0025a50:	55                   	push   ebp
c0025a51:	89 e5                	mov    ebp,esp
c0025a53:	57                   	push   edi
c0025a54:	56                   	push   esi
c0025a55:	53                   	push   ebx
c0025a56:	83 ec 24             	sub    esp,0x24
c0025a59:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025a5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a62:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a65:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a68:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0025a6b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025a6e:	89 c8                	mov    eax,ecx
c0025a70:	c1 f8 14             	sar    eax,0x14
c0025a73:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a76:	89 f8                	mov    eax,edi
c0025a78:	89 fb                	mov    ebx,edi
c0025a7a:	c1 e3 0b             	shl    ebx,0xb
c0025a7d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0025a80:	c1 e1 0b             	shl    ecx,0xb
c0025a83:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0025a89:	c1 e8 15             	shr    eax,0x15
c0025a8c:	09 c1                	or     ecx,eax
c0025a8e:	89 d6                	mov    esi,edx
c0025a90:	89 d0                	mov    eax,edx
c0025a92:	c1 f8 14             	sar    eax,0x14
c0025a95:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025a98:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025a9b:	89 c3                	mov    ebx,eax
c0025a9d:	c1 e3 0b             	shl    ebx,0xb
c0025aa0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025aa3:	c1 e6 0b             	shl    esi,0xb
c0025aa6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0025aac:	c1 e8 15             	shr    eax,0x15
c0025aaf:	09 c6                	or     esi,eax
c0025ab1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025ab4:	25 ff 07 00 00       	and    eax,0x7ff
c0025ab9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025abc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025abf:	25 ff 07 00 00       	and    eax,0x7ff
c0025ac4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025ac7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025aca:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0025acd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0025ad4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025ad7:	40                   	inc    eax
c0025ad8:	a9 fe 07 00 00       	test   eax,0x7fe
c0025add:	0f 85 8d 00 00 00    	jne    c0025b70 <__muldf3+0x120>
c0025ae3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025ae6:	09 c8                	or     eax,ecx
c0025ae8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0025aec:	74 44                	je     c0025b32 <__muldf3+0xe2>
c0025aee:	85 c0                	test   eax,eax
c0025af0:	0f 85 31 02 00 00    	jne    c0025d27 <__muldf3+0x2d7>
c0025af6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025af9:	40                   	inc    eax
c0025afa:	a9 fe 07 00 00       	test   eax,0x7fe
c0025aff:	75 13                	jne    c0025b14 <__muldf3+0xc4>
c0025b01:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025b04:	09 f1                	or     ecx,esi
c0025b06:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025b0a:	74 22                	je     c0025b2e <__muldf3+0xde>
c0025b0c:	85 c9                	test   ecx,ecx
c0025b0e:	0f 85 0d 02 00 00    	jne    c0025d21 <__muldf3+0x2d1>
c0025b14:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0025b18:	0f 89 09 02 00 00    	jns    c0025d27 <__muldf3+0x2d7>
c0025b1e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025b21:	05 00 00 00 80       	add    eax,0x80000000
c0025b26:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b29:	e9 f9 01 00 00       	jmp    c0025d27 <__muldf3+0x2d7>
c0025b2e:	85 c9                	test   ecx,ecx
c0025b30:	eb 2e                	jmp    c0025b60 <__muldf3+0x110>
c0025b32:	85 c0                	test   eax,eax
c0025b34:	74 20                	je     c0025b56 <__muldf3+0x106>
c0025b36:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0025b39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b3c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025b3f:	c1 ef 1f             	shr    edi,0x1f
c0025b42:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0025b45:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0025b48:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025b4b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025b4e:	09 f9                	or     ecx,edi
c0025b50:	78 1e                	js     c0025b70 <__muldf3+0x120>
c0025b52:	89 c3                	mov    ebx,eax
c0025b54:	eb e0                	jmp    c0025b36 <__muldf3+0xe6>
c0025b56:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025b59:	f7 d0                	not    eax
c0025b5b:	a9 ff 07 00 00       	test   eax,0x7ff
c0025b60:	75 b2                	jne    c0025b14 <__muldf3+0xc4>
c0025b62:	31 ff                	xor    edi,edi
c0025b64:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0025b6b:	e9 b7 01 00 00       	jmp    c0025d27 <__muldf3+0x2d7>
c0025b70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025b73:	40                   	inc    eax
c0025b74:	a9 fe 07 00 00       	test   eax,0x7fe
c0025b79:	75 57                	jne    c0025bd2 <__muldf3+0x182>
c0025b7b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b7e:	09 f0                	or     eax,esi
c0025b80:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0025b84:	74 23                	je     c0025ba9 <__muldf3+0x159>
c0025b86:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025b8a:	0f 89 91 01 00 00    	jns    c0025d21 <__muldf3+0x2d1>
c0025b90:	85 c0                	test   eax,eax
c0025b92:	0f 85 89 01 00 00    	jne    c0025d21 <__muldf3+0x2d1>
c0025b98:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0025b9b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0025ba1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025ba4:	e9 7e 01 00 00       	jmp    c0025d27 <__muldf3+0x2d7>
c0025ba9:	85 c0                	test   eax,eax
c0025bab:	75 0c                	jne    c0025bb9 <__muldf3+0x169>
c0025bad:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0025bb1:	0f 89 6a 01 00 00    	jns    c0025d21 <__muldf3+0x2d1>
c0025bb7:	eb df                	jmp    c0025b98 <__muldf3+0x148>
c0025bb9:	01 f6                	add    esi,esi
c0025bbb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025bbe:	c1 ea 1f             	shr    edx,0x1f
c0025bc1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0025bc4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0025bc7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025bca:	09 d6                	or     esi,edx
c0025bcc:	78 04                	js     c0025bd2 <__muldf3+0x182>
c0025bce:	89 c3                	mov    ebx,eax
c0025bd0:	eb e7                	jmp    c0025bb9 <__muldf3+0x169>
c0025bd2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0025bd8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025bde:	89 c8                	mov    eax,ecx
c0025be0:	f7 e6                	mul    esi
c0025be2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0025be5:	89 c7                	mov    edi,eax
c0025be7:	89 c8                	mov    eax,ecx
c0025be9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0025bec:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0025bef:	89 c1                	mov    ecx,eax
c0025bf1:	89 f0                	mov    eax,esi
c0025bf3:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0025bf6:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0025bf9:	89 c6                	mov    esi,eax
c0025bfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025bfe:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0025c01:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0025c04:	31 c0                	xor    eax,eax
c0025c06:	01 f1                	add    ecx,esi
c0025c08:	0f 92 c0             	setb   al
c0025c0b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0025c0e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025c11:	83 d6 00             	adc    esi,0x0
c0025c14:	01 c7                	add    edi,eax
c0025c16:	83 d6 00             	adc    esi,0x0
c0025c19:	01 ca                	add    edx,ecx
c0025c1b:	0f 92 c1             	setb   cl
c0025c1e:	0f b6 c9             	movzx  ecx,cl
c0025c21:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0025c24:	83 d6 00             	adc    esi,0x0
c0025c27:	01 cf                	add    edi,ecx
c0025c29:	83 d6 00             	adc    esi,0x0
c0025c2c:	31 c9                	xor    ecx,ecx
c0025c2e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0025c31:	0f 95 c1             	setne  cl
c0025c34:	09 cf                	or     edi,ecx
c0025c36:	85 f6                	test   esi,esi
c0025c38:	78 0c                	js     c0025c46 <__muldf3+0x1f6>
c0025c3a:	01 f6                	add    esi,esi
c0025c3c:	89 f8                	mov    eax,edi
c0025c3e:	c1 e8 1f             	shr    eax,0x1f
c0025c41:	09 c6                	or     esi,eax
c0025c43:	01 ff                	add    edi,edi
c0025c45:	4b                   	dec    ebx
c0025c46:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0025c4c:	0f 8f 85 00 00 00    	jg     c0025cd7 <__muldf3+0x287>
c0025c52:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0025c58:	85 db                	test   ebx,ebx
c0025c5a:	0f 8f 84 00 00 00    	jg     c0025ce4 <__muldf3+0x294>
c0025c60:	83 fb cc             	cmp    ebx,0xffffffcc
c0025c63:	7c 79                	jl     c0025cde <__muldf3+0x28e>
c0025c65:	ba 01 00 00 00       	mov    edx,0x1
c0025c6a:	29 da                	sub    edx,ebx
c0025c6c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025c72:	83 fa 1f             	cmp    edx,0x1f
c0025c75:	7e 30                	jle    c0025ca7 <__muldf3+0x257>
c0025c77:	83 fa 20             	cmp    edx,0x20
c0025c7a:	75 0b                	jne    c0025c87 <__muldf3+0x237>
c0025c7c:	31 c0                	xor    eax,eax
c0025c7e:	85 ff                	test   edi,edi
c0025c80:	0f 95 c0             	setne  al
c0025c83:	89 c7                	mov    edi,eax
c0025c85:	eb 1a                	jmp    c0025ca1 <__muldf3+0x251>
c0025c87:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0025c8a:	89 f0                	mov    eax,esi
c0025c8c:	d3 e0                	shl    eax,cl
c0025c8e:	09 f8                	or     eax,edi
c0025c90:	0f 95 c0             	setne  al
c0025c93:	0f b6 c0             	movzx  eax,al
c0025c96:	89 c7                	mov    edi,eax
c0025c98:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0025c9d:	29 d9                	sub    ecx,ebx
c0025c9f:	d3 ee                	shr    esi,cl
c0025ca1:	09 f7                	or     edi,esi
c0025ca3:	31 db                	xor    ebx,ebx
c0025ca5:	eb 3b                	jmp    c0025ce2 <__muldf3+0x292>
c0025ca7:	83 c3 1f             	add    ebx,0x1f
c0025caa:	89 f0                	mov    eax,esi
c0025cac:	88 d9                	mov    cl,bl
c0025cae:	d3 e0                	shl    eax,cl
c0025cb0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cb3:	89 f8                	mov    eax,edi
c0025cb5:	88 d1                	mov    cl,dl
c0025cb7:	d3 e8                	shr    eax,cl
c0025cb9:	89 c1                	mov    ecx,eax
c0025cbb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cbe:	09 c8                	or     eax,ecx
c0025cc0:	88 d9                	mov    cl,bl
c0025cc2:	d3 e7                	shl    edi,cl
c0025cc4:	31 db                	xor    ebx,ebx
c0025cc6:	85 ff                	test   edi,edi
c0025cc8:	0f 95 c3             	setne  bl
c0025ccb:	89 df                	mov    edi,ebx
c0025ccd:	09 c7                	or     edi,eax
c0025ccf:	88 d1                	mov    cl,dl
c0025cd1:	d3 ee                	shr    esi,cl
c0025cd3:	31 db                	xor    ebx,ebx
c0025cd5:	eb 0d                	jmp    c0025ce4 <__muldf3+0x294>
c0025cd7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0025cdc:	eb 02                	jmp    c0025ce0 <__muldf3+0x290>
c0025cde:	31 db                	xor    ebx,ebx
c0025ce0:	31 ff                	xor    edi,edi
c0025ce2:	31 f6                	xor    esi,esi
c0025ce4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025ce7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0025cea:	25 00 f8 ff ff       	and    eax,0xfffff800
c0025cef:	09 c3                	or     ebx,eax
c0025cf1:	c1 e3 14             	shl    ebx,0x14
c0025cf4:	89 f0                	mov    eax,esi
c0025cf6:	c1 e8 0b             	shr    eax,0xb
c0025cf9:	09 c3                	or     ebx,eax
c0025cfb:	89 f8                	mov    eax,edi
c0025cfd:	c1 e8 0b             	shr    eax,0xb
c0025d00:	c1 e6 15             	shl    esi,0x15
c0025d03:	09 c6                	or     esi,eax
c0025d05:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0025d0b:	0f 95 c1             	setne  cl
c0025d0e:	09 c8                	or     eax,ecx
c0025d10:	83 e0 01             	and    eax,0x1
c0025d13:	c1 ef 0a             	shr    edi,0xa
c0025d16:	21 c7                	and    edi,eax
c0025d18:	01 f7                	add    edi,esi
c0025d1a:	83 d3 00             	adc    ebx,0x0
c0025d1d:	89 da                	mov    edx,ebx
c0025d1f:	eb 03                	jmp    c0025d24 <__muldf3+0x2d4>
c0025d21:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0025d24:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0025d27:	89 f8                	mov    eax,edi
c0025d29:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025d2c:	83 c4 24             	add    esp,0x24
c0025d2f:	5b                   	pop    ebx
c0025d30:	5e                   	pop    esi
c0025d31:	5f                   	pop    edi
c0025d32:	5d                   	pop    ebp
c0025d33:	c3                   	ret    

c0025d34 <__divdf3>:
c0025d34:	55                   	push   ebp
c0025d35:	89 e5                	mov    ebp,esp
c0025d37:	57                   	push   edi
c0025d38:	56                   	push   esi
c0025d39:	53                   	push   ebx
c0025d3a:	83 ec 2c             	sub    esp,0x2c
c0025d3d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025d40:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025d43:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025d46:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0025d49:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d4c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025d4f:	89 ce                	mov    esi,ecx
c0025d51:	89 c8                	mov    eax,ecx
c0025d53:	c1 f8 14             	sar    eax,0x14
c0025d56:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d59:	89 f8                	mov    eax,edi
c0025d5b:	89 fb                	mov    ebx,edi
c0025d5d:	c1 e3 0b             	shl    ebx,0xb
c0025d60:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0025d63:	c1 e6 0b             	shl    esi,0xb
c0025d66:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0025d6c:	c1 e8 15             	shr    eax,0x15
c0025d6f:	09 c6                	or     esi,eax
c0025d71:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0025d74:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025d77:	89 c2                	mov    edx,eax
c0025d79:	c1 fa 14             	sar    edx,0x14
c0025d7c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025d7f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0025d82:	89 de                	mov    esi,ebx
c0025d84:	c1 e6 0b             	shl    esi,0xb
c0025d87:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025d8a:	c1 e0 0b             	shl    eax,0xb
c0025d8d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025d92:	c1 eb 15             	shr    ebx,0x15
c0025d95:	09 d8                	or     eax,ebx
c0025d97:	89 c2                	mov    edx,eax
c0025d99:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025d9c:	25 ff 07 00 00       	and    eax,0x7ff
c0025da1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025da4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025da7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0025dad:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0025db0:	29 d8                	sub    eax,ebx
c0025db2:	05 ff 03 00 00       	add    eax,0x3ff
c0025db7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025dba:	46                   	inc    esi
c0025dbb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0025dc1:	0f 85 a5 00 00 00    	jne    c0025e6c <__divdf3+0x138>
c0025dc7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0025dca:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0025dcd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0025dd1:	74 2a                	je     c0025dfd <__divdf3+0xc9>
c0025dd3:	85 f6                	test   esi,esi
c0025dd5:	0f 85 cc 02 00 00    	jne    c00260a7 <__divdf3+0x373>
c0025ddb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025dde:	40                   	inc    eax
c0025ddf:	a9 fe 07 00 00       	test   eax,0x7fe
c0025de4:	75 26                	jne    c0025e0c <__divdf3+0xd8>
c0025de6:	85 db                	test   ebx,ebx
c0025de8:	74 22                	je     c0025e0c <__divdf3+0xd8>
c0025dea:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025ded:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025df0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025df3:	09 d0                	or     eax,edx
c0025df5:	0f 85 ac 02 00 00    	jne    c00260a7 <__divdf3+0x373>
c0025dfb:	eb 63                	jmp    c0025e60 <__divdf3+0x12c>
c0025dfd:	85 f6                	test   esi,esi
c0025dff:	75 22                	jne    c0025e23 <__divdf3+0xef>
c0025e01:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025e04:	40                   	inc    eax
c0025e05:	a9 fe 07 00 00       	test   eax,0x7fe
c0025e0a:	74 36                	je     c0025e42 <__divdf3+0x10e>
c0025e0c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025e10:	0f 89 91 02 00 00    	jns    c00260a7 <__divdf3+0x373>
c0025e16:	89 f8                	mov    eax,edi
c0025e18:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0025e1e:	e9 80 02 00 00       	jmp    c00260a3 <__divdf3+0x36f>
c0025e23:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025e26:	01 f6                	add    esi,esi
c0025e28:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0025e2b:	c1 ef 1f             	shr    edi,0x1f
c0025e2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025e31:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0025e34:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025e37:	09 f7                	or     edi,esi
c0025e39:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0025e3c:	78 2e                	js     c0025e6c <__divdf3+0x138>
c0025e3e:	89 c8                	mov    eax,ecx
c0025e40:	eb e1                	jmp    c0025e23 <__divdf3+0xef>
c0025e42:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0025e45:	09 d0                	or     eax,edx
c0025e47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025e4b:	74 0f                	je     c0025e5c <__divdf3+0x128>
c0025e4d:	85 c0                	test   eax,eax
c0025e4f:	74 bb                	je     c0025e0c <__divdf3+0xd8>
c0025e51:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025e54:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025e57:	e9 4b 02 00 00       	jmp    c00260a7 <__divdf3+0x373>
c0025e5c:	85 c0                	test   eax,eax
c0025e5e:	75 ac                	jne    c0025e0c <__divdf3+0xd8>
c0025e60:	31 ff                	xor    edi,edi
c0025e62:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0025e67:	e9 3b 02 00 00       	jmp    c00260a7 <__divdf3+0x373>
c0025e6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0025e6f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0025e72:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0025e78:	75 6b                	jne    c0025ee5 <__divdf3+0x1b1>
c0025e7a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025e7d:	09 d6                	or     esi,edx
c0025e7f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0025e83:	74 28                	je     c0025ead <__divdf3+0x179>
c0025e85:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0025e88:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0025e8b:	85 f6                	test   esi,esi
c0025e8d:	0f 85 14 02 00 00    	jne    c00260a7 <__divdf3+0x373>
c0025e93:	31 ff                	xor    edi,edi
c0025e95:	31 c9                	xor    ecx,ecx
c0025e97:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025e9a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025e9d:	0f 89 04 02 00 00    	jns    c00260a7 <__divdf3+0x373>
c0025ea3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0025ea8:	e9 fa 01 00 00       	jmp    c00260a7 <__divdf3+0x373>
c0025ead:	85 f6                	test   esi,esi
c0025eaf:	75 1b                	jne    c0025ecc <__divdf3+0x198>
c0025eb1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0025eb4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0025eb7:	25 00 00 00 80       	and    eax,0x80000000
c0025ebc:	31 c9                	xor    ecx,ecx
c0025ebe:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0025ec3:	89 cf                	mov    edi,ecx
c0025ec5:	89 c1                	mov    ecx,eax
c0025ec7:	e9 db 01 00 00       	jmp    c00260a7 <__divdf3+0x373>
c0025ecc:	01 d2                	add    edx,edx
c0025ece:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025ed1:	c1 eb 1f             	shr    ebx,0x1f
c0025ed4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0025ed7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0025eda:	8d 48 01             	lea    ecx,[eax+0x1]
c0025edd:	09 da                	or     edx,ebx
c0025edf:	78 04                	js     c0025ee5 <__divdf3+0x1b1>
c0025ee1:	89 c8                	mov    eax,ecx
c0025ee3:	eb e7                	jmp    c0025ecc <__divdf3+0x198>
c0025ee5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ee8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025eee:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ef4:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0025ef7:	39 d6                	cmp    esi,edx
c0025ef9:	77 0d                	ja     c0025f08 <__divdf3+0x1d4>
c0025efb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025efe:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0025f01:	72 1b                	jb     c0025f1e <__divdf3+0x1ea>
c0025f03:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0025f06:	75 16                	jne    c0025f1e <__divdf3+0x1ea>
c0025f08:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025f0b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025f0e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0025f11:	83 de 00             	sbb    esi,0x0
c0025f14:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0025f17:	ba 01 00 00 00       	mov    edx,0x1
c0025f1c:	eb 02                	jmp    c0025f20 <__divdf3+0x1ec>
c0025f1e:	31 d2                	xor    edx,edx
c0025f20:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0025f27:	31 ff                	xor    edi,edi
c0025f29:	01 ff                	add    edi,edi
c0025f2b:	89 d1                	mov    ecx,edx
c0025f2d:	c1 e9 1f             	shr    ecx,0x1f
c0025f30:	09 cf                	or     edi,ecx
c0025f32:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0025f35:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0025f38:	89 da                	mov    edx,ebx
c0025f3a:	89 f3                	mov    ebx,esi
c0025f3c:	8d 34 36             	lea    esi,[esi+esi*1]
c0025f3f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025f42:	c1 e9 1f             	shr    ecx,0x1f
c0025f45:	09 ce                	or     esi,ecx
c0025f47:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025f4a:	01 c9                	add    ecx,ecx
c0025f4c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0025f4f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025f52:	85 db                	test   ebx,ebx
c0025f54:	78 29                	js     c0025f7f <__divdf3+0x24b>
c0025f56:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0025f59:	72 07                	jb     c0025f62 <__divdf3+0x22e>
c0025f5b:	75 3c                	jne    c0025f99 <__divdf3+0x265>
c0025f5d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025f60:	77 37                	ja     c0025f99 <__divdf3+0x265>
c0025f62:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025f65:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0025f68:	31 d2                	xor    edx,edx
c0025f6a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0025f6d:	0f 97 c2             	seta   dl
c0025f70:	29 d6                	sub    esi,edx
c0025f72:	89 d9                	mov    ecx,ebx
c0025f74:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0025f77:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0025f7a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025f7d:	eb 17                	jmp    c0025f96 <__divdf3+0x262>
c0025f7f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0025f82:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025f85:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0025f88:	0f 97 c1             	seta   cl
c0025f8b:	0f b6 c9             	movzx  ecx,cl
c0025f8e:	29 ce                	sub    esi,ecx
c0025f90:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0025f93:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0025f96:	83 ca 01             	or     edx,0x1
c0025f99:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0025f9c:	75 8b                	jne    c0025f29 <__divdf3+0x1f5>
c0025f9e:	c1 e7 09             	shl    edi,0x9
c0025fa1:	89 d1                	mov    ecx,edx
c0025fa3:	c1 e9 17             	shr    ecx,0x17
c0025fa6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0025fa9:	09 f3                	or     ebx,esi
c0025fab:	0f 95 c3             	setne  bl
c0025fae:	0f b6 db             	movzx  ebx,bl
c0025fb1:	c1 e2 09             	shl    edx,0x9
c0025fb4:	09 d3                	or     ebx,edx
c0025fb6:	89 ca                	mov    edx,ecx
c0025fb8:	09 fa                	or     edx,edi
c0025fba:	78 0c                	js     c0025fc8 <__divdf3+0x294>
c0025fbc:	01 d2                	add    edx,edx
c0025fbe:	89 d9                	mov    ecx,ebx
c0025fc0:	c1 e9 1f             	shr    ecx,0x1f
c0025fc3:	09 ca                	or     edx,ecx
c0025fc5:	01 db                	add    ebx,ebx
c0025fc7:	48                   	dec    eax
c0025fc8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0025fcd:	0f 8f 83 00 00 00    	jg     c0026056 <__divdf3+0x322>
c0025fd3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025fd9:	85 c0                	test   eax,eax
c0025fdb:	0f 8f 82 00 00 00    	jg     c0026063 <__divdf3+0x32f>
c0025fe1:	83 f8 cc             	cmp    eax,0xffffffcc
c0025fe4:	7c 77                	jl     c002605d <__divdf3+0x329>
c0025fe6:	be 01 00 00 00       	mov    esi,0x1
c0025feb:	29 c6                	sub    esi,eax
c0025fed:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ff3:	83 fe 1f             	cmp    esi,0x1f
c0025ff6:	7e 2f                	jle    c0026027 <__divdf3+0x2f3>
c0025ff8:	83 fe 20             	cmp    esi,0x20
c0025ffb:	75 0a                	jne    c0026007 <__divdf3+0x2d3>
c0025ffd:	85 db                	test   ebx,ebx
c0025fff:	0f 95 c3             	setne  bl
c0026002:	0f b6 db             	movzx  ebx,bl
c0026005:	eb 1a                	jmp    c0026021 <__divdf3+0x2ed>
c0026007:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002600a:	89 d7                	mov    edi,edx
c002600c:	d3 e7                	shl    edi,cl
c002600e:	89 f9                	mov    ecx,edi
c0026010:	09 d9                	or     ecx,ebx
c0026012:	0f 95 c3             	setne  bl
c0026015:	0f b6 db             	movzx  ebx,bl
c0026018:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002601d:	29 c1                	sub    ecx,eax
c002601f:	d3 ea                	shr    edx,cl
c0026021:	09 d3                	or     ebx,edx
c0026023:	31 c0                	xor    eax,eax
c0026025:	eb 3a                	jmp    c0026061 <__divdf3+0x32d>
c0026027:	83 c0 1f             	add    eax,0x1f
c002602a:	89 d7                	mov    edi,edx
c002602c:	88 c1                	mov    cl,al
c002602e:	d3 e7                	shl    edi,cl
c0026030:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026033:	89 df                	mov    edi,ebx
c0026035:	89 f1                	mov    ecx,esi
c0026037:	d3 ef                	shr    edi,cl
c0026039:	89 f9                	mov    ecx,edi
c002603b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002603e:	09 cf                	or     edi,ecx
c0026040:	88 c1                	mov    cl,al
c0026042:	d3 e3                	shl    ebx,cl
c0026044:	85 db                	test   ebx,ebx
c0026046:	0f 95 c3             	setne  bl
c0026049:	0f b6 db             	movzx  ebx,bl
c002604c:	09 fb                	or     ebx,edi
c002604e:	89 f1                	mov    ecx,esi
c0026050:	d3 ea                	shr    edx,cl
c0026052:	31 c0                	xor    eax,eax
c0026054:	eb 0d                	jmp    c0026063 <__divdf3+0x32f>
c0026056:	b8 ff 07 00 00       	mov    eax,0x7ff
c002605b:	eb 02                	jmp    c002605f <__divdf3+0x32b>
c002605d:	31 c0                	xor    eax,eax
c002605f:	31 db                	xor    ebx,ebx
c0026061:	31 d2                	xor    edx,edx
c0026063:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026066:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026069:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002606f:	09 c8                	or     eax,ecx
c0026071:	c1 e0 14             	shl    eax,0x14
c0026074:	89 d1                	mov    ecx,edx
c0026076:	c1 e9 0b             	shr    ecx,0xb
c0026079:	09 c8                	or     eax,ecx
c002607b:	89 c6                	mov    esi,eax
c002607d:	89 d9                	mov    ecx,ebx
c002607f:	c1 e9 0b             	shr    ecx,0xb
c0026082:	c1 e2 15             	shl    edx,0x15
c0026085:	09 ca                	or     edx,ecx
c0026087:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002608d:	0f 95 c0             	setne  al
c0026090:	09 c1                	or     ecx,eax
c0026092:	83 e1 01             	and    ecx,0x1
c0026095:	c1 eb 0a             	shr    ebx,0xa
c0026098:	21 cb                	and    ebx,ecx
c002609a:	01 d3                	add    ebx,edx
c002609c:	89 d8                	mov    eax,ebx
c002609e:	83 d6 00             	adc    esi,0x0
c00260a1:	89 f2                	mov    edx,esi
c00260a3:	89 c7                	mov    edi,eax
c00260a5:	89 d1                	mov    ecx,edx
c00260a7:	89 f8                	mov    eax,edi
c00260a9:	89 ca                	mov    edx,ecx
c00260ab:	83 c4 2c             	add    esp,0x2c
c00260ae:	5b                   	pop    ebx
c00260af:	5e                   	pop    esi
c00260b0:	5f                   	pop    edi
c00260b1:	5d                   	pop    ebp
c00260b2:	c3                   	ret    

c00260b3 <__floatsidf>:
c00260b3:	55                   	push   ebp
c00260b4:	89 e5                	mov    ebp,esp
c00260b6:	56                   	push   esi
c00260b7:	53                   	push   ebx
c00260b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00260bb:	85 db                	test   ebx,ebx
c00260bd:	7e 15                	jle    c00260d4 <__floatsidf+0x21>
c00260bf:	0f bd cb             	bsr    ecx,ebx
c00260c2:	83 f1 1f             	xor    ecx,0x1f
c00260c5:	d3 e3                	shl    ebx,cl
c00260c7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00260cd:	b8 1e 04 00 00       	mov    eax,0x41e
c00260d2:	eb 21                	jmp    c00260f5 <__floatsidf+0x42>
c00260d4:	b8 00 00 00 00       	mov    eax,0x0
c00260d9:	ba 00 00 00 00       	mov    edx,0x0
c00260de:	74 2a                	je     c002610a <__floatsidf+0x57>
c00260e0:	f7 db                	neg    ebx
c00260e2:	0f bd cb             	bsr    ecx,ebx
c00260e5:	83 f1 1f             	xor    ecx,0x1f
c00260e8:	d3 e3                	shl    ebx,cl
c00260ea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00260f0:	b8 1e 0c 00 00       	mov    eax,0xc1e
c00260f5:	29 c8                	sub    eax,ecx
c00260f7:	c1 e0 14             	shl    eax,0x14
c00260fa:	89 c1                	mov    ecx,eax
c00260fc:	89 de                	mov    esi,ebx
c00260fe:	c1 ee 0b             	shr    esi,0xb
c0026101:	09 f1                	or     ecx,esi
c0026103:	89 ca                	mov    edx,ecx
c0026105:	c1 e3 15             	shl    ebx,0x15
c0026108:	89 d8                	mov    eax,ebx
c002610a:	5b                   	pop    ebx
c002610b:	5e                   	pop    esi
c002610c:	5d                   	pop    ebp
c002610d:	c3                   	ret    

c002610e <__floatunsidf>:
c002610e:	55                   	push   ebp
c002610f:	89 e5                	mov    ebp,esp
c0026111:	56                   	push   esi
c0026112:	53                   	push   ebx
c0026113:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026116:	85 db                	test   ebx,ebx
c0026118:	74 2a                	je     c0026144 <__floatunsidf+0x36>
c002611a:	0f bd cb             	bsr    ecx,ebx
c002611d:	83 f1 1f             	xor    ecx,0x1f
c0026120:	d3 e3                	shl    ebx,cl
c0026122:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026128:	b8 1e 04 00 00       	mov    eax,0x41e
c002612d:	29 c8                	sub    eax,ecx
c002612f:	c1 e0 14             	shl    eax,0x14
c0026132:	89 c1                	mov    ecx,eax
c0026134:	89 de                	mov    esi,ebx
c0026136:	c1 ee 0b             	shr    esi,0xb
c0026139:	09 f1                	or     ecx,esi
c002613b:	89 ca                	mov    edx,ecx
c002613d:	c1 e3 15             	shl    ebx,0x15
c0026140:	89 d8                	mov    eax,ebx
c0026142:	eb 04                	jmp    c0026148 <__floatunsidf+0x3a>
c0026144:	31 c0                	xor    eax,eax
c0026146:	31 d2                	xor    edx,edx
c0026148:	5b                   	pop    ebx
c0026149:	5e                   	pop    esi
c002614a:	5d                   	pop    ebp
c002614b:	c3                   	ret    

c002614c <__fixdfsi>:
c002614c:	55                   	push   ebp
c002614d:	89 e5                	mov    ebp,esp
c002614f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026152:	89 d1                	mov    ecx,edx
c0026154:	c1 e1 0b             	shl    ecx,0xb
c0026157:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002615d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026160:	c1 e8 15             	shr    eax,0x15
c0026163:	09 c1                	or     ecx,eax
c0026165:	c1 fa 14             	sar    edx,0x14
c0026168:	78 1f                	js     c0026189 <__fixdfsi+0x3d>
c002616a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026170:	31 c0                	xor    eax,eax
c0026172:	83 fa 1e             	cmp    edx,0x1e
c0026175:	77 40                	ja     c00261b7 <__fixdfsi+0x6b>
c0026177:	89 c8                	mov    eax,ecx
c0026179:	0d 00 00 00 80       	or     eax,0x80000000
c002617e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026183:	29 d1                	sub    ecx,edx
c0026185:	d3 e8                	shr    eax,cl
c0026187:	eb 2e                	jmp    c00261b7 <__fixdfsi+0x6b>
c0026189:	31 c0                	xor    eax,eax
c002618b:	81 c2 01 04 00 00    	add    edx,0x401
c0026191:	78 24                	js     c00261b7 <__fixdfsi+0x6b>
c0026193:	83 fa 1e             	cmp    edx,0x1e
c0026196:	7e 09                	jle    c00261a1 <__fixdfsi+0x55>
c0026198:	83 fa 1f             	cmp    edx,0x1f
c002619b:	75 18                	jne    c00261b5 <__fixdfsi+0x69>
c002619d:	85 c9                	test   ecx,ecx
c002619f:	75 14                	jne    c00261b5 <__fixdfsi+0x69>
c00261a1:	89 c8                	mov    eax,ecx
c00261a3:	0d 00 00 00 80       	or     eax,0x80000000
c00261a8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00261ad:	29 d1                	sub    ecx,edx
c00261af:	d3 e8                	shr    eax,cl
c00261b1:	f7 d8                	neg    eax
c00261b3:	eb 02                	jmp    c00261b7 <__fixdfsi+0x6b>
c00261b5:	31 c0                	xor    eax,eax
c00261b7:	5d                   	pop    ebp
c00261b8:	c3                   	ret    

c00261b9 <__fixunsdfsi>:
c00261b9:	55                   	push   ebp
c00261ba:	89 e5                	mov    ebp,esp
c00261bc:	53                   	push   ebx
c00261bd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00261c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00261c3:	89 d3                	mov    ebx,edx
c00261c5:	c1 fb 14             	sar    ebx,0x14
c00261c8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00261ce:	31 c0                	xor    eax,eax
c00261d0:	83 fb 1f             	cmp    ebx,0x1f
c00261d3:	77 1d                	ja     c00261f2 <__fixunsdfsi+0x39>
c00261d5:	89 d0                	mov    eax,edx
c00261d7:	c1 e0 0b             	shl    eax,0xb
c00261da:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00261df:	c1 e9 15             	shr    ecx,0x15
c00261e2:	09 c8                	or     eax,ecx
c00261e4:	0d 00 00 00 80       	or     eax,0x80000000
c00261e9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00261ee:	29 d9                	sub    ecx,ebx
c00261f0:	d3 e8                	shr    eax,cl
c00261f2:	5b                   	pop    ebx
c00261f3:	5d                   	pop    ebp
c00261f4:	c3                   	ret    

c00261f5 <__cmpdf2>:
c00261f5:	55                   	push   ebp
c00261f6:	89 e5                	mov    ebp,esp
c00261f8:	57                   	push   edi
c00261f9:	56                   	push   esi
c00261fa:	53                   	push   ebx
c00261fb:	83 ec 0c             	sub    esp,0xc
c00261fe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026201:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026204:	89 ca                	mov    edx,ecx
c0026206:	c1 ea 14             	shr    edx,0x14
c0026209:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002620f:	89 cb                	mov    ebx,ecx
c0026211:	c1 fb 1f             	sar    ebx,0x1f
c0026214:	31 da                	xor    edx,ebx
c0026216:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026219:	89 df                	mov    edi,ebx
c002621b:	c1 e7 0b             	shl    edi,0xb
c002621e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026221:	c1 e1 0b             	shl    ecx,0xb
c0026224:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002622a:	c1 eb 15             	shr    ebx,0x15
c002622d:	09 d9                	or     ecx,ebx
c002622f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026232:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026235:	89 ce                	mov    esi,ecx
c0026237:	c1 ee 14             	shr    esi,0x14
c002623a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026240:	89 cb                	mov    ebx,ecx
c0026242:	c1 fb 1f             	sar    ebx,0x1f
c0026245:	31 de                	xor    esi,ebx
c0026247:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002624a:	89 df                	mov    edi,ebx
c002624c:	c1 e7 0b             	shl    edi,0xb
c002624f:	c1 e1 0b             	shl    ecx,0xb
c0026252:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026258:	c1 eb 15             	shr    ebx,0x15
c002625b:	09 d9                	or     ecx,ebx
c002625d:	89 d3                	mov    ebx,edx
c002625f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026265:	43                   	inc    ebx
c0026266:	83 fb 01             	cmp    ebx,0x1
c0026269:	77 08                	ja     c0026273 <__cmpdf2+0x7e>
c002626b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002626e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026271:	75 68                	jne    c00262db <__cmpdf2+0xe6>
c0026273:	89 f3                	mov    ebx,esi
c0026275:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002627b:	43                   	inc    ebx
c002627c:	83 fb 01             	cmp    ebx,0x1
c002627f:	77 06                	ja     c0026287 <__cmpdf2+0x92>
c0026281:	89 fb                	mov    ebx,edi
c0026283:	09 cb                	or     ebx,ecx
c0026285:	75 54                	jne    c00262db <__cmpdf2+0xe6>
c0026287:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002628a:	09 f8                	or     eax,edi
c002628c:	09 c8                	or     eax,ecx
c002628e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026291:	75 12                	jne    c00262a5 <__cmpdf2+0xb0>
c0026293:	8d 42 01             	lea    eax,[edx+0x1]
c0026296:	83 f8 01             	cmp    eax,0x1
c0026299:	77 0a                	ja     c00262a5 <__cmpdf2+0xb0>
c002629b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002629e:	31 c0                	xor    eax,eax
c00262a0:	83 fb 01             	cmp    ebx,0x1
c00262a3:	76 36                	jbe    c00262db <__cmpdf2+0xe6>
c00262a5:	b8 01 00 00 00       	mov    eax,0x1
c00262aa:	39 f2                	cmp    edx,esi
c00262ac:	7f 2d                	jg     c00262db <__cmpdf2+0xe6>
c00262ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00262b3:	7c 26                	jl     c00262db <__cmpdf2+0xe6>
c00262b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00262b8:	77 07                	ja     c00262c1 <__cmpdf2+0xcc>
c00262ba:	72 16                	jb     c00262d2 <__cmpdf2+0xdd>
c00262bc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00262bf:	76 0a                	jbe    c00262cb <__cmpdf2+0xd6>
c00262c1:	89 d0                	mov    eax,edx
c00262c3:	c1 f8 1f             	sar    eax,0x1f
c00262c6:	83 c8 01             	or     eax,0x1
c00262c9:	eb 10                	jmp    c00262db <__cmpdf2+0xe6>
c00262cb:	b8 00 00 00 00       	mov    eax,0x0
c00262d0:	73 09                	jae    c00262db <__cmpdf2+0xe6>
c00262d2:	89 d0                	mov    eax,edx
c00262d4:	c1 f8 1f             	sar    eax,0x1f
c00262d7:	83 e0 02             	and    eax,0x2
c00262da:	48                   	dec    eax
c00262db:	83 c4 0c             	add    esp,0xc
c00262de:	5b                   	pop    ebx
c00262df:	5e                   	pop    esi
c00262e0:	5f                   	pop    edi
c00262e1:	5d                   	pop    ebp
c00262e2:	c3                   	ret    

c00262e3 <__eqdf2>:
c00262e3:	55                   	push   ebp
c00262e4:	89 e5                	mov    ebp,esp
c00262e6:	50                   	push   eax
c00262e7:	6a 01                	push   0x1
c00262e9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00262ec:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00262ef:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00262f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f5:	e8 fb fe ff ff       	call   c00261f5 <__cmpdf2>
c00262fa:	83 c4 18             	add    esp,0x18
c00262fd:	c9                   	leave  
c00262fe:	c3                   	ret    

c00262ff <__nedf2>:
c00262ff:	eb e2                	jmp    c00262e3 <__eqdf2>

c0026301 <__gtdf2>:
c0026301:	55                   	push   ebp
c0026302:	89 e5                	mov    ebp,esp
c0026304:	50                   	push   eax
c0026305:	6a ff                	push   0xffffffff
c0026307:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002630a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002630d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026310:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026313:	e8 dd fe ff ff       	call   c00261f5 <__cmpdf2>
c0026318:	83 c4 18             	add    esp,0x18
c002631b:	c9                   	leave  
c002631c:	c3                   	ret    

c002631d <__gedf2>:
c002631d:	eb e2                	jmp    c0026301 <__gtdf2>

c002631f <__ltdf2>:
c002631f:	eb c2                	jmp    c00262e3 <__eqdf2>

c0026321 <__ledf2>:
c0026321:	eb c0                	jmp    c00262e3 <__eqdf2>

c0026323 <__truncdfsf2>:
c0026323:	55                   	push   ebp
c0026324:	89 e5                	mov    ebp,esp
c0026326:	57                   	push   edi
c0026327:	56                   	push   esi
c0026328:	53                   	push   ebx
c0026329:	83 ec 0c             	sub    esp,0xc
c002632c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002632f:	89 d1                	mov    ecx,edx
c0026331:	c1 f9 14             	sar    ecx,0x14
c0026334:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026337:	89 df                	mov    edi,ebx
c0026339:	c1 e7 0b             	shl    edi,0xb
c002633c:	89 d0                	mov    eax,edx
c002633e:	c1 e0 0b             	shl    eax,0xb
c0026341:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026346:	c1 eb 15             	shr    ebx,0x15
c0026349:	09 d8                	or     eax,ebx
c002634b:	89 cb                	mov    ebx,ecx
c002634d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026353:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026359:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002635f:	0f 86 9e 00 00 00    	jbe    c0026403 <__truncdfsf2+0xe0>
c0026365:	85 db                	test   ebx,ebx
c0026367:	75 0a                	jne    c0026373 <__truncdfsf2+0x50>
c0026369:	c1 fa 17             	sar    edx,0x17
c002636c:	30 d2                	xor    dl,dl
c002636e:	e9 84 00 00 00       	jmp    c00263f7 <__truncdfsf2+0xd4>
c0026373:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026379:	83 fe 83             	cmp    esi,0xffffff83
c002637c:	7d 4b                	jge    c00263c9 <__truncdfsf2+0xa6>
c002637e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026383:	29 f1                	sub    ecx,esi
c0026385:	83 f9 1f             	cmp    ecx,0x1f
c0026388:	7f 6b                	jg     c00263f5 <__truncdfsf2+0xd2>
c002638a:	0d 00 00 00 80       	or     eax,0x80000000
c002638f:	89 c3                	mov    ebx,eax
c0026391:	d3 eb                	shr    ebx,cl
c0026393:	be 01 00 00 00       	mov    esi,0x1
c0026398:	d3 e6                	shl    esi,cl
c002639a:	4e                   	dec    esi
c002639b:	21 f0                	and    eax,esi
c002639d:	09 f8                	or     eax,edi
c002639f:	0f 95 c0             	setne  al
c00263a2:	0f b6 c0             	movzx  eax,al
c00263a5:	09 c3                	or     ebx,eax
c00263a7:	89 d9                	mov    ecx,ebx
c00263a9:	c1 e9 08             	shr    ecx,0x8
c00263ac:	f6 c3 7f             	test   bl,0x7f
c00263af:	0f 95 c0             	setne  al
c00263b2:	09 c8                	or     eax,ecx
c00263b4:	83 e0 01             	and    eax,0x1
c00263b7:	c1 eb 07             	shr    ebx,0x7
c00263ba:	21 c3                	and    ebx,eax
c00263bc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00263c2:	09 d1                	or     ecx,edx
c00263c4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00263c7:	eb 76                	jmp    c002643f <__truncdfsf2+0x11c>
c00263c9:	83 c6 80             	add    esi,0xffffff80
c00263cc:	7e 1d                	jle    c00263eb <__truncdfsf2+0xc8>
c00263ce:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00263d4:	75 0b                	jne    c00263e1 <__truncdfsf2+0xbe>
c00263d6:	09 f8                	or     eax,edi
c00263d8:	74 09                	je     c00263e3 <__truncdfsf2+0xc0>
c00263da:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00263df:	eb 02                	jmp    c00263e3 <__truncdfsf2+0xc0>
c00263e1:	31 c0                	xor    eax,eax
c00263e3:	c1 fa 17             	sar    edx,0x17
c00263e6:	80 ca ff             	or     dl,0xff
c00263e9:	eb 0e                	jmp    c00263f9 <__truncdfsf2+0xd6>
c00263eb:	c1 fa 1f             	sar    edx,0x1f
c00263ee:	c1 e2 08             	shl    edx,0x8
c00263f1:	09 ca                	or     edx,ecx
c00263f3:	eb 04                	jmp    c00263f9 <__truncdfsf2+0xd6>
c00263f5:	31 d2                	xor    edx,edx
c00263f7:	31 c0                	xor    eax,eax
c00263f9:	c1 e2 17             	shl    edx,0x17
c00263fc:	c1 e8 08             	shr    eax,0x8
c00263ff:	09 d0                	or     eax,edx
c0026401:	eb 3c                	jmp    c002643f <__truncdfsf2+0x11c>
c0026403:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026409:	89 ca                	mov    edx,ecx
c002640b:	c1 fa 0b             	sar    edx,0xb
c002640e:	c1 e2 08             	shl    edx,0x8
c0026411:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026414:	31 db                	xor    ebx,ebx
c0026416:	85 ff                	test   edi,edi
c0026418:	0f 95 c3             	setne  bl
c002641b:	09 d8                	or     eax,ebx
c002641d:	89 c3                	mov    ebx,eax
c002641f:	c1 eb 08             	shr    ebx,0x8
c0026422:	a8 7f                	test   al,0x7f
c0026424:	0f 95 c2             	setne  dl
c0026427:	89 d6                	mov    esi,edx
c0026429:	09 de                	or     esi,ebx
c002642b:	83 e6 01             	and    esi,0x1
c002642e:	c1 e8 07             	shr    eax,0x7
c0026431:	21 f0                	and    eax,esi
c0026433:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026436:	09 ca                	or     edx,ecx
c0026438:	c1 e2 17             	shl    edx,0x17
c002643b:	09 da                	or     edx,ebx
c002643d:	01 d0                	add    eax,edx
c002643f:	83 c4 0c             	add    esp,0xc
c0026442:	5b                   	pop    ebx
c0026443:	5e                   	pop    esi
c0026444:	5f                   	pop    edi
c0026445:	5d                   	pop    ebp
c0026446:	c3                   	ret    

c0026447 <__extendsfdf2>:
c0026447:	55                   	push   ebp
c0026448:	89 e5                	mov    ebp,esp
c002644a:	57                   	push   edi
c002644b:	56                   	push   esi
c002644c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002644f:	89 d1                	mov    ecx,edx
c0026451:	c1 f9 17             	sar    ecx,0x17
c0026454:	c1 e2 08             	shl    edx,0x8
c0026457:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002645d:	89 c8                	mov    eax,ecx
c002645f:	80 e4 f8             	and    ah,0xf8
c0026462:	8d 71 01             	lea    esi,[ecx+0x1]
c0026465:	81 e6 fe 00 00 00    	and    esi,0xfe
c002646b:	75 27                	jne    c0026494 <__extendsfdf2+0x4d>
c002646d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0026473:	75 18                	jne    c002648d <__extendsfdf2+0x46>
c0026475:	85 d2                	test   edx,edx
c0026477:	74 20                	je     c0026499 <__extendsfdf2+0x52>
c0026479:	41                   	inc    ecx
c002647a:	01 d2                	add    edx,edx
c002647c:	79 fb                	jns    c0026479 <__extendsfdf2+0x32>
c002647e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026484:	29 c8                	sub    eax,ecx
c0026486:	05 81 03 00 00       	add    eax,0x381
c002648b:	eb 0c                	jmp    c0026499 <__extendsfdf2+0x52>
c002648d:	05 00 07 00 00       	add    eax,0x700
c0026492:	eb 05                	jmp    c0026499 <__extendsfdf2+0x52>
c0026494:	05 80 03 00 00       	add    eax,0x380
c0026499:	c1 e0 14             	shl    eax,0x14
c002649c:	89 c1                	mov    ecx,eax
c002649e:	89 d0                	mov    eax,edx
c00264a0:	c1 e8 0b             	shr    eax,0xb
c00264a3:	09 c1                	or     ecx,eax
c00264a5:	c1 e2 15             	shl    edx,0x15
c00264a8:	89 d0                	mov    eax,edx
c00264aa:	89 ca                	mov    edx,ecx
c00264ac:	5e                   	pop    esi
c00264ad:	5f                   	pop    edi
c00264ae:	5d                   	pop    ebp
c00264af:	c3                   	ret    

c00264b0 <fabs>:
c00264b0:	83 ec 0c             	sub    esp,0xc
c00264b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00264ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264be:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00264c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00264c7:	dd 04 24             	fld    QWORD PTR [esp]
c00264ca:	83 c4 0c             	add    esp,0xc
c00264cd:	c3                   	ret    
c00264ce:	66 90                	xchg   ax,ax

c00264d0 <lrint>:
c00264d0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00264d4:	83 ec 04             	sub    esp,0x4
c00264d7:	db 1c 24             	fistp  DWORD PTR [esp]
c00264da:	58                   	pop    eax
c00264db:	c3                   	ret    

c00264dc <lrintf>:
c00264dc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00264e0:	83 ec 04             	sub    esp,0x4
c00264e3:	db 1c 24             	fistp  DWORD PTR [esp]
c00264e6:	58                   	pop    eax
c00264e7:	c3                   	ret    

Disassembly of section .init:

c00264e8 <_init>:
c00264e8:	55                   	push   ebp
c00264e9:	89 e5                	mov    ebp,esp
c00264eb:	e8 28 9c fd ff       	call   c0000118 <frame_dummy>
c00264f0:	e8 63 e0 ff ff       	call   c0024558 <__do_global_ctors_aux>
c00264f5:	5d                   	pop    ebp
c00264f6:	c3                   	ret    

Disassembly of section .fini:

c00264f7 <_fini>:
c00264f7:	55                   	push   ebp
c00264f8:	89 e5                	mov    ebp,esp
c00264fa:	e8 a9 9b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00264ff:	5d                   	pop    ebp
c0026500:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0026502 <Computer::~Computer()>:
c0026502:	83 ec 0c             	sub    esp,0xc
c0026505:	ba 90 7f 02 c0       	mov    edx,0xc0027f90
c002650a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002650e:	89 10                	mov    DWORD PTR [eax],edx
c0026510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026514:	83 ec 0c             	sub    esp,0xc
c0026517:	50                   	push   eax
c0026518:	e8 31 d4 fe ff       	call   c001394e <Device::~Device()>
c002651d:	83 c4 10             	add    esp,0x10
c0026520:	90                   	nop
c0026521:	83 c4 0c             	add    esp,0xc
c0026524:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0026526 <Computer::~Computer()>:
c0026526:	83 ec 0c             	sub    esp,0xc
c0026529:	83 ec 0c             	sub    esp,0xc
c002652c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026530:	e8 cd ff ff ff       	call   c0026502 <Computer::~Computer()>
c0026535:	83 c4 10             	add    esp,0x10
c0026538:	83 ec 08             	sub    esp,0x8
c002653b:	68 ec 01 00 00       	push   0x1ec
c0026540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026544:	e8 64 c0 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026549:	83 c4 10             	add    esp,0x10
c002654c:	83 c4 0c             	add    esp,0xc
c002654f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0026550 <idleCommon()>:
c0026550:	83 ec 0c             	sub    esp,0xc
c0026553:	e8 45 5c ff ff       	call   c001c19d <lockScheduler()>
c0026558:	e8 7b 5f ff ff       	call   c001c4d8 <schedule()>
c002655d:	83 c4 0c             	add    esp,0xc
c0026560:	e9 3a 5c ff ff       	jmp    c001c19f <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0026566 <LinkedList<UnixFile>::~LinkedList()>:
c0026566:	90                   	nop
c0026567:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0026568 <LinkedList<UnixFile>::LinkedList()>:
c0026568:	83 ec 0c             	sub    esp,0xc
c002656b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002656f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026579:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026584:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002658b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002658f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026599:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00265a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00265ab:	83 ec 0c             	sub    esp,0xc
c00265ae:	68 06 82 02 c0       	push   0xc0028206
c00265b3:	e8 d5 c0 fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00265b8:	83 c4 10             	add    esp,0x10
c00265bb:	90                   	nop
c00265bc:	83 c4 0c             	add    esp,0xc
c00265bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00265c0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00265c0:	83 ec 0c             	sub    esp,0xc
c00265c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00265c8:	75 10                	jne    c00265da <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00265ca:	83 ec 0c             	sub    esp,0xc
c00265cd:	68 20 82 02 c0       	push   0xc0028220
c00265d2:	e8 80 2b ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00265d7:	83 c4 10             	add    esp,0x10
c00265da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265de:	8b 00                	mov    eax,DWORD PTR [eax]
c00265e0:	85 c0                	test   eax,eax
c00265e2:	74 34                	je     c0026618 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00265e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00265eb:	85 c0                	test   eax,eax
c00265ed:	74 29                	je     c0026618 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00265ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00265f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00265fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00265fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026601:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026605:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002660f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026616:	eb 65                	jmp    c002667d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0026618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661c:	8b 00                	mov    eax,DWORD PTR [eax]
c002661e:	85 c0                	test   eax,eax
c0026620:	75 4b                	jne    c002666d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0026622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026629:	85 c0                	test   eax,eax
c002662b:	75 40                	jne    c002666d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002662d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026631:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026635:	89 10                	mov    DWORD PTR [eax],edx
c0026637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002663f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026646:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026649:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026657:	85 c0                	test   eax,eax
c0026659:	74 22                	je     c002667d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002665b:	83 ec 0c             	sub    esp,0xc
c002665e:	68 42 82 02 c0       	push   0xc0028242
c0026663:	e8 ef 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026668:	83 c4 10             	add    esp,0x10
c002666b:	eb 10                	jmp    c002667d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002666d:	83 ec 0c             	sub    esp,0xc
c0026670:	68 4c 82 02 c0       	push   0xc002824c
c0026675:	e8 dd 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002667a:	83 c4 10             	add    esp,0x10
c002667d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026681:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026684:	8d 50 01             	lea    edx,[eax+0x1]
c0026687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002668e:	90                   	nop
c002668f:	83 c4 0c             	add    esp,0xc
c0026692:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0026694 <LinkedList<UnixFile>::getFirstElement()>:
c0026694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026698:	8b 00                	mov    eax,DWORD PTR [eax]
c002669a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002669c <LinkedList<UnixFile>::removeFirst()>:
c002669c:	83 ec 0c             	sub    esp,0xc
c002669f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00266a5:	85 c0                	test   eax,eax
c00266a7:	75 12                	jne    c00266bb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00266a9:	83 ec 0c             	sub    esp,0xc
c00266ac:	68 58 82 02 c0       	push   0xc0028258
c00266b1:	e8 a1 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00266b6:	83 c4 10             	add    esp,0x10
c00266b9:	eb 7e                	jmp    c0026739 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00266bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00266c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00266c5:	85 c0                	test   eax,eax
c00266c7:	74 10                	je     c00266d9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00266c9:	83 ec 0c             	sub    esp,0xc
c00266cc:	68 a3 82 02 c0       	push   0xc00282a3
c00266d1:	e8 81 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00266d6:	83 c4 10             	add    esp,0x10
c00266d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00266df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00266e2:	85 c0                	test   eax,eax
c00266e4:	75 33                	jne    c0026719 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00266e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00266f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00266fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026702:	83 f8 01             	cmp    eax,0x1
c0026705:	74 21                	je     c0026728 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0026707:	83 ec 0c             	sub    esp,0xc
c002670a:	68 7c 82 02 c0       	push   0xc002827c
c002670f:	e8 43 2a ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026714:	83 c4 10             	add    esp,0x10
c0026717:	eb 0f                	jmp    c0026728 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0026719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671d:	8b 00                	mov    eax,DWORD PTR [eax]
c002671f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0026722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026726:	89 10                	mov    DWORD PTR [eax],edx
c0026728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002672f:	8d 50 ff             	lea    edx,[eax-0x1]
c0026732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026736:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026739:	83 c4 0c             	add    esp,0xc
c002673c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002673e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026742:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026745:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0026746 <DriverlessDevice::~DriverlessDevice()>:
c0026746:	ba 64 89 02 c0       	mov    edx,0xc0028964
c002674b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002674f:	89 10                	mov    DWORD PTR [eax],edx
c0026751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026755:	50                   	push   eax
c0026756:	e8 f3 d1 fe ff       	call   c001394e <Device::~Device()>
c002675b:	83 c4 04             	add    esp,0x4
c002675e:	90                   	nop
c002675f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0026760 <DriverlessDevice::~DriverlessDevice()>:
c0026760:	83 ec 0c             	sub    esp,0xc
c0026763:	83 ec 0c             	sub    esp,0xc
c0026766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002676a:	e8 d7 ff ff ff       	call   c0026746 <DriverlessDevice::~DriverlessDevice()>
c002676f:	83 c4 10             	add    esp,0x10
c0026772:	83 ec 08             	sub    esp,0x8
c0026775:	68 58 01 00 00       	push   0x158
c002677a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002677e:	e8 2a be fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026783:	83 c4 10             	add    esp,0x10
c0026786:	83 c4 0c             	add    esp,0xc
c0026789:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002678a <LinkedList<Device>::addElement(Device*)>:
c002678a:	83 ec 0c             	sub    esp,0xc
c002678d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026792:	75 10                	jne    c00267a4 <LinkedList<Device>::addElement(Device*)+0x1a>
c0026794:	83 ec 0c             	sub    esp,0xc
c0026797:	68 20 82 02 c0       	push   0xc0028220
c002679c:	e8 b6 29 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00267a1:	83 c4 10             	add    esp,0x10
c00267a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00267aa:	85 c0                	test   eax,eax
c00267ac:	74 3a                	je     c00267e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00267ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00267b5:	85 c0                	test   eax,eax
c00267b7:	74 2f                	je     c00267e8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00267b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00267c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00267c4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00267ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00267d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00267d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00267dc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00267e6:	eb 68                	jmp    c0026850 <LinkedList<Device>::addElement(Device*)+0xc6>
c00267e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00267ee:	85 c0                	test   eax,eax
c00267f0:	75 4e                	jne    c0026840 <LinkedList<Device>::addElement(Device*)+0xb6>
c00267f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00267f9:	85 c0                	test   eax,eax
c00267fb:	75 43                	jne    c0026840 <LinkedList<Device>::addElement(Device*)+0xb6>
c00267fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026801:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026805:	89 10                	mov    DWORD PTR [eax],edx
c0026807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002680b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002680f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026819:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0026823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026827:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002682a:	85 c0                	test   eax,eax
c002682c:	74 22                	je     c0026850 <LinkedList<Device>::addElement(Device*)+0xc6>
c002682e:	83 ec 0c             	sub    esp,0xc
c0026831:	68 42 82 02 c0       	push   0xc0028242
c0026836:	e8 1c 29 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002683b:	83 c4 10             	add    esp,0x10
c002683e:	eb 10                	jmp    c0026850 <LinkedList<Device>::addElement(Device*)+0xc6>
c0026840:	83 ec 0c             	sub    esp,0xc
c0026843:	68 4c 82 02 c0       	push   0xc002824c
c0026848:	e8 0a 29 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c002684d:	83 c4 10             	add    esp,0x10
c0026850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026854:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026857:	8d 50 01             	lea    edx,[eax+0x1]
c002685a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002685e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026861:	90                   	nop
c0026862:	83 c4 0c             	add    esp,0xc
c0026865:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0026866 <LinkedList<Device>::LinkedList()>:
c0026866:	83 ec 0c             	sub    esp,0xc
c0026869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002686d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026877:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002687e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026882:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002688d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026897:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002689e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00268a9:	83 ec 0c             	sub    esp,0xc
c00268ac:	68 06 82 02 c0       	push   0xc0028206
c00268b1:	e8 d7 bd fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c00268b6:	83 c4 10             	add    esp,0x10
c00268b9:	90                   	nop
c00268ba:	83 c4 0c             	add    esp,0xc
c00268bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00268be <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00268be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00268c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00268c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00268c6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00268c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00268ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00268cc:	85 c0                	test   eax,eax
c00268ce:	75 0e                	jne    c00268de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00268d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00268d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00268d7:	85 c0                	test   eax,eax
c00268d9:	75 03                	jne    c00268de <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00268db:	b0 01                	mov    al,0x1
c00268dd:	c3                   	ret    
c00268de:	b0 00                	mov    al,0x0
c00268e0:	90                   	nop
c00268e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00268e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00268e2:	83 ec 0c             	sub    esp,0xc
c00268e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00268e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00268eb:	85 c0                	test   eax,eax
c00268ed:	75 15                	jne    c0026904 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00268ef:	83 ec 0c             	sub    esp,0xc
c00268f2:	68 58 82 02 c0       	push   0xc0028258
c00268f7:	e8 5b 28 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00268fc:	83 c4 10             	add    esp,0x10
c00268ff:	e9 88 00 00 00       	jmp    c002698c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0026904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002690b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002690e:	85 c0                	test   eax,eax
c0026910:	0f 95 c0             	setne  al
c0026913:	84 c0                	test   al,al
c0026915:	74 10                	je     c0026927 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0026917:	83 ec 0c             	sub    esp,0xc
c002691a:	68 a3 82 02 c0       	push   0xc00282a3
c002691f:	e8 33 28 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026924:	83 c4 10             	add    esp,0x10
c0026927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002692b:	8b 00                	mov    eax,DWORD PTR [eax]
c002692d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026930:	85 c0                	test   eax,eax
c0026932:	0f 94 c0             	sete   al
c0026935:	84 c0                	test   al,al
c0026937:	74 33                	je     c002696c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0026939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002693d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026947:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002694e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026952:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026955:	83 f8 01             	cmp    eax,0x1
c0026958:	74 21                	je     c002697b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002695a:	83 ec 0c             	sub    esp,0xc
c002695d:	68 7c 82 02 c0       	push   0xc002827c
c0026962:	e8 f0 27 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026967:	83 c4 10             	add    esp,0x10
c002696a:	eb 0f                	jmp    c002697b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002696c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026970:	8b 00                	mov    eax,DWORD PTR [eax]
c0026972:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0026975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026979:	89 10                	mov    DWORD PTR [eax],edx
c002697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002697f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026982:	8d 50 ff             	lea    edx,[eax-0x1]
c0026985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026989:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002698c:	83 c4 0c             	add    esp,0xc
c002698f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0026990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0026990:	83 ec 0c             	sub    esp,0xc
c0026993:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0026998:	75 10                	jne    c00269aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002699a:	83 ec 0c             	sub    esp,0xc
c002699d:	68 20 82 02 c0       	push   0xc0028220
c00269a2:	e8 b0 27 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c00269a7:	83 c4 10             	add    esp,0x10
c00269aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00269b0:	85 c0                	test   eax,eax
c00269b2:	74 34                	je     c00269e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00269b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00269bb:	85 c0                	test   eax,eax
c00269bd:	74 29                	je     c00269e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00269bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00269c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00269ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00269cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00269d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00269d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00269df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00269e6:	eb 65                	jmp    c0026a4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00269e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00269ee:	85 c0                	test   eax,eax
c00269f0:	75 4b                	jne    c0026a3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00269f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00269f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00269f9:	85 c0                	test   eax,eax
c00269fb:	75 40                	jne    c0026a3d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00269fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a05:	89 10                	mov    DWORD PTR [eax],edx
c0026a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a0b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a0f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0026a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0026a19:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a27:	85 c0                	test   eax,eax
c0026a29:	74 22                	je     c0026a4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0026a2b:	83 ec 0c             	sub    esp,0xc
c0026a2e:	68 42 82 02 c0       	push   0xc0028242
c0026a33:	e8 1f 27 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026a38:	83 c4 10             	add    esp,0x10
c0026a3b:	eb 10                	jmp    c0026a4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0026a3d:	83 ec 0c             	sub    esp,0xc
c0026a40:	68 4c 82 02 c0       	push   0xc002824c
c0026a45:	e8 0d 27 ff ff       	call   c0019157 <Krnl::panic(char const*)>
c0026a4a:	83 c4 10             	add    esp,0x10
c0026a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0026a54:	8d 50 01             	lea    edx,[eax+0x1]
c0026a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a5b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0026a5e:	90                   	nop
c0026a5f:	83 c4 0c             	add    esp,0xc
c0026a62:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0026a64 <ACPI::~ACPI()>:
c0026a64:	83 ec 0c             	sub    esp,0xc
c0026a67:	ba f8 91 02 c0       	mov    edx,0xc00291f8
c0026a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a70:	89 10                	mov    DWORD PTR [eax],edx
c0026a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a76:	83 ec 0c             	sub    esp,0xc
c0026a79:	50                   	push   eax
c0026a7a:	e8 cf ce fe ff       	call   c001394e <Device::~Device()>
c0026a7f:	83 c4 10             	add    esp,0x10
c0026a82:	90                   	nop
c0026a83:	83 c4 0c             	add    esp,0xc
c0026a86:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0026a88 <ACPI::~ACPI()>:
c0026a88:	83 ec 0c             	sub    esp,0xc
c0026a8b:	83 ec 0c             	sub    esp,0xc
c0026a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026a92:	e8 cd ff ff ff       	call   c0026a64 <ACPI::~ACPI()>
c0026a97:	83 c4 10             	add    esp,0x10
c0026a9a:	83 ec 08             	sub    esp,0x8
c0026a9d:	68 68 22 00 00       	push   0x2268
c0026aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026aa6:	e8 02 bb fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026aab:	83 c4 10             	add    esp,0x10
c0026aae:	83 c4 0c             	add    esp,0xc
c0026ab1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0026ab2 <CPU::~CPU()>:
c0026ab2:	83 ec 0c             	sub    esp,0xc
c0026ab5:	ba e8 95 02 c0       	mov    edx,0xc00295e8
c0026aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026abe:	89 10                	mov    DWORD PTR [eax],edx
c0026ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ac4:	83 ec 0c             	sub    esp,0xc
c0026ac7:	50                   	push   eax
c0026ac8:	e8 81 ce fe ff       	call   c001394e <Device::~Device()>
c0026acd:	83 c4 10             	add    esp,0x10
c0026ad0:	90                   	nop
c0026ad1:	83 c4 0c             	add    esp,0xc
c0026ad4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0026ad6 <CPU::~CPU()>:
c0026ad6:	83 ec 0c             	sub    esp,0xc
c0026ad9:	83 ec 0c             	sub    esp,0xc
c0026adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ae0:	e8 cd ff ff ff       	call   c0026ab2 <CPU::~CPU()>
c0026ae5:	83 c4 10             	add    esp,0x10
c0026ae8:	83 ec 08             	sub    esp,0x8
c0026aeb:	68 98 11 00 00       	push   0x1198
c0026af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026af4:	e8 b4 ba fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026af9:	83 c4 10             	add    esp,0x10
c0026afc:	83 c4 0c             	add    esp,0xc
c0026aff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0026b00 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0026b00:	90                   	nop
c0026b01:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0026b02 <ThreadControlBlock::ThreadControlBlock()>:
c0026b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b06:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0026b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b11:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0026b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b1c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0026b23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b27:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0026b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b32:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0026b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026b3a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0026b3e:	90                   	nop
c0026b3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0026b40 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0026b40:	83 ec 0c             	sub    esp,0xc
c0026b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b47:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b5c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0026b6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0026b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0026b83:	83 ec 0c             	sub    esp,0xc
c0026b86:	68 06 82 02 c0       	push   0xc0028206
c0026b8b:	e8 fd ba fe ff       	call   c001268d <Dbg::kprintf(char const*, ...)>
c0026b90:	83 c4 10             	add    esp,0x10
c0026b93:	90                   	nop
c0026b94:	83 c4 0c             	add    esp,0xc
c0026b97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0026b98 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0026b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0026b9f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0026ba0 <Vm::_FPUState::_FPUState()>:
c0026ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026ba4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0026bab:	90                   	nop
c0026bac:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0026bae <PCI::~PCI()>:
c0026bae:	83 ec 0c             	sub    esp,0xc
c0026bb1:	ba ac a4 02 c0       	mov    edx,0xc002a4ac
c0026bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bba:	89 10                	mov    DWORD PTR [eax],edx
c0026bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc0:	83 ec 0c             	sub    esp,0xc
c0026bc3:	50                   	push   eax
c0026bc4:	e8 95 c7 fe ff       	call   c001335e <Bus::~Bus()>
c0026bc9:	83 c4 10             	add    esp,0x10
c0026bcc:	90                   	nop
c0026bcd:	83 c4 0c             	add    esp,0xc
c0026bd0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0026bd2 <PCI::~PCI()>:
c0026bd2:	83 ec 0c             	sub    esp,0xc
c0026bd5:	83 ec 0c             	sub    esp,0xc
c0026bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bdc:	e8 cd ff ff ff       	call   c0026bae <PCI::~PCI()>
c0026be1:	83 c4 10             	add    esp,0x10
c0026be4:	83 ec 08             	sub    esp,0x8
c0026be7:	68 58 01 00 00       	push   0x158
c0026bec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bf0:	e8 b8 b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026bf5:	83 c4 10             	add    esp,0x10
c0026bf8:	83 c4 0c             	add    esp,0xc
c0026bfb:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0026bfc <IDE::~IDE()>:
c0026bfc:	83 ec 0c             	sub    esp,0xc
c0026bff:	ba 10 a7 02 c0       	mov    edx,0xc002a710
c0026c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c08:	89 10                	mov    DWORD PTR [eax],edx
c0026c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c0e:	83 ec 0c             	sub    esp,0xc
c0026c11:	50                   	push   eax
c0026c12:	e8 27 d2 fe ff       	call   c0013e3e <HardDiskController::~HardDiskController()>
c0026c17:	83 c4 10             	add    esp,0x10
c0026c1a:	90                   	nop
c0026c1b:	83 c4 0c             	add    esp,0xc
c0026c1e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0026c20 <IDE::~IDE()>:
c0026c20:	83 ec 0c             	sub    esp,0xc
c0026c23:	83 ec 0c             	sub    esp,0xc
c0026c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c2a:	e8 cd ff ff ff       	call   c0026bfc <IDE::~IDE()>
c0026c2f:	83 c4 10             	add    esp,0x10
c0026c32:	83 ec 08             	sub    esp,0x8
c0026c35:	68 70 02 00 00       	push   0x270
c0026c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c3e:	e8 6a b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026c43:	83 c4 10             	add    esp,0x10
c0026c46:	83 c4 0c             	add    esp,0xc
c0026c49:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0026c4a <SATABus::~SATABus()>:
c0026c4a:	83 ec 0c             	sub    esp,0xc
c0026c4d:	ba f0 a7 02 c0       	mov    edx,0xc002a7f0
c0026c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c56:	89 10                	mov    DWORD PTR [eax],edx
c0026c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c5c:	83 ec 0c             	sub    esp,0xc
c0026c5f:	50                   	push   eax
c0026c60:	e8 d9 d1 fe ff       	call   c0013e3e <HardDiskController::~HardDiskController()>
c0026c65:	83 c4 10             	add    esp,0x10
c0026c68:	90                   	nop
c0026c69:	83 c4 0c             	add    esp,0xc
c0026c6c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0026c6e <SATABus::~SATABus()>:
c0026c6e:	83 ec 0c             	sub    esp,0xc
c0026c71:	83 ec 0c             	sub    esp,0xc
c0026c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c78:	e8 cd ff ff ff       	call   c0026c4a <SATABus::~SATABus()>
c0026c7d:	83 c4 10             	add    esp,0x10
c0026c80:	83 ec 08             	sub    esp,0x8
c0026c83:	68 64 01 00 00       	push   0x164
c0026c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c8c:	e8 1c b9 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026c91:	83 c4 10             	add    esp,0x10
c0026c94:	83 c4 0c             	add    esp,0xc
c0026c97:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0026c98 <ATA::~ATA()>:
c0026c98:	83 ec 0c             	sub    esp,0xc
c0026c9b:	ba 30 a8 02 c0       	mov    edx,0xc002a830
c0026ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca4:	89 10                	mov    DWORD PTR [eax],edx
c0026ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026caa:	83 ec 0c             	sub    esp,0xc
c0026cad:	50                   	push   eax
c0026cae:	e8 69 d2 fe ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0026cb3:	83 c4 10             	add    esp,0x10
c0026cb6:	90                   	nop
c0026cb7:	83 c4 0c             	add    esp,0xc
c0026cba:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0026cbc <ATA::~ATA()>:
c0026cbc:	83 ec 0c             	sub    esp,0xc
c0026cbf:	83 ec 0c             	sub    esp,0xc
c0026cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cc6:	e8 cd ff ff ff       	call   c0026c98 <ATA::~ATA()>
c0026ccb:	83 c4 10             	add    esp,0x10
c0026cce:	83 ec 08             	sub    esp,0x8
c0026cd1:	68 7c 01 00 00       	push   0x17c
c0026cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026cda:	e8 ce b8 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026cdf:	83 c4 10             	add    esp,0x10
c0026ce2:	83 c4 0c             	add    esp,0xc
c0026ce5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0026ce6 <ATAPI::~ATAPI()>:
c0026ce6:	83 ec 0c             	sub    esp,0xc
c0026ce9:	ba 9c a8 02 c0       	mov    edx,0xc002a89c
c0026cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cf2:	89 10                	mov    DWORD PTR [eax],edx
c0026cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cf8:	83 ec 0c             	sub    esp,0xc
c0026cfb:	50                   	push   eax
c0026cfc:	e8 1b d2 fe ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0026d01:	83 c4 10             	add    esp,0x10
c0026d04:	90                   	nop
c0026d05:	83 c4 0c             	add    esp,0xc
c0026d08:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0026d0a <ATAPI::~ATAPI()>:
c0026d0a:	83 ec 0c             	sub    esp,0xc
c0026d0d:	83 ec 0c             	sub    esp,0xc
c0026d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d14:	e8 cd ff ff ff       	call   c0026ce6 <ATAPI::~ATAPI()>
c0026d19:	83 c4 10             	add    esp,0x10
c0026d1c:	83 ec 08             	sub    esp,0x8
c0026d1f:	68 80 01 00 00       	push   0x180
c0026d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d28:	e8 80 b8 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026d2d:	83 c4 10             	add    esp,0x10
c0026d30:	83 c4 0c             	add    esp,0xc
c0026d33:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0026d34 <SATA::~SATA()>:
c0026d34:	83 ec 0c             	sub    esp,0xc
c0026d37:	ba c0 a9 02 c0       	mov    edx,0xc002a9c0
c0026d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d40:	89 10                	mov    DWORD PTR [eax],edx
c0026d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d46:	83 ec 0c             	sub    esp,0xc
c0026d49:	50                   	push   eax
c0026d4a:	e8 cd d1 fe ff       	call   c0013f1c <PhysicalDisk::~PhysicalDisk()>
c0026d4f:	83 c4 10             	add    esp,0x10
c0026d52:	90                   	nop
c0026d53:	83 c4 0c             	add    esp,0xc
c0026d56:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0026d58 <SATA::~SATA()>:
c0026d58:	83 ec 0c             	sub    esp,0xc
c0026d5b:	83 ec 0c             	sub    esp,0xc
c0026d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d62:	e8 cd ff ff ff       	call   c0026d34 <SATA::~SATA()>
c0026d67:	83 c4 10             	add    esp,0x10
c0026d6a:	83 ec 08             	sub    esp,0x8
c0026d6d:	68 74 01 00 00       	push   0x174
c0026d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d76:	e8 32 b8 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026d7b:	83 c4 10             	add    esp,0x10
c0026d7e:	83 c4 0c             	add    esp,0xc
c0026d81:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0026d82 <AVX::~AVX()>:
c0026d82:	83 ec 0c             	sub    esp,0xc
c0026d85:	ba fc a9 02 c0       	mov    edx,0xc002a9fc
c0026d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d8e:	89 10                	mov    DWORD PTR [eax],edx
c0026d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d94:	83 ec 0c             	sub    esp,0xc
c0026d97:	50                   	push   eax
c0026d98:	e8 03 d2 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026d9d:	83 c4 10             	add    esp,0x10
c0026da0:	90                   	nop
c0026da1:	83 c4 0c             	add    esp,0xc
c0026da4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0026da6 <AVX::~AVX()>:
c0026da6:	83 ec 0c             	sub    esp,0xc
c0026da9:	83 ec 0c             	sub    esp,0xc
c0026dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026db0:	e8 cd ff ff ff       	call   c0026d82 <AVX::~AVX()>
c0026db5:	83 c4 10             	add    esp,0x10
c0026db8:	83 ec 08             	sub    esp,0x8
c0026dbb:	68 58 01 00 00       	push   0x158
c0026dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dc4:	e8 e4 b7 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026dc9:	83 c4 10             	add    esp,0x10
c0026dcc:	83 c4 0c             	add    esp,0xc
c0026dcf:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0026dd0 <MMX::~MMX()>:
c0026dd0:	83 ec 0c             	sub    esp,0xc
c0026dd3:	ba 3c aa 02 c0       	mov    edx,0xc002aa3c
c0026dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddc:	89 10                	mov    DWORD PTR [eax],edx
c0026dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de2:	83 ec 0c             	sub    esp,0xc
c0026de5:	50                   	push   eax
c0026de6:	e8 b5 d1 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026deb:	83 c4 10             	add    esp,0x10
c0026dee:	90                   	nop
c0026def:	83 c4 0c             	add    esp,0xc
c0026df2:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0026df4 <MMX::~MMX()>:
c0026df4:	83 ec 0c             	sub    esp,0xc
c0026df7:	83 ec 0c             	sub    esp,0xc
c0026dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026dfe:	e8 cd ff ff ff       	call   c0026dd0 <MMX::~MMX()>
c0026e03:	83 c4 10             	add    esp,0x10
c0026e06:	83 ec 08             	sub    esp,0x8
c0026e09:	68 58 01 00 00       	push   0x158
c0026e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e12:	e8 96 b7 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026e17:	83 c4 10             	add    esp,0x10
c0026e1a:	83 c4 0c             	add    esp,0xc
c0026e1d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0026e1e <SSE::~SSE()>:
c0026e1e:	83 ec 0c             	sub    esp,0xc
c0026e21:	ba 7c aa 02 c0       	mov    edx,0xc002aa7c
c0026e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e2a:	89 10                	mov    DWORD PTR [eax],edx
c0026e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e30:	83 ec 0c             	sub    esp,0xc
c0026e33:	50                   	push   eax
c0026e34:	e8 67 d1 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026e39:	83 c4 10             	add    esp,0x10
c0026e3c:	90                   	nop
c0026e3d:	83 c4 0c             	add    esp,0xc
c0026e40:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0026e42 <SSE::~SSE()>:
c0026e42:	83 ec 0c             	sub    esp,0xc
c0026e45:	83 ec 0c             	sub    esp,0xc
c0026e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e4c:	e8 cd ff ff ff       	call   c0026e1e <SSE::~SSE()>
c0026e51:	83 c4 10             	add    esp,0x10
c0026e54:	83 ec 08             	sub    esp,0x8
c0026e57:	68 58 01 00 00       	push   0x158
c0026e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e60:	e8 48 b7 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026e65:	83 c4 10             	add    esp,0x10
c0026e68:	83 c4 0c             	add    esp,0xc
c0026e6b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0026e6c <x87::~x87()>:
c0026e6c:	83 ec 0c             	sub    esp,0xc
c0026e6f:	ba bc aa 02 c0       	mov    edx,0xc002aabc
c0026e74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e78:	89 10                	mov    DWORD PTR [eax],edx
c0026e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e7e:	83 ec 0c             	sub    esp,0xc
c0026e81:	50                   	push   eax
c0026e82:	e8 19 d1 fe ff       	call   c0013fa0 <FPU::~FPU()>
c0026e87:	83 c4 10             	add    esp,0x10
c0026e8a:	90                   	nop
c0026e8b:	83 c4 0c             	add    esp,0xc
c0026e8e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0026e90 <x87::~x87()>:
c0026e90:	83 ec 0c             	sub    esp,0xc
c0026e93:	83 ec 0c             	sub    esp,0xc
c0026e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e9a:	e8 cd ff ff ff       	call   c0026e6c <x87::~x87()>
c0026e9f:	83 c4 10             	add    esp,0x10
c0026ea2:	83 ec 08             	sub    esp,0x8
c0026ea5:	68 58 01 00 00       	push   0x158
c0026eaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026eae:	e8 fa b6 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026eb3:	83 c4 10             	add    esp,0x10
c0026eb6:	83 c4 0c             	add    esp,0xc
c0026eb9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0026eba <IOAPIC::~IOAPIC()>:
c0026eba:	83 ec 0c             	sub    esp,0xc
c0026ebd:	ba 14 ac 02 c0       	mov    edx,0xc002ac14
c0026ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ec6:	89 10                	mov    DWORD PTR [eax],edx
c0026ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ecc:	83 ec 0c             	sub    esp,0xc
c0026ecf:	50                   	push   eax
c0026ed0:	e8 79 ca fe ff       	call   c001394e <Device::~Device()>
c0026ed5:	83 c4 10             	add    esp,0x10
c0026ed8:	90                   	nop
c0026ed9:	83 c4 0c             	add    esp,0xc
c0026edc:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0026ede <IOAPIC::~IOAPIC()>:
c0026ede:	83 ec 0c             	sub    esp,0xc
c0026ee1:	83 ec 0c             	sub    esp,0xc
c0026ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026ee8:	e8 cd ff ff ff       	call   c0026eba <IOAPIC::~IOAPIC()>
c0026eed:	83 c4 10             	add    esp,0x10
c0026ef0:	83 ec 08             	sub    esp,0x8
c0026ef3:	68 68 01 00 00       	push   0x168
c0026ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026efc:	e8 ac b6 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026f01:	83 c4 10             	add    esp,0x10
c0026f04:	83 c4 0c             	add    esp,0xc
c0026f07:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0026f08 <APIC::~APIC()>:
c0026f08:	83 ec 0c             	sub    esp,0xc
c0026f0b:	ba cc ab 02 c0       	mov    edx,0xc002abcc
c0026f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f14:	89 10                	mov    DWORD PTR [eax],edx
c0026f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f1a:	83 ec 0c             	sub    esp,0xc
c0026f1d:	50                   	push   eax
c0026f1e:	e8 47 d5 fe ff       	call   c001446a <InterruptController::~InterruptController()>
c0026f23:	83 c4 10             	add    esp,0x10
c0026f26:	90                   	nop
c0026f27:	83 c4 0c             	add    esp,0xc
c0026f2a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0026f2c <APIC::~APIC()>:
c0026f2c:	83 ec 0c             	sub    esp,0xc
c0026f2f:	83 ec 0c             	sub    esp,0xc
c0026f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f36:	e8 cd ff ff ff       	call   c0026f08 <APIC::~APIC()>
c0026f3b:	83 c4 10             	add    esp,0x10
c0026f3e:	83 ec 08             	sub    esp,0x8
c0026f41:	68 58 21 00 00       	push   0x2158
c0026f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f4a:	e8 5e b6 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026f4f:	83 c4 10             	add    esp,0x10
c0026f52:	83 c4 0c             	add    esp,0xc
c0026f55:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0026f56 <PIC::~PIC()>:
c0026f56:	83 ec 0c             	sub    esp,0xc
c0026f59:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0026f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f62:	89 10                	mov    DWORD PTR [eax],edx
c0026f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f68:	83 ec 0c             	sub    esp,0xc
c0026f6b:	50                   	push   eax
c0026f6c:	e8 f9 d4 fe ff       	call   c001446a <InterruptController::~InterruptController()>
c0026f71:	83 c4 10             	add    esp,0x10
c0026f74:	90                   	nop
c0026f75:	83 c4 0c             	add    esp,0xc
c0026f78:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0026f7a <PIC::~PIC()>:
c0026f7a:	83 ec 0c             	sub    esp,0xc
c0026f7d:	83 ec 0c             	sub    esp,0xc
c0026f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f84:	e8 cd ff ff ff       	call   c0026f56 <PIC::~PIC()>
c0026f89:	83 c4 10             	add    esp,0x10
c0026f8c:	83 ec 08             	sub    esp,0x8
c0026f8f:	68 58 21 00 00       	push   0x2158
c0026f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f98:	e8 10 b6 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026f9d:	83 c4 10             	add    esp,0x10
c0026fa0:	83 c4 0c             	add    esp,0xc
c0026fa3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0026fa4 <APICTimer::~APICTimer()>:
c0026fa4:	83 ec 0c             	sub    esp,0xc
c0026fa7:	ba b8 ac 02 c0       	mov    edx,0xc002acb8
c0026fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb0:	89 10                	mov    DWORD PTR [eax],edx
c0026fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fb6:	83 ec 0c             	sub    esp,0xc
c0026fb9:	50                   	push   eax
c0026fba:	e8 31 f2 fe ff       	call   c00161f0 <Timer::~Timer()>
c0026fbf:	83 c4 10             	add    esp,0x10
c0026fc2:	90                   	nop
c0026fc3:	83 c4 0c             	add    esp,0xc
c0026fc6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0026fc8 <APICTimer::~APICTimer()>:
c0026fc8:	83 ec 0c             	sub    esp,0xc
c0026fcb:	83 ec 0c             	sub    esp,0xc
c0026fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fd2:	e8 cd ff ff ff       	call   c0026fa4 <APICTimer::~APICTimer()>
c0026fd7:	83 c4 10             	add    esp,0x10
c0026fda:	83 ec 08             	sub    esp,0x8
c0026fdd:	68 60 01 00 00       	push   0x160
c0026fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fe6:	e8 c2 b5 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0026feb:	83 c4 10             	add    esp,0x10
c0026fee:	83 c4 0c             	add    esp,0xc
c0026ff1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026ff2 <PIT::~PIT()>:
c0026ff2:	83 ec 0c             	sub    esp,0xc
c0026ff5:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0026ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ffe:	89 10                	mov    DWORD PTR [eax],edx
c0027000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027004:	83 ec 0c             	sub    esp,0xc
c0027007:	50                   	push   eax
c0027008:	e8 e3 f1 fe ff       	call   c00161f0 <Timer::~Timer()>
c002700d:	83 c4 10             	add    esp,0x10
c0027010:	90                   	nop
c0027011:	83 c4 0c             	add    esp,0xc
c0027014:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027016 <PIT::~PIT()>:
c0027016:	83 ec 0c             	sub    esp,0xc
c0027019:	83 ec 0c             	sub    esp,0xc
c002701c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027020:	e8 cd ff ff ff       	call   c0026ff2 <PIT::~PIT()>
c0027025:	83 c4 10             	add    esp,0x10
c0027028:	83 ec 08             	sub    esp,0x8
c002702b:	68 5c 01 00 00       	push   0x15c
c0027030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027034:	e8 74 b5 fe ff       	call   c00125ad <operator delete(void*, unsigned long)>
c0027039:	83 c4 10             	add    esp,0x10
c002703c:	83 c4 0c             	add    esp,0xc
c002703f:	c3                   	ret    
