
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 eb 65 01 00       	call   c001660b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 49 03 c0       	mov    eax,0xc00349e4
c0000025:	3d e4 49 03 c0       	cmp    eax,0xc00349e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 49 03 c0       	push   0xc00349e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 49 03 c0       	mov    eax,0xc00349e4
c0000051:	2d e4 49 03 c0       	sub    eax,0xc00349e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 49 03 c0       	push   0xc00349e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 3c f5 02 c0       	mov    ebx,0xc002f53c
c0000097:	81 eb 38 f5 02 c0    	sub    ebx,0xc002f538
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 38 f5 02 c0       	mov    esi,0xc002f538
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 49 03 c0       	push   0xc00349e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 e4 49 03 c0       	push   0xc00349e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 f3 49 02 00       	call   c0024ca0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 04 8f 01 00       	call   c00191c9 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 d1 49 02 00       	call   c0024ca0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 de 4e 02 00       	call   c00251cc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 81 53 02 00       	call   c0025678 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ab 00 02 00       	jmp    c002042a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 40 f5 02 c0 02 	test   BYTE PTR [edx-0x3ffd0ac0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 40 f5 02 c0 01 	test   BYTE PTR [edx-0x3ffd0ac0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 40 f5 02 c0 08 	test   BYTE PTR [edx-0x3ffd0ac0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 40 f5 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0ac0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 40 f5 02 c0 01 	test   BYTE PTR [edx-0x3ffd0ac0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	83 ec 0c             	sub    esp,0xc
c0000c3f:	83 ec 0c             	sub    esp,0xc
c0000c42:	68 44 f6 02 c0       	push   0xc002f644
c0000c47:	e8 34 13 02 00       	call   c0021f80 <KeCPuts>
c0000c4c:	83 c4 10             	add    esp,0x10
c0000c4f:	90                   	nop
c0000c50:	83 c4 0c             	add    esp,0xc
c0000c53:	c3                   	ret    

c0000c54 <tcpip_callback_with_block>:
c0000c54:	83 ec 0c             	sub    esp,0xc
c0000c57:	83 ec 0c             	sub    esp,0xc
c0000c5a:	68 7f f6 02 c0       	push   0xc002f67f
c0000c5f:	e8 04 13 02 00       	call   c0021f68 <KeCPanic>
c0000c64:	83 c4 10             	add    esp,0x10
c0000c67:	90                   	nop
c0000c68:	83 c4 0c             	add    esp,0xc
c0000c6b:	c3                   	ret    

c0000c6c <sys_sem_new>:
c0000c6c:	83 ec 1c             	sub    esp,0x1c
c0000c6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c77:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c7c:	83 ec 08             	sub    esp,0x8
c0000c7f:	50                   	push   eax
c0000c80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c84:	e8 1f 12 02 00       	call   c0021ea8 <KeNetCreateSemaphore>
c0000c89:	83 c4 10             	add    esp,0x10
c0000c8c:	b0 00                	mov    al,0x0
c0000c8e:	83 c4 1c             	add    esp,0x1c
c0000c91:	c3                   	ret    
c0000c92:	66 90                	xchg   ax,ax

c0000c94 <sys_sem_free>:
c0000c94:	83 ec 0c             	sub    esp,0xc
c0000c97:	83 ec 0c             	sub    esp,0xc
c0000c9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c9e:	e8 49 12 02 00       	call   c0021eec <KeNetFreeSemaphore>
c0000ca3:	83 c4 10             	add    esp,0x10
c0000ca6:	90                   	nop
c0000ca7:	83 c4 0c             	add    esp,0xc
c0000caa:	c3                   	ret    
c0000cab:	90                   	nop

c0000cac <sys_sem_signal>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 4d 12 02 00       	call   c0021f08 <KeNetSignalSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_arch_sem_wait>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ccb:	83 ec 08             	sub    esp,0x8
c0000cce:	50                   	push   eax
c0000ccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd3:	e8 4c 12 02 00       	call   c0021f24 <KeNetWaitSemaphore>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_mbox_new>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	68 99 f6 02 c0       	push   0xc002f699
c0000ceb:	e8 78 12 02 00       	call   c0021f68 <KeCPanic>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	b0 00                	mov    al,0x0
c0000cf5:	83 c4 0c             	add    esp,0xc
c0000cf8:	c3                   	ret    
c0000cf9:	8d 76 00             	lea    esi,[esi+0x0]

c0000cfc <sys_mbox_free>:
c0000cfc:	83 ec 0c             	sub    esp,0xc
c0000cff:	83 ec 0c             	sub    esp,0xc
c0000d02:	68 a6 f6 02 c0       	push   0xc002f6a6
c0000d07:	e8 5c 12 02 00       	call   c0021f68 <KeCPanic>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	90                   	nop
c0000d10:	83 c4 0c             	add    esp,0xc
c0000d13:	c3                   	ret    

c0000d14 <sys_mbox_post>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 b4 f6 02 c0       	push   0xc002f6b4
c0000d1f:	e8 44 12 02 00       	call   c0021f68 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	90                   	nop
c0000d28:	83 c4 0c             	add    esp,0xc
c0000d2b:	c3                   	ret    

c0000d2c <sys_arch_mbox_fetch>:
c0000d2c:	83 ec 0c             	sub    esp,0xc
c0000d2f:	83 ec 0c             	sub    esp,0xc
c0000d32:	68 c2 f6 02 c0       	push   0xc002f6c2
c0000d37:	e8 2c 12 02 00       	call   c0021f68 <KeCPanic>
c0000d3c:	83 c4 10             	add    esp,0x10
c0000d3f:	b8 00 00 00 00       	mov    eax,0x0
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_arch_mbox_tryfetch>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 d6 f6 02 c0       	push   0xc002f6d6
c0000d53:	e8 10 12 02 00       	call   c0021f68 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	b8 00 00 00 00       	mov    eax,0x0
c0000d60:	83 c4 0c             	add    esp,0xc
c0000d63:	c3                   	ret    

c0000d64 <sys_mbox_trypost>:
c0000d64:	83 ec 0c             	sub    esp,0xc
c0000d67:	83 ec 0c             	sub    esp,0xc
c0000d6a:	68 ed f6 02 c0       	push   0xc002f6ed
c0000d6f:	e8 f4 11 02 00       	call   c0021f68 <KeCPanic>
c0000d74:	83 c4 10             	add    esp,0x10
c0000d77:	90                   	nop
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_thread_new>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 08             	sub    esp,0x8
c0000d82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000d8a:	e8 b5 11 02 00       	call   c0021f44 <KeNetCreateThread>
c0000d8f:	83 c4 10             	add    esp,0x10
c0000d92:	b8 00 00 00 00       	mov    eax,0x0
c0000d97:	83 c4 0c             	add    esp,0xc
c0000d9a:	c3                   	ret    
c0000d9b:	90                   	nop

c0000d9c <sys_init>:
c0000d9c:	90                   	nop
c0000d9d:	c3                   	ret    

c0000d9e <largebin_index>:
c0000d9e:	89 c2                	mov    edx,eax
c0000da0:	c1 ea 08             	shr    edx,0x8
c0000da3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000da9:	77 10                	ja     c0000dbb <largebin_index+0x1d>
c0000dab:	0f bd d2             	bsr    edx,edx
c0000dae:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000db1:	d3 e8                	shr    eax,cl
c0000db3:	83 e0 03             	and    eax,0x3
c0000db6:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dba:	c3                   	ret    
c0000dbb:	b8 5f 00 00 00       	mov    eax,0x5f
c0000dc0:	c3                   	ret    

c0000dc1 <malloc_init_state>:
c0000dc1:	53                   	push   ebx
c0000dc2:	8d 50 34             	lea    edx,[eax+0x34]
c0000dc5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000dcb:	89 d1                	mov    ecx,edx
c0000dcd:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000dd0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000dd3:	83 c2 08             	add    edx,0x8
c0000dd6:	39 da                	cmp    edx,ebx
c0000dd8:	75 f3                	jne    c0000dcd <malloc_init_state+0xc>
c0000dda:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ddc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000de6:	83 e2 03             	and    edx,0x3
c0000de9:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000df3:	83 ca 48             	or     edx,0x48
c0000df6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e00:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e0a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e11:	89 10                	mov    DWORD PTR [eax],edx
c0000e13:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e16:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e20:	5b                   	pop    ebx
c0000e21:	c3                   	ret    

c0000e22 <malloc_consolidate>:
c0000e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e24:	85 d2                	test   edx,edx
c0000e26:	0f 84 d8 00 00 00    	je     c0000f04 <malloc_consolidate+0xe2>
c0000e2c:	55                   	push   ebp
c0000e2d:	83 e2 fd             	and    edx,0xfffffffd
c0000e30:	57                   	push   edi
c0000e31:	89 c5                	mov    ebp,eax
c0000e33:	56                   	push   esi
c0000e34:	8d 78 34             	lea    edi,[eax+0x34]
c0000e37:	53                   	push   ebx
c0000e38:	83 ec 10             	sub    esp,0x10
c0000e3b:	89 10                	mov    DWORD PTR [eax],edx
c0000e3d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e41:	c1 ea 03             	shr    edx,0x3
c0000e44:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e48:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e4c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e4f:	85 d2                	test   edx,edx
c0000e51:	0f 84 98 00 00 00    	je     c0000eef <malloc_consolidate+0xcd>
c0000e57:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e5e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e61:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e68:	89 f9                	mov    ecx,edi
c0000e6a:	83 e1 fe             	and    ecx,0xfffffffe
c0000e6d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000e70:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000e73:	83 e3 fc             	and    ebx,0xfffffffc
c0000e76:	83 e7 01             	and    edi,0x1
c0000e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e7c:	75 14                	jne    c0000e92 <malloc_consolidate+0x70>
c0000e7e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e80:	29 fa                	sub    edx,edi
c0000e82:	01 f9                	add    ecx,edi
c0000e84:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e87:	89 fb                	mov    ebx,edi
c0000e89:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e8c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e8f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e92:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e95:	74 40                	je     c0000ed7 <malloc_consolidate+0xb5>
c0000e97:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e9a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e9d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ea1:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ea4:	83 e7 01             	and    edi,0x1
c0000ea7:	75 0e                	jne    c0000eb7 <malloc_consolidate+0x95>
c0000ea9:	01 d9                	add    ecx,ebx
c0000eab:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000eae:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000eb1:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000eb4:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eb7:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eba:	89 ce                	mov    esi,ecx
c0000ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ebf:	83 ce 01             	or     esi,0x1
c0000ec2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ec5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000ec8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ecb:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000ecf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ed2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ed5:	eb 0c                	jmp    c0000ee3 <malloc_consolidate+0xc1>
c0000ed7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000eda:	83 c9 01             	or     ecx,0x1
c0000edd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ee3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ee7:	85 d2                	test   edx,edx
c0000ee9:	0f 85 6f ff ff ff    	jne    c0000e5e <malloc_consolidate+0x3c>
c0000eef:	83 c5 04             	add    ebp,0x4
c0000ef2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ef6:	0f 85 50 ff ff ff    	jne    c0000e4c <malloc_consolidate+0x2a>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	5d                   	pop    ebp
c0000f03:	c3                   	ret    
c0000f04:	e9 b8 fe ff ff       	jmp    c0000dc1 <malloc_init_state>

c0000f09 <dlfree>:
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000f10:	85 c9                	test   ecx,ecx
c0000f12:	0f 84 01 01 00 00    	je     c0001019 <dlfree+0x110>
c0000f18:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000f1b:	8b 1d e0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368e0
c0000f21:	89 f0                	mov    eax,esi
c0000f23:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000f26:	83 e0 fc             	and    eax,0xfffffffc
c0000f29:	39 c3                	cmp    ebx,eax
c0000f2b:	72 24                	jb     c0000f51 <dlfree+0x48>
c0000f2d:	83 cb 03             	or     ebx,0x3
c0000f30:	c1 e8 03             	shr    eax,0x3
c0000f33:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f39:	83 e8 02             	sub    eax,0x2
c0000f3c:	8b 1c 85 e4 68 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc971c]
c0000f43:	89 19                	mov    DWORD PTR [ecx],ebx
c0000f45:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f4c:	e9 c8 00 00 00       	jmp    c0001019 <dlfree+0x110>
c0000f51:	83 e6 02             	and    esi,0x2
c0000f54:	0f 85 a0 00 00 00    	jne    c0000ffa <dlfree+0xf1>
c0000f5a:	83 cb 01             	or     ebx,0x1
c0000f5d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f60:	89 1d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ebx
c0000f66:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000f69:	83 e3 fc             	and    ebx,0xfffffffc
c0000f6c:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000f70:	75 13                	jne    c0000f85 <dlfree+0x7c>
c0000f72:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000f75:	29 ca                	sub    edx,ecx
c0000f77:	01 c8                	add    eax,ecx
c0000f79:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f7c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000f7f:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000f82:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000f85:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f8b:	74 40                	je     c0000fcd <dlfree+0xc4>
c0000f8d:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000f91:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000f94:	80 e1 01             	and    cl,0x1
c0000f97:	75 0e                	jne    c0000fa7 <dlfree+0x9e>
c0000f99:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f9c:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000f9f:	01 d8                	add    eax,ebx
c0000fa1:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000fa4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000fa7:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fad:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fb4:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000fb7:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000fbd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000fc0:	89 c1                	mov    ecx,eax
c0000fc2:	83 c9 01             	or     ecx,0x1
c0000fc5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fc8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fcb:	eb 10                	jmp    c0000fdd <dlfree+0xd4>
c0000fcd:	01 d8                	add    eax,ebx
c0000fcf:	89 c1                	mov    ecx,eax
c0000fd1:	83 c9 01             	or     ecx,0x1
c0000fd4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fd7:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000fdd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000fe2:	76 35                	jbe    c0001019 <dlfree+0x110>
c0000fe4:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000feb:	74 2c                	je     c0001019 <dlfree+0x110>
c0000fed:	5b                   	pop    ebx
c0000fee:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000ff3:	5e                   	pop    esi
c0000ff4:	5f                   	pop    edi
c0000ff5:	e9 28 fe ff ff       	jmp    c0000e22 <malloc_consolidate>
c0000ffa:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000ffd:	01 c8                	add    eax,ecx
c0000fff:	53                   	push   ebx
c0001000:	29 ca                	sub    edx,ecx
c0001002:	53                   	push   ebx
c0001003:	ff 0d 30 6c 03 c0    	dec    DWORD PTR ds:0xc0036c30
c0001009:	50                   	push   eax
c000100a:	29 05 44 6c 03 c0    	sub    DWORD PTR ds:0xc0036c44,eax
c0001010:	52                   	push   edx
c0001011:	e8 1a 55 01 00       	call   c0016530 <munmap>
c0001016:	83 c4 10             	add    esp,0x10
c0001019:	5b                   	pop    ebx
c000101a:	5e                   	pop    esi
c000101b:	5f                   	pop    edi
c000101c:	c3                   	ret    

c000101d <sYSMALLOc>:
c000101d:	55                   	push   ebp
c000101e:	57                   	push   edi
c000101f:	56                   	push   esi
c0001020:	53                   	push   ebx
c0001021:	89 d3                	mov    ebx,edx
c0001023:	83 ec 2c             	sub    esp,0x2c
c0001026:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000102a:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0001030:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001033:	8d 45 ff             	lea    eax,[ebp-0x1]
c0001036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000103a:	74 1f                	je     c000105b <sYSMALLOc+0x3e>
c000103c:	89 d0                	mov    eax,edx
c000103e:	e8 df fd ff ff       	call   c0000e22 <malloc_consolidate>
c0001043:	83 ec 0c             	sub    esp,0xc
c0001046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000104a:	83 e8 07             	sub    eax,0x7
c000104d:	50                   	push   eax
c000104e:	e8 7d 03 00 00       	call   c00013d0 <dlmalloc>
c0001053:	83 c4 10             	add    esp,0x10
c0001056:	e9 6d 03 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000105b:	f7 dd                	neg    ebp
c000105d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001061:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0001065:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c000106b:	0f 87 be 00 00 00    	ja     c000112f <sYSMALLOc+0x112>
c0001071:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0001077:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c000107d:	0f 8d ac 00 00 00    	jge    c000112f <sYSMALLOc+0x112>
c0001083:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0001087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000108b:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c000108f:	21 ee                	and    esi,ebp
c0001091:	39 fe                	cmp    esi,edi
c0001093:	0f 86 96 00 00 00    	jbe    c000112f <sYSMALLOc+0x112>
c0001099:	52                   	push   edx
c000109a:	52                   	push   edx
c000109b:	6a 00                	push   0x0
c000109d:	6a ff                	push   0xffffffff
c000109f:	6a 0c                	push   0xc
c00010a1:	6a 03                	push   0x3
c00010a3:	56                   	push   esi
c00010a4:	6a 00                	push   0x0
c00010a6:	e8 4a 54 01 00       	call   c00164f5 <mmap>
c00010ab:	83 c4 20             	add    esp,0x20
c00010ae:	83 f8 ff             	cmp    eax,0xffffffff
c00010b1:	74 7c                	je     c000112f <sYSMALLOc+0x112>
c00010b3:	89 c1                	mov    ecx,eax
c00010b5:	83 e1 07             	and    ecx,0x7
c00010b8:	74 13                	je     c00010cd <sYSMALLOc+0xb0>
c00010ba:	ba 08 00 00 00       	mov    edx,0x8
c00010bf:	29 ca                	sub    edx,ecx
c00010c1:	89 f1                	mov    ecx,esi
c00010c3:	01 d0                	add    eax,edx
c00010c5:	29 d1                	sub    ecx,edx
c00010c7:	89 10                	mov    DWORD PTR [eax],edx
c00010c9:	89 ca                	mov    edx,ecx
c00010cb:	eb 08                	jmp    c00010d5 <sYSMALLOc+0xb8>
c00010cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00010d3:	89 f2                	mov    edx,esi
c00010d5:	83 ca 02             	or     edx,0x2
c00010d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00010db:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c00010e1:	8d 57 01             	lea    edx,[edi+0x1]
c00010e4:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c00010ea:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c00010f0:	7e 06                	jle    c00010f8 <sYSMALLOc+0xdb>
c00010f2:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c00010f8:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c00010fe:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0001104:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c000110a:	76 06                	jbe    c0001112 <sYSMALLOc+0xf5>
c000110c:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0001112:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0001118:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c000111e:	0f 83 3f 01 00 00    	jae    c0001263 <sYSMALLOc+0x246>
c0001124:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c000112a:	e9 34 01 00 00       	jmp    c0001263 <sYSMALLOc+0x246>
c000112f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001132:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0001138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000113c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000113f:	83 e0 fc             	and    eax,0xfffffffc
c0001142:	89 04 24             	mov    DWORD PTR [esp],eax
c0001145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001149:	03 04 24             	add    eax,DWORD PTR [esp]
c000114c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001154:	83 c0 10             	add    eax,0x10
c0001157:	01 c5                	add    ebp,eax
c0001159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000115d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001164:	74 03                	je     c0001169 <sYSMALLOc+0x14c>
c0001166:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0001169:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c000116d:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0001171:	89 ee                	mov    esi,ebp
c0001173:	7f 18                	jg     c000118d <sYSMALLOc+0x170>
c0001175:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c000117c:	74 27                	je     c00011a5 <sYSMALLOc+0x188>
c000117e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001182:	03 34 24             	add    esi,DWORD PTR [esp]
c0001185:	01 ee                	add    esi,ebp
c0001187:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c000118b:	eb 18                	jmp    c00011a5 <sYSMALLOc+0x188>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	55                   	push   ebp
c0001191:	e8 29 53 01 00       	call   c00164bf <sbrk_thunk>
c0001196:	83 c4 10             	add    esp,0x10
c0001199:	89 c7                	mov    edi,eax
c000119b:	83 c8 ff             	or     eax,0xffffffff
c000119e:	83 ff ff             	cmp    edi,0xffffffff
c00011a1:	75 42                	jne    c00011e5 <sYSMALLOc+0x1c8>
c00011a3:	eb d0                	jmp    c0001175 <sYSMALLOc+0x158>
c00011a5:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c00011ab:	77 05                	ja     c00011b2 <sYSMALLOc+0x195>
c00011ad:	be 00 c0 00 00       	mov    esi,0xc000
c00011b2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00011b6:	77 07                	ja     c00011bf <sYSMALLOc+0x1a2>
c00011b8:	31 c0                	xor    eax,eax
c00011ba:	e9 09 02 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c00011bf:	50                   	push   eax
c00011c0:	50                   	push   eax
c00011c1:	6a 00                	push   0x0
c00011c3:	6a ff                	push   0xffffffff
c00011c5:	6a 0c                	push   0xc
c00011c7:	6a 03                	push   0x3
c00011c9:	56                   	push   esi
c00011ca:	6a 00                	push   0x0
c00011cc:	e8 24 53 01 00       	call   c00164f5 <mmap>
c00011d1:	83 c4 20             	add    esp,0x20
c00011d4:	89 c7                	mov    edi,eax
c00011d6:	83 f8 ff             	cmp    eax,0xffffffff
c00011d9:	74 dd                	je     c00011b8 <sYSMALLOc+0x19b>
c00011db:	8d 04 30             	lea    eax,[eax+esi*1]
c00011de:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011e5:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c00011eb:	01 f5                	add    ebp,esi
c00011ed:	83 f8 ff             	cmp    eax,0xffffffff
c00011f0:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00011f6:	75 73                	jne    c000126b <sYSMALLOc+0x24e>
c00011f8:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00011fc:	75 6d                	jne    c000126b <sYSMALLOc+0x24e>
c00011fe:	03 34 24             	add    esi,DWORD PTR [esp]
c0001201:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001205:	83 ce 01             	or     esi,0x1
c0001208:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000120b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001211:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001217:	73 06                	jae    c000121f <sYSMALLOc+0x202>
c0001219:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000121f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001225:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000122b:	73 06                	jae    c0001233 <sYSMALLOc+0x216>
c000122d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001233:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001236:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001239:	83 e2 fc             	and    edx,0xfffffffc
c000123c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001240:	0f 82 72 ff ff ff    	jb     c00011b8 <sYSMALLOc+0x19b>
c0001246:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000124a:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c000124e:	01 c1                	add    ecx,eax
c0001250:	83 ca 01             	or     edx,0x1
c0001253:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001256:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000125a:	83 cb 01             	or     ebx,0x1
c000125d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001263:	83 c0 08             	add    eax,0x8
c0001266:	e9 5d 01 00 00       	jmp    c00013c8 <sYSMALLOc+0x3ab>
c000126b:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001271:	89 d1                	mov    ecx,edx
c0001273:	83 e1 01             	and    ecx,0x1
c0001276:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000127a:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c000127f:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c0001283:	74 14                	je     c0001299 <sYSMALLOc+0x27c>
c0001285:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001289:	76 0e                	jbe    c0001299 <sYSMALLOc+0x27c>
c000128b:	83 e2 fe             	and    edx,0xfffffffe
c000128e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001294:	e9 89 00 00 00       	jmp    c0001322 <sYSMALLOc+0x305>
c0001299:	85 c9                	test   ecx,ecx
c000129b:	0f 84 81 00 00 00    	je     c0001322 <sYSMALLOc+0x305>
c00012a1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00012a5:	74 0e                	je     c00012b5 <sYSMALLOc+0x298>
c00012a7:	89 f8                	mov    eax,edi
c00012a9:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00012ad:	01 c5                	add    ebp,eax
c00012af:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00012b5:	89 fa                	mov    edx,edi
c00012b7:	83 e2 07             	and    edx,0x7
c00012ba:	74 0c                	je     c00012c8 <sYSMALLOc+0x2ab>
c00012bc:	b8 08 00 00 00       	mov    eax,0x8
c00012c1:	29 d0                	sub    eax,edx
c00012c3:	8d 14 07             	lea    edx,[edi+eax*1]
c00012c6:	eb 04                	jmp    c00012cc <sYSMALLOc+0x2af>
c00012c8:	89 fa                	mov    edx,edi
c00012ca:	31 c0                	xor    eax,eax
c00012cc:	03 04 24             	add    eax,DWORD PTR [esp]
c00012cf:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00012d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00012d7:	8d 0c 06             	lea    ecx,[esi+eax*1]
c00012da:	83 ec 0c             	sub    esp,0xc
c00012dd:	01 f9                	add    ecx,edi
c00012df:	01 cd                	add    ebp,ecx
c00012e1:	29 c8                	sub    eax,ecx
c00012e3:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c00012e7:	01 c5                	add    ebp,eax
c00012e9:	55                   	push   ebp
c00012ea:	e8 d0 51 01 00       	call   c00164bf <sbrk_thunk>
c00012ef:	83 c4 10             	add    esp,0x10
c00012f2:	83 f8 ff             	cmp    eax,0xffffffff
c00012f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00012f9:	75 17                	jne    c0001312 <sYSMALLOc+0x2f5>
c00012fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00012ff:	83 ec 0c             	sub    esp,0xc
c0001302:	6a 00                	push   0x0
c0001304:	e8 b6 51 01 00       	call   c00164bf <sbrk_thunk>
c0001309:	83 c4 10             	add    esp,0x10
c000130c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001310:	eb 32                	jmp    c0001344 <sYSMALLOc+0x327>
c0001312:	39 f8                	cmp    eax,edi
c0001314:	73 39                	jae    c000134f <sYSMALLOc+0x332>
c0001316:	8d 04 37             	lea    eax,[edi+esi*1]
c0001319:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001320:	eb 22                	jmp    c0001344 <sYSMALLOc+0x327>
c0001322:	89 fa                	mov    edx,edi
c0001324:	83 f8 ff             	cmp    eax,0xffffffff
c0001327:	75 24                	jne    c000134d <sYSMALLOc+0x330>
c0001329:	83 ec 0c             	sub    esp,0xc
c000132c:	6a 00                	push   0x0
c000132e:	e8 8c 51 01 00       	call   c00164bf <sbrk_thunk>
c0001333:	83 c4 10             	add    esp,0x10
c0001336:	89 c2                	mov    edx,eax
c0001338:	29 fa                	sub    edx,edi
c000133a:	29 f2                	sub    edx,esi
c000133c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001342:	89 fa                	mov    edx,edi
c0001344:	83 f8 ff             	cmp    eax,0xffffffff
c0001347:	0f 84 be fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000134d:	31 ed                	xor    ebp,ebp
c000134f:	29 d0                	sub    eax,edx
c0001351:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0001354:	01 e8                	add    eax,ebp
c0001356:	83 c8 01             	or     eax,0x1
c0001359:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000135c:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c0001362:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0001366:	0f 84 9f fe ff ff    	je     c000120b <sYSMALLOc+0x1ee>
c000136c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001370:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0001373:	83 ee 0c             	sub    esi,0xc
c0001376:	83 e6 f8             	and    esi,0xfffffff8
c0001379:	89 f0                	mov    eax,esi
c000137b:	83 c8 01             	or     eax,0x1
c000137e:	83 fe 0f             	cmp    esi,0xf
c0001381:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001384:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000138c:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001394:	0f 86 71 fe ff ff    	jbe    c000120b <sYSMALLOc+0x1ee>
c000139a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00013a0:	83 ec 0c             	sub    esp,0xc
c00013a3:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00013ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00013b1:	83 c0 08             	add    eax,0x8
c00013b4:	50                   	push   eax
c00013b5:	e8 4f fb ff ff       	call   c0000f09 <dlfree>
c00013ba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00013c0:	83 c4 10             	add    esp,0x10
c00013c3:	e9 43 fe ff ff       	jmp    c000120b <sYSMALLOc+0x1ee>
c00013c8:	83 c4 2c             	add    esp,0x2c
c00013cb:	5b                   	pop    ebx
c00013cc:	5e                   	pop    esi
c00013cd:	5f                   	pop    edi
c00013ce:	5d                   	pop    ebp
c00013cf:	c3                   	ret    

c00013d0 <dlmalloc>:
c00013d0:	55                   	push   ebp
c00013d1:	57                   	push   edi
c00013d2:	56                   	push   esi
c00013d3:	53                   	push   ebx
c00013d4:	83 ec 1c             	sub    esp,0x1c
c00013d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00013db:	83 f8 df             	cmp    eax,0xffffffdf
c00013de:	0f 87 70 03 00 00    	ja     c0001754 <dlmalloc+0x384>
c00013e4:	83 c0 0b             	add    eax,0xb
c00013e7:	be 10 00 00 00       	mov    esi,0x10
c00013ec:	83 f8 0f             	cmp    eax,0xf
c00013ef:	76 05                	jbe    c00013f6 <dlmalloc+0x26>
c00013f1:	83 e0 f8             	and    eax,0xfffffff8
c00013f4:	89 c6                	mov    esi,eax
c00013f6:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00013fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0001402:	75 17                	jne    c000141b <dlmalloc+0x4b>
c0001404:	85 ff                	test   edi,edi
c0001406:	0f 85 05 03 00 00    	jne    c0001711 <dlmalloc+0x341>
c000140c:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001411:	e8 0c fa ff ff       	call   c0000e22 <malloc_consolidate>
c0001416:	e9 f6 02 00 00       	jmp    c0001711 <dlmalloc+0x341>
c000141b:	39 f7                	cmp    edi,esi
c000141d:	72 1f                	jb     c000143e <dlmalloc+0x6e>
c000141f:	89 f2                	mov    edx,esi
c0001421:	c1 ea 03             	shr    edx,0x3
c0001424:	83 ea 02             	sub    edx,0x2
c0001427:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c000142e:	85 c0                	test   eax,eax
c0001430:	74 0c                	je     c000143e <dlmalloc+0x6e>
c0001432:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001435:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c000143c:	eb 30                	jmp    c000146e <dlmalloc+0x9e>
c000143e:	89 f0                	mov    eax,esi
c0001440:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001446:	77 2e                	ja     c0001476 <dlmalloc+0xa6>
c0001448:	c1 e8 03             	shr    eax,0x3
c000144b:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001452:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001456:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001459:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000145c:	39 c3                	cmp    ebx,eax
c000145e:	74 2e                	je     c000148e <dlmalloc+0xbe>
c0001460:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001463:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001468:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000146b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000146e:	83 c0 08             	add    eax,0x8
c0001471:	e9 e0 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001476:	e8 23 f9 ff ff       	call   c0000d9e <largebin_index>
c000147b:	83 e7 02             	and    edi,0x2
c000147e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001482:	74 0a                	je     c000148e <dlmalloc+0xbe>
c0001484:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001489:	e8 94 f9 ff ff       	call   c0000e22 <malloc_consolidate>
c000148e:	8d 46 10             	lea    eax,[esi+0x10]
c0001491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001495:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c000149b:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00014a1:	0f 84 13 01 00 00    	je     c00015ba <dlmalloc+0x1ea>
c00014a7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00014aa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ad:	83 e7 fc             	and    edi,0xfffffffc
c00014b0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014b6:	77 4c                	ja     c0001504 <dlmalloc+0x134>
c00014b8:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00014bd:	75 45                	jne    c0001504 <dlmalloc+0x134>
c00014bf:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00014c5:	75 3d                	jne    c0001504 <dlmalloc+0x134>
c00014c7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00014cb:	73 37                	jae    c0001504 <dlmalloc+0x134>
c00014cd:	8d 04 33             	lea    eax,[ebx+esi*1]
c00014d0:	89 fa                	mov    edx,edi
c00014d2:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00014d7:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00014dc:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00014e1:	29 f2                	sub    edx,esi
c00014e3:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00014ea:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00014f1:	83 ce 01             	or     esi,0x1
c00014f4:	89 d1                	mov    ecx,edx
c00014f6:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00014f9:	83 c9 01             	or     ecx,0x1
c00014fc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00014ff:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001502:	eb 15                	jmp    c0001519 <dlmalloc+0x149>
c0001504:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001509:	39 fe                	cmp    esi,edi
c000150b:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c0001512:	75 0d                	jne    c0001521 <dlmalloc+0x151>
c0001514:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001519:	8d 43 08             	lea    eax,[ebx+0x8]
c000151c:	e9 35 02 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001521:	89 f8                	mov    eax,edi
c0001523:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001529:	77 19                	ja     c0001544 <dlmalloc+0x174>
c000152b:	c1 e8 03             	shr    eax,0x3
c000152e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001531:	83 c2 0d             	add    edx,0xd
c0001534:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c000153b:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001542:	eb 46                	jmp    c000158a <dlmalloc+0x1ba>
c0001544:	e8 55 f8 ff ff       	call   c0000d9e <largebin_index>
c0001549:	8d 14 00             	lea    edx,[eax+eax*1]
c000154c:	83 c2 0d             	add    edx,0xd
c000154f:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001556:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000155d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001560:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001564:	89 d5                	mov    ebp,edx
c0001566:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000156a:	74 1e                	je     c000158a <dlmalloc+0x1ba>
c000156c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000156f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001572:	77 12                	ja     c0001586 <dlmalloc+0x1b6>
c0001574:	83 cf 01             	or     edi,0x1
c0001577:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000157a:	76 05                	jbe    c0001581 <dlmalloc+0x1b1>
c000157c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000157f:	eb f6                	jmp    c0001577 <dlmalloc+0x1a7>
c0001581:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001584:	eb 04                	jmp    c000158a <dlmalloc+0x1ba>
c0001586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000158a:	89 c7                	mov    edi,eax
c000158c:	88 c1                	mov    cl,al
c000158e:	c1 ff 05             	sar    edi,0x5
c0001591:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001595:	bf 01 00 00 00       	mov    edi,0x1
c000159a:	d3 e7                	shl    edi,cl
c000159c:	89 f8                	mov    eax,edi
c000159e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00015a2:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00015a9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00015ac:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00015af:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00015b2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00015b5:	e9 db fe ff ff       	jmp    c0001495 <dlmalloc+0xc5>
c00015ba:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015c0:	76 78                	jbe    c000163a <dlmalloc+0x26a>
c00015c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00015c6:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00015cd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00015d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015d3:	39 ca                	cmp    edx,ecx
c00015d5:	74 63                	je     c000163a <dlmalloc+0x26a>
c00015d7:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00015da:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015dd:	83 e3 fc             	and    ebx,0xfffffffc
c00015e0:	39 de                	cmp    esi,ebx
c00015e2:	77 52                	ja     c0001636 <dlmalloc+0x266>
c00015e4:	89 df                	mov    edi,ebx
c00015e6:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00015e9:	29 f7                	sub    edi,esi
c00015eb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00015ee:	01 d3                	add    ebx,edx
c00015f0:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00015f3:	83 ff 0f             	cmp    edi,0xf
c00015f6:	8d 42 08             	lea    eax,[edx+0x8]
c00015f9:	77 09                	ja     c0001604 <dlmalloc+0x234>
c00015fb:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00015ff:	e9 52 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001604:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001607:	83 ce 01             	or     esi,0x1
c000160a:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c0001610:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001616:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c000161d:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c0001624:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001627:	89 fa                	mov    edx,edi
c0001629:	83 ca 01             	or     edx,0x1
c000162c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000162f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001631:	e9 20 01 00 00       	jmp    c0001756 <dlmalloc+0x386>
c0001636:	89 c2                	mov    edx,eax
c0001638:	eb 99                	jmp    c00015d3 <dlmalloc+0x203>
c000163a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000163e:	b8 01 00 00 00       	mov    eax,0x1
c0001643:	41                   	inc    ecx
c0001644:	89 cb                	mov    ebx,ecx
c0001646:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c000164d:	c1 eb 05             	shr    ebx,0x5
c0001650:	d3 e0                	shl    eax,cl
c0001652:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001659:	39 f8                	cmp    eax,edi
c000165b:	77 04                	ja     c0001661 <dlmalloc+0x291>
c000165d:	85 c0                	test   eax,eax
c000165f:	75 26                	jne    c0001687 <dlmalloc+0x2b7>
c0001661:	43                   	inc    ebx
c0001662:	83 fb 02             	cmp    ebx,0x2
c0001665:	0f 87 a6 00 00 00    	ja     c0001711 <dlmalloc+0x341>
c000166b:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001672:	85 ff                	test   edi,edi
c0001674:	74 eb                	je     c0001661 <dlmalloc+0x291>
c0001676:	89 d8                	mov    eax,ebx
c0001678:	c1 e0 06             	shl    eax,0x6
c000167b:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001682:	b8 01 00 00 00       	mov    eax,0x1
c0001687:	85 f8                	test   eax,edi
c0001689:	75 07                	jne    c0001692 <dlmalloc+0x2c2>
c000168b:	83 c2 08             	add    edx,0x8
c000168e:	01 c0                	add    eax,eax
c0001690:	eb f5                	jmp    c0001687 <dlmalloc+0x2b7>
c0001692:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001695:	39 ca                	cmp    edx,ecx
c0001697:	75 14                	jne    c00016ad <dlmalloc+0x2dd>
c0001699:	89 c1                	mov    ecx,eax
c000169b:	83 c2 08             	add    edx,0x8
c000169e:	f7 d1                	not    ecx
c00016a0:	01 c0                	add    eax,eax
c00016a2:	21 cf                	and    edi,ecx
c00016a4:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00016ab:	eb ac                	jmp    c0001659 <dlmalloc+0x289>
c00016ad:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00016b0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00016b3:	83 e0 fc             	and    eax,0xfffffffc
c00016b6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00016b9:	89 c3                	mov    ebx,eax
c00016bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00016be:	29 f3                	sub    ebx,esi
c00016c0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00016c3:	83 fb 0f             	cmp    ebx,0xf
c00016c6:	8d 41 08             	lea    eax,[ecx+0x8]
c00016c9:	77 09                	ja     c00016d4 <dlmalloc+0x304>
c00016cb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00016cf:	e9 82 00 00 00       	jmp    c0001756 <dlmalloc+0x386>
c00016d4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00016d7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00016dd:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00016e3:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00016e9:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00016f0:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00016f7:	77 06                	ja     c00016ff <dlmalloc+0x32f>
c00016f9:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00016ff:	83 ce 01             	or     esi,0x1
c0001702:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001705:	89 d9                	mov    ecx,ebx
c0001707:	83 c9 01             	or     ecx,0x1
c000170a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000170d:	89 1a                	mov    DWORD PTR [edx],ebx
c000170f:	eb 45                	jmp    c0001756 <dlmalloc+0x386>
c0001711:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001716:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001719:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000171c:	83 e2 fc             	and    edx,0xfffffffc
c000171f:	39 d1                	cmp    ecx,edx
c0001721:	77 1e                	ja     c0001741 <dlmalloc+0x371>
c0001723:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c000172e:	83 cb 01             	or     ebx,0x1
c0001731:	29 f2                	sub    edx,esi
c0001733:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001736:	83 ca 01             	or     edx,0x1
c0001739:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000173c:	e9 2d fd ff ff       	jmp    c000146e <dlmalloc+0x9e>
c0001741:	83 c4 1c             	add    esp,0x1c
c0001744:	89 f0                	mov    eax,esi
c0001746:	5b                   	pop    ebx
c0001747:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c000174c:	5e                   	pop    esi
c000174d:	5f                   	pop    edi
c000174e:	5d                   	pop    ebp
c000174f:	e9 c9 f8 ff ff       	jmp    c000101d <sYSMALLOc>
c0001754:	31 c0                	xor    eax,eax
c0001756:	83 c4 1c             	add    esp,0x1c
c0001759:	5b                   	pop    ebx
c000175a:	5e                   	pop    esi
c000175b:	5f                   	pop    edi
c000175c:	5d                   	pop    ebp
c000175d:	c3                   	ret    

c000175e <iALLOc>:
c000175e:	55                   	push   ebp
c000175f:	89 c5                	mov    ebp,eax
c0001761:	57                   	push   edi
c0001762:	56                   	push   esi
c0001763:	53                   	push   ebx
c0001764:	83 ec 2c             	sub    esp,0x2c
c0001767:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000176b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000176f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001773:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000177a:	75 12                	jne    c000178e <iALLOc+0x30>
c000177c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001780:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001785:	e8 98 f6 ff ff       	call   c0000e22 <malloc_consolidate>
c000178a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000178e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001793:	74 12                	je     c00017a7 <iALLOc+0x49>
c0001795:	85 ed                	test   ebp,ebp
c0001797:	0f 84 64 01 00 00    	je     c0001901 <iALLOc+0x1a3>
c000179d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00017a5:	eb 33                	jmp    c00017da <iALLOc+0x7c>
c00017a7:	85 ed                	test   ebp,ebp
c00017a9:	75 14                	jne    c00017bf <iALLOc+0x61>
c00017ab:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00017b3:	83 c4 2c             	add    esp,0x2c
c00017b6:	5b                   	pop    ebx
c00017b7:	5e                   	pop    esi
c00017b8:	5f                   	pop    edi
c00017b9:	5d                   	pop    ebp
c00017ba:	e9 11 fc ff ff       	jmp    c00013d0 <dlmalloc>
c00017bf:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00017c6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00017ce:	83 f8 0f             	cmp    eax,0xf
c00017d1:	76 07                	jbe    c00017da <iALLOc+0x7c>
c00017d3:	83 e0 f8             	and    eax,0xfffffff8
c00017d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00017da:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00017df:	75 09                	jne    c00017ea <iALLOc+0x8c>
c00017e1:	89 d0                	mov    eax,edx
c00017e3:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00017e6:	31 f6                	xor    esi,esi
c00017e8:	eb 3b                	jmp    c0001825 <iALLOc+0xc7>
c00017ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00017ec:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00017f4:	83 c0 0b             	add    eax,0xb
c00017f7:	83 f8 0f             	cmp    eax,0xf
c00017fa:	76 07                	jbe    c0001803 <iALLOc+0xa5>
c00017fc:	83 e0 f8             	and    eax,0xfffffff8
c00017ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001807:	0f af f5             	imul   esi,ebp
c000180a:	eb 25                	jmp    c0001831 <iALLOc+0xd3>
c000180c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000180e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001811:	bb 10 00 00 00       	mov    ebx,0x10
c0001816:	83 f9 0f             	cmp    ecx,0xf
c0001819:	76 05                	jbe    c0001820 <iALLOc+0xc2>
c000181b:	83 e1 f8             	and    ecx,0xfffffff8
c000181e:	89 cb                	mov    ebx,ecx
c0001820:	01 de                	add    esi,ebx
c0001822:	83 c0 04             	add    eax,0x4
c0001825:	39 c7                	cmp    edi,eax
c0001827:	75 e3                	jne    c000180c <iALLOc+0xae>
c0001829:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001831:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001835:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c000183b:	83 ec 0c             	sub    esp,0xc
c000183e:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000184c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001850:	50                   	push   eax
c0001851:	e8 7a fb ff ff       	call   c00013d0 <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000185f:	85 c0                	test   eax,eax
c0001861:	0f 84 92 00 00 00    	je     c00018f9 <iALLOc+0x19b>
c0001867:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000186a:	8d 78 f8             	lea    edi,[eax-0x8]
c000186d:	83 e3 fc             	and    ebx,0xfffffffc
c0001870:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001874:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001879:	74 1e                	je     c0001899 <iALLOc+0x13b>
c000187b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000187f:	89 d9                	mov    ecx,ebx
c0001881:	52                   	push   edx
c0001882:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001886:	83 e9 04             	sub    ecx,0x4
c0001889:	51                   	push   ecx
c000188a:	6a 00                	push   0x0
c000188c:	50                   	push   eax
c000188d:	e8 5e ec ff ff       	call   c00004f0 <memset>
c0001892:	83 c4 10             	add    esp,0x10
c0001895:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001899:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000189e:	75 14                	jne    c00018b4 <iALLOc+0x156>
c00018a0:	8d 04 37             	lea    eax,[edi+esi*1]
c00018a3:	29 f3                	sub    ebx,esi
c00018a5:	8d 48 08             	lea    ecx,[eax+0x8]
c00018a8:	83 cb 01             	or     ebx,0x1
c00018ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00018af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00018b2:	89 f3                	mov    ebx,esi
c00018b4:	31 c0                	xor    eax,eax
c00018b6:	4d                   	dec    ebp
c00018b7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	39 c5                	cmp    ebp,eax
c00018c0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00018c3:	74 2c                	je     c00018f1 <iALLOc+0x193>
c00018c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00018c9:	85 c9                	test   ecx,ecx
c00018cb:	75 15                	jne    c00018e2 <iALLOc+0x184>
c00018cd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00018d0:	8d 71 0b             	lea    esi,[ecx+0xb]
c00018d3:	b9 10 00 00 00       	mov    ecx,0x10
c00018d8:	83 fe 0f             	cmp    esi,0xf
c00018db:	76 05                	jbe    c00018e2 <iALLOc+0x184>
c00018dd:	83 e6 f8             	and    esi,0xfffffff8
c00018e0:	89 f1                	mov    ecx,esi
c00018e2:	89 ce                	mov    esi,ecx
c00018e4:	29 cb                	sub    ebx,ecx
c00018e6:	83 ce 01             	or     esi,0x1
c00018e9:	40                   	inc    eax
c00018ea:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00018ed:	01 cf                	add    edi,ecx
c00018ef:	eb c6                	jmp    c00018b7 <iALLOc+0x159>
c00018f1:	83 cb 01             	or     ebx,0x1
c00018f4:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00018f7:	eb 08                	jmp    c0001901 <iALLOc+0x1a3>
c00018f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001905:	83 c4 2c             	add    esp,0x2c
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlrealloc>:
c000190d:	55                   	push   ebp
c000190e:	57                   	push   edi
c000190f:	56                   	push   esi
c0001910:	53                   	push   ebx
c0001911:	83 ec 1c             	sub    esp,0x1c
c0001914:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001918:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000191c:	85 db                	test   ebx,ebx
c000191e:	75 10                	jne    c0001930 <dlrealloc+0x23>
c0001920:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001924:	83 c4 1c             	add    esp,0x1c
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	e9 a0 fa ff ff       	jmp    c00013d0 <dlmalloc>
c0001930:	83 f8 df             	cmp    eax,0xffffffdf
c0001933:	0f 87 a5 01 00 00    	ja     c0001ade <dlrealloc+0x1d1>
c0001939:	83 c0 0b             	add    eax,0xb
c000193c:	bd 10 00 00 00       	mov    ebp,0x10
c0001941:	83 f8 0f             	cmp    eax,0xf
c0001944:	76 05                	jbe    c000194b <dlrealloc+0x3e>
c0001946:	83 e0 f8             	and    eax,0xfffffff8
c0001949:	89 c5                	mov    ebp,eax
c000194b:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000194e:	89 c6                	mov    esi,eax
c0001950:	83 e6 fc             	and    esi,0xfffffffc
c0001953:	a8 02                	test   al,0x2
c0001955:	0f 85 4e 01 00 00    	jne    c0001aa9 <dlrealloc+0x19c>
c000195b:	8d 7b f8             	lea    edi,[ebx-0x8]
c000195e:	39 f5                	cmp    ebp,esi
c0001960:	0f 86 04 01 00 00    	jbe    c0001a6a <dlrealloc+0x15d>
c0001966:	8d 14 37             	lea    edx,[edi+esi*1]
c0001969:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000196c:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001972:	75 33                	jne    c00019a7 <dlrealloc+0x9a>
c0001974:	83 e1 fc             	and    ecx,0xfffffffc
c0001977:	01 f1                	add    ecx,esi
c0001979:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000197d:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001980:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001984:	77 49                	ja     c00019cf <dlrealloc+0xc2>
c0001986:	01 ef                	add    edi,ebp
c0001988:	83 e0 01             	and    eax,0x1
c000198b:	09 e8                	or     eax,ebp
c000198d:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001990:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000199a:	29 e8                	sub    eax,ebp
c000199c:	83 c8 01             	or     eax,0x1
c000199f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00019a2:	e9 39 01 00 00       	jmp    c0001ae0 <dlrealloc+0x1d3>
c00019a7:	89 c8                	mov    eax,ecx
c00019a9:	83 e0 fe             	and    eax,0xfffffffe
c00019ac:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00019b1:	75 1c                	jne    c00019cf <dlrealloc+0xc2>
c00019b3:	83 e1 fc             	and    ecx,0xfffffffc
c00019b6:	01 f1                	add    ecx,esi
c00019b8:	39 cd                	cmp    ebp,ecx
c00019ba:	77 13                	ja     c00019cf <dlrealloc+0xc2>
c00019bc:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00019bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00019c2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00019c5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00019c8:	89 ce                	mov    esi,ecx
c00019ca:	e9 9b 00 00 00       	jmp    c0001a6a <dlrealloc+0x15d>
c00019cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00019d3:	8d 45 f9             	lea    eax,[ebp-0x7]
c00019d6:	83 ec 0c             	sub    esp,0xc
c00019d9:	50                   	push   eax
c00019da:	e8 f1 f9 ff ff       	call   c00013d0 <dlmalloc>
c00019df:	83 c4 10             	add    esp,0x10
c00019e2:	85 c0                	test   eax,eax
c00019e4:	0f 84 f4 00 00 00    	je     c0001ade <dlrealloc+0x1d1>
c00019ea:	8d 48 f8             	lea    ecx,[eax-0x8]
c00019ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f1:	39 ca                	cmp    edx,ecx
c00019f3:	75 0a                	jne    c00019ff <dlrealloc+0xf2>
c00019f5:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00019f8:	83 e0 fc             	and    eax,0xfffffffc
c00019fb:	01 c6                	add    esi,eax
c00019fd:	eb 6b                	jmp    c0001a6a <dlrealloc+0x15d>
c00019ff:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001a02:	83 f9 27             	cmp    ecx,0x27
c0001a05:	76 08                	jbe    c0001a0f <dlrealloc+0x102>
c0001a07:	89 de                	mov    esi,ebx
c0001a09:	89 c7                	mov    edi,eax
c0001a0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a0d:	eb 43                	jmp    c0001a52 <dlrealloc+0x145>
c0001a0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001a11:	83 f9 13             	cmp    ecx,0x13
c0001a14:	89 10                	mov    DWORD PTR [eax],edx
c0001a16:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001a19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001a1c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001a1f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001a22:	76 2e                	jbe    c0001a52 <dlrealloc+0x145>
c0001a24:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001a27:	83 f9 1b             	cmp    ecx,0x1b
c0001a2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001a2d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001a30:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001a33:	76 1d                	jbe    c0001a52 <dlrealloc+0x145>
c0001a35:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001a38:	83 f9 23             	cmp    ecx,0x23
c0001a3b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001a3e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001a41:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001a44:	76 0c                	jbe    c0001a52 <dlrealloc+0x145>
c0001a46:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001a49:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001a4c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001a4f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001a52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	53                   	push   ebx
c0001a5a:	e8 aa f4 ff ff       	call   c0000f09 <dlfree>
c0001a5f:	83 c4 10             	add    esp,0x10
c0001a62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001a66:	89 c3                	mov    ebx,eax
c0001a68:	eb 76                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a6a:	89 f2                	mov    edx,esi
c0001a6c:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001a6f:	29 ea                	sub    edx,ebp
c0001a71:	83 e1 01             	and    ecx,0x1
c0001a74:	8d 04 37             	lea    eax,[edi+esi*1]
c0001a77:	83 fa 0f             	cmp    edx,0xf
c0001a7a:	77 0b                	ja     c0001a87 <dlrealloc+0x17a>
c0001a7c:	09 f1                	or     ecx,esi
c0001a7e:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001a81:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a85:	eb 59                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001a87:	01 ef                	add    edi,ebp
c0001a89:	83 ec 0c             	sub    esp,0xc
c0001a8c:	09 cd                	or     ebp,ecx
c0001a8e:	83 ca 01             	or     edx,0x1
c0001a91:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001a94:	83 c7 08             	add    edi,0x8
c0001a97:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001a9a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001a9e:	57                   	push   edi
c0001a9f:	e8 65 f4 ff ff       	call   c0000f09 <dlfree>
c0001aa4:	83 c4 10             	add    esp,0x10
c0001aa7:	eb 37                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001aa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0001aac:	39 f0                	cmp    eax,esi
c0001aae:	76 30                	jbe    c0001ae0 <dlrealloc+0x1d3>
c0001ab0:	83 ec 0c             	sub    esp,0xc
c0001ab3:	83 ed 07             	sub    ebp,0x7
c0001ab6:	55                   	push   ebp
c0001ab7:	e8 14 f9 ff ff       	call   c00013d0 <dlmalloc>
c0001abc:	83 c4 10             	add    esp,0x10
c0001abf:	89 c5                	mov    ebp,eax
c0001ac1:	85 c0                	test   eax,eax
c0001ac3:	74 19                	je     c0001ade <dlrealloc+0x1d1>
c0001ac5:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001ac8:	89 c7                	mov    edi,eax
c0001aca:	89 de                	mov    esi,ebx
c0001acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ace:	83 ec 0c             	sub    esp,0xc
c0001ad1:	53                   	push   ebx
c0001ad2:	89 eb                	mov    ebx,ebp
c0001ad4:	e8 30 f4 ff ff       	call   c0000f09 <dlfree>
c0001ad9:	83 c4 10             	add    esp,0x10
c0001adc:	eb 02                	jmp    c0001ae0 <dlrealloc+0x1d3>
c0001ade:	31 db                	xor    ebx,ebx
c0001ae0:	83 c4 1c             	add    esp,0x1c
c0001ae3:	89 d8                	mov    eax,ebx
c0001ae5:	5b                   	pop    ebx
c0001ae6:	5e                   	pop    esi
c0001ae7:	5f                   	pop    edi
c0001ae8:	5d                   	pop    ebp
c0001ae9:	c3                   	ret    

c0001aea <dlmemalign>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 0c             	sub    esp,0xc
c0001af1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001af9:	83 fa 08             	cmp    edx,0x8
c0001afc:	77 10                	ja     c0001b0e <dlmemalign+0x24>
c0001afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001b02:	83 c4 0c             	add    esp,0xc
c0001b05:	5b                   	pop    ebx
c0001b06:	5e                   	pop    esi
c0001b07:	5f                   	pop    edi
c0001b08:	5d                   	pop    ebp
c0001b09:	e9 c2 f8 ff ff       	jmp    c00013d0 <dlmalloc>
c0001b0e:	bf 10 00 00 00       	mov    edi,0x10
c0001b13:	83 fa 0f             	cmp    edx,0xf
c0001b16:	76 13                	jbe    c0001b2b <dlmemalign+0x41>
c0001b18:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001b1b:	85 d1                	test   ecx,edx
c0001b1d:	75 04                	jne    c0001b23 <dlmemalign+0x39>
c0001b1f:	89 d7                	mov    edi,edx
c0001b21:	eb 08                	jmp    c0001b2b <dlmemalign+0x41>
c0001b23:	39 d7                	cmp    edi,edx
c0001b25:	73 04                	jae    c0001b2b <dlmemalign+0x41>
c0001b27:	01 ff                	add    edi,edi
c0001b29:	eb f8                	jmp    c0001b23 <dlmemalign+0x39>
c0001b2b:	83 f8 df             	cmp    eax,0xffffffdf
c0001b2e:	76 07                	jbe    c0001b37 <dlmemalign+0x4d>
c0001b30:	31 c0                	xor    eax,eax
c0001b32:	e9 ce 00 00 00       	jmp    c0001c05 <dlmemalign+0x11b>
c0001b37:	83 c0 0b             	add    eax,0xb
c0001b3a:	bd 10 00 00 00       	mov    ebp,0x10
c0001b3f:	83 f8 0f             	cmp    eax,0xf
c0001b42:	76 05                	jbe    c0001b49 <dlmemalign+0x5f>
c0001b44:	83 e0 f8             	and    eax,0xfffffff8
c0001b47:	89 c5                	mov    ebp,eax
c0001b49:	83 ec 0c             	sub    esp,0xc
c0001b4c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001b50:	50                   	push   eax
c0001b51:	e8 7a f8 ff ff       	call   c00013d0 <dlmalloc>
c0001b56:	83 c4 10             	add    esp,0x10
c0001b59:	89 c1                	mov    ecx,eax
c0001b5b:	85 c0                	test   eax,eax
c0001b5d:	74 d1                	je     c0001b30 <dlmemalign+0x46>
c0001b5f:	31 d2                	xor    edx,edx
c0001b61:	8d 70 f8             	lea    esi,[eax-0x8]
c0001b64:	f7 f7                	div    edi
c0001b66:	85 d2                	test   edx,edx
c0001b68:	74 62                	je     c0001bcc <dlmemalign+0xe2>
c0001b6a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001b6e:	89 f8                	mov    eax,edi
c0001b70:	f7 d8                	neg    eax
c0001b72:	21 c3                	and    ebx,eax
c0001b74:	83 eb 08             	sub    ebx,0x8
c0001b77:	89 d8                	mov    eax,ebx
c0001b79:	29 f0                	sub    eax,esi
c0001b7b:	83 f8 0f             	cmp    eax,0xf
c0001b7e:	77 02                	ja     c0001b82 <dlmemalign+0x98>
c0001b80:	01 fb                	add    ebx,edi
c0001b82:	89 d8                	mov    eax,ebx
c0001b84:	29 f0                	sub    eax,esi
c0001b86:	89 c6                	mov    esi,eax
c0001b88:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001b8b:	89 c2                	mov    edx,eax
c0001b8d:	83 e2 fc             	and    edx,0xfffffffc
c0001b90:	29 f2                	sub    edx,esi
c0001b92:	a8 02                	test   al,0x2
c0001b94:	74 10                	je     c0001ba6 <dlmemalign+0xbc>
c0001b96:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001b99:	83 ca 02             	or     edx,0x2
c0001b9c:	8d 43 08             	lea    eax,[ebx+0x8]
c0001b9f:	89 33                	mov    DWORD PTR [ebx],esi
c0001ba1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001ba4:	eb 5f                	jmp    c0001c05 <dlmemalign+0x11b>
c0001ba6:	83 ec 0c             	sub    esp,0xc
c0001ba9:	89 d0                	mov    eax,edx
c0001bab:	83 c8 01             	or     eax,0x1
c0001bae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001bb1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001bb6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001bb9:	83 e0 01             	and    eax,0x1
c0001bbc:	09 f0                	or     eax,esi
c0001bbe:	89 de                	mov    esi,ebx
c0001bc0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001bc3:	51                   	push   ecx
c0001bc4:	e8 40 f3 ff ff       	call   c0000f09 <dlfree>
c0001bc9:	83 c4 10             	add    esp,0x10
c0001bcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bcf:	a8 02                	test   al,0x2
c0001bd1:	75 2f                	jne    c0001c02 <dlmemalign+0x118>
c0001bd3:	83 e0 fc             	and    eax,0xfffffffc
c0001bd6:	8d 55 10             	lea    edx,[ebp+0x10]
c0001bd9:	39 c2                	cmp    edx,eax
c0001bdb:	73 25                	jae    c0001c02 <dlmemalign+0x118>
c0001bdd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001be0:	83 ec 0c             	sub    esp,0xc
c0001be3:	29 e8                	sub    eax,ebp
c0001be5:	83 c2 08             	add    edx,0x8
c0001be8:	83 c8 01             	or     eax,0x1
c0001beb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001bee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001bf1:	83 e0 01             	and    eax,0x1
c0001bf4:	09 c5                	or     ebp,eax
c0001bf6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001bf9:	52                   	push   edx
c0001bfa:	e8 0a f3 ff ff       	call   c0000f09 <dlfree>
c0001bff:	83 c4 10             	add    esp,0x10
c0001c02:	8d 46 08             	lea    eax,[esi+0x8]
c0001c05:	83 c4 0c             	add    esp,0xc
c0001c08:	5b                   	pop    ebx
c0001c09:	5e                   	pop    esi
c0001c0a:	5f                   	pop    edi
c0001c0b:	5d                   	pop    ebp
c0001c0c:	c3                   	ret    

c0001c0d <dlcalloc>:
c0001c0d:	53                   	push   ebx
c0001c0e:	83 ec 14             	sub    esp,0x14
c0001c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001c15:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001c1a:	50                   	push   eax
c0001c1b:	e8 b0 f7 ff ff       	call   c00013d0 <dlmalloc>
c0001c20:	83 c4 10             	add    esp,0x10
c0001c23:	89 c3                	mov    ebx,eax
c0001c25:	85 c0                	test   eax,eax
c0001c27:	74 6e                	je     c0001c97 <dlcalloc+0x8a>
c0001c29:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001c2c:	a8 02                	test   al,0x2
c0001c2e:	75 67                	jne    c0001c97 <dlcalloc+0x8a>
c0001c30:	83 e0 fc             	and    eax,0xfffffffc
c0001c33:	83 e8 04             	sub    eax,0x4
c0001c36:	83 f8 27             	cmp    eax,0x27
c0001c39:	76 0f                	jbe    c0001c4a <dlcalloc+0x3d>
c0001c3b:	52                   	push   edx
c0001c3c:	50                   	push   eax
c0001c3d:	6a 00                	push   0x0
c0001c3f:	53                   	push   ebx
c0001c40:	e8 ab e8 ff ff       	call   c00004f0 <memset>
c0001c45:	83 c4 10             	add    esp,0x10
c0001c48:	eb 4d                	jmp    c0001c97 <dlcalloc+0x8a>
c0001c4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001c50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001c57:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001c5e:	83 f8 13             	cmp    eax,0x13
c0001c61:	76 34                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c63:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001c6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001c71:	83 f8 1b             	cmp    eax,0x1b
c0001c74:	76 21                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001c7d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001c84:	83 f8 23             	cmp    eax,0x23
c0001c87:	76 0e                	jbe    c0001c97 <dlcalloc+0x8a>
c0001c89:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001c90:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001c97:	89 d8                	mov    eax,ebx
c0001c99:	83 c4 08             	add    esp,0x8
c0001c9c:	5b                   	pop    ebx
c0001c9d:	c3                   	ret    

c0001c9e <dlcfree>:
c0001c9e:	e9 66 f2 ff ff       	jmp    c0000f09 <dlfree>

c0001ca3 <dlindependent_calloc>:
c0001ca3:	83 ec 28             	sub    esp,0x28
c0001ca6:	b9 03 00 00 00       	mov    ecx,0x3
c0001cab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001caf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001cb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001cb7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001cbf:	e8 9a fa ff ff       	call   c000175e <iALLOc>
c0001cc4:	83 c4 2c             	add    esp,0x2c
c0001cc7:	c3                   	ret    

c0001cc8 <dlindependent_comalloc>:
c0001cc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cd0:	31 c9                	xor    ecx,ecx
c0001cd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001cd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001cda:	e9 7f fa ff ff       	jmp    c000175e <iALLOc>

c0001cdf <dlvalloc>:
c0001cdf:	83 ec 0c             	sub    esp,0xc
c0001ce2:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ce9:	75 0a                	jne    c0001cf5 <dlvalloc+0x16>
c0001ceb:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cf0:	e8 2d f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001cf5:	50                   	push   eax
c0001cf6:	50                   	push   eax
c0001cf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001cfb:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001d01:	e8 e4 fd ff ff       	call   c0001aea <dlmemalign>
c0001d06:	83 c4 1c             	add    esp,0x1c
c0001d09:	c3                   	ret    

c0001d0a <dlpvalloc>:
c0001d0a:	83 ec 0c             	sub    esp,0xc
c0001d0d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001d14:	75 0a                	jne    c0001d20 <dlpvalloc+0x16>
c0001d16:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d1b:	e8 02 f1 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d20:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001d25:	89 c1                	mov    ecx,eax
c0001d27:	52                   	push   edx
c0001d28:	f7 d9                	neg    ecx
c0001d2a:	52                   	push   edx
c0001d2b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001d2f:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001d33:	21 ca                	and    edx,ecx
c0001d35:	52                   	push   edx
c0001d36:	50                   	push   eax
c0001d37:	e8 ae fd ff ff       	call   c0001aea <dlmemalign>
c0001d3c:	83 c4 1c             	add    esp,0x1c
c0001d3f:	c3                   	ret    

c0001d40 <dlmalloc_trim>:
c0001d40:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d45:	e8 d8 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d4a:	31 c0                	xor    eax,eax
c0001d4c:	c3                   	ret    

c0001d4d <dlmalloc_usable_size>:
c0001d4d:	53                   	push   ebx
c0001d4e:	31 c0                	xor    eax,eax
c0001d50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001d54:	85 c9                	test   ecx,ecx
c0001d56:	74 24                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d58:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001d5b:	f6 c2 02             	test   dl,0x2
c0001d5e:	74 08                	je     c0001d68 <dlmalloc_usable_size+0x1b>
c0001d60:	83 e2 fc             	and    edx,0xfffffffc
c0001d63:	8d 42 f8             	lea    eax,[edx-0x8]
c0001d66:	eb 14                	jmp    c0001d7c <dlmalloc_usable_size+0x2f>
c0001d68:	89 d3                	mov    ebx,edx
c0001d6a:	31 c0                	xor    eax,eax
c0001d6c:	83 e3 fe             	and    ebx,0xfffffffe
c0001d6f:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001d74:	74 06                	je     c0001d7c <dlmalloc_usable_size+0x2f>
c0001d76:	83 e2 fc             	and    edx,0xfffffffc
c0001d79:	8d 42 fc             	lea    eax,[edx-0x4]
c0001d7c:	5b                   	pop    ebx
c0001d7d:	c3                   	ret    

c0001d7e <dlmallinfo>:
c0001d7e:	55                   	push   ebp
c0001d7f:	57                   	push   edi
c0001d80:	56                   	push   esi
c0001d81:	53                   	push   ebx
c0001d82:	83 ec 08             	sub    esp,0x8
c0001d85:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001d89:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001d90:	75 0a                	jne    c0001d9c <dlmallinfo+0x1e>
c0001d92:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001d97:	e8 86 f0 ff ff       	call   c0000e22 <malloc_consolidate>
c0001d9c:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001da1:	31 ed                	xor    ebp,ebp
c0001da3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001da6:	31 c9                	xor    ecx,ecx
c0001da8:	83 e0 fc             	and    eax,0xfffffffc
c0001dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001db8:	85 d2                	test   edx,edx
c0001dba:	74 0e                	je     c0001dca <dlmallinfo+0x4c>
c0001dbc:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001dbf:	45                   	inc    ebp
c0001dc0:	83 e6 fc             	and    esi,0xfffffffc
c0001dc3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001dc6:	01 f1                	add    ecx,esi
c0001dc8:	eb ee                	jmp    c0001db8 <dlmallinfo+0x3a>
c0001dca:	40                   	inc    eax
c0001dcb:	83 f8 0a             	cmp    eax,0xa
c0001dce:	75 e1                	jne    c0001db1 <dlmallinfo+0x33>
c0001dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001dd4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ddb:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001dde:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001de3:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001de6:	39 f0                	cmp    eax,esi
c0001de8:	74 10                	je     c0001dfa <dlmallinfo+0x7c>
c0001dea:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ded:	ff 04 24             	inc    DWORD PTR [esp]
c0001df0:	83 e7 fc             	and    edi,0xfffffffc
c0001df3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001df6:	01 fa                	add    edx,edi
c0001df8:	eb ec                	jmp    c0001de6 <dlmallinfo+0x68>
c0001dfa:	83 c0 08             	add    eax,0x8
c0001dfd:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001e02:	75 df                	jne    c0001de3 <dlmallinfo+0x65>
c0001e04:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001e07:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001e0a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001e0d:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001e12:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001e15:	89 03                	mov    DWORD PTR [ebx],eax
c0001e17:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001e1a:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001e20:	29 d0                	sub    eax,edx
c0001e22:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001e25:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001e28:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001e2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001e32:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001e35:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001e38:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001e3e:	89 d8                	mov    eax,ebx
c0001e40:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001e43:	83 c4 08             	add    esp,0x8
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	5d                   	pop    ebp
c0001e4a:	c2 04 00             	ret    0x4

c0001e4d <dlmalloc_stats>:
c0001e4d:	83 ec 30             	sub    esp,0x30
c0001e50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001e54:	50                   	push   eax
c0001e55:	e8 24 ff ff ff       	call   c0001d7e <dlmallinfo>
c0001e5a:	83 c4 30             	add    esp,0x30
c0001e5d:	c3                   	ret    

c0001e5e <dlmallopt>:
c0001e5e:	56                   	push   esi
c0001e5f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001e64:	53                   	push   ebx
c0001e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001e69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001e6d:	e8 b0 ef ff ff       	call   c0000e22 <malloc_consolidate>
c0001e72:	8d 46 04             	lea    eax,[esi+0x4]
c0001e75:	83 f8 05             	cmp    eax,0x5
c0001e78:	77 5d                	ja     c0001ed7 <dlmallopt+0x79>
c0001e7a:	ff 24 85 00 f7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0900]
c0001e81:	83 fb 50             	cmp    ebx,0x50
c0001e84:	77 51                	ja     c0001ed7 <dlmallopt+0x79>
c0001e86:	ba 08 00 00 00       	mov    edx,0x8
c0001e8b:	85 db                	test   ebx,ebx
c0001e8d:	74 12                	je     c0001ea1 <dlmallopt+0x43>
c0001e8f:	83 c3 0b             	add    ebx,0xb
c0001e92:	ba 10 00 00 00       	mov    edx,0x10
c0001e97:	83 fb 0f             	cmp    ebx,0xf
c0001e9a:	76 05                	jbe    c0001ea1 <dlmallopt+0x43>
c0001e9c:	89 da                	mov    edx,ebx
c0001e9e:	83 e2 f8             	and    edx,0xfffffff8
c0001ea1:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001ea6:	83 e0 03             	and    eax,0x3
c0001ea9:	09 d0                	or     eax,edx
c0001eab:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001eb0:	eb 27                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001eb2:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001eb8:	eb 16                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eba:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001ec0:	eb 0e                	jmp    c0001ed0 <dlmallopt+0x72>
c0001ec2:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001ec8:	eb 06                	jmp    c0001ed0 <dlmallopt+0x72>
c0001eca:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001ed0:	be 01 00 00 00       	mov    esi,0x1
c0001ed5:	eb 02                	jmp    c0001ed9 <dlmallopt+0x7b>
c0001ed7:	31 f6                	xor    esi,esi
c0001ed9:	89 f0                	mov    eax,esi
c0001edb:	5b                   	pop    ebx
c0001edc:	5e                   	pop    esi
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isblank>:
c0001ee0:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ee5:	74 09                	je     c0001ef0 <isblank+0x10>
c0001ee7:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001eec:	75 0a                	jne    c0001ef8 <isblank+0x18>
c0001eee:	66 90                	xchg   ax,ax
c0001ef0:	b8 01 00 00 00       	mov    eax,0x1
c0001ef5:	c3                   	ret    
c0001ef6:	66 90                	xchg   ax,ax
c0001ef8:	b8 00 00 00 00       	mov    eax,0x0
c0001efd:	c3                   	ret    
c0001efe:	66 90                	xchg   ax,ax

c0001f00 <iscntrl>:
c0001f00:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001f05:	7e 09                	jle    c0001f10 <iscntrl+0x10>
c0001f07:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001f0c:	75 0a                	jne    c0001f18 <iscntrl+0x18>
c0001f0e:	66 90                	xchg   ax,ax
c0001f10:	b8 01 00 00 00       	mov    eax,0x1
c0001f15:	c3                   	ret    
c0001f16:	66 90                	xchg   ax,ax
c0001f18:	b8 00 00 00 00       	mov    eax,0x0
c0001f1d:	c3                   	ret    
c0001f1e:	66 90                	xchg   ax,ax

c0001f20 <isdigit>:
c0001f20:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001f25:	7e 0d                	jle    c0001f34 <isdigit+0x14>
c0001f27:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001f2c:	7f 06                	jg     c0001f34 <isdigit+0x14>
c0001f2e:	b8 01 00 00 00       	mov    eax,0x1
c0001f33:	c3                   	ret    
c0001f34:	b8 00 00 00 00       	mov    eax,0x0
c0001f39:	c3                   	ret    
c0001f3a:	66 90                	xchg   ax,ax

c0001f3c <islower>:
c0001f3c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f41:	7e 0d                	jle    c0001f50 <islower+0x14>
c0001f43:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001f48:	7f 06                	jg     c0001f50 <islower+0x14>
c0001f4a:	b8 01 00 00 00       	mov    eax,0x1
c0001f4f:	c3                   	ret    
c0001f50:	b8 00 00 00 00       	mov    eax,0x0
c0001f55:	c3                   	ret    
c0001f56:	66 90                	xchg   ax,ax

c0001f58 <isspace>:
c0001f58:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001f5d:	7c 19                	jl     c0001f78 <isspace+0x20>
c0001f5f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001f64:	7e 0a                	jle    c0001f70 <isspace+0x18>
c0001f66:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f6b:	75 0b                	jne    c0001f78 <isspace+0x20>
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]
c0001f70:	b8 01 00 00 00       	mov    eax,0x1
c0001f75:	c3                   	ret    
c0001f76:	66 90                	xchg   ax,ax
c0001f78:	b8 00 00 00 00       	mov    eax,0x0
c0001f7d:	c3                   	ret    
c0001f7e:	66 90                	xchg   ax,ax

c0001f80 <isupper>:
c0001f80:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f85:	7e 0d                	jle    c0001f94 <isupper+0x14>
c0001f87:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001f8c:	7f 06                	jg     c0001f94 <isupper+0x14>
c0001f8e:	b8 01 00 00 00       	mov    eax,0x1
c0001f93:	c3                   	ret    
c0001f94:	b8 00 00 00 00       	mov    eax,0x0
c0001f99:	c3                   	ret    
c0001f9a:	66 90                	xchg   ax,ax

c0001f9c <isalpha>:
c0001f9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fa0:	e8 db ff ff ff       	call   c0001f80 <isupper>
c0001fa5:	83 c4 04             	add    esp,0x4
c0001fa8:	85 c0                	test   eax,eax
c0001faa:	75 10                	jne    c0001fbc <isalpha+0x20>
c0001fac:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fb0:	e8 87 ff ff ff       	call   c0001f3c <islower>
c0001fb5:	83 c4 04             	add    esp,0x4
c0001fb8:	85 c0                	test   eax,eax
c0001fba:	74 08                	je     c0001fc4 <isalpha+0x28>
c0001fbc:	b8 01 00 00 00       	mov    eax,0x1
c0001fc1:	c3                   	ret    
c0001fc2:	66 90                	xchg   ax,ax
c0001fc4:	b8 00 00 00 00       	mov    eax,0x0
c0001fc9:	c3                   	ret    
c0001fca:	66 90                	xchg   ax,ax

c0001fcc <isalnum>:
c0001fcc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fd0:	e8 c7 ff ff ff       	call   c0001f9c <isalpha>
c0001fd5:	83 c4 04             	add    esp,0x4
c0001fd8:	85 c0                	test   eax,eax
c0001fda:	75 10                	jne    c0001fec <isalnum+0x20>
c0001fdc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001fe0:	e8 3b ff ff ff       	call   c0001f20 <isdigit>
c0001fe5:	83 c4 04             	add    esp,0x4
c0001fe8:	85 c0                	test   eax,eax
c0001fea:	74 08                	je     c0001ff4 <isalnum+0x28>
c0001fec:	b8 01 00 00 00       	mov    eax,0x1
c0001ff1:	c3                   	ret    
c0001ff2:	66 90                	xchg   ax,ax
c0001ff4:	b8 00 00 00 00       	mov    eax,0x0
c0001ff9:	c3                   	ret    
c0001ffa:	66 90                	xchg   ax,ax

c0001ffc <ispunct>:
c0001ffc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002000:	e8 c7 ff ff ff       	call   c0001fcc <isalnum>
c0002005:	83 c4 04             	add    esp,0x4
c0002008:	85 c0                	test   eax,eax
c000200a:	75 28                	jne    c0002034 <ispunct+0x38>
c000200c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002010:	e8 43 ff ff ff       	call   c0001f58 <isspace>
c0002015:	83 c4 04             	add    esp,0x4
c0002018:	85 c0                	test   eax,eax
c000201a:	75 18                	jne    c0002034 <ispunct+0x38>
c000201c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002020:	e8 db fe ff ff       	call   c0001f00 <iscntrl>
c0002025:	83 c4 04             	add    esp,0x4
c0002028:	85 c0                	test   eax,eax
c000202a:	75 08                	jne    c0002034 <ispunct+0x38>
c000202c:	b8 01 00 00 00       	mov    eax,0x1
c0002031:	c3                   	ret    
c0002032:	66 90                	xchg   ax,ax
c0002034:	b8 00 00 00 00       	mov    eax,0x0
c0002039:	c3                   	ret    
c000203a:	66 90                	xchg   ax,ax

c000203c <isgraph>:
c000203c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002040:	e8 87 ff ff ff       	call   c0001fcc <isalnum>
c0002045:	83 c4 04             	add    esp,0x4
c0002048:	85 c0                	test   eax,eax
c000204a:	75 10                	jne    c000205c <isgraph+0x20>
c000204c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002050:	e8 a7 ff ff ff       	call   c0001ffc <ispunct>
c0002055:	83 c4 04             	add    esp,0x4
c0002058:	85 c0                	test   eax,eax
c000205a:	74 08                	je     c0002064 <isgraph+0x28>
c000205c:	b8 01 00 00 00       	mov    eax,0x1
c0002061:	c3                   	ret    
c0002062:	66 90                	xchg   ax,ax
c0002064:	b8 00 00 00 00       	mov    eax,0x0
c0002069:	c3                   	ret    
c000206a:	66 90                	xchg   ax,ax

c000206c <isprint>:
c000206c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002070:	e8 c7 ff ff ff       	call   c000203c <isgraph>
c0002075:	83 c4 04             	add    esp,0x4
c0002078:	85 c0                	test   eax,eax
c000207a:	75 08                	jne    c0002084 <isprint+0x18>
c000207c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0002081:	75 09                	jne    c000208c <isprint+0x20>
c0002083:	90                   	nop
c0002084:	b8 01 00 00 00       	mov    eax,0x1
c0002089:	c3                   	ret    
c000208a:	66 90                	xchg   ax,ax
c000208c:	b8 00 00 00 00       	mov    eax,0x0
c0002091:	c3                   	ret    
c0002092:	66 90                	xchg   ax,ax

c0002094 <isxdigit>:
c0002094:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0002098:	e8 83 fe ff ff       	call   c0001f20 <isdigit>
c000209d:	83 c4 04             	add    esp,0x4
c00020a0:	85 c0                	test   eax,eax
c00020a2:	75 20                	jne    c00020c4 <isxdigit+0x30>
c00020a4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c00020a9:	7e 09                	jle    c00020b4 <isxdigit+0x20>
c00020ab:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c00020b0:	7e 12                	jle    c00020c4 <isxdigit+0x30>
c00020b2:	66 90                	xchg   ax,ax
c00020b4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c00020b9:	7e 11                	jle    c00020cc <isxdigit+0x38>
c00020bb:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c00020c0:	7f 0a                	jg     c00020cc <isxdigit+0x38>
c00020c2:	66 90                	xchg   ax,ax
c00020c4:	b8 01 00 00 00       	mov    eax,0x1
c00020c9:	c3                   	ret    
c00020ca:	66 90                	xchg   ax,ax
c00020cc:	b8 00 00 00 00       	mov    eax,0x0
c00020d1:	c3                   	ret    

c00020d2 <disk_status>:
c00020d2:	31 c0                	xor    eax,eax
c00020d4:	c3                   	ret    

c00020d5 <disk_initialize>:
c00020d5:	31 c0                	xor    eax,eax
c00020d7:	c3                   	ret    

c00020d8 <disk_read>:
c00020d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020dd:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c00020e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020e9:	e9 a6 6a 02 00       	jmp    c0028b94 <fatWrapperReadDisk>

c00020ee <disk_write>:
c00020ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00020f3:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c00020fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020ff:	e9 d0 6a 02 00       	jmp    c0028bd4 <fatWrapperWriteDisk>

c0002104 <disk_ioctl>:
c0002104:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002109:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000210d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0002112:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c000211a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000211e:	e9 f1 6a 02 00       	jmp    c0028c14 <fatWrapperIoctl>

c0002123 <ld_word>:
c0002123:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	c1 e2 08             	shl    edx,0x8
c000212d:	09 d0                	or     eax,edx
c000212f:	c3                   	ret    

c0002130 <ld_dword>:
c0002130:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002134:	89 d1                	mov    ecx,edx
c0002136:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c000213a:	c1 e1 08             	shl    ecx,0x8
c000213d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002140:	09 ca                	or     edx,ecx
c0002142:	c1 e2 08             	shl    edx,0x8
c0002145:	09 d0                	or     eax,edx
c0002147:	c3                   	ret    

c0002148 <st_word>:
c0002148:	66 89 10             	mov    WORD PTR [eax],dx
c000214b:	c3                   	ret    

c000214c <st_dword>:
c000214c:	89 10                	mov    DWORD PTR [eax],edx
c000214e:	c3                   	ret    

c000214f <mem_cpy>:
c000214f:	85 c9                	test   ecx,ecx
c0002151:	74 10                	je     c0002163 <mem_cpy+0x14>
c0002153:	57                   	push   edi
c0002154:	01 c1                	add    ecx,eax
c0002156:	56                   	push   esi
c0002157:	89 c7                	mov    edi,eax
c0002159:	89 d6                	mov    esi,edx
c000215b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000215c:	39 f9                	cmp    ecx,edi
c000215e:	75 fb                	jne    c000215b <mem_cpy+0xc>
c0002160:	5e                   	pop    esi
c0002161:	5f                   	pop    edi
c0002162:	c3                   	ret    
c0002163:	c3                   	ret    

c0002164 <mem_set>:
c0002164:	01 c1                	add    ecx,eax
c0002166:	40                   	inc    eax
c0002167:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c000216a:	39 c8                	cmp    eax,ecx
c000216c:	75 f8                	jne    c0002166 <mem_set+0x2>
c000216e:	c3                   	ret    

c000216f <mem_cmp>:
c000216f:	57                   	push   edi
c0002170:	56                   	push   esi
c0002171:	89 c6                	mov    esi,eax
c0002173:	53                   	push   ebx
c0002174:	46                   	inc    esi
c0002175:	42                   	inc    edx
c0002176:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000217a:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000217e:	29 fb                	sub    ebx,edi
c0002180:	89 cf                	mov    edi,ecx
c0002182:	29 f7                	sub    edi,esi
c0002184:	01 c7                	add    edi,eax
c0002186:	74 04                	je     c000218c <mem_cmp+0x1d>
c0002188:	85 db                	test   ebx,ebx
c000218a:	74 e8                	je     c0002174 <mem_cmp+0x5>
c000218c:	89 d8                	mov    eax,ebx
c000218e:	5b                   	pop    ebx
c000218f:	5e                   	pop    esi
c0002190:	5f                   	pop    edi
c0002191:	c3                   	ret    

c0002192 <chk_chr>:
c0002192:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002195:	85 c9                	test   ecx,ecx
c0002197:	74 07                	je     c00021a0 <chk_chr+0xe>
c0002199:	39 d1                	cmp    ecx,edx
c000219b:	74 03                	je     c00021a0 <chk_chr+0xe>
c000219d:	40                   	inc    eax
c000219e:	eb f2                	jmp    c0002192 <chk_chr>
c00021a0:	89 c8                	mov    eax,ecx
c00021a2:	c3                   	ret    

c00021a3 <dbc_1st>:
c00021a3:	31 c0                	xor    eax,eax
c00021a5:	c3                   	ret    

c00021a6 <dbc_2nd>:
c00021a6:	31 c0                	xor    eax,eax
c00021a8:	c3                   	ret    

c00021a9 <tchar2uni>:
c00021a9:	57                   	push   edi
c00021aa:	56                   	push   esi
c00021ab:	53                   	push   ebx
c00021ac:	8b 18                	mov    ebx,DWORD PTR [eax]
c00021ae:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00021b0:	8d 73 01             	lea    esi,[ebx+0x1]
c00021b3:	f6 c1 80             	test   cl,0x80
c00021b6:	75 0a                	jne    c00021c2 <tchar2uni+0x19>
c00021b8:	0f b6 d1             	movzx  edx,cl
c00021bb:	89 f3                	mov    ebx,esi
c00021bd:	e9 b2 00 00 00       	jmp    c0002274 <tchar2uni+0xcb>
c00021c2:	89 ca                	mov    edx,ecx
c00021c4:	81 e2 e0 00 00 00    	and    edx,0xe0
c00021ca:	81 fa c0 00 00 00    	cmp    edx,0xc0
c00021d0:	89 ca                	mov    edx,ecx
c00021d2:	75 0a                	jne    c00021de <tchar2uni+0x35>
c00021d4:	83 e2 1f             	and    edx,0x1f
c00021d7:	b9 01 00 00 00       	mov    ecx,0x1
c00021dc:	eb 37                	jmp    c0002215 <tchar2uni+0x6c>
c00021de:	81 e2 f0 00 00 00    	and    edx,0xf0
c00021e4:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00021ea:	75 0c                	jne    c00021f8 <tchar2uni+0x4f>
c00021ec:	89 ca                	mov    edx,ecx
c00021ee:	b9 02 00 00 00       	mov    ecx,0x2
c00021f3:	83 e2 0f             	and    edx,0xf
c00021f6:	eb 1d                	jmp    c0002215 <tchar2uni+0x6c>
c00021f8:	89 cf                	mov    edi,ecx
c00021fa:	83 ca ff             	or     edx,0xffffffff
c00021fd:	81 e7 f8 00 00 00    	and    edi,0xf8
c0002203:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0002209:	75 70                	jne    c000227b <tchar2uni+0xd2>
c000220b:	89 ca                	mov    edx,ecx
c000220d:	b9 03 00 00 00       	mov    ecx,0x3
c0002212:	83 e2 07             	and    edx,0x7
c0002215:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0002219:	46                   	inc    esi
c000221a:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c000221d:	89 cf                	mov    edi,ecx
c000221f:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002225:	83 c7 80             	add    edi,0xffffff80
c0002228:	75 4e                	jne    c0002278 <tchar2uni+0xcf>
c000222a:	c1 e2 06             	shl    edx,0x6
c000222d:	83 e1 3f             	and    ecx,0x3f
c0002230:	09 ca                	or     edx,ecx
c0002232:	39 de                	cmp    esi,ebx
c0002234:	75 e3                	jne    c0002219 <tchar2uni+0x70>
c0002236:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002239:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c000223f:	77 37                	ja     c0002278 <tchar2uni+0xcf>
c0002241:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002247:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000224d:	76 29                	jbe    c0002278 <tchar2uni+0xcf>
c000224f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002255:	76 1d                	jbe    c0002274 <tchar2uni+0xcb>
c0002257:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c000225d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002263:	c1 e1 06             	shl    ecx,0x6
c0002266:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000226c:	09 ca                	or     edx,ecx
c000226e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002274:	89 18                	mov    DWORD PTR [eax],ebx
c0002276:	eb 03                	jmp    c000227b <tchar2uni+0xd2>
c0002278:	83 ca ff             	or     edx,0xffffffff
c000227b:	5b                   	pop    ebx
c000227c:	89 d0                	mov    eax,edx
c000227e:	5e                   	pop    esi
c000227f:	5f                   	pop    edi
c0002280:	c3                   	ret    

c0002281 <put_utf>:
c0002281:	53                   	push   ebx
c0002282:	83 f8 7f             	cmp    eax,0x7f
c0002285:	89 c3                	mov    ebx,eax
c0002287:	b0 00                	mov    al,0x0
c0002289:	77 11                	ja     c000229c <put_utf+0x1b>
c000228b:	85 c9                	test   ecx,ecx
c000228d:	0f 84 e5 00 00 00    	je     c0002378 <put_utf+0xf7>
c0002293:	88 1a                	mov    BYTE PTR [edx],bl
c0002295:	b0 01                	mov    al,0x1
c0002297:	e9 dc 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c000229c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00022a2:	77 23                	ja     c00022c7 <put_utf+0x46>
c00022a4:	83 f9 01             	cmp    ecx,0x1
c00022a7:	0f 86 cb 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ad:	89 d8                	mov    eax,ebx
c00022af:	83 e3 3f             	and    ebx,0x3f
c00022b2:	c1 e8 06             	shr    eax,0x6
c00022b5:	83 cb 80             	or     ebx,0xffffff80
c00022b8:	83 c8 c0             	or     eax,0xffffffc0
c00022bb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00022be:	88 02                	mov    BYTE PTR [edx],al
c00022c0:	b0 02                	mov    al,0x2
c00022c2:	e9 b1 00 00 00       	jmp    c0002378 <put_utf+0xf7>
c00022c7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00022cd:	77 40                	ja     c000230f <put_utf+0x8e>
c00022cf:	83 f9 02             	cmp    ecx,0x2
c00022d2:	0f 86 a0 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022d8:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00022de:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00022e4:	0f 86 8e 00 00 00    	jbe    c0002378 <put_utf+0xf7>
c00022ea:	89 d8                	mov    eax,ebx
c00022ec:	c1 e8 0c             	shr    eax,0xc
c00022ef:	83 c8 e0             	or     eax,0xffffffe0
c00022f2:	88 02                	mov    BYTE PTR [edx],al
c00022f4:	89 d8                	mov    eax,ebx
c00022f6:	83 e3 3f             	and    ebx,0x3f
c00022f9:	c1 e8 06             	shr    eax,0x6
c00022fc:	83 cb 80             	or     ebx,0xffffff80
c00022ff:	83 e0 3f             	and    eax,0x3f
c0002302:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0002305:	83 c8 80             	or     eax,0xffffff80
c0002308:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000230b:	b0 03                	mov    al,0x3
c000230d:	eb 69                	jmp    c0002378 <put_utf+0xf7>
c000230f:	83 f9 03             	cmp    ecx,0x3
c0002312:	76 64                	jbe    c0002378 <put_utf+0xf7>
c0002314:	89 d9                	mov    ecx,ebx
c0002316:	0f b7 c3             	movzx  eax,bx
c0002319:	66 31 c9             	xor    cx,cx
c000231c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002322:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002328:	c1 e9 06             	shr    ecx,0x6
c000232b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002331:	77 43                	ja     c0002376 <put_utf+0xf5>
c0002333:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002339:	77 3b                	ja     c0002376 <put_utf+0xf5>
c000233b:	09 cb                	or     ebx,ecx
c000233d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002343:	89 d8                	mov    eax,ebx
c0002345:	c1 e8 12             	shr    eax,0x12
c0002348:	83 c8 f0             	or     eax,0xfffffff0
c000234b:	88 02                	mov    BYTE PTR [edx],al
c000234d:	89 d8                	mov    eax,ebx
c000234f:	c1 e8 0c             	shr    eax,0xc
c0002352:	83 e0 3f             	and    eax,0x3f
c0002355:	83 c8 80             	or     eax,0xffffff80
c0002358:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000235b:	89 d8                	mov    eax,ebx
c000235d:	83 e3 3f             	and    ebx,0x3f
c0002360:	c1 e8 06             	shr    eax,0x6
c0002363:	83 cb 80             	or     ebx,0xffffff80
c0002366:	83 e0 3f             	and    eax,0x3f
c0002369:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000236c:	83 c8 80             	or     eax,0xffffff80
c000236f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002372:	b0 04                	mov    al,0x4
c0002374:	eb 02                	jmp    c0002378 <put_utf+0xf7>
c0002376:	31 c0                	xor    eax,eax
c0002378:	5b                   	pop    ebx
c0002379:	c3                   	ret    

c000237a <clst2sect>:
c000237a:	8d 4a fe             	lea    ecx,[edx-0x2]
c000237d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002380:	83 ea 02             	sub    edx,0x2
c0002383:	39 ca                	cmp    edx,ecx
c0002385:	76 0d                	jbe    c0002394 <clst2sect+0x1a>
c0002387:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000238b:	0f af d1             	imul   edx,ecx
c000238e:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002391:	89 d0                	mov    eax,edx
c0002393:	c3                   	ret    
c0002394:	31 c0                	xor    eax,eax
c0002396:	c3                   	ret    

c0002397 <pick_lfn>:
c0002397:	55                   	push   ebp
c0002398:	57                   	push   edi
c0002399:	89 c7                	mov    edi,eax
c000239b:	56                   	push   esi
c000239c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000239f:	53                   	push   ebx
c00023a0:	89 d3                	mov    ebx,edx
c00023a2:	e8 7c fd ff ff       	call   c0002123 <ld_word>
c00023a7:	66 85 c0             	test   ax,ax
c00023aa:	74 04                	je     c00023b0 <pick_lfn+0x19>
c00023ac:	31 c0                	xor    eax,eax
c00023ae:	eb 62                	jmp    c0002412 <pick_lfn+0x7b>
c00023b0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00023b3:	bd 01 00 00 00       	mov    ebp,0x1
c00023b8:	83 e1 bf             	and    ecx,0xffffffbf
c00023bb:	31 f6                	xor    esi,esi
c00023bd:	49                   	dec    ecx
c00023be:	6b c9 0d             	imul   ecx,ecx,0xd
c00023c1:	0f b6 86 60 f8 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd07a0]
c00023c8:	01 d8                	add    eax,ebx
c00023ca:	e8 54 fd ff ff       	call   c0002123 <ld_word>
c00023cf:	66 85 ed             	test   bp,bp
c00023d2:	74 11                	je     c00023e5 <pick_lfn+0x4e>
c00023d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00023da:	77 d0                	ja     c00023ac <pick_lfn+0x15>
c00023dc:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00023e0:	89 c5                	mov    ebp,eax
c00023e2:	41                   	inc    ecx
c00023e3:	eb 0a                	jmp    c00023ef <pick_lfn+0x58>
c00023e5:	0f b7 c0             	movzx  eax,ax
c00023e8:	3d ff ff 00 00       	cmp    eax,0xffff
c00023ed:	75 bd                	jne    c00023ac <pick_lfn+0x15>
c00023ef:	46                   	inc    esi
c00023f0:	83 fe 0d             	cmp    esi,0xd
c00023f3:	75 cc                	jne    c00023c1 <pick_lfn+0x2a>
c00023f5:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00023f8:	74 13                	je     c000240d <pick_lfn+0x76>
c00023fa:	66 85 ed             	test   bp,bp
c00023fd:	74 0e                	je     c000240d <pick_lfn+0x76>
c00023ff:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002405:	77 a5                	ja     c00023ac <pick_lfn+0x15>
c0002407:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c000240d:	b8 01 00 00 00       	mov    eax,0x1
c0002412:	5b                   	pop    ebx
c0002413:	5e                   	pop    esi
c0002414:	5f                   	pop    edi
c0002415:	5d                   	pop    ebp
c0002416:	c3                   	ret    

c0002417 <put_lfn>:
c0002417:	55                   	push   ebp
c0002418:	57                   	push   edi
c0002419:	89 d7                	mov    edi,edx
c000241b:	56                   	push   esi
c000241c:	31 f6                	xor    esi,esi
c000241e:	53                   	push   ebx
c000241f:	83 ec 0c             	sub    esp,0xc
c0002422:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002426:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000242a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000242e:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002434:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002437:	8d 42 1a             	lea    eax,[edx+0x1a]
c000243a:	31 d2                	xor    edx,edx
c000243c:	e8 07 fd ff ff       	call   c0002148 <st_word>
c0002441:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002448:	0f b6 d9             	movzx  ebx,cl
c000244b:	4b                   	dec    ebx
c000244c:	6b db 0d             	imul   ebx,ebx,0xd
c000244f:	0f b7 c6             	movzx  eax,si
c0002452:	3d ff ff 00 00       	cmp    eax,0xffff
c0002457:	74 09                	je     c0002462 <put_lfn+0x4b>
c0002459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000245d:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002461:	43                   	inc    ebx
c0002462:	0f b7 ee             	movzx  ebp,si
c0002465:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002468:	89 ea                	mov    edx,ebp
c000246a:	0f b6 80 60 f8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd07a0]
c0002471:	01 f8                	add    eax,edi
c0002473:	e8 d0 fc ff ff       	call   c0002148 <st_word>
c0002478:	85 ed                	test   ebp,ebp
c000247a:	75 05                	jne    c0002481 <put_lfn+0x6a>
c000247c:	be ff ff 00 00       	mov    esi,0xffff
c0002481:	ff 04 24             	inc    DWORD PTR [esp]
c0002484:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002488:	75 c5                	jne    c000244f <put_lfn+0x38>
c000248a:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002490:	74 0b                	je     c000249d <put_lfn+0x86>
c0002492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002496:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000249b:	75 07                	jne    c00024a4 <put_lfn+0x8d>
c000249d:	83 c9 40             	or     ecx,0x40
c00024a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00024a4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00024a8:	88 07                	mov    BYTE PTR [edi],al
c00024aa:	83 c4 0c             	add    esp,0xc
c00024ad:	5b                   	pop    ebx
c00024ae:	5e                   	pop    esi
c00024af:	5f                   	pop    edi
c00024b0:	5d                   	pop    ebp
c00024b1:	c3                   	ret    

c00024b2 <gen_numname>:
c00024b2:	57                   	push   edi
c00024b3:	89 cf                	mov    edi,ecx
c00024b5:	56                   	push   esi
c00024b6:	b9 0b 00 00 00       	mov    ecx,0xb
c00024bb:	53                   	push   ebx
c00024bc:	89 c6                	mov    esi,eax
c00024be:	83 ec 10             	sub    esp,0x10
c00024c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00024c5:	e8 85 fc ff ff       	call   c000214f <mem_cpy>
c00024ca:	83 fb 05             	cmp    ebx,0x5
c00024cd:	76 30                	jbe    c00024ff <gen_numname+0x4d>
c00024cf:	66 8b 07             	mov    ax,WORD PTR [edi]
c00024d2:	66 85 c0             	test   ax,ax
c00024d5:	74 28                	je     c00024ff <gen_numname+0x4d>
c00024d7:	83 c7 02             	add    edi,0x2
c00024da:	ba 10 00 00 00       	mov    edx,0x10
c00024df:	01 db                	add    ebx,ebx
c00024e1:	89 c1                	mov    ecx,eax
c00024e3:	c1 e0 10             	shl    eax,0x10
c00024e6:	83 e1 01             	and    ecx,0x1
c00024e9:	c1 e8 11             	shr    eax,0x11
c00024ec:	01 cb                	add    ebx,ecx
c00024ee:	0f ba e3 10          	bt     ebx,0x10
c00024f2:	73 06                	jae    c00024fa <gen_numname+0x48>
c00024f4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00024fa:	4a                   	dec    edx
c00024fb:	75 e2                	jne    c00024df <gen_numname+0x2d>
c00024fd:	eb d0                	jmp    c00024cf <gen_numname+0x1d>
c00024ff:	b8 07 00 00 00       	mov    eax,0x7
c0002504:	89 d9                	mov    ecx,ebx
c0002506:	83 e1 0f             	and    ecx,0xf
c0002509:	8d 79 30             	lea    edi,[ecx+0x30]
c000250c:	89 fa                	mov    edx,edi
c000250e:	83 ff 39             	cmp    edi,0x39
c0002511:	76 03                	jbe    c0002516 <gen_numname+0x64>
c0002513:	8d 51 37             	lea    edx,[ecx+0x37]
c0002516:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002519:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000251d:	89 da                	mov    edx,ebx
c000251f:	c1 ea 04             	shr    edx,0x4
c0002522:	83 fb 0f             	cmp    ebx,0xf
c0002525:	76 06                	jbe    c000252d <gen_numname+0x7b>
c0002527:	89 c8                	mov    eax,ecx
c0002529:	89 d3                	mov    ebx,edx
c000252b:	eb d7                	jmp    c0002504 <gen_numname+0x52>
c000252d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002532:	31 d2                	xor    edx,edx
c0002534:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002537:	8d 04 16             	lea    eax,[esi+edx*1]
c000253a:	39 ca                	cmp    edx,ecx
c000253c:	73 19                	jae    c0002557 <gen_numname+0xa5>
c000253e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002541:	83 f8 20             	cmp    eax,0x20
c0002544:	74 11                	je     c0002557 <gen_numname+0xa5>
c0002546:	e8 58 fc ff ff       	call   c00021a3 <dbc_1st>
c000254b:	85 c0                	test   eax,eax
c000254d:	74 05                	je     c0002554 <gen_numname+0xa2>
c000254f:	39 d3                	cmp    ebx,edx
c0002551:	74 04                	je     c0002557 <gen_numname+0xa5>
c0002553:	42                   	inc    edx
c0002554:	42                   	inc    edx
c0002555:	eb e0                	jmp    c0002537 <gen_numname+0x85>
c0002557:	b0 20                	mov    al,0x20
c0002559:	83 f9 07             	cmp    ecx,0x7
c000255c:	77 05                	ja     c0002563 <gen_numname+0xb1>
c000255e:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002562:	41                   	inc    ecx
c0002563:	42                   	inc    edx
c0002564:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002568:	83 fa 07             	cmp    edx,0x7
c000256b:	76 ea                	jbe    c0002557 <gen_numname+0xa5>
c000256d:	83 c4 10             	add    esp,0x10
c0002570:	5b                   	pop    ebx
c0002571:	5e                   	pop    esi
c0002572:	5f                   	pop    edi
c0002573:	c3                   	ret    

c0002574 <sum_sfn>:
c0002574:	53                   	push   ebx
c0002575:	31 c9                	xor    ecx,ecx
c0002577:	31 db                	xor    ebx,ebx
c0002579:	0f b6 d1             	movzx  edx,cl
c000257c:	c1 e1 07             	shl    ecx,0x7
c000257f:	d1 ea                	shr    edx,1
c0002581:	09 ca                	or     edx,ecx
c0002583:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002586:	43                   	inc    ebx
c0002587:	01 ca                	add    edx,ecx
c0002589:	83 fb 0b             	cmp    ebx,0xb
c000258c:	88 d1                	mov    cl,dl
c000258e:	75 e9                	jne    c0002579 <sum_sfn+0x5>
c0002590:	88 d0                	mov    al,dl
c0002592:	5b                   	pop    ebx
c0002593:	c3                   	ret    

c0002594 <get_ldnumber>:
c0002594:	8b 10                	mov    edx,DWORD PTR [eax]
c0002596:	85 d2                	test   edx,edx
c0002598:	74 14                	je     c00025ae <get_ldnumber+0x1a>
c000259a:	56                   	push   esi
c000259b:	53                   	push   ebx
c000259c:	89 d3                	mov    ebx,edx
c000259e:	43                   	inc    ebx
c000259f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c00025a2:	80 f9 1f             	cmp    cl,0x1f
c00025a5:	76 0d                	jbe    c00025b4 <get_ldnumber+0x20>
c00025a7:	80 f9 3a             	cmp    cl,0x3a
c00025aa:	75 f2                	jne    c000259e <get_ldnumber+0xa>
c00025ac:	eb 0a                	jmp    c00025b8 <get_ldnumber+0x24>
c00025ae:	83 c9 ff             	or     ecx,0xffffffff
c00025b1:	89 c8                	mov    eax,ecx
c00025b3:	c3                   	ret    
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	eb 24                	jmp    c00025dc <get_ldnumber+0x48>
c00025b8:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00025bb:	8d 4e d0             	lea    ecx,[esi-0x30]
c00025be:	80 f9 09             	cmp    cl,0x9
c00025c1:	77 16                	ja     c00025d9 <get_ldnumber+0x45>
c00025c3:	83 c2 02             	add    edx,0x2
c00025c6:	83 c9 ff             	or     ecx,0xffffffff
c00025c9:	39 d3                	cmp    ebx,edx
c00025cb:	75 0f                	jne    c00025dc <get_ldnumber+0x48>
c00025cd:	89 f2                	mov    edx,esi
c00025cf:	89 18                	mov    DWORD PTR [eax],ebx
c00025d1:	0f be ca             	movsx  ecx,dl
c00025d4:	83 e9 30             	sub    ecx,0x30
c00025d7:	eb 03                	jmp    c00025dc <get_ldnumber+0x48>
c00025d9:	83 c9 ff             	or     ecx,0xffffffff
c00025dc:	89 c8                	mov    eax,ecx
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	c3                   	ret    

c00025e1 <validate>:
c00025e1:	56                   	push   esi
c00025e2:	53                   	push   ebx
c00025e3:	89 d6                	mov    esi,edx
c00025e5:	51                   	push   ecx
c00025e6:	85 c0                	test   eax,eax
c00025e8:	75 09                	jne    c00025f3 <validate+0x12>
c00025ea:	b8 09 00 00 00       	mov    eax,0x9
c00025ef:	31 c9                	xor    ecx,ecx
c00025f1:	eb 2e                	jmp    c0002621 <validate+0x40>
c00025f3:	89 c3                	mov    ebx,eax
c00025f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00025f7:	85 c0                	test   eax,eax
c00025f9:	74 ef                	je     c00025ea <validate+0x9>
c00025fb:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00025fe:	74 ea                	je     c00025ea <validate+0x9>
c0002600:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0002603:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c0002607:	75 e1                	jne    c00025ea <validate+0x9>
c0002609:	83 ec 0c             	sub    esp,0xc
c000260c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002610:	50                   	push   eax
c0002611:	e8 bc fa ff ff       	call   c00020d2 <disk_status>
c0002616:	83 c4 10             	add    esp,0x10
c0002619:	a8 01                	test   al,0x1
c000261b:	75 cd                	jne    c00025ea <validate+0x9>
c000261d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000261f:	31 c0                	xor    eax,eax
c0002621:	89 0e                	mov    DWORD PTR [esi],ecx
c0002623:	5a                   	pop    edx
c0002624:	5b                   	pop    ebx
c0002625:	5e                   	pop    esi
c0002626:	c3                   	ret    

c0002627 <sync_window>:
c0002627:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000262b:	74 58                	je     c0002685 <sync_window+0x5e>
c000262d:	56                   	push   esi
c000262e:	53                   	push   ebx
c000262f:	8d 70 34             	lea    esi,[eax+0x34]
c0002632:	51                   	push   ecx
c0002633:	89 c3                	mov    ebx,eax
c0002635:	6a 01                	push   0x1
c0002637:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000263a:	56                   	push   esi
c000263b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000263f:	50                   	push   eax
c0002640:	e8 a9 fa ff ff       	call   c00020ee <disk_write>
c0002645:	83 c4 10             	add    esp,0x10
c0002648:	ba 01 00 00 00       	mov    edx,0x1
c000264d:	85 c0                	test   eax,eax
c000264f:	75 2e                	jne    c000267f <sync_window+0x58>
c0002651:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002654:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002657:	89 c1                	mov    ecx,eax
c0002659:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000265d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002660:	39 d1                	cmp    ecx,edx
c0002662:	73 19                	jae    c000267d <sync_window+0x56>
c0002664:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002668:	75 13                	jne    c000267d <sync_window+0x56>
c000266a:	6a 01                	push   0x1
c000266c:	01 d0                	add    eax,edx
c000266e:	50                   	push   eax
c000266f:	56                   	push   esi
c0002670:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002674:	50                   	push   eax
c0002675:	e8 74 fa ff ff       	call   c00020ee <disk_write>
c000267a:	83 c4 10             	add    esp,0x10
c000267d:	31 d2                	xor    edx,edx
c000267f:	89 d0                	mov    eax,edx
c0002681:	5a                   	pop    edx
c0002682:	5b                   	pop    ebx
c0002683:	5e                   	pop    esi
c0002684:	c3                   	ret    
c0002685:	31 d2                	xor    edx,edx
c0002687:	89 d0                	mov    eax,edx
c0002689:	c3                   	ret    

c000268a <move_window>:
c000268a:	57                   	push   edi
c000268b:	56                   	push   esi
c000268c:	31 f6                	xor    esi,esi
c000268e:	53                   	push   ebx
c000268f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002692:	74 32                	je     c00026c6 <move_window+0x3c>
c0002694:	89 c3                	mov    ebx,eax
c0002696:	89 d7                	mov    edi,edx
c0002698:	e8 8a ff ff ff       	call   c0002627 <sync_window>
c000269d:	89 c6                	mov    esi,eax
c000269f:	85 c0                	test   eax,eax
c00026a1:	75 23                	jne    c00026c6 <move_window+0x3c>
c00026a3:	6a 01                	push   0x1
c00026a5:	8d 43 34             	lea    eax,[ebx+0x34]
c00026a8:	57                   	push   edi
c00026a9:	50                   	push   eax
c00026aa:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00026ae:	50                   	push   eax
c00026af:	e8 24 fa ff ff       	call   c00020d8 <disk_read>
c00026b4:	83 c4 10             	add    esp,0x10
c00026b7:	85 c0                	test   eax,eax
c00026b9:	74 08                	je     c00026c3 <move_window+0x39>
c00026bb:	be 01 00 00 00       	mov    esi,0x1
c00026c0:	83 cf ff             	or     edi,0xffffffff
c00026c3:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00026c6:	89 f0                	mov    eax,esi
c00026c8:	5b                   	pop    ebx
c00026c9:	5e                   	pop    esi
c00026ca:	5f                   	pop    edi
c00026cb:	c3                   	ret    

c00026cc <check_fs>:
c00026cc:	53                   	push   ebx
c00026cd:	89 c3                	mov    ebx,eax
c00026cf:	83 ec 08             	sub    esp,0x8
c00026d2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00026d6:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00026dd:	e8 a8 ff ff ff       	call   c000268a <move_window>
c00026e2:	ba 04 00 00 00       	mov    edx,0x4
c00026e7:	85 c0                	test   eax,eax
c00026e9:	75 68                	jne    c0002753 <check_fs+0x87>
c00026eb:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00026f1:	e8 2d fa ff ff       	call   c0002123 <ld_word>
c00026f6:	ba 03 00 00 00       	mov    edx,0x3
c00026fb:	66 3d 55 aa          	cmp    ax,0xaa55
c00026ff:	75 52                	jne    c0002753 <check_fs+0x87>
c0002701:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c0002704:	8d 50 18             	lea    edx,[eax+0x18]
c0002707:	80 fa 01             	cmp    dl,0x1
c000270a:	76 09                	jbe    c0002715 <check_fs+0x49>
c000270c:	ba 02 00 00 00       	mov    edx,0x2
c0002711:	3c eb                	cmp    al,0xeb
c0002713:	75 3e                	jne    c0002753 <check_fs+0x87>
c0002715:	ba e0 35 03 c0       	mov    edx,0xc00335e0
c000271a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000271d:	b9 03 00 00 00       	mov    ecx,0x3
c0002722:	e8 48 fa ff ff       	call   c000216f <mem_cmp>
c0002727:	31 d2                	xor    edx,edx
c0002729:	85 c0                	test   eax,eax
c000272b:	74 26                	je     c0002753 <check_fs+0x87>
c000272d:	ba 18 f7 02 c0       	mov    edx,0xc002f718
c0002732:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002738:	b9 05 00 00 00       	mov    ecx,0x5
c000273d:	e8 2d fa ff ff       	call   c000216f <mem_cmp>
c0002742:	31 d2                	xor    edx,edx
c0002744:	85 c0                	test   eax,eax
c0002746:	74 0b                	je     c0002753 <check_fs+0x87>
c0002748:	31 d2                	xor    edx,edx
c000274a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000274e:	0f 95 c2             	setne  dl
c0002751:	01 d2                	add    edx,edx
c0002753:	89 d0                	mov    eax,edx
c0002755:	83 c4 08             	add    esp,0x8
c0002758:	5b                   	pop    ebx
c0002759:	c3                   	ret    

c000275a <find_volume>:
c000275a:	55                   	push   ebp
c000275b:	57                   	push   edi
c000275c:	56                   	push   esi
c000275d:	89 c6                	mov    esi,eax
c000275f:	53                   	push   ebx
c0002760:	89 d3                	mov    ebx,edx
c0002762:	83 ec 2c             	sub    esp,0x2c
c0002765:	31 d2                	xor    edx,edx
c0002767:	e8 60 ff ff ff       	call   c00026cc <check_fs>
c000276c:	83 f8 02             	cmp    eax,0x2
c000276f:	74 06                	je     c0002777 <find_volume+0x1d>
c0002771:	77 62                	ja     c00027d5 <find_volume+0x7b>
c0002773:	85 db                	test   ebx,ebx
c0002775:	74 5e                	je     c00027d5 <find_volume+0x7b>
c0002777:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000277b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002781:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002787:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000278b:	89 cf                	mov    edi,ecx
c000278d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002791:	89 e8                	mov    eax,ebp
c0002793:	83 c5 10             	add    ebp,0x10
c0002796:	e8 95 f9 ff ff       	call   c0002130 <ld_dword>
c000279b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000279f:	89 01                	mov    DWORD PTR [ecx],eax
c00027a1:	83 c1 04             	add    ecx,0x4
c00027a4:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00027a8:	75 e3                	jne    c000278d <find_volume+0x33>
c00027aa:	31 ed                	xor    ebp,ebp
c00027ac:	85 db                	test   ebx,ebx
c00027ae:	74 03                	je     c00027b3 <find_volume+0x59>
c00027b0:	8d 6b ff             	lea    ebp,[ebx-0x1]
c00027b3:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c00027b6:	b8 03 00 00 00       	mov    eax,0x3
c00027bb:	85 d2                	test   edx,edx
c00027bd:	74 0c                	je     c00027cb <find_volume+0x71>
c00027bf:	89 f0                	mov    eax,esi
c00027c1:	e8 06 ff ff ff       	call   c00026cc <check_fs>
c00027c6:	83 f8 01             	cmp    eax,0x1
c00027c9:	76 0a                	jbe    c00027d5 <find_volume+0x7b>
c00027cb:	85 db                	test   ebx,ebx
c00027cd:	75 06                	jne    c00027d5 <find_volume+0x7b>
c00027cf:	45                   	inc    ebp
c00027d0:	83 fd 03             	cmp    ebp,0x3
c00027d3:	76 de                	jbe    c00027b3 <find_volume+0x59>
c00027d5:	83 c4 2c             	add    esp,0x2c
c00027d8:	5b                   	pop    ebx
c00027d9:	5e                   	pop    esi
c00027da:	5f                   	pop    edi
c00027db:	5d                   	pop    ebp
c00027dc:	c3                   	ret    

c00027dd <mount_volume>:
c00027dd:	55                   	push   ebp
c00027de:	89 d5                	mov    ebp,edx
c00027e0:	57                   	push   edi
c00027e1:	89 cf                	mov    edi,ecx
c00027e3:	56                   	push   esi
c00027e4:	53                   	push   ebx
c00027e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00027ea:	83 ec 1c             	sub    esp,0x1c
c00027ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00027f3:	e8 9c fd ff ff       	call   c0002594 <get_ldnumber>
c00027f8:	85 c0                	test   eax,eax
c00027fa:	0f 88 c4 02 00 00    	js     c0002ac4 <mount_volume+0x2e7>
c0002800:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c0002807:	89 c2                	mov    edx,eax
c0002809:	bb 0c 00 00 00       	mov    ebx,0xc
c000280e:	85 f6                	test   esi,esi
c0002810:	0f 84 ae 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002816:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002819:	83 e7 fe             	and    edi,0xfffffffe
c000281c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000281f:	74 3a                	je     c000285b <mount_volume+0x7e>
c0002821:	89 04 24             	mov    DWORD PTR [esp],eax
c0002824:	83 ec 0c             	sub    esp,0xc
c0002827:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000282b:	50                   	push   eax
c000282c:	e8 a1 f8 ff ff       	call   c00020d2 <disk_status>
c0002831:	83 c4 10             	add    esp,0x10
c0002834:	a8 01                	test   al,0x1
c0002836:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0002839:	75 20                	jne    c000285b <mount_volume+0x7e>
c000283b:	31 db                	xor    ebx,ebx
c000283d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002843:	0f 84 7b 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002849:	a8 04                	test   al,0x4
c000284b:	0f 84 73 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c0002851:	bb 0a 00 00 00       	mov    ebx,0xa
c0002856:	e9 69 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c000285b:	83 ec 0c             	sub    esp,0xc
c000285e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002861:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002864:	0f b6 c2             	movzx  eax,dl
c0002867:	bb 03 00 00 00       	mov    ebx,0x3
c000286c:	50                   	push   eax
c000286d:	e8 63 f8 ff ff       	call   c00020d5 <disk_initialize>
c0002872:	83 c4 10             	add    esp,0x10
c0002875:	a8 01                	test   al,0x1
c0002877:	0f 85 47 02 00 00    	jne    c0002ac4 <mount_volume+0x2e7>
c000287d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002883:	74 04                	je     c0002889 <mount_volume+0xac>
c0002885:	a8 04                	test   al,0x4
c0002887:	75 c8                	jne    c0002851 <mount_volume+0x74>
c0002889:	31 d2                	xor    edx,edx
c000288b:	89 f0                	mov    eax,esi
c000288d:	bb 01 00 00 00       	mov    ebx,0x1
c0002892:	e8 c3 fe ff ff       	call   c000275a <find_volume>
c0002897:	83 f8 04             	cmp    eax,0x4
c000289a:	0f 84 24 02 00 00    	je     c0002ac4 <mount_volume+0x2e7>
c00028a0:	83 f8 01             	cmp    eax,0x1
c00028a3:	76 0a                	jbe    c00028af <mount_volume+0xd2>
c00028a5:	bb 0d 00 00 00       	mov    ebx,0xd
c00028aa:	e9 15 02 00 00       	jmp    c0002ac4 <mount_volume+0x2e7>
c00028af:	8d 46 3f             	lea    eax,[esi+0x3f]
c00028b2:	e8 6c f8 ff ff       	call   c0002123 <ld_word>
c00028b7:	66 3d 00 02          	cmp    ax,0x200
c00028bb:	75 e8                	jne    c00028a5 <mount_volume+0xc8>
c00028bd:	8d 46 4a             	lea    eax,[esi+0x4a]
c00028c0:	e8 5e f8 ff ff       	call   c0002123 <ld_word>
c00028c5:	0f b7 c0             	movzx  eax,ax
c00028c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00028cb:	85 c0                	test   eax,eax
c00028cd:	75 0b                	jne    c00028da <mount_volume+0xfd>
c00028cf:	8d 46 58             	lea    eax,[esi+0x58]
c00028d2:	e8 59 f8 ff ff       	call   c0002130 <ld_dword>
c00028d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00028da:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00028dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00028e4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00028e7:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00028ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00028ee:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00028f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028f5:	48                   	dec    eax
c00028f6:	3c 01                	cmp    al,0x1
c00028f8:	77 ab                	ja     c00028a5 <mount_volume+0xc8>
c00028fa:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00028fe:	89 c3                	mov    ebx,eax
c0002900:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c0002904:	66 85 c0             	test   ax,ax
c0002907:	74 9c                	je     c00028a5 <mount_volume+0xc8>
c0002909:	8d 40 ff             	lea    eax,[eax-0x1]
c000290c:	85 d8                	test   eax,ebx
c000290e:	75 95                	jne    c00028a5 <mount_volume+0xc8>
c0002910:	8d 46 45             	lea    eax,[esi+0x45]
c0002913:	e8 0b f8 ff ff       	call   c0002123 <ld_word>
c0002918:	89 c7                	mov    edi,eax
c000291a:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c000291e:	a8 0f                	test   al,0xf
c0002920:	75 83                	jne    c00028a5 <mount_volume+0xc8>
c0002922:	8d 46 47             	lea    eax,[esi+0x47]
c0002925:	e8 f9 f7 ff ff       	call   c0002123 <ld_word>
c000292a:	0f b7 e8             	movzx  ebp,ax
c000292d:	85 ed                	test   ebp,ebp
c000292f:	75 0a                	jne    c000293b <mount_volume+0x15e>
c0002931:	8d 46 54             	lea    eax,[esi+0x54]
c0002934:	e8 f7 f7 ff ff       	call   c0002130 <ld_dword>
c0002939:	89 c5                	mov    ebp,eax
c000293b:	8d 46 42             	lea    eax,[esi+0x42]
c000293e:	e8 e0 f7 ff ff       	call   c0002123 <ld_word>
c0002943:	0f b7 c8             	movzx  ecx,ax
c0002946:	85 c9                	test   ecx,ecx
c0002948:	0f 84 57 ff ff ff    	je     c00028a5 <mount_volume+0xc8>
c000294e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002953:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002957:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295b:	0f b7 c7             	movzx  eax,di
c000295e:	c1 e8 04             	shr    eax,0x4
c0002961:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002965:	01 c8                	add    eax,ecx
c0002967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000296b:	39 c5                	cmp    ebp,eax
c000296d:	0f 82 32 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002973:	29 c5                	sub    ebp,eax
c0002975:	31 d2                	xor    edx,edx
c0002977:	89 e8                	mov    eax,ebp
c0002979:	f7 f3                	div    ebx
c000297b:	39 dd                	cmp    ebp,ebx
c000297d:	0f 82 22 ff ff ff    	jb     c00028a5 <mount_volume+0xc8>
c0002983:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002988:	0f 87 17 ff ff ff    	ja     c00028a5 <mount_volume+0xc8>
c000298e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002993:	0f 86 1c 01 00 00    	jbe    c0002ab5 <mount_volume+0x2d8>
c0002999:	bb 03 00 00 00       	mov    ebx,0x3
c000299e:	8d 68 02             	lea    ebp,[eax+0x2]
c00029a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00029a9:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c00029ad:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00029b0:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00029b3:	01 c8                	add    eax,ecx
c00029b5:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00029b8:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00029bb:	83 fb 03             	cmp    ebx,0x3
c00029be:	75 23                	jne    c00029e3 <mount_volume+0x206>
c00029c0:	8d 46 5e             	lea    eax,[esi+0x5e]
c00029c3:	e8 5b f7 ff ff       	call   c0002123 <ld_word>
c00029c8:	09 c7                	or     edi,eax
c00029ca:	66 85 ff             	test   di,di
c00029cd:	0f 85 d2 fe ff ff    	jne    c00028a5 <mount_volume+0xc8>
c00029d3:	8d 46 60             	lea    eax,[esi+0x60]
c00029d6:	c1 e5 02             	shl    ebp,0x2
c00029d9:	e8 52 f7 ff ff       	call   c0002130 <ld_dword>
c00029de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029e1:	eb 24                	jmp    c0002a07 <mount_volume+0x22a>
c00029e3:	66 85 ff             	test   di,di
c00029e6:	0f 84 b9 fe ff ff    	je     c00028a5 <mount_volume+0xc8>
c00029ec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00029f0:	83 fb 02             	cmp    ebx,0x2
c00029f3:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00029f6:	75 04                	jne    c00029fc <mount_volume+0x21f>
c00029f8:	01 ed                	add    ebp,ebp
c00029fa:	eb 0b                	jmp    c0002a07 <mount_volume+0x22a>
c00029fc:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c0002a00:	83 e5 01             	and    ebp,0x1
c0002a03:	d1 e8                	shr    eax,1
c0002a05:	01 c5                	add    ebp,eax
c0002a07:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002a0d:	c1 ed 09             	shr    ebp,0x9
c0002a10:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0002a13:	0f 87 8c fe ff ff    	ja     c00028a5 <mount_volume+0xc8>
c0002a19:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002a20:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002a27:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002a2b:	83 fb 03             	cmp    ebx,0x3
c0002a2e:	75 6e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a30:	8d 46 64             	lea    eax,[esi+0x64]
c0002a33:	e8 eb f6 ff ff       	call   c0002123 <ld_word>
c0002a38:	66 48                	dec    ax
c0002a3a:	75 62                	jne    c0002a9e <mount_volume+0x2c1>
c0002a3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002a40:	89 f0                	mov    eax,esi
c0002a42:	42                   	inc    edx
c0002a43:	e8 42 fc ff ff       	call   c000268a <move_window>
c0002a48:	85 c0                	test   eax,eax
c0002a4a:	75 52                	jne    c0002a9e <mount_volume+0x2c1>
c0002a4c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002a50:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002a56:	e8 c8 f6 ff ff       	call   c0002123 <ld_word>
c0002a5b:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a5f:	75 3d                	jne    c0002a9e <mount_volume+0x2c1>
c0002a61:	8d 46 34             	lea    eax,[esi+0x34]
c0002a64:	e8 c7 f6 ff ff       	call   c0002130 <ld_dword>
c0002a69:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a6e:	75 2e                	jne    c0002a9e <mount_volume+0x2c1>
c0002a70:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002a76:	e8 b5 f6 ff ff       	call   c0002130 <ld_dword>
c0002a7b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a80:	75 1c                	jne    c0002a9e <mount_volume+0x2c1>
c0002a82:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002a88:	e8 a3 f6 ff ff       	call   c0002130 <ld_dword>
c0002a8d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002a90:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002a96:	e8 95 f6 ff ff       	call   c0002130 <ld_dword>
c0002a9b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002a9e:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002aa4:	88 1e                	mov    BYTE PTR [esi],bl
c0002aa6:	40                   	inc    eax
c0002aa7:	31 db                	xor    ebx,ebx
c0002aa9:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002aaf:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002ab3:	eb 0f                	jmp    c0002ac4 <mount_volume+0x2e7>
c0002ab5:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002aba:	19 db                	sbb    ebx,ebx
c0002abc:	83 c3 02             	add    ebx,0x2
c0002abf:	e9 da fe ff ff       	jmp    c000299e <mount_volume+0x1c1>
c0002ac4:	83 c4 1c             	add    esp,0x1c
c0002ac7:	89 d8                	mov    eax,ebx
c0002ac9:	5b                   	pop    ebx
c0002aca:	5e                   	pop    esi
c0002acb:	5f                   	pop    edi
c0002acc:	5d                   	pop    ebp
c0002acd:	c3                   	ret    

c0002ace <put_fat>:
c0002ace:	55                   	push   ebp
c0002acf:	bd 02 00 00 00       	mov    ebp,0x2
c0002ad4:	57                   	push   edi
c0002ad5:	56                   	push   esi
c0002ad6:	53                   	push   ebx
c0002ad7:	83 ec 1c             	sub    esp,0x1c
c0002ada:	83 fa 01             	cmp    edx,0x1
c0002add:	0f 86 38 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002ae3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002ae6:	0f 86 2f 01 00 00    	jbe    c0002c1b <put_fat+0x14d>
c0002aec:	89 c6                	mov    esi,eax
c0002aee:	89 cf                	mov    edi,ecx
c0002af0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 f8 02             	cmp    eax,0x2
c0002af8:	0f 84 b1 00 00 00    	je     c0002baf <put_fat+0xe1>
c0002afe:	83 f8 03             	cmp    eax,0x3
c0002b01:	0f 84 d5 00 00 00    	je     c0002bdc <put_fat+0x10e>
c0002b07:	48                   	dec    eax
c0002b08:	0f 85 0d 01 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b0e:	89 d1                	mov    ecx,edx
c0002b10:	89 f0                	mov    eax,esi
c0002b12:	d1 e9                	shr    ecx,1
c0002b14:	01 d1                	add    ecx,edx
c0002b16:	89 ca                	mov    edx,ecx
c0002b18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b1c:	c1 ea 09             	shr    edx,0x9
c0002b1f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b22:	e8 63 fb ff ff       	call   c000268a <move_window>
c0002b27:	89 c5                	mov    ebp,eax
c0002b29:	85 c0                	test   eax,eax
c0002b2b:	0f 85 ea 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b35:	8d 46 34             	lea    eax,[esi+0x34]
c0002b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b3c:	8d 41 01             	lea    eax,[ecx+0x1]
c0002b3f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b49:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b4d:	89 f8                	mov    eax,edi
c0002b4f:	83 e3 01             	and    ebx,0x1
c0002b52:	74 11                	je     c0002b65 <put_fat+0x97>
c0002b54:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002b56:	89 f8                	mov    eax,edi
c0002b58:	83 e2 0f             	and    edx,0xf
c0002b5b:	c1 e0 04             	shl    eax,0x4
c0002b5e:	25 f0 0f 00 00       	and    eax,0xff0
c0002b63:	09 d0                	or     eax,edx
c0002b65:	88 01                	mov    BYTE PTR [ecx],al
c0002b67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b6b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b6f:	c1 ea 09             	shr    edx,0x9
c0002b72:	89 f0                	mov    eax,esi
c0002b74:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002b77:	e8 0e fb ff ff       	call   c000268a <move_window>
c0002b7c:	89 c5                	mov    ebp,eax
c0002b7e:	85 c0                	test   eax,eax
c0002b80:	0f 85 95 00 00 00    	jne    c0002c1b <put_fat+0x14d>
c0002b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b8a:	25 ff 01 00 00       	and    eax,0x1ff
c0002b8f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b93:	85 db                	test   ebx,ebx
c0002b95:	74 07                	je     c0002b9e <put_fat+0xd0>
c0002b97:	c1 ef 04             	shr    edi,0x4
c0002b9a:	89 f9                	mov    ecx,edi
c0002b9c:	eb 0d                	jmp    c0002bab <put_fat+0xdd>
c0002b9e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002ba0:	c1 ef 08             	shr    edi,0x8
c0002ba3:	83 e1 f0             	and    ecx,0xfffffff0
c0002ba6:	83 e7 0f             	and    edi,0xf
c0002ba9:	09 f9                	or     ecx,edi
c0002bab:	88 08                	mov    BYTE PTR [eax],cl
c0002bad:	eb 27                	jmp    c0002bd6 <put_fat+0x108>
c0002baf:	c1 ea 08             	shr    edx,0x8
c0002bb2:	89 f0                	mov    eax,esi
c0002bb4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002bb7:	e8 ce fa ff ff       	call   c000268a <move_window>
c0002bbc:	89 c5                	mov    ebp,eax
c0002bbe:	85 c0                	test   eax,eax
c0002bc0:	75 59                	jne    c0002c1b <put_fat+0x14d>
c0002bc2:	01 db                	add    ebx,ebx
c0002bc4:	0f b7 d7             	movzx  edx,di
c0002bc7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002bcd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002bd1:	e8 72 f5 ff ff       	call   c0002148 <st_word>
c0002bd6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bda:	eb 3f                	jmp    c0002c1b <put_fat+0x14d>
c0002bdc:	c1 ea 07             	shr    edx,0x7
c0002bdf:	89 f0                	mov    eax,esi
c0002be1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002be4:	e8 a1 fa ff ff       	call   c000268a <move_window>
c0002be9:	89 c5                	mov    ebp,eax
c0002beb:	85 c0                	test   eax,eax
c0002bed:	75 2c                	jne    c0002c1b <put_fat+0x14d>
c0002bef:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002bf5:	c1 e3 02             	shl    ebx,0x2
c0002bf8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002bfe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002c02:	89 d8                	mov    eax,ebx
c0002c04:	e8 27 f5 ff ff       	call   c0002130 <ld_dword>
c0002c09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c0e:	09 f8                	or     eax,edi
c0002c10:	89 c2                	mov    edx,eax
c0002c12:	89 d8                	mov    eax,ebx
c0002c14:	e8 33 f5 ff ff       	call   c000214c <st_dword>
c0002c19:	eb bb                	jmp    c0002bd6 <put_fat+0x108>
c0002c1b:	83 c4 1c             	add    esp,0x1c
c0002c1e:	89 e8                	mov    eax,ebp
c0002c20:	5b                   	pop    ebx
c0002c21:	5e                   	pop    esi
c0002c22:	5f                   	pop    edi
c0002c23:	5d                   	pop    ebp
c0002c24:	c3                   	ret    

c0002c25 <dir_clear>:
c0002c25:	55                   	push   ebp
c0002c26:	57                   	push   edi
c0002c27:	56                   	push   esi
c0002c28:	89 c6                	mov    esi,eax
c0002c2a:	53                   	push   ebx
c0002c2b:	83 ec 1c             	sub    esp,0x1c
c0002c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002c32:	e8 f0 f9 ff ff       	call   c0002627 <sync_window>
c0002c37:	85 c0                	test   eax,eax
c0002c39:	0f 85 c0 00 00 00    	jne    c0002cff <dir_clear+0xda>
c0002c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c43:	89 f0                	mov    eax,esi
c0002c45:	e8 30 f7 ff ff       	call   c000237a <clst2sect>
c0002c4a:	31 d2                	xor    edx,edx
c0002c4c:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002c4f:	89 c5                	mov    ebp,eax
c0002c51:	b9 00 02 00 00       	mov    ecx,0x200
c0002c56:	8d 46 34             	lea    eax,[esi+0x34]
c0002c59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c5d:	e8 02 f5 ff ff       	call   c0002164 <mem_set>
c0002c62:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002c66:	c1 e3 09             	shl    ebx,0x9
c0002c69:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002c6f:	76 1b                	jbe    c0002c8c <dir_clear+0x67>
c0002c71:	bb 00 80 00 00       	mov    ebx,0x8000
c0002c76:	eb 14                	jmp    c0002c8c <dir_clear+0x67>
c0002c78:	83 ec 0c             	sub    esp,0xc
c0002c7b:	53                   	push   ebx
c0002c7c:	e8 eb 32 00 00       	call   c0005f6c <ff_memalloc>
c0002c81:	83 c4 10             	add    esp,0x10
c0002c84:	89 c7                	mov    edi,eax
c0002c86:	85 c0                	test   eax,eax
c0002c88:	75 7c                	jne    c0002d06 <dir_clear+0xe1>
c0002c8a:	d1 eb                	shr    ebx,1
c0002c8c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c92:	77 e4                	ja     c0002c78 <dir_clear+0x53>
c0002c94:	31 db                	xor    ebx,ebx
c0002c96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002c9a:	39 d8                	cmp    eax,ebx
c0002c9c:	76 53                	jbe    c0002cf1 <dir_clear+0xcc>
c0002c9e:	6a 01                	push   0x1
c0002ca0:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ca3:	50                   	push   eax
c0002ca4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002cac:	50                   	push   eax
c0002cad:	e8 3c f4 ff ff       	call   c00020ee <disk_write>
c0002cb2:	83 c4 10             	add    esp,0x10
c0002cb5:	85 c0                	test   eax,eax
c0002cb7:	75 38                	jne    c0002cf1 <dir_clear+0xcc>
c0002cb9:	43                   	inc    ebx
c0002cba:	eb da                	jmp    c0002c96 <dir_clear+0x71>
c0002cbc:	52                   	push   edx
c0002cbd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002cc0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002cc4:	50                   	push   eax
c0002cc5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002cc9:	57                   	push   edi
c0002cca:	50                   	push   eax
c0002ccb:	e8 1e f4 ff ff       	call   c00020ee <disk_write>
c0002cd0:	83 c4 10             	add    esp,0x10
c0002cd3:	85 c0                	test   eax,eax
c0002cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002cd9:	75 0a                	jne    c0002ce5 <dir_clear+0xc0>
c0002cdb:	01 d3                	add    ebx,edx
c0002cdd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002ce1:	39 d8                	cmp    eax,ebx
c0002ce3:	77 d7                	ja     c0002cbc <dir_clear+0x97>
c0002ce5:	83 ec 0c             	sub    esp,0xc
c0002ce8:	57                   	push   edi
c0002ce9:	e8 96 32 00 00       	call   c0005f84 <ff_memfree>
c0002cee:	83 c4 10             	add    esp,0x10
c0002cf1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002cf5:	39 d8                	cmp    eax,ebx
c0002cf7:	0f 95 c0             	setne  al
c0002cfa:	0f b6 c0             	movzx  eax,al
c0002cfd:	eb 19                	jmp    c0002d18 <dir_clear+0xf3>
c0002cff:	b8 01 00 00 00       	mov    eax,0x1
c0002d04:	eb 12                	jmp    c0002d18 <dir_clear+0xf3>
c0002d06:	89 d9                	mov    ecx,ebx
c0002d08:	31 d2                	xor    edx,edx
c0002d0a:	e8 55 f4 ff ff       	call   c0002164 <mem_set>
c0002d0f:	89 da                	mov    edx,ebx
c0002d11:	31 db                	xor    ebx,ebx
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	eb c5                	jmp    c0002cdd <dir_clear+0xb8>
c0002d18:	83 c4 1c             	add    esp,0x1c
c0002d1b:	5b                   	pop    ebx
c0002d1c:	5e                   	pop    esi
c0002d1d:	5f                   	pop    edi
c0002d1e:	5d                   	pop    ebp
c0002d1f:	c3                   	ret    

c0002d20 <create_name>:
c0002d20:	55                   	push   ebp
c0002d21:	57                   	push   edi
c0002d22:	89 d7                	mov    edi,edx
c0002d24:	56                   	push   esi
c0002d25:	31 f6                	xor    esi,esi
c0002d27:	53                   	push   ebx
c0002d28:	83 ec 3c             	sub    esp,0x3c
c0002d2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d2f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002d31:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d39:	8b 00                	mov    eax,DWORD PTR [eax]
c0002d3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002d3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d42:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002d46:	e8 5e f4 ff ff       	call   c00021a9 <tchar2uni>
c0002d4b:	89 c3                	mov    ebx,eax
c0002d4d:	83 f8 ff             	cmp    eax,0xffffffff
c0002d50:	75 0a                	jne    c0002d5c <create_name+0x3c>
c0002d52:	b8 06 00 00 00       	mov    eax,0x6
c0002d57:	e9 93 02 00 00       	jmp    c0002fef <create_name+0x2cf>
c0002d5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002d61:	76 0c                	jbe    c0002d6f <create_name+0x4f>
c0002d63:	c1 e8 10             	shr    eax,0x10
c0002d66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6a:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002d6e:	46                   	inc    esi
c0002d6f:	0f b7 d3             	movzx  edx,bx
c0002d72:	83 fa 1f             	cmp    edx,0x1f
c0002d75:	76 4a                	jbe    c0002dc1 <create_name+0xa1>
c0002d77:	83 fa 5c             	cmp    edx,0x5c
c0002d7a:	74 30                	je     c0002dac <create_name+0x8c>
c0002d7c:	83 fa 2f             	cmp    edx,0x2f
c0002d7f:	74 2b                	je     c0002dac <create_name+0x8c>
c0002d81:	83 fa 7f             	cmp    edx,0x7f
c0002d84:	77 0e                	ja     c0002d94 <create_name+0x74>
c0002d86:	b8 1e f7 02 c0       	mov    eax,0xc002f71e
c0002d8b:	e8 02 f4 ff ff       	call   c0002192 <chk_chr>
c0002d90:	85 c0                	test   eax,eax
c0002d92:	75 be                	jne    c0002d52 <create_name+0x32>
c0002d94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002d9a:	77 b6                	ja     c0002d52 <create_name+0x32>
c0002d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002da0:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002da4:	46                   	inc    esi
c0002da5:	eb 9b                	jmp    c0002d42 <create_name+0x22>
c0002da7:	40                   	inc    eax
c0002da8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002dac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002db0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002db3:	83 fa 2f             	cmp    edx,0x2f
c0002db6:	74 ef                	je     c0002da7 <create_name+0x87>
c0002db8:	83 fa 5c             	cmp    edx,0x5c
c0002dbb:	74 ea                	je     c0002da7 <create_name+0x87>
c0002dbd:	31 db                	xor    ebx,ebx
c0002dbf:	eb 02                	jmp    c0002dc3 <create_name+0xa3>
c0002dc1:	b3 04                	mov    bl,0x4
c0002dc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002dc7:	89 07                	mov    DWORD PTR [edi],eax
c0002dc9:	85 f6                	test   esi,esi
c0002dcb:	74 16                	je     c0002de3 <create_name+0xc3>
c0002dcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dd1:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002dd6:	83 f8 20             	cmp    eax,0x20
c0002dd9:	74 05                	je     c0002de0 <create_name+0xc0>
c0002ddb:	83 f8 2e             	cmp    eax,0x2e
c0002dde:	75 03                	jne    c0002de3 <create_name+0xc3>
c0002de0:	4e                   	dec    esi
c0002de1:	eb e6                	jmp    c0002dc9 <create_name+0xa9>
c0002de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002de7:	31 ff                	xor    edi,edi
c0002de9:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002def:	85 f6                	test   esi,esi
c0002df1:	0f 84 5b ff ff ff    	je     c0002d52 <create_name+0x32>
c0002df7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002dfb:	8d 57 01             	lea    edx,[edi+0x1]
c0002dfe:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e02:	83 f8 20             	cmp    eax,0x20
c0002e05:	75 04                	jne    c0002e0b <create_name+0xeb>
c0002e07:	89 d7                	mov    edi,edx
c0002e09:	eb ec                	jmp    c0002df7 <create_name+0xd7>
c0002e0b:	85 ff                	test   edi,edi
c0002e0d:	75 05                	jne    c0002e14 <create_name+0xf4>
c0002e0f:	83 f8 2e             	cmp    eax,0x2e
c0002e12:	75 08                	jne    c0002e1c <create_name+0xfc>
c0002e14:	83 cb 03             	or     ebx,0x3
c0002e17:	eb 03                	jmp    c0002e1c <create_name+0xfc>
c0002e19:	4e                   	dec    esi
c0002e1a:	74 0c                	je     c0002e28 <create_name+0x108>
c0002e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e20:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002e26:	75 f1                	jne    c0002e19 <create_name+0xf9>
c0002e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e31:	83 c0 20             	add    eax,0x20
c0002e34:	ba 20 00 00 00       	mov    edx,0x20
c0002e39:	31 ed                	xor    ebp,ebp
c0002e3b:	e8 24 f3 ff ff       	call   c0002164 <mem_set>
c0002e40:	b9 08 00 00 00       	mov    ecx,0x8
c0002e45:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002e4a:	8d 47 01             	lea    eax,[edi+0x1]
c0002e4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002e51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002e55:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002e59:	89 c7                	mov    edi,eax
c0002e5b:	85 c0                	test   eax,eax
c0002e5d:	0f 84 25 01 00 00    	je     c0002f88 <create_name+0x268>
c0002e63:	83 f8 20             	cmp    eax,0x20
c0002e66:	74 0f                	je     c0002e77 <create_name+0x157>
c0002e68:	83 f8 2e             	cmp    eax,0x2e
c0002e6b:	75 13                	jne    c0002e80 <create_name+0x160>
c0002e6d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e71:	0f 84 6a 01 00 00    	je     c0002fe1 <create_name+0x2c1>
c0002e77:	83 cb 03             	or     ebx,0x3
c0002e7a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002e7e:	eb ca                	jmp    c0002e4a <create_name+0x12a>
c0002e80:	39 cd                	cmp    ebp,ecx
c0002e82:	73 0b                	jae    c0002e8f <create_name+0x16f>
c0002e84:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002e88:	75 3f                	jne    c0002ec9 <create_name+0x1a9>
c0002e8a:	e9 52 01 00 00       	jmp    c0002fe1 <create_name+0x2c1>
c0002e8f:	83 f9 0b             	cmp    ecx,0xb
c0002e92:	75 0d                	jne    c0002ea1 <create_name+0x181>
c0002e94:	83 cb 03             	or     ebx,0x3
c0002e97:	b9 0b 00 00 00       	mov    ecx,0xb
c0002e9c:	e9 e7 00 00 00       	jmp    c0002f88 <create_name+0x268>
c0002ea1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002ea5:	74 0d                	je     c0002eb4 <create_name+0x194>
c0002ea7:	83 cb 03             	or     ebx,0x3
c0002eaa:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002eae:	0f 87 d4 00 00 00    	ja     c0002f88 <create_name+0x268>
c0002eb4:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002eb9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002ebd:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ec2:	bd 08 00 00 00       	mov    ebp,0x8
c0002ec7:	eb b1                	jmp    c0002e7a <create_name+0x15a>
c0002ec9:	83 f8 7f             	cmp    eax,0x7f
c0002ecc:	76 66                	jbe    c0002f34 <create_name+0x214>
c0002ece:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ed2:	89 d9                	mov    ecx,ebx
c0002ed4:	83 c9 02             	or     ecx,0x2
c0002ed7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002edb:	52                   	push   edx
c0002edc:	52                   	push   edx
c0002edd:	68 b5 01 00 00       	push   0x1b5
c0002ee2:	50                   	push   eax
c0002ee3:	e8 b4 30 00 00       	call   c0005f9c <ff_uni2oem>
c0002ee8:	83 c4 10             	add    esp,0x10
c0002eeb:	89 c7                	mov    edi,eax
c0002eed:	a8 80                	test   al,0x80
c0002eef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ef3:	74 0c                	je     c0002f01 <create_name+0x1e1>
c0002ef5:	83 e7 7f             	and    edi,0x7f
c0002ef8:	0f b6 bf e0 f7 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0820]
c0002eff:	eb 2a                	jmp    c0002f2b <create_name+0x20b>
c0002f01:	0f b7 c0             	movzx  eax,ax
c0002f04:	3d ff 00 00 00       	cmp    eax,0xff
c0002f09:	76 20                	jbe    c0002f2b <create_name+0x20b>
c0002f0b:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002f0e:	39 ea                	cmp    edx,ebp
c0002f10:	77 0a                	ja     c0002f1c <create_name+0x1fc>
c0002f12:	83 cb 03             	or     ebx,0x3
c0002f15:	89 cd                	mov    ebp,ecx
c0002f17:	e9 5e ff ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002f20:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002f24:	45                   	inc    ebp
c0002f25:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f29:	eb 4d                	jmp    c0002f78 <create_name+0x258>
c0002f2b:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002f2f:	66 85 ff             	test   di,di
c0002f32:	74 19                	je     c0002f4d <create_name+0x22d>
c0002f34:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002f38:	0f b7 d7             	movzx  edx,di
c0002f3b:	b8 27 f7 02 c0       	mov    eax,0xc002f727
c0002f40:	e8 4d f2 ff ff       	call   c0002192 <chk_chr>
c0002f45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002f49:	85 c0                	test   eax,eax
c0002f4b:	74 0a                	je     c0002f57 <create_name+0x237>
c0002f4d:	83 cb 03             	or     ebx,0x3
c0002f50:	bf 5f 00 00 00       	mov    edi,0x5f
c0002f55:	eb 21                	jmp    c0002f78 <create_name+0x258>
c0002f57:	8d 47 bf             	lea    eax,[edi-0x41]
c0002f5a:	66 83 f8 19          	cmp    ax,0x19
c0002f5e:	77 07                	ja     c0002f67 <create_name+0x247>
c0002f60:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002f65:	eb 11                	jmp    c0002f78 <create_name+0x258>
c0002f67:	8d 47 9f             	lea    eax,[edi-0x61]
c0002f6a:	66 83 f8 19          	cmp    ax,0x19
c0002f6e:	77 08                	ja     c0002f78 <create_name+0x258>
c0002f70:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002f75:	83 ef 20             	sub    edi,0x20
c0002f78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002f7c:	89 f8                	mov    eax,edi
c0002f7e:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002f82:	45                   	inc    ebp
c0002f83:	e9 f2 fe ff ff       	jmp    c0002e7a <create_name+0x15a>
c0002f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f8c:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002f90:	75 04                	jne    c0002f96 <create_name+0x276>
c0002f92:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002f96:	83 f9 08             	cmp    ecx,0x8
c0002f99:	75 05                	jne    c0002fa0 <create_name+0x280>
c0002f9b:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fa4:	83 e0 0c             	and    eax,0xc
c0002fa7:	83 f8 0c             	cmp    eax,0xc
c0002faa:	74 0c                	je     c0002fb8 <create_name+0x298>
c0002fac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002fb0:	83 e0 03             	and    eax,0x3
c0002fb3:	83 f8 03             	cmp    eax,0x3
c0002fb6:	75 05                	jne    c0002fbd <create_name+0x29d>
c0002fb8:	83 cb 02             	or     ebx,0x2
c0002fbb:	eb 19                	jmp    c0002fd6 <create_name+0x2b6>
c0002fbd:	f6 c3 02             	test   bl,0x2
c0002fc0:	75 14                	jne    c0002fd6 <create_name+0x2b6>
c0002fc2:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002fc7:	74 03                	je     c0002fcc <create_name+0x2ac>
c0002fc9:	83 cb 10             	or     ebx,0x10
c0002fcc:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002fd1:	74 03                	je     c0002fd6 <create_name+0x2b6>
c0002fd3:	83 cb 08             	or     ebx,0x8
c0002fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002fda:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002fdd:	31 c0                	xor    eax,eax
c0002fdf:	eb 0e                	jmp    c0002fef <create_name+0x2cf>
c0002fe1:	83 f9 0b             	cmp    ecx,0xb
c0002fe4:	0f 85 ca fe ff ff    	jne    c0002eb4 <create_name+0x194>
c0002fea:	e9 a5 fe ff ff       	jmp    c0002e94 <create_name+0x174>
c0002fef:	83 c4 3c             	add    esp,0x3c
c0002ff2:	5b                   	pop    ebx
c0002ff3:	5e                   	pop    esi
c0002ff4:	5f                   	pop    edi
c0002ff5:	5d                   	pop    ebp
c0002ff6:	c3                   	ret    

c0002ff7 <cmp_lfn>:
c0002ff7:	55                   	push   ebp
c0002ff8:	57                   	push   edi
c0002ff9:	89 d7                	mov    edi,edx
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003004:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003007:	e8 17 f1 ff ff       	call   c0002123 <ld_word>
c000300c:	66 85 c0             	test   ax,ax
c000300f:	74 07                	je     c0003018 <cmp_lfn+0x21>
c0003011:	31 c0                	xor    eax,eax
c0003013:	e9 a1 00 00 00       	jmp    c00030b9 <cmp_lfn+0xc2>
c0003018:	8a 1f                	mov    bl,BYTE PTR [edi]
c000301a:	bd 01 00 00 00       	mov    ebp,0x1
c000301f:	83 e3 3f             	and    ebx,0x3f
c0003022:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000302a:	4b                   	dec    ebx
c000302b:	6b db 0d             	imul   ebx,ebx,0xd
c000302e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003032:	0f b6 80 60 f8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd07a0]
c0003039:	01 f8                	add    eax,edi
c000303b:	e8 e3 f0 ff ff       	call   c0002123 <ld_word>
c0003040:	66 85 ed             	test   bp,bp
c0003043:	89 c6                	mov    esi,eax
c0003045:	74 3c                	je     c0003083 <cmp_lfn+0x8c>
c0003047:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000304d:	77 c2                	ja     c0003011 <cmp_lfn+0x1a>
c000304f:	83 ec 0c             	sub    esp,0xc
c0003052:	0f b7 c0             	movzx  eax,ax
c0003055:	50                   	push   eax
c0003056:	e8 59 30 00 00       	call   c00060b4 <ff_wtoupper>
c000305b:	89 c5                	mov    ebp,eax
c000305d:	8d 43 01             	lea    eax,[ebx+0x1]
c0003060:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003064:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003068:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000306c:	89 04 24             	mov    DWORD PTR [esp],eax
c000306f:	e8 40 30 00 00       	call   c00060b4 <ff_wtoupper>
c0003074:	83 c4 10             	add    esp,0x10
c0003077:	39 c5                	cmp    ebp,eax
c0003079:	75 96                	jne    c0003011 <cmp_lfn+0x1a>
c000307b:	89 f5                	mov    ebp,esi
c000307d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003081:	eb 0b                	jmp    c000308e <cmp_lfn+0x97>
c0003083:	0f b7 c8             	movzx  ecx,ax
c0003086:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c000308c:	75 83                	jne    c0003011 <cmp_lfn+0x1a>
c000308e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003092:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003097:	75 95                	jne    c000302e <cmp_lfn+0x37>
c0003099:	f6 07 40             	test   BYTE PTR [edi],0x40
c000309c:	74 16                	je     c00030b4 <cmp_lfn+0xbd>
c000309e:	66 85 ed             	test   bp,bp
c00030a1:	74 11                	je     c00030b4 <cmp_lfn+0xbd>
c00030a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030a7:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00030ac:	0f 94 c0             	sete   al
c00030af:	0f b6 c0             	movzx  eax,al
c00030b2:	eb 05                	jmp    c00030b9 <cmp_lfn+0xc2>
c00030b4:	b8 01 00 00 00       	mov    eax,0x1
c00030b9:	83 c4 1c             	add    esp,0x1c
c00030bc:	5b                   	pop    ebx
c00030bd:	5e                   	pop    esi
c00030be:	5f                   	pop    edi
c00030bf:	5d                   	pop    ebp
c00030c0:	c3                   	ret    

c00030c1 <sync_fs>:
c00030c1:	56                   	push   esi
c00030c2:	53                   	push   ebx
c00030c3:	53                   	push   ebx
c00030c4:	89 c3                	mov    ebx,eax
c00030c6:	e8 5c f5 ff ff       	call   c0002627 <sync_window>
c00030cb:	85 c0                	test   eax,eax
c00030cd:	0f 85 9a 00 00 00    	jne    c000316d <sync_fs+0xac>
c00030d3:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00030d6:	75 7b                	jne    c0003153 <sync_fs+0x92>
c00030d8:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00030dc:	75 75                	jne    c0003153 <sync_fs+0x92>
c00030de:	b9 00 02 00 00       	mov    ecx,0x200
c00030e3:	8d 73 34             	lea    esi,[ebx+0x34]
c00030e6:	31 d2                	xor    edx,edx
c00030e8:	89 f0                	mov    eax,esi
c00030ea:	e8 75 f0 ff ff       	call   c0002164 <mem_set>
c00030ef:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00030f5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030fa:	e8 49 f0 ff ff       	call   c0002148 <st_word>
c00030ff:	ba 52 52 61 41       	mov    edx,0x41615252
c0003104:	89 f0                	mov    eax,esi
c0003106:	e8 41 f0 ff ff       	call   c000214c <st_dword>
c000310b:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0003111:	ba 72 72 41 61       	mov    edx,0x61417272
c0003116:	e8 31 f0 ff ff       	call   c000214c <st_dword>
c000311b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000311e:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0003124:	e8 23 f0 ff ff       	call   c000214c <st_dword>
c0003129:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000312c:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0003132:	e8 15 f0 ff ff       	call   c000214c <st_dword>
c0003137:	6a 01                	push   0x1
c0003139:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000313c:	40                   	inc    eax
c000313d:	50                   	push   eax
c000313e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003141:	56                   	push   esi
c0003142:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003146:	50                   	push   eax
c0003147:	e8 a2 ef ff ff       	call   c00020ee <disk_write>
c000314c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0003150:	83 c4 10             	add    esp,0x10
c0003153:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003157:	51                   	push   ecx
c0003158:	6a 00                	push   0x0
c000315a:	6a 00                	push   0x0
c000315c:	50                   	push   eax
c000315d:	e8 a2 ef ff ff       	call   c0002104 <disk_ioctl>
c0003162:	83 c4 10             	add    esp,0x10
c0003165:	85 c0                	test   eax,eax
c0003167:	0f 95 c0             	setne  al
c000316a:	0f b6 c0             	movzx  eax,al
c000316d:	5a                   	pop    edx
c000316e:	5b                   	pop    ebx
c000316f:	5e                   	pop    esi
c0003170:	c3                   	ret    

c0003171 <create_partition>:
c0003171:	55                   	push   ebp
c0003172:	0f b6 c0             	movzx  eax,al
c0003175:	57                   	push   edi
c0003176:	56                   	push   esi
c0003177:	53                   	push   ebx
c0003178:	83 ec 40             	sub    esp,0x40
c000317b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000317f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003183:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003187:	8d 44 24 30          	lea    eax,[esp+0x30]
c000318b:	50                   	push   eax
c000318c:	6a 01                	push   0x1
c000318e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003192:	e8 6d ef ff ff       	call   c0002104 <disk_ioctl>
c0003197:	83 c4 10             	add    esp,0x10
c000319a:	85 c0                	test   eax,eax
c000319c:	0f 85 6a 01 00 00    	jne    c000330c <create_partition+0x19b>
c00031a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00031a6:	b9 05 00 00 00       	mov    ecx,0x5
c00031ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00031af:	be 08 00 00 00       	mov    esi,0x8
c00031b4:	89 f0                	mov    eax,esi
c00031b6:	31 d2                	xor    edx,edx
c00031b8:	0f b6 d8             	movzx  ebx,al
c00031bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031bf:	f7 f3                	div    ebx
c00031c1:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00031c6:	76 0a                	jbe    c00031d2 <create_partition+0x61>
c00031c8:	d1 e6                	shl    esi,1
c00031ca:	49                   	dec    ecx
c00031cb:	75 e7                	jne    c00031b4 <create_partition+0x43>
c00031cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00031d2:	b9 00 02 00 00       	mov    ecx,0x200
c00031d7:	31 d2                	xor    edx,edx
c00031d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031dd:	e8 82 ef ff ff       	call   c0002164 <mem_set>
c00031e2:	b9 64 00 00 00       	mov    ecx,0x64
c00031e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00031eb:	31 d2                	xor    edx,edx
c00031ed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031f5:	f7 f1                	div    ecx
c00031f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00031fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003200:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003204:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c000320a:	89 f0                	mov    eax,esi
c000320c:	0f b6 c0             	movzx  eax,al
c000320f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003213:	85 c9                	test   ecx,ecx
c0003215:	75 34                	jne    c000324b <create_partition+0xda>
c0003217:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000321b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003220:	05 fe 01 00 00       	add    eax,0x1fe
c0003225:	e8 1e ef ff ff       	call   c0002148 <st_word>
c000322a:	6a 01                	push   0x1
c000322c:	6a 00                	push   0x0
c000322e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003236:	e8 b3 ee ff ff       	call   c00020ee <disk_write>
c000323b:	83 c4 10             	add    esp,0x10
c000323e:	85 c0                	test   eax,eax
c0003240:	0f 95 c0             	setne  al
c0003243:	0f b6 c0             	movzx  eax,al
c0003246:	e9 c6 00 00 00       	jmp    c0003311 <create_partition+0x1a0>
c000324b:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000324f:	76 c6                	jbe    c0003217 <create_partition+0xa6>
c0003251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003255:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003259:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c000325c:	83 fe 64             	cmp    esi,0x64
c000325f:	77 0d                	ja     c000326e <create_partition+0xfd>
c0003261:	74 07                	je     c000326a <create_partition+0xf9>
c0003263:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003268:	eb 04                	jmp    c000326e <create_partition+0xfd>
c000326a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000326e:	31 c0                	xor    eax,eax
c0003270:	89 f2                	mov    edx,esi
c0003272:	01 ca                	add    edx,ecx
c0003274:	0f 92 c0             	setb   al
c0003277:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c000327b:	77 04                	ja     c0003281 <create_partition+0x110>
c000327d:	85 c0                	test   eax,eax
c000327f:	74 08                	je     c0003289 <create_partition+0x118>
c0003281:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003285:	29 ce                	sub    esi,ecx
c0003287:	eb 04                	jmp    c000328d <create_partition+0x11c>
c0003289:	85 f6                	test   esi,esi
c000328b:	74 8a                	je     c0003217 <create_partition+0xa6>
c000328d:	89 ca                	mov    edx,ecx
c000328f:	89 d8                	mov    eax,ebx
c0003291:	bf 3f 00 00 00       	mov    edi,0x3f
c0003296:	e8 b1 ee ff ff       	call   c000214c <st_dword>
c000329b:	8d 43 04             	lea    eax,[ebx+0x4]
c000329e:	89 f2                	mov    edx,esi
c00032a0:	83 c3 10             	add    ebx,0x10
c00032a3:	e8 a4 ee ff ff       	call   c000214c <st_dword>
c00032a8:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00032ac:	31 d2                	xor    edx,edx
c00032ae:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c00032b1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00032b5:	89 c8                	mov    eax,ecx
c00032b7:	01 f1                	add    ecx,esi
c00032b9:	f7 f7                	div    edi
c00032bb:	89 d5                	mov    ebp,edx
c00032bd:	31 d2                	xor    edx,edx
c00032bf:	45                   	inc    ebp
c00032c0:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032c4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c00032c7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c00032ca:	89 c2                	mov    edx,eax
c00032cc:	8d 41 ff             	lea    eax,[ecx-0x1]
c00032cf:	c1 ea 02             	shr    edx,0x2
c00032d2:	83 e2 c0             	and    edx,0xffffffc0
c00032d5:	09 ea                	or     edx,ebp
c00032d7:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00032da:	31 d2                	xor    edx,edx
c00032dc:	f7 f7                	div    edi
c00032de:	89 d6                	mov    esi,edx
c00032e0:	31 d2                	xor    edx,edx
c00032e2:	46                   	inc    esi
c00032e3:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00032e7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00032ea:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00032ed:	89 c7                	mov    edi,eax
c00032ef:	c1 ef 02             	shr    edi,0x2
c00032f2:	83 e7 c0             	and    edi,0xffffffc0
c00032f5:	09 fe                	or     esi,edi
c00032f7:	89 f2                	mov    edx,esi
c00032f9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00032fc:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0003301:	0f 85 0c ff ff ff    	jne    c0003213 <create_partition+0xa2>
c0003307:	e9 0b ff ff ff       	jmp    c0003217 <create_partition+0xa6>
c000330c:	b8 01 00 00 00       	mov    eax,0x1
c0003311:	83 c4 3c             	add    esp,0x3c
c0003314:	5b                   	pop    ebx
c0003315:	5e                   	pop    esi
c0003316:	5f                   	pop    edi
c0003317:	5d                   	pop    ebp
c0003318:	c3                   	ret    

c0003319 <get_fileinfo>:
c0003319:	55                   	push   ebp
c000331a:	57                   	push   edi
c000331b:	56                   	push   esi
c000331c:	53                   	push   ebx
c000331d:	83 ec 1c             	sub    esp,0x1c
c0003320:	8b 30                	mov    esi,DWORD PTR [eax]
c0003322:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003326:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000332a:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c000332e:	0f 84 d3 01 00 00    	je     c0003507 <get_fileinfo+0x1ee>
c0003334:	89 d3                	mov    ebx,edx
c0003336:	89 c6                	mov    esi,eax
c0003338:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000333c:	74 72                	je     c00033b0 <get_fileinfo+0x97>
c000333e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003346:	31 ed                	xor    ebp,ebp
c0003348:	31 ff                	xor    edi,edi
c000334a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000334e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003352:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003355:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003359:	89 c2                	mov    edx,eax
c000335b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335f:	85 c0                	test   eax,eax
c0003361:	74 41                	je     c00033a4 <get_fileinfo+0x8b>
c0003363:	0f b7 c5             	movzx  eax,bp
c0003366:	85 c0                	test   eax,eax
c0003368:	75 0d                	jne    c0003377 <get_fileinfo+0x5e>
c000336a:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003370:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003375:	76 22                	jbe    c0003399 <get_fileinfo+0x80>
c0003377:	c1 e0 10             	shl    eax,0x10
c000337a:	b9 ff 00 00 00       	mov    ecx,0xff
c000337f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003383:	29 f9                	sub    ecx,edi
c0003385:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003389:	e8 f3 ee ff ff       	call   c0002281 <put_utf>
c000338e:	0f b6 c0             	movzx  eax,al
c0003391:	85 c0                	test   eax,eax
c0003393:	74 0d                	je     c00033a2 <get_fileinfo+0x89>
c0003395:	01 c7                	add    edi,eax
c0003397:	31 d2                	xor    edx,edx
c0003399:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000339e:	89 d5                	mov    ebp,edx
c00033a0:	eb a8                	jmp    c000334a <get_fileinfo+0x31>
c00033a2:	31 ff                	xor    edi,edi
c00033a4:	66 85 ed             	test   bp,bp
c00033a7:	74 02                	je     c00033ab <get_fileinfo+0x92>
c00033a9:	31 ff                	xor    edi,edi
c00033ab:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00033b0:	31 ff                	xor    edi,edi
c00033b2:	31 c9                	xor    ecx,ecx
c00033b4:	83 f9 0a             	cmp    ecx,0xa
c00033b7:	0f 87 ac 00 00 00    	ja     c0003469 <get_fileinfo+0x150>
c00033bd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00033c3:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00033c7:	89 c2                	mov    edx,eax
c00033c9:	83 f8 20             	cmp    eax,0x20
c00033cc:	0f 84 90 00 00 00    	je     c0003462 <get_fileinfo+0x149>
c00033d2:	83 f8 05             	cmp    eax,0x5
c00033d5:	75 05                	jne    c00033dc <get_fileinfo+0xc3>
c00033d7:	ba e5 00 00 00       	mov    edx,0xe5
c00033dc:	83 ff 0b             	cmp    edi,0xb
c00033df:	77 0b                	ja     c00033ec <get_fileinfo+0xd3>
c00033e1:	83 fd 09             	cmp    ebp,0x9
c00033e4:	75 06                	jne    c00033ec <get_fileinfo+0xd3>
c00033e6:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00033eb:	47                   	inc    edi
c00033ec:	0f b7 c2             	movzx  eax,dx
c00033ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033f3:	e8 ab ed ff ff       	call   c00021a3 <dbc_1st>
c00033f8:	85 c0                	test   eax,eax
c00033fa:	74 2f                	je     c000342b <get_fileinfo+0x112>
c00033fc:	83 fd 08             	cmp    ebp,0x8
c00033ff:	74 2a                	je     c000342b <get_fileinfo+0x112>
c0003401:	83 fd 0b             	cmp    ebp,0xb
c0003404:	74 25                	je     c000342b <get_fileinfo+0x112>
c0003406:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003409:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000340d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003411:	e8 90 ed ff ff       	call   c00021a6 <dbc_2nd>
c0003416:	85 c0                	test   eax,eax
c0003418:	74 11                	je     c000342b <get_fileinfo+0x112>
c000341a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000341e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0003423:	c1 e0 08             	shl    eax,0x8
c0003426:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003429:	09 c2                	or     edx,eax
c000342b:	0f b7 d2             	movzx  edx,dx
c000342e:	50                   	push   eax
c000342f:	50                   	push   eax
c0003430:	68 b5 01 00 00       	push   0x1b5
c0003435:	52                   	push   edx
c0003436:	e8 01 2c 00 00       	call   c000603c <ff_oem2uni>
c000343b:	83 c4 10             	add    esp,0x10
c000343e:	0f b7 c0             	movzx  eax,ax
c0003441:	85 c0                	test   eax,eax
c0003443:	75 04                	jne    c0003449 <get_fileinfo+0x130>
c0003445:	31 ff                	xor    edi,edi
c0003447:	eb 20                	jmp    c0003469 <get_fileinfo+0x150>
c0003449:	b9 0c 00 00 00       	mov    ecx,0xc
c000344e:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003452:	29 f9                	sub    ecx,edi
c0003454:	e8 28 ee ff ff       	call   c0002281 <put_utf>
c0003459:	0f b6 c0             	movzx  eax,al
c000345c:	85 c0                	test   eax,eax
c000345e:	74 e5                	je     c0003445 <get_fileinfo+0x12c>
c0003460:	01 c7                	add    edi,eax
c0003462:	89 e9                	mov    ecx,ebp
c0003464:	e9 4b ff ff ff       	jmp    c00033b4 <get_fileinfo+0x9b>
c0003469:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000346e:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003472:	75 5f                	jne    c00034d3 <get_fileinfo+0x1ba>
c0003474:	85 ff                	test   edi,edi
c0003476:	75 0b                	jne    c0003483 <get_fileinfo+0x16a>
c0003478:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000347c:	ba 01 00 00 00       	mov    edx,0x1
c0003481:	eb 3e                	jmp    c00034c1 <get_fileinfo+0x1a8>
c0003483:	bf 08 00 00 00       	mov    edi,0x8
c0003488:	31 d2                	xor    edx,edx
c000348a:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003490:	84 c0                	test   al,al
c0003492:	74 2d                	je     c00034c1 <get_fileinfo+0x1a8>
c0003494:	66 83 f8 2e          	cmp    ax,0x2e
c0003498:	74 1b                	je     c00034b5 <get_fileinfo+0x19c>
c000349a:	8d 48 bf             	lea    ecx,[eax-0x41]
c000349d:	66 83 f9 19          	cmp    cx,0x19
c00034a1:	77 17                	ja     c00034ba <get_fileinfo+0x1a1>
c00034a3:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00034a6:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00034a9:	21 f9                	and    ecx,edi
c00034ab:	80 e1 18             	and    cl,0x18
c00034ae:	74 0a                	je     c00034ba <get_fileinfo+0x1a1>
c00034b0:	83 c0 20             	add    eax,0x20
c00034b3:	eb 05                	jmp    c00034ba <get_fileinfo+0x1a1>
c00034b5:	bf 10 00 00 00       	mov    edi,0x10
c00034ba:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00034be:	42                   	inc    edx
c00034bf:	eb c9                	jmp    c000348a <get_fileinfo+0x171>
c00034c1:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00034c6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034c9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00034cd:	75 04                	jne    c00034d3 <get_fileinfo+0x1ba>
c00034cf:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00034d3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034d6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00034d9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00034dc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034df:	83 c0 1c             	add    eax,0x1c
c00034e2:	e8 49 ec ff ff       	call   c0002130 <ld_dword>
c00034e7:	89 03                	mov    DWORD PTR [ebx],eax
c00034e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034ec:	83 c0 16             	add    eax,0x16
c00034ef:	e8 2f ec ff ff       	call   c0002123 <ld_word>
c00034f4:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00034f8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00034fb:	83 c0 18             	add    eax,0x18
c00034fe:	e8 20 ec ff ff       	call   c0002123 <ld_word>
c0003503:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003507:	83 c4 1c             	add    esp,0x1c
c000350a:	5b                   	pop    ebx
c000350b:	5e                   	pop    esi
c000350c:	5f                   	pop    edi
c000350d:	5d                   	pop    ebp
c000350e:	c3                   	ret    

c000350f <ld_clust.isra.0>:
c000350f:	56                   	push   esi
c0003510:	89 c6                	mov    esi,eax
c0003512:	53                   	push   ebx
c0003513:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003516:	89 d3                	mov    ebx,edx
c0003518:	e8 06 ec ff ff       	call   c0002123 <ld_word>
c000351d:	0f b7 c8             	movzx  ecx,ax
c0003520:	89 f0                	mov    eax,esi
c0003522:	3c 03                	cmp    al,0x3
c0003524:	75 0d                	jne    c0003533 <ld_clust.isra.0+0x24>
c0003526:	8d 43 14             	lea    eax,[ebx+0x14]
c0003529:	e8 f5 eb ff ff       	call   c0002123 <ld_word>
c000352e:	c1 e0 10             	shl    eax,0x10
c0003531:	09 c1                	or     ecx,eax
c0003533:	89 c8                	mov    eax,ecx
c0003535:	5b                   	pop    ebx
c0003536:	5e                   	pop    esi
c0003537:	c3                   	ret    

c0003538 <st_clust.isra.1>:
c0003538:	56                   	push   esi
c0003539:	89 c6                	mov    esi,eax
c000353b:	53                   	push   ebx
c000353c:	89 d3                	mov    ebx,edx
c000353e:	0f b7 d1             	movzx  edx,cx
c0003541:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003544:	e8 ff eb ff ff       	call   c0002148 <st_word>
c0003549:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000354c:	75 0f                	jne    c000355d <st_clust.isra.1+0x25>
c000354e:	c1 e9 10             	shr    ecx,0x10
c0003551:	8d 43 14             	lea    eax,[ebx+0x14]
c0003554:	89 ca                	mov    edx,ecx
c0003556:	5b                   	pop    ebx
c0003557:	5e                   	pop    esi
c0003558:	e9 eb eb ff ff       	jmp    c0002148 <st_word>
c000355d:	5b                   	pop    ebx
c000355e:	5e                   	pop    esi
c000355f:	c3                   	ret    

c0003560 <get_fat.isra.2>:
c0003560:	b9 01 00 00 00       	mov    ecx,0x1
c0003565:	83 fa 01             	cmp    edx,0x1
c0003568:	0f 86 f3 00 00 00    	jbe    c0003661 <get_fat.isra.2+0x101>
c000356e:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003571:	0f 83 ea 00 00 00    	jae    c0003661 <get_fat.isra.2+0x101>
c0003577:	55                   	push   ebp
c0003578:	57                   	push   edi
c0003579:	89 c7                	mov    edi,eax
c000357b:	56                   	push   esi
c000357c:	89 d6                	mov    esi,edx
c000357e:	53                   	push   ebx
c000357f:	83 ec 0c             	sub    esp,0xc
c0003582:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003585:	83 f8 02             	cmp    eax,0x2
c0003588:	74 78                	je     c0003602 <get_fat.isra.2+0xa2>
c000358a:	83 f8 03             	cmp    eax,0x3
c000358d:	0f 84 96 00 00 00    	je     c0003629 <get_fat.isra.2+0xc9>
c0003593:	48                   	dec    eax
c0003594:	0f 85 bd 00 00 00    	jne    c0003657 <get_fat.isra.2+0xf7>
c000359a:	89 d3                	mov    ebx,edx
c000359c:	89 f8                	mov    eax,edi
c000359e:	d1 eb                	shr    ebx,1
c00035a0:	01 d3                	add    ebx,edx
c00035a2:	89 da                	mov    edx,ebx
c00035a4:	c1 ea 09             	shr    edx,0x9
c00035a7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035aa:	e8 db f0 ff ff       	call   c000268a <move_window>
c00035af:	85 c0                	test   eax,eax
c00035b1:	74 08                	je     c00035bb <get_fat.isra.2+0x5b>
c00035b3:	83 c9 ff             	or     ecx,0xffffffff
c00035b6:	e9 9c 00 00 00       	jmp    c0003657 <get_fat.isra.2+0xf7>
c00035bb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00035be:	89 f8                	mov    eax,edi
c00035c0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035c6:	89 ea                	mov    edx,ebp
c00035c8:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c00035cc:	c1 ea 09             	shr    edx,0x9
c00035cf:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00035d2:	e8 b3 f0 ff ff       	call   c000268a <move_window>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 d8                	jne    c00035b3 <get_fat.isra.2+0x53>
c00035db:	0f b6 c3             	movzx  eax,bl
c00035de:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00035e4:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00035e9:	c1 e3 08             	shl    ebx,0x8
c00035ec:	09 c3                	or     ebx,eax
c00035ee:	89 d9                	mov    ecx,ebx
c00035f0:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00035f6:	83 e6 01             	and    esi,0x1
c00035f9:	74 5c                	je     c0003657 <get_fat.isra.2+0xf7>
c00035fb:	89 d9                	mov    ecx,ebx
c00035fd:	c1 e9 04             	shr    ecx,0x4
c0003600:	eb 55                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003602:	c1 ea 08             	shr    edx,0x8
c0003605:	89 f8                	mov    eax,edi
c0003607:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000360a:	e8 7b f0 ff ff       	call   c000268a <move_window>
c000360f:	85 c0                	test   eax,eax
c0003611:	75 a0                	jne    c00035b3 <get_fat.isra.2+0x53>
c0003613:	01 f6                	add    esi,esi
c0003615:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000361b:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000361f:	e8 ff ea ff ff       	call   c0002123 <ld_word>
c0003624:	0f b7 c8             	movzx  ecx,ax
c0003627:	eb 2e                	jmp    c0003657 <get_fat.isra.2+0xf7>
c0003629:	c1 ea 07             	shr    edx,0x7
c000362c:	89 f8                	mov    eax,edi
c000362e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003631:	e8 54 f0 ff ff       	call   c000268a <move_window>
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 75 ff ff ff    	jne    c00035b3 <get_fat.isra.2+0x53>
c000363e:	c1 e6 02             	shl    esi,0x2
c0003641:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003647:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000364b:	e8 e0 ea ff ff       	call   c0002130 <ld_dword>
c0003650:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003655:	89 c1                	mov    ecx,eax
c0003657:	83 c4 0c             	add    esp,0xc
c000365a:	89 c8                	mov    eax,ecx
c000365c:	5b                   	pop    ebx
c000365d:	5e                   	pop    esi
c000365e:	5f                   	pop    edi
c000365f:	5d                   	pop    ebp
c0003660:	c3                   	ret    
c0003661:	89 c8                	mov    eax,ecx
c0003663:	c3                   	ret    

c0003664 <dir_sdi>:
c0003664:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000366a:	0f 87 b6 00 00 00    	ja     c0003726 <dir_sdi+0xc2>
c0003670:	55                   	push   ebp
c0003671:	57                   	push   edi
c0003672:	56                   	push   esi
c0003673:	53                   	push   ebx
c0003674:	89 d3                	mov    ebx,edx
c0003676:	83 ec 1c             	sub    esp,0x1c
c0003679:	f6 c2 1f             	test   dl,0x1f
c000367c:	74 0a                	je     c0003688 <dir_sdi+0x24>
c000367e:	b8 02 00 00 00       	mov    eax,0x2
c0003683:	e9 96 00 00 00       	jmp    c000371e <dir_sdi+0xba>
c0003688:	89 c6                	mov    esi,eax
c000368a:	8b 38                	mov    edi,DWORD PTR [eax]
c000368c:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000368f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003692:	85 c9                	test   ecx,ecx
c0003694:	75 23                	jne    c00036b9 <dir_sdi+0x55>
c0003696:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003699:	76 07                	jbe    c00036a2 <dir_sdi+0x3e>
c000369b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000369e:	85 c0                	test   eax,eax
c00036a0:	75 15                	jne    c00036b7 <dir_sdi+0x53>
c00036a2:	89 da                	mov    edx,ebx
c00036a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00036a8:	c1 ea 05             	shr    edx,0x5
c00036ab:	39 c2                	cmp    edx,eax
c00036ad:	73 cf                	jae    c000367e <dir_sdi+0x1a>
c00036af:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c00036b2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036b5:	eb 3d                	jmp    c00036f4 <dir_sdi+0x90>
c00036b7:	89 c1                	mov    ecx,eax
c00036b9:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00036bd:	c1 e5 09             	shl    ebp,0x9
c00036c0:	89 ca                	mov    edx,ecx
c00036c2:	39 eb                	cmp    ebx,ebp
c00036c4:	72 1c                	jb     c00036e2 <dir_sdi+0x7e>
c00036c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00036c8:	e8 93 fe ff ff       	call   c0003560 <get_fat.isra.2>
c00036cd:	89 c1                	mov    ecx,eax
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	74 45                	je     c0003719 <dir_sdi+0xb5>
c00036d4:	83 f8 01             	cmp    eax,0x1
c00036d7:	76 a5                	jbe    c000367e <dir_sdi+0x1a>
c00036d9:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00036dc:	76 a0                	jbe    c000367e <dir_sdi+0x1a>
c00036de:	29 eb                	sub    ebx,ebp
c00036e0:	eb de                	jmp    c00036c0 <dir_sdi+0x5c>
c00036e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036e6:	89 f8                	mov    eax,edi
c00036e8:	e8 8d ec ff ff       	call   c000237a <clst2sect>
c00036ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036f1:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00036f4:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00036f7:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00036fa:	85 d2                	test   edx,edx
c00036fc:	74 80                	je     c000367e <dir_sdi+0x1a>
c00036fe:	89 d8                	mov    eax,ebx
c0003700:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003706:	c1 e8 09             	shr    eax,0x9
c0003709:	01 d0                	add    eax,edx
c000370b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000370e:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c0003712:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003715:	31 c0                	xor    eax,eax
c0003717:	eb 05                	jmp    c000371e <dir_sdi+0xba>
c0003719:	b8 01 00 00 00       	mov    eax,0x1
c000371e:	83 c4 1c             	add    esp,0x1c
c0003721:	5b                   	pop    ebx
c0003722:	5e                   	pop    esi
c0003723:	5f                   	pop    edi
c0003724:	5d                   	pop    ebp
c0003725:	c3                   	ret    
c0003726:	b8 02 00 00 00       	mov    eax,0x2
c000372b:	c3                   	ret    

c000372c <create_chain>:
c000372c:	55                   	push   ebp
c000372d:	89 c5                	mov    ebp,eax
c000372f:	57                   	push   edi
c0003730:	89 d7                	mov    edi,edx
c0003732:	56                   	push   esi
c0003733:	53                   	push   ebx
c0003734:	83 ec 1c             	sub    esp,0x1c
c0003737:	85 d2                	test   edx,edx
c0003739:	8b 30                	mov    esi,DWORD PTR [eax]
c000373b:	75 0e                	jne    c000374b <create_chain+0x1f>
c000373d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003740:	85 c9                	test   ecx,ecx
c0003742:	74 34                	je     c0003778 <create_chain+0x4c>
c0003744:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003747:	77 34                	ja     c000377d <create_chain+0x51>
c0003749:	eb 2d                	jmp    c0003778 <create_chain+0x4c>
c000374b:	89 f0                	mov    eax,esi
c000374d:	e8 0e fe ff ff       	call   c0003560 <get_fat.isra.2>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	83 f8 01             	cmp    eax,0x1
c0003757:	77 0a                	ja     c0003763 <create_chain+0x37>
c0003759:	bb 01 00 00 00       	mov    ebx,0x1
c000375e:	e9 fe 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003763:	83 f8 ff             	cmp    eax,0xffffffff
c0003766:	0f 84 f2 00 00 00    	je     c000385e <create_chain+0x132>
c000376c:	89 f9                	mov    ecx,edi
c000376e:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003771:	76 0a                	jbe    c000377d <create_chain+0x51>
c0003773:	e9 e9 00 00 00       	jmp    c0003861 <create_chain+0x135>
c0003778:	b9 01 00 00 00       	mov    ecx,0x1
c000377d:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003781:	75 07                	jne    c000378a <create_chain+0x5e>
c0003783:	31 db                	xor    ebx,ebx
c0003785:	e9 d7 00 00 00       	jmp    c0003861 <create_chain+0x135>
c000378a:	39 f9                	cmp    ecx,edi
c000378c:	75 46                	jne    c00037d4 <create_chain+0xa8>
c000378e:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003791:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003794:	77 05                	ja     c000379b <create_chain+0x6f>
c0003796:	bb 02 00 00 00       	mov    ebx,0x2
c000379b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000379f:	89 da                	mov    edx,ebx
c00037a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037a4:	e8 b7 fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037a9:	83 f8 01             	cmp    eax,0x1
c00037ac:	74 ab                	je     c0003759 <create_chain+0x2d>
c00037ae:	83 f8 ff             	cmp    eax,0xffffffff
c00037b1:	0f 84 a7 00 00 00    	je     c000385e <create_chain+0x132>
c00037b7:	85 c0                	test   eax,eax
c00037b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00037bd:	74 11                	je     c00037d0 <create_chain+0xa4>
c00037bf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00037c2:	83 f8 01             	cmp    eax,0x1
c00037c5:	76 0d                	jbe    c00037d4 <create_chain+0xa8>
c00037c7:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c00037ca:	73 08                	jae    c00037d4 <create_chain+0xa8>
c00037cc:	89 c1                	mov    ecx,eax
c00037ce:	eb 04                	jmp    c00037d4 <create_chain+0xa8>
c00037d0:	85 db                	test   ebx,ebx
c00037d2:	75 3d                	jne    c0003811 <create_chain+0xe5>
c00037d4:	89 cb                	mov    ebx,ecx
c00037d6:	43                   	inc    ebx
c00037d7:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00037da:	77 0a                	ja     c00037e6 <create_chain+0xba>
c00037dc:	83 f9 01             	cmp    ecx,0x1
c00037df:	76 a2                	jbe    c0003783 <create_chain+0x57>
c00037e1:	bb 02 00 00 00       	mov    ebx,0x2
c00037e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00037ea:	89 da                	mov    edx,ebx
c00037ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00037ef:	e8 6c fd ff ff       	call   c0003560 <get_fat.isra.2>
c00037f4:	85 c0                	test   eax,eax
c00037f6:	74 19                	je     c0003811 <create_chain+0xe5>
c00037f8:	83 f8 01             	cmp    eax,0x1
c00037fb:	0f 84 58 ff ff ff    	je     c0003759 <create_chain+0x2d>
c0003801:	40                   	inc    eax
c0003802:	74 5a                	je     c000385e <create_chain+0x132>
c0003804:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003808:	39 cb                	cmp    ebx,ecx
c000380a:	75 ca                	jne    c00037d6 <create_chain+0xaa>
c000380c:	e9 72 ff ff ff       	jmp    c0003783 <create_chain+0x57>
c0003811:	83 c9 ff             	or     ecx,0xffffffff
c0003814:	89 da                	mov    edx,ebx
c0003816:	89 f0                	mov    eax,esi
c0003818:	e8 b1 f2 ff ff       	call   c0002ace <put_fat>
c000381d:	85 c0                	test   eax,eax
c000381f:	75 36                	jne    c0003857 <create_chain+0x12b>
c0003821:	85 ff                	test   edi,edi
c0003823:	75 16                	jne    c000383b <create_chain+0x10f>
c0003825:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003828:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c000382b:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c000382e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003831:	39 d0                	cmp    eax,edx
c0003833:	77 17                	ja     c000384c <create_chain+0x120>
c0003835:	48                   	dec    eax
c0003836:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003839:	eb 11                	jmp    c000384c <create_chain+0x120>
c000383b:	89 d9                	mov    ecx,ebx
c000383d:	89 fa                	mov    edx,edi
c000383f:	89 f0                	mov    eax,esi
c0003841:	e8 88 f2 ff ff       	call   c0002ace <put_fat>
c0003846:	85 c0                	test   eax,eax
c0003848:	74 db                	je     c0003825 <create_chain+0xf9>
c000384a:	eb 0b                	jmp    c0003857 <create_chain+0x12b>
c000384c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c000384f:	83 c8 01             	or     eax,0x1
c0003852:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003855:	eb 0a                	jmp    c0003861 <create_chain+0x135>
c0003857:	48                   	dec    eax
c0003858:	0f 85 fb fe ff ff    	jne    c0003759 <create_chain+0x2d>
c000385e:	83 cb ff             	or     ebx,0xffffffff
c0003861:	83 c4 1c             	add    esp,0x1c
c0003864:	89 d8                	mov    eax,ebx
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <remove_chain>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 d6                	mov    esi,edx
c0003870:	53                   	push   ebx
c0003871:	83 ec 0c             	sub    esp,0xc
c0003874:	83 fa 01             	cmp    edx,0x1
c0003877:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003879:	76 6a                	jbe    c00038e5 <remove_chain+0x7a>
c000387b:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000387e:	76 65                	jbe    c00038e5 <remove_chain+0x7a>
c0003880:	89 c5                	mov    ebp,eax
c0003882:	89 ca                	mov    edx,ecx
c0003884:	85 c9                	test   ecx,ecx
c0003886:	74 0e                	je     c0003896 <remove_chain+0x2b>
c0003888:	83 c9 ff             	or     ecx,0xffffffff
c000388b:	89 d8                	mov    eax,ebx
c000388d:	e8 3c f2 ff ff       	call   c0002ace <put_fat>
c0003892:	85 c0                	test   eax,eax
c0003894:	75 5b                	jne    c00038f1 <remove_chain+0x86>
c0003896:	89 f2                	mov    edx,esi
c0003898:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000389b:	e8 c0 fc ff ff       	call   c0003560 <get_fat.isra.2>
c00038a0:	89 c7                	mov    edi,eax
c00038a2:	85 c0                	test   eax,eax
c00038a4:	75 04                	jne    c00038aa <remove_chain+0x3f>
c00038a6:	31 c0                	xor    eax,eax
c00038a8:	eb 47                	jmp    c00038f1 <remove_chain+0x86>
c00038aa:	83 f8 01             	cmp    eax,0x1
c00038ad:	74 36                	je     c00038e5 <remove_chain+0x7a>
c00038af:	83 f8 ff             	cmp    eax,0xffffffff
c00038b2:	74 38                	je     c00038ec <remove_chain+0x81>
c00038b4:	31 c9                	xor    ecx,ecx
c00038b6:	89 f2                	mov    edx,esi
c00038b8:	89 d8                	mov    eax,ebx
c00038ba:	e8 0f f2 ff ff       	call   c0002ace <put_fat>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2e                	jne    c00038f1 <remove_chain+0x86>
c00038c3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00038c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c9:	8d 4a fe             	lea    ecx,[edx-0x2]
c00038cc:	39 c8                	cmp    eax,ecx
c00038ce:	73 0d                	jae    c00038dd <remove_chain+0x72>
c00038d0:	40                   	inc    eax
c00038d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00038d4:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00038d7:	83 c8 01             	or     eax,0x1
c00038da:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00038dd:	89 fe                	mov    esi,edi
c00038df:	39 fa                	cmp    edx,edi
c00038e1:	77 b3                	ja     c0003896 <remove_chain+0x2b>
c00038e3:	eb c1                	jmp    c00038a6 <remove_chain+0x3b>
c00038e5:	b8 02 00 00 00       	mov    eax,0x2
c00038ea:	eb 05                	jmp    c00038f1 <remove_chain+0x86>
c00038ec:	b8 01 00 00 00       	mov    eax,0x1
c00038f1:	83 c4 0c             	add    esp,0xc
c00038f4:	5b                   	pop    ebx
c00038f5:	5e                   	pop    esi
c00038f6:	5f                   	pop    edi
c00038f7:	5d                   	pop    ebp
c00038f8:	c3                   	ret    

c00038f9 <dir_next>:
c00038f9:	55                   	push   ebp
c00038fa:	57                   	push   edi
c00038fb:	56                   	push   esi
c00038fc:	53                   	push   ebx
c00038fd:	83 ec 1c             	sub    esp,0x1c
c0003900:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003903:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003905:	83 c7 20             	add    edi,0x20
c0003908:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c000390e:	76 07                	jbe    c0003917 <dir_next+0x1e>
c0003910:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003917:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000391a:	b9 04 00 00 00       	mov    ecx,0x4
c000391f:	85 f6                	test   esi,esi
c0003921:	0f 84 cd 00 00 00    	je     c00039f4 <dir_next+0xfb>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	89 d1                	mov    ecx,edx
c000392b:	89 f8                	mov    eax,edi
c000392d:	25 ff 01 00 00       	and    eax,0x1ff
c0003932:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003936:	0f 85 a8 00 00 00    	jne    c00039e4 <dir_next+0xeb>
c000393c:	46                   	inc    esi
c000393d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003940:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003943:	85 d2                	test   edx,edx
c0003945:	75 22                	jne    c0003969 <dir_next+0x70>
c0003947:	89 fa                	mov    edx,edi
c0003949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000394d:	c1 ea 05             	shr    edx,0x5
c0003950:	39 c2                	cmp    edx,eax
c0003952:	0f 82 8c 00 00 00    	jb     c00039e4 <dir_next+0xeb>
c0003958:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000395f:	b9 04 00 00 00       	mov    ecx,0x4
c0003964:	e9 8b 00 00 00       	jmp    c00039f4 <dir_next+0xfb>
c0003969:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000396d:	89 fe                	mov    esi,edi
c000396f:	48                   	dec    eax
c0003970:	c1 ee 09             	shr    esi,0x9
c0003973:	85 f0                	test   eax,esi
c0003975:	75 6d                	jne    c00039e4 <dir_next+0xeb>
c0003977:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000397b:	89 e8                	mov    eax,ebp
c000397d:	e8 de fb ff ff       	call   c0003560 <get_fat.isra.2>
c0003982:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003986:	89 c6                	mov    esi,eax
c0003988:	83 f8 01             	cmp    eax,0x1
c000398b:	77 07                	ja     c0003994 <dir_next+0x9b>
c000398d:	b9 02 00 00 00       	mov    ecx,0x2
c0003992:	eb 60                	jmp    c00039f4 <dir_next+0xfb>
c0003994:	83 f8 ff             	cmp    eax,0xffffffff
c0003997:	75 07                	jne    c00039a0 <dir_next+0xa7>
c0003999:	b9 01 00 00 00       	mov    ecx,0x1
c000399e:	eb 54                	jmp    c00039f4 <dir_next+0xfb>
c00039a0:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00039a3:	77 30                	ja     c00039d5 <dir_next+0xdc>
c00039a5:	85 c9                	test   ecx,ecx
c00039a7:	74 af                	je     c0003958 <dir_next+0x5f>
c00039a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	e8 79 fd ff ff       	call   c000372c <create_chain>
c00039b3:	b9 07 00 00 00       	mov    ecx,0x7
c00039b8:	89 c6                	mov    esi,eax
c00039ba:	85 c0                	test   eax,eax
c00039bc:	74 36                	je     c00039f4 <dir_next+0xfb>
c00039be:	83 f8 01             	cmp    eax,0x1
c00039c1:	74 ca                	je     c000398d <dir_next+0x94>
c00039c3:	83 f8 ff             	cmp    eax,0xffffffff
c00039c6:	74 d1                	je     c0003999 <dir_next+0xa0>
c00039c8:	89 c2                	mov    edx,eax
c00039ca:	89 e8                	mov    eax,ebp
c00039cc:	e8 54 f2 ff ff       	call   c0002c25 <dir_clear>
c00039d1:	85 c0                	test   eax,eax
c00039d3:	75 c4                	jne    c0003999 <dir_next+0xa0>
c00039d5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00039d8:	89 f2                	mov    edx,esi
c00039da:	89 e8                	mov    eax,ebp
c00039dc:	e8 99 e9 ff ff       	call   c000237a <clst2sect>
c00039e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00039e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00039e8:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00039eb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00039ef:	31 c9                	xor    ecx,ecx
c00039f1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00039f4:	83 c4 1c             	add    esp,0x1c
c00039f7:	89 c8                	mov    eax,ecx
c00039f9:	5b                   	pop    ebx
c00039fa:	5e                   	pop    esi
c00039fb:	5f                   	pop    edi
c00039fc:	5d                   	pop    ebp
c00039fd:	c3                   	ret    

c00039fe <dir_alloc>:
c00039fe:	55                   	push   ebp
c00039ff:	89 c5                	mov    ebp,eax
c0003a01:	57                   	push   edi
c0003a02:	89 d7                	mov    edi,edx
c0003a04:	56                   	push   esi
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	53                   	push   ebx
c0003a08:	83 ec 0c             	sub    esp,0xc
c0003a0b:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a0d:	e8 52 fc ff ff       	call   c0003664 <dir_sdi>
c0003a12:	85 c0                	test   eax,eax
c0003a14:	75 3b                	jne    c0003a51 <dir_alloc+0x53>
c0003a16:	31 db                	xor    ebx,ebx
c0003a18:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003a1b:	89 f0                	mov    eax,esi
c0003a1d:	e8 68 ec ff ff       	call   c000268a <move_window>
c0003a22:	85 c0                	test   eax,eax
c0003a24:	75 2b                	jne    c0003a51 <dir_alloc+0x53>
c0003a26:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003a29:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003a2c:	85 d2                	test   edx,edx
c0003a2e:	74 08                	je     c0003a38 <dir_alloc+0x3a>
c0003a30:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a36:	75 07                	jne    c0003a3f <dir_alloc+0x41>
c0003a38:	43                   	inc    ebx
c0003a39:	39 fb                	cmp    ebx,edi
c0003a3b:	75 04                	jne    c0003a41 <dir_alloc+0x43>
c0003a3d:	eb 1c                	jmp    c0003a5b <dir_alloc+0x5d>
c0003a3f:	31 db                	xor    ebx,ebx
c0003a41:	ba 01 00 00 00       	mov    edx,0x1
c0003a46:	89 e8                	mov    eax,ebp
c0003a48:	e8 ac fe ff ff       	call   c00038f9 <dir_next>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	74 c7                	je     c0003a18 <dir_alloc+0x1a>
c0003a51:	83 f8 04             	cmp    eax,0x4
c0003a54:	75 05                	jne    c0003a5b <dir_alloc+0x5d>
c0003a56:	b8 07 00 00 00       	mov    eax,0x7
c0003a5b:	83 c4 0c             	add    esp,0xc
c0003a5e:	5b                   	pop    ebx
c0003a5f:	5e                   	pop    esi
c0003a60:	5f                   	pop    edi
c0003a61:	5d                   	pop    ebp
c0003a62:	c3                   	ret    

c0003a63 <dir_read>:
c0003a63:	55                   	push   ebp
c0003a64:	57                   	push   edi
c0003a65:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a6a:	56                   	push   esi
c0003a6b:	be 04 00 00 00       	mov    esi,0x4
c0003a70:	53                   	push   ebx
c0003a71:	89 c3                	mov    ebx,eax
c0003a73:	83 ec 1c             	sub    esp,0x1c
c0003a76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a7a:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003a7c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a81:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a84:	85 d2                	test   edx,edx
c0003a86:	0f 84 e3 00 00 00    	je     c0003b6f <dir_read+0x10c>
c0003a8c:	89 e8                	mov    eax,ebp
c0003a8e:	e8 f7 eb ff ff       	call   c000268a <move_window>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 dd 00 00 00    	jne    c0003b7a <dir_read+0x117>
c0003a9d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa0:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003aa3:	88 04 24             	mov    BYTE PTR [esp],al
c0003aa6:	85 c0                	test   eax,eax
c0003aa8:	0f 84 c7 00 00 00    	je     c0003b75 <dir_read+0x112>
c0003aae:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003ab1:	83 e1 3f             	and    ecx,0x3f
c0003ab4:	83 f8 2e             	cmp    eax,0x2e
c0003ab7:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003aba:	0f 84 95 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003ac0:	3d e5 00 00 00       	cmp    eax,0xe5
c0003ac5:	0f 84 8a 00 00 00    	je     c0003b55 <dir_read+0xf2>
c0003acb:	0f b6 c9             	movzx  ecx,cl
c0003ace:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003ad2:	83 e1 df             	and    ecx,0xffffffdf
c0003ad5:	83 f9 08             	cmp    ecx,0x8
c0003ad8:	0f 94 c1             	sete   cl
c0003adb:	0f b6 c9             	movzx  ecx,cl
c0003ade:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003ae2:	75 71                	jne    c0003b55 <dir_read+0xf2>
c0003ae4:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003ae9:	75 4a                	jne    c0003b35 <dir_read+0xd2>
c0003aeb:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003aef:	74 16                	je     c0003b07 <dir_read+0xa4>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003afb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003aff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b02:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b05:	eb 0e                	jmp    c0003b15 <dir_read+0xb2>
c0003b07:	89 f9                	mov    ecx,edi
c0003b09:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b0e:	0f b6 c9             	movzx  ecx,cl
c0003b11:	39 c1                	cmp    ecx,eax
c0003b13:	75 45                	jne    c0003b5a <dir_read+0xf7>
c0003b15:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b19:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b1e:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003b21:	75 37                	jne    c0003b5a <dir_read+0xf7>
c0003b23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003b26:	e8 6c e8 ff ff       	call   c0002397 <pick_lfn>
c0003b2b:	85 c0                	test   eax,eax
c0003b2d:	74 2b                	je     c0003b5a <dir_read+0xf7>
c0003b2f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003b32:	4f                   	dec    edi
c0003b33:	eb 25                	jmp    c0003b5a <dir_read+0xf7>
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	84 c0                	test   al,al
c0003b39:	75 11                	jne    c0003b4c <dir_read+0xe9>
c0003b3b:	89 d0                	mov    eax,edx
c0003b3d:	e8 32 ea ff ff       	call   c0002574 <sum_sfn>
c0003b42:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b46:	75 04                	jne    c0003b4c <dir_read+0xe9>
c0003b48:	31 f6                	xor    esi,esi
c0003b4a:	eb 35                	jmp    c0003b81 <dir_read+0x11e>
c0003b4c:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b53:	eb 2c                	jmp    c0003b81 <dir_read+0x11e>
c0003b55:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b5a:	31 d2                	xor    edx,edx
c0003b5c:	89 d8                	mov    eax,ebx
c0003b5e:	e8 96 fd ff ff       	call   c00038f9 <dir_next>
c0003b63:	89 c6                	mov    esi,eax
c0003b65:	85 c0                	test   eax,eax
c0003b67:	0f 84 14 ff ff ff    	je     c0003a81 <dir_read+0x1e>
c0003b6d:	eb 0b                	jmp    c0003b7a <dir_read+0x117>
c0003b6f:	85 f6                	test   esi,esi
c0003b71:	74 d5                	je     c0003b48 <dir_read+0xe5>
c0003b73:	eb 05                	jmp    c0003b7a <dir_read+0x117>
c0003b75:	be 04 00 00 00       	mov    esi,0x4
c0003b7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003b81:	83 c4 1c             	add    esp,0x1c
c0003b84:	89 f0                	mov    eax,esi
c0003b86:	5b                   	pop    ebx
c0003b87:	5e                   	pop    esi
c0003b88:	5f                   	pop    edi
c0003b89:	5d                   	pop    ebp
c0003b8a:	c3                   	ret    

c0003b8b <dir_remove>:
c0003b8b:	57                   	push   edi
c0003b8c:	56                   	push   esi
c0003b8d:	53                   	push   ebx
c0003b8e:	89 c3                	mov    ebx,eax
c0003b90:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003b93:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b95:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003b98:	83 fa ff             	cmp    edx,0xffffffff
c0003b9b:	74 09                	je     c0003ba6 <dir_remove+0x1b>
c0003b9d:	e8 c2 fa ff ff       	call   c0003664 <dir_sdi>
c0003ba2:	85 c0                	test   eax,eax
c0003ba4:	75 34                	jne    c0003bda <dir_remove+0x4f>
c0003ba6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ba9:	89 f0                	mov    eax,esi
c0003bab:	e8 da ea ff ff       	call   c000268a <move_window>
c0003bb0:	85 c0                	test   eax,eax
c0003bb2:	75 1c                	jne    c0003bd0 <dir_remove+0x45>
c0003bb4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bb7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003bba:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003bbe:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003bc1:	73 17                	jae    c0003bda <dir_remove+0x4f>
c0003bc3:	31 d2                	xor    edx,edx
c0003bc5:	89 d8                	mov    eax,ebx
c0003bc7:	e8 2d fd ff ff       	call   c00038f9 <dir_next>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	74 d6                	je     c0003ba6 <dir_remove+0x1b>
c0003bd0:	83 f8 04             	cmp    eax,0x4
c0003bd3:	75 05                	jne    c0003bda <dir_remove+0x4f>
c0003bd5:	b8 02 00 00 00       	mov    eax,0x2
c0003bda:	5b                   	pop    ebx
c0003bdb:	5e                   	pop    esi
c0003bdc:	5f                   	pop    edi
c0003bdd:	c3                   	ret    

c0003bde <dir_find>:
c0003bde:	55                   	push   ebp
c0003bdf:	31 d2                	xor    edx,edx
c0003be1:	57                   	push   edi
c0003be2:	56                   	push   esi
c0003be3:	53                   	push   ebx
c0003be4:	89 c3                	mov    ebx,eax
c0003be6:	83 ec 1c             	sub    esp,0x1c
c0003be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	89 d8                	mov    eax,ebx
c0003bf1:	e8 6e fa ff ff       	call   c0003664 <dir_sdi>
c0003bf6:	89 c6                	mov    esi,eax
c0003bf8:	85 c0                	test   eax,eax
c0003bfa:	0f 85 1d 01 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c00:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003c07:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003c0c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c11:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c18:	e8 6d ea ff ff       	call   c000268a <move_window>
c0003c1d:	89 c6                	mov    esi,eax
c0003c1f:	85 c0                	test   eax,eax
c0003c21:	0f 85 f6 00 00 00    	jne    c0003d1d <dir_find+0x13f>
c0003c27:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003c2a:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003c2e:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003c32:	85 c9                	test   ecx,ecx
c0003c34:	0f 84 de 00 00 00    	je     c0003d18 <dir_find+0x13a>
c0003c3a:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003c3d:	89 d0                	mov    eax,edx
c0003c3f:	83 e0 3f             	and    eax,0x3f
c0003c42:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003c48:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003c4b:	0f 84 a6 00 00 00    	je     c0003cf7 <dir_find+0x119>
c0003c51:	80 e2 08             	and    dl,0x8
c0003c54:	0f b6 c0             	movzx  eax,al
c0003c57:	74 0b                	je     c0003c64 <dir_find+0x86>
c0003c59:	83 f8 0f             	cmp    eax,0xf
c0003c5c:	0f 85 95 00 00 00    	jne    c0003cf7 <dir_find+0x119>
c0003c62:	eb 05                	jmp    c0003c69 <dir_find+0x8b>
c0003c64:	83 f8 0f             	cmp    eax,0xf
c0003c67:	75 62                	jne    c0003ccb <dir_find+0xed>
c0003c69:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003c6d:	0f 85 90 00 00 00    	jne    c0003d03 <dir_find+0x125>
c0003c73:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003c78:	74 17                	je     c0003c91 <dir_find+0xb3>
c0003c7a:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003c7d:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003c85:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003c89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003c8f:	eb 13                	jmp    c0003ca4 <dir_find+0xc6>
c0003c91:	89 f8                	mov    eax,edi
c0003c93:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003c98:	0f b6 d0             	movzx  edx,al
c0003c9b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003ca0:	39 c2                	cmp    edx,eax
c0003ca2:	75 5f                	jne    c0003d03 <dir_find+0x125>
c0003ca4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003ca8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003cad:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003cb0:	75 51                	jne    c0003d03 <dir_find+0x125>
c0003cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cb6:	89 ea                	mov    edx,ebp
c0003cb8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbb:	e8 37 f3 ff ff       	call   c0002ff7 <cmp_lfn>
c0003cc0:	85 c0                	test   eax,eax
c0003cc2:	74 3f                	je     c0003d03 <dir_find+0x125>
c0003cc4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003cc8:	4f                   	dec    edi
c0003cc9:	eb 38                	jmp    c0003d03 <dir_find+0x125>
c0003ccb:	89 f8                	mov    eax,edi
c0003ccd:	84 c0                	test   al,al
c0003ccf:	75 0d                	jne    c0003cde <dir_find+0x100>
c0003cd1:	89 e8                	mov    eax,ebp
c0003cd3:	e8 9c e8 ff ff       	call   c0002574 <sum_sfn>
c0003cd8:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003cdc:	74 3f                	je     c0003d1d <dir_find+0x13f>
c0003cde:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003ce2:	75 13                	jne    c0003cf7 <dir_find+0x119>
c0003ce4:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ce7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cec:	89 e8                	mov    eax,ebp
c0003cee:	e8 7c e4 ff ff       	call   c000216f <mem_cmp>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	74 26                	je     c0003d1d <dir_find+0x13f>
c0003cf7:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003cfe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	89 d8                	mov    eax,ebx
c0003d07:	e8 ed fb ff ff       	call   c00038f9 <dir_next>
c0003d0c:	89 c6                	mov    esi,eax
c0003d0e:	85 c0                	test   eax,eax
c0003d10:	0f 84 fb fe ff ff    	je     c0003c11 <dir_find+0x33>
c0003d16:	eb 05                	jmp    c0003d1d <dir_find+0x13f>
c0003d18:	be 04 00 00 00       	mov    esi,0x4
c0003d1d:	83 c4 1c             	add    esp,0x1c
c0003d20:	89 f0                	mov    eax,esi
c0003d22:	5b                   	pop    ebx
c0003d23:	5e                   	pop    esi
c0003d24:	5f                   	pop    edi
c0003d25:	5d                   	pop    ebp
c0003d26:	c3                   	ret    

c0003d27 <follow_path>:
c0003d27:	56                   	push   esi
c0003d28:	53                   	push   ebx
c0003d29:	89 c3                	mov    ebx,eax
c0003d2b:	83 ec 14             	sub    esp,0x14
c0003d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003d32:	8b 30                	mov    esi,DWORD PTR [eax]
c0003d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d38:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003d3b:	83 fa 5c             	cmp    edx,0x5c
c0003d3e:	75 07                	jne    c0003d47 <follow_path+0x20>
c0003d40:	40                   	inc    eax
c0003d41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d45:	eb ed                	jmp    c0003d34 <follow_path+0xd>
c0003d47:	83 fa 2f             	cmp    edx,0x2f
c0003d4a:	74 f4                	je     c0003d40 <follow_path+0x19>
c0003d4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003d53:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003d56:	77 3e                	ja     c0003d96 <follow_path+0x6f>
c0003d58:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003d5c:	31 d2                	xor    edx,edx
c0003d5e:	89 d8                	mov    eax,ebx
c0003d60:	e8 ff f8 ff ff       	call   c0003664 <dir_sdi>
c0003d65:	eb 4f                	jmp    c0003db6 <follow_path+0x8f>
c0003d67:	89 d8                	mov    eax,ebx
c0003d69:	e8 70 fe ff ff       	call   c0003bde <dir_find>
c0003d6e:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003d71:	85 c0                	test   eax,eax
c0003d73:	75 32                	jne    c0003da7 <follow_path+0x80>
c0003d75:	80 e2 04             	and    dl,0x4
c0003d78:	75 3c                	jne    c0003db6 <follow_path+0x8f>
c0003d7a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003d7e:	74 31                	je     c0003db1 <follow_path+0x8a>
c0003d80:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003d83:	25 ff 01 00 00       	and    eax,0x1ff
c0003d88:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003d8c:	8a 06                	mov    al,BYTE PTR [esi]
c0003d8e:	e8 7c f7 ff ff       	call   c000350f <ld_clust.isra.0>
c0003d93:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d96:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003d9a:	89 d8                	mov    eax,ebx
c0003d9c:	e8 7f ef ff ff       	call   c0002d20 <create_name>
c0003da1:	85 c0                	test   eax,eax
c0003da3:	74 c2                	je     c0003d67 <follow_path+0x40>
c0003da5:	eb 0f                	jmp    c0003db6 <follow_path+0x8f>
c0003da7:	83 f8 04             	cmp    eax,0x4
c0003daa:	75 0a                	jne    c0003db6 <follow_path+0x8f>
c0003dac:	80 e2 04             	and    dl,0x4
c0003daf:	75 05                	jne    c0003db6 <follow_path+0x8f>
c0003db1:	b8 05 00 00 00       	mov    eax,0x5
c0003db6:	83 c4 14             	add    esp,0x14
c0003db9:	5b                   	pop    ebx
c0003dba:	5e                   	pop    esi
c0003dbb:	c3                   	ret    

c0003dbc <dir_register>:
c0003dbc:	55                   	push   ebp
c0003dbd:	57                   	push   edi
c0003dbe:	56                   	push   esi
c0003dbf:	be 06 00 00 00       	mov    esi,0x6
c0003dc4:	53                   	push   ebx
c0003dc5:	83 ec 2c             	sub    esp,0x2c
c0003dc8:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003dcb:	80 e2 a0             	and    dl,0xa0
c0003dce:	0f 85 66 01 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003dd4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003dd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003dde:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003de5:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003dea:	74 06                	je     c0003df2 <dir_register+0x36>
c0003dec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003df0:	eb ef                	jmp    c0003de1 <dir_register+0x25>
c0003df2:	89 c3                	mov    ebx,eax
c0003df4:	b9 0c 00 00 00       	mov    ecx,0xc
c0003df9:	8d 40 20             	lea    eax,[eax+0x20]
c0003dfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e00:	89 c2                	mov    edx,eax
c0003e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003e06:	e8 44 e3 ff ff       	call   c000214f <mem_cpy>
c0003e0b:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003e10:	74 48                	je     c0003e5a <dir_register+0x9e>
c0003e12:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003e16:	bd 01 00 00 00       	mov    ebp,0x1
c0003e1b:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003e1e:	55                   	push   ebp
c0003e1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003e23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e27:	e8 86 e6 ff ff       	call   c00024b2 <gen_numname>
c0003e2c:	58                   	pop    eax
c0003e2d:	89 d8                	mov    eax,ebx
c0003e2f:	e8 aa fd ff ff       	call   c0003bde <dir_find>
c0003e34:	89 c6                	mov    esi,eax
c0003e36:	85 c0                	test   eax,eax
c0003e38:	75 10                	jne    c0003e4a <dir_register+0x8e>
c0003e3a:	45                   	inc    ebp
c0003e3b:	83 fd 64             	cmp    ebp,0x64
c0003e3e:	75 db                	jne    c0003e1b <dir_register+0x5f>
c0003e40:	be 07 00 00 00       	mov    esi,0x7
c0003e45:	e9 f0 00 00 00       	jmp    c0003f3a <dir_register+0x17e>
c0003e4a:	83 f8 04             	cmp    eax,0x4
c0003e4d:	0f 85 e7 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e53:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003e57:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003e5a:	bd 01 00 00 00       	mov    ebp,0x1
c0003e5f:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003e64:	74 13                	je     c0003e79 <dir_register+0xbd>
c0003e66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003e6a:	b9 0d 00 00 00       	mov    ecx,0xd
c0003e6f:	83 c0 0c             	add    eax,0xc
c0003e72:	31 d2                	xor    edx,edx
c0003e74:	f7 f1                	div    ecx
c0003e76:	8d 68 01             	lea    ebp,[eax+0x1]
c0003e79:	89 ea                	mov    edx,ebp
c0003e7b:	89 d8                	mov    eax,ebx
c0003e7d:	e8 7c fb ff ff       	call   c00039fe <dir_alloc>
c0003e82:	89 c6                	mov    esi,eax
c0003e84:	85 c0                	test   eax,eax
c0003e86:	0f 85 ae 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003e8c:	4d                   	dec    ebp
c0003e8d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003e91:	74 67                	je     c0003efa <dir_register+0x13e>
c0003e93:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003e96:	89 e8                	mov    eax,ebp
c0003e98:	c1 e0 05             	shl    eax,0x5
c0003e9b:	29 c2                	sub    edx,eax
c0003e9d:	89 d8                	mov    eax,ebx
c0003e9f:	e8 c0 f7 ff ff       	call   c0003664 <dir_sdi>
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	85 c0                	test   eax,eax
c0003ea8:	0f 85 8c 00 00 00    	jne    c0003f3a <dir_register+0x17e>
c0003eae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb2:	e8 bd e6 ff ff       	call   c0002574 <sum_sfn>
c0003eb7:	0f b6 e8             	movzx  ebp,al
c0003eba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ebd:	89 f8                	mov    eax,edi
c0003ebf:	e8 c6 e7 ff ff       	call   c000268a <move_window>
c0003ec4:	89 c6                	mov    esi,eax
c0003ec6:	85 c0                	test   eax,eax
c0003ec8:	75 70                	jne    c0003f3a <dir_register+0x17e>
c0003eca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003ecf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ed2:	83 ec 0c             	sub    esp,0xc
c0003ed5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ed8:	55                   	push   ebp
c0003ed9:	e8 39 e5 ff ff       	call   c0002417 <put_lfn>
c0003ede:	31 d2                	xor    edx,edx
c0003ee0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ee4:	89 d8                	mov    eax,ebx
c0003ee6:	e8 0e fa ff ff       	call   c00038f9 <dir_next>
c0003eeb:	83 c4 10             	add    esp,0x10
c0003eee:	89 c6                	mov    esi,eax
c0003ef0:	85 c0                	test   eax,eax
c0003ef2:	75 46                	jne    c0003f3a <dir_register+0x17e>
c0003ef4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003ef8:	75 c0                	jne    c0003eba <dir_register+0xfe>
c0003efa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003efd:	89 f8                	mov    eax,edi
c0003eff:	e8 86 e7 ff ff       	call   c000268a <move_window>
c0003f04:	89 c6                	mov    esi,eax
c0003f06:	85 c0                	test   eax,eax
c0003f08:	75 30                	jne    c0003f3a <dir_register+0x17e>
c0003f0a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f0d:	b9 20 00 00 00       	mov    ecx,0x20
c0003f12:	31 d2                	xor    edx,edx
c0003f14:	e8 4b e2 ff ff       	call   c0002164 <mem_set>
c0003f19:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f20:	b9 0b 00 00 00       	mov    ecx,0xb
c0003f25:	e8 25 e2 ff ff       	call   c000214f <mem_cpy>
c0003f2a:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003f2d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003f30:	83 e0 18             	and    eax,0x18
c0003f33:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003f36:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003f3a:	83 c4 2c             	add    esp,0x2c
c0003f3d:	89 f0                	mov    eax,esi
c0003f3f:	5b                   	pop    ebx
c0003f40:	5e                   	pop    esi
c0003f41:	5f                   	pop    edi
c0003f42:	5d                   	pop    ebp
c0003f43:	c3                   	ret    

c0003f44 <f_mount>:
c0003f44:	53                   	push   ebx
c0003f45:	83 ec 18             	sub    esp,0x18
c0003f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003f4c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003f50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003f58:	e8 37 e6 ff ff       	call   c0002594 <get_ldnumber>
c0003f5d:	89 c2                	mov    edx,eax
c0003f5f:	b8 0b 00 00 00       	mov    eax,0xb
c0003f64:	85 d2                	test   edx,edx
c0003f66:	78 39                	js     c0003fa1 <f_mount+0x5d>
c0003f68:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003f6f:	85 c0                	test   eax,eax
c0003f71:	74 03                	je     c0003f76 <f_mount+0x32>
c0003f73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f7a:	85 c0                	test   eax,eax
c0003f7c:	74 03                	je     c0003f81 <f_mount+0x3d>
c0003f7e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003f85:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003f8c:	31 c0                	xor    eax,eax
c0003f8e:	84 db                	test   bl,bl
c0003f90:	74 0f                	je     c0003fa1 <f_mount+0x5d>
c0003f92:	31 c9                	xor    ecx,ecx
c0003f94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003f98:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003f9c:	e8 3c e8 ff ff       	call   c00027dd <mount_volume>
c0003fa1:	83 c4 18             	add    esp,0x18
c0003fa4:	5b                   	pop    ebx
c0003fa5:	c3                   	ret    

c0003fa6 <f_open>:
c0003fa6:	55                   	push   ebp
c0003fa7:	b8 09 00 00 00       	mov    eax,0x9
c0003fac:	57                   	push   edi
c0003fad:	56                   	push   esi
c0003fae:	53                   	push   ebx
c0003faf:	83 ec 5c             	sub    esp,0x5c
c0003fb2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003fb6:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003fba:	85 db                	test   ebx,ebx
c0003fbc:	0f 84 9f 02 00 00    	je     c0004261 <f_open+0x2bb>
c0003fc2:	89 fd                	mov    ebp,edi
c0003fc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fc8:	83 e5 3f             	and    ebp,0x3f
c0003fcb:	89 e8                	mov    eax,ebp
c0003fcd:	89 ee                	mov    esi,ebp
c0003fcf:	0f b6 c8             	movzx  ecx,al
c0003fd2:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003fd6:	e8 02 e8 ff ff       	call   c00027dd <mount_volume>
c0003fdb:	85 c0                	test   eax,eax
c0003fdd:	0f 85 78 02 00 00    	jne    c000425b <f_open+0x2b5>
c0003fe3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe7:	83 ec 0c             	sub    esp,0xc
c0003fea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003fee:	68 00 02 00 00       	push   0x200
c0003ff3:	e8 74 1f 00 00       	call   c0005f6c <ff_memalloc>
c0003ff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	b8 11 00 00 00       	mov    eax,0x11
c0004004:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0004009:	0f 84 52 02 00 00    	je     c0004261 <f_open+0x2bb>
c000400f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004013:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004017:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000401b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000401e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004022:	e8 00 fd ff ff       	call   c0003d27 <follow_path>
c0004027:	85 c0                	test   eax,eax
c0004029:	75 0c                	jne    c0004037 <f_open+0x91>
c000402b:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004030:	74 05                	je     c0004037 <f_open+0x91>
c0004032:	b8 06 00 00 00       	mov    eax,0x6
c0004037:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000403d:	0f 84 d5 00 00 00    	je     c0004118 <f_open+0x172>
c0004043:	85 c0                	test   eax,eax
c0004045:	74 21                	je     c0004068 <f_open+0xc2>
c0004047:	83 f8 04             	cmp    eax,0x4
c000404a:	0f 85 f0 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004050:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004054:	e8 63 fd ff ff       	call   c0003dbc <dir_register>
c0004059:	85 c0                	test   eax,eax
c000405b:	0f 85 df 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004061:	83 cd 08             	or     ebp,0x8
c0004064:	89 ee                	mov    esi,ebp
c0004066:	eb 2c                	jmp    c0004094 <f_open+0xee>
c0004068:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c000406c:	b8 07 00 00 00       	mov    eax,0x7
c0004071:	80 e2 11             	and    dl,0x11
c0004074:	0f 85 c6 01 00 00    	jne    c0004240 <f_open+0x29a>
c000407a:	b8 08 00 00 00       	mov    eax,0x8
c000407f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004085:	0f 85 b5 01 00 00    	jne    c0004240 <f_open+0x29a>
c000408b:	83 e7 08             	and    edi,0x8
c000408e:	0f 84 b1 00 00 00    	je     c0004145 <f_open+0x19f>
c0004094:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000409c:	89 ea                	mov    edx,ebp
c000409e:	8a 00                	mov    al,BYTE PTR [eax]
c00040a0:	e8 6a f4 ff ff       	call   c000350f <ld_clust.isra.0>
c00040a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00040aa:	89 c7                	mov    edi,eax
c00040ac:	8d 45 0e             	lea    eax,[ebp+0xe]
c00040af:	e8 98 e0 ff ff       	call   c000214c <st_dword>
c00040b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040b8:	31 c9                	xor    ecx,ecx
c00040ba:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00040be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00040c6:	e8 6d f4 ff ff       	call   c0003538 <st_clust.isra.1>
c00040cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00040cf:	31 d2                	xor    edx,edx
c00040d1:	83 c0 1c             	add    eax,0x1c
c00040d4:	e8 73 e0 ff ff       	call   c000214c <st_dword>
c00040d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040dd:	85 ff                	test   edi,edi
c00040df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00040e3:	74 60                	je     c0004145 <f_open+0x19f>
c00040e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040e9:	31 c9                	xor    ecx,ecx
c00040eb:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c00040ee:	89 fa                	mov    edx,edi
c00040f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00040f4:	e8 72 f7 ff ff       	call   c000386b <remove_chain>
c00040f9:	85 c0                	test   eax,eax
c00040fb:	0f 85 3f 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004101:	89 ea                	mov    edx,ebp
c0004103:	4f                   	dec    edi
c0004104:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004108:	e8 7d e5 ff ff       	call   c000268a <move_window>
c000410d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004111:	85 c0                	test   eax,eax
c0004113:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0004116:	eb 27                	jmp    c000413f <f_open+0x199>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 20 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004120:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004124:	b8 04 00 00 00       	mov    eax,0x4
c0004129:	f6 c2 10             	test   dl,0x10
c000412c:	0f 85 0e 01 00 00    	jne    c0004240 <f_open+0x29a>
c0004132:	83 e7 02             	and    edi,0x2
c0004135:	74 0e                	je     c0004145 <f_open+0x19f>
c0004137:	b8 07 00 00 00       	mov    eax,0x7
c000413c:	80 e2 01             	and    dl,0x1
c000413f:	0f 85 fb 00 00 00    	jne    c0004240 <f_open+0x29a>
c0004145:	f7 c6 08 00 00 00    	test   esi,0x8
c000414b:	74 03                	je     c0004150 <f_open+0x1aa>
c000414d:	83 ce 40             	or     esi,0x40
c0004150:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004154:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004158:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000415b:	89 fa                	mov    edx,edi
c000415d:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004160:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004163:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004166:	e8 a4 f3 ff ff       	call   c000350f <ld_clust.isra.0>
c000416b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000416e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004171:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004174:	e8 b7 df ff ff       	call   c0002130 <ld_dword>
c0004179:	89 2b                	mov    DWORD PTR [ebx],ebp
c000417b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000417e:	31 d2                	xor    edx,edx
c0004180:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004184:	b9 00 02 00 00       	mov    ecx,0x200
c0004189:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000418d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004191:	89 f0                	mov    eax,esi
c0004193:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000419a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000419d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00041a4:	89 f8                	mov    eax,edi
c00041a6:	e8 b9 df ff ff       	call   c0002164 <mem_set>
c00041ab:	83 e6 20             	and    esi,0x20
c00041ae:	75 07                	jne    c00041b7 <f_open+0x211>
c00041b0:	31 c0                	xor    eax,eax
c00041b2:	e9 89 00 00 00       	jmp    c0004240 <f_open+0x29a>
c00041b7:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00041ba:	85 ed                	test   ebp,ebp
c00041bc:	74 f2                	je     c00041b0 <f_open+0x20a>
c00041be:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c00041c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00041c5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00041c8:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c00041cc:	c1 e6 09             	shl    esi,0x9
c00041cf:	39 ee                	cmp    esi,ebp
c00041d1:	73 1c                	jae    c00041ef <f_open+0x249>
c00041d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d5:	29 f5                	sub    ebp,esi
c00041d7:	e8 84 f3 ff ff       	call   c0003560 <get_fat.isra.2>
c00041dc:	89 c2                	mov    edx,eax
c00041de:	83 f8 01             	cmp    eax,0x1
c00041e1:	76 10                	jbe    c00041f3 <f_open+0x24d>
c00041e3:	83 f8 ff             	cmp    eax,0xffffffff
c00041e6:	75 e7                	jne    c00041cf <f_open+0x229>
c00041e8:	b8 01 00 00 00       	mov    eax,0x1
c00041ed:	eb 09                	jmp    c00041f8 <f_open+0x252>
c00041ef:	31 c0                	xor    eax,eax
c00041f1:	eb 05                	jmp    c00041f8 <f_open+0x252>
c00041f3:	b8 02 00 00 00       	mov    eax,0x2
c00041f8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00041fb:	85 c0                	test   eax,eax
c00041fd:	75 41                	jne    c0004240 <f_open+0x29a>
c00041ff:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0004205:	74 a9                	je     c00041b0 <f_open+0x20a>
c0004207:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000420b:	89 f0                	mov    eax,esi
c000420d:	e8 68 e1 ff ff       	call   c000237a <clst2sect>
c0004212:	89 c2                	mov    edx,eax
c0004214:	b8 02 00 00 00       	mov    eax,0x2
c0004219:	85 d2                	test   edx,edx
c000421b:	74 23                	je     c0004240 <f_open+0x29a>
c000421d:	c1 ed 09             	shr    ebp,0x9
c0004220:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0004224:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004227:	6a 01                	push   0x1
c0004229:	50                   	push   eax
c000422a:	57                   	push   edi
c000422b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000422f:	50                   	push   eax
c0004230:	e8 a3 de ff ff       	call   c00020d8 <disk_read>
c0004235:	83 c4 10             	add    esp,0x10
c0004238:	85 c0                	test   eax,eax
c000423a:	0f 95 c0             	setne  al
c000423d:	0f b6 c0             	movzx  eax,al
c0004240:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004244:	83 ec 0c             	sub    esp,0xc
c0004247:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000424b:	e8 34 1d 00 00       	call   c0005f84 <ff_memfree>
c0004250:	83 c4 10             	add    esp,0x10
c0004253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004257:	85 c0                	test   eax,eax
c0004259:	74 06                	je     c0004261 <f_open+0x2bb>
c000425b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004261:	83 c4 5c             	add    esp,0x5c
c0004264:	5b                   	pop    ebx
c0004265:	5e                   	pop    esi
c0004266:	5f                   	pop    edi
c0004267:	5d                   	pop    ebp
c0004268:	c3                   	ret    

c0004269 <f_read>:
c0004269:	55                   	push   ebp
c000426a:	57                   	push   edi
c000426b:	56                   	push   esi
c000426c:	53                   	push   ebx
c000426d:	83 ec 2c             	sub    esp,0x2c
c0004270:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004274:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004278:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000427e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004282:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004286:	89 d8                	mov    eax,ebx
c0004288:	e8 54 e3 ff ff       	call   c00025e1 <validate>
c000428d:	89 c5                	mov    ebp,eax
c000428f:	85 c0                	test   eax,eax
c0004291:	0f 85 c7 01 00 00    	jne    c000445e <f_read+0x1f5>
c0004297:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000429b:	85 ed                	test   ebp,ebp
c000429d:	0f 85 bb 01 00 00    	jne    c000445e <f_read+0x1f5>
c00042a3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00042a7:	0f 84 ac 01 00 00    	je     c0004459 <f_read+0x1f0>
c00042ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00042b0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00042b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00042b7:	39 f0                	cmp    eax,esi
c00042b9:	0f 86 b0 00 00 00    	jbe    c000436f <f_read+0x106>
c00042bf:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00042c3:	e9 a7 00 00 00       	jmp    c000436f <f_read+0x106>
c00042c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cb:	a9 ff 01 00 00       	test   eax,0x1ff
c00042d0:	0f 85 56 01 00 00    	jne    c000442c <f_read+0x1c3>
c00042d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042da:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c00042de:	89 c2                	mov    edx,eax
c00042e0:	4f                   	dec    edi
c00042e1:	c1 ea 09             	shr    edx,0x9
c00042e4:	21 d7                	and    edi,edx
c00042e6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00042ea:	0f 84 8f 00 00 00    	je     c000437f <f_read+0x116>
c00042f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042f4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042f7:	89 c8                	mov    eax,ecx
c00042f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042fd:	e8 78 e0 ff ff       	call   c000237a <clst2sect>
c0004302:	85 c0                	test   eax,eax
c0004304:	0f 84 8d 00 00 00    	je     c0004397 <f_read+0x12e>
c000430a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000430e:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0004316:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0004319:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000431d:	0f 86 bf 00 00 00    	jbe    c00043e2 <f_read+0x179>
c0004323:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0004327:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000432b:	c1 ee 09             	shr    esi,0x9
c000432e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004332:	01 f2                	add    edx,esi
c0004334:	39 c2                	cmp    edx,eax
c0004336:	76 06                	jbe    c000433e <f_read+0xd5>
c0004338:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000433c:	89 c6                	mov    esi,eax
c000433e:	56                   	push   esi
c000433f:	57                   	push   edi
c0004340:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004344:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004348:	50                   	push   eax
c0004349:	e8 8a dd ff ff       	call   c00020d8 <disk_read>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	85 c0                	test   eax,eax
c0004353:	75 55                	jne    c00043aa <f_read+0x141>
c0004355:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004359:	75 65                	jne    c00043c0 <f_read+0x157>
c000435b:	c1 e6 09             	shl    esi,0x9
c000435e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004362:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004366:	01 30                	add    DWORD PTR [eax],esi
c0004368:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000436c:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000436f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004374:	0f 85 4e ff ff ff    	jne    c00042c8 <f_read+0x5f>
c000437a:	e9 df 00 00 00       	jmp    c000445e <f_read+0x1f5>
c000437f:	85 c0                	test   eax,eax
c0004381:	75 05                	jne    c0004388 <f_read+0x11f>
c0004383:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004386:	eb 0a                	jmp    c0004392 <f_read+0x129>
c0004388:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000438d:	e8 ce f1 ff ff       	call   c0003560 <get_fat.isra.2>
c0004392:	83 f8 01             	cmp    eax,0x1
c0004395:	77 0e                	ja     c00043a5 <f_read+0x13c>
c0004397:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000439b:	bd 02 00 00 00       	mov    ebp,0x2
c00043a0:	e9 b9 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043a5:	83 f8 ff             	cmp    eax,0xffffffff
c00043a8:	75 0e                	jne    c00043b8 <f_read+0x14f>
c00043aa:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043ae:	bd 01 00 00 00       	mov    ebp,0x1
c00043b3:	e9 a6 00 00 00       	jmp    c000445e <f_read+0x1f5>
c00043b8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043bb:	e9 30 ff ff ff       	jmp    c00042f0 <f_read+0x87>
c00043c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043c3:	29 f8                	sub    eax,edi
c00043c5:	39 f0                	cmp    eax,esi
c00043c7:	73 92                	jae    c000435b <f_read+0xf2>
c00043c9:	c1 e0 09             	shl    eax,0x9
c00043cc:	8d 53 28             	lea    edx,[ebx+0x28]
c00043cf:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00043d3:	b9 00 02 00 00       	mov    ecx,0x200
c00043d8:	e8 72 dd ff ff       	call   c000214f <mem_cpy>
c00043dd:	e9 79 ff ff ff       	jmp    c000435b <f_read+0xf2>
c00043e2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00043e5:	39 f8                	cmp    eax,edi
c00043e7:	74 40                	je     c0004429 <f_read+0x1c0>
c00043e9:	8d 73 28             	lea    esi,[ebx+0x28]
c00043ec:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043f0:	74 1e                	je     c0004410 <f_read+0x1a7>
c00043f2:	6a 01                	push   0x1
c00043f4:	50                   	push   eax
c00043f5:	56                   	push   esi
c00043f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043fa:	50                   	push   eax
c00043fb:	e8 ee dc ff ff       	call   c00020ee <disk_write>
c0004400:	83 c4 10             	add    esp,0x10
c0004403:	85 c0                	test   eax,eax
c0004405:	75 a3                	jne    c00043aa <f_read+0x141>
c0004407:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000440a:	83 e0 7f             	and    eax,0x7f
c000440d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004410:	6a 01                	push   0x1
c0004412:	57                   	push   edi
c0004413:	56                   	push   esi
c0004414:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004418:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000441c:	50                   	push   eax
c000441d:	e8 b6 dc ff ff       	call   c00020d8 <disk_read>
c0004422:	83 c4 10             	add    esp,0x10
c0004425:	85 c0                	test   eax,eax
c0004427:	75 81                	jne    c00043aa <f_read+0x141>
c0004429:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000442f:	ba 00 02 00 00       	mov    edx,0x200
c0004434:	25 ff 01 00 00       	and    eax,0x1ff
c0004439:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000443d:	29 c2                	sub    edx,eax
c000443f:	39 d6                	cmp    esi,edx
c0004441:	76 02                	jbe    c0004445 <f_read+0x1dc>
c0004443:	89 d6                	mov    esi,edx
c0004445:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004449:	89 f1                	mov    ecx,esi
c000444b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000444f:	e8 fb dc ff ff       	call   c000214f <mem_cpy>
c0004454:	e9 05 ff ff ff       	jmp    c000435e <f_read+0xf5>
c0004459:	bd 07 00 00 00       	mov    ebp,0x7
c000445e:	83 c4 2c             	add    esp,0x2c
c0004461:	89 e8                	mov    eax,ebp
c0004463:	5b                   	pop    ebx
c0004464:	5e                   	pop    esi
c0004465:	5f                   	pop    edi
c0004466:	5d                   	pop    ebp
c0004467:	c3                   	ret    

c0004468 <f_write>:
c0004468:	55                   	push   ebp
c0004469:	57                   	push   edi
c000446a:	56                   	push   esi
c000446b:	53                   	push   ebx
c000446c:	83 ec 2c             	sub    esp,0x2c
c000446f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000447d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004481:	89 d8                	mov    eax,ebx
c0004483:	e8 59 e1 ff ff       	call   c00025e1 <validate>
c0004488:	89 c5                	mov    ebp,eax
c000448a:	85 c0                	test   eax,eax
c000448c:	0f 85 14 02 00 00    	jne    c00046a6 <f_write+0x23e>
c0004492:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004496:	85 ed                	test   ebp,ebp
c0004498:	0f 85 08 02 00 00    	jne    c00046a6 <f_write+0x23e>
c000449e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a2:	0f 84 f9 01 00 00    	je     c00046a1 <f_write+0x239>
c00044a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044ab:	89 c7                	mov    edi,eax
c00044ad:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c00044b1:	0f 83 ef 00 00 00    	jae    c00045a6 <f_write+0x13e>
c00044b7:	f7 d0                	not    eax
c00044b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00044bd:	e9 e4 00 00 00       	jmp    c00045a6 <f_write+0x13e>
c00044c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044c5:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c00044cb:	0f 85 9a 01 00 00    	jne    c000466b <f_write+0x203>
c00044d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d5:	89 d1                	mov    ecx,edx
c00044d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00044db:	c1 e9 09             	shr    ecx,0x9
c00044de:	48                   	dec    eax
c00044df:	21 c8                	and    eax,ecx
c00044e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00044e5:	0f 84 c8 00 00 00    	je     c00045b3 <f_write+0x14b>
c00044eb:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00044ef:	0f 85 22 01 00 00    	jne    c0004617 <f_write+0x1af>
c00044f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00044f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044fc:	89 c8                	mov    eax,ecx
c00044fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004502:	e8 73 de ff ff       	call   c000237a <clst2sect>
c0004507:	85 c0                	test   eax,eax
c0004509:	0f 84 d2 00 00 00    	je     c00045e1 <f_write+0x179>
c000450f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004513:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004517:	01 c7                	add    edi,eax
c0004519:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004521:	0f 86 1c 01 00 00    	jbe    c0004643 <f_write+0x1db>
c0004527:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000452b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000452f:	c1 ee 09             	shr    esi,0x9
c0004532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004536:	01 f2                	add    edx,esi
c0004538:	39 c2                	cmp    edx,eax
c000453a:	76 06                	jbe    c0004542 <f_write+0xda>
c000453c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004540:	89 c6                	mov    esi,eax
c0004542:	56                   	push   esi
c0004543:	57                   	push   edi
c0004544:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004548:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000454c:	50                   	push   eax
c000454d:	e8 9c db ff ff       	call   c00020ee <disk_write>
c0004552:	83 c4 10             	add    esp,0x10
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 97 00 00 00    	jne    c00045f4 <f_write+0x18c>
c000455d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004560:	29 fa                	sub    edx,edi
c0004562:	39 f2                	cmp    edx,esi
c0004564:	73 1d                	jae    c0004583 <f_write+0x11b>
c0004566:	8d 43 28             	lea    eax,[ebx+0x28]
c0004569:	c1 e2 09             	shl    edx,0x9
c000456c:	b9 00 02 00 00       	mov    ecx,0x200
c0004571:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004575:	e8 d5 db ff ff       	call   c000214f <mem_cpy>
c000457a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000457d:	83 e0 7f             	and    eax,0x7f
c0004580:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004583:	c1 e6 09             	shl    esi,0x9
c0004586:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000458a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000458e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004592:	01 30                	add    DWORD PTR [eax],esi
c0004594:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004597:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000459a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000459d:	39 f0                	cmp    eax,esi
c000459f:	73 02                	jae    c00045a3 <f_write+0x13b>
c00045a1:	89 f0                	mov    eax,esi
c00045a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045a6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00045ab:	0f 85 11 ff ff ff    	jne    c00044c2 <f_write+0x5a>
c00045b1:	eb 1b                	jmp    c00045ce <f_write+0x166>
c00045b3:	85 d2                	test   edx,edx
c00045b5:	75 09                	jne    c00045c0 <f_write+0x158>
c00045b7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045ba:	85 c0                	test   eax,eax
c00045bc:	75 1e                	jne    c00045dc <f_write+0x174>
c00045be:	eb 03                	jmp    c00045c3 <f_write+0x15b>
c00045c0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045c3:	89 d8                	mov    eax,ebx
c00045c5:	e8 62 f1 ff ff       	call   c000372c <create_chain>
c00045ca:	85 c0                	test   eax,eax
c00045cc:	75 0e                	jne    c00045dc <f_write+0x174>
c00045ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d1:	83 c8 40             	or     eax,0x40
c00045d4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045d7:	e9 ca 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045dc:	83 f8 01             	cmp    eax,0x1
c00045df:	75 0e                	jne    c00045ef <f_write+0x187>
c00045e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045e5:	bd 02 00 00 00       	mov    ebp,0x2
c00045ea:	e9 b7 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c00045ef:	83 f8 ff             	cmp    eax,0xffffffff
c00045f2:	75 0e                	jne    c0004602 <f_write+0x19a>
c00045f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00045f8:	bd 01 00 00 00       	mov    ebp,0x1
c00045fd:	e9 a4 00 00 00       	jmp    c00046a6 <f_write+0x23e>
c0004602:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004605:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004609:	0f 85 dc fe ff ff    	jne    c00044eb <f_write+0x83>
c000460f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004612:	e9 d4 fe ff ff       	jmp    c00044eb <f_write+0x83>
c0004617:	6a 01                	push   0x1
c0004619:	8d 43 28             	lea    eax,[ebx+0x28]
c000461c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000461f:	50                   	push   eax
c0004620:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004624:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004628:	50                   	push   eax
c0004629:	e8 c0 da ff ff       	call   c00020ee <disk_write>
c000462e:	83 c4 10             	add    esp,0x10
c0004631:	85 c0                	test   eax,eax
c0004633:	75 bf                	jne    c00045f4 <f_write+0x18c>
c0004635:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004638:	83 e0 7f             	and    eax,0x7f
c000463b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000463e:	e9 b2 fe ff ff       	jmp    c00044f5 <f_write+0x8d>
c0004643:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0004646:	74 20                	je     c0004668 <f_write+0x200>
c0004648:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000464b:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000464e:	76 18                	jbe    c0004668 <f_write+0x200>
c0004650:	6a 01                	push   0x1
c0004652:	8d 43 28             	lea    eax,[ebx+0x28]
c0004655:	57                   	push   edi
c0004656:	50                   	push   eax
c0004657:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000465b:	50                   	push   eax
c000465c:	e8 77 da ff ff       	call   c00020d8 <disk_read>
c0004661:	83 c4 10             	add    esp,0x10
c0004664:	85 c0                	test   eax,eax
c0004666:	75 8c                	jne    c00045f4 <f_write+0x18c>
c0004668:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000466b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000466e:	ba 00 02 00 00       	mov    edx,0x200
c0004673:	25 ff 01 00 00       	and    eax,0x1ff
c0004678:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000467c:	29 c2                	sub    edx,eax
c000467e:	39 d6                	cmp    esi,edx
c0004680:	76 02                	jbe    c0004684 <f_write+0x21c>
c0004682:	89 d6                	mov    esi,edx
c0004684:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004688:	89 f1                	mov    ecx,esi
c000468a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000468e:	e8 bc da ff ff       	call   c000214f <mem_cpy>
c0004693:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004696:	83 c8 80             	or     eax,0xffffff80
c0004699:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000469c:	e9 e5 fe ff ff       	jmp    c0004586 <f_write+0x11e>
c00046a1:	bd 07 00 00 00       	mov    ebp,0x7
c00046a6:	83 c4 2c             	add    esp,0x2c
c00046a9:	89 e8                	mov    eax,ebp
c00046ab:	5b                   	pop    ebx
c00046ac:	5e                   	pop    esi
c00046ad:	5f                   	pop    edi
c00046ae:	5d                   	pop    ebp
c00046af:	c3                   	ret    

c00046b0 <f_sync>:
c00046b0:	56                   	push   esi
c00046b1:	53                   	push   ebx
c00046b2:	83 ec 14             	sub    esp,0x14
c00046b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046bd:	89 d8                	mov    eax,ebx
c00046bf:	e8 1d df ff ff       	call   c00025e1 <validate>
c00046c4:	85 c0                	test   eax,eax
c00046c6:	0f 85 a3 00 00 00    	jne    c000476f <f_sync+0xbf>
c00046cc:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046cf:	f6 c2 40             	test   dl,0x40
c00046d2:	0f 84 97 00 00 00    	je     c000476f <f_sync+0xbf>
c00046d8:	80 e2 80             	and    dl,0x80
c00046db:	74 2e                	je     c000470b <f_sync+0x5b>
c00046dd:	6a 01                	push   0x1
c00046df:	8d 43 28             	lea    eax,[ebx+0x28]
c00046e2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00046e5:	50                   	push   eax
c00046e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046ea:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046ee:	50                   	push   eax
c00046ef:	e8 fa d9 ff ff       	call   c00020ee <disk_write>
c00046f4:	83 c4 10             	add    esp,0x10
c00046f7:	89 c2                	mov    edx,eax
c00046f9:	b8 01 00 00 00       	mov    eax,0x1
c00046fe:	85 d2                	test   edx,edx
c0004700:	75 6d                	jne    c000476f <f_sync+0xbf>
c0004702:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004705:	83 e0 7f             	and    eax,0x7f
c0004708:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000470b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000470e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004712:	e8 73 df ff ff       	call   c000268a <move_window>
c0004717:	85 c0                	test   eax,eax
c0004719:	75 54                	jne    c000476f <f_sync+0xbf>
c000471b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000471e:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004721:	89 f2                	mov    edx,esi
c0004723:	83 c8 20             	or     eax,0x20
c0004726:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004729:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000472c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000472e:	e8 05 ee ff ff       	call   c0003538 <st_clust.isra.1>
c0004733:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004736:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004739:	e8 0e da ff ff       	call   c000214c <st_dword>
c000473e:	8d 46 16             	lea    eax,[esi+0x16]
c0004741:	ba 00 00 21 50       	mov    edx,0x50210000
c0004746:	e8 01 da ff ff       	call   c000214c <st_dword>
c000474b:	31 d2                	xor    edx,edx
c000474d:	8d 46 12             	lea    eax,[esi+0x12]
c0004750:	e8 f3 d9 ff ff       	call   c0002148 <st_word>
c0004755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004759:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000475d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004761:	e8 5b e9 ff ff       	call   c00030c1 <sync_fs>
c0004766:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004769:	83 e2 bf             	and    edx,0xffffffbf
c000476c:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000476f:	83 c4 14             	add    esp,0x14
c0004772:	5b                   	pop    ebx
c0004773:	5e                   	pop    esi
c0004774:	c3                   	ret    

c0004775 <f_close>:
c0004775:	53                   	push   ebx
c0004776:	83 ec 24             	sub    esp,0x24
c0004779:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000477d:	53                   	push   ebx
c000477e:	e8 2d ff ff ff       	call   c00046b0 <f_sync>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	85 c0                	test   eax,eax
c0004788:	75 15                	jne    c000479f <f_close+0x2a>
c000478a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000478e:	89 d8                	mov    eax,ebx
c0004790:	e8 4c de ff ff       	call   c00025e1 <validate>
c0004795:	85 c0                	test   eax,eax
c0004797:	75 06                	jne    c000479f <f_close+0x2a>
c0004799:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000479f:	83 c4 18             	add    esp,0x18
c00047a2:	5b                   	pop    ebx
c00047a3:	c3                   	ret    

c00047a4 <f_lseek>:
c00047a4:	55                   	push   ebp
c00047a5:	57                   	push   edi
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 2c             	sub    esp,0x2c
c00047ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00047af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00047b3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00047b7:	89 d8                	mov    eax,ebx
c00047b9:	e8 23 de ff ff       	call   c00025e1 <validate>
c00047be:	89 c5                	mov    ebp,eax
c00047c0:	85 c0                	test   eax,eax
c00047c2:	0f 85 83 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047c8:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00047cc:	85 ed                	test   ebp,ebp
c00047ce:	0f 85 77 01 00 00    	jne    c000494b <f_lseek+0x1a7>
c00047d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00047d7:	39 f0                	cmp    eax,esi
c00047d9:	73 08                	jae    c00047e3 <f_lseek+0x3f>
c00047db:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047df:	75 02                	jne    c00047e3 <f_lseek+0x3f>
c00047e1:	89 c6                	mov    esi,eax
c00047e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00047e6:	85 f6                	test   esi,esi
c00047e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00047ef:	75 07                	jne    c00047f8 <f_lseek+0x54>
c00047f1:	31 f6                	xor    esi,esi
c00047f3:	e9 e2 00 00 00       	jmp    c00048da <f_lseek+0x136>
c00047f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047fc:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004800:	c1 e7 09             	shl    edi,0x9
c0004803:	85 c9                	test   ecx,ecx
c0004805:	74 28                	je     c000482f <f_lseek+0x8b>
c0004807:	49                   	dec    ecx
c0004808:	31 d2                	xor    edx,edx
c000480a:	8d 46 ff             	lea    eax,[esi-0x1]
c000480d:	f7 f7                	div    edi
c000480f:	31 d2                	xor    edx,edx
c0004811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004815:	89 c8                	mov    eax,ecx
c0004817:	f7 f7                	div    edi
c0004819:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000481d:	72 10                	jb     c000482f <f_lseek+0x8b>
c000481f:	89 f8                	mov    eax,edi
c0004821:	f7 d8                	neg    eax
c0004823:	21 c1                	and    ecx,eax
c0004825:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004828:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000482b:	29 ce                	sub    esi,ecx
c000482d:	eb 3c                	jmp    c000486b <f_lseek+0xc7>
c000482f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004832:	85 c0                	test   eax,eax
c0004834:	75 32                	jne    c0004868 <f_lseek+0xc4>
c0004836:	31 d2                	xor    edx,edx
c0004838:	89 d8                	mov    eax,ebx
c000483a:	e8 ed ee ff ff       	call   c000372c <create_chain>
c000483f:	83 f8 01             	cmp    eax,0x1
c0004842:	75 0e                	jne    c0004852 <f_lseek+0xae>
c0004844:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004848:	bd 02 00 00 00       	mov    ebp,0x2
c000484d:	e9 f9 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004852:	83 f8 ff             	cmp    eax,0xffffffff
c0004855:	75 0e                	jne    c0004865 <f_lseek+0xc1>
c0004857:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000485b:	bd 01 00 00 00       	mov    ebp,0x1
c0004860:	e9 e6 00 00 00       	jmp    c000494b <f_lseek+0x1a7>
c0004865:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004868:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000486b:	85 c0                	test   eax,eax
c000486d:	74 82                	je     c00047f1 <f_lseek+0x4d>
c000486f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004872:	39 fe                	cmp    esi,edi
c0004874:	76 3d                	jbe    c00048b3 <f_lseek+0x10f>
c0004876:	01 fa                	add    edx,edi
c0004878:	29 fe                	sub    esi,edi
c000487a:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000487d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004881:	89 c2                	mov    edx,eax
c0004883:	74 0d                	je     c0004892 <f_lseek+0xee>
c0004885:	89 d8                	mov    eax,ebx
c0004887:	e8 a0 ee ff ff       	call   c000372c <create_chain>
c000488c:	85 c0                	test   eax,eax
c000488e:	75 09                	jne    c0004899 <f_lseek+0xf5>
c0004890:	eb 1f                	jmp    c00048b1 <f_lseek+0x10d>
c0004892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004894:	e8 c7 ec ff ff       	call   c0003560 <get_fat.isra.2>
c0004899:	83 f8 ff             	cmp    eax,0xffffffff
c000489c:	74 b9                	je     c0004857 <f_lseek+0xb3>
c000489e:	83 f8 01             	cmp    eax,0x1
c00048a1:	76 a1                	jbe    c0004844 <f_lseek+0xa0>
c00048a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00048a7:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00048aa:	76 98                	jbe    c0004844 <f_lseek+0xa0>
c00048ac:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00048af:	eb be                	jmp    c000486f <f_lseek+0xcb>
c00048b1:	31 f6                	xor    esi,esi
c00048b3:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00048b6:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00048bc:	0f 84 2f ff ff ff    	je     c00047f1 <f_lseek+0x4d>
c00048c2:	89 c2                	mov    edx,eax
c00048c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048c8:	e8 ad da ff ff       	call   c000237a <clst2sect>
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 84 6f ff ff ff    	je     c0004844 <f_lseek+0xa0>
c00048d5:	c1 ee 09             	shr    esi,0x9
c00048d8:	01 c6                	add    esi,eax
c00048da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048e0:	76 0c                	jbe    c00048ee <f_lseek+0x14a>
c00048e2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00048e5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00048e8:	83 ca 40             	or     edx,0x40
c00048eb:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00048ee:	a9 ff 01 00 00       	test   eax,0x1ff
c00048f3:	74 56                	je     c000494b <f_lseek+0x1a7>
c00048f5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00048f8:	39 f0                	cmp    eax,esi
c00048fa:	74 4f                	je     c000494b <f_lseek+0x1a7>
c00048fc:	8d 7b 28             	lea    edi,[ebx+0x28]
c00048ff:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004903:	74 26                	je     c000492b <f_lseek+0x187>
c0004905:	6a 01                	push   0x1
c0004907:	50                   	push   eax
c0004908:	57                   	push   edi
c0004909:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000490d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004911:	50                   	push   eax
c0004912:	e8 d7 d7 ff ff       	call   c00020ee <disk_write>
c0004917:	83 c4 10             	add    esp,0x10
c000491a:	85 c0                	test   eax,eax
c000491c:	0f 85 35 ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004922:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004925:	83 e0 7f             	and    eax,0x7f
c0004928:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000492b:	6a 01                	push   0x1
c000492d:	56                   	push   esi
c000492e:	57                   	push   edi
c000492f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004933:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004937:	50                   	push   eax
c0004938:	e8 9b d7 ff ff       	call   c00020d8 <disk_read>
c000493d:	83 c4 10             	add    esp,0x10
c0004940:	85 c0                	test   eax,eax
c0004942:	0f 85 0f ff ff ff    	jne    c0004857 <f_lseek+0xb3>
c0004948:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000494b:	83 c4 2c             	add    esp,0x2c
c000494e:	89 e8                	mov    eax,ebp
c0004950:	5b                   	pop    ebx
c0004951:	5e                   	pop    esi
c0004952:	5f                   	pop    edi
c0004953:	5d                   	pop    ebp
c0004954:	c3                   	ret    

c0004955 <f_opendir>:
c0004955:	56                   	push   esi
c0004956:	b8 09 00 00 00       	mov    eax,0x9
c000495b:	53                   	push   ebx
c000495c:	83 ec 24             	sub    esp,0x24
c000495f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004963:	85 db                	test   ebx,ebx
c0004965:	0f 84 af 00 00 00    	je     c0004a1a <f_opendir+0xc5>
c000496b:	31 c9                	xor    ecx,ecx
c000496d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004971:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004975:	e8 63 de ff ff       	call   c00027dd <mount_volume>
c000497a:	85 c0                	test   eax,eax
c000497c:	0f 85 92 00 00 00    	jne    c0004a14 <f_opendir+0xbf>
c0004982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004986:	83 ec 0c             	sub    esp,0xc
c0004989:	89 03                	mov    DWORD PTR [ebx],eax
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 d7 15 00 00       	call   c0005f6c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	89 c6                	mov    esi,eax
c000499a:	b8 11 00 00 00       	mov    eax,0x11
c000499f:	85 f6                	test   esi,esi
c00049a1:	74 77                	je     c0004a1a <f_opendir+0xc5>
c00049a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00049ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049ae:	89 d8                	mov    eax,ebx
c00049b0:	e8 72 f3 ff ff       	call   c0003d27 <follow_path>
c00049b5:	85 c0                	test   eax,eax
c00049b7:	75 37                	jne    c00049f0 <f_opendir+0x9b>
c00049b9:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c00049bd:	75 1c                	jne    c00049db <f_opendir+0x86>
c00049bf:	b8 05 00 00 00       	mov    eax,0x5
c00049c4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00049c8:	74 26                	je     c00049f0 <f_opendir+0x9b>
c00049ca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00049cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049d1:	8a 00                	mov    al,BYTE PTR [eax]
c00049d3:	e8 37 eb ff ff       	call   c000350f <ld_clust.isra.0>
c00049d8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00049db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049df:	31 d2                	xor    edx,edx
c00049e1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00049e5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00049e9:	89 d8                	mov    eax,ebx
c00049eb:	e8 74 ec ff ff       	call   c0003664 <dir_sdi>
c00049f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f4:	83 ec 0c             	sub    esp,0xc
c00049f7:	56                   	push   esi
c00049f8:	e8 87 15 00 00       	call   c0005f84 <ff_memfree>
c00049fd:	83 c4 10             	add    esp,0x10
c0004a00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a04:	83 f8 04             	cmp    eax,0x4
c0004a07:	74 06                	je     c0004a0f <f_opendir+0xba>
c0004a09:	85 c0                	test   eax,eax
c0004a0b:	74 0d                	je     c0004a1a <f_opendir+0xc5>
c0004a0d:	eb 05                	jmp    c0004a14 <f_opendir+0xbf>
c0004a0f:	b8 05 00 00 00       	mov    eax,0x5
c0004a14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a1a:	83 c4 24             	add    esp,0x24
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_closedir>:
c0004a20:	53                   	push   ebx
c0004a21:	83 ec 18             	sub    esp,0x18
c0004a24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a28:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a2c:	89 d8                	mov    eax,ebx
c0004a2e:	e8 ae db ff ff       	call   c00025e1 <validate>
c0004a33:	85 c0                	test   eax,eax
c0004a35:	75 06                	jne    c0004a3d <f_closedir+0x1d>
c0004a37:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004a3d:	83 c4 18             	add    esp,0x18
c0004a40:	5b                   	pop    ebx
c0004a41:	c3                   	ret    

c0004a42 <f_readdir>:
c0004a42:	57                   	push   edi
c0004a43:	56                   	push   esi
c0004a44:	53                   	push   ebx
c0004a45:	83 ec 20             	sub    esp,0x20
c0004a48:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004a4c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004a50:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a54:	89 d8                	mov    eax,ebx
c0004a56:	e8 86 db ff ff       	call   c00025e1 <validate>
c0004a5b:	85 c0                	test   eax,eax
c0004a5d:	75 6e                	jne    c0004acd <f_readdir+0x8b>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <f_readdir+0x2c>
c0004a63:	31 d2                	xor    edx,edx
c0004a65:	89 d8                	mov    eax,ebx
c0004a67:	e8 f8 eb ff ff       	call   c0003664 <dir_sdi>
c0004a6c:	eb 5f                	jmp    c0004acd <f_readdir+0x8b>
c0004a6e:	83 ec 0c             	sub    esp,0xc
c0004a71:	68 00 02 00 00       	push   0x200
c0004a76:	e8 f1 14 00 00       	call   c0005f6c <ff_memalloc>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	89 c6                	mov    esi,eax
c0004a80:	b8 11 00 00 00       	mov    eax,0x11
c0004a85:	85 f6                	test   esi,esi
c0004a87:	74 44                	je     c0004acd <f_readdir+0x8b>
c0004a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a8d:	31 d2                	xor    edx,edx
c0004a8f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a92:	89 d8                	mov    eax,ebx
c0004a94:	e8 ca ef ff ff       	call   c0003a63 <dir_read>
c0004a99:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004a9e:	75 19                	jne    c0004ab9 <f_readdir+0x77>
c0004aa0:	89 fa                	mov    edx,edi
c0004aa2:	89 d8                	mov    eax,ebx
c0004aa4:	e8 70 e8 ff ff       	call   c0003319 <get_fileinfo>
c0004aa9:	31 d2                	xor    edx,edx
c0004aab:	89 d8                	mov    eax,ebx
c0004aad:	e8 47 ee ff ff       	call   c00038f9 <dir_next>
c0004ab2:	83 f8 04             	cmp    eax,0x4
c0004ab5:	75 02                	jne    c0004ab9 <f_readdir+0x77>
c0004ab7:	31 c0                	xor    eax,eax
c0004ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004abd:	83 ec 0c             	sub    esp,0xc
c0004ac0:	56                   	push   esi
c0004ac1:	e8 be 14 00 00       	call   c0005f84 <ff_memfree>
c0004ac6:	83 c4 10             	add    esp,0x10
c0004ac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004acd:	83 c4 20             	add    esp,0x20
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	c3                   	ret    

c0004ad4 <f_stat>:
c0004ad4:	57                   	push   edi
c0004ad5:	31 c9                	xor    ecx,ecx
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 30             	sub    esp,0x30
c0004adc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004ae0:	89 e2                	mov    edx,esp
c0004ae2:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ae6:	e8 f2 dc ff ff       	call   c00027dd <mount_volume>
c0004aeb:	89 c3                	mov    ebx,eax
c0004aed:	85 c0                	test   eax,eax
c0004aef:	75 59                	jne    c0004b4a <f_stat+0x76>
c0004af1:	83 ec 0c             	sub    esp,0xc
c0004af4:	bb 11 00 00 00       	mov    ebx,0x11
c0004af9:	68 00 02 00 00       	push   0x200
c0004afe:	e8 69 14 00 00       	call   c0005f6c <ff_memalloc>
c0004b03:	83 c4 10             	add    esp,0x10
c0004b06:	89 c6                	mov    esi,eax
c0004b08:	85 c0                	test   eax,eax
c0004b0a:	74 3e                	je     c0004b4a <f_stat+0x76>
c0004b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b0f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004b13:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b16:	89 e0                	mov    eax,esp
c0004b18:	e8 0a f2 ff ff       	call   c0003d27 <follow_path>
c0004b1d:	89 c3                	mov    ebx,eax
c0004b1f:	85 c0                	test   eax,eax
c0004b21:	75 1b                	jne    c0004b3e <f_stat+0x6a>
c0004b23:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004b28:	75 0f                	jne    c0004b39 <f_stat+0x65>
c0004b2a:	85 ff                	test   edi,edi
c0004b2c:	74 10                	je     c0004b3e <f_stat+0x6a>
c0004b2e:	89 fa                	mov    edx,edi
c0004b30:	89 e0                	mov    eax,esp
c0004b32:	e8 e2 e7 ff ff       	call   c0003319 <get_fileinfo>
c0004b37:	eb 05                	jmp    c0004b3e <f_stat+0x6a>
c0004b39:	bb 06 00 00 00       	mov    ebx,0x6
c0004b3e:	83 ec 0c             	sub    esp,0xc
c0004b41:	56                   	push   esi
c0004b42:	e8 3d 14 00 00       	call   c0005f84 <ff_memfree>
c0004b47:	83 c4 10             	add    esp,0x10
c0004b4a:	83 c4 30             	add    esp,0x30
c0004b4d:	89 d8                	mov    eax,ebx
c0004b4f:	5b                   	pop    ebx
c0004b50:	5e                   	pop    esi
c0004b51:	5f                   	pop    edi
c0004b52:	c3                   	ret    

c0004b53 <f_getfree>:
c0004b53:	55                   	push   ebp
c0004b54:	31 c9                	xor    ecx,ecx
c0004b56:	57                   	push   edi
c0004b57:	56                   	push   esi
c0004b58:	53                   	push   ebx
c0004b59:	83 ec 2c             	sub    esp,0x2c
c0004b5c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b60:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b64:	e8 74 dc ff ff       	call   c00027dd <mount_volume>
c0004b69:	89 c7                	mov    edi,eax
c0004b6b:	85 c0                	test   eax,eax
c0004b6d:	0f 85 df 00 00 00    	jne    c0004c52 <f_getfree+0xff>
c0004b73:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004b77:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004b7b:	89 30                	mov    DWORD PTR [eax],esi
c0004b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004b80:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004b83:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004b86:	39 d0                	cmp    eax,edx
c0004b88:	77 0b                	ja     c0004b95 <f_getfree+0x42>
c0004b8a:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004b8e:	89 01                	mov    DWORD PTR [ecx],eax
c0004b90:	e9 bd 00 00 00       	jmp    c0004c52 <f_getfree+0xff>
c0004b95:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004b98:	75 29                	jne    c0004bc3 <f_getfree+0x70>
c0004b9a:	bd 02 00 00 00       	mov    ebp,0x2
c0004b9f:	31 db                	xor    ebx,ebx
c0004ba1:	89 ea                	mov    edx,ebp
c0004ba3:	89 f0                	mov    eax,esi
c0004ba5:	e8 b6 e9 ff ff       	call   c0003560 <get_fat.isra.2>
c0004baa:	83 f8 ff             	cmp    eax,0xffffffff
c0004bad:	74 7d                	je     c0004c2c <f_getfree+0xd9>
c0004baf:	83 f8 01             	cmp    eax,0x1
c0004bb2:	74 7f                	je     c0004c33 <f_getfree+0xe0>
c0004bb4:	83 d3 00             	adc    ebx,0x0
c0004bb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bbb:	45                   	inc    ebp
c0004bbc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004bbf:	77 e0                	ja     c0004ba1 <f_getfree+0x4e>
c0004bc1:	eb 79                	jmp    c0004c3c <f_getfree+0xe9>
c0004bc3:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004bc6:	31 db                	xor    ebx,ebx
c0004bc8:	31 f6                	xor    esi,esi
c0004bca:	85 f6                	test   esi,esi
c0004bcc:	75 18                	jne    c0004be6 <f_getfree+0x93>
c0004bce:	8d 42 01             	lea    eax,[edx+0x1]
c0004bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bd9:	e8 ac da ff ff       	call   c000268a <move_window>
c0004bde:	85 c0                	test   eax,eax
c0004be0:	75 58                	jne    c0004c3a <f_getfree+0xe7>
c0004be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004bea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004bee:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004bf2:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004bf5:	75 13                	jne    c0004c0a <f_getfree+0xb7>
c0004bf7:	e8 27 d5 ff ff       	call   c0002123 <ld_word>
c0004bfc:	0f b7 c0             	movzx  eax,ax
c0004bff:	83 f8 01             	cmp    eax,0x1
c0004c02:	83 d3 00             	adc    ebx,0x0
c0004c05:	83 c6 02             	add    esi,0x2
c0004c08:	eb 13                	jmp    c0004c1d <f_getfree+0xca>
c0004c0a:	e8 21 d5 ff ff       	call   c0002130 <ld_dword>
c0004c0f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004c14:	83 f8 01             	cmp    eax,0x1
c0004c17:	83 d3 00             	adc    ebx,0x0
c0004c1a:	83 c6 04             	add    esi,0x4
c0004c1d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004c23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004c27:	4d                   	dec    ebp
c0004c28:	75 a0                	jne    c0004bca <f_getfree+0x77>
c0004c2a:	eb 10                	jmp    c0004c3c <f_getfree+0xe9>
c0004c2c:	bf 01 00 00 00       	mov    edi,0x1
c0004c31:	eb 09                	jmp    c0004c3c <f_getfree+0xe9>
c0004c33:	bf 02 00 00 00       	mov    edi,0x2
c0004c38:	eb 02                	jmp    c0004c3c <f_getfree+0xe9>
c0004c3a:	89 c7                	mov    edi,eax
c0004c3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004c40:	89 18                	mov    DWORD PTR [eax],ebx
c0004c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c46:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004c49:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004c4c:	83 ca 01             	or     edx,0x1
c0004c4f:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004c52:	83 c4 2c             	add    esp,0x2c
c0004c55:	89 f8                	mov    eax,edi
c0004c57:	5b                   	pop    ebx
c0004c58:	5e                   	pop    esi
c0004c59:	5f                   	pop    edi
c0004c5a:	5d                   	pop    ebp
c0004c5b:	c3                   	ret    

c0004c5c <f_truncate>:
c0004c5c:	56                   	push   esi
c0004c5d:	53                   	push   ebx
c0004c5e:	83 ec 14             	sub    esp,0x14
c0004c61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004c65:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c69:	89 d8                	mov    eax,ebx
c0004c6b:	e8 71 d9 ff ff       	call   c00025e1 <validate>
c0004c70:	89 c6                	mov    esi,eax
c0004c72:	85 c0                	test   eax,eax
c0004c74:	0f 85 c4 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c7a:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004c7e:	85 f6                	test   esi,esi
c0004c80:	0f 85 b8 00 00 00    	jne    c0004d3e <f_truncate+0xe2>
c0004c86:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004c8a:	0f 84 a9 00 00 00    	je     c0004d39 <f_truncate+0xdd>
c0004c90:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004c93:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004c96:	0f 83 a2 00 00 00    	jae    c0004d3e <f_truncate+0xe2>
c0004c9c:	85 c0                	test   eax,eax
c0004c9e:	75 15                	jne    c0004cb5 <f_truncate+0x59>
c0004ca0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ca3:	31 c9                	xor    ecx,ecx
c0004ca5:	89 d8                	mov    eax,ebx
c0004ca7:	e8 bf eb ff ff       	call   c000386b <remove_chain>
c0004cac:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004cb3:	eb 35                	jmp    c0004cea <f_truncate+0x8e>
c0004cb5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004cb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004cba:	e8 a1 e8 ff ff       	call   c0003560 <get_fat.isra.2>
c0004cbf:	89 c2                	mov    edx,eax
c0004cc1:	b8 01 00 00 00       	mov    eax,0x1
c0004cc6:	83 fa ff             	cmp    edx,0xffffffff
c0004cc9:	74 1f                	je     c0004cea <f_truncate+0x8e>
c0004ccb:	b8 02 00 00 00       	mov    eax,0x2
c0004cd0:	83 fa 01             	cmp    edx,0x1
c0004cd3:	74 15                	je     c0004cea <f_truncate+0x8e>
c0004cd5:	31 c0                	xor    eax,eax
c0004cd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004cdb:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004cde:	76 0a                	jbe    c0004cea <f_truncate+0x8e>
c0004ce0:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ce3:	89 d8                	mov    eax,ebx
c0004ce5:	e8 81 eb ff ff       	call   c000386b <remove_chain>
c0004cea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ced:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004cf0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004cf3:	83 ca 40             	or     edx,0x40
c0004cf6:	85 c0                	test   eax,eax
c0004cf8:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004cfb:	75 35                	jne    c0004d32 <f_truncate+0xd6>
c0004cfd:	80 e2 80             	and    dl,0x80
c0004d00:	74 3c                	je     c0004d3e <f_truncate+0xe2>
c0004d02:	6a 01                	push   0x1
c0004d04:	8d 43 28             	lea    eax,[ebx+0x28]
c0004d07:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004d0a:	50                   	push   eax
c0004d0b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004d0f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004d13:	50                   	push   eax
c0004d14:	e8 d5 d3 ff ff       	call   c00020ee <disk_write>
c0004d19:	83 c4 10             	add    esp,0x10
c0004d1c:	85 c0                	test   eax,eax
c0004d1e:	75 0d                	jne    c0004d2d <f_truncate+0xd1>
c0004d20:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004d23:	31 f6                	xor    esi,esi
c0004d25:	83 e0 7f             	and    eax,0x7f
c0004d28:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004d2b:	eb 11                	jmp    c0004d3e <f_truncate+0xe2>
c0004d2d:	b8 01 00 00 00       	mov    eax,0x1
c0004d32:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004d35:	89 c6                	mov    esi,eax
c0004d37:	eb 05                	jmp    c0004d3e <f_truncate+0xe2>
c0004d39:	be 07 00 00 00       	mov    esi,0x7
c0004d3e:	89 f0                	mov    eax,esi
c0004d40:	83 c4 14             	add    esp,0x14
c0004d43:	5b                   	pop    ebx
c0004d44:	5e                   	pop    esi
c0004d45:	c3                   	ret    

c0004d46 <f_unlink>:
c0004d46:	55                   	push   ebp
c0004d47:	b9 02 00 00 00       	mov    ecx,0x2
c0004d4c:	57                   	push   edi
c0004d4d:	56                   	push   esi
c0004d4e:	53                   	push   ebx
c0004d4f:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004d55:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d59:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004d60:	e8 78 da ff ff       	call   c00027dd <mount_volume>
c0004d65:	85 c0                	test   eax,eax
c0004d67:	0f 85 f0 00 00 00    	jne    c0004e5d <f_unlink+0x117>
c0004d6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d71:	83 ec 0c             	sub    esp,0xc
c0004d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d78:	68 00 02 00 00       	push   0x200
c0004d7d:	e8 ea 11 00 00       	call   c0005f6c <ff_memalloc>
c0004d82:	83 c4 10             	add    esp,0x10
c0004d85:	89 c3                	mov    ebx,eax
c0004d87:	b8 11 00 00 00       	mov    eax,0x11
c0004d8c:	85 db                	test   ebx,ebx
c0004d8e:	0f 84 c9 00 00 00    	je     c0004e5d <f_unlink+0x117>
c0004d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d98:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004d9f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004da2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004da6:	e8 7c ef ff ff       	call   c0003d27 <follow_path>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 96 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004db3:	b8 06 00 00 00       	mov    eax,0x6
c0004db8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004dbd:	0f 85 86 00 00 00    	jne    c0004e49 <f_unlink+0x103>
c0004dc3:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004dc8:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004dce:	74 07                	je     c0004dd7 <f_unlink+0x91>
c0004dd0:	b8 07 00 00 00       	mov    eax,0x7
c0004dd5:	eb 72                	jmp    c0004e49 <f_unlink+0x103>
c0004dd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ddb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ddf:	8a 07                	mov    al,BYTE PTR [edi]
c0004de1:	e8 29 e7 ff ff       	call   c000350f <ld_clust.isra.0>
c0004de6:	83 e5 10             	and    ebp,0x10
c0004de9:	89 c6                	mov    esi,eax
c0004deb:	75 0f                	jne    c0004dfc <f_unlink+0xb6>
c0004ded:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004df1:	e8 95 ed ff ff       	call   c0003b8b <dir_remove>
c0004df6:	85 c0                	test   eax,eax
c0004df8:	74 2f                	je     c0004e29 <f_unlink+0xe3>
c0004dfa:	eb 4d                	jmp    c0004e49 <f_unlink+0x103>
c0004dfc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004e00:	31 d2                	xor    edx,edx
c0004e02:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004e06:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e0a:	e8 55 e8 ff ff       	call   c0003664 <dir_sdi>
c0004e0f:	85 c0                	test   eax,eax
c0004e11:	75 36                	jne    c0004e49 <f_unlink+0x103>
c0004e13:	31 d2                	xor    edx,edx
c0004e15:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004e19:	e8 45 ec ff ff       	call   c0003a63 <dir_read>
c0004e1e:	85 c0                	test   eax,eax
c0004e20:	74 ae                	je     c0004dd0 <f_unlink+0x8a>
c0004e22:	83 f8 04             	cmp    eax,0x4
c0004e25:	75 22                	jne    c0004e49 <f_unlink+0x103>
c0004e27:	eb c4                	jmp    c0004ded <f_unlink+0xa7>
c0004e29:	85 f6                	test   esi,esi
c0004e2b:	75 0b                	jne    c0004e38 <f_unlink+0xf2>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	e8 8b e2 ff ff       	call   c00030c1 <sync_fs>
c0004e36:	eb 11                	jmp    c0004e49 <f_unlink+0x103>
c0004e38:	31 c9                	xor    ecx,ecx
c0004e3a:	89 f2                	mov    edx,esi
c0004e3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e40:	e8 26 ea ff ff       	call   c000386b <remove_chain>
c0004e45:	85 c0                	test   eax,eax
c0004e47:	74 e4                	je     c0004e2d <f_unlink+0xe7>
c0004e49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4d:	83 ec 0c             	sub    esp,0xc
c0004e50:	53                   	push   ebx
c0004e51:	e8 2e 11 00 00       	call   c0005f84 <ff_memfree>
c0004e56:	83 c4 10             	add    esp,0x10
c0004e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5d:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004e63:	5b                   	pop    ebx
c0004e64:	5e                   	pop    esi
c0004e65:	5f                   	pop    edi
c0004e66:	5d                   	pop    ebp
c0004e67:	c3                   	ret    

c0004e68 <f_mkdir>:
c0004e68:	57                   	push   edi
c0004e69:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6e:	56                   	push   esi
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 50             	sub    esp,0x50
c0004e73:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004e77:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e7b:	e8 5d d9 ff ff       	call   c00027dd <mount_volume>
c0004e80:	89 c3                	mov    ebx,eax
c0004e82:	85 c0                	test   eax,eax
c0004e84:	0f 85 70 01 00 00    	jne    c0004ffa <f_mkdir+0x192>
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	bb 11 00 00 00       	mov    ebx,0x11
c0004e93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e97:	83 ec 0c             	sub    esp,0xc
c0004e9a:	68 00 02 00 00       	push   0x200
c0004e9f:	e8 c8 10 00 00       	call   c0005f6c <ff_memalloc>
c0004ea4:	83 c4 10             	add    esp,0x10
c0004ea7:	89 c7                	mov    edi,eax
c0004ea9:	85 c0                	test   eax,eax
c0004eab:	0f 84 49 01 00 00    	je     c0004ffa <f_mkdir+0x192>
c0004eb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004eb5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004eb9:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ebc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec0:	e8 62 ee ff ff       	call   c0003d27 <follow_path>
c0004ec5:	89 c3                	mov    ebx,eax
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 3e                	je     c0004f09 <f_mkdir+0xa1>
c0004ecb:	83 f8 04             	cmp    eax,0x4
c0004ece:	75 3e                	jne    c0004f0e <f_mkdir+0xa6>
c0004ed0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed4:	31 d2                	xor    edx,edx
c0004ed6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004eda:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004ede:	e8 49 e8 ff ff       	call   c000372c <create_chain>
c0004ee3:	89 c6                	mov    esi,eax
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	74 0c                	je     c0004ef5 <f_mkdir+0x8d>
c0004ee9:	bb 02 00 00 00       	mov    ebx,0x2
c0004eee:	83 f8 01             	cmp    eax,0x1
c0004ef1:	74 07                	je     c0004efa <f_mkdir+0x92>
c0004ef3:	eb 2a                	jmp    c0004f1f <f_mkdir+0xb7>
c0004ef5:	bb 07 00 00 00       	mov    ebx,0x7
c0004efa:	31 c9                	xor    ecx,ecx
c0004efc:	89 f2                	mov    edx,esi
c0004efe:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004f02:	e8 64 e9 ff ff       	call   c000386b <remove_chain>
c0004f07:	eb 05                	jmp    c0004f0e <f_mkdir+0xa6>
c0004f09:	bb 08 00 00 00       	mov    ebx,0x8
c0004f0e:	83 ec 0c             	sub    esp,0xc
c0004f11:	57                   	push   edi
c0004f12:	e8 6d 10 00 00       	call   c0005f84 <ff_memfree>
c0004f17:	83 c4 10             	add    esp,0x10
c0004f1a:	e9 db 00 00 00       	jmp    c0004ffa <f_mkdir+0x192>
c0004f1f:	bb 01 00 00 00       	mov    ebx,0x1
c0004f24:	83 f8 ff             	cmp    eax,0xffffffff
c0004f27:	74 d1                	je     c0004efa <f_mkdir+0x92>
c0004f29:	89 f2                	mov    edx,esi
c0004f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f2f:	e8 f1 dc ff ff       	call   c0002c25 <dir_clear>
c0004f34:	89 c3                	mov    ebx,eax
c0004f36:	85 c0                	test   eax,eax
c0004f38:	75 c0                	jne    c0004efa <f_mkdir+0x92>
c0004f3a:	b9 0b 00 00 00       	mov    ecx,0xb
c0004f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f43:	ba 20 00 00 00       	mov    edx,0x20
c0004f48:	83 c0 34             	add    eax,0x34
c0004f4b:	e8 14 d2 ff ff       	call   c0002164 <mem_set>
c0004f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f54:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f59:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004f5d:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004f61:	83 c0 4a             	add    eax,0x4a
c0004f64:	e8 e3 d1 ff ff       	call   c000214c <st_dword>
c0004f69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f6d:	89 f1                	mov    ecx,esi
c0004f6f:	8d 50 34             	lea    edx,[eax+0x34]
c0004f72:	e8 c1 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f7b:	b9 20 00 00 00       	mov    ecx,0x20
c0004f80:	8d 50 34             	lea    edx,[eax+0x34]
c0004f83:	83 c0 54             	add    eax,0x54
c0004f86:	e8 c4 d1 ff ff       	call   c000214f <mem_cpy>
c0004f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004f93:	8d 50 54             	lea    edx,[eax+0x54]
c0004f96:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004f9a:	e8 99 e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004f9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fa3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fab:	e8 0c ee ff ff       	call   c0003dbc <dir_register>
c0004fb0:	89 c3                	mov    ebx,eax
c0004fb2:	85 c0                	test   eax,eax
c0004fb4:	0f 85 40 ff ff ff    	jne    c0004efa <f_mkdir+0x92>
c0004fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fbe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fc3:	83 c0 16             	add    eax,0x16
c0004fc6:	e8 81 d1 ff ff       	call   c000214c <st_dword>
c0004fcb:	89 f1                	mov    ecx,esi
c0004fcd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fd5:	e8 5e e5 ff ff       	call   c0003538 <st_clust.isra.1>
c0004fda:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fde:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fe6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fee:	e8 ce e0 ff ff       	call   c00030c1 <sync_fs>
c0004ff3:	89 c3                	mov    ebx,eax
c0004ff5:	e9 14 ff ff ff       	jmp    c0004f0e <f_mkdir+0xa6>
c0004ffa:	83 c4 50             	add    esp,0x50
c0004ffd:	89 d8                	mov    eax,ebx
c0004fff:	5b                   	pop    ebx
c0005000:	5e                   	pop    esi
c0005001:	5f                   	pop    edi
c0005002:	c3                   	ret    

c0005003 <f_rename>:
c0005003:	57                   	push   edi
c0005004:	56                   	push   esi
c0005005:	53                   	push   ebx
c0005006:	81 ec a0 00 00 00    	sub    esp,0xa0
c000500c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0005013:	e8 7c d5 ff ff       	call   c0002594 <get_ldnumber>
c0005018:	b9 02 00 00 00       	mov    ecx,0x2
c000501d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005021:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0005028:	e8 b0 d7 ff ff       	call   c00027dd <mount_volume>
c000502d:	85 c0                	test   eax,eax
c000502f:	0f 85 7c 01 00 00    	jne    c00051b1 <f_rename+0x1ae>
c0005035:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005039:	83 ec 0c             	sub    esp,0xc
c000503c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0005040:	68 00 02 00 00       	push   0x200
c0005045:	e8 22 0f 00 00       	call   c0005f6c <ff_memalloc>
c000504a:	83 c4 10             	add    esp,0x10
c000504d:	89 c6                	mov    esi,eax
c000504f:	b8 11 00 00 00       	mov    eax,0x11
c0005054:	85 f6                	test   esi,esi
c0005056:	0f 84 55 01 00 00    	je     c00051b1 <f_rename+0x1ae>
c000505c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005060:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0005067:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000506a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000506e:	e8 b4 ec ff ff       	call   c0003d27 <follow_path>
c0005073:	85 c0                	test   eax,eax
c0005075:	0f 85 22 01 00 00    	jne    c000519d <f_rename+0x19a>
c000507b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c000507f:	b8 06 00 00 00       	mov    eax,0x6
c0005084:	80 e2 a0             	and    dl,0xa0
c0005087:	0f 85 10 01 00 00    	jne    c000519d <f_rename+0x19a>
c000508d:	b9 20 00 00 00       	mov    ecx,0x20
c0005092:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005096:	8d 44 24 20          	lea    eax,[esp+0x20]
c000509a:	e8 b0 d0 ff ff       	call   c000214f <mem_cpy>
c000509f:	b9 30 00 00 00       	mov    ecx,0x30
c00050a4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00050a8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050ac:	e8 9e d0 ff ff       	call   c000214f <mem_cpy>
c00050b1:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c00050b8:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050bc:	e8 66 ec ff ff       	call   c0003d27 <follow_path>
c00050c1:	85 c0                	test   eax,eax
c00050c3:	75 20                	jne    c00050e5 <f_rename+0xe2>
c00050c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00050c9:	b8 08 00 00 00       	mov    eax,0x8
c00050ce:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c00050d2:	0f 85 c5 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050d8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00050dc:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c00050e3:	eb 03                	jmp    c00050e8 <f_rename+0xe5>
c00050e5:	83 f8 04             	cmp    eax,0x4
c00050e8:	0f 85 af 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ee:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050f2:	e8 c5 ec ff ff       	call   c0003dbc <dir_register>
c00050f7:	85 c0                	test   eax,eax
c00050f9:	0f 85 9e 00 00 00    	jne    c000519d <f_rename+0x19a>
c00050ff:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0005106:	b9 13 00 00 00       	mov    ecx,0x13
c000510b:	8d 43 0d             	lea    eax,[ebx+0xd]
c000510e:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0005112:	e8 38 d0 ff ff       	call   c000214f <mem_cpy>
c0005117:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c000511b:	a8 10                	test   al,0x10
c000511d:	75 03                	jne    c0005122 <f_rename+0x11f>
c000511f:	83 c8 20             	or     eax,0x20
c0005122:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0005125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005129:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000512d:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0005131:	74 54                	je     c0005187 <f_rename+0x184>
c0005133:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0005137:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c000513b:	74 4a                	je     c0005187 <f_rename+0x184>
c000513d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0005141:	89 da                	mov    edx,ebx
c0005143:	8a 07                	mov    al,BYTE PTR [edi]
c0005145:	e8 c5 e3 ff ff       	call   c000350f <ld_clust.isra.0>
c000514a:	89 c2                	mov    edx,eax
c000514c:	89 f8                	mov    eax,edi
c000514e:	e8 27 d2 ff ff       	call   c000237a <clst2sect>
c0005153:	89 c2                	mov    edx,eax
c0005155:	b8 02 00 00 00       	mov    eax,0x2
c000515a:	85 d2                	test   edx,edx
c000515c:	74 3f                	je     c000519d <f_rename+0x19a>
c000515e:	89 f8                	mov    eax,edi
c0005160:	e8 25 d5 ff ff       	call   c000268a <move_window>
c0005165:	85 c0                	test   eax,eax
c0005167:	75 34                	jne    c000519d <f_rename+0x19a>
c0005169:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516d:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005171:	75 14                	jne    c0005187 <f_rename+0x184>
c0005173:	8d 50 54             	lea    edx,[eax+0x54]
c0005176:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000517a:	e8 b9 e3 ff ff       	call   c0003538 <st_clust.isra.1>
c000517f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005183:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005187:	8d 44 24 40          	lea    eax,[esp+0x40]
c000518b:	e8 fb e9 ff ff       	call   c0003b8b <dir_remove>
c0005190:	85 c0                	test   eax,eax
c0005192:	75 09                	jne    c000519d <f_rename+0x19a>
c0005194:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005198:	e8 24 df ff ff       	call   c00030c1 <sync_fs>
c000519d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	56                   	push   esi
c00051a5:	e8 da 0d 00 00       	call   c0005f84 <ff_memfree>
c00051aa:	83 c4 10             	add    esp,0x10
c00051ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b1:	81 c4 a0 00 00 00    	add    esp,0xa0
c00051b7:	5b                   	pop    ebx
c00051b8:	5e                   	pop    esi
c00051b9:	5f                   	pop    edi
c00051ba:	c3                   	ret    

c00051bb <f_chmod>:
c00051bb:	57                   	push   edi
c00051bc:	b9 02 00 00 00       	mov    ecx,0x2
c00051c1:	56                   	push   esi
c00051c2:	53                   	push   ebx
c00051c3:	83 ec 50             	sub    esp,0x50
c00051c6:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00051ca:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c00051ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00051d6:	e8 02 d6 ff ff       	call   c00027dd <mount_volume>
c00051db:	85 c0                	test   eax,eax
c00051dd:	0f 85 81 00 00 00    	jne    c0005264 <f_chmod+0xa9>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	83 ec 0c             	sub    esp,0xc
c00051ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00051ee:	68 00 02 00 00       	push   0x200
c00051f3:	e8 74 0d 00 00       	call   c0005f6c <ff_memalloc>
c00051f8:	83 c4 10             	add    esp,0x10
c00051fb:	89 c6                	mov    esi,eax
c00051fd:	b8 11 00 00 00       	mov    eax,0x11
c0005202:	85 f6                	test   esi,esi
c0005204:	74 5e                	je     c0005264 <f_chmod+0xa9>
c0005206:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000520e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005211:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005215:	e8 0d eb ff ff       	call   c0003d27 <follow_path>
c000521a:	85 c0                	test   eax,eax
c000521c:	75 32                	jne    c0005250 <f_chmod+0x95>
c000521e:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005222:	b8 06 00 00 00       	mov    eax,0x6
c0005227:	80 e2 a0             	and    dl,0xa0
c000522a:	75 24                	jne    c0005250 <f_chmod+0x95>
c000522c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005230:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005233:	31 d7                	xor    edi,edx
c0005235:	21 fb                	and    ebx,edi
c0005237:	83 e3 27             	and    ebx,0x27
c000523a:	31 d3                	xor    ebx,edx
c000523c:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000523f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005243:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005247:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000524b:	e8 71 de ff ff       	call   c00030c1 <sync_fs>
c0005250:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005254:	83 ec 0c             	sub    esp,0xc
c0005257:	56                   	push   esi
c0005258:	e8 27 0d 00 00       	call   c0005f84 <ff_memfree>
c000525d:	83 c4 10             	add    esp,0x10
c0005260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005264:	83 c4 50             	add    esp,0x50
c0005267:	5b                   	pop    ebx
c0005268:	5e                   	pop    esi
c0005269:	5f                   	pop    edi
c000526a:	c3                   	ret    

c000526b <f_utime>:
c000526b:	56                   	push   esi
c000526c:	b9 02 00 00 00       	mov    ecx,0x2
c0005271:	53                   	push   ebx
c0005272:	83 ec 54             	sub    esp,0x54
c0005275:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005279:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000527d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005281:	e8 57 d5 ff ff       	call   c00027dd <mount_volume>
c0005286:	85 c0                	test   eax,eax
c0005288:	0f 85 87 00 00 00    	jne    c0005315 <f_utime+0xaa>
c000528e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005292:	83 ec 0c             	sub    esp,0xc
c0005295:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005299:	68 00 02 00 00       	push   0x200
c000529e:	e8 c9 0c 00 00       	call   c0005f6c <ff_memalloc>
c00052a3:	83 c4 10             	add    esp,0x10
c00052a6:	89 c3                	mov    ebx,eax
c00052a8:	b8 11 00 00 00       	mov    eax,0x11
c00052ad:	85 db                	test   ebx,ebx
c00052af:	74 64                	je     c0005315 <f_utime+0xaa>
c00052b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00052b9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00052bc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052c0:	e8 62 ea ff ff       	call   c0003d27 <follow_path>
c00052c5:	85 c0                	test   eax,eax
c00052c7:	75 38                	jne    c0005301 <f_utime+0x96>
c00052c9:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00052cd:	b8 06 00 00 00       	mov    eax,0x6
c00052d2:	80 e2 a0             	and    dl,0xa0
c00052d5:	75 2a                	jne    c0005301 <f_utime+0x96>
c00052d7:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00052db:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00052df:	c1 e2 10             	shl    edx,0x10
c00052e2:	09 c2                	or     edx,eax
c00052e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00052e8:	83 c0 16             	add    eax,0x16
c00052eb:	e8 5c ce ff ff       	call   c000214c <st_dword>
c00052f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00052f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052fc:	e8 c0 dd ff ff       	call   c00030c1 <sync_fs>
c0005301:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005305:	83 ec 0c             	sub    esp,0xc
c0005308:	53                   	push   ebx
c0005309:	e8 76 0c 00 00       	call   c0005f84 <ff_memfree>
c000530e:	83 c4 10             	add    esp,0x10
c0005311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005315:	83 c4 54             	add    esp,0x54
c0005318:	5b                   	pop    ebx
c0005319:	5e                   	pop    esi
c000531a:	c3                   	ret    

c000531b <f_getlabel>:
c000531b:	55                   	push   ebp
c000531c:	31 c9                	xor    ecx,ecx
c000531e:	57                   	push   edi
c000531f:	56                   	push   esi
c0005320:	53                   	push   ebx
c0005321:	83 ec 5c             	sub    esp,0x5c
c0005324:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005328:	8d 44 24 70          	lea    eax,[esp+0x70]
c000532c:	e8 ac d4 ff ff       	call   c00027dd <mount_volume>
c0005331:	89 c6                	mov    esi,eax
c0005333:	85 c0                	test   eax,eax
c0005335:	0f 85 27 01 00 00    	jne    c0005462 <f_getlabel+0x147>
c000533b:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0005340:	0f 84 d0 00 00 00    	je     c0005416 <f_getlabel+0xfb>
c0005346:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000534a:	31 d2                	xor    edx,edx
c000534c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005350:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005358:	8d 44 24 20          	lea    eax,[esp+0x20]
c000535c:	e8 03 e3 ff ff       	call   c0003664 <dir_sdi>
c0005361:	85 c0                	test   eax,eax
c0005363:	0f 85 a1 00 00 00    	jne    c000540a <f_getlabel+0xef>
c0005369:	ba 01 00 00 00       	mov    edx,0x1
c000536e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005372:	e8 ec e6 ff ff       	call   c0003a63 <dir_read>
c0005377:	85 c0                	test   eax,eax
c0005379:	0f 85 8b 00 00 00    	jne    c000540a <f_getlabel+0xef>
c000537f:	31 db                	xor    ebx,ebx
c0005381:	31 c9                	xor    ecx,ecx
c0005383:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005387:	8d 79 01             	lea    edi,[ecx+0x1]
c000538a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000538f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005398:	e8 06 ce ff ff       	call   c00021a3 <dbc_1st>
c000539d:	85 c0                	test   eax,eax
c000539f:	74 16                	je     c00053b7 <f_getlabel+0x9c>
c00053a1:	83 ff 0b             	cmp    edi,0xb
c00053a4:	74 11                	je     c00053b7 <f_getlabel+0x9c>
c00053a6:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c00053ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00053af:	8d 79 02             	lea    edi,[ecx+0x2]
c00053b2:	c1 e0 08             	shl    eax,0x8
c00053b5:	09 c2                	or     edx,eax
c00053b7:	0f b7 d2             	movzx  edx,dx
c00053ba:	50                   	push   eax
c00053bb:	50                   	push   eax
c00053bc:	68 b5 01 00 00       	push   0x1b5
c00053c1:	52                   	push   edx
c00053c2:	e8 75 0c 00 00       	call   c000603c <ff_oem2uni>
c00053c7:	83 c4 10             	add    esp,0x10
c00053ca:	0f b7 c0             	movzx  eax,ax
c00053cd:	85 c0                	test   eax,eax
c00053cf:	74 22                	je     c00053f3 <f_getlabel+0xd8>
c00053d1:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00053d5:	b9 04 00 00 00       	mov    ecx,0x4
c00053da:	01 da                	add    edx,ebx
c00053dc:	e8 a0 ce ff ff       	call   c0002281 <put_utf>
c00053e1:	0f b6 c0             	movzx  eax,al
c00053e4:	85 c0                	test   eax,eax
c00053e6:	74 0b                	je     c00053f3 <f_getlabel+0xd8>
c00053e8:	01 c3                	add    ebx,eax
c00053ea:	83 ff 0b             	cmp    edi,0xb
c00053ed:	74 06                	je     c00053f5 <f_getlabel+0xda>
c00053ef:	89 f9                	mov    ecx,edi
c00053f1:	eb 90                	jmp    c0005383 <f_getlabel+0x68>
c00053f3:	31 db                	xor    ebx,ebx
c00053f5:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00053f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00053fc:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0005400:	74 14                	je     c0005416 <f_getlabel+0xfb>
c0005402:	4b                   	dec    ebx
c0005403:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0005406:	74 f1                	je     c00053f9 <f_getlabel+0xde>
c0005408:	eb 0c                	jmp    c0005416 <f_getlabel+0xfb>
c000540a:	83 f8 04             	cmp    eax,0x4
c000540d:	75 51                	jne    c0005460 <f_getlabel+0x145>
c000540f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005413:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005416:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c000541b:	74 45                	je     c0005462 <f_getlabel+0x147>
c000541d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005421:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005424:	e8 61 d2 ff ff       	call   c000268a <move_window>
c0005429:	89 c6                	mov    esi,eax
c000542b:	85 c0                	test   eax,eax
c000542d:	75 33                	jne    c0005462 <f_getlabel+0x147>
c000542f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005433:	b8 43 00 00 00       	mov    eax,0x43
c0005438:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c000543b:	83 f9 03             	cmp    ecx,0x3
c000543e:	74 0f                	je     c000544f <f_getlabel+0x134>
c0005440:	31 c0                	xor    eax,eax
c0005442:	83 f9 04             	cmp    ecx,0x4
c0005445:	0f 94 c0             	sete   al
c0005448:	48                   	dec    eax
c0005449:	83 e0 c3             	and    eax,0xffffffc3
c000544c:	83 c0 64             	add    eax,0x64
c000544f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005453:	e8 d8 cc ff ff       	call   c0002130 <ld_dword>
c0005458:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000545c:	89 07                	mov    DWORD PTR [edi],eax
c000545e:	eb 02                	jmp    c0005462 <f_getlabel+0x147>
c0005460:	89 c6                	mov    esi,eax
c0005462:	83 c4 5c             	add    esp,0x5c
c0005465:	89 f0                	mov    eax,esi
c0005467:	5b                   	pop    ebx
c0005468:	5e                   	pop    esi
c0005469:	5f                   	pop    edi
c000546a:	5d                   	pop    ebp
c000546b:	c3                   	ret    

c000546c <f_setlabel>:
c000546c:	57                   	push   edi
c000546d:	b9 02 00 00 00       	mov    ecx,0x2
c0005472:	56                   	push   esi
c0005473:	53                   	push   ebx
c0005474:	83 ec 50             	sub    esp,0x50
c0005477:	8d 54 24 04          	lea    edx,[esp+0x4]
c000547b:	8d 44 24 60          	lea    eax,[esp+0x60]
c000547f:	e8 59 d3 ff ff       	call   c00027dd <mount_volume>
c0005484:	89 c6                	mov    esi,eax
c0005486:	85 c0                	test   eax,eax
c0005488:	0f 85 65 01 00 00    	jne    c00055f3 <f_setlabel+0x187>
c000548e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005493:	ba 20 00 00 00       	mov    edx,0x20
c0005498:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000549c:	31 db                	xor    ebx,ebx
c000549e:	e8 c1 cc ff ff       	call   c0002164 <mem_set>
c00054a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00054a7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00054aa:	76 5d                	jbe    c0005509 <f_setlabel+0x9d>
c00054ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c00054b0:	e8 f4 cc ff ff       	call   c00021a9 <tchar2uni>
c00054b5:	3d ff ff 00 00       	cmp    eax,0xffff
c00054ba:	76 0a                	jbe    c00054c6 <f_setlabel+0x5a>
c00054bc:	be 06 00 00 00       	mov    esi,0x6
c00054c1:	e9 2d 01 00 00       	jmp    c00055f3 <f_setlabel+0x187>
c00054c6:	83 ec 0c             	sub    esp,0xc
c00054c9:	50                   	push   eax
c00054ca:	e8 e5 0b 00 00       	call   c00060b4 <ff_wtoupper>
c00054cf:	5a                   	pop    edx
c00054d0:	59                   	pop    ecx
c00054d1:	68 b5 01 00 00       	push   0x1b5
c00054d6:	50                   	push   eax
c00054d7:	e8 c0 0a 00 00       	call   c0005f9c <ff_uni2oem>
c00054dc:	83 c4 10             	add    esp,0x10
c00054df:	0f b7 f0             	movzx  esi,ax
c00054e2:	89 f7                	mov    edi,esi
c00054e4:	85 f6                	test   esi,esi
c00054e6:	74 d4                	je     c00054bc <f_setlabel+0x50>
c00054e8:	89 f2                	mov    edx,esi
c00054ea:	b8 b0 f7 02 c0       	mov    eax,0xc002f7b0
c00054ef:	e8 9e cc ff ff       	call   c0002192 <chk_chr>
c00054f4:	85 c0                	test   eax,eax
c00054f6:	75 c4                	jne    c00054bc <f_setlabel+0x50>
c00054f8:	81 fe ff 00 00 00    	cmp    esi,0xff
c00054fe:	0f 87 c9 00 00 00    	ja     c00055cd <f_setlabel+0x161>
c0005504:	e9 e0 00 00 00       	jmp    c00055e9 <f_setlabel+0x17d>
c0005509:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c000550e:	74 ac                	je     c00054bc <f_setlabel+0x50>
c0005510:	85 db                	test   ebx,ebx
c0005512:	74 0e                	je     c0005522 <f_setlabel+0xb6>
c0005514:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005517:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c000551c:	75 04                	jne    c0005522 <f_setlabel+0xb6>
c000551e:	89 c3                	mov    ebx,eax
c0005520:	eb ee                	jmp    c0005510 <f_setlabel+0xa4>
c0005522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005526:	31 d2                	xor    edx,edx
c0005528:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000552c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005534:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005538:	e8 27 e1 ff ff       	call   c0003664 <dir_sdi>
c000553d:	89 c6                	mov    esi,eax
c000553f:	85 c0                	test   eax,eax
c0005541:	0f 85 ac 00 00 00    	jne    c00055f3 <f_setlabel+0x187>
c0005547:	ba 01 00 00 00       	mov    edx,0x1
c000554c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005550:	e8 0e e5 ff ff       	call   c0003a63 <dir_read>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 18                	jne    c0005571 <f_setlabel+0x105>
c0005559:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000555d:	85 db                	test   ebx,ebx
c000555f:	74 0b                	je     c000556c <f_setlabel+0x100>
c0005561:	b9 0b 00 00 00       	mov    ecx,0xb
c0005566:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000556a:	eb 47                	jmp    c00055b3 <f_setlabel+0x147>
c000556c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000556f:	eb 47                	jmp    c00055b8 <f_setlabel+0x14c>
c0005571:	83 f8 04             	cmp    eax,0x4
c0005574:	75 53                	jne    c00055c9 <f_setlabel+0x15d>
c0005576:	85 db                	test   ebx,ebx
c0005578:	74 79                	je     c00055f3 <f_setlabel+0x187>
c000557a:	ba 01 00 00 00       	mov    edx,0x1
c000557f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005583:	e8 76 e4 ff ff       	call   c00039fe <dir_alloc>
c0005588:	89 c6                	mov    esi,eax
c000558a:	85 c0                	test   eax,eax
c000558c:	75 65                	jne    c00055f3 <f_setlabel+0x187>
c000558e:	b9 20 00 00 00       	mov    ecx,0x20
c0005593:	31 d2                	xor    edx,edx
c0005595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005599:	e8 c6 cb ff ff       	call   c0002164 <mem_set>
c000559e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055a2:	b9 0b 00 00 00       	mov    ecx,0xb
c00055a7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00055ab:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00055af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00055b3:	e8 97 cb ff ff       	call   c000214f <mem_cpy>
c00055b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055bc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00055c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00055c4:	e8 f8 da ff ff       	call   c00030c1 <sync_fs>
c00055c9:	89 c6                	mov    esi,eax
c00055cb:	eb 26                	jmp    c00055f3 <f_setlabel+0x187>
c00055cd:	83 fb 09             	cmp    ebx,0x9
c00055d0:	0f 87 e6 fe ff ff    	ja     c00054bc <f_setlabel+0x50>
c00055d6:	89 f0                	mov    eax,esi
c00055d8:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00055dc:	43                   	inc    ebx
c00055dd:	89 f8                	mov    eax,edi
c00055df:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00055e3:	43                   	inc    ebx
c00055e4:	e9 ba fe ff ff       	jmp    c00054a3 <f_setlabel+0x37>
c00055e9:	83 fb 0a             	cmp    ebx,0xa
c00055ec:	76 ef                	jbe    c00055dd <f_setlabel+0x171>
c00055ee:	e9 c9 fe ff ff       	jmp    c00054bc <f_setlabel+0x50>
c00055f3:	83 c4 50             	add    esp,0x50
c00055f6:	89 f0                	mov    eax,esi
c00055f8:	5b                   	pop    ebx
c00055f9:	5e                   	pop    esi
c00055fa:	5f                   	pop    edi
c00055fb:	c3                   	ret    

c00055fc <f_expand>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	53                   	push   ebx
c0005600:	83 ec 2c             	sub    esp,0x2c
c0005603:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005607:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000560b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000560f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005613:	89 d8                	mov    eax,ebx
c0005615:	e8 c7 cf ff ff       	call   c00025e1 <validate>
c000561a:	89 c6                	mov    esi,eax
c000561c:	85 c0                	test   eax,eax
c000561e:	0f 85 3b 01 00 00    	jne    c000575f <f_expand+0x163>
c0005624:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005628:	85 f6                	test   esi,esi
c000562a:	0f 85 2f 01 00 00    	jne    c000575f <f_expand+0x163>
c0005630:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005635:	75 0a                	jne    c0005641 <f_expand+0x45>
c0005637:	be 07 00 00 00       	mov    esi,0x7
c000563c:	e9 1e 01 00 00       	jmp    c000575f <f_expand+0x163>
c0005641:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005645:	75 f0                	jne    c0005637 <f_expand+0x3b>
c0005647:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000564b:	74 ea                	je     c0005637 <f_expand+0x3b>
c000564d:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005651:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005655:	c1 e1 09             	shl    ecx,0x9
c0005658:	8d 41 ff             	lea    eax,[ecx-0x1]
c000565b:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000565f:	0f 95 c0             	setne  al
c0005662:	31 d2                	xor    edx,edx
c0005664:	0f b6 c0             	movzx  eax,al
c0005667:	89 c7                	mov    edi,eax
c0005669:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000566d:	f7 f1                	div    ecx
c000566f:	01 f8                	add    eax,edi
c0005671:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005674:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005678:	83 ff 01             	cmp    edi,0x1
c000567b:	76 05                	jbe    c0005682 <f_expand+0x86>
c000567d:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005680:	77 05                	ja     c0005687 <f_expand+0x8b>
c0005682:	bf 02 00 00 00       	mov    edi,0x2
c0005687:	89 3c 24             	mov    DWORD PTR [esp],edi
c000568a:	89 fd                	mov    ebp,edi
c000568c:	31 c9                	xor    ecx,ecx
c000568e:	89 ea                	mov    edx,ebp
c0005690:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005694:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005696:	45                   	inc    ebp
c0005697:	e8 c4 de ff ff       	call   c0003560 <get_fat.isra.2>
c000569c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00056a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00056a4:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00056a7:	77 05                	ja     c00056ae <f_expand+0xb2>
c00056a9:	bd 02 00 00 00       	mov    ebp,0x2
c00056ae:	83 f8 01             	cmp    eax,0x1
c00056b1:	74 20                	je     c00056d3 <f_expand+0xd7>
c00056b3:	83 f8 ff             	cmp    eax,0xffffffff
c00056b6:	74 25                	je     c00056dd <f_expand+0xe1>
c00056b8:	85 c0                	test   eax,eax
c00056ba:	75 09                	jne    c00056c5 <f_expand+0xc9>
c00056bc:	41                   	inc    ecx
c00056bd:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00056c1:	75 07                	jne    c00056ca <f_expand+0xce>
c00056c3:	eb 1f                	jmp    c00056e4 <f_expand+0xe8>
c00056c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00056c8:	31 c9                	xor    ecx,ecx
c00056ca:	39 fd                	cmp    ebp,edi
c00056cc:	75 c0                	jne    c000568e <f_expand+0x92>
c00056ce:	e9 64 ff ff ff       	jmp    c0005637 <f_expand+0x3b>
c00056d3:	be 02 00 00 00       	mov    esi,0x2
c00056d8:	e9 82 00 00 00       	jmp    c000575f <f_expand+0x163>
c00056dd:	be 01 00 00 00       	mov    esi,0x1
c00056e2:	eb 7b                	jmp    c000575f <f_expand+0x163>
c00056e4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00056e9:	74 2b                	je     c0005716 <f_expand+0x11a>
c00056eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00056ee:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00056f2:	85 ed                	test   ebp,ebp
c00056f4:	74 24                	je     c000571a <f_expand+0x11e>
c00056f6:	83 c9 ff             	or     ecx,0xffffffff
c00056f9:	83 fd 01             	cmp    ebp,0x1
c00056fc:	74 03                	je     c0005701 <f_expand+0x105>
c00056fe:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005701:	89 fa                	mov    edx,edi
c0005703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005707:	e8 c2 d3 ff ff       	call   c0002ace <put_fat>
c000570c:	85 c0                	test   eax,eax
c000570e:	75 4d                	jne    c000575d <f_expand+0x161>
c0005710:	89 f8                	mov    eax,edi
c0005712:	4d                   	dec    ebp
c0005713:	47                   	inc    edi
c0005714:	eb dc                	jmp    c00056f2 <f_expand+0xf6>
c0005716:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005719:	48                   	dec    eax
c000571a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000571e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005723:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005726:	74 37                	je     c000575f <f_expand+0x163>
c0005728:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000572b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000572e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005732:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005735:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005738:	83 c8 40             	or     eax,0x40
c000573b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000573e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005741:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005744:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005747:	39 c8                	cmp    eax,ecx
c0005749:	77 14                	ja     c000575f <f_expand+0x163>
c000574b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000574f:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005752:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005755:	83 c8 01             	or     eax,0x1
c0005758:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000575b:	eb 02                	jmp    c000575f <f_expand+0x163>
c000575d:	89 c6                	mov    esi,eax
c000575f:	83 c4 2c             	add    esp,0x2c
c0005762:	89 f0                	mov    eax,esi
c0005764:	5b                   	pop    ebx
c0005765:	5e                   	pop    esi
c0005766:	5f                   	pop    edi
c0005767:	5d                   	pop    ebp
c0005768:	c3                   	ret    

c0005769 <f_mkfs>:
c0005769:	55                   	push   ebp
c000576a:	57                   	push   edi
c000576b:	56                   	push   esi
c000576c:	be 0b 00 00 00       	mov    esi,0xb
c0005771:	53                   	push   ebx
c0005772:	83 ec 5c             	sub    esp,0x5c
c0005775:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005779:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000577d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005781:	e8 0e ce ff ff       	call   c0002594 <get_ldnumber>
c0005786:	85 c0                	test   eax,eax
c0005788:	0f 88 d1 07 00 00    	js     c0005f5f <f_mkfs+0x7f6>
c000578e:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005795:	85 d2                	test   edx,edx
c0005797:	74 03                	je     c000579c <f_mkfs+0x33>
c0005799:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000579c:	85 db                	test   ebx,ebx
c000579e:	75 05                	jne    c00057a5 <f_mkfs+0x3c>
c00057a0:	bb a0 f7 02 c0       	mov    ebx,0xc002f7a0
c00057a5:	83 ec 0c             	sub    esp,0xc
c00057a8:	0f b6 c0             	movzx  eax,al
c00057ab:	be 03 00 00 00       	mov    esi,0x3
c00057b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057b8:	e8 18 c9 ff ff       	call   c00020d5 <disk_initialize>
c00057bd:	83 c4 10             	add    esp,0x10
c00057c0:	a8 01                	test   al,0x1
c00057c2:	0f 85 97 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057c8:	be 0a 00 00 00       	mov    esi,0xa
c00057cd:	a8 04                	test   al,0x4
c00057cf:	0f 85 8a 07 00 00    	jne    c0005f5f <f_mkfs+0x7f6>
c00057d5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00057d8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00057dc:	85 c0                	test   eax,eax
c00057de:	75 20                	jne    c0005800 <f_mkfs+0x97>
c00057e0:	51                   	push   ecx
c00057e1:	8d 44 24 44          	lea    eax,[esp+0x44]
c00057e5:	50                   	push   eax
c00057e6:	6a 03                	push   0x3
c00057e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00057ec:	e8 13 c9 ff ff       	call   c0002104 <disk_ioctl>
c00057f1:	83 c4 10             	add    esp,0x10
c00057f4:	85 c0                	test   eax,eax
c00057f6:	74 08                	je     c0005800 <f_mkfs+0x97>
c00057f8:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005800:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005804:	8d 42 ff             	lea    eax,[edx-0x1]
c0005807:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000580c:	77 04                	ja     c0005812 <f_mkfs+0xa9>
c000580e:	85 c2                	test   edx,eax
c0005810:	74 08                	je     c000581a <f_mkfs+0xb1>
c0005812:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000581a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000581d:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005825:	48                   	dec    eax
c0005826:	3c 01                	cmp    al,0x1
c0005828:	76 05                	jbe    c000582f <f_mkfs+0xc6>
c000582a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000582f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005832:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005836:	48                   	dec    eax
c0005837:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000583c:	77 07                	ja     c0005845 <f_mkfs+0xdc>
c000583e:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005843:	74 08                	je     c000584d <f_mkfs+0xe4>
c0005845:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c000584d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005850:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005856:	77 07                	ja     c000585f <f_mkfs+0xf6>
c0005858:	8d 47 ff             	lea    eax,[edi-0x1]
c000585b:	85 f8                	test   eax,edi
c000585d:	74 02                	je     c0005861 <f_mkfs+0xf8>
c000585f:	31 ff                	xor    edi,edi
c0005861:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005869:	77 0a                	ja     c0005875 <f_mkfs+0x10c>
c000586b:	be 11 00 00 00       	mov    esi,0x11
c0005870:	e9 ea 06 00 00       	jmp    c0005f5f <f_mkfs+0x7f6>
c0005875:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005877:	85 ed                	test   ebp,ebp
c0005879:	89 eb                	mov    ebx,ebp
c000587b:	75 1e                	jne    c000589b <f_mkfs+0x132>
c000587d:	83 ec 0c             	sub    esp,0xc
c0005880:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005887:	25 00 fe ff ff       	and    eax,0xfffffe00
c000588c:	50                   	push   eax
c000588d:	e8 da 06 00 00       	call   c0005f6c <ff_memalloc>
c0005892:	83 c4 10             	add    esp,0x10
c0005895:	89 c3                	mov    ebx,eax
c0005897:	85 c0                	test   eax,eax
c0005899:	74 d0                	je     c000586b <f_mkfs+0x102>
c000589b:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c00058a3:	52                   	push   edx
c00058a4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00058a8:	50                   	push   eax
c00058a9:	6a 01                	push   0x1
c00058ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00058af:	e8 50 c8 ff ff       	call   c0002104 <disk_ioctl>
c00058b4:	83 c4 10             	add    esp,0x10
c00058b7:	85 c0                	test   eax,eax
c00058b9:	0f 85 49 06 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c00058bf:	89 f0                	mov    eax,esi
c00058c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00058c9:	83 e0 08             	and    eax,0x8
c00058cc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00058d0:	75 18                	jne    c00058ea <f_mkfs+0x181>
c00058d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058d6:	83 f8 3f             	cmp    eax,0x3f
c00058d9:	76 0f                	jbe    c00058ea <f_mkfs+0x181>
c00058db:	83 e8 3f             	sub    eax,0x3f
c00058de:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00058e6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00058ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00058ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00058f2:	83 f8 7f             	cmp    eax,0x7f
c00058f5:	0f 86 5b 02 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c00058fb:	b9 80 00 00 00       	mov    ecx,0x80
c0005900:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005906:	77 05                	ja     c000590d <f_mkfs+0x1a4>
c0005908:	c1 ef 09             	shr    edi,0x9
c000590b:	89 f9                	mov    ecx,edi
c000590d:	89 f0                	mov    eax,esi
c000590f:	89 f7                	mov    edi,esi
c0005911:	83 e0 01             	and    eax,0x1
c0005914:	83 e7 02             	and    edi,0x2
c0005917:	0f b6 c0             	movzx  eax,al
c000591a:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000591e:	74 0a                	je     c000592a <f_mkfs+0x1c1>
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 84 4f 01 00 00    	je     c0005a77 <f_mkfs+0x30e>
c0005928:	eb 37                	jmp    c0005961 <f_mkfs+0x1f8>
c000592a:	be 13 00 00 00       	mov    esi,0x13
c000592f:	85 c0                	test   eax,eax
c0005931:	75 2e                	jne    c0005961 <f_mkfs+0x1f8>
c0005933:	e9 e7 05 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005938:	83 f8 02             	cmp    eax,0x2
c000593b:	0f 85 0d 02 00 00    	jne    c0005b4e <f_mkfs+0x3e5>
c0005941:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005947:	0f 86 e4 01 00 00    	jbe    c0005b31 <f_mkfs+0x3c8>
c000594d:	85 c9                	test   ecx,ecx
c000594f:	0f 85 dc 05 00 00    	jne    c0005f31 <f_mkfs+0x7c8>
c0005955:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005958:	83 f9 40             	cmp    ecx,0x40
c000595b:	0f 87 e0 05 00 00    	ja     c0005f41 <f_mkfs+0x7d8>
c0005961:	89 cf                	mov    edi,ecx
c0005963:	85 c9                	test   ecx,ecx
c0005965:	75 1c                	jne    c0005983 <f_mkfs+0x21a>
c0005967:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000596b:	b8 80 f7 02 c0       	mov    eax,0xc002f780
c0005970:	c1 ee 0c             	shr    esi,0xc
c0005973:	bf 01 00 00 00       	mov    edi,0x1
c0005978:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000597b:	85 d2                	test   edx,edx
c000597d:	0f 85 63 01 00 00    	jne    c0005ae6 <f_mkfs+0x37d>
c0005983:	31 d2                	xor    edx,edx
c0005985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005989:	f7 f7                	div    edi
c000598b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005990:	0f 86 62 01 00 00    	jbe    c0005af8 <f_mkfs+0x38f>
c0005996:	83 c0 02             	add    eax,0x2
c0005999:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000599e:	01 c0                	add    eax,eax
c00059a0:	05 ff 01 00 00       	add    eax,0x1ff
c00059a5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00059ad:	c1 e8 09             	shr    eax,0x9
c00059b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059b8:	c1 e0 05             	shl    eax,0x5
c00059bb:	c1 e8 09             	shr    eax,0x9
c00059be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00059c2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00059c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00059cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059cf:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00059d3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00059d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059db:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00059e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00059e4:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00059e8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00059ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00059f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00059f4:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00059f8:	f7 d8                	neg    eax
c00059fa:	21 c6                	and    esi,eax
c00059fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a01:	29 d6                	sub    esi,edx
c0005a03:	83 f8 03             	cmp    eax,0x3
c0005a06:	0f 85 ff 00 00 00    	jne    c0005b0b <f_mkfs+0x3a2>
c0005a0c:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005a10:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005a14:	89 f8                	mov    eax,edi
c0005a16:	c1 e0 04             	shl    eax,0x4
c0005a19:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005a1d:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005a21:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005a25:	0f 82 2b 01 00 00    	jb     c0005b56 <f_mkfs+0x3ed>
c0005a2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a33:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005a37:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c0005a3c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005a40:	29 d0                	sub    eax,edx
c0005a42:	31 d2                	xor    edx,edx
c0005a44:	f7 f7                	div    edi
c0005a46:	89 c6                	mov    esi,eax
c0005a48:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4d:	83 f8 03             	cmp    eax,0x3
c0005a50:	0f 85 e2 fe ff ff    	jne    c0005938 <f_mkfs+0x1cf>
c0005a56:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005a5c:	0f 87 03 01 00 00    	ja     c0005b65 <f_mkfs+0x3fc>
c0005a62:	85 c9                	test   ecx,ecx
c0005a64:	0f 85 ec 00 00 00    	jne    c0005b56 <f_mkfs+0x3ed>
c0005a6a:	83 ff 01             	cmp    edi,0x1
c0005a6d:	0f 86 e3 00 00 00    	jbe    c0005b56 <f_mkfs+0x3ed>
c0005a73:	d1 ef                	shr    edi,1
c0005a75:	89 f9                	mov    ecx,edi
c0005a77:	89 ce                	mov    esi,ecx
c0005a79:	85 c9                	test   ecx,ecx
c0005a7b:	75 25                	jne    c0005aa2 <f_mkfs+0x339>
c0005a7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005a81:	b8 90 f7 02 c0       	mov    eax,0xc002f790
c0005a86:	c1 ee 11             	shr    esi,0x11
c0005a89:	b9 01 00 00 00       	mov    ecx,0x1
c0005a8e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005a91:	85 d2                	test   edx,edx
c0005a93:	74 0b                	je     c0005aa0 <f_mkfs+0x337>
c0005a95:	83 c0 02             	add    eax,0x2
c0005a98:	39 f2                	cmp    edx,esi
c0005a9a:	77 04                	ja     c0005aa0 <f_mkfs+0x337>
c0005a9c:	01 c9                	add    ecx,ecx
c0005a9e:	eb ee                	jmp    c0005a8e <f_mkfs+0x325>
c0005aa0:	31 f6                	xor    esi,esi
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa8:	f7 f1                	div    ecx
c0005aaa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005ab1:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005ab6:	c1 ea 09             	shr    edx,0x9
c0005ab9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005abe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005ac2:	0f 87 8e 00 00 00    	ja     c0005b56 <f_mkfs+0x3ed>
c0005ac8:	89 cf                	mov    edi,ecx
c0005aca:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005ad2:	89 f1                	mov    ecx,esi
c0005ad4:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005adc:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005ae1:	e9 dc fe ff ff       	jmp    c00059c2 <f_mkfs+0x259>
c0005ae6:	83 c0 02             	add    eax,0x2
c0005ae9:	39 f2                	cmp    edx,esi
c0005aeb:	0f 87 92 fe ff ff    	ja     c0005983 <f_mkfs+0x21a>
c0005af1:	01 ff                	add    edi,edi
c0005af3:	e9 80 fe ff ff       	jmp    c0005978 <f_mkfs+0x20f>
c0005af8:	8d 04 40             	lea    eax,[eax+eax*2]
c0005afb:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b00:	40                   	inc    eax
c0005b01:	d1 e8                	shr    eax,1
c0005b03:	83 c0 03             	add    eax,0x3
c0005b06:	e9 95 fe ff ff       	jmp    c00059a0 <f_mkfs+0x237>
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	89 f0                	mov    eax,esi
c0005b0f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b13:	85 d2                	test   edx,edx
c0005b15:	74 09                	je     c0005b20 <f_mkfs+0x3b7>
c0005b17:	4e                   	dec    esi
c0005b18:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005b1c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005b20:	89 f0                	mov    eax,esi
c0005b22:	31 d2                	xor    edx,edx
c0005b24:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005b28:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005b2c:	e9 e3 fe ff ff       	jmp    c0005a14 <f_mkfs+0x2ab>
c0005b31:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b37:	77 2c                	ja     c0005b65 <f_mkfs+0x3fc>
c0005b39:	85 c9                	test   ecx,ecx
c0005b3b:	75 19                	jne    c0005b56 <f_mkfs+0x3ed>
c0005b3d:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005b40:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b46:	0f 86 15 fe ff ff    	jbe    c0005961 <f_mkfs+0x1f8>
c0005b4c:	eb 08                	jmp    c0005b56 <f_mkfs+0x3ed>
c0005b4e:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005b54:	76 0a                	jbe    c0005b60 <f_mkfs+0x3f7>
c0005b56:	be 0e 00 00 00       	mov    esi,0xe
c0005b5b:	e9 bf 03 00 00       	jmp    c0005f1f <f_mkfs+0x7b6>
c0005b60:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005b65:	31 d2                	xor    edx,edx
c0005b67:	b9 00 02 00 00       	mov    ecx,0x200
c0005b6c:	89 d8                	mov    eax,ebx
c0005b6e:	e8 f1 c5 ff ff       	call   c0002164 <mem_set>
c0005b73:	b9 0b 00 00 00       	mov    ecx,0xb
c0005b78:	ba 2e f7 02 c0       	mov    edx,0xc002f72e
c0005b7d:	89 d8                	mov    eax,ebx
c0005b7f:	e8 cb c5 ff ff       	call   c000214f <mem_cpy>
c0005b84:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005b87:	ba 00 02 00 00       	mov    edx,0x200
c0005b8c:	e8 b7 c5 ff ff       	call   c0002148 <st_word>
c0005b91:	89 f8                	mov    eax,edi
c0005b93:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005b98:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005b9b:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005b9e:	e8 a5 c5 ff ff       	call   c0002148 <st_word>
c0005ba3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005ba7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005baa:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005baf:	83 f8 03             	cmp    eax,0x3
c0005bb2:	75 08                	jne    c0005bbc <f_mkfs+0x453>
c0005bb4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005bbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005bc0:	8d 43 11             	lea    eax,[ebx+0x11]
c0005bc3:	e8 80 c5 ff ff       	call   c0002148 <st_word>
c0005bc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005bcc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005bd2:	77 0a                	ja     c0005bde <f_mkfs+0x475>
c0005bd4:	8d 43 13             	lea    eax,[ebx+0x13]
c0005bd7:	e8 6c c5 ff ff       	call   c0002148 <st_word>
c0005bdc:	eb 08                	jmp    c0005be6 <f_mkfs+0x47d>
c0005bde:	8d 43 20             	lea    eax,[ebx+0x20]
c0005be1:	e8 66 c5 ff ff       	call   c000214c <st_dword>
c0005be6:	8d 43 18             	lea    eax,[ebx+0x18]
c0005be9:	ba 3f 00 00 00       	mov    edx,0x3f
c0005bee:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005bf2:	e8 51 c5 ff ff       	call   c0002148 <st_word>
c0005bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005bfa:	ba ff 00 00 00       	mov    edx,0xff
c0005bff:	e8 44 c5 ff ff       	call   c0002148 <st_word>
c0005c04:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005c07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005c0b:	e8 3c c5 ff ff       	call   c000214c <st_dword>
c0005c10:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c15:	83 f8 03             	cmp    eax,0x3
c0005c18:	75 57                	jne    c0005c71 <f_mkfs+0x508>
c0005c1a:	8d 43 43             	lea    eax,[ebx+0x43]
c0005c1d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c22:	e8 25 c5 ff ff       	call   c000214c <st_dword>
c0005c27:	8d 43 24             	lea    eax,[ebx+0x24]
c0005c2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005c2e:	e8 19 c5 ff ff       	call   c000214c <st_dword>
c0005c33:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005c36:	ba 02 00 00 00       	mov    edx,0x2
c0005c3b:	e8 0c c5 ff ff       	call   c000214c <st_dword>
c0005c40:	8d 43 30             	lea    eax,[ebx+0x30]
c0005c43:	ba 01 00 00 00       	mov    edx,0x1
c0005c48:	e8 fb c4 ff ff       	call   c0002148 <st_word>
c0005c4d:	8d 43 32             	lea    eax,[ebx+0x32]
c0005c50:	ba 06 00 00 00       	mov    edx,0x6
c0005c55:	e8 ee c4 ff ff       	call   c0002148 <st_word>
c0005c5a:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005c5e:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005c62:	8d 43 47             	lea    eax,[ebx+0x47]
c0005c65:	b9 13 00 00 00       	mov    ecx,0x13
c0005c6a:	ba 3a f7 02 c0       	mov    edx,0xc002f73a
c0005c6f:	eb 2f                	jmp    c0005ca0 <f_mkfs+0x537>
c0005c71:	8d 43 27             	lea    eax,[ebx+0x27]
c0005c74:	ba 00 00 21 50       	mov    edx,0x50210000
c0005c79:	e8 ce c4 ff ff       	call   c000214c <st_dword>
c0005c7e:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005c83:	8d 43 16             	lea    eax,[ebx+0x16]
c0005c86:	e8 bd c4 ff ff       	call   c0002148 <st_word>
c0005c8b:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005c8f:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005c93:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005c96:	b9 13 00 00 00       	mov    ecx,0x13
c0005c9b:	ba 4e f7 02 c0       	mov    edx,0xc002f74e
c0005ca0:	e8 aa c4 ff ff       	call   c000214f <mem_cpy>
c0005ca5:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005cab:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	e8 8f c4 ff ff       	call   c0002148 <st_word>
c0005cb9:	6a 01                	push   0x1
c0005cbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbf:	53                   	push   ebx
c0005cc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cc4:	e8 25 c4 ff ff       	call   c00020ee <disk_write>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	85 c0                	test   eax,eax
c0005cce:	0f 85 34 02 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005cd4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cd9:	83 f8 03             	cmp    eax,0x3
c0005cdc:	0f 85 98 00 00 00    	jne    c0005d7a <f_mkfs+0x611>
c0005ce2:	6a 01                	push   0x1
c0005ce4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005ce8:	83 c0 06             	add    eax,0x6
c0005ceb:	50                   	push   eax
c0005cec:	53                   	push   ebx
c0005ced:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cf1:	e8 f8 c3 ff ff       	call   c00020ee <disk_write>
c0005cf6:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfb:	31 d2                	xor    edx,edx
c0005cfd:	89 d8                	mov    eax,ebx
c0005cff:	e8 60 c4 ff ff       	call   c0002164 <mem_set>
c0005d04:	ba 52 52 61 41       	mov    edx,0x41615252
c0005d09:	89 d8                	mov    eax,ebx
c0005d0b:	e8 3c c4 ff ff       	call   c000214c <st_dword>
c0005d10:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005d16:	ba 72 72 41 61       	mov    edx,0x61417272
c0005d1b:	e8 2c c4 ff ff       	call   c000214c <st_dword>
c0005d20:	8d 56 ff             	lea    edx,[esi-0x1]
c0005d23:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005d29:	e8 1e c4 ff ff       	call   c000214c <st_dword>
c0005d2e:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005d34:	ba 02 00 00 00       	mov    edx,0x2
c0005d39:	e8 0e c4 ff ff       	call   c000214c <st_dword>
c0005d3e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005d43:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005d49:	e8 fa c3 ff ff       	call   c0002148 <st_word>
c0005d4e:	6a 01                	push   0x1
c0005d50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005d54:	83 c0 07             	add    eax,0x7
c0005d57:	50                   	push   eax
c0005d58:	53                   	push   ebx
c0005d59:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005d5d:	e8 8c c3 ff ff       	call   c00020ee <disk_write>
c0005d62:	83 c4 20             	add    esp,0x20
c0005d65:	6a 01                	push   0x1
c0005d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d6b:	40                   	inc    eax
c0005d6c:	50                   	push   eax
c0005d6d:	53                   	push   ebx
c0005d6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d72:	e8 77 c3 ff ff       	call   c00020ee <disk_write>
c0005d77:	83 c4 10             	add    esp,0x10
c0005d7a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005d7e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005d82:	c1 e8 09             	shr    eax,0x9
c0005d85:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005d8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d8f:	31 d2                	xor    edx,edx
c0005d91:	89 d8                	mov    eax,ebx
c0005d93:	e8 cc c3 ff ff       	call   c0002164 <mem_set>
c0005d98:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d9d:	31 c9                	xor    ecx,ecx
c0005d9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005da7:	83 f8 01             	cmp    eax,0x1
c0005daa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005dae:	0f 94 c1             	sete   cl
c0005db1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005db5:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005db9:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005dc1:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005dc9:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005dce:	75 21                	jne    c0005df1 <f_mkfs+0x688>
c0005dd0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005dd5:	89 d8                	mov    eax,ebx
c0005dd7:	e8 70 c3 ff ff       	call   c000214c <st_dword>
c0005ddc:	8d 43 04             	lea    eax,[ebx+0x4]
c0005ddf:	83 ca ff             	or     edx,0xffffffff
c0005de2:	e8 65 c3 ff ff       	call   c000214c <st_dword>
c0005de7:	8d 43 08             	lea    eax,[ebx+0x8]
c0005dea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005def:	eb 06                	jmp    c0005df7 <f_mkfs+0x68e>
c0005df1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005df5:	89 d8                	mov    eax,ebx
c0005df7:	e8 50 c3 ff ff       	call   c000214c <st_dword>
c0005dfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e00:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005e04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005e08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005e0c:	39 ce                	cmp    esi,ecx
c0005e0e:	76 02                	jbe    c0005e12 <f_mkfs+0x6a9>
c0005e10:	89 ce                	mov    esi,ecx
c0005e12:	56                   	push   esi
c0005e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e17:	53                   	push   ebx
c0005e18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e1c:	e8 cd c2 ff ff       	call   c00020ee <disk_write>
c0005e21:	83 c4 10             	add    esp,0x10
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 85 dc 00 00 00    	jne    c0005f08 <f_mkfs+0x79f>
c0005e2c:	31 d2                	xor    edx,edx
c0005e2e:	b9 00 02 00 00       	mov    ecx,0x200
c0005e33:	89 d8                	mov    eax,ebx
c0005e35:	e8 2a c3 ff ff       	call   c0002164 <mem_set>
c0005e3a:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e3e:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005e42:	75 c0                	jne    c0005e04 <f_mkfs+0x69b>
c0005e44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005e48:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005e50:	40                   	inc    eax
c0005e51:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005e55:	0f 87 6e ff ff ff    	ja     c0005dc9 <f_mkfs+0x660>
c0005e5b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e60:	83 f8 03             	cmp    eax,0x3
c0005e63:	74 04                	je     c0005e69 <f_mkfs+0x700>
c0005e65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005e69:	89 fe                	mov    esi,edi
c0005e6b:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005e6f:	76 04                	jbe    c0005e75 <f_mkfs+0x70c>
c0005e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e75:	56                   	push   esi
c0005e76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005e7a:	53                   	push   ebx
c0005e7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005e7f:	e8 6a c2 ff ff       	call   c00020ee <disk_write>
c0005e84:	83 c4 10             	add    esp,0x10
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 7d                	jne    c0005f08 <f_mkfs+0x79f>
c0005e8b:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005e8f:	29 f7                	sub    edi,esi
c0005e91:	75 d6                	jne    c0005e69 <f_mkfs+0x700>
c0005e93:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005e98:	b9 0c 00 00 00       	mov    ecx,0xc
c0005e9d:	83 f8 03             	cmp    eax,0x3
c0005ea0:	74 1e                	je     c0005ec0 <f_mkfs+0x757>
c0005ea2:	b9 06 00 00 00       	mov    ecx,0x6
c0005ea7:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005eaf:	77 0f                	ja     c0005ec0 <f_mkfs+0x757>
c0005eb1:	b9 04 00 00 00       	mov    ecx,0x4
c0005eb6:	83 f8 02             	cmp    eax,0x2
c0005eb9:	74 05                	je     c0005ec0 <f_mkfs+0x757>
c0005ebb:	b9 01 00 00 00       	mov    ecx,0x1
c0005ec0:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005ec5:	75 2a                	jne    c0005ef1 <f_mkfs+0x788>
c0005ec7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005ecb:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005ed3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005ed7:	83 ec 0c             	sub    esp,0xc
c0005eda:	53                   	push   ebx
c0005edb:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005edf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee3:	e8 89 d2 ff ff       	call   c0003171 <create_partition>
c0005ee8:	83 c4 10             	add    esp,0x10
c0005eeb:	89 c6                	mov    esi,eax
c0005eed:	85 c0                	test   eax,eax
c0005eef:	75 2e                	jne    c0005f1f <f_mkfs+0x7b6>
c0005ef1:	31 f6                	xor    esi,esi
c0005ef3:	50                   	push   eax
c0005ef4:	6a 00                	push   0x0
c0005ef6:	6a 00                	push   0x0
c0005ef8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005efc:	e8 03 c2 ff ff       	call   c0002104 <disk_ioctl>
c0005f01:	83 c4 10             	add    esp,0x10
c0005f04:	85 c0                	test   eax,eax
c0005f06:	74 17                	je     c0005f1f <f_mkfs+0x7b6>
c0005f08:	85 ed                	test   ebp,ebp
c0005f0a:	75 0c                	jne    c0005f18 <f_mkfs+0x7af>
c0005f0c:	83 ec 0c             	sub    esp,0xc
c0005f0f:	53                   	push   ebx
c0005f10:	e8 6f 00 00 00       	call   c0005f84 <ff_memfree>
c0005f15:	83 c4 10             	add    esp,0x10
c0005f18:	be 01 00 00 00       	mov    esi,0x1
c0005f1d:	eb 40                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f1f:	85 ed                	test   ebp,ebp
c0005f21:	75 3c                	jne    c0005f5f <f_mkfs+0x7f6>
c0005f23:	83 ec 0c             	sub    esp,0xc
c0005f26:	53                   	push   ebx
c0005f27:	e8 58 00 00 00       	call   c0005f84 <ff_memfree>
c0005f2c:	83 c4 10             	add    esp,0x10
c0005f2f:	eb 2e                	jmp    c0005f5f <f_mkfs+0x7f6>
c0005f31:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f36:	0f 85 3b fb ff ff    	jne    c0005a77 <f_mkfs+0x30e>
c0005f3c:	e9 15 fc ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f41:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005f46:	0f 85 31 fb ff ff    	jne    c0005a7d <f_mkfs+0x314>
c0005f4c:	89 cf                	mov    edi,ecx
c0005f4e:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005f54:	0f 86 29 fa ff ff    	jbe    c0005983 <f_mkfs+0x21a>
c0005f5a:	e9 f7 fb ff ff       	jmp    c0005b56 <f_mkfs+0x3ed>
c0005f5f:	83 c4 5c             	add    esp,0x5c
c0005f62:	89 f0                	mov    eax,esi
c0005f64:	5b                   	pop    ebx
c0005f65:	5e                   	pop    esi
c0005f66:	5f                   	pop    edi
c0005f67:	5d                   	pop    ebp
c0005f68:	c3                   	ret    
c0005f69:	66 90                	xchg   ax,ax
c0005f6b:	90                   	nop

c0005f6c <ff_memalloc>:
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	83 ec 0c             	sub    esp,0xc
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	e8 36 06 01 00       	call   c00165b1 <malloc>
c0005f7b:	83 c4 10             	add    esp,0x10
c0005f7e:	83 c4 0c             	add    esp,0xc
c0005f81:	c3                   	ret    
c0005f82:	66 90                	xchg   ax,ax

c0005f84 <ff_memfree>:
c0005f84:	83 ec 0c             	sub    esp,0xc
c0005f87:	83 ec 0c             	sub    esp,0xc
c0005f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8e:	e8 2e 06 01 00       	call   c00165c1 <free>
c0005f93:	83 c4 10             	add    esp,0x10
c0005f96:	90                   	nop
c0005f97:	83 c4 0c             	add    esp,0xc
c0005f9a:	c3                   	ret    
c0005f9b:	90                   	nop

c0005f9c <ff_uni2oem>:
c0005f9c:	83 ec 14             	sub    esp,0x14
c0005f9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005fa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fae:	c7 44 24 0c 80 fb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002fb80
c0005fb6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005fbb:	77 0b                	ja     c0005fc8 <ff_uni2oem+0x2c>
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005fc6:	eb 68                	jmp    c0006030 <ff_uni2oem+0x94>
c0005fc8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005fd0:	77 5e                	ja     c0006030 <ff_uni2oem+0x94>
c0005fd2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005fd6:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005fdb:	75 53                	jne    c0006030 <ff_uni2oem+0x94>
c0005fdd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005fe4:	eb 12                	jmp    c0005ff8 <ff_uni2oem+0x5c>
c0005fe6:	66 90                	xchg   ax,ax
c0005fe8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005fed:	83 c0 01             	add    eax,0x1
c0005ff0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ff8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ffd:	83 f8 7f             	cmp    eax,0x7f
c0006000:	77 1e                	ja     c0006020 <ff_uni2oem+0x84>
c0006002:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0006007:	01 c0                	add    eax,eax
c0006009:	89 c2                	mov    edx,eax
c000600b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000600f:	01 d0                	add    eax,edx
c0006011:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006014:	0f b7 c0             	movzx  eax,ax
c0006017:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000601b:	75 cb                	jne    c0005fe8 <ff_uni2oem+0x4c>
c000601d:	8d 76 00             	lea    esi,[esi+0x0]
c0006020:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006025:	83 e8 80             	sub    eax,0xffffff80
c0006028:	0f b6 c0             	movzx  eax,al
c000602b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0006030:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0006035:	83 c4 14             	add    esp,0x14
c0006038:	c3                   	ret    
c0006039:	8d 76 00             	lea    esi,[esi+0x0]

c000603c <ff_oem2uni>:
c000603c:	83 ec 18             	sub    esp,0x18
c000603f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006043:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006047:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000604c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0006050:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0006057:	c7 44 24 10 80 fb 02 c0 	mov    DWORD PTR [esp+0x10],0xc002fb80
c000605f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006064:	83 f8 7f             	cmp    eax,0x7f
c0006067:	77 0b                	ja     c0006074 <ff_oem2uni+0x38>
c0006069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000606d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0006072:	eb 34                	jmp    c00060a8 <ff_oem2uni+0x6c>
c0006074:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0006078:	3d b5 01 00 00       	cmp    eax,0x1b5
c000607d:	75 29                	jne    c00060a8 <ff_oem2uni+0x6c>
c000607f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006084:	3d ff 00 00 00       	cmp    eax,0xff
c0006089:	77 1d                	ja     c00060a8 <ff_oem2uni+0x6c>
c000608b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006090:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0006095:	01 c0                	add    eax,eax
c0006097:	89 c2                	mov    edx,eax
c0006099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000609d:	01 d0                	add    eax,edx
c000609f:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060a2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00060ad:	83 c4 18             	add    esp,0x18
c00060b0:	c3                   	ret    
c00060b1:	8d 76 00             	lea    esi,[esi+0x0]

c00060b4 <ff_wtoupper>:
c00060b4:	83 ec 10             	sub    esp,0x10
c00060b7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00060bf:	0f 87 ab 01 00 00    	ja     c0006270 <ff_wtoupper+0x1bc>
c00060c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00060c9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060ce:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00060d3:	3d ff 0f 00 00       	cmp    eax,0xfff
c00060d8:	77 0a                	ja     c00060e4 <ff_wtoupper+0x30>
c00060da:	b8 80 f9 02 c0       	mov    eax,0xc002f980
c00060df:	eb 0b                	jmp    c00060ec <ff_wtoupper+0x38>
c00060e1:	8d 76 00             	lea    esi,[esi+0x0]
c00060e4:	b8 c0 f8 02 c0       	mov    eax,0xc002f8c0
c00060e9:	8d 76 00             	lea    esi,[esi+0x0]
c00060ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f4:	8d 50 02             	lea    edx,[eax+0x2]
c00060f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00060fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0006103:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006108:	85 c0                	test   eax,eax
c000610a:	0f 84 54 01 00 00    	je     c0006264 <ff_wtoupper+0x1b0>
c0006110:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006115:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000611a:	39 c2                	cmp    edx,eax
c000611c:	0f 82 42 01 00 00    	jb     c0006264 <ff_wtoupper+0x1b0>
c0006122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006126:	8d 50 02             	lea    edx,[eax+0x2]
c0006129:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000612d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006130:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006135:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000613a:	c1 e8 08             	shr    eax,0x8
c000613d:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006142:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0006147:	0f b6 c0             	movzx  eax,al
c000614a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000614f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006154:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0006159:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000615e:	01 ca                	add    edx,ecx
c0006160:	39 d0                	cmp    eax,edx
c0006162:	0f 8d d8 00 00 00    	jge    c0006240 <ff_wtoupper+0x18c>
c0006168:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000616d:	83 f8 08             	cmp    eax,0x8
c0006170:	0f 87 ea 00 00 00    	ja     c0006260 <ff_wtoupper+0x1ac>
c0006176:	8b 04 85 80 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0780]
c000617d:	ff e0                	jmp    eax
c000617f:	90                   	nop
c0006180:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006185:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000618a:	29 c2                	sub    edx,eax
c000618c:	89 d0                	mov    eax,edx
c000618e:	01 c0                	add    eax,eax
c0006190:	89 c2                	mov    edx,eax
c0006192:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006196:	01 d0                	add    eax,edx
c0006198:	66 8b 00             	mov    ax,WORD PTR [eax]
c000619b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061a0:	e9 97 00 00 00       	jmp    c000623c <ff_wtoupper+0x188>
c00061a5:	8d 76 00             	lea    esi,[esi+0x0]
c00061a8:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00061ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00061b1:	89 d1                	mov    ecx,edx
c00061b3:	29 c1                	sub    ecx,eax
c00061b5:	89 c8                	mov    eax,ecx
c00061b7:	83 e0 01             	and    eax,0x1
c00061ba:	89 c2                	mov    edx,eax
c00061bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061c1:	29 d0                	sub    eax,edx
c00061c3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061c8:	eb 72                	jmp    c000623c <ff_wtoupper+0x188>
c00061ca:	66 90                	xchg   ax,ax
c00061cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061d1:	83 e8 10             	sub    eax,0x10
c00061d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061d9:	eb 61                	jmp    c000623c <ff_wtoupper+0x188>
c00061db:	90                   	nop
c00061dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061e1:	83 e8 20             	sub    eax,0x20
c00061e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061e9:	eb 51                	jmp    c000623c <ff_wtoupper+0x188>
c00061eb:	90                   	nop
c00061ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00061f1:	83 e8 30             	sub    eax,0x30
c00061f4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00061f9:	eb 41                	jmp    c000623c <ff_wtoupper+0x188>
c00061fb:	90                   	nop
c00061fc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006201:	83 e8 1a             	sub    eax,0x1a
c0006204:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006209:	eb 31                	jmp    c000623c <ff_wtoupper+0x188>
c000620b:	90                   	nop
c000620c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006211:	83 c0 08             	add    eax,0x8
c0006214:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006219:	eb 21                	jmp    c000623c <ff_wtoupper+0x188>
c000621b:	90                   	nop
c000621c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006221:	83 e8 50             	sub    eax,0x50
c0006224:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006229:	eb 11                	jmp    c000623c <ff_wtoupper+0x188>
c000622b:	90                   	nop
c000622c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006231:	2d 60 1c 00 00       	sub    eax,0x1c60
c0006236:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000623b:	90                   	nop
c000623c:	eb 22                	jmp    c0006260 <ff_wtoupper+0x1ac>
c000623e:	66 90                	xchg   ax,ax
c0006240:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 85 a3 fe ff ff    	jne    c00060f0 <ff_wtoupper+0x3c>
c000624d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006252:	01 c0                	add    eax,eax
c0006254:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006258:	e9 93 fe ff ff       	jmp    c00060f0 <ff_wtoupper+0x3c>
c000625d:	8d 76 00             	lea    esi,[esi+0x0]
c0006260:	90                   	nop
c0006261:	8d 76 00             	lea    esi,[esi+0x0]
c0006264:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006269:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000626d:	8d 76 00             	lea    esi,[esi+0x0]
c0006270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006274:	83 c4 10             	add    esp,0x10
c0006277:	c3                   	ret    

c0006278 <utf2ucs>:
c0006278:	57                   	push   edi
c0006279:	31 c9                	xor    ecx,ecx
c000627b:	56                   	push   esi
c000627c:	89 d7                	mov    edi,edx
c000627e:	53                   	push   ebx
c000627f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006283:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006287:	89 de                	mov    esi,ebx
c0006289:	c1 fe 08             	sar    esi,0x8
c000628c:	89 f2                	mov    edx,esi
c000628e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006291:	41                   	inc    ecx
c0006292:	85 db                	test   ebx,ebx
c0006294:	75 e9                	jne    c000627f <utf2ucs+0x7>
c0006296:	5b                   	pop    ebx
c0006297:	5e                   	pop    esi
c0006298:	5f                   	pop    edi
c0006299:	c3                   	ret    

c000629a <ucs2utfn>:
c000629a:	83 e1 fe             	and    ecx,0xfffffffe
c000629d:	01 d1                	add    ecx,edx
c000629f:	39 d1                	cmp    ecx,edx
c00062a1:	75 04                	jne    c00062a7 <ucs2utfn+0xd>
c00062a3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00062a6:	c3                   	ret    
c00062a7:	57                   	push   edi
c00062a8:	56                   	push   esi
c00062a9:	53                   	push   ebx
c00062aa:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c00062ad:	83 c2 02             	add    edx,0x2
c00062b0:	89 de                	mov    esi,ebx
c00062b2:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c00062b6:	c1 e6 08             	shl    esi,0x8
c00062b9:	09 f3                	or     ebx,esi
c00062bb:	83 fb 3b             	cmp    ebx,0x3b
c00062be:	74 50                	je     c0006310 <ucs2utfn+0x76>
c00062c0:	83 fb 7f             	cmp    ebx,0x7f
c00062c3:	7f 05                	jg     c00062ca <ucs2utfn+0x30>
c00062c5:	88 18                	mov    BYTE PTR [eax],bl
c00062c7:	40                   	inc    eax
c00062c8:	eb 42                	jmp    c000630c <ucs2utfn+0x72>
c00062ca:	89 de                	mov    esi,ebx
c00062cc:	89 df                	mov    edi,ebx
c00062ce:	c1 fe 06             	sar    esi,0x6
c00062d1:	83 e7 3f             	and    edi,0x3f
c00062d4:	83 cf 80             	or     edi,0xffffff80
c00062d7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00062dd:	7f 12                	jg     c00062f1 <ucs2utfn+0x57>
c00062df:	83 ce c0             	or     esi,0xffffffc0
c00062e2:	83 c0 02             	add    eax,0x2
c00062e5:	89 f3                	mov    ebx,esi
c00062e7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00062ea:	89 fb                	mov    ebx,edi
c00062ec:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00062ef:	eb 1b                	jmp    c000630c <ucs2utfn+0x72>
c00062f1:	c1 fb 0c             	sar    ebx,0xc
c00062f4:	83 e6 3f             	and    esi,0x3f
c00062f7:	83 cb e0             	or     ebx,0xffffffe0
c00062fa:	83 ce 80             	or     esi,0xffffff80
c00062fd:	88 18                	mov    BYTE PTR [eax],bl
c00062ff:	89 f3                	mov    ebx,esi
c0006301:	83 c0 03             	add    eax,0x3
c0006304:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006307:	89 fb                	mov    ebx,edi
c0006309:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000630c:	39 d1                	cmp    ecx,edx
c000630e:	75 9a                	jne    c00062aa <ucs2utfn+0x10>
c0006310:	5b                   	pop    ebx
c0006311:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006314:	5e                   	pop    esi
c0006315:	5f                   	pop    edi
c0006316:	c3                   	ret    

c0006317 <isjoliet>:
c0006317:	31 d2                	xor    edx,edx
c0006319:	80 38 25             	cmp    BYTE PTR [eax],0x25
c000631c:	75 26                	jne    c0006344 <isjoliet+0x2d>
c000631e:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006322:	75 20                	jne    c0006344 <isjoliet+0x2d>
c0006324:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006328:	ba 02 00 00 00       	mov    edx,0x2
c000632d:	83 f8 43             	cmp    eax,0x43
c0006330:	74 12                	je     c0006344 <isjoliet+0x2d>
c0006332:	ba 03 00 00 00       	mov    edx,0x3
c0006337:	83 f8 45             	cmp    eax,0x45
c000633a:	74 08                	je     c0006344 <isjoliet+0x2d>
c000633c:	31 d2                	xor    edx,edx
c000633e:	83 f8 40             	cmp    eax,0x40
c0006341:	0f 94 c2             	sete   dl
c0006344:	89 d0                	mov    eax,edx
c0006346:	c3                   	ret    

c0006347 <htohl_32>:
c0006347:	8b 00                	mov    eax,DWORD PTR [eax]
c0006349:	c3                   	ret    

c000634a <iso_733>:
c000634a:	eb fb                	jmp    c0006347 <htohl_32>

c000634c <bgrad_cache>:
c000634c:	83 fa 0e             	cmp    edx,0xe
c000634f:	77 16                	ja     c0006367 <bgrad_cache+0x1b>
c0006351:	53                   	push   ebx
c0006352:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006355:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006359:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000635c:	42                   	inc    edx
c000635d:	83 fa 0f             	cmp    edx,0xf
c0006360:	75 f3                	jne    c0006355 <bgrad_cache+0x9>
c0006362:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006365:	5b                   	pop    ebx
c0006366:	c3                   	ret    
c0006367:	c3                   	ret    

c0006368 <ucscompare>:
c0006368:	55                   	push   ebp
c0006369:	57                   	push   edi
c000636a:	89 c7                	mov    edi,eax
c000636c:	56                   	push   esi
c000636d:	89 d6                	mov    esi,edx
c000636f:	53                   	push   ebx
c0006370:	31 d2                	xor    edx,edx
c0006372:	83 ec 1c             	sub    esp,0x1c
c0006375:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006379:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000637e:	c1 e3 08             	shl    ebx,0x8
c0006381:	09 c3                	or     ebx,eax
c0006383:	39 ca                	cmp    edx,ecx
c0006385:	7d 42                	jge    c00063c9 <ucscompare+0x61>
c0006387:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000638b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006390:	c1 e0 08             	shl    eax,0x8
c0006393:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006397:	09 e8                	or     eax,ebp
c0006399:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000639d:	83 f8 3b             	cmp    eax,0x3b
c00063a0:	74 27                	je     c00063c9 <ucscompare+0x61>
c00063a2:	83 ec 0c             	sub    esp,0xc
c00063a5:	50                   	push   eax
c00063a6:	e8 a5 a5 ff ff       	call   c0000950 <tolower>
c00063ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00063ae:	89 c5                	mov    ebp,eax
c00063b0:	e8 9b a5 ff ff       	call   c0000950 <tolower>
c00063b5:	83 c4 10             	add    esp,0x10
c00063b8:	39 c5                	cmp    ebp,eax
c00063ba:	75 20                	jne    c00063dc <ucscompare+0x74>
c00063bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00063c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00063c4:	83 c2 02             	add    edx,0x2
c00063c7:	eb ac                	jmp    c0006375 <ucscompare+0xd>
c00063c9:	85 db                	test   ebx,ebx
c00063cb:	0f 95 c2             	setne  dl
c00063ce:	31 c0                	xor    eax,eax
c00063d0:	83 fb 2f             	cmp    ebx,0x2f
c00063d3:	0f 95 c0             	setne  al
c00063d6:	21 d0                	and    eax,edx
c00063d8:	f7 d8                	neg    eax
c00063da:	eb 03                	jmp    c00063df <ucscompare+0x77>
c00063dc:	83 c8 ff             	or     eax,0xffffffff
c00063df:	83 c4 1c             	add    esp,0x1c
c00063e2:	5b                   	pop    ebx
c00063e3:	5e                   	pop    esi
c00063e4:	5f                   	pop    edi
c00063e5:	5d                   	pop    ebp
c00063e6:	c3                   	ret    

c00063e7 <fncompare>:
c00063e7:	55                   	push   ebp
c00063e8:	57                   	push   edi
c00063e9:	89 c7                	mov    edi,eax
c00063eb:	56                   	push   esi
c00063ec:	89 ce                	mov    esi,ecx
c00063ee:	53                   	push   ebx
c00063ef:	31 db                	xor    ebx,ebx
c00063f1:	83 ec 1c             	sub    esp,0x1c
c00063f4:	39 d3                	cmp    ebx,edx
c00063f6:	7d 45                	jge    c000643d <fncompare+0x56>
c00063f8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00063fc:	83 f8 3b             	cmp    eax,0x3b
c00063ff:	74 3c                	je     c000643d <fncompare+0x56>
c0006401:	83 f8 2e             	cmp    eax,0x2e
c0006404:	75 0e                	jne    c0006414 <fncompare+0x2d>
c0006406:	8d 4a ff             	lea    ecx,[edx-0x1]
c0006409:	39 d9                	cmp    ecx,ebx
c000640b:	74 30                	je     c000643d <fncompare+0x56>
c000640d:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0006412:	74 29                	je     c000643d <fncompare+0x56>
c0006414:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006418:	83 ec 0c             	sub    esp,0xc
c000641b:	50                   	push   eax
c000641c:	e8 2f a5 ff ff       	call   c0000950 <tolower>
c0006421:	89 c5                	mov    ebp,eax
c0006423:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006427:	89 04 24             	mov    DWORD PTR [esp],eax
c000642a:	e8 21 a5 ff ff       	call   c0000950 <tolower>
c000642f:	83 c4 10             	add    esp,0x10
c0006432:	39 c5                	cmp    ebp,eax
c0006434:	75 1e                	jne    c0006454 <fncompare+0x6d>
c0006436:	43                   	inc    ebx
c0006437:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000643b:	eb b7                	jmp    c00063f4 <fncompare+0xd>
c000643d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	0f 95 c1             	setne  cl
c0006446:	31 c0                	xor    eax,eax
c0006448:	83 fa 2f             	cmp    edx,0x2f
c000644b:	0f 95 c0             	setne  al
c000644e:	21 c8                	and    eax,ecx
c0006450:	f7 d8                	neg    eax
c0006452:	eb 03                	jmp    c0006457 <fncompare+0x70>
c0006454:	83 c8 ff             	or     eax,0xffffffff
c0006457:	83 c4 1c             	add    esp,0x1c
c000645a:	5b                   	pop    ebx
c000645b:	5e                   	pop    esi
c000645c:	5f                   	pop    edi
c000645d:	5d                   	pop    ebp
c000645e:	c3                   	ret    

c000645f <bclear_cache>:
c000645f:	83 ec 18             	sub    esp,0x18
c0006462:	68 80 fc 02 c0       	push   0xc002fc80
c0006467:	e8 c4 30 02 00       	call   c0029530 <iso_kprintf>
c000646c:	83 c4 10             	add    esp,0x10
c000646f:	31 c0                	xor    eax,eax
c0006471:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006478:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000647e:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c0006485:	40                   	inc    eax
c0006486:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000648c:	83 f8 10             	cmp    eax,0x10
c000648f:	75 e0                	jne    c0006471 <bclear_cache+0x12>
c0006491:	83 c4 0c             	add    esp,0xc
c0006494:	c3                   	ret    

c0006495 <bclear>:
c0006495:	eb c8                	jmp    c000645f <bclear_cache>

c0006497 <iso_break_all>:
c0006497:	83 ec 18             	sub    esp,0x18
c000649a:	68 8e fc 02 c0       	push   0xc002fc8e
c000649f:	e8 8c 30 02 00       	call   c0029530 <iso_kprintf>
c00064a4:	83 c4 10             	add    esp,0x10
c00064a7:	31 c0                	xor    eax,eax
c00064a9:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c00064b3:	05 94 00 00 00       	add    eax,0x94
c00064b8:	3d 40 09 00 00       	cmp    eax,0x940
c00064bd:	75 ea                	jne    c00064a9 <iso_break_all+0x12>
c00064bf:	83 c4 0c             	add    esp,0xc
c00064c2:	c3                   	ret    

c00064c3 <isoReadDiscSector>:
c00064c3:	83 ec 0c             	sub    esp,0xc
c00064c6:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00064cd:	50                   	push   eax
c00064ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00064da:	e8 f5 2f 02 00       	call   c00294d4 <isoReadDiscSectorHelper>
c00064df:	83 c4 1c             	add    esp,0x1c
c00064e2:	c3                   	ret    

c00064e3 <bread_cache>:
c00064e3:	55                   	push   ebp
c00064e4:	57                   	push   edi
c00064e5:	89 d7                	mov    edi,edx
c00064e7:	56                   	push   esi
c00064e8:	ba 0f 00 00 00       	mov    edx,0xf
c00064ed:	53                   	push   ebx
c00064ee:	89 c6                	mov    esi,eax
c00064f0:	83 ec 0c             	sub    esp,0xc
c00064f3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00064f6:	39 38                	cmp    DWORD PTR [eax],edi
c00064f8:	74 3c                	je     c0006536 <bread_cache+0x53>
c00064fa:	4a                   	dec    edx
c00064fb:	83 fa ff             	cmp    edx,0xffffffff
c00064fe:	75 f3                	jne    c00064f3 <bread_cache+0x10>
c0006500:	31 db                	xor    ebx,ebx
c0006502:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006505:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0006508:	74 08                	je     c0006512 <bread_cache+0x2f>
c000650a:	43                   	inc    ebx
c000650b:	83 fb 10             	cmp    ebx,0x10
c000650e:	75 f2                	jne    c0006502 <bread_cache+0x1f>
c0006510:	31 db                	xor    ebx,ebx
c0006512:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006515:	50                   	push   eax
c0006516:	6a 01                	push   0x1
c0006518:	57                   	push   edi
c0006519:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000651c:	83 c0 04             	add    eax,0x4
c000651f:	50                   	push   eax
c0006520:	e8 9e ff ff ff       	call   c00064c3 <isoReadDiscSector>
c0006525:	83 c4 10             	add    esp,0x10
c0006528:	83 c9 ff             	or     ecx,0xffffffff
c000652b:	85 c0                	test   eax,eax
c000652d:	78 13                	js     c0006542 <bread_cache+0x5f>
c000652f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006532:	89 da                	mov    edx,ebx
c0006534:	89 38                	mov    DWORD PTR [eax],edi
c0006536:	89 f0                	mov    eax,esi
c0006538:	e8 0f fe ff ff       	call   c000634c <bgrad_cache>
c000653d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006542:	83 c4 0c             	add    esp,0xc
c0006545:	89 c8                	mov    eax,ecx
c0006547:	5b                   	pop    ebx
c0006548:	5e                   	pop    esi
c0006549:	5f                   	pop    edi
c000654a:	5d                   	pop    ebp
c000654b:	c3                   	ret    

c000654c <biread>:
c000654c:	89 c2                	mov    edx,eax
c000654e:	b8 80 60 03 c0       	mov    eax,0xc0036080
c0006553:	eb 8e                	jmp    c00064e3 <bread_cache>

c0006555 <bdread>:
c0006555:	89 c2                	mov    edx,eax
c0006557:	b8 20 60 03 c0       	mov    eax,0xc0036020
c000655c:	eb 85                	jmp    c00064e3 <bread_cache>

c000655e <strnicmp>:
c000655e:	55                   	push   ebp
c000655f:	57                   	push   edi
c0006560:	31 ff                	xor    edi,edi
c0006562:	56                   	push   esi
c0006563:	53                   	push   ebx
c0006564:	83 ec 0c             	sub    esp,0xc
c0006567:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000656b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000656f:	74 43                	je     c00065b4 <strnicmp+0x56>
c0006571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006575:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006579:	85 c0                	test   eax,eax
c000657b:	74 37                	je     c00065b4 <strnicmp+0x56>
c000657d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006581:	85 d2                	test   edx,edx
c0006583:	74 2f                	je     c00065b4 <strnicmp+0x56>
c0006585:	39 d0                	cmp    eax,edx
c0006587:	8d 6f 01             	lea    ebp,[edi+0x1]
c000658a:	75 04                	jne    c0006590 <strnicmp+0x32>
c000658c:	89 ef                	mov    edi,ebp
c000658e:	eb db                	jmp    c000656b <strnicmp+0xd>
c0006590:	83 ec 0c             	sub    esp,0xc
c0006593:	50                   	push   eax
c0006594:	e8 b7 a3 ff ff       	call   c0000950 <tolower>
c0006599:	89 c3                	mov    ebx,eax
c000659b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000659f:	89 ef                	mov    edi,ebp
c00065a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00065a4:	e8 a7 a3 ff ff       	call   c0000950 <tolower>
c00065a9:	83 c4 10             	add    esp,0x10
c00065ac:	29 c3                	sub    ebx,eax
c00065ae:	89 d8                	mov    eax,ebx
c00065b0:	74 b9                	je     c000656b <strnicmp+0xd>
c00065b2:	eb 02                	jmp    c00065b6 <strnicmp+0x58>
c00065b4:	31 c0                	xor    eax,eax
c00065b6:	83 c4 0c             	add    esp,0xc
c00065b9:	5b                   	pop    ebx
c00065ba:	5e                   	pop    esi
c00065bb:	5f                   	pop    edi
c00065bc:	5d                   	pop    ebp
c00065bd:	c3                   	ret    

c00065be <find_object>:
c00065be:	55                   	push   ebp
c00065bf:	57                   	push   edi
c00065c0:	89 c7                	mov    edi,eax
c00065c2:	56                   	push   esi
c00065c3:	53                   	push   ebx
c00065c4:	89 d3                	mov    ebx,edx
c00065c6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00065cc:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00065d3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00065d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065db:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00065e2:	74 0b                	je     c00065ef <find_object+0x31>
c00065e4:	89 fa                	mov    edx,edi
c00065e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065ea:	e8 89 fc ff ff       	call   c0006278 <utf2ucs>
c00065ef:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00065f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00065f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00065fb:	7e 11                	jle    c000660e <find_object+0x50>
c00065fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006601:	e8 46 ff ff ff       	call   c000654c <biread>
c0006606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000660a:	85 c0                	test   eax,eax
c000660c:	79 07                	jns    c0006615 <find_object+0x57>
c000660e:	31 db                	xor    ebx,ebx
c0006610:	e9 56 01 00 00       	jmp    c000676b <find_object+0x1ad>
c0006615:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000661d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006625:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c000662c:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006630:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006633:	85 f6                	test   esi,esi
c0006635:	75 0e                	jne    c0006645 <find_object+0x87>
c0006637:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000663b:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006643:	eb b1                	jmp    c00065f6 <find_object+0x38>
c0006645:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c000664b:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c000664f:	85 ed                	test   ebp,ebp
c0006651:	89 c8                	mov    eax,ecx
c0006653:	74 2b                	je     c0006680 <find_object+0xc2>
c0006655:	8d 43 21             	lea    eax,[ebx+0x21]
c0006658:	8d 54 24 20          	lea    edx,[esp+0x20]
c000665c:	e8 07 fd ff ff       	call   c0006368 <ucscompare>
c0006661:	85 c0                	test   eax,eax
c0006663:	0f 84 bf 00 00 00    	je     c0006728 <find_object+0x16a>
c0006669:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000666c:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006670:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006678:	0f 8e da 00 00 00    	jle    c0006758 <find_object+0x19a>
c000667e:	eb b7                	jmp    c0006637 <find_object+0x79>
c0006680:	29 ce                	sub    esi,ecx
c0006682:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006686:	a8 01                	test   al,0x1
c0006688:	74 05                	je     c000668f <find_object+0xd1>
c000668a:	83 ee 21             	sub    esi,0x21
c000668d:	eb 5a                	jmp    c00066e9 <find_object+0x12b>
c000668f:	42                   	inc    edx
c0006690:	83 ee 22             	sub    esi,0x22
c0006693:	eb 54                	jmp    c00066e9 <find_object+0x12b>
c0006695:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006698:	48                   	dec    eax
c0006699:	3c 01                	cmp    al,0x1
c000669b:	77 51                	ja     c00066ee <find_object+0x130>
c000669d:	50                   	push   eax
c000669e:	6a 02                	push   0x2
c00066a0:	68 9d fc 02 c0       	push   0xc002fc9d
c00066a5:	52                   	push   edx
c00066a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00066aa:	e8 31 a1 ff ff       	call   c00007e0 <strncmp>
c00066af:	83 c4 10             	add    esp,0x10
c00066b2:	85 c0                	test   eax,eax
c00066b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066b8:	75 27                	jne    c00066e1 <find_object+0x123>
c00066ba:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066be:	8d 68 fb             	lea    ebp,[eax-0x5]
c00066c1:	50                   	push   eax
c00066c2:	8d 42 05             	lea    eax,[edx+0x5]
c00066c5:	55                   	push   ebp
c00066c6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00066ca:	50                   	push   eax
c00066cb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00066cf:	50                   	push   eax
c00066d0:	e8 ab 9f ff ff       	call   c0000680 <strncpy>
c00066d5:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c00066da:	83 c4 10             	add    esp,0x10
c00066dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00066e1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00066e5:	29 c6                	sub    esi,eax
c00066e7:	01 c2                	add    edx,eax
c00066e9:	83 fe 03             	cmp    esi,0x3
c00066ec:	7f a7                	jg     c0006695 <find_object+0xd7>
c00066ee:	85 ed                	test   ebp,ebp
c00066f0:	7e 40                	jle    c0006732 <find_object+0x174>
c00066f2:	51                   	push   ecx
c00066f3:	51                   	push   ecx
c00066f4:	6a 2f                	push   0x2f
c00066f6:	57                   	push   edi
c00066f7:	e8 a4 a0 ff ff       	call   c00007a0 <strchr>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	85 c0                	test   eax,eax
c0006701:	74 04                	je     c0006707 <find_object+0x149>
c0006703:	29 f8                	sub    eax,edi
c0006705:	eb 0c                	jmp    c0006713 <find_object+0x155>
c0006707:	83 ec 0c             	sub    esp,0xc
c000670a:	57                   	push   edi
c000670b:	e8 60 9e ff ff       	call   c0000570 <strlen>
c0006710:	83 c4 10             	add    esp,0x10
c0006713:	52                   	push   edx
c0006714:	50                   	push   eax
c0006715:	57                   	push   edi
c0006716:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000671a:	50                   	push   eax
c000671b:	e8 3e fe ff ff       	call   c000655e <strnicmp>
c0006720:	83 c4 10             	add    esp,0x10
c0006723:	e9 39 ff ff ff       	jmp    c0006661 <find_object+0xa3>
c0006728:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000672c:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c0006730:	eb 1e                	jmp    c0006750 <find_object+0x192>
c0006732:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006736:	8d 43 21             	lea    eax,[ebx+0x21]
c0006739:	89 f9                	mov    ecx,edi
c000673b:	e8 a7 fc ff ff       	call   c00063e7 <fncompare>
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 21 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006748:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000674c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006750:	0f 85 13 ff ff ff    	jne    c0006669 <find_object+0xab>
c0006756:	eb 13                	jmp    c000676b <find_object+0x1ad>
c0006758:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000675c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006760:	0f 8f b7 fe ff ff    	jg     c000661d <find_object+0x5f>
c0006766:	e9 cc fe ff ff       	jmp    c0006637 <find_object+0x79>
c000676b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006771:	89 d8                	mov    eax,ebx
c0006773:	5b                   	pop    ebx
c0006774:	5e                   	pop    esi
c0006775:	5f                   	pop    edi
c0006776:	5d                   	pop    ebp
c0006777:	c3                   	ret    

c0006778 <find_object_path>:
c0006778:	55                   	push   ebp
c0006779:	57                   	push   edi
c000677a:	89 d7                	mov    edi,edx
c000677c:	56                   	push   esi
c000677d:	89 c6                	mov    esi,eax
c000677f:	53                   	push   ebx
c0006780:	89 cb                	mov    ebx,ecx
c0006782:	83 ec 0c             	sub    esp,0xc
c0006785:	50                   	push   eax
c0006786:	50                   	push   eax
c0006787:	6a 2f                	push   0x2f
c0006789:	56                   	push   esi
c000678a:	e8 11 a0 ff ff       	call   c00007a0 <strchr>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	89 c5                	mov    ebp,eax
c0006794:	85 c0                	test   eax,eax
c0006796:	74 3a                	je     c00067d2 <find_object_path+0x5a>
c0006798:	39 ee                	cmp    esi,ebp
c000679a:	74 31                	je     c00067cd <find_object_path+0x55>
c000679c:	8d 43 0a             	lea    eax,[ebx+0xa]
c000679f:	e8 a6 fb ff ff       	call   c000634a <iso_733>
c00067a4:	89 c2                	mov    edx,eax
c00067a6:	8d 43 02             	lea    eax,[ebx+0x2]
c00067a9:	e8 9c fb ff ff       	call   c000634a <iso_733>
c00067ae:	83 ec 0c             	sub    esp,0xc
c00067b1:	89 c1                	mov    ecx,eax
c00067b3:	52                   	push   edx
c00067b4:	89 f0                	mov    eax,esi
c00067b6:	ba 01 00 00 00       	mov    edx,0x1
c00067bb:	e8 fe fd ff ff       	call   c00065be <find_object>
c00067c0:	83 c4 10             	add    esp,0x10
c00067c3:	89 c3                	mov    ebx,eax
c00067c5:	85 c0                	test   eax,eax
c00067c7:	75 04                	jne    c00067cd <find_object_path+0x55>
c00067c9:	31 db                	xor    ebx,ebx
c00067cb:	eb 36                	jmp    c0006803 <find_object_path+0x8b>
c00067cd:	8d 75 01             	lea    esi,[ebp+0x1]
c00067d0:	eb b3                	jmp    c0006785 <find_object_path+0xd>
c00067d2:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067d5:	74 28                	je     c00067ff <find_object_path+0x87>
c00067d7:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067da:	e8 6b fb ff ff       	call   c000634a <iso_733>
c00067df:	89 c2                	mov    edx,eax
c00067e1:	8d 43 02             	lea    eax,[ebx+0x2]
c00067e4:	e8 61 fb ff ff       	call   c000634a <iso_733>
c00067e9:	83 ec 0c             	sub    esp,0xc
c00067ec:	89 c1                	mov    ecx,eax
c00067ee:	52                   	push   edx
c00067ef:	89 f0                	mov    eax,esi
c00067f1:	89 fa                	mov    edx,edi
c00067f3:	e8 c6 fd ff ff       	call   c00065be <find_object>
c00067f8:	83 c4 10             	add    esp,0x10
c00067fb:	89 c3                	mov    ebx,eax
c00067fd:	eb 04                	jmp    c0006803 <find_object_path+0x8b>
c00067ff:	85 ff                	test   edi,edi
c0006801:	74 c6                	je     c00067c9 <find_object_path+0x51>
c0006803:	83 c4 0c             	add    esp,0xc
c0006806:	89 d8                	mov    eax,ebx
c0006808:	5b                   	pop    ebx
c0006809:	5e                   	pop    esi
c000680a:	5f                   	pop    edi
c000680b:	5d                   	pop    ebp
c000680c:	c3                   	ret    

c000680d <stricmp>:
c000680d:	57                   	push   edi
c000680e:	56                   	push   esi
c000680f:	31 f6                	xor    esi,esi
c0006811:	53                   	push   ebx
c0006812:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006816:	83 ec 0c             	sub    esp,0xc
c0006819:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c000681d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006821:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c0006825:	50                   	push   eax
c0006826:	e8 05 a1 ff ff       	call   c0000930 <toupper>
c000682b:	89 04 24             	mov    DWORD PTR [esp],eax
c000682e:	e8 1d a1 ff ff       	call   c0000950 <tolower>
c0006833:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006836:	89 c3                	mov    ebx,eax
c0006838:	e8 f3 a0 ff ff       	call   c0000930 <toupper>
c000683d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006840:	e8 0b a1 ff ff       	call   c0000950 <tolower>
c0006845:	83 c4 10             	add    esp,0x10
c0006848:	39 c3                	cmp    ebx,eax
c000684a:	75 05                	jne    c0006851 <stricmp+0x44>
c000684c:	46                   	inc    esi
c000684d:	85 db                	test   ebx,ebx
c000684f:	75 c1                	jne    c0006812 <stricmp+0x5>
c0006851:	29 c3                	sub    ebx,eax
c0006853:	89 d8                	mov    eax,ebx
c0006855:	5b                   	pop    ebx
c0006856:	5e                   	pop    esi
c0006857:	5f                   	pop    edi
c0006858:	c3                   	ret    

c0006859 <iso_open>:
c0006859:	57                   	push   edi
c000685a:	31 c0                	xor    eax,eax
c000685c:	56                   	push   esi
c000685d:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c0006862:	53                   	push   ebx
c0006863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006868:	0f 95 c0             	setne  al
c000686b:	89 c2                	mov    edx,eax
c000686d:	89 c6                	mov    esi,eax
c000686f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006873:	e8 00 ff ff ff       	call   c0006778 <find_object_path>
c0006878:	83 ca ff             	or     edx,0xffffffff
c000687b:	85 c0                	test   eax,eax
c000687d:	74 5e                	je     c00068dd <iso_open+0x84>
c000687f:	89 c1                	mov    ecx,eax
c0006881:	31 d2                	xor    edx,edx
c0006883:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006889:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006890:	75 42                	jne    c00068d4 <iso_open+0x7b>
c0006892:	8d 41 02             	lea    eax,[ecx+0x2]
c0006895:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c000689f:	e8 a6 fa ff ff       	call   c000634a <iso_733>
c00068a4:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c00068aa:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c00068b0:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c00068ba:	8d 41 0a             	lea    eax,[ecx+0xa]
c00068bd:	e8 88 fa ff ff       	call   c000634a <iso_733>
c00068c2:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c00068cc:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c00068d2:	eb 09                	jmp    c00068dd <iso_open+0x84>
c00068d4:	42                   	inc    edx
c00068d5:	83 fa 10             	cmp    edx,0x10
c00068d8:	75 a9                	jne    c0006883 <iso_open+0x2a>
c00068da:	83 ca ff             	or     edx,0xffffffff
c00068dd:	5b                   	pop    ebx
c00068de:	89 d0                	mov    eax,edx
c00068e0:	5e                   	pop    esi
c00068e1:	5f                   	pop    edi
c00068e2:	c3                   	ret    

c00068e3 <iso_close>:
c00068e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068e7:	83 f8 0f             	cmp    eax,0xf
c00068ea:	7f 10                	jg     c00068fc <iso_close+0x19>
c00068ec:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00068f2:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00068fc:	e9 5e fb ff ff       	jmp    c000645f <bclear_cache>

c0006901 <iso_read>:
c0006901:	55                   	push   ebp
c0006902:	57                   	push   edi
c0006903:	56                   	push   esi
c0006904:	53                   	push   ebx
c0006905:	83 ec 1c             	sub    esp,0x1c
c0006908:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000690c:	83 fd 0f             	cmp    ebp,0xf
c000690f:	7e 0a                	jle    c000691b <iso_read+0x1a>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	89 c2                	mov    edx,eax
c0006916:	e9 f4 00 00 00       	jmp    c0006a0f <iso_read+0x10e>
c000691b:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006921:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006928:	74 e7                	je     c0006911 <iso_read+0x10>
c000692a:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006930:	85 d2                	test   edx,edx
c0006932:	75 dd                	jne    c0006911 <iso_read+0x10>
c0006934:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006939:	0f 84 cd 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000693f:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c0006945:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c000694b:	29 c1                	sub    ecx,eax
c000694d:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006951:	76 04                	jbe    c0006957 <iso_read+0x56>
c0006953:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006957:	85 c9                	test   ecx,ecx
c0006959:	0f 84 ad 00 00 00    	je     c0006a0c <iso_read+0x10b>
c000695f:	89 c6                	mov    esi,eax
c0006961:	bb 00 08 00 00       	mov    ebx,0x800
c0006966:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000696c:	c1 e8 0b             	shr    eax,0xb
c000696f:	29 f3                	sub    ebx,esi
c0006971:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c0006977:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000697d:	7e 3f                	jle    c00069be <iso_read+0xbd>
c000697f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006985:	75 37                	jne    c00069be <iso_read+0xbd>
c0006987:	be 20 00 00 00       	mov    esi,0x20
c000698c:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006992:	7f 05                	jg     c0006999 <iso_read+0x98>
c0006994:	89 ce                	mov    esi,ecx
c0006996:	c1 fe 0b             	sar    esi,0xb
c0006999:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000699d:	89 f3                	mov    ebx,esi
c000699f:	c1 e3 0b             	shl    ebx,0xb
c00069a2:	52                   	push   edx
c00069a3:	56                   	push   esi
c00069a4:	50                   	push   eax
c00069a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00069a9:	e8 15 fb ff ff       	call   c00064c3 <isoReadDiscSector>
c00069ae:	83 c4 10             	add    esp,0x10
c00069b1:	85 c0                	test   eax,eax
c00069b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069b7:	7f 3e                	jg     c00069f7 <iso_read+0xf6>
c00069b9:	e9 53 ff ff ff       	jmp    c0006911 <iso_read+0x10>
c00069be:	39 cb                	cmp    ebx,ecx
c00069c0:	7e 02                	jle    c00069c4 <iso_read+0xc3>
c00069c2:	89 cb                	mov    ebx,ecx
c00069c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00069c8:	e8 88 fb ff ff       	call   c0006555 <bdread>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	0f 88 3c ff ff ff    	js     c0006911 <iso_read+0x10>
c00069d5:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00069dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00069e0:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00069e6:	25 ff 07 00 00       	and    eax,0x7ff
c00069eb:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00069ef:	89 d9                	mov    ecx,ebx
c00069f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00069f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069f7:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00069fb:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c0006a01:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006a05:	01 da                	add    edx,ebx
c0006a07:	e9 28 ff ff ff       	jmp    c0006934 <iso_read+0x33>
c0006a0c:	89 d0                	mov    eax,edx
c0006a0e:	99                   	cdq    
c0006a0f:	83 c4 1c             	add    esp,0x1c
c0006a12:	5b                   	pop    ebx
c0006a13:	5e                   	pop    esi
c0006a14:	5f                   	pop    edi
c0006a15:	5d                   	pop    ebp
c0006a16:	c3                   	ret    

c0006a17 <iso_seek>:
c0006a17:	55                   	push   ebp
c0006a18:	83 c8 ff             	or     eax,0xffffffff
c0006a1b:	57                   	push   edi
c0006a1c:	89 c2                	mov    edx,eax
c0006a1e:	56                   	push   esi
c0006a1f:	53                   	push   ebx
c0006a20:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a24:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006a28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006a2c:	83 fe 0f             	cmp    esi,0xf
c0006a2f:	7f 65                	jg     c0006a96 <iso_seek+0x7f>
c0006a31:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006a37:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c0006a3d:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006a44:	74 50                	je     c0006a96 <iso_seek+0x7f>
c0006a46:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006a4d:	75 47                	jne    c0006a96 <iso_seek+0x7f>
c0006a4f:	83 fb 01             	cmp    ebx,0x1
c0006a52:	74 0e                	je     c0006a62 <iso_seek+0x4b>
c0006a54:	83 fb 02             	cmp    ebx,0x2
c0006a57:	74 0e                	je     c0006a67 <iso_seek+0x50>
c0006a59:	85 db                	test   ebx,ebx
c0006a5b:	75 39                	jne    c0006a96 <iso_seek+0x7f>
c0006a5d:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006a60:	eb 0d                	jmp    c0006a6f <iso_seek+0x58>
c0006a62:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006a65:	eb 08                	jmp    c0006a6f <iso_seek+0x58>
c0006a67:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006a6a:	01 f8                	add    eax,edi
c0006a6c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006a6f:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006a75:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006a7b:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006a80:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006a83:	76 03                	jbe    c0006a88 <iso_seek+0x71>
c0006a85:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006a88:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006a8e:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006a94:	31 d2                	xor    edx,edx
c0006a96:	5b                   	pop    ebx
c0006a97:	5e                   	pop    esi
c0006a98:	5f                   	pop    edi
c0006a99:	5d                   	pop    ebp
c0006a9a:	c3                   	ret    

c0006a9b <iso_tell>:
c0006a9b:	83 c8 ff             	or     eax,0xffffffff
c0006a9e:	53                   	push   ebx
c0006a9f:	89 c2                	mov    edx,eax
c0006aa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006aa5:	83 f9 0f             	cmp    ecx,0xf
c0006aa8:	7f 20                	jg     c0006aca <iso_tell+0x2f>
c0006aaa:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006ab0:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006ab7:	74 11                	je     c0006aca <iso_tell+0x2f>
c0006ab9:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006ac0:	75 08                	jne    c0006aca <iso_tell+0x2f>
c0006ac2:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006ac8:	31 d2                	xor    edx,edx
c0006aca:	5b                   	pop    ebx
c0006acb:	c3                   	ret    

c0006acc <iso_total>:
c0006acc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ad0:	83 c8 ff             	or     eax,0xffffffff
c0006ad3:	83 fa 0f             	cmp    edx,0xf
c0006ad6:	7f 1e                	jg     c0006af6 <iso_total+0x2a>
c0006ad8:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006ade:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006ae5:	74 0f                	je     c0006af6 <iso_total+0x2a>
c0006ae7:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006aee:	75 06                	jne    c0006af6 <iso_total+0x2a>
c0006af0:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c0006af6:	c3                   	ret    

c0006af7 <fn_postprocess>:
c0006af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006afb:	89 d0                	mov    eax,edx
c0006afd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006b00:	83 f9 3b             	cmp    ecx,0x3b
c0006b03:	74 07                	je     c0006b0c <fn_postprocess+0x15>
c0006b05:	85 c9                	test   ecx,ecx
c0006b07:	74 03                	je     c0006b0c <fn_postprocess+0x15>
c0006b09:	40                   	inc    eax
c0006b0a:	eb f1                	jmp    c0006afd <fn_postprocess+0x6>
c0006b0c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006b0f:	39 d0                	cmp    eax,edx
c0006b11:	76 0a                	jbe    c0006b1d <fn_postprocess+0x26>
c0006b13:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c0006b17:	75 04                	jne    c0006b1d <fn_postprocess+0x26>
c0006b19:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006b1d:	c3                   	ret    

c0006b1e <iso_readdir>:
c0006b1e:	55                   	push   ebp
c0006b1f:	57                   	push   edi
c0006b20:	56                   	push   esi
c0006b21:	53                   	push   ebx
c0006b22:	83 ec 1c             	sub    esp,0x1c
c0006b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006b29:	83 fb 0f             	cmp    ebx,0xf
c0006b2c:	7f 28                	jg     c0006b56 <iso_readdir+0x38>
c0006b2e:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b34:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c0006b3a:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006b41:	74 13                	je     c0006b56 <iso_readdir+0x38>
c0006b43:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006b47:	74 0d                	je     c0006b56 <iso_readdir+0x38>
c0006b49:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006b50:	0f 84 b1 00 00 00    	je     c0006c07 <iso_readdir+0xe9>
c0006b56:	83 ec 0c             	sub    esp,0xc
c0006b59:	68 a0 fc 02 c0       	push   0xc002fca0
c0006b5e:	e8 cd 29 02 00       	call   c0029530 <iso_kprintf>
c0006b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006b66:	e8 e1 29 02 00       	call   c002954c <iso_kprintfd>
c0006b6b:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b71:	c7 04 24 a5 fc 02 c0 	mov    DWORD PTR [esp],0xc002fca5
c0006b78:	e8 b3 29 02 00       	call   c0029530 <iso_kprintf>
c0006b7d:	5d                   	pop    ebp
c0006b7e:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006b84:	e8 c3 29 02 00       	call   c002954c <iso_kprintfd>
c0006b89:	c7 04 24 ab fc 02 c0 	mov    DWORD PTR [esp],0xc002fcab
c0006b90:	e8 9b 29 02 00       	call   c0029530 <iso_kprintf>
c0006b95:	58                   	pop    eax
c0006b96:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006b9c:	e8 ab 29 02 00       	call   c002954c <iso_kprintfd>
c0006ba1:	c7 04 24 b1 fc 02 c0 	mov    DWORD PTR [esp],0xc002fcb1
c0006ba8:	e8 83 29 02 00       	call   c0029530 <iso_kprintf>
c0006bad:	58                   	pop    eax
c0006bae:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006bb4:	e8 93 29 02 00       	call   c002954c <iso_kprintfd>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	eb 42                	jmp    c0006c00 <iso_readdir+0xe2>
c0006bbe:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006bc1:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006bc8:	89 d1                	mov    ecx,edx
c0006bca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006bd0:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006bd4:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006bd7:	75 35                	jne    c0006c0e <iso_readdir+0xf0>
c0006bd9:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006bdf:	81 c2 00 08 00 00    	add    edx,0x800
c0006be5:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006be8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006beb:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006bee:	73 1e                	jae    c0006c0e <iso_readdir+0xf0>
c0006bf0:	c1 ea 0b             	shr    edx,0xb
c0006bf3:	8b 07                	mov    eax,DWORD PTR [edi]
c0006bf5:	01 d0                	add    eax,edx
c0006bf7:	e8 50 f9 ff ff       	call   c000654c <biread>
c0006bfc:	85 c0                	test   eax,eax
c0006bfe:	79 be                	jns    c0006bbe <iso_readdir+0xa0>
c0006c00:	31 c0                	xor    eax,eax
c0006c02:	e9 66 01 00 00       	jmp    c0006d6d <iso_readdir+0x24f>
c0006c07:	31 f6                	xor    esi,esi
c0006c09:	83 c8 ff             	or     eax,0xffffffff
c0006c0c:	eb da                	jmp    c0006be8 <iso_readdir+0xca>
c0006c0e:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006c14:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006c1a:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006c20:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006c23:	73 db                	jae    c0006c00 <iso_readdir+0xe2>
c0006c25:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006c29:	75 34                	jne    c0006c5f <iso_readdir+0x141>
c0006c2b:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006c2f:	75 2e                	jne    c0006c5f <iso_readdir+0x141>
c0006c31:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006c34:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006c3b:	01 f9                	add    ecx,edi
c0006c3d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006c40:	89 c8                	mov    eax,ecx
c0006c42:	25 ff 07 00 00       	and    eax,0x7ff
c0006c47:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006c4c:	01 c8                	add    eax,ecx
c0006c4e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006c51:	25 ff 07 00 00       	and    eax,0x7ff
c0006c56:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006c5a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006c5d:	74 a1                	je     c0006c00 <iso_readdir+0xe2>
c0006c5f:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006c65:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006c69:	8d 56 21             	lea    edx,[esi+0x21]
c0006c6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c70:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006c76:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c7d:	74 0c                	je     c0006c8b <iso_readdir+0x16d>
c0006c7f:	89 e8                	mov    eax,ebp
c0006c81:	e8 14 f6 ff ff       	call   c000629a <ucs2utfn>
c0006c86:	e9 a6 00 00 00       	jmp    c0006d31 <iso_readdir+0x213>
c0006c8b:	57                   	push   edi
c0006c8c:	51                   	push   ecx
c0006c8d:	52                   	push   edx
c0006c8e:	55                   	push   ebp
c0006c8f:	e8 ec 99 ff ff       	call   c0000680 <strncpy>
c0006c94:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006c98:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006c9e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006ca1:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006ca9:	e8 49 fe ff ff       	call   c0006af7 <fn_postprocess>
c0006cae:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006cb2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006cb5:	83 c4 10             	add    esp,0x10
c0006cb8:	29 d0                	sub    eax,edx
c0006cba:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006cbe:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006cc2:	74 05                	je     c0006cc9 <iso_readdir+0x1ab>
c0006cc4:	83 e8 21             	sub    eax,0x21
c0006cc7:	eb 04                	jmp    c0006ccd <iso_readdir+0x1af>
c0006cc9:	47                   	inc    edi
c0006cca:	83 e8 22             	sub    eax,0x22
c0006ccd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006cd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cdb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006ce0:	7e 4f                	jle    c0006d31 <iso_readdir+0x213>
c0006ce2:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006ce5:	48                   	dec    eax
c0006ce6:	3c 01                	cmp    al,0x1
c0006ce8:	77 47                	ja     c0006d31 <iso_readdir+0x213>
c0006cea:	52                   	push   edx
c0006ceb:	6a 02                	push   0x2
c0006ced:	68 9d fc 02 c0       	push   0xc002fc9d
c0006cf2:	57                   	push   edi
c0006cf3:	e8 e8 9a ff ff       	call   c00007e0 <strncmp>
c0006cf8:	83 c4 10             	add    esp,0x10
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 26                	jne    c0006d25 <iso_readdir+0x207>
c0006cff:	50                   	push   eax
c0006d00:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d04:	83 e8 05             	sub    eax,0x5
c0006d07:	50                   	push   eax
c0006d08:	8d 47 05             	lea    eax,[edi+0x5]
c0006d0b:	50                   	push   eax
c0006d0c:	55                   	push   ebp
c0006d0d:	e8 6e 99 ff ff       	call   c0000680 <strncpy>
c0006d12:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006d16:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d1a:	83 c4 10             	add    esp,0x10
c0006d1d:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006d25:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006d29:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006d2d:	01 c7                	add    edi,eax
c0006d2f:	eb aa                	jmp    c0006cdb <iso_readdir+0x1bd>
c0006d31:	83 c8 ff             	or     eax,0xffffffff
c0006d34:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006d38:	89 c2                	mov    edx,eax
c0006d3a:	75 0a                	jne    c0006d46 <iso_readdir+0x228>
c0006d3c:	8d 46 0a             	lea    eax,[esi+0xa]
c0006d3f:	e8 06 f6 ff ff       	call   c000634a <iso_733>
c0006d44:	31 d2                	xor    edx,edx
c0006d46:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006d4c:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006d52:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006d58:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006d5e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006d61:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006d64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d68:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006d6d:	83 c4 1c             	add    esp,0x1c
c0006d70:	5b                   	pop    ebx
c0006d71:	5e                   	pop    esi
c0006d72:	5f                   	pop    edi
c0006d73:	5d                   	pop    ebp
c0006d74:	c3                   	ret    

c0006d75 <iso_reset>:
c0006d75:	83 ec 18             	sub    esp,0x18
c0006d78:	68 ba fc 02 c0       	push   0xc002fcba
c0006d7d:	e8 ae 27 02 00       	call   c0029530 <iso_kprintf>
c0006d82:	e8 10 f7 ff ff       	call   c0006497 <iso_break_all>
c0006d87:	e8 09 f7 ff ff       	call   c0006495 <bclear>
c0006d8c:	31 c0                	xor    eax,eax
c0006d8e:	83 c4 1c             	add    esp,0x1c
c0006d91:	c3                   	ret    

c0006d92 <init_percd>:
c0006d92:	57                   	push   edi
c0006d93:	56                   	push   esi
c0006d94:	53                   	push   ebx
c0006d95:	bb 01 00 00 00       	mov    ebx,0x1
c0006d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9e:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006da3:	e8 cd ff ff ff       	call   c0006d75 <iso_reset>
c0006da8:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006db2:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006db7:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006dbb:	e8 8c f7 ff ff       	call   c000654c <biread>
c0006dc0:	89 c6                	mov    esi,eax
c0006dc2:	85 c0                	test   eax,eax
c0006dc4:	0f 88 ba 00 00 00    	js     c0006e84 <init_percd+0xf2>
c0006dca:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006dd1:	83 c0 04             	add    eax,0x4
c0006dd4:	52                   	push   edx
c0006dd5:	6a 06                	push   0x6
c0006dd7:	68 c5 fc 02 c0       	push   0xc002fcc5
c0006ddc:	50                   	push   eax
c0006ddd:	e8 9e 95 ff ff       	call   c0000380 <memcmp>
c0006de2:	83 c4 10             	add    esp,0x10
c0006de5:	85 c0                	test   eax,eax
c0006de7:	74 08                	je     c0006df1 <init_percd+0x5f>
c0006de9:	43                   	inc    ebx
c0006dea:	83 fb 04             	cmp    ebx,0x4
c0006ded:	75 c3                	jne    c0006db2 <init_percd+0x20>
c0006def:	eb 1a                	jmp    c0006e0b <init_percd+0x79>
c0006df1:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006df8:	83 c0 5c             	add    eax,0x5c
c0006dfb:	e8 17 f5 ff ff       	call   c0006317 <isjoliet>
c0006e00:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006e05:	85 c0                	test   eax,eax
c0006e07:	74 e0                	je     c0006de9 <init_percd+0x57>
c0006e09:	eb 3e                	jmp    c0006e49 <init_percd+0xb7>
c0006e0b:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006e12:	75 35                	jne    c0006e49 <init_percd+0xb7>
c0006e14:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006e19:	83 c0 10             	add    eax,0x10
c0006e1c:	e8 2b f7 ff ff       	call   c000654c <biread>
c0006e21:	89 c6                	mov    esi,eax
c0006e23:	85 c0                	test   eax,eax
c0006e25:	78 5f                	js     c0006e86 <init_percd+0xf4>
c0006e27:	83 cb ff             	or     ebx,0xffffffff
c0006e2a:	50                   	push   eax
c0006e2b:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006e32:	6a 06                	push   0x6
c0006e34:	83 c0 04             	add    eax,0x4
c0006e37:	68 cc fc 02 c0       	push   0xc002fccc
c0006e3c:	50                   	push   eax
c0006e3d:	e8 3e 95 ff ff       	call   c0000380 <memcmp>
c0006e42:	83 c4 10             	add    esp,0x10
c0006e45:	85 c0                	test   eax,eax
c0006e47:	75 3d                	jne    c0006e86 <init_percd+0xf4>
c0006e49:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006e50:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006e55:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006e5b:	b9 22 00 00 00       	mov    ecx,0x22
c0006e60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006e62:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006e67:	31 db                	xor    ebx,ebx
c0006e69:	e8 dc f4 ff ff       	call   c000634a <iso_733>
c0006e6e:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006e73:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006e78:	e8 cd f4 ff ff       	call   c000634a <iso_733>
c0006e7d:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006e82:	eb 02                	jmp    c0006e86 <init_percd+0xf4>
c0006e84:	89 c3                	mov    ebx,eax
c0006e86:	89 d8                	mov    eax,ebx
c0006e88:	5b                   	pop    ebx
c0006e89:	5e                   	pop    esi
c0006e8a:	5f                   	pop    edi
c0006e8b:	c3                   	ret    

c0006e8c <iso_ioctl>:
c0006e8c:	83 ec 18             	sub    esp,0x18
c0006e8f:	68 d3 fc 02 c0       	push   0xc002fcd3
c0006e94:	e8 97 26 02 00       	call   c0029530 <iso_kprintf>
c0006e99:	e8 d7 fe ff ff       	call   c0006d75 <iso_reset>
c0006e9e:	31 c0                	xor    eax,eax
c0006ea0:	83 c4 1c             	add    esp,0x1c
c0006ea3:	c3                   	ret    

c0006ea4 <fs_iso9660_init>:
c0006ea4:	53                   	push   ebx
c0006ea5:	31 db                	xor    ebx,ebx
c0006ea7:	83 ec 14             	sub    esp,0x14
c0006eaa:	68 de fc 02 c0       	push   0xc002fcde
c0006eaf:	e8 7c 26 02 00       	call   c0029530 <iso_kprintf>
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	68 40 09 00 00       	push   0x940
c0006ebc:	6a 00                	push   0x0
c0006ebe:	68 20 6d 03 c0       	push   0xc0036d20
c0006ec3:	e8 28 96 ff ff       	call   c00004f0 <memset>
c0006ec8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ecf:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006ed9:	e8 d3 f6 00 00       	call   c00165b1 <malloc>
c0006ede:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ee5:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006eea:	e8 c2 f6 00 00       	call   c00165b1 <malloc>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006ef7:	83 ec 0c             	sub    esp,0xc
c0006efa:	68 04 08 00 00       	push   0x804
c0006eff:	e8 ad f6 00 00       	call   c00165b1 <malloc>
c0006f04:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006f0b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f11:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006f18:	e8 94 f6 00 00       	call   c00165b1 <malloc>
c0006f1d:	83 c4 10             	add    esp,0x10
c0006f20:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006f27:	43                   	inc    ebx
c0006f28:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006f2e:	83 fb 10             	cmp    ebx,0x10
c0006f31:	75 c4                	jne    c0006ef7 <fs_iso9660_init+0x53>
c0006f33:	31 c0                	xor    eax,eax
c0006f35:	83 c4 08             	add    esp,0x8
c0006f38:	5b                   	pop    ebx
c0006f39:	c3                   	ret    

c0006f3a <fs_iso9660_shutdown>:
c0006f3a:	53                   	push   ebx
c0006f3b:	31 db                	xor    ebx,ebx
c0006f3d:	83 ec 08             	sub    esp,0x8
c0006f40:	83 ec 0c             	sub    esp,0xc
c0006f43:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006f4a:	e8 72 f6 00 00       	call   c00165c1 <free>
c0006f4f:	58                   	pop    eax
c0006f50:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006f57:	43                   	inc    ebx
c0006f58:	e8 64 f6 00 00       	call   c00165c1 <free>
c0006f5d:	83 c4 10             	add    esp,0x10
c0006f60:	83 fb 10             	cmp    ebx,0x10
c0006f63:	75 db                	jne    c0006f40 <fs_iso9660_shutdown+0x6>
c0006f65:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006f6a:	85 c0                	test   eax,eax
c0006f6c:	74 0c                	je     c0006f7a <fs_iso9660_shutdown+0x40>
c0006f6e:	83 ec 0c             	sub    esp,0xc
c0006f71:	50                   	push   eax
c0006f72:	e8 4a f6 00 00       	call   c00165c1 <free>
c0006f77:	83 c4 10             	add    esp,0x10
c0006f7a:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006f7f:	85 c0                	test   eax,eax
c0006f81:	74 0c                	je     c0006f8f <fs_iso9660_shutdown+0x55>
c0006f83:	83 ec 0c             	sub    esp,0xc
c0006f86:	50                   	push   eax
c0006f87:	e8 35 f6 00 00       	call   c00165c1 <free>
c0006f8c:	83 c4 10             	add    esp,0x10
c0006f8f:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006f99:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006fa3:	31 c0                	xor    eax,eax
c0006fa5:	83 c4 08             	add    esp,0x8
c0006fa8:	5b                   	pop    ebx
c0006fa9:	c3                   	ret    
c0006faa:	66 90                	xchg   ax,ax

c0006fac <lwip_init>:
c0006fac:	83 ec 0c             	sub    esp,0xc
c0006faf:	e8 48 2c 00 00       	call   c0009bfc <stats_init>
c0006fb4:	e8 e3 9d ff ff       	call   c0000d9c <sys_init>
c0006fb9:	e8 ae 01 00 00       	call   c000716c <mem_init>
c0006fbe:	e8 05 0a 00 00       	call   c00079c8 <memp_init>
c0006fc3:	e8 e8 0c 00 00       	call   c0007cb0 <netif_init>
c0006fc8:	e8 6f 9c ff ff       	call   c0000c3c <lwip_socket_init>
c0006fcd:	e8 76 9d 00 00       	call   c0010d48 <sys_timeouts_init>
c0006fd2:	90                   	nop
c0006fd3:	83 c4 0c             	add    esp,0xc
c0006fd6:	c3                   	ret    
c0006fd7:	90                   	nop

c0006fd8 <plug_holes>:
c0006fd8:	83 ec 1c             	sub    esp,0x1c
c0006fdb:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fe0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe4:	73 16                	jae    c0006ffc <plug_holes+0x24>
c0006fe6:	83 ec 08             	sub    esp,0x8
c0006fe9:	68 ef fc 02 c0       	push   0xc002fcef
c0006fee:	68 06 fd 02 c0       	push   0xc002fd06
c0006ff3:	e8 90 8d 01 00       	call   c001fd88 <CPrintf>
c0006ff8:	83 c4 10             	add    esp,0x10
c0006ffb:	90                   	nop
c0006ffc:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007001:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007005:	72 15                	jb     c000701c <plug_holes+0x44>
c0007007:	83 ec 08             	sub    esp,0x8
c000700a:	68 13 fd 02 c0       	push   0xc002fd13
c000700f:	68 06 fd 02 c0       	push   0xc002fd06
c0007014:	e8 6f 8d 01 00       	call   c001fd88 <CPrintf>
c0007019:	83 c4 10             	add    esp,0x10
c000701c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007020:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007023:	0f b6 c0             	movzx  eax,al
c0007026:	85 c0                	test   eax,eax
c0007028:	74 16                	je     c0007040 <plug_holes+0x68>
c000702a:	83 ec 08             	sub    esp,0x8
c000702d:	68 2d fd 02 c0       	push   0xc002fd2d
c0007032:	68 06 fd 02 c0       	push   0xc002fd06
c0007037:	e8 4c 8d 01 00       	call   c001fd88 <CPrintf>
c000703c:	83 c4 10             	add    esp,0x10
c000703f:	90                   	nop
c0007040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007044:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007047:	0f b7 c0             	movzx  eax,ax
c000704a:	3d 40 06 00 00       	cmp    eax,0x640
c000704f:	76 17                	jbe    c0007068 <plug_holes+0x90>
c0007051:	83 ec 08             	sub    esp,0x8
c0007054:	68 c0 fd 02 c0       	push   0xc002fdc0
c0007059:	68 06 fd 02 c0       	push   0xc002fd06
c000705e:	e8 25 8d 01 00       	call   c001fd88 <CPrintf>
c0007063:	83 c4 10             	add    esp,0x10
c0007066:	66 90                	xchg   ax,ax
c0007068:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000706e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007072:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007075:	0f b7 c0             	movzx  eax,ax
c0007078:	01 d0                	add    eax,edx
c000707a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007082:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007086:	74 64                	je     c00070ec <plug_holes+0x114>
c0007088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000708c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000708f:	0f b6 c0             	movzx  eax,al
c0007092:	85 c0                	test   eax,eax
c0007094:	75 56                	jne    c00070ec <plug_holes+0x114>
c0007096:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000709b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000709f:	74 4b                	je     c00070ec <plug_holes+0x114>
c00070a1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070a6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070aa:	75 0c                	jne    c00070b8 <plug_holes+0xe0>
c00070ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070b0:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070b5:	8d 76 00             	lea    esi,[esi+0x0]
c00070b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070c3:	66 89 02             	mov    WORD PTR [edx],ax
c00070c6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00070cf:	29 c2                	sub    edx,eax
c00070d1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00070d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070de:	0f b7 c0             	movzx  eax,ax
c00070e1:	01 c1                	add    ecx,eax
c00070e3:	89 d0                	mov    eax,edx
c00070e5:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c00070e9:	8d 76 00             	lea    esi,[esi+0x0]
c00070ec:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00070f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00070fa:	0f b7 c0             	movzx  eax,ax
c00070fd:	01 d0                	add    eax,edx
c00070ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007107:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000710b:	74 57                	je     c0007164 <plug_holes+0x18c>
c000710d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007111:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007114:	0f b6 c0             	movzx  eax,al
c0007117:	85 c0                	test   eax,eax
c0007119:	75 49                	jne    c0007164 <plug_holes+0x18c>
c000711b:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007120:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007124:	75 0a                	jne    c0007130 <plug_holes+0x158>
c0007126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000712a:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000712f:	90                   	nop
c0007130:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007134:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007137:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713b:	66 89 02             	mov    WORD PTR [edx],ax
c000713e:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007147:	29 c2                	sub    edx,eax
c0007149:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000714f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007153:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007156:	0f b7 c0             	movzx  eax,ax
c0007159:	01 c1                	add    ecx,eax
c000715b:	89 d0                	mov    eax,edx
c000715d:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0007161:	8d 76 00             	lea    esi,[esi+0x0]
c0007164:	90                   	nop
c0007165:	83 c4 1c             	add    esp,0x1c
c0007168:	c3                   	ret    
c0007169:	8d 76 00             	lea    esi,[esi+0x0]

c000716c <mem_init>:
c000716c:	83 ec 1c             	sub    esp,0x1c
c000716f:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007179:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000717e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007182:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007186:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000718b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718f:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007199:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000719d:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071a2:	05 40 06 00 00       	add    eax,0x640
c00071a7:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c00071ac:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071b1:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00071b5:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071ba:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c00071bf:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00071c4:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c00071ca:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071cf:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00071d4:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c00071dd:	83 ec 08             	sub    esp,0x8
c00071e0:	6a 01                	push   0x1
c00071e2:	68 98 76 03 c0       	push   0xc0037698
c00071e7:	e8 80 9a ff ff       	call   c0000c6c <sys_sem_new>
c00071ec:	83 c4 10             	add    esp,0x10
c00071ef:	0f be c0             	movsx  eax,al
c00071f2:	85 c0                	test   eax,eax
c00071f4:	74 16                	je     c000720c <mem_init+0xa0>
c00071f6:	83 ec 08             	sub    esp,0x8
c00071f9:	68 48 fd 02 c0       	push   0xc002fd48
c00071fe:	68 06 fd 02 c0       	push   0xc002fd06
c0007203:	e8 80 8b 01 00       	call   c001fd88 <CPrintf>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	90                   	nop
c000720d:	83 c4 1c             	add    esp,0x1c
c0007210:	c3                   	ret    
c0007211:	8d 76 00             	lea    esi,[esi+0x0]

c0007214 <mem_free>:
c0007214:	83 ec 1c             	sub    esp,0x1c
c0007217:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000721c:	0f 84 0e 01 00 00    	je     c0007330 <mem_free+0x11c>
c0007222:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007227:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000722b:	72 0b                	jb     c0007238 <mem_free+0x24>
c000722d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007232:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007236:	72 18                	jb     c0007250 <mem_free+0x3c>
c0007238:	83 ec 08             	sub    esp,0x8
c000723b:	68 63 fd 02 c0       	push   0xc002fd63
c0007240:	68 06 fd 02 c0       	push   0xc002fd06
c0007245:	e8 3e 8b 01 00       	call   c001fd88 <CPrintf>
c000724a:	83 c4 10             	add    esp,0x10
c000724d:	8d 76 00             	lea    esi,[esi+0x0]
c0007250:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007255:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007259:	72 0d                	jb     c0007268 <mem_free+0x54>
c000725b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007260:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007264:	72 22                	jb     c0007288 <mem_free+0x74>
c0007266:	66 90                	xchg   ax,ax
c0007268:	e8 0b 8b 01 00       	call   c001fd78 <CLockScheduler>
c000726d:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c0007273:	83 c0 01             	add    eax,0x1
c0007276:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c000727c:	e8 db 8a 01 00       	call   c001fd5c <CUnlockScheduler>
c0007281:	e9 ae 00 00 00       	jmp    c0007334 <mem_free+0x120>
c0007286:	66 90                	xchg   ax,ax
c0007288:	83 ec 08             	sub    esp,0x8
c000728b:	6a 00                	push   0x0
c000728d:	68 98 76 03 c0       	push   0xc0037698
c0007292:	e8 2d 9a ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007297:	83 c4 10             	add    esp,0x10
c000729a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000729e:	83 e8 06             	sub    eax,0x6
c00072a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00072a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072a9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00072ac:	0f b6 c0             	movzx  eax,al
c00072af:	85 c0                	test   eax,eax
c00072b1:	75 15                	jne    c00072c8 <mem_free+0xb4>
c00072b3:	83 ec 08             	sub    esp,0x8
c00072b6:	68 7a fd 02 c0       	push   0xc002fd7a
c00072bb:	68 06 fd 02 c0       	push   0xc002fd06
c00072c0:	e8 c3 8a 01 00       	call   c001fd88 <CPrintf>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00072d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00072d9:	73 09                	jae    c00072e4 <mem_free+0xd0>
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072e4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00072ea:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072f4:	29 d1                	sub    ecx,edx
c00072f6:	89 ca                	mov    edx,ecx
c00072f8:	89 d1                	mov    ecx,edx
c00072fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072fe:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007301:	29 d1                	sub    ecx,edx
c0007303:	89 ca                	mov    edx,ecx
c0007305:	01 d0                	add    eax,edx
c0007307:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000730d:	83 ec 0c             	sub    esp,0xc
c0007310:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007314:	e8 bf fc ff ff       	call   c0006fd8 <plug_holes>
c0007319:	83 c4 10             	add    esp,0x10
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	68 98 76 03 c0       	push   0xc0037698
c0007324:	e8 83 99 ff ff       	call   c0000cac <sys_sem_signal>
c0007329:	83 c4 10             	add    esp,0x10
c000732c:	eb 06                	jmp    c0007334 <mem_free+0x120>
c000732e:	66 90                	xchg   ax,ax
c0007330:	90                   	nop
c0007331:	8d 76 00             	lea    esi,[esi+0x0]
c0007334:	83 c4 1c             	add    esp,0x1c
c0007337:	c3                   	ret    

c0007338 <mem_trim>:
c0007338:	83 ec 2c             	sub    esp,0x2c
c000733b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000733f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007344:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007349:	83 f8 0b             	cmp    eax,0xb
c000734c:	77 0a                	ja     c0007358 <mem_trim+0x20>
c000734e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007355:	8d 76 00             	lea    esi,[esi+0x0]
c0007358:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000735d:	3d 40 06 00 00       	cmp    eax,0x640
c0007362:	76 0c                	jbe    c0007370 <mem_trim+0x38>
c0007364:	b8 00 00 00 00       	mov    eax,0x0
c0007369:	e9 d6 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c000736e:	66 90                	xchg   ax,ax
c0007370:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007375:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007379:	72 0d                	jb     c0007388 <mem_trim+0x50>
c000737b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007380:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007384:	72 1a                	jb     c00073a0 <mem_trim+0x68>
c0007386:	66 90                	xchg   ax,ax
c0007388:	83 ec 08             	sub    esp,0x8
c000738b:	68 8e fd 02 c0       	push   0xc002fd8e
c0007390:	68 06 fd 02 c0       	push   0xc002fd06
c0007395:	e8 ee 89 01 00       	call   c001fd88 <CPrintf>
c000739a:	83 c4 10             	add    esp,0x10
c000739d:	8d 76 00             	lea    esi,[esi+0x0]
c00073a0:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073a5:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073a9:	72 0d                	jb     c00073b8 <mem_trim+0x80>
c00073ab:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00073b0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00073b4:	72 26                	jb     c00073dc <mem_trim+0xa4>
c00073b6:	66 90                	xchg   ax,ax
c00073b8:	e8 bb 89 01 00       	call   c001fd78 <CLockScheduler>
c00073bd:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00073c3:	83 c0 01             	add    eax,0x1
c00073c6:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00073cc:	e8 8b 89 01 00       	call   c001fd5c <CUnlockScheduler>
c00073d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073d5:	e9 6a 02 00 00       	jmp    c0007644 <mem_trim+0x30c>
c00073da:	66 90                	xchg   ax,ax
c00073dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073e0:	83 e8 06             	sub    eax,0x6
c00073e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073e7:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00073ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00073f0:	29 c2                	sub    edx,eax
c00073f2:	89 d0                	mov    eax,edx
c00073f4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00073f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073fd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007400:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007405:	89 d1                	mov    ecx,edx
c0007407:	29 c1                	sub    ecx,eax
c0007409:	89 c8                	mov    eax,ecx
c000740b:	83 e8 06             	sub    eax,0x6
c000740e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0007413:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007418:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000741d:	39 c2                	cmp    edx,eax
c000741f:	76 17                	jbe    c0007438 <mem_trim+0x100>
c0007421:	83 ec 08             	sub    esp,0x8
c0007424:	68 ec fd 02 c0       	push   0xc002fdec
c0007429:	68 06 fd 02 c0       	push   0xc002fd06
c000742e:	e8 55 89 01 00       	call   c001fd88 <CPrintf>
c0007433:	83 c4 10             	add    esp,0x10
c0007436:	66 90                	xchg   ax,ax
c0007438:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000743d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007442:	39 c2                	cmp    edx,eax
c0007444:	76 0a                	jbe    c0007450 <mem_trim+0x118>
c0007446:	b8 00 00 00 00       	mov    eax,0x0
c000744b:	e9 f4 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007450:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007455:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000745a:	39 c2                	cmp    edx,eax
c000745c:	75 0a                	jne    c0007468 <mem_trim+0x130>
c000745e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007462:	e9 dd 01 00 00       	jmp    c0007644 <mem_trim+0x30c>
c0007467:	90                   	nop
c0007468:	83 ec 08             	sub    esp,0x8
c000746b:	6a 00                	push   0x0
c000746d:	68 98 76 03 c0       	push   0xc0037698
c0007472:	e8 4d 98 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0007477:	83 c4 10             	add    esp,0x10
c000747a:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007484:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007487:	0f b7 c0             	movzx  eax,ax
c000748a:	01 d0                	add    eax,edx
c000748c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007490:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007494:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007497:	0f b6 c0             	movzx  eax,al
c000749a:	85 c0                	test   eax,eax
c000749c:	0f 85 c6 00 00 00    	jne    c0007568 <mem_trim+0x230>
c00074a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074a6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074a9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00074ae:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00074b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074b7:	01 d0                	add    eax,edx
c00074b9:	83 c0 06             	add    eax,0x6
c00074bc:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00074c1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00074c6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00074ca:	75 14                	jne    c00074e0 <mem_trim+0x1a8>
c00074cc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074d2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074d7:	01 d0                	add    eax,edx
c00074d9:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00074de:	66 90                	xchg   ax,ax
c00074e0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074e6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00074eb:	01 d0                	add    eax,edx
c00074ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00074f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00074f5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074fd:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0007502:	66 89 02             	mov    WORD PTR [edx],ax
c0007505:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007509:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000750e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751a:	66 89 02             	mov    WORD PTR [edx],ax
c000751d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007521:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007524:	0f b7 c0             	movzx  eax,ax
c0007527:	3d 40 06 00 00       	cmp    eax,0x640
c000752c:	74 1a                	je     c0007548 <mem_trim+0x210>
c000752e:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007534:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007538:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753b:	0f b7 c0             	movzx  eax,ax
c000753e:	01 c2                	add    edx,eax
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007548:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000754e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007556:	29 d1                	sub    ecx,edx
c0007558:	89 ca                	mov    edx,ecx
c000755a:	01 d0                	add    eax,edx
c000755c:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007562:	e9 c9 00 00 00       	jmp    c0007630 <mem_trim+0x2f8>
c0007567:	90                   	nop
c0007568:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000756d:	8d 50 12             	lea    edx,[eax+0x12]
c0007570:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007575:	39 c2                	cmp    edx,eax
c0007577:	0f 87 b3 00 00 00    	ja     c0007630 <mem_trim+0x2f8>
c000757d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007586:	01 d0                	add    eax,edx
c0007588:	83 c0 06             	add    eax,0x6
c000758b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007590:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007596:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c000759b:	01 d0                	add    eax,edx
c000759d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00075a1:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075a6:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00075aa:	73 0c                	jae    c00075b8 <mem_trim+0x280>
c00075ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075b0:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00075b5:	8d 76 00             	lea    esi,[esi+0x0]
c00075b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00075c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075cb:	66 89 02             	mov    WORD PTR [edx],ax
c00075ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00075d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00075db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e3:	66 89 02             	mov    WORD PTR [edx],ax
c00075e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00075ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075ed:	0f b7 c0             	movzx  eax,ax
c00075f0:	3d 40 06 00 00       	cmp    eax,0x640
c00075f5:	74 1d                	je     c0007614 <mem_trim+0x2dc>
c00075f7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007601:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007604:	0f b7 c0             	movzx  eax,ax
c0007607:	01 c2                	add    edx,eax
c0007609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000760d:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007611:	8d 76 00             	lea    esi,[esi+0x0]
c0007614:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000761a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000761e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007622:	29 d1                	sub    ecx,edx
c0007624:	89 ca                	mov    edx,ecx
c0007626:	01 d0                	add    eax,edx
c0007628:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000762e:	66 90                	xchg   ax,ax
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	68 98 76 03 c0       	push   0xc0037698
c0007638:	e8 6f 96 ff ff       	call   c0000cac <sys_sem_signal>
c000763d:	83 c4 10             	add    esp,0x10
c0007640:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007644:	83 c4 2c             	add    esp,0x2c
c0007647:	c3                   	ret    

c0007648 <mem_malloc>:
c0007648:	53                   	push   ebx
c0007649:	83 ec 28             	sub    esp,0x28
c000764c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007650:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007655:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000765a:	85 c0                	test   eax,eax
c000765c:	75 0a                	jne    c0007668 <mem_malloc+0x20>
c000765e:	b8 00 00 00 00       	mov    eax,0x0
c0007663:	e9 f4 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007668:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000766d:	83 f8 0b             	cmp    eax,0xb
c0007670:	77 0a                	ja     c000767c <mem_malloc+0x34>
c0007672:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007679:	8d 76 00             	lea    esi,[esi+0x0]
c000767c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007681:	3d 40 06 00 00       	cmp    eax,0x640
c0007686:	76 0c                	jbe    c0007694 <mem_malloc+0x4c>
c0007688:	b8 00 00 00 00       	mov    eax,0x0
c000768d:	e9 ca 02 00 00       	jmp    c000795c <mem_malloc+0x314>
c0007692:	66 90                	xchg   ax,ax
c0007694:	83 ec 08             	sub    esp,0x8
c0007697:	6a 00                	push   0x0
c0007699:	68 98 76 03 c0       	push   0xc0037698
c000769e:	e8 21 96 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c00076a3:	83 c4 10             	add    esp,0x10
c00076a6:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c00076ac:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00076b1:	29 c2                	sub    edx,eax
c00076b3:	89 d0                	mov    eax,edx
c00076b5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076ba:	e9 5d 02 00 00       	jmp    c000791c <mem_malloc+0x2d4>
c00076bf:	90                   	nop
c00076c0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076c6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076cb:	01 d0                	add    eax,edx
c00076cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00076d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d5:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00076d8:	0f b6 c0             	movzx  eax,al
c00076db:	85 c0                	test   eax,eax
c00076dd:	0f 85 21 02 00 00    	jne    c0007904 <mem_malloc+0x2bc>
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ea:	0f b7 d0             	movzx  edx,ax
c00076ed:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076f2:	29 c2                	sub    edx,eax
c00076f4:	89 d0                	mov    eax,edx
c00076f6:	8d 50 fa             	lea    edx,[eax-0x6]
c00076f9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00076fe:	39 c2                	cmp    edx,eax
c0007700:	0f 82 fe 01 00 00    	jb     c0007904 <mem_malloc+0x2bc>
c0007706:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000770a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000770d:	0f b7 d0             	movzx  edx,ax
c0007710:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007715:	29 c2                	sub    edx,eax
c0007717:	89 d0                	mov    eax,edx
c0007719:	8d 50 fa             	lea    edx,[eax-0x6]
c000771c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007721:	83 c0 12             	add    eax,0x12
c0007724:	39 c2                	cmp    edx,eax
c0007726:	0f 82 c4 00 00 00    	jb     c00077f0 <mem_malloc+0x1a8>
c000772c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007735:	01 d0                	add    eax,edx
c0007737:	83 c0 06             	add    eax,0x6
c000773a:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000773f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000774a:	01 d0                	add    eax,edx
c000774c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007754:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007758:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000775c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000775f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007763:	66 89 02             	mov    WORD PTR [edx],ax
c0007766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000776a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000776f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007777:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000777c:	66 89 02             	mov    WORD PTR [edx],ax
c000777f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007783:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000778b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000778e:	0f b7 c0             	movzx  eax,ax
c0007791:	3d 40 06 00 00       	cmp    eax,0x640
c0007796:	74 1c                	je     c00077b4 <mem_malloc+0x16c>
c0007798:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a5:	0f b7 c0             	movzx  eax,ax
c00077a8:	01 c2                	add    edx,eax
c00077aa:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00077af:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00077b3:	90                   	nop
c00077b4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00077be:	01 d0                	add    eax,edx
c00077c0:	83 c0 06             	add    eax,0x6
c00077c3:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00077c9:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00077d0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077d6:	0f b7 d2             	movzx  edx,dx
c00077d9:	0f b7 c0             	movzx  eax,ax
c00077dc:	39 c2                	cmp    edx,eax
c00077de:	73 60                	jae    c0007840 <mem_malloc+0x1f8>
c00077e0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077e6:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00077ec:	eb 52                	jmp    c0007840 <mem_malloc+0x1f8>
c00077ee:	66 90                	xchg   ax,ax
c00077f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00077f4:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00077f8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00077fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007802:	66 8b 12             	mov    dx,WORD PTR [edx]
c0007805:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c000780b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000780f:	29 cb                	sub    ebx,ecx
c0007811:	89 d9                	mov    ecx,ebx
c0007813:	29 ca                	sub    edx,ecx
c0007815:	01 d0                	add    eax,edx
c0007817:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000781d:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c0007824:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000782a:	0f b7 d2             	movzx  edx,dx
c000782d:	0f b7 c0             	movzx  eax,ax
c0007830:	39 c2                	cmp    edx,eax
c0007832:	73 0c                	jae    c0007840 <mem_malloc+0x1f8>
c0007834:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c000783a:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007840:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007845:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007849:	75 71                	jne    c00078bc <mem_malloc+0x274>
c000784b:	eb 1b                	jmp    c0007868 <mem_malloc+0x220>
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007856:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000785b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000785e:	0f b7 c0             	movzx  eax,ax
c0007861:	01 d0                	add    eax,edx
c0007863:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007868:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000786d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007870:	0f b6 c0             	movzx  eax,al
c0007873:	85 c0                	test   eax,eax
c0007875:	74 11                	je     c0007888 <mem_malloc+0x240>
c0007877:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000787d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007882:	39 c2                	cmp    edx,eax
c0007884:	75 ca                	jne    c0007850 <mem_malloc+0x208>
c0007886:	66 90                	xchg   ax,ax
c0007888:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000788e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007893:	39 c2                	cmp    edx,eax
c0007895:	74 25                	je     c00078bc <mem_malloc+0x274>
c0007897:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000789c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000789f:	0f b6 c0             	movzx  eax,al
c00078a2:	85 c0                	test   eax,eax
c00078a4:	74 16                	je     c00078bc <mem_malloc+0x274>
c00078a6:	83 ec 08             	sub    esp,0x8
c00078a9:	68 a5 fd 02 c0       	push   0xc002fda5
c00078ae:	68 06 fd 02 c0       	push   0xc002fd06
c00078b3:	e8 d0 84 01 00       	call   c001fd88 <CPrintf>
c00078b8:	83 c4 10             	add    esp,0x10
c00078bb:	90                   	nop
c00078bc:	83 ec 0c             	sub    esp,0xc
c00078bf:	68 98 76 03 c0       	push   0xc0037698
c00078c4:	e8 e3 93 ff ff       	call   c0000cac <sys_sem_signal>
c00078c9:	83 c4 10             	add    esp,0x10
c00078cc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00078d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d5:	01 d0                	add    eax,edx
c00078d7:	8d 50 06             	lea    edx,[eax+0x6]
c00078da:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00078df:	39 c2                	cmp    edx,eax
c00078e1:	76 15                	jbe    c00078f8 <mem_malloc+0x2b0>
c00078e3:	83 ec 08             	sub    esp,0x8
c00078e6:	68 0c fe 02 c0       	push   0xc002fe0c
c00078eb:	68 06 fd 02 c0       	push   0xc002fd06
c00078f0:	e8 93 84 01 00       	call   c001fd88 <CPrintf>
c00078f5:	83 c4 10             	add    esp,0x10
c00078f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078fc:	83 c0 06             	add    eax,0x6
c00078ff:	eb 5b                	jmp    c000795c <mem_malloc+0x314>
c0007901:	8d 76 00             	lea    esi,[esi+0x0]
c0007904:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000790a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000790f:	01 d0                	add    eax,edx
c0007911:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007914:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007921:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007926:	b9 40 06 00 00       	mov    ecx,0x640
c000792b:	29 d1                	sub    ecx,edx
c000792d:	89 ca                	mov    edx,ecx
c000792f:	39 d0                	cmp    eax,edx
c0007931:	0f 8c 89 fd ff ff    	jl     c00076c0 <mem_malloc+0x78>
c0007937:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c000793d:	83 c0 01             	add    eax,0x1
c0007940:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c0007946:	83 ec 0c             	sub    esp,0xc
c0007949:	68 98 76 03 c0       	push   0xc0037698
c000794e:	e8 59 93 ff ff       	call   c0000cac <sys_sem_signal>
c0007953:	83 c4 10             	add    esp,0x10
c0007956:	b8 00 00 00 00       	mov    eax,0x0
c000795b:	90                   	nop
c000795c:	83 c4 28             	add    esp,0x28
c000795f:	5b                   	pop    ebx
c0007960:	c3                   	ret    
c0007961:	8d 76 00             	lea    esi,[esi+0x0]

c0007964 <mem_calloc>:
c0007964:	83 ec 2c             	sub    esp,0x2c
c0007967:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000796b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000796f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007974:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007979:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000797d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007981:	0f af c2             	imul   eax,edx
c0007984:	0f b7 c0             	movzx  eax,ax
c0007987:	83 ec 0c             	sub    esp,0xc
c000798a:	50                   	push   eax
c000798b:	e8 b8 fc ff ff       	call   c0007648 <mem_malloc>
c0007990:	83 c4 10             	add    esp,0x10
c0007993:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007997:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000799c:	74 22                	je     c00079c0 <mem_calloc+0x5c>
c000799e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00079a3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00079a8:	0f af c2             	imul   eax,edx
c00079ab:	83 ec 04             	sub    esp,0x4
c00079ae:	50                   	push   eax
c00079af:	6a 00                	push   0x0
c00079b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b5:	e8 36 8b ff ff       	call   c00004f0 <memset>
c00079ba:	83 c4 10             	add    esp,0x10
c00079bd:	8d 76 00             	lea    esi,[esi+0x0]
c00079c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00079c4:	83 c4 2c             	add    esp,0x2c
c00079c7:	c3                   	ret    

c00079c8 <memp_init>:
c00079c8:	83 ec 10             	sub    esp,0x10
c00079cb:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00079d2:	eb 78                	jmp    c0007a4c <memp_init+0x84>
c00079d4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079d9:	89 d0                	mov    eax,edx
c00079db:	c1 e0 02             	shl    eax,0x2
c00079de:	01 d0                	add    eax,edx
c00079e0:	01 c0                	add    eax,eax
c00079e2:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079e7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00079ec:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00079f1:	89 d0                	mov    eax,edx
c00079f3:	c1 e0 02             	shl    eax,0x2
c00079f6:	01 d0                	add    eax,edx
c00079f8:	01 c0                	add    eax,eax
c00079fa:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00079ff:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a04:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007a09:	89 d0                	mov    eax,edx
c0007a0b:	c1 e0 02             	shl    eax,0x2
c0007a0e:	01 d0                	add    eax,edx
c0007a10:	01 c0                	add    eax,eax
c0007a12:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a17:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007a1c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a21:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c0007a26:	66 8b 94 00 5c fe 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd01a4]
c0007a2e:	89 c8                	mov    eax,ecx
c0007a30:	c1 e0 02             	shl    eax,0x2
c0007a33:	01 c8                	add    eax,ecx
c0007a35:	01 c0                	add    eax,eax
c0007a37:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007a3c:	66 89 10             	mov    WORD PTR [eax],dx
c0007a3f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007a44:	83 c0 01             	add    eax,0x1
c0007a47:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007a4c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a51:	83 f8 0d             	cmp    eax,0xd
c0007a54:	0f 86 7a ff ff ff    	jbe    c00079d4 <memp_init+0xc>
c0007a5a:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c0007a62:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007a69:	e9 8a 00 00 00       	jmp    c0007af8 <memp_init+0x130>
c0007a6e:	66 90                	xchg   ax,ax
c0007a70:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a75:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007a80:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007a87:	eb 47                	jmp    c0007ad0 <memp_init+0x108>
c0007a89:	8d 76 00             	lea    esi,[esi+0x0]
c0007a8c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007a91:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a9c:	89 10                	mov    DWORD PTR [eax],edx
c0007a9e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007aa3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007aa7:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007aae:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ab3:	66 8b 84 00 78 fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0188]
c0007abb:	0f b7 c0             	movzx  eax,ax
c0007abe:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007ac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ac6:	83 c0 01             	add    eax,0x1
c0007ac9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ace:	66 90                	xchg   ax,ax
c0007ad0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007ad5:	66 8b 84 00 5c fe 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd01a4]
c0007add:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007ae2:	0f b7 c0             	movzx  eax,ax
c0007ae5:	39 c2                	cmp    edx,eax
c0007ae7:	72 a3                	jb     c0007a8c <memp_init+0xc4>
c0007ae9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007aee:	83 c0 01             	add    eax,0x1
c0007af1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007af6:	66 90                	xchg   ax,ax
c0007af8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007afd:	83 f8 0d             	cmp    eax,0xd
c0007b00:	0f 86 6a ff ff ff    	jbe    c0007a70 <memp_init+0xa8>
c0007b06:	90                   	nop
c0007b07:	83 c4 10             	add    esp,0x10
c0007b0a:	c3                   	ret    
c0007b0b:	90                   	nop

c0007b0c <memp_malloc>:
c0007b0c:	83 ec 1c             	sub    esp,0x1c
c0007b0f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c0007b14:	76 22                	jbe    c0007b38 <memp_malloc+0x2c>
c0007b16:	83 ec 08             	sub    esp,0x8
c0007b19:	68 3c fe 02 c0       	push   0xc002fe3c
c0007b1e:	68 06 fd 02 c0       	push   0xc002fd06
c0007b23:	e8 60 82 01 00       	call   c001fd88 <CPrintf>
c0007b28:	83 c4 10             	add    esp,0x10
c0007b2b:	b8 00 00 00 00       	mov    eax,0x0
c0007b30:	e9 ff 00 00 00       	jmp    c0007c34 <memp_malloc+0x128>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	e8 3b 82 01 00       	call   c001fd78 <CLockScheduler>
c0007b3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b41:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c0007b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b51:	0f 84 a1 00 00 00    	je     c0007bf8 <memp_malloc+0xec>
c0007b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b61:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b6c:	89 d0                	mov    eax,edx
c0007b6e:	c1 e0 02             	shl    eax,0x2
c0007b71:	01 d0                	add    eax,edx
c0007b73:	01 c0                	add    eax,eax
c0007b75:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b7a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007b7d:	83 c0 01             	add    eax,0x1
c0007b80:	89 c2                	mov    edx,eax
c0007b82:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b86:	89 c8                	mov    eax,ecx
c0007b88:	c1 e0 02             	shl    eax,0x2
c0007b8b:	01 c8                	add    eax,ecx
c0007b8d:	01 c0                	add    eax,eax
c0007b8f:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b94:	66 89 10             	mov    WORD PTR [eax],dx
c0007b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007b9b:	89 d0                	mov    eax,edx
c0007b9d:	c1 e0 02             	shl    eax,0x2
c0007ba0:	01 d0                	add    eax,edx
c0007ba2:	01 c0                	add    eax,eax
c0007ba4:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007ba9:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bb0:	89 c8                	mov    eax,ecx
c0007bb2:	c1 e0 02             	shl    eax,0x2
c0007bb5:	01 c8                	add    eax,ecx
c0007bb7:	01 c0                	add    eax,eax
c0007bb9:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bbe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007bc1:	0f b7 d2             	movzx  edx,dx
c0007bc4:	0f b7 c0             	movzx  eax,ax
c0007bc7:	39 c2                	cmp    edx,eax
c0007bc9:	73 5d                	jae    c0007c28 <memp_malloc+0x11c>
c0007bcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bcf:	89 d0                	mov    eax,edx
c0007bd1:	c1 e0 02             	shl    eax,0x2
c0007bd4:	01 d0                	add    eax,edx
c0007bd6:	01 c0                	add    eax,eax
c0007bd8:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007bdd:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007be0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007be4:	89 c8                	mov    eax,ecx
c0007be6:	c1 e0 02             	shl    eax,0x2
c0007be9:	01 c8                	add    eax,ecx
c0007beb:	01 c0                	add    eax,eax
c0007bed:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007bf2:	66 89 10             	mov    WORD PTR [eax],dx
c0007bf5:	eb 31                	jmp    c0007c28 <memp_malloc+0x11c>
c0007bf7:	90                   	nop
c0007bf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007bfc:	89 d0                	mov    eax,edx
c0007bfe:	c1 e0 02             	shl    eax,0x2
c0007c01:	01 d0                	add    eax,edx
c0007c03:	01 c0                	add    eax,eax
c0007c05:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c0d:	83 c0 01             	add    eax,0x1
c0007c10:	89 c2                	mov    edx,eax
c0007c12:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c16:	89 c8                	mov    eax,ecx
c0007c18:	c1 e0 02             	shl    eax,0x2
c0007c1b:	01 c8                	add    eax,ecx
c0007c1d:	01 c0                	add    eax,eax
c0007c1f:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007c24:	66 89 10             	mov    WORD PTR [eax],dx
c0007c27:	90                   	nop
c0007c28:	e8 2f 81 01 00       	call   c001fd5c <CUnlockScheduler>
c0007c2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c31:	8d 76 00             	lea    esi,[esi+0x0]
c0007c34:	83 c4 1c             	add    esp,0x1c
c0007c37:	c3                   	ret    

c0007c38 <memp_free>:
c0007c38:	83 ec 1c             	sub    esp,0x1c
c0007c3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c40:	74 66                	je     c0007ca8 <memp_free+0x70>
c0007c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c4a:	e8 29 81 01 00       	call   c001fd78 <CLockScheduler>
c0007c4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c53:	89 d0                	mov    eax,edx
c0007c55:	c1 e0 02             	shl    eax,0x2
c0007c58:	01 d0                	add    eax,edx
c0007c5a:	01 c0                	add    eax,eax
c0007c5c:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c61:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007c64:	83 e8 01             	sub    eax,0x1
c0007c67:	89 c2                	mov    edx,eax
c0007c69:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c6d:	89 c8                	mov    eax,ecx
c0007c6f:	c1 e0 02             	shl    eax,0x2
c0007c72:	01 c8                	add    eax,ecx
c0007c74:	01 c0                	add    eax,eax
c0007c76:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007c7b:	66 89 10             	mov    WORD PTR [eax],dx
c0007c7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c82:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c8d:	89 10                	mov    DWORD PTR [eax],edx
c0007c8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c97:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007c9e:	e8 b9 80 01 00       	call   c001fd5c <CUnlockScheduler>
c0007ca3:	eb 07                	jmp    c0007cac <memp_free+0x74>
c0007ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0007ca8:	90                   	nop
c0007ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cac:	83 c4 1c             	add    esp,0x1c
c0007caf:	c3                   	ret    

c0007cb0 <netif_init>:
c0007cb0:	90                   	nop
c0007cb1:	c3                   	ret    
c0007cb2:	66 90                	xchg   ax,ax

c0007cb4 <netif_find>:
c0007cb4:	83 ec 10             	sub    esp,0x10
c0007cb7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007cbc:	75 0a                	jne    c0007cc8 <netif_find+0x14>
c0007cbe:	b8 00 00 00 00       	mov    eax,0x0
c0007cc3:	e9 80 00 00 00       	jmp    c0007d48 <netif_find+0x94>
c0007cc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ccc:	83 c0 02             	add    eax,0x2
c0007ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0007cd1:	83 e8 30             	sub    eax,0x30
c0007cd4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007cd8:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007cdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ce1:	eb 59                	jmp    c0007d3c <netif_find+0x88>
c0007ce3:	90                   	nop
c0007ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ce8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007ceb:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007cf0:	0f b6 c0             	movzx  eax,al
c0007cf3:	39 c2                	cmp    edx,eax
c0007cf5:	75 39                	jne    c0007d30 <netif_find+0x7c>
c0007cf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cfb:	8a 10                	mov    dl,BYTE PTR [eax]
c0007cfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d01:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007d04:	0f be d2             	movsx  edx,dl
c0007d07:	0f be c0             	movsx  eax,al
c0007d0a:	39 c2                	cmp    edx,eax
c0007d0c:	75 22                	jne    c0007d30 <netif_find+0x7c>
c0007d0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d12:	83 c0 01             	add    eax,0x1
c0007d15:	8a 10                	mov    dl,BYTE PTR [eax]
c0007d17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d1b:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007d1e:	0f be d2             	movsx  edx,dl
c0007d21:	0f be c0             	movsx  eax,al
c0007d24:	39 c2                	cmp    edx,eax
c0007d26:	75 08                	jne    c0007d30 <netif_find+0x7c>
c0007d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d2c:	eb 1a                	jmp    c0007d48 <netif_find+0x94>
c0007d2e:	66 90                	xchg   ax,ax
c0007d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d3a:	66 90                	xchg   ax,ax
c0007d3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007d41:	75 a1                	jne    c0007ce4 <netif_find+0x30>
c0007d43:	b8 00 00 00 00       	mov    eax,0x0
c0007d48:	83 c4 10             	add    esp,0x10
c0007d4b:	c3                   	ret    

c0007d4c <netif_set_ipaddr>:
c0007d4c:	83 ec 1c             	sub    esp,0x1c
c0007d4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d5c:	39 c2                	cmp    edx,eax
c0007d5e:	0f 84 bc 00 00 00    	je     c0007e20 <netif_set_ipaddr+0xd4>
c0007d64:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007d69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d6d:	eb 45                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007d6f:	90                   	nop
c0007d70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d74:	8b 10                	mov    edx,DWORD PTR [eax]
c0007d76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007d7d:	39 c2                	cmp    edx,eax
c0007d7f:	75 27                	jne    c0007da8 <netif_set_ipaddr+0x5c>
c0007d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007d88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d8c:	83 ec 0c             	sub    esp,0xc
c0007d8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007d93:	e8 7c 36 00 00       	call   c000b414 <tcp_abort>
c0007d98:	83 c4 10             	add    esp,0x10
c0007d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007da3:	eb 0f                	jmp    c0007db4 <netif_set_ipaddr+0x68>
c0007da5:	8d 76 00             	lea    esi,[esi+0x0]
c0007da8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007daf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007db3:	90                   	nop
c0007db4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007db9:	75 b5                	jne    c0007d70 <netif_set_ipaddr+0x24>
c0007dbb:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007dc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc4:	eb 52                	jmp    c0007e18 <netif_set_ipaddr+0xcc>
c0007dc6:	66 90                	xchg   ax,ax
c0007dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dcc:	85 c0                	test   eax,eax
c0007dce:	74 3c                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	74 32                	je     c0007e0c <netif_set_ipaddr+0xc0>
c0007dda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0007de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007de7:	39 c2                	cmp    edx,eax
c0007de9:	75 21                	jne    c0007e0c <netif_set_ipaddr+0xc0>
c0007deb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007df0:	74 0a                	je     c0007dfc <netif_set_ipaddr+0xb0>
c0007df2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007df6:	8b 00                	mov    eax,DWORD PTR [eax]
c0007df8:	eb 0a                	jmp    c0007e04 <netif_set_ipaddr+0xb8>
c0007dfa:	66 90                	xchg   ax,ax
c0007dfc:	b8 00 00 00 00       	mov    eax,0x0
c0007e01:	8d 76 00             	lea    esi,[esi+0x0]
c0007e04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e08:	89 02                	mov    DWORD PTR [edx],eax
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e10:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007e13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e17:	90                   	nop
c0007e18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e1d:	75 a9                	jne    c0007dc8 <netif_set_ipaddr+0x7c>
c0007e1f:	90                   	nop
c0007e20:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007e25:	74 09                	je     c0007e30 <netif_set_ipaddr+0xe4>
c0007e27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007e2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e2d:	eb 09                	jmp    c0007e38 <netif_set_ipaddr+0xec>
c0007e2f:	90                   	nop
c0007e30:	b8 00 00 00 00       	mov    eax,0x0
c0007e35:	8d 76 00             	lea    esi,[esi+0x0]
c0007e38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007e3c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007e3f:	90                   	nop
c0007e40:	83 c4 1c             	add    esp,0x1c
c0007e43:	c3                   	ret    

c0007e44 <netif_set_gw>:
c0007e44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e49:	74 09                	je     c0007e54 <netif_set_gw+0x10>
c0007e4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e51:	eb 09                	jmp    c0007e5c <netif_set_gw+0x18>
c0007e53:	90                   	nop
c0007e54:	b8 00 00 00 00       	mov    eax,0x0
c0007e59:	8d 76 00             	lea    esi,[esi+0x0]
c0007e5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e60:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007e63:	90                   	nop
c0007e64:	c3                   	ret    
c0007e65:	8d 76 00             	lea    esi,[esi+0x0]

c0007e68 <netif_set_netmask>:
c0007e68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e6d:	74 09                	je     c0007e78 <netif_set_netmask+0x10>
c0007e6f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e75:	eb 09                	jmp    c0007e80 <netif_set_netmask+0x18>
c0007e77:	90                   	nop
c0007e78:	b8 00 00 00 00       	mov    eax,0x0
c0007e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0007e80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007e84:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007e87:	90                   	nop
c0007e88:	c3                   	ret    
c0007e89:	8d 76 00             	lea    esi,[esi+0x0]

c0007e8c <netif_set_addr>:
c0007e8c:	83 ec 0c             	sub    esp,0xc
c0007e8f:	83 ec 08             	sub    esp,0x8
c0007e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e9a:	e8 ad fe ff ff       	call   c0007d4c <netif_set_ipaddr>
c0007e9f:	83 c4 10             	add    esp,0x10
c0007ea2:	83 ec 08             	sub    esp,0x8
c0007ea5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ead:	e8 b6 ff ff ff       	call   c0007e68 <netif_set_netmask>
c0007eb2:	83 c4 10             	add    esp,0x10
c0007eb5:	83 ec 08             	sub    esp,0x8
c0007eb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ec0:	e8 7f ff ff ff       	call   c0007e44 <netif_set_gw>
c0007ec5:	83 c4 10             	add    esp,0x10
c0007ec8:	90                   	nop
c0007ec9:	83 c4 0c             	add    esp,0xc
c0007ecc:	c3                   	ret    
c0007ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0007ed0 <netif_add>:
c0007ed0:	83 ec 0c             	sub    esp,0xc
c0007ed3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ed8:	75 16                	jne    c0007ef0 <netif_add+0x20>
c0007eda:	83 ec 08             	sub    esp,0x8
c0007edd:	68 94 fe 02 c0       	push   0xc002fe94
c0007ee2:	68 06 fd 02 c0       	push   0xc002fd06
c0007ee7:	e8 9c 7e 01 00       	call   c001fd88 <CPrintf>
c0007eec:	83 c4 10             	add    esp,0x10
c0007eef:	90                   	nop
c0007ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f15:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007f21:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007f24:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007f29:	8d 50 01             	lea    edx,[eax+0x1]
c0007f2c:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007f36:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007f41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f54:	e8 33 ff ff ff       	call   c0007e8c <netif_set_addr>
c0007f59:	83 c4 10             	add    esp,0x10
c0007f5c:	83 ec 0c             	sub    esp,0xc
c0007f5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f67:	ff d0                	call   eax
c0007f69:	83 c4 10             	add    esp,0x10
c0007f6c:	0f be c0             	movsx  eax,al
c0007f6f:	85 c0                	test   eax,eax
c0007f71:	74 09                	je     c0007f7c <netif_add+0xac>
c0007f73:	b8 00 00 00 00       	mov    eax,0x0
c0007f78:	eb 1e                	jmp    c0007f98 <netif_add+0xc8>
c0007f7a:	66 90                	xchg   ax,ax
c0007f7c:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	89 10                	mov    DWORD PTR [eax],edx
c0007f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f8c:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f95:	8d 76 00             	lea    esi,[esi+0x0]
c0007f98:	83 c4 0c             	add    esp,0xc
c0007f9b:	c3                   	ret    

c0007f9c <netif_set_default>:
c0007f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fa0:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007fa5:	90                   	nop
c0007fa6:	c3                   	ret    
c0007fa7:	90                   	nop

c0007fa8 <netif_set_up>:
c0007fa8:	83 ec 0c             	sub    esp,0xc
c0007fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007faf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fb2:	0f b6 c0             	movzx  eax,al
c0007fb5:	83 e0 01             	and    eax,0x1
c0007fb8:	75 4a                	jne    c0008004 <netif_set_up+0x5c>
c0007fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fbe:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fc1:	83 c8 01             	or     eax,0x1
c0007fc4:	88 c2                	mov    dl,al
c0007fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fca:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fd1:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fd4:	0f b6 c0             	movzx  eax,al
c0007fd7:	83 e0 10             	and    eax,0x10
c0007fda:	74 28                	je     c0008004 <netif_set_up+0x5c>
c0007fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fe0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fe3:	0f b6 c0             	movzx  eax,al
c0007fe6:	83 e0 20             	and    eax,0x20
c0007fe9:	74 19                	je     c0008004 <netif_set_up+0x5c>
c0007feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fef:	83 c0 04             	add    eax,0x4
c0007ff2:	83 ec 08             	sub    esp,0x8
c0007ff5:	50                   	push   eax
c0007ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ffa:	e8 bd a5 00 00       	call   c00125bc <etharp_request>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	66 90                	xchg   ax,ax
c0008004:	90                   	nop
c0008005:	83 c4 0c             	add    esp,0xc
c0008008:	c3                   	ret    
c0008009:	8d 76 00             	lea    esi,[esi+0x0]

c000800c <netif_set_down>:
c000800c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008010:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008013:	0f b6 c0             	movzx  eax,al
c0008016:	83 e0 01             	and    eax,0x1
c0008019:	74 15                	je     c0008030 <netif_set_down+0x24>
c000801b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000801f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008022:	83 e0 fe             	and    eax,0xfffffffe
c0008025:	88 c2                	mov    dl,al
c0008027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000802b:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c000802e:	66 90                	xchg   ax,ax
c0008030:	90                   	nop
c0008031:	c3                   	ret    
c0008032:	66 90                	xchg   ax,ax

c0008034 <netif_remove>:
c0008034:	83 ec 10             	sub    esp,0x10
c0008037:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000803c:	0f 84 92 00 00 00    	je     c00080d4 <netif_remove+0xa0>
c0008042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008046:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0008049:	83 e0 01             	and    eax,0x1
c000804c:	0f b6 c0             	movzx  eax,al
c000804f:	85 c0                	test   eax,eax
c0008051:	74 0d                	je     c0008060 <netif_remove+0x2c>
c0008053:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008057:	e8 b0 ff ff ff       	call   c000800c <netif_set_down>
c000805c:	83 c4 04             	add    esp,0x4
c000805f:	90                   	nop
c0008060:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0008065:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0008069:	75 0d                	jne    c0008078 <netif_remove+0x44>
c000806b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000806f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008071:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0008076:	eb 44                	jmp    c00080bc <netif_remove+0x88>
c0008078:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c000807d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008081:	eb 29                	jmp    c00080ac <netif_remove+0x78>
c0008083:	90                   	nop
c0008084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008088:	8b 00                	mov    eax,DWORD PTR [eax]
c000808a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000808e:	75 10                	jne    c00080a0 <netif_remove+0x6c>
c0008090:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008094:	8b 10                	mov    edx,DWORD PTR [eax]
c0008096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000809a:	89 10                	mov    DWORD PTR [eax],edx
c000809c:	eb 16                	jmp    c00080b4 <netif_remove+0x80>
c000809e:	66 90                	xchg   ax,ax
c00080a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00080a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080aa:	66 90                	xchg   ax,ax
c00080ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b1:	75 d1                	jne    c0008084 <netif_remove+0x50>
c00080b3:	90                   	nop
c00080b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080b9:	74 1d                	je     c00080d8 <netif_remove+0xa4>
c00080bb:	90                   	nop
c00080bc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00080c1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00080c5:	75 15                	jne    c00080dc <netif_remove+0xa8>
c00080c7:	6a 00                	push   0x0
c00080c9:	e8 ce fe ff ff       	call   c0007f9c <netif_set_default>
c00080ce:	83 c4 04             	add    esp,0x4
c00080d1:	eb 09                	jmp    c00080dc <netif_remove+0xa8>
c00080d3:	90                   	nop
c00080d4:	90                   	nop
c00080d5:	eb 05                	jmp    c00080dc <netif_remove+0xa8>
c00080d7:	90                   	nop
c00080d8:	90                   	nop
c00080d9:	8d 76 00             	lea    esi,[esi+0x0]
c00080dc:	83 c4 10             	add    esp,0x10
c00080df:	c3                   	ret    

c00080e0 <netif_set_link_up>:
c00080e0:	83 ec 0c             	sub    esp,0xc
c00080e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080ea:	0f b6 c0             	movzx  eax,al
c00080ed:	83 e0 10             	and    eax,0x10
c00080f0:	75 4a                	jne    c000813c <netif_set_link_up+0x5c>
c00080f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00080f9:	83 c8 10             	or     eax,0x10
c00080fc:	88 c2                	mov    dl,al
c00080fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008102:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008109:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000810c:	0f b6 c0             	movzx  eax,al
c000810f:	83 e0 01             	and    eax,0x1
c0008112:	74 28                	je     c000813c <netif_set_link_up+0x5c>
c0008114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008118:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000811b:	0f b6 c0             	movzx  eax,al
c000811e:	83 e0 20             	and    eax,0x20
c0008121:	74 19                	je     c000813c <netif_set_link_up+0x5c>
c0008123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008127:	83 c0 04             	add    eax,0x4
c000812a:	83 ec 08             	sub    esp,0x8
c000812d:	50                   	push   eax
c000812e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008132:	e8 85 a4 00 00       	call   c00125bc <etharp_request>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	66 90                	xchg   ax,ax
c000813c:	90                   	nop
c000813d:	83 c4 0c             	add    esp,0xc
c0008140:	c3                   	ret    
c0008141:	8d 76 00             	lea    esi,[esi+0x0]

c0008144 <netif_set_link_down>:
c0008144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008148:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000814b:	0f b6 c0             	movzx  eax,al
c000814e:	83 e0 10             	and    eax,0x10
c0008151:	74 15                	je     c0008168 <netif_set_link_down+0x24>
c0008153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008157:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c000815a:	83 e0 ef             	and    eax,0xffffffef
c000815d:	88 c2                	mov    dl,al
c000815f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008163:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0008166:	66 90                	xchg   ax,ax
c0008168:	90                   	nop
c0008169:	c3                   	ret    
c000816a:	66 90                	xchg   ax,ax

c000816c <pbuf_free_ooseq>:
c000816c:	83 ec 1c             	sub    esp,0x1c
c000816f:	e8 04 7c 01 00       	call   c001fd78 <CLockScheduler>
c0008174:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000817b:	e8 dc 7b 01 00       	call   c001fd5c <CUnlockScheduler>
c0008180:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0008185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008189:	eb 41                	jmp    c00081cc <pbuf_free_ooseq+0x60>
c000818b:	90                   	nop
c000818c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008190:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008196:	85 c0                	test   eax,eax
c0008198:	74 26                	je     c00081c0 <pbuf_free_ooseq+0x54>
c000819a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000819e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c00081a4:	83 ec 0c             	sub    esp,0xc
c00081a7:	50                   	push   eax
c00081a8:	e8 03 20 00 00       	call   c000a1b0 <tcp_segs_free>
c00081ad:	83 c4 10             	add    esp,0x10
c00081b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081b4:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c00081be:	eb 14                	jmp    c00081d4 <pbuf_free_ooseq+0x68>
c00081c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00081c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00081cb:	90                   	nop
c00081cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00081d1:	75 b9                	jne    c000818c <pbuf_free_ooseq+0x20>
c00081d3:	90                   	nop
c00081d4:	83 c4 1c             	add    esp,0x1c
c00081d7:	c3                   	ret    

c00081d8 <pbuf_pool_is_empty>:
c00081d8:	83 ec 1c             	sub    esp,0x1c
c00081db:	e8 98 7b 01 00       	call   c001fd78 <CLockScheduler>
c00081e0:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c00081e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00081e9:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c00081f0:	e8 67 7b 01 00       	call   c001fd5c <CUnlockScheduler>
c00081f5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00081fa:	85 c0                	test   eax,eax
c00081fc:	75 2e                	jne    c000822c <pbuf_pool_is_empty+0x54>
c00081fe:	83 ec 04             	sub    esp,0x4
c0008201:	6a 00                	push   0x0
c0008203:	6a 00                	push   0x0
c0008205:	68 6c 81 00 c0       	push   0xc000816c
c000820a:	e8 45 8a ff ff       	call   c0000c54 <tcpip_callback_with_block>
c000820f:	83 c4 10             	add    esp,0x10
c0008212:	0f be c0             	movsx  eax,al
c0008215:	85 c0                	test   eax,eax
c0008217:	74 13                	je     c000822c <pbuf_pool_is_empty+0x54>
c0008219:	e8 5a 7b 01 00       	call   c001fd78 <CLockScheduler>
c000821e:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008225:	e8 32 7b 01 00       	call   c001fd5c <CUnlockScheduler>
c000822a:	66 90                	xchg   ax,ax
c000822c:	90                   	nop
c000822d:	83 c4 1c             	add    esp,0x1c
c0008230:	c3                   	ret    
c0008231:	8d 76 00             	lea    esi,[esi+0x0]

c0008234 <pbuf_alloced_custom>:
c0008234:	83 ec 2c             	sub    esp,0x2c
c0008237:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000823b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000823f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008244:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008249:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0008250:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008255:	74 29                	je     c0008280 <pbuf_alloced_custom+0x4c>
c0008257:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000825c:	74 12                	je     c0008270 <pbuf_alloced_custom+0x3c>
c000825e:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c0008263:	74 2b                	je     c0008290 <pbuf_alloced_custom+0x5c>
c0008265:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c000826a:	74 54                	je     c00082c0 <pbuf_alloced_custom+0x8c>
c000826c:	eb 32                	jmp    c00082a0 <pbuf_alloced_custom+0x6c>
c000826e:	66 90                	xchg   ax,ax
c0008270:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008275:	83 c0 14             	add    eax,0x14
c0008278:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000827d:	8d 76 00             	lea    esi,[esi+0x0]
c0008280:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008285:	83 c0 14             	add    eax,0x14
c0008288:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000828d:	8d 76 00             	lea    esi,[esi+0x0]
c0008290:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008295:	83 c0 0e             	add    eax,0xe
c0008298:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000829d:	eb 25                	jmp    c00082c4 <pbuf_alloced_custom+0x90>
c000829f:	90                   	nop
c00082a0:	83 ec 08             	sub    esp,0x8
c00082a3:	68 ac fe 02 c0       	push   0xc002feac
c00082a8:	68 06 fd 02 c0       	push   0xc002fd06
c00082ad:	e8 d6 7a 01 00       	call   c001fd88 <CPrintf>
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	b8 00 00 00 00       	mov    eax,0x0
c00082ba:	e9 95 00 00 00       	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082bf:	90                   	nop
c00082c0:	90                   	nop
c00082c1:	8d 76 00             	lea    esi,[esi+0x0]
c00082c4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082c9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00082ce:	01 c2                	add    edx,eax
c00082d0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00082d5:	39 c2                	cmp    edx,eax
c00082d7:	7d 07                	jge    c00082e0 <pbuf_alloced_custom+0xac>
c00082d9:	b8 00 00 00 00       	mov    eax,0x0
c00082de:	eb 74                	jmp    c0008354 <pbuf_alloced_custom+0x120>
c00082e0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00082e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00082ea:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082ef:	74 17                	je     c0008308 <pbuf_alloced_custom+0xd4>
c00082f1:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00082f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fa:	01 c2                	add    edx,eax
c00082fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008300:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008303:	eb 0f                	jmp    c0008314 <pbuf_alloced_custom+0xe0>
c0008305:	8d 76 00             	lea    esi,[esi+0x0]
c0008308:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000830c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008313:	90                   	nop
c0008314:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008318:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c000831c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008324:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008328:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000832c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000832f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0008333:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008337:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000833b:	88 c2                	mov    dl,al
c000833d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008341:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008344:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008348:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000834e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008352:	66 90                	xchg   ax,ax
c0008354:	83 c4 2c             	add    esp,0x2c
c0008357:	c3                   	ret    

c0008358 <pbuf_header>:
c0008358:	83 ec 2c             	sub    esp,0x2c
c000835b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000835f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008364:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008369:	75 15                	jne    c0008380 <pbuf_header+0x28>
c000836b:	83 ec 08             	sub    esp,0x8
c000836e:	68 36 01 03 c0       	push   0xc0030136
c0008373:	68 06 fd 02 c0       	push   0xc002fd06
c0008378:	e8 0b 7a 01 00       	call   c001fd88 <CPrintf>
c000837d:	83 c4 10             	add    esp,0x10
c0008380:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008385:	85 c0                	test   eax,eax
c0008387:	74 07                	je     c0008390 <pbuf_header+0x38>
c0008389:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000838e:	75 08                	jne    c0008398 <pbuf_header+0x40>
c0008390:	b0 00                	mov    al,0x0
c0008392:	e9 59 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008397:	90                   	nop
c0008398:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000839d:	85 c0                	test   eax,eax
c000839f:	79 3b                	jns    c00083dc <pbuf_header+0x84>
c00083a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a5:	f7 d8                	neg    eax
c00083a7:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00083b4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00083b9:	0f b7 c0             	movzx  eax,ax
c00083bc:	39 c2                	cmp    edx,eax
c00083be:	76 28                	jbe    c00083e8 <pbuf_header+0x90>
c00083c0:	83 ec 08             	sub    esp,0x8
c00083c3:	68 87 00 03 c0       	push   0xc0030087
c00083c8:	68 06 fd 02 c0       	push   0xc002fd06
c00083cd:	e8 b6 79 01 00       	call   c001fd88 <CPrintf>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	b0 01                	mov    al,0x1
c00083d7:	e9 14 01 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c00083dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00083e5:	8d 76 00             	lea    esi,[esi+0x0]
c00083e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083ef:	0f b6 c0             	movzx  eax,al
c00083f2:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00083f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00083fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00083fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008402:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008407:	85 c0                	test   eax,eax
c0008409:	74 0d                	je     c0008418 <pbuf_header+0xc0>
c000840b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008410:	83 f8 03             	cmp    eax,0x3
c0008413:	75 3f                	jne    c0008454 <pbuf_header+0xfc>
c0008415:	8d 76 00             	lea    esi,[esi+0x0]
c0008418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000841c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000841f:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008424:	f7 da                	neg    edx
c0008426:	01 c2                	add    edx,eax
c0008428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000842c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008436:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000843a:	83 c2 10             	add    edx,0x10
c000843d:	39 d0                	cmp    eax,edx
c000843f:	73 7f                	jae    c00084c0 <pbuf_header+0x168>
c0008441:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008449:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000844c:	b0 01                	mov    al,0x1
c000844e:	e9 9d 00 00 00       	jmp    c00084f0 <pbuf_header+0x198>
c0008453:	90                   	nop
c0008454:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008459:	83 f8 02             	cmp    eax,0x2
c000845c:	74 0a                	je     c0008468 <pbuf_header+0x110>
c000845e:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008463:	83 f8 01             	cmp    eax,0x1
c0008466:	75 3c                	jne    c00084a4 <pbuf_header+0x14c>
c0008468:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000846d:	85 c0                	test   eax,eax
c000846f:	79 2f                	jns    c00084a0 <pbuf_header+0x148>
c0008471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008475:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008479:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000847e:	0f b7 c0             	movzx  eax,ax
c0008481:	39 c2                	cmp    edx,eax
c0008483:	77 1b                	ja     c00084a0 <pbuf_header+0x148>
c0008485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000848c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008491:	f7 da                	neg    edx
c0008493:	01 c2                	add    edx,eax
c0008495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008499:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000849c:	eb 22                	jmp    c00084c0 <pbuf_header+0x168>
c000849e:	66 90                	xchg   ax,ax
c00084a0:	b0 01                	mov    al,0x1
c00084a2:	eb 4c                	jmp    c00084f0 <pbuf_header+0x198>
c00084a4:	83 ec 08             	sub    esp,0x8
c00084a7:	68 a5 00 03 c0       	push   0xc00300a5
c00084ac:	68 06 fd 02 c0       	push   0xc002fd06
c00084b1:	e8 d2 78 01 00       	call   c001fd88 <CPrintf>
c00084b6:	83 c4 10             	add    esp,0x10
c00084b9:	b0 01                	mov    al,0x1
c00084bb:	eb 33                	jmp    c00084f0 <pbuf_header+0x198>
c00084bd:	8d 76 00             	lea    esi,[esi+0x0]
c00084c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084c4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00084c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084cc:	01 d0                	add    eax,edx
c00084ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d2:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00084d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00084da:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00084dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084e1:	01 d0                	add    eax,edx
c00084e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084e7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00084eb:	b0 00                	mov    al,0x0
c00084ed:	8d 76 00             	lea    esi,[esi+0x0]
c00084f0:	83 c4 2c             	add    esp,0x2c
c00084f3:	c3                   	ret    

c00084f4 <pbuf_free>:
c00084f4:	83 ec 1c             	sub    esp,0x1c
c00084f7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00084fc:	75 26                	jne    c0008524 <pbuf_free+0x30>
c00084fe:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008503:	75 17                	jne    c000851c <pbuf_free+0x28>
c0008505:	83 ec 08             	sub    esp,0x8
c0008508:	68 36 01 03 c0       	push   0xc0030136
c000850d:	68 06 fd 02 c0       	push   0xc002fd06
c0008512:	e8 71 78 01 00       	call   c001fd88 <CPrintf>
c0008517:	83 c4 10             	add    esp,0x10
c000851a:	66 90                	xchg   ax,ax
c000851c:	b0 00                	mov    al,0x0
c000851e:	e9 a5 01 00 00       	jmp    c00086c8 <pbuf_free+0x1d4>
c0008523:	90                   	nop
c0008524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008528:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000852b:	0f b6 c0             	movzx  eax,al
c000852e:	85 c0                	test   eax,eax
c0008530:	74 42                	je     c0008574 <pbuf_free+0x80>
c0008532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008536:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008539:	0f b6 c0             	movzx  eax,al
c000853c:	83 f8 01             	cmp    eax,0x1
c000853f:	74 33                	je     c0008574 <pbuf_free+0x80>
c0008541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008545:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008548:	0f b6 c0             	movzx  eax,al
c000854b:	83 f8 02             	cmp    eax,0x2
c000854e:	74 24                	je     c0008574 <pbuf_free+0x80>
c0008550:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008554:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008557:	0f b6 c0             	movzx  eax,al
c000855a:	83 f8 03             	cmp    eax,0x3
c000855d:	74 15                	je     c0008574 <pbuf_free+0x80>
c000855f:	83 ec 08             	sub    esp,0x8
c0008562:	68 b3 00 03 c0       	push   0xc00300b3
c0008567:	68 06 fd 02 c0       	push   0xc002fd06
c000856c:	e8 17 78 01 00       	call   c001fd88 <CPrintf>
c0008571:	83 c4 10             	add    esp,0x10
c0008574:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008579:	e9 3a 01 00 00       	jmp    c00086b8 <pbuf_free+0x1c4>
c000857e:	66 90                	xchg   ax,ax
c0008580:	e8 f3 77 01 00       	call   c001fd78 <CLockScheduler>
c0008585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008589:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000858d:	0f b7 c0             	movzx  eax,ax
c0008590:	85 c0                	test   eax,eax
c0008592:	75 18                	jne    c00085ac <pbuf_free+0xb8>
c0008594:	83 ec 08             	sub    esp,0x8
c0008597:	68 c8 00 03 c0       	push   0xc00300c8
c000859c:	68 06 fd 02 c0       	push   0xc002fd06
c00085a1:	e8 e2 77 01 00       	call   c001fd88 <CPrintf>
c00085a6:	83 c4 10             	add    esp,0x10
c00085a9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085b0:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085b4:	83 e8 01             	sub    eax,0x1
c00085b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00085bb:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c00085bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085c3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00085c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00085cc:	e8 8b 77 01 00       	call   c001fd5c <CUnlockScheduler>
c00085d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085d6:	85 c0                	test   eax,eax
c00085d8:	0f 85 d2 00 00 00    	jne    c00086b0 <pbuf_free+0x1bc>
c00085de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00085e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085ec:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00085ef:	0f b6 c0             	movzx  eax,al
c00085f2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085fb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00085fe:	0f b6 c0             	movzx  eax,al
c0008601:	83 e0 02             	and    eax,0x2
c0008604:	74 3a                	je     c0008640 <pbuf_free+0x14c>
c0008606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000860a:	89 04 24             	mov    DWORD PTR [esp],eax
c000860d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008610:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008613:	85 c0                	test   eax,eax
c0008615:	75 15                	jne    c000862c <pbuf_free+0x138>
c0008617:	83 ec 08             	sub    esp,0x8
c000861a:	68 d0 fe 02 c0       	push   0xc002fed0
c000861f:	68 06 fd 02 c0       	push   0xc002fd06
c0008624:	e8 5f 77 01 00       	call   c001fd88 <CPrintf>
c0008629:	83 c4 10             	add    esp,0x10
c000862c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000862f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008632:	83 ec 0c             	sub    esp,0xc
c0008635:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008639:	ff d0                	call   eax
c000863b:	83 c4 10             	add    esp,0x10
c000863e:	eb 58                	jmp    c0008698 <pbuf_free+0x1a4>
c0008640:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008645:	83 f8 03             	cmp    eax,0x3
c0008648:	75 16                	jne    c0008660 <pbuf_free+0x16c>
c000864a:	83 ec 08             	sub    esp,0x8
c000864d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008651:	6a 0d                	push   0xd
c0008653:	e8 e0 f5 ff ff       	call   c0007c38 <memp_free>
c0008658:	83 c4 10             	add    esp,0x10
c000865b:	eb 3b                	jmp    c0008698 <pbuf_free+0x1a4>
c000865d:	8d 76 00             	lea    esi,[esi+0x0]
c0008660:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008665:	83 f8 01             	cmp    eax,0x1
c0008668:	74 0a                	je     c0008674 <pbuf_free+0x180>
c000866a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000866f:	83 f8 02             	cmp    eax,0x2
c0008672:	75 14                	jne    c0008688 <pbuf_free+0x194>
c0008674:	83 ec 08             	sub    esp,0x8
c0008677:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000867b:	6a 0c                	push   0xc
c000867d:	e8 b6 f5 ff ff       	call   c0007c38 <memp_free>
c0008682:	83 c4 10             	add    esp,0x10
c0008685:	eb 11                	jmp    c0008698 <pbuf_free+0x1a4>
c0008687:	90                   	nop
c0008688:	83 ec 0c             	sub    esp,0xc
c000868b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000868f:	e8 80 eb ff ff       	call   c0007214 <mem_free>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	90                   	nop
c0008698:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000869c:	83 c0 01             	add    eax,0x1
c000869f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00086a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086ab:	eb 0b                	jmp    c00086b8 <pbuf_free+0x1c4>
c00086ad:	8d 76 00             	lea    esi,[esi+0x0]
c00086b0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00086b8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00086bd:	0f 85 bd fe ff ff    	jne    c0008580 <pbuf_free+0x8c>
c00086c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00086c7:	90                   	nop
c00086c8:	83 c4 1c             	add    esp,0x1c
c00086cb:	c3                   	ret    

c00086cc <pbuf_alloc>:
c00086cc:	83 ec 3c             	sub    esp,0x3c
c00086cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00086d3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00086d8:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00086df:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00086e4:	74 2a                	je     c0008710 <pbuf_alloc+0x44>
c00086e6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00086eb:	74 13                	je     c0008700 <pbuf_alloc+0x34>
c00086ed:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00086f2:	74 2c                	je     c0008720 <pbuf_alloc+0x54>
c00086f4:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00086f9:	74 55                	je     c0008750 <pbuf_alloc+0x84>
c00086fb:	eb 33                	jmp    c0008730 <pbuf_alloc+0x64>
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]
c0008700:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008705:	83 c0 14             	add    eax,0x14
c0008708:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000870d:	8d 76 00             	lea    esi,[esi+0x0]
c0008710:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008715:	83 c0 14             	add    eax,0x14
c0008718:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000871d:	8d 76 00             	lea    esi,[esi+0x0]
c0008720:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008725:	83 c0 0e             	add    eax,0xe
c0008728:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000872d:	eb 25                	jmp    c0008754 <pbuf_alloc+0x88>
c000872f:	90                   	nop
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	68 de 00 03 c0       	push   0xc00300de
c0008738:	68 06 fd 02 c0       	push   0xc002fd06
c000873d:	e8 46 76 01 00       	call   c001fd88 <CPrintf>
c0008742:	83 c4 10             	add    esp,0x10
c0008745:	b8 00 00 00 00       	mov    eax,0x0
c000874a:	e9 71 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000874f:	90                   	nop
c0008750:	90                   	nop
c0008751:	8d 76 00             	lea    esi,[esi+0x0]
c0008754:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008759:	77 11                	ja     c000876c <pbuf_alloc+0xa0>
c000875b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008760:	0f 85 c6 02 00 00    	jne    c0008a2c <pbuf_alloc+0x360>
c0008766:	e9 41 02 00 00       	jmp    c00089ac <pbuf_alloc+0x2e0>
c000876b:	90                   	nop
c000876c:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008771:	0f 85 15 03 00 00    	jne    c0008a8c <pbuf_alloc+0x3c0>
c0008777:	83 ec 0c             	sub    esp,0xc
c000877a:	6a 0d                	push   0xd
c000877c:	e8 8b f3 ff ff       	call   c0007b0c <memp_malloc>
c0008781:	83 c4 10             	add    esp,0x10
c0008784:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008788:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000878d:	75 11                	jne    c00087a0 <pbuf_alloc+0xd4>
c000878f:	e8 44 fa ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c0008794:	b8 00 00 00 00       	mov    eax,0x0
c0008799:	e9 22 03 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c000879e:	66 90                	xchg   ax,ax
c00087a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087a4:	88 c2                	mov    dl,al
c00087a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087aa:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087b7:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087bc:	8d 50 10             	lea    edx,[eax+0x10]
c00087bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c3:	01 c2                	add    edx,eax
c00087c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087d8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087dd:	ba 4e 02 00 00       	mov    edx,0x24e
c00087e2:	29 c2                	sub    edx,eax
c00087e4:	89 d0                	mov    eax,edx
c00087e6:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00087eb:	39 d0                	cmp    eax,edx
c00087ed:	7e 05                	jle    c00087f4 <pbuf_alloc+0x128>
c00087ef:	89 d0                	mov    eax,edx
c00087f1:	8d 76 00             	lea    esi,[esi+0x0]
c00087f4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087f8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008800:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008803:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008807:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000880b:	0f b7 c0             	movzx  eax,ax
c000880e:	01 c2                	add    edx,eax
c0008810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008814:	05 5e 02 00 00       	add    eax,0x25e
c0008819:	39 c2                	cmp    edx,eax
c000881b:	76 17                	jbe    c0008834 <pbuf_alloc+0x168>
c000881d:	83 ec 08             	sub    esp,0x8
c0008820:	68 f4 fe 02 c0       	push   0xc002fef4
c0008825:	68 06 fd 02 c0       	push   0xc002fd06
c000882a:	e8 59 75 01 00       	call   c001fd88 <CPrintf>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	66 90                	xchg   ax,ax
c0008834:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008839:	ba 4e 02 00 00       	mov    edx,0x24e
c000883e:	29 c2                	sub    edx,eax
c0008840:	89 d0                	mov    eax,edx
c0008842:	85 c0                	test   eax,eax
c0008844:	7f 16                	jg     c000885c <pbuf_alloc+0x190>
c0008846:	83 ec 08             	sub    esp,0x8
c0008849:	68 28 ff 02 c0       	push   0xc002ff28
c000884e:	68 06 fd 02 c0       	push   0xc002fd06
c0008853:	e8 30 75 01 00       	call   c001fd88 <CPrintf>
c0008858:	83 c4 10             	add    esp,0x10
c000885b:	90                   	nop
c000885c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008860:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000886e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008873:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008877:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000887b:	0f b7 c0             	movzx  eax,ax
c000887e:	29 c2                	sub    edx,eax
c0008880:	89 d0                	mov    eax,edx
c0008882:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008886:	e9 11 01 00 00       	jmp    c000899c <pbuf_alloc+0x2d0>
c000888b:	90                   	nop
c000888c:	83 ec 0c             	sub    esp,0xc
c000888f:	6a 0d                	push   0xd
c0008891:	e8 76 f2 ff ff       	call   c0007b0c <memp_malloc>
c0008896:	83 c4 10             	add    esp,0x10
c0008899:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000889d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00088a2:	75 20                	jne    c00088c4 <pbuf_alloc+0x1f8>
c00088a4:	e8 2f f9 ff ff       	call   c00081d8 <pbuf_pool_is_empty>
c00088a9:	83 ec 0c             	sub    esp,0xc
c00088ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00088b0:	e8 3f fc ff ff       	call   c00084f4 <pbuf_free>
c00088b5:	83 c4 10             	add    esp,0x10
c00088b8:	b8 00 00 00 00       	mov    eax,0x0
c00088bd:	e9 fe 01 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00088c2:	66 90                	xchg   ax,ax
c00088c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088c8:	88 c2                	mov    dl,al
c00088ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088ce:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088d5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00088d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00088e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00088eb:	89 10                	mov    DWORD PTR [eax],edx
c00088ed:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00088f5:	7e 15                	jle    c000890c <pbuf_alloc+0x240>
c00088f7:	83 ec 08             	sub    esp,0x8
c00088fa:	68 f9 00 03 c0       	push   0xc00300f9
c00088ff:	68 06 fd 02 c0       	push   0xc002fd06
c0008904:	e8 7f 74 01 00       	call   c001fd88 <CPrintf>
c0008909:	83 c4 10             	add    esp,0x10
c000890c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008910:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008914:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000891c:	0f b7 d0             	movzx  edx,ax
c000891f:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008925:	76 05                	jbe    c000892c <pbuf_alloc+0x260>
c0008927:	b8 4e 02 00 00       	mov    eax,0x24e
c000892c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008930:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008938:	8d 50 10             	lea    edx,[eax+0x10]
c000893b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000893f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008946:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008949:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008951:	0f b7 c0             	movzx  eax,ax
c0008954:	01 c2                	add    edx,eax
c0008956:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000895a:	05 5e 02 00 00       	add    eax,0x25e
c000895f:	39 c2                	cmp    edx,eax
c0008961:	76 15                	jbe    c0008978 <pbuf_alloc+0x2ac>
c0008963:	83 ec 08             	sub    esp,0x8
c0008966:	68 f4 fe 02 c0       	push   0xc002fef4
c000896b:	68 06 fd 02 c0       	push   0xc002fd06
c0008970:	e8 13 74 01 00       	call   c001fd88 <CPrintf>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008982:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008986:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000898a:	0f b7 c0             	movzx  eax,ax
c000898d:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008995:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008999:	8d 76 00             	lea    esi,[esi+0x0]
c000899c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00089a1:	0f 8f e5 fe ff ff    	jg     c000888c <pbuf_alloc+0x1c0>
c00089a7:	e9 fc 00 00 00       	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c00089ac:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c00089b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089b5:	01 d0                	add    eax,edx
c00089b7:	83 c0 10             	add    eax,0x10
c00089ba:	0f b7 c0             	movzx  eax,ax
c00089bd:	83 ec 0c             	sub    esp,0xc
c00089c0:	50                   	push   eax
c00089c1:	e8 82 ec ff ff       	call   c0007648 <mem_malloc>
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00089cd:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00089d2:	75 0c                	jne    c00089e0 <pbuf_alloc+0x314>
c00089d4:	b8 00 00 00 00       	mov    eax,0x0
c00089d9:	e9 e2 00 00 00       	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c00089de:	66 90                	xchg   ax,ax
c00089e0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00089e5:	8d 50 10             	lea    edx,[eax+0x10]
c00089e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089ec:	01 c2                	add    edx,eax
c00089ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00089f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00089f5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00089f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089fd:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a01:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a08:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a0c:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a1a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a1e:	88 c2                	mov    dl,al
c0008a20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a24:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a27:	eb 7f                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a29:	8d 76 00             	lea    esi,[esi+0x0]
c0008a2c:	83 ec 0c             	sub    esp,0xc
c0008a2f:	6a 0c                	push   0xc
c0008a31:	e8 d6 f0 ff ff       	call   c0007b0c <memp_malloc>
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008a3d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008a42:	75 08                	jne    c0008a4c <pbuf_alloc+0x380>
c0008a44:	b8 00 00 00 00       	mov    eax,0x0
c0008a49:	eb 75                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008a4b:	90                   	nop
c0008a4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008a57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a5f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a6a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008a6e:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a72:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008a80:	88 c2                	mov    dl,al
c0008a82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008a86:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008a89:	eb 1d                	jmp    c0008aa8 <pbuf_alloc+0x3dc>
c0008a8b:	90                   	nop
c0008a8c:	83 ec 08             	sub    esp,0x8
c0008a8f:	68 0d 01 03 c0       	push   0xc003010d
c0008a94:	68 06 fd 02 c0       	push   0xc002fd06
c0008a99:	e8 ea 72 01 00       	call   c001fd88 <CPrintf>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	b8 00 00 00 00       	mov    eax,0x0
c0008aa6:	eb 18                	jmp    c0008ac0 <pbuf_alloc+0x3f4>
c0008aa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008aac:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008ab2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ab6:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008aba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008abe:	66 90                	xchg   ax,ax
c0008ac0:	83 c4 3c             	add    esp,0x3c
c0008ac3:	c3                   	ret    

c0008ac4 <pbuf_realloc>:
c0008ac4:	83 ec 2c             	sub    esp,0x2c
c0008ac7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008acb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008ad0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ad5:	75 15                	jne    c0008aec <pbuf_realloc+0x28>
c0008ad7:	83 ec 08             	sub    esp,0x8
c0008ada:	68 28 01 03 c0       	push   0xc0030128
c0008adf:	68 06 fd 02 c0       	push   0xc002fd06
c0008ae4:	e8 9f 72 01 00       	call   c001fd88 <CPrintf>
c0008ae9:	83 c4 10             	add    esp,0x10
c0008aec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008af0:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008af3:	0f b6 c0             	movzx  eax,al
c0008af6:	83 f8 03             	cmp    eax,0x3
c0008af9:	74 41                	je     c0008b3c <pbuf_realloc+0x78>
c0008afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008aff:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b02:	0f b6 c0             	movzx  eax,al
c0008b05:	83 f8 01             	cmp    eax,0x1
c0008b08:	74 32                	je     c0008b3c <pbuf_realloc+0x78>
c0008b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0e:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b11:	0f b6 c0             	movzx  eax,al
c0008b14:	85 c0                	test   eax,eax
c0008b16:	74 24                	je     c0008b3c <pbuf_realloc+0x78>
c0008b18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b1c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008b1f:	0f b6 c0             	movzx  eax,al
c0008b22:	83 f8 02             	cmp    eax,0x2
c0008b25:	74 15                	je     c0008b3c <pbuf_realloc+0x78>
c0008b27:	83 ec 08             	sub    esp,0x8
c0008b2a:	68 40 01 03 c0       	push   0xc0030140
c0008b2f:	68 06 fd 02 c0       	push   0xc002fd06
c0008b34:	e8 4f 72 01 00       	call   c001fd88 <CPrintf>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b43:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b48:	0f b7 c0             	movzx  eax,ax
c0008b4b:	39 c2                	cmp    edx,eax
c0008b4d:	0f 83 6d 01 00 00    	jae    c0008cc0 <pbuf_realloc+0x1fc>
c0008b53:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008b58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b5c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b5f:	0f b7 c0             	movzx  eax,ax
c0008b62:	29 c2                	sub    edx,eax
c0008b64:	89 d0                	mov    eax,edx
c0008b66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b7b:	eb 77                	jmp    c0008bf4 <pbuf_realloc+0x130>
c0008b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b84:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b88:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b8d:	89 d1                	mov    ecx,edx
c0008b8f:	29 c1                	sub    ecx,eax
c0008b91:	89 c8                	mov    eax,ecx
c0008b93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008b98:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008ba0:	7e 16                	jle    c0008bb8 <pbuf_realloc+0xf4>
c0008ba2:	83 ec 08             	sub    esp,0x8
c0008ba5:	68 5b 01 03 c0       	push   0xc003015b
c0008baa:	68 06 fd 02 c0       	push   0xc002fd06
c0008baf:	e8 d4 71 01 00       	call   c001fd88 <CPrintf>
c0008bb4:	83 c4 10             	add    esp,0x10
c0008bb7:	90                   	nop
c0008bb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008bc3:	01 d0                	add    eax,edx
c0008bc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008bc9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008bcd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bd7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008bdc:	75 16                	jne    c0008bf4 <pbuf_realloc+0x130>
c0008bde:	83 ec 08             	sub    esp,0x8
c0008be1:	68 6c 01 03 c0       	push   0xc003016c
c0008be6:	68 06 fd 02 c0       	push   0xc002fd06
c0008beb:	e8 98 71 01 00       	call   c001fd88 <CPrintf>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	90                   	nop
c0008bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bf8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008bfc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c01:	0f b7 c0             	movzx  eax,ax
c0008c04:	39 c2                	cmp    edx,eax
c0008c06:	0f 87 74 ff ff ff    	ja     c0008b80 <pbuf_realloc+0xbc>
c0008c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c10:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008c13:	0f b6 c0             	movzx  eax,al
c0008c16:	85 c0                	test   eax,eax
c0008c18:	75 5e                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c1e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c22:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008c27:	0f b7 c0             	movzx  eax,ax
c0008c2a:	39 c2                	cmp    edx,eax
c0008c2c:	74 4a                	je     c0008c78 <pbuf_realloc+0x1b4>
c0008c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008c39:	89 c2                	mov    edx,eax
c0008c3b:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c40:	01 d0                	add    eax,edx
c0008c42:	0f b7 c0             	movzx  eax,ax
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	50                   	push   eax
c0008c49:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c4d:	e8 e6 e6 ff ff       	call   c0007338 <mem_trim>
c0008c52:	83 c4 10             	add    esp,0x10
c0008c55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c59:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008c5e:	75 18                	jne    c0008c78 <pbuf_realloc+0x1b4>
c0008c60:	83 ec 08             	sub    esp,0x8
c0008c63:	68 84 01 03 c0       	push   0xc0030184
c0008c68:	68 06 fd 02 c0       	push   0xc002fd06
c0008c6d:	e8 16 71 01 00       	call   c001fd88 <CPrintf>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	8d 76 00             	lea    esi,[esi+0x0]
c0008c78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c7c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008c81:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008c85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c89:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008c91:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c9b:	85 c0                	test   eax,eax
c0008c9d:	74 15                	je     c0008cb4 <pbuf_realloc+0x1f0>
c0008c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ca5:	83 ec 0c             	sub    esp,0xc
c0008ca8:	50                   	push   eax
c0008ca9:	e8 46 f8 ff ff       	call   c00084f4 <pbuf_free>
c0008cae:	83 c4 10             	add    esp,0x10
c0008cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008cb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008cbe:	eb 04                	jmp    c0008cc4 <pbuf_realloc+0x200>
c0008cc0:	90                   	nop
c0008cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cc4:	83 c4 2c             	add    esp,0x2c
c0008cc7:	c3                   	ret    

c0008cc8 <pbuf_clen>:
c0008cc8:	83 ec 10             	sub    esp,0x10
c0008ccb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008cd0:	eb 1a                	jmp    c0008cec <pbuf_clen+0x24>
c0008cd2:	66 90                	xchg   ax,ax
c0008cd4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cd8:	83 c0 01             	add    eax,0x1
c0008cdb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0008cec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008cf1:	75 e1                	jne    c0008cd4 <pbuf_clen+0xc>
c0008cf3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008cf7:	83 c4 10             	add    esp,0x10
c0008cfa:	c3                   	ret    
c0008cfb:	90                   	nop

c0008cfc <pbuf_ref>:
c0008cfc:	83 ec 0c             	sub    esp,0xc
c0008cff:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008d04:	74 1e                	je     c0008d24 <pbuf_ref+0x28>
c0008d06:	e8 6d 70 01 00       	call   c001fd78 <CLockScheduler>
c0008d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008d13:	83 c0 01             	add    eax,0x1
c0008d16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d1a:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008d1e:	e8 39 70 01 00       	call   c001fd5c <CUnlockScheduler>
c0008d23:	90                   	nop
c0008d24:	90                   	nop
c0008d25:	83 c4 0c             	add    esp,0xc
c0008d28:	c3                   	ret    
c0008d29:	8d 76 00             	lea    esi,[esi+0x0]

c0008d2c <pbuf_cat>:
c0008d2c:	83 ec 1c             	sub    esp,0x1c
c0008d2f:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d34:	74 0a                	je     c0008d40 <pbuf_cat+0x14>
c0008d36:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d3b:	75 1f                	jne    c0008d5c <pbuf_cat+0x30>
c0008d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d40:	83 ec 08             	sub    esp,0x8
c0008d43:	68 5c ff 02 c0       	push   0xc002ff5c
c0008d48:	68 06 fd 02 c0       	push   0xc002fd06
c0008d4d:	e8 36 70 01 00       	call   c001fd88 <CPrintf>
c0008d52:	83 c4 10             	add    esp,0x10
c0008d55:	e9 ae 00 00 00       	jmp    c0008e08 <pbuf_cat+0xdc>
c0008d5a:	66 90                	xchg   ax,ax
c0008d5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d64:	eb 26                	jmp    c0008d8c <pbuf_cat+0x60>
c0008d66:	66 90                	xchg   ax,ax
c0008d68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d6c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d76:	01 d0                	add    eax,edx
c0008d78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008d7c:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008d80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008d8a:	66 90                	xchg   ax,ax
c0008d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d92:	85 c0                	test   eax,eax
c0008d94:	75 d2                	jne    c0008d68 <pbuf_cat+0x3c>
c0008d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008da1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008da5:	0f b7 d2             	movzx  edx,dx
c0008da8:	0f b7 c0             	movzx  eax,ax
c0008dab:	39 c2                	cmp    edx,eax
c0008dad:	74 15                	je     c0008dc4 <pbuf_cat+0x98>
c0008daf:	83 ec 08             	sub    esp,0x8
c0008db2:	68 94 ff 02 c0       	push   0xc002ff94
c0008db7:	68 06 fd 02 c0       	push   0xc002fd06
c0008dbc:	e8 c7 6f 01 00       	call   c001fd88 <CPrintf>
c0008dc1:	83 c4 10             	add    esp,0x10
c0008dc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008dca:	85 c0                	test   eax,eax
c0008dcc:	74 16                	je     c0008de4 <pbuf_cat+0xb8>
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	68 a0 01 03 c0       	push   0xc00301a0
c0008dd6:	68 06 fd 02 c0       	push   0xc002fd06
c0008ddb:	e8 a8 6f 01 00       	call   c001fd88 <CPrintf>
c0008de0:	83 c4 10             	add    esp,0x10
c0008de3:	90                   	nop
c0008de4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008de8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008deb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008def:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008df2:	01 d0                	add    eax,edx
c0008df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008df8:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008dfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e04:	89 10                	mov    DWORD PTR [eax],edx
c0008e06:	66 90                	xchg   ax,ax
c0008e08:	83 c4 1c             	add    esp,0x1c
c0008e0b:	c3                   	ret    

c0008e0c <pbuf_chain>:
c0008e0c:	83 ec 0c             	sub    esp,0xc
c0008e0f:	83 ec 08             	sub    esp,0x8
c0008e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e1a:	e8 0d ff ff ff       	call   c0008d2c <pbuf_cat>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e29:	e8 ce fe ff ff       	call   c0008cfc <pbuf_ref>
c0008e2e:	83 c4 10             	add    esp,0x10
c0008e31:	90                   	nop
c0008e32:	83 c4 0c             	add    esp,0xc
c0008e35:	c3                   	ret    
c0008e36:	66 90                	xchg   ax,ax

c0008e38 <pbuf_dechain>:
c0008e38:	83 ec 1c             	sub    esp,0x1c
c0008e3b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008e40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e44:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008e4f:	0f 84 8b 00 00 00    	je     c0008ee0 <pbuf_dechain+0xa8>
c0008e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008e59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e5c:	0f b7 d0             	movzx  edx,ax
c0008e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e63:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e66:	0f b7 c8             	movzx  ecx,ax
c0008e69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e6d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	29 c1                	sub    ecx,eax
c0008e76:	89 c8                	mov    eax,ecx
c0008e78:	39 c2                	cmp    edx,eax
c0008e7a:	74 18                	je     c0008e94 <pbuf_dechain+0x5c>
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	68 c4 ff 02 c0       	push   0xc002ffc4
c0008e84:	68 06 fd 02 c0       	push   0xc002fd06
c0008e89:	e8 fa 6e 01 00       	call   c001fd88 <CPrintf>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	8d 76 00             	lea    esi,[esi+0x0]
c0008e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e9f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ea3:	89 d1                	mov    ecx,edx
c0008ea5:	29 c1                	sub    ecx,eax
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ead:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008eb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ebf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008ec7:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed2:	e8 1d f6 ff ff       	call   c00084f4 <pbuf_free>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ede:	66 90                	xchg   ax,ax
c0008ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ee4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eeb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008eef:	0f b7 d2             	movzx  edx,dx
c0008ef2:	0f b7 c0             	movzx  eax,ax
c0008ef5:	39 c2                	cmp    edx,eax
c0008ef7:	74 17                	je     c0008f10 <pbuf_dechain+0xd8>
c0008ef9:	83 ec 08             	sub    esp,0x8
c0008efc:	68 b0 01 03 c0       	push   0xc00301b0
c0008f01:	68 06 fd 02 c0       	push   0xc002fd06
c0008f06:	e8 7d 6e 01 00       	call   c001fd88 <CPrintf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	66 90                	xchg   ax,ax
c0008f10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008f15:	85 c0                	test   eax,eax
c0008f17:	75 07                	jne    c0008f20 <pbuf_dechain+0xe8>
c0008f19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008f1d:	eb 09                	jmp    c0008f28 <pbuf_dechain+0xf0>
c0008f1f:	90                   	nop
c0008f20:	b8 00 00 00 00       	mov    eax,0x0
c0008f25:	8d 76 00             	lea    esi,[esi+0x0]
c0008f28:	83 c4 1c             	add    esp,0x1c
c0008f2b:	c3                   	ret    

c0008f2c <pbuf_copy>:
c0008f2c:	53                   	push   ebx
c0008f2d:	83 ec 18             	sub    esp,0x18
c0008f30:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f37:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f3e:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f43:	74 1f                	je     c0008f64 <pbuf_copy+0x38>
c0008f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f4a:	74 18                	je     c0008f64 <pbuf_copy+0x38>
c0008f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f50:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008f53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f5a:	0f b7 d2             	movzx  edx,dx
c0008f5d:	0f b7 c0             	movzx  eax,ax
c0008f60:	39 c2                	cmp    edx,eax
c0008f62:	73 1c                	jae    c0008f80 <pbuf_copy+0x54>
c0008f64:	83 ec 08             	sub    esp,0x8
c0008f67:	68 e8 ff 02 c0       	push   0xc002ffe8
c0008f6c:	68 06 fd 02 c0       	push   0xc002fd06
c0008f71:	e8 12 6e 01 00       	call   c001fd88 <CPrintf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	b0 f2                	mov    al,0xf2
c0008f7b:	e9 0c 02 00 00       	jmp    c000918c <pbuf_copy+0x260>
c0008f80:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f85:	75 15                	jne    c0008f9c <pbuf_copy+0x70>
c0008f87:	83 ec 08             	sub    esp,0x8
c0008f8a:	68 c5 01 03 c0       	push   0xc00301c5
c0008f8f:	68 06 fd 02 c0       	push   0xc002fd06
c0008f94:	e8 ef 6d 01 00       	call   c001fd88 <CPrintf>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fa0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fa4:	0f b7 d0             	movzx  edx,ax
c0008fa7:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008fac:	89 d1                	mov    ecx,edx
c0008fae:	29 c1                	sub    ecx,eax
c0008fb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008fb8:	0f b7 d0             	movzx  edx,ax
c0008fbb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008fc0:	29 c2                	sub    edx,eax
c0008fc2:	89 d0                	mov    eax,edx
c0008fc4:	39 c1                	cmp    ecx,eax
c0008fc6:	7c 1c                	jl     c0008fe4 <pbuf_copy+0xb8>
c0008fc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fcc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fd4:	89 d3                	mov    ebx,edx
c0008fd6:	29 c3                	sub    ebx,eax
c0008fd8:	89 d8                	mov    eax,ebx
c0008fda:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008fdf:	eb 1b                	jmp    c0008ffc <pbuf_copy+0xd0>
c0008fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fec:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008ff1:	89 d3                	mov    ebx,edx
c0008ff3:	29 c3                	sub    ebx,eax
c0008ff5:	89 d8                	mov    eax,ebx
c0008ff7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008ffc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0009001:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009005:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009008:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000900d:	01 d1                	add    ecx,edx
c000900f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009013:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0009016:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000901b:	01 da                	add    edx,ebx
c000901d:	83 ec 04             	sub    esp,0x4
c0009020:	50                   	push   eax
c0009021:	51                   	push   ecx
c0009022:	52                   	push   edx
c0009023:	e8 52 73 ff ff       	call   c000037a <memcpy>
c0009028:	83 c4 10             	add    esp,0x10
c000902b:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0009030:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009035:	01 d0                	add    eax,edx
c0009037:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000903c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009040:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0009045:	01 d0                	add    eax,edx
c0009047:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000904c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009050:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009054:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009059:	0f b7 c0             	movzx  eax,ax
c000905c:	39 c2                	cmp    edx,eax
c000905e:	76 18                	jbe    c0009078 <pbuf_copy+0x14c>
c0009060:	83 ec 08             	sub    esp,0x8
c0009063:	68 d2 01 03 c0       	push   0xc00301d2
c0009068:	68 06 fd 02 c0       	push   0xc002fd06
c000906d:	e8 16 6d 01 00       	call   c001fd88 <CPrintf>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	8d 76 00             	lea    esi,[esi+0x0]
c0009078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000907c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009080:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009085:	0f b7 c0             	movzx  eax,ax
c0009088:	39 c2                	cmp    edx,eax
c000908a:	75 14                	jne    c00090a0 <pbuf_copy+0x174>
c000908c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009097:	8b 00                	mov    eax,DWORD PTR [eax]
c0009099:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000909d:	8d 76 00             	lea    esi,[esi+0x0]
c00090a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090a8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090ad:	0f b7 c0             	movzx  eax,ax
c00090b0:	39 c2                	cmp    edx,eax
c00090b2:	76 18                	jbe    c00090cc <pbuf_copy+0x1a0>
c00090b4:	83 ec 08             	sub    esp,0x8
c00090b7:	68 e9 01 03 c0       	push   0xc00301e9
c00090bc:	68 06 fd 02 c0       	push   0xc002fd06
c00090c1:	e8 c2 6c 01 00       	call   c001fd88 <CPrintf>
c00090c6:	83 c4 10             	add    esp,0x10
c00090c9:	8d 76 00             	lea    esi,[esi+0x0]
c00090cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090d0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090d4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00090d9:	0f b7 c0             	movzx  eax,ax
c00090dc:	39 c2                	cmp    edx,eax
c00090de:	72 14                	jb     c00090f4 <pbuf_copy+0x1c8>
c00090e0:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c00090e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00090f1:	8d 76 00             	lea    esi,[esi+0x0]
c00090f4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00090f9:	74 3d                	je     c0009138 <pbuf_copy+0x20c>
c00090fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00090ff:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009107:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000910a:	0f b7 d2             	movzx  edx,dx
c000910d:	0f b7 c0             	movzx  eax,ax
c0009110:	39 c2                	cmp    edx,eax
c0009112:	75 24                	jne    c0009138 <pbuf_copy+0x20c>
c0009114:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009118:	8b 00                	mov    eax,DWORD PTR [eax]
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1a                	je     c0009138 <pbuf_copy+0x20c>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	68 18 00 03 c0       	push   0xc0030018
c0009126:	68 06 fd 02 c0       	push   0xc002fd06
c000912b:	e8 58 6c 01 00       	call   c001fd88 <CPrintf>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	b0 fa                	mov    al,0xfa
c0009135:	eb 55                	jmp    c000918c <pbuf_copy+0x260>
c0009137:	90                   	nop
c0009138:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000913d:	74 3d                	je     c000917c <pbuf_copy+0x250>
c000913f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009143:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000914b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000914e:	0f b7 d2             	movzx  edx,dx
c0009151:	0f b7 c0             	movzx  eax,ax
c0009154:	39 c2                	cmp    edx,eax
c0009156:	75 24                	jne    c000917c <pbuf_copy+0x250>
c0009158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000915c:	8b 00                	mov    eax,DWORD PTR [eax]
c000915e:	85 c0                	test   eax,eax
c0009160:	74 1a                	je     c000917c <pbuf_copy+0x250>
c0009162:	83 ec 08             	sub    esp,0x8
c0009165:	68 18 00 03 c0       	push   0xc0030018
c000916a:	68 06 fd 02 c0       	push   0xc002fd06
c000916f:	e8 14 6c 01 00       	call   c001fd88 <CPrintf>
c0009174:	83 c4 10             	add    esp,0x10
c0009177:	b0 fa                	mov    al,0xfa
c0009179:	eb 11                	jmp    c000918c <pbuf_copy+0x260>
c000917b:	90                   	nop
c000917c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009181:	0f 85 f9 fd ff ff    	jne    c0008f80 <pbuf_copy+0x54>
c0009187:	b0 00                	mov    al,0x0
c0009189:	8d 76 00             	lea    esi,[esi+0x0]
c000918c:	83 c4 18             	add    esp,0x18
c000918f:	5b                   	pop    ebx
c0009190:	c3                   	ret    
c0009191:	8d 76 00             	lea    esi,[esi+0x0]

c0009194 <pbuf_copy_partial>:
c0009194:	53                   	push   ebx
c0009195:	83 ec 28             	sub    esp,0x28
c0009198:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000919c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00091a0:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00091a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00091aa:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091b1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091b6:	75 20                	jne    c00091d8 <pbuf_copy_partial+0x44>
c00091b8:	83 ec 08             	sub    esp,0x8
c00091bb:	68 44 00 03 c0       	push   0xc0030044
c00091c0:	68 06 fd 02 c0       	push   0xc002fd06
c00091c5:	e8 be 6b 01 00       	call   c001fd88 <CPrintf>
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	b8 00 00 00 00       	mov    eax,0x0
c00091d2:	e9 59 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091d7:	90                   	nop
c00091d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00091dd:	75 21                	jne    c0009200 <pbuf_copy_partial+0x6c>
c00091df:	83 ec 08             	sub    esp,0x8
c00091e2:	68 64 00 03 c0       	push   0xc0030064
c00091e7:	68 06 fd 02 c0       	push   0xc002fd06
c00091ec:	e8 97 6b 01 00       	call   c001fd88 <CPrintf>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	b8 00 00 00 00       	mov    eax,0x0
c00091f9:	e9 32 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c00091fe:	66 90                	xchg   ax,ax
c0009200:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0009207:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000920c:	74 0a                	je     c0009218 <pbuf_copy_partial+0x84>
c000920e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009213:	75 0f                	jne    c0009224 <pbuf_copy_partial+0x90>
c0009215:	8d 76 00             	lea    esi,[esi+0x0]
c0009218:	b8 00 00 00 00       	mov    eax,0x0
c000921d:	e9 0e 01 00 00       	jmp    c0009330 <pbuf_copy_partial+0x19c>
c0009222:	66 90                	xchg   ax,ax
c0009224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009228:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000922c:	e9 e3 00 00 00       	jmp    c0009314 <pbuf_copy_partial+0x180>
c0009231:	8d 76 00             	lea    esi,[esi+0x0]
c0009234:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009239:	85 c0                	test   eax,eax
c000923b:	74 33                	je     c0009270 <pbuf_copy_partial+0xdc>
c000923d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009241:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009245:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000924a:	0f b7 c0             	movzx  eax,ax
c000924d:	39 c2                	cmp    edx,eax
c000924f:	72 1f                	jb     c0009270 <pbuf_copy_partial+0xdc>
c0009251:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009255:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009259:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000925d:	89 d3                	mov    ebx,edx
c000925f:	29 c3                	sub    ebx,eax
c0009261:	89 d8                	mov    eax,ebx
c0009263:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009268:	e9 9b 00 00 00       	jmp    c0009308 <pbuf_copy_partial+0x174>
c000926d:	8d 76 00             	lea    esi,[esi+0x0]
c0009270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009274:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009278:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000927c:	89 d1                	mov    ecx,edx
c000927e:	29 c1                	sub    ecx,eax
c0009280:	89 c8                	mov    eax,ecx
c0009282:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009287:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000928c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009291:	39 c2                	cmp    edx,eax
c0009293:	76 0b                	jbe    c00092a0 <pbuf_copy_partial+0x10c>
c0009295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009299:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000929e:	66 90                	xchg   ax,ax
c00092a0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00092a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00092a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00092ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00092b1:	01 d1                	add    ecx,edx
c00092b3:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00092b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00092bc:	01 da                	add    edx,ebx
c00092be:	83 ec 04             	sub    esp,0x4
c00092c1:	50                   	push   eax
c00092c2:	51                   	push   ecx
c00092c3:	52                   	push   edx
c00092c4:	e8 b1 70 ff ff       	call   c000037a <memcpy>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092d5:	01 d0                	add    eax,edx
c00092d7:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00092dc:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00092e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00092f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092f4:	89 d3                	mov    ebx,edx
c00092f6:	29 c3                	sub    ebx,eax
c00092f8:	89 d8                	mov    eax,ebx
c00092fa:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00092ff:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0009306:	66 90                	xchg   ax,ax
c0009308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930c:	8b 00                	mov    eax,DWORD PTR [eax]
c000930e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009312:	66 90                	xchg   ax,ax
c0009314:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009319:	85 c0                	test   eax,eax
c000931b:	74 0b                	je     c0009328 <pbuf_copy_partial+0x194>
c000931d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009322:	0f 85 0c ff ff ff    	jne    c0009234 <pbuf_copy_partial+0xa0>
c0009328:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000932d:	8d 76 00             	lea    esi,[esi+0x0]
c0009330:	83 c4 28             	add    esp,0x28
c0009333:	5b                   	pop    ebx
c0009334:	c3                   	ret    
c0009335:	8d 76 00             	lea    esi,[esi+0x0]

c0009338 <pbuf_take>:
c0009338:	83 ec 2c             	sub    esp,0x2c
c000933b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000933f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009348:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000934d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009354:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009359:	75 1d                	jne    c0009378 <pbuf_take+0x40>
c000935b:	83 ec 08             	sub    esp,0x8
c000935e:	68 04 02 03 c0       	push   0xc0030204
c0009363:	68 06 fd 02 c0       	push   0xc002fd06
c0009368:	e8 1b 6a 01 00       	call   c001fd88 <CPrintf>
c000936d:	83 c4 10             	add    esp,0x10
c0009370:	b0 00                	mov    al,0x0
c0009372:	e9 3d 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c0009377:	90                   	nop
c0009378:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000937d:	75 1d                	jne    c000939c <pbuf_take+0x64>
c000937f:	83 ec 08             	sub    esp,0x8
c0009382:	68 1b 02 03 c0       	push   0xc003021b
c0009387:	68 06 fd 02 c0       	push   0xc002fd06
c000938c:	e8 f7 69 01 00       	call   c001fd88 <CPrintf>
c0009391:	83 c4 10             	add    esp,0x10
c0009394:	b0 00                	mov    al,0x0
c0009396:	e9 19 01 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c000939b:	90                   	nop
c000939c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00093a1:	74 1d                	je     c00093c0 <pbuf_take+0x88>
c00093a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00093a8:	74 16                	je     c00093c0 <pbuf_take+0x88>
c00093aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00093b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00093b6:	0f b7 c0             	movzx  eax,ax
c00093b9:	39 c2                	cmp    edx,eax
c00093bb:	76 0b                	jbe    c00093c8 <pbuf_take+0x90>
c00093bd:	8d 76 00             	lea    esi,[esi+0x0]
c00093c0:	b0 f2                	mov    al,0xf2
c00093c2:	e9 ed 00 00 00       	jmp    c00094b4 <pbuf_take+0x17c>
c00093c7:	90                   	nop
c00093c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00093d0:	e9 9f 00 00 00       	jmp    c0009474 <pbuf_take+0x13c>
c00093d5:	8d 76 00             	lea    esi,[esi+0x0]
c00093d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00093dd:	75 15                	jne    c00093f4 <pbuf_take+0xbc>
c00093df:	83 ec 08             	sub    esp,0x8
c00093e2:	68 36 02 03 c0       	push   0xc0030236
c00093e7:	68 06 fd 02 c0       	push   0xc002fd06
c00093ec:	e8 97 69 01 00       	call   c001fd88 <CPrintf>
c00093f1:	83 c4 10             	add    esp,0x10
c00093f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00093f8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00093fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009401:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009405:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c000940a:	0f b7 c0             	movzx  eax,ax
c000940d:	39 c2                	cmp    edx,eax
c000940f:	76 0f                	jbe    c0009420 <pbuf_take+0xe8>
c0009411:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009415:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009419:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000941e:	66 90                	xchg   ax,ax
c0009420:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009425:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c000942a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000942e:	01 c1                	add    ecx,eax
c0009430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009437:	83 ec 04             	sub    esp,0x4
c000943a:	52                   	push   edx
c000943b:	51                   	push   ecx
c000943c:	50                   	push   eax
c000943d:	e8 38 6f ff ff       	call   c000037a <memcpy>
c0009442:	83 c4 10             	add    esp,0x10
c0009445:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009449:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000944e:	89 d1                	mov    ecx,edx
c0009450:	29 c1                	sub    ecx,eax
c0009452:	89 c8                	mov    eax,ecx
c0009454:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009459:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000945e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009463:	01 d0                	add    eax,edx
c0009465:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000946a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000946e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009470:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009474:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009479:	85 c0                	test   eax,eax
c000947b:	0f 85 57 ff ff ff    	jne    c00093d8 <pbuf_take+0xa0>
c0009481:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009486:	85 c0                	test   eax,eax
c0009488:	75 0e                	jne    c0009498 <pbuf_take+0x160>
c000948a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000948f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009494:	39 c2                	cmp    edx,eax
c0009496:	74 18                	je     c00094b0 <pbuf_take+0x178>
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	68 4e 02 03 c0       	push   0xc003024e
c00094a0:	68 06 fd 02 c0       	push   0xc002fd06
c00094a5:	e8 de 68 01 00       	call   c001fd88 <CPrintf>
c00094aa:	83 c4 10             	add    esp,0x10
c00094ad:	8d 76 00             	lea    esi,[esi+0x0]
c00094b0:	b0 00                	mov    al,0x0
c00094b2:	66 90                	xchg   ax,ax
c00094b4:	83 c4 2c             	add    esp,0x2c
c00094b7:	c3                   	ret    

c00094b8 <pbuf_coalesce>:
c00094b8:	83 ec 1c             	sub    esp,0x1c
c00094bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 07                	jne    c00094cc <pbuf_coalesce+0x14>
c00094c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094c9:	eb 7d                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094cb:	90                   	nop
c00094cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094d3:	0f b7 c0             	movzx  eax,ax
c00094d6:	83 ec 04             	sub    esp,0x4
c00094d9:	6a 00                	push   0x0
c00094db:	50                   	push   eax
c00094dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00094e0:	e8 e7 f1 ff ff       	call   c00086cc <pbuf_alloc>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00094ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00094f1:	75 09                	jne    c00094fc <pbuf_coalesce+0x44>
c00094f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094f7:	eb 4f                	jmp    c0009548 <pbuf_coalesce+0x90>
c00094f9:	8d 76 00             	lea    esi,[esi+0x0]
c00094fc:	83 ec 08             	sub    esp,0x8
c00094ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009503:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009507:	e8 20 fa ff ff       	call   c0008f2c <pbuf_copy>
c000950c:	83 c4 10             	add    esp,0x10
c000950f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009513:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009518:	85 c0                	test   eax,eax
c000951a:	74 18                	je     c0009534 <pbuf_coalesce+0x7c>
c000951c:	83 ec 08             	sub    esp,0x8
c000951f:	68 64 02 03 c0       	push   0xc0030264
c0009524:	68 06 fd 02 c0       	push   0xc002fd06
c0009529:	e8 5a 68 01 00       	call   c001fd88 <CPrintf>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	8d 76 00             	lea    esi,[esi+0x0]
c0009534:	83 ec 0c             	sub    esp,0xc
c0009537:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000953b:	e8 b4 ef ff ff       	call   c00084f4 <pbuf_free>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009547:	90                   	nop
c0009548:	83 c4 1c             	add    esp,0x1c
c000954b:	c3                   	ret    

c000954c <pbuf_get_at>:
c000954c:	83 ec 14             	sub    esp,0x14
c000954f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009553:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009557:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000955a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000955f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009567:	eb 27                	jmp    c0009590 <pbuf_get_at+0x44>
c0009569:	8d 76 00             	lea    esi,[esi+0x0]
c000956c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009570:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009574:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009579:	89 d1                	mov    ecx,edx
c000957b:	29 c1                	sub    ecx,eax
c000957d:	89 c8                	mov    eax,ecx
c000957f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009588:	8b 00                	mov    eax,DWORD PTR [eax]
c000958a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000958e:	66 90                	xchg   ax,ax
c0009590:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009595:	74 15                	je     c00095ac <pbuf_get_at+0x60>
c0009597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000959b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000959f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095a4:	0f b7 c0             	movzx  eax,ax
c00095a7:	39 c2                	cmp    edx,eax
c00095a9:	73 c1                	jae    c000956c <pbuf_get_at+0x20>
c00095ab:	90                   	nop
c00095ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00095b1:	74 29                	je     c00095dc <pbuf_get_at+0x90>
c00095b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095b7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00095bb:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00095c0:	0f b7 c0             	movzx  eax,ax
c00095c3:	39 c2                	cmp    edx,eax
c00095c5:	73 15                	jae    c00095dc <pbuf_get_at+0x90>
c00095c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00095ce:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00095d3:	01 d0                	add    eax,edx
c00095d5:	8a 00                	mov    al,BYTE PTR [eax]
c00095d7:	eb 07                	jmp    c00095e0 <pbuf_get_at+0x94>
c00095d9:	8d 76 00             	lea    esi,[esi+0x0]
c00095dc:	b0 00                	mov    al,0x0
c00095de:	66 90                	xchg   ax,ax
c00095e0:	83 c4 14             	add    esp,0x14
c00095e3:	c3                   	ret    

c00095e4 <pbuf_memcmp>:
c00095e4:	83 ec 18             	sub    esp,0x18
c00095e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00095eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095ef:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095f4:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009601:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009609:	eb 25                	jmp    c0009630 <pbuf_memcmp+0x4c>
c000960b:	90                   	nop
c000960c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	89 d1                	mov    ecx,edx
c000961b:	29 c1                	sub    ecx,eax
c000961d:	89 c8                	mov    eax,ecx
c000961f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009628:	8b 00                	mov    eax,DWORD PTR [eax]
c000962a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000962e:	66 90                	xchg   ax,ax
c0009630:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009635:	74 15                	je     c000964c <pbuf_memcmp+0x68>
c0009637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000963b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000963f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009644:	0f b7 c0             	movzx  eax,ax
c0009647:	39 c2                	cmp    edx,eax
c0009649:	73 c1                	jae    c000960c <pbuf_memcmp+0x28>
c000964b:	90                   	nop
c000964c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009651:	0f 84 8d 00 00 00    	je     c00096e4 <pbuf_memcmp+0x100>
c0009657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000965b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000965f:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009664:	0f b7 c0             	movzx  eax,ax
c0009667:	39 c2                	cmp    edx,eax
c0009669:	73 79                	jae    c00096e4 <pbuf_memcmp+0x100>
c000966b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009672:	eb 5c                	jmp    c00096d0 <pbuf_memcmp+0xec>
c0009674:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009679:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000967e:	01 d0                	add    eax,edx
c0009680:	0f b7 c0             	movzx  eax,ax
c0009683:	50                   	push   eax
c0009684:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009688:	e8 bf fe ff ff       	call   c000954c <pbuf_get_at>
c000968d:	83 c4 08             	add    esp,0x8
c0009690:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009694:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009699:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000969d:	01 d0                	add    eax,edx
c000969f:	8a 00                	mov    al,BYTE PTR [eax]
c00096a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00096a5:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c00096aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00096af:	39 c2                	cmp    edx,eax
c00096b1:	74 0d                	je     c00096c0 <pbuf_memcmp+0xdc>
c00096b3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096b8:	83 c0 01             	add    eax,0x1
c00096bb:	eb 2f                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096bd:	8d 76 00             	lea    esi,[esi+0x0]
c00096c0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00096c5:	83 c0 01             	add    eax,0x1
c00096c8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096cd:	8d 76 00             	lea    esi,[esi+0x0]
c00096d0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00096d5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00096d9:	39 c2                	cmp    edx,eax
c00096db:	72 97                	jb     c0009674 <pbuf_memcmp+0x90>
c00096dd:	b8 00 00 00 00       	mov    eax,0x0
c00096e2:	eb 08                	jmp    c00096ec <pbuf_memcmp+0x108>
c00096e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00096e9:	8d 76 00             	lea    esi,[esi+0x0]
c00096ec:	83 c4 18             	add    esp,0x18
c00096ef:	c3                   	ret    

c00096f0 <pbuf_memfind>:
c00096f0:	83 ec 18             	sub    esp,0x18
c00096f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00096f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096fb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009700:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009708:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000970b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000970f:	89 d1                	mov    ecx,edx
c0009711:	29 c1                	sub    ecx,eax
c0009713:	89 c8                	mov    eax,ecx
c0009715:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000971a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009729:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c000972d:	01 ca                	add    edx,ecx
c000972f:	39 d0                	cmp    eax,edx
c0009731:	7c 65                	jl     c0009798 <pbuf_memfind+0xa8>
c0009733:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009736:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000973b:	eb 4b                	jmp    c0009788 <pbuf_memfind+0x98>
c000973d:	8d 76 00             	lea    esi,[esi+0x0]
c0009740:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009745:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000974a:	52                   	push   edx
c000974b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974f:	50                   	push   eax
c0009750:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009754:	e8 8b fe ff ff       	call   c00095e4 <pbuf_memcmp>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009761:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009766:	85 c0                	test   eax,eax
c0009768:	75 0a                	jne    c0009774 <pbuf_memfind+0x84>
c000976a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000976f:	eb 2f                	jmp    c00097a0 <pbuf_memfind+0xb0>
c0009771:	8d 76 00             	lea    esi,[esi+0x0]
c0009774:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009779:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000977e:	01 d0                	add    eax,edx
c0009780:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009785:	8d 76 00             	lea    esi,[esi+0x0]
c0009788:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000978d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009792:	39 c2                	cmp    edx,eax
c0009794:	76 aa                	jbe    c0009740 <pbuf_memfind+0x50>
c0009796:	66 90                	xchg   ax,ax
c0009798:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000979d:	8d 76 00             	lea    esi,[esi+0x0]
c00097a0:	83 c4 18             	add    esp,0x18
c00097a3:	c3                   	ret    

c00097a4 <pbuf_strstr>:
c00097a4:	83 ec 1c             	sub    esp,0x1c
c00097a7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00097ac:	74 1e                	je     c00097cc <pbuf_strstr+0x28>
c00097ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097b2:	8a 00                	mov    al,BYTE PTR [eax]
c00097b4:	0f be c0             	movsx  eax,al
c00097b7:	85 c0                	test   eax,eax
c00097b9:	74 11                	je     c00097cc <pbuf_strstr+0x28>
c00097bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00097bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097c2:	0f b7 c0             	movzx  eax,ax
c00097c5:	3d ff ff 00 00       	cmp    eax,0xffff
c00097ca:	75 08                	jne    c00097d4 <pbuf_strstr+0x30>
c00097cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097d1:	eb 41                	jmp    c0009814 <pbuf_strstr+0x70>
c00097d3:	90                   	nop
c00097d4:	83 ec 0c             	sub    esp,0xc
c00097d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097db:	e8 90 6d ff ff       	call   c0000570 <strlen>
c00097e0:	83 c4 10             	add    esp,0x10
c00097e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097e7:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00097ef:	76 07                	jbe    c00097f8 <pbuf_strstr+0x54>
c00097f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00097f6:	eb 1c                	jmp    c0009814 <pbuf_strstr+0x70>
c00097f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097fc:	0f b7 c0             	movzx  eax,ax
c00097ff:	6a 00                	push   0x0
c0009801:	50                   	push   eax
c0009802:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000980a:	e8 e1 fe ff ff       	call   c00096f0 <pbuf_memfind>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	66 90                	xchg   ax,ax
c0009814:	83 c4 1c             	add    esp,0x1c
c0009817:	c3                   	ret    

c0009818 <raw_input>:
c0009818:	83 ec 2c             	sub    esp,0x2c
c000981b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0009820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009824:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000982b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009832:	0f b6 c0             	movzx  eax,al
c0009835:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000983a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009842:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000984b:	e9 b8 00 00 00       	jmp    c0009908 <raw_input+0xf0>
c0009850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009854:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009857:	0f b6 d0             	movzx  edx,al
c000985a:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000985f:	39 c2                	cmp    edx,eax
c0009861:	0f 85 8d 00 00 00    	jne    c00098f4 <raw_input+0xdc>
c0009867:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000986b:	85 c0                	test   eax,eax
c000986d:	74 19                	je     c0009888 <raw_input+0x70>
c000986f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009873:	8b 00                	mov    eax,DWORD PTR [eax]
c0009875:	85 c0                	test   eax,eax
c0009877:	74 0f                	je     c0009888 <raw_input+0x70>
c0009879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000987d:	8b 10                	mov    edx,DWORD PTR [eax]
c000987f:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009884:	39 c2                	cmp    edx,eax
c0009886:	75 6c                	jne    c00098f4 <raw_input+0xdc>
c0009888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000988c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000988f:	85 c0                	test   eax,eax
c0009891:	74 61                	je     c00098f4 <raw_input+0xdc>
c0009893:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009897:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000989a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000989e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c00098a1:	68 90 68 03 c0       	push   0xc0036890
c00098a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ae:	52                   	push   edx
c00098af:	ff d0                	call   eax
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	0f b6 c0             	movzx  eax,al
c00098b7:	85 c0                	test   eax,eax
c00098b9:	74 39                	je     c00098f4 <raw_input+0xdc>
c00098bb:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00098c3:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00098c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00098cd:	74 25                	je     c00098f4 <raw_input+0xdc>
c00098cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098d3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00098d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098da:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098dd:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00098e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00098ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098ee:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00098f3:	90                   	nop
c00098f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00098f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009907:	90                   	nop
c0009908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000990d:	85 c0                	test   eax,eax
c000990f:	75 0b                	jne    c000991c <raw_input+0x104>
c0009911:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009916:	0f 85 34 ff ff ff    	jne    c0009850 <raw_input+0x38>
c000991c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0009920:	83 c4 2c             	add    esp,0x2c
c0009923:	c3                   	ret    

c0009924 <raw_bind>:
c0009924:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009929:	74 09                	je     c0009934 <raw_bind+0x10>
c000992b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000992f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009931:	eb 09                	jmp    c000993c <raw_bind+0x18>
c0009933:	90                   	nop
c0009934:	b8 00 00 00 00       	mov    eax,0x0
c0009939:	8d 76 00             	lea    esi,[esi+0x0]
c000993c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009940:	89 02                	mov    DWORD PTR [edx],eax
c0009942:	b0 00                	mov    al,0x0
c0009944:	c3                   	ret    
c0009945:	8d 76 00             	lea    esi,[esi+0x0]

c0009948 <raw_connect>:
c0009948:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000994d:	74 09                	je     c0009958 <raw_connect+0x10>
c000994f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009953:	8b 00                	mov    eax,DWORD PTR [eax]
c0009955:	eb 09                	jmp    c0009960 <raw_connect+0x18>
c0009957:	90                   	nop
c0009958:	b8 00 00 00 00       	mov    eax,0x0
c000995d:	8d 76 00             	lea    esi,[esi+0x0]
c0009960:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009964:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009967:	b0 00                	mov    al,0x0
c0009969:	c3                   	ret    
c000996a:	66 90                	xchg   ax,ax

c000996c <raw_recv>:
c000996c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009977:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000997f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009982:	90                   	nop
c0009983:	c3                   	ret    

c0009984 <raw_sendto>:
c0009984:	83 ec 1c             	sub    esp,0x1c
c0009987:	83 ec 08             	sub    esp,0x8
c000998a:	6a 14                	push   0x14
c000998c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009990:	e8 c3 e9 ff ff       	call   c0008358 <pbuf_header>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	0f b6 c0             	movzx  eax,al
c000999b:	85 c0                	test   eax,eax
c000999d:	74 49                	je     c00099e8 <raw_sendto+0x64>
c000999f:	83 ec 04             	sub    esp,0x4
c00099a2:	6a 00                	push   0x0
c00099a4:	6a 00                	push   0x0
c00099a6:	6a 01                	push   0x1
c00099a8:	e8 1f ed ff ff       	call   c00086cc <pbuf_alloc>
c00099ad:	83 c4 10             	add    esp,0x10
c00099b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00099b9:	75 09                	jne    c00099c4 <raw_sendto+0x40>
c00099bb:	b0 ff                	mov    al,0xff
c00099bd:	e9 2a 01 00 00       	jmp    c0009aec <raw_sendto+0x168>
c00099c2:	66 90                	xchg   ax,ax
c00099c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00099cb:	0f b7 c0             	movzx  eax,ax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	74 52                	je     c0009a24 <raw_sendto+0xa0>
c00099d2:	83 ec 08             	sub    esp,0x8
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099dd:	e8 2a f4 ff ff       	call   c0008e0c <pbuf_chain>
c00099e2:	83 c4 10             	add    esp,0x10
c00099e5:	eb 3d                	jmp    c0009a24 <raw_sendto+0xa0>
c00099e7:	90                   	nop
c00099e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00099ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00099f0:	83 ec 08             	sub    esp,0x8
c00099f3:	6a ec                	push   0xffffffec
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	e8 5a e9 ff ff       	call   c0008358 <pbuf_header>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	0f b6 c0             	movzx  eax,al
c0009a04:	85 c0                	test   eax,eax
c0009a06:	74 1c                	je     c0009a24 <raw_sendto+0xa0>
c0009a08:	83 ec 08             	sub    esp,0x8
c0009a0b:	68 78 02 03 c0       	push   0xc0030278
c0009a10:	68 06 fd 02 c0       	push   0xc002fd06
c0009a15:	e8 6e 63 01 00       	call   c001fd88 <CPrintf>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	b0 ff                	mov    al,0xff
c0009a1f:	e9 c8 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a2b:	e8 6c 9d 00 00       	call   c001379c <ip_route>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a37:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009a3c:	75 22                	jne    c0009a60 <raw_sendto+0xdc>
c0009a3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a42:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009a46:	74 10                	je     c0009a58 <raw_sendto+0xd4>
c0009a48:	83 ec 0c             	sub    esp,0xc
c0009a4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4f:	e8 a0 ea ff ff       	call   c00084f4 <pbuf_free>
c0009a54:	83 c4 10             	add    esp,0x10
c0009a57:	90                   	nop
c0009a58:	b0 fc                	mov    al,0xfc
c0009a5a:	e9 8d 00 00 00       	jmp    c0009aec <raw_sendto+0x168>
c0009a5f:	90                   	nop
c0009a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a64:	85 c0                	test   eax,eax
c0009a66:	74 0c                	je     c0009a74 <raw_sendto+0xf0>
c0009a68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	85 c0                	test   eax,eax
c0009a70:	75 12                	jne    c0009a84 <raw_sendto+0x100>
c0009a72:	66 90                	xchg   ax,ax
c0009a74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a78:	83 c0 04             	add    eax,0x4
c0009a7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a7f:	eb 0b                	jmp    c0009a8c <raw_sendto+0x108>
c0009a81:	8d 76 00             	lea    esi,[esi+0x0]
c0009a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a90:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009a93:	0f b6 c8             	movzx  ecx,al
c0009a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009a9a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009a9d:	0f b6 d0             	movzx  edx,al
c0009aa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009aa4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009aa7:	0f b6 c0             	movzx  eax,al
c0009aaa:	83 ec 04             	sub    esp,0x4
c0009aad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009ab1:	51                   	push   ecx
c0009ab2:	52                   	push   edx
c0009ab3:	50                   	push   eax
c0009ab4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ab8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009abc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac0:	e8 af a1 00 00       	call   c0013c74 <ip_output_if>
c0009ac5:	83 c4 20             	add    esp,0x20
c0009ac8:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ad0:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009ad4:	74 12                	je     c0009ae8 <raw_sendto+0x164>
c0009ad6:	83 ec 0c             	sub    esp,0xc
c0009ad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009add:	e8 12 ea ff ff       	call   c00084f4 <pbuf_free>
c0009ae2:	83 c4 10             	add    esp,0x10
c0009ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0009ae8:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009aec:	83 c4 1c             	add    esp,0x1c
c0009aef:	c3                   	ret    

c0009af0 <raw_send>:
c0009af0:	83 ec 0c             	sub    esp,0xc
c0009af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009af7:	83 c0 04             	add    eax,0x4
c0009afa:	83 ec 04             	sub    esp,0x4
c0009afd:	50                   	push   eax
c0009afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b06:	e8 79 fe ff ff       	call   c0009984 <raw_sendto>
c0009b0b:	83 c4 10             	add    esp,0x10
c0009b0e:	83 c4 0c             	add    esp,0xc
c0009b11:	c3                   	ret    
c0009b12:	66 90                	xchg   ax,ax

c0009b14 <raw_remove>:
c0009b14:	83 ec 1c             	sub    esp,0x1c
c0009b17:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b1c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b20:	75 12                	jne    c0009b34 <raw_remove+0x20>
c0009b22:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b2a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009b2f:	eb 4b                	jmp    c0009b7c <raw_remove+0x68>
c0009b31:	8d 76 00             	lea    esi,[esi+0x0]
c0009b34:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b3d:	eb 35                	jmp    c0009b74 <raw_remove+0x60>
c0009b3f:	90                   	nop
c0009b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b47:	85 c0                	test   eax,eax
c0009b49:	74 1d                	je     c0009b68 <raw_remove+0x54>
c0009b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b52:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009b56:	75 10                	jne    c0009b68 <raw_remove+0x54>
c0009b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b5c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b63:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b66:	66 90                	xchg   ax,ax
c0009b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b73:	90                   	nop
c0009b74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009b79:	75 c5                	jne    c0009b40 <raw_remove+0x2c>
c0009b7b:	90                   	nop
c0009b7c:	83 ec 08             	sub    esp,0x8
c0009b7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009b83:	6a 00                	push   0x0
c0009b85:	e8 ae e0 ff ff       	call   c0007c38 <memp_free>
c0009b8a:	83 c4 10             	add    esp,0x10
c0009b8d:	90                   	nop
c0009b8e:	83 c4 1c             	add    esp,0x1c
c0009b91:	c3                   	ret    
c0009b92:	66 90                	xchg   ax,ax

c0009b94 <raw_new>:
c0009b94:	83 ec 2c             	sub    esp,0x2c
c0009b97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b9b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b9f:	83 ec 0c             	sub    esp,0xc
c0009ba2:	6a 00                	push   0x0
c0009ba4:	e8 63 df ff ff       	call   c0007b0c <memp_malloc>
c0009ba9:	83 c4 10             	add    esp,0x10
c0009bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bb0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009bb5:	74 3d                	je     c0009bf4 <raw_new+0x60>
c0009bb7:	83 ec 04             	sub    esp,0x4
c0009bba:	6a 1c                	push   0x1c
c0009bbc:	6a 00                	push   0x0
c0009bbe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009bc2:	e8 29 69 ff ff       	call   c00004f0 <memset>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bce:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009bd2:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd9:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009bdd:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009be3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bee:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009bf3:	90                   	nop
c0009bf4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf8:	83 c4 2c             	add    esp,0x2c
c0009bfb:	c3                   	ret    

c0009bfc <stats_init>:
c0009bfc:	90                   	nop
c0009bfd:	c3                   	ret    
c0009bfe:	66 90                	xchg   ax,ax

c0009c00 <sys_msleep>:
c0009c00:	83 ec 1c             	sub    esp,0x1c
c0009c03:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009c08:	74 46                	je     c0009c50 <sys_msleep+0x50>
c0009c0a:	83 ec 08             	sub    esp,0x8
c0009c0d:	6a 00                	push   0x0
c0009c0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c13:	50                   	push   eax
c0009c14:	e8 53 70 ff ff       	call   c0000c6c <sys_sem_new>
c0009c19:	83 c4 10             	add    esp,0x10
c0009c1c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009c20:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009c25:	85 c0                	test   eax,eax
c0009c27:	75 27                	jne    c0009c50 <sys_msleep+0x50>
c0009c29:	83 ec 08             	sub    esp,0x8
c0009c2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009c30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c34:	50                   	push   eax
c0009c35:	e8 8a 70 ff ff       	call   c0000cc4 <sys_arch_sem_wait>
c0009c3a:	83 c4 10             	add    esp,0x10
c0009c3d:	83 ec 0c             	sub    esp,0xc
c0009c40:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009c44:	50                   	push   eax
c0009c45:	e8 4a 70 ff ff       	call   c0000c94 <sys_sem_free>
c0009c4a:	83 c4 10             	add    esp,0x10
c0009c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c50:	90                   	nop
c0009c51:	83 c4 1c             	add    esp,0x1c
c0009c54:	c3                   	ret    
c0009c55:	66 90                	xchg   ax,ax
c0009c57:	90                   	nop

c0009c58 <tcp_accept_null>:
c0009c58:	83 ec 04             	sub    esp,0x4
c0009c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c5f:	88 04 24             	mov    BYTE PTR [esp],al
c0009c62:	b0 f6                	mov    al,0xf6
c0009c64:	83 c4 04             	add    esp,0x4
c0009c67:	c3                   	ret    

c0009c68 <tcp_listen_with_backlog>:
c0009c68:	83 ec 2c             	sub    esp,0x2c
c0009c6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009c73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c7a:	85 c0                	test   eax,eax
c0009c7c:	74 22                	je     c0009ca0 <tcp_listen_with_backlog+0x38>
c0009c7e:	83 ec 08             	sub    esp,0x8
c0009c81:	68 a0 02 03 c0       	push   0xc00302a0
c0009c86:	68 06 fd 02 c0       	push   0xc002fd06
c0009c8b:	e8 f8 60 01 00       	call   c001fd88 <CPrintf>
c0009c90:	83 c4 10             	add    esp,0x10
c0009c93:	b8 00 00 00 00       	mov    eax,0x0
c0009c98:	e9 77 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0009ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ca7:	83 f8 01             	cmp    eax,0x1
c0009caa:	75 0c                	jne    c0009cb8 <tcp_listen_with_backlog+0x50>
c0009cac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb0:	e9 5f 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	6a 03                	push   0x3
c0009cbd:	e8 4a de ff ff       	call   c0007b0c <memp_malloc>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cc9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009cce:	75 0c                	jne    c0009cdc <tcp_listen_with_backlog+0x74>
c0009cd0:	b8 00 00 00 00       	mov    eax,0x0
c0009cd5:	e9 3a 01 00 00       	jmp    c0009e14 <tcp_listen_with_backlog+0x1ac>
c0009cda:	66 90                	xchg   ax,ax
c0009cdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ce7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009cea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009cf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cf5:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfd:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009d04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d08:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009d0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d0f:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009d12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d16:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d1d:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d24:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009d27:	83 c8 02             	or     eax,0x2
c0009d2a:	88 c2                	mov    dl,al
c0009d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d30:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009d3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d3e:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009d41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d45:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d4c:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d59:	89 10                	mov    DWORD PTR [eax],edx
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009d62:	0f b7 c0             	movzx  eax,ax
c0009d65:	85 c0                	test   eax,eax
c0009d67:	74 6f                	je     c0009dd8 <tcp_listen_with_backlog+0x170>
c0009d69:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d6e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d72:	75 10                	jne    c0009d84 <tcp_listen_with_backlog+0x11c>
c0009d74:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d7c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009d81:	eb 49                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009d83:	90                   	nop
c0009d84:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009d89:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009d8e:	eb 30                	jmp    c0009dc0 <tcp_listen_with_backlog+0x158>
c0009d90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009d95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d98:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009d9c:	75 12                	jne    c0009db0 <tcp_listen_with_backlog+0x148>
c0009d9e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009da3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009da7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009daa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009dad:	eb 1d                	jmp    c0009dcc <tcp_listen_with_backlog+0x164>
c0009daf:	90                   	nop
c0009db0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009db5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009db8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0009dc0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009dc5:	85 c0                	test   eax,eax
c0009dc7:	75 c7                	jne    c0009d90 <tcp_listen_with_backlog+0x128>
c0009dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dcc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dd0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009dd7:	90                   	nop
c0009dd8:	83 ec 08             	sub    esp,0x8
c0009ddb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009ddf:	6a 02                	push   0x2
c0009de1:	e8 52 de ff ff       	call   c0007c38 <memp_free>
c0009de6:	83 c4 10             	add    esp,0x10
c0009de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ded:	c7 40 1c 58 9c 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009c58
c0009df4:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009dfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e05:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009e0a:	e8 a5 6e 00 00       	call   c0010cb4 <tcp_timer_needed>
c0009e0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e13:	90                   	nop
c0009e14:	83 c4 2c             	add    esp,0x2c
c0009e17:	c3                   	ret    

c0009e18 <tcp_update_rcv_ann_wnd>:
c0009e18:	83 ec 1c             	sub    esp,0x1c
c0009e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e1f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e29:	0f b7 c0             	movzx  eax,ax
c0009e2c:	01 d0                	add    eax,edx
c0009e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e36:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e3d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e40:	0f b7 c8             	movzx  ecx,ax
c0009e43:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009e49:	76 05                	jbe    c0009e50 <tcp_update_rcv_ann_wnd+0x38>
c0009e4b:	b8 30 04 00 00       	mov    eax,0x430
c0009e50:	0f b7 c0             	movzx  eax,ax
c0009e53:	01 c2                	add    edx,eax
c0009e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e59:	29 d0                	sub    eax,edx
c0009e5b:	78 23                	js     c0009e80 <tcp_update_rcv_ann_wnd+0x68>
c0009e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e61:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009e64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009e68:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e70:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e77:	29 c2                	sub    edx,eax
c0009e79:	89 d0                	mov    eax,edx
c0009e7b:	eb 73                	jmp    c0009ef0 <tcp_update_rcv_ann_wnd+0xd8>
c0009e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0009e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e84:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e8b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009e8e:	29 c2                	sub    edx,eax
c0009e90:	89 d0                	mov    eax,edx
c0009e92:	85 c0                	test   eax,eax
c0009e94:	7e 0e                	jle    c0009ea4 <tcp_update_rcv_ann_wnd+0x8c>
c0009e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009e9a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009ea0:	eb 46                	jmp    c0009ee8 <tcp_update_rcv_ann_wnd+0xd0>
c0009ea2:	66 90                	xchg   ax,ax
c0009ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ea8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eaf:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009eb2:	29 c2                	sub    edx,eax
c0009eb4:	89 d0                	mov    eax,edx
c0009eb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eba:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009ec2:	76 18                	jbe    c0009edc <tcp_update_rcv_ann_wnd+0xc4>
c0009ec4:	83 ec 08             	sub    esp,0x8
c0009ec7:	68 d4 04 03 c0       	push   0xc00304d4
c0009ecc:	68 06 fd 02 c0       	push   0xc002fd06
c0009ed1:	e8 b2 5e 01 00       	call   c001fd88 <CPrintf>
c0009ed6:	83 c4 10             	add    esp,0x10
c0009ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0009edc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009ee4:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009ee8:	b8 00 00 00 00       	mov    eax,0x0
c0009eed:	8d 76 00             	lea    esi,[esi+0x0]
c0009ef0:	83 c4 1c             	add    esp,0x1c
c0009ef3:	c3                   	ret    

c0009ef4 <tcp_recved>:
c0009ef4:	83 ec 2c             	sub    esp,0x2c
c0009ef7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009efb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f00:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f09:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f0c:	0f b7 c0             	movzx  eax,ax
c0009f0f:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009f14:	29 c1                	sub    ecx,eax
c0009f16:	89 c8                	mov    eax,ecx
c0009f18:	39 c2                	cmp    edx,eax
c0009f1a:	7e 18                	jle    c0009f34 <tcp_recved+0x40>
c0009f1c:	83 ec 08             	sub    esp,0x8
c0009f1f:	68 c4 02 03 c0       	push   0xc00302c4
c0009f24:	68 06 fd 02 c0       	push   0xc002fd06
c0009f29:	e8 5a 5e 01 00       	call   c001fd88 <CPrintf>
c0009f2e:	83 c4 10             	add    esp,0x10
c0009f31:	8d 76 00             	lea    esi,[esi+0x0]
c0009f34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f3f:	01 d0                	add    eax,edx
c0009f41:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f45:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009f50:	0f b7 c0             	movzx  eax,ax
c0009f53:	3d 60 08 00 00       	cmp    eax,0x860
c0009f58:	76 0a                	jbe    c0009f64 <tcp_recved+0x70>
c0009f5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5e:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009f64:	83 ec 0c             	sub    esp,0xc
c0009f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f6b:	e8 a8 fe ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c0009f70:	83 c4 10             	add    esp,0x10
c0009f73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f77:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009f7f:	7e 23                	jle    c0009fa4 <tcp_recved+0xb0>
c0009f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f85:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009f88:	83 c8 02             	or     eax,0x2
c0009f8b:	88 c2                	mov    dl,al
c0009f8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f91:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009f94:	83 ec 0c             	sub    esp,0xc
c0009f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f9b:	e8 84 60 00 00       	call   c0010024 <tcp_output>
c0009fa0:	83 c4 10             	add    esp,0x10
c0009fa3:	90                   	nop
c0009fa4:	90                   	nop
c0009fa5:	83 c4 2c             	add    esp,0x2c
c0009fa8:	c3                   	ret    
c0009fa9:	8d 76 00             	lea    esi,[esi+0x0]

c0009fac <tcp_new_port>:
c0009fac:	83 ec 10             	sub    esp,0x10
c0009faf:	90                   	nop
c0009fb0:	66 a1 20 3e 03 c0    	mov    ax,ds:0xc0033e20
c0009fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0009fb9:	66 89 15 20 3e 03 c0 	mov    WORD PTR ds:0xc0033e20,dx
c0009fc0:	0f b7 c0             	movzx  eax,ax
c0009fc3:	3d ff ff 00 00       	cmp    eax,0xffff
c0009fc8:	75 0a                	jne    c0009fd4 <tcp_new_port+0x28>
c0009fca:	66 c7 05 20 3e 03 c0 00 c0 	mov    WORD PTR ds:0xc0033e20,0xc000
c0009fd3:	90                   	nop
c0009fd4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009fdc:	eb 4a                	jmp    c000a028 <tcp_new_port+0x7c>
c0009fde:	66 90                	xchg   ax,ax
c0009fe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe4:	8b 04 85 e0 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa20]
c0009feb:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ff1:	eb 29                	jmp    c000a01c <tcp_new_port+0x70>
c0009ff3:	90                   	nop
c0009ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ff8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ffb:	66 a1 20 3e 03 c0    	mov    ax,ds:0xc0033e20
c000a001:	0f b7 d2             	movzx  edx,dx
c000a004:	0f b7 c0             	movzx  eax,ax
c000a007:	39 c2                	cmp    edx,eax
c000a009:	75 05                	jne    c000a010 <tcp_new_port+0x64>
c000a00b:	eb a3                	jmp    c0009fb0 <tcp_new_port+0x4>
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a014:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a01b:	90                   	nop
c000a01c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000a021:	75 d1                	jne    c0009ff4 <tcp_new_port+0x48>
c000a023:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000a028:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c000a02d:	7e b1                	jle    c0009fe0 <tcp_new_port+0x34>
c000a02f:	66 a1 20 3e 03 c0    	mov    ax,ds:0xc0033e20
c000a035:	83 c4 10             	add    esp,0x10
c000a038:	c3                   	ret    
c000a039:	8d 76 00             	lea    esi,[esi+0x0]

c000a03c <tcp_bind>:
c000a03c:	83 ec 2c             	sub    esp,0x2c
c000a03f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a043:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a048:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000a050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a057:	85 c0                	test   eax,eax
c000a059:	74 1d                	je     c000a078 <tcp_bind+0x3c>
c000a05b:	83 ec 08             	sub    esp,0x8
c000a05e:	68 e8 02 03 c0       	push   0xc00302e8
c000a063:	68 06 fd 02 c0       	push   0xc002fd06
c000a068:	e8 1b 5d 01 00       	call   c001fd88 <CPrintf>
c000a06d:	83 c4 10             	add    esp,0x10
c000a070:	b0 fa                	mov    al,0xfa
c000a072:	e9 f1 00 00 00       	jmp    c000a168 <tcp_bind+0x12c>
c000a077:	90                   	nop
c000a078:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000a07d:	85 c0                	test   eax,eax
c000a07f:	75 0b                	jne    c000a08c <tcp_bind+0x50>
c000a081:	e8 26 ff ff ff       	call   c0009fac <tcp_new_port>
c000a086:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000a08b:	90                   	nop
c000a08c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a094:	eb 7a                	jmp    c000a110 <tcp_bind+0xd4>
c000a096:	66 90                	xchg   ax,ax
c000a098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a09c:	8b 04 85 e0 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa20]
c000a0a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0a9:	eb 59                	jmp    c000a104 <tcp_bind+0xc8>
c000a0ab:	90                   	nop
c000a0ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a0b3:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000a0b8:	0f b7 c0             	movzx  eax,ax
c000a0bb:	39 c2                	cmp    edx,eax
c000a0bd:	75 39                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c3:	85 c0                	test   eax,eax
c000a0c5:	74 2d                	je     c000a0f4 <tcp_bind+0xb8>
c000a0c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0cd:	85 c0                	test   eax,eax
c000a0cf:	74 23                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a0d6:	74 1c                	je     c000a0f4 <tcp_bind+0xb8>
c000a0d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0de:	85 c0                	test   eax,eax
c000a0e0:	74 12                	je     c000a0f4 <tcp_bind+0xb8>
c000a0e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a0ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0ee:	39 c2                	cmp    edx,eax
c000a0f0:	75 06                	jne    c000a0f8 <tcp_bind+0xbc>
c000a0f2:	66 90                	xchg   ax,ax
c000a0f4:	b0 f8                	mov    al,0xf8
c000a0f6:	eb 70                	jmp    c000a168 <tcp_bind+0x12c>
c000a0f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a103:	90                   	nop
c000a104:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a109:	75 a1                	jne    c000a0ac <tcp_bind+0x70>
c000a10b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a114:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c000a118:	0f 8c 7a ff ff ff    	jl     c000a098 <tcp_bind+0x5c>
c000a11e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000a123:	74 17                	je     c000a13c <tcp_bind+0x100>
c000a125:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a129:	8b 00                	mov    eax,DWORD PTR [eax]
c000a12b:	85 c0                	test   eax,eax
c000a12d:	74 0d                	je     c000a13c <tcp_bind+0x100>
c000a12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a133:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a137:	8b 12                	mov    edx,DWORD PTR [edx]
c000a139:	89 10                	mov    DWORD PTR [eax],edx
c000a13b:	90                   	nop
c000a13c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a144:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000a148:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c000a14e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a159:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a15e:	e8 51 6b 00 00       	call   c0010cb4 <tcp_timer_needed>
c000a163:	b0 00                	mov    al,0x0
c000a165:	8d 76 00             	lea    esi,[esi+0x0]
c000a168:	83 c4 2c             	add    esp,0x2c
c000a16b:	c3                   	ret    

c000a16c <tcp_seg_free>:
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a174:	74 32                	je     c000a1a8 <tcp_seg_free+0x3c>
c000a176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a17d:	85 c0                	test   eax,eax
c000a17f:	74 13                	je     c000a194 <tcp_seg_free+0x28>
c000a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a188:	83 ec 0c             	sub    esp,0xc
c000a18b:	50                   	push   eax
c000a18c:	e8 63 e3 ff ff       	call   c00084f4 <pbuf_free>
c000a191:	83 c4 10             	add    esp,0x10
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a19b:	6a 04                	push   0x4
c000a19d:	e8 96 da ff ff       	call   c0007c38 <memp_free>
c000a1a2:	83 c4 10             	add    esp,0x10
c000a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1a8:	90                   	nop
c000a1a9:	83 c4 0c             	add    esp,0xc
c000a1ac:	c3                   	ret    
c000a1ad:	8d 76 00             	lea    esi,[esi+0x0]

c000a1b0 <tcp_segs_free>:
c000a1b0:	83 ec 1c             	sub    esp,0x1c
c000a1b3:	eb 27                	jmp    c000a1dc <tcp_segs_free+0x2c>
c000a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a1be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c9:	e8 9e ff ff ff       	call   c000a16c <tcp_seg_free>
c000a1ce:	83 c4 10             	add    esp,0x10
c000a1d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c000a1dc:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a1e1:	75 d5                	jne    c000a1b8 <tcp_segs_free+0x8>
c000a1e3:	90                   	nop
c000a1e4:	83 c4 1c             	add    esp,0x1c
c000a1e7:	c3                   	ret    

c000a1e8 <tcp_setprio>:
c000a1e8:	83 ec 04             	sub    esp,0x4
c000a1eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1ef:	88 04 24             	mov    BYTE PTR [esp],al
c000a1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a1f6:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a1f9:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a1fc:	90                   	nop
c000a1fd:	83 c4 04             	add    esp,0x4
c000a200:	c3                   	ret    
c000a201:	8d 76 00             	lea    esi,[esi+0x0]

c000a204 <tcp_seg_copy>:
c000a204:	83 ec 1c             	sub    esp,0x1c
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	6a 04                	push   0x4
c000a20c:	e8 fb d8 ff ff       	call   c0007b0c <memp_malloc>
c000a211:	83 c4 10             	add    esp,0x10
c000a214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a218:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a21d:	75 09                	jne    c000a228 <tcp_seg_copy+0x24>
c000a21f:	b8 00 00 00 00       	mov    eax,0x0
c000a224:	eb 2e                	jmp    c000a254 <tcp_seg_copy+0x50>
c000a226:	66 90                	xchg   ax,ax
c000a228:	83 ec 04             	sub    esp,0x4
c000a22b:	6a 10                	push   0x10
c000a22d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a231:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a235:	e8 40 61 ff ff       	call   c000037a <memcpy>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a241:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a244:	83 ec 0c             	sub    esp,0xc
c000a247:	50                   	push   eax
c000a248:	e8 af ea ff ff       	call   c0008cfc <pbuf_ref>
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a254:	83 c4 1c             	add    esp,0x1c
c000a257:	c3                   	ret    

c000a258 <tcp_arg>:
c000a258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a25c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a260:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a263:	90                   	nop
c000a264:	c3                   	ret    
c000a265:	8d 76 00             	lea    esi,[esi+0x0]

c000a268 <tcp_recv>:
c000a268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a26c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a270:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a276:	90                   	nop
c000a277:	c3                   	ret    

c000a278 <tcp_sent>:
c000a278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a27c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a280:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a286:	90                   	nop
c000a287:	c3                   	ret    

c000a288 <tcp_err>:
c000a288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a28c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a290:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a296:	90                   	nop
c000a297:	c3                   	ret    

c000a298 <tcp_accept>:
c000a298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a29c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a2a0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a2a3:	90                   	nop
c000a2a4:	c3                   	ret    
c000a2a5:	8d 76 00             	lea    esi,[esi+0x0]

c000a2a8 <tcp_poll>:
c000a2a8:	83 ec 04             	sub    esp,0x4
c000a2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2af:	88 04 24             	mov    BYTE PTR [esp],al
c000a2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a2ba:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a2c4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a2c7:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a2ca:	90                   	nop
c000a2cb:	83 c4 04             	add    esp,0x4
c000a2ce:	c3                   	ret    
c000a2cf:	90                   	nop

c000a2d0 <tcp_pcb_purge>:
c000a2d0:	83 ec 0c             	sub    esp,0xc
c000a2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2da:	85 c0                	test   eax,eax
c000a2dc:	0f 84 ca 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2e9:	83 f8 0a             	cmp    eax,0xa
c000a2ec:	0f 84 ba 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a2f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2f9:	83 f8 01             	cmp    eax,0x1
c000a2fc:	0f 84 aa 00 00 00    	je     c000a3ac <tcp_pcb_purge+0xdc>
c000a302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a306:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a30c:	85 c0                	test   eax,eax
c000a30e:	74 24                	je     c000a334 <tcp_pcb_purge+0x64>
c000a310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a314:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a31a:	83 ec 0c             	sub    esp,0xc
c000a31d:	50                   	push   eax
c000a31e:	e8 d1 e1 ff ff       	call   c00084f4 <pbuf_free>
c000a323:	83 c4 10             	add    esp,0x10
c000a326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a32a:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a338:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a33e:	83 ec 0c             	sub    esp,0xc
c000a341:	50                   	push   eax
c000a342:	e8 69 fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a347:	83 c4 10             	add    esp,0x10
c000a34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a34e:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a35c:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a366:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a369:	83 ec 0c             	sub    esp,0xc
c000a36c:	50                   	push   eax
c000a36d:	e8 3e fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a372:	83 c4 10             	add    esp,0x10
c000a375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a379:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a37c:	83 ec 0c             	sub    esp,0xc
c000a37f:	50                   	push   eax
c000a380:	e8 2b fe ff ff       	call   c000a1b0 <tcp_segs_free>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a38c:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a397:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a39e:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a3a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a3a5:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a3ab:	90                   	nop
c000a3ac:	90                   	nop
c000a3ad:	83 c4 0c             	add    esp,0xc
c000a3b0:	c3                   	ret    
c000a3b1:	8d 76 00             	lea    esi,[esi+0x0]

c000a3b4 <tcp_slowtmr>:
c000a3b4:	57                   	push   edi
c000a3b5:	56                   	push   esi
c000a3b6:	53                   	push   ebx
c000a3b7:	83 ec 20             	sub    esp,0x20
c000a3ba:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a3bf:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a3c4:	83 c0 01             	add    eax,0x1
c000a3c7:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a3cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a3d4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a3dd:	e9 16 06 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a3e2:	66 90                	xchg   ax,ax
c000a3e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a3eb:	85 c0                	test   eax,eax
c000a3ed:	75 15                	jne    c000a404 <tcp_slowtmr+0x50>
c000a3ef:	83 ec 08             	sub    esp,0x8
c000a3f2:	68 10 03 03 c0       	push   0xc0030310
c000a3f7:	68 06 fd 02 c0       	push   0xc002fd06
c000a3fc:	e8 87 59 01 00       	call   c001fd88 <CPrintf>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a40b:	83 f8 01             	cmp    eax,0x1
c000a40e:	75 18                	jne    c000a428 <tcp_slowtmr+0x74>
c000a410:	83 ec 08             	sub    esp,0x8
c000a413:	68 3c 03 03 c0       	push   0xc003033c
c000a418:	68 06 fd 02 c0       	push   0xc002fd06
c000a41d:	e8 66 59 01 00       	call   c001fd88 <CPrintf>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	8d 76 00             	lea    esi,[esi+0x0]
c000a428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a42f:	83 f8 0a             	cmp    eax,0xa
c000a432:	75 18                	jne    c000a44c <tcp_slowtmr+0x98>
c000a434:	83 ec 08             	sub    esp,0x8
c000a437:	68 68 03 03 c0       	push   0xc0030368
c000a43c:	68 06 fd 02 c0       	push   0xc002fd06
c000a441:	e8 42 59 01 00       	call   c001fd88 <CPrintf>
c000a446:	83 c4 10             	add    esp,0x10
c000a449:	8d 76 00             	lea    esi,[esi+0x0]
c000a44c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a451:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a45d:	83 f8 02             	cmp    eax,0x2
c000a460:	75 22                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a462:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a466:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a469:	0f b6 c0             	movzx  eax,al
c000a46c:	83 f8 06             	cmp    eax,0x6
c000a46f:	75 13                	jne    c000a484 <tcp_slowtmr+0xd0>
c000a471:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a475:	83 c0 01             	add    eax,0x1
c000a478:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a47c:	e9 df 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a481:	8d 76 00             	lea    esi,[esi+0x0]
c000a484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a488:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a48b:	0f b6 c0             	movzx  eax,al
c000a48e:	83 f8 0c             	cmp    eax,0xc
c000a491:	75 11                	jne    c000a4a4 <tcp_slowtmr+0xf0>
c000a493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a497:	83 c0 01             	add    eax,0x1
c000a49a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a49e:	e9 bd 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a4a3:	90                   	nop
c000a4a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a8:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4ae:	0f b6 c0             	movzx  eax,al
c000a4b1:	85 c0                	test   eax,eax
c000a4b3:	0f 84 8f 00 00 00    	je     c000a548 <tcp_slowtmr+0x194>
c000a4b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4bd:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4de:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a4e4:	0f b6 c0             	movzx  eax,al
c000a4e7:	83 e8 01             	sub    eax,0x1
c000a4ea:	8a 80 f0 05 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfa10]
c000a4f0:	0f b6 c0             	movzx  eax,al
c000a4f3:	39 c2                	cmp    edx,eax
c000a4f5:	0f 82 65 01 00 00    	jb     c000a660 <tcp_slowtmr+0x2ac>
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a509:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a50d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a513:	0f b6 c0             	movzx  eax,al
c000a516:	83 f8 06             	cmp    eax,0x6
c000a519:	77 19                	ja     c000a534 <tcp_slowtmr+0x180>
c000a51b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a525:	83 c0 01             	add    eax,0x1
c000a528:	88 c2                	mov    dl,al
c000a52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52e:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a534:	83 ec 0c             	sub    esp,0xc
c000a537:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a53b:	e8 e8 63 00 00       	call   c0010928 <tcp_zero_window_probe>
c000a540:	83 c4 10             	add    esp,0x10
c000a543:	e9 18 01 00 00       	jmp    c000a660 <tcp_slowtmr+0x2ac>
c000a548:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a54c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a550:	98                   	cwde   
c000a551:	85 c0                	test   eax,eax
c000a553:	78 13                	js     c000a568 <tcp_slowtmr+0x1b4>
c000a555:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a559:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a55d:	83 c0 01             	add    eax,0x1
c000a560:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a564:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a568:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a56f:	85 c0                	test   eax,eax
c000a571:	0f 84 e9 00 00 00    	je     c000a660 <tcp_slowtmr+0x2ac>
c000a577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57b:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a57f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a583:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a586:	0f bf d2             	movsx  edx,dx
c000a589:	98                   	cwde   
c000a58a:	39 c2                	cmp    edx,eax
c000a58c:	0f 8c ce 00 00 00    	jl     c000a660 <tcp_slowtmr+0x2ac>
c000a592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a596:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a599:	83 f8 02             	cmp    eax,0x2
c000a59c:	74 3a                	je     c000a5d8 <tcp_slowtmr+0x224>
c000a59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a2:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a5a5:	98                   	cwde   
c000a5a6:	c1 f8 03             	sar    eax,0x3
c000a5a9:	0f bf d0             	movsx  edx,ax
c000a5ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5b0:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a5b4:	98                   	cwde   
c000a5b5:	01 c2                	add    edx,eax
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a5be:	0f b6 c0             	movzx  eax,al
c000a5c1:	8a 80 f8 05 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfa08]
c000a5c7:	0f b6 c0             	movzx  eax,al
c000a5ca:	88 c1                	mov    cl,al
c000a5cc:	d3 e2                	shl    edx,cl
c000a5ce:	89 d0                	mov    eax,edx
c000a5d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5d4:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dc:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a5e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e6:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a5e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ed:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a5f1:	0f b7 d8             	movzx  ebx,ax
c000a5f4:	0f b7 ca             	movzx  ecx,dx
c000a5f7:	39 cb                	cmp    ebx,ecx
c000a5f9:	76 05                	jbe    c000a600 <tcp_slowtmr+0x24c>
c000a5fb:	89 d0                	mov    eax,edx
c000a5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a600:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a605:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a60a:	d1 e8                	shr    eax,1
c000a60c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a610:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a614:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a618:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a61b:	0f b7 d0             	movzx  edx,ax
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a625:	0f b7 c0             	movzx  eax,ax
c000a628:	01 c0                	add    eax,eax
c000a62a:	39 c2                	cmp    edx,eax
c000a62c:	7d 12                	jge    c000a640 <tcp_slowtmr+0x28c>
c000a62e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a632:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a635:	d1 e0                	shl    eax,1
c000a637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a63b:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a63f:	90                   	nop
c000a640:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a644:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a647:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a64b:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a64f:	83 ec 0c             	sub    esp,0xc
c000a652:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a656:	e8 c9 5f 00 00       	call   c0010624 <tcp_rexmit_rto>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	66 90                	xchg   ax,ax
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a667:	83 f8 06             	cmp    eax,0x6
c000a66a:	75 24                	jne    c000a690 <tcp_slowtmr+0x2dc>
c000a66c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a676:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a679:	29 c2                	sub    edx,eax
c000a67b:	89 d0                	mov    eax,edx
c000a67d:	83 f8 28             	cmp    eax,0x28
c000a680:	76 0e                	jbe    c000a690 <tcp_slowtmr+0x2dc>
c000a682:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a686:	83 c0 01             	add    eax,0x1
c000a689:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a68d:	8d 76 00             	lea    esi,[esi+0x0]
c000a690:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a694:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a697:	0f b6 c0             	movzx  eax,al
c000a69a:	83 e0 08             	and    eax,0x8
c000a69d:	0f 84 e1 00 00 00    	je     c000a784 <tcp_slowtmr+0x3d0>
c000a6a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6aa:	83 f8 04             	cmp    eax,0x4
c000a6ad:	74 11                	je     c000a6c0 <tcp_slowtmr+0x30c>
c000a6af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b6:	83 f8 07             	cmp    eax,0x7
c000a6b9:	0f 85 c5 00 00 00    	jne    c000a784 <tcp_slowtmr+0x3d0>
c000a6bf:	90                   	nop
c000a6c0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6cd:	89 d1                	mov    ecx,edx
c000a6cf:	29 c1                	sub    ecx,eax
c000a6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6d5:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a6db:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a6e0:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a6e5:	f7 e2                	mul    edx
c000a6e7:	89 d0                	mov    eax,edx
c000a6e9:	c1 e8 05             	shr    eax,0x5
c000a6ec:	39 c1                	cmp    ecx,eax
c000a6ee:	76 18                	jbe    c000a708 <tcp_slowtmr+0x354>
c000a6f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6f4:	83 c0 01             	add    eax,0x1
c000a6f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6fb:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a6ff:	83 c0 01             	add    eax,0x1
c000a702:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a706:	eb 7c                	jmp    c000a784 <tcp_slowtmr+0x3d0>
c000a708:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a70e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a712:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a715:	89 d3                	mov    ebx,edx
c000a717:	29 c3                	sub    ebx,eax
c000a719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a71d:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a723:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a727:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a72d:	0f b6 d0             	movzx  edx,al
c000a730:	89 d0                	mov    eax,edx
c000a732:	c1 e0 03             	shl    eax,0x3
c000a735:	01 d0                	add    eax,edx
c000a737:	c1 e0 03             	shl    eax,0x3
c000a73a:	01 d0                	add    eax,edx
c000a73c:	c1 e0 02             	shl    eax,0x2
c000a73f:	01 d0                	add    eax,edx
c000a741:	c1 e0 05             	shl    eax,0x5
c000a744:	29 d0                	sub    eax,edx
c000a746:	c1 e0 03             	shl    eax,0x3
c000a749:	01 c8                	add    eax,ecx
c000a74b:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a750:	f7 e2                	mul    edx
c000a752:	89 d0                	mov    eax,edx
c000a754:	c1 e8 05             	shr    eax,0x5
c000a757:	39 c3                	cmp    ebx,eax
c000a759:	76 29                	jbe    c000a784 <tcp_slowtmr+0x3d0>
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a762:	e8 f9 60 00 00       	call   c0010860 <tcp_keepalive>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a76e:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a774:	83 c0 01             	add    eax,0x1
c000a777:	88 c2                	mov    dl,al
c000a779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a77d:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a783:	90                   	nop
c000a784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a788:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a78e:	85 c0                	test   eax,eax
c000a790:	74 4e                	je     c000a7e0 <tcp_slowtmr+0x42c>
c000a792:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a79c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a79f:	89 d1                	mov    ecx,edx
c000a7a1:	29 c1                	sub    ecx,eax
c000a7a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a7:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a7aa:	0f bf d0             	movsx  edx,ax
c000a7ad:	89 d0                	mov    eax,edx
c000a7af:	01 c0                	add    eax,eax
c000a7b1:	01 d0                	add    eax,edx
c000a7b3:	01 c0                	add    eax,eax
c000a7b5:	39 c1                	cmp    ecx,eax
c000a7b7:	72 27                	jb     c000a7e0 <tcp_slowtmr+0x42c>
c000a7b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7bd:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a7c3:	83 ec 0c             	sub    esp,0xc
c000a7c6:	50                   	push   eax
c000a7c7:	e8 e4 f9 ff ff       	call   c000a1b0 <tcp_segs_free>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d3:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a7e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7e7:	83 f8 03             	cmp    eax,0x3
c000a7ea:	75 24                	jne    c000a810 <tcp_slowtmr+0x45c>
c000a7ec:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7f6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7f9:	29 c2                	sub    edx,eax
c000a7fb:	89 d0                	mov    eax,edx
c000a7fd:	83 f8 28             	cmp    eax,0x28
c000a800:	76 0e                	jbe    c000a810 <tcp_slowtmr+0x45c>
c000a802:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a806:	83 c0 01             	add    eax,0x1
c000a809:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a80d:	8d 76 00             	lea    esi,[esi+0x0]
c000a810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a814:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a817:	83 f8 09             	cmp    eax,0x9
c000a81a:	75 24                	jne    c000a840 <tcp_slowtmr+0x48c>
c000a81c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a826:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a829:	29 c2                	sub    edx,eax
c000a82b:	89 d0                	mov    eax,edx
c000a82d:	3d f0 00 00 00       	cmp    eax,0xf0
c000a832:	76 0c                	jbe    c000a840 <tcp_slowtmr+0x48c>
c000a834:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a838:	83 c0 01             	add    eax,0x1
c000a83b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a83f:	90                   	nop
c000a840:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a845:	85 c0                	test   eax,eax
c000a847:	0f 84 13 01 00 00    	je     c000a960 <tcp_slowtmr+0x5ac>
c000a84d:	83 ec 0c             	sub    esp,0xc
c000a850:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a854:	e8 77 fa ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a861:	74 31                	je     c000a894 <tcp_slowtmr+0x4e0>
c000a863:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a868:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a86c:	75 16                	jne    c000a884 <tcp_slowtmr+0x4d0>
c000a86e:	83 ec 08             	sub    esp,0x8
c000a871:	68 98 03 03 c0       	push   0xc0030398
c000a876:	68 06 fd 02 c0       	push   0xc002fd06
c000a87b:	e8 08 55 01 00       	call   c001fd88 <CPrintf>
c000a880:	83 c4 10             	add    esp,0x10
c000a883:	90                   	nop
c000a884:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a888:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a88b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a88f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a892:	eb 2c                	jmp    c000a8c0 <tcp_slowtmr+0x50c>
c000a894:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a899:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a89d:	74 15                	je     c000a8b4 <tcp_slowtmr+0x500>
c000a89f:	83 ec 08             	sub    esp,0x8
c000a8a2:	68 c4 03 03 c0       	push   0xc00303c4
c000a8a7:	68 06 fd 02 c0       	push   0xc002fd06
c000a8ac:	e8 d7 54 01 00       	call   c001fd88 <CPrintf>
c000a8b1:	83 c4 10             	add    esp,0x10
c000a8b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8bb:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a8c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8ca:	85 c0                	test   eax,eax
c000a8cc:	74 1e                	je     c000a8ec <tcp_slowtmr+0x538>
c000a8ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d2:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a8d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8dc:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a8df:	83 ec 08             	sub    esp,0x8
c000a8e2:	6a f6                	push   0xfffffff6
c000a8e4:	52                   	push   edx
c000a8e5:	ff d0                	call   eax
c000a8e7:	83 c4 10             	add    esp,0x10
c000a8ea:	66 90                	xchg   ax,ax
c000a8ec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a8f1:	85 c0                	test   eax,eax
c000a8f3:	74 3f                	je     c000a934 <tcp_slowtmr+0x580>
c000a8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8f9:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a8fd:	0f b7 f0             	movzx  esi,ax
c000a900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a904:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a907:	0f b7 d8             	movzx  ebx,ax
c000a90a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a90e:	8d 78 04             	lea    edi,[eax+0x4]
c000a911:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a915:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a919:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a91c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a920:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a923:	83 ec 08             	sub    esp,0x8
c000a926:	56                   	push   esi
c000a927:	53                   	push   ebx
c000a928:	57                   	push   edi
c000a929:	51                   	push   ecx
c000a92a:	52                   	push   edx
c000a92b:	50                   	push   eax
c000a92c:	e8 7f 5b 00 00       	call   c00104b0 <tcp_rst>
c000a931:	83 c4 20             	add    esp,0x20
c000a934:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a943:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a947:	83 ec 08             	sub    esp,0x8
c000a94a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a94e:	6a 02                	push   0x2
c000a950:	e8 e3 d2 ff ff       	call   c0007c38 <memp_free>
c000a955:	83 c4 10             	add    esp,0x10
c000a958:	e9 9b 00 00 00       	jmp    c000a9f8 <tcp_slowtmr+0x644>
c000a95d:	8d 76 00             	lea    esi,[esi+0x0]
c000a960:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a964:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a96c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a96f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a973:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a977:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a97a:	83 c0 01             	add    eax,0x1
c000a97d:	88 c2                	mov    dl,al
c000a97f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a983:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a986:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a98a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a98d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a991:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a994:	0f b6 d2             	movzx  edx,dl
c000a997:	0f b6 c0             	movzx  eax,al
c000a99a:	39 c2                	cmp    edx,eax
c000a99c:	72 5a                	jb     c000a9f8 <tcp_slowtmr+0x644>
c000a99e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9a2:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a9a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9aa:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9b0:	85 c0                	test   eax,eax
c000a9b2:	74 24                	je     c000a9d8 <tcp_slowtmr+0x624>
c000a9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9b8:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a9c2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a9c5:	83 ec 08             	sub    esp,0x8
c000a9c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9cc:	52                   	push   edx
c000a9cd:	ff d0                	call   eax
c000a9cf:	83 c4 10             	add    esp,0x10
c000a9d2:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a9d6:	eb 08                	jmp    c000a9e0 <tcp_slowtmr+0x62c>
c000a9d8:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a9e0:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a9e5:	85 c0                	test   eax,eax
c000a9e7:	75 0f                	jne    c000a9f8 <tcp_slowtmr+0x644>
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a9f0:	e8 2f 56 00 00       	call   c0010024 <tcp_output>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9fd:	0f 85 e1 f9 ff ff    	jne    c000a3e4 <tcp_slowtmr+0x30>
c000aa03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aa0b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aa14:	e9 0b 01 00 00       	jmp    c000ab24 <tcp_slowtmr+0x770>
c000aa19:	8d 76 00             	lea    esi,[esi+0x0]
c000aa1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa23:	83 f8 0a             	cmp    eax,0xa
c000aa26:	74 18                	je     c000aa40 <tcp_slowtmr+0x68c>
c000aa28:	83 ec 08             	sub    esp,0x8
c000aa2b:	68 f0 03 03 c0       	push   0xc00303f0
c000aa30:	68 06 fd 02 c0       	push   0xc002fd06
c000aa35:	e8 4e 53 01 00       	call   c001fd88 <CPrintf>
c000aa3a:	83 c4 10             	add    esp,0x10
c000aa3d:	8d 76 00             	lea    esi,[esi+0x0]
c000aa40:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aa45:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000aa4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa4f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000aa52:	29 c2                	sub    edx,eax
c000aa54:	89 d0                	mov    eax,edx
c000aa56:	3d f0 00 00 00       	cmp    eax,0xf0
c000aa5b:	76 0b                	jbe    c000aa68 <tcp_slowtmr+0x6b4>
c000aa5d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000aa61:	83 c0 01             	add    eax,0x1
c000aa64:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000aa68:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000aa6d:	85 c0                	test   eax,eax
c000aa6f:	0f 84 9b 00 00 00    	je     c000ab10 <tcp_slowtmr+0x75c>
c000aa75:	83 ec 0c             	sub    esp,0xc
c000aa78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa7c:	e8 4f f8 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000aa89:	74 31                	je     c000aabc <tcp_slowtmr+0x708>
c000aa8b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aa90:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aa94:	75 16                	jne    c000aaac <tcp_slowtmr+0x6f8>
c000aa96:	83 ec 08             	sub    esp,0x8
c000aa99:	68 20 04 03 c0       	push   0xc0030420
c000aa9e:	68 06 fd 02 c0       	push   0xc002fd06
c000aaa3:	e8 e0 52 01 00       	call   c001fd88 <CPrintf>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	90                   	nop
c000aaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aab0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000aab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aab7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aaba:	eb 2c                	jmp    c000aae8 <tcp_slowtmr+0x734>
c000aabc:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000aac1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000aac5:	74 15                	je     c000aadc <tcp_slowtmr+0x728>
c000aac7:	83 ec 08             	sub    esp,0x8
c000aaca:	68 48 04 03 c0       	push   0xc0030448
c000aacf:	68 06 fd 02 c0       	push   0xc002fd06
c000aad4:	e8 af 52 01 00       	call   c001fd88 <CPrintf>
c000aad9:	83 c4 10             	add    esp,0x10
c000aadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aae0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aae3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000aae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aaf4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aaf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ab02:	6a 02                	push   0x2
c000ab04:	e8 2f d1 ff ff       	call   c0007c38 <memp_free>
c000ab09:	83 c4 10             	add    esp,0x10
c000ab0c:	eb 16                	jmp    c000ab24 <tcp_slowtmr+0x770>
c000ab0e:	66 90                	xchg   ax,ax
c000ab10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ab1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ab23:	90                   	nop
c000ab24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ab29:	0f 85 ed fe ff ff    	jne    c000aa1c <tcp_slowtmr+0x668>
c000ab2f:	90                   	nop
c000ab30:	83 c4 20             	add    esp,0x20
c000ab33:	5b                   	pop    ebx
c000ab34:	5e                   	pop    esi
c000ab35:	5f                   	pop    edi
c000ab36:	c3                   	ret    
c000ab37:	90                   	nop

c000ab38 <tcp_pcb_remove>:
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab41:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab45:	75 11                	jne    c000ab58 <tcp_pcb_remove+0x20>
c000ab47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab4d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	89 10                	mov    DWORD PTR [eax],edx
c000ab56:	eb 4c                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab5e:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab63:	eb 33                	jmp    c000ab98 <tcp_pcb_remove+0x60>
c000ab65:	8d 76 00             	lea    esi,[esi+0x0]
c000ab68:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab70:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000ab74:	75 12                	jne    c000ab88 <tcp_pcb_remove+0x50>
c000ab76:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab7f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab85:	eb 1d                	jmp    c000aba4 <tcp_pcb_remove+0x6c>
c000ab87:	90                   	nop
c000ab88:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab8d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab90:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab9d:	85 c0                	test   eax,eax
c000ab9f:	75 c7                	jne    c000ab68 <tcp_pcb_remove+0x30>
c000aba1:	8d 76 00             	lea    esi,[esi+0x0]
c000aba4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000abaf:	83 ec 0c             	sub    esp,0xc
c000abb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abb6:	e8 15 f7 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000abbb:	83 c4 10             	add    esp,0x10
c000abbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abc5:	83 f8 0a             	cmp    eax,0xa
c000abc8:	74 3e                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abd1:	83 f8 01             	cmp    eax,0x1
c000abd4:	74 32                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abd6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abdd:	0f b6 c0             	movzx  eax,al
c000abe0:	83 e0 01             	and    eax,0x1
c000abe3:	74 23                	je     c000ac08 <tcp_pcb_remove+0xd0>
c000abe5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000abec:	83 c8 02             	or     eax,0x2
c000abef:	88 c2                	mov    dl,al
c000abf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abf5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000abf8:	83 ec 0c             	sub    esp,0xc
c000abfb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000abff:	e8 20 54 00 00       	call   c0010024 <tcp_output>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac0f:	83 f8 01             	cmp    eax,0x1
c000ac12:	74 64                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac18:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ac1b:	85 c0                	test   eax,eax
c000ac1d:	74 15                	je     c000ac34 <tcp_pcb_remove+0xfc>
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	68 ee 04 03 c0       	push   0xc00304ee
c000ac27:	68 06 fd 02 c0       	push   0xc002fd06
c000ac2c:	e8 57 51 01 00       	call   c001fd88 <CPrintf>
c000ac31:	83 c4 10             	add    esp,0x10
c000ac34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac38:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ac3b:	85 c0                	test   eax,eax
c000ac3d:	74 15                	je     c000ac54 <tcp_pcb_remove+0x11c>
c000ac3f:	83 ec 08             	sub    esp,0x8
c000ac42:	68 06 05 03 c0       	push   0xc0030506
c000ac47:	68 06 fd 02 c0       	push   0xc002fd06
c000ac4c:	e8 37 51 01 00       	call   c001fd88 <CPrintf>
c000ac51:	83 c4 10             	add    esp,0x10
c000ac54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac58:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ac5e:	85 c0                	test   eax,eax
c000ac60:	74 16                	je     c000ac78 <tcp_pcb_remove+0x140>
c000ac62:	83 ec 08             	sub    esp,0x8
c000ac65:	68 1f 05 03 c0       	push   0xc003051f
c000ac6a:	68 06 fd 02 c0       	push   0xc002fd06
c000ac6f:	e8 14 51 01 00       	call   c001fd88 <CPrintf>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac7c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ac83:	90                   	nop
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <tcp_close_shutdown>:
c000ac88:	57                   	push   edi
c000ac89:	56                   	push   esi
c000ac8a:	53                   	push   ebx
c000ac8b:	83 ec 20             	sub    esp,0x20
c000ac8e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac92:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ac96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ac9b:	85 c0                	test   eax,eax
c000ac9d:	0f 84 41 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000aca3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000acaa:	83 f8 01             	cmp    eax,0x1
c000acad:	0f 84 31 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acb7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	75 17                	jne    c000acd8 <tcp_close_shutdown+0x50>
c000acc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acc5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000acc8:	0f b7 c0             	movzx  eax,ax
c000accb:	3d 60 08 00 00       	cmp    eax,0x860
c000acd0:	0f 84 0e 01 00 00    	je     c000ade4 <tcp_close_shutdown+0x15c>
c000acd6:	66 90                	xchg   ax,ax
c000acd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000acdc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000acdf:	0f b6 c0             	movzx  eax,al
c000ace2:	83 e0 10             	and    eax,0x10
c000ace5:	75 15                	jne    c000acfc <tcp_close_shutdown+0x74>
c000ace7:	83 ec 08             	sub    esp,0x8
c000acea:	68 36 05 03 c0       	push   0xc0030536
c000acef:	68 06 fd 02 c0       	push   0xc002fd06
c000acf4:	e8 8f 50 01 00       	call   c001fd88 <CPrintf>
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad00:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ad04:	0f b7 f0             	movzx  esi,ax
c000ad07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ad0e:	0f b7 d8             	movzx  ebx,ax
c000ad11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad15:	8d 78 04             	lea    edi,[eax+0x4]
c000ad18:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ad1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad20:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ad23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad27:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ad2a:	83 ec 08             	sub    esp,0x8
c000ad2d:	56                   	push   esi
c000ad2e:	53                   	push   ebx
c000ad2f:	57                   	push   edi
c000ad30:	51                   	push   ecx
c000ad31:	52                   	push   edx
c000ad32:	50                   	push   eax
c000ad33:	e8 78 57 00 00       	call   c00104b0 <tcp_rst>
c000ad38:	83 c4 20             	add    esp,0x20
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad42:	e8 89 f5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad4f:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad53:	75 0f                	jne    c000ad64 <tcp_close_shutdown+0xdc>
c000ad55:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad5d:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ad62:	eb 48                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad64:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ad69:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad6e:	eb 30                	jmp    c000ada0 <tcp_close_shutdown+0x118>
c000ad70:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad75:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad78:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ad7c:	75 12                	jne    c000ad90 <tcp_close_shutdown+0x108>
c000ad7e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ad87:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ad8a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ad8d:	eb 1d                	jmp    c000adac <tcp_close_shutdown+0x124>
c000ad8f:	90                   	nop
c000ad90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad95:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad98:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ada0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ada5:	85 c0                	test   eax,eax
c000ada7:	75 c7                	jne    c000ad70 <tcp_close_shutdown+0xe8>
c000ada9:	8d 76 00             	lea    esi,[esi+0x0]
c000adac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adb0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000adb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adbb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000adc2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000adc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adcc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000adcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000add8:	e8 d7 5e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000addd:	b0 00                	mov    al,0x0
c000addf:	e9 f4 01 00 00       	jmp    c000afd8 <tcp_close_shutdown+0x350>
c000ade4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ade8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000adeb:	83 f8 07             	cmp    eax,0x7
c000adee:	0f 87 a4 01 00 00    	ja     c000af98 <tcp_close_shutdown+0x310>
c000adf4:	8b 04 85 c0 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa40]
c000adfb:	ff e0                	jmp    eax
c000adfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ae00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae09:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ae0c:	0f b7 c0             	movzx  eax,ax
c000ae0f:	85 c0                	test   eax,eax
c000ae11:	74 71                	je     c000ae84 <tcp_close_shutdown+0x1fc>
c000ae13:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae1c:	75 12                	jne    c000ae30 <tcp_close_shutdown+0x1a8>
c000ae1e:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae26:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ae2b:	eb 4b                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ae35:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae3a:	eb 30                	jmp    c000ae6c <tcp_close_shutdown+0x1e4>
c000ae3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ae48:	75 12                	jne    c000ae5c <tcp_close_shutdown+0x1d4>
c000ae4a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ae53:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ae56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae59:	eb 1d                	jmp    c000ae78 <tcp_close_shutdown+0x1f0>
c000ae5b:	90                   	nop
c000ae5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae64:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ae69:	8d 76 00             	lea    esi,[esi+0x0]
c000ae6c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ae71:	85 c0                	test   eax,eax
c000ae73:	75 c7                	jne    c000ae3c <tcp_close_shutdown+0x1b4>
c000ae75:	8d 76 00             	lea    esi,[esi+0x0]
c000ae78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae7c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ae83:	90                   	nop
c000ae84:	83 ec 08             	sub    esp,0x8
c000ae87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ae8b:	6a 02                	push   0x2
c000ae8d:	e8 a6 cd ff ff       	call   c0007c38 <memp_free>
c000ae92:	83 c4 10             	add    esp,0x10
c000ae95:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae9d:	e9 12 01 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aeb0:	68 78 68 03 c0       	push   0xc0036878
c000aeb5:	e8 7e fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aeba:	83 c4 10             	add    esp,0x10
c000aebd:	83 ec 08             	sub    esp,0x8
c000aec0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aec4:	6a 03                	push   0x3
c000aec6:	e8 6d cd ff ff       	call   c0007c38 <memp_free>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000aed6:	e9 d9 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000aedb:	90                   	nop
c000aedc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aee1:	83 ec 08             	sub    esp,0x8
c000aee4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aee8:	68 70 68 03 c0       	push   0xc0036870
c000aeed:	e8 46 fc ff ff       	call   c000ab38 <tcp_pcb_remove>
c000aef2:	83 c4 10             	add    esp,0x10
c000aef5:	83 ec 08             	sub    esp,0x8
c000aef8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aefc:	6a 02                	push   0x2
c000aefe:	e8 35 cd ff ff       	call   c0007c38 <memp_free>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000af0e:	e9 a1 00 00 00       	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000af13:	90                   	nop
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af1b:	e8 54 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af20:	83 c4 10             	add    esp,0x10
c000af23:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af27:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af2c:	85 c0                	test   eax,eax
c000af2e:	75 78                	jne    c000afa8 <tcp_close_shutdown+0x320>
c000af30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af34:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af3b:	eb 6b                	jmp    c000afa8 <tcp_close_shutdown+0x320>
c000af3d:	8d 76 00             	lea    esi,[esi+0x0]
c000af40:	83 ec 0c             	sub    esp,0xc
c000af43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af47:	e8 28 4d 00 00       	call   c000fc74 <tcp_send_fin>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af53:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af58:	85 c0                	test   eax,eax
c000af5a:	75 50                	jne    c000afac <tcp_close_shutdown+0x324>
c000af5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af60:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000af67:	eb 43                	jmp    c000afac <tcp_close_shutdown+0x324>
c000af69:	8d 76 00             	lea    esi,[esi+0x0]
c000af6c:	83 ec 0c             	sub    esp,0xc
c000af6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000af73:	e8 fc 4c 00 00       	call   c000fc74 <tcp_send_fin>
c000af78:	83 c4 10             	add    esp,0x10
c000af7b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000af7f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000af84:	85 c0                	test   eax,eax
c000af86:	75 28                	jne    c000afb0 <tcp_close_shutdown+0x328>
c000af88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000af8c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000af93:	eb 1b                	jmp    c000afb0 <tcp_close_shutdown+0x328>
c000af95:	8d 76 00             	lea    esi,[esi+0x0]
c000af98:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af9d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000afa5:	eb 0d                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afa7:	90                   	nop
c000afa8:	90                   	nop
c000afa9:	eb 09                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afab:	90                   	nop
c000afac:	90                   	nop
c000afad:	eb 05                	jmp    c000afb4 <tcp_close_shutdown+0x32c>
c000afaf:	90                   	nop
c000afb0:	90                   	nop
c000afb1:	8d 76 00             	lea    esi,[esi+0x0]
c000afb4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000afb9:	74 19                	je     c000afd4 <tcp_close_shutdown+0x34c>
c000afbb:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000afc0:	85 c0                	test   eax,eax
c000afc2:	75 10                	jne    c000afd4 <tcp_close_shutdown+0x34c>
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afcb:	e8 54 50 00 00       	call   c0010024 <tcp_output>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	90                   	nop
c000afd4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000afd8:	83 c4 20             	add    esp,0x20
c000afdb:	5b                   	pop    ebx
c000afdc:	5e                   	pop    esi
c000afdd:	5f                   	pop    edi
c000afde:	c3                   	ret    
c000afdf:	90                   	nop

c000afe0 <tcp_close>:
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afea:	83 f8 01             	cmp    eax,0x1
c000afed:	74 15                	je     c000b004 <tcp_close+0x24>
c000afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aff6:	83 c8 10             	or     eax,0x10
c000aff9:	88 c2                	mov    dl,al
c000affb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afff:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b002:	66 90                	xchg   ax,ax
c000b004:	83 ec 08             	sub    esp,0x8
c000b007:	6a 01                	push   0x1
c000b009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b00d:	e8 76 fc ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	83 c4 0c             	add    esp,0xc
c000b018:	c3                   	ret    
c000b019:	8d 76 00             	lea    esi,[esi+0x0]

c000b01c <tcp_recv_null>:
c000b01c:	83 ec 1c             	sub    esp,0x1c
c000b01f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b027:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b02c:	74 2e                	je     c000b05c <tcp_recv_null+0x40>
c000b02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b032:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b035:	0f b7 c0             	movzx  eax,ax
c000b038:	83 ec 08             	sub    esp,0x8
c000b03b:	50                   	push   eax
c000b03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b040:	e8 af ee ff ff       	call   c0009ef4 <tcp_recved>
c000b045:	83 c4 10             	add    esp,0x10
c000b048:	83 ec 0c             	sub    esp,0xc
c000b04b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b04f:	e8 a0 d4 ff ff       	call   c00084f4 <pbuf_free>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 1f                	jmp    c000b078 <tcp_recv_null+0x5c>
c000b059:	8d 76 00             	lea    esi,[esi+0x0]
c000b05c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000b061:	85 c0                	test   eax,eax
c000b063:	75 13                	jne    c000b078 <tcp_recv_null+0x5c>
c000b065:	83 ec 0c             	sub    esp,0xc
c000b068:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b06c:	e8 6f ff ff ff       	call   c000afe0 <tcp_close>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	eb 06                	jmp    c000b07c <tcp_recv_null+0x60>
c000b076:	66 90                	xchg   ax,ax
c000b078:	b0 00                	mov    al,0x0
c000b07a:	66 90                	xchg   ax,ax
c000b07c:	83 c4 1c             	add    esp,0x1c
c000b07f:	c3                   	ret    

c000b080 <tcp_fasttmr>:
c000b080:	83 ec 1c             	sub    esp,0x1c
c000b083:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b08c:	e9 03 01 00 00       	jmp    c000b194 <tcp_fasttmr+0x114>
c000b091:	8d 76 00             	lea    esi,[esi+0x0]
c000b094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b098:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b09b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0a9:	85 c0                	test   eax,eax
c000b0ab:	0f 84 8f 00 00 00    	je     c000b140 <tcp_fasttmr+0xc0>
c000b0b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0b5:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0bb:	85 c0                	test   eax,eax
c000b0bd:	74 31                	je     c000b0f0 <tcp_fasttmr+0x70>
c000b0bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c3:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000b0c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0cd:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000b0d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b0d7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000b0da:	6a 00                	push   0x0
c000b0dc:	51                   	push   ecx
c000b0dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e1:	52                   	push   edx
c000b0e2:	ff d0                	call   eax
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b0eb:	eb 23                	jmp    c000b110 <tcp_fasttmr+0x90>
c000b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0f4:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0fa:	6a 00                	push   0x0
c000b0fc:	50                   	push   eax
c000b0fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b101:	6a 00                	push   0x0
c000b103:	e8 14 ff ff ff       	call   c000b01c <tcp_recv_null>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000b10f:	90                   	nop
c000b110:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b115:	85 c0                	test   eax,eax
c000b117:	75 13                	jne    c000b12c <tcp_fasttmr+0xac>
c000b119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b11d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b127:	eb 17                	jmp    c000b140 <tcp_fasttmr+0xc0>
c000b129:	8d 76 00             	lea    esi,[esi+0x0]
c000b12c:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000b131:	83 f8 f6             	cmp    eax,0xfffffff6
c000b134:	75 0a                	jne    c000b140 <tcp_fasttmr+0xc0>
c000b136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b13e:	66 90                	xchg   ax,ax
c000b140:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b145:	74 45                	je     c000b18c <tcp_fasttmr+0x10c>
c000b147:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b14b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b14e:	0f b6 c0             	movzx  eax,al
c000b151:	83 e0 01             	and    eax,0x1
c000b154:	74 36                	je     c000b18c <tcp_fasttmr+0x10c>
c000b156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b15a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b15d:	83 c8 02             	or     eax,0x2
c000b160:	88 c2                	mov    dl,al
c000b162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b166:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b169:	83 ec 0c             	sub    esp,0xc
c000b16c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b170:	e8 af 4e 00 00       	call   c0010024 <tcp_output>
c000b175:	83 c4 10             	add    esp,0x10
c000b178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b17c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b17f:	83 e0 fc             	and    eax,0xfffffffc
c000b182:	88 c2                	mov    dl,al
c000b184:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b188:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b18b:	90                   	nop
c000b18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b194:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b199:	0f 85 f5 fe ff ff    	jne    c000b094 <tcp_fasttmr+0x14>
c000b19f:	90                   	nop
c000b1a0:	83 c4 1c             	add    esp,0x1c
c000b1a3:	c3                   	ret    

c000b1a4 <tcp_tmr>:
c000b1a4:	83 ec 0c             	sub    esp,0xc
c000b1a7:	e8 d4 fe ff ff       	call   c000b080 <tcp_fasttmr>
c000b1ac:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1b1:	83 c0 01             	add    eax,0x1
c000b1b4:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b1b9:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b1be:	0f b6 c0             	movzx  eax,al
c000b1c1:	83 e0 01             	and    eax,0x1
c000b1c4:	74 06                	je     c000b1cc <tcp_tmr+0x28>
c000b1c6:	e8 e9 f1 ff ff       	call   c000a3b4 <tcp_slowtmr>
c000b1cb:	90                   	nop
c000b1cc:	90                   	nop
c000b1cd:	83 c4 0c             	add    esp,0xc
c000b1d0:	c3                   	ret    
c000b1d1:	8d 76 00             	lea    esi,[esi+0x0]

c000b1d4 <tcp_shutdown>:
c000b1d4:	83 ec 0c             	sub    esp,0xc
c000b1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b1de:	83 f8 01             	cmp    eax,0x1
c000b1e1:	75 09                	jne    c000b1ec <tcp_shutdown+0x18>
c000b1e3:	b0 f3                	mov    al,0xf3
c000b1e5:	e9 92 00 00 00       	jmp    c000b27c <tcp_shutdown+0xa8>
c000b1ea:	66 90                	xchg   ax,ax
c000b1ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b1f1:	74 49                	je     c000b23c <tcp_shutdown+0x68>
c000b1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f7:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b1fd:	85 c0                	test   eax,eax
c000b1ff:	74 27                	je     c000b228 <tcp_shutdown+0x54>
c000b201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b205:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b20b:	83 ec 0c             	sub    esp,0xc
c000b20e:	50                   	push   eax
c000b20f:	e8 e0 d2 ff ff       	call   c00084f4 <pbuf_free>
c000b214:	83 c4 10             	add    esp,0x10
c000b217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21b:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b225:	8d 76 00             	lea    esi,[esi+0x0]
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b22f:	83 c8 10             	or     eax,0x10
c000b232:	88 c2                	mov    dl,al
c000b234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b238:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b23b:	90                   	nop
c000b23c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b241:	74 2d                	je     c000b270 <tcp_shutdown+0x9c>
c000b243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b247:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b24a:	83 f8 03             	cmp    eax,0x3
c000b24d:	72 25                	jb     c000b274 <tcp_shutdown+0xa0>
c000b24f:	83 f8 04             	cmp    eax,0x4
c000b252:	76 08                	jbe    c000b25c <tcp_shutdown+0x88>
c000b254:	83 f8 07             	cmp    eax,0x7
c000b257:	75 1b                	jne    c000b274 <tcp_shutdown+0xa0>
c000b259:	8d 76 00             	lea    esi,[esi+0x0]
c000b25c:	83 ec 08             	sub    esp,0x8
c000b25f:	6a 00                	push   0x0
c000b261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b265:	e8 1e fa ff ff       	call   c000ac88 <tcp_close_shutdown>
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	eb 0d                	jmp    c000b27c <tcp_shutdown+0xa8>
c000b26f:	90                   	nop
c000b270:	90                   	nop
c000b271:	eb 05                	jmp    c000b278 <tcp_shutdown+0xa4>
c000b273:	90                   	nop
c000b274:	90                   	nop
c000b275:	8d 76 00             	lea    esi,[esi+0x0]
c000b278:	b0 00                	mov    al,0x0
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 c4 0c             	add    esp,0xc
c000b27f:	c3                   	ret    

c000b280 <tcp_abandon>:
c000b280:	83 ec 2c             	sub    esp,0x2c
c000b283:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b287:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b28a:	83 f8 01             	cmp    eax,0x1
c000b28d:	75 15                	jne    c000b2a4 <tcp_abandon+0x24>
c000b28f:	83 ec 08             	sub    esp,0x8
c000b292:	68 70 04 03 c0       	push   0xc0030470
c000b297:	68 06 fd 02 c0       	push   0xc002fd06
c000b29c:	e8 e7 4a 01 00       	call   c001fd88 <CPrintf>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b2ab:	83 f8 0a             	cmp    eax,0xa
c000b2ae:	75 2c                	jne    c000b2dc <tcp_abandon+0x5c>
c000b2b0:	83 ec 08             	sub    esp,0x8
c000b2b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2b7:	68 84 68 03 c0       	push   0xc0036884
c000b2bc:	e8 77 f8 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 ec 08             	sub    esp,0x8
c000b2c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2cb:	6a 02                	push   0x2
c000b2cd:	e8 66 c9 ff ff       	call   c0007c38 <memp_free>
c000b2d2:	83 c4 10             	add    esp,0x10
c000b2d5:	e9 32 01 00 00       	jmp    c000b40c <tcp_abandon+0x18c>
c000b2da:	66 90                	xchg   ax,ax
c000b2dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2e0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b2e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2eb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b2ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b303:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b30b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b30e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b313:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b317:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b31b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b324:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b32a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b32e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b332:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b335:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b339:	83 ec 08             	sub    esp,0x8
c000b33c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b340:	68 70 68 03 c0       	push   0xc0036870
c000b345:	e8 ee f7 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000b34a:	83 c4 10             	add    esp,0x10
c000b34d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b351:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b354:	85 c0                	test   eax,eax
c000b356:	74 14                	je     c000b36c <tcp_abandon+0xec>
c000b358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b35c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b35f:	83 ec 0c             	sub    esp,0xc
c000b362:	50                   	push   eax
c000b363:	e8 48 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b368:	83 c4 10             	add    esp,0x10
c000b36b:	90                   	nop
c000b36c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b370:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b373:	85 c0                	test   eax,eax
c000b375:	74 15                	je     c000b38c <tcp_abandon+0x10c>
c000b377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b37b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	50                   	push   eax
c000b382:	e8 29 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	66 90                	xchg   ax,ax
c000b38c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b390:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b396:	85 c0                	test   eax,eax
c000b398:	74 16                	je     c000b3b0 <tcp_abandon+0x130>
c000b39a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b39e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b3a4:	83 ec 0c             	sub    esp,0xc
c000b3a7:	50                   	push   eax
c000b3a8:	e8 03 ee ff ff       	call   c000a1b0 <tcp_segs_free>
c000b3ad:	83 c4 10             	add    esp,0x10
c000b3b0:	83 ec 08             	sub    esp,0x8
c000b3b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b3b7:	6a 02                	push   0x2
c000b3b9:	e8 7a c8 ff ff       	call   c0007c38 <memp_free>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b3c6:	74 14                	je     c000b3dc <tcp_abandon+0x15c>
c000b3c8:	83 ec 08             	sub    esp,0x8
c000b3cb:	6a f6                	push   0xfffffff6
c000b3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3d5:	ff d0                	call   eax
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	66 90                	xchg   ax,ax
c000b3dc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b3e1:	74 29                	je     c000b40c <tcp_abandon+0x18c>
c000b3e3:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b3e8:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b3ed:	83 ec 08             	sub    esp,0x8
c000b3f0:	52                   	push   edx
c000b3f1:	50                   	push   eax
c000b3f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3f6:	50                   	push   eax
c000b3f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3fb:	50                   	push   eax
c000b3fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b400:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b404:	e8 a7 50 00 00       	call   c00104b0 <tcp_rst>
c000b409:	83 c4 20             	add    esp,0x20
c000b40c:	90                   	nop
c000b40d:	83 c4 2c             	add    esp,0x2c
c000b410:	c3                   	ret    
c000b411:	8d 76 00             	lea    esi,[esi+0x0]

c000b414 <tcp_abort>:
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	83 ec 08             	sub    esp,0x8
c000b41a:	6a 01                	push   0x1
c000b41c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b420:	e8 5b fe ff ff       	call   c000b280 <tcp_abandon>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	90                   	nop
c000b429:	83 c4 0c             	add    esp,0xc
c000b42c:	c3                   	ret    
c000b42d:	8d 76 00             	lea    esi,[esi+0x0]

c000b430 <tcp_kill_prio>:
c000b430:	83 ec 2c             	sub    esp,0x2c
c000b433:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b437:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b43b:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b440:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b448:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b450:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b455:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b459:	eb 75                	jmp    c000b4d0 <tcp_kill_prio+0xa0>
c000b45b:	90                   	nop
c000b45c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b460:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b463:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b468:	0f b6 c0             	movzx  eax,al
c000b46b:	39 c2                	cmp    edx,eax
c000b46d:	72 55                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b46f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b473:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b476:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b47b:	0f b6 c0             	movzx  eax,al
c000b47e:	39 c2                	cmp    edx,eax
c000b480:	72 42                	jb     c000b4c4 <tcp_kill_prio+0x94>
c000b482:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b48f:	29 c2                	sub    edx,eax
c000b491:	89 d0                	mov    eax,edx
c000b493:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b497:	77 2b                	ja     c000b4c4 <tcp_kill_prio+0x94>
c000b499:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b49f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a3:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b4a6:	29 c2                	sub    edx,eax
c000b4a8:	89 d0                	mov    eax,edx
c000b4aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b4bd:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b4cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b4cf:	90                   	nop
c000b4d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4d5:	75 85                	jne    c000b45c <tcp_kill_prio+0x2c>
c000b4d7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b4dc:	74 12                	je     c000b4f0 <tcp_kill_prio+0xc0>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b4e5:	e8 2a ff ff ff       	call   c000b414 <tcp_abort>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	8d 76 00             	lea    esi,[esi+0x0]
c000b4f0:	90                   	nop
c000b4f1:	83 c4 2c             	add    esp,0x2c
c000b4f4:	c3                   	ret    
c000b4f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b4f8 <tcp_kill_timewait>:
c000b4f8:	83 ec 1c             	sub    esp,0x1c
c000b4fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b50b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b514:	eb 42                	jmp    c000b558 <tcp_kill_timewait+0x60>
c000b516:	66 90                	xchg   ax,ax
c000b518:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b51e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b522:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b525:	29 c2                	sub    edx,eax
c000b527:	89 d0                	mov    eax,edx
c000b529:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b52d:	77 1d                	ja     c000b54c <tcp_kill_timewait+0x54>
c000b52f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b539:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b53c:	29 c2                	sub    edx,eax
c000b53e:	89 d0                	mov    eax,edx
c000b540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b548:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b54c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b550:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b557:	90                   	nop
c000b558:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b55d:	75 b9                	jne    c000b518 <tcp_kill_timewait+0x20>
c000b55f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b564:	74 12                	je     c000b578 <tcp_kill_timewait+0x80>
c000b566:	83 ec 0c             	sub    esp,0xc
c000b569:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56d:	e8 a2 fe ff ff       	call   c000b414 <tcp_abort>
c000b572:	83 c4 10             	add    esp,0x10
c000b575:	8d 76 00             	lea    esi,[esi+0x0]
c000b578:	90                   	nop
c000b579:	83 c4 1c             	add    esp,0x1c
c000b57c:	c3                   	ret    
c000b57d:	8d 76 00             	lea    esi,[esi+0x0]

c000b580 <tcp_next_iss>:
c000b580:	8b 15 1c 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e1c
c000b586:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b58b:	01 d0                	add    eax,edx
c000b58d:	a3 1c 3e 03 c0       	mov    ds:0xc0033e1c,eax
c000b592:	a1 1c 3e 03 c0       	mov    eax,ds:0xc0033e1c
c000b597:	c3                   	ret    

c000b598 <tcp_alloc>:
c000b598:	83 ec 2c             	sub    esp,0x2c
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b5a3:	83 ec 0c             	sub    esp,0xc
c000b5a6:	6a 02                	push   0x2
c000b5a8:	e8 5f c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5b9:	75 6d                	jne    c000b628 <tcp_alloc+0x90>
c000b5bb:	e8 38 ff ff ff       	call   c000b4f8 <tcp_kill_timewait>
c000b5c0:	83 ec 0c             	sub    esp,0xc
c000b5c3:	6a 02                	push   0x2
c000b5c5:	e8 42 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5d1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5d6:	75 38                	jne    c000b610 <tcp_alloc+0x78>
c000b5d8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b5dd:	83 ec 0c             	sub    esp,0xc
c000b5e0:	50                   	push   eax
c000b5e1:	e8 4a fe ff ff       	call   c000b430 <tcp_kill_prio>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	83 ec 0c             	sub    esp,0xc
c000b5ec:	6a 02                	push   0x2
c000b5ee:	e8 19 c5 ff ff       	call   c0007b0c <memp_malloc>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5fa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b5ff:	74 0f                	je     c000b610 <tcp_alloc+0x78>
c000b601:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b607:	83 e8 01             	sub    eax,0x1
c000b60a:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b610:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b615:	74 11                	je     c000b628 <tcp_alloc+0x90>
c000b617:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b61d:	83 e8 01             	sub    eax,0x1
c000b620:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b626:	66 90                	xchg   ax,ax
c000b628:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b62d:	0f 84 09 01 00 00    	je     c000b73c <tcp_alloc+0x1a4>
c000b633:	83 ec 04             	sub    esp,0x4
c000b636:	68 a8 00 00 00       	push   0xa8
c000b63b:	6a 00                	push   0x0
c000b63d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b641:	e8 aa 4e ff ff       	call   c00004f0 <memset>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b64d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b651:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b654:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b658:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b65e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b662:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b66c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b676:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b67c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b680:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b688:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b68c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b690:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b69a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a4:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b6aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6ae:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b6b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b8:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b6be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6c2:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6c8:	e8 b3 fe ff ff       	call   c000b580 <tcp_next_iss>
c000b6cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b6d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6d9:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b6dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6e4:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6ef:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b6fa:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6fd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b707:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b70a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b70e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b712:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b716:	c7 80 8c 00 00 00 1c b0 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000b01c
c000b720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b724:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b72e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b732:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b739:	8d 76 00             	lea    esi,[esi+0x0]
c000b73c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b740:	83 c4 2c             	add    esp,0x2c
c000b743:	c3                   	ret    

c000b744 <tcp_new>:
c000b744:	83 ec 0c             	sub    esp,0xc
c000b747:	83 ec 0c             	sub    esp,0xc
c000b74a:	6a 40                	push   0x40
c000b74c:	e8 47 fe ff ff       	call   c000b598 <tcp_alloc>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	83 c4 0c             	add    esp,0xc
c000b757:	c3                   	ret    

c000b758 <tcp_eff_send_mss>:
c000b758:	53                   	push   ebx
c000b759:	83 ec 28             	sub    esp,0x28
c000b75c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b760:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b76c:	e8 2b 80 00 00       	call   c001379c <ip_route>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b778:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b77d:	74 3d                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b77f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b786:	0f b7 c0             	movzx  eax,ax
c000b789:	85 c0                	test   eax,eax
c000b78b:	74 2f                	je     c000b7bc <tcp_eff_send_mss+0x64>
c000b78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b791:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b794:	83 e8 28             	sub    eax,0x28
c000b797:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b79c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7a0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b7a5:	0f b7 d8             	movzx  ebx,ax
c000b7a8:	0f b7 ca             	movzx  ecx,dx
c000b7ab:	39 cb                	cmp    ebx,ecx
c000b7ad:	76 05                	jbe    c000b7b4 <tcp_eff_send_mss+0x5c>
c000b7af:	89 d0                	mov    eax,edx
c000b7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7b4:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7c0:	83 c4 28             	add    esp,0x28
c000b7c3:	5b                   	pop    ebx
c000b7c4:	c3                   	ret    
c000b7c5:	8d 76 00             	lea    esi,[esi+0x0]

c000b7c8 <tcp_connect>:
c000b7c8:	83 ec 2c             	sub    esp,0x2c
c000b7cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b7cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b7d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b7db:	85 c0                	test   eax,eax
c000b7dd:	74 1d                	je     c000b7fc <tcp_connect+0x34>
c000b7df:	83 ec 08             	sub    esp,0x8
c000b7e2:	68 a4 04 03 c0       	push   0xc00304a4
c000b7e7:	68 06 fd 02 c0       	push   0xc002fd06
c000b7ec:	e8 97 45 01 00       	call   c001fd88 <CPrintf>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	b0 f7                	mov    al,0xf7
c000b7f6:	e9 39 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b7fb:	90                   	nop
c000b7fc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b801:	74 25                	je     c000b828 <tcp_connect+0x60>
c000b803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b807:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b80b:	8b 12                	mov    edx,DWORD PTR [edx]
c000b80d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b810:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b818:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b81c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b820:	85 c0                	test   eax,eax
c000b822:	74 18                	je     c000b83c <tcp_connect+0x74>
c000b824:	eb 0a                	jmp    c000b830 <tcp_connect+0x68>
c000b826:	66 90                	xchg   ax,ax
c000b828:	b0 fa                	mov    al,0xfa
c000b82a:	e9 05 02 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b82f:	90                   	nop
c000b830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b834:	8b 00                	mov    eax,DWORD PTR [eax]
c000b836:	85 c0                	test   eax,eax
c000b838:	75 3a                	jne    c000b874 <tcp_connect+0xac>
c000b83a:	66 90                	xchg   ax,ax
c000b83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b840:	83 c0 04             	add    eax,0x4
c000b843:	83 ec 0c             	sub    esp,0xc
c000b846:	50                   	push   eax
c000b847:	e8 50 7f 00 00       	call   c001379c <ip_route>
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b853:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b858:	75 0a                	jne    c000b864 <tcp_connect+0x9c>
c000b85a:	b0 fc                	mov    al,0xfc
c000b85c:	e9 d3 01 00 00       	jmp    c000ba34 <tcp_connect+0x26c>
c000b861:	8d 76 00             	lea    esi,[esi+0x0]
c000b864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b868:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b86f:	89 10                	mov    DWORD PTR [eax],edx
c000b871:	8d 76 00             	lea    esi,[esi+0x0]
c000b874:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b87b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b884:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b887:	0f b7 c0             	movzx  eax,ax
c000b88a:	85 c0                	test   eax,eax
c000b88c:	75 0e                	jne    c000b89c <tcp_connect+0xd4>
c000b88e:	e8 19 e7 ff ff       	call   c0009fac <tcp_new_port>
c000b893:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b897:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b89b:	90                   	nop
c000b89c:	e8 df fc ff ff       	call   c000b580 <tcp_next_iss>
c000b8a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a9:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b8b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b8b8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8bf:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8c6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b8c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8cd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b8d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8d4:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b8d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8db:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b8e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8e5:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8ef:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b8f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8f6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b8f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8fd:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b907:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b90d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b914:	0f b7 c0             	movzx  eax,ax
c000b917:	83 ec 08             	sub    esp,0x8
c000b91a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b91e:	50                   	push   eax
c000b91f:	e8 34 fe ff ff       	call   c000b758 <tcp_eff_send_mss>
c000b924:	83 c4 10             	add    esp,0x10
c000b927:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b92b:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b933:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b93d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b940:	89 c2                	mov    edx,eax
c000b942:	c1 e2 02             	shl    edx,0x2
c000b945:	01 d0                	add    eax,edx
c000b947:	d1 e0                	shl    eax,1
c000b949:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b94d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b951:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b955:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b959:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b95f:	83 ec 08             	sub    esp,0x8
c000b962:	6a 02                	push   0x2
c000b964:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b968:	e8 1b 40 00 00       	call   c000f988 <tcp_enqueue_flags>
c000b96d:	83 c4 10             	add    esp,0x10
c000b970:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b974:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b979:	85 c0                	test   eax,eax
c000b97b:	0f 85 af 00 00 00    	jne    c000ba30 <tcp_connect+0x268>
c000b981:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b985:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b98c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b991:	85 c0                	test   eax,eax
c000b993:	74 6f                	je     c000ba04 <tcp_connect+0x23c>
c000b995:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b99a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b99e:	75 10                	jne    c000b9b0 <tcp_connect+0x1e8>
c000b9a0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9a5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9a8:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b9ad:	eb 49                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9af:	90                   	nop
c000b9b0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b9b5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9ba:	eb 30                	jmp    c000b9ec <tcp_connect+0x224>
c000b9bc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9c4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b9c8:	75 12                	jne    c000b9dc <tcp_connect+0x214>
c000b9ca:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b9d3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b9d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b9d9:	eb 1d                	jmp    c000b9f8 <tcp_connect+0x230>
c000b9db:	90                   	nop
c000b9dc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9e1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9e4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b9f1:	85 c0                	test   eax,eax
c000b9f3:	75 c7                	jne    c000b9bc <tcp_connect+0x1f4>
c000b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b9fc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ba03:	90                   	nop
c000ba04:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000ba0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba0e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ba11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba15:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ba1a:	e8 95 52 00 00       	call   c0010cb4 <tcp_timer_needed>
c000ba1f:	83 ec 0c             	sub    esp,0xc
c000ba22:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ba26:	e8 f9 45 00 00       	call   c0010024 <tcp_output>
c000ba2b:	83 c4 10             	add    esp,0x10
c000ba2e:	66 90                	xchg   ax,ax
c000ba30:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000ba34:	83 c4 2c             	add    esp,0x2c
c000ba37:	c3                   	ret    

c000ba38 <tcp_debug_state_str>:
c000ba38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3c:	8b 04 85 20 06 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf9e0]
c000ba43:	c3                   	ret    

c000ba44 <tcp_timewait_input>:
c000ba44:	53                   	push   ebx
c000ba45:	83 ec 08             	sub    esp,0x8
c000ba48:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba4d:	0f b6 c0             	movzx  eax,al
c000ba50:	83 e0 04             	and    eax,0x4
c000ba53:	74 07                	je     c000ba5c <tcp_timewait_input+0x18>
c000ba55:	b0 00                	mov    al,0x0
c000ba57:	e9 e8 00 00 00       	jmp    c000bb44 <tcp_timewait_input+0x100>
c000ba5c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	83 e0 02             	and    eax,0x2
c000ba67:	0f 84 83 00 00 00    	je     c000baf0 <tcp_timewait_input+0xac>
c000ba6d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ba73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba77:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ba7a:	29 c2                	sub    edx,eax
c000ba7c:	89 d0                	mov    eax,edx
c000ba7e:	0f 88 88 00 00 00    	js     c000bb0c <tcp_timewait_input+0xc8>
c000ba84:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ba8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba8e:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000ba91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba95:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ba98:	0f b7 c0             	movzx  eax,ax
c000ba9b:	01 c8                	add    eax,ecx
c000ba9d:	29 c2                	sub    edx,eax
c000ba9f:	89 d0                	mov    eax,edx
c000baa1:	85 c0                	test   eax,eax
c000baa3:	7f 67                	jg     c000bb0c <tcp_timewait_input+0xc8>
c000baa5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000baaa:	66 8b 00             	mov    ax,WORD PTR [eax]
c000baad:	0f b7 c8             	movzx  ecx,ax
c000bab0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bab5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000bab9:	0f b7 d0             	movzx  edx,ax
c000babc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bac2:	0f b7 d8             	movzx  ebx,ax
c000bac5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baca:	01 c3                	add    ebx,eax
c000bacc:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bad1:	83 ec 08             	sub    esp,0x8
c000bad4:	51                   	push   ecx
c000bad5:	52                   	push   edx
c000bad6:	68 90 68 03 c0       	push   0xc0036890
c000badb:	68 98 68 03 c0       	push   0xc0036898
c000bae0:	53                   	push   ebx
c000bae1:	50                   	push   eax
c000bae2:	e8 c9 49 00 00       	call   c00104b0 <tcp_rst>
c000bae7:	83 c4 20             	add    esp,0x20
c000baea:	b0 00                	mov    al,0x0
c000baec:	eb 56                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000baee:	66 90                	xchg   ax,ax
c000baf0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000baf5:	0f b6 c0             	movzx  eax,al
c000baf8:	83 e0 01             	and    eax,0x1
c000bafb:	74 0f                	je     c000bb0c <tcp_timewait_input+0xc8>
c000bafd:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb07:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000bb0a:	66 90                	xchg   ax,ax
c000bb0c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb12:	0f b7 c0             	movzx  eax,ax
c000bb15:	85 c0                	test   eax,eax
c000bb17:	74 27                	je     c000bb40 <tcp_timewait_input+0xfc>
c000bb19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb1d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bb20:	83 c8 02             	or     eax,0x2
c000bb23:	88 c2                	mov    dl,al
c000bb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb29:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bb2c:	83 ec 0c             	sub    esp,0xc
c000bb2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb33:	e8 ec 44 00 00       	call   c0010024 <tcp_output>
c000bb38:	83 c4 10             	add    esp,0x10
c000bb3b:	eb 07                	jmp    c000bb44 <tcp_timewait_input+0x100>
c000bb3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bb40:	b0 00                	mov    al,0x0
c000bb42:	66 90                	xchg   ax,ax
c000bb44:	83 c4 08             	add    esp,0x8
c000bb47:	5b                   	pop    ebx
c000bb48:	c3                   	ret    
c000bb49:	8d 76 00             	lea    esi,[esi+0x0]

c000bb4c <tcp_oos_insert_segment>:
c000bb4c:	53                   	push   ebx
c000bb4d:	83 ec 18             	sub    esp,0x18
c000bb50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb57:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb5b:	0f b7 c0             	movzx  eax,ax
c000bb5e:	83 ec 0c             	sub    esp,0xc
c000bb61:	50                   	push   eax
c000bb62:	e8 81 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bb67:	83 c4 10             	add    esp,0x10
c000bb6a:	0f b7 c0             	movzx  eax,ax
c000bb6d:	83 e0 01             	and    eax,0x1
c000bb70:	0f 84 8e 00 00 00    	je     c000bc04 <tcp_oos_insert_segment+0xb8>
c000bb76:	83 ec 0c             	sub    esp,0xc
c000bb79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bb7d:	e8 2e e6 ff ff       	call   c000a1b0 <tcp_segs_free>
c000bb82:	83 c4 10             	add    esp,0x10
c000bb85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000bb8d:	e9 16 01 00 00       	jmp    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bb92:	66 90                	xchg   ax,ax
c000bb94:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb9b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bb9f:	0f b7 c0             	movzx  eax,ax
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	50                   	push   eax
c000bba6:	e8 3d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbab:	83 c4 10             	add    esp,0x10
c000bbae:	0f b7 c0             	movzx  eax,ax
c000bbb1:	83 e0 01             	and    eax,0x1
c000bbb4:	74 2a                	je     c000bbe0 <tcp_oos_insert_segment+0x94>
c000bbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bbbd:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000bbc1:	83 ec 0c             	sub    esp,0xc
c000bbc4:	6a 01                	push   0x1
c000bbc6:	e8 1d 50 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	89 c1                	mov    ecx,eax
c000bbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000bbd7:	89 d8                	mov    eax,ebx
c000bbd9:	09 c8                	or     eax,ecx
c000bbdb:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000bbdf:	90                   	nop
c000bbe0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbe4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bbec:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbee:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf9:	e8 6e e5 ff ff       	call   c000a16c <tcp_seg_free>
c000bbfe:	83 c4 10             	add    esp,0x10
c000bc01:	8d 76 00             	lea    esi,[esi+0x0]
c000bc04:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc09:	74 35                	je     c000bc40 <tcp_oos_insert_segment+0xf4>
c000bc0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc12:	0f b7 d0             	movzx  edx,ax
c000bc15:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bc1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc24:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bc27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc2b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	01 d0                	add    eax,edx
c000bc33:	29 c1                	sub    ecx,eax
c000bc35:	89 c8                	mov    eax,ecx
c000bc37:	0f 89 57 ff ff ff    	jns    c000bb94 <tcp_oos_insert_segment+0x48>
c000bc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc40:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bc45:	74 61                	je     c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc4b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc4e:	0f b7 d0             	movzx  edx,ax
c000bc51:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc56:	01 c2                	add    edx,eax
c000bc58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc62:	29 c2                	sub    edx,eax
c000bc64:	89 d0                	mov    eax,edx
c000bc66:	85 c0                	test   eax,eax
c000bc68:	7e 3e                	jle    c000bca8 <tcp_oos_insert_segment+0x15c>
c000bc6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc6e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc74:	89 c2                	mov    edx,eax
c000bc76:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bc7b:	89 d3                	mov    ebx,edx
c000bc7d:	29 c3                	sub    ebx,eax
c000bc7f:	89 d8                	mov    eax,ebx
c000bc81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc85:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000bc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bc90:	0f b7 d0             	movzx  edx,ax
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bc9a:	83 ec 08             	sub    esp,0x8
c000bc9d:	52                   	push   edx
c000bc9e:	50                   	push   eax
c000bc9f:	e8 20 ce ff ff       	call   c0008ac4 <pbuf_realloc>
c000bca4:	83 c4 10             	add    esp,0x10
c000bca7:	90                   	nop
c000bca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	90                   	nop
c000bcb3:	83 c4 18             	add    esp,0x18
c000bcb6:	5b                   	pop    ebx
c000bcb7:	c3                   	ret    

c000bcb8 <tcp_receive>:
c000bcb8:	57                   	push   edi
c000bcb9:	56                   	push   esi
c000bcba:	53                   	push   ebx
c000bcbb:	83 ec 30             	sub    esp,0x30
c000bcbe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcc6:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bccb:	0f b6 c0             	movzx  eax,al
c000bcce:	83 e0 10             	and    eax,0x10
c000bcd1:	0f 84 e5 07 00 00    	je     c000c4bc <tcp_receive+0x804>
c000bcd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdb:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bcde:	0f b7 d0             	movzx  edx,ax
c000bce1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce5:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bce8:	01 d0                	add    eax,edx
c000bcea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bcee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf2:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bcf5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bcfa:	29 c2                	sub    edx,eax
c000bcfc:	89 d0                	mov    eax,edx
c000bcfe:	78 50                	js     c000bd50 <tcp_receive+0x98>
c000bd00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd04:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bd07:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bd0c:	39 c2                	cmp    edx,eax
c000bd0e:	75 14                	jne    c000bd24 <tcp_receive+0x6c>
c000bd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd14:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd17:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd1c:	29 c2                	sub    edx,eax
c000bd1e:	89 d0                	mov    eax,edx
c000bd20:	78 2e                	js     c000bd50 <tcp_receive+0x98>
c000bd22:	66 90                	xchg   ax,ax
c000bd24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd28:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bd2b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd30:	39 c2                	cmp    edx,eax
c000bd32:	75 74                	jne    c000bda8 <tcp_receive+0xf0>
c000bd34:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd39:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bd3d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd41:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd44:	0f b7 d2             	movzx  edx,dx
c000bd47:	0f b7 c0             	movzx  eax,ax
c000bd4a:	39 c2                	cmp    edx,eax
c000bd4c:	76 5a                	jbe    c000bda8 <tcp_receive+0xf0>
c000bd4e:	66 90                	xchg   ax,ax
c000bd50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bd55:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bd59:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd5d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bd61:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bd6e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd78:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bd7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7f:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bd82:	0f b7 c0             	movzx  eax,ax
c000bd85:	85 c0                	test   eax,eax
c000bd87:	74 1f                	je     c000bda8 <tcp_receive+0xf0>
c000bd89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd8d:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bd93:	0f b6 c0             	movzx  eax,al
c000bd96:	85 c0                	test   eax,eax
c000bd98:	74 0e                	je     c000bda8 <tcp_receive+0xf0>
c000bd9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9e:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bda5:	8d 76 00             	lea    esi,[esi+0x0]
c000bda8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bdae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb2:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bdb5:	29 c2                	sub    edx,eax
c000bdb7:	89 d0                	mov    eax,edx
c000bdb9:	85 c0                	test   eax,eax
c000bdbb:	0f 8f ff 00 00 00    	jg     c000bec0 <tcp_receive+0x208>
c000bdc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc5:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bdcb:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bdd1:	0f b7 c0             	movzx  eax,ax
c000bdd4:	85 c0                	test   eax,eax
c000bdd6:	0f 85 cc 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bde3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde7:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bdea:	0f b7 c0             	movzx  eax,ax
c000bded:	01 d0                	add    eax,edx
c000bdef:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bdf3:	0f 85 af 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000bdf9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdfd:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000be01:	98                   	cwde   
c000be02:	85 c0                	test   eax,eax
c000be04:	0f 88 9e 00 00 00    	js     c000bea8 <tcp_receive+0x1f0>
c000be0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be0e:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000be11:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be16:	39 c2                	cmp    edx,eax
c000be18:	0f 85 8a 00 00 00    	jne    c000bea8 <tcp_receive+0x1f0>
c000be1e:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000be26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be2a:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be2d:	83 c0 01             	add    eax,0x1
c000be30:	88 c2                	mov    dl,al
c000be32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be36:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000be39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3d:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be40:	0f b6 c0             	movzx  eax,al
c000be43:	83 f8 03             	cmp    eax,0x3
c000be46:	76 40                	jbe    c000be88 <tcp_receive+0x1d0>
c000be48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be57:	01 d0                	add    eax,edx
c000be59:	89 c2                	mov    edx,eax
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be63:	0f b7 d2             	movzx  edx,dx
c000be66:	0f b7 c0             	movzx  eax,ax
c000be69:	39 c2                	cmp    edx,eax
c000be6b:	76 3b                	jbe    c000bea8 <tcp_receive+0x1f0>
c000be6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be71:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be7c:	01 d0                	add    eax,edx
c000be7e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be82:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be86:	eb 20                	jmp    c000bea8 <tcp_receive+0x1f0>
c000be88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000be8f:	0f b6 c0             	movzx  eax,al
c000be92:	83 f8 03             	cmp    eax,0x3
c000be95:	75 11                	jne    c000bea8 <tcp_receive+0x1f0>
c000be97:	83 ec 0c             	sub    esp,0xc
c000be9a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be9e:	e8 d9 48 00 00       	call   c001077c <tcp_rexmit_fast>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bead:	0f 85 99 04 00 00    	jne    c000c34c <tcp_receive+0x694>
c000beb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb7:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bebb:	e9 8c 04 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000bec0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bec6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beca:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000becd:	29 c2                	sub    edx,eax
c000becf:	89 d0                	mov    eax,edx
c000bed1:	83 e8 01             	sub    eax,0x1
c000bed4:	0f 88 4a 03 00 00    	js     c000c224 <tcp_receive+0x56c>
c000beda:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bee4:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bee7:	29 c2                	sub    edx,eax
c000bee9:	89 d0                	mov    eax,edx
c000beeb:	85 c0                	test   eax,eax
c000beed:	0f 8f 31 03 00 00    	jg     c000c224 <tcp_receive+0x56c>
c000bef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000befa:	0f b6 c0             	movzx  eax,al
c000befd:	83 e0 04             	and    eax,0x4
c000bf00:	74 22                	je     c000bf24 <tcp_receive+0x26c>
c000bf02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bf09:	83 e0 fb             	and    eax,0xfffffffb
c000bf0c:	88 c2                	mov    dl,al
c000bf0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf12:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bf15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf19:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bf1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf20:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bf33:	98                   	cwde   
c000bf34:	c1 f8 03             	sar    eax,0x3
c000bf37:	89 c2                	mov    edx,eax
c000bf39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bf41:	01 d0                	add    eax,edx
c000bf43:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf47:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bf4b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf50:	89 c2                	mov    edx,eax
c000bf52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf56:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bf59:	89 d7                	mov    edi,edx
c000bf5b:	29 c7                	sub    edi,eax
c000bf5d:	89 f8                	mov    eax,edi
c000bf5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf63:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bf67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf6b:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bf6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf73:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf76:	01 d0                	add    eax,edx
c000bf78:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bf7c:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bf80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf84:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bf88:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bf8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf92:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bf95:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bf9c:	83 f8 03             	cmp    eax,0x3
c000bf9f:	0f 86 db 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfa5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb1:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bfb4:	0f b7 d2             	movzx  edx,dx
c000bfb7:	0f b7 c0             	movzx  eax,ax
c000bfba:	39 c2                	cmp    edx,eax
c000bfbc:	73 4a                	jae    c000c008 <tcp_receive+0x350>
c000bfbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc2:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfcd:	01 d0                	add    eax,edx
c000bfcf:	89 c2                	mov    edx,eax
c000bfd1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd5:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bfd9:	0f b7 d2             	movzx  edx,dx
c000bfdc:	0f b7 c0             	movzx  eax,ax
c000bfdf:	39 c2                	cmp    edx,eax
c000bfe1:	0f 86 99 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bff6:	01 d0                	add    eax,edx
c000bff8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bffc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c000:	e9 7b 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c005:	8d 76 00             	lea    esi,[esi+0x0]
c000c008:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c00c:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000c010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c017:	0f b7 d0             	movzx  edx,ax
c000c01a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c021:	0f b7 c0             	movzx  eax,ax
c000c024:	0f af d0             	imul   edx,eax
c000c027:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c02f:	0f b7 d8             	movzx  ebx,ax
c000c032:	89 d0                	mov    eax,edx
c000c034:	89 c2                	mov    edx,eax
c000c036:	c1 fa 1f             	sar    edx,0x1f
c000c039:	f7 fb                	idiv   ebx
c000c03b:	01 c8                	add    eax,ecx
c000c03d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000c042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c046:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000c04a:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000c04f:	0f b7 c0             	movzx  eax,ax
c000c052:	39 c2                	cmp    edx,eax
c000c054:	0f 86 26 01 00 00    	jbe    c000c180 <tcp_receive+0x4c8>
c000c05a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c05e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000c063:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000c067:	e9 14 01 00 00       	jmp    c000c180 <tcp_receive+0x4c8>
c000c06c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c070:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c073:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c077:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c07b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c07e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c080:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c084:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000c087:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c08b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c08e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c095:	83 ec 0c             	sub    esp,0xc
c000c098:	50                   	push   eax
c000c099:	e8 2a cc ff ff       	call   c0008cc8 <pbuf_clen>
c000c09e:	83 c4 10             	add    esp,0x10
c000c0a1:	0f b6 c0             	movzx  eax,al
c000c0a4:	0f b7 d3             	movzx  edx,bx
c000c0a7:	0f b7 c0             	movzx  eax,ax
c000c0aa:	39 c2                	cmp    edx,eax
c000c0ac:	73 16                	jae    c000c0c4 <tcp_receive+0x40c>
c000c0ae:	83 ec 08             	sub    esp,0x8
c000c0b1:	68 4c 06 03 c0       	push   0xc003064c
c000c0b6:	68 06 fd 02 c0       	push   0xc002fd06
c000c0bb:	e8 c8 3c 01 00       	call   c001fd88 <CPrintf>
c000c0c0:	83 c4 10             	add    esp,0x10
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0cb:	0f b7 c0             	movzx  eax,ax
c000c0ce:	85 c0                	test   eax,eax
c000c0d0:	74 36                	je     c000c108 <tcp_receive+0x450>
c000c0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0d9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0dd:	0f b7 c0             	movzx  eax,ax
c000c0e0:	83 ec 0c             	sub    esp,0xc
c000c0e3:	50                   	push   eax
c000c0e4:	e8 ff 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c0e9:	83 c4 10             	add    esp,0x10
c000c0ec:	0f b7 c0             	movzx  eax,ax
c000c0ef:	83 e0 01             	and    eax,0x1
c000c0f2:	74 14                	je     c000c108 <tcp_receive+0x450>
c000c0f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0fb:	83 e8 01             	sub    eax,0x1
c000c0fe:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c102:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c106:	66 90                	xchg   ax,ax
c000c108:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	50                   	push   eax
c000c113:	e8 b0 cb ff ff       	call   c0008cc8 <pbuf_clen>
c000c118:	83 c4 10             	add    esp,0x10
c000c11b:	88 c1                	mov    cl,al
c000c11d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c121:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c124:	0f b6 c1             	movzx  eax,cl
c000c127:	89 d7                	mov    edi,edx
c000c129:	29 c7                	sub    edi,eax
c000c12b:	89 f8                	mov    eax,edi
c000c12d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c131:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c135:	83 ec 0c             	sub    esp,0xc
c000c138:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c13c:	e8 2b e0 ff ff       	call   c000a16c <tcp_seg_free>
c000c141:	83 c4 10             	add    esp,0x10
c000c144:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c148:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c14b:	0f b7 c0             	movzx  eax,ax
c000c14e:	85 c0                	test   eax,eax
c000c150:	74 2e                	je     c000c180 <tcp_receive+0x4c8>
c000c152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c156:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c159:	85 c0                	test   eax,eax
c000c15b:	75 23                	jne    c000c180 <tcp_receive+0x4c8>
c000c15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c161:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c164:	85 c0                	test   eax,eax
c000c166:	75 18                	jne    c000c180 <tcp_receive+0x4c8>
c000c168:	83 ec 08             	sub    esp,0x8
c000c16b:	68 74 06 03 c0       	push   0xc0030674
c000c170:	68 06 fd 02 c0       	push   0xc002fd06
c000c175:	e8 0e 3c 01 00       	call   c001fd88 <CPrintf>
c000c17a:	83 c4 10             	add    esp,0x10
c000c17d:	8d 76 00             	lea    esi,[esi+0x0]
c000c180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c184:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c187:	85 c0                	test   eax,eax
c000c189:	74 69                	je     c000c1f4 <tcp_receive+0x53c>
c000c18b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c192:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c198:	83 ec 0c             	sub    esp,0xc
c000c19b:	50                   	push   eax
c000c19c:	e8 6b 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c1a1:	83 c4 10             	add    esp,0x10
c000c1a4:	89 c3                	mov    ebx,eax
c000c1a6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1aa:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c1b0:	0f b7 f0             	movzx  esi,ax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1bd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c1c1:	0f b7 c0             	movzx  eax,ax
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	50                   	push   eax
c000c1c8:	e8 1b 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	0f b7 c0             	movzx  eax,ax
c000c1d3:	83 e0 03             	and    eax,0x3
c000c1d6:	0f 95 c0             	setne  al
c000c1d9:	0f b6 c0             	movzx  eax,al
c000c1dc:	01 f0                	add    eax,esi
c000c1de:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c1e1:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c1e6:	29 c2                	sub    edx,eax
c000c1e8:	89 d0                	mov    eax,edx
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	0f 8e 7a fe ff ff    	jle    c000c06c <tcp_receive+0x3b4>
c000c1f2:	66 90                	xchg   ax,ax
c000c1f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1f8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1fb:	85 c0                	test   eax,eax
c000c1fd:	75 0d                	jne    c000c20c <tcp_receive+0x554>
c000c1ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c203:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c209:	eb 0d                	jmp    c000c218 <tcp_receive+0x560>
c000c20b:	90                   	nop
c000c20c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c210:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c216:	66 90                	xchg   ax,ax
c000c218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c21c:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c220:	eb 0e                	jmp    c000c230 <tcp_receive+0x578>
c000c222:	66 90                	xchg   ax,ax
c000c224:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c228:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c22e:	66 90                	xchg   ax,ax
c000c230:	e9 17 01 00 00       	jmp    c000c34c <tcp_receive+0x694>
c000c235:	8d 76 00             	lea    esi,[esi+0x0]
c000c238:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c23c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c23f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c24a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c24c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c250:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c253:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c257:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c25a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c261:	83 ec 0c             	sub    esp,0xc
c000c264:	50                   	push   eax
c000c265:	e8 5e ca ff ff       	call   c0008cc8 <pbuf_clen>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	0f b6 c0             	movzx  eax,al
c000c270:	0f b7 d3             	movzx  edx,bx
c000c273:	0f b7 c0             	movzx  eax,ax
c000c276:	39 c2                	cmp    edx,eax
c000c278:	73 16                	jae    c000c290 <tcp_receive+0x5d8>
c000c27a:	83 ec 08             	sub    esp,0x8
c000c27d:	68 4c 06 03 c0       	push   0xc003064c
c000c282:	68 06 fd 02 c0       	push   0xc002fd06
c000c287:	e8 fc 3a 01 00       	call   c001fd88 <CPrintf>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	90                   	nop
c000c290:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c294:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c297:	0f b7 c0             	movzx  eax,ax
c000c29a:	85 c0                	test   eax,eax
c000c29c:	74 36                	je     c000c2d4 <tcp_receive+0x61c>
c000c29e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2a5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c2a9:	0f b7 c0             	movzx  eax,ax
c000c2ac:	83 ec 0c             	sub    esp,0xc
c000c2af:	50                   	push   eax
c000c2b0:	e8 33 49 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	0f b7 c0             	movzx  eax,ax
c000c2bb:	83 e0 01             	and    eax,0x1
c000c2be:	74 14                	je     c000c2d4 <tcp_receive+0x61c>
c000c2c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c2c7:	83 e8 01             	sub    eax,0x1
c000c2ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2ce:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c2d2:	66 90                	xchg   ax,ax
c000c2d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	50                   	push   eax
c000c2df:	e8 e4 c9 ff ff       	call   c0008cc8 <pbuf_clen>
c000c2e4:	83 c4 10             	add    esp,0x10
c000c2e7:	88 c1                	mov    cl,al
c000c2e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ed:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c2f0:	0f b6 c1             	movzx  eax,cl
c000c2f3:	89 d6                	mov    esi,edx
c000c2f5:	29 c6                	sub    esi,eax
c000c2f7:	89 f0                	mov    eax,esi
c000c2f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2fd:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c301:	83 ec 0c             	sub    esp,0xc
c000c304:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c308:	e8 5f de ff ff       	call   c000a16c <tcp_seg_free>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c314:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c317:	0f b7 c0             	movzx  eax,ax
c000c31a:	85 c0                	test   eax,eax
c000c31c:	74 2e                	je     c000c34c <tcp_receive+0x694>
c000c31e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c322:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c325:	85 c0                	test   eax,eax
c000c327:	75 23                	jne    c000c34c <tcp_receive+0x694>
c000c329:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c32d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c330:	85 c0                	test   eax,eax
c000c332:	75 18                	jne    c000c34c <tcp_receive+0x694>
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	68 74 06 03 c0       	push   0xc0030674
c000c33c:	68 06 fd 02 c0       	push   0xc002fd06
c000c341:	e8 42 3a 01 00       	call   c001fd88 <CPrintf>
c000c346:	83 c4 10             	add    esp,0x10
c000c349:	8d 76 00             	lea    esi,[esi+0x0]
c000c34c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c350:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c353:	85 c0                	test   eax,eax
c000c355:	74 7d                	je     c000c3d4 <tcp_receive+0x71c>
c000c357:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c35d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c361:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	50                   	push   eax
c000c36e:	e8 99 48 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c373:	83 c4 10             	add    esp,0x10
c000c376:	89 c6                	mov    esi,eax
c000c378:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c37c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c37f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c382:	0f b7 f8             	movzx  edi,ax
c000c385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c389:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c393:	0f b7 c0             	movzx  eax,ax
c000c396:	83 ec 0c             	sub    esp,0xc
c000c399:	50                   	push   eax
c000c39a:	e8 49 48 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	0f b7 c0             	movzx  eax,ax
c000c3a5:	83 e0 03             	and    eax,0x3
c000c3a8:	0f 95 c0             	setne  al
c000c3ab:	0f b6 c0             	movzx  eax,al
c000c3ae:	01 f8                	add    eax,edi
c000c3b0:	01 f0                	add    eax,esi
c000c3b2:	29 c3                	sub    ebx,eax
c000c3b4:	89 d8                	mov    eax,ebx
c000c3b6:	78 1c                	js     c000c3d4 <tcp_receive+0x71c>
c000c3b8:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c3be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3c2:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c3c5:	29 c2                	sub    edx,eax
c000c3c7:	89 d0                	mov    eax,edx
c000c3c9:	85 c0                	test   eax,eax
c000c3cb:	0f 8e 67 fe ff ff    	jle    c000c238 <tcp_receive+0x580>
c000c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c3db:	85 c0                	test   eax,eax
c000c3dd:	0f 84 d9 00 00 00    	je     c000c4bc <tcp_receive+0x804>
c000c3e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3e7:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c3ea:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c3ef:	29 c2                	sub    edx,eax
c000c3f1:	89 d0                	mov    eax,edx
c000c3f3:	0f 89 c3 00 00 00    	jns    c000c4bc <tcp_receive+0x804>
c000c3f9:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c3fe:	89 c2                	mov    edx,eax
c000c400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c404:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c407:	89 d7                	mov    edi,edx
c000c409:	29 c7                	sub    edi,eax
c000c40b:	89 f8                	mov    eax,edi
c000c40d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c412:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c417:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c41b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c41e:	98                   	cwde   
c000c41f:	c1 f8 03             	sar    eax,0x3
c000c422:	89 d6                	mov    esi,edx
c000c424:	29 c6                	sub    esi,eax
c000c426:	89 f0                	mov    eax,esi
c000c428:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c42d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c431:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c434:	89 c2                	mov    edx,eax
c000c436:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c43b:	01 d0                	add    eax,edx
c000c43d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c441:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c445:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c44a:	85 c0                	test   eax,eax
c000c44c:	79 0e                	jns    c000c45c <tcp_receive+0x7a4>
c000c44e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c453:	f7 d8                	neg    eax
c000c455:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c45a:	66 90                	xchg   ax,ax
c000c45c:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c461:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c465:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c469:	98                   	cwde   
c000c46a:	c1 f8 02             	sar    eax,0x2
c000c46d:	89 d7                	mov    edi,edx
c000c46f:	29 c7                	sub    edi,eax
c000c471:	89 f8                	mov    eax,edi
c000c473:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c478:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c480:	89 c2                	mov    edx,eax
c000c482:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c487:	01 d0                	add    eax,edx
c000c489:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c48d:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c491:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c495:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c498:	98                   	cwde   
c000c499:	c1 f8 03             	sar    eax,0x3
c000c49c:	89 c2                	mov    edx,eax
c000c49e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a2:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c4a6:	01 d0                	add    eax,edx
c000c4a8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c4ac:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c4b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4b4:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c4bb:	90                   	nop
c000c4bc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4c2:	0f b7 c0             	movzx  eax,ax
c000c4c5:	85 c0                	test   eax,eax
c000c4c7:	0f 84 2f 0e 00 00    	je     c000d2fc <tcp_receive+0x1644>
c000c4cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4d4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4d9:	29 c2                	sub    edx,eax
c000c4db:	89 d0                	mov    eax,edx
c000c4dd:	83 e8 01             	sub    eax,0x1
c000c4e0:	0f 88 c6 01 00 00    	js     c000c6ac <tcp_receive+0x9f4>
c000c4e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4ea:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4ed:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c4f3:	0f b7 c8             	movzx  ecx,ax
c000c4f6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4fb:	01 c8                	add    eax,ecx
c000c4fd:	29 c2                	sub    edx,eax
c000c4ff:	89 d0                	mov    eax,edx
c000c501:	83 c0 01             	add    eax,0x1
c000c504:	85 c0                	test   eax,eax
c000c506:	0f 8f a0 01 00 00    	jg     c000c6ac <tcp_receive+0x9f4>
c000c50c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c510:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c513:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c518:	29 c2                	sub    edx,eax
c000c51a:	89 d0                	mov    eax,edx
c000c51c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c520:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c525:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c529:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c52e:	85 c0                	test   eax,eax
c000c530:	75 16                	jne    c000c548 <tcp_receive+0x890>
c000c532:	83 ec 08             	sub    esp,0x8
c000c535:	68 71 08 03 c0       	push   0xc0030871
c000c53a:	68 06 fd 02 c0       	push   0xc002fd06
c000c53f:	e8 44 38 01 00       	call   c001fd88 <CPrintf>
c000c544:	83 c4 10             	add    esp,0x10
c000c547:	90                   	nop
c000c548:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c550:	7e 16                	jle    c000c568 <tcp_receive+0x8b0>
c000c552:	83 ec 08             	sub    esp,0x8
c000c555:	68 81 08 03 c0       	push   0xc0030881
c000c55a:	68 06 fd 02 c0       	push   0xc002fd06
c000c55f:	e8 24 38 01 00       	call   c001fd88 <CPrintf>
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	90                   	nop
c000c568:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c56d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c571:	0f b7 c0             	movzx  eax,ax
c000c574:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c578:	0f 8e b6 00 00 00    	jle    c000c634 <tcp_receive+0x97c>
c000c57e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c583:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c586:	0f b7 c0             	movzx  eax,ax
c000c589:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c58d:	7e 15                	jle    c000c5a4 <tcp_receive+0x8ec>
c000c58f:	83 ec 08             	sub    esp,0x8
c000c592:	68 90 08 03 c0       	push   0xc0030890
c000c597:	68 06 fd 02 c0       	push   0xc002fd06
c000c59c:	e8 e7 37 01 00       	call   c001fd88 <CPrintf>
c000c5a1:	83 c4 10             	add    esp,0x10
c000c5a4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c5ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5b0:	29 d0                	sub    eax,edx
c000c5b2:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c5b7:	eb 33                	jmp    c000c5ec <tcp_receive+0x934>
c000c5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000c5bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5c0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5c4:	0f b7 c0             	movzx  eax,ax
c000c5c7:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c5cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5d3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c5d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5db:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c5e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c5e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c5eb:	90                   	nop
c000c5ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c5f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c5f4:	0f b7 c0             	movzx  eax,ax
c000c5f7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c5fb:	7f bf                	jg     c000c5bc <tcp_receive+0x904>
c000c5fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c601:	f7 d8                	neg    eax
c000c603:	98                   	cwde   
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	50                   	push   eax
c000c608:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c60c:	e8 47 bd ff ff       	call   c0008358 <pbuf_header>
c000c611:	83 c4 10             	add    esp,0x10
c000c614:	0f b6 c0             	movzx  eax,al
c000c617:	85 c0                	test   eax,eax
c000c619:	74 51                	je     c000c66c <tcp_receive+0x9b4>
c000c61b:	83 ec 08             	sub    esp,0x8
c000c61e:	68 a0 08 03 c0       	push   0xc00308a0
c000c623:	68 06 fd 02 c0       	push   0xc002fd06
c000c628:	e8 5b 37 01 00       	call   c001fd88 <CPrintf>
c000c62d:	83 c4 10             	add    esp,0x10
c000c630:	eb 3a                	jmp    c000c66c <tcp_receive+0x9b4>
c000c632:	66 90                	xchg   ax,ax
c000c634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c638:	f7 d8                	neg    eax
c000c63a:	0f bf d0             	movsx  edx,ax
c000c63d:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c642:	83 ec 08             	sub    esp,0x8
c000c645:	52                   	push   edx
c000c646:	50                   	push   eax
c000c647:	e8 0c bd ff ff       	call   c0008358 <pbuf_header>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	0f b6 c0             	movzx  eax,al
c000c652:	85 c0                	test   eax,eax
c000c654:	74 16                	je     c000c66c <tcp_receive+0x9b4>
c000c656:	83 ec 08             	sub    esp,0x8
c000c659:	68 a0 08 03 c0       	push   0xc00308a0
c000c65e:	68 06 fd 02 c0       	push   0xc002fd06
c000c663:	e8 20 37 01 00       	call   c001fd88 <CPrintf>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	90                   	nop
c000c66c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c671:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c677:	89 d1                	mov    ecx,edx
c000c679:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c67d:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c680:	89 ce                	mov    esi,ecx
c000c682:	29 d6                	sub    esi,edx
c000c684:	89 f2                	mov    edx,esi
c000c686:	01 d0                	add    eax,edx
c000c688:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c68e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c692:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c695:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c69a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c69f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c6a8:	eb 2a                	jmp    c000c6d4 <tcp_receive+0xa1c>
c000c6aa:	66 90                	xchg   ax,ax
c000c6ac:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6b9:	29 c2                	sub    edx,eax
c000c6bb:	89 d0                	mov    eax,edx
c000c6bd:	79 15                	jns    c000c6d4 <tcp_receive+0xa1c>
c000c6bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6c3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c6c6:	83 c8 02             	or     eax,0x2
c000c6c9:	88 c2                	mov    dl,al
c000c6cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c6d2:	66 90                	xchg   ax,ax
c000c6d4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6da:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6de:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c6e1:	29 c2                	sub    edx,eax
c000c6e3:	89 d0                	mov    eax,edx
c000c6e5:	0f 88 fd 0b 00 00    	js     c000d2e8 <tcp_receive+0x1630>
c000c6eb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c6f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c6f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c6ff:	0f b7 c0             	movzx  eax,ax
c000c702:	01 c8                	add    eax,ecx
c000c704:	29 c2                	sub    edx,eax
c000c706:	89 d0                	mov    eax,edx
c000c708:	83 c0 01             	add    eax,0x1
c000c70b:	85 c0                	test   eax,eax
c000c70d:	0f 8f d5 0b 00 00    	jg     c000d2e8 <tcp_receive+0x1630>
c000c713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c717:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c71a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c71f:	39 c2                	cmp    edx,eax
c000c721:	0f 85 1d 07 00 00    	jne    c000ce44 <tcp_receive+0x118c>
c000c727:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c72d:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c732:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c736:	0f b7 c0             	movzx  eax,ax
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 a6 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	0f b7 c0             	movzx  eax,ax
c000c748:	83 e0 03             	and    eax,0x3
c000c74b:	0f 95 c0             	setne  al
c000c74e:	0f b6 c0             	movzx  eax,al
c000c751:	01 d8                	add    eax,ebx
c000c753:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c759:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c75d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c760:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c766:	0f b7 d2             	movzx  edx,dx
c000c769:	0f b7 c0             	movzx  eax,ax
c000c76c:	39 c2                	cmp    edx,eax
c000c76e:	0f 83 2c 01 00 00    	jae    c000c8a0 <tcp_receive+0xbe8>
c000c774:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c779:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77d:	0f b7 c0             	movzx  eax,ax
c000c780:	83 ec 0c             	sub    esp,0xc
c000c783:	50                   	push   eax
c000c784:	e8 5f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c789:	83 c4 10             	add    esp,0x10
c000c78c:	0f b7 c0             	movzx  eax,ax
c000c78f:	83 e0 01             	and    eax,0x1
c000c792:	74 44                	je     c000c7d8 <tcp_receive+0xb20>
c000c794:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c799:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c79d:	80 e4 c0             	and    ah,0xc0
c000c7a0:	89 c3                	mov    ebx,eax
c000c7a2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7a7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ab:	0f b7 c0             	movzx  eax,ax
c000c7ae:	83 ec 0c             	sub    esp,0xc
c000c7b1:	50                   	push   eax
c000c7b2:	e8 31 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7b7:	83 c4 10             	add    esp,0x10
c000c7ba:	0f b7 c0             	movzx  eax,ax
c000c7bd:	83 e0 3e             	and    eax,0x3e
c000c7c0:	83 ec 0c             	sub    esp,0xc
c000c7c3:	50                   	push   eax
c000c7c4:	e8 1f 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7c9:	83 c4 10             	add    esp,0x10
c000c7cc:	09 d8                	or     eax,ebx
c000c7ce:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c7d4:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c7d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7dc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c7df:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c7e5:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7ea:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7ee:	0f b7 c0             	movzx  eax,ax
c000c7f1:	83 ec 0c             	sub    esp,0xc
c000c7f4:	50                   	push   eax
c000c7f5:	e8 ee 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	0f b7 c0             	movzx  eax,ax
c000c800:	83 e0 02             	and    eax,0x2
c000c803:	74 0f                	je     c000c814 <tcp_receive+0xb5c>
c000c805:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c80a:	83 e8 01             	sub    eax,0x1
c000c80d:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c813:	90                   	nop
c000c814:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c819:	0f b7 d0             	movzx  edx,ax
c000c81c:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c821:	83 ec 08             	sub    esp,0x8
c000c824:	52                   	push   edx
c000c825:	50                   	push   eax
c000c826:	e8 99 c2 ff ff       	call   c0008ac4 <pbuf_realloc>
c000c82b:	83 c4 10             	add    esp,0x10
c000c82e:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c834:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c839:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c83d:	0f b7 c0             	movzx  eax,ax
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	50                   	push   eax
c000c844:	e8 9f 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	0f b7 c0             	movzx  eax,ax
c000c84f:	83 e0 03             	and    eax,0x3
c000c852:	0f 95 c0             	setne  al
c000c855:	0f b6 c0             	movzx  eax,al
c000c858:	01 d8                	add    eax,ebx
c000c85a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c860:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c866:	0f b7 d0             	movzx  edx,ax
c000c869:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c86e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c871:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c875:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c878:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c87c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c87f:	0f b7 c0             	movzx  eax,ax
c000c882:	01 d0                	add    eax,edx
c000c884:	39 c1                	cmp    ecx,eax
c000c886:	74 18                	je     c000c8a0 <tcp_receive+0xbe8>
c000c888:	83 ec 08             	sub    esp,0x8
c000c88b:	68 94 06 03 c0       	push   0xc0030694
c000c890:	68 06 fd 02 c0       	push   0xc002fd06
c000c895:	e8 ee 34 01 00       	call   c001fd88 <CPrintf>
c000c89a:	83 c4 10             	add    esp,0x10
c000c89d:	8d 76 00             	lea    esi,[esi+0x0]
c000c8a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8a4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8aa:	85 c0                	test   eax,eax
c000c8ac:	0f 84 7e 02 00 00    	je     c000cb30 <tcp_receive+0xe78>
c000c8b2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8bb:	0f b7 c0             	movzx  eax,ax
c000c8be:	83 ec 0c             	sub    esp,0xc
c000c8c1:	50                   	push   eax
c000c8c2:	e8 21 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	0f b7 c0             	movzx  eax,ax
c000c8cd:	83 e0 01             	and    eax,0x1
c000c8d0:	74 4a                	je     c000c91c <tcp_receive+0xc64>
c000c8d2:	eb 34                	jmp    c000c908 <tcp_receive+0xc50>
c000c8d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c8e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8e6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c8ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8ff:	e8 68 d8 ff ff       	call   c000a16c <tcp_seg_free>
c000c904:	83 c4 10             	add    esp,0x10
c000c907:	90                   	nop
c000c908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c90c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c912:	85 c0                	test   eax,eax
c000c914:	75 be                	jne    c000c8d4 <tcp_receive+0xc1c>
c000c916:	e9 15 02 00 00       	jmp    c000cb30 <tcp_receive+0xe78>
c000c91b:	90                   	nop
c000c91c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c920:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c926:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c92a:	e9 bd 00 00 00       	jmp    c000c9ec <tcp_receive+0xd34>
c000c92f:	90                   	nop
c000c930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c934:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 a1 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 01             	and    eax,0x1
c000c950:	74 76                	je     c000c9c8 <tcp_receive+0xd10>
c000c952:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c957:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c95b:	0f b7 c0             	movzx  eax,ax
c000c95e:	83 ec 0c             	sub    esp,0xc
c000c961:	50                   	push   eax
c000c962:	e8 81 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c967:	83 c4 10             	add    esp,0x10
c000c96a:	0f b7 c0             	movzx  eax,ax
c000c96d:	83 e0 02             	and    eax,0x2
c000c970:	75 56                	jne    c000c9c8 <tcp_receive+0xd10>
c000c972:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c977:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	6a 01                	push   0x1
c000c980:	e8 63 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c98e:	09 d8                	or     eax,ebx
c000c990:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c994:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c99a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c99f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9a3:	0f b7 c0             	movzx  eax,ax
c000c9a6:	83 ec 0c             	sub    esp,0xc
c000c9a9:	50                   	push   eax
c000c9aa:	e8 39 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9af:	83 c4 10             	add    esp,0x10
c000c9b2:	0f b7 c0             	movzx  eax,ax
c000c9b5:	83 e0 03             	and    eax,0x3
c000c9b8:	0f 95 c0             	setne  al
c000c9bb:	0f b6 c0             	movzx  eax,al
c000c9be:	01 d8                	add    eax,ebx
c000c9c0:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c9c6:	66 90                	xchg   ax,ax
c000c9c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9da:	83 ec 0c             	sub    esp,0xc
c000c9dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9e1:	e8 86 d7 ff ff       	call   c000a16c <tcp_seg_free>
c000c9e6:	83 c4 10             	add    esp,0x10
c000c9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c9ec:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c9f1:	74 31                	je     c000ca24 <tcp_receive+0xd6c>
c000c9f3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9f9:	0f b7 d0             	movzx  edx,ax
c000c9fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca01:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ca04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca0b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ca0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca15:	0f b7 c0             	movzx  eax,ax
c000ca18:	01 d0                	add    eax,edx
c000ca1a:	29 c1                	sub    ecx,eax
c000ca1c:	89 c8                	mov    eax,ecx
c000ca1e:	0f 89 0c ff ff ff    	jns    c000c930 <tcp_receive+0xc78>
c000ca24:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000ca29:	0f 84 f1 00 00 00    	je     c000cb20 <tcp_receive+0xe68>
c000ca2f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca35:	0f b7 d0             	movzx  edx,ax
c000ca38:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca3d:	01 c2                	add    edx,eax
c000ca3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca49:	29 c2                	sub    edx,eax
c000ca4b:	89 d0                	mov    eax,edx
c000ca4d:	85 c0                	test   eax,eax
c000ca4f:	0f 8e cb 00 00 00    	jle    c000cb20 <tcp_receive+0xe68>
c000ca55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca59:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca5f:	89 c2                	mov    edx,eax
c000ca61:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ca66:	89 d7                	mov    edi,edx
c000ca68:	29 c7                	sub    edi,eax
c000ca6a:	89 f8                	mov    eax,edi
c000ca6c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000ca72:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca77:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca7b:	0f b7 c0             	movzx  eax,ax
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	50                   	push   eax
c000ca82:	e8 61 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca87:	83 c4 10             	add    esp,0x10
c000ca8a:	0f b7 c0             	movzx  eax,ax
c000ca8d:	83 e0 02             	and    eax,0x2
c000ca90:	74 0e                	je     c000caa0 <tcp_receive+0xde8>
c000ca92:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000ca97:	83 e8 01             	sub    eax,0x1
c000ca9a:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000caa0:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000caa5:	0f b7 d0             	movzx  edx,ax
c000caa8:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000caad:	83 ec 08             	sub    esp,0x8
c000cab0:	52                   	push   edx
c000cab1:	50                   	push   eax
c000cab2:	e8 0d c0 ff ff       	call   c0008ac4 <pbuf_realloc>
c000cab7:	83 c4 10             	add    esp,0x10
c000caba:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000cac0:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cac5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cac9:	0f b7 c0             	movzx  eax,ax
c000cacc:	83 ec 0c             	sub    esp,0xc
c000cacf:	50                   	push   eax
c000cad0:	e8 13 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	0f b7 c0             	movzx  eax,ax
c000cadb:	83 e0 03             	and    eax,0x3
c000cade:	0f 95 c0             	setne  al
c000cae1:	0f b6 c0             	movzx  eax,al
c000cae4:	01 d8                	add    eax,ebx
c000cae6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000caec:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000caf2:	0f b7 d0             	movzx  edx,ax
c000caf5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cafa:	01 c2                	add    edx,eax
c000cafc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb06:	39 c2                	cmp    edx,eax
c000cb08:	74 16                	je     c000cb20 <tcp_receive+0xe68>
c000cb0a:	83 ec 08             	sub    esp,0x8
c000cb0d:	68 cc 06 03 c0       	push   0xc00306cc
c000cb12:	68 06 fd 02 c0       	push   0xc002fd06
c000cb17:	e8 6c 32 01 00       	call   c001fd88 <CPrintf>
c000cb1c:	83 c4 10             	add    esp,0x10
c000cb1f:	90                   	nop
c000cb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cb28:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb2e:	66 90                	xchg   ax,ax
c000cb30:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb36:	0f b7 d0             	movzx  edx,ax
c000cb39:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cb3e:	01 c2                	add    edx,eax
c000cb40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb44:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb4b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb4e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb54:	0f b7 d2             	movzx  edx,dx
c000cb57:	0f b7 c0             	movzx  eax,ax
c000cb5a:	39 c2                	cmp    edx,eax
c000cb5c:	73 16                	jae    c000cb74 <tcp_receive+0xebc>
c000cb5e:	83 ec 08             	sub    esp,0x8
c000cb61:	68 08 07 03 c0       	push   0xc0030708
c000cb66:	68 06 fd 02 c0       	push   0xc002fd06
c000cb6b:	e8 18 32 01 00       	call   c001fd88 <CPrintf>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	90                   	nop
c000cb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb78:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000cb7b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cb81:	89 d6                	mov    esi,edx
c000cb83:	29 c6                	sub    esi,eax
c000cb85:	89 f0                	mov    eax,esi
c000cb87:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000cb8b:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000cb8f:	83 ec 0c             	sub    esp,0xc
c000cb92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb96:	e8 7d d2 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cba3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cba6:	0f b7 c0             	movzx  eax,ax
c000cba9:	85 c0                	test   eax,eax
c000cbab:	74 17                	je     c000cbc4 <tcp_receive+0xf0c>
c000cbad:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000cbb2:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cbb7:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000cbc1:	8d 76 00             	lea    esi,[esi+0x0]
c000cbc4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000cbc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cbcd:	0f b7 c0             	movzx  eax,ax
c000cbd0:	83 ec 0c             	sub    esp,0xc
c000cbd3:	50                   	push   eax
c000cbd4:	e8 0f 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	0f b7 c0             	movzx  eax,ax
c000cbdf:	83 e0 01             	and    eax,0x1
c000cbe2:	0f 84 d8 01 00 00    	je     c000cdc0 <tcp_receive+0x1108>
c000cbe8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cbed:	83 c8 20             	or     eax,0x20
c000cbf0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cbf5:	e9 c6 01 00 00       	jmp    c000cdc0 <tcp_receive+0x1108>
c000cbfa:	66 90                	xchg   ax,ax
c000cbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc00:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc0e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc1a:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc23:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc26:	0f b7 d8             	movzx  ebx,ax
c000cc29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc30:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc34:	0f b7 c0             	movzx  eax,ax
c000cc37:	83 ec 0c             	sub    esp,0xc
c000cc3a:	50                   	push   eax
c000cc3b:	e8 a8 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	0f b7 c0             	movzx  eax,ax
c000cc46:	83 e0 03             	and    eax,0x3
c000cc49:	0f 95 c0             	setne  al
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cc52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cc59:	01 c2                	add    edx,eax
c000cc5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cc62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc66:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cc69:	0f b7 d8             	movzx  ebx,ax
c000cc6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc73:	0f b7 f0             	movzx  esi,ax
c000cc76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc7d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc81:	0f b7 c0             	movzx  eax,ax
c000cc84:	83 ec 0c             	sub    esp,0xc
c000cc87:	50                   	push   eax
c000cc88:	e8 5b 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	0f b7 c0             	movzx  eax,ax
c000cc93:	83 e0 03             	and    eax,0x3
c000cc96:	0f 95 c0             	setne  al
c000cc99:	0f b6 c0             	movzx  eax,al
c000cc9c:	01 f0                	add    eax,esi
c000cc9e:	39 c3                	cmp    ebx,eax
c000cca0:	7d 16                	jge    c000ccb8 <tcp_receive+0x1000>
c000cca2:	83 ec 08             	sub    esp,0x8
c000cca5:	68 28 07 03 c0       	push   0xc0030728
c000ccaa:	68 06 fd 02 c0       	push   0xc002fd06
c000ccaf:	e8 d4 30 01 00       	call   c001fd88 <CPrintf>
c000ccb4:	83 c4 10             	add    esp,0x10
c000ccb7:	90                   	nop
c000ccb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccbf:	0f b7 d8             	movzx  ebx,ax
c000ccc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ccc6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccc9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cccd:	0f b7 c0             	movzx  eax,ax
c000ccd0:	83 ec 0c             	sub    esp,0xc
c000ccd3:	50                   	push   eax
c000ccd4:	e8 0f 3f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ccd9:	83 c4 10             	add    esp,0x10
c000ccdc:	0f b7 c0             	movzx  eax,ax
c000ccdf:	83 e0 03             	and    eax,0x3
c000cce2:	0f 95 c0             	setne  al
c000cce5:	0f b6 c0             	movzx  eax,al
c000cce8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cceb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ccf2:	29 d0                	sub    eax,edx
c000ccf4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ccf8:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd03:	e8 10 d1 ff ff       	call   c0009e18 <tcp_update_rcv_ann_wnd>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd12:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd15:	0f b7 c0             	movzx  eax,ax
c000cd18:	85 c0                	test   eax,eax
c000cd1a:	74 3c                	je     c000cd58 <tcp_receive+0x10a0>
c000cd1c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd21:	85 c0                	test   eax,eax
c000cd23:	74 1b                	je     c000cd40 <tcp_receive+0x1088>
c000cd25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd29:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd2c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	52                   	push   edx
c000cd35:	50                   	push   eax
c000cd36:	e8 f1 bf ff ff       	call   c0008d2c <pbuf_cat>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	eb 0c                	jmp    c000cd4c <tcp_receive+0x1094>
c000cd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd47:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cd4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cd57:	90                   	nop
c000cd58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd5f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cd63:	0f b7 c0             	movzx  eax,ax
c000cd66:	83 ec 0c             	sub    esp,0xc
c000cd69:	50                   	push   eax
c000cd6a:	e8 79 3e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	0f b7 c0             	movzx  eax,ax
c000cd75:	83 e0 01             	and    eax,0x1
c000cd78:	74 26                	je     c000cda0 <tcp_receive+0x10e8>
c000cd7a:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cd7f:	83 c8 20             	or     eax,0x20
c000cd82:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cd87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd8b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cd8e:	83 f8 04             	cmp    eax,0x4
c000cd91:	75 0d                	jne    c000cda0 <tcp_receive+0x10e8>
c000cd93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd97:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cd9e:	66 90                	xchg   ax,ax
c000cda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cda4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cda6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdaa:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdb0:	83 ec 0c             	sub    esp,0xc
c000cdb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb7:	e8 b0 d3 ff ff       	call   c000a16c <tcp_seg_free>
c000cdbc:	83 c4 10             	add    esp,0x10
c000cdbf:	90                   	nop
c000cdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdca:	85 c0                	test   eax,eax
c000cdcc:	74 22                	je     c000cdf0 <tcp_receive+0x1138>
c000cdce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdd2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cdd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cddb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cdde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cde2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cde5:	39 c2                	cmp    edx,eax
c000cde7:	0f 84 0f fe ff ff    	je     c000cbfc <tcp_receive+0xf44>
c000cded:	8d 76 00             	lea    esi,[esi+0x0]
c000cdf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cdf7:	0f b6 c0             	movzx  eax,al
c000cdfa:	83 e0 01             	and    eax,0x1
c000cdfd:	74 2d                	je     c000ce2c <tcp_receive+0x1174>
c000cdff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce03:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce06:	83 e0 fe             	and    eax,0xfffffffe
c000ce09:	88 c2                	mov    dl,al
c000ce0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce0f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce16:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce19:	83 c8 02             	or     eax,0x2
c000ce1c:	88 c2                	mov    dl,al
c000ce1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce22:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce25:	e9 22 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce2a:	66 90                	xchg   ax,ax
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ce33:	83 c8 01             	or     eax,0x1
c000ce36:	88 c2                	mov    dl,al
c000ce38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce3c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ce3f:	e9 08 05 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce44:	83 ec 0c             	sub    esp,0xc
c000ce47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce4b:	e8 c4 2e 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce57:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce5d:	85 c0                	test   eax,eax
c000ce5f:	75 23                	jne    c000ce84 <tcp_receive+0x11cc>
c000ce61:	83 ec 0c             	sub    esp,0xc
c000ce64:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce69:	e8 96 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 c2                	mov    edx,eax
c000ce73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce77:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce7d:	e9 ca 04 00 00       	jmp    c000d34c <tcp_receive+0x1694>
c000ce82:	66 90                	xchg   ax,ax
c000ce84:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ce8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce90:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ce96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ce9a:	e9 21 04 00 00       	jmp    c000d2c0 <tcp_receive+0x1608>
c000ce9f:	90                   	nop
c000cea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cea7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceaa:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceaf:	39 c2                	cmp    edx,eax
c000ceb1:	75 75                	jne    c000cf28 <tcp_receive+0x1270>
c000ceb3:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000ceb9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 d2             	movzx  edx,dx
c000cec3:	0f b7 c0             	movzx  eax,ax
c000cec6:	39 c2                	cmp    edx,eax
c000cec8:	0f 86 02 04 00 00    	jbe    c000d2d0 <tcp_receive+0x1618>
c000cece:	83 ec 0c             	sub    esp,0xc
c000ced1:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ced6:	e8 29 d3 ff ff       	call   c000a204 <tcp_seg_copy>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cee2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cee7:	0f 84 e7 03 00 00    	je     c000d2d4 <tcp_receive+0x161c>
c000ceed:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cef2:	74 0c                	je     c000cf00 <tcp_receive+0x1248>
c000cef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cefc:	89 10                	mov    DWORD PTR [eax],edx
c000cefe:	eb 10                	jmp    c000cf10 <tcp_receive+0x1258>
c000cf00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf08:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf0e:	66 90                	xchg   ax,ax
c000cf10:	83 ec 08             	sub    esp,0x8
c000cf13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1b:	e8 2c ec ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf20:	83 c4 10             	add    esp,0x10
c000cf23:	e9 ac 03 00 00       	jmp    c000d2d4 <tcp_receive+0x161c>
c000cf28:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cf2d:	75 61                	jne    c000cf90 <tcp_receive+0x12d8>
c000cf2f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf3f:	29 c2                	sub    edx,eax
c000cf41:	89 d0                	mov    eax,edx
c000cf43:	0f 89 27 01 00 00    	jns    c000d070 <tcp_receive+0x13b8>
c000cf49:	83 ec 0c             	sub    esp,0xc
c000cf4c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf51:	e8 ae d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cf62:	0f 84 70 03 00 00    	je     c000d2d8 <tcp_receive+0x1620>
c000cf68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf70:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cf76:	83 ec 08             	sub    esp,0x8
c000cf79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf81:	e8 c6 eb ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000cf86:	83 c4 10             	add    esp,0x10
c000cf89:	e9 4a 03 00 00       	jmp    c000d2d8 <tcp_receive+0x1620>
c000cf8e:	66 90                	xchg   ax,ax
c000cf90:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf96:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfa0:	29 c2                	sub    edx,eax
c000cfa2:	89 d0                	mov    eax,edx
c000cfa4:	83 e8 01             	sub    eax,0x1
c000cfa7:	0f 88 c3 00 00 00    	js     c000d070 <tcp_receive+0x13b8>
c000cfad:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cfb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfbd:	29 c2                	sub    edx,eax
c000cfbf:	89 d0                	mov    eax,edx
c000cfc1:	83 c0 01             	add    eax,0x1
c000cfc4:	85 c0                	test   eax,eax
c000cfc6:	0f 8f a4 00 00 00    	jg     c000d070 <tcp_receive+0x13b8>
c000cfcc:	83 ec 0c             	sub    esp,0xc
c000cfcf:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cfd4:	e8 2b d2 ff ff       	call   c000a204 <tcp_seg_copy>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cfe5:	0f 84 f1 02 00 00    	je     c000d2dc <tcp_receive+0x1624>
c000cfeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cfef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cff5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cff9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cffc:	0f b7 c0             	movzx  eax,ax
c000cfff:	01 c2                	add    edx,eax
c000d001:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d006:	29 c2                	sub    edx,eax
c000d008:	89 d0                	mov    eax,edx
c000d00a:	85 c0                	test   eax,eax
c000d00c:	7e 3e                	jle    c000d04c <tcp_receive+0x1394>
c000d00e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d013:	89 c2                	mov    edx,eax
c000d015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d019:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d01f:	89 d7                	mov    edi,edx
c000d021:	29 c7                	sub    edi,eax
c000d023:	89 f8                	mov    eax,edi
c000d025:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d029:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d02d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d034:	0f b7 d0             	movzx  edx,ax
c000d037:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d03b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d03e:	83 ec 08             	sub    esp,0x8
c000d041:	52                   	push   edx
c000d042:	50                   	push   eax
c000d043:	e8 7c ba ff ff       	call   c0008ac4 <pbuf_realloc>
c000d048:	83 c4 10             	add    esp,0x10
c000d04b:	90                   	nop
c000d04c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d054:	89 10                	mov    DWORD PTR [eax],edx
c000d056:	83 ec 08             	sub    esp,0x8
c000d059:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d061:	e8 e6 ea ff ff       	call   c000bb4c <tcp_oos_insert_segment>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	e9 6e 02 00 00       	jmp    c000d2dc <tcp_receive+0x1624>
c000d06e:	66 90                	xchg   ax,ax
c000d070:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d074:	8b 00                	mov    eax,DWORD PTR [eax]
c000d076:	85 c0                	test   eax,eax
c000d078:	0f 85 2e 02 00 00    	jne    c000d2ac <tcp_receive+0x15f4>
c000d07e:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d084:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d088:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d08b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d08e:	29 c2                	sub    edx,eax
c000d090:	89 d0                	mov    eax,edx
c000d092:	85 c0                	test   eax,eax
c000d094:	0f 8e 12 02 00 00    	jle    c000d2ac <tcp_receive+0x15f4>
c000d09a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d09e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	50                   	push   eax
c000d0ac:	e8 37 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	0f b7 c0             	movzx  eax,ax
c000d0b7:	83 e0 01             	and    eax,0x1
c000d0ba:	0f 85 20 02 00 00    	jne    c000d2e0 <tcp_receive+0x1628>
c000d0c0:	83 ec 0c             	sub    esp,0xc
c000d0c3:	68 c0 a8 03 c0       	push   0xc003a8c0
c000d0c8:	e8 37 d1 ff ff       	call   c000a204 <tcp_seg_copy>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	89 c2                	mov    edx,eax
c000d0d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d6:	89 10                	mov    DWORD PTR [eax],edx
c000d0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0de:	85 c0                	test   eax,eax
c000d0e0:	0f 84 fe 01 00 00    	je     c000d2e4 <tcp_receive+0x162c>
c000d0e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d0f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0f7:	0f b7 c0             	movzx  eax,ax
c000d0fa:	01 c2                	add    edx,eax
c000d0fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d101:	29 c2                	sub    edx,eax
c000d103:	89 d0                	mov    eax,edx
c000d105:	85 c0                	test   eax,eax
c000d107:	7e 3f                	jle    c000d148 <tcp_receive+0x1490>
c000d109:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d10e:	89 c2                	mov    edx,eax
c000d110:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d114:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d117:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d11a:	89 d6                	mov    esi,edx
c000d11c:	29 c6                	sub    esi,eax
c000d11e:	89 f0                	mov    eax,esi
c000d120:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d124:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d12c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d12f:	0f b7 d0             	movzx  edx,ax
c000d132:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d139:	83 ec 08             	sub    esp,0x8
c000d13c:	52                   	push   edx
c000d13d:	50                   	push   eax
c000d13e:	e8 81 b9 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	66 90                	xchg   ax,ax
c000d148:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d14e:	0f b7 d0             	movzx  edx,ax
c000d151:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d159:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d15d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d160:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d164:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d167:	0f b7 c0             	movzx  eax,ax
c000d16a:	01 d0                	add    eax,edx
c000d16c:	39 c1                	cmp    ecx,eax
c000d16e:	0f 86 70 01 00 00    	jbe    c000d2e4 <tcp_receive+0x162c>
c000d174:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d178:	8b 00                	mov    eax,DWORD PTR [eax]
c000d17a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d17d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d181:	0f b7 c0             	movzx  eax,ax
c000d184:	83 ec 0c             	sub    esp,0xc
c000d187:	50                   	push   eax
c000d188:	e8 5b 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d18d:	83 c4 10             	add    esp,0x10
c000d190:	0f b7 c0             	movzx  eax,ax
c000d193:	83 e0 01             	and    eax,0x1
c000d196:	74 50                	je     c000d1e8 <tcp_receive+0x1530>
c000d198:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d19c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d19e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1a5:	80 e4 c0             	and    ah,0xc0
c000d1a8:	89 c3                	mov    ebx,eax
c000d1aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d1b3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1b7:	0f b7 c0             	movzx  eax,ax
c000d1ba:	83 ec 0c             	sub    esp,0xc
c000d1bd:	50                   	push   eax
c000d1be:	e8 25 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1c3:	83 c4 10             	add    esp,0x10
c000d1c6:	0f b7 c0             	movzx  eax,ax
c000d1c9:	83 e0 3e             	and    eax,0x3e
c000d1cc:	83 ec 0c             	sub    esp,0xc
c000d1cf:	50                   	push   eax
c000d1d0:	e8 13 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d1d5:	83 c4 10             	add    esp,0x10
c000d1d8:	09 d8                	or     eax,ebx
c000d1da:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d1de:	8b 12                	mov    edx,DWORD PTR [edx]
c000d1e0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000d1e3:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000d1e7:	90                   	nop
c000d1e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1ec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1ef:	89 c2                	mov    edx,eax
c000d1f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f8:	01 d0                	add    eax,edx
c000d1fa:	89 c3                	mov    ebx,eax
c000d1fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d201:	89 c1                	mov    ecx,eax
c000d203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d207:	8b 10                	mov    edx,DWORD PTR [eax]
c000d209:	89 d8                	mov    eax,ebx
c000d20b:	29 c8                	sub    eax,ecx
c000d20d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000d211:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d215:	8b 00                	mov    eax,DWORD PTR [eax]
c000d217:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d21a:	0f b7 d0             	movzx  edx,ax
c000d21d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d221:	8b 00                	mov    eax,DWORD PTR [eax]
c000d223:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d226:	83 ec 08             	sub    esp,0x8
c000d229:	52                   	push   edx
c000d22a:	50                   	push   eax
c000d22b:	e8 94 b8 ff ff       	call   c0008ac4 <pbuf_realloc>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d237:	8b 00                	mov    eax,DWORD PTR [eax]
c000d239:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d23c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d240:	8b 00                	mov    eax,DWORD PTR [eax]
c000d242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d245:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d249:	0f b7 c0             	movzx  eax,ax
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	50                   	push   eax
c000d250:	e8 93 39 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d255:	83 c4 10             	add    esp,0x10
c000d258:	0f b7 c0             	movzx  eax,ax
c000d25b:	83 e0 03             	and    eax,0x3
c000d25e:	0f 95 c0             	setne  al
c000d261:	0f b6 c0             	movzx  eax,al
c000d264:	01 d8                	add    eax,ebx
c000d266:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d26c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d272:	0f b7 d0             	movzx  edx,ax
c000d275:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d27a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d27d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d281:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d284:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d288:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d28b:	0f b7 c0             	movzx  eax,ax
c000d28e:	01 d0                	add    eax,edx
c000d290:	39 c1                	cmp    ecx,eax
c000d292:	74 50                	je     c000d2e4 <tcp_receive+0x162c>
c000d294:	83 ec 08             	sub    esp,0x8
c000d297:	68 94 06 03 c0       	push   0xc0030694
c000d29c:	68 06 fd 02 c0       	push   0xc002fd06
c000d2a1:	e8 e2 2a 01 00       	call   c001fd88 <CPrintf>
c000d2a6:	83 c4 10             	add    esp,0x10
c000d2a9:	eb 39                	jmp    c000d2e4 <tcp_receive+0x162c>
c000d2ab:	90                   	nop
c000d2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d2b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d2ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2be:	66 90                	xchg   ax,ax
c000d2c0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d2c5:	0f 85 d5 fb ff ff    	jne    c000cea0 <tcp_receive+0x11e8>
c000d2cb:	eb 7f                	jmp    c000d34c <tcp_receive+0x1694>
c000d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d2d0:	90                   	nop
c000d2d1:	eb 79                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d3:	90                   	nop
c000d2d4:	90                   	nop
c000d2d5:	eb 75                	jmp    c000d34c <tcp_receive+0x1694>
c000d2d7:	90                   	nop
c000d2d8:	90                   	nop
c000d2d9:	eb 71                	jmp    c000d34c <tcp_receive+0x1694>
c000d2db:	90                   	nop
c000d2dc:	90                   	nop
c000d2dd:	eb 6d                	jmp    c000d34c <tcp_receive+0x1694>
c000d2df:	90                   	nop
c000d2e0:	90                   	nop
c000d2e1:	eb 69                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e3:	90                   	nop
c000d2e4:	90                   	nop
c000d2e5:	eb 65                	jmp    c000d34c <tcp_receive+0x1694>
c000d2e7:	90                   	nop
c000d2e8:	83 ec 0c             	sub    esp,0xc
c000d2eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d2ef:	e8 20 2a 00 00       	call   c000fd14 <tcp_send_empty_ack>
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	eb 53                	jmp    c000d34c <tcp_receive+0x1694>
c000d2f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2fc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d302:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d306:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d309:	29 c2                	sub    edx,eax
c000d30b:	89 d0                	mov    eax,edx
c000d30d:	78 25                	js     c000d334 <tcp_receive+0x167c>
c000d30f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d315:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d319:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d31c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d320:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d323:	0f b7 c0             	movzx  eax,ax
c000d326:	01 c8                	add    eax,ecx
c000d328:	29 c2                	sub    edx,eax
c000d32a:	89 d0                	mov    eax,edx
c000d32c:	83 c0 01             	add    eax,0x1
c000d32f:	85 c0                	test   eax,eax
c000d331:	7e 19                	jle    c000d34c <tcp_receive+0x1694>
c000d333:	90                   	nop
c000d334:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d338:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d33b:	83 c8 02             	or     eax,0x2
c000d33e:	88 c2                	mov    dl,al
c000d340:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d344:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d347:	eb 03                	jmp    c000d34c <tcp_receive+0x1694>
c000d349:	8d 76 00             	lea    esi,[esi+0x0]
c000d34c:	90                   	nop
c000d34d:	83 c4 30             	add    esp,0x30
c000d350:	5b                   	pop    ebx
c000d351:	5e                   	pop    esi
c000d352:	5f                   	pop    edi
c000d353:	c3                   	ret    

c000d354 <tcp_parseopt>:
c000d354:	83 ec 1c             	sub    esp,0x1c
c000d357:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d35c:	83 c0 14             	add    eax,0x14
c000d35f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d363:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d368:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d36c:	0f b7 c0             	movzx  eax,ax
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	50                   	push   eax
c000d373:	e8 70 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	0f b7 c0             	movzx  eax,ax
c000d37e:	c1 e8 0c             	shr    eax,0xc
c000d381:	0f b7 c0             	movzx  eax,ax
c000d384:	83 f8 05             	cmp    eax,0x5
c000d387:	0f 86 6f 01 00 00    	jbe    c000d4fc <tcp_parseopt+0x1a8>
c000d38d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d392:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d396:	0f b7 c0             	movzx  eax,ax
c000d399:	83 ec 0c             	sub    esp,0xc
c000d39c:	50                   	push   eax
c000d39d:	e8 46 38 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d3a2:	83 c4 10             	add    esp,0x10
c000d3a5:	0f b7 c0             	movzx  eax,ax
c000d3a8:	c1 e8 0c             	shr    eax,0xc
c000d3ab:	83 e8 05             	sub    eax,0x5
c000d3ae:	c1 e0 02             	shl    eax,0x2
c000d3b1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d3b6:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d3bd:	e9 1e 01 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d3c2:	66 90                	xchg   ax,ax
c000d3c4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d3cd:	01 d0                	add    eax,edx
c000d3cf:	8a 00                	mov    al,BYTE PTR [eax]
c000d3d1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d3d5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d3da:	83 f8 01             	cmp    eax,0x1
c000d3dd:	74 15                	je     c000d3f4 <tcp_parseopt+0xa0>
c000d3df:	83 f8 02             	cmp    eax,0x2
c000d3e2:	74 24                	je     c000d408 <tcp_parseopt+0xb4>
c000d3e4:	85 c0                	test   eax,eax
c000d3e6:	0f 85 bc 00 00 00    	jne    c000d4a8 <tcp_parseopt+0x154>
c000d3ec:	e9 0b 01 00 00       	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d3f4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d3f9:	83 c0 01             	add    eax,0x1
c000d3fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d401:	e9 da 00 00 00       	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d406:	66 90                	xchg   ax,ax
c000d408:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d40d:	8d 50 01             	lea    edx,[eax+0x1]
c000d410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d414:	01 d0                	add    eax,edx
c000d416:	8a 00                	mov    al,BYTE PTR [eax]
c000d418:	0f b6 c0             	movzx  eax,al
c000d41b:	83 f8 04             	cmp    eax,0x4
c000d41e:	0f 85 d0 00 00 00    	jne    c000d4f4 <tcp_parseopt+0x1a0>
c000d424:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d429:	8d 50 03             	lea    edx,[eax+0x3]
c000d42c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d431:	39 c2                	cmp    edx,eax
c000d433:	0f 8d bb 00 00 00    	jge    c000d4f4 <tcp_parseopt+0x1a0>
c000d439:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d43e:	8d 50 02             	lea    edx,[eax+0x2]
c000d441:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d445:	01 d0                	add    eax,edx
c000d447:	8a 00                	mov    al,BYTE PTR [eax]
c000d449:	0f b6 c0             	movzx  eax,al
c000d44c:	c1 e0 08             	shl    eax,0x8
c000d44f:	89 c2                	mov    edx,eax
c000d451:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d456:	8d 48 03             	lea    ecx,[eax+0x3]
c000d459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d45d:	01 c8                	add    eax,ecx
c000d45f:	8a 00                	mov    al,BYTE PTR [eax]
c000d461:	0f b6 c0             	movzx  eax,al
c000d464:	09 d0                	or     eax,edx
c000d466:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d46b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d470:	3d 18 02 00 00       	cmp    eax,0x218
c000d475:	77 11                	ja     c000d488 <tcp_parseopt+0x134>
c000d477:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 08                	je     c000d488 <tcp_parseopt+0x134>
c000d480:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d485:	eb 09                	jmp    c000d490 <tcp_parseopt+0x13c>
c000d487:	90                   	nop
c000d488:	b8 18 02 00 00       	mov    eax,0x218
c000d48d:	8d 76 00             	lea    esi,[esi+0x0]
c000d490:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d494:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d498:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d49d:	83 c0 04             	add    eax,0x4
c000d4a0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4a5:	eb 39                	jmp    c000d4e0 <tcp_parseopt+0x18c>
c000d4a7:	90                   	nop
c000d4a8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4ad:	8d 50 01             	lea    edx,[eax+0x1]
c000d4b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4b4:	01 d0                	add    eax,edx
c000d4b6:	8a 00                	mov    al,BYTE PTR [eax]
c000d4b8:	0f b6 c0             	movzx  eax,al
c000d4bb:	85 c0                	test   eax,eax
c000d4bd:	74 39                	je     c000d4f8 <tcp_parseopt+0x1a4>
c000d4bf:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d4cb:	01 d0                	add    eax,edx
c000d4cd:	8a 00                	mov    al,BYTE PTR [eax]
c000d4cf:	0f b6 c0             	movzx  eax,al
c000d4d2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d4d7:	01 d0                	add    eax,edx
c000d4d9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d4de:	66 90                	xchg   ax,ax
c000d4e0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d4e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d4ea:	39 c2                	cmp    edx,eax
c000d4ec:	0f 82 d2 fe ff ff    	jb     c000d3c4 <tcp_parseopt+0x70>
c000d4f2:	eb 08                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f4:	90                   	nop
c000d4f5:	eb 05                	jmp    c000d4fc <tcp_parseopt+0x1a8>
c000d4f7:	90                   	nop
c000d4f8:	90                   	nop
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	83 c4 1c             	add    esp,0x1c
c000d4ff:	c3                   	ret    

c000d500 <tcp_listen_input>:
c000d500:	53                   	push   ebx
c000d501:	83 ec 18             	sub    esp,0x18
c000d504:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d509:	0f b6 c0             	movzx  eax,al
c000d50c:	83 e0 10             	and    eax,0x10
c000d50f:	74 4f                	je     c000d560 <tcp_listen_input+0x60>
c000d511:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d516:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d519:	0f b7 c8             	movzx  ecx,ax
c000d51c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d521:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d525:	0f b7 d0             	movzx  edx,ax
c000d528:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d52e:	0f b7 d8             	movzx  ebx,ax
c000d531:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d536:	01 c3                	add    ebx,eax
c000d538:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d53d:	83 c0 01             	add    eax,0x1
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	51                   	push   ecx
c000d544:	52                   	push   edx
c000d545:	68 90 68 03 c0       	push   0xc0036890
c000d54a:	68 98 68 03 c0       	push   0xc0036898
c000d54f:	53                   	push   ebx
c000d550:	50                   	push   eax
c000d551:	e8 5a 2f 00 00       	call   c00104b0 <tcp_rst>
c000d556:	83 c4 20             	add    esp,0x20
c000d559:	e9 a2 01 00 00       	jmp    c000d700 <tcp_listen_input+0x200>
c000d55e:	66 90                	xchg   ax,ax
c000d560:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d565:	0f b6 c0             	movzx  eax,al
c000d568:	83 e0 02             	and    eax,0x2
c000d56b:	0f 84 8f 01 00 00    	je     c000d700 <tcp_listen_input+0x200>
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d578:	0f b6 c0             	movzx  eax,al
c000d57b:	83 ec 0c             	sub    esp,0xc
c000d57e:	50                   	push   eax
c000d57f:	e8 14 e0 ff ff       	call   c000b598 <tcp_alloc>
c000d584:	83 c4 10             	add    esp,0x10
c000d587:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d58b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d590:	75 16                	jne    c000d5a8 <tcp_listen_input+0xa8>
c000d592:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d598:	83 c0 01             	add    eax,0x1
c000d59b:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d5a1:	b0 ff                	mov    al,0xff
c000d5a3:	e9 5c 01 00 00       	jmp    c000d704 <tcp_listen_input+0x204>
c000d5a8:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d5ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5b2:	89 10                	mov    DWORD PTR [eax],edx
c000d5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5bf:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d5c3:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5cd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d5d0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d5d5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d5d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5dc:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e4:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d5eb:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d5f0:	8d 50 01             	lea    edx,[eax+0x1]
c000d5f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5f7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d601:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d605:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d608:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d60d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d615:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d61d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d624:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d628:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d62d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d634:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d63e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d642:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d649:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d64c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d650:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d657:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d65a:	83 e0 8c             	and    eax,0xffffff8c
c000d65d:	88 c2                	mov    dl,al
c000d65f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d663:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d666:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d66c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d670:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d677:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d67c:	e8 33 36 00 00       	call   c0010cb4 <tcp_timer_needed>
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d688:	e8 c7 fc ff ff       	call   c000d354 <tcp_parseopt>
c000d68d:	83 c4 10             	add    esp,0x10
c000d690:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d694:	8d 50 04             	lea    edx,[eax+0x4]
c000d697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d69b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d69e:	0f b7 c0             	movzx  eax,ax
c000d6a1:	83 ec 08             	sub    esp,0x8
c000d6a4:	52                   	push   edx
c000d6a5:	50                   	push   eax
c000d6a6:	e8 ad e0 ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6b2:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6b6:	83 ec 08             	sub    esp,0x8
c000d6b9:	6a 12                	push   0x12
c000d6bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6bf:	e8 c4 22 00 00       	call   c000f988 <tcp_enqueue_flags>
c000d6c4:	83 c4 10             	add    esp,0x10
c000d6c7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d6cb:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d6d0:	85 c0                	test   eax,eax
c000d6d2:	74 18                	je     c000d6ec <tcp_listen_input+0x1ec>
c000d6d4:	83 ec 08             	sub    esp,0x8
c000d6d7:	6a 00                	push   0x0
c000d6d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6dd:	e8 9e db ff ff       	call   c000b280 <tcp_abandon>
c000d6e2:	83 c4 10             	add    esp,0x10
c000d6e5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d6e9:	eb 19                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6eb:	90                   	nop
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6f3:	e8 2c 29 00 00       	call   c0010024 <tcp_output>
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	eb 07                	jmp    c000d704 <tcp_listen_input+0x204>
c000d6fd:	8d 76 00             	lea    esi,[esi+0x0]
c000d700:	b0 00                	mov    al,0x0
c000d702:	66 90                	xchg   ax,ax
c000d704:	83 c4 18             	add    esp,0x18
c000d707:	5b                   	pop    ebx
c000d708:	c3                   	ret    
c000d709:	8d 76 00             	lea    esi,[esi+0x0]

c000d70c <tcp_process>:
c000d70c:	53                   	push   ebx
c000d70d:	83 ec 18             	sub    esp,0x18
c000d710:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d715:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d71a:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d71f:	0f b6 c0             	movzx  eax,al
c000d722:	83 e0 04             	and    eax,0x4
c000d725:	0f 84 bd 00 00 00    	je     c000d7e8 <tcp_process+0xdc>
c000d72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d72f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d732:	83 f8 02             	cmp    eax,0x2
c000d735:	75 19                	jne    c000d750 <tcp_process+0x44>
c000d737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73b:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d73e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d743:	39 c2                	cmp    edx,eax
c000d745:	75 45                	jne    c000d78c <tcp_process+0x80>
c000d747:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d74c:	eb 3e                	jmp    c000d78c <tcp_process+0x80>
c000d74e:	66 90                	xchg   ax,ax
c000d750:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d75d:	29 c2                	sub    edx,eax
c000d75f:	89 d0                	mov    eax,edx
c000d761:	78 29                	js     c000d78c <tcp_process+0x80>
c000d763:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d774:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d777:	0f b7 c0             	movzx  eax,ax
c000d77a:	01 c8                	add    eax,ecx
c000d77c:	29 c2                	sub    edx,eax
c000d77e:	89 d0                	mov    eax,edx
c000d780:	85 c0                	test   eax,eax
c000d782:	7f 08                	jg     c000d78c <tcp_process+0x80>
c000d784:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d789:	8d 76 00             	lea    esi,[esi+0x0]
c000d78c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d791:	85 c0                	test   eax,eax
c000d793:	74 4b                	je     c000d7e0 <tcp_process+0xd4>
c000d795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d799:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d79c:	85 c0                	test   eax,eax
c000d79e:	75 18                	jne    c000d7b8 <tcp_process+0xac>
c000d7a0:	83 ec 08             	sub    esp,0x8
c000d7a3:	68 50 07 03 c0       	push   0xc0030750
c000d7a8:	68 06 fd 02 c0       	push   0xc002fd06
c000d7ad:	e8 d6 25 01 00       	call   c001fd88 <CPrintf>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7b8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d7bd:	83 c8 08             	or     eax,0x8
c000d7c0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d7c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d7cc:	83 e0 fe             	and    eax,0xfffffffe
c000d7cf:	88 c2                	mov    dl,al
c000d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d7d8:	b0 f5                	mov    al,0xf5
c000d7da:	e9 bd 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7df:	90                   	nop
c000d7e0:	b0 00                	mov    al,0x0
c000d7e2:	e9 b5 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d7e7:	90                   	nop
c000d7e8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d7ed:	0f b6 c0             	movzx  eax,al
c000d7f0:	83 e0 02             	and    eax,0x2
c000d7f3:	74 33                	je     c000d828 <tcp_process+0x11c>
c000d7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d7fc:	83 f8 02             	cmp    eax,0x2
c000d7ff:	74 27                	je     c000d828 <tcp_process+0x11c>
c000d801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d808:	83 f8 03             	cmp    eax,0x3
c000d80b:	74 1b                	je     c000d828 <tcp_process+0x11c>
c000d80d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d811:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d814:	83 c8 02             	or     eax,0x2
c000d817:	88 c2                	mov    dl,al
c000d819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d820:	b0 00                	mov    al,0x0
c000d822:	e9 75 08 00 00       	jmp    c000e09c <tcp_process+0x990>
c000d827:	90                   	nop
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d82f:	0f b6 c0             	movzx  eax,al
c000d832:	83 e0 10             	and    eax,0x10
c000d835:	75 0d                	jne    c000d844 <tcp_process+0x138>
c000d837:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d83d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d841:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d848:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d84f:	83 ec 0c             	sub    esp,0xc
c000d852:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d856:	e8 f9 fa ff ff       	call   c000d354 <tcp_parseopt>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d862:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d865:	83 f8 09             	cmp    eax,0x9
c000d868:	0f 87 0a 08 00 00    	ja     c000e078 <tcp_process+0x96c>
c000d86e:	8b 04 85 f8 08 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf708]
c000d875:	ff e0                	jmp    eax
c000d877:	90                   	nop
c000d878:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d87d:	0f b6 c0             	movzx  eax,al
c000d880:	83 e0 10             	and    eax,0x10
c000d883:	0f 84 ff 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d889:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d88e:	0f b6 c0             	movzx  eax,al
c000d891:	83 e0 02             	and    eax,0x2
c000d894:	0f 84 ee 01 00 00    	je     c000da88 <tcp_process+0x37c>
c000d89a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d8a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d8a7:	83 ec 0c             	sub    esp,0xc
c000d8aa:	50                   	push   eax
c000d8ab:	e8 5c 33 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d8b0:	83 c4 10             	add    esp,0x10
c000d8b3:	8d 50 01             	lea    edx,[eax+0x1]
c000d8b6:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d8bb:	39 c2                	cmp    edx,eax
c000d8bd:	0f 85 c5 01 00 00    	jne    c000da88 <tcp_process+0x37c>
c000d8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c7:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d8cb:	83 c0 01             	add    eax,0x1
c000d8ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d8d2:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d8d6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d8db:	8d 50 01             	lea    edx,[eax+0x1]
c000d8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8f0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d8f3:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8fd:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d900:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d905:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d90d:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d911:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d916:	8d 50 ff             	lea    edx,[eax-0x1]
c000d919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91d:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d924:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d92b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92f:	8d 50 04             	lea    edx,[eax+0x4]
c000d932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d936:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d939:	0f b7 c0             	movzx  eax,ax
c000d93c:	83 ec 08             	sub    esp,0x8
c000d93f:	52                   	push   edx
c000d940:	50                   	push   eax
c000d941:	e8 12 de ff ff       	call   c000b758 <tcp_eff_send_mss>
c000d946:	83 c4 10             	add    esp,0x10
c000d949:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d94d:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d951:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d958:	89 c2                	mov    edx,eax
c000d95a:	c1 e2 02             	shl    edx,0x2
c000d95d:	01 d0                	add    eax,edx
c000d95f:	d1 e0                	shl    eax,1
c000d961:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d965:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d971:	0f b7 c0             	movzx  eax,ax
c000d974:	83 f8 01             	cmp    eax,0x1
c000d977:	75 0b                	jne    c000d984 <tcp_process+0x278>
c000d979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d980:	d1 e0                	shl    eax,1
c000d982:	eb 08                	jmp    c000d98c <tcp_process+0x280>
c000d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d988:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98b:	90                   	nop
c000d98c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d990:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d998:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d99b:	0f b7 c0             	movzx  eax,ax
c000d99e:	85 c0                	test   eax,eax
c000d9a0:	75 16                	jne    c000d9b8 <tcp_process+0x2ac>
c000d9a2:	83 ec 08             	sub    esp,0x8
c000d9a5:	68 b3 08 03 c0       	push   0xc00308b3
c000d9aa:	68 06 fd 02 c0       	push   0xc002fd06
c000d9af:	e8 d4 23 01 00       	call   c001fd88 <CPrintf>
c000d9b4:	83 c4 10             	add    esp,0x10
c000d9b7:	90                   	nop
c000d9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d9bf:	83 e8 01             	sub    eax,0x1
c000d9c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9c6:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d9ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e6:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d9e9:	85 c0                	test   eax,eax
c000d9eb:	75 0f                	jne    c000d9fc <tcp_process+0x2f0>
c000d9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f1:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d9f7:	eb 17                	jmp    c000da10 <tcp_process+0x304>
c000d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da00:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000da0e:	66 90                	xchg   ax,ax
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da17:	e8 50 c7 ff ff       	call   c000a16c <tcp_seg_free>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da23:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da29:	85 c0                	test   eax,eax
c000da2b:	74 27                	je     c000da54 <tcp_process+0x348>
c000da2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da31:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000da37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da3b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da3e:	83 ec 04             	sub    esp,0x4
c000da41:	6a 00                	push   0x0
c000da43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da47:	52                   	push   edx
c000da48:	ff d0                	call   eax
c000da4a:	83 c4 10             	add    esp,0x10
c000da4d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da51:	eb 09                	jmp    c000da5c <tcp_process+0x350>
c000da53:	90                   	nop
c000da54:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000da59:	8d 76 00             	lea    esi,[esi+0x0]
c000da5c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da61:	83 f8 f6             	cmp    eax,0xfffffff6
c000da64:	75 0a                	jne    c000da70 <tcp_process+0x364>
c000da66:	b0 f6                	mov    al,0xf6
c000da68:	e9 2f 06 00 00       	jmp    c000e09c <tcp_process+0x990>
c000da6d:	8d 76 00             	lea    esi,[esi+0x0]
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da77:	83 c8 02             	or     eax,0x2
c000da7a:	88 c2                	mov    dl,al
c000da7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da80:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da83:	e9 f4 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000da88:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da8d:	0f b6 c0             	movzx  eax,al
c000da90:	83 e0 10             	and    eax,0x10
c000da93:	0f 84 e3 05 00 00    	je     c000e07c <tcp_process+0x970>
c000da99:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da9e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000daa1:	0f b7 c8             	movzx  ecx,ax
c000daa4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000daa9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000daad:	0f b7 d0             	movzx  edx,ax
c000dab0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dab6:	0f b7 d8             	movzx  ebx,ax
c000dab9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dabe:	01 c3                	add    ebx,eax
c000dac0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dac5:	83 ec 08             	sub    esp,0x8
c000dac8:	51                   	push   ecx
c000dac9:	52                   	push   edx
c000daca:	68 90 68 03 c0       	push   0xc0036890
c000dacf:	68 98 68 03 c0       	push   0xc0036898
c000dad4:	53                   	push   ebx
c000dad5:	50                   	push   eax
c000dad6:	e8 d5 29 00 00       	call   c00104b0 <tcp_rst>
c000dadb:	83 c4 20             	add    esp,0x20
c000dade:	e9 99 05 00 00       	jmp    c000e07c <tcp_process+0x970>
c000dae3:	90                   	nop
c000dae4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dae9:	0f b6 c0             	movzx  eax,al
c000daec:	83 e0 10             	and    eax,0x10
c000daef:	0f 84 a7 01 00 00    	je     c000dc9c <tcp_process+0x590>
c000daf5:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000dafb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daff:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000db02:	29 c2                	sub    edx,eax
c000db04:	89 d0                	mov    eax,edx
c000db06:	83 e8 01             	sub    eax,0x1
c000db09:	0f 88 41 01 00 00    	js     c000dc50 <tcp_process+0x544>
c000db0f:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000db1c:	29 c2                	sub    edx,eax
c000db1e:	89 d0                	mov    eax,edx
c000db20:	85 c0                	test   eax,eax
c000db22:	0f 8f 28 01 00 00    	jg     c000dc50 <tcp_process+0x544>
c000db28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db2c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db37:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db3a:	85 c0                	test   eax,eax
c000db3c:	75 16                	jne    c000db54 <tcp_process+0x448>
c000db3e:	83 ec 08             	sub    esp,0x8
c000db41:	68 c9 08 03 c0       	push   0xc00308c9
c000db46:	68 06 fd 02 c0       	push   0xc002fd06
c000db4b:	e8 38 22 01 00       	call   c001fd88 <CPrintf>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db5b:	85 c0                	test   eax,eax
c000db5d:	74 25                	je     c000db84 <tcp_process+0x478>
c000db5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db63:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000db66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db6a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000db6d:	83 ec 04             	sub    esp,0x4
c000db70:	6a 00                	push   0x0
c000db72:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db76:	52                   	push   edx
c000db77:	ff d0                	call   eax
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000db80:	eb 0a                	jmp    c000db8c <tcp_process+0x480>
c000db82:	66 90                	xchg   ax,ax
c000db84:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db91:	85 c0                	test   eax,eax
c000db93:	74 23                	je     c000dbb8 <tcp_process+0x4ac>
c000db95:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000db9a:	83 f8 f6             	cmp    eax,0xfffffff6
c000db9d:	74 11                	je     c000dbb0 <tcp_process+0x4a4>
c000db9f:	83 ec 0c             	sub    esp,0xc
c000dba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dba6:	e8 69 d8 ff ff       	call   c000b414 <tcp_abort>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	66 90                	xchg   ax,ax
c000dbb0:	b0 f6                	mov    al,0xf6
c000dbb2:	e9 e5 04 00 00       	jmp    c000e09c <tcp_process+0x990>
c000dbb7:	90                   	nop
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000dbc0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000dbc5:	83 ec 0c             	sub    esp,0xc
c000dbc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcc:	e8 e7 e0 ff ff       	call   c000bcb8 <tcp_receive>
c000dbd1:	83 c4 10             	add    esp,0x10
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbdb:	0f b7 c0             	movzx  eax,ax
c000dbde:	85 c0                	test   eax,eax
c000dbe0:	74 12                	je     c000dbf4 <tcp_process+0x4e8>
c000dbe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dbe9:	83 e8 01             	sub    eax,0x1
c000dbec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbf0:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000dbf4:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dbf9:	83 f8 01             	cmp    eax,0x1
c000dbfc:	75 0e                	jne    c000dc0c <tcp_process+0x500>
c000dbfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc05:	d1 e0                	shl    eax,1
c000dc07:	eb 0b                	jmp    c000dc14 <tcp_process+0x508>
c000dc09:	8d 76 00             	lea    esi,[esi+0x0]
c000dc0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc10:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dc13:	90                   	nop
c000dc14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dc18:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000dc1c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc21:	0f b6 c0             	movzx  eax,al
c000dc24:	83 e0 20             	and    eax,0x20
c000dc27:	0f 84 ab 00 00 00    	je     c000dcd8 <tcp_process+0x5cc>
c000dc2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc34:	83 c8 02             	or     eax,0x2
c000dc37:	88 c2                	mov    dl,al
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc44:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc4b:	e9 88 00 00 00       	jmp    c000dcd8 <tcp_process+0x5cc>
c000dc50:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dc55:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dc58:	0f b7 c8             	movzx  ecx,ax
c000dc5b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dc60:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000dc64:	0f b7 d0             	movzx  edx,ax
c000dc67:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000dc6d:	0f b7 d8             	movzx  ebx,ax
c000dc70:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dc75:	01 c3                	add    ebx,eax
c000dc77:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc7c:	83 ec 08             	sub    esp,0x8
c000dc7f:	51                   	push   ecx
c000dc80:	52                   	push   edx
c000dc81:	68 90 68 03 c0       	push   0xc0036890
c000dc86:	68 98 68 03 c0       	push   0xc0036898
c000dc8b:	53                   	push   ebx
c000dc8c:	50                   	push   eax
c000dc8d:	e8 1e 28 00 00       	call   c00104b0 <tcp_rst>
c000dc92:	83 c4 20             	add    esp,0x20
c000dc95:	e9 e6 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dc9a:	66 90                	xchg   ax,ax
c000dc9c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dca1:	0f b6 c0             	movzx  eax,al
c000dca4:	83 e0 02             	and    eax,0x2
c000dca7:	0f 84 d3 03 00 00    	je     c000e080 <tcp_process+0x974>
c000dcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcb1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dcb4:	8d 50 ff             	lea    edx,[eax-0x1]
c000dcb7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dcbc:	39 c2                	cmp    edx,eax
c000dcbe:	0f 85 bc 03 00 00    	jne    c000e080 <tcp_process+0x974>
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dccb:	e8 e4 29 00 00       	call   c00106b4 <tcp_rexmit>
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	e9 a8 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcd8:	90                   	nop
c000dcd9:	e9 a2 03 00 00       	jmp    c000e080 <tcp_process+0x974>
c000dcde:	66 90                	xchg   ax,ax
c000dce0:	83 ec 0c             	sub    esp,0xc
c000dce3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dce7:	e8 cc df ff ff       	call   c000bcb8 <tcp_receive>
c000dcec:	83 c4 10             	add    esp,0x10
c000dcef:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dcf4:	0f b6 c0             	movzx  eax,al
c000dcf7:	83 e0 20             	and    eax,0x20
c000dcfa:	0f 84 84 03 00 00    	je     c000e084 <tcp_process+0x978>
c000dd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd07:	83 c8 02             	or     eax,0x2
c000dd0a:	88 c2                	mov    dl,al
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd17:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dd1e:	e9 61 03 00 00       	jmp    c000e084 <tcp_process+0x978>
c000dd23:	90                   	nop
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd2b:	e8 88 df ff ff       	call   c000bcb8 <tcp_receive>
c000dd30:	83 c4 10             	add    esp,0x10
c000dd33:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd38:	0f b6 c0             	movzx  eax,al
c000dd3b:	83 e0 20             	and    eax,0x20
c000dd3e:	0f 84 08 01 00 00    	je     c000de4c <tcp_process+0x740>
c000dd44:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd49:	0f b6 c0             	movzx  eax,al
c000dd4c:	83 e0 10             	and    eax,0x10
c000dd4f:	0f 84 d3 00 00 00    	je     c000de28 <tcp_process+0x71c>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd5c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd61:	39 c2                	cmp    edx,eax
c000dd63:	0f 85 bf 00 00 00    	jne    c000de28 <tcp_process+0x71c>
c000dd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd6d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd70:	83 c8 02             	or     eax,0x2
c000dd73:	88 c2                	mov    dl,al
c000dd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd79:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd83:	e8 48 c5 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dd88:	83 c4 10             	add    esp,0x10
c000dd8b:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd90:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd94:	75 12                	jne    c000dda8 <tcp_process+0x69c>
c000dd96:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd9e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dda3:	eb 4b                	jmp    c000ddf0 <tcp_process+0x6e4>
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddad:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddb2:	eb 30                	jmp    c000dde4 <tcp_process+0x6d8>
c000ddb4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddc0:	75 12                	jne    c000ddd4 <tcp_process+0x6c8>
c000ddc2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddc7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddcb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddd1:	eb 1d                	jmp    c000ddf0 <tcp_process+0x6e4>
c000ddd3:	90                   	nop
c000ddd4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddd9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dddc:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dde9:	85 c0                	test   eax,eax
c000ddeb:	75 c7                	jne    c000ddb4 <tcp_process+0x6a8>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddf4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddff:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de06:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de17:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de1c:	e8 93 2e 00 00       	call   c0010cb4 <tcp_timer_needed>
c000de21:	e9 62 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de26:	66 90                	xchg   ax,ax
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000de2f:	83 c8 02             	or     eax,0x2
c000de32:	88 c2                	mov    dl,al
c000de34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de38:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000de3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000de46:	e9 3d 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de4b:	90                   	nop
c000de4c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de51:	0f b6 c0             	movzx  eax,al
c000de54:	83 e0 10             	and    eax,0x10
c000de57:	0f 84 2b 02 00 00    	je     c000e088 <tcp_process+0x97c>
c000de5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de61:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de64:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de69:	39 c2                	cmp    edx,eax
c000de6b:	0f 85 17 02 00 00    	jne    c000e088 <tcp_process+0x97c>
c000de71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de75:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000de7c:	e9 07 02 00 00       	jmp    c000e088 <tcp_process+0x97c>
c000de81:	8d 76 00             	lea    esi,[esi+0x0]
c000de84:	83 ec 0c             	sub    esp,0xc
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	e8 28 de ff ff       	call   c000bcb8 <tcp_receive>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de98:	0f b6 c0             	movzx  eax,al
c000de9b:	83 e0 20             	and    eax,0x20
c000de9e:	0f 84 e8 01 00 00    	je     c000e08c <tcp_process+0x980>
c000dea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000deab:	83 c8 02             	or     eax,0x2
c000deae:	88 c2                	mov    dl,al
c000deb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000deb7:	83 ec 0c             	sub    esp,0xc
c000deba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000debe:	e8 0d c4 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dec3:	83 c4 10             	add    esp,0x10
c000dec6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000decb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000decf:	75 0f                	jne    c000dee0 <tcp_process+0x7d4>
c000ded1:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ded6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded9:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dede:	eb 48                	jmp    c000df28 <tcp_process+0x81c>
c000dee0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dee5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000deea:	eb 30                	jmp    c000df1c <tcp_process+0x810>
c000deec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000def1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000def4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000def8:	75 12                	jne    c000df0c <tcp_process+0x800>
c000defa:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000deff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000df03:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000df06:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df09:	eb 1d                	jmp    c000df28 <tcp_process+0x81c>
c000df0b:	90                   	nop
c000df0c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df11:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000df14:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000df19:	8d 76 00             	lea    esi,[esi+0x0]
c000df1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000df21:	85 c0                	test   eax,eax
c000df23:	75 c7                	jne    c000deec <tcp_process+0x7e0>
c000df25:	8d 76 00             	lea    esi,[esi+0x0]
c000df28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df2c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df37:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df3e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000df44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df48:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df4f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000df54:	e8 5b 2d 00 00       	call   c0010cb4 <tcp_timer_needed>
c000df59:	e9 2e 01 00 00       	jmp    c000e08c <tcp_process+0x980>
c000df5e:	66 90                	xchg   ax,ax
c000df60:	83 ec 0c             	sub    esp,0xc
c000df63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df67:	e8 4c dd ff ff       	call   c000bcb8 <tcp_receive>
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000df74:	0f b6 c0             	movzx  eax,al
c000df77:	83 e0 10             	and    eax,0x10
c000df7a:	0f 84 10 01 00 00    	je     c000e090 <tcp_process+0x984>
c000df80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df84:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df87:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000df8c:	39 c2                	cmp    edx,eax
c000df8e:	0f 85 fc 00 00 00    	jne    c000e090 <tcp_process+0x984>
c000df94:	83 ec 0c             	sub    esp,0xc
c000df97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df9b:	e8 30 c3 ff ff       	call   c000a2d0 <tcp_pcb_purge>
c000dfa0:	83 c4 10             	add    esp,0x10
c000dfa3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfa8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfac:	75 12                	jne    c000dfc0 <tcp_process+0x8b4>
c000dfae:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfb6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dfbb:	eb 4b                	jmp    c000e008 <tcp_process+0x8fc>
c000dfbd:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dfc5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dfca:	eb 30                	jmp    c000dffc <tcp_process+0x8f0>
c000dfcc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dfd1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dfd4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dfd8:	75 12                	jne    c000dfec <tcp_process+0x8e0>
c000dfda:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dfdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dfe3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dfe6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfe9:	eb 1d                	jmp    c000e008 <tcp_process+0x8fc>
c000dfeb:	90                   	nop
c000dfec:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dff1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dff4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dff9:	8d 76 00             	lea    esi,[esi+0x0]
c000dffc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000e001:	85 c0                	test   eax,eax
c000e003:	75 c7                	jne    c000dfcc <tcp_process+0x8c0>
c000e005:	8d 76 00             	lea    esi,[esi+0x0]
c000e008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e00c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e017:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000e01e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000e024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e028:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e02f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000e034:	e8 7b 2c 00 00       	call   c0010cb4 <tcp_timer_needed>
c000e039:	eb 55                	jmp    c000e090 <tcp_process+0x984>
c000e03b:	90                   	nop
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e043:	e8 70 dc ff ff       	call   c000bcb8 <tcp_receive>
c000e048:	83 c4 10             	add    esp,0x10
c000e04b:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e050:	0f b6 c0             	movzx  eax,al
c000e053:	83 e0 10             	and    eax,0x10
c000e056:	74 3c                	je     c000e094 <tcp_process+0x988>
c000e058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e05c:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000e05f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e064:	39 c2                	cmp    edx,eax
c000e066:	75 2c                	jne    c000e094 <tcp_process+0x988>
c000e068:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e06d:	83 c8 10             	or     eax,0x10
c000e070:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000e075:	eb 1d                	jmp    c000e094 <tcp_process+0x988>
c000e077:	90                   	nop
c000e078:	90                   	nop
c000e079:	eb 1d                	jmp    c000e098 <tcp_process+0x98c>
c000e07b:	90                   	nop
c000e07c:	90                   	nop
c000e07d:	eb 19                	jmp    c000e098 <tcp_process+0x98c>
c000e07f:	90                   	nop
c000e080:	90                   	nop
c000e081:	eb 15                	jmp    c000e098 <tcp_process+0x98c>
c000e083:	90                   	nop
c000e084:	90                   	nop
c000e085:	eb 11                	jmp    c000e098 <tcp_process+0x98c>
c000e087:	90                   	nop
c000e088:	90                   	nop
c000e089:	eb 0d                	jmp    c000e098 <tcp_process+0x98c>
c000e08b:	90                   	nop
c000e08c:	90                   	nop
c000e08d:	eb 09                	jmp    c000e098 <tcp_process+0x98c>
c000e08f:	90                   	nop
c000e090:	90                   	nop
c000e091:	eb 05                	jmp    c000e098 <tcp_process+0x98c>
c000e093:	90                   	nop
c000e094:	90                   	nop
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	b0 00                	mov    al,0x0
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	83 c4 18             	add    esp,0x18
c000e09f:	5b                   	pop    ebx
c000e0a0:	c3                   	ret    
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]

c000e0a4 <tcp_input>:
c000e0a4:	53                   	push   ebx
c000e0a5:	83 ec 18             	sub    esp,0x18
c000e0a8:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000e0ae:	83 c0 01             	add    eax,0x1
c000e0b1:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000e0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0be:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000e0c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c7:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000e0ca:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e0cf:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0d2:	0f b7 c0             	movzx  eax,ax
c000e0d5:	83 ec 0c             	sub    esp,0xc
c000e0d8:	50                   	push   eax
c000e0d9:	e8 0a 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0de:	83 c4 10             	add    esp,0x10
c000e0e1:	0f b7 c0             	movzx  eax,ax
c000e0e4:	c1 e8 08             	shr    eax,0x8
c000e0e7:	0f b7 c0             	movzx  eax,ax
c000e0ea:	83 e0 0f             	and    eax,0xf
c000e0ed:	c1 e0 02             	shl    eax,0x2
c000e0f0:	01 d8                	add    eax,ebx
c000e0f2:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000e0f7:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000e0fc:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0ff:	0f b7 c0             	movzx  eax,ax
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	50                   	push   eax
c000e106:	e8 dd 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	0f b7 c0             	movzx  eax,ax
c000e111:	c1 e8 08             	shr    eax,0x8
c000e114:	83 e0 0f             	and    eax,0xf
c000e117:	c1 e0 02             	shl    eax,0x2
c000e11a:	f7 d8                	neg    eax
c000e11c:	98                   	cwde   
c000e11d:	83 ec 08             	sub    esp,0x8
c000e120:	50                   	push   eax
c000e121:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e125:	e8 2e a2 ff ff       	call   c0008358 <pbuf_header>
c000e12a:	83 c4 10             	add    esp,0x10
c000e12d:	0f b6 c0             	movzx  eax,al
c000e130:	85 c0                	test   eax,eax
c000e132:	75 10                	jne    c000e144 <tcp_input+0xa0>
c000e134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e138:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e13b:	0f b7 c0             	movzx  eax,ax
c000e13e:	83 f8 13             	cmp    eax,0x13
c000e141:	77 35                	ja     c000e178 <tcp_input+0xd4>
c000e143:	90                   	nop
c000e144:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e14a:	83 c0 01             	add    eax,0x1
c000e14d:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e153:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e159:	83 c0 01             	add    eax,0x1
c000e15c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e162:	83 ec 0c             	sub    esp,0xc
c000e165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e169:	e8 86 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e16e:	83 c4 10             	add    esp,0x10
c000e171:	e9 fa 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e176:	66 90                	xchg   ax,ax
c000e178:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e17d:	83 ec 08             	sub    esp,0x8
c000e180:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e184:	50                   	push   eax
c000e185:	e8 5e 5e 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c000e18a:	83 c4 10             	add    esp,0x10
c000e18d:	0f b6 c0             	movzx  eax,al
c000e190:	85 c0                	test   eax,eax
c000e192:	75 14                	jne    c000e1a8 <tcp_input+0x104>
c000e194:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e199:	25 f0 00 00 00       	and    eax,0xf0
c000e19e:	3d e0 00 00 00       	cmp    eax,0xe0
c000e1a3:	75 37                	jne    c000e1dc <tcp_input+0x138>
c000e1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1a8:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e1ae:	83 c0 01             	add    eax,0x1
c000e1b1:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e1b7:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e1bd:	83 c0 01             	add    eax,0x1
c000e1c0:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e1c6:	83 ec 0c             	sub    esp,0xc
c000e1c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1cd:	e8 22 a3 ff ff       	call   c00084f4 <pbuf_free>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	e9 96 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e1da:	66 90                	xchg   ax,ax
c000e1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e1e3:	0f b7 c0             	movzx  eax,ax
c000e1e6:	83 ec 0c             	sub    esp,0xc
c000e1e9:	50                   	push   eax
c000e1ea:	6a 06                	push   0x6
c000e1ec:	68 98 68 03 c0       	push   0xc0036898
c000e1f1:	68 90 68 03 c0       	push   0xc0036890
c000e1f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e1fa:	e8 11 51 00 00       	call   c0013310 <inet_chksum_pseudo>
c000e1ff:	83 c4 20             	add    esp,0x20
c000e202:	0f b7 c0             	movzx  eax,ax
c000e205:	85 c0                	test   eax,eax
c000e207:	74 33                	je     c000e23c <tcp_input+0x198>
c000e209:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e20f:	83 c0 01             	add    eax,0x1
c000e212:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e218:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e21e:	83 c0 01             	add    eax,0x1
c000e221:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e227:	83 ec 0c             	sub    esp,0xc
c000e22a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e22e:	e8 c1 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e233:	83 c4 10             	add    esp,0x10
c000e236:	e9 35 09 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e23b:	90                   	nop
c000e23c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e241:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e245:	0f b7 c0             	movzx  eax,ax
c000e248:	83 ec 0c             	sub    esp,0xc
c000e24b:	50                   	push   eax
c000e24c:	e8 97 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	0f b7 c0             	movzx  eax,ax
c000e257:	c1 e8 0c             	shr    eax,0xc
c000e25a:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e25e:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e263:	ba 00 00 00 00       	mov    edx,0x0
c000e268:	89 d1                	mov    ecx,edx
c000e26a:	29 c1                	sub    ecx,eax
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	c1 e0 02             	shl    eax,0x2
c000e271:	98                   	cwde   
c000e272:	83 ec 08             	sub    esp,0x8
c000e275:	50                   	push   eax
c000e276:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e27a:	e8 d9 a0 ff ff       	call   c0008358 <pbuf_header>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	0f b6 c0             	movzx  eax,al
c000e285:	85 c0                	test   eax,eax
c000e287:	74 33                	je     c000e2bc <tcp_input+0x218>
c000e289:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e28f:	83 c0 01             	add    eax,0x1
c000e292:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e298:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e29e:	83 c0 01             	add    eax,0x1
c000e2a1:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e2a7:	83 ec 0c             	sub    esp,0xc
c000e2aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ae:	e8 41 a2 ff ff       	call   c00084f4 <pbuf_free>
c000e2b3:	83 c4 10             	add    esp,0x10
c000e2b6:	e9 b5 08 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e2bb:	90                   	nop
c000e2bc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e2c4:	0f b7 c0             	movzx  eax,ax
c000e2c7:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e2cd:	83 ec 0c             	sub    esp,0xc
c000e2d0:	50                   	push   eax
c000e2d1:	e8 12 29 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	66 89 03             	mov    WORD PTR [ebx],ax
c000e2dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e2e1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e2e5:	0f b7 c0             	movzx  eax,ax
c000e2e8:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e2ee:	83 ec 0c             	sub    esp,0xc
c000e2f1:	50                   	push   eax
c000e2f2:	e8 f1 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e2f7:	83 c4 10             	add    esp,0x10
c000e2fa:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e2fe:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e306:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e30c:	83 ec 0c             	sub    esp,0xc
c000e30f:	50                   	push   eax
c000e310:	e8 f7 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e31b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e31e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e323:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e32b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e331:	83 ec 0c             	sub    esp,0xc
c000e334:	50                   	push   eax
c000e335:	e8 d2 28 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e33a:	83 c4 10             	add    esp,0x10
c000e33d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e340:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e343:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e348:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e34d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e351:	0f b7 c0             	movzx  eax,ax
c000e354:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e35a:	83 ec 0c             	sub    esp,0xc
c000e35d:	50                   	push   eax
c000e35e:	e8 85 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e363:	83 c4 10             	add    esp,0x10
c000e366:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e36a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e36f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e373:	0f b7 c0             	movzx  eax,ax
c000e376:	83 ec 0c             	sub    esp,0xc
c000e379:	50                   	push   eax
c000e37a:	e8 69 28 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e37f:	83 c4 10             	add    esp,0x10
c000e382:	83 e0 3f             	and    eax,0x3f
c000e385:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e391:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e396:	0f b6 c0             	movzx  eax,al
c000e399:	83 e0 03             	and    eax,0x3
c000e39c:	0f 95 c0             	setne  al
c000e39f:	0f b6 c0             	movzx  eax,al
c000e3a2:	01 d0                	add    eax,edx
c000e3a4:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e3aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3b2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e3b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3bb:	e9 50 01 00 00       	jmp    c000e510 <tcp_input+0x46c>
c000e3c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3c7:	85 c0                	test   eax,eax
c000e3c9:	75 15                	jne    c000e3e0 <tcp_input+0x33c>
c000e3cb:	83 ec 08             	sub    esp,0x8
c000e3ce:	68 70 07 03 c0       	push   0xc0030770
c000e3d3:	68 06 fd 02 c0       	push   0xc002fd06
c000e3d8:	e8 ab 19 01 00       	call   c001fd88 <CPrintf>
c000e3dd:	83 c4 10             	add    esp,0x10
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e3e7:	83 f8 0a             	cmp    eax,0xa
c000e3ea:	75 18                	jne    c000e404 <tcp_input+0x360>
c000e3ec:	83 ec 08             	sub    esp,0x8
c000e3ef:	68 98 07 03 c0       	push   0xc0030798
c000e3f4:	68 06 fd 02 c0       	push   0xc002fd06
c000e3f9:	e8 8a 19 01 00       	call   c001fd88 <CPrintf>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e408:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e40b:	83 f8 01             	cmp    eax,0x1
c000e40e:	75 18                	jne    c000e428 <tcp_input+0x384>
c000e410:	83 ec 08             	sub    esp,0x8
c000e413:	68 c4 07 03 c0       	push   0xc00307c4
c000e418:	68 06 fd 02 c0       	push   0xc002fd06
c000e41d:	e8 66 19 01 00       	call   c001fd88 <CPrintf>
c000e422:	83 c4 10             	add    esp,0x10
c000e425:	8d 76 00             	lea    esi,[esi+0x0]
c000e428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e42c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e430:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e435:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e438:	0f b7 d2             	movzx  edx,dx
c000e43b:	0f b7 c0             	movzx  eax,ax
c000e43e:	39 c2                	cmp    edx,eax
c000e440:	0f 85 b6 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e44d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e452:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e456:	0f b7 d2             	movzx  edx,dx
c000e459:	0f b7 c0             	movzx  eax,ax
c000e45c:	39 c2                	cmp    edx,eax
c000e45e:	0f 85 98 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e464:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e468:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e46b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e470:	39 c2                	cmp    edx,eax
c000e472:	0f 85 84 00 00 00    	jne    c000e4fc <tcp_input+0x458>
c000e478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e47c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e47e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e483:	39 c2                	cmp    edx,eax
c000e485:	75 75                	jne    c000e4fc <tcp_input+0x458>
c000e487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e48b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e48e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e492:	75 18                	jne    c000e4ac <tcp_input+0x408>
c000e494:	83 ec 08             	sub    esp,0x8
c000e497:	68 ec 07 03 c0       	push   0xc00307ec
c000e49c:	68 06 fd 02 c0       	push   0xc002fd06
c000e4a1:	e8 e2 18 01 00       	call   c001fd88 <CPrintf>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e4ac:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e4b1:	74 25                	je     c000e4d8 <tcp_input+0x434>
c000e4b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4be:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4c1:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4d2:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e4d7:	90                   	nop
c000e4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4df:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e4e3:	75 3b                	jne    c000e520 <tcp_input+0x47c>
c000e4e5:	83 ec 08             	sub    esp,0x8
c000e4e8:	68 18 08 03 c0       	push   0xc0030818
c000e4ed:	68 06 fd 02 c0       	push   0xc002fd06
c000e4f2:	e8 91 18 01 00       	call   c001fd88 <CPrintf>
c000e4f7:	83 c4 10             	add    esp,0x10
c000e4fa:	eb 24                	jmp    c000e520 <tcp_input+0x47c>
c000e4fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e508:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e50b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e50f:	90                   	nop
c000e510:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e515:	0f 85 a5 fe ff ff    	jne    c000e3c0 <tcp_input+0x31c>
c000e51b:	eb 07                	jmp    c000e524 <tcp_input+0x480>
c000e51d:	8d 76 00             	lea    esi,[esi+0x0]
c000e520:	90                   	nop
c000e521:	8d 76 00             	lea    esi,[esi+0x0]
c000e524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e529:	0f 85 89 01 00 00    	jne    c000e6b8 <tcp_input+0x614>
c000e52f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e538:	e9 ab 00 00 00       	jmp    c000e5e8 <tcp_input+0x544>
c000e53d:	8d 76 00             	lea    esi,[esi+0x0]
c000e540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e544:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e547:	83 f8 0a             	cmp    eax,0xa
c000e54a:	74 18                	je     c000e564 <tcp_input+0x4c0>
c000e54c:	83 ec 08             	sub    esp,0x8
c000e54f:	68 44 08 03 c0       	push   0xc0030844
c000e554:	68 06 fd 02 c0       	push   0xc002fd06
c000e559:	e8 2a 18 01 00       	call   c001fd88 <CPrintf>
c000e55e:	83 c4 10             	add    esp,0x10
c000e561:	8d 76 00             	lea    esi,[esi+0x0]
c000e564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e568:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e56c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e571:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e574:	0f b7 d2             	movzx  edx,dx
c000e577:	0f b7 c0             	movzx  eax,ax
c000e57a:	39 c2                	cmp    edx,eax
c000e57c:	75 5e                	jne    c000e5dc <tcp_input+0x538>
c000e57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e582:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e585:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e58a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e58e:	0f b7 d2             	movzx  edx,dx
c000e591:	0f b7 c0             	movzx  eax,ax
c000e594:	39 c2                	cmp    edx,eax
c000e596:	75 44                	jne    c000e5dc <tcp_input+0x538>
c000e598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e59c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e59f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e5a4:	39 c2                	cmp    edx,eax
c000e5a6:	75 34                	jne    c000e5dc <tcp_input+0x538>
c000e5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5ae:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e5b3:	39 c2                	cmp    edx,eax
c000e5b5:	75 25                	jne    c000e5dc <tcp_input+0x538>
c000e5b7:	83 ec 0c             	sub    esp,0xc
c000e5ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5be:	e8 81 d4 ff ff       	call   c000ba44 <tcp_timewait_input>
c000e5c3:	83 c4 10             	add    esp,0x10
c000e5c6:	83 ec 0c             	sub    esp,0xc
c000e5c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5cd:	e8 22 9f ff ff       	call   c00084f4 <pbuf_free>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	e9 96 05 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e5da:	66 90                	xchg   ax,ax
c000e5dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e5e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5e7:	90                   	nop
c000e5e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5ed:	0f 85 4d ff ff ff    	jne    c000e540 <tcp_input+0x49c>
c000e5f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5fb:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e604:	eb 52                	jmp    c000e658 <tcp_input+0x5b4>
c000e606:	66 90                	xchg   ax,ax
c000e608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e60c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e60f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e614:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e618:	0f b7 d2             	movzx  edx,dx
c000e61b:	0f b7 c0             	movzx  eax,ax
c000e61e:	39 c2                	cmp    edx,eax
c000e620:	75 22                	jne    c000e644 <tcp_input+0x5a0>
c000e622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e626:	8b 10                	mov    edx,DWORD PTR [eax]
c000e628:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e62d:	39 c2                	cmp    edx,eax
c000e62f:	74 2f                	je     c000e660 <tcp_input+0x5bc>
c000e631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e635:	85 c0                	test   eax,eax
c000e637:	74 27                	je     c000e660 <tcp_input+0x5bc>
c000e639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e63d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e63f:	85 c0                	test   eax,eax
c000e641:	74 1d                	je     c000e660 <tcp_input+0x5bc>
c000e643:	90                   	nop
c000e644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e648:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e650:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e653:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e657:	90                   	nop
c000e658:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e65d:	75 a9                	jne    c000e608 <tcp_input+0x564>
c000e65f:	90                   	nop
c000e660:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e665:	74 51                	je     c000e6b8 <tcp_input+0x614>
c000e667:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e66c:	74 26                	je     c000e694 <tcp_input+0x5f0>
c000e66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e675:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e679:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e67c:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e682:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e68d:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e692:	66 90                	xchg   ax,ax
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e69b:	e8 60 ee ff ff       	call   c000d500 <tcp_listen_input>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 ec 0c             	sub    esp,0xc
c000e6a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e6aa:	e8 45 9e ff ff       	call   c00084f4 <pbuf_free>
c000e6af:	83 c4 10             	add    esp,0x10
c000e6b2:	e9 b9 04 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e6b7:	90                   	nop
c000e6b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e6bd:	0f 84 19 04 00 00    	je     c000eadc <tcp_input+0xa38>
c000e6c3:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6d4:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6de:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e6e3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e6e8:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e6ed:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e6f7:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e6fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e702:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e708:	85 c0                	test   eax,eax
c000e70a:	0f 84 b4 00 00 00    	je     c000e7c4 <tcp_input+0x720>
c000e710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e714:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e71a:	85 c0                	test   eax,eax
c000e71c:	74 2e                	je     c000e74c <tcp_input+0x6a8>
c000e71e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e722:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e728:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e72c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e736:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e739:	6a 00                	push   0x0
c000e73b:	51                   	push   ecx
c000e73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e740:	52                   	push   edx
c000e741:	ff d0                	call   eax
c000e743:	83 c4 10             	add    esp,0x10
c000e746:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e74a:	eb 20                	jmp    c000e76c <tcp_input+0x6c8>
c000e74c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e750:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e756:	6a 00                	push   0x0
c000e758:	50                   	push   eax
c000e759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e75d:	6a 00                	push   0x0
c000e75f:	e8 b8 c8 ff ff       	call   c000b01c <tcp_recv_null>
c000e764:	83 c4 10             	add    esp,0x10
c000e767:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e76b:	90                   	nop
c000e76c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e771:	85 c0                	test   eax,eax
c000e773:	75 13                	jne    c000e788 <tcp_input+0x6e4>
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e783:	eb 3f                	jmp    c000e7c4 <tcp_input+0x720>
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e78d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e790:	74 0e                	je     c000e7a0 <tcp_input+0x6fc>
c000e792:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e798:	0f b7 c0             	movzx  eax,ax
c000e79b:	85 c0                	test   eax,eax
c000e79d:	74 25                	je     c000e7c4 <tcp_input+0x720>
c000e79f:	90                   	nop
c000e7a0:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e7a6:	83 c0 01             	add    eax,0x1
c000e7a9:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e7af:	83 ec 0c             	sub    esp,0xc
c000e7b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7b6:	e8 39 9d ff ff       	call   c00084f4 <pbuf_free>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	e9 ad 03 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000e7c3:	90                   	nop
c000e7c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c8:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e7cd:	83 ec 0c             	sub    esp,0xc
c000e7d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7d4:	e8 33 ef ff ff       	call   c000d70c <tcp_process>
c000e7d9:	83 c4 10             	add    esp,0x10
c000e7dc:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7e0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7e5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7e8:	0f 84 9a 02 00 00    	je     c000ea88 <tcp_input+0x9e4>
c000e7ee:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e7f3:	0f b6 c0             	movzx  eax,al
c000e7f6:	83 e0 08             	and    eax,0x8
c000e7f9:	74 59                	je     c000e854 <tcp_input+0x7b0>
c000e7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ff:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e805:	85 c0                	test   eax,eax
c000e807:	74 1f                	je     c000e828 <tcp_input+0x784>
c000e809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e813:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e817:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e81a:	83 ec 08             	sub    esp,0x8
c000e81d:	6a f5                	push   0xfffffff5
c000e81f:	52                   	push   edx
c000e820:	ff d0                	call   eax
c000e822:	83 c4 10             	add    esp,0x10
c000e825:	8d 76 00             	lea    esi,[esi+0x0]
c000e828:	83 ec 08             	sub    esp,0x8
c000e82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82f:	68 70 68 03 c0       	push   0xc0036870
c000e834:	e8 ff c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	83 ec 08             	sub    esp,0x8
c000e83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e843:	6a 02                	push   0x2
c000e845:	e8 ee 93 ff ff       	call   c0007c38 <memp_free>
c000e84a:	83 c4 10             	add    esp,0x10
c000e84d:	e9 46 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e852:	66 90                	xchg   ax,ax
c000e854:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e859:	0f b6 c0             	movzx  eax,al
c000e85c:	83 e0 10             	and    eax,0x10
c000e85f:	74 2b                	je     c000e88c <tcp_input+0x7e8>
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e868:	68 70 68 03 c0       	push   0xc0036870
c000e86d:	e8 c6 c2 ff ff       	call   c000ab38 <tcp_pcb_remove>
c000e872:	83 c4 10             	add    esp,0x10
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87c:	6a 02                	push   0x2
c000e87e:	e8 b5 93 ff ff       	call   c0007c38 <memp_free>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	e9 0d 02 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e88b:	90                   	nop
c000e88c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e891:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e895:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e898:	0f b7 c0             	movzx  eax,ax
c000e89b:	85 c0                	test   eax,eax
c000e89d:	74 55                	je     c000e8f4 <tcp_input+0x850>
c000e89f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8a3:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e8a9:	85 c0                	test   eax,eax
c000e8ab:	74 2f                	je     c000e8dc <tcp_input+0x838>
c000e8ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8b1:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e8b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8bb:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e8be:	0f b7 c8             	movzx  ecx,ax
c000e8c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e8c8:	83 ec 04             	sub    esp,0x4
c000e8cb:	51                   	push   ecx
c000e8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8d0:	50                   	push   eax
c000e8d1:	ff d2                	call   edx
c000e8d3:	83 c4 10             	add    esp,0x10
c000e8d6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8da:	eb 08                	jmp    c000e8e4 <tcp_input+0x840>
c000e8dc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8e9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8ec:	0f 84 9a 01 00 00    	je     c000ea8c <tcp_input+0x9e8>
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e8f9:	85 c0                	test   eax,eax
c000e8fb:	0f 84 f3 00 00 00    	je     c000e9f4 <tcp_input+0x950>
c000e901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e905:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e90b:	85 c0                	test   eax,eax
c000e90d:	74 15                	je     c000e924 <tcp_input+0x880>
c000e90f:	83 ec 08             	sub    esp,0x8
c000e912:	68 dd 08 03 c0       	push   0xc00308dd
c000e917:	68 06 fd 02 c0       	push   0xc002fd06
c000e91c:	e8 67 14 01 00       	call   c001fd88 <CPrintf>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e928:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e92b:	0f b6 c0             	movzx  eax,al
c000e92e:	83 e0 10             	and    eax,0x10
c000e931:	74 25                	je     c000e958 <tcp_input+0x8b4>
c000e933:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e938:	83 ec 0c             	sub    esp,0xc
c000e93b:	50                   	push   eax
c000e93c:	e8 b3 9b ff ff       	call   c00084f4 <pbuf_free>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e94b:	e8 c4 ca ff ff       	call   c000b414 <tcp_abort>
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	e9 40 01 00 00       	jmp    c000ea98 <tcp_input+0x9f4>
c000e958:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e95d:	0f b6 c0             	movzx  eax,al
c000e960:	83 e0 08             	and    eax,0x8
c000e963:	74 13                	je     c000e978 <tcp_input+0x8d4>
c000e965:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e96a:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e96d:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e972:	83 ca 01             	or     edx,0x1
c000e975:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e97c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e982:	85 c0                	test   eax,eax
c000e984:	74 2a                	je     c000e9b0 <tcp_input+0x90c>
c000e986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e98a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e990:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e99a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e99d:	6a 00                	push   0x0
c000e99f:	51                   	push   ecx
c000e9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9a4:	52                   	push   edx
c000e9a5:	ff d0                	call   eax
c000e9a7:	83 c4 10             	add    esp,0x10
c000e9aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ae:	eb 1c                	jmp    c000e9cc <tcp_input+0x928>
c000e9b0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e9b5:	6a 00                	push   0x0
c000e9b7:	50                   	push   eax
c000e9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9bc:	6a 00                	push   0x0
c000e9be:	e8 59 c6 ff ff       	call   c000b01c <tcp_recv_null>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e9ca:	66 90                	xchg   ax,ax
c000e9cc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9d1:	83 f8 f6             	cmp    eax,0xfffffff6
c000e9d4:	0f 84 b6 00 00 00    	je     c000ea90 <tcp_input+0x9ec>
c000e9da:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e9df:	85 c0                	test   eax,eax
c000e9e1:	74 11                	je     c000e9f4 <tcp_input+0x950>
c000e9e3:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ed:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e9f3:	90                   	nop
c000e9f4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e9f9:	0f b6 c0             	movzx  eax,al
c000e9fc:	83 e0 20             	and    eax,0x20
c000e9ff:	74 6b                	je     c000ea6c <tcp_input+0x9c8>
c000ea01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea05:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea08:	0f b7 c0             	movzx  eax,ax
c000ea0b:	3d 60 08 00 00       	cmp    eax,0x860
c000ea10:	74 12                	je     c000ea24 <tcp_input+0x980>
c000ea12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea16:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ea19:	83 c0 01             	add    eax,0x1
c000ea1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea20:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000ea24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea28:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea2e:	85 c0                	test   eax,eax
c000ea30:	74 26                	je     c000ea58 <tcp_input+0x9b4>
c000ea32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea36:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ea3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea40:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ea43:	6a 00                	push   0x0
c000ea45:	6a 00                	push   0x0
c000ea47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea4b:	52                   	push   edx
c000ea4c:	ff d0                	call   eax
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ea55:	eb 09                	jmp    c000ea60 <tcp_input+0x9bc>
c000ea57:	90                   	nop
c000ea58:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000ea5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea60:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000ea65:	83 f8 f6             	cmp    eax,0xfffffff6
c000ea68:	74 2a                	je     c000ea94 <tcp_input+0x9f0>
c000ea6a:	66 90                	xchg   ax,ax
c000ea6c:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea7d:	e8 a2 15 00 00       	call   c0010024 <tcp_output>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	eb 11                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea87:	90                   	nop
c000ea88:	90                   	nop
c000ea89:	eb 0d                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8b:	90                   	nop
c000ea8c:	90                   	nop
c000ea8d:	eb 09                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea8f:	90                   	nop
c000ea90:	90                   	nop
c000ea91:	eb 05                	jmp    c000ea98 <tcp_input+0x9f4>
c000ea93:	90                   	nop
c000ea94:	90                   	nop
c000ea95:	8d 76 00             	lea    esi,[esi+0x0]
c000ea98:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000eaa2:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000eaac:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eab1:	85 c0                	test   eax,eax
c000eab3:	0f 84 b7 00 00 00    	je     c000eb70 <tcp_input+0xacc>
c000eab9:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	50                   	push   eax
c000eac2:	e8 2d 9a ff ff       	call   c00084f4 <pbuf_free>
c000eac7:	83 c4 10             	add    esp,0x10
c000eaca:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ead4:	e9 97 00 00 00       	jmp    c000eb70 <tcp_input+0xacc>
c000ead9:	8d 76 00             	lea    esi,[esi+0x0]
c000eadc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eae1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000eae5:	0f b7 c0             	movzx  eax,ax
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	50                   	push   eax
c000eaec:	e8 f7 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eaf1:	83 c4 10             	add    esp,0x10
c000eaf4:	0f b7 c0             	movzx  eax,ax
c000eaf7:	83 e0 04             	and    eax,0x4
c000eafa:	75 64                	jne    c000eb60 <tcp_input+0xabc>
c000eafc:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000eb02:	83 c0 01             	add    eax,0x1
c000eb05:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000eb0b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000eb11:	83 c0 01             	add    eax,0x1
c000eb14:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000eb1a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb1f:	66 8b 00             	mov    ax,WORD PTR [eax]
c000eb22:	0f b7 c8             	movzx  ecx,ax
c000eb25:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000eb2a:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000eb2e:	0f b7 d0             	movzx  edx,ax
c000eb31:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000eb37:	0f b7 d8             	movzx  ebx,ax
c000eb3a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000eb3f:	01 c3                	add    ebx,eax
c000eb41:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000eb46:	83 ec 08             	sub    esp,0x8
c000eb49:	51                   	push   ecx
c000eb4a:	52                   	push   edx
c000eb4b:	68 90 68 03 c0       	push   0xc0036890
c000eb50:	68 98 68 03 c0       	push   0xc0036898
c000eb55:	53                   	push   ebx
c000eb56:	50                   	push   eax
c000eb57:	e8 54 19 00 00       	call   c00104b0 <tcp_rst>
c000eb5c:	83 c4 20             	add    esp,0x20
c000eb5f:	90                   	nop
c000eb60:	83 ec 0c             	sub    esp,0xc
c000eb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb67:	e8 88 99 ff ff       	call   c00084f4 <pbuf_free>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	90                   	nop
c000eb70:	83 c4 18             	add    esp,0x18
c000eb73:	5b                   	pop    ebx
c000eb74:	c3                   	ret    
c000eb75:	66 90                	xchg   ax,ax
c000eb77:	90                   	nop

c000eb78 <tcp_output_alloc_header>:
c000eb78:	83 ec 2c             	sub    esp,0x2c
c000eb7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb83:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000eb88:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eb8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb95:	01 d0                	add    eax,edx
c000eb97:	83 c0 14             	add    eax,0x14
c000eb9a:	0f b7 c0             	movzx  eax,ax
c000eb9d:	83 ec 04             	sub    esp,0x4
c000eba0:	6a 00                	push   0x0
c000eba2:	50                   	push   eax
c000eba3:	6a 01                	push   0x1
c000eba5:	e8 22 9b ff ff       	call   c00086cc <pbuf_alloc>
c000ebaa:	83 c4 10             	add    esp,0x10
c000ebad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebb1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ebb6:	0f 84 10 01 00 00    	je     c000eccc <tcp_output_alloc_header+0x154>
c000ebbc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ebc1:	8d 50 13             	lea    edx,[eax+0x13]
c000ebc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ebcc:	0f b7 c0             	movzx  eax,ax
c000ebcf:	39 c2                	cmp    edx,eax
c000ebd1:	7c 15                	jl     c000ebe8 <tcp_output_alloc_header+0x70>
c000ebd3:	83 ec 08             	sub    esp,0x8
c000ebd6:	68 20 09 03 c0       	push   0xc0030920
c000ebdb:	68 06 fd 02 c0       	push   0xc002fd06
c000ebe0:	e8 a3 11 01 00       	call   c001fd88 <CPrintf>
c000ebe5:	83 c4 10             	add    esp,0x10
c000ebe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ebf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ebfa:	0f b7 c0             	movzx  eax,ax
c000ebfd:	83 ec 0c             	sub    esp,0xc
c000ec00:	50                   	push   eax
c000ec01:	e8 e2 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec0d:	66 89 02             	mov    WORD PTR [edx],ax
c000ec10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec14:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec18:	0f b7 c0             	movzx  eax,ax
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	50                   	push   eax
c000ec1f:	e8 c4 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec24:	83 c4 10             	add    esp,0x10
c000ec27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec2b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ec2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ec37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec3e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ec41:	83 ec 0c             	sub    esp,0xc
c000ec44:	50                   	push   eax
c000ec45:	e8 c2 1f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ec4a:	83 c4 10             	add    esp,0x10
c000ec4d:	89 c2                	mov    edx,eax
c000ec4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ec56:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ec5b:	c1 e8 02             	shr    eax,0x2
c000ec5e:	83 c0 05             	add    eax,0x5
c000ec61:	c1 e0 0c             	shl    eax,0xc
c000ec64:	83 c8 10             	or     eax,0x10
c000ec67:	0f b7 c0             	movzx  eax,ax
c000ec6a:	83 ec 0c             	sub    esp,0xc
c000ec6d:	50                   	push   eax
c000ec6e:	e8 75 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec7a:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ec7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec82:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ec86:	0f b7 c0             	movzx  eax,ax
c000ec89:	83 ec 0c             	sub    esp,0xc
c000ec8c:	50                   	push   eax
c000ec8d:	e8 56 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec92:	83 c4 10             	add    esp,0x10
c000ec95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec99:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ec9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca1:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eca7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecab:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ecb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecb5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ecb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecbc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ecc0:	0f b7 c0             	movzx  eax,ax
c000ecc3:	01 c2                	add    edx,eax
c000ecc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eccc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ecd0:	83 c4 2c             	add    esp,0x2c
c000ecd3:	c3                   	ret    

c000ecd4 <tcp_create_segment>:
c000ecd4:	53                   	push   ebx
c000ecd5:	83 ec 28             	sub    esp,0x28
c000ecd8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ece0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ece4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ece8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eced:	c1 e0 02             	shl    eax,0x2
c000ecf0:	83 e0 04             	and    eax,0x4
c000ecf3:	88 c2                	mov    dl,al
c000ecf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ecfa:	83 e0 02             	and    eax,0x2
c000ecfd:	74 05                	je     c000ed04 <tcp_create_segment+0x30>
c000ecff:	b0 0c                	mov    al,0xc
c000ed01:	eb 05                	jmp    c000ed08 <tcp_create_segment+0x34>
c000ed03:	90                   	nop
c000ed04:	b0 00                	mov    al,0x0
c000ed06:	66 90                	xchg   ax,ax
c000ed08:	01 d0                	add    eax,edx
c000ed0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ed0e:	83 ec 0c             	sub    esp,0xc
c000ed11:	6a 04                	push   0x4
c000ed13:	e8 f4 8d ff ff       	call   c0007b0c <memp_malloc>
c000ed18:	83 c4 10             	add    esp,0x10
c000ed1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed1f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed24:	75 1a                	jne    c000ed40 <tcp_create_segment+0x6c>
c000ed26:	83 ec 0c             	sub    esp,0xc
c000ed29:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed2d:	e8 c2 97 ff ff       	call   c00084f4 <pbuf_free>
c000ed32:	83 c4 10             	add    esp,0x10
c000ed35:	b8 00 00 00 00       	mov    eax,0x0
c000ed3a:	e9 31 01 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000ed3f:	90                   	nop
c000ed40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed44:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ed48:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ed4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed59:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ed60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed64:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ed67:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed6c:	89 d1                	mov    ecx,edx
c000ed6e:	29 c1                	sub    ecx,eax
c000ed70:	89 c8                	mov    eax,ecx
c000ed72:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed76:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed7a:	83 ec 08             	sub    esp,0x8
c000ed7d:	6a 14                	push   0x14
c000ed7f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ed83:	e8 d0 95 ff ff       	call   c0008358 <pbuf_header>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	0f b6 c0             	movzx  eax,al
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	74 2a                	je     c000edbc <tcp_create_segment+0xe8>
c000ed92:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ed98:	83 c0 01             	add    eax,0x1
c000ed9b:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eda8:	e8 bf b3 ff ff       	call   c000a16c <tcp_seg_free>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	b8 00 00 00 00       	mov    eax,0x0
c000edb5:	e9 b6 00 00 00       	jmp    c000ee70 <tcp_create_segment+0x19c>
c000edba:	66 90                	xchg   ax,ax
c000edbc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000edcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000edd4:	0f b7 c0             	movzx  eax,ax
c000edd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eddb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	50                   	push   eax
c000ede2:	e8 01 1e ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ede7:	83 c4 10             	add    esp,0x10
c000edea:	66 89 03             	mov    WORD PTR [ebx],ax
c000eded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf1:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000edf5:	0f b7 c0             	movzx  eax,ax
c000edf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000edff:	83 ec 0c             	sub    esp,0xc
c000ee02:	50                   	push   eax
c000ee03:	e8 e0 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee08:	83 c4 10             	add    esp,0x10
c000ee0b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ee0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee13:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee16:	83 ec 0c             	sub    esp,0xc
c000ee19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ee1d:	e8 ea 1d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ee22:	83 c4 10             	add    esp,0x10
c000ee25:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ee28:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ee2d:	c1 e8 02             	shr    eax,0x2
c000ee30:	0f b6 c0             	movzx  eax,al
c000ee33:	83 c0 05             	add    eax,0x5
c000ee36:	c1 e0 0c             	shl    eax,0xc
c000ee39:	89 c2                	mov    edx,eax
c000ee3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ee40:	09 d0                	or     eax,edx
c000ee42:	0f b7 c0             	movzx  eax,ax
c000ee45:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee49:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	50                   	push   eax
c000ee50:	e8 93 1d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ee63:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ee69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee70:	83 c4 28             	add    esp,0x28
c000ee73:	5b                   	pop    ebx
c000ee74:	c3                   	ret    
c000ee75:	8d 76 00             	lea    esi,[esi+0x0]

c000ee78 <tcp_pbuf_prealloc>:
c000ee78:	53                   	push   ebx
c000ee79:	83 ec 28             	sub    esp,0x28
c000ee7c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee84:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ee88:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ee8c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ee91:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ee96:	88 d8                	mov    al,bl
c000ee98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee9c:	88 c8                	mov    al,cl
c000ee9e:	88 04 24             	mov    BYTE PTR [esp],al
c000eea1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eea5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000eeaa:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eeaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eeb4:	39 c2                	cmp    edx,eax
c000eeb6:	73 64                	jae    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeb8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000eebd:	83 e0 02             	and    eax,0x2
c000eec0:	75 2e                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eec2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eec6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eec9:	0f b6 c0             	movzx  eax,al
c000eecc:	83 e0 40             	and    eax,0x40
c000eecf:	75 4b                	jne    c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eed1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eed5:	85 c0                	test   eax,eax
c000eed7:	74 17                	je     c000eef0 <tcp_pbuf_prealloc+0x78>
c000eed9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eedd:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eee0:	85 c0                	test   eax,eax
c000eee2:	75 0c                	jne    c000eef0 <tcp_pbuf_prealloc+0x78>
c000eee4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eee8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eeeb:	85 c0                	test   eax,eax
c000eeed:	74 2d                	je     c000ef1c <tcp_pbuf_prealloc+0xa4>
c000eeef:	90                   	nop
c000eef0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eef5:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000eefb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ef00:	39 c2                	cmp    edx,eax
c000ef02:	7d 0c                	jge    c000ef10 <tcp_pbuf_prealloc+0x98>
c000ef04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef08:	05 18 02 00 00       	add    eax,0x218
c000ef0d:	eb 05                	jmp    c000ef14 <tcp_pbuf_prealloc+0x9c>
c000ef0f:	90                   	nop
c000ef10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef14:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ef19:	8d 76 00             	lea    esi,[esi+0x0]
c000ef1c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ef21:	83 ec 04             	sub    esp,0x4
c000ef24:	6a 00                	push   0x0
c000ef26:	50                   	push   eax
c000ef27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef2b:	e8 9c 97 ff ff       	call   c00086cc <pbuf_alloc>
c000ef30:	83 c4 10             	add    esp,0x10
c000ef33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef37:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef3c:	75 0a                	jne    c000ef48 <tcp_pbuf_prealloc+0xd0>
c000ef3e:	b8 00 00 00 00       	mov    eax,0x0
c000ef43:	eb 5b                	jmp    c000efa0 <tcp_pbuf_prealloc+0x128>
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef4e:	85 c0                	test   eax,eax
c000ef50:	74 16                	je     c000ef68 <tcp_pbuf_prealloc+0xf0>
c000ef52:	83 ec 08             	sub    esp,0x8
c000ef55:	68 a4 0b 03 c0       	push   0xc0030ba4
c000ef5a:	68 06 fd 02 c0       	push   0xc002fd06
c000ef5f:	e8 24 0e 01 00       	call   c001fd88 <CPrintf>
c000ef64:	83 c4 10             	add    esp,0x10
c000ef67:	90                   	nop
c000ef68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ef70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef74:	89 d1                	mov    ecx,edx
c000ef76:	29 c1                	sub    ecx,eax
c000ef78:	89 c8                	mov    eax,ecx
c000ef7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef7e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef89:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ef8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef91:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef98:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ef9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efa0:	83 c4 28             	add    esp,0x28
c000efa3:	5b                   	pop    ebx
c000efa4:	c3                   	ret    
c000efa5:	8d 76 00             	lea    esi,[esi+0x0]

c000efa8 <tcp_write_checks>:
c000efa8:	83 ec 1c             	sub    esp,0x1c
c000efab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efaf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000efb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efbb:	83 f8 04             	cmp    eax,0x4
c000efbe:	74 2c                	je     c000efec <tcp_write_checks+0x44>
c000efc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efc4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efc7:	83 f8 07             	cmp    eax,0x7
c000efca:	74 20                	je     c000efec <tcp_write_checks+0x44>
c000efcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efd3:	83 f8 02             	cmp    eax,0x2
c000efd6:	74 14                	je     c000efec <tcp_write_checks+0x44>
c000efd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efdc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000efdf:	83 f8 03             	cmp    eax,0x3
c000efe2:	74 08                	je     c000efec <tcp_write_checks+0x44>
c000efe4:	b0 f3                	mov    al,0xf3
c000efe6:	e9 f9 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000efeb:	90                   	nop
c000efec:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eff1:	85 c0                	test   eax,eax
c000eff3:	75 07                	jne    c000effc <tcp_write_checks+0x54>
c000eff5:	b0 00                	mov    al,0x0
c000eff7:	e9 e8 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000effc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f000:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f004:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f009:	0f b7 c0             	movzx  eax,ax
c000f00c:	39 c2                	cmp    edx,eax
c000f00e:	76 1c                	jbe    c000f02c <tcp_write_checks+0x84>
c000f010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f014:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f017:	83 c8 80             	or     eax,0xffffff80
c000f01a:	88 c2                	mov    dl,al
c000f01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f020:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f023:	b0 ff                	mov    al,0xff
c000f025:	e9 ba 00 00 00       	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f02a:	66 90                	xchg   ax,ax
c000f02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f030:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f033:	0f b7 c0             	movzx  eax,ax
c000f036:	83 f8 01             	cmp    eax,0x1
c000f039:	77 11                	ja     c000f04c <tcp_write_checks+0xa4>
c000f03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03f:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f042:	0f b7 c0             	movzx  eax,ax
c000f045:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f04a:	76 28                	jbe    c000f074 <tcp_write_checks+0xcc>
c000f04c:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f052:	83 c0 01             	add    eax,0x1
c000f055:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f05b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f05f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f062:	83 c8 80             	or     eax,0xffffff80
c000f065:	88 c2                	mov    dl,al
c000f067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f06b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f06e:	b0 ff                	mov    al,0xff
c000f070:	eb 72                	jmp    c000f0e4 <tcp_write_checks+0x13c>
c000f072:	66 90                	xchg   ax,ax
c000f074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f078:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f07b:	0f b7 c0             	movzx  eax,ax
c000f07e:	85 c0                	test   eax,eax
c000f080:	74 2e                	je     c000f0b0 <tcp_write_checks+0x108>
c000f082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f086:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f089:	85 c0                	test   eax,eax
c000f08b:	75 53                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f08d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f091:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f094:	85 c0                	test   eax,eax
c000f096:	75 48                	jne    c000f0e0 <tcp_write_checks+0x138>
c000f098:	83 ec 08             	sub    esp,0x8
c000f09b:	68 50 09 03 c0       	push   0xc0030950
c000f0a0:	68 06 fd 02 c0       	push   0xc002fd06
c000f0a5:	e8 de 0c 01 00       	call   c001fd88 <CPrintf>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	eb 31                	jmp    c000f0e0 <tcp_write_checks+0x138>
c000f0af:	90                   	nop
c000f0b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0b4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f0b7:	85 c0                	test   eax,eax
c000f0b9:	75 0d                	jne    c000f0c8 <tcp_write_checks+0x120>
c000f0bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0bf:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0c2:	85 c0                	test   eax,eax
c000f0c4:	74 1a                	je     c000f0e0 <tcp_write_checks+0x138>
c000f0c6:	66 90                	xchg   ax,ax
c000f0c8:	83 ec 08             	sub    esp,0x8
c000f0cb:	68 8c 09 03 c0       	push   0xc003098c
c000f0d0:	68 06 fd 02 c0       	push   0xc002fd06
c000f0d5:	e8 ae 0c 01 00       	call   c001fd88 <CPrintf>
c000f0da:	83 c4 10             	add    esp,0x10
c000f0dd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e0:	b0 00                	mov    al,0x0
c000f0e2:	66 90                	xchg   ax,ax
c000f0e4:	83 c4 1c             	add    esp,0x1c
c000f0e7:	c3                   	ret    

c000f0e8 <tcp_write>:
c000f0e8:	56                   	push   esi
c000f0e9:	53                   	push   ebx
c000f0ea:	83 ec 54             	sub    esp,0x54
c000f0ed:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f0f1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000f0f5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f0fa:	88 d0                	mov    al,dl
c000f0fc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f100:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f108:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f110:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f118:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f120:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f128:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f12f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f134:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f139:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f140:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f147:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f14c:	75 1e                	jne    c000f16c <tcp_write+0x84>
c000f14e:	83 ec 08             	sub    esp,0x8
c000f151:	68 c0 09 03 c0       	push   0xc00309c0
c000f156:	68 06 fd 02 c0       	push   0xc002fd06
c000f15b:	e8 28 0c 01 00       	call   c001fd88 <CPrintf>
c000f160:	83 c4 10             	add    esp,0x10
c000f163:	b0 f2                	mov    al,0xf2
c000f165:	e9 16 08 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f16a:	66 90                	xchg   ax,ax
c000f16c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f171:	83 ec 08             	sub    esp,0x8
c000f174:	50                   	push   eax
c000f175:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f179:	e8 2a fe ff ff       	call   c000efa8 <tcp_write_checks>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f185:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f18a:	85 c0                	test   eax,eax
c000f18c:	74 0a                	je     c000f198 <tcp_write+0xb0>
c000f18e:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f192:	e9 e9 07 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f197:	90                   	nop
c000f198:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f19c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f19f:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1a8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ab:	85 c0                	test   eax,eax
c000f1ad:	0f 84 79 02 00 00    	je     c000f42c <tcp_write+0x344>
c000f1b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1b7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f1ba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1be:	eb 0c                	jmp    c000f1cc <tcp_write+0xe4>
c000f1c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f1ca:	66 90                	xchg   ax,ax
c000f1cc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d2:	85 c0                	test   eax,eax
c000f1d4:	75 ea                	jne    c000f1c0 <tcp_write+0xd8>
c000f1d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1da:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1dd:	0f b6 c0             	movzx  eax,al
c000f1e0:	c1 e0 02             	shl    eax,0x2
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	89 c2                	mov    edx,eax
c000f1e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f1ec:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f1ef:	0f b6 c0             	movzx  eax,al
c000f1f2:	83 e0 02             	and    eax,0x2
c000f1f5:	74 09                	je     c000f200 <tcp_write+0x118>
c000f1f7:	b8 0c 00 00 00       	mov    eax,0xc
c000f1fc:	eb 0a                	jmp    c000f208 <tcp_write+0x120>
c000f1fe:	66 90                	xchg   ax,ax
c000f200:	b8 00 00 00 00       	mov    eax,0x0
c000f205:	8d 76 00             	lea    esi,[esi+0x0]
c000f208:	01 d0                	add    eax,edx
c000f20a:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f20f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f213:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f216:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f21a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000f21d:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f222:	01 ca                	add    edx,ecx
c000f224:	29 d0                	sub    eax,edx
c000f226:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f22b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f22f:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f233:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f238:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f23d:	0f b7 c0             	movzx  eax,ax
c000f240:	85 c0                	test   eax,eax
c000f242:	0f 84 84 00 00 00    	je     c000f2cc <tcp_write+0x1e4>
c000f248:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f24d:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f252:	39 c2                	cmp    edx,eax
c000f254:	76 16                	jbe    c000f26c <tcp_write+0x184>
c000f256:	83 ec 08             	sub    esp,0x8
c000f259:	68 f4 09 03 c0       	push   0xc00309f4
c000f25e:	68 06 fd 02 c0       	push   0xc002fd06
c000f263:	e8 20 0b 01 00       	call   c001fd88 <CPrintf>
c000f268:	83 c4 10             	add    esp,0x10
c000f26b:	90                   	nop
c000f26c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f270:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f274:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f27d:	0f b7 d8             	movzx  ebx,ax
c000f280:	0f b7 ca             	movzx  ecx,dx
c000f283:	39 cb                	cmp    ebx,ecx
c000f285:	76 05                	jbe    c000f28c <tcp_write+0x1a4>
c000f287:	89 d0                	mov    eax,edx
c000f289:	8d 76 00             	lea    esi,[esi+0x0]
c000f28c:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f291:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f296:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f29b:	01 d0                	add    eax,edx
c000f29d:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f2a2:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f2a7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2ac:	89 d6                	mov    esi,edx
c000f2ae:	29 c6                	sub    esi,eax
c000f2b0:	89 f0                	mov    eax,esi
c000f2b2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f2b7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f2bb:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f2c0:	89 d6                	mov    esi,edx
c000f2c2:	29 c6                	sub    esi,eax
c000f2c4:	89 f0                	mov    eax,esi
c000f2c6:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f2cb:	90                   	nop
c000f2cc:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f2d1:	0f b7 c0             	movzx  eax,ax
c000f2d4:	85 c0                	test   eax,eax
c000f2d6:	74 24                	je     c000f2fc <tcp_write+0x214>
c000f2d8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2dd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f2e2:	39 c2                	cmp    edx,eax
c000f2e4:	74 16                	je     c000f2fc <tcp_write+0x214>
c000f2e6:	83 ec 08             	sub    esp,0x8
c000f2e9:	68 b8 0b 03 c0       	push   0xc0030bb8
c000f2ee:	68 06 fd 02 c0       	push   0xc002fd06
c000f2f3:	e8 90 0a 01 00       	call   c001fd88 <CPrintf>
c000f2f8:	83 c4 10             	add    esp,0x10
c000f2fb:	90                   	nop
c000f2fc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f301:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f306:	39 c2                	cmp    edx,eax
c000f308:	0f 83 ce 03 00 00    	jae    c000f6dc <tcp_write+0x5f4>
c000f30e:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f313:	85 c0                	test   eax,eax
c000f315:	0f 84 c1 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f31b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f31f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f322:	0f b7 c0             	movzx  eax,ax
c000f325:	85 c0                	test   eax,eax
c000f327:	0f 84 af 03 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f32d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f332:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f337:	29 c2                	sub    edx,eax
c000f339:	89 d0                	mov    eax,edx
c000f33b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f340:	39 d0                	cmp    eax,edx
c000f342:	7e 04                	jle    c000f348 <tcp_write+0x260>
c000f344:	89 d0                	mov    eax,edx
c000f346:	66 90                	xchg   ax,ax
c000f348:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f34d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f351:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f355:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f35a:	83 e0 01             	and    eax,0x1
c000f35d:	74 61                	je     c000f3c0 <tcp_write+0x2d8>
c000f35f:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f364:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f369:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f36e:	83 ec 04             	sub    esp,0x4
c000f371:	6a 01                	push   0x1
c000f373:	51                   	push   ecx
c000f374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f378:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f37c:	51                   	push   ecx
c000f37d:	52                   	push   edx
c000f37e:	50                   	push   eax
c000f37f:	6a 03                	push   0x3
c000f381:	e8 f2 fa ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f386:	83 c4 20             	add    esp,0x20
c000f389:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f38d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f392:	0f 84 44 05 00 00    	je     c000f8dc <tcp_write+0x7f4>
c000f398:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f39d:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f3a2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3a6:	01 c1                	add    ecx,eax
c000f3a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3af:	83 ec 04             	sub    esp,0x4
c000f3b2:	52                   	push   edx
c000f3b3:	51                   	push   ecx
c000f3b4:	50                   	push   eax
c000f3b5:	e8 c0 0f ff ff       	call   c000037a <memcpy>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	eb 39                	jmp    c000f3f8 <tcp_write+0x310>
c000f3bf:	90                   	nop
c000f3c0:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f3c5:	83 ec 04             	sub    esp,0x4
c000f3c8:	6a 01                	push   0x1
c000f3ca:	50                   	push   eax
c000f3cb:	6a 03                	push   0x3
c000f3cd:	e8 fa 92 ff ff       	call   c00086cc <pbuf_alloc>
c000f3d2:	83 c4 10             	add    esp,0x10
c000f3d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3d9:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f3de:	0f 84 fc 04 00 00    	je     c000f8e0 <tcp_write+0x7f8>
c000f3e4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3e9:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3ed:	01 c2                	add    edx,eax
c000f3ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3f6:	66 90                	xchg   ax,ax
c000f3f8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f3fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f401:	01 d0                	add    eax,edx
c000f403:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f408:	83 ec 0c             	sub    esp,0xc
c000f40b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f40f:	e8 b4 98 ff ff       	call   c0008cc8 <pbuf_clen>
c000f414:	83 c4 10             	add    esp,0x10
c000f417:	0f b6 c0             	movzx  eax,al
c000f41a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f41e:	01 d0                	add    eax,edx
c000f420:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f425:	e9 b2 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f430:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f434:	0f b7 c0             	movzx  eax,ax
c000f437:	85 c0                	test   eax,eax
c000f439:	0f 84 9d 02 00 00    	je     c000f6dc <tcp_write+0x5f4>
c000f43f:	83 ec 08             	sub    esp,0x8
c000f442:	68 14 0a 03 c0       	push   0xc0030a14
c000f447:	68 06 fd 02 c0       	push   0xc002fd06
c000f44c:	e8 37 09 01 00       	call   c001fd88 <CPrintf>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	e9 83 02 00 00       	jmp    c000f6dc <tcp_write+0x5f4>
c000f459:	8d 76 00             	lea    esi,[esi+0x0]
c000f45c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f460:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f465:	89 d6                	mov    esi,edx
c000f467:	29 c6                	sub    esi,eax
c000f469:	89 f0                	mov    eax,esi
c000f46b:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f470:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f474:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f477:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f47c:	89 d3                	mov    ebx,edx
c000f47e:	29 c3                	sub    ebx,eax
c000f480:	89 d8                	mov    eax,ebx
c000f482:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f48b:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f490:	0f b7 d8             	movzx  ebx,ax
c000f493:	0f b7 ca             	movzx  ecx,dx
c000f496:	39 cb                	cmp    ebx,ecx
c000f498:	76 02                	jbe    c000f49c <tcp_write+0x3b4>
c000f49a:	89 d0                	mov    eax,edx
c000f49c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f4a1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f4a6:	83 e0 01             	and    eax,0x1
c000f4a9:	0f 84 b1 00 00 00    	je     c000f560 <tcp_write+0x478>
c000f4af:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4b4:	0f 94 c0             	sete   al
c000f4b7:	0f b6 f0             	movzx  esi,al
c000f4ba:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f4bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f4c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4c6:	0f b7 c8             	movzx  ecx,ax
c000f4c9:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4ce:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f4d3:	01 d0                	add    eax,edx
c000f4d5:	0f b7 c0             	movzx  eax,ax
c000f4d8:	83 ec 04             	sub    esp,0x4
c000f4db:	56                   	push   esi
c000f4dc:	53                   	push   ebx
c000f4dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4e1:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f4e5:	52                   	push   edx
c000f4e6:	51                   	push   ecx
c000f4e7:	50                   	push   eax
c000f4e8:	6a 00                	push   0x0
c000f4ea:	e8 89 f9 ff ff       	call   c000ee78 <tcp_pbuf_prealloc>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4fb:	0f 84 e3 03 00 00    	je     c000f8e4 <tcp_write+0x7fc>
c000f501:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f505:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f509:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f50e:	0f b7 c0             	movzx  eax,ax
c000f511:	39 c2                	cmp    edx,eax
c000f513:	76 17                	jbe    c000f52c <tcp_write+0x444>
c000f515:	83 ec 08             	sub    esp,0x8
c000f518:	68 44 0a 03 c0       	push   0xc0030a44
c000f51d:	68 06 fd 02 c0       	push   0xc002fd06
c000f522:	e8 61 08 01 00       	call   c001fd88 <CPrintf>
c000f527:	83 c4 10             	add    esp,0x10
c000f52a:	66 90                	xchg   ax,ax
c000f52c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f531:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f536:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f53a:	01 d1                	add    ecx,edx
c000f53c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f540:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f543:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f548:	01 da                	add    edx,ebx
c000f54a:	83 ec 04             	sub    esp,0x4
c000f54d:	50                   	push   eax
c000f54e:	51                   	push   ecx
c000f54f:	52                   	push   edx
c000f550:	e8 25 0e ff ff       	call   c000037a <memcpy>
c000f555:	83 c4 10             	add    esp,0x10
c000f558:	e9 a7 00 00 00       	jmp    c000f604 <tcp_write+0x51c>
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f565:	0f b7 c0             	movzx  eax,ax
c000f568:	85 c0                	test   eax,eax
c000f56a:	74 18                	je     c000f584 <tcp_write+0x49c>
c000f56c:	83 ec 08             	sub    esp,0x8
c000f56f:	68 d6 0b 03 c0       	push   0xc0030bd6
c000f574:	68 06 fd 02 c0       	push   0xc002fd06
c000f579:	e8 0a 08 01 00       	call   c001fd88 <CPrintf>
c000f57e:	83 c4 10             	add    esp,0x10
c000f581:	8d 76 00             	lea    esi,[esi+0x0]
c000f584:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f589:	83 ec 04             	sub    esp,0x4
c000f58c:	6a 01                	push   0x1
c000f58e:	50                   	push   eax
c000f58f:	6a 00                	push   0x0
c000f591:	e8 36 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f59d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f5a2:	0f 84 40 03 00 00    	je     c000f8e8 <tcp_write+0x800>
c000f5a8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5ad:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f5b1:	01 c2                	add    edx,eax
c000f5b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f5b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f5ba:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f5bf:	83 ec 04             	sub    esp,0x4
c000f5c2:	6a 00                	push   0x0
c000f5c4:	50                   	push   eax
c000f5c5:	6a 00                	push   0x0
c000f5c7:	e8 00 91 ff ff       	call   c00086cc <pbuf_alloc>
c000f5cc:	83 c4 10             	add    esp,0x10
c000f5cf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f5d3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f5d8:	75 16                	jne    c000f5f0 <tcp_write+0x508>
c000f5da:	83 ec 0c             	sub    esp,0xc
c000f5dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f5e1:	e8 0e 8f ff ff       	call   c00084f4 <pbuf_free>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	e9 02 03 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f5ee:	66 90                	xchg   ax,ax
c000f5f0:	83 ec 08             	sub    esp,0x8
c000f5f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f5f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f5fb:	e8 2c 97 ff ff       	call   c0008d2c <pbuf_cat>
c000f600:	83 c4 10             	add    esp,0x10
c000f603:	90                   	nop
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f60b:	e8 b8 96 ff ff       	call   c0008cc8 <pbuf_clen>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	0f b6 c0             	movzx  eax,al
c000f616:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f61a:	01 d0                	add    eax,edx
c000f61c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f621:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f626:	83 f8 02             	cmp    eax,0x2
c000f629:	77 0d                	ja     c000f638 <tcp_write+0x550>
c000f62b:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f630:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f635:	76 15                	jbe    c000f64c <tcp_write+0x564>
c000f637:	90                   	nop
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f63f:	e8 b0 8e ff ff       	call   c00084f4 <pbuf_free>
c000f644:	83 c4 10             	add    esp,0x10
c000f647:	e9 a4 02 00 00       	jmp    c000f8f0 <tcp_write+0x808>
c000f64c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f651:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f655:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f658:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f65d:	01 ca                	add    edx,ecx
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	50                   	push   eax
c000f663:	52                   	push   edx
c000f664:	6a 00                	push   0x0
c000f666:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f66a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f66e:	e8 61 f6 ff ff       	call   c000ecd4 <tcp_create_segment>
c000f673:	83 c4 20             	add    esp,0x20
c000f676:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f67a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f67f:	0f 84 67 02 00 00    	je     c000f8ec <tcp_write+0x804>
c000f685:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f68a:	75 0c                	jne    c000f698 <tcp_write+0x5b0>
c000f68c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f690:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f694:	eb 2a                	jmp    c000f6c0 <tcp_write+0x5d8>
c000f696:	66 90                	xchg   ax,ax
c000f698:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f69d:	75 15                	jne    c000f6b4 <tcp_write+0x5cc>
c000f69f:	83 ec 08             	sub    esp,0x8
c000f6a2:	68 e4 0b 03 c0       	push   0xc0030be4
c000f6a7:	68 06 fd 02 c0       	push   0xc002fd06
c000f6ac:	e8 d7 06 01 00       	call   c001fd88 <CPrintf>
c000f6b1:	83 c4 10             	add    esp,0x10
c000f6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f6b8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f6bc:	89 10                	mov    DWORD PTR [eax],edx
c000f6be:	66 90                	xchg   ax,ax
c000f6c0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f6c8:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f6cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f6d2:	01 d0                	add    eax,edx
c000f6d4:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f6d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f6e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f6e6:	39 c2                	cmp    edx,eax
c000f6e8:	0f 82 6e fd ff ff    	jb     c000f45c <tcp_write+0x374>
c000f6ee:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	0f 84 9d 00 00 00    	je     c000f798 <tcp_write+0x6b0>
c000f6fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f702:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f706:	eb 70                	jmp    c000f778 <tcp_write+0x690>
c000f708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f70c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f70f:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f714:	01 d0                	add    eax,edx
c000f716:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f71a:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f722:	8b 00                	mov    eax,DWORD PTR [eax]
c000f724:	85 c0                	test   eax,eax
c000f726:	75 44                	jne    c000f76c <tcp_write+0x684>
c000f728:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f72d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f731:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f734:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f738:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f73c:	0f b7 c0             	movzx  eax,ax
c000f73f:	01 c8                	add    eax,ecx
c000f741:	83 ec 04             	sub    esp,0x4
c000f744:	52                   	push   edx
c000f745:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f749:	50                   	push   eax
c000f74a:	e8 2b 0c ff ff       	call   c000037a <memcpy>
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f756:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f75a:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f75f:	01 d0                	add    eax,edx
c000f761:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f765:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f770:	8b 00                	mov    eax,DWORD PTR [eax]
c000f772:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f776:	66 90                	xchg   ax,ax
c000f778:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f77d:	75 89                	jne    c000f708 <tcp_write+0x620>
c000f77f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f783:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f786:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f78b:	01 d0                	add    eax,edx
c000f78d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f791:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f795:	8d 76 00             	lea    esi,[esi+0x0]
c000f798:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f79d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f7a1:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f7a5:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f7aa:	74 4c                	je     c000f7f8 <tcp_write+0x710>
c000f7ac:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7b1:	75 15                	jne    c000f7c8 <tcp_write+0x6e0>
c000f7b3:	83 ec 08             	sub    esp,0x8
c000f7b6:	68 84 0a 03 c0       	push   0xc0030a84
c000f7bb:	68 06 fd 02 c0       	push   0xc002fd06
c000f7c0:	e8 c3 05 01 00       	call   c001fd88 <CPrintf>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f7cf:	83 ec 08             	sub    esp,0x8
c000f7d2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f7d6:	50                   	push   eax
c000f7d7:	e8 50 95 ff ff       	call   c0008d2c <pbuf_cat>
c000f7dc:	83 c4 10             	add    esp,0x10
c000f7df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f7e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f7e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f7ed:	01 d0                	add    eax,edx
c000f7ef:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f7f3:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f7f7:	90                   	nop
c000f7f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f7fd:	75 0d                	jne    c000f80c <tcp_write+0x724>
c000f7ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f803:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f807:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f80a:	eb 0c                	jmp    c000f818 <tcp_write+0x730>
c000f80c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f810:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f814:	89 10                	mov    DWORD PTR [eax],edx
c000f816:	66 90                	xchg   ax,ax
c000f818:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f81c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f81f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f824:	01 c2                	add    edx,eax
c000f826:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f82a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f82d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f831:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f839:	89 d6                	mov    esi,edx
c000f83b:	29 c6                	sub    esi,eax
c000f83d:	89 f0                	mov    eax,esi
c000f83f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f843:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f847:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f84b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f84f:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f853:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f857:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f85a:	0f b7 c0             	movzx  eax,ax
c000f85d:	85 c0                	test   eax,eax
c000f85f:	74 2b                	je     c000f88c <tcp_write+0x7a4>
c000f861:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f865:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f868:	85 c0                	test   eax,eax
c000f86a:	75 20                	jne    c000f88c <tcp_write+0x7a4>
c000f86c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f870:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f873:	85 c0                	test   eax,eax
c000f875:	75 15                	jne    c000f88c <tcp_write+0x7a4>
c000f877:	83 ec 08             	sub    esp,0x8
c000f87a:	68 f5 0b 03 c0       	push   0xc0030bf5
c000f87f:	68 06 fd 02 c0       	push   0xc002fd06
c000f884:	e8 ff 04 01 00       	call   c001fd88 <CPrintf>
c000f889:	83 c4 10             	add    esp,0x10
c000f88c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f891:	74 41                	je     c000f8d4 <tcp_write+0x7ec>
c000f893:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f897:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f89a:	85 c0                	test   eax,eax
c000f89c:	74 36                	je     c000f8d4 <tcp_write+0x7ec>
c000f89e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f8a3:	83 e0 02             	and    eax,0x2
c000f8a6:	75 2c                	jne    c000f8d4 <tcp_write+0x7ec>
c000f8a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8af:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	6a 08                	push   0x8
c000f8b8:	e8 2b 13 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f8bd:	83 c4 10             	add    esp,0x10
c000f8c0:	89 c1                	mov    ecx,eax
c000f8c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f8c6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f8c9:	89 d8                	mov    eax,ebx
c000f8cb:	09 c8                	or     eax,ecx
c000f8cd:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f8d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8d4:	b0 00                	mov    al,0x0
c000f8d6:	e9 a5 00 00 00       	jmp    c000f980 <tcp_write+0x898>
c000f8db:	90                   	nop
c000f8dc:	90                   	nop
c000f8dd:	eb 11                	jmp    c000f8f0 <tcp_write+0x808>
c000f8df:	90                   	nop
c000f8e0:	90                   	nop
c000f8e1:	eb 0d                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e3:	90                   	nop
c000f8e4:	90                   	nop
c000f8e5:	eb 09                	jmp    c000f8f0 <tcp_write+0x808>
c000f8e7:	90                   	nop
c000f8e8:	90                   	nop
c000f8e9:	eb 05                	jmp    c000f8f0 <tcp_write+0x808>
c000f8eb:	90                   	nop
c000f8ec:	90                   	nop
c000f8ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f8f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f7:	83 c8 80             	or     eax,0xffffff80
c000f8fa:	88 c2                	mov    dl,al
c000f8fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f900:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f903:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f909:	83 c0 01             	add    eax,0x1
c000f90c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f912:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f917:	74 0f                	je     c000f928 <tcp_write+0x840>
c000f919:	83 ec 0c             	sub    esp,0xc
c000f91c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f920:	e8 cf 8b ff ff       	call   c00084f4 <pbuf_free>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f92d:	74 11                	je     c000f940 <tcp_write+0x858>
c000f92f:	83 ec 0c             	sub    esp,0xc
c000f932:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f936:	e8 75 a8 ff ff       	call   c000a1b0 <tcp_segs_free>
c000f93b:	83 c4 10             	add    esp,0x10
c000f93e:	66 90                	xchg   ax,ax
c000f940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f944:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f947:	0f b7 c0             	movzx  eax,ax
c000f94a:	85 c0                	test   eax,eax
c000f94c:	74 2e                	je     c000f97c <tcp_write+0x894>
c000f94e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f952:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f955:	85 c0                	test   eax,eax
c000f957:	75 23                	jne    c000f97c <tcp_write+0x894>
c000f959:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f95d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f960:	85 c0                	test   eax,eax
c000f962:	75 18                	jne    c000f97c <tcp_write+0x894>
c000f964:	83 ec 08             	sub    esp,0x8
c000f967:	68 f5 0b 03 c0       	push   0xc0030bf5
c000f96c:	68 06 fd 02 c0       	push   0xc002fd06
c000f971:	e8 12 04 01 00       	call   c001fd88 <CPrintf>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	8d 76 00             	lea    esi,[esi+0x0]
c000f97c:	b0 ff                	mov    al,0xff
c000f97e:	66 90                	xchg   ax,ax
c000f980:	83 c4 54             	add    esp,0x54
c000f983:	5b                   	pop    ebx
c000f984:	5e                   	pop    esi
c000f985:	c3                   	ret    
c000f986:	66 90                	xchg   ax,ax

c000f988 <tcp_enqueue_flags>:
c000f988:	83 ec 3c             	sub    esp,0x3c
c000f98b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f98f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f993:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f998:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f99d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9a2:	83 e0 03             	and    eax,0x3
c000f9a5:	75 15                	jne    c000f9bc <tcp_enqueue_flags+0x34>
c000f9a7:	83 ec 08             	sub    esp,0x8
c000f9aa:	68 bc 0a 03 c0       	push   0xc0030abc
c000f9af:	68 06 fd 02 c0       	push   0xc002fd06
c000f9b4:	e8 cf 03 01 00       	call   c001fd88 <CPrintf>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9c3:	0f b7 c0             	movzx  eax,ax
c000f9c6:	83 f8 01             	cmp    eax,0x1
c000f9c9:	77 11                	ja     c000f9dc <tcp_enqueue_flags+0x54>
c000f9cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9d2:	0f b7 c0             	movzx  eax,ax
c000f9d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f9da:	76 2c                	jbe    c000fa08 <tcp_enqueue_flags+0x80>
c000f9dc:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f9e2:	83 c0 01             	add    eax,0x1
c000f9e5:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f9eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9f2:	83 c8 80             	or     eax,0xffffff80
c000f9f5:	88 c2                	mov    dl,al
c000f9f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9fe:	b0 ff                	mov    al,0xff
c000fa00:	e9 6b 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa05:	8d 76 00             	lea    esi,[esi+0x0]
c000fa08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa0d:	83 e0 02             	and    eax,0x2
c000fa10:	74 06                	je     c000fa18 <tcp_enqueue_flags+0x90>
c000fa12:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000fa17:	90                   	nop
c000fa18:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa1d:	c1 e0 02             	shl    eax,0x2
c000fa20:	83 e0 04             	and    eax,0x4
c000fa23:	88 c2                	mov    dl,al
c000fa25:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000fa2a:	83 e0 02             	and    eax,0x2
c000fa2d:	74 05                	je     c000fa34 <tcp_enqueue_flags+0xac>
c000fa2f:	b0 0c                	mov    al,0xc
c000fa31:	eb 05                	jmp    c000fa38 <tcp_enqueue_flags+0xb0>
c000fa33:	90                   	nop
c000fa34:	b0 00                	mov    al,0x0
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	01 d0                	add    eax,edx
c000fa3a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000fa3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa42:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa46:	0f b7 c0             	movzx  eax,ax
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	75 17                	jne    c000fa64 <tcp_enqueue_flags+0xdc>
c000fa4d:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa53:	83 c0 01             	add    eax,0x1
c000fa56:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa5c:	b0 ff                	mov    al,0xff
c000fa5e:	e9 0d 02 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fa63:	90                   	nop
c000fa64:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fa69:	83 ec 04             	sub    esp,0x4
c000fa6c:	6a 00                	push   0x0
c000fa6e:	50                   	push   eax
c000fa6f:	6a 00                	push   0x0
c000fa71:	e8 56 8c ff ff       	call   c00086cc <pbuf_alloc>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fa7d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000fa82:	75 2c                	jne    c000fab0 <tcp_enqueue_flags+0x128>
c000fa84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa88:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa8b:	83 c8 80             	or     eax,0xffffff80
c000fa8e:	88 c2                	mov    dl,al
c000fa90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa94:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa97:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa9d:	83 c0 01             	add    eax,0x1
c000faa0:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000faa6:	b0 ff                	mov    al,0xff
c000faa8:	e9 c3 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000faad:	8d 76 00             	lea    esi,[esi+0x0]
c000fab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fab8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000fabd:	0f b7 d2             	movzx  edx,dx
c000fac0:	0f b7 c0             	movzx  eax,ax
c000fac3:	39 c2                	cmp    edx,eax
c000fac5:	73 15                	jae    c000fadc <tcp_enqueue_flags+0x154>
c000fac7:	83 ec 08             	sub    esp,0x8
c000faca:	68 14 0b 03 c0       	push   0xc0030b14
c000facf:	68 06 fd 02 c0       	push   0xc002fd06
c000fad4:	e8 af 02 01 00       	call   c001fd88 <CPrintf>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000fae1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000fae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faed:	83 ec 0c             	sub    esp,0xc
c000faf0:	51                   	push   ecx
c000faf1:	52                   	push   edx
c000faf2:	50                   	push   eax
c000faf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000faf7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000fafb:	e8 d4 f1 ff ff       	call   c000ecd4 <tcp_create_segment>
c000fb00:	83 c4 20             	add    esp,0x20
c000fb03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fb0c:	75 2a                	jne    c000fb38 <tcp_enqueue_flags+0x1b0>
c000fb0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb15:	83 c8 80             	or     eax,0xffffff80
c000fb18:	88 c2                	mov    dl,al
c000fb1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb21:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fb27:	83 c0 01             	add    eax,0x1
c000fb2a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fb30:	b0 ff                	mov    al,0xff
c000fb32:	e9 39 01 00 00       	jmp    c000fc70 <tcp_enqueue_flags+0x2e8>
c000fb37:	90                   	nop
c000fb38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb3f:	0f b7 c0             	movzx  eax,ax
c000fb42:	85 c0                	test   eax,eax
c000fb44:	74 16                	je     c000fb5c <tcp_enqueue_flags+0x1d4>
c000fb46:	83 ec 08             	sub    esp,0x8
c000fb49:	68 50 0b 03 c0       	push   0xc0030b50
c000fb4e:	68 06 fd 02 c0       	push   0xc002fd06
c000fb53:	e8 30 02 01 00       	call   c001fd88 <CPrintf>
c000fb58:	83 c4 10             	add    esp,0x10
c000fb5b:	90                   	nop
c000fb5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb63:	85 c0                	test   eax,eax
c000fb65:	75 0d                	jne    c000fb74 <tcp_enqueue_flags+0x1ec>
c000fb67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fb6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fb72:	eb 30                	jmp    c000fba4 <tcp_enqueue_flags+0x21c>
c000fb74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb7f:	eb 0f                	jmp    c000fb90 <tcp_enqueue_flags+0x208>
c000fb81:	8d 76 00             	lea    esi,[esi+0x0]
c000fb84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb8e:	66 90                	xchg   ax,ax
c000fb90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb96:	85 c0                	test   eax,eax
c000fb98:	75 ea                	jne    c000fb84 <tcp_enqueue_flags+0x1fc>
c000fb9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fba2:	89 10                	mov    DWORD PTR [eax],edx
c000fba4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fba8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000fbae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbb3:	83 e0 02             	and    eax,0x2
c000fbb6:	75 0c                	jne    c000fbc4 <tcp_enqueue_flags+0x23c>
c000fbb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbbd:	83 e0 01             	and    eax,0x1
c000fbc0:	74 26                	je     c000fbe8 <tcp_enqueue_flags+0x260>
c000fbc2:	66 90                	xchg   ax,ax
c000fbc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbc8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fbcb:	8d 50 01             	lea    edx,[eax+0x1]
c000fbce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fbd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbd9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fbdd:	83 e8 01             	sub    eax,0x1
c000fbe0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fbe4:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000fbe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fbed:	83 e0 01             	and    eax,0x1
c000fbf0:	74 16                	je     c000fc08 <tcp_enqueue_flags+0x280>
c000fbf2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fbf6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbf9:	83 c8 20             	or     eax,0x20
c000fbfc:	88 c2                	mov    dl,al
c000fbfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc02:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fc0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc0f:	83 ec 0c             	sub    esp,0xc
c000fc12:	50                   	push   eax
c000fc13:	e8 b0 90 ff ff       	call   c0008cc8 <pbuf_clen>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	88 c1                	mov    cl,al
c000fc1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc21:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fc24:	0f b6 c1             	movzx  eax,cl
c000fc27:	01 d0                	add    eax,edx
c000fc29:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000fc2d:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000fc31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc35:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fc38:	0f b7 c0             	movzx  eax,ax
c000fc3b:	85 c0                	test   eax,eax
c000fc3d:	74 2d                	je     c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc43:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fc46:	85 c0                	test   eax,eax
c000fc48:	75 22                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc4e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc51:	85 c0                	test   eax,eax
c000fc53:	75 17                	jne    c000fc6c <tcp_enqueue_flags+0x2e4>
c000fc55:	83 ec 08             	sub    esp,0x8
c000fc58:	68 7c 0b 03 c0       	push   0xc0030b7c
c000fc5d:	68 06 fd 02 c0       	push   0xc002fd06
c000fc62:	e8 21 01 01 00       	call   c001fd88 <CPrintf>
c000fc67:	83 c4 10             	add    esp,0x10
c000fc6a:	66 90                	xchg   ax,ax
c000fc6c:	b0 00                	mov    al,0x0
c000fc6e:	66 90                	xchg   ax,ax
c000fc70:	83 c4 3c             	add    esp,0x3c
c000fc73:	c3                   	ret    

c000fc74 <tcp_send_fin>:
c000fc74:	53                   	push   ebx
c000fc75:	83 ec 18             	sub    esp,0x18
c000fc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc7f:	85 c0                	test   eax,eax
c000fc81:	74 75                	je     c000fcf8 <tcp_send_fin+0x84>
c000fc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc87:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fc8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc8e:	eb 0c                	jmp    c000fc9c <tcp_send_fin+0x28>
c000fc90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc9a:	66 90                	xchg   ax,ax
c000fc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fca2:	85 c0                	test   eax,eax
c000fca4:	75 ea                	jne    c000fc90 <tcp_send_fin+0x1c>
c000fca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcad:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fcb1:	0f b7 c0             	movzx  eax,ax
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	50                   	push   eax
c000fcb8:	e8 2b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcbd:	83 c4 10             	add    esp,0x10
c000fcc0:	0f b7 c0             	movzx  eax,ax
c000fcc3:	83 e0 07             	and    eax,0x7
c000fcc6:	75 30                	jne    c000fcf8 <tcp_send_fin+0x84>
c000fcc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fccf:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fcd3:	83 ec 0c             	sub    esp,0xc
c000fcd6:	6a 01                	push   0x1
c000fcd8:	e8 0b 0f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	89 c1                	mov    ecx,eax
c000fce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fce9:	89 d8                	mov    eax,ebx
c000fceb:	09 c8                	or     eax,ecx
c000fced:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fcf1:	b0 00                	mov    al,0x0
c000fcf3:	eb 17                	jmp    c000fd0c <tcp_send_fin+0x98>
c000fcf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fcf8:	83 ec 08             	sub    esp,0x8
c000fcfb:	6a 01                	push   0x1
c000fcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd01:	e8 82 fc ff ff       	call   c000f988 <tcp_enqueue_flags>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	8d 76 00             	lea    esi,[esi+0x0]
c000fd0c:	83 c4 18             	add    esp,0x18
c000fd0f:	5b                   	pop    ebx
c000fd10:	c3                   	ret    
c000fd11:	8d 76 00             	lea    esi,[esi+0x0]

c000fd14 <tcp_send_empty_ack>:
c000fd14:	53                   	push   ebx
c000fd15:	83 ec 18             	sub    esp,0x18
c000fd18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fd24:	83 ec 0c             	sub    esp,0xc
c000fd27:	50                   	push   eax
c000fd28:	e8 df 0e ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	89 c2                	mov    edx,eax
c000fd32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fd37:	52                   	push   edx
c000fd38:	6a 00                	push   0x0
c000fd3a:	50                   	push   eax
c000fd3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fd3f:	e8 34 ee ff ff       	call   c000eb78 <tcp_output_alloc_header>
c000fd44:	83 c4 10             	add    esp,0x10
c000fd47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd50:	75 0a                	jne    c000fd5c <tcp_send_empty_ack+0x48>
c000fd52:	b0 fe                	mov    al,0xfe
c000fd54:	e9 97 00 00 00       	jmp    c000fdf0 <tcp_send_empty_ack+0xdc>
c000fd59:	8d 76 00             	lea    esi,[esi+0x0]
c000fd5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fd67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd6e:	83 e0 fc             	and    eax,0xfffffffc
c000fd71:	88 c2                	mov    dl,al
c000fd73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fd7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd81:	0f b7 d0             	movzx  edx,ax
c000fd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	52                   	push   edx
c000fd93:	6a 06                	push   0x6
c000fd95:	51                   	push   ecx
c000fd96:	50                   	push   eax
c000fd97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd9b:	e8 70 35 00 00       	call   c0013310 <inet_chksum_pseudo>
c000fda0:	83 c4 20             	add    esp,0x20
c000fda3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fda7:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fdab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdaf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fdb2:	0f b6 c8             	movzx  ecx,al
c000fdb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fdbc:	0f b6 d0             	movzx  edx,al
c000fdbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc3:	8d 58 04             	lea    ebx,[eax+0x4]
c000fdc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdca:	83 ec 08             	sub    esp,0x8
c000fdcd:	6a 06                	push   0x6
c000fdcf:	51                   	push   ecx
c000fdd0:	52                   	push   edx
c000fdd1:	53                   	push   ebx
c000fdd2:	50                   	push   eax
c000fdd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd7:	e8 68 41 00 00       	call   c0013f44 <ip_output>
c000fddc:	83 c4 20             	add    esp,0x20
c000fddf:	83 ec 0c             	sub    esp,0xc
c000fde2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fde6:	e8 09 87 ff ff       	call   c00084f4 <pbuf_free>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	b0 00                	mov    al,0x0
c000fdf0:	83 c4 18             	add    esp,0x18
c000fdf3:	5b                   	pop    ebx
c000fdf4:	c3                   	ret    
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]

c000fdf8 <tcp_output_segment>:
c000fdf8:	56                   	push   esi
c000fdf9:	53                   	push   ebx
c000fdfa:	83 ec 14             	sub    esp,0x14
c000fdfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe01:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fe04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe08:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe0b:	83 ec 0c             	sub    esp,0xc
c000fe0e:	50                   	push   eax
c000fe0f:	e8 f8 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe14:	83 c4 10             	add    esp,0x10
c000fe17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fe1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe1e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe22:	0f b7 c0             	movzx  eax,ax
c000fe25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe29:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	50                   	push   eax
c000fe30:	e8 b3 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fe3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fe43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe47:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fe4b:	0f b7 c0             	movzx  eax,ax
c000fe4e:	01 c2                	add    edx,eax
c000fe50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe54:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe5e:	83 c0 14             	add    eax,0x14
c000fe61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe69:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe6c:	0f b6 c0             	movzx  eax,al
c000fe6f:	83 e0 01             	and    eax,0x1
c000fe72:	74 10                	je     c000fe84 <tcp_output_segment+0x8c>
c000fe74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe78:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fe7e:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fe83:	90                   	nop
c000fe84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe88:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fe8c:	98                   	cwde   
c000fe8d:	83 f8 ff             	cmp    eax,0xffffffff
c000fe90:	75 0a                	jne    c000fe9c <tcp_output_segment+0xa4>
c000fe92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe96:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fe9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea0:	85 c0                	test   eax,eax
c000fea2:	74 0c                	je     c000feb0 <tcp_output_segment+0xb8>
c000fea4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea8:	8b 00                	mov    eax,DWORD PTR [eax]
c000feaa:	85 c0                	test   eax,eax
c000feac:	75 32                	jne    c000fee0 <tcp_output_segment+0xe8>
c000feae:	66 90                	xchg   ax,ax
c000feb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feb4:	83 c0 04             	add    eax,0x4
c000feb7:	83 ec 0c             	sub    esp,0xc
c000feba:	50                   	push   eax
c000febb:	e8 dc 38 00 00       	call   c001379c <ip_route>
c000fec0:	83 c4 10             	add    esp,0x10
c000fec3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fec7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fecc:	0f 84 46 01 00 00    	je     c0010018 <tcp_output_segment+0x220>
c000fed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fed6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fed9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fedd:	89 10                	mov    DWORD PTR [eax],edx
c000fedf:	90                   	nop
c000fee0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	75 2d                	jne    c000ff18 <tcp_output_segment+0x120>
c000feeb:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fef1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fefc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	50                   	push   eax
c000ff06:	e8 01 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ff0b:	83 c4 10             	add    esp,0x10
c000ff0e:	89 c2                	mov    edx,eax
c000ff10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff14:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000ff17:	90                   	nop
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff29:	29 c2                	sub    edx,eax
c000ff2b:	89 d0                	mov    eax,edx
c000ff2d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff39:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ff3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff41:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff44:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff49:	89 d6                	mov    esi,edx
c000ff4b:	29 c6                	sub    esi,eax
c000ff4d:	89 f0                	mov    eax,esi
c000ff4f:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000ff53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff5a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff61:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ff64:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000ff69:	89 d6                	mov    esi,edx
c000ff6b:	29 c6                	sub    esi,eax
c000ff6d:	89 f0                	mov    eax,esi
c000ff6f:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000ff73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ff7e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ff81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ff84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8b:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ff91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ff9b:	0f b7 c8             	movzx  ecx,ax
c000ff9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa2:	8d 70 04             	lea    esi,[eax+0x4]
c000ffa5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ffa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ffb4:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000ffb7:	83 ec 0c             	sub    esp,0xc
c000ffba:	51                   	push   ecx
c000ffbb:	6a 06                	push   0x6
c000ffbd:	56                   	push   esi
c000ffbe:	52                   	push   edx
c000ffbf:	50                   	push   eax
c000ffc0:	e8 4b 33 00 00       	call   c0013310 <inet_chksum_pseudo>
c000ffc5:	83 c4 20             	add    esp,0x20
c000ffc8:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000ffcc:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000ffd2:	83 c0 01             	add    eax,0x1
c000ffd5:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000ffdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffdf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000ffe2:	0f b6 d8             	movzx  ebx,al
c000ffe5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffe9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ffec:	0f b6 c8             	movzx  ecx,al
c000ffef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fff3:	8d 70 04             	lea    esi,[eax+0x4]
c000fff6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010001:	83 ec 08             	sub    esp,0x8
c0010004:	6a 06                	push   0x6
c0010006:	53                   	push   ebx
c0010007:	51                   	push   ecx
c0010008:	56                   	push   esi
c0010009:	52                   	push   edx
c001000a:	50                   	push   eax
c001000b:	e8 34 3f 00 00       	call   c0013f44 <ip_output>
c0010010:	83 c4 20             	add    esp,0x20
c0010013:	eb 07                	jmp    c001001c <tcp_output_segment+0x224>
c0010015:	8d 76 00             	lea    esi,[esi+0x0]
c0010018:	90                   	nop
c0010019:	8d 76 00             	lea    esi,[esi+0x0]
c001001c:	83 c4 14             	add    esp,0x14
c001001f:	5b                   	pop    ebx
c0010020:	5e                   	pop    esi
c0010021:	c3                   	ret    
c0010022:	66 90                	xchg   ax,ax

c0010024 <tcp_output>:
c0010024:	56                   	push   esi
c0010025:	53                   	push   ebx
c0010026:	83 ec 24             	sub    esp,0x24
c0010029:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c001002e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0010032:	75 08                	jne    c001003c <tcp_output+0x18>
c0010034:	b0 00                	mov    al,0x0
c0010036:	e9 6d 04 00 00       	jmp    c00104a8 <tcp_output+0x484>
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010044:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010048:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c001004b:	0f b7 d8             	movzx  ebx,ax
c001004e:	0f b7 ca             	movzx  ecx,dx
c0010051:	39 cb                	cmp    ebx,ecx
c0010053:	76 03                	jbe    c0010058 <tcp_output+0x34>
c0010055:	89 d0                	mov    eax,edx
c0010057:	90                   	nop
c0010058:	0f b7 c0             	movzx  eax,ax
c001005b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001005f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010063:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001006a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001006e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010071:	0f b6 c0             	movzx  eax,al
c0010074:	83 e0 02             	and    eax,0x2
c0010077:	74 4f                	je     c00100c8 <tcp_output+0xa4>
c0010079:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001007e:	74 34                	je     c00100b4 <tcp_output+0x90>
c0010080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010084:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010087:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001008a:	83 ec 0c             	sub    esp,0xc
c001008d:	50                   	push   eax
c001008e:	e8 79 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010093:	83 c4 10             	add    esp,0x10
c0010096:	89 c2                	mov    edx,eax
c0010098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001009c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001009f:	29 c2                	sub    edx,eax
c00100a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100a8:	0f b7 c0             	movzx  eax,ax
c00100ab:	01 d0                	add    eax,edx
c00100ad:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00100b1:	73 15                	jae    c00100c8 <tcp_output+0xa4>
c00100b3:	90                   	nop
c00100b4:	83 ec 0c             	sub    esp,0xc
c00100b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00100bb:	e8 54 fc ff ff       	call   c000fd14 <tcp_send_empty_ack>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	e9 e0 03 00 00       	jmp    c00104a8 <tcp_output+0x484>
c00100c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00100cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00100d8:	0f 84 ea 02 00 00    	je     c00103c8 <tcp_output+0x3a4>
c00100de:	eb 0c                	jmp    c00100ec <tcp_output+0xc8>
c00100e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ea:	66 90                	xchg   ax,ax
c00100ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f2:	85 c0                	test   eax,eax
c00100f4:	75 ea                	jne    c00100e0 <tcp_output+0xbc>
c00100f6:	e9 cd 02 00 00       	jmp    c00103c8 <tcp_output+0x3a4>
c00100fb:	90                   	nop
c00100fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010103:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010107:	0f b7 c0             	movzx  eax,ax
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	50                   	push   eax
c001010e:	e8 d5 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010113:	83 c4 10             	add    esp,0x10
c0010116:	0f b7 c0             	movzx  eax,ax
c0010119:	83 e0 04             	and    eax,0x4
c001011c:	74 16                	je     c0010134 <tcp_output+0x110>
c001011e:	83 ec 08             	sub    esp,0x8
c0010121:	68 13 0c 03 c0       	push   0xc0030c13
c0010126:	68 06 fd 02 c0       	push   0xc002fd06
c001012b:	e8 58 fc 00 00       	call   c001fd88 <CPrintf>
c0010130:	83 c4 10             	add    esp,0x10
c0010133:	90                   	nop
c0010134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010138:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001013b:	85 c0                	test   eax,eax
c001013d:	74 45                	je     c0010184 <tcp_output+0x160>
c001013f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010143:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010146:	0f b6 c0             	movzx  eax,al
c0010149:	83 e0 44             	and    eax,0x44
c001014c:	75 36                	jne    c0010184 <tcp_output+0x160>
c001014e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010152:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010155:	85 c0                	test   eax,eax
c0010157:	74 33                	je     c001018c <tcp_output+0x168>
c0010159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001015d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010160:	8b 00                	mov    eax,DWORD PTR [eax]
c0010162:	85 c0                	test   eax,eax
c0010164:	75 1e                	jne    c0010184 <tcp_output+0x160>
c0010166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001016d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010177:	0f b7 d2             	movzx  edx,dx
c001017a:	0f b7 c0             	movzx  eax,ax
c001017d:	39 c2                	cmp    edx,eax
c001017f:	72 0b                	jb     c001018c <tcp_output+0x168>
c0010181:	8d 76 00             	lea    esi,[esi+0x0]
c0010184:	b8 01 00 00 00       	mov    eax,0x1
c0010189:	eb 09                	jmp    c0010194 <tcp_output+0x170>
c001018b:	90                   	nop
c001018c:	b8 00 00 00 00       	mov    eax,0x0
c0010191:	8d 76 00             	lea    esi,[esi+0x0]
c0010194:	85 c0                	test   eax,eax
c0010196:	75 18                	jne    c00101b0 <tcp_output+0x18c>
c0010198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001019c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001019f:	0f b6 c0             	movzx  eax,al
c00101a2:	25 a0 00 00 00       	and    eax,0xa0
c00101a7:	0f 84 5b 02 00 00    	je     c0010408 <tcp_output+0x3e4>
c00101ad:	8d 76 00             	lea    esi,[esi+0x0]
c00101b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101ba:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00101bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00101c4:	83 f8 02             	cmp    eax,0x2
c00101c7:	74 3f                	je     c0010208 <tcp_output+0x1e4>
c00101c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101d0:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00101d4:	83 ec 0c             	sub    esp,0xc
c00101d7:	6a 10                	push   0x10
c00101d9:	e8 0a 0a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 c1                	mov    ecx,eax
c00101e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00101ea:	89 d8                	mov    eax,ebx
c00101ec:	09 c8                	or     eax,ecx
c00101ee:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00101f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101f6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00101f9:	83 e0 fc             	and    eax,0xfffffffc
c00101fc:	88 c2                	mov    dl,al
c00101fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010202:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010205:	8d 76 00             	lea    esi,[esi+0x0]
c0010208:	83 ec 08             	sub    esp,0x8
c001020b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001020f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010213:	e8 e0 fb ff ff       	call   c000fdf8 <tcp_output_segment>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	50                   	push   eax
c0010229:	e8 de 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001022e:	83 c4 10             	add    esp,0x10
c0010231:	89 c3                	mov    ebx,eax
c0010233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001023a:	0f b7 f0             	movzx  esi,ax
c001023d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010241:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010244:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010248:	0f b7 c0             	movzx  eax,ax
c001024b:	83 ec 0c             	sub    esp,0xc
c001024e:	50                   	push   eax
c001024f:	e8 94 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	0f b7 c0             	movzx  eax,ax
c001025a:	83 e0 03             	and    eax,0x3
c001025d:	0f 95 c0             	setne  al
c0010260:	0f b6 c0             	movzx  eax,al
c0010263:	01 f0                	add    eax,esi
c0010265:	01 d8                	add    eax,ebx
c0010267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001026b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001026f:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010272:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010276:	79 0c                	jns    c0010284 <tcp_output+0x260>
c0010278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001027c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010280:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010283:	90                   	nop
c0010284:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001028b:	0f b7 d8             	movzx  ebx,ax
c001028e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010292:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010295:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010299:	0f b7 c0             	movzx  eax,ax
c001029c:	83 ec 0c             	sub    esp,0xc
c001029f:	50                   	push   eax
c00102a0:	e8 43 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	0f b7 c0             	movzx  eax,ax
c00102ab:	83 e0 03             	and    eax,0x3
c00102ae:	0f 95 c0             	setne  al
c00102b1:	0f b6 c0             	movzx  eax,al
c00102b4:	01 d8                	add    eax,ebx
c00102b6:	85 c0                	test   eax,eax
c00102b8:	0f 8e ee 00 00 00    	jle    c00103ac <tcp_output+0x388>
c00102be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102cc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00102cf:	85 c0                	test   eax,eax
c00102d1:	75 19                	jne    c00102ec <tcp_output+0x2c8>
c00102d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102db:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00102de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e6:	e9 d1 00 00 00       	jmp    c00103bc <tcp_output+0x398>
c00102eb:	90                   	nop
c00102ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	50                   	push   eax
c00102fa:	e8 0d 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	89 c3                	mov    ebx,eax
c0010304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010308:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001030b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001030e:	83 ec 0c             	sub    esp,0xc
c0010311:	50                   	push   eax
c0010312:	e8 f5 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	29 c3                	sub    ebx,eax
c001031c:	89 d8                	mov    eax,ebx
c001031e:	79 74                	jns    c0010394 <tcp_output+0x370>
c0010320:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010324:	83 c0 7c             	add    eax,0x7c
c0010327:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032b:	eb 0f                	jmp    c001033c <tcp_output+0x318>
c001032d:	8d 76 00             	lea    esi,[esi+0x0]
c0010330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010334:	8b 00                	mov    eax,DWORD PTR [eax]
c0010336:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001033a:	66 90                	xchg   ax,ax
c001033c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010340:	8b 00                	mov    eax,DWORD PTR [eax]
c0010342:	85 c0                	test   eax,eax
c0010344:	74 36                	je     c001037c <tcp_output+0x358>
c0010346:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001034a:	8b 00                	mov    eax,DWORD PTR [eax]
c001034c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001034f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010352:	83 ec 0c             	sub    esp,0xc
c0010355:	50                   	push   eax
c0010356:	e8 b1 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001035b:	83 c4 10             	add    esp,0x10
c001035e:	89 c3                	mov    ebx,eax
c0010360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010364:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010367:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001036a:	83 ec 0c             	sub    esp,0xc
c001036d:	50                   	push   eax
c001036e:	e8 99 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010373:	83 c4 10             	add    esp,0x10
c0010376:	29 c3                	sub    ebx,eax
c0010378:	89 d8                	mov    eax,ebx
c001037a:	78 b4                	js     c0010330 <tcp_output+0x30c>
c001037c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010380:	8b 10                	mov    edx,DWORD PTR [eax]
c0010382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010386:	89 10                	mov    DWORD PTR [eax],edx
c0010388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001038c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010390:	89 10                	mov    DWORD PTR [eax],edx
c0010392:	eb 28                	jmp    c00103bc <tcp_output+0x398>
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001039c:	89 10                	mov    DWORD PTR [eax],edx
c001039e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00103a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00103a8:	eb 12                	jmp    c00103bc <tcp_output+0x398>
c00103aa:	66 90                	xchg   ax,ax
c00103ac:	83 ec 0c             	sub    esp,0xc
c00103af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103b3:	e8 b4 9d ff ff       	call   c000a16c <tcp_seg_free>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	90                   	nop
c00103bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103c0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00103c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103c7:	90                   	nop
c00103c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103cd:	74 3d                	je     c001040c <tcp_output+0x3e8>
c00103cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00103d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	50                   	push   eax
c00103dd:	e8 2a 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	89 c2                	mov    edx,eax
c00103e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103eb:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00103ee:	29 c2                	sub    edx,eax
c00103f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00103f7:	0f b7 c0             	movzx  eax,ax
c00103fa:	01 d0                	add    eax,edx
c00103fc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010400:	0f 83 f6 fc ff ff    	jae    c00100fc <tcp_output+0xd8>
c0010406:	eb 04                	jmp    c001040c <tcp_output+0x3e8>
c0010408:	90                   	nop
c0010409:	8d 76 00             	lea    esi,[esi+0x0]
c001040c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010410:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010413:	85 c0                	test   eax,eax
c0010415:	75 0d                	jne    c0010424 <tcp_output+0x400>
c0010417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001041b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010421:	8d 76 00             	lea    esi,[esi+0x0]
c0010424:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010429:	74 65                	je     c0010490 <tcp_output+0x46c>
c001042b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001042f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010435:	0f b6 c0             	movzx  eax,al
c0010438:	85 c0                	test   eax,eax
c001043a:	75 54                	jne    c0010490 <tcp_output+0x46c>
c001043c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010440:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010443:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	50                   	push   eax
c001044a:	e8 bd 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001044f:	83 c4 10             	add    esp,0x10
c0010452:	89 c2                	mov    edx,eax
c0010454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010458:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001045b:	29 c2                	sub    edx,eax
c001045d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010464:	0f b7 c0             	movzx  eax,ax
c0010467:	01 c2                	add    edx,eax
c0010469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001046d:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010470:	0f b7 c0             	movzx  eax,ax
c0010473:	39 c2                	cmp    edx,eax
c0010475:	76 19                	jbe    c0010490 <tcp_output+0x46c>
c0010477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001047b:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010485:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010489:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010494:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010497:	83 e0 7f             	and    eax,0x7f
c001049a:	88 c2                	mov    dl,al
c001049c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00104a0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00104a3:	b0 00                	mov    al,0x0
c00104a5:	8d 76 00             	lea    esi,[esi+0x0]
c00104a8:	83 c4 24             	add    esp,0x24
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	c3                   	ret    
c00104ae:	66 90                	xchg   ax,ax

c00104b0 <tcp_rst>:
c00104b0:	83 ec 2c             	sub    esp,0x2c
c00104b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00104b7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00104bb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00104c0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00104c5:	83 ec 04             	sub    esp,0x4
c00104c8:	6a 00                	push   0x0
c00104ca:	6a 14                	push   0x14
c00104cc:	6a 01                	push   0x1
c00104ce:	e8 f9 81 ff ff       	call   c00086cc <pbuf_alloc>
c00104d3:	83 c4 10             	add    esp,0x10
c00104d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00104da:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00104df:	0f 84 37 01 00 00    	je     c001061c <tcp_rst+0x16c>
c00104e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104e9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00104ed:	0f b7 c0             	movzx  eax,ax
c00104f0:	83 f8 13             	cmp    eax,0x13
c00104f3:	77 17                	ja     c001050c <tcp_rst+0x5c>
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	68 20 09 03 c0       	push   0xc0030920
c00104fd:	68 06 fd 02 c0       	push   0xc002fd06
c0010502:	e8 81 f8 00 00       	call   c001fd88 <CPrintf>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	66 90                	xchg   ax,ax
c001050c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010513:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010517:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001051c:	83 ec 0c             	sub    esp,0xc
c001051f:	50                   	push   eax
c0010520:	e8 c3 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010525:	83 c4 10             	add    esp,0x10
c0010528:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001052c:	66 89 02             	mov    WORD PTR [edx],ax
c001052f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	50                   	push   eax
c0010538:	e8 ab 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010544:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001054f:	e8 b8 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010554:	83 c4 10             	add    esp,0x10
c0010557:	89 c2                	mov    edx,eax
c0010559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001055d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010560:	83 ec 0c             	sub    esp,0xc
c0010563:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010567:	e8 a0 06 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001056c:	83 c4 10             	add    esp,0x10
c001056f:	89 c2                	mov    edx,eax
c0010571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010575:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	68 14 50 00 00       	push   0x5014
c0010580:	e8 63 06 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001058c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010594:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c001059a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001059e:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00105a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00105a8:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00105ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00105b5:	0f b7 c0             	movzx  eax,ax
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	50                   	push   eax
c00105bc:	6a 06                	push   0x6
c00105be:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00105ca:	e8 41 2d 00 00       	call   c0013310 <inet_chksum_pseudo>
c00105cf:	83 c4 20             	add    esp,0x20
c00105d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105d6:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00105da:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00105e0:	83 c0 01             	add    eax,0x1
c00105e3:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00105e9:	83 ec 08             	sub    esp,0x8
c00105ec:	6a 06                	push   0x6
c00105ee:	6a 00                	push   0x0
c00105f0:	68 ff 00 00 00       	push   0xff
c00105f5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105f9:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00105fd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010601:	e8 3e 39 00 00       	call   c0013f44 <ip_output>
c0010606:	83 c4 20             	add    esp,0x20
c0010609:	83 ec 0c             	sub    esp,0xc
c001060c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010610:	e8 df 7e ff ff       	call   c00084f4 <pbuf_free>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	eb 06                	jmp    c0010620 <tcp_rst+0x170>
c001061a:	66 90                	xchg   ax,ax
c001061c:	90                   	nop
c001061d:	8d 76 00             	lea    esi,[esi+0x0]
c0010620:	83 c4 2c             	add    esp,0x2c
c0010623:	c3                   	ret    

c0010624 <tcp_rexmit_rto>:
c0010624:	83 ec 1c             	sub    esp,0x1c
c0010627:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001062b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001062e:	85 c0                	test   eax,eax
c0010630:	74 7a                	je     c00106ac <tcp_rexmit_rto+0x88>
c0010632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010636:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010639:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063d:	eb 0d                	jmp    c001064c <tcp_rexmit_rto+0x28>
c001063f:	90                   	nop
c0010640:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010644:	8b 00                	mov    eax,DWORD PTR [eax]
c0010646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001064a:	66 90                	xchg   ax,ax
c001064c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010650:	8b 00                	mov    eax,DWORD PTR [eax]
c0010652:	85 c0                	test   eax,eax
c0010654:	75 ea                	jne    c0010640 <tcp_rexmit_rto+0x1c>
c0010656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065a:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c001065d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010661:	89 10                	mov    DWORD PTR [eax],edx
c0010663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010667:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c001066a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010675:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c001067c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010680:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010683:	83 c0 01             	add    eax,0x1
c0010686:	88 c2                	mov    dl,al
c0010688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001068c:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001068f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010693:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001069a:	83 ec 0c             	sub    esp,0xc
c001069d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106a1:	e8 7e f9 ff ff       	call   c0010024 <tcp_output>
c00106a6:	83 c4 10             	add    esp,0x10
c00106a9:	eb 05                	jmp    c00106b0 <tcp_rexmit_rto+0x8c>
c00106ab:	90                   	nop
c00106ac:	90                   	nop
c00106ad:	8d 76 00             	lea    esi,[esi+0x0]
c00106b0:	83 c4 1c             	add    esp,0x1c
c00106b3:	c3                   	ret    

c00106b4 <tcp_rexmit>:
c00106b4:	53                   	push   ebx
c00106b5:	83 ec 18             	sub    esp,0x18
c00106b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106bc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106bf:	85 c0                	test   eax,eax
c00106c1:	0f 84 a9 00 00 00    	je     c0010770 <tcp_rexmit+0xbc>
c00106c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106cb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00106d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00106d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106dc:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00106df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106e3:	83 c0 78             	add    eax,0x78
c00106e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ea:	eb 0c                	jmp    c00106f8 <tcp_rexmit+0x44>
c00106ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00106f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106f6:	66 90                	xchg   ax,ax
c00106f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00106fe:	85 c0                	test   eax,eax
c0010700:	74 36                	je     c0010738 <tcp_rexmit+0x84>
c0010702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010706:	8b 00                	mov    eax,DWORD PTR [eax]
c0010708:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001070b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001070e:	83 ec 0c             	sub    esp,0xc
c0010711:	50                   	push   eax
c0010712:	e8 f5 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010717:	83 c4 10             	add    esp,0x10
c001071a:	89 c3                	mov    ebx,eax
c001071c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010720:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010723:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010726:	83 ec 0c             	sub    esp,0xc
c0010729:	50                   	push   eax
c001072a:	e8 dd 04 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001072f:	83 c4 10             	add    esp,0x10
c0010732:	29 c3                	sub    ebx,eax
c0010734:	89 d8                	mov    eax,ebx
c0010736:	78 b4                	js     c00106ec <tcp_rexmit+0x38>
c0010738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001073c:	8b 10                	mov    edx,DWORD PTR [eax]
c001073e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010742:	89 10                	mov    DWORD PTR [eax],edx
c0010744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 10                	mov    DWORD PTR [eax],edx
c001074e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010752:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010755:	83 c0 01             	add    eax,0x1
c0010758:	88 c2                	mov    dl,al
c001075a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075e:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c0010761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010765:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001076c:	eb 06                	jmp    c0010774 <tcp_rexmit+0xc0>
c001076e:	66 90                	xchg   ax,ax
c0010770:	90                   	nop
c0010771:	8d 76 00             	lea    esi,[esi+0x0]
c0010774:	83 c4 18             	add    esp,0x18
c0010777:	5b                   	pop    ebx
c0010778:	c3                   	ret    
c0010779:	8d 76 00             	lea    esi,[esi+0x0]

c001077c <tcp_rexmit_fast>:
c001077c:	83 ec 0c             	sub    esp,0xc
c001077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010783:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010786:	85 c0                	test   eax,eax
c0010788:	0f 84 ca 00 00 00    	je     c0010858 <tcp_rexmit_fast+0xdc>
c001078e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010792:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010795:	0f b6 c0             	movzx  eax,al
c0010798:	83 e0 04             	and    eax,0x4
c001079b:	0f 85 b7 00 00 00    	jne    c0010858 <tcp_rexmit_fast+0xdc>
c00107a1:	83 ec 0c             	sub    esp,0xc
c00107a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107a8:	e8 07 ff ff ff       	call   c00106b4 <tcp_rexmit>
c00107ad:	83 c4 10             	add    esp,0x10
c00107b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107b4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00107b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107bc:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107bf:	0f b7 d2             	movzx  edx,dx
c00107c2:	0f b7 c0             	movzx  eax,ax
c00107c5:	39 c2                	cmp    edx,eax
c00107c7:	76 17                	jbe    c00107e0 <tcp_rexmit_fast+0x64>
c00107c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107cd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00107d0:	0f b7 c0             	movzx  eax,ax
c00107d3:	d1 e8                	shr    eax,1
c00107d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d9:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107dd:	eb 19                	jmp    c00107f8 <tcp_rexmit_fast+0x7c>
c00107df:	90                   	nop
c00107e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	d1 e8                	shr    eax,1
c00107ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107f1:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00107f5:	8d 76 00             	lea    esi,[esi+0x0]
c00107f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107fc:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00107ff:	0f b7 d0             	movzx  edx,ax
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010809:	0f b7 c0             	movzx  eax,ax
c001080c:	01 c0                	add    eax,eax
c001080e:	39 c2                	cmp    edx,eax
c0010810:	7d 12                	jge    c0010824 <tcp_rexmit_fast+0xa8>
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010819:	d1 e0                	shl    eax,1
c001081b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001081f:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010823:	90                   	nop
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001082b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010832:	89 c1                	mov    ecx,eax
c0010834:	d1 e1                	shl    ecx,1
c0010836:	01 c8                	add    eax,ecx
c0010838:	01 d0                	add    eax,edx
c001083a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001083e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c0010842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010846:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010849:	83 c8 04             	or     eax,0x4
c001084c:	88 c2                	mov    dl,al
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010855:	8d 76 00             	lea    esi,[esi+0x0]
c0010858:	90                   	nop
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	8d 76 00             	lea    esi,[esi+0x0]

c0010860 <tcp_keepalive>:
c0010860:	83 ec 1c             	sub    esp,0x1c
c0010863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010867:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001086a:	83 e8 01             	sub    eax,0x1
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	50                   	push   eax
c0010871:	e8 96 03 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010876:	83 c4 10             	add    esp,0x10
c0010879:	50                   	push   eax
c001087a:	6a 00                	push   0x0
c001087c:	6a 00                	push   0x0
c001087e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010882:	e8 f1 e2 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c0010887:	83 c4 10             	add    esp,0x10
c001088a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010893:	0f 84 87 00 00 00    	je     c0010920 <tcp_keepalive+0xc0>
c0010899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001089d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108ab:	0f b7 d0             	movzx  edx,ax
c00108ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108b9:	83 ec 0c             	sub    esp,0xc
c00108bc:	52                   	push   edx
c00108bd:	6a 06                	push   0x6
c00108bf:	51                   	push   ecx
c00108c0:	50                   	push   eax
c00108c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00108c5:	e8 46 2a 00 00       	call   c0013310 <inet_chksum_pseudo>
c00108ca:	83 c4 20             	add    esp,0x20
c00108cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108d1:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c00108d5:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00108db:	83 c0 01             	add    eax,0x1
c00108de:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00108e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108e8:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00108eb:	0f b6 d0             	movzx  edx,al
c00108ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00108f9:	83 ec 08             	sub    esp,0x8
c00108fc:	6a 06                	push   0x6
c00108fe:	6a 00                	push   0x0
c0010900:	52                   	push   edx
c0010901:	51                   	push   ecx
c0010902:	50                   	push   eax
c0010903:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010907:	e8 38 36 00 00       	call   c0013f44 <ip_output>
c001090c:	83 c4 20             	add    esp,0x20
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010916:	e8 d9 7b ff ff       	call   c00084f4 <pbuf_free>
c001091b:	83 c4 10             	add    esp,0x10
c001091e:	eb 04                	jmp    c0010924 <tcp_keepalive+0xc4>
c0010920:	90                   	nop
c0010921:	8d 76 00             	lea    esi,[esi+0x0]
c0010924:	83 c4 1c             	add    esp,0x1c
c0010927:	c3                   	ret    

c0010928 <tcp_zero_window_probe>:
c0010928:	53                   	push   ebx
c0010929:	83 ec 28             	sub    esp,0x28
c001092c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010930:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010933:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010937:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001093c:	75 0e                	jne    c001094c <tcp_zero_window_probe+0x24>
c001093e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010942:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010945:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010949:	8d 76 00             	lea    esi,[esi+0x0]
c001094c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010951:	0f 84 95 01 00 00    	je     c0010aec <tcp_zero_window_probe+0x1c4>
c0010957:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010962:	0f b7 c0             	movzx  eax,ax
c0010965:	83 ec 0c             	sub    esp,0xc
c0010968:	50                   	push   eax
c0010969:	e8 7a 02 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	0f b7 c0             	movzx  eax,ax
c0010974:	83 e0 01             	and    eax,0x1
c0010977:	74 17                	je     c0010990 <tcp_zero_window_probe+0x68>
c0010979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001097d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010980:	0f b7 c0             	movzx  eax,ax
c0010983:	85 c0                	test   eax,eax
c0010985:	75 09                	jne    c0010990 <tcp_zero_window_probe+0x68>
c0010987:	b8 01 00 00 00       	mov    eax,0x1
c001098c:	eb 0a                	jmp    c0010998 <tcp_zero_window_probe+0x70>
c001098e:	66 90                	xchg   ax,ax
c0010990:	b8 00 00 00 00       	mov    eax,0x0
c0010995:	8d 76 00             	lea    esi,[esi+0x0]
c0010998:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001099c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109a1:	85 c0                	test   eax,eax
c00109a3:	0f 94 c0             	sete   al
c00109a6:	0f b6 c0             	movzx  eax,al
c00109a9:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00109ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00109b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109b8:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00109bd:	52                   	push   edx
c00109be:	50                   	push   eax
c00109bf:	6a 00                	push   0x0
c00109c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00109c5:	e8 ae e1 ff ff       	call   c000eb78 <tcp_output_alloc_header>
c00109ca:	83 c4 10             	add    esp,0x10
c00109cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00109d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00109d6:	0f 84 14 01 00 00    	je     c0010af0 <tcp_zero_window_probe+0x1c8>
c00109dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00109ec:	85 c0                	test   eax,eax
c00109ee:	74 28                	je     c0010a18 <tcp_zero_window_probe+0xf0>
c00109f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00109f8:	80 e4 c0             	and    ah,0xc0
c00109fb:	89 c3                	mov    ebx,eax
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	6a 11                	push   0x11
c0010a02:	e8 e1 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a07:	83 c4 10             	add    esp,0x10
c0010a0a:	09 d8                	or     eax,ebx
c0010a0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a10:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c0010a14:	eb 5a                	jmp    c0010a70 <tcp_zero_window_probe+0x148>
c0010a16:	66 90                	xchg   ax,ax
c0010a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a2d:	83 c0 14             	add    eax,0x14
c0010a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a38:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010a3c:	0f b7 c0             	movzx  eax,ax
c0010a3f:	83 ec 0c             	sub    esp,0xc
c0010a42:	50                   	push   eax
c0010a43:	e8 a0 01 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	0f b7 c0             	movzx  eax,ax
c0010a4e:	c1 e8 0c             	shr    eax,0xc
c0010a51:	c1 e0 02             	shl    eax,0x2
c0010a54:	0f b7 d0             	movzx  edx,ax
c0010a57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a5e:	52                   	push   edx
c0010a5f:	6a 01                	push   0x1
c0010a61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010a65:	50                   	push   eax
c0010a66:	e8 29 87 ff ff       	call   c0009194 <pbuf_copy_partial>
c0010a6b:	83 c4 10             	add    esp,0x10
c0010a6e:	66 90                	xchg   ax,ax
c0010a70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a77:	0f b7 d0             	movzx  edx,ax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	52                   	push   edx
c0010a89:	6a 06                	push   0x6
c0010a8b:	51                   	push   ecx
c0010a8c:	50                   	push   eax
c0010a8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010a91:	e8 7a 28 00 00       	call   c0013310 <inet_chksum_pseudo>
c0010a96:	83 c4 20             	add    esp,0x20
c0010a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a9d:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010aa1:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010aa7:	83 c0 01             	add    eax,0x1
c0010aaa:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ab4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010ab7:	0f b6 d0             	movzx  edx,al
c0010aba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010abe:	8d 48 04             	lea    ecx,[eax+0x4]
c0010ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	6a 06                	push   0x6
c0010aca:	6a 00                	push   0x0
c0010acc:	52                   	push   edx
c0010acd:	51                   	push   ecx
c0010ace:	50                   	push   eax
c0010acf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010ad3:	e8 6c 34 00 00       	call   c0013f44 <ip_output>
c0010ad8:	83 c4 20             	add    esp,0x20
c0010adb:	83 ec 0c             	sub    esp,0xc
c0010ade:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ae2:	e8 0d 7a ff ff       	call   c00084f4 <pbuf_free>
c0010ae7:	83 c4 10             	add    esp,0x10
c0010aea:	eb 08                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aec:	90                   	nop
c0010aed:	eb 05                	jmp    c0010af4 <tcp_zero_window_probe+0x1cc>
c0010aef:	90                   	nop
c0010af0:	90                   	nop
c0010af1:	8d 76 00             	lea    esi,[esi+0x0]
c0010af4:	83 c4 28             	add    esp,0x28
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	66 90                	xchg   ax,ax
c0010afb:	90                   	nop

c0010afc <sys_timeout>:
c0010afc:	83 ec 1c             	sub    esp,0x1c
c0010aff:	83 ec 0c             	sub    esp,0xc
c0010b02:	6a 0b                	push   0xb
c0010b04:	e8 03 70 ff ff       	call   c0007b0c <memp_malloc>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b15:	75 25                	jne    c0010b3c <sys_timeout+0x40>
c0010b17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010b1c:	0f 85 3e 01 00 00    	jne    c0010c60 <sys_timeout+0x164>
c0010b22:	83 ec 08             	sub    esp,0x8
c0010b25:	68 2c 0c 03 c0       	push   0xc0030c2c
c0010b2a:	68 06 fd 02 c0       	push   0xc002fd06
c0010b2f:	e8 54 f2 00 00       	call   c001fd88 <CPrintf>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	e9 24 01 00 00       	jmp    c0010c60 <sys_timeout+0x164>
c0010b3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b4a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010b4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010b64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b67:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	75 10                	jne    c0010b80 <sys_timeout+0x84>
c0010b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b74:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010b79:	e9 e6 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010b7e:	66 90                	xchg   ax,ax
c0010b80:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b88:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b8c:	73 2e                	jae    c0010bbc <sys_timeout+0xc0>
c0010b8e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b93:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b96:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b9b:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010b9f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba2:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bac:	89 10                	mov    DWORD PTR [eax],edx
c0010bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bb2:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010bb7:	e9 a8 00 00 00       	jmp    c0010c64 <sys_timeout+0x168>
c0010bbc:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bc5:	e9 86 00 00 00       	jmp    c0010c50 <sys_timeout+0x154>
c0010bca:	66 90                	xchg   ax,ax
c0010bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bda:	29 c2                	sub    edx,eax
c0010bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010be0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010be3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	74 17                	je     c0010c04 <sys_timeout+0x108>
c0010bed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bf3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010bf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bfa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfd:	39 c2                	cmp    edx,eax
c0010bff:	76 43                	jbe    c0010c44 <sys_timeout+0x148>
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c0a:	85 c0                	test   eax,eax
c0010c0c:	74 1e                	je     c0010c2c <sys_timeout+0x130>
c0010c0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c14:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c1b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c24:	29 d1                	sub    ecx,edx
c0010c26:	89 ca                	mov    edx,ecx
c0010c28:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c2b:	90                   	nop
c0010c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c36:	89 10                	mov    DWORD PTR [eax],edx
c0010c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c40:	89 10                	mov    DWORD PTR [eax],edx
c0010c42:	eb 20                	jmp    c0010c64 <sys_timeout+0x168>
c0010c44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c4e:	66 90                	xchg   ax,ax
c0010c50:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c55:	0f 85 71 ff ff ff    	jne    c0010bcc <sys_timeout+0xd0>
c0010c5b:	eb 07                	jmp    c0010c64 <sys_timeout+0x168>
c0010c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010c60:	90                   	nop
c0010c61:	8d 76 00             	lea    esi,[esi+0x0]
c0010c64:	83 c4 1c             	add    esp,0x1c
c0010c67:	c3                   	ret    

c0010c68 <tcpip_tcp_timer>:
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	e8 34 a5 ff ff       	call   c000b1a4 <tcp_tmr>
c0010c70:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010c75:	85 c0                	test   eax,eax
c0010c77:	75 0b                	jne    c0010c84 <tcpip_tcp_timer+0x1c>
c0010c79:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	74 1e                	je     c0010ca0 <tcpip_tcp_timer+0x38>
c0010c82:	66 90                	xchg   ax,ax
c0010c84:	83 ec 04             	sub    esp,0x4
c0010c87:	6a 00                	push   0x0
c0010c89:	68 68 0c 01 c0       	push   0xc0010c68
c0010c8e:	68 fa 00 00 00       	push   0xfa
c0010c93:	e8 64 fe ff ff       	call   c0010afc <sys_timeout>
c0010c98:	83 c4 10             	add    esp,0x10
c0010c9b:	eb 0f                	jmp    c0010cac <tcpip_tcp_timer+0x44>
c0010c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ca0:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	83 c4 0c             	add    esp,0xc
c0010cb0:	c3                   	ret    
c0010cb1:	8d 76 00             	lea    esi,[esi+0x0]

c0010cb4 <tcp_timer_needed>:
c0010cb4:	83 ec 0c             	sub    esp,0xc
c0010cb7:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010cbc:	85 c0                	test   eax,eax
c0010cbe:	75 38                	jne    c0010cf8 <tcp_timer_needed+0x44>
c0010cc0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010cc5:	85 c0                	test   eax,eax
c0010cc7:	75 0b                	jne    c0010cd4 <tcp_timer_needed+0x20>
c0010cc9:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010cce:	85 c0                	test   eax,eax
c0010cd0:	74 26                	je     c0010cf8 <tcp_timer_needed+0x44>
c0010cd2:	66 90                	xchg   ax,ax
c0010cd4:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010cde:	83 ec 04             	sub    esp,0x4
c0010ce1:	6a 00                	push   0x0
c0010ce3:	68 68 0c 01 c0       	push   0xc0010c68
c0010ce8:	68 fa 00 00 00       	push   0xfa
c0010ced:	e8 0a fe ff ff       	call   c0010afc <sys_timeout>
c0010cf2:	83 c4 10             	add    esp,0x10
c0010cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010cf8:	90                   	nop
c0010cf9:	83 c4 0c             	add    esp,0xc
c0010cfc:	c3                   	ret    
c0010cfd:	8d 76 00             	lea    esi,[esi+0x0]

c0010d00 <ip_reass_timer>:
c0010d00:	83 ec 0c             	sub    esp,0xc
c0010d03:	e8 f0 3a 00 00       	call   c00147f8 <ip_reass_tmr>
c0010d08:	83 ec 04             	sub    esp,0x4
c0010d0b:	6a 00                	push   0x0
c0010d0d:	68 00 0d 01 c0       	push   0xc0010d00
c0010d12:	68 e8 03 00 00       	push   0x3e8
c0010d17:	e8 e0 fd ff ff       	call   c0010afc <sys_timeout>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	90                   	nop
c0010d20:	83 c4 0c             	add    esp,0xc
c0010d23:	c3                   	ret    

c0010d24 <arp_timer>:
c0010d24:	83 ec 0c             	sub    esp,0xc
c0010d27:	e8 60 0d 00 00       	call   c0011a8c <etharp_tmr>
c0010d2c:	83 ec 04             	sub    esp,0x4
c0010d2f:	6a 00                	push   0x0
c0010d31:	68 24 0d 01 c0       	push   0xc0010d24
c0010d36:	68 88 13 00 00       	push   0x1388
c0010d3b:	e8 bc fd ff ff       	call   c0010afc <sys_timeout>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	90                   	nop
c0010d44:	83 c4 0c             	add    esp,0xc
c0010d47:	c3                   	ret    

c0010d48 <sys_timeouts_init>:
c0010d48:	83 ec 0c             	sub    esp,0xc
c0010d4b:	83 ec 04             	sub    esp,0x4
c0010d4e:	6a 00                	push   0x0
c0010d50:	68 00 0d 01 c0       	push   0xc0010d00
c0010d55:	68 e8 03 00 00       	push   0x3e8
c0010d5a:	e8 9d fd ff ff       	call   c0010afc <sys_timeout>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	83 ec 04             	sub    esp,0x4
c0010d65:	6a 00                	push   0x0
c0010d67:	68 24 0d 01 c0       	push   0xc0010d24
c0010d6c:	68 88 13 00 00       	push   0x1388
c0010d71:	e8 86 fd ff ff       	call   c0010afc <sys_timeout>
c0010d76:	83 c4 10             	add    esp,0x10
c0010d79:	90                   	nop
c0010d7a:	83 c4 0c             	add    esp,0xc
c0010d7d:	c3                   	ret    
c0010d7e:	66 90                	xchg   ax,ax

c0010d80 <sys_untimeout>:
c0010d80:	83 ec 1c             	sub    esp,0x1c
c0010d83:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d88:	85 c0                	test   eax,eax
c0010d8a:	0f 84 b4 00 00 00    	je     c0010e44 <sys_untimeout+0xc4>
c0010d90:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010da1:	e9 8e 00 00 00       	jmp    c0010e34 <sys_untimeout+0xb4>
c0010da6:	66 90                	xchg   ax,ax
c0010da8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010daf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010db3:	75 6b                	jne    c0010e20 <sys_untimeout+0xa0>
c0010db5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010db9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010dbc:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010dc0:	75 5e                	jne    c0010e20 <sys_untimeout+0xa0>
c0010dc2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010dc7:	75 0f                	jne    c0010dd8 <sys_untimeout+0x58>
c0010dc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dcf:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010dd4:	eb 0e                	jmp    c0010de4 <sys_untimeout+0x64>
c0010dd6:	66 90                	xchg   ax,ax
c0010dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ddc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de2:	89 10                	mov    DWORD PTR [eax],edx
c0010de4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dea:	85 c0                	test   eax,eax
c0010dec:	74 1e                	je     c0010e0c <sys_untimeout+0x8c>
c0010dee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010df4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010df7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dfb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010dfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e04:	01 ca                	add    edx,ecx
c0010e06:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e09:	8d 76 00             	lea    esi,[esi+0x0]
c0010e0c:	83 ec 08             	sub    esp,0x8
c0010e0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e13:	6a 0b                	push   0xb
c0010e15:	e8 1e 6e ff ff       	call   c0007c38 <memp_free>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	eb 29                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e1f:	90                   	nop
c0010e20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e32:	66 90                	xchg   ax,ax
c0010e34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e39:	0f 85 69 ff ff ff    	jne    c0010da8 <sys_untimeout+0x28>
c0010e3f:	90                   	nop
c0010e40:	eb 06                	jmp    c0010e48 <sys_untimeout+0xc8>
c0010e42:	66 90                	xchg   ax,ax
c0010e44:	90                   	nop
c0010e45:	8d 76 00             	lea    esi,[esi+0x0]
c0010e48:	83 c4 1c             	add    esp,0x1c
c0010e4b:	c3                   	ret    

c0010e4c <sys_timeouts_mbox_fetch>:
c0010e4c:	83 ec 1c             	sub    esp,0x1c
c0010e4f:	90                   	nop
c0010e50:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e55:	85 c0                	test   eax,eax
c0010e57:	75 1f                	jne    c0010e78 <sys_timeouts_mbox_fetch+0x2c>
c0010e59:	83 ec 04             	sub    esp,0x4
c0010e5c:	6a 00                	push   0x0
c0010e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e66:	e8 c1 fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e72:	e9 cd 00 00 00       	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010e77:	90                   	nop
c0010e78:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	85 c0                	test   eax,eax
c0010e82:	74 24                	je     c0010ea8 <sys_timeouts_mbox_fetch+0x5c>
c0010e84:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	83 ec 04             	sub    esp,0x4
c0010e8f:	50                   	push   eax
c0010e90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e98:	e8 8f fe fe ff       	call   c0000d2c <sys_arch_mbox_fetch>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ea4:	eb 0a                	jmp    c0010eb0 <sys_timeouts_mbox_fetch+0x64>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010eb0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010eb5:	75 5d                	jne    c0010f14 <sys_timeouts_mbox_fetch+0xc8>
c0010eb7:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ec6:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010ecb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ed2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010eda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010edd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ee0:	83 ec 08             	sub    esp,0x8
c0010ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ee7:	6a 0b                	push   0xb
c0010ee9:	e8 4a 6d ff ff       	call   c0007c38 <memp_free>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010ef6:	0f 84 54 ff ff ff    	je     c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f07:	ff d0                	call   eax
c0010f09:	83 c4 10             	add    esp,0x10
c0010f0c:	e9 3f ff ff ff       	jmp    c0010e50 <sys_timeouts_mbox_fetch+0x4>
c0010f11:	8d 76 00             	lea    esi,[esi+0x0]
c0010f14:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1c:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010f20:	73 16                	jae    c0010f38 <sys_timeouts_mbox_fetch+0xec>
c0010f22:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f27:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f2a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f2f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010f33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f36:	eb 0c                	jmp    c0010f44 <sys_timeouts_mbox_fetch+0xf8>
c0010f38:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010f3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f44:	90                   	nop
c0010f45:	83 c4 1c             	add    esp,0x1c
c0010f48:	c3                   	ret    
c0010f49:	66 90                	xchg   ax,ax
c0010f4b:	90                   	nop

c0010f4c <udp_input>:
c0010f4c:	53                   	push   ebx
c0010f4d:	83 ec 28             	sub    esp,0x28
c0010f50:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010f56:	83 c0 01             	add    eax,0x1
c0010f59:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f71:	0f b7 d8             	movzx  ebx,ax
c0010f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f78:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f7b:	0f b7 c0             	movzx  eax,ax
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	50                   	push   eax
c0010f82:	e8 61 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010f87:	83 c4 10             	add    esp,0x10
c0010f8a:	0f b7 c0             	movzx  eax,ax
c0010f8d:	c1 e8 08             	shr    eax,0x8
c0010f90:	0f b7 c0             	movzx  eax,ax
c0010f93:	83 e0 0f             	and    eax,0xf
c0010f96:	83 c0 02             	add    eax,0x2
c0010f99:	c1 e0 02             	shl    eax,0x2
c0010f9c:	39 c3                	cmp    ebx,eax
c0010f9e:	7c 3c                	jl     c0010fdc <udp_input+0x90>
c0010fa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010fa7:	0f b7 c0             	movzx  eax,ax
c0010faa:	83 ec 0c             	sub    esp,0xc
c0010fad:	50                   	push   eax
c0010fae:	e8 35 fc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010fb3:	83 c4 10             	add    esp,0x10
c0010fb6:	0f b7 c0             	movzx  eax,ax
c0010fb9:	c1 e8 08             	shr    eax,0x8
c0010fbc:	83 e0 0f             	and    eax,0xf
c0010fbf:	c1 e0 02             	shl    eax,0x2
c0010fc2:	f7 d8                	neg    eax
c0010fc4:	98                   	cwde   
c0010fc5:	83 ec 08             	sub    esp,0x8
c0010fc8:	50                   	push   eax
c0010fc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fcd:	e8 86 73 ff ff       	call   c0008358 <pbuf_header>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	0f b6 c0             	movzx  eax,al
c0010fd8:	85 c0                	test   eax,eax
c0010fda:	74 34                	je     c0011010 <udp_input+0xc4>
c0010fdc:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010fe2:	83 c0 01             	add    eax,0x1
c0010fe5:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010feb:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010ff1:	83 c0 01             	add    eax,0x1
c0010ff4:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010ffa:	83 ec 0c             	sub    esp,0xc
c0010ffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011001:	e8 ee 74 ff ff       	call   c00084f4 <pbuf_free>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	e9 aa 03 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001100e:	66 90                	xchg   ax,ax
c0011010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011014:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011017:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001101b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011020:	83 ec 08             	sub    esp,0x8
c0011023:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011027:	50                   	push   eax
c0011028:	e8 bb 2f 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0011034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011038:	66 8b 00             	mov    ax,WORD PTR [eax]
c001103b:	0f b7 c0             	movzx  eax,ax
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	50                   	push   eax
c0011042:	e8 a1 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001104f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011053:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011057:	0f b7 c0             	movzx  eax,ax
c001105a:	83 ec 0c             	sub    esp,0xc
c001105d:	50                   	push   eax
c001105e:	e8 85 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001106b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011073:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011078:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011080:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011085:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011089:	e9 0a 01 00 00       	jmp    c0011198 <udp_input+0x24c>
c001108e:	66 90                	xchg   ax,ax
c0011090:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0011095:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011099:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001109d:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00110a2:	0f b7 c0             	movzx  eax,ax
c00110a5:	39 c2                	cmp    edx,eax
c00110a7:	75 57                	jne    c0011100 <udp_input+0x1b4>
c00110a9:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110ae:	85 c0                	test   eax,eax
c00110b0:	75 12                	jne    c00110c4 <udp_input+0x178>
c00110b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 22                	je     c00110dc <udp_input+0x190>
c00110ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110be:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 18                	je     c00110dc <udp_input+0x190>
c00110c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00110ca:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110cf:	39 c2                	cmp    edx,eax
c00110d1:	74 09                	je     c00110dc <udp_input+0x190>
c00110d3:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00110d8:	85 c0                	test   eax,eax
c00110da:	74 24                	je     c0011100 <udp_input+0x1b4>
c00110dc:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c00110e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00110e6:	75 18                	jne    c0011100 <udp_input+0x1b4>
c00110e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ec:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00110ef:	0f b6 c0             	movzx  eax,al
c00110f2:	83 e0 04             	and    eax,0x4
c00110f5:	75 09                	jne    c0011100 <udp_input+0x1b4>
c00110f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00110ff:	90                   	nop
c0011100:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011105:	85 c0                	test   eax,eax
c0011107:	74 7b                	je     c0011184 <udp_input+0x238>
c0011109:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011110:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011115:	0f b7 c0             	movzx  eax,ax
c0011118:	39 c2                	cmp    edx,eax
c001111a:	75 68                	jne    c0011184 <udp_input+0x238>
c001111c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011120:	83 c0 04             	add    eax,0x4
c0011123:	74 1b                	je     c0011140 <udp_input+0x1f4>
c0011125:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001112c:	85 c0                	test   eax,eax
c001112e:	74 10                	je     c0011140 <udp_input+0x1f4>
c0011130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011137:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c001113c:	39 c2                	cmp    edx,eax
c001113e:	75 44                	jne    c0011184 <udp_input+0x238>
c0011140:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011145:	74 29                	je     c0011170 <udp_input+0x224>
c0011147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001114b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001114e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011152:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011155:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001115b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001115f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011166:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001116b:	eb 37                	jmp    c00111a4 <udp_input+0x258>
c001116d:	8d 76 00             	lea    esi,[esi+0x0]
c0011170:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0011176:	83 c0 01             	add    eax,0x1
c0011179:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c001117f:	eb 23                	jmp    c00111a4 <udp_input+0x258>
c0011181:	8d 76 00             	lea    esi,[esi+0x0]
c0011184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011188:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011193:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011197:	90                   	nop
c0011198:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001119d:	0f 85 ed fe ff ff    	jne    c0011090 <udp_input+0x144>
c00111a3:	90                   	nop
c00111a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111a9:	75 09                	jne    c00111b4 <udp_input+0x268>
c00111ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00111b3:	90                   	nop
c00111b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b9:	75 15                	jne    c00111d0 <udp_input+0x284>
c00111bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111bf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00111c2:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00111c7:	39 c2                	cmp    edx,eax
c00111c9:	0f 85 d9 01 00 00    	jne    c00113a8 <udp_input+0x45c>
c00111cf:	90                   	nop
c00111d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111d4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00111d8:	0f b7 c0             	movzx  eax,ax
c00111db:	85 c0                	test   eax,eax
c00111dd:	74 61                	je     c0011240 <udp_input+0x2f4>
c00111df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00111e6:	0f b7 c0             	movzx  eax,ax
c00111e9:	83 ec 0c             	sub    esp,0xc
c00111ec:	50                   	push   eax
c00111ed:	6a 11                	push   0x11
c00111ef:	68 98 68 03 c0       	push   0xc0036898
c00111f4:	68 90 68 03 c0       	push   0xc0036890
c00111f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00111fd:	e8 0e 21 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011202:	83 c4 20             	add    esp,0x20
c0011205:	0f b7 c0             	movzx  eax,ax
c0011208:	85 c0                	test   eax,eax
c001120a:	74 34                	je     c0011240 <udp_input+0x2f4>
c001120c:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0011212:	83 c0 01             	add    eax,0x1
c0011215:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c001121b:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011221:	83 c0 01             	add    eax,0x1
c0011224:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001122a:	83 ec 0c             	sub    esp,0xc
c001122d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011231:	e8 be 72 ff ff       	call   c00084f4 <pbuf_free>
c0011236:	83 c4 10             	add    esp,0x10
c0011239:	e9 7a 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c001123e:	66 90                	xchg   ax,ax
c0011240:	83 ec 08             	sub    esp,0x8
c0011243:	6a f8                	push   0xfffffff8
c0011245:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011249:	e8 0a 71 ff ff       	call   c0008358 <pbuf_header>
c001124e:	83 c4 10             	add    esp,0x10
c0011251:	0f b6 c0             	movzx  eax,al
c0011254:	85 c0                	test   eax,eax
c0011256:	74 38                	je     c0011290 <udp_input+0x344>
c0011258:	83 ec 08             	sub    esp,0x8
c001125b:	68 69 0c 03 c0       	push   0xc0030c69
c0011260:	68 06 fd 02 c0       	push   0xc002fd06
c0011265:	e8 1e eb 00 00       	call   c001fd88 <CPrintf>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011273:	83 c0 01             	add    eax,0x1
c0011276:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c001127c:	83 ec 0c             	sub    esp,0xc
c001127f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011283:	e8 6c 72 ff ff       	call   c00084f4 <pbuf_free>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	e9 28 01 00 00       	jmp    c00113b8 <udp_input+0x46c>
c0011290:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011295:	74 51                	je     c00112e8 <udp_input+0x39c>
c0011297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001129b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001129e:	85 c0                	test   eax,eax
c00112a0:	74 32                	je     c00112d4 <udp_input+0x388>
c00112a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112a6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00112a9:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00112ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00112b2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	51                   	push   ecx
c00112b9:	68 90 68 03 c0       	push   0xc0036890
c00112be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00112c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00112c6:	52                   	push   edx
c00112c7:	ff d0                	call   eax
c00112c9:	83 c4 20             	add    esp,0x20
c00112cc:	e9 e7 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112d1:	8d 76 00             	lea    esi,[esi+0x0]
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112db:	e8 14 72 ff ff       	call   c00084f4 <pbuf_free>
c00112e0:	83 c4 10             	add    esp,0x10
c00112e3:	e9 d0 00 00 00       	jmp    c00113b8 <udp_input+0x46c>
c00112e8:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00112ed:	85 c0                	test   eax,eax
c00112ef:	0f 85 83 00 00 00    	jne    c0011378 <udp_input+0x42c>
c00112f5:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00112fa:	25 f0 00 00 00       	and    eax,0xf0
c00112ff:	3d e0 00 00 00       	cmp    eax,0xe0
c0011304:	74 72                	je     c0011378 <udp_input+0x42c>
c0011306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001130a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001130d:	0f b7 c0             	movzx  eax,ax
c0011310:	83 ec 0c             	sub    esp,0xc
c0011313:	50                   	push   eax
c0011314:	e8 cf f8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011319:	83 c4 10             	add    esp,0x10
c001131c:	0f b7 c0             	movzx  eax,ax
c001131f:	c1 e8 08             	shr    eax,0x8
c0011322:	0f b7 c0             	movzx  eax,ax
c0011325:	83 e0 0f             	and    eax,0xf
c0011328:	83 c0 02             	add    eax,0x2
c001132b:	c1 e0 02             	shl    eax,0x2
c001132e:	98                   	cwde   
c001132f:	83 ec 08             	sub    esp,0x8
c0011332:	50                   	push   eax
c0011333:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011337:	e8 1c 70 ff ff       	call   c0008358 <pbuf_header>
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001134a:	74 18                	je     c0011364 <udp_input+0x418>
c001134c:	83 ec 08             	sub    esp,0x8
c001134f:	68 7d 0c 03 c0       	push   0xc0030c7d
c0011354:	68 06 fd 02 c0       	push   0xc002fd06
c0011359:	e8 2a ea 00 00       	call   c001fd88 <CPrintf>
c001135e:	83 c4 10             	add    esp,0x10
c0011361:	8d 76 00             	lea    esi,[esi+0x0]
c0011364:	83 ec 08             	sub    esp,0x8
c0011367:	6a 03                	push   0x3
c0011369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001136d:	e8 5e 1e 00 00       	call   c00131d0 <icmp_dest_unreach>
c0011372:	83 c4 10             	add    esp,0x10
c0011375:	8d 76 00             	lea    esi,[esi+0x0]
c0011378:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c001137e:	83 c0 01             	add    eax,0x1
c0011381:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c0011387:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001138d:	83 c0 01             	add    eax,0x1
c0011390:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001139d:	e8 52 71 ff ff       	call   c00084f4 <pbuf_free>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	eb 11                	jmp    c00113b8 <udp_input+0x46c>
c00113a7:	90                   	nop
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113af:	e8 40 71 ff ff       	call   c00084f4 <pbuf_free>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	90                   	nop
c00113b8:	90                   	nop
c00113b9:	83 c4 28             	add    esp,0x28
c00113bc:	5b                   	pop    ebx
c00113bd:	c3                   	ret    
c00113be:	66 90                	xchg   ax,ax

c00113c0 <udp_bind>:
c00113c0:	83 ec 2c             	sub    esp,0x2c
c00113c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00113c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113cc:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00113d1:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113da:	e9 8d 00 00 00       	jmp    c001146c <udp_bind+0xac>
c00113df:	90                   	nop
c00113e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113e4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00113e8:	75 26                	jne    c0011410 <udp_bind+0x50>
c00113ea:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00113ef:	85 c0                	test   eax,eax
c00113f1:	74 15                	je     c0011408 <udp_bind+0x48>
c00113f3:	83 ec 08             	sub    esp,0x8
c00113f6:	68 91 0c 03 c0       	push   0xc0030c91
c00113fb:	68 06 fd 02 c0       	push   0xc002fd06
c0011400:	e8 83 e9 00 00       	call   c001fd88 <CPrintf>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c001140d:	eb 51                	jmp    c0011460 <udp_bind+0xa0>
c001140f:	90                   	nop
c0011410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011414:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011418:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001141d:	0f b7 c0             	movzx  eax,ax
c0011420:	39 c2                	cmp    edx,eax
c0011422:	75 3c                	jne    c0011460 <udp_bind+0xa0>
c0011424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011428:	85 c0                	test   eax,eax
c001142a:	74 2c                	je     c0011458 <udp_bind+0x98>
c001142c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011430:	8b 00                	mov    eax,DWORD PTR [eax]
c0011432:	85 c0                	test   eax,eax
c0011434:	74 22                	je     c0011458 <udp_bind+0x98>
c0011436:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001143b:	74 1b                	je     c0011458 <udp_bind+0x98>
c001143d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011441:	8b 00                	mov    eax,DWORD PTR [eax]
c0011443:	85 c0                	test   eax,eax
c0011445:	74 11                	je     c0011458 <udp_bind+0x98>
c0011447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001144b:	8b 10                	mov    edx,DWORD PTR [eax]
c001144d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011451:	8b 00                	mov    eax,DWORD PTR [eax]
c0011453:	39 c2                	cmp    edx,eax
c0011455:	75 09                	jne    c0011460 <udp_bind+0xa0>
c0011457:	90                   	nop
c0011458:	b0 f8                	mov    al,0xf8
c001145a:	e9 dd 00 00 00       	jmp    c001153c <udp_bind+0x17c>
c001145f:	90                   	nop
c0011460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011464:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001146b:	90                   	nop
c001146c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011471:	0f 85 69 ff ff ff    	jne    c00113e0 <udp_bind+0x20>
c0011477:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001147c:	74 0a                	je     c0011488 <udp_bind+0xc8>
c001147e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011482:	8b 00                	mov    eax,DWORD PTR [eax]
c0011484:	eb 0a                	jmp    c0011490 <udp_bind+0xd0>
c0011486:	66 90                	xchg   ax,ax
c0011488:	b8 00 00 00 00       	mov    eax,0x0
c001148d:	8d 76 00             	lea    esi,[esi+0x0]
c0011490:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011494:	89 02                	mov    DWORD PTR [edx],eax
c0011496:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001149b:	85 c0                	test   eax,eax
c001149d:	75 6d                	jne    c001150c <udp_bind+0x14c>
c001149f:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00114a6:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00114ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114af:	eb 3b                	jmp    c00114ec <udp_bind+0x12c>
c00114b1:	8d 76 00             	lea    esi,[esi+0x0]
c00114b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00114bc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00114c1:	0f b7 c0             	movzx  eax,ax
c00114c4:	39 c2                	cmp    edx,eax
c00114c6:	75 18                	jne    c00114e0 <udp_bind+0x120>
c00114c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114cc:	83 c0 01             	add    eax,0x1
c00114cf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00114d4:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00114d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114dd:	eb 0d                	jmp    c00114ec <udp_bind+0x12c>
c00114df:	90                   	nop
c00114e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00114e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114eb:	90                   	nop
c00114ec:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114f1:	74 0d                	je     c0011500 <udp_bind+0x140>
c00114f3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114f8:	3d ff ff 00 00       	cmp    eax,0xffff
c00114fd:	75 b5                	jne    c00114b4 <udp_bind+0xf4>
c00114ff:	90                   	nop
c0011500:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011505:	74 05                	je     c001150c <udp_bind+0x14c>
c0011507:	b0 f8                	mov    al,0xf8
c0011509:	eb 31                	jmp    c001153c <udp_bind+0x17c>
c001150b:	90                   	nop
c001150c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011510:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011514:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c0011518:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001151d:	85 c0                	test   eax,eax
c001151f:	75 17                	jne    c0011538 <udp_bind+0x178>
c0011521:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011527:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001152b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001152e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011532:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011537:	90                   	nop
c0011538:	b0 00                	mov    al,0x0
c001153a:	66 90                	xchg   ax,ax
c001153c:	83 c4 2c             	add    esp,0x2c
c001153f:	c3                   	ret    

c0011540 <udp_sendto_if>:
c0011540:	83 ec 2c             	sub    esp,0x2c
c0011543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011547:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001154c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011550:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011554:	0f b7 c0             	movzx  eax,ax
c0011557:	85 c0                	test   eax,eax
c0011559:	75 39                	jne    c0011594 <udp_sendto_if+0x54>
c001155b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001155f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011563:	0f b7 d0             	movzx  edx,ax
c0011566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001156a:	83 ec 04             	sub    esp,0x4
c001156d:	52                   	push   edx
c001156e:	50                   	push   eax
c001156f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011573:	e8 48 fe ff ff       	call   c00113c0 <udp_bind>
c0011578:	83 c4 10             	add    esp,0x10
c001157b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001157f:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011584:	85 c0                	test   eax,eax
c0011586:	74 0c                	je     c0011594 <udp_sendto_if+0x54>
c0011588:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001158c:	e9 2b 02 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c0011591:	8d 76 00             	lea    esi,[esi+0x0]
c0011594:	83 ec 08             	sub    esp,0x8
c0011597:	6a 08                	push   0x8
c0011599:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001159d:	e8 b6 6d ff ff       	call   c0008358 <pbuf_header>
c00115a2:	83 c4 10             	add    esp,0x10
c00115a5:	0f b6 c0             	movzx  eax,al
c00115a8:	85 c0                	test   eax,eax
c00115aa:	74 48                	je     c00115f4 <udp_sendto_if+0xb4>
c00115ac:	83 ec 04             	sub    esp,0x4
c00115af:	6a 00                	push   0x0
c00115b1:	6a 08                	push   0x8
c00115b3:	6a 01                	push   0x1
c00115b5:	e8 12 71 ff ff       	call   c00086cc <pbuf_alloc>
c00115ba:	83 c4 10             	add    esp,0x10
c00115bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115c1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00115c6:	75 08                	jne    c00115d0 <udp_sendto_if+0x90>
c00115c8:	b0 ff                	mov    al,0xff
c00115ca:	e9 ed 01 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00115cf:	90                   	nop
c00115d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115d7:	0f b7 c0             	movzx  eax,ax
c00115da:	85 c0                	test   eax,eax
c00115dc:	74 1e                	je     c00115fc <udp_sendto_if+0xbc>
c00115de:	83 ec 08             	sub    esp,0x8
c00115e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00115e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115e9:	e8 1e 78 ff ff       	call   c0008e0c <pbuf_chain>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	eb 09                	jmp    c00115fc <udp_sendto_if+0xbc>
c00115f3:	90                   	nop
c00115f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00115fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011600:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011604:	0f b7 c0             	movzx  eax,ax
c0011607:	83 f8 07             	cmp    eax,0x7
c001160a:	77 18                	ja     c0011624 <udp_sendto_if+0xe4>
c001160c:	83 ec 08             	sub    esp,0x8
c001160f:	68 a0 0c 03 c0       	push   0xc0030ca0
c0011614:	68 06 fd 02 c0       	push   0xc002fd06
c0011619:	e8 6a e7 00 00       	call   c001fd88 <CPrintf>
c001161e:	83 c4 10             	add    esp,0x10
c0011621:	8d 76 00             	lea    esi,[esi+0x0]
c0011624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001162f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011633:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011637:	0f b7 c0             	movzx  eax,ax
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 a5 f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001164a:	66 89 02             	mov    WORD PTR [edx],ax
c001164d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	50                   	push   eax
c0011656:	e8 8d f5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011662:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0011666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	85 c0                	test   eax,eax
c0011676:	74 0c                	je     c0011684 <udp_sendto_if+0x144>
c0011678:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167c:	8b 00                	mov    eax,DWORD PTR [eax]
c001167e:	85 c0                	test   eax,eax
c0011680:	75 12                	jne    c0011694 <udp_sendto_if+0x154>
c0011682:	66 90                	xchg   ax,ax
c0011684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011688:	83 c0 04             	add    eax,0x4
c001168b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001168f:	eb 47                	jmp    c00116d8 <udp_sendto_if+0x198>
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011698:	8b 10                	mov    edx,DWORD PTR [eax]
c001169a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	39 c2                	cmp    edx,eax
c00116a3:	74 2b                	je     c00116d0 <udp_sendto_if+0x190>
c00116a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116a9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116ad:	74 19                	je     c00116c8 <udp_sendto_if+0x188>
c00116af:	83 ec 0c             	sub    esp,0xc
c00116b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b6:	e8 39 6e ff ff       	call   c00084f4 <pbuf_free>
c00116bb:	83 c4 10             	add    esp,0x10
c00116be:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c6:	66 90                	xchg   ax,ax
c00116c8:	b0 fa                	mov    al,0xfa
c00116ca:	e9 ed 00 00 00       	jmp    c00117bc <udp_sendto_if+0x27c>
c00116cf:	90                   	nop
c00116d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00116df:	0f b7 c0             	movzx  eax,ax
c00116e2:	83 ec 0c             	sub    esp,0xc
c00116e5:	50                   	push   eax
c00116e6:	e8 fd f4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116f2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00116f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116fa:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116fd:	0f b6 c0             	movzx  eax,al
c0011700:	83 e0 01             	and    eax,0x1
c0011703:	75 4b                	jne    c0011750 <udp_sendto_if+0x210>
c0011705:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011709:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001170c:	0f b7 c0             	movzx  eax,ax
c001170f:	83 ec 0c             	sub    esp,0xc
c0011712:	50                   	push   eax
c0011713:	6a 11                	push   0x11
c0011715:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011719:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001171d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011721:	e8 ea 1b 00 00       	call   c0013310 <inet_chksum_pseudo>
c0011726:	83 c4 20             	add    esp,0x20
c0011729:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001172e:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011733:	85 c0                	test   eax,eax
c0011735:	75 09                	jne    c0011740 <udp_sendto_if+0x200>
c0011737:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c001173e:	66 90                	xchg   ax,ax
c0011740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011744:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0011749:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001174d:	8d 76 00             	lea    esi,[esi+0x0]
c0011750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011754:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011757:	0f b6 d0             	movzx  edx,al
c001175a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001175e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011761:	0f b6 c0             	movzx  eax,al
c0011764:	83 ec 04             	sub    esp,0x4
c0011767:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001176b:	6a 11                	push   0x11
c001176d:	52                   	push   edx
c001176e:	50                   	push   eax
c001176f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011773:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011777:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001177b:	e8 f4 24 00 00       	call   c0013c74 <ip_output_if>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011787:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001178b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001178f:	74 17                	je     c00117a8 <udp_sendto_if+0x268>
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011798:	e8 57 6d ff ff       	call   c00084f4 <pbuf_free>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00117a8:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c00117ae:	83 c0 01             	add    eax,0x1
c00117b1:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c00117b7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00117bb:	90                   	nop
c00117bc:	83 c4 2c             	add    esp,0x2c
c00117bf:	c3                   	ret    

c00117c0 <udp_sendto>:
c00117c0:	83 ec 2c             	sub    esp,0x2c
c00117c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00117c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00117d3:	e8 c4 1f 00 00       	call   c001379c <ip_route>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00117e4:	75 16                	jne    c00117fc <udp_sendto+0x3c>
c00117e6:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c00117ec:	83 c0 01             	add    eax,0x1
c00117ef:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00117f5:	b0 fc                	mov    al,0xfc
c00117f7:	eb 27                	jmp    c0011820 <udp_sendto+0x60>
c00117f9:	8d 76 00             	lea    esi,[esi+0x0]
c00117fc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011808:	50                   	push   eax
c0011809:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001180d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011815:	e8 26 fd ff ff       	call   c0011540 <udp_sendto_if>
c001181a:	83 c4 20             	add    esp,0x20
c001181d:	8d 76 00             	lea    esi,[esi+0x0]
c0011820:	83 c4 2c             	add    esp,0x2c
c0011823:	c3                   	ret    

c0011824 <udp_send>:
c0011824:	83 ec 0c             	sub    esp,0xc
c0011827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001182b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001182e:	0f b7 c0             	movzx  eax,ax
c0011831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011835:	83 c2 04             	add    edx,0x4
c0011838:	50                   	push   eax
c0011839:	52                   	push   edx
c001183a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001183e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011842:	e8 79 ff ff ff       	call   c00117c0 <udp_sendto>
c0011847:	83 c4 10             	add    esp,0x10
c001184a:	83 c4 0c             	add    esp,0xc
c001184d:	c3                   	ret    
c001184e:	66 90                	xchg   ax,ax

c0011850 <udp_connect>:
c0011850:	83 ec 2c             	sub    esp,0x2c
c0011853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011857:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001185c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011860:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011864:	0f b7 c0             	movzx  eax,ax
c0011867:	85 c0                	test   eax,eax
c0011869:	75 39                	jne    c00118a4 <udp_connect+0x54>
c001186b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011873:	0f b7 d0             	movzx  edx,ax
c0011876:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001187a:	83 ec 04             	sub    esp,0x4
c001187d:	52                   	push   edx
c001187e:	50                   	push   eax
c001187f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011883:	e8 38 fb ff ff       	call   c00113c0 <udp_bind>
c0011888:	83 c4 10             	add    esp,0x10
c001188b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001188f:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011894:	85 c0                	test   eax,eax
c0011896:	74 0c                	je     c00118a4 <udp_connect+0x54>
c0011898:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001189c:	e9 8b 00 00 00       	jmp    c001192c <udp_connect+0xdc>
c00118a1:	8d 76 00             	lea    esi,[esi+0x0]
c00118a4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00118a9:	74 09                	je     c00118b4 <udp_connect+0x64>
c00118ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118af:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b1:	eb 09                	jmp    c00118bc <udp_connect+0x6c>
c00118b3:	90                   	nop
c00118b4:	b8 00 00 00 00       	mov    eax,0x0
c00118b9:	8d 76 00             	lea    esi,[esi+0x0]
c00118bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00118c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00118c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cb:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00118cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118d3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00118d6:	83 c8 04             	or     eax,0x4
c00118d9:	88 c2                	mov    dl,al
c00118db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118df:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00118e2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118eb:	eb 1f                	jmp    c001190c <udp_connect+0xbc>
c00118ed:	8d 76 00             	lea    esi,[esi+0x0]
c00118f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f4:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00118f8:	75 06                	jne    c0011900 <udp_connect+0xb0>
c00118fa:	b0 00                	mov    al,0x0
c00118fc:	eb 2e                	jmp    c001192c <udp_connect+0xdc>
c00118fe:	66 90                	xchg   ax,ax
c0011900:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011904:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001190b:	90                   	nop
c001190c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011911:	75 dd                	jne    c00118f0 <udp_connect+0xa0>
c0011913:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011924:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011929:	b0 00                	mov    al,0x0
c001192b:	90                   	nop
c001192c:	83 c4 2c             	add    esp,0x2c
c001192f:	c3                   	ret    

c0011930 <udp_disconnect>:
c0011930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011934:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001193b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011949:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001194c:	83 e0 fb             	and    eax,0xfffffffb
c001194f:	88 c2                	mov    dl,al
c0011951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011955:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011958:	90                   	nop
c0011959:	c3                   	ret    
c001195a:	66 90                	xchg   ax,ax

c001195c <udp_recv>:
c001195c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011960:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011964:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011967:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001196b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001196f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011972:	90                   	nop
c0011973:	c3                   	ret    

c0011974 <udp_remove>:
c0011974:	83 ec 1c             	sub    esp,0x1c
c0011977:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001197c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011980:	75 12                	jne    c0011994 <udp_remove+0x20>
c0011982:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011987:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001198a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001198f:	eb 4b                	jmp    c00119dc <udp_remove+0x68>
c0011991:	8d 76 00             	lea    esi,[esi+0x0]
c0011994:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001199d:	eb 35                	jmp    c00119d4 <udp_remove+0x60>
c001199f:	90                   	nop
c00119a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119a7:	85 c0                	test   eax,eax
c00119a9:	74 1d                	je     c00119c8 <udp_remove+0x54>
c00119ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119b2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00119b6:	75 10                	jne    c00119c8 <udp_remove+0x54>
c00119b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00119bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119c3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00119c6:	66 90                	xchg   ax,ax
c00119c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00119cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119d3:	90                   	nop
c00119d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00119d9:	75 c5                	jne    c00119a0 <udp_remove+0x2c>
c00119db:	90                   	nop
c00119dc:	83 ec 08             	sub    esp,0x8
c00119df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00119e3:	6a 01                	push   0x1
c00119e5:	e8 4e 62 ff ff       	call   c0007c38 <memp_free>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	90                   	nop
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	c3                   	ret    
c00119f2:	66 90                	xchg   ax,ax

c00119f4 <udp_new>:
c00119f4:	83 ec 1c             	sub    esp,0x1c
c00119f7:	83 ec 0c             	sub    esp,0xc
c00119fa:	6a 01                	push   0x1
c00119fc:	e8 0b 61 ff ff       	call   c0007b0c <memp_malloc>
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011a0d:	74 1d                	je     c0011a2c <udp_new+0x38>
c0011a0f:	83 ec 04             	sub    esp,0x4
c0011a12:	6a 20                	push   0x20
c0011a14:	6a 00                	push   0x0
c0011a16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011a1a:	e8 d1 ea fe ff       	call   c00004f0 <memset>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a26:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011a2a:	66 90                	xchg   ax,ax
c0011a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a30:	83 c4 1c             	add    esp,0x1c
c0011a33:	c3                   	ret    

c0011a34 <free_entry>:
c0011a34:	83 ec 0c             	sub    esp,0xc
c0011a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a3b:	c1 e0 04             	shl    eax,0x4
c0011a3e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 2f                	je     c0011a78 <free_entry+0x44>
c0011a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a4d:	c1 e0 04             	shl    eax,0x4
c0011a50:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	50                   	push   eax
c0011a5b:	e8 94 6a ff ff       	call   c00084f4 <pbuf_free>
c0011a60:	83 c4 10             	add    esp,0x10
c0011a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a67:	c1 e0 04             	shl    eax,0x4
c0011a6a:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011a75:	8d 76 00             	lea    esi,[esi+0x0]
c0011a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a7c:	c1 e0 04             	shl    eax,0x4
c0011a7f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a84:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011a87:	90                   	nop
c0011a88:	83 c4 0c             	add    esp,0xc
c0011a8b:	c3                   	ret    

c0011a8c <etharp_tmr>:
c0011a8c:	83 ec 1c             	sub    esp,0x1c
c0011a8f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a94:	e9 a7 00 00 00       	jmp    c0011b40 <etharp_tmr+0xb4>
c0011a99:	8d 76 00             	lea    esi,[esi+0x0]
c0011a9c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011aa1:	c1 e0 04             	shl    eax,0x4
c0011aa4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011aa9:	8a 00                	mov    al,BYTE PTR [eax]
c0011aab:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0011aaf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011ab4:	85 c0                	test   eax,eax
c0011ab6:	74 7c                	je     c0011b34 <etharp_tmr+0xa8>
c0011ab8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011abd:	89 c2                	mov    edx,eax
c0011abf:	c1 e2 04             	shl    edx,0x4
c0011ac2:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011ac8:	8a 12                	mov    dl,BYTE PTR [edx]
c0011aca:	83 c2 01             	add    edx,0x1
c0011acd:	c1 e0 04             	shl    eax,0x4
c0011ad0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ad5:	88 10                	mov    BYTE PTR [eax],dl
c0011ad7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011adc:	c1 e0 04             	shl    eax,0x4
c0011adf:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ae4:	8a 00                	mov    al,BYTE PTR [eax]
c0011ae6:	0f b6 c0             	movzx  eax,al
c0011ae9:	3d ef 00 00 00       	cmp    eax,0xef
c0011aee:	77 30                	ja     c0011b20 <etharp_tmr+0x94>
c0011af0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011af5:	c1 e0 04             	shl    eax,0x4
c0011af8:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011afd:	8a 00                	mov    al,BYTE PTR [eax]
c0011aff:	0f b6 c0             	movzx  eax,al
c0011b02:	83 f8 01             	cmp    eax,0x1
c0011b05:	75 2d                	jne    c0011b34 <etharp_tmr+0xa8>
c0011b07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b0c:	c1 e0 04             	shl    eax,0x4
c0011b0f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b14:	8a 00                	mov    al,BYTE PTR [eax]
c0011b16:	0f b6 c0             	movzx  eax,al
c0011b19:	83 f8 01             	cmp    eax,0x1
c0011b1c:	76 16                	jbe    c0011b34 <etharp_tmr+0xa8>
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b25:	83 ec 0c             	sub    esp,0xc
c0011b28:	50                   	push   eax
c0011b29:	e8 06 ff ff ff       	call   c0011a34 <free_entry>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	8d 76 00             	lea    esi,[esi+0x0]
c0011b34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011b38:	83 c0 01             	add    eax,0x1
c0011b3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b3f:	90                   	nop
c0011b40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b45:	83 f8 09             	cmp    eax,0x9
c0011b48:	0f 86 4e ff ff ff    	jbe    c0011a9c <etharp_tmr+0x10>
c0011b4e:	90                   	nop
c0011b4f:	83 c4 1c             	add    esp,0x1c
c0011b52:	c3                   	ret    
c0011b53:	90                   	nop

c0011b54 <find_entry>:
c0011b54:	83 ec 2c             	sub    esp,0x2c
c0011b57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011b5f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011b64:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011b69:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011b6e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b73:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011b78:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011b7d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011b82:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011b87:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011b8c:	e9 7f 01 00 00       	jmp    c0011d10 <find_entry+0x1bc>
c0011b91:	8d 76 00             	lea    esi,[esi+0x0]
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ba7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bac:	83 f8 0a             	cmp    eax,0xa
c0011baf:	75 17                	jne    c0011bc8 <find_entry+0x74>
c0011bb1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bb6:	85 c0                	test   eax,eax
c0011bb8:	75 0e                	jne    c0011bc8 <find_entry+0x74>
c0011bba:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bbe:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011bc2:	e9 3d 01 00 00       	jmp    c0011d04 <find_entry+0x1b0>
c0011bc7:	90                   	nop
c0011bc8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bcd:	85 c0                	test   eax,eax
c0011bcf:	0f 84 2f 01 00 00    	je     c0011d04 <find_entry+0x1b0>
c0011bd5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011bda:	83 f8 01             	cmp    eax,0x1
c0011bdd:	74 21                	je     c0011c00 <find_entry+0xac>
c0011bdf:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be4:	83 f8 02             	cmp    eax,0x2
c0011be7:	74 17                	je     c0011c00 <find_entry+0xac>
c0011be9:	83 ec 08             	sub    esp,0x8
c0011bec:	68 d0 0c 03 c0       	push   0xc0030cd0
c0011bf1:	68 06 fd 02 c0       	push   0xc002fd06
c0011bf6:	e8 8d e1 00 00       	call   c001fd88 <CPrintf>
c0011bfb:	83 c4 10             	add    esp,0x10
c0011bfe:	66 90                	xchg   ax,ax
c0011c00:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011c05:	74 25                	je     c0011c2c <find_entry+0xd8>
c0011c07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c0b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c0d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c12:	c1 e0 04             	shl    eax,0x4
c0011c15:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c1c:	39 c2                	cmp    edx,eax
c0011c1e:	75 0c                	jne    c0011c2c <find_entry+0xd8>
c0011c20:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c24:	e9 53 02 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011c29:	8d 76 00             	lea    esi,[esi+0x0]
c0011c2c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011c31:	83 f8 01             	cmp    eax,0x1
c0011c34:	0f 85 8a 00 00 00    	jne    c0011cc4 <find_entry+0x170>
c0011c3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c3f:	c1 e0 04             	shl    eax,0x4
c0011c42:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011c47:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	74 3f                	je     c0011c8c <find_entry+0x138>
c0011c4d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c52:	c1 e0 04             	shl    eax,0x4
c0011c55:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c5a:	8a 00                	mov    al,BYTE PTR [eax]
c0011c5c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011c61:	0f b6 c0             	movzx  eax,al
c0011c64:	39 c2                	cmp    edx,eax
c0011c66:	0f 87 98 00 00 00    	ja     c0011d04 <find_entry+0x1b0>
c0011c6c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c70:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011c74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c79:	c1 e0 04             	shl    eax,0x4
c0011c7c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c81:	8a 00                	mov    al,BYTE PTR [eax]
c0011c83:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011c87:	eb 7b                	jmp    c0011d04 <find_entry+0x1b0>
c0011c89:	8d 76 00             	lea    esi,[esi+0x0]
c0011c8c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c91:	c1 e0 04             	shl    eax,0x4
c0011c94:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c99:	8a 00                	mov    al,BYTE PTR [eax]
c0011c9b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	39 c2                	cmp    edx,eax
c0011ca5:	77 5d                	ja     c0011d04 <find_entry+0x1b0>
c0011ca7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011cab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011caf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cb4:	c1 e0 04             	shl    eax,0x4
c0011cb7:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cbc:	8a 00                	mov    al,BYTE PTR [eax]
c0011cbe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011cc2:	eb 40                	jmp    c0011d04 <find_entry+0x1b0>
c0011cc4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011cc9:	83 f8 02             	cmp    eax,0x2
c0011ccc:	75 36                	jne    c0011d04 <find_entry+0x1b0>
c0011cce:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd3:	c1 e0 04             	shl    eax,0x4
c0011cd6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cdb:	8a 00                	mov    al,BYTE PTR [eax]
c0011cdd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011ce2:	0f b6 c0             	movzx  eax,al
c0011ce5:	39 c2                	cmp    edx,eax
c0011ce7:	77 1b                	ja     c0011d04 <find_entry+0x1b0>
c0011ce9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ced:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011cf1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cf6:	c1 e0 04             	shl    eax,0x4
c0011cf9:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011cfe:	8a 00                	mov    al,BYTE PTR [eax]
c0011d00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011d04:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d08:	83 c0 01             	add    eax,0x1
c0011d0b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d0f:	90                   	nop
c0011d10:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d15:	83 f8 09             	cmp    eax,0x9
c0011d18:	0f 86 76 fe ff ff    	jbe    c0011b94 <find_entry+0x40>
c0011d1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d23:	83 e0 02             	and    eax,0x2
c0011d26:	75 14                	jne    c0011d3c <find_entry+0x1e8>
c0011d28:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d2d:	83 f8 0a             	cmp    eax,0xa
c0011d30:	75 12                	jne    c0011d44 <find_entry+0x1f0>
c0011d32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d37:	83 e0 01             	and    eax,0x1
c0011d3a:	75 08                	jne    c0011d44 <find_entry+0x1f0>
c0011d3c:	b0 ff                	mov    al,0xff
c0011d3e:	e9 39 01 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011d43:	90                   	nop
c0011d44:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011d49:	83 f8 09             	cmp    eax,0x9
c0011d4c:	7f 0e                	jg     c0011d5c <find_entry+0x208>
c0011d4e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011d52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d56:	e9 a1 00 00 00       	jmp    c0011dfc <find_entry+0x2a8>
c0011d5b:	90                   	nop
c0011d5c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011d61:	83 f8 09             	cmp    eax,0x9
c0011d64:	7f 32                	jg     c0011d98 <find_entry+0x244>
c0011d66:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011d6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011d6e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d73:	c1 e0 04             	shl    eax,0x4
c0011d76:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	85 c0                	test   eax,eax
c0011d7f:	74 47                	je     c0011dc8 <find_entry+0x274>
c0011d81:	83 ec 08             	sub    esp,0x8
c0011d84:	68 49 0e 03 c0       	push   0xc0030e49
c0011d89:	68 06 fd 02 c0       	push   0xc002fd06
c0011d8e:	e8 f5 df 00 00       	call   c001fd88 <CPrintf>
c0011d93:	83 c4 10             	add    esp,0x10
c0011d96:	eb 30                	jmp    c0011dc8 <find_entry+0x274>
c0011d98:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d9d:	83 f8 09             	cmp    eax,0x9
c0011da0:	7f 0a                	jg     c0011dac <find_entry+0x258>
c0011da2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011da6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011daa:	eb 1c                	jmp    c0011dc8 <find_entry+0x274>
c0011dac:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011db1:	83 f8 09             	cmp    eax,0x9
c0011db4:	7f 0a                	jg     c0011dc0 <find_entry+0x26c>
c0011db6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011dba:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011dbe:	eb 08                	jmp    c0011dc8 <find_entry+0x274>
c0011dc0:	b0 ff                	mov    al,0xff
c0011dc2:	e9 b5 00 00 00       	jmp    c0011e7c <find_entry+0x328>
c0011dc7:	90                   	nop
c0011dc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011dcd:	83 f8 09             	cmp    eax,0x9
c0011dd0:	76 16                	jbe    c0011de8 <find_entry+0x294>
c0011dd2:	83 ec 08             	sub    esp,0x8
c0011dd5:	68 60 0e 03 c0       	push   0xc0030e60
c0011dda:	68 06 fd 02 c0       	push   0xc002fd06
c0011ddf:	e8 a4 df 00 00       	call   c001fd88 <CPrintf>
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	90                   	nop
c0011de8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ded:	83 ec 0c             	sub    esp,0xc
c0011df0:	50                   	push   eax
c0011df1:	e8 3e fc ff ff       	call   c0011a34 <free_entry>
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	8d 76 00             	lea    esi,[esi+0x0]
c0011dfc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e01:	83 f8 09             	cmp    eax,0x9
c0011e04:	76 16                	jbe    c0011e1c <find_entry+0x2c8>
c0011e06:	83 ec 08             	sub    esp,0x8
c0011e09:	68 60 0e 03 c0       	push   0xc0030e60
c0011e0e:	68 06 fd 02 c0       	push   0xc002fd06
c0011e13:	e8 70 df 00 00       	call   c001fd88 <CPrintf>
c0011e18:	83 c4 10             	add    esp,0x10
c0011e1b:	90                   	nop
c0011e1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e21:	c1 e0 04             	shl    eax,0x4
c0011e24:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e29:	8a 00                	mov    al,BYTE PTR [eax]
c0011e2b:	0f b6 c0             	movzx  eax,al
c0011e2e:	85 c0                	test   eax,eax
c0011e30:	74 16                	je     c0011e48 <find_entry+0x2f4>
c0011e32:	83 ec 08             	sub    esp,0x8
c0011e35:	68 10 0d 03 c0       	push   0xc0030d10
c0011e3a:	68 06 fd 02 c0       	push   0xc002fd06
c0011e3f:	e8 44 df 00 00       	call   c001fd88 <CPrintf>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	90                   	nop
c0011e48:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011e4d:	74 19                	je     c0011e68 <find_entry+0x314>
c0011e4f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5a:	c1 e2 04             	shl    edx,0x4
c0011e5d:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011e63:	89 02                	mov    DWORD PTR [edx],eax
c0011e65:	8d 76 00             	lea    esi,[esi+0x0]
c0011e68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011e6d:	c1 e0 04             	shl    eax,0x4
c0011e70:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e78:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011e7c:	83 c4 2c             	add    esp,0x2c
c0011e7f:	c3                   	ret    

c0011e80 <etharp_send_ip>:
c0011e80:	83 ec 1c             	sub    esp,0x1c
c0011e83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e92:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e95:	0f b6 c0             	movzx  eax,al
c0011e98:	83 f8 06             	cmp    eax,0x6
c0011e9b:	74 17                	je     c0011eb4 <etharp_send_ip+0x34>
c0011e9d:	83 ec 08             	sub    esp,0x8
c0011ea0:	68 3c 0d 03 c0       	push   0xc0030d3c
c0011ea5:	68 06 fd 02 c0       	push   0xc002fd06
c0011eaa:	e8 d9 de 00 00       	call   c001fd88 <CPrintf>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	66 90                	xchg   ax,ax
c0011eb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb8:	83 ec 04             	sub    esp,0x4
c0011ebb:	6a 06                	push   0x6
c0011ebd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ec1:	50                   	push   eax
c0011ec2:	e8 b3 e4 fe ff       	call   c000037a <memcpy>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ece:	83 c0 06             	add    eax,0x6
c0011ed1:	83 ec 04             	sub    esp,0x4
c0011ed4:	6a 06                	push   0x6
c0011ed6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011eda:	50                   	push   eax
c0011edb:	e8 9a e4 fe ff       	call   c000037a <memcpy>
c0011ee0:	83 c4 10             	add    esp,0x10
c0011ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ee7:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ef1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ef4:	83 ec 08             	sub    esp,0x8
c0011ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011efb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011eff:	ff d0                	call   eax
c0011f01:	83 c4 10             	add    esp,0x10
c0011f04:	83 c4 1c             	add    esp,0x1c
c0011f07:	c3                   	ret    

c0011f08 <update_arp_entry>:
c0011f08:	83 ec 2c             	sub    esp,0x2c
c0011f0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f17:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	83 f8 06             	cmp    eax,0x6
c0011f20:	74 16                	je     c0011f38 <update_arp_entry+0x30>
c0011f22:	83 ec 08             	sub    esp,0x8
c0011f25:	68 80 0d 03 c0       	push   0xc0030d80
c0011f2a:	68 06 fd 02 c0       	push   0xc002fd06
c0011f2f:	e8 54 de 00 00       	call   c001fd88 <CPrintf>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	90                   	nop
c0011f38:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011f3d:	74 39                	je     c0011f78 <update_arp_entry+0x70>
c0011f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f45:	85 c0                	test   eax,eax
c0011f47:	74 2f                	je     c0011f78 <update_arp_entry+0x70>
c0011f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f4f:	83 ec 08             	sub    esp,0x8
c0011f52:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f56:	50                   	push   eax
c0011f57:	e8 8c 20 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	0f b6 c0             	movzx  eax,al
c0011f62:	85 c0                	test   eax,eax
c0011f64:	75 12                	jne    c0011f78 <update_arp_entry+0x70>
c0011f66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6c:	25 f0 00 00 00       	and    eax,0xf0
c0011f71:	3d e0 00 00 00       	cmp    eax,0xe0
c0011f76:	75 08                	jne    c0011f80 <update_arp_entry+0x78>
c0011f78:	b0 f2                	mov    al,0xf2
c0011f7a:	e9 d9 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011f7f:	90                   	nop
c0011f80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011f85:	83 ec 08             	sub    esp,0x8
c0011f88:	50                   	push   eax
c0011f89:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f8d:	e8 c2 fb ff ff       	call   c0011b54 <find_entry>
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011f99:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f9e:	85 c0                	test   eax,eax
c0011fa0:	79 0a                	jns    c0011fac <update_arp_entry+0xa4>
c0011fa2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011fa6:	e9 ad 00 00 00       	jmp    c0012058 <update_arp_entry+0x150>
c0011fab:	90                   	nop
c0011fac:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fb1:	c1 e0 04             	shl    eax,0x4
c0011fb4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011fb9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011fbc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fc1:	c1 e0 04             	shl    eax,0x4
c0011fc4:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011fc9:	83 c0 08             	add    eax,0x8
c0011fcc:	83 ec 04             	sub    esp,0x4
c0011fcf:	6a 06                	push   0x6
c0011fd1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011fd5:	50                   	push   eax
c0011fd6:	e8 9f e3 fe ff       	call   c000037a <memcpy>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011fe3:	c1 e0 04             	shl    eax,0x4
c0011fe6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011feb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fee:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ff3:	c1 e0 04             	shl    eax,0x4
c0011ff6:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ffd:	85 c0                	test   eax,eax
c0011fff:	74 53                	je     c0012054 <update_arp_entry+0x14c>
c0012001:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012006:	c1 e0 04             	shl    eax,0x4
c0012009:	05 00 a9 03 c0       	add    eax,0xc003a900
c001200e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012010:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012014:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0012019:	c1 e0 04             	shl    eax,0x4
c001201c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012021:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202b:	83 c0 23             	add    eax,0x23
c001202e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012032:	50                   	push   eax
c0012033:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001203b:	e8 40 fe ff ff       	call   c0011e80 <etharp_send_ip>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 0c             	sub    esp,0xc
c0012046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001204a:	e8 a5 64 ff ff       	call   c00084f4 <pbuf_free>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	66 90                	xchg   ax,ax
c0012054:	b0 00                	mov    al,0x0
c0012056:	66 90                	xchg   ax,ax
c0012058:	83 c4 2c             	add    esp,0x2c
c001205b:	c3                   	ret    

c001205c <etharp_find_addr>:
c001205c:	83 ec 1c             	sub    esp,0x1c
c001205f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012064:	74 0a                	je     c0012070 <etharp_find_addr+0x14>
c0012066:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001206b:	75 1b                	jne    c0012088 <etharp_find_addr+0x2c>
c001206d:	8d 76 00             	lea    esi,[esi+0x0]
c0012070:	83 ec 08             	sub    esp,0x8
c0012073:	68 a8 0d 03 c0       	push   0xc0030da8
c0012078:	68 06 fd 02 c0       	push   0xc002fd06
c001207d:	e8 06 dd 00 00       	call   c001fd88 <CPrintf>
c0012082:	83 c4 10             	add    esp,0x10
c0012085:	8d 76 00             	lea    esi,[esi+0x0]
c0012088:	83 ec 08             	sub    esp,0x8
c001208b:	6a 02                	push   0x2
c001208d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012091:	e8 be fa ff ff       	call   c0011b54 <find_entry>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001209d:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120a2:	85 c0                	test   eax,eax
c00120a4:	78 4a                	js     c00120f0 <etharp_find_addr+0x94>
c00120a6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120ab:	c1 e0 04             	shl    eax,0x4
c00120ae:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00120b3:	8a 00                	mov    al,BYTE PTR [eax]
c00120b5:	0f b6 c0             	movzx  eax,al
c00120b8:	83 f8 02             	cmp    eax,0x2
c00120bb:	75 33                	jne    c00120f0 <etharp_find_addr+0x94>
c00120bd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120c2:	c1 e0 04             	shl    eax,0x4
c00120c5:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120ca:	8d 50 08             	lea    edx,[eax+0x8]
c00120cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120d1:	89 10                	mov    DWORD PTR [eax],edx
c00120d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00120d8:	c1 e0 04             	shl    eax,0x4
c00120db:	05 00 a9 03 c0       	add    eax,0xc003a900
c00120e0:	8d 50 04             	lea    edx,[eax+0x4]
c00120e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120e7:	89 10                	mov    DWORD PTR [eax],edx
c00120e9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00120ed:	eb 05                	jmp    c00120f4 <etharp_find_addr+0x98>
c00120ef:	90                   	nop
c00120f0:	b0 ff                	mov    al,0xff
c00120f2:	66 90                	xchg   ax,ax
c00120f4:	83 c4 1c             	add    esp,0x1c
c00120f7:	c3                   	ret    

c00120f8 <etharp_arp_input>:
c00120f8:	83 ec 2c             	sub    esp,0x2c
c00120fb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012100:	75 1a                	jne    c001211c <etharp_arp_input+0x24>
c0012102:	83 ec 08             	sub    esp,0x8
c0012105:	68 73 0e 03 c0       	push   0xc0030e73
c001210a:	68 06 fd 02 c0       	push   0xc002fd06
c001210f:	e8 74 dc 00 00       	call   c001fd88 <CPrintf>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	e9 d0 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001211c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012120:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012124:	0f b7 c0             	movzx  eax,ax
c0012127:	83 f8 29             	cmp    eax,0x29
c001212a:	77 34                	ja     c0012160 <etharp_arp_input+0x68>
c001212c:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0012132:	83 c0 01             	add    eax,0x1
c0012135:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c001213b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012141:	83 c0 01             	add    eax,0x1
c0012144:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012151:	e8 9e 63 ff ff       	call   c00084f4 <pbuf_free>
c0012156:	83 c4 10             	add    esp,0x10
c0012159:	e9 8e 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c001215e:	66 90                	xchg   ax,ax
c0012160:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012164:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001216b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001216f:	83 c0 0e             	add    eax,0xe
c0012172:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012176:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001217a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001217d:	0f b7 c0             	movzx  eax,ax
c0012180:	3d 00 01 00 00       	cmp    eax,0x100
c0012185:	75 31                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c001218e:	0f b6 c0             	movzx  eax,al
c0012191:	83 f8 06             	cmp    eax,0x6
c0012194:	75 22                	jne    c00121b8 <etharp_arp_input+0xc0>
c0012196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001219a:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c001219d:	0f b6 c0             	movzx  eax,al
c00121a0:	83 f8 04             	cmp    eax,0x4
c00121a3:	75 13                	jne    c00121b8 <etharp_arp_input+0xc0>
c00121a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00121ad:	0f b7 c0             	movzx  eax,ax
c00121b0:	83 f8 08             	cmp    eax,0x8
c00121b3:	74 37                	je     c00121ec <etharp_arp_input+0xf4>
c00121b5:	8d 76 00             	lea    esi,[esi+0x0]
c00121b8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00121be:	83 c0 01             	add    eax,0x1
c00121c1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00121c7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00121cd:	83 c0 01             	add    eax,0x1
c00121d0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00121dd:	e8 12 63 ff ff       	call   c00084f4 <pbuf_free>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e9 02 02 00 00       	jmp    c00123ec <etharp_arp_input+0x2f4>
c00121ea:	66 90                	xchg   ax,ax
c00121ec:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c00121f2:	83 c0 01             	add    eax,0x1
c00121f5:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c00121fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121ff:	83 c0 0e             	add    eax,0xe
c0012202:	83 ec 04             	sub    esp,0x4
c0012205:	6a 04                	push   0x4
c0012207:	50                   	push   eax
c0012208:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012219:	83 c0 18             	add    eax,0x18
c001221c:	83 ec 04             	sub    esp,0x4
c001221f:	6a 04                	push   0x4
c0012221:	50                   	push   eax
c0012222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012226:	50                   	push   eax
c0012227:	e8 4e e1 fe ff       	call   c000037a <memcpy>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012233:	83 c0 04             	add    eax,0x4
c0012236:	74 0c                	je     c0012244 <etharp_arp_input+0x14c>
c0012238:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223f:	85 c0                	test   eax,eax
c0012241:	75 09                	jne    c001224c <etharp_arp_input+0x154>
c0012243:	90                   	nop
c0012244:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012249:	eb 15                	jmp    c0012260 <etharp_arp_input+0x168>
c001224b:	90                   	nop
c001224c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012257:	39 c2                	cmp    edx,eax
c0012259:	0f 94 c0             	sete   al
c001225c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012260:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012265:	85 c0                	test   eax,eax
c0012267:	74 07                	je     c0012270 <etharp_arp_input+0x178>
c0012269:	b8 01 00 00 00       	mov    eax,0x1
c001226e:	eb 08                	jmp    c0012278 <etharp_arp_input+0x180>
c0012270:	b8 02 00 00 00       	mov    eax,0x2
c0012275:	8d 76 00             	lea    esi,[esi+0x0]
c0012278:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001227c:	83 c2 08             	add    edx,0x8
c001227f:	50                   	push   eax
c0012280:	52                   	push   edx
c0012281:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012285:	50                   	push   eax
c0012286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001228a:	e8 79 fc ff ff       	call   c0011f08 <update_arp_entry>
c001228f:	83 c4 10             	add    esp,0x10
c0012292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012296:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001229a:	0f b7 c0             	movzx  eax,ax
c001229d:	3d 00 01 00 00       	cmp    eax,0x100
c00122a2:	74 10                	je     c00122b4 <etharp_arp_input+0x1bc>
c00122a4:	3d 00 02 00 00       	cmp    eax,0x200
c00122a9:	0f 84 29 01 00 00    	je     c00123d8 <etharp_arp_input+0x2e0>
c00122af:	e9 10 01 00 00       	jmp    c00123c4 <etharp_arp_input+0x2cc>
c00122b4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 84 f7 00 00 00    	je     c00123b8 <etharp_arp_input+0x2c0>
c00122c1:	83 ec 0c             	sub    esp,0xc
c00122c4:	6a 02                	push   0x2
c00122c6:	e8 1d e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122d2:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00122d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122da:	8d 50 0e             	lea    edx,[eax+0xe]
c00122dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122e1:	83 c0 18             	add    eax,0x18
c00122e4:	83 ec 04             	sub    esp,0x4
c00122e7:	6a 04                	push   0x4
c00122e9:	52                   	push   edx
c00122ea:	50                   	push   eax
c00122eb:	e8 8a e0 fe ff       	call   c000037a <memcpy>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f7:	8d 50 04             	lea    edx,[eax+0x4]
c00122fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122fe:	83 c0 0e             	add    eax,0xe
c0012301:	83 ec 04             	sub    esp,0x4
c0012304:	6a 04                	push   0x4
c0012306:	52                   	push   edx
c0012307:	50                   	push   eax
c0012308:	e8 6d e0 fe ff       	call   c000037a <memcpy>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012317:	0f b6 c0             	movzx  eax,al
c001231a:	83 f8 06             	cmp    eax,0x6
c001231d:	74 15                	je     c0012334 <etharp_arp_input+0x23c>
c001231f:	83 ec 08             	sub    esp,0x8
c0012322:	68 3c 0d 03 c0       	push   0xc0030d3c
c0012327:	68 06 fd 02 c0       	push   0xc002fd06
c001232c:	e8 57 da 00 00       	call   c001fd88 <CPrintf>
c0012331:	83 c4 10             	add    esp,0x10
c0012334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012338:	8d 50 08             	lea    edx,[eax+0x8]
c001233b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001233f:	83 c0 12             	add    eax,0x12
c0012342:	83 ec 04             	sub    esp,0x4
c0012345:	6a 06                	push   0x6
c0012347:	52                   	push   edx
c0012348:	50                   	push   eax
c0012349:	e8 2c e0 fe ff       	call   c000037a <memcpy>
c001234e:	83 c4 10             	add    esp,0x10
c0012351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012355:	8d 50 08             	lea    edx,[eax+0x8]
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	83 ec 04             	sub    esp,0x4
c001235f:	6a 06                	push   0x6
c0012361:	52                   	push   edx
c0012362:	50                   	push   eax
c0012363:	e8 12 e0 fe ff       	call   c000037a <memcpy>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001236f:	83 c0 08             	add    eax,0x8
c0012372:	83 ec 04             	sub    esp,0x4
c0012375:	6a 06                	push   0x6
c0012377:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237b:	50                   	push   eax
c001237c:	e8 f9 df fe ff       	call   c000037a <memcpy>
c0012381:	83 c4 10             	add    esp,0x10
c0012384:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012388:	83 c0 06             	add    eax,0x6
c001238b:	83 ec 04             	sub    esp,0x4
c001238e:	6a 06                	push   0x6
c0012390:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012394:	50                   	push   eax
c0012395:	e8 e0 df fe ff       	call   c000037a <memcpy>
c001239a:	83 c4 10             	add    esp,0x10
c001239d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123a4:	83 ec 08             	sub    esp,0x8
c00123a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123af:	ff d0                	call   eax
c00123b1:	83 c4 10             	add    esp,0x10
c00123b4:	eb 26                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123b6:	66 90                	xchg   ax,ax
c00123b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123bc:	83 c0 04             	add    eax,0x4
c00123bf:	eb 1b                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123c1:	8d 76 00             	lea    esi,[esi+0x0]
c00123c4:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c00123ca:	83 c0 01             	add    eax,0x1
c00123cd:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c00123d3:	eb 07                	jmp    c00123dc <etharp_arp_input+0x2e4>
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	90                   	nop
c00123d9:	8d 76 00             	lea    esi,[esi+0x0]
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e3:	e8 0c 61 ff ff       	call   c00084f4 <pbuf_free>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	90                   	nop
c00123ec:	83 c4 2c             	add    esp,0x2c
c00123ef:	c3                   	ret    

c00123f0 <etharp_raw>:
c00123f0:	83 ec 2c             	sub    esp,0x2c
c00123f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00123f7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00123fc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012401:	83 ec 04             	sub    esp,0x4
c0012404:	6a 00                	push   0x0
c0012406:	6a 2a                	push   0x2a
c0012408:	6a 03                	push   0x3
c001240a:	e8 bd 62 ff ff       	call   c00086cc <pbuf_alloc>
c001240f:	83 c4 10             	add    esp,0x10
c0012412:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012416:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001241b:	75 17                	jne    c0012434 <etharp_raw+0x44>
c001241d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012423:	83 c0 01             	add    eax,0x1
c0012426:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001242c:	b0 ff                	mov    al,0xff
c001242e:	e9 85 01 00 00       	jmp    c00125b8 <etharp_raw+0x1c8>
c0012433:	90                   	nop
c0012434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012438:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001243c:	0f b7 c0             	movzx  eax,ax
c001243f:	83 f8 29             	cmp    eax,0x29
c0012442:	77 18                	ja     c001245c <etharp_raw+0x6c>
c0012444:	83 ec 08             	sub    esp,0x8
c0012447:	68 cc 0d 03 c0       	push   0xc0030dcc
c001244c:	68 06 fd 02 c0       	push   0xc002fd06
c0012451:	e8 32 d9 00 00       	call   c001fd88 <CPrintf>
c0012456:	83 c4 10             	add    esp,0x10
c0012459:	8d 76 00             	lea    esi,[esi+0x0]
c001245c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012460:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012463:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001246b:	83 c0 0e             	add    eax,0xe
c001246e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012472:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012477:	83 ec 0c             	sub    esp,0xc
c001247a:	50                   	push   eax
c001247b:	e8 68 e7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012480:	83 c4 10             	add    esp,0x10
c0012483:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012487:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c001248b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001248f:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012492:	0f b6 c0             	movzx  eax,al
c0012495:	83 f8 06             	cmp    eax,0x6
c0012498:	74 16                	je     c00124b0 <etharp_raw+0xc0>
c001249a:	83 ec 08             	sub    esp,0x8
c001249d:	68 3c 0d 03 c0       	push   0xc0030d3c
c00124a2:	68 06 fd 02 c0       	push   0xc002fd06
c00124a7:	e8 dc d8 00 00       	call   c001fd88 <CPrintf>
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	90                   	nop
c00124b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b4:	83 c0 08             	add    eax,0x8
c00124b7:	83 ec 04             	sub    esp,0x4
c00124ba:	6a 06                	push   0x6
c00124bc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124c0:	50                   	push   eax
c00124c1:	e8 b4 de fe ff       	call   c000037a <memcpy>
c00124c6:	83 c4 10             	add    esp,0x10
c00124c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124cd:	83 c0 12             	add    eax,0x12
c00124d0:	83 ec 04             	sub    esp,0x4
c00124d3:	6a 06                	push   0x6
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	50                   	push   eax
c00124da:	e8 9b de fe ff       	call   c000037a <memcpy>
c00124df:	83 c4 10             	add    esp,0x10
c00124e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124e6:	83 ec 04             	sub    esp,0x4
c00124e9:	6a 06                	push   0x6
c00124eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124ef:	50                   	push   eax
c00124f0:	e8 85 de fe ff       	call   c000037a <memcpy>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124fc:	83 c0 06             	add    eax,0x6
c00124ff:	83 ec 04             	sub    esp,0x4
c0012502:	6a 06                	push   0x6
c0012504:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012508:	50                   	push   eax
c0012509:	e8 6c de fe ff       	call   c000037a <memcpy>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012515:	83 c0 0e             	add    eax,0xe
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	6a 04                	push   0x4
c001251d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012521:	50                   	push   eax
c0012522:	e8 53 de fe ff       	call   c000037a <memcpy>
c0012527:	83 c4 10             	add    esp,0x10
c001252a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001252e:	83 c0 18             	add    eax,0x18
c0012531:	83 ec 04             	sub    esp,0x4
c0012534:	6a 04                	push   0x4
c0012536:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001253a:	50                   	push   eax
c001253b:	e8 3a de fe ff       	call   c000037a <memcpy>
c0012540:	83 c4 10             	add    esp,0x10
c0012543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012547:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c001254c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012550:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255a:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012562:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012566:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001256a:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012570:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012574:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012577:	83 ec 08             	sub    esp,0x8
c001257a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001257e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012582:	ff d0                	call   eax
c0012584:	83 c4 10             	add    esp,0x10
c0012587:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001258b:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012591:	83 c0 01             	add    eax,0x1
c0012594:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00125a1:	e8 4e 5f ff ff       	call   c00084f4 <pbuf_free>
c00125a6:	83 c4 10             	add    esp,0x10
c00125a9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00125b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125b5:	8d 76 00             	lea    esi,[esi+0x0]
c00125b8:	83 c4 2c             	add    esp,0x2c
c00125bb:	c3                   	ret    

c00125bc <etharp_request>:
c00125bc:	83 ec 0c             	sub    esp,0xc
c00125bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125c3:	8d 48 04             	lea    ecx,[eax+0x4]
c00125c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ca:	8d 50 23             	lea    edx,[eax+0x23]
c00125cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125d1:	83 c0 23             	add    eax,0x23
c00125d4:	6a 01                	push   0x1
c00125d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125da:	68 9c 0e 03 c0       	push   0xc0030e9c
c00125df:	51                   	push   ecx
c00125e0:	52                   	push   edx
c00125e1:	68 a4 0e 03 c0       	push   0xc0030ea4
c00125e6:	50                   	push   eax
c00125e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00125eb:	e8 00 fe ff ff       	call   c00123f0 <etharp_raw>
c00125f0:	83 c4 20             	add    esp,0x20
c00125f3:	83 c4 0c             	add    esp,0xc
c00125f6:	c3                   	ret    
c00125f7:	90                   	nop

c00125f8 <etharp_query>:
c00125f8:	83 ec 2c             	sub    esp,0x2c
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	83 c0 23             	add    eax,0x23
c0012602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012606:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001260b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001260f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012611:	83 ec 08             	sub    esp,0x8
c0012614:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012618:	50                   	push   eax
c0012619:	e8 ca 19 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	0f b6 c0             	movzx  eax,al
c0012624:	85 c0                	test   eax,eax
c0012626:	75 24                	jne    c001264c <etharp_query+0x54>
c0012628:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001262c:	8b 00                	mov    eax,DWORD PTR [eax]
c001262e:	25 f0 00 00 00       	and    eax,0xf0
c0012633:	3d e0 00 00 00       	cmp    eax,0xe0
c0012638:	74 12                	je     c001264c <etharp_query+0x54>
c001263a:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001263f:	74 0b                	je     c001264c <etharp_query+0x54>
c0012641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012645:	8b 00                	mov    eax,DWORD PTR [eax]
c0012647:	85 c0                	test   eax,eax
c0012649:	75 09                	jne    c0012654 <etharp_query+0x5c>
c001264b:	90                   	nop
c001264c:	b0 f2                	mov    al,0xf2
c001264e:	e9 dd 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012653:	90                   	nop
c0012654:	83 ec 08             	sub    esp,0x8
c0012657:	6a 01                	push   0x1
c0012659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001265d:	e8 f2 f4 ff ff       	call   c0011b54 <find_entry>
c0012662:	83 c4 10             	add    esp,0x10
c0012665:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012669:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001266e:	85 c0                	test   eax,eax
c0012670:	79 22                	jns    c0012694 <etharp_query+0x9c>
c0012672:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012677:	74 0f                	je     c0012688 <etharp_query+0x90>
c0012679:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001267f:	83 c0 01             	add    eax,0x1
c0012682:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012688:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001268c:	e9 9f 02 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012691:	8d 76 00             	lea    esi,[esi+0x0]
c0012694:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012699:	c1 e0 04             	shl    eax,0x4
c001269c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126a1:	8a 00                	mov    al,BYTE PTR [eax]
c00126a3:	0f b6 c0             	movzx  eax,al
c00126a6:	85 c0                	test   eax,eax
c00126a8:	75 12                	jne    c00126bc <etharp_query+0xc4>
c00126aa:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126af:	c1 e0 04             	shl    eax,0x4
c00126b2:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126b7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00126ba:	66 90                	xchg   ax,ax
c00126bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126c1:	c1 e0 04             	shl    eax,0x4
c00126c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126c9:	8a 00                	mov    al,BYTE PTR [eax]
c00126cb:	0f b6 c0             	movzx  eax,al
c00126ce:	83 f8 01             	cmp    eax,0x1
c00126d1:	74 2d                	je     c0012700 <etharp_query+0x108>
c00126d3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126d8:	c1 e0 04             	shl    eax,0x4
c00126db:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126e0:	8a 00                	mov    al,BYTE PTR [eax]
c00126e2:	0f b6 c0             	movzx  eax,al
c00126e5:	83 f8 02             	cmp    eax,0x2
c00126e8:	74 16                	je     c0012700 <etharp_query+0x108>
c00126ea:	83 ec 08             	sub    esp,0x8
c00126ed:	68 00 0e 03 c0       	push   0xc0030e00
c00126f2:	68 06 fd 02 c0       	push   0xc002fd06
c00126f7:	e8 8c d6 00 00       	call   c001fd88 <CPrintf>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	90                   	nop
c0012700:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012705:	c1 e0 04             	shl    eax,0x4
c0012708:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001270d:	8a 00                	mov    al,BYTE PTR [eax]
c001270f:	0f b6 c0             	movzx  eax,al
c0012712:	83 f8 01             	cmp    eax,0x1
c0012715:	74 09                	je     c0012720 <etharp_query+0x128>
c0012717:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001271c:	75 2a                	jne    c0012748 <etharp_query+0x150>
c001271e:	66 90                	xchg   ax,ax
c0012720:	83 ec 08             	sub    esp,0x8
c0012723:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012727:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001272b:	e8 8c fe ff ff       	call   c00125bc <etharp_request>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012737:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001273c:	75 0a                	jne    c0012748 <etharp_query+0x150>
c001273e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012742:	e9 e9 01 00 00       	jmp    c0012930 <etharp_query+0x338>
c0012747:	90                   	nop
c0012748:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001274d:	75 15                	jne    c0012764 <etharp_query+0x16c>
c001274f:	83 ec 08             	sub    esp,0x8
c0012752:	68 7a 01 03 c0       	push   0xc003017a
c0012757:	68 06 fd 02 c0       	push   0xc002fd06
c001275c:	e8 27 d6 00 00       	call   c001fd88 <CPrintf>
c0012761:	83 c4 10             	add    esp,0x10
c0012764:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012769:	c1 e0 04             	shl    eax,0x4
c001276c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012771:	8a 00                	mov    al,BYTE PTR [eax]
c0012773:	0f b6 c0             	movzx  eax,al
c0012776:	83 f8 02             	cmp    eax,0x2
c0012779:	75 39                	jne    c00127b4 <etharp_query+0x1bc>
c001277b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001277f:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012784:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012789:	c1 e0 04             	shl    eax,0x4
c001278c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012791:	83 c0 08             	add    eax,0x8
c0012794:	50                   	push   eax
c0012795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012799:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001279d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00127a1:	e8 da f6 ff ff       	call   c0011e80 <etharp_send_ip>
c00127a6:	83 c4 10             	add    esp,0x10
c00127a9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127ad:	e9 7a 01 00 00       	jmp    c001292c <etharp_query+0x334>
c00127b2:	66 90                	xchg   ax,ax
c00127b4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127b9:	c1 e0 04             	shl    eax,0x4
c00127bc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00127c1:	8a 00                	mov    al,BYTE PTR [eax]
c00127c3:	0f b6 c0             	movzx  eax,al
c00127c6:	83 f8 01             	cmp    eax,0x1
c00127c9:	0f 85 5d 01 00 00    	jne    c001292c <etharp_query+0x334>
c00127cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127df:	eb 63                	jmp    c0012844 <etharp_query+0x24c>
c00127e1:	8d 76 00             	lea    esi,[esi+0x0]
c00127e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127e8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00127ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127f3:	0f b7 d2             	movzx  edx,dx
c00127f6:	0f b7 c0             	movzx  eax,ax
c00127f9:	39 c2                	cmp    edx,eax
c00127fb:	75 1f                	jne    c001281c <etharp_query+0x224>
c00127fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012801:	8b 00                	mov    eax,DWORD PTR [eax]
c0012803:	85 c0                	test   eax,eax
c0012805:	74 15                	je     c001281c <etharp_query+0x224>
c0012807:	83 ec 08             	sub    esp,0x8
c001280a:	68 81 0e 03 c0       	push   0xc0030e81
c001280f:	68 06 fd 02 c0       	push   0xc002fd06
c0012814:	e8 6f d5 00 00       	call   c001fd88 <CPrintf>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012820:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012823:	0f b6 c0             	movzx  eax,al
c0012826:	83 f8 01             	cmp    eax,0x1
c0012829:	74 0d                	je     c0012838 <etharp_query+0x240>
c001282b:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c0012833:	eb 17                	jmp    c001284c <etharp_query+0x254>
c0012835:	8d 76 00             	lea    esi,[esi+0x0]
c0012838:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001283c:	8b 00                	mov    eax,DWORD PTR [eax]
c001283e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012842:	66 90                	xchg   ax,ax
c0012844:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012849:	75 99                	jne    c00127e4 <etharp_query+0x1ec>
c001284b:	90                   	nop
c001284c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012851:	74 59                	je     c00128ac <etharp_query+0x2b4>
c0012853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001285a:	0f b7 c0             	movzx  eax,ax
c001285d:	83 ec 04             	sub    esp,0x4
c0012860:	6a 00                	push   0x0
c0012862:	50                   	push   eax
c0012863:	6a 03                	push   0x3
c0012865:	e8 62 5e ff ff       	call   c00086cc <pbuf_alloc>
c001286a:	83 c4 10             	add    esp,0x10
c001286d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012871:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012876:	74 4c                	je     c00128c4 <etharp_query+0x2cc>
c0012878:	83 ec 08             	sub    esp,0x8
c001287b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001287f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012883:	e8 a4 66 ff ff       	call   c0008f2c <pbuf_copy>
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	0f be c0             	movsx  eax,al
c001288e:	85 c0                	test   eax,eax
c0012890:	74 32                	je     c00128c4 <etharp_query+0x2cc>
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012899:	e8 56 5c ff ff       	call   c00084f4 <pbuf_free>
c001289e:	83 c4 10             	add    esp,0x10
c00128a1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128a9:	eb 19                	jmp    c00128c4 <etharp_query+0x2cc>
c00128ab:	90                   	nop
c00128ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00128b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00128bb:	e8 3c 64 ff ff       	call   c0008cfc <pbuf_ref>
c00128c0:	83 c4 10             	add    esp,0x10
c00128c3:	90                   	nop
c00128c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00128c9:	74 4d                	je     c0012918 <etharp_query+0x320>
c00128cb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128d0:	c1 e0 04             	shl    eax,0x4
c00128d3:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128da:	85 c0                	test   eax,eax
c00128dc:	74 1e                	je     c00128fc <etharp_query+0x304>
c00128de:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00128e3:	c1 e0 04             	shl    eax,0x4
c00128e6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00128eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 fe 5b ff ff       	call   c00084f4 <pbuf_free>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	8d 76 00             	lea    esi,[esi+0x0]
c00128fc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012901:	c1 e0 04             	shl    eax,0x4
c0012904:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c001290a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001290e:	89 02                	mov    DWORD PTR [edx],eax
c0012910:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012915:	eb 15                	jmp    c001292c <etharp_query+0x334>
c0012917:	90                   	nop
c0012918:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001291e:	83 c0 01             	add    eax,0x1
c0012921:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012927:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001292c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012930:	83 c4 2c             	add    esp,0x2c
c0012933:	c3                   	ret    

c0012934 <etharp_output>:
c0012934:	83 ec 1c             	sub    esp,0x1c
c0012937:	83 ec 08             	sub    esp,0x8
c001293a:	6a 0e                	push   0xe
c001293c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012940:	e8 13 5a ff ff       	call   c0008358 <pbuf_header>
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	0f b6 c0             	movzx  eax,al
c001294b:	85 c0                	test   eax,eax
c001294d:	74 19                	je     c0012968 <etharp_output+0x34>
c001294f:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012955:	83 c0 01             	add    eax,0x1
c0012958:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c001295e:	b0 fe                	mov    al,0xfe
c0012960:	e9 8b 01 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012965:	8d 76 00             	lea    esi,[esi+0x0]
c0012968:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012970:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012974:	8b 00                	mov    eax,DWORD PTR [eax]
c0012976:	83 ec 08             	sub    esp,0x8
c0012979:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001297d:	50                   	push   eax
c001297e:	e8 65 16 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	0f b6 c0             	movzx  eax,al
c0012989:	85 c0                	test   eax,eax
c001298b:	74 0f                	je     c001299c <etharp_output+0x68>
c001298d:	c7 44 24 0c a4 0e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030ea4
c0012995:	e9 3a 01 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c001299a:	66 90                	xchg   ax,ax
c001299c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00129a2:	25 f0 00 00 00       	and    eax,0xf0
c00129a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00129ac:	75 42                	jne    c00129f0 <etharp_output+0xbc>
c00129ae:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00129b3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00129b8:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00129bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129c1:	83 c0 01             	add    eax,0x1
c00129c4:	8a 00                	mov    al,BYTE PTR [eax]
c00129c6:	83 e0 7f             	and    eax,0x7f
c00129c9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00129cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129d1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00129d4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00129d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129dc:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c00129df:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00129e3:	8d 44 24 06          	lea    eax,[esp+0x6]
c00129e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129eb:	e9 e4 00 00 00       	jmp    c0012ad4 <etharp_output+0x1a0>
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129fd:	31 c2                	xor    edx,eax
c00129ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a06:	21 d0                	and    eax,edx
c0012a08:	74 3a                	je     c0012a44 <etharp_output+0x110>
c0012a0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a10:	0f b7 c0             	movzx  eax,ax
c0012a13:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012a18:	74 2a                	je     c0012a44 <etharp_output+0x110>
c0012a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a1e:	83 c0 0c             	add    eax,0xc
c0012a21:	74 19                	je     c0012a3c <etharp_output+0x108>
c0012a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a27:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a2a:	85 c0                	test   eax,eax
c0012a2c:	74 0e                	je     c0012a3c <etharp_output+0x108>
c0012a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a32:	83 c0 0c             	add    eax,0xc
c0012a35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a39:	eb 09                	jmp    c0012a44 <etharp_output+0x110>
c0012a3b:	90                   	nop
c0012a3c:	b0 fc                	mov    al,0xfc
c0012a3e:	e9 ad 00 00 00       	jmp    c0012af0 <etharp_output+0x1bc>
c0012a43:	90                   	nop
c0012a44:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a49:	0f b6 c0             	movzx  eax,al
c0012a4c:	c1 e0 04             	shl    eax,0x4
c0012a4f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012a54:	8a 00                	mov    al,BYTE PTR [eax]
c0012a56:	0f b6 c0             	movzx  eax,al
c0012a59:	83 f8 02             	cmp    eax,0x2
c0012a5c:	75 5a                	jne    c0012ab8 <etharp_output+0x184>
c0012a5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a64:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a69:	0f b6 c0             	movzx  eax,al
c0012a6c:	c1 e0 04             	shl    eax,0x4
c0012a6f:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a76:	39 c2                	cmp    edx,eax
c0012a78:	75 3e                	jne    c0012ab8 <etharp_output+0x184>
c0012a7a:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c0012a80:	83 c0 01             	add    eax,0x1
c0012a83:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c0012a89:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012a8e:	0f b6 c0             	movzx  eax,al
c0012a91:	c1 e0 04             	shl    eax,0x4
c0012a94:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012a99:	8d 50 08             	lea    edx,[eax+0x8]
c0012a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012aa0:	83 c0 23             	add    eax,0x23
c0012aa3:	52                   	push   edx
c0012aa4:	50                   	push   eax
c0012aa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aad:	e8 ce f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	eb 39                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ab7:	90                   	nop
c0012ab8:	83 ec 04             	sub    esp,0x4
c0012abb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012abf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012ac3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ac7:	e8 2c fb ff ff       	call   c00125f8 <etharp_query>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	eb 1f                	jmp    c0012af0 <etharp_output+0x1bc>
c0012ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ad8:	83 c0 23             	add    eax,0x23
c0012adb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012adf:	50                   	push   eax
c0012ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae8:	e8 93 f3 ff ff       	call   c0011e80 <etharp_send_ip>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 c4 1c             	add    esp,0x1c
c0012af3:	c3                   	ret    

c0012af4 <ethernet_input>:
c0012af4:	83 ec 1c             	sub    esp,0x1c
c0012af7:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b02:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012b06:	0f b7 c0             	movzx  eax,ax
c0012b09:	83 f8 0e             	cmp    eax,0xe
c0012b0c:	77 26                	ja     c0012b34 <ethernet_input+0x40>
c0012b0e:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012b14:	83 c0 01             	add    eax,0x1
c0012b17:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012b1d:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012b23:	83 c0 01             	add    eax,0x1
c0012b26:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012b2c:	e9 ef 00 00 00       	jmp    c0012c20 <ethernet_input+0x12c>
c0012b31:	8d 76 00             	lea    esi,[esi+0x0]
c0012b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b3f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012b47:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012b4c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012b51:	83 f8 08             	cmp    eax,0x8
c0012b54:	74 0e                	je     c0012b64 <ethernet_input+0x70>
c0012b56:	3d 08 06 00 00       	cmp    eax,0x608
c0012b5b:	74 6b                	je     c0012bc8 <ethernet_input+0xd4>
c0012b5d:	e9 92 00 00 00       	jmp    c0012bf4 <ethernet_input+0x100>
c0012b62:	66 90                	xchg   ax,ax
c0012b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b68:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012b6b:	0f b6 c0             	movzx  eax,al
c0012b6e:	83 e0 20             	and    eax,0x20
c0012b71:	0f 84 a1 00 00 00    	je     c0012c18 <ethernet_input+0x124>
c0012b77:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012b7c:	f7 d8                	neg    eax
c0012b7e:	98                   	cwde   
c0012b7f:	83 ec 08             	sub    esp,0x8
c0012b82:	50                   	push   eax
c0012b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b87:	e8 cc 57 ff ff       	call   c0008358 <pbuf_header>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	0f b6 c0             	movzx  eax,al
c0012b92:	85 c0                	test   eax,eax
c0012b94:	74 1a                	je     c0012bb0 <ethernet_input+0xbc>
c0012b96:	83 ec 08             	sub    esp,0x8
c0012b99:	68 28 0e 03 c0       	push   0xc0030e28
c0012b9e:	68 06 fd 02 c0       	push   0xc002fd06
c0012ba3:	e8 e0 d1 00 00       	call   c001fd88 <CPrintf>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	eb 73                	jmp    c0012c20 <ethernet_input+0x12c>
c0012bad:	8d 76 00             	lea    esi,[esi+0x0]
c0012bb0:	83 ec 08             	sub    esp,0x8
c0012bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012bbb:	e8 70 0c 00 00       	call   c0013830 <ip_input>
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	eb 4f                	jmp    c0012c14 <ethernet_input+0x120>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012bcf:	0f b6 c0             	movzx  eax,al
c0012bd2:	83 e0 20             	and    eax,0x20
c0012bd5:	74 45                	je     c0012c1c <ethernet_input+0x128>
c0012bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bdb:	83 c0 23             	add    eax,0x23
c0012bde:	83 ec 04             	sub    esp,0x4
c0012be1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012be5:	50                   	push   eax
c0012be6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012bea:	e8 09 f5 ff ff       	call   c00120f8 <etharp_arp_input>
c0012bef:	83 c4 10             	add    esp,0x10
c0012bf2:	eb 20                	jmp    c0012c14 <ethernet_input+0x120>
c0012bf4:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012bfa:	83 c0 01             	add    eax,0x1
c0012bfd:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012c03:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012c09:	83 c0 01             	add    eax,0x1
c0012c0c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012c12:	eb 0c                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c14:	b0 00                	mov    al,0x0
c0012c16:	eb 1c                	jmp    c0012c34 <ethernet_input+0x140>
c0012c18:	90                   	nop
c0012c19:	eb 05                	jmp    c0012c20 <ethernet_input+0x12c>
c0012c1b:	90                   	nop
c0012c1c:	90                   	nop
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c27:	e8 c8 58 ff ff       	call   c00084f4 <pbuf_free>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	b0 00                	mov    al,0x0
c0012c31:	8d 76 00             	lea    esi,[esi+0x0]
c0012c34:	83 c4 1c             	add    esp,0x1c
c0012c37:	c3                   	ret    

c0012c38 <icmp_input>:
c0012c38:	83 ec 2c             	sub    esp,0x2c
c0012c3b:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012c41:	83 c0 01             	add    eax,0x1
c0012c44:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012c4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c59:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012c5c:	0f b7 c0             	movzx  eax,ax
c0012c5f:	83 ec 0c             	sub    esp,0xc
c0012c62:	50                   	push   eax
c0012c63:	e8 80 df fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012c68:	83 c4 10             	add    esp,0x10
c0012c6b:	0f b7 c0             	movzx  eax,ax
c0012c6e:	c1 e8 08             	shr    eax,0x8
c0012c71:	83 e0 0f             	and    eax,0xf
c0012c74:	c1 e0 02             	shl    eax,0x2
c0012c77:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012c7c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c81:	f7 d8                	neg    eax
c0012c83:	98                   	cwde   
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	50                   	push   eax
c0012c88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8c:	e8 c7 56 ff ff       	call   c0008358 <pbuf_header>
c0012c91:	83 c4 10             	add    esp,0x10
c0012c94:	0f b6 c0             	movzx  eax,al
c0012c97:	85 c0                	test   eax,eax
c0012c99:	0f 85 a9 03 00 00    	jne    c0013048 <icmp_input+0x410>
c0012c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ca3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012ca6:	0f b7 c0             	movzx  eax,ax
c0012ca9:	83 f8 03             	cmp    eax,0x3
c0012cac:	0f 86 96 03 00 00    	jbe    c0013048 <icmp_input+0x410>
c0012cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb9:	8a 00                	mov    al,BYTE PTR [eax]
c0012cbb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012cbf:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012cc4:	85 c0                	test   eax,eax
c0012cc6:	0f 84 64 03 00 00    	je     c0013030 <icmp_input+0x3f8>
c0012ccc:	83 f8 08             	cmp    eax,0x8
c0012ccf:	0f 85 3b 03 00 00    	jne    c0013010 <icmp_input+0x3d8>
c0012cd5:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012cdd:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012ce2:	25 f0 00 00 00       	and    eax,0xf0
c0012ce7:	3d e0 00 00 00       	cmp    eax,0xe0
c0012cec:	75 0a                	jne    c0012cf8 <icmp_input+0xc0>
c0012cee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012cf6:	66 90                	xchg   ax,ax
c0012cf8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012cfd:	83 ec 08             	sub    esp,0x8
c0012d00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d04:	50                   	push   eax
c0012d05:	e8 de 12 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	0f b6 c0             	movzx  eax,al
c0012d10:	85 c0                	test   eax,eax
c0012d12:	74 08                	je     c0012d1c <icmp_input+0xe4>
c0012d14:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012d1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012d21:	75 25                	jne    c0012d48 <icmp_input+0x110>
c0012d23:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012d29:	83 c0 01             	add    eax,0x1
c0012d2c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012d32:	83 ec 0c             	sub    esp,0xc
c0012d35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d39:	e8 b6 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	e9 4e 03 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d46:	66 90                	xchg   ax,ax
c0012d48:	90                   	nop
c0012d49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d50:	0f b7 c0             	movzx  eax,ax
c0012d53:	83 f8 07             	cmp    eax,0x7
c0012d56:	0f 86 f0 02 00 00    	jbe    c001304c <icmp_input+0x414>
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d63:	e8 50 09 00 00       	call   c00136b8 <inet_chksum_pbuf>
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	0f b7 c0             	movzx  eax,ax
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	74 26                	je     c0012d98 <icmp_input+0x160>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d79:	e8 76 57 ff ff       	call   c00084f4 <pbuf_free>
c0012d7e:	83 c4 10             	add    esp,0x10
c0012d81:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012d87:	83 c0 01             	add    eax,0x1
c0012d8a:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012d90:	e9 ff 02 00 00       	jmp    c0013094 <icmp_input+0x45c>
c0012d95:	8d 76 00             	lea    esi,[esi+0x0]
c0012d98:	83 ec 08             	sub    esp,0x8
c0012d9b:	6a 22                	push   0x22
c0012d9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012da1:	e8 b2 55 ff ff       	call   c0008358 <pbuf_header>
c0012da6:	83 c4 10             	add    esp,0x10
c0012da9:	0f b6 c0             	movzx  eax,al
c0012dac:	85 c0                	test   eax,eax
c0012dae:	0f 84 24 01 00 00    	je     c0012ed8 <icmp_input+0x2a0>
c0012db4:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012db9:	83 ec 08             	sub    esp,0x8
c0012dbc:	50                   	push   eax
c0012dbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012dc1:	e8 92 55 ff ff       	call   c0008358 <pbuf_header>
c0012dc6:	83 c4 10             	add    esp,0x10
c0012dc9:	0f b6 c0             	movzx  eax,al
c0012dcc:	85 c0                	test   eax,eax
c0012dce:	74 1c                	je     c0012dec <icmp_input+0x1b4>
c0012dd0:	83 ec 08             	sub    esp,0x8
c0012dd3:	68 ac 0e 03 c0       	push   0xc0030eac
c0012dd8:	68 06 fd 02 c0       	push   0xc002fd06
c0012ddd:	e8 a6 cf 00 00       	call   c001fd88 <CPrintf>
c0012de2:	83 c4 10             	add    esp,0x10
c0012de5:	e9 8a 02 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012dea:	66 90                	xchg   ax,ax
c0012dec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012df0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012df3:	0f b7 c0             	movzx  eax,ax
c0012df6:	83 ec 04             	sub    esp,0x4
c0012df9:	6a 00                	push   0x0
c0012dfb:	50                   	push   eax
c0012dfc:	6a 02                	push   0x2
c0012dfe:	e8 c9 58 ff ff       	call   c00086cc <pbuf_alloc>
c0012e03:	83 c4 10             	add    esp,0x10
c0012e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e0a:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012e0f:	0f 84 5b 02 00 00    	je     c0013070 <icmp_input+0x438>
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e1d:	0f b7 c0             	movzx  eax,ax
c0012e20:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012e25:	83 c2 08             	add    edx,0x8
c0012e28:	39 d0                	cmp    eax,edx
c0012e2a:	73 18                	jae    c0012e44 <icmp_input+0x20c>
c0012e2c:	83 ec 08             	sub    esp,0x8
c0012e2f:	68 e0 0e 03 c0       	push   0xc0030ee0
c0012e34:	68 06 fd 02 c0       	push   0xc002fd06
c0012e39:	e8 4a cf 00 00       	call   c001fd88 <CPrintf>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	8d 76 00             	lea    esi,[esi+0x0]
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e4f:	e8 d8 60 ff ff       	call   c0008f2c <pbuf_copy>
c0012e54:	83 c4 10             	add    esp,0x10
c0012e57:	0f be c0             	movsx  eax,al
c0012e5a:	85 c0                	test   eax,eax
c0012e5c:	74 1a                	je     c0012e78 <icmp_input+0x240>
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 18 0f 03 c0       	push   0xc0030f18
c0012e66:	68 06 fd 02 c0       	push   0xc002fd06
c0012e6b:	e8 18 cf 00 00       	call   c001fd88 <CPrintf>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	e9 fc 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e83:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012e88:	f7 d8                	neg    eax
c0012e8a:	98                   	cwde   
c0012e8b:	83 ec 08             	sub    esp,0x8
c0012e8e:	50                   	push   eax
c0012e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e93:	e8 c0 54 ff ff       	call   c0008358 <pbuf_header>
c0012e98:	83 c4 10             	add    esp,0x10
c0012e9b:	0f b6 c0             	movzx  eax,al
c0012e9e:	85 c0                	test   eax,eax
c0012ea0:	74 1a                	je     c0012ebc <icmp_input+0x284>
c0012ea2:	83 ec 08             	sub    esp,0x8
c0012ea5:	68 40 0f 03 c0       	push   0xc0030f40
c0012eaa:	68 06 fd 02 c0       	push   0xc002fd06
c0012eaf:	e8 d4 ce 00 00       	call   c001fd88 <CPrintf>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	e9 b8 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012ebc:	83 ec 0c             	sub    esp,0xc
c0012ebf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ec3:	e8 2c 56 ff ff       	call   c00084f4 <pbuf_free>
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ecf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012ed3:	eb 37                	jmp    c0012f0c <icmp_input+0x2d4>
c0012ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a de                	push   0xffffffde
c0012edd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee1:	e8 72 54 ff ff       	call   c0008358 <pbuf_header>
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	0f b6 c0             	movzx  eax,al
c0012eec:	85 c0                	test   eax,eax
c0012eee:	74 1c                	je     c0012f0c <icmp_input+0x2d4>
c0012ef0:	83 ec 08             	sub    esp,0x8
c0012ef3:	68 40 0f 03 c0       	push   0xc0030f40
c0012ef8:	68 06 fd 02 c0       	push   0xc002fd06
c0012efd:	e8 86 ce 00 00       	call   c001fd88 <CPrintf>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	e9 6a 01 00 00       	jmp    c0013074 <icmp_input+0x43c>
c0012f0a:	66 90                	xchg   ax,ax
c0012f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f17:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012f24:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012f2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f35:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f3c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f40:	0f b7 c0             	movzx  eax,ax
c0012f43:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012f48:	76 16                	jbe    c0012f60 <icmp_input+0x328>
c0012f4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f4e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f52:	83 c0 09             	add    eax,0x9
c0012f55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f59:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f5d:	eb 15                	jmp    c0012f74 <icmp_input+0x33c>
c0012f5f:	90                   	nop
c0012f60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012f68:	83 c0 08             	add    eax,0x8
c0012f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f6f:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f73:	90                   	nop
c0012f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f78:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012f7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f80:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012f86:	83 ec 08             	sub    esp,0x8
c0012f89:	6a 14                	push   0x14
c0012f8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f8f:	e8 fc 06 00 00       	call   c0013690 <inet_chksum>
c0012f94:	83 c4 10             	add    esp,0x10
c0012f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f9b:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012f9f:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012fa5:	83 c0 01             	add    eax,0x1
c0012fa8:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012fae:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012fb3:	83 ec 08             	sub    esp,0x8
c0012fb6:	50                   	push   eax
c0012fb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fbb:	e8 98 53 ff ff       	call   c0008358 <pbuf_header>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	0f b6 c0             	movzx  eax,al
c0012fc6:	85 c0                	test   eax,eax
c0012fc8:	74 1a                	je     c0012fe4 <icmp_input+0x3ac>
c0012fca:	83 ec 08             	sub    esp,0x8
c0012fcd:	68 28 0e 03 c0       	push   0xc0030e28
c0012fd2:	68 06 fd 02 c0       	push   0xc002fd06
c0012fd7:	e8 ac cd 00 00       	call   c001fd88 <CPrintf>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	eb 53                	jmp    c0013034 <icmp_input+0x3fc>
c0012fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fe4:	83 ec 04             	sub    esp,0x4
c0012fe7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012feb:	6a 01                	push   0x1
c0012fed:	6a 00                	push   0x0
c0012fef:	68 ff 00 00 00       	push   0xff
c0012ff4:	6a 00                	push   0x0
c0012ff6:	68 98 68 03 c0       	push   0xc0036898
c0012ffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012fff:	e8 70 0c 00 00       	call   c0013c74 <ip_output_if>
c0013004:	83 c4 20             	add    esp,0x20
c0013007:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001300b:	eb 27                	jmp    c0013034 <icmp_input+0x3fc>
c001300d:	8d 76 00             	lea    esi,[esi+0x0]
c0013010:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0013016:	83 c0 01             	add    eax,0x1
c0013019:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c001301f:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0013025:	83 c0 01             	add    eax,0x1
c0013028:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c001302e:	eb 04                	jmp    c0013034 <icmp_input+0x3fc>
c0013030:	90                   	nop
c0013031:	8d 76 00             	lea    esi,[esi+0x0]
c0013034:	83 ec 0c             	sub    esp,0xc
c0013037:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001303b:	e8 b4 54 ff ff       	call   c00084f4 <pbuf_free>
c0013040:	83 c4 10             	add    esp,0x10
c0013043:	eb 4f                	jmp    c0013094 <icmp_input+0x45c>
c0013045:	8d 76 00             	lea    esi,[esi+0x0]
c0013048:	90                   	nop
c0013049:	eb 05                	jmp    c0013050 <icmp_input+0x418>
c001304b:	90                   	nop
c001304c:	90                   	nop
c001304d:	8d 76 00             	lea    esi,[esi+0x0]
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013057:	e8 98 54 ff ff       	call   c00084f4 <pbuf_free>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0013065:	83 c0 01             	add    eax,0x1
c0013068:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c001306e:	eb 24                	jmp    c0013094 <icmp_input+0x45c>
c0013070:	90                   	nop
c0013071:	8d 76 00             	lea    esi,[esi+0x0]
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001307b:	e8 74 54 ff ff       	call   c00084f4 <pbuf_free>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0013089:	83 c0 01             	add    eax,0x1
c001308c:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0013092:	90                   	nop
c0013093:	90                   	nop
c0013094:	83 c4 2c             	add    esp,0x2c
c0013097:	c3                   	ret    

c0013098 <icmp_send_response>:
c0013098:	83 ec 2c             	sub    esp,0x2c
c001309b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001309f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130a3:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130a7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00130ab:	83 ec 04             	sub    esp,0x4
c00130ae:	6a 00                	push   0x0
c00130b0:	6a 24                	push   0x24
c00130b2:	6a 01                	push   0x1
c00130b4:	e8 13 56 ff ff       	call   c00086cc <pbuf_alloc>
c00130b9:	83 c4 10             	add    esp,0x10
c00130bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00130c5:	0f 84 fd 00 00 00    	je     c00131c8 <icmp_send_response+0x130>
c00130cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130cf:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130d3:	0f b7 c0             	movzx  eax,ax
c00130d6:	83 f8 23             	cmp    eax,0x23
c00130d9:	77 15                	ja     c00130f0 <icmp_send_response+0x58>
c00130db:	83 ec 08             	sub    esp,0x8
c00130de:	68 74 0f 03 c0       	push   0xc0030f74
c00130e3:	68 06 fd 02 c0       	push   0xc002fd06
c00130e8:	e8 9b cc 00 00       	call   c001fd88 <CPrintf>
c00130ed:	83 c4 10             	add    esp,0x10
c00130f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013102:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013106:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001310e:	88 10                	mov    BYTE PTR [eax],dl
c0013110:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013114:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0013118:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001311b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001311f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013129:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001312f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013133:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013136:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001313a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001313d:	83 c2 08             	add    edx,0x8
c0013140:	83 ec 04             	sub    esp,0x4
c0013143:	6a 1c                	push   0x1c
c0013145:	50                   	push   eax
c0013146:	52                   	push   edx
c0013147:	e8 2e d2 fe ff       	call   c000037a <memcpy>
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013153:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0013159:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001315d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013161:	0f b7 c0             	movzx  eax,ax
c0013164:	83 ec 08             	sub    esp,0x8
c0013167:	50                   	push   eax
c0013168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316c:	e8 1f 05 00 00       	call   c0013690 <inet_chksum>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013178:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001317c:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013182:	83 c0 01             	add    eax,0x1
c0013185:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001318b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001318f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013192:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013196:	83 ec 08             	sub    esp,0x8
c0013199:	6a 01                	push   0x1
c001319b:	6a 00                	push   0x0
c001319d:	68 ff 00 00 00       	push   0xff
c00131a2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00131a6:	50                   	push   eax
c00131a7:	6a 00                	push   0x0
c00131a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00131ad:	e8 92 0d 00 00       	call   c0013f44 <ip_output>
c00131b2:	83 c4 20             	add    esp,0x20
c00131b5:	83 ec 0c             	sub    esp,0xc
c00131b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00131bc:	e8 33 53 ff ff       	call   c00084f4 <pbuf_free>
c00131c1:	83 c4 10             	add    esp,0x10
c00131c4:	eb 06                	jmp    c00131cc <icmp_send_response+0x134>
c00131c6:	66 90                	xchg   ax,ax
c00131c8:	90                   	nop
c00131c9:	8d 76 00             	lea    esi,[esi+0x0]
c00131cc:	83 c4 2c             	add    esp,0x2c
c00131cf:	c3                   	ret    

c00131d0 <icmp_dest_unreach>:
c00131d0:	83 ec 0c             	sub    esp,0xc
c00131d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131d7:	0f b6 c0             	movzx  eax,al
c00131da:	83 ec 04             	sub    esp,0x4
c00131dd:	50                   	push   eax
c00131de:	6a 03                	push   0x3
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	e8 af fe ff ff       	call   c0013098 <icmp_send_response>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	90                   	nop
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	c3                   	ret    
c00131f1:	8d 76 00             	lea    esi,[esi+0x0]

c00131f4 <icmp_time_exceeded>:
c00131f4:	83 ec 0c             	sub    esp,0xc
c00131f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131fb:	0f b6 c0             	movzx  eax,al
c00131fe:	83 ec 04             	sub    esp,0x4
c0013201:	50                   	push   eax
c0013202:	6a 0b                	push   0xb
c0013204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013208:	e8 8b fe ff ff       	call   c0013098 <icmp_send_response>
c001320d:	83 c4 10             	add    esp,0x10
c0013210:	90                   	nop
c0013211:	83 c4 0c             	add    esp,0xc
c0013214:	c3                   	ret    
c0013215:	66 90                	xchg   ax,ax
c0013217:	90                   	nop

c0013218 <lwip_standard_chksum>:
c0013218:	83 ec 2c             	sub    esp,0x2c
c001321b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001321f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013223:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001322a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013236:	83 e0 01             	and    eax,0x1
c0013239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001323d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013242:	74 24                	je     c0013268 <lwip_standard_chksum+0x50>
c0013244:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013249:	7e 1d                	jle    c0013268 <lwip_standard_chksum+0x50>
c001324b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001324f:	8d 42 01             	lea    eax,[edx+0x1]
c0013252:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013256:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001325a:	83 c0 01             	add    eax,0x1
c001325d:	8a 12                	mov    dl,BYTE PTR [edx]
c001325f:	88 10                	mov    BYTE PTR [eax],dl
c0013261:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013266:	66 90                	xchg   ax,ax
c0013268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013270:	eb 1e                	jmp    c0013290 <lwip_standard_chksum+0x78>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	8d 50 02             	lea    edx,[eax+0x2]
c001327b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001327f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013282:	0f b7 c0             	movzx  eax,ax
c0013285:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013289:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001328e:	66 90                	xchg   ax,ax
c0013290:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013295:	7f dd                	jg     c0013274 <lwip_standard_chksum+0x5c>
c0013297:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001329c:	7e 0e                	jle    c00132ac <lwip_standard_chksum+0x94>
c001329e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00132a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132a6:	8a 12                	mov    dl,BYTE PTR [edx]
c00132a8:	88 10                	mov    BYTE PTR [eax],dl
c00132aa:	66 90                	xchg   ax,ax
c00132ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00132b1:	0f b7 c0             	movzx  eax,ax
c00132b4:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00132b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132bc:	c1 e8 10             	shr    eax,0x10
c00132bf:	89 c2                	mov    edx,eax
c00132c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132c5:	0f b7 c0             	movzx  eax,ax
c00132c8:	01 d0                	add    eax,edx
c00132ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d2:	c1 e8 10             	shr    eax,0x10
c00132d5:	89 c2                	mov    edx,eax
c00132d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132db:	0f b7 c0             	movzx  eax,ax
c00132de:	01 d0                	add    eax,edx
c00132e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00132e9:	74 1d                	je     c0013308 <lwip_standard_chksum+0xf0>
c00132eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132ef:	0f b7 c0             	movzx  eax,ax
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	50                   	push   eax
c00132f6:	e8 ed d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	0f b7 c0             	movzx  eax,ax
c0013301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013305:	8d 76 00             	lea    esi,[esi+0x0]
c0013308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330c:	83 c4 2c             	add    esp,0x2c
c001330f:	c3                   	ret    

c0013310 <inet_chksum_pseudo>:
c0013310:	83 ec 2c             	sub    esp,0x2c
c0013313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013317:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001331b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001331f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013324:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001332c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013331:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013335:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013339:	e9 8a 00 00 00       	jmp    c00133c8 <inet_chksum_pseudo+0xb8>
c001333e:	66 90                	xchg   ax,ax
c0013340:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013344:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013348:	0f b7 d0             	movzx  edx,ax
c001334b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001334f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013352:	83 ec 08             	sub    esp,0x8
c0013355:	52                   	push   edx
c0013356:	50                   	push   eax
c0013357:	e8 bc fe ff ff       	call   c0013218 <lwip_standard_chksum>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	0f b7 c0             	movzx  eax,ax
c0013362:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001336a:	c1 e8 10             	shr    eax,0x10
c001336d:	89 c2                	mov    edx,eax
c001336f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013373:	0f b7 c0             	movzx  eax,ax
c0013376:	01 d0                	add    eax,edx
c0013378:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001337c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013380:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013384:	83 e0 01             	and    eax,0x1
c0013387:	0f b7 c0             	movzx  eax,ax
c001338a:	85 c0                	test   eax,eax
c001338c:	74 2e                	je     c00133bc <inet_chksum_pseudo+0xac>
c001338e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013392:	ba 01 00 00 00       	mov    edx,0x1
c0013397:	29 c2                	sub    edx,eax
c0013399:	89 d0                	mov    eax,edx
c001339b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001339f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a3:	0f b7 c0             	movzx  eax,ax
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	50                   	push   eax
c00133aa:	e8 39 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	0f b7 c0             	movzx  eax,ax
c00133b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b9:	8d 76 00             	lea    esi,[esi+0x0]
c00133bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00133c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133c6:	66 90                	xchg   ax,ax
c00133c8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00133cd:	0f 85 6d ff ff ff    	jne    c0013340 <inet_chksum_pseudo+0x30>
c00133d3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00133d8:	85 c0                	test   eax,eax
c00133da:	74 1c                	je     c00133f8 <inet_chksum_pseudo+0xe8>
c00133dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133e0:	0f b7 c0             	movzx  eax,ax
c00133e3:	83 ec 0c             	sub    esp,0xc
c00133e6:	50                   	push   eax
c00133e7:	e8 fc d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	0f b7 c0             	movzx  eax,ax
c00133f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133f6:	66 90                	xchg   ax,ax
c00133f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00133fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00133fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013406:	0f b7 c0             	movzx  eax,ax
c0013409:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013411:	c1 e8 10             	shr    eax,0x10
c0013414:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013418:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001341c:	8b 00                	mov    eax,DWORD PTR [eax]
c001341e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013426:	0f b7 c0             	movzx  eax,ax
c0013429:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001342d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013431:	c1 e8 10             	shr    eax,0x10
c0013434:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013438:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001343d:	83 ec 0c             	sub    esp,0xc
c0013440:	50                   	push   eax
c0013441:	e8 a2 d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013455:	83 ec 0c             	sub    esp,0xc
c0013458:	50                   	push   eax
c0013459:	e8 8a d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001345e:	83 c4 10             	add    esp,0x10
c0013461:	0f b7 c0             	movzx  eax,ax
c0013464:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001346c:	c1 e8 10             	shr    eax,0x10
c001346f:	89 c2                	mov    edx,eax
c0013471:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013475:	0f b7 c0             	movzx  eax,ax
c0013478:	01 d0                	add    eax,edx
c001347a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001347e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013482:	c1 e8 10             	shr    eax,0x10
c0013485:	89 c2                	mov    edx,eax
c0013487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348b:	0f b7 c0             	movzx  eax,ax
c001348e:	01 d0                	add    eax,edx
c0013490:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013498:	f7 d0                	not    eax
c001349a:	83 c4 2c             	add    esp,0x2c
c001349d:	c3                   	ret    
c001349e:	66 90                	xchg   ax,ax

c00134a0 <inet_chksum_pseudo_partial>:
c00134a0:	83 ec 2c             	sub    esp,0x2c
c00134a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00134a7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00134ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00134af:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00134b3:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00134b8:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00134bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134c5:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134d2:	e9 d9 00 00 00       	jmp    c00135b0 <inet_chksum_pseudo_partial+0x110>
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134e0:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134e5:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00134ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134ef:	39 c2                	cmp    edx,eax
c00134f1:	76 09                	jbe    c00134fc <inet_chksum_pseudo_partial+0x5c>
c00134f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00134fc:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013501:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013505:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	52                   	push   edx
c001350c:	50                   	push   eax
c001350d:	e8 06 fd ff ff       	call   c0013218 <lwip_standard_chksum>
c0013512:	83 c4 10             	add    esp,0x10
c0013515:	0f b7 c0             	movzx  eax,ax
c0013518:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001351c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013524:	89 d1                	mov    ecx,edx
c0013526:	29 c1                	sub    ecx,eax
c0013528:	89 c8                	mov    eax,ecx
c001352a:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001352f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013534:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c0013539:	76 15                	jbe    c0013550 <inet_chksum_pseudo_partial+0xb0>
c001353b:	83 ec 08             	sub    esp,0x8
c001353e:	68 a0 0f 03 c0       	push   0xc0030fa0
c0013543:	68 06 fd 02 c0       	push   0xc002fd06
c0013548:	e8 3b c8 00 00       	call   c001fd88 <CPrintf>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013554:	c1 e8 10             	shr    eax,0x10
c0013557:	89 c2                	mov    edx,eax
c0013559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001355d:	0f b7 c0             	movzx  eax,ax
c0013560:	01 d0                	add    eax,edx
c0013562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013566:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001356e:	83 e0 01             	and    eax,0x1
c0013571:	0f b7 c0             	movzx  eax,ax
c0013574:	85 c0                	test   eax,eax
c0013576:	74 2c                	je     c00135a4 <inet_chksum_pseudo_partial+0x104>
c0013578:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001357c:	ba 01 00 00 00       	mov    edx,0x1
c0013581:	29 c2                	sub    edx,eax
c0013583:	89 d0                	mov    eax,edx
c0013585:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001358d:	0f b7 c0             	movzx  eax,ax
c0013590:	83 ec 0c             	sub    esp,0xc
c0013593:	50                   	push   eax
c0013594:	e8 4f d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	0f b7 c0             	movzx  eax,ax
c001359f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a3:	90                   	nop
c00135a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00135aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00135ae:	66 90                	xchg   ax,ax
c00135b0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00135b5:	74 0d                	je     c00135c4 <inet_chksum_pseudo_partial+0x124>
c00135b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00135bc:	85 c0                	test   eax,eax
c00135be:	0f 85 14 ff ff ff    	jne    c00134d8 <inet_chksum_pseudo_partial+0x38>
c00135c4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00135c9:	85 c0                	test   eax,eax
c00135cb:	74 1b                	je     c00135e8 <inet_chksum_pseudo_partial+0x148>
c00135cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d1:	0f b7 c0             	movzx  eax,ax
c00135d4:	83 ec 0c             	sub    esp,0xc
c00135d7:	50                   	push   eax
c00135d8:	e8 0b d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00135dd:	83 c4 10             	add    esp,0x10
c00135e0:	0f b7 c0             	movzx  eax,ax
c00135e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135e7:	90                   	nop
c00135e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	0f b7 c0             	movzx  eax,ax
c00135f9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00135fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013601:	c1 e8 10             	shr    eax,0x10
c0013604:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013608:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001360c:	8b 00                	mov    eax,DWORD PTR [eax]
c001360e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013616:	0f b7 c0             	movzx  eax,ax
c0013619:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001361d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013621:	c1 e8 10             	shr    eax,0x10
c0013624:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013628:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001362d:	83 ec 0c             	sub    esp,0xc
c0013630:	50                   	push   eax
c0013631:	e8 b2 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	0f b7 c0             	movzx  eax,ax
c001363c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013640:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	50                   	push   eax
c0013649:	e8 9a d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001364e:	83 c4 10             	add    esp,0x10
c0013651:	0f b7 c0             	movzx  eax,ax
c0013654:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013658:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001365c:	c1 e8 10             	shr    eax,0x10
c001365f:	89 c2                	mov    edx,eax
c0013661:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013665:	0f b7 c0             	movzx  eax,ax
c0013668:	01 d0                	add    eax,edx
c001366a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001366e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013672:	c1 e8 10             	shr    eax,0x10
c0013675:	89 c2                	mov    edx,eax
c0013677:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001367b:	0f b7 c0             	movzx  eax,ax
c001367e:	01 d0                	add    eax,edx
c0013680:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013684:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013688:	f7 d0                	not    eax
c001368a:	83 c4 2c             	add    esp,0x2c
c001368d:	c3                   	ret    
c001368e:	66 90                	xchg   ax,ax

c0013690 <inet_chksum>:
c0013690:	83 ec 1c             	sub    esp,0x1c
c0013693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013697:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001369c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136a1:	83 ec 08             	sub    esp,0x8
c00136a4:	50                   	push   eax
c00136a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136a9:	e8 6a fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	f7 d0                	not    eax
c00136b3:	83 c4 1c             	add    esp,0x1c
c00136b6:	c3                   	ret    
c00136b7:	90                   	nop

c00136b8 <inet_chksum_pbuf>:
c00136b8:	83 ec 1c             	sub    esp,0x1c
c00136bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00136c3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00136c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136d0:	e9 8b 00 00 00       	jmp    c0013760 <inet_chksum_pbuf+0xa8>
c00136d5:	8d 76 00             	lea    esi,[esi+0x0]
c00136d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136dc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136e0:	0f b7 d0             	movzx  edx,ax
c00136e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00136e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136ea:	83 ec 08             	sub    esp,0x8
c00136ed:	52                   	push   edx
c00136ee:	50                   	push   eax
c00136ef:	e8 24 fb ff ff       	call   c0013218 <lwip_standard_chksum>
c00136f4:	83 c4 10             	add    esp,0x10
c00136f7:	0f b7 c0             	movzx  eax,ax
c00136fa:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00136fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013702:	c1 e8 10             	shr    eax,0x10
c0013705:	89 c2                	mov    edx,eax
c0013707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370b:	0f b7 c0             	movzx  eax,ax
c001370e:	01 d0                	add    eax,edx
c0013710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013718:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001371c:	83 e0 01             	and    eax,0x1
c001371f:	0f b7 c0             	movzx  eax,ax
c0013722:	85 c0                	test   eax,eax
c0013724:	74 2e                	je     c0013754 <inet_chksum_pbuf+0x9c>
c0013726:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001372a:	ba 01 00 00 00       	mov    edx,0x1
c001372f:	29 c2                	sub    edx,eax
c0013731:	89 d0                	mov    eax,edx
c0013733:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001373b:	0f b7 c0             	movzx  eax,ax
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	50                   	push   eax
c0013742:	e8 a1 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	0f b7 c0             	movzx  eax,ax
c001374d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013751:	8d 76 00             	lea    esi,[esi+0x0]
c0013754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013758:	8b 00                	mov    eax,DWORD PTR [eax]
c001375a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001375e:	66 90                	xchg   ax,ax
c0013760:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013765:	0f 85 6d ff ff ff    	jne    c00136d8 <inet_chksum_pbuf+0x20>
c001376b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0013770:	85 c0                	test   eax,eax
c0013772:	74 1c                	je     c0013790 <inet_chksum_pbuf+0xd8>
c0013774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013778:	0f b7 c0             	movzx  eax,ax
c001377b:	83 ec 0c             	sub    esp,0xc
c001377e:	50                   	push   eax
c001377f:	e8 64 d4 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	0f b7 c0             	movzx  eax,ax
c001378a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001378e:	66 90                	xchg   ax,ax
c0013790:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013794:	f7 d0                	not    eax
c0013796:	83 c4 1c             	add    esp,0x1c
c0013799:	c3                   	ret    
c001379a:	66 90                	xchg   ax,ax

c001379c <ip_route>:
c001379c:	83 ec 10             	sub    esp,0x10
c001379f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00137a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a8:	eb 42                	jmp    c00137ec <ip_route+0x50>
c00137aa:	66 90                	xchg   ax,ax
c00137ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137b0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00137b3:	83 e0 01             	and    eax,0x1
c00137b6:	0f b6 c0             	movzx  eax,al
c00137b9:	85 c0                	test   eax,eax
c00137bb:	74 23                	je     c00137e0 <ip_route+0x44>
c00137bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00137c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ca:	31 c2                	xor    edx,eax
c00137cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137d3:	21 d0                	and    eax,edx
c00137d5:	75 09                	jne    c00137e0 <ip_route+0x44>
c00137d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137db:	eb 4f                	jmp    c001382c <ip_route+0x90>
c00137dd:	8d 76 00             	lea    esi,[esi+0x0]
c00137e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00137e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ea:	66 90                	xchg   ax,ax
c00137ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00137f1:	75 b9                	jne    c00137ac <ip_route+0x10>
c00137f3:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00137f8:	85 c0                	test   eax,eax
c00137fa:	74 10                	je     c001380c <ip_route+0x70>
c00137fc:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013801:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013804:	0f b6 c0             	movzx  eax,al
c0013807:	83 e0 01             	and    eax,0x1
c001380a:	75 18                	jne    c0013824 <ip_route+0x88>
c001380c:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013812:	83 c0 01             	add    eax,0x1
c0013815:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001381b:	b8 00 00 00 00       	mov    eax,0x0
c0013820:	eb 0a                	jmp    c001382c <ip_route+0x90>
c0013822:	66 90                	xchg   ax,ax
c0013824:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	c3                   	ret    

c0013830 <ip_input>:
c0013830:	83 ec 1c             	sub    esp,0x1c
c0013833:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c0013839:	83 c0 01             	add    eax,0x1
c001383c:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013849:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001384d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013851:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013854:	0f b7 c0             	movzx  eax,ax
c0013857:	83 ec 0c             	sub    esp,0xc
c001385a:	50                   	push   eax
c001385b:	e8 88 d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	0f b7 c0             	movzx  eax,ax
c0013866:	c1 e8 0c             	shr    eax,0xc
c0013869:	0f b7 c0             	movzx  eax,ax
c001386c:	83 f8 04             	cmp    eax,0x4
c001386f:	74 37                	je     c00138a8 <ip_input+0x78>
c0013871:	83 ec 0c             	sub    esp,0xc
c0013874:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013878:	e8 77 4c ff ff       	call   c00084f4 <pbuf_free>
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013886:	83 c0 01             	add    eax,0x1
c0013889:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001388f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013895:	83 c0 01             	add    eax,0x1
c0013898:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001389e:	b0 00                	mov    al,0x0
c00138a0:	e9 cb 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c00138a5:	8d 76 00             	lea    esi,[esi+0x0]
c00138a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00138af:	0f b7 c0             	movzx  eax,ax
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	50                   	push   eax
c00138b6:	e8 2d d3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138bb:	83 c4 10             	add    esp,0x10
c00138be:	0f b7 c0             	movzx  eax,ax
c00138c1:	c1 e8 08             	shr    eax,0x8
c00138c4:	83 e0 0f             	and    eax,0xf
c00138c7:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138cc:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c00138d1:	c1 e0 02             	shl    eax,0x2
c00138d4:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c00138d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138dd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00138e1:	0f b7 c0             	movzx  eax,ax
c00138e4:	83 ec 0c             	sub    esp,0xc
c00138e7:	50                   	push   eax
c00138e8:	e8 fb d2 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00138ed:	83 c4 10             	add    esp,0x10
c00138f0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00138f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00138fc:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013901:	0f b7 c0             	movzx  eax,ax
c0013904:	39 c2                	cmp    edx,eax
c0013906:	77 14                	ja     c001391c <ip_input+0xec>
c0013908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001390c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001390f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013913:	0f b7 c0             	movzx  eax,ax
c0013916:	39 c2                	cmp    edx,eax
c0013918:	76 36                	jbe    c0013950 <ip_input+0x120>
c001391a:	66 90                	xchg   ax,ax
c001391c:	83 ec 0c             	sub    esp,0xc
c001391f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013923:	e8 cc 4b ff ff       	call   c00084f4 <pbuf_free>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013931:	83 c0 01             	add    eax,0x1
c0013934:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c001393a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013940:	83 c0 01             	add    eax,0x1
c0013943:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013949:	b0 00                	mov    al,0x0
c001394b:	e9 20 03 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013950:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013955:	83 ec 08             	sub    esp,0x8
c0013958:	50                   	push   eax
c0013959:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001395d:	e8 2e fd ff ff       	call   c0013690 <inet_chksum>
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	0f b7 c0             	movzx  eax,ax
c0013968:	85 c0                	test   eax,eax
c001396a:	74 34                	je     c00139a0 <ip_input+0x170>
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013973:	e8 7c 4b ff ff       	call   c00084f4 <pbuf_free>
c0013978:	83 c4 10             	add    esp,0x10
c001397b:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013981:	83 c0 01             	add    eax,0x1
c0013984:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c001398a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013990:	83 c0 01             	add    eax,0x1
c0013993:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013999:	b0 00                	mov    al,0x0
c001399b:	e9 d0 02 00 00       	jmp    c0013c70 <ip_input+0x440>
c00139a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00139a4:	83 ec 08             	sub    esp,0x8
c00139a7:	50                   	push   eax
c00139a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139ac:	e8 13 51 ff ff       	call   c0008ac4 <pbuf_realloc>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00139bb:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c00139c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00139c7:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c00139cc:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00139d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139e0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00139e3:	83 e0 01             	and    eax,0x1
c00139e6:	0f b6 c0             	movzx  eax,al
c00139e9:	85 c0                	test   eax,eax
c00139eb:	74 43                	je     c0013a30 <ip_input+0x200>
c00139ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139f1:	83 c0 04             	add    eax,0x4
c00139f4:	74 3a                	je     c0013a30 <ip_input+0x200>
c00139f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139fd:	85 c0                	test   eax,eax
c00139ff:	74 2f                	je     c0013a30 <ip_input+0x200>
c0013a01:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013a07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a0e:	39 c2                	cmp    edx,eax
c0013a10:	74 66                	je     c0013a78 <ip_input+0x248>
c0013a12:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a17:	83 ec 08             	sub    esp,0x8
c0013a1a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a1e:	50                   	push   eax
c0013a1f:	e8 c4 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	0f b6 c0             	movzx  eax,al
c0013a2a:	85 c0                	test   eax,eax
c0013a2c:	75 4a                	jne    c0013a78 <ip_input+0x248>
c0013a2e:	66 90                	xchg   ax,ax
c0013a30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013a35:	74 15                	je     c0013a4c <ip_input+0x21c>
c0013a37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013a3f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013a44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a48:	eb 0e                	jmp    c0013a58 <ip_input+0x228>
c0013a4a:	66 90                	xchg   ax,ax
c0013a4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a50:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a56:	66 90                	xchg   ax,ax
c0013a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a5c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013a60:	75 0a                	jne    c0013a6c <ip_input+0x23c>
c0013a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a66:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a71:	0f 85 65 ff ff ff    	jne    c00139dc <ip_input+0x1ac>
c0013a77:	90                   	nop
c0013a78:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013a7d:	83 ec 08             	sub    esp,0x8
c0013a80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a84:	50                   	push   eax
c0013a85:	e8 5e 05 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	0f b6 c0             	movzx  eax,al
c0013a90:	85 c0                	test   eax,eax
c0013a92:	75 14                	jne    c0013aa8 <ip_input+0x278>
c0013a94:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013a99:	25 f0 00 00 00       	and    eax,0xf0
c0013a9e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013aa3:	75 2b                	jne    c0013ad0 <ip_input+0x2a0>
c0013aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aaf:	e8 40 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ab4:	83 c4 10             	add    esp,0x10
c0013ab7:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013abd:	83 c0 01             	add    eax,0x1
c0013ac0:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013ac6:	b0 00                	mov    al,0x0
c0013ac8:	e9 a3 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013acd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013ad5:	75 19                	jne    c0013af0 <ip_input+0x2c0>
c0013ad7:	83 ec 0c             	sub    esp,0xc
c0013ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ade:	e8 11 4a ff ff       	call   c00084f4 <pbuf_free>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	b0 00                	mov    al,0x0
c0013ae8:	e9 83 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013aed:	8d 76 00             	lea    esi,[esi+0x0]
c0013af0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013af4:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013af8:	0f b7 c0             	movzx  eax,ax
c0013afb:	25 3f ff 00 00       	and    eax,0xff3f
c0013b00:	74 2e                	je     c0013b30 <ip_input+0x300>
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b09:	e8 7a 13 00 00       	call   c0014e88 <ip_reass>
c0013b0e:	83 c4 10             	add    esp,0x10
c0013b11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013b15:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013b1a:	75 08                	jne    c0013b24 <ip_input+0x2f4>
c0013b1c:	b0 00                	mov    al,0x0
c0013b1e:	e9 4d 01 00 00       	jmp    c0013c70 <ip_input+0x440>
c0013b23:	90                   	nop
c0013b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b2f:	90                   	nop
c0013b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013b34:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013b39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b3d:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013b42:	83 ec 08             	sub    esp,0x8
c0013b45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4d:	e8 c6 5c ff ff       	call   c0009818 <raw_input>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	0f b6 c0             	movzx  eax,al
c0013b58:	85 c0                	test   eax,eax
c0013b5a:	0f 85 e0 00 00 00    	jne    c0013c40 <ip_input+0x410>
c0013b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b64:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013b67:	0f b6 c0             	movzx  eax,al
c0013b6a:	83 f8 06             	cmp    eax,0x6
c0013b6d:	74 25                	je     c0013b94 <ip_input+0x364>
c0013b6f:	83 f8 11             	cmp    eax,0x11
c0013b72:	74 08                	je     c0013b7c <ip_input+0x34c>
c0013b74:	83 f8 01             	cmp    eax,0x1
c0013b77:	74 33                	je     c0013bac <ip_input+0x37c>
c0013b79:	eb 49                	jmp    c0013bc4 <ip_input+0x394>
c0013b7b:	90                   	nop
c0013b7c:	83 ec 08             	sub    esp,0x8
c0013b7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b87:	e8 c0 d3 ff ff       	call   c0010f4c <udp_input>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	e9 b0 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013b94:	83 ec 08             	sub    esp,0x8
c0013b97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9f:	e8 00 a5 ff ff       	call   c000e0a4 <tcp_input>
c0013ba4:	83 c4 10             	add    esp,0x10
c0013ba7:	e9 98 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bac:	83 ec 08             	sub    esp,0x8
c0013baf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bb7:	e8 7c f0 ff ff       	call   c0012c38 <icmp_input>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	e9 80 00 00 00       	jmp    c0013c44 <ip_input+0x414>
c0013bc4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd0:	50                   	push   eax
c0013bd1:	e8 12 04 00 00       	call   c0013fe8 <ip4_addr_isbroadcast>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	0f b6 c0             	movzx  eax,al
c0013bdc:	85 c0                	test   eax,eax
c0013bde:	75 30                	jne    c0013c10 <ip_input+0x3e0>
c0013be0:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013be5:	25 f0 00 00 00       	and    eax,0xf0
c0013bea:	3d e0 00 00 00       	cmp    eax,0xe0
c0013bef:	74 1f                	je     c0013c10 <ip_input+0x3e0>
c0013bf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bf9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013bfc:	83 ec 08             	sub    esp,0x8
c0013bff:	6a 02                	push   0x2
c0013c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c05:	e8 c6 f5 ff ff       	call   c00131d0 <icmp_dest_unreach>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	83 ec 0c             	sub    esp,0xc
c0013c13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c17:	e8 d8 48 ff ff       	call   c00084f4 <pbuf_free>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013c25:	83 c0 01             	add    eax,0x1
c0013c28:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013c2e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013c34:	83 c0 01             	add    eax,0x1
c0013c37:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013c3d:	eb 05                	jmp    c0013c44 <ip_input+0x414>
c0013c3f:	90                   	nop
c0013c40:	90                   	nop
c0013c41:	8d 76 00             	lea    esi,[esi+0x0]
c0013c44:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013c4e:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013c58:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013c62:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013c6c:	b0 00                	mov    al,0x0
c0013c6e:	66 90                	xchg   ax,ax
c0013c70:	83 c4 1c             	add    esp,0x1c
c0013c73:	c3                   	ret    

c0013c74 <ip_output_if>:
c0013c74:	83 ec 2c             	sub    esp,0x2c
c0013c77:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013c7b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013c7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013c83:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013c87:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013c8b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013c8f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013c97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c9b:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013c9f:	0f b7 c0             	movzx  eax,ax
c0013ca2:	83 f8 01             	cmp    eax,0x1
c0013ca5:	74 15                	je     c0013cbc <ip_output_if+0x48>
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	68 aa 0f 03 c0       	push   0xc0030faa
c0013caf:	68 06 fd 02 c0       	push   0xc002fd06
c0013cb4:	e8 cf c0 00 00       	call   c001fd88 <CPrintf>
c0013cb9:	83 c4 10             	add    esp,0x10
c0013cbc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013cc1:	0f 84 ed 01 00 00    	je     c0013eb4 <ip_output_if+0x240>
c0013cc7:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013cce:	83 ec 08             	sub    esp,0x8
c0013cd1:	6a 14                	push   0x14
c0013cd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cd7:	e8 7c 46 ff ff       	call   c0008358 <pbuf_header>
c0013cdc:	83 c4 10             	add    esp,0x10
c0013cdf:	0f b6 c0             	movzx  eax,al
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	74 16                	je     c0013cfc <ip_output_if+0x88>
c0013ce6:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013cec:	83 c0 01             	add    eax,0x1
c0013cef:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013cf5:	b0 fe                	mov    al,0xfe
c0013cf7:	e9 44 02 00 00       	jmp    c0013f40 <ip_output_if+0x2cc>
c0013cfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013d0f:	0f b7 c0             	movzx  eax,ax
c0013d12:	83 f8 13             	cmp    eax,0x13
c0013d15:	77 15                	ja     c0013d2c <ip_output_if+0xb8>
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	68 b8 0f 03 c0       	push   0xc0030fb8
c0013d1f:	68 06 fd 02 c0       	push   0xc002fd06
c0013d24:	e8 5f c0 00 00       	call   c001fd88 <CPrintf>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d30:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013d34:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013d37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013d3f:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013d42:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013d47:	c1 e0 08             	shl    eax,0x8
c0013d4a:	89 c2                	mov    edx,eax
c0013d4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d51:	09 d0                	or     eax,edx
c0013d53:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013d64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d6b:	0f b7 c0             	movzx  eax,ax
c0013d6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d79:	c1 e8 10             	shr    eax,0x10
c0013d7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d80:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013d85:	c1 e8 02             	shr    eax,0x2
c0013d88:	0f b7 c0             	movzx  eax,ax
c0013d8b:	c1 e0 08             	shl    eax,0x8
c0013d8e:	80 cc 40             	or     ah,0x40
c0013d91:	89 c2                	mov    edx,eax
c0013d93:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013d98:	09 d0                	or     eax,edx
c0013d9a:	0f b7 c0             	movzx  eax,ax
c0013d9d:	83 ec 0c             	sub    esp,0xc
c0013da0:	50                   	push   eax
c0013da1:	e8 42 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dad:	66 89 02             	mov    WORD PTR [edx],ax
c0013db0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013db7:	0f b7 c0             	movzx  eax,ax
c0013dba:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dc5:	0f b7 c0             	movzx  eax,ax
c0013dc8:	83 ec 0c             	sub    esp,0xc
c0013dcb:	50                   	push   eax
c0013dcc:	e8 17 ce fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013dd8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013ddc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013de0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013de4:	0f b7 c0             	movzx  eax,ax
c0013de7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013def:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013df5:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013dfb:	0f b7 c0             	movzx  eax,ax
c0013dfe:	83 ec 0c             	sub    esp,0xc
c0013e01:	50                   	push   eax
c0013e02:	e8 e1 cd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013e07:	83 c4 10             	add    esp,0x10
c0013e0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e0e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e16:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013e1a:	0f b7 c0             	movzx  eax,ax
c0013e1d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e21:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013e27:	83 c0 01             	add    eax,0x1
c0013e2a:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013e30:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013e35:	74 0d                	je     c0013e44 <ip_output_if+0x1d0>
c0013e37:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0013e3d:	85 c0                	test   eax,eax
c0013e3f:	75 13                	jne    c0013e54 <ip_output_if+0x1e0>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e4f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e52:	eb 10                	jmp    c0013e64 <ip_output_if+0x1f0>
c0013e54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e61:	8d 76 00             	lea    esi,[esi+0x0]
c0013e64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e6b:	0f b7 c0             	movzx  eax,ax
c0013e6e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e79:	c1 e8 10             	shr    eax,0x10
c0013e7c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e84:	c1 e8 10             	shr    eax,0x10
c0013e87:	89 c2                	mov    edx,eax
c0013e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8d:	0f b7 c0             	movzx  eax,ax
c0013e90:	01 d0                	add    eax,edx
c0013e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e9a:	c1 e8 10             	shr    eax,0x10
c0013e9d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ea1:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013ea5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ea9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013ead:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013eb1:	eb 21                	jmp    c0013ed4 <ip_output_if+0x260>
c0013eb3:	90                   	nop
c0013eb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ebf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ec3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ec6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013eca:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013ed2:	66 90                	xchg   ax,ax
c0013ed4:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013eda:	83 c0 01             	add    eax,0x1
c0013edd:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013ee3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ee7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eea:	0f b7 c0             	movzx  eax,ax
c0013eed:	85 c0                	test   eax,eax
c0013eef:	74 33                	je     c0013f24 <ip_output_if+0x2b0>
c0013ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ef5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013ef8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013efc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013eff:	0f b7 d2             	movzx  edx,dx
c0013f02:	0f b7 c0             	movzx  eax,ax
c0013f05:	39 c2                	cmp    edx,eax
c0013f07:	76 1b                	jbe    c0013f24 <ip_output_if+0x2b0>
c0013f09:	83 ec 04             	sub    esp,0x4
c0013f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f10:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013f14:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f18:	e8 2b 14 00 00       	call   c0015348 <ip_frag>
c0013f1d:	83 c4 10             	add    esp,0x10
c0013f20:	eb 1e                	jmp    c0013f40 <ip_output_if+0x2cc>
c0013f22:	66 90                	xchg   ax,ax
c0013f24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013f28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013f2b:	83 ec 04             	sub    esp,0x4
c0013f2e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013f36:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013f3a:	ff d0                	call   eax
c0013f3c:	83 c4 10             	add    esp,0x10
c0013f3f:	90                   	nop
c0013f40:	83 c4 2c             	add    esp,0x2c
c0013f43:	c3                   	ret    

c0013f44 <ip_output>:
c0013f44:	83 ec 2c             	sub    esp,0x2c
c0013f47:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013f4b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013f4f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013f53:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013f57:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013f5b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f63:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013f67:	0f b7 c0             	movzx  eax,ax
c0013f6a:	83 f8 01             	cmp    eax,0x1
c0013f6d:	74 15                	je     c0013f84 <ip_output+0x40>
c0013f6f:	83 ec 08             	sub    esp,0x8
c0013f72:	68 aa 0f 03 c0       	push   0xc0030faa
c0013f77:	68 06 fd 02 c0       	push   0xc002fd06
c0013f7c:	e8 07 be 00 00       	call   c001fd88 <CPrintf>
c0013f81:	83 c4 10             	add    esp,0x10
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013f8b:	e8 0c f8 ff ff       	call   c001379c <ip_route>
c0013f90:	83 c4 10             	add    esp,0x10
c0013f93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f97:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013f9c:	75 16                	jne    c0013fb4 <ip_output+0x70>
c0013f9e:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013fa4:	83 c0 01             	add    eax,0x1
c0013fa7:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013fad:	b0 fc                	mov    al,0xfc
c0013faf:	eb 33                	jmp    c0013fe4 <ip_output+0xa0>
c0013fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb4:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013fb9:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013fbe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013fc3:	83 ec 04             	sub    esp,0x4
c0013fc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013fca:	51                   	push   ecx
c0013fcb:	52                   	push   edx
c0013fcc:	50                   	push   eax
c0013fcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013fd9:	e8 96 fc ff ff       	call   c0013c74 <ip_output_if>
c0013fde:	83 c4 20             	add    esp,0x20
c0013fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fe4:	83 c4 2c             	add    esp,0x2c
c0013fe7:	c3                   	ret    

c0013fe8 <ip4_addr_isbroadcast>:
c0013fe8:	83 ec 10             	sub    esp,0x10
c0013feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ff3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013ff8:	74 0a                	je     c0014004 <ip4_addr_isbroadcast+0x1c>
c0013ffa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fff:	75 07                	jne    c0014008 <ip4_addr_isbroadcast+0x20>
c0014001:	8d 76 00             	lea    esi,[esi+0x0]
c0014004:	b0 01                	mov    al,0x1
c0014006:	eb 64                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014008:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001400c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001400f:	0f b6 c0             	movzx  eax,al
c0014012:	83 e0 02             	and    eax,0x2
c0014015:	75 05                	jne    c001401c <ip4_addr_isbroadcast+0x34>
c0014017:	b0 00                	mov    al,0x0
c0014019:	eb 51                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001401b:	90                   	nop
c001401c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014023:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014027:	75 07                	jne    c0014030 <ip4_addr_isbroadcast+0x48>
c0014029:	b0 00                	mov    al,0x0
c001402b:	eb 3f                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014034:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001403b:	31 c2                	xor    edx,eax
c001403d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014041:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0014044:	21 d0                	and    eax,edx
c0014046:	75 20                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014048:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001404c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001404f:	f7 d0                	not    eax
c0014051:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0014055:	89 c2                	mov    edx,eax
c0014057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001405b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001405e:	f7 d0                	not    eax
c0014060:	39 c2                	cmp    edx,eax
c0014062:	75 04                	jne    c0014068 <ip4_addr_isbroadcast+0x80>
c0014064:	b0 01                	mov    al,0x1
c0014066:	eb 04                	jmp    c001406c <ip4_addr_isbroadcast+0x84>
c0014068:	b0 00                	mov    al,0x0
c001406a:	66 90                	xchg   ax,ax
c001406c:	83 c4 10             	add    esp,0x10
c001406f:	c3                   	ret    

c0014070 <ip4_addr_netmask_valid>:
c0014070:	83 ec 1c             	sub    esp,0x1c
c0014073:	83 ec 0c             	sub    esp,0xc
c0014076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001407a:	e8 8d cb fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001407f:	83 c4 10             	add    esp,0x10
c0014082:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014086:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c001408e:	eb 10                	jmp    c00140a0 <ip4_addr_netmask_valid+0x30>
c0014090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014094:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0014098:	74 12                	je     c00140ac <ip4_addr_netmask_valid+0x3c>
c001409a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c001409e:	66 90                	xchg   ax,ax
c00140a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140a5:	75 e9                	jne    c0014090 <ip4_addr_netmask_valid+0x20>
c00140a7:	eb 1b                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140a9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ac:	90                   	nop
c00140ad:	eb 15                	jmp    c00140c4 <ip4_addr_netmask_valid+0x54>
c00140af:	90                   	nop
c00140b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140b4:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c00140b8:	74 06                	je     c00140c0 <ip4_addr_netmask_valid+0x50>
c00140ba:	b0 00                	mov    al,0x0
c00140bc:	eb 12                	jmp    c00140d0 <ip4_addr_netmask_valid+0x60>
c00140be:	66 90                	xchg   ax,ax
c00140c0:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c00140c4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140c9:	75 e5                	jne    c00140b0 <ip4_addr_netmask_valid+0x40>
c00140cb:	b0 01                	mov    al,0x1
c00140cd:	8d 76 00             	lea    esi,[esi+0x0]
c00140d0:	83 c4 1c             	add    esp,0x1c
c00140d3:	c3                   	ret    

c00140d4 <ipaddr_aton>:
c00140d4:	83 ec 2c             	sub    esp,0x2c
c00140d7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e3:	8a 00                	mov    al,BYTE PTR [eax]
c00140e5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140e9:	8d 76 00             	lea    esi,[esi+0x0]
c00140ec:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140f0:	0f b6 c0             	movzx  eax,al
c00140f3:	83 f8 2f             	cmp    eax,0x2f
c00140f6:	76 0c                	jbe    c0014104 <ipaddr_aton+0x30>
c00140f8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140fc:	0f b6 c0             	movzx  eax,al
c00140ff:	83 f8 39             	cmp    eax,0x39
c0014102:	76 0c                	jbe    c0014110 <ipaddr_aton+0x3c>
c0014104:	b8 00 00 00 00       	mov    eax,0x0
c0014109:	e9 f2 02 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001410e:	66 90                	xchg   ax,ax
c0014110:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014118:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c001411d:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014122:	83 f8 30             	cmp    eax,0x30
c0014125:	75 45                	jne    c001416c <ipaddr_aton+0x98>
c0014127:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001412c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014130:	8a 00                	mov    al,BYTE PTR [eax]
c0014132:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014136:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001413b:	83 f8 78             	cmp    eax,0x78
c001413e:	74 0c                	je     c001414c <ipaddr_aton+0x78>
c0014140:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014145:	83 f8 58             	cmp    eax,0x58
c0014148:	75 1a                	jne    c0014164 <ipaddr_aton+0x90>
c001414a:	66 90                	xchg   ax,ax
c001414c:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014151:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001415a:	8a 00                	mov    al,BYTE PTR [eax]
c001415c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014160:	eb 0a                	jmp    c001416c <ipaddr_aton+0x98>
c0014162:	66 90                	xchg   ax,ax
c0014164:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0014169:	8d 76 00             	lea    esi,[esi+0x0]
c001416c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014170:	0f b6 c0             	movzx  eax,al
c0014173:	83 f8 2f             	cmp    eax,0x2f
c0014176:	76 3c                	jbe    c00141b4 <ipaddr_aton+0xe0>
c0014178:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001417c:	0f b6 c0             	movzx  eax,al
c001417f:	83 f8 39             	cmp    eax,0x39
c0014182:	77 30                	ja     c00141b4 <ipaddr_aton+0xe0>
c0014184:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014189:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001418e:	89 c2                	mov    edx,eax
c0014190:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014195:	01 d0                	add    eax,edx
c0014197:	83 e8 30             	sub    eax,0x30
c001419a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001419e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141a7:	8a 00                	mov    al,BYTE PTR [eax]
c00141a9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141ad:	e9 ae 00 00 00       	jmp    c0014260 <ipaddr_aton+0x18c>
c00141b2:	66 90                	xchg   ax,ax
c00141b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00141b9:	83 f8 10             	cmp    eax,0x10
c00141bc:	0f 85 a6 00 00 00    	jne    c0014268 <ipaddr_aton+0x194>
c00141c2:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141c6:	0f b6 c0             	movzx  eax,al
c00141c9:	83 f8 2f             	cmp    eax,0x2f
c00141cc:	76 0e                	jbe    c00141dc <ipaddr_aton+0x108>
c00141ce:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141d2:	0f b6 c0             	movzx  eax,al
c00141d5:	83 f8 39             	cmp    eax,0x39
c00141d8:	76 32                	jbe    c001420c <ipaddr_aton+0x138>
c00141da:	66 90                	xchg   ax,ax
c00141dc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	83 f8 60             	cmp    eax,0x60
c00141e6:	76 0c                	jbe    c00141f4 <ipaddr_aton+0x120>
c00141e8:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141ec:	0f b6 c0             	movzx  eax,al
c00141ef:	83 f8 66             	cmp    eax,0x66
c00141f2:	76 18                	jbe    c001420c <ipaddr_aton+0x138>
c00141f4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00141f8:	0f b6 c0             	movzx  eax,al
c00141fb:	83 f8 40             	cmp    eax,0x40
c00141fe:	76 68                	jbe    c0014268 <ipaddr_aton+0x194>
c0014200:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014204:	0f b6 c0             	movzx  eax,al
c0014207:	83 f8 46             	cmp    eax,0x46
c001420a:	77 5c                	ja     c0014268 <ipaddr_aton+0x194>
c001420c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014210:	c1 e0 04             	shl    eax,0x4
c0014213:	89 c2                	mov    edx,eax
c0014215:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421a:	8d 48 0a             	lea    ecx,[eax+0xa]
c001421d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014221:	0f b6 c0             	movzx  eax,al
c0014224:	83 f8 60             	cmp    eax,0x60
c0014227:	76 13                	jbe    c001423c <ipaddr_aton+0x168>
c0014229:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001422d:	0f b6 c0             	movzx  eax,al
c0014230:	83 f8 7a             	cmp    eax,0x7a
c0014233:	77 07                	ja     c001423c <ipaddr_aton+0x168>
c0014235:	b8 61 00 00 00       	mov    eax,0x61
c001423a:	eb 08                	jmp    c0014244 <ipaddr_aton+0x170>
c001423c:	b8 41 00 00 00       	mov    eax,0x41
c0014241:	8d 76 00             	lea    esi,[esi+0x0]
c0014244:	29 c1                	sub    ecx,eax
c0014246:	89 c8                	mov    eax,ecx
c0014248:	09 d0                	or     eax,edx
c001424a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001424e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014253:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014257:	8a 00                	mov    al,BYTE PTR [eax]
c0014259:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001425d:	8d 76 00             	lea    esi,[esi+0x0]
c0014260:	e9 07 ff ff ff       	jmp    c001416c <ipaddr_aton+0x98>
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001426d:	83 f8 2e             	cmp    eax,0x2e
c0014270:	75 42                	jne    c00142b4 <ipaddr_aton+0x1e0>
c0014272:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014276:	83 c0 0c             	add    eax,0xc
c0014279:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001427d:	72 0d                	jb     c001428c <ipaddr_aton+0x1b8>
c001427f:	b8 00 00 00 00       	mov    eax,0x0
c0014284:	e9 77 01 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014289:	8d 76 00             	lea    esi,[esi+0x0]
c001428c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014290:	8d 50 04             	lea    edx,[eax+0x4]
c0014293:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001429b:	89 10                	mov    DWORD PTR [eax],edx
c001429d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00142a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a6:	8a 00                	mov    al,BYTE PTR [eax]
c00142a8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00142ac:	e9 3b fe ff ff       	jmp    c00140ec <ipaddr_aton+0x18>
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]
c00142b4:	90                   	nop
c00142b5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142ba:	85 c0                	test   eax,eax
c00142bc:	74 46                	je     c0014304 <ipaddr_aton+0x230>
c00142be:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142c3:	83 f8 20             	cmp    eax,0x20
c00142c6:	74 3c                	je     c0014304 <ipaddr_aton+0x230>
c00142c8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142cd:	83 f8 0c             	cmp    eax,0xc
c00142d0:	74 32                	je     c0014304 <ipaddr_aton+0x230>
c00142d2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142d7:	83 f8 0a             	cmp    eax,0xa
c00142da:	74 28                	je     c0014304 <ipaddr_aton+0x230>
c00142dc:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142e1:	83 f8 0d             	cmp    eax,0xd
c00142e4:	74 1e                	je     c0014304 <ipaddr_aton+0x230>
c00142e6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142eb:	83 f8 09             	cmp    eax,0x9
c00142ee:	74 14                	je     c0014304 <ipaddr_aton+0x230>
c00142f0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00142f5:	83 f8 0b             	cmp    eax,0xb
c00142f8:	74 0a                	je     c0014304 <ipaddr_aton+0x230>
c00142fa:	b8 00 00 00 00       	mov    eax,0x0
c00142ff:	e9 fc 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014304:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001430c:	29 c2                	sub    edx,eax
c001430e:	89 d0                	mov    eax,edx
c0014310:	c1 f8 02             	sar    eax,0x2
c0014313:	83 c0 01             	add    eax,0x1
c0014316:	83 f8 04             	cmp    eax,0x4
c0014319:	0f 87 9d 00 00 00    	ja     c00143bc <ipaddr_aton+0x2e8>
c001431f:	8b 04 85 f0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf010]
c0014326:	ff e0                	jmp    eax
c0014328:	b8 00 00 00 00       	mov    eax,0x0
c001432d:	e9 ce 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014332:	66 90                	xchg   ax,ax
c0014334:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c001433c:	76 0a                	jbe    c0014348 <ipaddr_aton+0x274>
c001433e:	b8 00 00 00 00       	mov    eax,0x0
c0014343:	e9 b8 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c0014348:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001434c:	c1 e0 18             	shl    eax,0x18
c001434f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014353:	e9 80 00 00 00       	jmp    c00143d8 <ipaddr_aton+0x304>
c0014358:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c0014360:	76 0a                	jbe    c001436c <ipaddr_aton+0x298>
c0014362:	b8 00 00 00 00       	mov    eax,0x0
c0014367:	e9 94 00 00 00       	jmp    c0014400 <ipaddr_aton+0x32c>
c001436c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014370:	c1 e0 18             	shl    eax,0x18
c0014373:	89 c2                	mov    edx,eax
c0014375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014379:	c1 e0 10             	shl    eax,0x10
c001437c:	09 d0                	or     eax,edx
c001437e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014382:	eb 54                	jmp    c00143d8 <ipaddr_aton+0x304>
c0014384:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001438c:	76 0a                	jbe    c0014398 <ipaddr_aton+0x2c4>
c001438e:	b8 00 00 00 00       	mov    eax,0x0
c0014393:	eb 6b                	jmp    c0014400 <ipaddr_aton+0x32c>
c0014395:	8d 76 00             	lea    esi,[esi+0x0]
c0014398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439c:	c1 e0 18             	shl    eax,0x18
c001439f:	89 c2                	mov    edx,eax
c00143a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143a5:	c1 e0 10             	shl    eax,0x10
c00143a8:	09 c2                	or     edx,eax
c00143aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00143ae:	c1 e0 08             	shl    eax,0x8
c00143b1:	09 d0                	or     eax,edx
c00143b3:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00143b7:	eb 1f                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143b9:	8d 76 00             	lea    esi,[esi+0x0]
c00143bc:	83 ec 08             	sub    esp,0x8
c00143bf:	68 e5 0f 03 c0       	push   0xc0030fe5
c00143c4:	68 06 fd 02 c0       	push   0xc002fd06
c00143c9:	e8 ba b9 00 00       	call   c001fd88 <CPrintf>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	eb 05                	jmp    c00143d8 <ipaddr_aton+0x304>
c00143d3:	90                   	nop
c00143d4:	90                   	nop
c00143d5:	8d 76 00             	lea    esi,[esi+0x0]
c00143d8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143dd:	74 19                	je     c00143f8 <ipaddr_aton+0x324>
c00143df:	83 ec 0c             	sub    esp,0xc
c00143e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143e6:	e8 21 c8 fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	89 c2                	mov    edx,eax
c00143f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143f4:	89 10                	mov    DWORD PTR [eax],edx
c00143f6:	66 90                	xchg   ax,ax
c00143f8:	b8 01 00 00 00       	mov    eax,0x1
c00143fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014400:	83 c4 2c             	add    esp,0x2c
c0014403:	c3                   	ret    

c0014404 <ipaddr_addr>:
c0014404:	83 ec 1c             	sub    esp,0x1c
c0014407:	83 ec 08             	sub    esp,0x8
c001440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001440e:	50                   	push   eax
c001440f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014413:	e8 bc fc ff ff       	call   c00140d4 <ipaddr_aton>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	85 c0                	test   eax,eax
c001441d:	74 09                	je     c0014428 <ipaddr_addr+0x24>
c001441f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014423:	eb 0b                	jmp    c0014430 <ipaddr_addr+0x2c>
c0014425:	8d 76 00             	lea    esi,[esi+0x0]
c0014428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001442d:	8d 76 00             	lea    esi,[esi+0x0]
c0014430:	83 c4 1c             	add    esp,0x1c
c0014433:	c3                   	ret    

c0014434 <ipaddr_ntoa_r>:
c0014434:	83 ec 20             	sub    esp,0x20
c0014437:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001443f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014443:	8b 00                	mov    eax,DWORD PTR [eax]
c0014445:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014449:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001444d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014451:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014459:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001445e:	e9 f9 00 00 00       	jmp    c001455c <ipaddr_ntoa_r+0x128>
c0014463:	90                   	nop
c0014464:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014469:	8d 76 00             	lea    esi,[esi+0x0]
c001446c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014470:	8a 00                	mov    al,BYTE PTR [eax]
c0014472:	0f b6 c8             	movzx  ecx,al
c0014475:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001447a:	89 c8                	mov    eax,ecx
c001447c:	f7 e2                	mul    edx
c001447e:	c1 ea 03             	shr    edx,0x3
c0014481:	89 d0                	mov    eax,edx
c0014483:	c1 e0 02             	shl    eax,0x2
c0014486:	01 d0                	add    eax,edx
c0014488:	01 c0                	add    eax,eax
c001448a:	29 c1                	sub    ecx,eax
c001448c:	89 c8                	mov    eax,ecx
c001448e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014496:	8a 00                	mov    al,BYTE PTR [eax]
c0014498:	0f b6 c0             	movzx  eax,al
c001449b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00144a0:	f7 e2                	mul    edx
c00144a2:	89 d0                	mov    eax,edx
c00144a4:	c1 e8 03             	shr    eax,0x3
c00144a7:	88 c2                	mov    dl,al
c00144a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144ad:	88 10                	mov    BYTE PTR [eax],dl
c00144af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00144b3:	83 c0 30             	add    eax,0x30
c00144b6:	88 c1                	mov    cl,al
c00144b8:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00144bc:	8d 50 01             	lea    edx,[eax+0x1]
c00144bf:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00144c3:	0f b6 c0             	movzx  eax,al
c00144c6:	88 ca                	mov    dl,cl
c00144c8:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c00144cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d0:	8a 00                	mov    al,BYTE PTR [eax]
c00144d2:	0f b6 c0             	movzx  eax,al
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 93                	jne    c001446c <ipaddr_ntoa_r+0x38>
c00144d9:	eb 35                	jmp    c0014510 <ipaddr_ntoa_r+0xdc>
c00144db:	90                   	nop
c00144dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e0:	8d 50 01             	lea    edx,[eax+0x1]
c00144e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00144e7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00144eb:	7f 0b                	jg     c00144f8 <ipaddr_ntoa_r+0xc4>
c00144ed:	b8 00 00 00 00       	mov    eax,0x0
c00144f2:	e9 85 00 00 00       	jmp    c001457c <ipaddr_ntoa_r+0x148>
c00144f7:	90                   	nop
c00144f8:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00144fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014501:	8d 48 01             	lea    ecx,[eax+0x1]
c0014504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014508:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001450c:	88 10                	mov    BYTE PTR [eax],dl
c001450e:	66 90                	xchg   ax,ax
c0014510:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014514:	8d 50 ff             	lea    edx,[eax-0x1]
c0014517:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001451b:	0f b6 c0             	movzx  eax,al
c001451e:	85 c0                	test   eax,eax
c0014520:	75 ba                	jne    c00144dc <ipaddr_ntoa_r+0xa8>
c0014522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014526:	8d 50 01             	lea    edx,[eax+0x1]
c0014529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001452d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014531:	7f 09                	jg     c001453c <ipaddr_ntoa_r+0x108>
c0014533:	b8 00 00 00 00       	mov    eax,0x0
c0014538:	eb 42                	jmp    c001457c <ipaddr_ntoa_r+0x148>
c001453a:	66 90                	xchg   ax,ax
c001453c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014540:	8d 50 01             	lea    edx,[eax+0x1]
c0014543:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014547:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001454a:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001454f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014553:	83 c0 01             	add    eax,0x1
c0014556:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001455a:	66 90                	xchg   ax,ax
c001455c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0014561:	83 f8 03             	cmp    eax,0x3
c0014564:	0f 86 fa fe ff ff    	jbe    c0014464 <ipaddr_ntoa_r+0x30>
c001456a:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001456f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014573:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001457a:	66 90                	xchg   ax,ax
c001457c:	83 c4 20             	add    esp,0x20
c001457f:	c3                   	ret    

c0014580 <ipaddr_ntoa>:
c0014580:	6a 10                	push   0x10
c0014582:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014587:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001458b:	e8 a4 fe ff ff       	call   c0014434 <ipaddr_ntoa_r>
c0014590:	83 c4 0c             	add    esp,0xc
c0014593:	c3                   	ret    

c0014594 <ip_reass_dequeue_datagram>:
c0014594:	83 ec 0c             	sub    esp,0xc
c0014597:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001459c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00145a0:	75 0e                	jne    c00145b0 <ip_reass_dequeue_datagram+0x1c>
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145a8:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00145ad:	eb 29                	jmp    c00145d8 <ip_reass_dequeue_datagram+0x44>
c00145af:	90                   	nop
c00145b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145b5:	75 15                	jne    c00145cc <ip_reass_dequeue_datagram+0x38>
c00145b7:	83 ec 08             	sub    esp,0x8
c00145ba:	68 0c 10 03 c0       	push   0xc003100c
c00145bf:	68 06 fd 02 c0       	push   0xc002fd06
c00145c4:	e8 bf b7 00 00       	call   c001fd88 <CPrintf>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00145d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145d6:	89 10                	mov    DWORD PTR [eax],edx
c00145d8:	83 ec 08             	sub    esp,0x8
c00145db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145df:	6a 05                	push   0x5
c00145e1:	e8 52 36 ff ff       	call   c0007c38 <memp_free>
c00145e6:	83 c4 10             	add    esp,0x10
c00145e9:	90                   	nop
c00145ea:	83 c4 0c             	add    esp,0xc
c00145ed:	c3                   	ret    
c00145ee:	66 90                	xchg   ax,ax

c00145f0 <ip_reass_free_complete_datagram>:
c00145f0:	83 ec 2c             	sub    esp,0x2c
c00145f3:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00145fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00145fe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014602:	75 18                	jne    c001461c <ip_reass_free_complete_datagram+0x2c>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	68 25 10 03 c0       	push   0xc0031025
c001460c:	68 06 fd 02 c0       	push   0xc002fd06
c0014611:	e8 72 b7 00 00       	call   c001fd88 <CPrintf>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	8d 76 00             	lea    esi,[esi+0x0]
c001461c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014621:	74 21                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c0014623:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014627:	8b 00                	mov    eax,DWORD PTR [eax]
c0014629:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c001462d:	74 15                	je     c0014644 <ip_reass_free_complete_datagram+0x54>
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	68 31 10 03 c0       	push   0xc0031031
c0014637:	68 06 fd 02 c0       	push   0xc002fd06
c001463c:	e8 47 b7 00 00       	call   c001fd88 <CPrintf>
c0014641:	83 c4 10             	add    esp,0x10
c0014644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001464e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014656:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001465a:	0f b7 c0             	movzx  eax,ax
c001465d:	85 c0                	test   eax,eax
c001465f:	0f 85 a3 00 00 00    	jne    c0014708 <ip_reass_free_complete_datagram+0x118>
c0014665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014669:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001466c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014670:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014674:	8b 10                	mov    edx,DWORD PTR [eax]
c0014676:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001467a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001467d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014681:	8d 50 08             	lea    edx,[eax+0x8]
c0014684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014688:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001468b:	83 ec 04             	sub    esp,0x4
c001468e:	6a 14                	push   0x14
c0014690:	52                   	push   edx
c0014691:	50                   	push   eax
c0014692:	e8 e3 bc fe ff       	call   c000037a <memcpy>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	83 ec 08             	sub    esp,0x8
c001469d:	6a 01                	push   0x1
c001469f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146a3:	e8 4c eb ff ff       	call   c00131f4 <icmp_time_exceeded>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	83 ec 0c             	sub    esp,0xc
c00146ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00146b2:	e8 11 46 ff ff       	call   c0008cc8 <pbuf_clen>
c00146b7:	83 c4 10             	add    esp,0x10
c00146ba:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00146be:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146c3:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146c8:	01 d0                	add    eax,edx
c00146ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00146cf:	7e 17                	jle    c00146e8 <ip_reass_free_complete_datagram+0xf8>
c00146d1:	83 ec 08             	sub    esp,0x8
c00146d4:	68 43 10 03 c0       	push   0xc0031043
c00146d9:	68 06 fd 02 c0       	push   0xc002fd06
c00146de:	e8 a5 b6 00 00       	call   c001fd88 <CPrintf>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146ed:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146f2:	01 d0                	add    eax,edx
c00146f4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014700:	e8 ef 3d ff ff       	call   c00084f4 <pbuf_free>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001470c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001470f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014713:	eb 7b                	jmp    c0014790 <ip_reass_free_complete_datagram+0x1a0>
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001471c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001471f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014727:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001472b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001472f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014731:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014735:	83 ec 0c             	sub    esp,0xc
c0014738:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001473c:	e8 87 45 ff ff       	call   c0008cc8 <pbuf_clen>
c0014741:	83 c4 10             	add    esp,0x10
c0014744:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014748:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001474d:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014752:	01 d0                	add    eax,edx
c0014754:	3d ff ff 00 00       	cmp    eax,0xffff
c0014759:	7e 15                	jle    c0014770 <ip_reass_free_complete_datagram+0x180>
c001475b:	83 ec 08             	sub    esp,0x8
c001475e:	68 43 10 03 c0       	push   0xc0031043
c0014763:	68 06 fd 02 c0       	push   0xc002fd06
c0014768:	e8 1b b6 00 00       	call   c001fd88 <CPrintf>
c001476d:	83 c4 10             	add    esp,0x10
c0014770:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014775:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001477a:	01 d0                	add    eax,edx
c001477c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014781:	83 ec 0c             	sub    esp,0xc
c0014784:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014788:	e8 67 3d ff ff       	call   c00084f4 <pbuf_free>
c001478d:	83 c4 10             	add    esp,0x10
c0014790:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014795:	75 81                	jne    c0014718 <ip_reass_free_complete_datagram+0x128>
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001479e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00147a2:	e8 ed fd ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00147b0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00147b5:	0f b7 c0             	movzx  eax,ax
c00147b8:	39 c2                	cmp    edx,eax
c00147ba:	76 18                	jbe    c00147d4 <ip_reass_free_complete_datagram+0x1e4>
c00147bc:	83 ec 08             	sub    esp,0x8
c00147bf:	68 60 10 03 c0       	push   0xc0031060
c00147c4:	68 06 fd 02 c0       	push   0xc002fd06
c00147c9:	e8 ba b5 00 00       	call   c001fd88 <CPrintf>
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00147db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00147e0:	89 d1                	mov    ecx,edx
c00147e2:	29 c1                	sub    ecx,eax
c00147e4:	89 c8                	mov    eax,ecx
c00147e6:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00147ec:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00147f1:	83 c4 2c             	add    esp,0x2c
c00147f4:	c3                   	ret    
c00147f5:	8d 76 00             	lea    esi,[esi+0x0]

c00147f8 <ip_reass_tmr>:
c00147f8:	83 ec 1c             	sub    esp,0x1c
c00147fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014803:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480c:	eb 62                	jmp    c0014870 <ip_reass_tmr+0x78>
c001480e:	66 90                	xchg   ax,ax
c0014810:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014814:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014817:	0f b6 c0             	movzx  eax,al
c001481a:	85 c0                	test   eax,eax
c001481c:	74 2a                	je     c0014848 <ip_reass_tmr+0x50>
c001481e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014822:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014825:	83 e8 01             	sub    eax,0x1
c0014828:	88 c2                	mov    dl,al
c001482a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001482e:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014835:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001483d:	8b 00                	mov    eax,DWORD PTR [eax]
c001483f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014843:	eb 2b                	jmp    c0014870 <ip_reass_tmr+0x78>
c0014845:	8d 76 00             	lea    esi,[esi+0x0]
c0014848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001484c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014854:	8b 00                	mov    eax,DWORD PTR [eax]
c0014856:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485a:	83 ec 08             	sub    esp,0x8
c001485d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014861:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014865:	e8 86 fd ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	8d 76 00             	lea    esi,[esi+0x0]
c0014870:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014875:	75 99                	jne    c0014810 <ip_reass_tmr+0x18>
c0014877:	90                   	nop
c0014878:	83 c4 1c             	add    esp,0x1c
c001487b:	c3                   	ret    

c001487c <ip_reass_remove_oldest_datagram>:
c001487c:	83 ec 2c             	sub    esp,0x2c
c001487f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014887:	90                   	nop
c0014888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014890:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014898:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148a0:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00148a5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148a9:	e9 9a 00 00 00       	jmp    c0014948 <ip_reass_remove_oldest_datagram+0xcc>
c00148ae:	66 90                	xchg   ax,ax
c00148b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148b4:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00148b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00148be:	39 c2                	cmp    edx,eax
c00148c0:	75 2e                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00148c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00148d0:	39 c2                	cmp    edx,eax
c00148d2:	75 1c                	jne    c00148f0 <ip_reass_remove_oldest_datagram+0x74>
c00148d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00148db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148df:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148e3:	0f b7 d2             	movzx  edx,dx
c00148e6:	0f b7 c0             	movzx  eax,ax
c00148e9:	39 c2                	cmp    edx,eax
c00148eb:	74 3b                	je     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c00148ed:	8d 76 00             	lea    esi,[esi+0x0]
c00148f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00148f5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00148fa:	75 0c                	jne    c0014908 <ip_reass_remove_oldest_datagram+0x8c>
c00148fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014904:	eb 22                	jmp    c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014906:	66 90                	xchg   ax,ax
c0014908:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001490c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001490f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014913:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014916:	0f b6 d2             	movzx  edx,dl
c0014919:	0f b6 c0             	movzx  eax,al
c001491c:	39 c2                	cmp    edx,eax
c001491e:	77 08                	ja     c0014928 <ip_reass_remove_oldest_datagram+0xac>
c0014920:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014924:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	8b 00                	mov    eax,DWORD PTR [eax]
c001492e:	85 c0                	test   eax,eax
c0014930:	74 0a                	je     c001493c <ip_reass_remove_oldest_datagram+0xc0>
c0014932:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014936:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001493a:	66 90                	xchg   ax,ax
c001493c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014940:	8b 00                	mov    eax,DWORD PTR [eax]
c0014942:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014946:	66 90                	xchg   ax,ax
c0014948:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001494d:	0f 85 5d ff ff ff    	jne    c00148b0 <ip_reass_remove_oldest_datagram+0x34>
c0014953:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014958:	74 22                	je     c001497c <ip_reass_remove_oldest_datagram+0x100>
c001495a:	83 ec 08             	sub    esp,0x8
c001495d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014961:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014965:	e8 86 fc ff ff       	call   c00145f0 <ip_reass_free_complete_datagram>
c001496a:	83 c4 10             	add    esp,0x10
c001496d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014975:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014979:	8d 76 00             	lea    esi,[esi+0x0]
c001497c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014980:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014984:	7d 0e                	jge    c0014994 <ip_reass_remove_oldest_datagram+0x118>
c0014986:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001498b:	0f 8f f7 fe ff ff    	jg     c0014888 <ip_reass_remove_oldest_datagram+0xc>
c0014991:	8d 76 00             	lea    esi,[esi+0x0]
c0014994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014998:	83 c4 2c             	add    esp,0x2c
c001499b:	c3                   	ret    

c001499c <ip_reass_enqueue_new_datagram>:
c001499c:	83 ec 1c             	sub    esp,0x1c
c001499f:	83 ec 0c             	sub    esp,0xc
c00149a2:	6a 05                	push   0x5
c00149a4:	e8 63 31 ff ff       	call   c0007b0c <memp_malloc>
c00149a9:	83 c4 10             	add    esp,0x10
c00149ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149b5:	75 4d                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149b7:	83 ec 08             	sub    esp,0x8
c00149ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149c2:	e8 b5 fe ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c00149c7:	83 c4 10             	add    esp,0x10
c00149ca:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00149ce:	7f 14                	jg     c00149e4 <ip_reass_enqueue_new_datagram+0x48>
c00149d0:	83 ec 0c             	sub    esp,0xc
c00149d3:	6a 05                	push   0x5
c00149d5:	e8 32 31 ff ff       	call   c0007b0c <memp_malloc>
c00149da:	83 c4 10             	add    esp,0x10
c00149dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]
c00149e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00149e9:	75 19                	jne    c0014a04 <ip_reass_enqueue_new_datagram+0x68>
c00149eb:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c00149f1:	83 c0 01             	add    eax,0x1
c00149f4:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c00149fa:	b8 00 00 00 00       	mov    eax,0x0
c00149ff:	eb 53                	jmp    c0014a54 <ip_reass_enqueue_new_datagram+0xb8>
c0014a01:	8d 76 00             	lea    esi,[esi+0x0]
c0014a04:	83 ec 04             	sub    esp,0x4
c0014a07:	6a 20                	push   0x20
c0014a09:	6a 00                	push   0x0
c0014a0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a0f:	e8 dc ba fe ff       	call   c00004f0 <memset>
c0014a14:	83 c4 10             	add    esp,0x10
c0014a17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a1b:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014a1f:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a29:	89 10                	mov    DWORD PTR [eax],edx
c0014a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a2f:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a38:	83 c0 08             	add    eax,0x8
c0014a3b:	83 ec 04             	sub    esp,0x4
c0014a3e:	6a 14                	push   0x14
c0014a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014a44:	50                   	push   eax
c0014a45:	e8 30 b9 fe ff       	call   c000037a <memcpy>
c0014a4a:	83 c4 10             	add    esp,0x10
c0014a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a51:	8d 76 00             	lea    esi,[esi+0x0]
c0014a54:	83 c4 1c             	add    esp,0x1c
c0014a57:	c3                   	ret    

c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014a58:	53                   	push   ebx
c0014a59:	83 ec 28             	sub    esp,0x28
c0014a5c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014a64:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014a6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a7b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014a7f:	0f b7 c0             	movzx  eax,ax
c0014a82:	83 ec 0c             	sub    esp,0xc
c0014a85:	50                   	push   eax
c0014a86:	e8 5d c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	89 c3                	mov    ebx,eax
c0014a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a97:	0f b7 c0             	movzx  eax,ax
c0014a9a:	83 ec 0c             	sub    esp,0xc
c0014a9d:	50                   	push   eax
c0014a9e:	e8 45 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	0f b7 c0             	movzx  eax,ax
c0014aa9:	c1 e8 08             	shr    eax,0x8
c0014aac:	83 e0 0f             	and    eax,0xf
c0014aaf:	c1 e0 02             	shl    eax,0x2
c0014ab2:	89 d9                	mov    ecx,ebx
c0014ab4:	29 c1                	sub    ecx,eax
c0014ab6:	89 c8                	mov    eax,ecx
c0014ab8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ac1:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ac5:	0f b7 c0             	movzx  eax,ax
c0014ac8:	83 ec 0c             	sub    esp,0xc
c0014acb:	50                   	push   eax
c0014acc:	e8 17 c1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ad1:	83 c4 10             	add    esp,0x10
c0014ad4:	25 ff 1f 00 00       	and    eax,0x1fff
c0014ad9:	c1 e0 03             	shl    eax,0x3
c0014adc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014ae1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ae8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014afe:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0014b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b06:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014b0b:	01 d0                	add    eax,edx
c0014b0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b11:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0014b15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b20:	e9 13 01 00 00       	jmp    c0014c38 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014b25:	8d 76 00             	lea    esi,[esi+0x0]
c0014b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b37:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b43:	0f b7 d2             	movzx  edx,dx
c0014b46:	0f b7 c0             	movzx  eax,ax
c0014b49:	39 c2                	cmp    edx,eax
c0014b4b:	73 6f                	jae    c0014bbc <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014b4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b55:	89 10                	mov    DWORD PTR [eax],edx
c0014b57:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b5c:	74 4e                	je     c0014bac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b62:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b6e:	0f b7 d2             	movzx  edx,dx
c0014b71:	0f b7 c0             	movzx  eax,ax
c0014b74:	39 c2                	cmp    edx,eax
c0014b76:	0f 82 bc 02 00 00    	jb     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b80:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b88:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b8c:	0f b7 d2             	movzx  edx,dx
c0014b8f:	0f b7 c0             	movzx  eax,ax
c0014b92:	39 c2                	cmp    edx,eax
c0014b94:	0f 87 9e 02 00 00    	ja     c0014e38 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ba2:	89 10                	mov    DWORD PTR [eax],edx
c0014ba4:	e9 9b 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014bb7:	e9 88 00 00 00       	jmp    c0014c44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014bc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bc8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014bcc:	0f b7 d2             	movzx  edx,dx
c0014bcf:	0f b7 c0             	movzx  eax,ax
c0014bd2:	39 c2                	cmp    edx,eax
c0014bd4:	0f 84 62 02 00 00    	je     c0014e3c <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bde:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014bea:	0f b7 d2             	movzx  edx,dx
c0014bed:	0f b7 c0             	movzx  eax,ax
c0014bf0:	39 c2                	cmp    edx,eax
c0014bf2:	0f 82 48 02 00 00    	jb     c0014e40 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014bfd:	74 25                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014bff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c03:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c0f:	0f b7 d2             	movzx  edx,dx
c0014c12:	0f b7 c0             	movzx  eax,ax
c0014c15:	39 c2                	cmp    edx,eax
c0014c17:	74 0b                	je     c0014c24 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014c19:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c21:	8d 76 00             	lea    esi,[esi+0x0]
c0014c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c36:	66 90                	xchg   ax,ax
c0014c38:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c3d:	0f 85 e5 fe ff ff    	jne    c0014b28 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014c43:	90                   	nop
c0014c44:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c49:	0f 85 95 00 00 00    	jne    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014c4f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c54:	74 62                	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c5a:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c62:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c66:	0f b7 d2             	movzx  edx,dx
c0014c69:	0f b7 c0             	movzx  eax,ax
c0014c6c:	39 c2                	cmp    edx,eax
c0014c6e:	76 18                	jbe    c0014c88 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014c70:	83 ec 08             	sub    esp,0x8
c0014c73:	68 7b 10 03 c0       	push   0xc003107b
c0014c78:	68 06 fd 02 c0       	push   0xc002fd06
c0014c7d:	e8 06 b1 00 00       	call   c001fd88 <CPrintf>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8d 76 00             	lea    esi,[esi+0x0]
c0014c88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c90:	89 10                	mov    DWORD PTR [eax],edx
c0014c92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c96:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c9e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ca2:	0f b7 d2             	movzx  edx,dx
c0014ca5:	0f b7 c0             	movzx  eax,ax
c0014ca8:	39 c2                	cmp    edx,eax
c0014caa:	74 38                	je     c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cac:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014cb4:	eb 2e                	jmp    c0014ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cbf:	85 c0                	test   eax,eax
c0014cc1:	74 15                	je     c0014cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014cc3:	83 ec 08             	sub    esp,0x8
c0014cc6:	68 bc 10 03 c0       	push   0xc00310bc
c0014ccb:	68 06 fd 02 c0       	push   0xc002fd06
c0014cd0:	e8 b3 b0 00 00       	call   c001fd88 <CPrintf>
c0014cd5:	83 c4 10             	add    esp,0x10
c0014cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ce0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014ce3:	90                   	nop
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014ceb:	0f b6 c0             	movzx  eax,al
c0014cee:	83 e0 01             	and    eax,0x1
c0014cf1:	0f 84 39 01 00 00    	je     c0014e30 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014cf7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014cfc:	0f 84 26 01 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d10:	0f b7 c0             	movzx  eax,ax
c0014d13:	85 c0                	test   eax,eax
c0014d15:	74 0d                	je     c0014d24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014d17:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d1f:	e9 04 01 00 00       	jmp    c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d30:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d36:	eb 44                	jmp    c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014d53:	0f b7 d2             	movzx  edx,dx
c0014d56:	0f b7 c0             	movzx  eax,ax
c0014d59:	39 c2                	cmp    edx,eax
c0014d5b:	74 0b                	je     c0014d68 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014d5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014d65:	eb 1d                	jmp    c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014d67:	90                   	nop
c0014d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d7a:	66 90                	xchg   ax,ax
c0014d7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d81:	75 b5                	jne    c0014d38 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014d83:	90                   	nop
c0014d84:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d89:	0f 84 99 00 00 00    	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d96:	85 c0                	test   eax,eax
c0014d98:	75 16                	jne    c0014db0 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014d9a:	83 ec 08             	sub    esp,0x8
c0014d9d:	68 99 10 03 c0       	push   0xc0031099
c0014da2:	68 06 fd 02 c0       	push   0xc002fd06
c0014da7:	e8 dc af 00 00       	call   c001fd88 <CPrintf>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	90                   	nop
c0014db0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014db4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014db7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dba:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014dbe:	75 18                	jne    c0014dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014dc0:	83 ec 08             	sub    esp,0x8
c0014dc3:	68 99 10 03 c0       	push   0xc0031099
c0014dc8:	68 06 fd 02 c0       	push   0xc002fd06
c0014dcd:	e8 b6 af 00 00       	call   c001fd88 <CPrintf>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ddc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dde:	85 c0                	test   eax,eax
c0014de0:	74 16                	je     c0014df8 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014de2:	83 ec 08             	sub    esp,0x8
c0014de5:	68 f4 10 03 c0       	push   0xc00310f4
c0014dea:	68 06 fd 02 c0       	push   0xc002fd06
c0014def:	e8 94 af 00 00       	call   c001fd88 <CPrintf>
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	90                   	nop
c0014df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dfc:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014e04:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014e07:	0f b7 d2             	movzx  edx,dx
c0014e0a:	0f b7 c0             	movzx  eax,ax
c0014e0d:	39 c2                	cmp    edx,eax
c0014e0f:	74 17                	je     c0014e28 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014e11:	83 ec 08             	sub    esp,0x8
c0014e14:	68 18 11 03 c0       	push   0xc0031118
c0014e19:	68 06 fd 02 c0       	push   0xc002fd06
c0014e1e:	e8 65 af 00 00       	call   c001fd88 <CPrintf>
c0014e23:	83 c4 10             	add    esp,0x10
c0014e26:	66 90                	xchg   ax,ax
c0014e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2c:	eb 52                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e2e:	66 90                	xchg   ax,ax
c0014e30:	b8 00 00 00 00       	mov    eax,0x0
c0014e35:	eb 49                	jmp    c0014e80 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014e37:	90                   	nop
c0014e38:	90                   	nop
c0014e39:	eb 09                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3b:	90                   	nop
c0014e3c:	90                   	nop
c0014e3d:	eb 05                	jmp    c0014e44 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014e3f:	90                   	nop
c0014e40:	90                   	nop
c0014e41:	8d 76 00             	lea    esi,[esi+0x0]
c0014e44:	83 ec 0c             	sub    esp,0xc
c0014e47:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e4b:	e8 78 3e ff ff       	call   c0008cc8 <pbuf_clen>
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014e5a:	0f b6 c0             	movzx  eax,al
c0014e5d:	89 d3                	mov    ebx,edx
c0014e5f:	29 c3                	sub    ebx,eax
c0014e61:	89 d8                	mov    eax,ebx
c0014e63:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014e69:	83 ec 0c             	sub    esp,0xc
c0014e6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014e70:	e8 7f 36 ff ff       	call   c00084f4 <pbuf_free>
c0014e75:	83 c4 10             	add    esp,0x10
c0014e78:	b8 00 00 00 00       	mov    eax,0x0
c0014e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e80:	83 c4 28             	add    esp,0x28
c0014e83:	5b                   	pop    ebx
c0014e84:	c3                   	ret    
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]

c0014e88 <ip_reass>:
c0014e88:	53                   	push   ebx
c0014e89:	83 ec 28             	sub    esp,0x28
c0014e8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014e94:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014e9a:	83 c0 01             	add    eax,0x1
c0014e9d:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eb2:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014eb5:	0f b7 c0             	movzx  eax,ax
c0014eb8:	83 ec 0c             	sub    esp,0xc
c0014ebb:	50                   	push   eax
c0014ebc:	e8 27 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	0f b7 c0             	movzx  eax,ax
c0014ec7:	c1 e8 08             	shr    eax,0x8
c0014eca:	0f b7 c0             	movzx  eax,ax
c0014ecd:	83 e0 0f             	and    eax,0xf
c0014ed0:	c1 e0 02             	shl    eax,0x2
c0014ed3:	83 f8 14             	cmp    eax,0x14
c0014ed6:	74 14                	je     c0014eec <ip_reass+0x64>
c0014ed8:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014ede:	83 c0 01             	add    eax,0x1
c0014ee1:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014ee7:	e9 68 03 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ef4:	0f b7 c0             	movzx  eax,ax
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	50                   	push   eax
c0014efb:	e8 e8 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f00:	83 c4 10             	add    esp,0x10
c0014f03:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f08:	c1 e0 03             	shl    eax,0x3
c0014f0b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f14:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014f18:	0f b7 c0             	movzx  eax,ax
c0014f1b:	83 ec 0c             	sub    esp,0xc
c0014f1e:	50                   	push   eax
c0014f1f:	e8 c4 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f24:	83 c4 10             	add    esp,0x10
c0014f27:	89 c3                	mov    ebx,eax
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014f30:	0f b7 c0             	movzx  eax,ax
c0014f33:	83 ec 0c             	sub    esp,0xc
c0014f36:	50                   	push   eax
c0014f37:	e8 ac bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f3c:	83 c4 10             	add    esp,0x10
c0014f3f:	0f b7 c0             	movzx  eax,ax
c0014f42:	c1 e8 08             	shr    eax,0x8
c0014f45:	83 e0 0f             	and    eax,0xf
c0014f48:	c1 e0 02             	shl    eax,0x2
c0014f4b:	89 d9                	mov    ecx,ebx
c0014f4d:	29 c1                	sub    ecx,eax
c0014f4f:	89 c8                	mov    eax,ecx
c0014f51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014f56:	83 ec 0c             	sub    esp,0xc
c0014f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f5d:	e8 66 3d ff ff       	call   c0008cc8 <pbuf_clen>
c0014f62:	83 c4 10             	add    esp,0x10
c0014f65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014f69:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f6f:	0f b7 d0             	movzx  edx,ax
c0014f72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f77:	01 d0                	add    eax,edx
c0014f79:	83 f8 0a             	cmp    eax,0xa
c0014f7c:	7e 42                	jle    c0014fc0 <ip_reass+0x138>
c0014f7e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f83:	83 ec 08             	sub    esp,0x8
c0014f86:	50                   	push   eax
c0014f87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f8b:	e8 ec f8 ff ff       	call   c001487c <ip_reass_remove_oldest_datagram>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	85 c0                	test   eax,eax
c0014f95:	74 15                	je     c0014fac <ip_reass+0x124>
c0014f97:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f9d:	0f b7 d0             	movzx  edx,ax
c0014fa0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014fa5:	01 d0                	add    eax,edx
c0014fa7:	83 f8 0a             	cmp    eax,0xa
c0014faa:	7e 14                	jle    c0014fc0 <ip_reass+0x138>
c0014fac:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014fb2:	83 c0 01             	add    eax,0x1
c0014fb5:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014fbb:	e9 94 02 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0014fc0:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014fc9:	eb 65                	jmp    c0015030 <ip_reass+0x1a8>
c0014fcb:	90                   	nop
c0014fcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd0:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014fda:	39 c2                	cmp    edx,eax
c0014fdc:	75 3e                	jne    c001501c <ip_reass+0x194>
c0014fde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fec:	39 c2                	cmp    edx,eax
c0014fee:	75 2c                	jne    c001501c <ip_reass+0x194>
c0014ff0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ff4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ffb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014fff:	0f b7 d2             	movzx  edx,dx
c0015002:	0f b7 c0             	movzx  eax,ax
c0015005:	39 c2                	cmp    edx,eax
c0015007:	75 13                	jne    c001501c <ip_reass+0x194>
c0015009:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c001500f:	83 c0 01             	add    eax,0x1
c0015012:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0015018:	eb 1e                	jmp    c0015038 <ip_reass+0x1b0>
c001501a:	66 90                	xchg   ax,ax
c001501c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015024:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015028:	8b 00                	mov    eax,DWORD PTR [eax]
c001502a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001502e:	66 90                	xchg   ax,ax
c0015030:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0015035:	75 95                	jne    c0014fcc <ip_reass+0x144>
c0015037:	90                   	nop
c0015038:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001503d:	75 25                	jne    c0015064 <ip_reass+0x1dc>
c001503f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0015044:	83 ec 08             	sub    esp,0x8
c0015047:	50                   	push   eax
c0015048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001504c:	e8 4b f9 ff ff       	call   c001499c <ip_reass_enqueue_new_datagram>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015058:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001505d:	75 61                	jne    c00150c0 <ip_reass+0x238>
c001505f:	e9 f0 01 00 00       	jmp    c0015254 <ip_reass+0x3cc>
c0015064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015068:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001506c:	0f b7 c0             	movzx  eax,ax
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	50                   	push   eax
c0015073:	e8 70 bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	0f b7 c0             	movzx  eax,ax
c001507e:	25 ff 1f 00 00       	and    eax,0x1fff
c0015083:	75 3b                	jne    c00150c0 <ip_reass+0x238>
c0015085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015089:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c001508d:	0f b7 c0             	movzx  eax,ax
c0015090:	83 ec 0c             	sub    esp,0xc
c0015093:	50                   	push   eax
c0015094:	e8 4f bb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015099:	83 c4 10             	add    esp,0x10
c001509c:	0f b7 c0             	movzx  eax,ax
c001509f:	25 ff 1f 00 00       	and    eax,0x1fff
c00150a4:	74 1a                	je     c00150c0 <ip_reass+0x238>
c00150a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150aa:	83 c0 08             	add    eax,0x8
c00150ad:	83 ec 04             	sub    esp,0x4
c00150b0:	6a 14                	push   0x14
c00150b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150b6:	50                   	push   eax
c00150b7:	e8 be b2 fe ff       	call   c000037a <memcpy>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	90                   	nop
c00150c0:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c00150c5:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00150cb:	01 d0                	add    eax,edx
c00150cd:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d7:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00150db:	0f b7 c0             	movzx  eax,ax
c00150de:	83 e0 20             	and    eax,0x20
c00150e1:	75 29                	jne    c001510c <ip_reass+0x284>
c00150e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150e7:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c00150ea:	83 c8 01             	or     eax,0x1
c00150ed:	88 c2                	mov    dl,al
c00150ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150f3:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c00150f6:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00150fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150ff:	01 d0                	add    eax,edx
c0015101:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015105:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015109:	8d 76 00             	lea    esi,[esi+0x0]
c001510c:	83 ec 08             	sub    esp,0x8
c001510f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015117:	e8 3c f9 ff ff       	call   c0014a58 <ip_reass_chain_frag_into_datagram_and_validate>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	85 c0                	test   eax,eax
c0015121:	0f 84 25 01 00 00    	je     c001524c <ip_reass+0x3c4>
c0015127:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001512b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001512e:	83 c0 14             	add    eax,0x14
c0015131:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015135:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0015139:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001513d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015140:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015143:	8b 00                	mov    eax,DWORD PTR [eax]
c0015145:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015149:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001514d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015153:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015157:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001515b:	83 c0 08             	add    eax,0x8
c001515e:	83 ec 04             	sub    esp,0x4
c0015161:	6a 14                	push   0x14
c0015163:	50                   	push   eax
c0015164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015168:	e8 0d b2 fe ff       	call   c000037a <memcpy>
c001516d:	83 c4 10             	add    esp,0x10
c0015170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015174:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015177:	0f b7 c0             	movzx  eax,ax
c001517a:	83 ec 0c             	sub    esp,0xc
c001517d:	50                   	push   eax
c001517e:	e8 65 ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015183:	83 c4 10             	add    esp,0x10
c0015186:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001518a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001518e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015192:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0015198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001519c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00151a2:	83 ec 08             	sub    esp,0x8
c00151a5:	6a 14                	push   0x14
c00151a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151ab:	e8 e0 e4 ff ff       	call   c0013690 <inet_chksum>
c00151b0:	83 c4 10             	add    esp,0x10
c00151b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b7:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00151bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00151c6:	eb 3c                	jmp    c0015204 <ip_reass+0x37c>
c00151c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00151cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151d3:	83 ec 08             	sub    esp,0x8
c00151d6:	6a ec                	push   0xffffffec
c00151d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00151dc:	e8 77 31 ff ff       	call   c0008358 <pbuf_header>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	83 ec 08             	sub    esp,0x8
c00151e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00151eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151ef:	e8 38 3b ff ff       	call   c0008d2c <pbuf_cat>
c00151f4:	83 c4 10             	add    esp,0x10
c00151f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015201:	8d 76 00             	lea    esi,[esi+0x0]
c0015204:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015209:	75 bd                	jne    c00151c8 <ip_reass+0x340>
c001520b:	83 ec 08             	sub    esp,0x8
c001520e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015216:	e8 79 f3 ff ff       	call   c0014594 <ip_reass_dequeue_datagram>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	83 ec 0c             	sub    esp,0xc
c0015221:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015225:	e8 9e 3a ff ff       	call   c0008cc8 <pbuf_clen>
c001522a:	83 c4 10             	add    esp,0x10
c001522d:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0015234:	0f b6 c0             	movzx  eax,al
c0015237:	89 d3                	mov    ebx,edx
c0015239:	29 c3                	sub    ebx,eax
c001523b:	89 d8                	mov    eax,ebx
c001523d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0015243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015247:	eb 2f                	jmp    c0015278 <ip_reass+0x3f0>
c0015249:	8d 76 00             	lea    esi,[esi+0x0]
c001524c:	b8 00 00 00 00       	mov    eax,0x0
c0015251:	eb 25                	jmp    c0015278 <ip_reass+0x3f0>
c0015253:	90                   	nop
c0015254:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c001525a:	83 c0 01             	add    eax,0x1
c001525d:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c0015263:	83 ec 0c             	sub    esp,0xc
c0015266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001526a:	e8 85 32 ff ff       	call   c00084f4 <pbuf_free>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	b8 00 00 00 00       	mov    eax,0x0
c0015277:	90                   	nop
c0015278:	83 c4 28             	add    esp,0x28
c001527b:	5b                   	pop    ebx
c001527c:	c3                   	ret    
c001527d:	8d 76 00             	lea    esi,[esi+0x0]

c0015280 <ip_frag_alloc_pbuf_custom_ref>:
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	83 ec 0c             	sub    esp,0xc
c0015286:	6a 06                	push   0x6
c0015288:	e8 7f 28 ff ff       	call   c0007b0c <memp_malloc>
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	83 c4 0c             	add    esp,0xc
c0015293:	c3                   	ret    

c0015294 <ip_frag_free_pbuf_custom_ref>:
c0015294:	83 ec 0c             	sub    esp,0xc
c0015297:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001529c:	75 16                	jne    c00152b4 <ip_frag_free_pbuf_custom_ref+0x20>
c001529e:	83 ec 08             	sub    esp,0x8
c00152a1:	68 36 01 03 c0       	push   0xc0030136
c00152a6:	68 06 fd 02 c0       	push   0xc002fd06
c00152ab:	e8 d8 aa 00 00       	call   c001fd88 <CPrintf>
c00152b0:	83 c4 10             	add    esp,0x10
c00152b3:	90                   	nop
c00152b4:	83 ec 08             	sub    esp,0x8
c00152b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152bb:	6a 06                	push   0x6
c00152bd:	e8 76 29 ff ff       	call   c0007c38 <memp_free>
c00152c2:	83 c4 10             	add    esp,0x10
c00152c5:	90                   	nop
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <ipfrag_free_pbuf_custom>:
c00152cc:	83 ec 1c             	sub    esp,0x1c
c00152cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152dc:	75 16                	jne    c00152f4 <ipfrag_free_pbuf_custom+0x28>
c00152de:	83 ec 08             	sub    esp,0x8
c00152e1:	68 a6 10 03 c0       	push   0xc00310a6
c00152e6:	68 06 fd 02 c0       	push   0xc002fd06
c00152eb:	e8 98 aa 00 00       	call   c001fd88 <CPrintf>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	90                   	nop
c00152f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00152fc:	74 16                	je     c0015314 <ipfrag_free_pbuf_custom+0x48>
c00152fe:	83 ec 08             	sub    esp,0x8
c0015301:	68 b2 10 03 c0       	push   0xc00310b2
c0015306:	68 06 fd 02 c0       	push   0xc002fd06
c001530b:	e8 78 aa 00 00       	call   c001fd88 <CPrintf>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	90                   	nop
c0015314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015318:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001531b:	85 c0                	test   eax,eax
c001531d:	74 15                	je     c0015334 <ipfrag_free_pbuf_custom+0x68>
c001531f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015323:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	50                   	push   eax
c001532a:	e8 c5 31 ff ff       	call   c00084f4 <pbuf_free>
c001532f:	83 c4 10             	add    esp,0x10
c0015332:	66 90                	xchg   ax,ax
c0015334:	83 ec 0c             	sub    esp,0xc
c0015337:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001533b:	e8 54 ff ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	90                   	nop
c0015344:	83 c4 1c             	add    esp,0x1c
c0015347:	c3                   	ret    

c0015348 <ip_frag>:
c0015348:	53                   	push   ebx
c0015349:	83 ec 38             	sub    esp,0x38
c001534c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015350:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015353:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015358:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c001535f:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0015366:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001536a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001536d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015375:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015379:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001537d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015381:	0f b7 c0             	movzx  eax,ax
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	50                   	push   eax
c0015388:	e8 5b b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015395:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015399:	25 ff 1f 00 00       	and    eax,0x1fff
c001539e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00153a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153a7:	25 00 20 00 00       	and    eax,0x2000
c00153ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00153b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00153b8:	83 e8 14             	sub    eax,0x14
c00153bb:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00153c0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153c5:	83 e8 14             	sub    eax,0x14
c00153c8:	79 06                	jns    c00153d0 <ip_frag+0x88>
c00153ca:	83 c0 07             	add    eax,0x7
c00153cd:	8d 76 00             	lea    esi,[esi+0x0]
c00153d0:	c1 f8 03             	sar    eax,0x3
c00153d3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00153d8:	e9 03 03 00 00       	jmp    c00156e0 <ip_frag+0x398>
c00153dd:	8d 76 00             	lea    esi,[esi+0x0]
c00153e0:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c00153e5:	8d 50 ed             	lea    edx,[eax-0x13]
c00153e8:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00153ed:	39 c2                	cmp    edx,eax
c00153ef:	0f 9f c0             	setg   al
c00153f2:	0f b6 c0             	movzx  eax,al
c00153f5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00153fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153fe:	25 ff 1f 00 00       	and    eax,0x1fff
c0015403:	89 c2                	mov    edx,eax
c0015405:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001540a:	09 d0                	or     eax,edx
c001540c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015411:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015416:	85 c0                	test   eax,eax
c0015418:	75 0e                	jne    c0015428 <ip_frag+0xe0>
c001541a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001541e:	80 cc 20             	or     ah,0x20
c0015421:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015426:	66 90                	xchg   ax,ax
c0015428:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001542d:	85 c0                	test   eax,eax
c001542f:	75 0b                	jne    c001543c <ip_frag+0xf4>
c0015431:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015435:	c1 e0 03             	shl    eax,0x3
c0015438:	eb 0a                	jmp    c0015444 <ip_frag+0xfc>
c001543a:	66 90                	xchg   ax,ax
c001543c:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015449:	83 ec 04             	sub    esp,0x4
c001544c:	6a 00                	push   0x0
c001544e:	6a 14                	push   0x14
c0015450:	6a 02                	push   0x2
c0015452:	e8 75 32 ff ff       	call   c00086cc <pbuf_alloc>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001545e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015463:	75 07                	jne    c001546c <ip_frag+0x124>
c0015465:	b0 ff                	mov    al,0xff
c0015467:	e9 84 02 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c001546c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015470:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015474:	0f b7 c0             	movzx  eax,ax
c0015477:	83 f8 13             	cmp    eax,0x13
c001547a:	77 18                	ja     c0015494 <ip_frag+0x14c>
c001547c:	83 ec 08             	sub    esp,0x8
c001547f:	68 48 11 03 c0       	push   0xc0031148
c0015484:	68 06 fd 02 c0       	push   0xc002fd06
c0015489:	e8 fa a8 00 00       	call   c001fd88 <CPrintf>
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8d 76 00             	lea    esi,[esi+0x0]
c0015494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001549b:	83 ec 04             	sub    esp,0x4
c001549e:	6a 14                	push   0x14
c00154a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154a4:	50                   	push   eax
c00154a5:	e8 d0 ae fe ff       	call   c000037a <memcpy>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00154b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00154b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00154b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154bc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00154bf:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c00154c4:	01 c2                	add    edx,eax
c00154c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00154cd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154d1:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00154d5:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c00154da:	89 d1                	mov    ecx,edx
c00154dc:	29 c1                	sub    ecx,eax
c00154de:	89 c8                	mov    eax,ecx
c00154e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00154e4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00154e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ec:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00154f1:	e9 1a 01 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154fc:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015500:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015504:	0f b7 d8             	movzx  ebx,ax
c0015507:	0f b7 ca             	movzx  ecx,dx
c001550a:	39 cb                	cmp    ebx,ecx
c001550c:	76 02                	jbe    c0015510 <ip_frag+0x1c8>
c001550e:	89 d0                	mov    eax,edx
c0015510:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0015515:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001551a:	85 c0                	test   eax,eax
c001551c:	75 12                	jne    c0015530 <ip_frag+0x1e8>
c001551e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015522:	8b 00                	mov    eax,DWORD PTR [eax]
c0015524:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015528:	e9 e3 00 00 00       	jmp    c0015610 <ip_frag+0x2c8>
c001552d:	8d 76 00             	lea    esi,[esi+0x0]
c0015530:	e8 4b fd ff ff       	call   c0015280 <ip_frag_alloc_pbuf_custom_ref>
c0015535:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015539:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001553e:	75 18                	jne    c0015558 <ip_frag+0x210>
c0015540:	83 ec 0c             	sub    esp,0xc
c0015543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015547:	e8 a8 2f ff ff       	call   c00084f4 <pbuf_free>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	b0 ff                	mov    al,0xff
c0015551:	e9 9a 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c0015556:	66 90                	xchg   ax,ax
c0015558:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c001555d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015561:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015568:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c001556d:	83 ec 08             	sub    esp,0x8
c0015570:	53                   	push   ebx
c0015571:	51                   	push   ecx
c0015572:	52                   	push   edx
c0015573:	6a 02                	push   0x2
c0015575:	50                   	push   eax
c0015576:	6a 03                	push   0x3
c0015578:	e8 b7 2c ff ff       	call   c0008234 <pbuf_alloced_custom>
c001557d:	83 c4 20             	add    esp,0x20
c0015580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015584:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015589:	75 25                	jne    c00155b0 <ip_frag+0x268>
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015592:	e8 fd fc ff ff       	call   c0015294 <ip_frag_free_pbuf_custom_ref>
c0015597:	83 c4 10             	add    esp,0x10
c001559a:	83 ec 0c             	sub    esp,0xc
c001559d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155a1:	e8 4e 2f ff ff       	call   c00084f4 <pbuf_free>
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	b0 ff                	mov    al,0xff
c00155ab:	e9 40 01 00 00       	jmp    c00156f0 <ip_frag+0x3a8>
c00155b0:	83 ec 0c             	sub    esp,0xc
c00155b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155b7:	e8 40 37 ff ff       	call   c0008cfc <pbuf_ref>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00155c7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155ce:	c7 40 10 cc 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc00152cc
c00155d5:	83 ec 08             	sub    esp,0x8
c00155d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00155dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155e0:	e8 47 37 ff ff       	call   c0008d2c <pbuf_cat>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00155ec:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00155f1:	89 d3                	mov    ebx,edx
c00155f3:	29 c3                	sub    ebx,eax
c00155f5:	89 d8                	mov    eax,ebx
c00155f7:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00155fc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015601:	85 c0                	test   eax,eax
c0015603:	74 0b                	je     c0015610 <ip_frag+0x2c8>
c0015605:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015609:	8b 00                	mov    eax,DWORD PTR [eax]
c001560b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001560f:	90                   	nop
c0015610:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015615:	85 c0                	test   eax,eax
c0015617:	0f 85 db fe ff ff    	jne    c00154f8 <ip_frag+0x1b0>
c001561d:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015622:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0015627:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c001562c:	83 ec 0c             	sub    esp,0xc
c001562f:	50                   	push   eax
c0015630:	e8 b3 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001563c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015644:	83 c0 14             	add    eax,0x14
c0015647:	0f b7 c0             	movzx  eax,ax
c001564a:	83 ec 0c             	sub    esp,0xc
c001564d:	50                   	push   eax
c001564e:	e8 95 b5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001565a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001565e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015662:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015668:	83 ec 08             	sub    esp,0x8
c001566b:	6a 14                	push   0x14
c001566d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015671:	e8 1a e0 ff ff       	call   c0013690 <inet_chksum>
c0015676:	83 c4 10             	add    esp,0x10
c0015679:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001567d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015681:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015685:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015688:	83 ec 04             	sub    esp,0x4
c001568b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001568f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015693:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015697:	ff d0                	call   eax
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c00156a2:	83 c0 01             	add    eax,0x1
c00156a5:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c00156ab:	83 ec 0c             	sub    esp,0xc
c00156ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156b2:	e8 3d 2e ff ff       	call   c00084f4 <pbuf_free>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c00156bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156c3:	89 d1                	mov    ecx,edx
c00156c5:	29 c1                	sub    ecx,eax
c00156c7:	89 c8                	mov    eax,ecx
c00156c9:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00156ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00156d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156d6:	01 d0                	add    eax,edx
c00156d8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c00156e5:	85 c0                	test   eax,eax
c00156e7:	0f 85 f3 fc ff ff    	jne    c00153e0 <ip_frag+0x98>
c00156ed:	b0 00                	mov    al,0x0
c00156ef:	90                   	nop
c00156f0:	83 c4 38             	add    esp,0x38
c00156f3:	5b                   	pop    ebx
c00156f4:	c3                   	ret    
c00156f5:	90                   	nop

c00156f6 <Computer::close(int, int, void*)>:
c00156f6:	53                   	push   ebx
c00156f7:	83 ec 08             	sub    esp,0x8
c00156fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156fe:	e8 15 a5 00 00       	call   c001fc18 <KeExecuteAtexit()>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c001570c:	50                   	push   eax
c001570d:	e8 18 60 00 00       	call   c001b72a <Device::closeAll()>
c0015712:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015718:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001571c:	8b 10                	mov    edx,DWORD PTR [eax]
c001571e:	51                   	push   ecx
c001571f:	68 0f 27 00 00       	push   0x270f
c0015724:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015728:	53                   	push   ebx
c0015729:	50                   	push   eax
c001572a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001572d:	83 c4 14             	add    esp,0x14
c0015730:	68 68 11 03 c0       	push   0xc0031168
c0015735:	e8 20 ad 00 00       	call   c002045a <KePanic(char const*)>
c001573a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001573f:	83 c4 18             	add    esp,0x18
c0015742:	5b                   	pop    ebx
c0015743:	c3                   	ret    

c0015744 <Krnl::firstTask()>:
c0015744:	53                   	push   ebx
c0015745:	83 ec 14             	sub    esp,0x14
c0015748:	fb                   	sti    
c0015749:	68 7e 11 03 c0       	push   0xc003117e
c001574e:	e8 a4 a5 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015753:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c001575a:	e8 52 0e 00 00       	call   c00165b1 <malloc>
c001575f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015766:	89 c3                	mov    ebx,eax
c0015768:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001576d:	50                   	push   eax
c001576e:	68 97 11 03 c0       	push   0xc0031197
c0015773:	6a 01                	push   0x1
c0015775:	53                   	push   ebx
c0015776:	e8 7d f8 00 00       	call   c0024ff8 <Process::Process(bool, char const*, Process*, char**)>
c001577b:	83 c4 20             	add    esp,0x20
c001577e:	68 ff 00 00 00       	push   0xff
c0015783:	6a 00                	push   0x0
c0015785:	68 9d 5f 01 c0       	push   0xc0015f9d
c001578a:	53                   	push   ebx
c001578b:	e8 90 fa 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c0015790:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c0015796:	6a 7a                	push   0x7a
c0015798:	6a 00                	push   0x0
c001579a:	68 e8 5a 02 c0       	push   0xc0025ae8
c001579f:	52                   	push   edx
c00157a0:	e8 7b fa 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c00157a5:	83 c4 14             	add    esp,0x14
c00157a8:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c00157ad:	68 94 12 03 c0       	push   0xc0031294
c00157b2:	e8 40 a5 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c00157b7:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c00157be:	e8 50 ae 00 00       	call   c0020613 <KeInitRand()>
c00157c3:	e8 b7 06 01 00       	call   c0025e7f <Vm::initialise8086()>
c00157c8:	e8 59 4b 00 00       	call   c001a326 <Fs::initVFS()>
c00157cd:	c7 04 24 a4 11 03 c0 	mov    DWORD PTR [esp],0xc00311a4
c00157d4:	e8 1e a5 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c00157d9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00157de:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00157e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00157e6:	6a 00                	push   0x0
c00157e8:	6a 00                	push   0x0
c00157ea:	6a 00                	push   0x0
c00157ec:	50                   	push   eax
c00157ed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00157f0:	83 c4 14             	add    esp,0x14
c00157f3:	68 94 12 03 c0       	push   0xc0031294
c00157f8:	e8 fa a4 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c00157fd:	e8 be 42 00 00       	call   c0019ac0 <KeInitialiseSymlinks()>
c0015802:	e8 9b aa 00 00       	call   c00202a2 <KeLoadSystemEnv()>
c0015807:	e8 13 ad 00 00       	call   c002051f <KeSetupPowerManager()>
c001580c:	83 c4 0c             	add    esp,0xc
c001580f:	6a 3a                	push   0x3a
c0015811:	68 be 11 03 c0       	push   0xc00311be
c0015816:	68 c7 11 03 c0       	push   0xc00311c7
c001581b:	e8 8f d9 00 00       	call   c00231af <Reg::readIntWithDefault(char*, char*, int)>
c0015820:	89 04 24             	mov    DWORD PTR [esp],eax
c0015823:	e8 18 57 00 00       	call   c001af40 <User::loadClockSettings(int)>
c0015828:	c7 04 24 b8 12 03 c0 	mov    DWORD PTR [esp],0xc00312b8
c001582f:	e8 c3 a4 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015834:	59                   	pop    ecx
c0015835:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001583a:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0015840:	53                   	push   ebx
c0015841:	e8 98 5d 00 00       	call   c001b5de <Device::loadDriversForAll()>
c0015846:	e8 61 17 ff ff       	call   c0006fac <lwip_init>
c001584b:	c7 04 24 cf 11 03 c0 	mov    DWORD PTR [esp],0xc00311cf
c0015852:	e8 a0 a4 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015857:	58                   	pop    eax
c0015858:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001585e:	5a                   	pop    edx
c001585f:	6a 01                	push   0x1
c0015861:	68 e0 11 03 c0       	push   0xc00311e0
c0015866:	e8 82 f1 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001586b:	59                   	pop    ecx
c001586c:	5a                   	pop    edx
c001586d:	53                   	push   ebx
c001586e:	50                   	push   eax
c001586f:	e8 cb f3 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	83 ec 0c             	sub    esp,0xc
c001587a:	6a 02                	push   0x2
c001587c:	e8 ab fc 00 00       	call   c002552c <blockTask(TaskState)>
c0015881:	83 c4 10             	add    esp,0x10
c0015884:	eb f1                	jmp    c0015877 <Krnl::firstTask()+0x133>

c0015886 <Computer::Computer()>:
c0015886:	83 ec 0c             	sub    esp,0xc
c0015889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001588d:	83 ec 08             	sub    esp,0x8
c0015890:	68 fc 11 03 c0       	push   0xc00311fc
c0015895:	50                   	push   eax
c0015896:	e8 89 5d 00 00       	call   c001b624 <Device::Device(char const*)>
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	ba 04 13 03 c0       	mov    edx,0xc0031304
c00158a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158a7:	89 10                	mov    DWORD PTR [eax],edx
c00158a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158ad:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00158b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158bb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c00158c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00158cf:	83 ca 04             	or     edx,0x4
c00158d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00158d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158e2:	0f b6 d0             	movzx  edx,al
c00158e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158e9:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c00158f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00158f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00158fa:	0f b6 d0             	movzx  edx,al
c00158fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015901:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015910:	8d 50 01             	lea    edx,[eax+0x1]
c0015913:	88 d1                	mov    cl,dl
c0015915:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015919:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001591f:	0f b6 d0             	movzx  edx,al
c0015922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015926:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001592a:	83 e1 3f             	and    ecx,0x3f
c001592d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0015931:	90                   	nop
c0015932:	83 c4 0c             	add    esp,0xc
c0015935:	c3                   	ret    

c0015936 <Computer::setBootMessage(char const*)>:
c0015936:	c3                   	ret    
c0015937:	90                   	nop

c0015938 <Computer::detectFeatures()>:
c0015938:	55                   	push   ebp
c0015939:	57                   	push   edi
c001593a:	56                   	push   esi
c001593b:	53                   	push   ebx
c001593c:	83 ec 1c             	sub    esp,0x1c
c001593f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015943:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015949:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c001594f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0015955:	e8 9f a8 fe ff       	call   c00001f9 <detectCPUID>
c001595a:	31 d2                	xor    edx,edx
c001595c:	85 c0                	test   eax,eax
c001595e:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015964:	0f 95 c2             	setne  dl
c0015967:	83 e0 fd             	and    eax,0xfffffffd
c001596a:	d1 e2                	shl    edx,1
c001596c:	09 d0                	or     eax,edx
c001596e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015974:	a8 02                	test   al,0x2
c0015976:	75 51                	jne    c00159c9 <Computer::detectFeatures()+0x91>
c0015978:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c001597f:	74 0f                	je     c0015990 <Computer::detectFeatures()+0x58>
c0015981:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015987:	83 e0 fb             	and    eax,0xfffffffb
c001598a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015990:	e8 a1 8b 01 00       	call   c002e536 <x87Detect>
c0015995:	83 e0 01             	and    eax,0x1
c0015998:	c1 e0 04             	shl    eax,0x4
c001599b:	89 c2                	mov    edx,eax
c001599d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159a3:	83 e0 ef             	and    eax,0xffffffef
c00159a6:	09 d0                	or     eax,edx
c00159a8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ae:	88 c2                	mov    dl,al
c00159b0:	a8 10                	test   al,0x10
c00159b2:	0f 85 33 01 00 00    	jne    c0015aeb <Computer::detectFeatures()+0x1b3>
c00159b8:	80 e2 80             	and    dl,0x80
c00159bb:	0f 85 4c 01 00 00    	jne    c0015b0d <Computer::detectFeatures()+0x1d5>
c00159c1:	83 c4 1c             	add    esp,0x1c
c00159c4:	5b                   	pop    ebx
c00159c5:	5e                   	pop    esi
c00159c6:	5f                   	pop    edi
c00159c7:	5d                   	pop    ebp
c00159c8:	c3                   	ret    
c00159c9:	83 ec 0c             	sub    esp,0xc
c00159cc:	6a 20                	push   0x20
c00159ce:	e8 5d 97 00 00       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c00159d3:	83 e0 01             	and    eax,0x1
c00159d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00159dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159e3:	83 e0 f7             	and    eax,0xfffffff7
c00159e6:	09 d0                	or     eax,edx
c00159e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ee:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c00159f5:	e8 36 97 00 00       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c00159fa:	89 c2                	mov    edx,eax
c00159fc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a02:	83 e2 01             	and    edx,0x1
c0015a05:	83 e0 fe             	and    eax,0xfffffffe
c0015a08:	09 d0                	or     eax,edx
c0015a0a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a10:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015a17:	e8 14 97 00 00       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c0015a1c:	89 c2                	mov    edx,eax
c0015a1e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a24:	c1 e2 07             	shl    edx,0x7
c0015a27:	83 e0 7f             	and    eax,0x7f
c0015a2a:	09 d0                	or     eax,edx
c0015a2c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a32:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015a39:	e8 f2 96 00 00       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	83 e0 01             	and    eax,0x1
c0015a44:	c1 e0 05             	shl    eax,0x5
c0015a47:	89 c2                	mov    edx,eax
c0015a49:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a4f:	83 e0 df             	and    eax,0xffffffdf
c0015a52:	09 d0                	or     eax,edx
c0015a54:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c0015a5e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a64:	0f 84 c9 00 00 00    	je     c0015b33 <Computer::detectFeatures()+0x1fb>
c0015a6a:	83 e0 fe             	and    eax,0xfffffffe
c0015a6d:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a73:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a79:	89 c2                	mov    edx,eax
c0015a7b:	83 e2 09             	and    edx,0x9
c0015a7e:	83 fa 01             	cmp    edx,0x1
c0015a81:	75 09                	jne    c0015a8c <Computer::detectFeatures()+0x154>
c0015a83:	83 e0 fe             	and    eax,0xfffffffe
c0015a86:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015a93:	50                   	push   eax
c0015a94:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015a98:	55                   	push   ebp
c0015a99:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015a9d:	57                   	push   edi
c0015a9e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015aa2:	56                   	push   esi
c0015aa3:	68 00 00 00 80       	push   0x80000000
c0015aa8:	e8 ff 95 00 00       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015aad:	83 c4 20             	add    esp,0x20
c0015ab0:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015ab7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015abb:	0f 86 b7 fe ff ff    	jbe    c0015978 <Computer::detectFeatures()+0x40>
c0015ac1:	83 ec 0c             	sub    esp,0xc
c0015ac4:	50                   	push   eax
c0015ac5:	55                   	push   ebp
c0015ac6:	57                   	push   edi
c0015ac7:	56                   	push   esi
c0015ac8:	68 01 00 00 80       	push   0x80000001
c0015acd:	e8 da 95 00 00       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015ad2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015ad8:	83 c4 20             	add    esp,0x20
c0015adb:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015ae0:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015ae6:	e9 8d fe ff ff       	jmp    c0015978 <Computer::detectFeatures()+0x40>
c0015aeb:	e8 00 8a 01 00       	call   c002e4f0 <sseDetect>
c0015af0:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015af6:	c1 e0 07             	shl    eax,0x7
c0015af9:	83 e2 7f             	and    edx,0x7f
c0015afc:	09 c2                	or     edx,eax
c0015afe:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015b04:	80 e2 80             	and    dl,0x80
c0015b07:	0f 84 b4 fe ff ff    	je     c00159c1 <Computer::detectFeatures()+0x89>
c0015b0d:	e8 6e 86 01 00       	call   c002e180 <avxDetect>
c0015b12:	83 e0 01             	and    eax,0x1
c0015b15:	c1 e0 05             	shl    eax,0x5
c0015b18:	89 c2                	mov    edx,eax
c0015b1a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015b20:	83 e0 df             	and    eax,0xffffffdf
c0015b23:	09 d0                	or     eax,edx
c0015b25:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015b2b:	83 c4 1c             	add    esp,0x1c
c0015b2e:	5b                   	pop    ebx
c0015b2f:	5e                   	pop    esi
c0015b30:	5f                   	pop    edi
c0015b31:	5d                   	pop    ebp
c0015b32:	c3                   	ret    
c0015b33:	83 ec 0c             	sub    esp,0xc
c0015b36:	68 00 02 00 00       	push   0x200
c0015b3b:	e8 f0 95 00 00       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c0015b40:	83 c4 10             	add    esp,0x10
c0015b43:	89 c2                	mov    edx,eax
c0015b45:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015b4b:	83 e2 01             	and    edx,0x1
c0015b4e:	83 e0 fe             	and    eax,0xfffffffe
c0015b51:	09 d0                	or     eax,edx
c0015b53:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015b59:	e9 15 ff ff ff       	jmp    c0015a73 <Computer::detectFeatures()+0x13b>

c0015b5e <Computer::displayFeatures()>:
c0015b5e:	c3                   	ret    
c0015b5f:	90                   	nop

c0015b60 <Computer::rdmsr(unsigned int)>:
c0015b60:	83 ec 0c             	sub    esp,0xc
c0015b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b67:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015b6e:	74 0a                	je     c0015b7a <Computer::rdmsr(unsigned int)+0x1a>
c0015b70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015b74:	0f 32                	rdmsr  
c0015b76:	83 c4 0c             	add    esp,0xc
c0015b79:	c3                   	ret    
c0015b7a:	83 ec 0c             	sub    esp,0xc
c0015b7d:	68 05 12 03 c0       	push   0xc0031205
c0015b82:	e8 d3 a8 00 00       	call   c002045a <KePanic(char const*)>
c0015b87:	83 c4 10             	add    esp,0x10
c0015b8a:	eb e4                	jmp    c0015b70 <Computer::rdmsr(unsigned int)+0x10>

c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015b8c:	57                   	push   edi
c0015b8d:	56                   	push   esi
c0015b8e:	83 ec 04             	sub    esp,0x4
c0015b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b95:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015b99:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015b9d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015ba4:	74 10                	je     c0015bb6 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015ba6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015baa:	89 f0                	mov    eax,esi
c0015bac:	89 fa                	mov    edx,edi
c0015bae:	0f 30                	wrmsr  
c0015bb0:	83 c4 04             	add    esp,0x4
c0015bb3:	5e                   	pop    esi
c0015bb4:	5f                   	pop    edi
c0015bb5:	c3                   	ret    
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	68 0b 12 03 c0       	push   0xc003120b
c0015bbe:	e8 97 a8 00 00       	call   c002045a <KePanic(char const*)>
c0015bc3:	83 c4 10             	add    esp,0x10
c0015bc6:	eb de                	jmp    c0015ba6 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015bc8 <Computer::shutdown()>:
c0015bc8:	83 ec 0c             	sub    esp,0xc
c0015bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bcf:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bd1:	6a 00                	push   0x0
c0015bd3:	6a 00                	push   0x0
c0015bd5:	6a 00                	push   0x0
c0015bd7:	50                   	push   eax
c0015bd8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bdb:	83 c4 1c             	add    esp,0x1c
c0015bde:	c3                   	ret    
c0015bdf:	90                   	nop

c0015be0 <Computer::restart()>:
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015be7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be9:	6a 00                	push   0x0
c0015beb:	6a 00                	push   0x0
c0015bed:	6a 01                	push   0x1
c0015bef:	50                   	push   eax
c0015bf0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015bf3:	83 c4 1c             	add    esp,0x1c
c0015bf6:	c3                   	ret    
c0015bf7:	90                   	nop

c0015bf8 <Computer::sleep()>:
c0015bf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bfc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015c02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c06:	e9 3d 8f 00 00       	jmp    c001eb48 <ACPI::sleep()>
c0015c0b:	90                   	nop

c0015c0c <Computer::nmiEnabled()>:
c0015c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c10:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <Computer::readCMOS(unsigned char)>:
c0015c18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c20:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0015c27:	75 09                	jne    c0015c32 <Computer::readCMOS(unsigned char)+0x1a>
c0015c29:	b2 80                	mov    dl,0x80
c0015c2b:	09 d0                	or     eax,edx
c0015c2d:	e6 70                	out    0x70,al
c0015c2f:	e4 71                	in     al,0x71
c0015c31:	c3                   	ret    
c0015c32:	31 d2                	xor    edx,edx
c0015c34:	eb f5                	jmp    c0015c2b <Computer::readCMOS(unsigned char)+0x13>

c0015c36 <Computer::enableNMI(bool)>:
c0015c36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015c3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c3e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015c44:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015c4c:	eb ca                	jmp    c0015c18 <Computer::readCMOS(unsigned char)>

c0015c4e <Computer::open(int, int, void*)>:
c0015c4e:	56                   	push   esi
c0015c4f:	53                   	push   ebx
c0015c50:	83 ec 10             	sub    esp,0x10
c0015c53:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c57:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015c5e:	68 11 12 03 c0       	push   0xc0031211
c0015c63:	0f 94 05 40 3e 03 c0 	sete   BYTE PTR ds:0xc0033e40
c0015c6a:	e8 88 a0 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015c6f:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015c76:	e8 36 09 00 00       	call   c00165b1 <malloc>
c0015c7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c7e:	89 c6                	mov    esi,eax
c0015c80:	e8 37 8a 00 00       	call   c001e6bc <ACPI::ACPI()>
c0015c85:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015c8b:	58                   	pop    eax
c0015c8c:	5a                   	pop    edx
c0015c8d:	56                   	push   esi
c0015c8e:	53                   	push   ebx
c0015c8f:	e8 2e 58 00 00       	call   c001b4c2 <Device::addChild(Device*)>
c0015c94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c97:	e8 9c fc ff ff       	call   c0015938 <Computer::detectFeatures()>
c0015c9c:	59                   	pop    ecx
c0015c9d:	5e                   	pop    esi
c0015c9e:	6a 01                	push   0x1
c0015ca0:	53                   	push   ebx
c0015ca1:	e8 90 ff ff ff       	call   c0015c36 <Computer::enableNMI(bool)>
c0015ca6:	c7 04 24 29 12 03 c0 	mov    DWORD PTR [esp],0xc0031229
c0015cad:	e8 45 a0 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015cb2:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015cb9:	e8 f3 08 00 00       	call   c00165b1 <malloc>
c0015cbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0015cc1:	89 c6                	mov    esi,eax
c0015cc3:	e8 20 95 00 00       	call   c001f1e8 <CPU::CPU()>
c0015cc8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015cce:	58                   	pop    eax
c0015ccf:	5a                   	pop    edx
c0015cd0:	56                   	push   esi
c0015cd1:	53                   	push   ebx
c0015cd2:	e8 eb 57 00 00       	call   c001b4c2 <Device::addChild(Device*)>
c0015cd7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015cdd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015ce1:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ce3:	51                   	push   ecx
c0015ce4:	6a 00                	push   0x0
c0015ce6:	6a 00                	push   0x0
c0015ce8:	50                   	push   eax
c0015ce9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015cec:	83 c4 14             	add    esp,0x14
c0015cef:	68 d8 12 03 c0       	push   0xc00312d8
c0015cf4:	e8 fe 9f 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015cf9:	e8 be 13 01 00       	call   c00270bc <HalInitialiseCoprocessor()>
c0015cfe:	c7 04 24 43 12 03 c0 	mov    DWORD PTR [esp],0xc0031243
c0015d05:	e8 ed 9f 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c0015d0a:	c7 04 24 44 57 01 c0 	mov    DWORD PTR [esp],0xc0015744
c0015d11:	e8 36 f6 00 00       	call   c002534c <setupMultitasking(void (*)())>
c0015d16:	83 c4 14             	add    esp,0x14
c0015d19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d1e:	5b                   	pop    ebx
c0015d1f:	5e                   	pop    esi
c0015d20:	c3                   	ret    
c0015d21:	90                   	nop

c0015d22 <Computer::disableNMI()>:
c0015d22:	6a 00                	push   0x0
c0015d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d28:	50                   	push   eax
c0015d29:	e8 08 ff ff ff       	call   c0015c36 <Computer::enableNMI(bool)>
c0015d2e:	5a                   	pop    edx
c0015d2f:	59                   	pop    ecx
c0015d30:	c3                   	ret    
c0015d31:	90                   	nop

c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015d32:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d3e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015d45:	75 0b                	jne    c0015d52 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015d47:	b1 80                	mov    cl,0x80
c0015d49:	09 c8                	or     eax,ecx
c0015d4b:	e6 70                	out    0x70,al
c0015d4d:	88 d0                	mov    al,dl
c0015d4f:	e6 71                	out    0x71,al
c0015d51:	c3                   	ret    
c0015d52:	31 c9                	xor    ecx,ecx
c0015d54:	eb f3                	jmp    c0015d49 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015d56 <Computer::handleNMI()>:
c0015d56:	56                   	push   esi
c0015d57:	53                   	push   ebx
c0015d58:	83 ec 10             	sub    esp,0x10
c0015d5b:	e4 92                	in     al,0x92
c0015d5d:	89 c6                	mov    esi,eax
c0015d5f:	e4 61                	in     al,0x61
c0015d61:	68 5e 12 03 c0       	push   0xc003125e
c0015d66:	88 c3                	mov    bl,al
c0015d68:	e8 d4 36 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	83 e6 10             	and    esi,0x10
c0015d73:	75 10                	jne    c0015d85 <Computer::handleNMI()+0x2f>
c0015d75:	f6 c3 40             	test   bl,0x40
c0015d78:	75 20                	jne    c0015d9a <Computer::handleNMI()+0x44>
c0015d7a:	80 e3 80             	and    bl,0x80
c0015d7d:	75 30                	jne    c0015daf <Computer::handleNMI()+0x59>
c0015d7f:	83 c4 04             	add    esp,0x4
c0015d82:	5b                   	pop    ebx
c0015d83:	5e                   	pop    esi
c0015d84:	c3                   	ret    
c0015d85:	83 ec 0c             	sub    esp,0xc
c0015d88:	68 6f 12 03 c0       	push   0xc003126f
c0015d8d:	e8 c8 a6 00 00       	call   c002045a <KePanic(char const*)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	f6 c3 40             	test   bl,0x40
c0015d98:	74 e0                	je     c0015d7a <Computer::handleNMI()+0x24>
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	68 7c 12 03 c0       	push   0xc003127c
c0015da2:	e8 b3 a6 00 00       	call   c002045a <KePanic(char const*)>
c0015da7:	83 c4 10             	add    esp,0x10
c0015daa:	80 e3 80             	and    bl,0x80
c0015dad:	74 d0                	je     c0015d7f <Computer::handleNMI()+0x29>
c0015daf:	c7 44 24 10 86 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031286
c0015db7:	83 c4 04             	add    esp,0x4
c0015dba:	5b                   	pop    ebx
c0015dbb:	5e                   	pop    esi
c0015dbc:	e9 99 a6 00 00       	jmp    c002045a <KePanic(char const*)>
c0015dc1:	90                   	nop

c0015dc2 <GDTEntry::setBase(unsigned int)>:
c0015dc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dca:	89 c1                	mov    ecx,eax
c0015dcc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015dd0:	c1 e9 10             	shr    ecx,0x10
c0015dd3:	c1 e8 18             	shr    eax,0x18
c0015dd6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015dd9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015ddc:	c3                   	ret    
c0015ddd:	90                   	nop

c0015dde <GDTEntry::setLimit(unsigned int)>:
c0015dde:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015de9:	66 89 01             	mov    WORD PTR [ecx],ax
c0015dec:	83 e2 f0             	and    edx,0xfffffff0
c0015def:	c1 e8 10             	shr    eax,0x10
c0015df2:	83 e0 0f             	and    eax,0xf
c0015df5:	09 d0                	or     eax,edx
c0015df7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015dfa:	c3                   	ret    
c0015dfb:	90                   	nop

c0015dfc <GDT::GDT()>:
c0015dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e10:	90                   	nop
c0015e11:	c3                   	ret    

c0015e12 <GDT::addEntry(GDTEntry)>:
c0015e12:	53                   	push   ebx
c0015e13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e1b:	8b 02                	mov    eax,DWORD PTR [edx]
c0015e1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e21:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015e25:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015e29:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e2c:	c1 e0 03             	shl    eax,0x3
c0015e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0015e31:	5b                   	pop    ebx
c0015e32:	c3                   	ret    
c0015e33:	90                   	nop

c0015e34 <GDT::getNumberOfEntries()>:
c0015e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e3a:	c3                   	ret    
c0015e3b:	90                   	nop

c0015e3c <GDT::flush()>:
c0015e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e40:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e42:	83 c0 04             	add    eax,0x4
c0015e45:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015e4c:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015e51:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015e58:	e9 fd a4 fe ff       	jmp    c000035a <loadGDT>
c0015e5d:	90                   	nop

c0015e5e <GDT::setup()>:
c0015e5e:	57                   	push   edi
c0015e5f:	56                   	push   esi
c0015e60:	53                   	push   ebx
c0015e61:	83 ec 30             	sub    esp,0x30
c0015e64:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015e68:	6a 00                	push   0x0
c0015e6a:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015e6e:	56                   	push   esi
c0015e6f:	e8 4e ff ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015e74:	6a 00                	push   0x0
c0015e76:	56                   	push   esi
c0015e77:	e8 62 ff ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0015e7c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015e84:	6a 00                	push   0x0
c0015e86:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015e8a:	56                   	push   esi
c0015e8b:	e8 32 ff ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015e90:	68 ff ff ff 00       	push   0xffffff
c0015e95:	56                   	push   esi
c0015e96:	e8 43 ff ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0015e9b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015e9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015ea3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ea7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015eab:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015eb0:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015eb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015eb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015ebd:	89 f8                	mov    eax,edi
c0015ebf:	89 fa                	mov    edx,edi
c0015ec1:	80 e4 f7             	and    ah,0xf7
c0015ec4:	80 ce 60             	or     dh,0x60
c0015ec7:	89 c7                	mov    edi,eax
c0015ec9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015ecd:	80 cc 60             	or     ah,0x60
c0015ed0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ed4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015ed8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015edc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ee0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015ee4:	83 c4 20             	add    esp,0x20
c0015ee7:	6a 00                	push   0x0
c0015ee9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015eed:	50                   	push   eax
c0015eee:	e8 cf fe ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015ef3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015ef7:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015efb:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015eff:	83 e0 3f             	and    eax,0x3f
c0015f02:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015f06:	6a 00                	push   0x0
c0015f08:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015f0c:	50                   	push   eax
c0015f0d:	e8 b0 fe ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0015f12:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015f16:	83 e0 3f             	and    eax,0x3f
c0015f19:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015f1d:	83 c4 0c             	add    esp,0xc
c0015f20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f28:	53                   	push   ebx
c0015f29:	e8 e4 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f2e:	83 c4 0c             	add    esp,0xc
c0015f31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f39:	53                   	push   ebx
c0015f3a:	e8 d3 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f3f:	83 c4 0c             	add    esp,0xc
c0015f42:	57                   	push   edi
c0015f43:	56                   	push   esi
c0015f44:	53                   	push   ebx
c0015f45:	e8 c8 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f4a:	83 c4 0c             	add    esp,0xc
c0015f4d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f51:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015f55:	53                   	push   ebx
c0015f56:	e8 b7 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f5b:	83 c4 0c             	add    esp,0xc
c0015f5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f66:	53                   	push   ebx
c0015f67:	e8 a6 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f6c:	83 c4 0c             	add    esp,0xc
c0015f6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f77:	53                   	push   ebx
c0015f78:	e8 95 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f7d:	83 c4 0c             	add    esp,0xc
c0015f80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f88:	53                   	push   ebx
c0015f89:	e8 84 fe ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0015f8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f91:	e8 a6 fe ff ff       	call   c0015e3c <GDT::flush()>
c0015f96:	83 c4 40             	add    esp,0x40
c0015f99:	5b                   	pop    ebx
c0015f9a:	5e                   	pop    esi
c0015f9b:	5f                   	pop    edi
c0015f9c:	c3                   	ret    

c0015f9d <idleFunction(void*)>:
c0015f9d:	83 ec 0c             	sub    esp,0xc
c0015fa0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015fa5:	48                   	dec    eax
c0015fa6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015fab:	75 01                	jne    c0015fae <idleFunction(void*)+0x11>
c0015fad:	fb                   	sti    
c0015fae:	e8 d5 0d 01 00       	call   c0026d88 <HalSystemIdle()>
c0015fb3:	e8 3a 8b 01 00       	call   c002eaf2 <idleCommon()>
c0015fb8:	eb f4                	jmp    c0015fae <idleFunction(void*)+0x11>
c0015fba:	66 90                	xchg   ax,ax

c0015fbc <IDTEntry::IDTEntry(bool)>:
c0015fbc:	53                   	push   ebx
c0015fbd:	83 ec 04             	sub    esp,0x4
c0015fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc4:	88 04 24             	mov    BYTE PTR [esp],al
c0015fc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fcb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015fd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fd5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015fd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fdd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015fe0:	83 e2 f0             	and    edx,0xfffffff0
c0015fe3:	83 ca 0e             	or     edx,0xe
c0015fe6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fed:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015ff0:	83 e2 ef             	and    edx,0xffffffef
c0015ff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015ff6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015ffa:	85 c0                	test   eax,eax
c0015ffc:	74 06                	je     c0016004 <IDTEntry::IDTEntry(bool)+0x48>
c0015ffe:	b2 03                	mov    dl,0x3
c0016000:	eb 06                	jmp    c0016008 <IDTEntry::IDTEntry(bool)+0x4c>
c0016002:	66 90                	xchg   ax,ax
c0016004:	b2 00                	mov    dl,0x0
c0016006:	66 90                	xchg   ax,ax
c0016008:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001600c:	83 e2 03             	and    edx,0x3
c001600f:	89 d3                	mov    ebx,edx
c0016011:	c1 e3 05             	shl    ebx,0x5
c0016014:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0016017:	83 e2 9f             	and    edx,0xffffff9f
c001601a:	88 d1                	mov    cl,dl
c001601c:	88 da                	mov    dl,bl
c001601e:	09 ca                	or     edx,ecx
c0016020:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016023:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016027:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c001602a:	83 ca 80             	or     edx,0xffffff80
c001602d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0016030:	90                   	nop
c0016031:	83 c4 04             	add    esp,0x4
c0016034:	5b                   	pop    ebx
c0016035:	c3                   	ret    

c0016036 <IDTEntry::setOffset(unsigned int)>:
c0016036:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001603a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001603e:	66 89 02             	mov    WORD PTR [edx],ax
c0016041:	c1 e8 10             	shr    eax,0x10
c0016044:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0016048:	c3                   	ret    
c0016049:	90                   	nop
c001604a:	66 90                	xchg   ax,ax

c001604c <IDT::IDT()>:
c001604c:	90                   	nop
c001604d:	c3                   	ret    

c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c001604e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016052:	83 c0 30             	add    eax,0x30
c0016055:	c3                   	ret    

c0016056 <IDT::addEntry(IDTEntry, int)>:
c0016056:	53                   	push   ebx
c0016057:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001605b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001605f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016063:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016067:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c001606a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c001606e:	5b                   	pop    ebx
c001606f:	c3                   	ret    

c0016070 <IDT::addEntry(int, void (*)(), bool)>:
c0016070:	53                   	push   ebx
c0016071:	83 ec 10             	sub    esp,0x10
c0016074:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0016079:	50                   	push   eax
c001607a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001607e:	53                   	push   ebx
c001607f:	e8 38 ff ff ff       	call   c0015fbc <IDTEntry::IDTEntry(bool)>
c0016084:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016088:	53                   	push   ebx
c0016089:	e8 a8 ff ff ff       	call   c0016036 <IDTEntry::setOffset(unsigned int)>
c001608e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016092:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016096:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001609a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001609e:	e8 b3 ff ff ff       	call   c0016056 <IDT::addEntry(IDTEntry, int)>
c00160a3:	83 c4 30             	add    esp,0x30
c00160a6:	5b                   	pop    ebx
c00160a7:	c3                   	ret    

c00160a8 <IDT::flush()>:
c00160a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00160ac:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c00160b5:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c00160ba:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c00160c1:	c3                   	ret    

c00160c2 <IDT::setup()>:
c00160c2:	57                   	push   edi
c00160c3:	56                   	push   esi
c00160c4:	53                   	push   ebx
c00160c5:	83 ec 10             	sub    esp,0x10
c00160c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160cc:	6a 00                	push   0x0
c00160ce:	68 f0 e1 02 c0       	push   0xc002e1f0
c00160d3:	6a 00                	push   0x0
c00160d5:	53                   	push   ebx
c00160d6:	e8 95 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160db:	6a 00                	push   0x0
c00160dd:	68 00 e2 02 c0       	push   0xc002e200
c00160e2:	6a 01                	push   0x1
c00160e4:	53                   	push   ebx
c00160e5:	e8 86 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160ea:	83 c4 20             	add    esp,0x20
c00160ed:	6a 00                	push   0x0
c00160ef:	68 0a e2 02 c0       	push   0xc002e20a
c00160f4:	6a 02                	push   0x2
c00160f6:	53                   	push   ebx
c00160f7:	e8 74 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00160fc:	6a 00                	push   0x0
c00160fe:	68 14 e2 02 c0       	push   0xc002e214
c0016103:	6a 03                	push   0x3
c0016105:	53                   	push   ebx
c0016106:	e8 65 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001610b:	83 c4 20             	add    esp,0x20
c001610e:	6a 00                	push   0x0
c0016110:	68 1e e2 02 c0       	push   0xc002e21e
c0016115:	6a 04                	push   0x4
c0016117:	53                   	push   ebx
c0016118:	e8 53 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001611d:	6a 00                	push   0x0
c001611f:	68 28 e2 02 c0       	push   0xc002e228
c0016124:	6a 05                	push   0x5
c0016126:	53                   	push   ebx
c0016127:	e8 44 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001612c:	83 c4 20             	add    esp,0x20
c001612f:	6a 00                	push   0x0
c0016131:	68 32 e2 02 c0       	push   0xc002e232
c0016136:	6a 06                	push   0x6
c0016138:	53                   	push   ebx
c0016139:	e8 32 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001613e:	6a 00                	push   0x0
c0016140:	68 3c e2 02 c0       	push   0xc002e23c
c0016145:	6a 07                	push   0x7
c0016147:	53                   	push   ebx
c0016148:	e8 23 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001614d:	83 c4 20             	add    esp,0x20
c0016150:	6a 00                	push   0x0
c0016152:	68 46 e2 02 c0       	push   0xc002e246
c0016157:	6a 08                	push   0x8
c0016159:	53                   	push   ebx
c001615a:	e8 11 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001615f:	6a 00                	push   0x0
c0016161:	68 4e e2 02 c0       	push   0xc002e24e
c0016166:	6a 09                	push   0x9
c0016168:	53                   	push   ebx
c0016169:	e8 02 ff ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001616e:	83 c4 20             	add    esp,0x20
c0016171:	6a 00                	push   0x0
c0016173:	68 58 e2 02 c0       	push   0xc002e258
c0016178:	6a 0a                	push   0xa
c001617a:	53                   	push   ebx
c001617b:	e8 f0 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016180:	6a 00                	push   0x0
c0016182:	68 60 e2 02 c0       	push   0xc002e260
c0016187:	6a 0b                	push   0xb
c0016189:	53                   	push   ebx
c001618a:	e8 e1 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001618f:	83 c4 20             	add    esp,0x20
c0016192:	6a 00                	push   0x0
c0016194:	68 68 e2 02 c0       	push   0xc002e268
c0016199:	6a 0c                	push   0xc
c001619b:	53                   	push   ebx
c001619c:	e8 cf fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161a1:	6a 00                	push   0x0
c00161a3:	68 70 e2 02 c0       	push   0xc002e270
c00161a8:	6a 0d                	push   0xd
c00161aa:	53                   	push   ebx
c00161ab:	e8 c0 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161b0:	83 c4 20             	add    esp,0x20
c00161b3:	6a 00                	push   0x0
c00161b5:	68 8a e2 02 c0       	push   0xc002e28a
c00161ba:	6a 0e                	push   0xe
c00161bc:	53                   	push   ebx
c00161bd:	e8 ae fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161c2:	6a 00                	push   0x0
c00161c4:	68 92 e2 02 c0       	push   0xc002e292
c00161c9:	6a 0f                	push   0xf
c00161cb:	53                   	push   ebx
c00161cc:	e8 9f fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161d1:	83 c4 20             	add    esp,0x20
c00161d4:	6a 00                	push   0x0
c00161d6:	68 9c e2 02 c0       	push   0xc002e29c
c00161db:	6a 10                	push   0x10
c00161dd:	53                   	push   ebx
c00161de:	e8 8d fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161e3:	6a 00                	push   0x0
c00161e5:	68 a6 e2 02 c0       	push   0xc002e2a6
c00161ea:	6a 11                	push   0x11
c00161ec:	53                   	push   ebx
c00161ed:	e8 7e fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00161f2:	83 c4 20             	add    esp,0x20
c00161f5:	6a 00                	push   0x0
c00161f7:	68 b0 e2 02 c0       	push   0xc002e2b0
c00161fc:	6a 12                	push   0x12
c00161fe:	53                   	push   ebx
c00161ff:	e8 6c fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016204:	6a 01                	push   0x1
c0016206:	68 4a e3 02 c0       	push   0xc002e34a
c001620b:	6a 60                	push   0x60
c001620d:	53                   	push   ebx
c001620e:	e8 5d fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016213:	83 c4 20             	add    esp,0x20
c0016216:	6a 00                	push   0x0
c0016218:	68 51 e3 02 c0       	push   0xc002e351
c001621d:	6a 20                	push   0x20
c001621f:	53                   	push   ebx
c0016220:	e8 4b fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016225:	6a 00                	push   0x0
c0016227:	68 3c e3 02 c0       	push   0xc002e33c
c001622c:	6a 21                	push   0x21
c001622e:	53                   	push   ebx
c001622f:	e8 3c fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016234:	83 c4 20             	add    esp,0x20
c0016237:	6a 00                	push   0x0
c0016239:	68 43 e3 02 c0       	push   0xc002e343
c001623e:	6a 22                	push   0x22
c0016240:	53                   	push   ebx
c0016241:	e8 2a fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016246:	6a 00                	push   0x0
c0016248:	68 ba e2 02 c0       	push   0xc002e2ba
c001624d:	6a 23                	push   0x23
c001624f:	53                   	push   ebx
c0016250:	e8 1b fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016255:	83 c4 20             	add    esp,0x20
c0016258:	6a 00                	push   0x0
c001625a:	68 c4 e2 02 c0       	push   0xc002e2c4
c001625f:	6a 24                	push   0x24
c0016261:	53                   	push   ebx
c0016262:	e8 09 fe ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016267:	6a 00                	push   0x0
c0016269:	68 ce e2 02 c0       	push   0xc002e2ce
c001626e:	6a 25                	push   0x25
c0016270:	53                   	push   ebx
c0016271:	e8 fa fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016276:	83 c4 20             	add    esp,0x20
c0016279:	6a 00                	push   0x0
c001627b:	68 d8 e2 02 c0       	push   0xc002e2d8
c0016280:	6a 26                	push   0x26
c0016282:	53                   	push   ebx
c0016283:	e8 e8 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016288:	6a 00                	push   0x0
c001628a:	68 e2 e2 02 c0       	push   0xc002e2e2
c001628f:	6a 27                	push   0x27
c0016291:	53                   	push   ebx
c0016292:	e8 d9 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016297:	83 c4 20             	add    esp,0x20
c001629a:	6a 00                	push   0x0
c001629c:	68 ec e2 02 c0       	push   0xc002e2ec
c00162a1:	6a 28                	push   0x28
c00162a3:	53                   	push   ebx
c00162a4:	e8 c7 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162a9:	6a 00                	push   0x0
c00162ab:	68 f6 e2 02 c0       	push   0xc002e2f6
c00162b0:	6a 29                	push   0x29
c00162b2:	53                   	push   ebx
c00162b3:	e8 b8 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162b8:	83 c4 20             	add    esp,0x20
c00162bb:	6a 00                	push   0x0
c00162bd:	68 00 e3 02 c0       	push   0xc002e300
c00162c2:	6a 2a                	push   0x2a
c00162c4:	53                   	push   ebx
c00162c5:	e8 a6 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162ca:	6a 00                	push   0x0
c00162cc:	68 0a e3 02 c0       	push   0xc002e30a
c00162d1:	6a 2b                	push   0x2b
c00162d3:	53                   	push   ebx
c00162d4:	e8 97 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162d9:	83 c4 20             	add    esp,0x20
c00162dc:	6a 00                	push   0x0
c00162de:	68 14 e3 02 c0       	push   0xc002e314
c00162e3:	6a 2c                	push   0x2c
c00162e5:	53                   	push   ebx
c00162e6:	e8 85 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162eb:	6a 00                	push   0x0
c00162ed:	68 1e e3 02 c0       	push   0xc002e31e
c00162f2:	6a 2d                	push   0x2d
c00162f4:	53                   	push   ebx
c00162f5:	e8 76 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c00162fa:	83 c4 20             	add    esp,0x20
c00162fd:	6a 00                	push   0x0
c00162ff:	68 28 e3 02 c0       	push   0xc002e328
c0016304:	6a 2e                	push   0x2e
c0016306:	53                   	push   ebx
c0016307:	e8 64 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001630c:	6a 00                	push   0x0
c001630e:	68 32 e3 02 c0       	push   0xc002e332
c0016313:	6a 2f                	push   0x2f
c0016315:	53                   	push   ebx
c0016316:	e8 55 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001631b:	83 c4 20             	add    esp,0x20
c001631e:	6a 00                	push   0x0
c0016320:	68 8c e4 02 c0       	push   0xc002e48c
c0016325:	6a 30                	push   0x30
c0016327:	53                   	push   ebx
c0016328:	e8 43 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001632d:	6a 00                	push   0x0
c001632f:	68 96 e4 02 c0       	push   0xc002e496
c0016334:	6a 31                	push   0x31
c0016336:	53                   	push   ebx
c0016337:	e8 34 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001633c:	83 c4 20             	add    esp,0x20
c001633f:	6a 00                	push   0x0
c0016341:	68 a0 e4 02 c0       	push   0xc002e4a0
c0016346:	6a 32                	push   0x32
c0016348:	53                   	push   ebx
c0016349:	e8 22 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001634e:	6a 00                	push   0x0
c0016350:	68 aa e4 02 c0       	push   0xc002e4aa
c0016355:	6a 33                	push   0x33
c0016357:	53                   	push   ebx
c0016358:	e8 13 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001635d:	83 c4 20             	add    esp,0x20
c0016360:	6a 00                	push   0x0
c0016362:	68 b4 e4 02 c0       	push   0xc002e4b4
c0016367:	6a 34                	push   0x34
c0016369:	53                   	push   ebx
c001636a:	e8 01 fd ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001636f:	6a 00                	push   0x0
c0016371:	68 be e4 02 c0       	push   0xc002e4be
c0016376:	6a 35                	push   0x35
c0016378:	53                   	push   ebx
c0016379:	e8 f2 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001637e:	83 c4 20             	add    esp,0x20
c0016381:	6a 00                	push   0x0
c0016383:	68 c8 e4 02 c0       	push   0xc002e4c8
c0016388:	6a 36                	push   0x36
c001638a:	53                   	push   ebx
c001638b:	e8 e0 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c0016390:	6a 00                	push   0x0
c0016392:	68 d2 e4 02 c0       	push   0xc002e4d2
c0016397:	6a 37                	push   0x37
c0016399:	53                   	push   ebx
c001639a:	e8 d1 fc ff ff       	call   c0016070 <IDT::addEntry(int, void (*)(), bool)>
c001639f:	83 c4 1c             	add    esp,0x1c
c00163a2:	6a 03                	push   0x3
c00163a4:	6a 02                	push   0x2
c00163a6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163ac:	e8 6f 25 00 00       	call   c0018920 <VAS::allocatePages(int, int)>
c00163b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00163b8:	89 c6                	mov    esi,eax
c00163ba:	e8 f2 01 00 00       	call   c00165b1 <malloc>
c00163bf:	81 c6 00 20 00 00    	add    esi,0x2000
c00163c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00163c8:	89 c7                	mov    edi,eax
c00163ca:	e8 71 16 00 00       	call   c0017a40 <TSS::TSS()>
c00163cf:	83 c4 0c             	add    esp,0xc
c00163d2:	68 46 e2 02 c0       	push   0xc002e246
c00163d7:	56                   	push   esi
c00163d8:	57                   	push   edi
c00163d9:	e8 a6 16 00 00       	call   c0017a84 <TSS::setup(unsigned long, unsigned long)>
c00163de:	89 c6                	mov    esi,eax
c00163e0:	58                   	pop    eax
c00163e1:	5a                   	pop    edx
c00163e2:	6a 00                	push   0x0
c00163e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00163e8:	50                   	push   eax
c00163e9:	e8 ce fb ff ff       	call   c0015fbc <IDTEntry::IDTEntry(bool)>
c00163ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00163f7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00163fe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016408:	80 ce 05             	or     dh,0x5
c001640b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001640e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016412:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016416:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016419:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001641c:	e8 87 fc ff ff       	call   c00160a8 <IDT::flush()>
c0016421:	83 c4 20             	add    esp,0x20
c0016424:	5b                   	pop    ebx
c0016425:	5e                   	pop    esi
c0016426:	5f                   	pop    edi
c0016427:	c3                   	ret    

c0016428 <sbrk>:
c0016428:	55                   	push   ebp
c0016429:	57                   	push   edi
c001642a:	56                   	push   esi
c001642b:	53                   	push   ebx
c001642c:	83 ec 1c             	sub    esp,0x1c
c001642f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016433:	85 c0                	test   eax,eax
c0016435:	74 61                	je     c0016498 <sbrk+0x70>
c0016437:	78 66                	js     c001649f <sbrk+0x77>
c0016439:	8b 15 24 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e24
c001643f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016443:	05 ff 0f 00 00       	add    eax,0xfff
c0016448:	89 c5                	mov    ebp,eax
c001644a:	78 6b                	js     c00164b7 <sbrk+0x8f>
c001644c:	c1 fd 0c             	sar    ebp,0xc
c001644f:	bb 00 00 00 00       	mov    ebx,0x0
c0016454:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c001645a:	8b 3d 24 3e 03 c0    	mov    edi,DWORD PTR ds:0xc0033e24
c0016460:	e8 55 04 00 00       	call   c00168ba <Phys::allocatePage()>
c0016465:	68 01 04 00 00       	push   0x401
c001646a:	57                   	push   edi
c001646b:	50                   	push   eax
c001646c:	56                   	push   esi
c001646d:	e8 aa 23 00 00       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016472:	81 05 24 3e 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033e24,0x1000
c001647c:	83 c3 01             	add    ebx,0x1
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	39 dd                	cmp    ebp,ebx
c0016484:	75 ce                	jne    c0016454 <sbrk+0x2c>
c0016486:	0f 20 d8             	mov    eax,cr3
c0016489:	0f 22 d8             	mov    cr3,eax
c001648c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016490:	83 c4 1c             	add    esp,0x1c
c0016493:	5b                   	pop    ebx
c0016494:	5e                   	pop    esi
c0016495:	5f                   	pop    edi
c0016496:	5d                   	pop    ebp
c0016497:	c3                   	ret    
c0016498:	a1 24 3e 03 c0       	mov    eax,ds:0xc0033e24
c001649d:	eb f1                	jmp    c0016490 <sbrk+0x68>
c001649f:	83 ec 08             	sub    esp,0x8
c00164a2:	50                   	push   eax
c00164a3:	68 28 13 03 c0       	push   0xc0031328
c00164a8:	e8 94 2f 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164b5:	eb d9                	jmp    c0016490 <sbrk+0x68>
c00164b7:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00164bd:	eb 8d                	jmp    c001644c <sbrk+0x24>

c00164bf <sbrk_thunk>:
c00164bf:	83 ec 0c             	sub    esp,0xc
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	3d ff bf 00 00       	cmp    eax,0xbfff
c00164cb:	7f 10                	jg     c00164dd <sbrk_thunk+0x1e>
c00164cd:	83 ec 0c             	sub    esp,0xc
c00164d0:	50                   	push   eax
c00164d1:	e8 52 ff ff ff       	call   c0016428 <sbrk>
c00164d6:	83 c4 10             	add    esp,0x10
c00164d9:	83 c4 0c             	add    esp,0xc
c00164dc:	c3                   	ret    
c00164dd:	83 ec 08             	sub    esp,0x8
c00164e0:	50                   	push   eax
c00164e1:	68 a9 13 03 c0       	push   0xc00313a9
c00164e6:	e8 56 2f 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00164f3:	eb e4                	jmp    c00164d9 <sbrk_thunk+0x1a>

c00164f5 <mmap>:
c00164f5:	83 ec 10             	sub    esp,0x10
c00164f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00164fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016500:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016504:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016508:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001650c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016510:	68 58 13 03 c0       	push   0xc0031358
c0016515:	e8 27 2f 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001651a:	83 c4 14             	add    esp,0x14
c001651d:	68 b8 13 03 c0       	push   0xc00313b8
c0016522:	e8 33 9f 00 00       	call   c002045a <KePanic(char const*)>
c0016527:	b8 00 00 00 00       	mov    eax,0x0
c001652c:	83 c4 1c             	add    esp,0x1c
c001652f:	c3                   	ret    

c0016530 <munmap>:
c0016530:	83 ec 18             	sub    esp,0x18
c0016533:	68 bd 13 03 c0       	push   0xc00313bd
c0016538:	e8 1d 9f 00 00       	call   c002045a <KePanic(char const*)>
c001653d:	b8 00 00 00 00       	mov    eax,0x0
c0016542:	83 c4 1c             	add    esp,0x1c
c0016545:	c3                   	ret    

c0016546 <liballoc_lock()>:
c0016546:	fa                   	cli    
c0016547:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c001654e:	b8 00 00 00 00       	mov    eax,0x0
c0016553:	c3                   	ret    

c0016554 <liballoc_unlock()>:
c0016554:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016559:	83 e8 01             	sub    eax,0x1
c001655c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016561:	75 01                	jne    c0016564 <liballoc_unlock()+0x10>
c0016563:	fb                   	sti    
c0016564:	b8 00 00 00 00       	mov    eax,0x0
c0016569:	c3                   	ret    

c001656a <liballoc_alloc(int)>:
c001656a:	83 ec 10             	sub    esp,0x10
c001656d:	6a 01                	push   0x1
c001656f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016573:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016579:	e8 a2 23 00 00       	call   c0018920 <VAS::allocatePages(int, int)>
c001657e:	83 c4 1c             	add    esp,0x1c
c0016581:	c3                   	ret    

c0016582 <liballoc_free(void*, int)>:
c0016582:	83 ec 14             	sub    esp,0x14
c0016585:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016589:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001658f:	e8 d0 1f 00 00       	call   c0018564 <VAS::freeAllocatedPages(unsigned long)>
c0016594:	b8 00 00 00 00       	mov    eax,0x0
c0016599:	83 c4 1c             	add    esp,0x1c
c001659c:	c3                   	ret    

c001659d <realloc>:
c001659d:	83 ec 14             	sub    esp,0x14
c00165a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165a8:	e8 60 b3 fe ff       	call   c000190d <dlrealloc>
c00165ad:	83 c4 1c             	add    esp,0x1c
c00165b0:	c3                   	ret    

c00165b1 <malloc>:
c00165b1:	83 ec 18             	sub    esp,0x18
c00165b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165b8:	e8 13 ae fe ff       	call   c00013d0 <dlmalloc>
c00165bd:	83 c4 1c             	add    esp,0x1c
c00165c0:	c3                   	ret    

c00165c1 <free>:
c00165c1:	83 ec 18             	sub    esp,0x18
c00165c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165c8:	e8 3c a9 fe ff       	call   c0000f09 <dlfree>
c00165cd:	83 c4 1c             	add    esp,0x1c
c00165d0:	c3                   	ret    

c00165d1 <rfree>:
c00165d1:	83 ec 18             	sub    esp,0x18
c00165d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165d8:	e8 2c a9 fe ff       	call   c0000f09 <dlfree>
c00165dd:	83 c4 1c             	add    esp,0x1c
c00165e0:	c3                   	ret    

c00165e1 <calloc>:
c00165e1:	56                   	push   esi
c00165e2:	53                   	push   ebx
c00165e3:	83 ec 10             	sub    esp,0x10
c00165e6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00165ea:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00165ef:	53                   	push   ebx
c00165f0:	e8 bc ff ff ff       	call   c00165b1 <malloc>
c00165f5:	89 c6                	mov    esi,eax
c00165f7:	83 c4 0c             	add    esp,0xc
c00165fa:	53                   	push   ebx
c00165fb:	6a 00                	push   0x0
c00165fd:	50                   	push   eax
c00165fe:	e8 ed 9e fe ff       	call   c00004f0 <memset>
c0016603:	89 f0                	mov    eax,esi
c0016605:	83 c4 14             	add    esp,0x14
c0016608:	5b                   	pop    ebx
c0016609:	5e                   	pop    esi
c001660a:	c3                   	ret    

c001660b <KeEntryPoint>:
c001660b:	57                   	push   edi
c001660c:	bf f9 03 00 00       	mov    edi,0x3f9
c0016611:	56                   	push   esi
c0016612:	89 fa                	mov    edx,edi
c0016614:	53                   	push   ebx
c0016615:	31 f6                	xor    esi,esi
c0016617:	83 ec 2c             	sub    esp,0x2c
c001661a:	a1 00 05 00 00       	mov    eax,ds:0x500
c001661f:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016624:	89 f0                	mov    eax,esi
c0016626:	ee                   	out    dx,al
c0016627:	bb fb 03 00 00       	mov    ebx,0x3fb
c001662c:	b0 80                	mov    al,0x80
c001662e:	89 da                	mov    edx,ebx
c0016630:	ee                   	out    dx,al
c0016631:	b1 03                	mov    cl,0x3
c0016633:	ba f8 03 00 00       	mov    edx,0x3f8
c0016638:	88 c8                	mov    al,cl
c001663a:	ee                   	out    dx,al
c001663b:	89 f0                	mov    eax,esi
c001663d:	89 fa                	mov    edx,edi
c001663f:	ee                   	out    dx,al
c0016640:	88 c8                	mov    al,cl
c0016642:	89 da                	mov    edx,ebx
c0016644:	ee                   	out    dx,al
c0016645:	b0 c7                	mov    al,0xc7
c0016647:	ba fa 03 00 00       	mov    edx,0x3fa
c001664c:	ee                   	out    dx,al
c001664d:	b0 0b                	mov    al,0xb
c001664f:	ba fc 03 00 00       	mov    edx,0x3fc
c0016654:	ee                   	out    dx,al
c0016655:	68 c4 13 03 c0       	push   0xc00313c4
c001665a:	e8 e2 2d 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001665f:	e8 17 96 00 00       	call   c001fc7b <KeDisplaySplashScreen()>
c0016664:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016669:	05 ff 0f 00 00       	add    eax,0xfff
c001666e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016673:	89 04 24             	mov    DWORD PTR [esp],eax
c0016676:	e8 ad 03 00 00       	call   c0016a28 <Phys::physicalMemorySetup(unsigned int)>
c001667b:	e8 67 1c 00 00       	call   c00182e7 <Virt::virtualMemorySetup()>
c0016680:	e8 40 95 00 00       	call   c001fbc5 <KeInitialiseAtexit()>
c0016685:	58                   	pop    eax
c0016686:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c001668a:	53                   	push   ebx
c001668b:	e8 54 1f 00 00       	call   c00185e4 <VAS::VAS()>
c0016690:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c0016696:	e8 ef 83 01 00       	call   c002ea8a <_init>
c001669b:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00166a2:	e8 0a ff ff ff       	call   c00165b1 <malloc>
c00166a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00166aa:	89 c6                	mov    esi,eax
c00166ac:	e8 d5 f1 ff ff       	call   c0015886 <Computer::Computer()>
c00166b1:	53                   	push   ebx
c00166b2:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00166b8:	6a 00                	push   0x0
c00166ba:	6a 00                	push   0x0
c00166bc:	56                   	push   esi
c00166bd:	e8 8c f5 ff ff       	call   c0015c4e <Computer::open(int, int, void*)>
c00166c2:	83 c4 14             	add    esp,0x14
c00166c5:	53                   	push   ebx
c00166c6:	e8 e3 1f 00 00       	call   c00186ae <VAS::~VAS()>
c00166cb:	83 c4 30             	add    esp,0x30
c00166ce:	5b                   	pop    ebx
c00166cf:	5e                   	pop    esi
c00166d0:	5f                   	pop    edi
c00166d1:	c3                   	ret    

c00166d2 <Phys::allocateDMA(unsigned long)>:
c00166d2:	55                   	push   ebp
c00166d3:	31 ed                	xor    ebp,ebp
c00166d5:	57                   	push   edi
c00166d6:	56                   	push   esi
c00166d7:	53                   	push   ebx
c00166d8:	31 db                	xor    ebx,ebx
c00166da:	83 ec 1c             	sub    esp,0x1c
c00166dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166e1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00166e9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00166ef:	31 c0                	xor    eax,eax
c00166f1:	c1 ef 0c             	shr    edi,0xc
c00166f4:	eb 1b                	jmp    c0016711 <Phys::allocateDMA(unsigned long)+0x3f>
c00166f6:	85 c0                	test   eax,eax
c00166f8:	75 06                	jne    c0016700 <Phys::allocateDMA(unsigned long)+0x2e>
c00166fa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00166fe:	89 dd                	mov    ebp,ebx
c0016700:	8d 70 01             	lea    esi,[eax+0x1]
c0016703:	39 f7                	cmp    edi,esi
c0016705:	74 37                	je     c001673e <Phys::allocateDMA(unsigned long)+0x6c>
c0016707:	89 f0                	mov    eax,esi
c0016709:	83 c3 01             	add    ebx,0x1
c001670c:	83 fb 0f             	cmp    ebx,0xf
c001670f:	7f 13                	jg     c0016724 <Phys::allocateDMA(unsigned long)+0x52>
c0016711:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016718:	74 dc                	je     c00166f6 <Phys::allocateDMA(unsigned long)+0x24>
c001671a:	31 c0                	xor    eax,eax
c001671c:	83 c3 01             	add    ebx,0x1
c001671f:	83 fb 0f             	cmp    ebx,0xf
c0016722:	7e ed                	jle    c0016711 <Phys::allocateDMA(unsigned long)+0x3f>
c0016724:	83 ec 0c             	sub    esp,0xc
c0016727:	68 dc 13 03 c0       	push   0xc00313dc
c001672c:	e8 29 9d 00 00       	call   c002045a <KePanic(char const*)>
c0016731:	83 c4 10             	add    esp,0x10
c0016734:	31 c0                	xor    eax,eax
c0016736:	83 c4 1c             	add    esp,0x1c
c0016739:	5b                   	pop    ebx
c001673a:	5e                   	pop    esi
c001673b:	5f                   	pop    edi
c001673c:	5d                   	pop    ebp
c001673d:	c3                   	ret    
c001673e:	89 e9                	mov    ecx,ebp
c0016740:	c1 f9 04             	sar    ecx,0x4
c0016743:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016747:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c001674b:	89 ca                	mov    edx,ecx
c001674d:	83 ea 01             	sub    edx,0x1
c0016750:	79 03                	jns    c0016755 <Phys::allocateDMA(unsigned long)+0x83>
c0016752:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016755:	c1 fa 04             	sar    edx,0x4
c0016758:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c001675c:	74 08                	je     c0016766 <Phys::allocateDMA(unsigned long)+0x94>
c001675e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016762:	31 c0                	xor    eax,eax
c0016764:	eb b6                	jmp    c001671c <Phys::allocateDMA(unsigned long)+0x4a>
c0016766:	85 f6                	test   esi,esi
c0016768:	74 17                	je     c0016781 <Phys::allocateDMA(unsigned long)+0xaf>
c001676a:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c0016770:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c0016777:	c6 02 01             	mov    BYTE PTR [edx],0x1
c001677a:	83 c2 01             	add    edx,0x1
c001677d:	39 d0                	cmp    eax,edx
c001677f:	75 f6                	jne    c0016777 <Phys::allocateDMA(unsigned long)+0xa5>
c0016781:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001678a:	01 f8                	add    eax,edi
c001678c:	85 d2                	test   edx,edx
c001678e:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016793:	74 17                	je     c00167ac <Phys::allocateDMA(unsigned long)+0xda>
c0016795:	83 ec 0c             	sub    esp,0xc
c0016798:	68 dc 13 03 c0       	push   0xc00313dc
c001679d:	e8 b8 9c 00 00       	call   c002045a <KePanic(char const*)>
c00167a2:	83 c4 10             	add    esp,0x10
c00167a5:	89 f0                	mov    eax,esi
c00167a7:	e9 5d ff ff ff       	jmp    c0016709 <Phys::allocateDMA(unsigned long)+0x37>
c00167ac:	c1 e5 0c             	shl    ebp,0xc
c00167af:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00167b5:	e9 7c ff ff ff       	jmp    c0016736 <Phys::allocateDMA(unsigned long)+0x64>

c00167ba <Phys::freeDMA(unsigned long, unsigned long)>:
c00167ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167be:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00167c4:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00167c9:	c1 ea 0c             	shr    edx,0xc
c00167cc:	29 d0                	sub    eax,edx
c00167ce:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00167d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167d7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00167dc:	c1 e8 0c             	shr    eax,0xc
c00167df:	85 d2                	test   edx,edx
c00167e1:	74 11                	je     c00167f4 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00167e3:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00167e8:	01 c2                	add    edx,eax
c00167ea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00167ed:	83 c0 01             	add    eax,0x1
c00167f0:	39 d0                	cmp    eax,edx
c00167f2:	75 f6                	jne    c00167ea <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00167f4:	c3                   	ret    

c00167f5 <Phys::setPageState(unsigned long, bool)>:
c00167f5:	57                   	push   edi
c00167f6:	56                   	push   esi
c00167f7:	8b 35 28 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033e28
c00167fd:	53                   	push   ebx
c00167fe:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016807:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001680b:	0f b6 c0             	movzx  eax,al
c001680e:	89 ca                	mov    edx,ecx
c0016810:	83 e1 07             	and    ecx,0x7
c0016813:	c1 ea 03             	shr    edx,0x3
c0016816:	d3 c3                	rol    ebx,cl
c0016818:	01 d6                	add    esi,edx
c001681a:	d3 e0                	shl    eax,cl
c001681c:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001681f:	21 fb                	and    ebx,edi
c0016821:	88 1e                	mov    BYTE PTR [esi],bl
c0016823:	8b 1d 28 3e 03 c0    	mov    ebx,DWORD PTR ds:0xc0033e28
c0016829:	01 da                	add    edx,ebx
c001682b:	8a 0a                	mov    cl,BYTE PTR [edx]
c001682d:	09 c8                	or     eax,ecx
c001682f:	88 02                	mov    BYTE PTR [edx],al
c0016831:	5b                   	pop    ebx
c0016832:	5e                   	pop    esi
c0016833:	5f                   	pop    edi
c0016834:	c3                   	ret    

c0016835 <Phys::getPageState(unsigned long)>:
c0016835:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016839:	8b 15 28 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033e28
c001683f:	89 c8                	mov    eax,ecx
c0016841:	83 e1 07             	and    ecx,0x7
c0016844:	c1 e8 03             	shr    eax,0x3
c0016847:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001684b:	d3 f8                	sar    eax,cl
c001684d:	83 e0 01             	and    eax,0x1
c0016850:	c3                   	ret    

c0016851 <Phys::freePage(unsigned long)>:
c0016851:	53                   	push   ebx
c0016852:	83 ec 08             	sub    esp,0x8
c0016855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016859:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001685f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016865:	76 41                	jbe    c00168a8 <Phys::freePage(unsigned long)+0x57>
c0016867:	c1 e8 0c             	shr    eax,0xc
c001686a:	50                   	push   eax
c001686b:	89 c3                	mov    ebx,eax
c001686d:	e8 c3 ff ff ff       	call   c0016835 <Phys::getPageState(unsigned long)>
c0016872:	5a                   	pop    edx
c0016873:	84 c0                	test   al,al
c0016875:	74 20                	je     c0016897 <Phys::freePage(unsigned long)+0x46>
c0016877:	83 ec 08             	sub    esp,0x8
c001687a:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001687f:	6a 00                	push   0x0
c0016881:	83 e8 01             	sub    eax,0x1
c0016884:	53                   	push   ebx
c0016885:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001688a:	e8 66 ff ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	83 c4 08             	add    esp,0x8
c0016895:	5b                   	pop    ebx
c0016896:	c3                   	ret    
c0016897:	c7 44 24 10 81 14 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031481
c001689f:	83 c4 08             	add    esp,0x8
c00168a2:	5b                   	pop    ebx
c00168a3:	e9 b2 9b 00 00       	jmp    c002045a <KePanic(char const*)>
c00168a8:	68 00 10 00 00       	push   0x1000
c00168ad:	50                   	push   eax
c00168ae:	e8 07 ff ff ff       	call   c00167ba <Phys::freeDMA(unsigned long, unsigned long)>
c00168b3:	59                   	pop    ecx
c00168b4:	5b                   	pop    ebx
c00168b5:	83 c4 08             	add    esp,0x8
c00168b8:	5b                   	pop    ebx
c00168b9:	c3                   	ret    

c00168ba <Phys::allocatePage()>:
c00168ba:	56                   	push   esi
c00168bb:	53                   	push   ebx
c00168bc:	83 ec 14             	sub    esp,0x14
c00168bf:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00168c5:	89 f3                	mov    ebx,esi
c00168c7:	eb 0a                	jmp    c00168d3 <Phys::allocatePage()+0x19>
c00168c9:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00168cf:	39 de                	cmp    esi,ebx
c00168d1:	74 26                	je     c00168f9 <Phys::allocatePage()+0x3f>
c00168d3:	53                   	push   ebx
c00168d4:	e8 5c ff ff ff       	call   c0016835 <Phys::getPageState(unsigned long)>
c00168d9:	5a                   	pop    edx
c00168da:	84 c0                	test   al,al
c00168dc:	74 67                	je     c0016945 <Phys::allocatePage()+0x8b>
c00168de:	83 c3 01             	add    ebx,0x1
c00168e1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00168e7:	75 e0                	jne    c00168c9 <Phys::allocatePage()+0xf>
c00168e9:	31 db                	xor    ebx,ebx
c00168eb:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00168f5:	39 de                	cmp    esi,ebx
c00168f7:	75 da                	jne    c00168d3 <Phys::allocatePage()+0x19>
c00168f9:	83 ec 0c             	sub    esp,0xc
c00168fc:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016901:	83 f0 01             	xor    eax,0x1
c0016904:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016909:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001690e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016911:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016917:	50                   	push   eax
c0016918:	e8 a9 27 00 00       	call   c00190c6 <VAS::scanForEviction()>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	85 c0                	test   eax,eax
c0016922:	75 48                	jne    c001696c <Phys::allocatePage()+0xb2>
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 04 14 03 c0       	push   0xc0031404
c001692c:	e8 29 9b 00 00       	call   c002045a <KePanic(char const*)>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c001693a:	53                   	push   ebx
c001693b:	e8 f5 fe ff ff       	call   c0016835 <Phys::getPageState(unsigned long)>
c0016940:	5a                   	pop    edx
c0016941:	84 c0                	test   al,al
c0016943:	75 99                	jne    c00168de <Phys::allocatePage()+0x24>
c0016945:	6a 01                	push   0x1
c0016947:	53                   	push   ebx
c0016948:	e8 a8 fe ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c001694d:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016953:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016958:	83 c2 01             	add    edx,0x1
c001695b:	59                   	pop    ecx
c001695c:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016962:	c1 e0 0c             	shl    eax,0xc
c0016965:	5b                   	pop    ebx
c0016966:	83 c4 14             	add    esp,0x14
c0016969:	5b                   	pop    ebx
c001696a:	5e                   	pop    esi
c001696b:	c3                   	ret    
c001696c:	83 ec 08             	sub    esp,0x8
c001696f:	89 c2                	mov    edx,eax
c0016971:	6a 01                	push   0x1
c0016973:	c1 ea 0c             	shr    edx,0xc
c0016976:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001697a:	52                   	push   edx
c001697b:	e8 75 fe ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016980:	83 c4 10             	add    esp,0x10
c0016983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016987:	eb dd                	jmp    c0016966 <Phys::allocatePage()+0xac>

c0016989 <Phys::allocateContiguousPages(int)>:
c0016989:	57                   	push   edi
c001698a:	56                   	push   esi
c001698b:	53                   	push   ebx
c001698c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016990:	fa                   	cli    
c0016991:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016996:	31 db                	xor    ebx,ebx
c0016998:	83 c0 01             	add    eax,0x1
c001699b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00169a0:	85 db                	test   ebx,ebx
c00169a2:	75 11                	jne    c00169b5 <Phys::allocateContiguousPages(int)+0x2c>
c00169a4:	e8 11 ff ff ff       	call   c00168ba <Phys::allocatePage()>
c00169a9:	83 fe 01             	cmp    esi,0x1
c00169ac:	89 c7                	mov    edi,eax
c00169ae:	74 21                	je     c00169d1 <Phys::allocateContiguousPages(int)+0x48>
c00169b0:	bb 01 00 00 00       	mov    ebx,0x1
c00169b5:	e8 00 ff ff ff       	call   c00168ba <Phys::allocatePage()>
c00169ba:	89 da                	mov    edx,ebx
c00169bc:	c1 e2 0c             	shl    edx,0xc
c00169bf:	01 fa                	add    edx,edi
c00169c1:	39 c2                	cmp    edx,eax
c00169c3:	74 22                	je     c00169e7 <Phys::allocateContiguousPages(int)+0x5e>
c00169c5:	bb 01 00 00 00       	mov    ebx,0x1
c00169ca:	89 c7                	mov    edi,eax
c00169cc:	83 fe 01             	cmp    esi,0x1
c00169cf:	75 e4                	jne    c00169b5 <Phys::allocateContiguousPages(int)+0x2c>
c00169d1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00169d6:	83 e8 01             	sub    eax,0x1
c00169d9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00169de:	75 01                	jne    c00169e1 <Phys::allocateContiguousPages(int)+0x58>
c00169e0:	fb                   	sti    
c00169e1:	89 f8                	mov    eax,edi
c00169e3:	5b                   	pop    ebx
c00169e4:	5e                   	pop    esi
c00169e5:	5f                   	pop    edi
c00169e6:	c3                   	ret    
c00169e7:	83 c3 01             	add    ebx,0x1
c00169ea:	39 f3                	cmp    ebx,esi
c00169ec:	75 b2                	jne    c00169a0 <Phys::allocateContiguousPages(int)+0x17>
c00169ee:	eb e1                	jmp    c00169d1 <Phys::allocateContiguousPages(int)+0x48>

c00169f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00169f0:	56                   	push   esi
c00169f1:	53                   	push   ebx
c00169f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169f6:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c00169fc:	73 06                	jae    c0016a04 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00169fe:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a08:	c1 eb 0c             	shr    ebx,0xc
c0016a0b:	c1 e8 0c             	shr    eax,0xc
c0016a0e:	39 d8                	cmp    eax,ebx
c0016a10:	73 13                	jae    c0016a25 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016a12:	6a 00                	push   0x0
c0016a14:	8d 70 01             	lea    esi,[eax+0x1]
c0016a17:	50                   	push   eax
c0016a18:	e8 d8 fd ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016a1d:	5a                   	pop    edx
c0016a1e:	89 f0                	mov    eax,esi
c0016a20:	59                   	pop    ecx
c0016a21:	39 f3                	cmp    ebx,esi
c0016a23:	75 ed                	jne    c0016a12 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016a25:	5b                   	pop    ebx
c0016a26:	5e                   	pop    esi
c0016a27:	c3                   	ret    

c0016a28 <Phys::physicalMemorySetup(unsigned int)>:
c0016a28:	55                   	push   ebp
c0016a29:	57                   	push   edi
c0016a2a:	56                   	push   esi
c0016a2b:	53                   	push   ebx
c0016a2c:	83 ec 40             	sub    esp,0x40
c0016a2f:	6a 10                	push   0x10
c0016a31:	6a 00                	push   0x0
c0016a33:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016a38:	e8 b3 9a fe ff       	call   c00004f0 <memset>
c0016a3d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016a41:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a46:	05 00 10 00 00       	add    eax,0x1000
c0016a4b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016a4f:	5b                   	pop    ebx
c0016a50:	31 db                	xor    ebx,ebx
c0016a52:	5e                   	pop    esi
c0016a53:	50                   	push   eax
c0016a54:	68 97 14 03 c0       	push   0xc0031497
c0016a59:	e8 e3 29 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	83 ec 08             	sub    esp,0x8
c0016a64:	6a 01                	push   0x1
c0016a66:	53                   	push   ebx
c0016a67:	83 c3 01             	add    ebx,0x1
c0016a6a:	e8 86 fd ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016a6f:	83 c4 10             	add    esp,0x10
c0016a72:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016a78:	75 e7                	jne    c0016a61 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0016a7a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016a81:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016a88:	c1 e0 08             	shl    eax,0x8
c0016a8b:	09 c2                	or     edx,eax
c0016a8d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0016a91:	0f 84 98 01 00 00    	je     c0016c2f <Phys::physicalMemorySetup(unsigned int)+0x207>
c0016a97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016aa3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0016aa8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016aac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016ab4:	eb 1c                	jmp    c0016ad2 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0016ab6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016aba:	83 c3 18             	add    ebx,0x18
c0016abd:	83 c6 01             	add    esi,0x1
c0016ac0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016ac4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ac8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016acc:	0f 84 6d 01 00 00    	je     c0016c3f <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016ad2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016ad5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ad8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016adb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016adf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016ae3:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016ae5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016ae8:	01 f0                	add    eax,esi
c0016aea:	55                   	push   ebp
c0016aeb:	11 fa                	adc    edx,edi
c0016aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016af1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016af5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016af9:	51                   	push   ecx
c0016afa:	56                   	push   esi
c0016afb:	68 34 14 03 c0       	push   0xc0031434
c0016b00:	e8 3c 29 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0016b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	09 f8                	or     eax,edi
c0016b0e:	0f 85 2b 01 00 00    	jne    c0016c3f <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016b14:	83 fd 01             	cmp    ebp,0x1
c0016b17:	75 9d                	jne    c0016ab6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b19:	ba 00 00 08 00       	mov    edx,0x80000
c0016b1e:	89 c1                	mov    ecx,eax
c0016b20:	39 f2                	cmp    edx,esi
c0016b22:	19 f9                	sbb    ecx,edi
c0016b24:	0f 82 ab 00 00 00    	jb     c0016bd5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b2a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0016b2e:	89 c1                	mov    ecx,eax
c0016b30:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016b34:	0f 83 9b 00 00 00    	jae    c0016bd5 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016b3a:	ba 00 00 0a 00       	mov    edx,0xa0000
c0016b3f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b43:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b47:	39 fa                	cmp    edx,edi
c0016b49:	19 e8                	sbb    eax,ebp
c0016b4b:	0f 82 b0 01 00 00    	jb     c0016d01 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0016b51:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b55:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016b59:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0016b5f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016b64:	83 d5 ff             	adc    ebp,0xffffffff
c0016b67:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016b6b:	31 c0                	xor    eax,eax
c0016b6d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016b71:	39 fa                	cmp    edx,edi
c0016b73:	89 c1                	mov    ecx,eax
c0016b75:	19 e9                	sbb    ecx,ebp
c0016b77:	0f 83 39 ff ff ff    	jae    c0016ab6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016b7d:	be 00 00 08 00       	mov    esi,0x80000
c0016b82:	83 ec 04             	sub    esp,0x4
c0016b85:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016b89:	57                   	push   edi
c0016b8a:	56                   	push   esi
c0016b8b:	68 58 14 03 c0       	push   0xc0031458
c0016b90:	e8 ac 28 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0016b95:	5d                   	pop    ebp
c0016b96:	58                   	pop    eax
c0016b97:	57                   	push   edi
c0016b98:	56                   	push   esi
c0016b99:	e8 52 fe ff ff       	call   c00169f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016b9e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016ba2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ba6:	83 c4 0c             	add    esp,0xc
c0016ba9:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bad:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c0016bb3:	01 d0                	add    eax,edx
c0016bb5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016bbc:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016bc1:	52                   	push   edx
c0016bc2:	50                   	push   eax
c0016bc3:	68 bd 14 03 c0       	push   0xc00314bd
c0016bc8:	e8 74 28 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0016bcd:	83 c4 10             	add    esp,0x10
c0016bd0:	e9 e1 fe ff ff       	jmp    c0016ab6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016bd5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0016bd9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016be1:	39 ea                	cmp    edx,ebp
c0016be3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016be7:	0f 82 c9 fe ff ff    	jb     c0016ab6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016bed:	ba ff 1f 00 00       	mov    edx,0x1fff
c0016bf2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016bf6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016bfa:	0f 83 b6 fe ff ff    	jae    c0016ab6 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016c00:	39 ee                	cmp    esi,ebp
c0016c02:	89 f8                	mov    eax,edi
c0016c04:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016c08:	0f 83 74 ff ff ff    	jae    c0016b82 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c16:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016c1a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0016c1e:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0016c22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c2a:	e9 53 ff ff ff       	jmp    c0016b82 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0016c2f:	83 ec 0c             	sub    esp,0xc
c0016c32:	68 af 14 03 c0       	push   0xc00314af
c0016c37:	e8 1e 98 00 00       	call   c002045a <KePanic(char const*)>
c0016c3c:	83 c4 10             	add    esp,0x10
c0016c3f:	83 ec 08             	sub    esp,0x8
c0016c42:	bb 60 00 00 00       	mov    ebx,0x60
c0016c47:	6a 00                	push   0x0
c0016c49:	6a 06                	push   0x6
c0016c4b:	e8 a5 fb ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016c50:	58                   	pop    eax
c0016c51:	5a                   	pop    edx
c0016c52:	6a 00                	push   0x0
c0016c54:	6a 07                	push   0x7
c0016c56:	e8 9a fb ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016c5b:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016c61:	83 c4 10             	add    esp,0x10
c0016c64:	83 c1 02             	add    ecx,0x2
c0016c67:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016c6d:	83 ec 08             	sub    esp,0x8
c0016c70:	6a 00                	push   0x0
c0016c72:	53                   	push   ebx
c0016c73:	83 c3 01             	add    ebx,0x1
c0016c76:	e8 7a fb ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016c84:	75 e7                	jne    c0016c6d <Phys::physicalMemorySetup(unsigned int)+0x245>
c0016c86:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016c8b:	bb 40 01 00 00       	mov    ebx,0x140
c0016c90:	83 c0 20             	add    eax,0x20
c0016c93:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016c98:	eb 26                	jmp    c0016cc0 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0016c9a:	83 ec 08             	sub    esp,0x8
c0016c9d:	6a 00                	push   0x0
c0016c9f:	53                   	push   ebx
c0016ca0:	83 c3 01             	add    ebx,0x1
c0016ca3:	e8 4d fb ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016ca8:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	83 c0 01             	add    eax,0x1
c0016cb3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016cb9:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016cbe:	74 07                	je     c0016cc7 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016cc0:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016cc5:	7e d3                	jle    c0016c9a <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016cc7:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016ccc:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016cd1:	7f 26                	jg     c0016cf9 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016cd3:	83 ec 08             	sub    esp,0x8
c0016cd6:	6a 00                	push   0x0
c0016cd8:	53                   	push   ebx
c0016cd9:	83 c3 01             	add    ebx,0x1
c0016cdc:	e8 14 fb ff ff       	call   c00167f5 <Phys::setPageState(unsigned long, bool)>
c0016ce1:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016ce6:	83 c4 10             	add    esp,0x10
c0016ce9:	83 c0 01             	add    eax,0x1
c0016cec:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016cf2:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016cf7:	75 d3                	jne    c0016ccc <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016cf9:	83 c4 3c             	add    esp,0x3c
c0016cfc:	5b                   	pop    ebx
c0016cfd:	5e                   	pop    esi
c0016cfe:	5f                   	pop    edi
c0016cff:	5d                   	pop    ebp
c0016d00:	c3                   	ret    
c0016d01:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016d09:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016d11:	e9 3b fe ff ff       	jmp    c0016b51 <Phys::physicalMemorySetup(unsigned int)+0x129>

c0016d16 <Pipe::isAtty()>:
c0016d16:	31 c0                	xor    eax,eax
c0016d18:	c3                   	ret    
c0016d19:	90                   	nop

c0016d1a <Pipe::~Pipe()>:
c0016d1a:	83 ec 0c             	sub    esp,0xc
c0016d1d:	ba 1c 15 03 c0       	mov    edx,0xc003151c
c0016d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d26:	89 10                	mov    DWORD PTR [eax],edx
c0016d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	50                   	push   eax
c0016d30:	e8 6b 11 00 00       	call   c0017ea0 <UnixFile::~UnixFile()>
c0016d35:	83 c4 10             	add    esp,0x10
c0016d38:	90                   	nop
c0016d39:	83 c4 0c             	add    esp,0xc
c0016d3c:	c3                   	ret    
c0016d3d:	90                   	nop

c0016d3e <Pipe::~Pipe()>:
c0016d3e:	83 ec 0c             	sub    esp,0xc
c0016d41:	83 ec 0c             	sub    esp,0xc
c0016d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d48:	e8 cd ff ff ff       	call   c0016d1a <Pipe::~Pipe()>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	83 ec 08             	sub    esp,0x8
c0016d53:	6a 20                	push   0x20
c0016d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d59:	e8 b6 25 00 00       	call   c0019314 <operator delete(void*, unsigned long)>
c0016d5e:	83 c4 10             	add    esp,0x10
c0016d61:	83 c4 0c             	add    esp,0xc
c0016d64:	c3                   	ret    
c0016d65:	90                   	nop

c0016d66 <Pipe::write(unsigned long long, void*, int*)>:
c0016d66:	55                   	push   ebp
c0016d67:	57                   	push   edi
c0016d68:	56                   	push   esi
c0016d69:	53                   	push   ebx
c0016d6a:	83 ec 1c             	sub    esp,0x1c
c0016d6d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d75:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016d78:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016d7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d7f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016d83:	89 d8                	mov    eax,ebx
c0016d85:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016d88:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016d8c:	89 d6                	mov    esi,edx
c0016d8e:	89 d7                	mov    edi,edx
c0016d90:	c1 ff 1f             	sar    edi,0x1f
c0016d93:	03 34 24             	add    esi,DWORD PTR [esp]
c0016d96:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016d9a:	c1 f8 1f             	sar    eax,0x1f
c0016d9d:	39 f3                	cmp    ebx,esi
c0016d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da7:	19 f8                	sbb    eax,edi
c0016da9:	b8 01 00 00 00       	mov    eax,0x1
c0016dae:	72 6e                	jb     c0016e1e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016db0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016db3:	01 d0                	add    eax,edx
c0016db5:	99                   	cdq    
c0016db6:	f7 fb                	idiv   ebx
c0016db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dbc:	29 d3                	sub    ebx,edx
c0016dbe:	89 d7                	mov    edi,edx
c0016dc0:	89 de                	mov    esi,ebx
c0016dc2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016dc5:	c1 fb 1f             	sar    ebx,0x1f
c0016dc8:	39 f2                	cmp    edx,esi
c0016dca:	19 d8                	sbb    eax,ebx
c0016dcc:	b8 00 00 00 00       	mov    eax,0x0
c0016dd1:	72 04                	jb     c0016dd7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016dd3:	89 d0                	mov    eax,edx
c0016dd5:	29 f0                	sub    eax,esi
c0016dd7:	89 d3                	mov    ebx,edx
c0016dd9:	29 c3                	sub    ebx,eax
c0016ddb:	74 0b                	je     c0016de8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016ddd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016de0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016de4:	89 d9                	mov    ecx,ebx
c0016de6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016de8:	85 c0                	test   eax,eax
c0016dea:	74 0d                	je     c0016df9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016dec:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016df0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016df3:	89 de                	mov    esi,ebx
c0016df5:	89 c1                	mov    ecx,eax
c0016df7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016df9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016dfc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016e01:	75 10                	jne    c0016e13 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016e03:	83 ec 0c             	sub    esp,0xc
c0016e06:	68 d9 14 03 c0       	push   0xc00314d9
c0016e0b:	e8 4a 96 00 00       	call   c002045a <KePanic(char const*)>
c0016e10:	83 c4 10             	add    esp,0x10
c0016e13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e17:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e1a:	89 08                	mov    DWORD PTR [eax],ecx
c0016e1c:	31 c0                	xor    eax,eax
c0016e1e:	83 c4 1c             	add    esp,0x1c
c0016e21:	5b                   	pop    ebx
c0016e22:	5e                   	pop    esi
c0016e23:	5f                   	pop    edi
c0016e24:	5d                   	pop    ebp
c0016e25:	c3                   	ret    

c0016e26 <Pipe::read(unsigned long long, void*, int*)>:
c0016e26:	55                   	push   ebp
c0016e27:	57                   	push   edi
c0016e28:	56                   	push   esi
c0016e29:	53                   	push   ebx
c0016e2a:	83 ec 1c             	sub    esp,0x1c
c0016e2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016e31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016e35:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016e39:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016e3c:	89 c8                	mov    eax,ecx
c0016e3e:	99                   	cdq    
c0016e3f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016e43:	74 24                	je     c0016e69 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e45:	39 f9                	cmp    ecx,edi
c0016e47:	89 d1                	mov    ecx,edx
c0016e49:	19 f1                	sbb    ecx,esi
c0016e4b:	73 1c                	jae    c0016e69 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016e4d:	fa                   	cli    
c0016e4e:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016e54:	e8 17 e6 00 00       	call   c0025470 <schedule()>
c0016e59:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016e5e:	48                   	dec    eax
c0016e5f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016e64:	75 d3                	jne    c0016e39 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016e66:	fb                   	sti    
c0016e67:	eb d0                	jmp    c0016e39 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016e69:	39 f8                	cmp    eax,edi
c0016e6b:	89 d1                	mov    ecx,edx
c0016e6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016e74:	19 f1                	sbb    ecx,esi
c0016e76:	73 07                	jae    c0016e7f <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e7b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016e7f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016e82:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016e85:	29 f7                	sub    edi,esi
c0016e87:	89 f8                	mov    eax,edi
c0016e89:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e8d:	99                   	cdq    
c0016e8e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016e91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e95:	19 d0                	sbb    eax,edx
c0016e97:	73 07                	jae    c0016ea0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016e99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016ea3:	89 ea                	mov    edx,ebp
c0016ea5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016ea9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016eae:	74 0d                	je     c0016ebd <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016eb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016eb3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016eb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ebb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ebd:	85 d2                	test   edx,edx
c0016ebf:	74 11                	je     c0016ed2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016ec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ec5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016ec8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ecc:	89 d1                	mov    ecx,edx
c0016ece:	89 c7                	mov    edi,eax
c0016ed0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ed2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016ed5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016ed8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016edb:	99                   	cdq    
c0016edc:	89 f7                	mov    edi,esi
c0016ede:	03 04 24             	add    eax,DWORD PTR [esp]
c0016ee1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016ee5:	c1 ff 1f             	sar    edi,0x1f
c0016ee8:	57                   	push   edi
c0016ee9:	56                   	push   esi
c0016eea:	52                   	push   edx
c0016eeb:	50                   	push   eax
c0016eec:	e8 7f 7a 01 00       	call   c002e970 <__umoddi3>
c0016ef1:	83 c4 10             	add    esp,0x10
c0016ef4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016ef7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016efc:	75 10                	jne    c0016f0e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016efe:	83 ec 0c             	sub    esp,0xc
c0016f01:	68 f6 14 03 c0       	push   0xc00314f6
c0016f06:	e8 4f 95 00 00       	call   c002045a <KePanic(char const*)>
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f12:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016f15:	89 10                	mov    DWORD PTR [eax],edx
c0016f17:	83 c4 1c             	add    esp,0x1c
c0016f1a:	31 c0                	xor    eax,eax
c0016f1c:	5b                   	pop    ebx
c0016f1d:	5e                   	pop    esi
c0016f1e:	5f                   	pop    edi
c0016f1f:	5d                   	pop    ebp
c0016f20:	c3                   	ret    
c0016f21:	90                   	nop

c0016f22 <Pipe::Pipe(int)>:
c0016f22:	83 ec 0c             	sub    esp,0xc
c0016f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f29:	83 ec 08             	sub    esp,0x8
c0016f2c:	6a 00                	push   0x0
c0016f2e:	50                   	push   eax
c0016f2f:	e8 86 0d 00 00       	call   c0017cba <UnixFile::UnixFile(int)>
c0016f34:	83 c4 10             	add    esp,0x10
c0016f37:	ba 1c 15 03 c0       	mov    edx,0xc003151c
c0016f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f40:	89 10                	mov    DWORD PTR [eax],edx
c0016f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016f4a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f51:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f5c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	50                   	push   eax
c0016f6b:	e8 41 f6 ff ff       	call   c00165b1 <malloc>
c0016f70:	83 c4 10             	add    esp,0x10
c0016f73:	89 c2                	mov    edx,eax
c0016f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f79:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f80:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016f84:	90                   	nop
c0016f85:	83 c4 0c             	add    esp,0xc
c0016f88:	c3                   	ret    
c0016f89:	90                   	nop

c0016f8a <VgaText::isAtty()>:
c0016f8a:	b0 01                	mov    al,0x1
c0016f8c:	c3                   	ret    
c0016f8d:	90                   	nop

c0016f8e <VgaText::~VgaText()>:
c0016f8e:	83 ec 0c             	sub    esp,0xc
c0016f91:	ba 64 15 03 c0       	mov    edx,0xc0031564
c0016f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f9a:	89 10                	mov    DWORD PTR [eax],edx
c0016f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	50                   	push   eax
c0016fa4:	e8 f7 0e 00 00       	call   c0017ea0 <UnixFile::~UnixFile()>
c0016fa9:	83 c4 10             	add    esp,0x10
c0016fac:	90                   	nop
c0016fad:	83 c4 0c             	add    esp,0xc
c0016fb0:	c3                   	ret    
c0016fb1:	90                   	nop

c0016fb2 <VgaText::~VgaText()>:
c0016fb2:	83 ec 0c             	sub    esp,0xc
c0016fb5:	83 ec 0c             	sub    esp,0xc
c0016fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fbc:	e8 cd ff ff ff       	call   c0016f8e <VgaText::~VgaText()>
c0016fc1:	83 c4 10             	add    esp,0x10
c0016fc4:	83 ec 08             	sub    esp,0x8
c0016fc7:	68 84 01 00 00       	push   0x184
c0016fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fd0:	e8 3f 23 00 00       	call   c0019314 <operator delete(void*, unsigned long)>
c0016fd5:	83 c4 10             	add    esp,0x10
c0016fd8:	83 c4 0c             	add    esp,0xc
c0016fdb:	c3                   	ret    

c0016fdc <VgaText::read(unsigned long long, void*, int*)>:
c0016fdc:	83 ec 10             	sub    esp,0x10
c0016fdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fe3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016fe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016feb:	e8 bc 53 00 00       	call   c001c3ac <readKeyboard(VgaText*, char*, unsigned long)>
c0016ff0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ff4:	89 02                	mov    DWORD PTR [edx],eax
c0016ff6:	31 c0                	xor    eax,eax
c0016ff8:	83 c4 1c             	add    esp,0x1c
c0016ffb:	c3                   	ret    

c0016ffc <setTerminalScrollLock(bool)>:
c0016ffc:	c3                   	ret    

c0016ffd <doTerminalCycle()>:
c0016ffd:	c3                   	ret    

c0016ffe <addToTerminalCycle(VgaText*)>:
c0016ffe:	c3                   	ret    

c0016fff <scrollTerminalScrollLock(int)>:
c0016fff:	c3                   	ret    

c0017000 <VgaText::updateTitle()>:
c0017000:	c3                   	ret    
c0017001:	90                   	nop

c0017002 <VgaText::load()>:
c0017002:	c3                   	ret    
c0017003:	90                   	nop

c0017004 <VgaText::updateCursor()>:
c0017004:	83 ec 14             	sub    esp,0x14
c0017007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001700b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001700e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017011:	e8 66 0f 01 00       	call   c0027f7c <HalConsoleCursorUpdate(int, int)>
c0017016:	83 c4 1c             	add    esp,0x1c
c0017019:	c3                   	ret    

c001701a <VgaText::doANSI_SGR(int)>:
c001701a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001701e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017022:	85 d2                	test   edx,edx
c0017024:	75 0b                	jne    c0017031 <VgaText::doANSI_SGR(int)+0x17>
c0017026:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0017029:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001702c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001702f:	eb 59                	jmp    c001708a <VgaText::doANSI_SGR(int)+0x70>
c0017031:	83 fa 07             	cmp    edx,0x7
c0017034:	75 0b                	jne    c0017041 <VgaText::doANSI_SGR(int)+0x27>
c0017036:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0017039:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001703c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001703f:	eb 49                	jmp    c001708a <VgaText::doANSI_SGR(int)+0x70>
c0017041:	83 fa 1b             	cmp    edx,0x1b
c0017044:	74 e0                	je     c0017026 <VgaText::doANSI_SGR(int)+0xc>
c0017046:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0017049:	83 f9 07             	cmp    ecx,0x7
c001704c:	77 09                	ja     c0017057 <VgaText::doANSI_SGR(int)+0x3d>
c001704e:	8b 14 8d 60 3e 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc1a0]
c0017055:	eb 20                	jmp    c0017077 <VgaText::doANSI_SGR(int)+0x5d>
c0017057:	8d 4a d8             	lea    ecx,[edx-0x28]
c001705a:	83 f9 07             	cmp    ecx,0x7
c001705d:	77 09                	ja     c0017068 <VgaText::doANSI_SGR(int)+0x4e>
c001705f:	8b 14 8d 60 3e 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc1a0]
c0017066:	eb 22                	jmp    c001708a <VgaText::doANSI_SGR(int)+0x70>
c0017068:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001706b:	83 f9 07             	cmp    ecx,0x7
c001706e:	77 0b                	ja     c001707b <VgaText::doANSI_SGR(int)+0x61>
c0017070:	8b 14 95 18 3d 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc2e8]
c0017077:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001707a:	c3                   	ret    
c001707b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001707e:	83 f9 07             	cmp    ecx,0x7
c0017081:	77 0a                	ja     c001708d <VgaText::doANSI_SGR(int)+0x73>
c0017083:	8b 14 95 f0 3c 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc310]
c001708a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001708d:	c3                   	ret    

c001708e <VgaText::setDefaultBgColour(VgaColour)>:
c001708e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017092:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017096:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017099:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001709c:	c3                   	ret    
c001709d:	90                   	nop

c001709e <VgaText::setDefaultFgColour(VgaColour)>:
c001709e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170a6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00170a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00170ac:	c3                   	ret    
c00170ad:	90                   	nop

c00170ae <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00170ae:	53                   	push   ebx
c00170af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00170b7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170bb:	51                   	push   ecx
c00170bc:	e8 cd ff ff ff       	call   c001708e <VgaText::setDefaultBgColour(VgaColour)>
c00170c1:	58                   	pop    eax
c00170c2:	5a                   	pop    edx
c00170c3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00170cb:	5b                   	pop    ebx
c00170cc:	eb d0                	jmp    c001709e <VgaText::setDefaultFgColour(VgaColour)>

c00170ce <VgaText::setTitleTextColour(VgaColour)>:
c00170ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170d6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00170d9:	c3                   	ret    

c00170da <VgaText::setTitleColour(VgaColour)>:
c00170da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00170e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00170e5:	c3                   	ret    

c00170e6 <VgaText::setTitle(char*)>:
c00170e6:	c3                   	ret    
c00170e7:	90                   	nop

c00170e8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00170e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00170f1:	83 e0 0f             	and    eax,0xf
c00170f4:	c1 e2 04             	shl    edx,0x4
c00170f7:	09 d0                	or     eax,edx
c00170f9:	c3                   	ret    

c00170fa <VgaText::scrollScreen()>:
c00170fa:	55                   	push   ebp
c00170fb:	57                   	push   edi
c00170fc:	56                   	push   esi
c00170fd:	be 01 00 00 00       	mov    esi,0x1
c0017102:	53                   	push   ebx
c0017103:	83 ec 0c             	sub    esp,0xc
c0017106:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001710a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001710d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0017113:	31 ff                	xor    edi,edi
c0017115:	01 e9                	add    ecx,ebp
c0017117:	8a 01                	mov    al,BYTE PTR [ecx]
c0017119:	83 fe 18             	cmp    esi,0x18
c001711c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017122:	75 20                	jne    c0017144 <VgaText::scrollScreen()+0x4a>
c0017124:	f7 c7 01 00 00 00    	test   edi,0x1
c001712a:	74 15                	je     c0017141 <VgaText::scrollScreen()+0x47>
c001712c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017130:	50                   	push   eax
c0017131:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017135:	50                   	push   eax
c0017136:	e8 ad ff ff ff       	call   c00170e8 <VgaText::combineColours(unsigned char, unsigned char)>
c001713b:	5a                   	pop    edx
c001713c:	5a                   	pop    edx
c001713d:	88 01                	mov    BYTE PTR [ecx],al
c001713f:	eb 03                	jmp    c0017144 <VgaText::scrollScreen()+0x4a>
c0017141:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0017144:	47                   	inc    edi
c0017145:	41                   	inc    ecx
c0017146:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001714c:	75 c9                	jne    c0017117 <VgaText::scrollScreen()+0x1d>
c001714e:	46                   	inc    esi
c001714f:	83 fe 19             	cmp    esi,0x19
c0017152:	75 b9                	jne    c001710d <VgaText::scrollScreen()+0x13>
c0017154:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001715a:	75 1f                	jne    c001717b <VgaText::scrollScreen()+0x81>
c001715c:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017160:	74 05                	je     c0017167 <VgaText::scrollScreen()+0x6d>
c0017162:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0017165:	eb 14                	jmp    c001717b <VgaText::scrollScreen()+0x81>
c0017167:	50                   	push   eax
c0017168:	50                   	push   eax
c0017169:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001716d:	50                   	push   eax
c001716e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017172:	50                   	push   eax
c0017173:	e8 98 0c 01 00       	call   c0027e10 <HalConsoleScroll(int, int)>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001717f:	83 c4 0c             	add    esp,0xc
c0017182:	5b                   	pop    ebx
c0017183:	5e                   	pop    esi
c0017184:	5f                   	pop    edi
c0017185:	5d                   	pop    ebp
c0017186:	e9 79 fe ff ff       	jmp    c0017004 <VgaText::updateCursor()>
c001718b:	90                   	nop

c001718c <VgaText::combineCharAndColour(char, unsigned char)>:
c001718c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017191:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0017196:	c1 e0 08             	shl    eax,0x8
c0017199:	09 d0                	or     eax,edx
c001719b:	c3                   	ret    

c001719c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001719c:	55                   	push   ebp
c001719d:	57                   	push   edi
c001719e:	56                   	push   esi
c001719f:	53                   	push   ebx
c00171a0:	83 ec 1c             	sub    esp,0x1c
c00171a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00171a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00171ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00171af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171b7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171bb:	0f b6 c3             	movzx  eax,bl
c00171be:	50                   	push   eax
c00171bf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00171c4:	50                   	push   eax
c00171c5:	e8 1e ff ff ff       	call   c00170e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00171ca:	5a                   	pop    edx
c00171cb:	0f b6 c0             	movzx  eax,al
c00171ce:	59                   	pop    ecx
c00171cf:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00171d4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00171d8:	50                   	push   eax
c00171d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00171dd:	e8 aa ff ff ff       	call   c001718c <VgaText::combineCharAndColour(char, unsigned char)>
c00171e2:	5a                   	pop    edx
c00171e3:	6b d7 50             	imul   edx,edi,0x50
c00171e6:	59                   	pop    ecx
c00171e7:	01 f2                	add    edx,esi
c00171e9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00171ec:	0f b7 d2             	movzx  edx,dx
c00171ef:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00171f3:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00171f9:	75 28                	jne    c0017223 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00171fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171ff:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0017203:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017207:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c001720b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001720f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017213:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017217:	83 c4 1c             	add    esp,0x1c
c001721a:	5b                   	pop    ebx
c001721b:	5e                   	pop    esi
c001721c:	5f                   	pop    edi
c001721d:	5d                   	pop    ebp
c001721e:	e9 f5 0c 01 00       	jmp    c0027f18 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017223:	83 c4 1c             	add    esp,0x1c
c0017226:	5b                   	pop    ebx
c0017227:	5e                   	pop    esi
c0017228:	5f                   	pop    edi
c0017229:	5d                   	pop    ebp
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <VgaText::getCursorX()>:
c001722c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017230:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017233:	c3                   	ret    

c0017234 <VgaText::getCursorY()>:
c0017234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017238:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001723b:	c3                   	ret    

c001723c <VgaText::setCursor(int, int)>:
c001723c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017240:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017244:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017247:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001724b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001724e:	e9 b1 fd ff ff       	jmp    c0017004 <VgaText::updateCursor()>

c0017253 <setActiveTerminal(VgaText*)>:
c0017253:	53                   	push   ebx
c0017254:	83 ec 08             	sub    esp,0x8
c0017257:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001725b:	85 db                	test   ebx,ebx
c001725d:	75 11                	jne    c0017270 <setActiveTerminal(VgaText*)+0x1d>
c001725f:	c7 44 24 10 30 15 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031530
c0017267:	83 c4 08             	add    esp,0x8
c001726a:	5b                   	pop    ebx
c001726b:	e9 ea 91 00 00       	jmp    c002045a <KePanic(char const*)>
c0017270:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017275:	85 c0                	test   eax,eax
c0017277:	74 0c                	je     c0017285 <setActiveTerminal(VgaText*)+0x32>
c0017279:	83 ec 0c             	sub    esp,0xc
c001727c:	50                   	push   eax
c001727d:	e8 82 fd ff ff       	call   c0017004 <VgaText::updateCursor()>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c001728b:	50                   	push   eax
c001728c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001728f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017292:	53                   	push   ebx
c0017293:	e8 a4 ff ff ff       	call   c001723c <VgaText::setCursor(int, int)>
c0017298:	83 c4 18             	add    esp,0x18
c001729b:	5b                   	pop    ebx
c001729c:	c3                   	ret    
c001729d:	90                   	nop

c001729e <VgaText::clearScreen()>:
c001729e:	57                   	push   edi
c001729f:	56                   	push   esi
c00172a0:	31 f6                	xor    esi,esi
c00172a2:	53                   	push   ebx
c00172a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172a7:	52                   	push   edx
c00172a8:	6a 00                	push   0x0
c00172aa:	6a 00                	push   0x0
c00172ac:	53                   	push   ebx
c00172ad:	e8 8a ff ff ff       	call   c001723c <VgaText::setCursor(int, int)>
c00172b2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00172b9:	83 c4 10             	add    esp,0x10
c00172bc:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00172bf:	7e 20                	jle    c00172e1 <VgaText::clearScreen()+0x43>
c00172c1:	31 ff                	xor    edi,edi
c00172c3:	50                   	push   eax
c00172c4:	50                   	push   eax
c00172c5:	56                   	push   esi
c00172c6:	57                   	push   edi
c00172c7:	47                   	inc    edi
c00172c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00172cb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00172ce:	6a 20                	push   0x20
c00172d0:	53                   	push   ebx
c00172d1:	e8 c6 fe ff ff       	call   c001719c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00172d6:	83 c4 20             	add    esp,0x20
c00172d9:	83 ff 50             	cmp    edi,0x50
c00172dc:	75 e5                	jne    c00172c3 <VgaText::clearScreen()+0x25>
c00172de:	46                   	inc    esi
c00172df:	eb db                	jmp    c00172bc <VgaText::clearScreen()+0x1e>
c00172e1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00172e8:	5b                   	pop    ebx
c00172e9:	5e                   	pop    esi
c00172ea:	5f                   	pop    edi
c00172eb:	c3                   	ret    

c00172ec <VgaText::setCursorX(int)>:
c00172ec:	83 ec 10             	sub    esp,0x10
c00172ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172f3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00172f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172fa:	50                   	push   eax
c00172fb:	e8 3c ff ff ff       	call   c001723c <VgaText::setCursor(int, int)>
c0017300:	83 c4 1c             	add    esp,0x1c
c0017303:	c3                   	ret    

c0017304 <VgaText::setCursorY(int)>:
c0017304:	83 ec 10             	sub    esp,0x10
c0017307:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001730b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001730f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017312:	50                   	push   eax
c0017313:	e8 24 ff ff ff       	call   c001723c <VgaText::setCursor(int, int)>
c0017318:	83 c4 1c             	add    esp,0x1c
c001731b:	c3                   	ret    

c001731c <VgaText::incrementCursor(bool)>:
c001731c:	56                   	push   esi
c001731d:	53                   	push   ebx
c001731e:	51                   	push   ecx
c001731f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017323:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017327:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001732a:	40                   	inc    eax
c001732b:	83 f8 50             	cmp    eax,0x50
c001732e:	74 05                	je     c0017335 <VgaText::incrementCursor(bool)+0x19>
c0017330:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017333:	eb 24                	jmp    c0017359 <VgaText::incrementCursor(bool)+0x3d>
c0017335:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017338:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001733f:	8d 50 01             	lea    edx,[eax+0x1]
c0017342:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017345:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017348:	75 0f                	jne    c0017359 <VgaText::incrementCursor(bool)+0x3d>
c001734a:	83 ec 0c             	sub    esp,0xc
c001734d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017350:	53                   	push   ebx
c0017351:	e8 a4 fd ff ff       	call   c00170fa <VgaText::scrollScreen()>
c0017356:	83 c4 10             	add    esp,0x10
c0017359:	89 f0                	mov    eax,esi
c001735b:	84 c0                	test   al,al
c001735d:	74 0c                	je     c001736b <VgaText::incrementCursor(bool)+0x4f>
c001735f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017363:	5a                   	pop    edx
c0017364:	5b                   	pop    ebx
c0017365:	5e                   	pop    esi
c0017366:	e9 99 fc ff ff       	jmp    c0017004 <VgaText::updateCursor()>
c001736b:	58                   	pop    eax
c001736c:	5b                   	pop    ebx
c001736d:	5e                   	pop    esi
c001736e:	c3                   	ret    
c001736f:	90                   	nop

c0017370 <VgaText::decrementCursor(bool)>:
c0017370:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017374:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017378:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001737b:	85 c0                	test   eax,eax
c001737d:	74 04                	je     c0017383 <VgaText::decrementCursor(bool)+0x13>
c001737f:	48                   	dec    eax
c0017380:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017383:	84 c9                	test   cl,cl
c0017385:	74 09                	je     c0017390 <VgaText::decrementCursor(bool)+0x20>
c0017387:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001738b:	e9 74 fc ff ff       	jmp    c0017004 <VgaText::updateCursor()>
c0017390:	c3                   	ret    
c0017391:	90                   	nop

c0017392 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017392:	53                   	push   ebx
c0017393:	83 ec 08             	sub    esp,0x8
c0017396:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001739f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00173a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00173a7:	83 f8 07             	cmp    eax,0x7
c00173aa:	75 21                	jne    c00173cd <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00173ac:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00173b4:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00173bc:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00173c4:	83 c4 08             	add    esp,0x8
c00173c7:	5b                   	pop    ebx
c00173c8:	e9 1a 3b 00 00       	jmp    c001aee7 <Krnl::beep(int, int, bool)>
c00173cd:	83 f8 0d             	cmp    eax,0xd
c00173d0:	75 09                	jne    c00173db <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00173d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173d9:	eb 2d                	jmp    c0017408 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00173db:	83 f8 0a             	cmp    eax,0xa
c00173de:	75 31                	jne    c0017411 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00173e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173e3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173ea:	8d 50 01             	lea    edx,[eax+0x1]
c00173ed:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00173f0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00173f3:	75 0f                	jne    c0017404 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00173f5:	83 ec 0c             	sub    esp,0xc
c00173f8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00173fb:	53                   	push   ebx
c00173fc:	e8 f9 fc ff ff       	call   c00170fa <VgaText::scrollScreen()>
c0017401:	83 c4 10             	add    esp,0x10
c0017404:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017408:	83 c4 08             	add    esp,0x8
c001740b:	5b                   	pop    ebx
c001740c:	e9 f3 fb ff ff       	jmp    c0017004 <VgaText::updateCursor()>
c0017411:	83 f8 08             	cmp    eax,0x8
c0017414:	75 25                	jne    c001743b <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017416:	50                   	push   eax
c0017417:	50                   	push   eax
c0017418:	6a 01                	push   0x1
c001741a:	53                   	push   ebx
c001741b:	e8 50 ff ff ff       	call   c0017370 <VgaText::decrementCursor(bool)>
c0017420:	5a                   	pop    edx
c0017421:	59                   	pop    ecx
c0017422:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017425:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017428:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001742b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001742e:	6a 20                	push   0x20
c0017430:	53                   	push   ebx
c0017431:	e8 66 fd ff ff       	call   c001719c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017436:	83 c4 28             	add    esp,0x28
c0017439:	5b                   	pop    ebx
c001743a:	c3                   	ret    
c001743b:	83 ec 08             	sub    esp,0x8
c001743e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017441:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017444:	51                   	push   ecx
c0017445:	52                   	push   edx
c0017446:	50                   	push   eax
c0017447:	53                   	push   ebx
c0017448:	e8 4f fd ff ff       	call   c001719c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001744d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017451:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017459:	83 c4 28             	add    esp,0x28
c001745c:	5b                   	pop    ebx
c001745d:	e9 ba fe ff ff       	jmp    c001731c <VgaText::incrementCursor(bool)>

c0017462 <VgaText::putchar(char)>:
c0017462:	57                   	push   edi
c0017463:	56                   	push   esi
c0017464:	53                   	push   ebx
c0017465:	83 ec 10             	sub    esp,0x10
c0017468:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001746c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017470:	89 f8                	mov    eax,edi
c0017472:	0f be c0             	movsx  eax,al
c0017475:	83 f8 5b             	cmp    eax,0x5b
c0017478:	75 18                	jne    c0017492 <VgaText::putchar(char)+0x30>
c001747a:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001747e:	74 20                	je     c00174a0 <VgaText::putchar(char)+0x3e>
c0017480:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017486:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001748d:	e9 c1 00 00 00       	jmp    c0017553 <VgaText::putchar(char)+0xf1>
c0017492:	83 f8 1b             	cmp    eax,0x1b
c0017495:	75 09                	jne    c00174a0 <VgaText::putchar(char)+0x3e>
c0017497:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001749b:	e9 b3 00 00 00       	jmp    c0017553 <VgaText::putchar(char)+0xf1>
c00174a0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00174a3:	84 c9                	test   cl,cl
c00174a5:	0f 84 98 00 00 00    	je     c0017543 <VgaText::putchar(char)+0xe1>
c00174ab:	8d 77 c0             	lea    esi,[edi-0x40]
c00174ae:	89 f2                	mov    edx,esi
c00174b0:	80 fa 3e             	cmp    dl,0x3e
c00174b3:	77 78                	ja     c001752d <VgaText::putchar(char)+0xcb>
c00174b5:	83 f8 6d             	cmp    eax,0x6d
c00174b8:	75 47                	jne    c0017501 <VgaText::putchar(char)+0x9f>
c00174ba:	31 f6                	xor    esi,esi
c00174bc:	31 d2                	xor    edx,edx
c00174be:	31 c0                	xor    eax,eax
c00174c0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00174c3:	7e 2d                	jle    c00174f2 <VgaText::putchar(char)+0x90>
c00174c5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00174ca:	83 fa 3b             	cmp    edx,0x3b
c00174cd:	75 17                	jne    c00174e6 <VgaText::putchar(char)+0x84>
c00174cf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00174d3:	50                   	push   eax
c00174d4:	53                   	push   ebx
c00174d5:	e8 40 fb ff ff       	call   c001701a <VgaText::doANSI_SGR(int)>
c00174da:	59                   	pop    ecx
c00174db:	31 d2                	xor    edx,edx
c00174dd:	5f                   	pop    edi
c00174de:	31 c0                	xor    eax,eax
c00174e0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00174e4:	eb 09                	jmp    c00174ef <VgaText::putchar(char)+0x8d>
c00174e6:	6b c0 0a             	imul   eax,eax,0xa
c00174e9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00174ed:	88 ca                	mov    dl,cl
c00174ef:	46                   	inc    esi
c00174f0:	eb ce                	jmp    c00174c0 <VgaText::putchar(char)+0x5e>
c00174f2:	84 d2                	test   dl,dl
c00174f4:	74 2f                	je     c0017525 <VgaText::putchar(char)+0xc3>
c00174f6:	50                   	push   eax
c00174f7:	53                   	push   ebx
c00174f8:	e8 1d fb ff ff       	call   c001701a <VgaText::doANSI_SGR(int)>
c00174fd:	58                   	pop    eax
c00174fe:	5a                   	pop    edx
c00174ff:	eb 24                	jmp    c0017525 <VgaText::putchar(char)+0xc3>
c0017501:	83 f8 4a             	cmp    eax,0x4a
c0017504:	75 1f                	jne    c0017525 <VgaText::putchar(char)+0xc3>
c0017506:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001750a:	75 19                	jne    c0017525 <VgaText::putchar(char)+0xc3>
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	53                   	push   ebx
c0017510:	e8 89 fd ff ff       	call   c001729e <VgaText::clearScreen()>
c0017515:	83 c4 0c             	add    esp,0xc
c0017518:	6a 00                	push   0x0
c001751a:	6a 00                	push   0x0
c001751c:	53                   	push   ebx
c001751d:	e8 1a fd ff ff       	call   c001723c <VgaText::setCursor(int, int)>
c0017522:	83 c4 10             	add    esp,0x10
c0017525:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001752b:	eb 26                	jmp    c0017553 <VgaText::putchar(char)+0xf1>
c001752d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017530:	83 f8 0e             	cmp    eax,0xe
c0017533:	7f 1e                	jg     c0017553 <VgaText::putchar(char)+0xf1>
c0017535:	8d 48 01             	lea    ecx,[eax+0x1]
c0017538:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001753b:	89 f9                	mov    ecx,edi
c001753d:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0017541:	eb 10                	jmp    c0017553 <VgaText::putchar(char)+0xf1>
c0017543:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017546:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017549:	50                   	push   eax
c001754a:	53                   	push   ebx
c001754b:	e8 42 fe ff ff       	call   c0017392 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017550:	83 c4 10             	add    esp,0x10
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	5b                   	pop    ebx
c0017557:	5e                   	pop    esi
c0017558:	5f                   	pop    edi
c0017559:	c3                   	ret    

c001755a <VgaText::putx(unsigned int)>:
c001755a:	57                   	push   edi
c001755b:	b9 11 00 00 00       	mov    ecx,0x11
c0017560:	56                   	push   esi
c0017561:	be 3e 15 03 c0       	mov    esi,0xc003153e
c0017566:	53                   	push   ebx
c0017567:	83 ec 20             	sub    esp,0x20
c001756a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001756e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017572:	fc                   	cld    
c0017573:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017575:	be 08 00 00 00       	mov    esi,0x8
c001757a:	50                   	push   eax
c001757b:	50                   	push   eax
c001757c:	89 d8                	mov    eax,ebx
c001757e:	c1 e3 04             	shl    ebx,0x4
c0017581:	c1 e8 1c             	shr    eax,0x1c
c0017584:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0017589:	50                   	push   eax
c001758a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001758e:	e8 cf fe ff ff       	call   c0017462 <VgaText::putchar(char)>
c0017593:	83 c4 10             	add    esp,0x10
c0017596:	4e                   	dec    esi
c0017597:	75 e1                	jne    c001757a <VgaText::putx(unsigned int)+0x20>
c0017599:	83 c4 20             	add    esp,0x20
c001759c:	5b                   	pop    ebx
c001759d:	5e                   	pop    esi
c001759e:	5f                   	pop    edi
c001759f:	c3                   	ret    

c00175a0 <VgaText::puts(char const*)>:
c00175a0:	53                   	push   ebx
c00175a1:	83 ec 08             	sub    esp,0x8
c00175a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175a8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175ab:	85 c0                	test   eax,eax
c00175ad:	74 12                	je     c00175c1 <VgaText::puts(char const*)+0x21>
c00175af:	43                   	inc    ebx
c00175b0:	51                   	push   ecx
c00175b1:	51                   	push   ecx
c00175b2:	50                   	push   eax
c00175b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b7:	e8 a6 fe ff ff       	call   c0017462 <VgaText::putchar(char)>
c00175bc:	83 c4 10             	add    esp,0x10
c00175bf:	eb e7                	jmp    c00175a8 <VgaText::puts(char const*)+0x8>
c00175c1:	83 c4 08             	add    esp,0x8
c00175c4:	5b                   	pop    ebx
c00175c5:	c3                   	ret    

c00175c6 <VgaText::write(unsigned long long, void*, int*)>:
c00175c6:	55                   	push   ebp
c00175c7:	57                   	push   edi
c00175c8:	56                   	push   esi
c00175c9:	53                   	push   ebx
c00175ca:	83 ec 0c             	sub    esp,0xc
c00175cd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00175d1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00175d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00175d9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00175e0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00175e3:	39 eb                	cmp    ebx,ebp
c00175e5:	74 13                	je     c00175fa <VgaText::write(unsigned long long, void*, int*)+0x34>
c00175e7:	43                   	inc    ebx
c00175e8:	50                   	push   eax
c00175e9:	50                   	push   eax
c00175ea:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00175ee:	50                   	push   eax
c00175ef:	56                   	push   esi
c00175f0:	e8 6d fe ff ff       	call   c0017462 <VgaText::putchar(char)>
c00175f5:	83 c4 10             	add    esp,0x10
c00175f8:	eb e9                	jmp    c00175e3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00175fa:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0017601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017605:	89 38                	mov    DWORD PTR [eax],edi
c0017607:	83 c4 0c             	add    esp,0xc
c001760a:	31 c0                	xor    eax,eax
c001760c:	5b                   	pop    ebx
c001760d:	5e                   	pop    esi
c001760e:	5f                   	pop    edi
c001760f:	5d                   	pop    ebp
c0017610:	c3                   	ret    
c0017611:	90                   	nop

c0017612 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017612:	55                   	push   ebp
c0017613:	57                   	push   edi
c0017614:	56                   	push   esi
c0017615:	53                   	push   ebx
c0017616:	83 ec 0c             	sub    esp,0xc
c0017619:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001761d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017622:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017629:	50                   	push   eax
c001762a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001762f:	50                   	push   eax
c0017630:	e8 b3 fa ff ff       	call   c00170e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0017635:	5a                   	pop    edx
c0017636:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001763a:	59                   	pop    ecx
c001763b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001763e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017642:	0f b7 f6             	movzx  esi,si
c0017645:	0f b6 e8             	movzx  ebp,al
c0017648:	01 f6                	add    esi,esi
c001764a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001764d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017650:	85 c0                	test   eax,eax
c0017652:	0f 84 ef 00 00 00    	je     c0017747 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017658:	83 f8 0d             	cmp    eax,0xd
c001765b:	75 0c                	jne    c0017669 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001765d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017664:	e9 d8 00 00 00       	jmp    c0017741 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017669:	83 f8 0a             	cmp    eax,0xa
c001766c:	75 44                	jne    c00176b2 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001766e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017671:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017678:	8d 48 01             	lea    ecx,[eax+0x1]
c001767b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001767e:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0017681:	75 0f                	jne    c0017692 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017683:	83 ec 0c             	sub    esp,0xc
c0017686:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017689:	53                   	push   ebx
c001768a:	e8 6b fa ff ff       	call   c00170fa <VgaText::scrollScreen()>
c001768f:	83 c4 10             	add    esp,0x10
c0017692:	83 ec 0c             	sub    esp,0xc
c0017695:	53                   	push   ebx
c0017696:	e8 69 f9 ff ff       	call   c0017004 <VgaText::updateCursor()>
c001769b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001769f:	83 c4 10             	add    esp,0x10
c00176a2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176a5:	0f b7 f6             	movzx  esi,si
c00176a8:	01 f6                	add    esi,esi
c00176aa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176ad:	e9 8f 00 00 00       	jmp    c0017741 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176b2:	83 f8 08             	cmp    eax,0x8
c00176b5:	75 34                	jne    c00176eb <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00176b7:	51                   	push   ecx
c00176b8:	51                   	push   ecx
c00176b9:	6a 01                	push   0x1
c00176bb:	53                   	push   ebx
c00176bc:	e8 af fc ff ff       	call   c0017370 <VgaText::decrementCursor(bool)>
c00176c1:	5e                   	pop    esi
c00176c2:	58                   	pop    eax
c00176c3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00176c6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00176c9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176cc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176cf:	6a 20                	push   0x20
c00176d1:	53                   	push   ebx
c00176d2:	e8 c5 fa ff ff       	call   c001719c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00176d7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00176db:	83 c4 20             	add    esp,0x20
c00176de:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00176e1:	0f b7 f6             	movzx  esi,si
c00176e4:	01 f6                	add    esi,esi
c00176e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00176e9:	eb 56                	jmp    c0017741 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00176eb:	52                   	push   edx
c00176ec:	52                   	push   edx
c00176ed:	55                   	push   ebp
c00176ee:	50                   	push   eax
c00176ef:	e8 98 fa ff ff       	call   c001718c <VgaText::combineCharAndColour(char, unsigned char)>
c00176f4:	83 c4 10             	add    esp,0x10
c00176f7:	66 89 06             	mov    WORD PTR [esi],ax
c00176fa:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0017700:	75 1d                	jne    c001771f <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017702:	83 ec 0c             	sub    esp,0xc
c0017705:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017708:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001770b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001770f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017713:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017716:	50                   	push   eax
c0017717:	e8 fc 07 01 00       	call   c0027f18 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001771c:	83 c4 20             	add    esp,0x20
c001771f:	83 c6 02             	add    esi,0x2
c0017722:	50                   	push   eax
c0017723:	50                   	push   eax
c0017724:	6a 00                	push   0x0
c0017726:	53                   	push   ebx
c0017727:	e8 f0 fb ff ff       	call   c001731c <VgaText::incrementCursor(bool)>
c001772c:	83 c4 10             	add    esp,0x10
c001772f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017733:	75 0c                	jne    c0017741 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017735:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017739:	0f b7 f6             	movzx  esi,si
c001773c:	01 f6                	add    esi,esi
c001773e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017741:	47                   	inc    edi
c0017742:	e9 06 ff ff ff       	jmp    c001764d <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017747:	83 ec 0c             	sub    esp,0xc
c001774a:	53                   	push   ebx
c001774b:	e8 b4 f8 ff ff       	call   c0017004 <VgaText::updateCursor()>
c0017750:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017757:	83 c4 1c             	add    esp,0x1c
c001775a:	5b                   	pop    ebx
c001775b:	5e                   	pop    esi
c001775c:	5f                   	pop    edi
c001775d:	5d                   	pop    ebp
c001775e:	c3                   	ret    
c001775f:	90                   	nop

c0017760 <VgaText::VgaText(char const*)>:
c0017760:	56                   	push   esi
c0017761:	53                   	push   ebx
c0017762:	83 ec 04             	sub    esp,0x4
c0017765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017769:	83 ec 08             	sub    esp,0x8
c001776c:	6a 00                	push   0x0
c001776e:	50                   	push   eax
c001776f:	e8 46 05 00 00       	call   c0017cba <UnixFile::UnixFile(int)>
c0017774:	83 c4 10             	add    esp,0x10
c0017777:	ba 64 15 03 c0       	mov    edx,0xc0031564
c001777c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017780:	89 10                	mov    DWORD PTR [eax],edx
c0017782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017786:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017791:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0017798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001779c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00177a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00177a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177ac:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00177b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00177be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177c2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00177c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177cd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00177d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177d8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00177df:	83 ec 0c             	sub    esp,0xc
c00177e2:	6a 01                	push   0x1
c00177e4:	e8 20 09 00 00       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c00177e9:	83 c4 10             	add    esp,0x10
c00177ec:	89 c2                	mov    edx,eax
c00177ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177f2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00177f5:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00177fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017802:	89 c6                	mov    esi,eax
c0017804:	e8 b1 f0 ff ff       	call   c00168ba <Phys::allocatePage()>
c0017809:	68 05 0c 00 00       	push   0xc05
c001780e:	56                   	push   esi
c001780f:	50                   	push   eax
c0017810:	53                   	push   ebx
c0017811:	e8 06 10 00 00       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001781d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017820:	83 ec 04             	sub    esp,0x4
c0017823:	68 a0 0f 00 00       	push   0xfa0
c0017828:	6a 00                	push   0x0
c001782a:	50                   	push   eax
c001782b:	e8 c0 8c fe ff       	call   c00004f0 <memset>
c0017830:	83 c4 10             	add    esp,0x10
c0017833:	83 ec 04             	sub    esp,0x4
c0017836:	6a 00                	push   0x0
c0017838:	6a 07                	push   0x7
c001783a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001783e:	e8 6b f8 ff ff       	call   c00170ae <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	83 ec 04             	sub    esp,0x4
c0017849:	6a 00                	push   0x0
c001784b:	6a 00                	push   0x0
c001784d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017851:	e8 e6 f9 ff ff       	call   c001723c <VgaText::setCursor(int, int)>
c0017856:	83 c4 10             	add    esp,0x10
c0017859:	83 ec 0c             	sub    esp,0xc
c001785c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017860:	e8 39 fa ff ff       	call   c001729e <VgaText::clearScreen()>
c0017865:	83 c4 10             	add    esp,0x10
c0017868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001786c:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017874:	05 82 00 00 00       	add    eax,0x82
c0017879:	83 ec 04             	sub    esp,0x4
c001787c:	68 80 00 00 00       	push   0x80
c0017881:	6a 00                	push   0x0
c0017883:	50                   	push   eax
c0017884:	e8 67 8c fe ff       	call   c00004f0 <memset>
c0017889:	83 c4 10             	add    esp,0x10
c001788c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017890:	05 02 01 00 00       	add    eax,0x102
c0017895:	83 ec 04             	sub    esp,0x4
c0017898:	68 80 00 00 00       	push   0x80
c001789d:	6a 00                	push   0x0
c001789f:	50                   	push   eax
c00178a0:	e8 4b 8c fe ff       	call   c00004f0 <memset>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	90                   	nop
c00178a9:	83 c4 04             	add    esp,0x4
c00178ac:	5b                   	pop    ebx
c00178ad:	5e                   	pop    esi
c00178ae:	c3                   	ret    
c00178af:	90                   	nop

c00178b0 <VgaText::receiveKey(unsigned char)>:
c00178b0:	55                   	push   ebp
c00178b1:	57                   	push   edi
c00178b2:	56                   	push   esi
c00178b3:	53                   	push   ebx
c00178b4:	83 ec 2c             	sub    esp,0x2c
c00178b7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00178bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00178bf:	89 ef                	mov    edi,ebp
c00178c1:	81 e7 ff 00 00 00    	and    edi,0xff
c00178c7:	0f 84 66 01 00 00    	je     c0017a33 <VgaText::receiveKey(unsigned char)+0x183>
c00178cd:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00178d3:	83 ff 08             	cmp    edi,0x8
c00178d6:	75 73                	jne    c001794b <VgaText::receiveKey(unsigned char)+0x9b>
c00178d8:	83 ec 0c             	sub    esp,0xc
c00178db:	56                   	push   esi
c00178dc:	e8 8f 8c fe ff       	call   c0000570 <strlen>
c00178e1:	83 c4 10             	add    esp,0x10
c00178e4:	85 c0                	test   eax,eax
c00178e6:	0f 84 02 01 00 00    	je     c00179ee <VgaText::receiveKey(unsigned char)+0x13e>
c00178ec:	50                   	push   eax
c00178ed:	50                   	push   eax
c00178ee:	6a 08                	push   0x8
c00178f0:	53                   	push   ebx
c00178f1:	e8 6c fb ff ff       	call   c0017462 <VgaText::putchar(char)>
c00178f6:	89 34 24             	mov    DWORD PTR [esp],esi
c00178f9:	e8 72 8c fe ff       	call   c0000570 <strlen>
c00178fe:	83 c4 10             	add    esp,0x10
c0017901:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017909:	83 fa 0d             	cmp    edx,0xd
c001790c:	89 d0                	mov    eax,edx
c001790e:	0f 95 c1             	setne  cl
c0017911:	83 fa 1f             	cmp    edx,0x1f
c0017914:	0f 9e c2             	setle  dl
c0017917:	0f b6 d2             	movzx  edx,dl
c001791a:	85 ca                	test   edx,ecx
c001791c:	74 17                	je     c0017935 <VgaText::receiveKey(unsigned char)+0x85>
c001791e:	83 e8 08             	sub    eax,0x8
c0017921:	3c 02                	cmp    al,0x2
c0017923:	76 10                	jbe    c0017935 <VgaText::receiveKey(unsigned char)+0x85>
c0017925:	55                   	push   ebp
c0017926:	55                   	push   ebp
c0017927:	68 4f 15 03 c0       	push   0xc003154f
c001792c:	53                   	push   ebx
c001792d:	e8 6e fc ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0017932:	83 c4 10             	add    esp,0x10
c0017935:	83 ec 0c             	sub    esp,0xc
c0017938:	56                   	push   esi
c0017939:	e8 32 8c fe ff       	call   c0000570 <strlen>
c001793e:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017946:	e9 a0 00 00 00       	jmp    c00179eb <VgaText::receiveKey(unsigned char)+0x13b>
c001794b:	83 ec 0c             	sub    esp,0xc
c001794e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017954:	50                   	push   eax
c0017955:	e8 16 8c fe ff       	call   c0000570 <strlen>
c001795a:	89 34 24             	mov    DWORD PTR [esp],esi
c001795d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017961:	e8 0a 8c fe ff       	call   c0000570 <strlen>
c0017966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017971:	3d 80 00 00 00       	cmp    eax,0x80
c0017976:	0f 87 b7 00 00 00    	ja     c0017a33 <VgaText::receiveKey(unsigned char)+0x183>
c001797c:	8d 45 ff             	lea    eax,[ebp-0x1]
c001797f:	8d 55 f7             	lea    edx,[ebp-0x9]
c0017982:	3c 1e                	cmp    al,0x1e
c0017984:	0f 96 c0             	setbe  al
c0017987:	80 fa 01             	cmp    dl,0x1
c001798a:	0f 97 c2             	seta   dl
c001798d:	0f b6 d2             	movzx  edx,dl
c0017990:	85 c2                	test   edx,eax
c0017992:	74 2e                	je     c00179c2 <VgaText::receiveKey(unsigned char)+0x112>
c0017994:	83 ff 0d             	cmp    edi,0xd
c0017997:	74 29                	je     c00179c2 <VgaText::receiveKey(unsigned char)+0x112>
c0017999:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001799c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001799f:	68 55 15 03 c0       	push   0xc0031555
c00179a4:	53                   	push   ebx
c00179a5:	e8 68 fc ff ff       	call   c0017612 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00179aa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00179ad:	8d 45 40             	lea    eax,[ebp+0x40]
c00179b0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00179b3:	0f b6 c0             	movzx  eax,al
c00179b6:	50                   	push   eax
c00179b7:	53                   	push   ebx
c00179b8:	e8 d5 f9 ff ff       	call   c0017392 <VgaText::putchar(char, VgaColour, VgaColour)>
c00179bd:	83 c4 20             	add    esp,0x20
c00179c0:	eb 11                	jmp    c00179d3 <VgaText::receiveKey(unsigned char)+0x123>
c00179c2:	89 e8                	mov    eax,ebp
c00179c4:	51                   	push   ecx
c00179c5:	0f be c0             	movsx  eax,al
c00179c8:	51                   	push   ecx
c00179c9:	50                   	push   eax
c00179ca:	53                   	push   ebx
c00179cb:	e8 92 fa ff ff       	call   c0017462 <VgaText::putchar(char)>
c00179d0:	83 c4 10             	add    esp,0x10
c00179d3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00179d8:	89 e8                	mov    eax,ebp
c00179da:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00179de:	52                   	push   edx
c00179df:	52                   	push   edx
c00179e0:	8d 44 24 26          	lea    eax,[esp+0x26]
c00179e4:	50                   	push   eax
c00179e5:	56                   	push   esi
c00179e6:	e8 55 8e fe ff       	call   c0000840 <strcat>
c00179eb:	83 c4 10             	add    esp,0x10
c00179ee:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00179f4:	b0 01                	mov    al,0x1
c00179f6:	83 ff 1c             	cmp    edi,0x1c
c00179f9:	77 0e                	ja     c0017a09 <VgaText::receiveKey(unsigned char)+0x159>
c00179fb:	b8 08 04 00 10       	mov    eax,0x10000408
c0017a00:	89 f9                	mov    ecx,edi
c0017a02:	d3 e8                	shr    eax,cl
c0017a04:	f7 d0                	not    eax
c0017a06:	83 e0 01             	and    eax,0x1
c0017a09:	84 c0                	test   al,al
c0017a0b:	74 04                	je     c0017a11 <VgaText::receiveKey(unsigned char)+0x161>
c0017a0d:	84 d2                	test   dl,dl
c0017a0f:	74 22                	je     c0017a33 <VgaText::receiveKey(unsigned char)+0x183>
c0017a11:	81 c3 02 01 00 00    	add    ebx,0x102
c0017a17:	50                   	push   eax
c0017a18:	50                   	push   eax
c0017a19:	56                   	push   esi
c0017a1a:	53                   	push   ebx
c0017a1b:	e8 20 8e fe ff       	call   c0000840 <strcat>
c0017a20:	83 c4 0c             	add    esp,0xc
c0017a23:	68 80 00 00 00       	push   0x80
c0017a28:	6a 00                	push   0x0
c0017a2a:	56                   	push   esi
c0017a2b:	e8 c0 8a fe ff       	call   c00004f0 <memset>
c0017a30:	83 c4 10             	add    esp,0x10
c0017a33:	83 c4 2c             	add    esp,0x2c
c0017a36:	5b                   	pop    ebx
c0017a37:	5e                   	pop    esi
c0017a38:	5f                   	pop    edi
c0017a39:	5d                   	pop    ebp
c0017a3a:	c3                   	ret    
c0017a3b:	90                   	nop

c0017a3c <VgaText::doUpdate()>:
c0017a3c:	c3                   	ret    
c0017a3d:	66 90                	xchg   ax,ax
c0017a3f:	90                   	nop

c0017a40 <TSS::TSS()>:
c0017a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017a4b:	90                   	nop
c0017a4c:	c3                   	ret    
c0017a4d:	90                   	nop
c0017a4e:	66 90                	xchg   ax,ax

c0017a50 <TSS::setESP(unsigned long)>:
c0017a50:	55                   	push   ebp
c0017a51:	89 e5                	mov    ebp,esp
c0017a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a59:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017a5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017a5f:	90                   	nop
c0017a60:	5d                   	pop    ebp
c0017a61:	c3                   	ret    
c0017a62:	66 90                	xchg   ax,ax

c0017a64 <TSS::flush()>:
c0017a64:	55                   	push   ebp
c0017a65:	89 e5                	mov    ebp,esp
c0017a67:	83 ec 10             	sub    esp,0x10
c0017a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a6f:	83 c8 03             	or     eax,0x3
c0017a72:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017a76:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017a7a:	66 89 d0             	mov    ax,dx
c0017a7d:	0f 00 d8             	ltr    ax
c0017a80:	90                   	nop
c0017a81:	c9                   	leave  
c0017a82:	c3                   	ret    
c0017a83:	90                   	nop

c0017a84 <TSS::setup(unsigned long, unsigned long)>:
c0017a84:	55                   	push   ebp
c0017a85:	89 e5                	mov    ebp,esp
c0017a87:	83 ec 18             	sub    esp,0x18
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	6a 68                	push   0x68
c0017a8f:	e8 1d eb ff ff       	call   c00165b1 <malloc>
c0017a94:	83 c4 10             	add    esp,0x10
c0017a97:	89 c2                	mov    edx,eax
c0017a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017a9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aa5:	83 ec 04             	sub    esp,0x4
c0017aa8:	6a 68                	push   0x68
c0017aaa:	6a 00                	push   0x0
c0017aac:	50                   	push   eax
c0017aad:	e8 3e 8a fe ff       	call   c00004f0 <memset>
c0017ab2:	83 c4 10             	add    esp,0x10
c0017ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ab8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017abb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ac4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ad0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017ad6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017adc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017adf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017aeb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0017af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017af4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017af7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b03:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b0f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b1b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0017b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b27:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017b2a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017b36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b3f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b4c:	0f 20 da             	mov    edx,cr3
c0017b4f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017b52:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017b55:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b5e:	83 ec 08             	sub    esp,0x8
c0017b61:	50                   	push   eax
c0017b62:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017b65:	50                   	push   eax
c0017b66:	e8 57 e2 ff ff       	call   c0015dc2 <GDTEntry::setBase(unsigned int)>
c0017b6b:	83 c4 10             	add    esp,0x10
c0017b6e:	83 ec 08             	sub    esp,0x8
c0017b71:	6a 68                	push   0x68
c0017b73:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017b76:	50                   	push   eax
c0017b77:	e8 62 e2 ff ff       	call   c0015dde <GDTEntry::setLimit(unsigned int)>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017b83:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017b86:	83 e0 0f             	and    eax,0xf
c0017b89:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017b8c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017b8f:	83 c8 40             	or     eax,0x40
c0017b92:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017b95:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017b9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ba0:	05 78 01 00 00       	add    eax,0x178
c0017ba5:	83 ec 04             	sub    esp,0x4
c0017ba8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017bab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017bae:	50                   	push   eax
c0017baf:	e8 5e e2 ff ff       	call   c0015e12 <GDT::addEntry(GDTEntry)>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	89 c2                	mov    edx,eax
c0017bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bbc:	89 10                	mov    DWORD PTR [eax],edx
c0017bbe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017bc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bc9:	05 78 01 00 00       	add    eax,0x178
c0017bce:	83 ec 0c             	sub    esp,0xc
c0017bd1:	50                   	push   eax
c0017bd2:	e8 65 e2 ff ff       	call   c0015e3c <GDT::flush()>
c0017bd7:	83 c4 10             	add    esp,0x10
c0017bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bdf:	c9                   	leave  
c0017be0:	c3                   	ret    
c0017be1:	90                   	nop

c0017be2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017be6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bed:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017bf2:	75 08                	jne    c0017bfc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017bf4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017bfa:	eb 38                	jmp    c0017c34 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017bfc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c01:	75 17                	jne    c0017c1a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c11:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c17:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017c1a:	89 c1                	mov    ecx,eax
c0017c1c:	83 e1 fd             	and    ecx,0xfffffffd
c0017c1f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017c25:	74 cd                	je     c0017bf4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c27:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017c2c:	83 e0 ef             	and    eax,0xffffffef
c0017c2f:	83 f8 08             	cmp    eax,0x8
c0017c32:	76 c0                	jbe    c0017bf4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017c34:	31 c0                	xor    eax,eax
c0017c36:	c3                   	ret    
c0017c37:	90                   	nop

c0017c38 <ReservedFilename::isAtty()>:
c0017c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017c3f:	31 c0                	xor    eax,eax
c0017c41:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017c47:	74 09                	je     c0017c52 <ReservedFilename::isAtty()+0x1a>
c0017c49:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017c4f:	0f 94 c0             	sete   al
c0017c52:	c3                   	ret    
c0017c53:	90                   	nop

c0017c54 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c63:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017c68:	75 08                	jne    c0017c72 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017c6a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017c70:	eb 3d                	jmp    c0017caf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017c72:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017c77:	75 17                	jne    c0017c90 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017c79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c87:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c8d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017c90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017c95:	75 04                	jne    c0017c9b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017c97:	89 0a                	mov    DWORD PTR [edx],ecx
c0017c99:	eb 14                	jmp    c0017caf <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017c9b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017ca0:	74 c8                	je     c0017c6a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017ca2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017ca7:	83 e0 ef             	and    eax,0xffffffef
c0017caa:	83 f8 08             	cmp    eax,0x8
c0017cad:	76 bb                	jbe    c0017c6a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017caf:	31 c0                	xor    eax,eax
c0017cb1:	c3                   	ret    

c0017cb2 <UnixFile::getFileDescriptor()>:
c0017cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cb9:	c3                   	ret    

c0017cba <UnixFile::UnixFile(int)>:
c0017cba:	53                   	push   ebx
c0017cbb:	83 ec 28             	sub    esp,0x28
c0017cbe:	ba 2c 16 03 c0       	mov    edx,0xc003162c
c0017cc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc7:	89 10                	mov    DWORD PTR [eax],edx
c0017cc9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017cd1:	0f 8f 90 01 00 00    	jg     c0017e67 <UnixFile::UnixFile(int)+0x1ad>
c0017cd7:	a1 a0 3e 03 c0       	mov    eax,ds:0xc0033ea0
c0017cdc:	8d 50 01             	lea    edx,[eax+0x1]
c0017cdf:	89 15 a0 3e 03 c0    	mov    DWORD PTR ds:0xc0033ea0,edx
c0017ce5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ce9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017cec:	83 ec 08             	sub    esp,0x8
c0017cef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017cf3:	68 98 aa 03 c0       	push   0xc003aa98
c0017cf8:	e8 5b 6e 01 00       	call   c002eb58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017cfd:	83 c4 10             	add    esp,0x10
c0017d00:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017d05:	83 f0 01             	xor    eax,0x1
c0017d08:	0f b6 c0             	movzx  eax,al
c0017d0b:	85 c0                	test   eax,eax
c0017d0d:	0f 84 55 01 00 00    	je     c0017e68 <UnixFile::UnixFile(int)+0x1ae>
c0017d13:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017d1a:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017d22:	83 ec 0c             	sub    esp,0xc
c0017d25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d29:	e8 83 e8 ff ff       	call   c00165b1 <malloc>
c0017d2e:	83 c4 10             	add    esp,0x10
c0017d31:	89 c3                	mov    ebx,eax
c0017d33:	83 ec 08             	sub    esp,0x8
c0017d36:	68 03 ff ff 0f       	push   0xfffff03
c0017d3b:	53                   	push   ebx
c0017d3c:	e8 2d 01 00 00       	call   c0017e6e <ReservedFilename::ReservedFilename(int)>
c0017d41:	83 c4 10             	add    esp,0x10
c0017d44:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017d4a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017d52:	83 ec 0c             	sub    esp,0xc
c0017d55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d59:	e8 53 e8 ff ff       	call   c00165b1 <malloc>
c0017d5e:	83 c4 10             	add    esp,0x10
c0017d61:	89 c3                	mov    ebx,eax
c0017d63:	83 ec 08             	sub    esp,0x8
c0017d66:	68 01 ff ff 0f       	push   0xfffff01
c0017d6b:	53                   	push   ebx
c0017d6c:	e8 fd 00 00 00       	call   c0017e6e <ReservedFilename::ReservedFilename(int)>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017d7a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017d82:	83 ec 0c             	sub    esp,0xc
c0017d85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d89:	e8 23 e8 ff ff       	call   c00165b1 <malloc>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	89 c3                	mov    ebx,eax
c0017d93:	83 ec 08             	sub    esp,0x8
c0017d96:	68 00 ff ff 0f       	push   0xfffff00
c0017d9b:	53                   	push   ebx
c0017d9c:	e8 cd 00 00 00       	call   c0017e6e <ReservedFilename::ReservedFilename(int)>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017daa:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017db2:	83 ec 0c             	sub    esp,0xc
c0017db5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017db9:	e8 f3 e7 ff ff       	call   c00165b1 <malloc>
c0017dbe:	83 c4 10             	add    esp,0x10
c0017dc1:	89 c3                	mov    ebx,eax
c0017dc3:	83 ec 08             	sub    esp,0x8
c0017dc6:	68 02 ff ff 0f       	push   0xfffff02
c0017dcb:	53                   	push   ebx
c0017dcc:	e8 9d 00 00 00       	call   c0017e6e <ReservedFilename::ReservedFilename(int)>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017dda:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017de2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017de7:	7f 7f                	jg     c0017e68 <UnixFile::UnixFile(int)+0x1ae>
c0017de9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017df8:	e8 b4 e7 ff ff       	call   c00165b1 <malloc>
c0017dfd:	83 c4 10             	add    esp,0x10
c0017e00:	89 c3                	mov    ebx,eax
c0017e02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e06:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017e0b:	83 ec 08             	sub    esp,0x8
c0017e0e:	50                   	push   eax
c0017e0f:	53                   	push   ebx
c0017e10:	e8 59 00 00 00       	call   c0017e6e <ReservedFilename::ReservedFilename(int)>
c0017e15:	83 c4 10             	add    esp,0x10
c0017e18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e1c:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017e23:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017e2b:	83 ec 0c             	sub    esp,0xc
c0017e2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e32:	e8 7a e7 ff ff       	call   c00165b1 <malloc>
c0017e37:	83 c4 10             	add    esp,0x10
c0017e3a:	89 c3                	mov    ebx,eax
c0017e3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e40:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017e45:	83 ec 08             	sub    esp,0x8
c0017e48:	50                   	push   eax
c0017e49:	53                   	push   ebx
c0017e4a:	e8 1f 00 00 00       	call   c0017e6e <ReservedFilename::ReservedFilename(int)>
c0017e4f:	83 c4 10             	add    esp,0x10
c0017e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e56:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017e5d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017e62:	e9 7b ff ff ff       	jmp    c0017de2 <UnixFile::UnixFile(int)+0x128>
c0017e67:	90                   	nop
c0017e68:	83 c4 28             	add    esp,0x28
c0017e6b:	5b                   	pop    ebx
c0017e6c:	c3                   	ret    
c0017e6d:	90                   	nop

c0017e6e <ReservedFilename::ReservedFilename(int)>:
c0017e6e:	83 ec 0c             	sub    esp,0xc
c0017e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e75:	83 ec 08             	sub    esp,0x8
c0017e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e7c:	50                   	push   eax
c0017e7d:	e8 38 fe ff ff       	call   c0017cba <UnixFile::UnixFile(int)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	ba 48 16 03 c0       	mov    edx,0xc0031648
c0017e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e8e:	89 10                	mov    DWORD PTR [eax],edx
c0017e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017e9b:	90                   	nop
c0017e9c:	83 c4 0c             	add    esp,0xc
c0017e9f:	c3                   	ret    

c0017ea0 <UnixFile::~UnixFile()>:
c0017ea0:	83 ec 1c             	sub    esp,0x1c
c0017ea3:	ba 2c 16 03 c0       	mov    edx,0xc003162c
c0017ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eac:	89 10                	mov    DWORD PTR [eax],edx
c0017eae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017eb5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017eba:	7f 76                	jg     c0017f32 <UnixFile::~UnixFile()+0x92>
c0017ebc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	68 98 aa 03 c0       	push   0xc003aa98
c0017ecc:	e8 5b 6d 01 00       	call   c002ec2c <LinkedList<UnixFile>::getFirstElement()>
c0017ed1:	83 c4 10             	add    esp,0x10
c0017ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ed8:	83 ec 0c             	sub    esp,0xc
c0017edb:	68 98 aa 03 c0       	push   0xc003aa98
c0017ee0:	e8 4f 6d 01 00       	call   c002ec34 <LinkedList<UnixFile>::removeFirst()>
c0017ee5:	83 c4 10             	add    esp,0x10
c0017ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017ef0:	74 43                	je     c0017f35 <UnixFile::~UnixFile()+0x95>
c0017ef2:	83 ec 08             	sub    esp,0x8
c0017ef5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ef9:	68 98 aa 03 c0       	push   0xc003aa98
c0017efe:	e8 55 6c 01 00       	call   c002eb58 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017f03:	83 c4 10             	add    esp,0x10
c0017f06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f0a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f11:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017f16:	0f 94 c0             	sete   al
c0017f19:	0f b6 c0             	movzx  eax,al
c0017f1c:	85 c0                	test   eax,eax
c0017f1e:	74 a4                	je     c0017ec4 <UnixFile::~UnixFile()+0x24>
c0017f20:	83 ec 0c             	sub    esp,0xc
c0017f23:	68 04 16 03 c0       	push   0xc0031604
c0017f28:	e8 2d 85 00 00       	call   c002045a <KePanic(char const*)>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	eb 92                	jmp    c0017ec4 <UnixFile::~UnixFile()+0x24>
c0017f32:	90                   	nop
c0017f33:	eb 01                	jmp    c0017f36 <UnixFile::~UnixFile()+0x96>
c0017f35:	90                   	nop
c0017f36:	90                   	nop
c0017f37:	83 c4 1c             	add    esp,0x1c
c0017f3a:	c3                   	ret    
c0017f3b:	90                   	nop

c0017f3c <UnixFile::~UnixFile()>:
c0017f3c:	83 ec 0c             	sub    esp,0xc
c0017f3f:	83 ec 0c             	sub    esp,0xc
c0017f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f46:	e8 55 ff ff ff       	call   c0017ea0 <UnixFile::~UnixFile()>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	83 ec 08             	sub    esp,0x8
c0017f51:	6a 0c                	push   0xc
c0017f53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f57:	e8 b8 13 00 00       	call   c0019314 <operator delete(void*, unsigned long)>
c0017f5c:	83 c4 10             	add    esp,0x10
c0017f5f:	83 c4 0c             	add    esp,0xc
c0017f62:	c3                   	ret    
c0017f63:	90                   	nop

c0017f64 <ReservedFilename::~ReservedFilename()>:
c0017f64:	83 ec 0c             	sub    esp,0xc
c0017f67:	ba 48 16 03 c0       	mov    edx,0xc0031648
c0017f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f70:	89 10                	mov    DWORD PTR [eax],edx
c0017f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f76:	83 ec 0c             	sub    esp,0xc
c0017f79:	50                   	push   eax
c0017f7a:	e8 21 ff ff ff       	call   c0017ea0 <UnixFile::~UnixFile()>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	90                   	nop
c0017f83:	83 c4 0c             	add    esp,0xc
c0017f86:	c3                   	ret    
c0017f87:	90                   	nop

c0017f88 <ReservedFilename::~ReservedFilename()>:
c0017f88:	83 ec 0c             	sub    esp,0xc
c0017f8b:	83 ec 0c             	sub    esp,0xc
c0017f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f92:	e8 cd ff ff ff       	call   c0017f64 <ReservedFilename::~ReservedFilename()>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	83 ec 08             	sub    esp,0x8
c0017f9d:	6a 0c                	push   0xc
c0017f9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fa3:	e8 6c 13 00 00       	call   c0019314 <operator delete(void*, unsigned long)>
c0017fa8:	83 c4 10             	add    esp,0x10
c0017fab:	83 c4 0c             	add    esp,0xc
c0017fae:	c3                   	ret    

c0017faf <KeGetFileFromDescriptor(int)>:
c0017faf:	53                   	push   ebx
c0017fb0:	83 ec 08             	sub    esp,0x8
c0017fb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017fb7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017fbd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017fc3:	7f 2c                	jg     c0017ff1 <KeGetFileFromDescriptor(int)+0x42>
c0017fc5:	83 ec 0c             	sub    esp,0xc
c0017fc8:	68 98 aa 03 c0       	push   0xc003aa98
c0017fcd:	e8 5a 6c 01 00       	call   c002ec2c <LinkedList<UnixFile>::getFirstElement()>
c0017fd2:	83 c4 10             	add    esp,0x10
c0017fd5:	85 c0                	test   eax,eax
c0017fd7:	75 04                	jne    c0017fdd <KeGetFileFromDescriptor(int)+0x2e>
c0017fd9:	31 c0                	xor    eax,eax
c0017fdb:	eb 6e                	jmp    c001804b <KeGetFileFromDescriptor(int)+0x9c>
c0017fdd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017fe0:	74 69                	je     c001804b <KeGetFileFromDescriptor(int)+0x9c>
c0017fe2:	52                   	push   edx
c0017fe3:	52                   	push   edx
c0017fe4:	50                   	push   eax
c0017fe5:	68 98 aa 03 c0       	push   0xc003aa98
c0017fea:	e8 e7 6c 01 00       	call   c002ecd6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017fef:	eb e1                	jmp    c0017fd2 <KeGetFileFromDescriptor(int)+0x23>
c0017ff1:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017ff6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017ffc:	74 4d                	je     c001804b <KeGetFileFromDescriptor(int)+0x9c>
c0017ffe:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0018003:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0018009:	74 40                	je     c001804b <KeGetFileFromDescriptor(int)+0x9c>
c001800b:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0018010:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0018016:	74 33                	je     c001804b <KeGetFileFromDescriptor(int)+0x9c>
c0018018:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c001801d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0018023:	74 26                	je     c001804b <KeGetFileFromDescriptor(int)+0x9c>
c0018025:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001802b:	83 f8 08             	cmp    eax,0x8
c001802e:	77 09                	ja     c0018039 <KeGetFileFromDescriptor(int)+0x8a>
c0018030:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0018037:	eb 12                	jmp    c001804b <KeGetFileFromDescriptor(int)+0x9c>
c0018039:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001803f:	83 fb 08             	cmp    ebx,0x8
c0018042:	77 95                	ja     c0017fd9 <KeGetFileFromDescriptor(int)+0x2a>
c0018044:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c001804b:	83 c4 08             	add    esp,0x8
c001804e:	5b                   	pop    ebx
c001804f:	c3                   	ret    

c0018050 <__static_initialization_and_destruction_0(int, int)>:
c0018050:	83 ec 0c             	sub    esp,0xc
c0018053:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018058:	75 34                	jne    c001808e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001805a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018062:	75 2a                	jne    c001808e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0018064:	83 ec 0c             	sub    esp,0xc
c0018067:	68 98 aa 03 c0       	push   0xc003aa98
c001806c:	e8 a5 6a 01 00       	call   c002eb16 <LinkedList<UnixFile>::LinkedList()>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	83 ec 04             	sub    esp,0x4
c0018077:	68 18 3e 03 c0       	push   0xc0033e18
c001807c:	68 98 aa 03 c0       	push   0xc003aa98
c0018081:	68 14 eb 02 c0       	push   0xc002eb14
c0018086:	e8 39 12 00 00       	call   c00192c4 <__cxa_atexit>
c001808b:	83 c4 10             	add    esp,0x10
c001808e:	90                   	nop
c001808f:	83 c4 0c             	add    esp,0xc
c0018092:	c3                   	ret    

c0018093 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0018093:	83 ec 0c             	sub    esp,0xc
c0018096:	83 ec 08             	sub    esp,0x8
c0018099:	68 ff ff 00 00       	push   0xffff
c001809e:	6a 01                	push   0x1
c00180a0:	e8 ab ff ff ff       	call   c0018050 <__static_initialization_and_destruction_0(int, int)>
c00180a5:	83 c4 10             	add    esp,0x10
c00180a8:	83 c4 0c             	add    esp,0xc
c00180ab:	c3                   	ret    

c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00180ac:	53                   	push   ebx
c00180ad:	8b 15 a8 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033ea8
c00180b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180bb:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00180c1:	89 d8                	mov    eax,ebx
c00180c3:	d1 e8                	shr    eax,1
c00180c5:	01 d0                	add    eax,edx
c00180c7:	80 e3 01             	and    bl,0x1
c00180ca:	8a 10                	mov    dl,BYTE PTR [eax]
c00180cc:	75 09                	jne    c00180d7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00180ce:	83 e2 f0             	and    edx,0xfffffff0
c00180d1:	09 ca                	or     edx,ecx
c00180d3:	88 10                	mov    BYTE PTR [eax],dl
c00180d5:	5b                   	pop    ebx
c00180d6:	c3                   	ret    
c00180d7:	83 e2 0f             	and    edx,0xf
c00180da:	0f b6 c9             	movzx  ecx,cl
c00180dd:	c1 e1 04             	shl    ecx,0x4
c00180e0:	09 ca                	or     edx,ecx
c00180e2:	88 10                	mov    BYTE PTR [eax],dl
c00180e4:	5b                   	pop    ebx
c00180e5:	c3                   	ret    

c00180e6 <Virt::getPageState(unsigned long)>:
c00180e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180ea:	8b 0d a8 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033ea8
c00180f0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00180f6:	89 d0                	mov    eax,edx
c00180f8:	d1 e8                	shr    eax,1
c00180fa:	80 e2 01             	and    dl,0x1
c00180fd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0018100:	74 03                	je     c0018105 <Virt::getPageState(unsigned long)+0x1f>
c0018102:	c1 e8 04             	shr    eax,0x4
c0018105:	83 e0 0f             	and    eax,0xf
c0018108:	c3                   	ret    

c0018109 <Virt::allocateKernelVirtualPages(int)>:
c0018109:	55                   	push   ebp
c001810a:	31 ed                	xor    ebp,ebp
c001810c:	57                   	push   edi
c001810d:	31 ff                	xor    edi,edi
c001810f:	56                   	push   esi
c0018110:	53                   	push   ebx
c0018111:	31 db                	xor    ebx,ebx
c0018113:	83 ec 0c             	sub    esp,0xc
c0018116:	8b 35 a4 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033ea4
c001811c:	56                   	push   esi
c001811d:	e8 c4 ff ff ff       	call   c00180e6 <Virt::getPageState(unsigned long)>
c0018122:	5a                   	pop    edx
c0018123:	84 c0                	test   al,al
c0018125:	75 41                	jne    c0018168 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0018127:	85 db                	test   ebx,ebx
c0018129:	75 02                	jne    c001812d <Virt::allocateKernelVirtualPages(int)+0x24>
c001812b:	89 f5                	mov    ebp,esi
c001812d:	83 c3 01             	add    ebx,0x1
c0018130:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0018134:	74 5f                	je     c0018195 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0018136:	83 c6 01             	add    esi,0x1
c0018139:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c001813f:	76 34                	jbe    c0018175 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0018141:	c7 05 a4 3e 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033ea4,0xc8000
c001814b:	f7 c7 01 00 00 00    	test   edi,0x1
c0018151:	75 2a                	jne    c001817d <Virt::allocateKernelVirtualPages(int)+0x74>
c0018153:	be 00 80 0c 00       	mov    esi,0xc8000
c0018158:	bf 01 00 00 00       	mov    edi,0x1
c001815d:	56                   	push   esi
c001815e:	e8 83 ff ff ff       	call   c00180e6 <Virt::getPageState(unsigned long)>
c0018163:	5a                   	pop    edx
c0018164:	84 c0                	test   al,al
c0018166:	74 bf                	je     c0018127 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0018168:	31 db                	xor    ebx,ebx
c001816a:	83 c6 01             	add    esi,0x1
c001816d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0018173:	77 cc                	ja     c0018141 <Virt::allocateKernelVirtualPages(int)+0x38>
c0018175:	89 35 a4 3e 03 c0    	mov    DWORD PTR ds:0xc0033ea4,esi
c001817b:	eb 9f                	jmp    c001811c <Virt::allocateKernelVirtualPages(int)+0x13>
c001817d:	83 ec 0c             	sub    esp,0xc
c0018180:	68 5c 16 03 c0       	push   0xc003165c
c0018185:	e8 d0 82 00 00       	call   c002045a <KePanic(char const*)>
c001818a:	8b 35 a4 3e 03 c0    	mov    esi,DWORD PTR ds:0xc0033ea4
c0018190:	83 c4 10             	add    esp,0x10
c0018193:	eb 87                	jmp    c001811c <Virt::allocateKernelVirtualPages(int)+0x13>
c0018195:	89 2d a4 3e 03 c0    	mov    DWORD PTR ds:0xc0033ea4,ebp
c001819b:	83 fb 01             	cmp    ebx,0x1
c001819e:	74 6f                	je     c001820f <Virt::allocateKernelVirtualPages(int)+0x106>
c00181a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181a4:	85 c9                	test   ecx,ecx
c00181a6:	74 49                	je     c00181f1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00181ac:	89 e8                	mov    eax,ebp
c00181ae:	31 db                	xor    ebx,ebx
c00181b0:	8d 79 ff             	lea    edi,[ecx-0x1]
c00181b3:	eb 18                	jmp    c00181cd <Virt::allocateKernelVirtualPages(int)+0xc4>
c00181b5:	6a 01                	push   0x1
c00181b7:	83 c3 01             	add    ebx,0x1
c00181ba:	50                   	push   eax
c00181bb:	e8 ec fe ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181c0:	58                   	pop    eax
c00181c1:	5a                   	pop    edx
c00181c2:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00181c6:	74 29                	je     c00181f1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00181c8:	a1 a4 3e 03 c0       	mov    eax,ds:0xc0033ea4
c00181cd:	8d 50 01             	lea    edx,[eax+0x1]
c00181d0:	85 db                	test   ebx,ebx
c00181d2:	89 15 a4 3e 03 c0    	mov    DWORD PTR ds:0xc0033ea4,edx
c00181d8:	74 24                	je     c00181fe <Virt::allocateKernelVirtualPages(int)+0xf5>
c00181da:	39 df                	cmp    edi,ebx
c00181dc:	75 d7                	jne    c00181b5 <Virt::allocateKernelVirtualPages(int)+0xac>
c00181de:	6a 03                	push   0x3
c00181e0:	83 c3 01             	add    ebx,0x1
c00181e3:	50                   	push   eax
c00181e4:	e8 c3 fe ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181e9:	59                   	pop    ecx
c00181ea:	5e                   	pop    esi
c00181eb:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00181ef:	75 d7                	jne    c00181c8 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00181f1:	83 c4 0c             	add    esp,0xc
c00181f4:	89 e8                	mov    eax,ebp
c00181f6:	5b                   	pop    ebx
c00181f7:	c1 e0 0c             	shl    eax,0xc
c00181fa:	5e                   	pop    esi
c00181fb:	5f                   	pop    edi
c00181fc:	5d                   	pop    ebp
c00181fd:	c3                   	ret    
c00181fe:	6a 02                	push   0x2
c0018200:	bb 01 00 00 00       	mov    ebx,0x1
c0018205:	50                   	push   eax
c0018206:	e8 a1 fe ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001820b:	58                   	pop    eax
c001820c:	5a                   	pop    edx
c001820d:	eb b9                	jmp    c00181c8 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001820f:	6a 04                	push   0x4
c0018211:	8d 45 01             	lea    eax,[ebp+0x1]
c0018214:	55                   	push   ebp
c0018215:	a3 a4 3e 03 c0       	mov    ds:0xc0033ea4,eax
c001821a:	e8 8d fe ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001821f:	5b                   	pop    ebx
c0018220:	89 e8                	mov    eax,ebp
c0018222:	5e                   	pop    esi
c0018223:	c1 e0 0c             	shl    eax,0xc
c0018226:	83 c4 0c             	add    esp,0xc
c0018229:	5b                   	pop    ebx
c001822a:	5e                   	pop    esi
c001822b:	5f                   	pop    edi
c001822c:	5d                   	pop    ebp
c001822d:	c3                   	ret    

c001822e <Virt::freeSwapfilePage(unsigned long)>:
c001822e:	53                   	push   ebx
c001822f:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018235:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018239:	b8 01 00 00 00       	mov    eax,0x1
c001823e:	89 cb                	mov    ebx,ecx
c0018240:	d3 e0                	shl    eax,cl
c0018242:	c1 eb 05             	shr    ebx,0x5
c0018245:	f7 d0                	not    eax
c0018247:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001824a:	21 c1                	and    ecx,eax
c001824c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001824f:	5b                   	pop    ebx
c0018250:	c3                   	ret    

c0018251 <Virt::swapIDToSector(unsigned long)>:
c0018251:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018255:	8b 15 ac 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eac
c001825b:	8b 0d b4 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033eb4
c0018261:	0f af c2             	imul   eax,edx
c0018264:	01 c8                	add    eax,ecx
c0018266:	c3                   	ret    

c0018267 <Virt::allocateSwapfilePage()>:
c0018267:	55                   	push   ebp
c0018268:	31 d2                	xor    edx,edx
c001826a:	57                   	push   edi
c001826b:	56                   	push   esi
c001826c:	53                   	push   ebx
c001826d:	83 ec 0c             	sub    esp,0xc
c0018270:	8b 0d ac 3e 03 c0    	mov    ecx,DWORD PTR ds:0xc0033eac
c0018276:	a1 b0 3e 03 c0       	mov    eax,ds:0xc0033eb0
c001827b:	f7 f1                	div    ecx
c001827d:	39 0d b0 3e 03 c0    	cmp    DWORD PTR ds:0xc0033eb0,ecx
c0018283:	72 2f                	jb     c00182b4 <Virt::allocateSwapfilePage()+0x4d>
c0018285:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c001828b:	8b 16                	mov    edx,DWORD PTR [esi]
c001828d:	f6 c2 01             	test   dl,0x1
c0018290:	74 3e                	je     c00182d0 <Virt::allocateSwapfilePage()+0x69>
c0018292:	31 c9                	xor    ecx,ecx
c0018294:	bf 01 00 00 00       	mov    edi,0x1
c0018299:	eb 12                	jmp    c00182ad <Virt::allocateSwapfilePage()+0x46>
c001829b:	89 fd                	mov    ebp,edi
c001829d:	89 ca                	mov    edx,ecx
c001829f:	d3 e5                	shl    ebp,cl
c00182a1:	c1 ea 05             	shr    edx,0x5
c00182a4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00182a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00182a9:	85 ea                	test   edx,ebp
c00182ab:	74 2c                	je     c00182d9 <Virt::allocateSwapfilePage()+0x72>
c00182ad:	83 c1 01             	add    ecx,0x1
c00182b0:	39 c8                	cmp    eax,ecx
c00182b2:	77 e7                	ja     c001829b <Virt::allocateSwapfilePage()+0x34>
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	68 f0 18 03 c0       	push   0xc00318f0
c00182bc:	e8 99 81 00 00       	call   c002045a <KePanic(char const*)>
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	31 c9                	xor    ecx,ecx
c00182c6:	83 c4 0c             	add    esp,0xc
c00182c9:	89 c8                	mov    eax,ecx
c00182cb:	5b                   	pop    ebx
c00182cc:	5e                   	pop    esi
c00182cd:	5f                   	pop    edi
c00182ce:	5d                   	pop    ebp
c00182cf:	c3                   	ret    
c00182d0:	89 f3                	mov    ebx,esi
c00182d2:	bd 01 00 00 00       	mov    ebp,0x1
c00182d7:	31 c9                	xor    ecx,ecx
c00182d9:	09 ea                	or     edx,ebp
c00182db:	89 c8                	mov    eax,ecx
c00182dd:	89 13                	mov    DWORD PTR [ebx],edx
c00182df:	83 c4 0c             	add    esp,0xc
c00182e2:	5b                   	pop    ebx
c00182e3:	5e                   	pop    esi
c00182e4:	5f                   	pop    edi
c00182e5:	5d                   	pop    ebp
c00182e6:	c3                   	ret    

c00182e7 <Virt::virtualMemorySetup()>:
c00182e7:	53                   	push   ebx
c00182e8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00182ed:	6a 0f                	push   0xf
c00182ef:	53                   	push   ebx
c00182f0:	83 c3 01             	add    ebx,0x1
c00182f3:	e8 b4 fd ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00182f8:	58                   	pop    eax
c00182f9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00182ff:	5a                   	pop    edx
c0018300:	75 eb                	jne    c00182ed <Virt::virtualMemorySetup()+0x6>
c0018302:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018307:	6a 00                	push   0x0
c0018309:	53                   	push   ebx
c001830a:	83 c3 01             	add    ebx,0x1
c001830d:	e8 9a fd ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018312:	59                   	pop    ecx
c0018313:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018319:	58                   	pop    eax
c001831a:	75 eb                	jne    c0018307 <Virt::virtualMemorySetup()+0x20>
c001831c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018321:	6a 0f                	push   0xf
c0018323:	53                   	push   ebx
c0018324:	83 c3 01             	add    ebx,0x1
c0018327:	e8 80 fd ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001832c:	58                   	pop    eax
c001832d:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018333:	5a                   	pop    edx
c0018334:	75 eb                	jne    c0018321 <Virt::virtualMemorySetup()+0x3a>
c0018336:	5b                   	pop    ebx
c0018337:	c3                   	ret    

c0018338 <Virt::setupPageSwapping(int)>:
c0018338:	53                   	push   ebx
c0018339:	83 ec 0c             	sub    esp,0xc
c001833c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018340:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018345:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001834b:	8b 10                	mov    edx,DWORD PTR [eax]
c001834d:	53                   	push   ebx
c001834e:	c1 e3 0b             	shl    ebx,0xb
c0018351:	68 07 19 03 c0       	push   0xc0031907
c0018356:	50                   	push   eax
c0018357:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001835a:	89 1d b0 3e 03 c0    	mov    DWORD PTR ds:0xc0033eb0,ebx
c0018360:	c6 05 b8 3e 03 c0 43 	mov    BYTE PTR ds:0xc0033eb8,0x43
c0018367:	c1 eb 08             	shr    ebx,0x8
c001836a:	a3 b4 3e 03 c0       	mov    ds:0xc0033eb4,eax
c001836f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018372:	c7 05 ac 3e 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033eac,0x8
c001837c:	e8 30 e2 ff ff       	call   c00165b1 <malloc>
c0018381:	83 c4 0c             	add    esp,0xc
c0018384:	89 c1                	mov    ecx,eax
c0018386:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c001838b:	31 d2                	xor    edx,edx
c001838d:	a1 b0 3e 03 c0       	mov    eax,ds:0xc0033eb0
c0018392:	f7 35 ac 3e 03 c0    	div    DWORD PTR ds:0xc0033eac
c0018398:	c1 e8 05             	shr    eax,0x5
c001839b:	50                   	push   eax
c001839c:	6a 00                	push   0x0
c001839e:	51                   	push   ecx
c001839f:	e8 4c 81 fe ff       	call   c00004f0 <memset>
c00183a4:	83 c4 18             	add    esp,0x18
c00183a7:	5b                   	pop    ebx
c00183a8:	c3                   	ret    
c00183a9:	90                   	nop

c00183aa <VAS::setCPUSpecific(unsigned long)>:
c00183aa:	c3                   	ret    
c00183ab:	90                   	nop

c00183ac <VAS::VAS(VAS*)>:
c00183ac:	83 ec 0c             	sub    esp,0xc
c00183af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00183be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00183c5:	83 ec 0c             	sub    esp,0xc
c00183c8:	68 7c 16 03 c0       	push   0xc003167c
c00183cd:	e8 88 80 00 00       	call   c002045a <KePanic(char const*)>
c00183d2:	83 c4 10             	add    esp,0x10
c00183d5:	90                   	nop
c00183d6:	83 c4 0c             	add    esp,0xc
c00183d9:	c3                   	ret    

c00183da <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00183da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183de:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00183e3:	89 c2                	mov    edx,eax
c00183e5:	c1 e8 0a             	shr    eax,0xa
c00183e8:	c1 ea 16             	shr    edx,0x16
c00183eb:	83 f9 01             	cmp    ecx,0x1
c00183ee:	19 c9                	sbb    ecx,ecx
c00183f0:	c1 e2 0c             	shl    edx,0xc
c00183f3:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00183f9:	25 fc 0f 00 00       	and    eax,0xffc
c00183fe:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018405:	01 d0                	add    eax,edx
c0018407:	c3                   	ret    

c0018408 <VAS::getPageTableEntry(unsigned long)>:
c0018408:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001840c:	89 ca                	mov    edx,ecx
c001840e:	c1 e9 0a             	shr    ecx,0xa
c0018411:	c1 ea 16             	shr    edx,0x16
c0018414:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001841a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018420:	c1 e0 0c             	shl    eax,0xc
c0018423:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018426:	c3                   	ret    

c0018427 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018427:	55                   	push   ebp
c0018428:	57                   	push   edi
c0018429:	bf 01 00 00 00       	mov    edi,0x1
c001842e:	56                   	push   esi
c001842f:	53                   	push   ebx
c0018430:	83 ec 1c             	sub    esp,0x1c
c0018433:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018437:	c1 ee 0c             	shr    esi,0xc
c001843a:	eb 48                	jmp    c0018484 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001843c:	83 ec 08             	sub    esp,0x8
c001843f:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018444:	55                   	push   ebp
c0018445:	50                   	push   eax
c0018446:	e8 bd ff ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018450:	f6 c6 04             	test   dh,0x4
c0018453:	75 70                	jne    c00184c5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018455:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001845b:	83 fb 04             	cmp    ebx,0x4
c001845e:	0f 84 8a 00 00 00    	je     c00184ee <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018464:	83 fb 02             	cmp    ebx,0x2
c0018467:	0f 84 9a 00 00 00    	je     c0018507 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001846d:	83 fb 03             	cmp    ebx,0x3
c0018470:	0f 84 be 00 00 00    	je     c0018534 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018476:	83 fb 01             	cmp    ebx,0x1
c0018479:	0f 84 a2 00 00 00    	je     c0018521 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001847f:	83 c6 01             	add    esi,0x1
c0018482:	31 ff                	xor    edi,edi
c0018484:	56                   	push   esi
c0018485:	89 f5                	mov    ebp,esi
c0018487:	e8 5a fc ff ff       	call   c00180e6 <Virt::getPageState(unsigned long)>
c001848c:	c1 e5 0c             	shl    ebp,0xc
c001848f:	0f b6 d8             	movzx  ebx,al
c0018492:	5a                   	pop    edx
c0018493:	85 db                	test   ebx,ebx
c0018495:	75 a5                	jne    c001843c <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	68 1e 19 03 c0       	push   0xc003191e
c001849f:	e8 b6 7f 00 00       	call   c002045a <KePanic(char const*)>
c00184a4:	5a                   	pop    edx
c00184a5:	59                   	pop    ecx
c00184a6:	55                   	push   ebp
c00184a7:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00184ad:	55                   	push   ebp
c00184ae:	e8 55 ff ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00184b8:	f6 c6 04             	test   dh,0x4
c00184bb:	75 08                	jne    c00184c5 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00184bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184c3:	eb ba                	jmp    c001847f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00184c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184c9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00184cf:	83 ec 0c             	sub    esp,0xc
c00184d2:	52                   	push   edx
c00184d3:	e8 79 e3 ff ff       	call   c0016851 <Phys::freePage(unsigned long)>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	83 fb 04             	cmp    ebx,0x4
c00184de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00184e8:	0f 85 76 ff ff ff    	jne    c0018464 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00184ee:	83 e7 01             	and    edi,0x1
c00184f1:	75 46                	jne    c0018539 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00184f3:	c7 44 24 30 a0 16 03 c0 	mov    DWORD PTR [esp+0x30],0xc00316a0
c00184fb:	83 c4 1c             	add    esp,0x1c
c00184fe:	5b                   	pop    ebx
c00184ff:	5e                   	pop    esi
c0018500:	5f                   	pop    edi
c0018501:	5d                   	pop    ebp
c0018502:	e9 53 7f 00 00       	jmp    c002045a <KePanic(char const*)>
c0018507:	83 e7 01             	and    edi,0x1
c001850a:	75 15                	jne    c0018521 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001850c:	83 ec 0c             	sub    esp,0xc
c001850f:	68 3a 19 03 c0       	push   0xc003193a
c0018514:	e8 41 7f 00 00       	call   c002045a <KePanic(char const*)>
c0018519:	83 c4 10             	add    esp,0x10
c001851c:	e9 5e ff ff ff       	jmp    c001847f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018521:	83 ec 08             	sub    esp,0x8
c0018524:	6a 00                	push   0x0
c0018526:	56                   	push   esi
c0018527:	e8 80 fb ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001852c:	83 c4 10             	add    esp,0x10
c001852f:	e9 4b ff ff ff       	jmp    c001847f <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018534:	83 e7 01             	and    edi,0x1
c0018537:	75 16                	jne    c001854f <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018539:	83 ec 08             	sub    esp,0x8
c001853c:	6a 00                	push   0x0
c001853e:	56                   	push   esi
c001853f:	e8 68 fb ff ff       	call   c00180ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018544:	83 c4 10             	add    esp,0x10
c0018547:	83 c4 1c             	add    esp,0x1c
c001854a:	5b                   	pop    ebx
c001854b:	5e                   	pop    esi
c001854c:	5f                   	pop    edi
c001854d:	5d                   	pop    ebp
c001854e:	c3                   	ret    
c001854f:	c7 44 24 30 56 19 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031956
c0018557:	83 c4 1c             	add    esp,0x1c
c001855a:	5b                   	pop    ebx
c001855b:	5e                   	pop    esi
c001855c:	5f                   	pop    edi
c001855d:	5d                   	pop    ebp
c001855e:	e9 f7 7e 00 00       	jmp    c002045a <KePanic(char const*)>
c0018563:	90                   	nop

c0018564 <VAS::freeAllocatedPages(unsigned long)>:
c0018564:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018568:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001856c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018570:	74 09                	je     c001857b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018576:	e9 ac fe ff ff       	jmp    c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c001857b:	c7 44 24 04 c4 16 03 c0 	mov    DWORD PTR [esp+0x4],0xc00316c4
c0018583:	e9 b9 0e 00 00       	jmp    c0019441 <Dbg::kprintf(char const*, ...)>

c0018588 <VAS::virtualToPhysical(unsigned long)>:
c0018588:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001858c:	50                   	push   eax
c001858d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018591:	52                   	push   edx
c0018592:	e8 71 fe ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c0018597:	59                   	pop    ecx
c0018598:	8b 00                	mov    eax,DWORD PTR [eax]
c001859a:	5a                   	pop    edx
c001859b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185a0:	c3                   	ret    
c00185a1:	90                   	nop

c00185a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00185a2:	55                   	push   ebp
c00185a3:	57                   	push   edi
c00185a4:	56                   	push   esi
c00185a5:	53                   	push   ebx
c00185a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00185aa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00185ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00185b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00185b6:	85 db                	test   ebx,ebx
c00185b8:	7e 24                	jle    c00185de <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00185ba:	c1 e3 0c             	shl    ebx,0xc
c00185bd:	01 f3                	add    ebx,esi
c00185bf:	56                   	push   esi
c00185c0:	81 c6 00 10 00 00    	add    esi,0x1000
c00185c6:	55                   	push   ebp
c00185c7:	e8 3c fe ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c00185cc:	5a                   	pop    edx
c00185cd:	59                   	pop    ecx
c00185ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c00185d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185d4:	21 f9                	and    ecx,edi
c00185d6:	09 d1                	or     ecx,edx
c00185d8:	39 f3                	cmp    ebx,esi
c00185da:	89 08                	mov    DWORD PTR [eax],ecx
c00185dc:	75 e1                	jne    c00185bf <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00185de:	5b                   	pop    ebx
c00185df:	5e                   	pop    esi
c00185e0:	5f                   	pop    edi
c00185e1:	5d                   	pop    ebp
c00185e2:	c3                   	ret    
c00185e3:	90                   	nop

c00185e4 <VAS::VAS()>:
c00185e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00185ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00185fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00185fe:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c0018603:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018607:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001860b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001860f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018616:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001861d:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c0018622:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018627:	29 c2                	sub    edx,eax
c0018629:	89 d0                	mov    eax,edx
c001862b:	05 ff 0f 00 00       	add    eax,0xfff
c0018630:	c1 e8 0c             	shr    eax,0xc
c0018633:	89 c2                	mov    edx,eax
c0018635:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001863a:	6a 04                	push   0x4
c001863c:	6a ff                	push   0xffffffff
c001863e:	52                   	push   edx
c001863f:	50                   	push   eax
c0018640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018644:	e8 59 ff ff ff       	call   c00185a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018649:	83 c4 14             	add    esp,0x14
c001864c:	90                   	nop
c001864d:	c3                   	ret    

c001864e <VAS::setToWriteCombining(unsigned long, int)>:
c001864e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018653:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018659:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018660:	75 01                	jne    c0018663 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018662:	c3                   	ret    
c0018663:	68 80 00 00 00       	push   0x80
c0018668:	6a ff                	push   0xffffffff
c001866a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001866e:	50                   	push   eax
c001866f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018673:	52                   	push   edx
c0018674:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018678:	51                   	push   ecx
c0018679:	e8 24 ff ff ff       	call   c00185a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001867e:	83 c4 14             	add    esp,0x14
c0018681:	c3                   	ret    

c0018682 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018682:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018686:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001868d:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018690:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018695:	83 f8 01             	cmp    eax,0x1
c0018698:	19 c0                	sbb    eax,eax
c001869a:	83 ca 03             	or     edx,0x3
c001869d:	83 e0 fc             	and    eax,0xfffffffc
c00186a0:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00186a7:	0f 20 d8             	mov    eax,cr3
c00186aa:	0f 22 d8             	mov    cr3,eax
c00186ad:	c3                   	ret    

c00186ae <VAS::~VAS()>:
c00186ae:	83 ec 2c             	sub    esp,0x2c
c00186b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00186b9:	fa                   	cli    
c00186ba:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00186bf:	83 c0 01             	add    eax,0x1
c00186c2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00186c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00186cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00186ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00186d1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00186d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00186db:	6a 01                	push   0x1
c00186dd:	50                   	push   eax
c00186de:	e8 9f ff ff ff       	call   c0018682 <VAS::mapOtherVASIn(bool, VAS*)>
c00186e3:	83 c4 0c             	add    esp,0xc
c00186e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00186ee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00186f6:	0f 8f d8 00 00 00    	jg     c00187d4 <VAS::~VAS()+0x126>
c00186fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018700:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018703:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018707:	c1 e2 02             	shl    edx,0x2
c001870a:	01 d0                	add    eax,edx
c001870c:	8b 00                	mov    eax,DWORD PTR [eax]
c001870e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018716:	83 e0 01             	and    eax,0x1
c0018719:	0f 84 ab 00 00 00    	je     c00187ca <VAS::~VAS()+0x11c>
c001871f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018727:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001872f:	7f 74                	jg     c00187a5 <VAS::~VAS()+0xf7>
c0018731:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018735:	c1 e0 0a             	shl    eax,0xa
c0018738:	89 c2                	mov    edx,eax
c001873a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001873e:	01 d0                	add    eax,edx
c0018740:	c1 e0 0c             	shl    eax,0xc
c0018743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018747:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001874c:	8b 00                	mov    eax,DWORD PTR [eax]
c001874e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018751:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018757:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001875b:	6a 01                	push   0x1
c001875d:	50                   	push   eax
c001875e:	e8 77 fc ff ff       	call   c00183da <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018763:	83 c4 0c             	add    esp,0xc
c0018766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001876a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001876e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018770:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018778:	25 01 04 00 00       	and    eax,0x401
c001877d:	3d 01 04 00 00       	cmp    eax,0x401
c0018782:	75 1a                	jne    c001879e <VAS::~VAS()+0xf0>
c0018784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018788:	25 00 f0 ff ff       	and    eax,0xfffff000
c001878d:	83 ec 0c             	sub    esp,0xc
c0018790:	50                   	push   eax
c0018791:	e8 bb e0 ff ff       	call   c0016851 <Phys::freePage(unsigned long)>
c0018796:	83 c4 10             	add    esp,0x10
c0018799:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001879e:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00187a3:	eb 82                	jmp    c0018727 <VAS::~VAS()+0x79>
c00187a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187a9:	25 00 04 00 00       	and    eax,0x400
c00187ae:	74 1a                	je     c00187ca <VAS::~VAS()+0x11c>
c00187b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00187b9:	83 ec 0c             	sub    esp,0xc
c00187bc:	50                   	push   eax
c00187bd:	e8 8f e0 ff ff       	call   c0016851 <Phys::freePage(unsigned long)>
c00187c2:	83 c4 10             	add    esp,0x10
c00187c5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187ca:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00187cf:	e9 1a ff ff ff       	jmp    c00186ee <VAS::~VAS()+0x40>
c00187d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00187db:	83 ec 0c             	sub    esp,0xc
c00187de:	50                   	push   eax
c00187df:	e8 43 fc ff ff       	call   c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c00187e4:	83 c4 10             	add    esp,0x10
c00187e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00187ee:	83 ec 0c             	sub    esp,0xc
c00187f1:	50                   	push   eax
c00187f2:	e8 5a e0 ff ff       	call   c0016851 <Phys::freePage(unsigned long)>
c00187f7:	83 c4 10             	add    esp,0x10
c00187fa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00187ff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018804:	83 e8 01             	sub    eax,0x1
c0018807:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001880c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018811:	85 c0                	test   eax,eax
c0018813:	75 01                	jne    c0018816 <VAS::~VAS()+0x168>
c0018815:	fb                   	sti    
c0018816:	90                   	nop
c0018817:	83 c4 2c             	add    esp,0x2c
c001881a:	c3                   	ret    
c001881b:	90                   	nop

c001881c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001881c:	55                   	push   ebp
c001881d:	57                   	push   edi
c001881e:	56                   	push   esi
c001881f:	53                   	push   ebx
c0018820:	83 ec 1c             	sub    esp,0x1c
c0018823:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018827:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001882b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018831:	77 08                	ja     c001883b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0018833:	0f 20 d8             	mov    eax,cr3
c0018836:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0018839:	75 49                	jne    c0018884 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001883b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001883f:	09 d8                	or     eax,ebx
c0018841:	a9 ff 0f 00 00       	test   eax,0xfff
c0018846:	75 59                	jne    c00188a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0018848:	89 de                	mov    esi,ebx
c001884a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001884d:	c1 ee 16             	shr    esi,0x16
c0018850:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018857:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001885b:	74 56                	je     c00188b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c001885d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018861:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018865:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001886b:	c1 eb 0a             	shr    ebx,0xa
c001886e:	c1 e6 0c             	shl    esi,0xc
c0018871:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018877:	09 d0                	or     eax,edx
c0018879:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001887c:	83 c4 1c             	add    esp,0x1c
c001887f:	5b                   	pop    ebx
c0018880:	5e                   	pop    esi
c0018881:	5f                   	pop    edi
c0018882:	5d                   	pop    ebp
c0018883:	c3                   	ret    
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	68 e8 16 03 c0       	push   0xc00316e8
c001888c:	e8 b0 0b 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0018891:	83 c4 10             	add    esp,0x10
c0018894:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018898:	09 d8                	or     eax,ebx
c001889a:	a9 ff 0f 00 00       	test   eax,0xfff
c001889f:	74 a7                	je     c0018848 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188a1:	83 ec 0c             	sub    esp,0xc
c00188a4:	68 50 17 03 c0       	push   0xc0031750
c00188a9:	e8 ac 7b 00 00       	call   c002045a <KePanic(char const*)>
c00188ae:	83 c4 10             	add    esp,0x10
c00188b1:	eb 95                	jmp    c0018848 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00188b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00188b7:	e8 fe df ff ff       	call   c00168ba <Phys::allocatePage()>
c00188bc:	83 ec 0c             	sub    esp,0xc
c00188bf:	89 c5                	mov    ebp,eax
c00188c1:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00188c7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00188cb:	6a 01                	push   0x1
c00188cd:	e8 37 f8 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c00188d2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00188d9:	6a 01                	push   0x1
c00188db:	50                   	push   eax
c00188dc:	55                   	push   ebp
c00188dd:	81 cd 07 04 00 00    	or     ebp,0x407
c00188e3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00188e7:	51                   	push   ecx
c00188e8:	e8 29 01 00 00       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00188ed:	83 c4 1c             	add    esp,0x1c
c00188f0:	68 00 10 00 00       	push   0x1000
c00188f5:	6a 00                	push   0x0
c00188f7:	50                   	push   eax
c00188f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188fc:	e8 ef 7b fe ff       	call   c00004f0 <memset>
c0018901:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018905:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018908:	e8 1a fb ff ff       	call   c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c001890d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018911:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018914:	83 c4 10             	add    esp,0x10
c0018917:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001891a:	e9 3e ff ff ff       	jmp    c001885d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001891f:	90                   	nop

c0018920 <VAS::allocatePages(int, int)>:
c0018920:	55                   	push   ebp
c0018921:	57                   	push   edi
c0018922:	56                   	push   esi
c0018923:	53                   	push   ebx
c0018924:	83 ec 1c             	sub    esp,0x1c
c0018927:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001892b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001892f:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018933:	75 71                	jne    c00189a6 <VAS::allocatePages(int, int)+0x86>
c0018935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018938:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001893c:	85 c0                	test   eax,eax
c001893e:	74 4d                	je     c001898d <VAS::allocatePages(int, int)+0x6d>
c0018940:	89 dd                	mov    ebp,ebx
c0018942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018946:	c1 e5 0c             	shl    ebp,0xc
c0018949:	01 c5                	add    ebp,eax
c001894b:	85 db                	test   ebx,ebx
c001894d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018950:	7e 29                	jle    c001897b <VAS::allocatePages(int, int)+0x5b>
c0018952:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018956:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001895a:	81 cf 00 04 00 00    	or     edi,0x400
c0018960:	e8 55 df ff ff       	call   c00168ba <Phys::allocatePage()>
c0018965:	57                   	push   edi
c0018966:	53                   	push   ebx
c0018967:	81 c3 00 10 00 00    	add    ebx,0x1000
c001896d:	50                   	push   eax
c001896e:	56                   	push   esi
c001896f:	e8 a8 fe ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018974:	83 c4 10             	add    esp,0x10
c0018977:	39 dd                	cmp    ebp,ebx
c0018979:	75 e5                	jne    c0018960 <VAS::allocatePages(int, int)+0x40>
c001897b:	0f 20 d8             	mov    eax,cr3
c001897e:	0f 22 d8             	mov    cr3,eax
c0018981:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018985:	83 c4 1c             	add    esp,0x1c
c0018988:	5b                   	pop    ebx
c0018989:	5e                   	pop    esi
c001898a:	5f                   	pop    edi
c001898b:	5d                   	pop    ebp
c001898c:	c3                   	ret    
c001898d:	83 ec 0c             	sub    esp,0xc
c0018990:	68 74 17 03 c0       	push   0xc0031774
c0018995:	e8 c0 7a 00 00       	call   c002045a <KePanic(char const*)>
c001899a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001899d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189a1:	83 c4 10             	add    esp,0x10
c00189a4:	eb 9a                	jmp    c0018940 <VAS::allocatePages(int, int)+0x20>
c00189a6:	83 ec 0c             	sub    esp,0xc
c00189a9:	53                   	push   ebx
c00189aa:	e8 5a f7 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c00189af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00189bb:	77 37                	ja     c00189f4 <VAS::allocatePages(int, int)+0xd4>
c00189bd:	85 db                	test   ebx,ebx
c00189bf:	7e ba                	jle    c001897b <VAS::allocatePages(int, int)+0x5b>
c00189c1:	c1 e3 0c             	shl    ebx,0xc
c00189c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00189c8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00189cc:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00189cf:	81 cf 00 04 00 00    	or     edi,0x400
c00189d5:	89 c3                	mov    ebx,eax
c00189d7:	e8 de de ff ff       	call   c00168ba <Phys::allocatePage()>
c00189dc:	57                   	push   edi
c00189dd:	53                   	push   ebx
c00189de:	81 c3 00 10 00 00    	add    ebx,0x1000
c00189e4:	50                   	push   eax
c00189e5:	56                   	push   esi
c00189e6:	e8 31 fe ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	39 dd                	cmp    ebp,ebx
c00189f0:	75 e5                	jne    c00189d7 <VAS::allocatePages(int, int)+0xb7>
c00189f2:	eb 87                	jmp    c001897b <VAS::allocatePages(int, int)+0x5b>
c00189f4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00189f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00189ff:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018a06:	74 b5                	je     c00189bd <VAS::allocatePages(int, int)+0x9d>
c0018a08:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018a0c:	80 ce 01             	or     dh,0x1
c0018a0f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0018a13:	eb a8                	jmp    c00189bd <VAS::allocatePages(int, int)+0x9d>
c0018a15:	90                   	nop

c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018a16:	55                   	push   ebp
c0018a17:	57                   	push   edi
c0018a18:	56                   	push   esi
c0018a19:	53                   	push   ebx
c0018a1a:	83 ec 0c             	sub    esp,0xc
c0018a1d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018a21:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018a25:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018a29:	85 db                	test   ebx,ebx
c0018a2b:	7e 2f                	jle    c0018a5c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018a2d:	c1 e3 0c             	shl    ebx,0xc
c0018a30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a34:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018a38:	01 d3                	add    ebx,edx
c0018a3a:	55                   	push   ebp
c0018a3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a43:	29 c2                	sub    edx,eax
c0018a45:	01 f2                	add    edx,esi
c0018a47:	52                   	push   edx
c0018a48:	56                   	push   esi
c0018a49:	81 c6 00 10 00 00    	add    esi,0x1000
c0018a4f:	57                   	push   edi
c0018a50:	e8 c7 fd ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018a55:	83 c4 10             	add    esp,0x10
c0018a58:	39 de                	cmp    esi,ebx
c0018a5a:	75 de                	jne    c0018a3a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0018a5c:	0f 20 d8             	mov    eax,cr3
c0018a5f:	0f 22 d8             	mov    cr3,eax
c0018a62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a66:	83 c4 0c             	add    esp,0xc
c0018a69:	5b                   	pop    ebx
c0018a6a:	5e                   	pop    esi
c0018a6b:	5f                   	pop    edi
c0018a6c:	5d                   	pop    ebp
c0018a6d:	c3                   	ret    

c0018a6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018a6e:	55                   	push   ebp
c0018a6f:	57                   	push   edi
c0018a70:	56                   	push   esi
c0018a71:	53                   	push   ebx
c0018a72:	83 ec 1c             	sub    esp,0x1c
c0018a75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018a79:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0018a7d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018a81:	09 f8                	or     eax,edi
c0018a83:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018a87:	a9 ff 0f 00 00       	test   eax,0xfff
c0018a8c:	75 4f                	jne    c0018add <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018a8e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018a92:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018a95:	c1 eb 16             	shr    ebx,0x16
c0018a98:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0018a9f:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0018aa3:	74 52                	je     c0018af7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0018aa5:	0f b6 f2             	movzx  esi,dl
c0018aa8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018aac:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018ab0:	c1 e8 0a             	shr    eax,0xa
c0018ab3:	83 fe 01             	cmp    esi,0x1
c0018ab6:	19 d2                	sbb    edx,edx
c0018ab8:	c1 e3 0c             	shl    ebx,0xc
c0018abb:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0018ac1:	25 fc 0f 00 00       	and    eax,0xffc
c0018ac6:	01 d8                	add    eax,ebx
c0018ac8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018acc:	09 d9                	or     ecx,ebx
c0018ace:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018ad5:	83 c4 1c             	add    esp,0x1c
c0018ad8:	5b                   	pop    ebx
c0018ad9:	5e                   	pop    esi
c0018ada:	5f                   	pop    edi
c0018adb:	5d                   	pop    ebp
c0018adc:	c3                   	ret    
c0018add:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ae1:	83 ec 0c             	sub    esp,0xc
c0018ae4:	68 a0 17 03 c0       	push   0xc00317a0
c0018ae9:	e8 6c 79 00 00       	call   c002045a <KePanic(char const*)>
c0018aee:	83 c4 10             	add    esp,0x10
c0018af1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018af5:	eb 97                	jmp    c0018a8e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018afb:	e8 ba dd ff ff       	call   c00168ba <Phys::allocatePage()>
c0018b00:	83 ec 0c             	sub    esp,0xc
c0018b03:	89 c5                	mov    ebp,eax
c0018b05:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018b0b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018b0f:	6a 01                	push   0x1
c0018b11:	e8 f3 f5 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c0018b16:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018b1d:	6a 01                	push   0x1
c0018b1f:	50                   	push   eax
c0018b20:	55                   	push   ebp
c0018b21:	81 cd 07 04 00 00    	or     ebp,0x407
c0018b27:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018b2b:	51                   	push   ecx
c0018b2c:	e8 e5 fe ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b31:	83 c4 1c             	add    esp,0x1c
c0018b34:	68 00 10 00 00       	push   0x1000
c0018b39:	6a 00                	push   0x0
c0018b3b:	50                   	push   eax
c0018b3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018b40:	e8 ab 79 fe ff       	call   c00004f0 <memset>
c0018b45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018b49:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018b4c:	e8 d6 f8 ff ff       	call   c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c0018b51:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0018b54:	83 c4 10             	add    esp,0x10
c0018b57:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0018b5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b5e:	e9 42 ff ff ff       	jmp    c0018aa5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0018b63:	90                   	nop

c0018b64 <VAS::VAS(bool)>:
c0018b64:	53                   	push   ebx
c0018b65:	83 ec 28             	sub    esp,0x28
c0018b68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b8a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018b8e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018b91:	e8 24 dd ff ff       	call   c00168ba <Phys::allocatePage()>
c0018b96:	89 c2                	mov    edx,eax
c0018b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b9c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018b9f:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018ba5:	83 ec 0c             	sub    esp,0xc
c0018ba8:	6a 01                	push   0x1
c0018baa:	e8 5a f5 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c0018baf:	83 c4 10             	add    esp,0x10
c0018bb2:	89 c2                	mov    edx,eax
c0018bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018bbb:	83 ec 0c             	sub    esp,0xc
c0018bbe:	6a 03                	push   0x3
c0018bc0:	6a 01                	push   0x1
c0018bc2:	52                   	push   edx
c0018bc3:	50                   	push   eax
c0018bc4:	53                   	push   ebx
c0018bc5:	e8 4c fe ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018bca:	83 c4 20             	add    esp,0x20
c0018bcd:	89 c2                	mov    edx,eax
c0018bcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bd3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018bd6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018bde:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018be6:	7f 1d                	jg     c0018c05 <VAS::VAS(bool)+0xa1>
c0018be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018bf3:	c1 e2 02             	shl    edx,0x2
c0018bf6:	01 d0                	add    eax,edx
c0018bf8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018bfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018c03:	eb d9                	jmp    c0018bde <VAS::VAS(bool)+0x7a>
c0018c05:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018c0d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018c15:	7f 7e                	jg     c0018c95 <VAS::VAS(bool)+0x131>
c0018c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c1b:	2d 00 02 00 00       	sub    eax,0x200
c0018c20:	c1 e0 0c             	shl    eax,0xc
c0018c23:	83 c8 05             	or     eax,0x5
c0018c26:	89 c2                	mov    edx,eax
c0018c28:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018c2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c33:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018c39:	83 e0 10             	and    eax,0x10
c0018c3c:	0f b6 c0             	movzx  eax,al
c0018c3f:	85 c0                	test   eax,eax
c0018c41:	74 07                	je     c0018c4a <VAS::VAS(bool)+0xe6>
c0018c43:	b8 00 01 00 00       	mov    eax,0x100
c0018c48:	eb 05                	jmp    c0018c4f <VAS::VAS(bool)+0xeb>
c0018c4a:	b8 00 00 00 00       	mov    eax,0x0
c0018c4f:	09 d0                	or     eax,edx
c0018c51:	89 c1                	mov    ecx,eax
c0018c53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c5e:	c1 e2 02             	shl    edx,0x2
c0018c61:	01 d0                	add    eax,edx
c0018c63:	89 ca                	mov    edx,ecx
c0018c65:	89 10                	mov    DWORD PTR [eax],edx
c0018c67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c6b:	2d 40 03 00 00       	sub    eax,0x340
c0018c70:	83 f8 7f             	cmp    eax,0x7f
c0018c73:	77 16                	ja     c0018c8b <VAS::VAS(bool)+0x127>
c0018c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018c80:	c1 e2 02             	shl    edx,0x2
c0018c83:	01 d0                	add    eax,edx
c0018c85:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018c8b:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018c90:	e9 78 ff ff ff       	jmp    c0018c0d <VAS::VAS(bool)+0xa9>
c0018c95:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018c9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ca0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ca6:	83 e0 10             	and    eax,0x10
c0018ca9:	0f b6 c0             	movzx  eax,al
c0018cac:	85 c0                	test   eax,eax
c0018cae:	74 07                	je     c0018cb7 <VAS::VAS(bool)+0x153>
c0018cb0:	b8 03 41 00 00       	mov    eax,0x4103
c0018cb5:	eb 05                	jmp    c0018cbc <VAS::VAS(bool)+0x158>
c0018cb7:	b8 03 40 00 00       	mov    eax,0x4003
c0018cbc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018cc0:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018cc3:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018cc9:	89 02                	mov    DWORD PTR [edx],eax
c0018ccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ccf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018cd2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018cd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018cdd:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ce3:	83 e0 10             	and    eax,0x10
c0018ce6:	0f b6 c0             	movzx  eax,al
c0018ce9:	85 c0                	test   eax,eax
c0018ceb:	74 07                	je     c0018cf4 <VAS::VAS(bool)+0x190>
c0018ced:	b8 00 01 00 00       	mov    eax,0x100
c0018cf2:	eb 05                	jmp    c0018cf9 <VAS::VAS(bool)+0x195>
c0018cf4:	b8 00 00 00 00       	mov    eax,0x0
c0018cf9:	09 c2                	or     edx,eax
c0018cfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d02:	05 fc 0f 00 00       	add    eax,0xffc
c0018d07:	83 ca 03             	or     edx,0x3
c0018d0a:	89 10                	mov    DWORD PTR [eax],edx
c0018d0c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d17:	83 ec 0c             	sub    esp,0xc
c0018d1a:	50                   	push   eax
c0018d1b:	e8 00 2a 00 00       	call   c001b720 <Device::getName()>
c0018d20:	83 c4 10             	add    esp,0x10
c0018d23:	83 ec 08             	sub    esp,0x8
c0018d26:	68 70 19 03 c0       	push   0xc0031970
c0018d2b:	50                   	push   eax
c0018d2c:	e8 1f 7a fe ff       	call   c0000750 <strcmp>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	85 c0                	test   eax,eax
c0018d36:	0f 94 c0             	sete   al
c0018d39:	0f b6 c0             	movzx  eax,al
c0018d3c:	85 c0                	test   eax,eax
c0018d3e:	74 68                	je     c0018da8 <VAS::VAS(bool)+0x244>
c0018d40:	fa                   	cli    
c0018d41:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d4c:	05 7c 09 00 00       	add    eax,0x97c
c0018d51:	83 ec 0c             	sub    esp,0xc
c0018d54:	50                   	push   eax
c0018d55:	e8 f4 d2 ff ff       	call   c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d5a:	83 c4 10             	add    esp,0x10
c0018d5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018d62:	89 c3                	mov    ebx,eax
c0018d64:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018d69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018d6f:	05 7c 09 00 00       	add    eax,0x97c
c0018d74:	83 ec 0c             	sub    esp,0xc
c0018d77:	50                   	push   eax
c0018d78:	e8 d1 d2 ff ff       	call   c001604e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	83 ec 08             	sub    esp,0x8
c0018d83:	50                   	push   eax
c0018d84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d88:	e8 7b f6 ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c0018d8d:	83 c4 10             	add    esp,0x10
c0018d90:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018d97:	6a 11                	push   0x11
c0018d99:	53                   	push   ebx
c0018d9a:	50                   	push   eax
c0018d9b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d9f:	e8 78 fa ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	fb                   	sti    
c0018da8:	90                   	nop
c0018da9:	83 c4 28             	add    esp,0x28
c0018dac:	5b                   	pop    ebx
c0018dad:	c3                   	ret    

c0018dae <VAS::evict(unsigned long)>:
c0018dae:	55                   	push   ebp
c0018daf:	57                   	push   edi
c0018db0:	56                   	push   esi
c0018db1:	53                   	push   ebx
c0018db2:	83 ec 1c             	sub    esp,0x1c
c0018db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018db9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018dbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018dc1:	e8 a1 f4 ff ff       	call   c0018267 <Virt::allocateSwapfilePage()>
c0018dc6:	89 c7                	mov    edi,eax
c0018dc8:	a1 ac 3e 03 c0       	mov    eax,ds:0xc0033eac
c0018dcd:	85 c0                	test   eax,eax
c0018dcf:	7e 40                	jle    c0018e11 <VAS::evict(unsigned long)+0x63>
c0018dd1:	89 ee                	mov    esi,ebp
c0018dd3:	31 db                	xor    ebx,ebx
c0018dd5:	83 ec 0c             	sub    esp,0xc
c0018dd8:	57                   	push   edi
c0018dd9:	e8 73 f4 ff ff       	call   c0018251 <Virt::swapIDToSector(unsigned long)>
c0018dde:	89 34 24             	mov    DWORD PTR [esp],esi
c0018de1:	01 d8                	add    eax,ebx
c0018de3:	6a 01                	push   0x1
c0018de5:	31 d2                	xor    edx,edx
c0018de7:	83 c3 01             	add    ebx,0x1
c0018dea:	52                   	push   edx
c0018deb:	81 c6 00 02 00 00    	add    esi,0x200
c0018df1:	50                   	push   eax
c0018df2:	0f be 05 b8 3e 03 c0 	movsx  eax,BYTE PTR ds:0xc0033eb8
c0018df9:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018e00:	50                   	push   eax
c0018e01:	e8 1a 3b 00 00       	call   c001c920 <LogicalDisk::write(unsigned long long, int, void*)>
c0018e06:	83 c4 20             	add    esp,0x20
c0018e09:	39 1d ac 3e 03 c0    	cmp    DWORD PTR ds:0xc0033eac,ebx
c0018e0f:	7f c4                	jg     c0018dd5 <VAS::evict(unsigned long)+0x27>
c0018e11:	83 ec 08             	sub    esp,0x8
c0018e14:	c1 e7 0c             	shl    edi,0xc
c0018e17:	55                   	push   ebp
c0018e18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e1c:	50                   	push   eax
c0018e1d:	e8 e6 f5 ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c0018e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e24:	89 d3                	mov    ebx,edx
c0018e26:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018e2c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018e32:	09 d7                	or     edi,edx
c0018e34:	89 38                	mov    DWORD PTR [eax],edi
c0018e36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e39:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018e3f:	83 c2 01             	add    edx,0x1
c0018e42:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018e48:	e8 04 da ff ff       	call   c0016851 <Phys::freePage(unsigned long)>
c0018e4d:	0f 20 d8             	mov    eax,cr3
c0018e50:	0f 22 d8             	mov    cr3,eax
c0018e53:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018e59:	51                   	push   ecx
c0018e5a:	55                   	push   ebp
c0018e5b:	53                   	push   ebx
c0018e5c:	68 c4 17 03 c0       	push   0xc00317c4
c0018e61:	e8 db 05 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0018e66:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018e6b:	c7 44 24 50 7e 19 03 c0 	mov    DWORD PTR [esp+0x50],0xc003197e
c0018e73:	8d 50 01             	lea    edx,[eax+0x1]
c0018e76:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018e7a:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018e80:	83 c4 3c             	add    esp,0x3c
c0018e83:	5b                   	pop    ebx
c0018e84:	5e                   	pop    esi
c0018e85:	5f                   	pop    edi
c0018e86:	5d                   	pop    ebp
c0018e87:	e9 b5 05 00 00       	jmp    c0019441 <Dbg::kprintf(char const*, ...)>

c0018e8c <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018e8c:	55                   	push   ebp
c0018e8d:	57                   	push   edi
c0018e8e:	56                   	push   esi
c0018e8f:	53                   	push   ebx
c0018e90:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018e96:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018e9d:	89 f3                	mov    ebx,esi
c0018e9f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018ea5:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018eab:	77 22                	ja     c0018ecf <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018ead:	83 ec 08             	sub    esp,0x8
c0018eb0:	56                   	push   esi
c0018eb1:	68 a1 19 03 c0       	push   0xc00319a1
c0018eb6:	e8 86 05 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0018ebb:	83 c4 10             	add    esp,0x10
c0018ebe:	85 db                	test   ebx,ebx
c0018ec0:	75 2a                	jne    c0018eec <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018ec2:	31 c0                	xor    eax,eax
c0018ec4:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018eca:	5b                   	pop    ebx
c0018ecb:	5e                   	pop    esi
c0018ecc:	5f                   	pop    edi
c0018ecd:	5d                   	pop    ebp
c0018ece:	c3                   	ret    
c0018ecf:	83 ec 0c             	sub    esp,0xc
c0018ed2:	68 8f 19 03 c0       	push   0xc003198f
c0018ed7:	e8 7e 75 00 00       	call   c002045a <KePanic(char const*)>
c0018edc:	5f                   	pop    edi
c0018edd:	5d                   	pop    ebp
c0018ede:	56                   	push   esi
c0018edf:	68 a1 19 03 c0       	push   0xc00319a1
c0018ee4:	e8 58 05 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	83 ec 08             	sub    esp,0x8
c0018eef:	53                   	push   ebx
c0018ef0:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018ef7:	51                   	push   ecx
c0018ef8:	e8 0b f5 ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c0018efd:	83 c4 10             	add    esp,0x10
c0018f00:	89 c2                	mov    edx,eax
c0018f02:	85 c0                	test   eax,eax
c0018f04:	74 bc                	je     c0018ec2 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f06:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018f08:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018f0e:	0f 85 c0 00 00 00    	jne    c0018fd4 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018f14:	89 e8                	mov    eax,ebp
c0018f16:	25 01 04 00 00       	and    eax,0x401
c0018f1b:	3d 00 04 00 00       	cmp    eax,0x400
c0018f20:	75 a0                	jne    c0018ec2 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018f22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018f26:	c1 ed 0c             	shr    ebp,0xc
c0018f29:	e8 8c d9 ff ff       	call   c00168ba <Phys::allocatePage()>
c0018f2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018f32:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018f34:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018f3a:	09 c1                	or     ecx,eax
c0018f3c:	81 c9 01 08 00 00    	or     ecx,0x801
c0018f42:	89 0a                	mov    DWORD PTR [edx],ecx
c0018f44:	8b 15 ac 3e 03 c0    	mov    edx,DWORD PTR ds:0xc0033eac
c0018f4a:	85 d2                	test   edx,edx
c0018f4c:	7e 40                	jle    c0018f8e <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018f4e:	89 df                	mov    edi,ebx
c0018f50:	31 f6                	xor    esi,esi
c0018f52:	83 ec 0c             	sub    esp,0xc
c0018f55:	55                   	push   ebp
c0018f56:	e8 f6 f2 ff ff       	call   c0018251 <Virt::swapIDToSector(unsigned long)>
c0018f5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018f5e:	01 f0                	add    eax,esi
c0018f60:	6a 01                	push   0x1
c0018f62:	31 d2                	xor    edx,edx
c0018f64:	83 c6 01             	add    esi,0x1
c0018f67:	52                   	push   edx
c0018f68:	81 c7 00 02 00 00    	add    edi,0x200
c0018f6e:	50                   	push   eax
c0018f6f:	0f be 05 b8 3e 03 c0 	movsx  eax,BYTE PTR ds:0xc0033eb8
c0018f76:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018f7d:	50                   	push   eax
c0018f7e:	e8 31 39 00 00       	call   c001c8b4 <LogicalDisk::read(unsigned long long, int, void*)>
c0018f83:	83 c4 20             	add    esp,0x20
c0018f86:	39 35 ac 3e 03 c0    	cmp    DWORD PTR ds:0xc0033eac,esi
c0018f8c:	7f c4                	jg     c0018f52 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018f8e:	83 ec 04             	sub    esp,0x4
c0018f91:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018f96:	83 e8 01             	sub    eax,0x1
c0018f99:	50                   	push   eax
c0018f9a:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018f9f:	53                   	push   ebx
c0018fa0:	68 b4 19 03 c0       	push   0xc00319b4
c0018fa5:	e8 97 04 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0018faa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018fad:	e8 7c f2 ff ff       	call   c001822e <Virt::freeSwapfilePage(unsigned long)>
c0018fb2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	83 e8 01             	sub    eax,0x1
c0018fbd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018fc2:	85 c0                	test   eax,eax
c0018fc4:	75 01                	jne    c0018fc7 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018fc6:	fb                   	sti    
c0018fc7:	0f 20 d8             	mov    eax,cr3
c0018fca:	0f 22 d8             	mov    cr3,eax
c0018fcd:	b0 01                	mov    al,0x1
c0018fcf:	e9 f0 fe ff ff       	jmp    c0018ec4 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018fd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fd8:	bd 00 10 00 00       	mov    ebp,0x1000
c0018fdd:	83 ec 0c             	sub    esp,0xc
c0018fe0:	89 de                	mov    esi,ebx
c0018fe2:	68 f4 17 03 c0       	push   0xc00317f4
c0018fe7:	e8 55 04 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0018fec:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018ff0:	e8 c5 d8 ff ff       	call   c00168ba <Phys::allocatePage()>
c0018ff5:	89 e9                	mov    ecx,ebp
c0018ff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ff9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ffd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018fff:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0019005:	09 c8                	or     eax,ecx
c0019007:	83 c8 02             	or     eax,0x2
c001900a:	89 02                	mov    DWORD PTR [edx],eax
c001900c:	0f 20 d8             	mov    eax,cr3
c001900f:	0f 22 d8             	mov    cr3,eax
c0019012:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019016:	89 df                	mov    edi,ebx
c0019018:	89 e9                	mov    ecx,ebp
c001901a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001901c:	b0 01                	mov    al,0x1
c001901e:	83 c4 10             	add    esp,0x10
c0019021:	e9 9e fe ff ff       	jmp    c0018ec4 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0019026 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0019026:	55                   	push   ebp
c0019027:	57                   	push   edi
c0019028:	56                   	push   esi
c0019029:	53                   	push   ebx
c001902a:	83 ec 28             	sub    esp,0x28
c001902d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0019031:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019035:	50                   	push   eax
c0019036:	e8 ce f0 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c001903b:	83 c4 0c             	add    esp,0xc
c001903e:	89 c5                	mov    ebp,eax
c0019040:	6a 07                	push   0x7
c0019042:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019046:	52                   	push   edx
c0019047:	56                   	push   esi
c0019048:	e8 d3 f8 ff ff       	call   c0018920 <VAS::allocatePages(int, int)>
c001904d:	83 c4 10             	add    esp,0x10
c0019050:	89 c7                	mov    edi,eax
c0019052:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019056:	85 c9                	test   ecx,ecx
c0019058:	74 2f                	je     c0019089 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c001905a:	31 db                	xor    ebx,ebx
c001905c:	e8 59 d8 ff ff       	call   c00168ba <Phys::allocatePage()>
c0019061:	83 c3 01             	add    ebx,0x1
c0019064:	6a 03                	push   0x3
c0019066:	55                   	push   ebp
c0019067:	50                   	push   eax
c0019068:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001906c:	56                   	push   esi
c001906d:	e8 aa f7 ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0019072:	6a 07                	push   0x7
c0019074:	57                   	push   edi
c0019075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019079:	50                   	push   eax
c001907a:	56                   	push   esi
c001907b:	e8 9c f7 ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0019080:	83 c4 20             	add    esp,0x20
c0019083:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0019087:	75 d3                	jne    c001905c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0019089:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001908d:	89 28                	mov    DWORD PTR [eax],ebp
c001908f:	83 c4 1c             	add    esp,0x1c
c0019092:	89 f8                	mov    eax,edi
c0019094:	5b                   	pop    ebx
c0019095:	5e                   	pop    esi
c0019096:	5f                   	pop    edi
c0019097:	5d                   	pop    ebp
c0019098:	c3                   	ret    
c0019099:	90                   	nop

c001909a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c001909a:	53                   	push   ebx
c001909b:	83 ec 14             	sub    esp,0x14
c001909e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00190a2:	68 14 18 03 c0       	push   0xc0031814
c00190a7:	e8 95 03 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00190ac:	c7 04 24 74 18 03 c0 	mov    DWORD PTR [esp],0xc0031874
c00190b3:	e8 89 03 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00190b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00190bc:	83 c4 18             	add    esp,0x18
c00190bf:	5b                   	pop    ebx
c00190c0:	e9 62 f3 ff ff       	jmp    c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c00190c5:	90                   	nop

c00190c6 <VAS::scanForEviction()>:
c00190c6:	57                   	push   edi
c00190c7:	56                   	push   esi
c00190c8:	31 f6                	xor    esi,esi
c00190ca:	53                   	push   ebx
c00190cb:	83 ec 10             	sub    esp,0x10
c00190ce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00190d2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00190d5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00190db:	75 0e                	jne    c00190eb <VAS::scanForEviction()+0x25>
c00190dd:	89 da                	mov    edx,ebx
c00190df:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00190e2:	c1 ea 16             	shr    edx,0x16
c00190e5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00190e9:	74 57                	je     c0019142 <VAS::scanForEviction()+0x7c>
c00190eb:	53                   	push   ebx
c00190ec:	57                   	push   edi
c00190ed:	e8 16 f3 ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c00190f2:	5a                   	pop    edx
c00190f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00190f5:	59                   	pop    ecx
c00190f6:	89 d1                	mov    ecx,edx
c00190f8:	c1 e9 0c             	shr    ecx,0xc
c00190fb:	74 10                	je     c001910d <VAS::scanForEviction()+0x47>
c00190fd:	89 d1                	mov    ecx,edx
c00190ff:	81 e1 01 08 00 00    	and    ecx,0x801
c0019105:	81 f9 01 08 00 00    	cmp    ecx,0x801
c001910b:	74 40                	je     c001914d <VAS::scanForEviction()+0x87>
c001910d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0019113:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0019119:	76 2d                	jbe    c0019148 <VAS::scanForEviction()+0x82>
c001911b:	83 c6 01             	add    esi,0x1
c001911e:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0019125:	83 fe 03             	cmp    esi,0x3
c0019128:	74 32                	je     c001915c <VAS::scanForEviction()+0x96>
c001912a:	31 db                	xor    ebx,ebx
c001912c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019132:	75 b7                	jne    c00190eb <VAS::scanForEviction()+0x25>
c0019134:	89 da                	mov    edx,ebx
c0019136:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0019139:	c1 ea 16             	shr    edx,0x16
c001913c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019140:	75 a9                	jne    c00190eb <VAS::scanForEviction()+0x25>
c0019142:	81 c3 00 00 40 00    	add    ebx,0x400000
c0019148:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001914b:	eb 88                	jmp    c00190d5 <VAS::scanForEviction()+0xf>
c001914d:	f6 c2 20             	test   dl,0x20
c0019150:	74 13                	je     c0019165 <VAS::scanForEviction()+0x9f>
c0019152:	83 e2 df             	and    edx,0xffffffdf
c0019155:	89 10                	mov    DWORD PTR [eax],edx
c0019157:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001915a:	eb b1                	jmp    c001910d <VAS::scanForEviction()+0x47>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	31 c0                	xor    eax,eax
c0019161:	5b                   	pop    ebx
c0019162:	5e                   	pop    esi
c0019163:	5f                   	pop    edi
c0019164:	c3                   	ret    
c0019165:	83 ec 08             	sub    esp,0x8
c0019168:	89 d0                	mov    eax,edx
c001916a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001916f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019173:	53                   	push   ebx
c0019174:	68 c9 19 03 c0       	push   0xc00319c9
c0019179:	e8 c3 02 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001917e:	58                   	pop    eax
c001917f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019182:	5a                   	pop    edx
c0019183:	51                   	push   ecx
c0019184:	57                   	push   edi
c0019185:	e8 24 fc ff ff       	call   c0018dae <VAS::evict(unsigned long)>
c001918a:	5b                   	pop    ebx
c001918b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001918e:	5e                   	pop    esi
c001918f:	50                   	push   eax
c0019190:	68 dd 19 03 c0       	push   0xc00319dd
c0019195:	e8 a7 02 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001919a:	58                   	pop    eax
c001919b:	5a                   	pop    edx
c001919c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191a0:	50                   	push   eax
c00191a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191a5:	68 f0 19 03 c0       	push   0xc00319f0
c00191aa:	e8 92 02 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00191af:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00191b2:	83 c4 10             	add    esp,0x10
c00191b5:	81 c1 00 10 00 00    	add    ecx,0x1000
c00191bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00191bf:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00191c2:	83 c4 10             	add    esp,0x10
c00191c5:	5b                   	pop    ebx
c00191c6:	5e                   	pop    esi
c00191c7:	5f                   	pop    edi
c00191c8:	c3                   	ret    

c00191c9 <mapVASFirstTime>:
c00191c9:	55                   	push   ebp
c00191ca:	57                   	push   edi
c00191cb:	56                   	push   esi
c00191cc:	53                   	push   ebx
c00191cd:	83 ec 0c             	sub    esp,0xc
c00191d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00191d8:	83 fa 01             	cmp    edx,0x1
c00191db:	0f 84 cb 00 00 00    	je     c00192ac <mapVASFirstTime+0xe3>
c00191e1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00191e4:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00191e7:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00191ec:	c1 e5 15             	shl    ebp,0x15
c00191ef:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00191f4:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00191fa:	29 eb                	sub    ebx,ebp
c00191fc:	29 ef                	sub    edi,ebp
c00191fe:	e8 b7 d6 ff ff       	call   c00168ba <Phys::allocatePage()>
c0019203:	83 ec 0c             	sub    esp,0xc
c0019206:	68 03 04 00 00       	push   0x403
c001920b:	6a 01                	push   0x1
c001920d:	53                   	push   ebx
c001920e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019214:	50                   	push   eax
c0019215:	56                   	push   esi
c0019216:	e8 fb f7 ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001921b:	83 c4 20             	add    esp,0x20
c001921e:	39 fb                	cmp    ebx,edi
c0019220:	75 dc                	jne    c00191fe <mapVASFirstTime+0x35>
c0019222:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0019227:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001922c:	29 eb                	sub    ebx,ebp
c001922e:	29 ef                	sub    edi,ebp
c0019230:	e8 85 d6 ff ff       	call   c00168ba <Phys::allocatePage()>
c0019235:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019239:	83 fa 01             	cmp    edx,0x1
c001923c:	19 d2                	sbb    edx,edx
c001923e:	83 ec 0c             	sub    esp,0xc
c0019241:	83 e2 04             	and    edx,0x4
c0019244:	81 c2 03 04 00 00    	add    edx,0x403
c001924a:	52                   	push   edx
c001924b:	6a 01                	push   0x1
c001924d:	53                   	push   ebx
c001924e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019254:	50                   	push   eax
c0019255:	56                   	push   esi
c0019256:	e8 bb f7 ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001925b:	83 c4 20             	add    esp,0x20
c001925e:	39 df                	cmp    edi,ebx
c0019260:	75 ce                	jne    c0019230 <mapVASFirstTime+0x67>
c0019262:	83 ec 0c             	sub    esp,0xc
c0019265:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c001926a:	6a 04                	push   0x4
c001926c:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0019272:	6a ff                	push   0xffffffff
c0019274:	c1 eb 0c             	shr    ebx,0xc
c0019277:	53                   	push   ebx
c0019278:	68 00 50 03 c0       	push   0xc0035000
c001927d:	56                   	push   esi
c001927e:	e8 1f f3 ff ff       	call   c00185a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019283:	83 c4 14             	add    esp,0x14
c0019286:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001928b:	6a 04                	push   0x4
c001928d:	6a ff                	push   0xffffffff
c001928f:	53                   	push   ebx
c0019290:	68 00 50 03 c0       	push   0xc0035000
c0019295:	50                   	push   eax
c0019296:	e8 07 f3 ff ff       	call   c00185a2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001929b:	0f 20 d8             	mov    eax,cr3
c001929e:	0f 22 d8             	mov    cr3,eax
c00192a1:	83 c4 20             	add    esp,0x20
c00192a4:	83 c4 0c             	add    esp,0xc
c00192a7:	5b                   	pop    ebx
c00192a8:	5e                   	pop    esi
c00192a9:	5f                   	pop    edi
c00192aa:	5d                   	pop    ebp
c00192ab:	c3                   	ret    
c00192ac:	83 ec 0c             	sub    esp,0xc
c00192af:	68 fd 19 03 c0       	push   0xc00319fd
c00192b4:	e8 88 01 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00192b9:	83 c4 10             	add    esp,0x10
c00192bc:	83 c4 0c             	add    esp,0xc
c00192bf:	5b                   	pop    ebx
c00192c0:	5e                   	pop    esi
c00192c1:	5f                   	pop    edi
c00192c2:	5d                   	pop    ebp
c00192c3:	c3                   	ret    

c00192c4 <__cxa_atexit>:
c00192c4:	31 c0                	xor    eax,eax
c00192c6:	c3                   	ret    

c00192c7 <__cxa_finalize>:
c00192c7:	c3                   	ret    

c00192c8 <__stack_chk_fail>:
c00192c8:	55                   	push   ebp
c00192c9:	89 e5                	mov    ebp,esp
c00192cb:	83 ec 10             	sub    esp,0x10
c00192ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00192d1:	68 16 1a 03 c0       	push   0xc0031a16
c00192d6:	e8 66 01 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00192db:	58                   	pop    eax
c00192dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00192df:	5a                   	pop    edx
c00192e0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00192e3:	68 16 1a 03 c0       	push   0xc0031a16
c00192e8:	e8 54 01 00 00       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00192ed:	c7 04 24 1e 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a1e
c00192f4:	e8 61 71 00 00       	call   c002045a <KePanic(char const*)>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	c9                   	leave  
c00192fd:	c3                   	ret    

c00192fe <__cxa_pure_virtual>:
c00192fe:	83 ec 18             	sub    esp,0x18
c0019301:	68 36 1a 03 c0       	push   0xc0031a36
c0019306:	e8 4f 71 00 00       	call   c002045a <KePanic(char const*)>
c001930b:	83 c4 1c             	add    esp,0x1c
c001930e:	c3                   	ret    

c001930f <operator new[](unsigned long)>:
c001930f:	e9 9d d2 ff ff       	jmp    c00165b1 <malloc>

c0019314 <operator delete(void*, unsigned long)>:
c0019314:	e9 b8 d2 ff ff       	jmp    c00165d1 <rfree>

c0019319 <operator delete[](void*)>:
c0019319:	e9 b3 d2 ff ff       	jmp    c00165d1 <rfree>

c001931e <operator delete[](void*, unsigned long)>:
c001931e:	e9 ae d2 ff ff       	jmp    c00165d1 <rfree>

c0019323 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0019323:	55                   	push   ebp
c0019324:	57                   	push   edi
c0019325:	56                   	push   esi
c0019326:	be 3f 15 03 c0       	mov    esi,0xc003153f
c001932b:	53                   	push   ebx
c001932c:	83 ec 20             	sub    esp,0x20
c001932f:	a0 3e 15 03 c0       	mov    al,ds:0xc003153e
c0019334:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019338:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001933c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019340:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019344:	b8 10 00 00 00       	mov    eax,0x10
c0019349:	f7 c7 02 00 00 00    	test   edi,0x2
c001934f:	75 60                	jne    c00193b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0019351:	89 c1                	mov    ecx,eax
c0019353:	c1 e9 02             	shr    ecx,0x2
c0019356:	fc                   	cld    
c0019357:	31 d2                	xor    edx,edx
c0019359:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001935b:	a8 02                	test   al,0x2
c001935d:	74 0b                	je     c001936a <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c001935f:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019362:	66 89 17             	mov    WORD PTR [edi],dx
c0019365:	ba 02 00 00 00       	mov    edx,0x2
c001936a:	a8 01                	test   al,0x1
c001936c:	74 06                	je     c0019374 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c001936e:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0019371:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0019374:	89 ee                	mov    esi,ebp
c0019376:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001937a:	eb 02                	jmp    c001937e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c001937c:	89 c6                	mov    esi,eax
c001937e:	31 d2                	xor    edx,edx
c0019380:	83 c1 01             	add    ecx,0x1
c0019383:	89 f0                	mov    eax,esi
c0019385:	f7 f3                	div    ebx
c0019387:	39 de                	cmp    esi,ebx
c0019389:	73 f1                	jae    c001937c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c001938b:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001938e:	eb 02                	jmp    c0019392 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0019390:	89 c5                	mov    ebp,eax
c0019392:	31 d2                	xor    edx,edx
c0019394:	83 e9 01             	sub    ecx,0x1
c0019397:	89 e8                	mov    eax,ebp
c0019399:	f7 f3                	div    ebx
c001939b:	39 dd                	cmp    ebp,ebx
c001939d:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00193a1:	88 11                	mov    BYTE PTR [ecx],dl
c00193a3:	73 eb                	jae    c0019390 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00193a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193a9:	83 c4 20             	add    esp,0x20
c00193ac:	5b                   	pop    ebx
c00193ad:	5e                   	pop    esi
c00193ae:	5f                   	pop    edi
c00193af:	5d                   	pop    ebp
c00193b0:	c3                   	ret    
c00193b1:	66 8b 16             	mov    dx,WORD PTR [esi]
c00193b4:	83 c7 02             	add    edi,0x2
c00193b7:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c00193bb:	83 c6 02             	add    esi,0x2
c00193be:	83 e8 02             	sub    eax,0x2
c00193c1:	eb 8e                	jmp    c0019351 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c00193c3 <Dbg::logc(char)>:
c00193c3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00193c7:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00193ce:	75 12                	jne    c00193e2 <Dbg::logc(char)+0x1f>
c00193d0:	ba fd 03 00 00       	mov    edx,0x3fd
c00193d5:	ec                   	in     al,dx
c00193d6:	a8 20                	test   al,0x20
c00193d8:	74 fb                	je     c00193d5 <Dbg::logc(char)+0x12>
c00193da:	ba f8 03 00 00       	mov    edx,0x3f8
c00193df:	88 c8                	mov    al,cl
c00193e1:	ee                   	out    dx,al
c00193e2:	c3                   	ret    

c00193e3 <Dbg::logs(char*)>:
c00193e3:	53                   	push   ebx
c00193e4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00193e8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193eb:	85 c0                	test   eax,eax
c00193ed:	74 11                	je     c0019400 <Dbg::logs(char*)+0x1d>
c00193ef:	83 c3 01             	add    ebx,0x1
c00193f2:	50                   	push   eax
c00193f3:	e8 cb ff ff ff       	call   c00193c3 <Dbg::logc(char)>
c00193f8:	58                   	pop    eax
c00193f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193fc:	85 c0                	test   eax,eax
c00193fe:	75 ef                	jne    c00193ef <Dbg::logs(char*)+0xc>
c0019400:	5b                   	pop    ebx
c0019401:	c3                   	ret    

c0019402 <Dbg::logWriteInt(unsigned int)>:
c0019402:	83 ec 10             	sub    esp,0x10
c0019405:	6a 0a                	push   0xa
c0019407:	8d 44 24 08          	lea    eax,[esp+0x8]
c001940b:	50                   	push   eax
c001940c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019410:	50                   	push   eax
c0019411:	e8 0d ff ff ff       	call   c0019323 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019416:	50                   	push   eax
c0019417:	e8 c7 ff ff ff       	call   c00193e3 <Dbg::logs(char*)>
c001941c:	83 c4 20             	add    esp,0x20
c001941f:	c3                   	ret    

c0019420 <Dbg::logWriteIntBase(unsigned int, int)>:
c0019420:	83 ec 10             	sub    esp,0x10
c0019423:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019427:	50                   	push   eax
c0019428:	8d 44 24 08          	lea    eax,[esp+0x8]
c001942c:	50                   	push   eax
c001942d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019431:	52                   	push   edx
c0019432:	e8 ec fe ff ff       	call   c0019323 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019437:	50                   	push   eax
c0019438:	e8 a6 ff ff ff       	call   c00193e3 <Dbg::logs(char*)>
c001943d:	83 c4 20             	add    esp,0x20
c0019440:	c3                   	ret    

c0019441 <Dbg::kprintf(char const*, ...)>:
c0019441:	55                   	push   ebp
c0019442:	57                   	push   edi
c0019443:	56                   	push   esi
c0019444:	53                   	push   ebx
c0019445:	83 ec 0c             	sub    esp,0xc
c0019448:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001944c:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019453:	74 08                	je     c001945d <Dbg::kprintf(char const*, ...)+0x1c>
c0019455:	83 c4 0c             	add    esp,0xc
c0019458:	5b                   	pop    ebx
c0019459:	5e                   	pop    esi
c001945a:	5f                   	pop    edi
c001945b:	5d                   	pop    ebp
c001945c:	c3                   	ret    
c001945d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019461:	31 ff                	xor    edi,edi
c0019463:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019467:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001946a:	85 c0                	test   eax,eax
c001946c:	74 e7                	je     c0019455 <Dbg::kprintf(char const*, ...)+0x14>
c001946e:	8d 77 01             	lea    esi,[edi+0x1]
c0019471:	83 f8 25             	cmp    eax,0x25
c0019474:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019477:	75 47                	jne    c00194c0 <Dbg::kprintf(char const*, ...)+0x7f>
c0019479:	83 c7 02             	add    edi,0x2
c001947c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001947f:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019482:	83 e8 25             	sub    eax,0x25
c0019485:	0f b6 c0             	movzx  eax,al
c0019488:	83 f8 53             	cmp    eax,0x53
c001948b:	0f 87 ce 00 00 00    	ja     c001955f <Dbg::kprintf(char const*, ...)+0x11e>
c0019491:	ff 24 85 4c 1a 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce5b4]
c0019498:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001949c:	89 c8                	mov    eax,ecx
c001949e:	83 c1 04             	add    ecx,0x4
c00194a1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194a5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00194a7:	55                   	push   ebp
c00194a8:	e8 55 ff ff ff       	call   c0019402 <Dbg::logWriteInt(unsigned int)>
c00194ad:	58                   	pop    eax
c00194ae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00194b1:	85 c0                	test   eax,eax
c00194b3:	74 a0                	je     c0019455 <Dbg::kprintf(char const*, ...)+0x14>
c00194b5:	8d 77 01             	lea    esi,[edi+0x1]
c00194b8:	83 f8 25             	cmp    eax,0x25
c00194bb:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00194be:	74 b9                	je     c0019479 <Dbg::kprintf(char const*, ...)+0x38>
c00194c0:	50                   	push   eax
c00194c1:	89 f7                	mov    edi,esi
c00194c3:	e8 fb fe ff ff       	call   c00193c3 <Dbg::logc(char)>
c00194c8:	89 ee                	mov    esi,ebp
c00194ca:	58                   	pop    eax
c00194cb:	eb e1                	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c00194cd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194d1:	89 c8                	mov    eax,ecx
c00194d3:	83 c1 04             	add    ecx,0x4
c00194d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00194d8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00194dc:	50                   	push   eax
c00194dd:	e8 01 ff ff ff       	call   c00193e3 <Dbg::logs(char*)>
c00194e2:	58                   	pop    eax
c00194e3:	eb c9                	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c00194e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00194e9:	89 d0                	mov    eax,edx
c00194eb:	83 c2 04             	add    edx,0x4
c00194ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00194f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00194f4:	50                   	push   eax
c00194f5:	e8 08 ff ff ff       	call   c0019402 <Dbg::logWriteInt(unsigned int)>
c00194fa:	58                   	pop    eax
c00194fb:	eb b1                	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c00194fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019501:	89 d0                	mov    eax,edx
c0019503:	83 c2 04             	add    edx,0x4
c0019506:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019509:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001950d:	50                   	push   eax
c001950e:	e8 b0 fe ff ff       	call   c00193c3 <Dbg::logc(char)>
c0019513:	58                   	pop    eax
c0019514:	eb 98                	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019516:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001951a:	89 c8                	mov    eax,ecx
c001951c:	83 c1 04             	add    ecx,0x4
c001951f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019523:	6a 10                	push   0x10
c0019525:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019527:	51                   	push   ecx
c0019528:	e8 f3 fe ff ff       	call   c0019420 <Dbg::logWriteIntBase(unsigned int, int)>
c001952d:	5d                   	pop    ebp
c001952e:	58                   	pop    eax
c001952f:	e9 7a ff ff ff       	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019534:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019538:	89 d0                	mov    eax,edx
c001953a:	83 c2 08             	add    edx,0x8
c001953d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019541:	6a 10                	push   0x10
c0019543:	8b 00                	mov    eax,DWORD PTR [eax]
c0019545:	50                   	push   eax
c0019546:	e8 d5 fe ff ff       	call   c0019420 <Dbg::logWriteIntBase(unsigned int, int)>
c001954b:	58                   	pop    eax
c001954c:	5a                   	pop    edx
c001954d:	e9 5c ff ff ff       	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019552:	6a 25                	push   0x25
c0019554:	e8 6a fe ff ff       	call   c00193c3 <Dbg::logc(char)>
c0019559:	5a                   	pop    edx
c001955a:	e9 4f ff ff ff       	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c001955f:	6a 25                	push   0x25
c0019561:	e8 5d fe ff ff       	call   c00193c3 <Dbg::logc(char)>
c0019566:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001956a:	50                   	push   eax
c001956b:	e8 53 fe ff ff       	call   c00193c3 <Dbg::logc(char)>
c0019570:	5a                   	pop    edx
c0019571:	59                   	pop    ecx
c0019572:	e9 37 ff ff ff       	jmp    c00194ae <Dbg::kprintf(char const*, ...)+0x6d>
c0019577:	90                   	nop

c0019578 <KiUbsanPrintDetails(char const*, void*)>:
c0019578:	83 ec 1c             	sub    esp,0x1c
c001957b:	83 ec 08             	sub    esp,0x8
c001957e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019582:	68 9c 1b 03 c0       	push   0xc0031b9c
c0019587:	e8 b5 fe ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001958c:	83 c4 10             	add    esp,0x10
c001958f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019597:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001959b:	8b 00                	mov    eax,DWORD PTR [eax]
c001959d:	83 ec 08             	sub    esp,0x8
c00195a0:	50                   	push   eax
c00195a1:	68 b0 1b 03 c0       	push   0xc0031bb0
c00195a6:	e8 96 fe ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00195ab:	83 c4 10             	add    esp,0x10
c00195ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00195b5:	83 ec 08             	sub    esp,0x8
c00195b8:	50                   	push   eax
c00195b9:	68 ba 1b 03 c0       	push   0xc0031bba
c00195be:	e8 7e fe ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00195c3:	83 c4 10             	add    esp,0x10
c00195c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00195cd:	83 ec 08             	sub    esp,0x8
c00195d0:	50                   	push   eax
c00195d1:	68 c4 1b 03 c0       	push   0xc0031bc4
c00195d6:	e8 66 fe ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00195db:	83 c4 10             	add    esp,0x10
c00195de:	90                   	nop
c00195df:	83 c4 1c             	add    esp,0x1c
c00195e2:	c3                   	ret    
c00195e3:	90                   	nop

c00195e4 <__ubsan_handle_type_mismatch_v1>:
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	83 ec 08             	sub    esp,0x8
c00195ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ee:	68 08 1d 03 c0       	push   0xc0031d08
c00195f3:	e8 80 ff ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019600:	75 16                	jne    c0019618 <__ubsan_handle_type_mismatch_v1+0x34>
c0019602:	83 ec 0c             	sub    esp,0xc
c0019605:	68 ce 1b 03 c0       	push   0xc0031bce
c001960a:	e8 32 fe ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	e9 91 00 00 00       	jmp    c00196a8 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019617:	90                   	nop
c0019618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001961f:	85 c0                	test   eax,eax
c0019621:	74 29                	je     c001964c <__ubsan_handle_type_mismatch_v1+0x68>
c0019623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019627:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001962a:	83 e8 01             	sub    eax,0x1
c001962d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019631:	75 19                	jne    c001964c <__ubsan_handle_type_mismatch_v1+0x68>
c0019633:	83 ec 08             	sub    esp,0x8
c0019636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001963a:	68 28 1d 03 c0       	push   0xc0031d28
c001963f:	e8 fd fd ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0019644:	83 c4 10             	add    esp,0x10
c0019647:	eb 5f                	jmp    c00196a8 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	83 ec 0c             	sub    esp,0xc
c001964f:	68 e3 1b 03 c0       	push   0xc0031be3
c0019654:	e8 e8 fd ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019660:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019663:	0f b6 c0             	movzx  eax,al
c0019666:	83 ec 08             	sub    esp,0x8
c0019669:	50                   	push   eax
c001966a:	68 fd 1b 03 c0       	push   0xc0031bfd
c001966f:	e8 cd fd ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0019674:	83 c4 10             	add    esp,0x10
c0019677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001967b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001967e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019689:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001968c:	0f b6 c0             	movzx  eax,al
c001968f:	8b 04 85 c0 3e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc140]
c0019696:	51                   	push   ecx
c0019697:	52                   	push   edx
c0019698:	50                   	push   eax
c0019699:	68 50 1d 03 c0       	push   0xc0031d50
c001969e:	e8 9e fd ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00196a3:	83 c4 10             	add    esp,0x10
c00196a6:	66 90                	xchg   ax,ax
c00196a8:	83 ec 0c             	sub    esp,0xc
c00196ab:	68 08 1d 03 c0       	push   0xc0031d08
c00196b0:	e8 a5 6d 00 00       	call   c002045a <KePanic(char const*)>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	90                   	nop
c00196b9:	83 c4 0c             	add    esp,0xc
c00196bc:	c3                   	ret    
c00196bd:	8d 76 00             	lea    esi,[esi+0x0]

c00196c0 <__ubsan_handle_pointer_overflow>:
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	83 ec 08             	sub    esp,0x8
c00196c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ca:	68 98 1d 03 c0       	push   0xc0031d98
c00196cf:	e8 a4 fe ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	83 ec 0c             	sub    esp,0xc
c00196da:	68 98 1d 03 c0       	push   0xc0031d98
c00196df:	e8 76 6d 00 00       	call   c002045a <KePanic(char const*)>
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	90                   	nop
c00196e8:	83 c4 0c             	add    esp,0xc
c00196eb:	c3                   	ret    

c00196ec <__ubsan_handle_out_of_bounds>:
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	83 ec 08             	sub    esp,0x8
c00196f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196f6:	68 08 1c 03 c0       	push   0xc0031c08
c00196fb:	e8 78 fe ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c0019700:	83 c4 10             	add    esp,0x10
c0019703:	83 ec 0c             	sub    esp,0xc
c0019706:	68 08 1c 03 c0       	push   0xc0031c08
c001970b:	e8 4a 6d 00 00       	call   c002045a <KePanic(char const*)>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	90                   	nop
c0019714:	83 c4 0c             	add    esp,0xc
c0019717:	c3                   	ret    

c0019718 <__ubsan_handle_add_overflow>:
c0019718:	83 ec 0c             	sub    esp,0xc
c001971b:	83 ec 08             	sub    esp,0x8
c001971e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019722:	68 25 1c 03 c0       	push   0xc0031c25
c0019727:	e8 4c fe ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c001972c:	83 c4 10             	add    esp,0x10
c001972f:	83 ec 0c             	sub    esp,0xc
c0019732:	68 25 1c 03 c0       	push   0xc0031c25
c0019737:	e8 1e 6d 00 00       	call   c002045a <KePanic(char const*)>
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	90                   	nop
c0019740:	83 c4 0c             	add    esp,0xc
c0019743:	c3                   	ret    

c0019744 <__ubsan_handle_load_invalid_value>:
c0019744:	83 ec 0c             	sub    esp,0xc
c0019747:	83 ec 08             	sub    esp,0x8
c001974a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001974e:	68 b8 1d 03 c0       	push   0xc0031db8
c0019753:	e8 20 fe ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c0019758:	83 c4 10             	add    esp,0x10
c001975b:	83 ec 0c             	sub    esp,0xc
c001975e:	68 b8 1d 03 c0       	push   0xc0031db8
c0019763:	e8 f2 6c 00 00       	call   c002045a <KePanic(char const*)>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	90                   	nop
c001976c:	83 c4 0c             	add    esp,0xc
c001976f:	c3                   	ret    

c0019770 <__ubsan_handle_divrem_overflow>:
c0019770:	83 ec 0c             	sub    esp,0xc
c0019773:	83 ec 08             	sub    esp,0x8
c0019776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001977a:	68 dc 1d 03 c0       	push   0xc0031ddc
c001977f:	e8 f4 fd ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	83 ec 0c             	sub    esp,0xc
c001978a:	68 dc 1d 03 c0       	push   0xc0031ddc
c001978f:	e8 c6 6c 00 00       	call   c002045a <KePanic(char const*)>
c0019794:	83 c4 10             	add    esp,0x10
c0019797:	90                   	nop
c0019798:	83 c4 0c             	add    esp,0xc
c001979b:	c3                   	ret    

c001979c <__ubsan_handle_mul_overflow>:
c001979c:	83 ec 0c             	sub    esp,0xc
c001979f:	83 ec 08             	sub    esp,0x8
c00197a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197a6:	68 41 1c 03 c0       	push   0xc0031c41
c00197ab:	e8 c8 fd ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c00197b0:	83 c4 10             	add    esp,0x10
c00197b3:	83 ec 0c             	sub    esp,0xc
c00197b6:	68 41 1c 03 c0       	push   0xc0031c41
c00197bb:	e8 9a 6c 00 00       	call   c002045a <KePanic(char const*)>
c00197c0:	83 c4 10             	add    esp,0x10
c00197c3:	90                   	nop
c00197c4:	83 c4 0c             	add    esp,0xc
c00197c7:	c3                   	ret    

c00197c8 <__ubsan_handle_sub_overflow>:
c00197c8:	83 ec 0c             	sub    esp,0xc
c00197cb:	83 ec 08             	sub    esp,0x8
c00197ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197d2:	68 5d 1c 03 c0       	push   0xc0031c5d
c00197d7:	e8 9c fd ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c00197dc:	83 c4 10             	add    esp,0x10
c00197df:	83 ec 0c             	sub    esp,0xc
c00197e2:	68 5d 1c 03 c0       	push   0xc0031c5d
c00197e7:	e8 6e 6c 00 00       	call   c002045a <KePanic(char const*)>
c00197ec:	83 c4 10             	add    esp,0x10
c00197ef:	90                   	nop
c00197f0:	83 c4 0c             	add    esp,0xc
c00197f3:	c3                   	ret    

c00197f4 <__ubsan_handle_shift_out_of_bounds>:
c00197f4:	83 ec 0c             	sub    esp,0xc
c00197f7:	83 ec 08             	sub    esp,0x8
c00197fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197fe:	68 fc 1d 03 c0       	push   0xc0031dfc
c0019803:	e8 70 fd ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c0019808:	83 c4 10             	add    esp,0x10
c001980b:	83 ec 0c             	sub    esp,0xc
c001980e:	68 fc 1d 03 c0       	push   0xc0031dfc
c0019813:	e8 42 6c 00 00       	call   c002045a <KePanic(char const*)>
c0019818:	83 c4 10             	add    esp,0x10
c001981b:	90                   	nop
c001981c:	83 c4 0c             	add    esp,0xc
c001981f:	c3                   	ret    

c0019820 <__ubsan_handle_negate_overflow>:
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	83 ec 08             	sub    esp,0x8
c0019826:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001982a:	68 20 1e 03 c0       	push   0xc0031e20
c001982f:	e8 44 fd ff ff       	call   c0019578 <KiUbsanPrintDetails(char const*, void*)>
c0019834:	83 c4 10             	add    esp,0x10
c0019837:	83 ec 0c             	sub    esp,0xc
c001983a:	68 20 1e 03 c0       	push   0xc0031e20
c001983f:	e8 16 6c 00 00       	call   c002045a <KePanic(char const*)>
c0019844:	83 c4 10             	add    esp,0x10
c0019847:	90                   	nop
c0019848:	83 c4 0c             	add    esp,0xc
c001984b:	c3                   	ret    

c001984c <KiIsHashInTable(unsigned short)>:
c001984c:	0f b7 d0             	movzx  edx,ax
c001984f:	83 e0 07             	and    eax,0x7
c0019852:	c1 fa 03             	sar    edx,0x3
c0019855:	88 c1                	mov    cl,al
c0019857:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c001985e:	d3 fa                	sar    edx,cl
c0019860:	89 d0                	mov    eax,edx
c0019862:	83 e0 01             	and    eax,0x1
c0019865:	c3                   	ret    

c0019866 <KiSetHashInTable(unsigned short, bool)>:
c0019866:	56                   	push   esi
c0019867:	53                   	push   ebx
c0019868:	0f b7 d8             	movzx  ebx,ax
c001986b:	83 e0 07             	and    eax,0x7
c001986e:	c1 fb 03             	sar    ebx,0x3
c0019871:	89 c1                	mov    ecx,eax
c0019873:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001987a:	b8 01 00 00 00       	mov    eax,0x1
c001987f:	d3 e0                	shl    eax,cl
c0019881:	84 d2                	test   dl,dl
c0019883:	74 04                	je     c0019889 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019885:	09 f0                	or     eax,esi
c0019887:	eb 04                	jmp    c001988d <KiSetHashInTable(unsigned short, bool)+0x27>
c0019889:	f7 d0                	not    eax
c001988b:	21 f0                	and    eax,esi
c001988d:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019893:	5b                   	pop    ebx
c0019894:	5e                   	pop    esi
c0019895:	c3                   	ret    

c0019896 <KiFlushSymlinkChanges()>:
c0019896:	57                   	push   edi
c0019897:	56                   	push   esi
c0019898:	53                   	push   ebx
c0019899:	83 ec 1c             	sub    esp,0x1c
c001989c:	68 14 01 00 00       	push   0x114
c00198a1:	e8 0b cd ff ff       	call   c00165b1 <malloc>
c00198a6:	83 c4 0c             	add    esp,0xc
c00198a9:	89 c3                	mov    ebx,eax
c00198ab:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00198b1:	68 3f 1e 03 c0       	push   0xc0031e3f
c00198b6:	50                   	push   eax
c00198b7:	e8 8c 0d 00 00       	call   c001a648 <File::File(char const*, Process*)>
c00198bc:	83 c4 10             	add    esp,0x10
c00198bf:	85 db                	test   ebx,ebx
c00198c1:	75 10                	jne    c00198d3 <KiFlushSymlinkChanges()+0x3d>
c00198c3:	83 ec 0c             	sub    esp,0xc
c00198c6:	68 5d 1e 03 c0       	push   0xc0031e5d
c00198cb:	e8 8a 6b 00 00       	call   c002045a <KePanic(char const*)>
c00198d0:	83 c4 10             	add    esp,0x10
c00198d3:	50                   	push   eax
c00198d4:	50                   	push   eax
c00198d5:	6a 06                	push   0x6
c00198d7:	53                   	push   ebx
c00198d8:	e8 89 0d 00 00       	call   c001a666 <File::open(FileOpenMode)>
c00198dd:	83 c4 10             	add    esp,0x10
c00198e0:	85 c0                	test   eax,eax
c00198e2:	74 10                	je     c00198f4 <KiFlushSymlinkChanges()+0x5e>
c00198e4:	83 ec 0c             	sub    esp,0xc
c00198e7:	68 77 1e 03 c0       	push   0xc0031e77
c00198ec:	e8 69 6b 00 00       	call   c002045a <KePanic(char const*)>
c00198f1:	83 c4 10             	add    esp,0x10
c00198f4:	31 f6                	xor    esi,esi
c00198f6:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c00198fc:	7e 70                	jle    c001996e <KiFlushSymlinkChanges()+0xd8>
c00198fe:	83 ec 0c             	sub    esp,0xc
c0019901:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019903:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019907:	89 f0                	mov    eax,esi
c0019909:	57                   	push   edi
c001990a:	c1 e0 08             	shl    eax,0x8
c001990d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019912:	50                   	push   eax
c0019913:	6a 00                	push   0x0
c0019915:	68 00 01 00 00       	push   0x100
c001991a:	53                   	push   ebx
c001991b:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001991e:	83 c4 20             	add    esp,0x20
c0019921:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019929:	74 10                	je     c001993b <KiFlushSymlinkChanges()+0xa5>
c001992b:	83 ec 0c             	sub    esp,0xc
c001992e:	68 91 1e 03 c0       	push   0xc0031e91
c0019933:	e8 22 6b 00 00       	call   c002045a <KePanic(char const*)>
c0019938:	83 c4 10             	add    esp,0x10
c001993b:	83 ec 0c             	sub    esp,0xc
c001993e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019940:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019947:	57                   	push   edi
c0019948:	52                   	push   edx
c0019949:	6a 00                	push   0x0
c001994b:	6a 08                	push   0x8
c001994d:	53                   	push   ebx
c001994e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019951:	83 c4 20             	add    esp,0x20
c0019954:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019959:	74 10                	je     c001996b <KiFlushSymlinkChanges()+0xd5>
c001995b:	83 ec 0c             	sub    esp,0xc
c001995e:	68 ab 1e 03 c0       	push   0xc0031eab
c0019963:	e8 f2 6a 00 00       	call   c002045a <KePanic(char const*)>
c0019968:	83 c4 10             	add    esp,0x10
c001996b:	46                   	inc    esi
c001996c:	eb 88                	jmp    c00198f6 <KiFlushSymlinkChanges()+0x60>
c001996e:	83 ec 0c             	sub    esp,0xc
c0019971:	53                   	push   ebx
c0019972:	e8 4d 0d 00 00       	call   c001a6c4 <File::close()>
c0019977:	83 c4 10             	add    esp,0x10
c001997a:	85 db                	test   ebx,ebx
c001997c:	74 0c                	je     c001998a <KiFlushSymlinkChanges()+0xf4>
c001997e:	83 ec 0c             	sub    esp,0xc
c0019981:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019983:	53                   	push   ebx
c0019984:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019987:	83 c4 10             	add    esp,0x10
c001998a:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019994:	83 c4 10             	add    esp,0x10
c0019997:	5b                   	pop    ebx
c0019998:	5e                   	pop    esi
c0019999:	5f                   	pop    edi
c001999a:	c3                   	ret    

c001999b <KiDeinitialiseSymlinks(void*)>:
c001999b:	e9 f6 fe ff ff       	jmp    c0019896 <KiFlushSymlinkChanges()>

c00199a0 <KiGetSymlinkHash(char const*)>:
c00199a0:	53                   	push   ebx
c00199a1:	89 c3                	mov    ebx,eax
c00199a3:	83 ec 14             	sub    esp,0x14
c00199a6:	50                   	push   eax
c00199a7:	e8 c4 6b fe ff       	call   c0000570 <strlen>
c00199ac:	5a                   	pop    edx
c00199ad:	59                   	pop    ecx
c00199ae:	50                   	push   eax
c00199af:	53                   	push   ebx
c00199b0:	e8 0c 64 00 00       	call   c001fdc1 <KeCalculateCRC32(unsigned char*, int)>
c00199b5:	83 c4 18             	add    esp,0x18
c00199b8:	89 c2                	mov    edx,eax
c00199ba:	5b                   	pop    ebx
c00199bb:	c1 ea 10             	shr    edx,0x10
c00199be:	31 d0                	xor    eax,edx
c00199c0:	c3                   	ret    

c00199c1 <KiCreateSymlinkID()>:
c00199c1:	55                   	push   ebp
c00199c2:	57                   	push   edi
c00199c3:	56                   	push   esi
c00199c4:	53                   	push   ebx
c00199c5:	31 db                	xor    ebx,ebx
c00199c7:	83 ec 1c             	sub    esp,0x1c
c00199ca:	e8 d9 6b 00 00       	call   c00205a8 <KeRand()>
c00199cf:	43                   	inc    ebx
c00199d0:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00199d6:	31 d2                	xor    edx,edx
c00199d8:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00199db:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00199df:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c00199e5:	c1 e0 1f             	shl    eax,0x1f
c00199e8:	89 d7                	mov    edi,edx
c00199ea:	89 c6                	mov    esi,eax
c00199ec:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00199f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00199f8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c00199fe:	75 10                	jne    c0019a10 <KiCreateSymlinkID()+0x4f>
c0019a00:	83 ec 0c             	sub    esp,0xc
c0019a03:	68 c5 1e 03 c0       	push   0xc0031ec5
c0019a08:	e8 4d 6a 00 00       	call   c002045a <KePanic(char const*)>
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019a14:	75 04                	jne    c0019a1a <KiCreateSymlinkID()+0x59>
c0019a16:	39 f5                	cmp    ebp,esi
c0019a18:	74 b0                	je     c00199ca <KiCreateSymlinkID()+0x9>
c0019a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a22:	31 f0                	xor    eax,esi
c0019a24:	83 c4 1c             	add    esp,0x1c
c0019a27:	31 fa                	xor    edx,edi
c0019a29:	5b                   	pop    ebx
c0019a2a:	5e                   	pop    esi
c0019a2b:	5f                   	pop    edi
c0019a2c:	5d                   	pop    ebp
c0019a2d:	c3                   	ret    

c0019a2e <KeRegisterSymlink(char const*, unsigned long long)>:
c0019a2e:	53                   	push   ebx
c0019a2f:	83 ec 0c             	sub    esp,0xc
c0019a32:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a3a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019a3e:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019a43:	68 00 01 00 00       	push   0x100
c0019a48:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019a4f:	6a 00                	push   0x0
c0019a51:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c0019a58:	c1 e0 08             	shl    eax,0x8
c0019a5b:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a60:	50                   	push   eax
c0019a61:	e8 8a 6a fe ff       	call   c00004f0 <memset>
c0019a66:	58                   	pop    eax
c0019a67:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019a6c:	5a                   	pop    edx
c0019a6d:	c1 e0 08             	shl    eax,0x8
c0019a70:	53                   	push   ebx
c0019a71:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a76:	50                   	push   eax
c0019a77:	e8 c4 6b fe ff       	call   c0000640 <strcpy>
c0019a7c:	89 d8                	mov    eax,ebx
c0019a7e:	e8 1d ff ff ff       	call   c00199a0 <KiGetSymlinkHash(char const*)>
c0019a83:	59                   	pop    ecx
c0019a84:	0f b7 d8             	movzx  ebx,ax
c0019a87:	58                   	pop    eax
c0019a88:	53                   	push   ebx
c0019a89:	68 ce 1e 03 c0       	push   0xc0031ece
c0019a8e:	e8 ae f9 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0019a93:	89 d8                	mov    eax,ebx
c0019a95:	ba 01 00 00 00       	mov    edx,0x1
c0019a9a:	e8 c7 fd ff ff       	call   c0019866 <KiSetHashInTable(unsigned short, bool)>
c0019a9f:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019aa4:	83 c4 10             	add    esp,0x10
c0019aa7:	40                   	inc    eax
c0019aa8:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019aad:	83 f8 03             	cmp    eax,0x3
c0019ab0:	7e 09                	jle    c0019abb <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019ab2:	83 c4 08             	add    esp,0x8
c0019ab5:	5b                   	pop    ebx
c0019ab6:	e9 db fd ff ff       	jmp    c0019896 <KiFlushSymlinkChanges()>
c0019abb:	83 c4 08             	add    esp,0x8
c0019abe:	5b                   	pop    ebx
c0019abf:	c3                   	ret    

c0019ac0 <KeInitialiseSymlinks()>:
c0019ac0:	57                   	push   edi
c0019ac1:	56                   	push   esi
c0019ac2:	53                   	push   ebx
c0019ac3:	81 ec 14 01 00 00    	sub    esp,0x114
c0019ac9:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c0019ad3:	68 00 20 00 00       	push   0x2000
c0019ad8:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019ae2:	6a 00                	push   0x0
c0019ae4:	68 00 af 03 c0       	push   0xc003af00
c0019ae9:	e8 02 6a fe ff       	call   c00004f0 <memset>
c0019aee:	59                   	pop    ecx
c0019aef:	5b                   	pop    ebx
c0019af0:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019af6:	68 e2 1e 03 c0       	push   0xc0031ee2
c0019afb:	e8 41 f9 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0019b00:	5e                   	pop    esi
c0019b01:	5f                   	pop    edi
c0019b02:	6a 00                	push   0x0
c0019b04:	68 9b 99 01 c0       	push   0xc001999b
c0019b09:	e8 d6 60 00 00       	call   c001fbe4 <KeRegisterAtexit(void (*)(void*), void*)>
c0019b0e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019b15:	e8 97 ca ff ff       	call   c00165b1 <malloc>
c0019b1a:	83 c4 0c             	add    esp,0xc
c0019b1d:	89 c3                	mov    ebx,eax
c0019b1f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b25:	68 3f 1e 03 c0       	push   0xc0031e3f
c0019b2a:	50                   	push   eax
c0019b2b:	e8 18 0b 00 00       	call   c001a648 <File::File(char const*, Process*)>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	85 db                	test   ebx,ebx
c0019b35:	75 10                	jne    c0019b47 <KeInitialiseSymlinks()+0x87>
c0019b37:	83 ec 0c             	sub    esp,0xc
c0019b3a:	68 ff 1e 03 c0       	push   0xc0031eff
c0019b3f:	e8 16 69 00 00       	call   c002045a <KePanic(char const*)>
c0019b44:	83 c4 10             	add    esp,0x10
c0019b47:	83 ec 0c             	sub    esp,0xc
c0019b4a:	53                   	push   ebx
c0019b4b:	e8 da 0d 00 00       	call   c001a92a <File::exists()>
c0019b50:	83 c4 10             	add    esp,0x10
c0019b53:	84 c0                	test   al,al
c0019b55:	75 3a                	jne    c0019b91 <KeInitialiseSymlinks()+0xd1>
c0019b57:	52                   	push   edx
c0019b58:	52                   	push   edx
c0019b59:	6a 12                	push   0x12
c0019b5b:	53                   	push   ebx
c0019b5c:	e8 05 0b 00 00       	call   c001a666 <File::open(FileOpenMode)>
c0019b61:	83 c4 10             	add    esp,0x10
c0019b64:	85 c0                	test   eax,eax
c0019b66:	74 10                	je     c0019b78 <KeInitialiseSymlinks()+0xb8>
c0019b68:	83 ec 0c             	sub    esp,0xc
c0019b6b:	68 1c 1f 03 c0       	push   0xc0031f1c
c0019b70:	e8 e5 68 00 00       	call   c002045a <KePanic(char const*)>
c0019b75:	83 c4 10             	add    esp,0x10
c0019b78:	83 ec 0c             	sub    esp,0xc
c0019b7b:	53                   	push   ebx
c0019b7c:	e8 43 0b 00 00       	call   c001a6c4 <File::close()>
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	85 db                	test   ebx,ebx
c0019b86:	0f 84 9e 00 00 00    	je     c0019c2a <KeInitialiseSymlinks()+0x16a>
c0019b8c:	e9 8d 00 00 00       	jmp    c0019c1e <KeInitialiseSymlinks()+0x15e>
c0019b91:	50                   	push   eax
c0019b92:	50                   	push   eax
c0019b93:	6a 01                	push   0x1
c0019b95:	53                   	push   ebx
c0019b96:	e8 cb 0a 00 00       	call   c001a666 <File::open(FileOpenMode)>
c0019b9b:	83 c4 10             	add    esp,0x10
c0019b9e:	85 c0                	test   eax,eax
c0019ba0:	74 10                	je     c0019bb2 <KeInitialiseSymlinks()+0xf2>
c0019ba2:	83 ec 0c             	sub    esp,0xc
c0019ba5:	68 39 1f 03 c0       	push   0xc0031f39
c0019baa:	e8 ab 68 00 00       	call   c002045a <KePanic(char const*)>
c0019baf:	83 c4 10             	add    esp,0x10
c0019bb2:	83 ec 0c             	sub    esp,0xc
c0019bb5:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019bbb:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019bbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bc1:	57                   	push   edi
c0019bc2:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019bc6:	56                   	push   esi
c0019bc7:	6a 00                	push   0x0
c0019bc9:	68 00 01 00 00       	push   0x100
c0019bce:	53                   	push   ebx
c0019bcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bd2:	83 c4 20             	add    esp,0x20
c0019bd5:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019bdd:	75 33                	jne    c0019c12 <KeInitialiseSymlinks()+0x152>
c0019bdf:	83 ec 0c             	sub    esp,0xc
c0019be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be4:	57                   	push   edi
c0019be5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019be9:	52                   	push   edx
c0019bea:	6a 00                	push   0x0
c0019bec:	6a 08                	push   0x8
c0019bee:	53                   	push   ebx
c0019bef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bf2:	83 c4 20             	add    esp,0x20
c0019bf5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019bfa:	75 16                	jne    c0019c12 <KeInitialiseSymlinks()+0x152>
c0019bfc:	89 f0                	mov    eax,esi
c0019bfe:	e8 9d fd ff ff       	call   c00199a0 <KiGetSymlinkHash(char const*)>
c0019c03:	ba 01 00 00 00       	mov    edx,0x1
c0019c08:	0f b7 c0             	movzx  eax,ax
c0019c0b:	e8 56 fc ff ff       	call   c0019866 <KiSetHashInTable(unsigned short, bool)>
c0019c10:	eb a0                	jmp    c0019bb2 <KeInitialiseSymlinks()+0xf2>
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	53                   	push   ebx
c0019c16:	e8 a9 0a 00 00       	call   c001a6c4 <File::close()>
c0019c1b:	83 c4 10             	add    esp,0x10
c0019c1e:	83 ec 0c             	sub    esp,0xc
c0019c21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c23:	53                   	push   ebx
c0019c24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	81 c4 10 01 00 00    	add    esp,0x110
c0019c30:	5b                   	pop    ebx
c0019c31:	5e                   	pop    esi
c0019c32:	5f                   	pop    edi
c0019c33:	c3                   	ret    

c0019c34 <KiIsSymlinkRegistered(char const*)>:
c0019c34:	55                   	push   ebp
c0019c35:	57                   	push   edi
c0019c36:	56                   	push   esi
c0019c37:	53                   	push   ebx
c0019c38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c3e:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019c45:	89 f0                	mov    eax,esi
c0019c47:	e8 54 fd ff ff       	call   c00199a0 <KiGetSymlinkHash(char const*)>
c0019c4c:	0f b7 c0             	movzx  eax,ax
c0019c4f:	53                   	push   ebx
c0019c50:	56                   	push   esi
c0019c51:	50                   	push   eax
c0019c52:	68 54 1f 03 c0       	push   0xc0031f54
c0019c57:	e8 e5 f7 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0019c5c:	89 f0                	mov    eax,esi
c0019c5e:	e8 3d fd ff ff       	call   c00199a0 <KiGetSymlinkHash(char const*)>
c0019c63:	0f b7 c0             	movzx  eax,ax
c0019c66:	e8 e1 fb ff ff       	call   c001984c <KiIsHashInTable(unsigned short)>
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	88 c1                	mov    cl,al
c0019c70:	31 d2                	xor    edx,edx
c0019c72:	31 c0                	xor    eax,eax
c0019c74:	84 c9                	test   cl,cl
c0019c76:	0f 84 31 01 00 00    	je     c0019dad <KiIsSymlinkRegistered(char const*)+0x179>
c0019c7c:	31 db                	xor    ebx,ebx
c0019c7e:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019c84:	7e 30                	jle    c0019cb6 <KiIsSymlinkRegistered(char const*)+0x82>
c0019c86:	89 d8                	mov    eax,ebx
c0019c88:	51                   	push   ecx
c0019c89:	c1 e0 08             	shl    eax,0x8
c0019c8c:	51                   	push   ecx
c0019c8d:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019c92:	50                   	push   eax
c0019c93:	56                   	push   esi
c0019c94:	e8 b7 6a fe ff       	call   c0000750 <strcmp>
c0019c99:	83 c4 10             	add    esp,0x10
c0019c9c:	85 c0                	test   eax,eax
c0019c9e:	75 13                	jne    c0019cb3 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019ca0:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019ca7:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019cae:	e9 fa 00 00 00       	jmp    c0019dad <KiIsSymlinkRegistered(char const*)+0x179>
c0019cb3:	43                   	inc    ebx
c0019cb4:	eb c8                	jmp    c0019c7e <KiIsSymlinkRegistered(char const*)+0x4a>
c0019cb6:	83 ec 0c             	sub    esp,0xc
c0019cb9:	68 14 01 00 00       	push   0x114
c0019cbe:	e8 ee c8 ff ff       	call   c00165b1 <malloc>
c0019cc3:	83 c4 0c             	add    esp,0xc
c0019cc6:	89 c3                	mov    ebx,eax
c0019cc8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019cce:	68 3f 1e 03 c0       	push   0xc0031e3f
c0019cd3:	50                   	push   eax
c0019cd4:	e8 6f 09 00 00       	call   c001a648 <File::File(char const*, Process*)>
c0019cd9:	83 c4 10             	add    esp,0x10
c0019cdc:	85 db                	test   ebx,ebx
c0019cde:	75 12                	jne    c0019cf2 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019ce0:	83 ec 0c             	sub    esp,0xc
c0019ce3:	68 69 1f 03 c0       	push   0xc0031f69
c0019ce8:	e8 6d 67 00 00       	call   c002045a <KePanic(char const*)>
c0019ced:	83 c4 10             	add    esp,0x10
c0019cf0:	eb 10                	jmp    c0019d02 <KiIsSymlinkRegistered(char const*)+0xce>
c0019cf2:	83 ec 0c             	sub    esp,0xc
c0019cf5:	53                   	push   ebx
c0019cf6:	e8 2f 0c 00 00       	call   c001a92a <File::exists()>
c0019cfb:	83 c4 10             	add    esp,0x10
c0019cfe:	84 c0                	test   al,al
c0019d00:	74 de                	je     c0019ce0 <KiIsSymlinkRegistered(char const*)+0xac>
c0019d02:	52                   	push   edx
c0019d03:	52                   	push   edx
c0019d04:	6a 01                	push   0x1
c0019d06:	53                   	push   ebx
c0019d07:	e8 5a 09 00 00       	call   c001a666 <File::open(FileOpenMode)>
c0019d0c:	83 c4 10             	add    esp,0x10
c0019d0f:	85 c0                	test   eax,eax
c0019d11:	74 10                	je     c0019d23 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d13:	83 ec 0c             	sub    esp,0xc
c0019d16:	68 84 1f 03 c0       	push   0xc0031f84
c0019d1b:	e8 3a 67 00 00       	call   c002045a <KePanic(char const*)>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	83 ec 0c             	sub    esp,0xc
c0019d26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d28:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019d2c:	55                   	push   ebp
c0019d2d:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019d31:	57                   	push   edi
c0019d32:	6a 00                	push   0x0
c0019d34:	68 00 01 00 00       	push   0x100
c0019d39:	53                   	push   ebx
c0019d3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d3d:	83 c4 20             	add    esp,0x20
c0019d40:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019d48:	75 4b                	jne    c0019d95 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d4a:	83 ec 0c             	sub    esp,0xc
c0019d4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d4f:	55                   	push   ebp
c0019d50:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d54:	52                   	push   edx
c0019d55:	6a 00                	push   0x0
c0019d57:	6a 08                	push   0x8
c0019d59:	53                   	push   ebx
c0019d5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019d5d:	83 c4 20             	add    esp,0x20
c0019d60:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d65:	75 2e                	jne    c0019d95 <KiIsSymlinkRegistered(char const*)+0x161>
c0019d67:	50                   	push   eax
c0019d68:	50                   	push   eax
c0019d69:	57                   	push   edi
c0019d6a:	56                   	push   esi
c0019d6b:	e8 e0 69 fe ff       	call   c0000750 <strcmp>
c0019d70:	83 c4 10             	add    esp,0x10
c0019d73:	85 c0                	test   eax,eax
c0019d75:	75 ac                	jne    c0019d23 <KiIsSymlinkRegistered(char const*)+0xef>
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	53                   	push   ebx
c0019d7b:	e8 44 09 00 00       	call   c001a6c4 <File::close()>
c0019d80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d90:	83 c4 10             	add    esp,0x10
c0019d93:	eb 18                	jmp    c0019dad <KiIsSymlinkRegistered(char const*)+0x179>
c0019d95:	83 ec 0c             	sub    esp,0xc
c0019d98:	53                   	push   ebx
c0019d99:	e8 26 09 00 00       	call   c001a6c4 <File::close()>
c0019d9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019da3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019da6:	83 c4 10             	add    esp,0x10
c0019da9:	31 c0                	xor    eax,eax
c0019dab:	31 d2                	xor    edx,edx
c0019dad:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019db3:	5b                   	pop    ebx
c0019db4:	5e                   	pop    esi
c0019db5:	5f                   	pop    edi
c0019db6:	5d                   	pop    ebp
c0019db7:	c3                   	ret    

c0019db8 <KeDereferenceSymlink(char const*, char*)>:
c0019db8:	55                   	push   ebp
c0019db9:	57                   	push   edi
c0019dba:	56                   	push   esi
c0019dbb:	53                   	push   ebx
c0019dbc:	83 ec 48             	sub    esp,0x48
c0019dbf:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019dc3:	56                   	push   esi
c0019dc4:	e8 6b fe ff ff       	call   c0019c34 <KiIsSymlinkRegistered(char const*)>
c0019dc9:	83 c4 10             	add    esp,0x10
c0019dcc:	89 c7                	mov    edi,eax
c0019dce:	89 d0                	mov    eax,edx
c0019dd0:	09 f8                	or     eax,edi
c0019dd2:	75 07                	jne    c0019ddb <KeDereferenceSymlink(char const*, char*)+0x23>
c0019dd4:	31 c0                	xor    eax,eax
c0019dd6:	e9 7c 01 00 00       	jmp    c0019f57 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019ddb:	83 ec 0c             	sub    esp,0xc
c0019dde:	89 d5                	mov    ebp,edx
c0019de0:	68 14 01 00 00       	push   0x114
c0019de5:	e8 c7 c7 ff ff       	call   c00165b1 <malloc>
c0019dea:	83 c4 0c             	add    esp,0xc
c0019ded:	89 c3                	mov    ebx,eax
c0019def:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019df5:	56                   	push   esi
c0019df6:	50                   	push   eax
c0019df7:	e8 4c 08 00 00       	call   c001a648 <File::File(char const*, Process*)>
c0019dfc:	83 c4 10             	add    esp,0x10
c0019dff:	85 db                	test   ebx,ebx
c0019e01:	0f 84 32 01 00 00    	je     c0019f39 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019e07:	56                   	push   esi
c0019e08:	56                   	push   esi
c0019e09:	6a 01                	push   0x1
c0019e0b:	53                   	push   ebx
c0019e0c:	e8 55 08 00 00       	call   c001a666 <File::open(FileOpenMode)>
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	85 c0                	test   eax,eax
c0019e16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e18:	74 09                	je     c0019e23 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019e1a:	83 ec 0c             	sub    esp,0xc
c0019e1d:	53                   	push   ebx
c0019e1e:	e9 10 01 00 00       	jmp    c0019f33 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019e23:	83 ec 0c             	sub    esp,0xc
c0019e26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e2a:	56                   	push   esi
c0019e2b:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019e2f:	52                   	push   edx
c0019e30:	6a 00                	push   0x0
c0019e32:	6a 08                	push   0x8
c0019e34:	53                   	push   ebx
c0019e35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e38:	83 c4 20             	add    esp,0x20
c0019e3b:	85 c0                	test   eax,eax
c0019e3d:	0f 85 e2 00 00 00    	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e43:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e48:	0f 85 d7 00 00 00    	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e4e:	83 ec 0c             	sub    esp,0xc
c0019e51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e53:	56                   	push   esi
c0019e54:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019e58:	52                   	push   edx
c0019e59:	6a 00                	push   0x0
c0019e5b:	6a 08                	push   0x8
c0019e5d:	53                   	push   ebx
c0019e5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e61:	83 c4 20             	add    esp,0x20
c0019e64:	85 c0                	test   eax,eax
c0019e66:	0f 85 b9 00 00 00    	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e6c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019e71:	0f 85 ae 00 00 00    	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019e77:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019e7b:	0f 85 53 ff ff ff    	jne    c0019dd4 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019e81:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019e85:	0f 85 49 ff ff ff    	jne    c0019dd4 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019e8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019e93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019e9b:	51                   	push   ecx
c0019e9c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019ea0:	50                   	push   eax
c0019ea1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ea5:	50                   	push   eax
c0019ea6:	53                   	push   ebx
c0019ea7:	e8 bc 0a 00 00       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c0019eac:	83 c4 10             	add    esp,0x10
c0019eaf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019eb4:	75 6f                	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019eb6:	31 c9                	xor    ecx,ecx
c0019eb8:	bf 0f 00 00 00       	mov    edi,0xf
c0019ebd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ec1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ec5:	39 c7                	cmp    edi,eax
c0019ec7:	89 cf                	mov    edi,ecx
c0019ec9:	19 d7                	sbb    edi,edx
c0019ecb:	73 58                	jae    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ecd:	83 c0 f0             	add    eax,0xfffffff0
c0019ed0:	bf ff 00 00 00       	mov    edi,0xff
c0019ed5:	83 d2 ff             	adc    edx,0xffffffff
c0019ed8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019edc:	39 c7                	cmp    edi,eax
c0019ede:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ee2:	19 d1                	sbb    ecx,edx
c0019ee4:	72 53                	jb     c0019f39 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019ee6:	40                   	inc    eax
c0019ee7:	52                   	push   edx
c0019ee8:	50                   	push   eax
c0019ee9:	6a 00                	push   0x0
c0019eeb:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019eef:	e8 fc 65 fe ff       	call   c00004f0 <memset>
c0019ef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ef6:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ef9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019efd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019f05:	53                   	push   ebx
c0019f06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f09:	83 c4 20             	add    esp,0x20
c0019f0c:	85 c0                	test   eax,eax
c0019f0e:	75 15                	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f14:	89 c7                	mov    edi,eax
c0019f16:	c1 ff 1f             	sar    edi,0x1f
c0019f19:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019f1d:	75 06                	jne    c0019f25 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019f1f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f23:	74 19                	je     c0019f3e <KeDereferenceSymlink(char const*, char*)+0x186>
c0019f25:	83 ec 0c             	sub    esp,0xc
c0019f28:	53                   	push   ebx
c0019f29:	e8 96 07 00 00       	call   c001a6c4 <File::close()>
c0019f2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f36:	83 c4 10             	add    esp,0x10
c0019f39:	83 c8 ff             	or     eax,0xffffffff
c0019f3c:	eb 19                	jmp    c0019f57 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019f3e:	83 ec 0c             	sub    esp,0xc
c0019f41:	53                   	push   ebx
c0019f42:	e8 7d 07 00 00       	call   c001a6c4 <File::close()>
c0019f47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f4f:	83 c4 10             	add    esp,0x10
c0019f52:	b8 01 00 00 00       	mov    eax,0x1
c0019f57:	83 c4 3c             	add    esp,0x3c
c0019f5a:	5b                   	pop    ebx
c0019f5b:	5e                   	pop    esi
c0019f5c:	5f                   	pop    edi
c0019f5d:	5d                   	pop    ebp
c0019f5e:	c3                   	ret    

c0019f5f <KeCreateSymlink(char const*, char const*)>:
c0019f5f:	55                   	push   ebp
c0019f60:	57                   	push   edi
c0019f61:	56                   	push   esi
c0019f62:	53                   	push   ebx
c0019f63:	83 ec 38             	sub    esp,0x38
c0019f66:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019f6a:	68 14 01 00 00       	push   0x114
c0019f6f:	e8 3d c6 ff ff       	call   c00165b1 <malloc>
c0019f74:	6a 00                	push   0x0
c0019f76:	89 c3                	mov    ebx,eax
c0019f78:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019f7e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019f82:	50                   	push   eax
c0019f83:	e8 e2 05 00 00       	call   c001a56a <File::File(char const*, Process*, bool)>
c0019f88:	83 c4 20             	add    esp,0x20
c0019f8b:	b8 01 00 00 00       	mov    eax,0x1
c0019f90:	85 db                	test   ebx,ebx
c0019f92:	0f 84 19 01 00 00    	je     c001a0b1 <KeCreateSymlink(char const*, char const*)+0x152>
c0019f98:	52                   	push   edx
c0019f99:	52                   	push   edx
c0019f9a:	6a 12                	push   0x12
c0019f9c:	53                   	push   ebx
c0019f9d:	e8 c4 06 00 00       	call   c001a666 <File::open(FileOpenMode)>
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	85 c0                	test   eax,eax
c0019fa7:	74 0b                	je     c0019fb4 <KeCreateSymlink(char const*, char const*)+0x55>
c0019fa9:	83 ec 0c             	sub    esp,0xc
c0019fac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fae:	53                   	push   ebx
c0019faf:	e9 f2 00 00 00       	jmp    c001a0a6 <KeCreateSymlink(char const*, char const*)+0x147>
c0019fb4:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019fb8:	be d1 1f 03 c0       	mov    esi,0xc0031fd1
c0019fbd:	b9 09 00 00 00       	mov    ecx,0x9
c0019fc2:	fc                   	cld    
c0019fc3:	83 ec 0c             	sub    esp,0xc
c0019fc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fc8:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019fcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fce:	56                   	push   esi
c0019fcf:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019fd3:	52                   	push   edx
c0019fd4:	6a 00                	push   0x0
c0019fd6:	6a 08                	push   0x8
c0019fd8:	53                   	push   ebx
c0019fd9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019fdc:	83 c4 20             	add    esp,0x20
c0019fdf:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019fe4:	0f 85 ae 00 00 00    	jne    c001a098 <KeCreateSymlink(char const*, char const*)+0x139>
c0019fea:	85 c0                	test   eax,eax
c0019fec:	0f 85 a6 00 00 00    	jne    c001a098 <KeCreateSymlink(char const*, char const*)+0x139>
c0019ff2:	e8 ca f9 ff ff       	call   c00199c1 <KiCreateSymlinkID()>
c0019ff7:	83 ec 0c             	sub    esp,0xc
c0019ffa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ffe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a002:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a004:	56                   	push   esi
c001a005:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a009:	52                   	push   edx
c001a00a:	6a 00                	push   0x0
c001a00c:	6a 08                	push   0x8
c001a00e:	53                   	push   ebx
c001a00f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a012:	83 c4 20             	add    esp,0x20
c001a015:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c001a01a:	75 7c                	jne    c001a098 <KeCreateSymlink(char const*, char const*)+0x139>
c001a01c:	85 c0                	test   eax,eax
c001a01e:	75 78                	jne    c001a098 <KeCreateSymlink(char const*, char const*)+0x139>
c001a020:	83 ec 0c             	sub    esp,0xc
c001a023:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a025:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a028:	55                   	push   ebp
c001a029:	e8 42 65 fe ff       	call   c0000570 <strlen>
c001a02e:	89 34 24             	mov    DWORD PTR [esp],esi
c001a031:	31 d2                	xor    edx,edx
c001a033:	55                   	push   ebp
c001a034:	52                   	push   edx
c001a035:	50                   	push   eax
c001a036:	53                   	push   ebx
c001a037:	ff d7                	call   edi
c001a039:	83 c4 14             	add    esp,0x14
c001a03c:	89 c6                	mov    esi,eax
c001a03e:	55                   	push   ebp
c001a03f:	e8 2c 65 fe ff       	call   c0000570 <strlen>
c001a044:	83 c4 10             	add    esp,0x10
c001a047:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a04b:	75 4b                	jne    c001a098 <KeCreateSymlink(char const*, char const*)+0x139>
c001a04d:	85 f6                	test   esi,esi
c001a04f:	75 47                	jne    c001a098 <KeCreateSymlink(char const*, char const*)+0x139>
c001a051:	50                   	push   eax
c001a052:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a056:	55                   	push   ebp
c001a057:	68 9f 1f 03 c0       	push   0xc0031f9f
c001a05c:	e8 e0 f3 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001a061:	83 c4 0c             	add    esp,0xc
c001a064:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a068:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a06c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001a070:	e8 b9 f9 ff ff       	call   c0019a2e <KeRegisterSymlink(char const*, unsigned long long)>
c001a075:	c7 04 24 c4 1f 03 c0 	mov    DWORD PTR [esp],0xc0031fc4
c001a07c:	e8 c0 f3 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001a081:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a084:	e8 3b 06 00 00       	call   c001a6c4 <File::close()>
c001a089:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a08b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a08e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	31 c0                	xor    eax,eax
c001a096:	eb 19                	jmp    c001a0b1 <KeCreateSymlink(char const*, char const*)+0x152>
c001a098:	83 ec 0c             	sub    esp,0xc
c001a09b:	53                   	push   ebx
c001a09c:	e8 23 06 00 00       	call   c001a6c4 <File::close()>
c001a0a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a0a9:	83 c4 10             	add    esp,0x10
c001a0ac:	b8 01 00 00 00       	mov    eax,0x1
c001a0b1:	83 c4 2c             	add    esp,0x2c
c001a0b4:	5b                   	pop    ebx
c001a0b5:	5e                   	pop    esi
c001a0b6:	5f                   	pop    edi
c001a0b7:	5d                   	pop    ebp
c001a0b8:	c3                   	ret    
c001a0b9:	90                   	nop

c001a0ba <File::read(unsigned long long, void*, int*)>:
c001a0ba:	53                   	push   ebx
c001a0bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0bf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a0c3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a0ca:	83 f8 19             	cmp    eax,0x19
c001a0cd:	77 35                	ja     c001a104 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0cf:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a0d6:	85 c0                	test   eax,eax
c001a0d8:	74 2a                	je     c001a104 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0da:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a0e0:	85 c0                	test   eax,eax
c001a0e2:	74 20                	je     c001a104 <File::read(unsigned long long, void*, int*)+0x4a>
c001a0e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a0e8:	74 21                	je     c001a10b <File::read(unsigned long long, void*, int*)+0x51>
c001a0ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a0ec:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a0f0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a0f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0fe:	5b                   	pop    ebx
c001a0ff:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001a102:	ff e0                	jmp    eax
c001a104:	b8 0b 00 00 00       	mov    eax,0xb
c001a109:	eb 05                	jmp    c001a110 <File::read(unsigned long long, void*, int*)+0x56>
c001a10b:	b8 05 00 00 00       	mov    eax,0x5
c001a110:	5b                   	pop    ebx
c001a111:	c3                   	ret    

c001a112 <File::write(unsigned long long, void*, int*)>:
c001a112:	53                   	push   ebx
c001a113:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a117:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a11b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a122:	83 f8 19             	cmp    eax,0x19
c001a125:	77 35                	ja     c001a15c <File::write(unsigned long long, void*, int*)+0x4a>
c001a127:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a12e:	85 c0                	test   eax,eax
c001a130:	74 2a                	je     c001a15c <File::write(unsigned long long, void*, int*)+0x4a>
c001a132:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a138:	85 c0                	test   eax,eax
c001a13a:	74 20                	je     c001a15c <File::write(unsigned long long, void*, int*)+0x4a>
c001a13c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a140:	74 21                	je     c001a163 <File::write(unsigned long long, void*, int*)+0x51>
c001a142:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a144:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a148:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a14e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a152:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a156:	5b                   	pop    ebx
c001a157:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001a15a:	ff e0                	jmp    eax
c001a15c:	b8 0b 00 00 00       	mov    eax,0xb
c001a161:	eb 05                	jmp    c001a168 <File::write(unsigned long long, void*, int*)+0x56>
c001a163:	b8 05 00 00 00       	mov    eax,0x5
c001a168:	5b                   	pop    ebx
c001a169:	c3                   	ret    

c001a16a <Directory::read(unsigned long long, void*, int*)>:
c001a16a:	53                   	push   ebx
c001a16b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a16f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a173:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a17a:	83 f8 19             	cmp    eax,0x19
c001a17d:	77 35                	ja     c001a1b4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a17f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a186:	85 c0                	test   eax,eax
c001a188:	74 2a                	je     c001a1b4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a18a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a190:	85 c0                	test   eax,eax
c001a192:	74 20                	je     c001a1b4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a194:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a198:	74 21                	je     c001a1bb <Directory::read(unsigned long long, void*, int*)+0x51>
c001a19a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a19c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a1a0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a1a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1ae:	5b                   	pop    ebx
c001a1af:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a1b2:	ff e0                	jmp    eax
c001a1b4:	b8 0b 00 00 00       	mov    eax,0xb
c001a1b9:	eb 05                	jmp    c001a1c0 <Directory::read(unsigned long long, void*, int*)+0x56>
c001a1bb:	b8 05 00 00 00       	mov    eax,0x5
c001a1c0:	5b                   	pop    ebx
c001a1c1:	c3                   	ret    

c001a1c2 <Directory::write(unsigned long long, void*, int*)>:
c001a1c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1c6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a1cd:	b8 0b 00 00 00       	mov    eax,0xb
c001a1d2:	83 fa 19             	cmp    edx,0x19
c001a1d5:	77 18                	ja     c001a1ef <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a1d7:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a1de:	85 d2                	test   edx,edx
c001a1e0:	74 0d                	je     c001a1ef <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a1e2:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a1e9:	19 c0                	sbb    eax,eax
c001a1eb:	83 e0 0a             	and    eax,0xa
c001a1ee:	40                   	inc    eax
c001a1ef:	c3                   	ret    

c001a1f0 <File::isAtty()>:
c001a1f0:	31 c0                	xor    eax,eax
c001a1f2:	c3                   	ret    
c001a1f3:	90                   	nop

c001a1f4 <Directory::isAtty()>:
c001a1f4:	31 c0                	xor    eax,eax
c001a1f6:	c3                   	ret    
c001a1f7:	90                   	nop

c001a1f8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a1f8:	b8 0a 00 00 00       	mov    eax,0xa
c001a1fd:	c3                   	ret    

c001a1fe <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a1fe:	b8 0a 00 00 00       	mov    eax,0xa
c001a203:	c3                   	ret    

c001a204 <Filesystem::allocateSwapfile(char const*, int)>:
c001a204:	31 c0                	xor    eax,eax
c001a206:	31 d2                	xor    edx,edx
c001a208:	c3                   	ret    
c001a209:	90                   	nop

c001a20a <File::~File()>:
c001a20a:	83 ec 0c             	sub    esp,0xc
c001a20d:	ba 90 20 03 c0       	mov    edx,0xc0032090
c001a212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a216:	89 10                	mov    DWORD PTR [eax],edx
c001a218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a21c:	83 ec 0c             	sub    esp,0xc
c001a21f:	50                   	push   eax
c001a220:	e8 7b dc ff ff       	call   c0017ea0 <UnixFile::~UnixFile()>
c001a225:	83 c4 10             	add    esp,0x10
c001a228:	90                   	nop
c001a229:	83 c4 0c             	add    esp,0xc
c001a22c:	c3                   	ret    
c001a22d:	90                   	nop

c001a22e <File::~File()>:
c001a22e:	83 ec 0c             	sub    esp,0xc
c001a231:	83 ec 0c             	sub    esp,0xc
c001a234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a238:	e8 cd ff ff ff       	call   c001a20a <File::~File()>
c001a23d:	83 c4 10             	add    esp,0x10
c001a240:	83 ec 08             	sub    esp,0x8
c001a243:	68 14 01 00 00       	push   0x114
c001a248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a24c:	e8 c3 f0 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001a251:	83 c4 10             	add    esp,0x10
c001a254:	83 c4 0c             	add    esp,0xc
c001a257:	c3                   	ret    

c001a258 <Directory::~Directory()>:
c001a258:	83 ec 0c             	sub    esp,0xc
c001a25b:	ba ac 20 03 c0       	mov    edx,0xc00320ac
c001a260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a264:	89 10                	mov    DWORD PTR [eax],edx
c001a266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a26a:	83 ec 0c             	sub    esp,0xc
c001a26d:	50                   	push   eax
c001a26e:	e8 2d dc ff ff       	call   c0017ea0 <UnixFile::~UnixFile()>
c001a273:	83 c4 10             	add    esp,0x10
c001a276:	90                   	nop
c001a277:	83 c4 0c             	add    esp,0xc
c001a27a:	c3                   	ret    
c001a27b:	90                   	nop

c001a27c <Directory::~Directory()>:
c001a27c:	83 ec 0c             	sub    esp,0xc
c001a27f:	83 ec 0c             	sub    esp,0xc
c001a282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a286:	e8 cd ff ff ff       	call   c001a258 <Directory::~Directory()>
c001a28b:	83 c4 10             	add    esp,0x10
c001a28e:	83 ec 08             	sub    esp,0x8
c001a291:	68 14 01 00 00       	push   0x114
c001a296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a29a:	e8 75 f0 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	83 c4 0c             	add    esp,0xc
c001a2a5:	c3                   	ret    

c001a2a6 <Filesystem::Filesystem()>:
c001a2a6:	ba 24 20 03 c0       	mov    edx,0xc0032024
c001a2ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2af:	89 10                	mov    DWORD PTR [eax],edx
c001a2b1:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a2b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c2:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a2c7:	90                   	nop
c001a2c8:	c3                   	ret    
c001a2c9:	90                   	nop

c001a2ca <Filesystem::~Filesystem()>:
c001a2ca:	ba 24 20 03 c0       	mov    edx,0xc0032024
c001a2cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d3:	89 10                	mov    DWORD PTR [eax],edx
c001a2d5:	90                   	nop
c001a2d6:	c3                   	ret    
c001a2d7:	90                   	nop

c001a2d8 <Filesystem::~Filesystem()>:
c001a2d8:	83 ec 0c             	sub    esp,0xc
c001a2db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a2df:	e8 e6 ff ff ff       	call   c001a2ca <Filesystem::~Filesystem()>
c001a2e4:	83 c4 04             	add    esp,0x4
c001a2e7:	83 ec 08             	sub    esp,0x8
c001a2ea:	6a 08                	push   0x8
c001a2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2f0:	e8 1f f0 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	83 c4 0c             	add    esp,0xc
c001a2fb:	c3                   	ret    

c001a2fc <Fs::getcwd(Process*, char*, int)>:
c001a2fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a300:	31 c0                	xor    eax,eax
c001a302:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a305:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a309:	7d 15                	jge    c001a320 <Fs::getcwd(Process*, char*, int)+0x24>
c001a30b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a30f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a316:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a319:	84 c9                	test   cl,cl
c001a31b:	74 06                	je     c001a323 <Fs::getcwd(Process*, char*, int)+0x27>
c001a31d:	40                   	inc    eax
c001a31e:	eb e2                	jmp    c001a302 <Fs::getcwd(Process*, char*, int)+0x6>
c001a320:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a323:	31 c0                	xor    eax,eax
c001a325:	c3                   	ret    

c001a326 <Fs::initVFS()>:
c001a326:	83 ec 18             	sub    esp,0x18
c001a329:	6a 08                	push   0x8
c001a32b:	e8 81 c2 ff ff       	call   c00165b1 <malloc>
c001a330:	89 04 24             	mov    DWORD PTR [esp],eax
c001a333:	e8 f8 e9 00 00       	call   c0028d30 <FAT::FAT()>
c001a338:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a33f:	e8 6d c2 ff ff       	call   c00165b1 <malloc>
c001a344:	89 04 24             	mov    DWORD PTR [esp],eax
c001a347:	e8 10 f9 00 00       	call   c0029c5c <ISO9660::ISO9660()>
c001a34c:	83 c4 1c             	add    esp,0x1c
c001a34f:	c3                   	ret    

c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a350:	55                   	push   ebp
c001a351:	57                   	push   edi
c001a352:	56                   	push   esi
c001a353:	53                   	push   ebx
c001a354:	81 ec 10 04 00 00    	sub    esp,0x410
c001a35a:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a361:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a368:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a370:	68 00 04 00 00       	push   0x400
c001a375:	6a 00                	push   0x0
c001a377:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a37b:	57                   	push   edi
c001a37c:	e8 6f 61 fe ff       	call   c00004f0 <memset>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a388:	75 0b                	jne    c001a395 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a38a:	50                   	push   eax
c001a38b:	50                   	push   eax
c001a38c:	55                   	push   ebp
c001a38d:	57                   	push   edi
c001a38e:	e8 ad 62 fe ff       	call   c0000640 <strcpy>
c001a393:	eb 51                	jmp    c001a3e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a395:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a399:	83 f8 5c             	cmp    eax,0x5c
c001a39c:	74 05                	je     c001a3a3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a39e:	83 f8 2f             	cmp    eax,0x2f
c001a3a1:	75 1e                	jne    c001a3c1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a3a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a3aa:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ac:	3c 60                	cmp    al,0x60
c001a3ae:	7e 03                	jle    c001a3b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a3b0:	83 e8 20             	sub    eax,0x20
c001a3b3:	88 04 24             	mov    BYTE PTR [esp],al
c001a3b6:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a3bd:	50                   	push   eax
c001a3be:	50                   	push   eax
c001a3bf:	eb 1e                	jmp    c001a3df <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a3c1:	50                   	push   eax
c001a3c2:	50                   	push   eax
c001a3c3:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a3ca:	57                   	push   edi
c001a3cb:	e8 70 62 fe ff       	call   c0000640 <strcpy>
c001a3d0:	58                   	pop    eax
c001a3d1:	5a                   	pop    edx
c001a3d2:	68 1f 31 03 c0       	push   0xc003311f
c001a3d7:	57                   	push   edi
c001a3d8:	e8 63 64 fe ff       	call   c0000840 <strcat>
c001a3dd:	59                   	pop    ecx
c001a3de:	58                   	pop    eax
c001a3df:	55                   	push   ebp
c001a3e0:	57                   	push   edi
c001a3e1:	e8 5a 64 fe ff       	call   c0000840 <strcat>
c001a3e6:	83 c4 10             	add    esp,0x10
c001a3e9:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a3ec:	3c 60                	cmp    al,0x60
c001a3ee:	7e 03                	jle    c001a3f3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a3f0:	83 e8 20             	sub    eax,0x20
c001a3f3:	88 04 24             	mov    BYTE PTR [esp],al
c001a3f6:	88 06                	mov    BYTE PTR [esi],al
c001a3f8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a3ff:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a405:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a409:	bf 03 00 00 00       	mov    edi,0x3
c001a40e:	b8 03 00 00 00       	mov    eax,0x3
c001a413:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a417:	89 e9                	mov    ecx,ebp
c001a419:	85 ed                	test   ebp,ebp
c001a41b:	0f 84 97 00 00 00    	je     c001a4b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a421:	8d 57 01             	lea    edx,[edi+0x1]
c001a424:	83 fd 5c             	cmp    ebp,0x5c
c001a427:	74 05                	je     c001a42e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a429:	83 fd 2f             	cmp    ebp,0x2f
c001a42c:	75 12                	jne    c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a42e:	89 c5                	mov    ebp,eax
c001a430:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a435:	74 09                	je     c001a440 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a437:	40                   	inc    eax
c001a438:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a43c:	89 d7                	mov    edi,edx
c001a43e:	eb d3                	jmp    c001a413 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a440:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a445:	0f be e9             	movsx  ebp,cl
c001a448:	75 5e                	jne    c001a4a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a44a:	83 fd 2e             	cmp    ebp,0x2e
c001a44d:	75 59                	jne    c001a4a8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a44f:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a453:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a458:	74 18                	je     c001a472 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a45a:	83 fd 2e             	cmp    ebp,0x2e
c001a45d:	74 53                	je     c001a4b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a45f:	89 fa                	mov    edx,edi
c001a461:	42                   	inc    edx
c001a462:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a466:	83 f9 2f             	cmp    ecx,0x2f
c001a469:	74 f6                	je     c001a461 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a46b:	83 f9 5c             	cmp    ecx,0x5c
c001a46e:	74 f1                	je     c001a461 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a470:	eb ca                	jmp    c001a43c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a472:	83 fd 2e             	cmp    ebp,0x2e
c001a475:	74 3b                	je     c001a4b2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a477:	83 f8 03             	cmp    eax,0x3
c001a47a:	74 c0                	je     c001a43c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a47c:	42                   	inc    edx
c001a47d:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a481:	83 f9 5c             	cmp    ecx,0x5c
c001a484:	74 f6                	je     c001a47c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a486:	83 f9 2f             	cmp    ecx,0x2f
c001a489:	74 f1                	je     c001a47c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a48b:	48                   	dec    eax
c001a48c:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a490:	75 06                	jne    c001a498 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a492:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a496:	eb f3                	jmp    c001a48b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a498:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a49c:	74 07                	je     c001a4a5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a49e:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4a2:	48                   	dec    eax
c001a4a3:	eb f3                	jmp    c001a498 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a4a5:	40                   	inc    eax
c001a4a6:	eb 94                	jmp    c001a43c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4a8:	83 fd 5c             	cmp    ebp,0x5c
c001a4ab:	74 8f                	je     c001a43c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4ad:	83 fd 2f             	cmp    ebp,0x2f
c001a4b0:	74 8a                	je     c001a43c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4b2:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a4b5:	40                   	inc    eax
c001a4b6:	eb 84                	jmp    c001a43c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a4b8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a4bc:	83 ec 0c             	sub    esp,0xc
c001a4bf:	56                   	push   esi
c001a4c0:	e8 ab 60 fe ff       	call   c0000570 <strlen>
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a4cd:	74 17                	je     c001a4e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a4cf:	83 ec 0c             	sub    esp,0xc
c001a4d2:	56                   	push   esi
c001a4d3:	e8 98 60 fe ff       	call   c0000570 <strlen>
c001a4d8:	83 c4 10             	add    esp,0x10
c001a4db:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a4e0:	74 04                	je     c001a4e6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a4e2:	31 ff                	xor    edi,edi
c001a4e4:	eb 5c                	jmp    c001a542 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a4e6:	83 ec 0c             	sub    esp,0xc
c001a4e9:	56                   	push   esi
c001a4ea:	e8 81 60 fe ff       	call   c0000570 <strlen>
c001a4ef:	83 c4 10             	add    esp,0x10
c001a4f2:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a4f7:	74 e9                	je     c001a4e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a4f9:	83 ec 0c             	sub    esp,0xc
c001a4fc:	56                   	push   esi
c001a4fd:	e8 6e 60 fe ff       	call   c0000570 <strlen>
c001a502:	83 c4 10             	add    esp,0x10
c001a505:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a50a:	eb b0                	jmp    c001a4bc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a50c:	52                   	push   edx
c001a50d:	52                   	push   edx
c001a50e:	56                   	push   esi
c001a50f:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a513:	55                   	push   ebp
c001a514:	e8 27 61 fe ff       	call   c0000640 <strcpy>
c001a519:	59                   	pop    ecx
c001a51a:	58                   	pop    eax
c001a51b:	56                   	push   esi
c001a51c:	55                   	push   ebp
c001a51d:	e8 96 f8 ff ff       	call   c0019db8 <KeDereferenceSymlink(char const*, char*)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	48                   	dec    eax
c001a526:	75 37                	jne    c001a55f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a528:	50                   	push   eax
c001a529:	56                   	push   esi
c001a52a:	55                   	push   ebp
c001a52b:	68 da 1f 03 c0       	push   0xc0031fda
c001a530:	e8 0c ef ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001a535:	83 c4 10             	add    esp,0x10
c001a538:	8d 47 01             	lea    eax,[edi+0x1]
c001a53b:	83 ff 14             	cmp    edi,0x14
c001a53e:	74 08                	je     c001a548 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a540:	89 c7                	mov    edi,eax
c001a542:	85 db                	test   ebx,ebx
c001a544:	75 c6                	jne    c001a50c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a546:	eb 17                	jmp    c001a55f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a548:	83 ec 0c             	sub    esp,0xc
c001a54b:	bf 15 00 00 00       	mov    edi,0x15
c001a550:	68 f5 1f 03 c0       	push   0xc0031ff5
c001a555:	e8 00 5f 00 00       	call   c002045a <KePanic(char const*)>
c001a55a:	83 c4 10             	add    esp,0x10
c001a55d:	eb e3                	jmp    c001a542 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a55f:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a565:	5b                   	pop    ebx
c001a566:	5e                   	pop    esi
c001a567:	5f                   	pop    edi
c001a568:	5d                   	pop    ebp
c001a569:	c3                   	ret    

c001a56a <File::File(char const*, Process*, bool)>:
c001a56a:	83 ec 1c             	sub    esp,0x1c
c001a56d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a571:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a575:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a579:	83 ec 08             	sub    esp,0x8
c001a57c:	6a 00                	push   0x0
c001a57e:	50                   	push   eax
c001a57f:	e8 36 d7 ff ff       	call   c0017cba <UnixFile::UnixFile(int)>
c001a584:	83 c4 10             	add    esp,0x10
c001a587:	ba 90 20 03 c0       	mov    edx,0xc0032090
c001a58c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a590:	89 10                	mov    DWORD PTR [eax],edx
c001a592:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a597:	85 c0                	test   eax,eax
c001a599:	74 0f                	je     c001a5aa <File::File(char const*, Process*, bool)+0x40>
c001a59b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a5a0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a5a4:	74 04                	je     c001a5aa <File::File(char const*, Process*, bool)+0x40>
c001a5a6:	b0 01                	mov    al,0x1
c001a5a8:	eb 02                	jmp    c001a5ac <File::File(char const*, Process*, bool)+0x42>
c001a5aa:	b0 00                	mov    al,0x0
c001a5ac:	0f b6 c0             	movzx  eax,al
c001a5af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5b3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a5b9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a5bd:	83 c2 0d             	add    edx,0xd
c001a5c0:	50                   	push   eax
c001a5c1:	51                   	push   ecx
c001a5c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a5c6:	52                   	push   edx
c001a5c7:	e8 84 fd ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a5cc:	83 c4 10             	add    esp,0x10
c001a5cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a5d6:	83 e8 41             	sub    eax,0x41
c001a5d9:	88 c2                	mov    dl,al
c001a5db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5df:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a5f7:	0f b6 c0             	movzx  eax,al
c001a5fa:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a601:	85 c0                	test   eax,eax
c001a603:	74 3e                	je     c001a643 <File::File(char const*, Process*, bool)+0xd9>
c001a605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a609:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a60f:	0f b6 c0             	movzx  eax,al
c001a612:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a619:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a61f:	85 c0                	test   eax,eax
c001a621:	75 20                	jne    c001a643 <File::File(char const*, Process*, bool)+0xd9>
c001a623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a627:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a62d:	0f b6 c0             	movzx  eax,al
c001a630:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a637:	83 ec 0c             	sub    esp,0xc
c001a63a:	50                   	push   eax
c001a63b:	e8 b2 21 00 00       	call   c001c7f2 <LogicalDisk::mount()>
c001a640:	83 c4 10             	add    esp,0x10
c001a643:	90                   	nop
c001a644:	83 c4 1c             	add    esp,0x1c
c001a647:	c3                   	ret    

c001a648 <File::File(char const*, Process*)>:
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	6a 01                	push   0x1
c001a64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a651:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a659:	e8 0c ff ff ff       	call   c001a56a <File::File(char const*, Process*, bool)>
c001a65e:	83 c4 10             	add    esp,0x10
c001a661:	90                   	nop
c001a662:	83 c4 0c             	add    esp,0xc
c001a665:	c3                   	ret    

c001a666 <File::open(FileOpenMode)>:
c001a666:	53                   	push   ebx
c001a667:	b8 0b 00 00 00       	mov    eax,0xb
c001a66c:	83 ec 08             	sub    esp,0x8
c001a66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a673:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a67a:	83 fa 19             	cmp    edx,0x19
c001a67d:	77 40                	ja     c001a6bf <File::open(FileOpenMode)+0x59>
c001a67f:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a686:	85 d2                	test   edx,edx
c001a688:	74 35                	je     c001a6bf <File::open(FileOpenMode)+0x59>
c001a68a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a690:	85 d2                	test   edx,edx
c001a692:	74 2b                	je     c001a6bf <File::open(FileOpenMode)+0x59>
c001a694:	b8 06 00 00 00       	mov    eax,0x6
c001a699:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a69d:	75 20                	jne    c001a6bf <File::open(FileOpenMode)+0x59>
c001a69f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a6a1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a6ab:	51                   	push   ecx
c001a6ac:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a6af:	51                   	push   ecx
c001a6b0:	52                   	push   edx
c001a6b1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6b4:	83 c4 10             	add    esp,0x10
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	75 04                	jne    c001a6bf <File::open(FileOpenMode)+0x59>
c001a6bb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a6bf:	83 c4 08             	add    esp,0x8
c001a6c2:	5b                   	pop    ebx
c001a6c3:	c3                   	ret    

c001a6c4 <File::close()>:
c001a6c4:	53                   	push   ebx
c001a6c5:	b8 0b 00 00 00       	mov    eax,0xb
c001a6ca:	83 ec 08             	sub    esp,0x8
c001a6cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6d1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6d8:	83 f9 19             	cmp    ecx,0x19
c001a6db:	77 41                	ja     c001a71e <File::close()+0x5a>
c001a6dd:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6e4:	85 db                	test   ebx,ebx
c001a6e6:	74 36                	je     c001a71e <File::close()+0x5a>
c001a6e8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a6ef:	74 2d                	je     c001a71e <File::close()+0x5a>
c001a6f1:	b8 05 00 00 00       	mov    eax,0x5
c001a6f6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6fa:	74 22                	je     c001a71e <File::close()+0x5a>
c001a6fc:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a700:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a707:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a70d:	53                   	push   ebx
c001a70e:	53                   	push   ebx
c001a70f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a711:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a717:	50                   	push   eax
c001a718:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	83 c4 08             	add    esp,0x8
c001a721:	5b                   	pop    ebx
c001a722:	c3                   	ret    
c001a723:	90                   	nop

c001a724 <File::seek(unsigned long long)>:
c001a724:	56                   	push   esi
c001a725:	53                   	push   ebx
c001a726:	b8 0b 00 00 00       	mov    eax,0xb
c001a72b:	51                   	push   ecx
c001a72c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a730:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a734:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a73b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a73f:	83 fa 19             	cmp    edx,0x19
c001a742:	77 31                	ja     c001a775 <File::seek(unsigned long long)+0x51>
c001a744:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a74b:	85 d2                	test   edx,edx
c001a74d:	74 26                	je     c001a775 <File::seek(unsigned long long)+0x51>
c001a74f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a755:	85 d2                	test   edx,edx
c001a757:	74 1c                	je     c001a775 <File::seek(unsigned long long)+0x51>
c001a759:	b8 05 00 00 00       	mov    eax,0x5
c001a75e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a762:	74 11                	je     c001a775 <File::seek(unsigned long long)+0x51>
c001a764:	8b 02                	mov    eax,DWORD PTR [edx]
c001a766:	53                   	push   ebx
c001a767:	51                   	push   ecx
c001a768:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a76e:	52                   	push   edx
c001a76f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a772:	83 c4 10             	add    esp,0x10
c001a775:	5a                   	pop    edx
c001a776:	5b                   	pop    ebx
c001a777:	5e                   	pop    esi
c001a778:	c3                   	ret    
c001a779:	90                   	nop

c001a77a <File::truncate(unsigned long long)>:
c001a77a:	56                   	push   esi
c001a77b:	53                   	push   ebx
c001a77c:	b8 0b 00 00 00       	mov    eax,0xb
c001a781:	51                   	push   ecx
c001a782:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a786:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a78a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a791:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a795:	83 fa 19             	cmp    edx,0x19
c001a798:	77 31                	ja     c001a7cb <File::truncate(unsigned long long)+0x51>
c001a79a:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a7a1:	85 d2                	test   edx,edx
c001a7a3:	74 26                	je     c001a7cb <File::truncate(unsigned long long)+0x51>
c001a7a5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7ab:	85 d2                	test   edx,edx
c001a7ad:	74 1c                	je     c001a7cb <File::truncate(unsigned long long)+0x51>
c001a7af:	b8 05 00 00 00       	mov    eax,0x5
c001a7b4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a7b8:	74 11                	je     c001a7cb <File::truncate(unsigned long long)+0x51>
c001a7ba:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7bc:	53                   	push   ebx
c001a7bd:	51                   	push   ecx
c001a7be:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a7c4:	52                   	push   edx
c001a7c5:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a7c8:	83 c4 10             	add    esp,0x10
c001a7cb:	5a                   	pop    edx
c001a7cc:	5b                   	pop    ebx
c001a7cd:	5e                   	pop    esi
c001a7ce:	c3                   	ret    
c001a7cf:	90                   	nop

c001a7d0 <File::tell(unsigned long long*)>:
c001a7d0:	83 ec 0c             	sub    esp,0xc
c001a7d3:	b8 0b 00 00 00       	mov    eax,0xb
c001a7d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7dc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a7e3:	83 fa 19             	cmp    edx,0x19
c001a7e6:	77 34                	ja     c001a81c <File::tell(unsigned long long*)+0x4c>
c001a7e8:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a7ef:	85 d2                	test   edx,edx
c001a7f1:	74 29                	je     c001a81c <File::tell(unsigned long long*)+0x4c>
c001a7f3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a7f9:	85 d2                	test   edx,edx
c001a7fb:	74 1f                	je     c001a81c <File::tell(unsigned long long*)+0x4c>
c001a7fd:	b8 05 00 00 00       	mov    eax,0x5
c001a802:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a806:	74 14                	je     c001a81c <File::tell(unsigned long long*)+0x4c>
c001a808:	50                   	push   eax
c001a809:	8b 02                	mov    eax,DWORD PTR [edx]
c001a80b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a80f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a815:	52                   	push   edx
c001a816:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	83 c4 0c             	add    esp,0xc
c001a81f:	c3                   	ret    

c001a820 <File::rewind()>:
c001a820:	83 ec 10             	sub    esp,0x10
c001a823:	6a 00                	push   0x0
c001a825:	6a 00                	push   0x0
c001a827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a82b:	e8 f4 fe ff ff       	call   c001a724 <File::seek(unsigned long long)>
c001a830:	83 c4 1c             	add    esp,0x1c
c001a833:	c3                   	ret    

c001a834 <File::unlink()>:
c001a834:	83 ec 0c             	sub    esp,0xc
c001a837:	b8 0b 00 00 00       	mov    eax,0xb
c001a83c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a840:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a847:	83 f9 19             	cmp    ecx,0x19
c001a84a:	77 2f                	ja     c001a87b <File::unlink()+0x47>
c001a84c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a853:	85 c9                	test   ecx,ecx
c001a855:	74 24                	je     c001a87b <File::unlink()+0x47>
c001a857:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a85d:	85 c9                	test   ecx,ecx
c001a85f:	74 1a                	je     c001a87b <File::unlink()+0x47>
c001a861:	b8 06 00 00 00       	mov    eax,0x6
c001a866:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a86a:	75 0f                	jne    c001a87b <File::unlink()+0x47>
c001a86c:	83 c2 0d             	add    edx,0xd
c001a86f:	50                   	push   eax
c001a870:	50                   	push   eax
c001a871:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a873:	52                   	push   edx
c001a874:	51                   	push   ecx
c001a875:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a878:	83 c4 10             	add    esp,0x10
c001a87b:	83 c4 0c             	add    esp,0xc
c001a87e:	c3                   	ret    
c001a87f:	90                   	nop

c001a880 <File::rename(char const*)>:
c001a880:	83 ec 0c             	sub    esp,0xc
c001a883:	b8 0b 00 00 00       	mov    eax,0xb
c001a888:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a88c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a893:	83 f9 19             	cmp    ecx,0x19
c001a896:	77 32                	ja     c001a8ca <File::rename(char const*)+0x4a>
c001a898:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a89f:	85 c9                	test   ecx,ecx
c001a8a1:	74 27                	je     c001a8ca <File::rename(char const*)+0x4a>
c001a8a3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8a9:	85 c9                	test   ecx,ecx
c001a8ab:	74 1d                	je     c001a8ca <File::rename(char const*)+0x4a>
c001a8ad:	b8 06 00 00 00       	mov    eax,0x6
c001a8b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a8b6:	75 12                	jne    c001a8ca <File::rename(char const*)+0x4a>
c001a8b8:	83 c2 0d             	add    edx,0xd
c001a8bb:	50                   	push   eax
c001a8bc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a8be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8c2:	52                   	push   edx
c001a8c3:	51                   	push   ecx
c001a8c4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a8c7:	83 c4 10             	add    esp,0x10
c001a8ca:	83 c4 0c             	add    esp,0xc
c001a8cd:	c3                   	ret    

c001a8ce <File::chfatattr(unsigned char, unsigned char)>:
c001a8ce:	57                   	push   edi
c001a8cf:	b8 0b 00 00 00       	mov    eax,0xb
c001a8d4:	56                   	push   esi
c001a8d5:	53                   	push   ebx
c001a8d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a8e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8e9:	83 f9 19             	cmp    ecx,0x19
c001a8ec:	77 37                	ja     c001a925 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a8ee:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a8f5:	85 c9                	test   ecx,ecx
c001a8f7:	74 2c                	je     c001a925 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a8f9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a8ff:	85 c9                	test   ecx,ecx
c001a901:	74 22                	je     c001a925 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a903:	b8 06 00 00 00       	mov    eax,0x6
c001a908:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a90c:	75 17                	jne    c001a925 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a90e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a910:	89 f0                	mov    eax,esi
c001a912:	83 c2 0d             	add    edx,0xd
c001a915:	0f b6 f0             	movzx  esi,al
c001a918:	0f b6 db             	movzx  ebx,bl
c001a91b:	56                   	push   esi
c001a91c:	53                   	push   ebx
c001a91d:	52                   	push   edx
c001a91e:	51                   	push   ecx
c001a91f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a922:	83 c4 10             	add    esp,0x10
c001a925:	5b                   	pop    ebx
c001a926:	5e                   	pop    esi
c001a927:	5f                   	pop    edi
c001a928:	c3                   	ret    
c001a929:	90                   	nop

c001a92a <File::exists()>:
c001a92a:	83 ec 0c             	sub    esp,0xc
c001a92d:	31 c0                	xor    eax,eax
c001a92f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a933:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a93a:	83 f9 19             	cmp    ecx,0x19
c001a93d:	77 24                	ja     c001a963 <File::exists()+0x39>
c001a93f:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a946:	85 c9                	test   ecx,ecx
c001a948:	74 19                	je     c001a963 <File::exists()+0x39>
c001a94a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a950:	85 c9                	test   ecx,ecx
c001a952:	74 0f                	je     c001a963 <File::exists()+0x39>
c001a954:	83 c2 0d             	add    edx,0xd
c001a957:	50                   	push   eax
c001a958:	50                   	push   eax
c001a959:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a95b:	52                   	push   edx
c001a95c:	51                   	push   ecx
c001a95d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a960:	83 c4 10             	add    esp,0x10
c001a963:	83 c4 0c             	add    esp,0xc
c001a966:	c3                   	ret    
c001a967:	90                   	nop

c001a968 <File::stat(unsigned long long*, bool*)>:
c001a968:	56                   	push   esi
c001a969:	53                   	push   ebx
c001a96a:	50                   	push   eax
c001a96b:	b8 0b 00 00 00       	mov    eax,0xb
c001a970:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a974:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a978:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a97f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a983:	83 f9 19             	cmp    ecx,0x19
c001a986:	77 3d                	ja     c001a9c5 <File::stat(unsigned long long*, bool*)+0x5d>
c001a988:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a98f:	85 c9                	test   ecx,ecx
c001a991:	74 32                	je     c001a9c5 <File::stat(unsigned long long*, bool*)+0x5d>
c001a993:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a999:	85 c9                	test   ecx,ecx
c001a99b:	74 28                	je     c001a9c5 <File::stat(unsigned long long*, bool*)+0x5d>
c001a99d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a99f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9a3:	74 13                	je     c001a9b8 <File::stat(unsigned long long*, bool*)+0x50>
c001a9a5:	83 ec 04             	sub    esp,0x4
c001a9a8:	56                   	push   esi
c001a9a9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a9af:	51                   	push   ecx
c001a9b0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a9b3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a9b6:	eb 0a                	jmp    c001a9c2 <File::stat(unsigned long long*, bool*)+0x5a>
c001a9b8:	53                   	push   ebx
c001a9b9:	83 c2 0d             	add    edx,0xd
c001a9bc:	56                   	push   esi
c001a9bd:	52                   	push   edx
c001a9be:	51                   	push   ecx
c001a9bf:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	5a                   	pop    edx
c001a9c6:	5b                   	pop    ebx
c001a9c7:	5e                   	pop    esi
c001a9c8:	c3                   	ret    

c001a9c9 <Fs::setcwd(Process*, char*)>:
c001a9c9:	55                   	push   ebp
c001a9ca:	57                   	push   edi
c001a9cb:	56                   	push   esi
c001a9cc:	53                   	push   ebx
c001a9cd:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a9d3:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a9da:	6a 00                	push   0x0
c001a9dc:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a9e2:	57                   	push   edi
c001a9e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9ea:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a9ee:	56                   	push   esi
c001a9ef:	e8 5c f9 ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a9f4:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9f7:	e8 74 5b fe ff       	call   c0000570 <strlen>
c001a9fc:	83 c4 10             	add    esp,0x10
c001a9ff:	83 f8 02             	cmp    eax,0x2
c001aa02:	77 15                	ja     c001aa19 <Fs::setcwd(Process*, char*)+0x50>
c001aa04:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001aa09:	83 eb 41             	sub    ebx,0x41
c001aa0c:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001aa13:	85 c0                	test   eax,eax
c001aa15:	75 1c                	jne    c001aa33 <Fs::setcwd(Process*, char*)+0x6a>
c001aa17:	eb 2f                	jmp    c001aa48 <Fs::setcwd(Process*, char*)+0x7f>
c001aa19:	83 ec 0c             	sub    esp,0xc
c001aa1c:	56                   	push   esi
c001aa1d:	e8 4e 5b fe ff       	call   c0000570 <strlen>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	83 f8 03             	cmp    eax,0x3
c001aa28:	75 57                	jne    c001aa81 <Fs::setcwd(Process*, char*)+0xb8>
c001aa2a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001aa2f:	75 50                	jne    c001aa81 <Fs::setcwd(Process*, char*)+0xb8>
c001aa31:	eb d1                	jmp    c001aa04 <Fs::setcwd(Process*, char*)+0x3b>
c001aa33:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001aa3a:	75 0c                	jne    c001aa48 <Fs::setcwd(Process*, char*)+0x7f>
c001aa3c:	83 ec 0c             	sub    esp,0xc
c001aa3f:	50                   	push   eax
c001aa40:	e8 ad 1d 00 00       	call   c001c7f2 <LogicalDisk::mount()>
c001aa45:	83 c4 10             	add    esp,0x10
c001aa48:	b8 03 00 00 00       	mov    eax,0x3
c001aa4d:	83 fb 19             	cmp    ebx,0x19
c001aa50:	0f 87 c6 00 00 00    	ja     c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aa56:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001aa5d:	b8 05 00 00 00       	mov    eax,0x5
c001aa62:	85 d2                	test   edx,edx
c001aa64:	0f 84 b2 00 00 00    	je     c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aa6a:	b8 06 00 00 00       	mov    eax,0x6
c001aa6f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001aa76:	0f 85 92 00 00 00    	jne    c001ab0e <Fs::setcwd(Process*, char*)+0x145>
c001aa7c:	e9 9b 00 00 00       	jmp    c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aa81:	83 ec 0c             	sub    esp,0xc
c001aa84:	68 14 01 00 00       	push   0x114
c001aa89:	e8 23 bb ff ff       	call   c00165b1 <malloc>
c001aa8e:	83 c4 0c             	add    esp,0xc
c001aa91:	89 c3                	mov    ebx,eax
c001aa93:	55                   	push   ebp
c001aa94:	56                   	push   esi
c001aa95:	50                   	push   eax
c001aa96:	e8 ad fb ff ff       	call   c001a648 <File::File(char const*, Process*)>
c001aa9b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001aaa0:	83 c4 0c             	add    esp,0xc
c001aaa3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aaa7:	50                   	push   eax
c001aaa8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aaac:	50                   	push   eax
c001aaad:	53                   	push   ebx
c001aaae:	e8 b5 fe ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c001aab3:	83 c4 10             	add    esp,0x10
c001aab6:	83 f8 02             	cmp    eax,0x2
c001aab9:	74 27                	je     c001aae2 <Fs::setcwd(Process*, char*)+0x119>
c001aabb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001aac0:	75 1c                	jne    c001aade <Fs::setcwd(Process*, char*)+0x115>
c001aac2:	b8 02 00 00 00       	mov    eax,0x2
c001aac7:	85 db                	test   ebx,ebx
c001aac9:	74 51                	je     c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aacb:	83 ec 0c             	sub    esp,0xc
c001aace:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aad0:	53                   	push   ebx
c001aad1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	b8 02 00 00 00       	mov    eax,0x2
c001aadc:	eb 3e                	jmp    c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aade:	85 c0                	test   eax,eax
c001aae0:	74 1c                	je     c001aafe <Fs::setcwd(Process*, char*)+0x135>
c001aae2:	b8 01 00 00 00       	mov    eax,0x1
c001aae7:	85 db                	test   ebx,ebx
c001aae9:	74 31                	je     c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aaeb:	83 ec 0c             	sub    esp,0xc
c001aaee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaf0:	53                   	push   ebx
c001aaf1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aaf4:	83 c4 10             	add    esp,0x10
c001aaf7:	b8 01 00 00 00       	mov    eax,0x1
c001aafc:	eb 1e                	jmp    c001ab1c <Fs::setcwd(Process*, char*)+0x153>
c001aafe:	85 db                	test   ebx,ebx
c001ab00:	74 0c                	je     c001ab0e <Fs::setcwd(Process*, char*)+0x145>
c001ab02:	83 ec 0c             	sub    esp,0xc
c001ab05:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab07:	53                   	push   ebx
c001ab08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	50                   	push   eax
c001ab0f:	50                   	push   eax
c001ab10:	56                   	push   esi
c001ab11:	57                   	push   edi
c001ab12:	e8 29 5b fe ff       	call   c0000640 <strcpy>
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	31 c0                	xor    eax,eax
c001ab1c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab22:	5b                   	pop    ebx
c001ab23:	5e                   	pop    esi
c001ab24:	5f                   	pop    edi
c001ab25:	5d                   	pop    ebp
c001ab26:	c3                   	ret    
c001ab27:	90                   	nop

c001ab28 <Directory::Directory(char const*, Process*)>:
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2f:	83 ec 08             	sub    esp,0x8
c001ab32:	6a 00                	push   0x0
c001ab34:	50                   	push   eax
c001ab35:	e8 80 d1 ff ff       	call   c0017cba <UnixFile::UnixFile(int)>
c001ab3a:	83 c4 10             	add    esp,0x10
c001ab3d:	ba ac 20 03 c0       	mov    edx,0xc00320ac
c001ab42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab46:	89 10                	mov    DWORD PTR [eax],edx
c001ab48:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ab4d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab51:	0f 95 c0             	setne  al
c001ab54:	0f b6 c0             	movzx  eax,al
c001ab57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab5b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001ab61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab65:	83 c2 0d             	add    edx,0xd
c001ab68:	50                   	push   eax
c001ab69:	51                   	push   ecx
c001ab6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab6e:	52                   	push   edx
c001ab6f:	e8 dc f7 ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001ab7e:	83 e8 41             	sub    eax,0x41
c001ab81:	88 c2                	mov    dl,al
c001ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab87:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001ab8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab91:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001ab95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab99:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001ab9f:	0f b6 c0             	movzx  eax,al
c001aba2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aba9:	85 c0                	test   eax,eax
c001abab:	74 3e                	je     c001abeb <Directory::Directory(char const*, Process*)+0xc3>
c001abad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abb7:	0f b6 c0             	movzx  eax,al
c001abba:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001abc1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001abc7:	85 c0                	test   eax,eax
c001abc9:	75 20                	jne    c001abeb <Directory::Directory(char const*, Process*)+0xc3>
c001abcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcf:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001abd5:	0f b6 c0             	movzx  eax,al
c001abd8:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001abdf:	83 ec 0c             	sub    esp,0xc
c001abe2:	50                   	push   eax
c001abe3:	e8 0a 1c 00 00       	call   c001c7f2 <LogicalDisk::mount()>
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	90                   	nop
c001abec:	83 c4 0c             	add    esp,0xc
c001abef:	c3                   	ret    

c001abf0 <Directory::open()>:
c001abf0:	53                   	push   ebx
c001abf1:	b8 0b 00 00 00       	mov    eax,0xb
c001abf6:	83 ec 08             	sub    esp,0x8
c001abf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abfd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001ac04:	83 fa 19             	cmp    edx,0x19
c001ac07:	77 3d                	ja     c001ac46 <Directory::open()+0x56>
c001ac09:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001ac10:	85 d2                	test   edx,edx
c001ac12:	74 32                	je     c001ac46 <Directory::open()+0x56>
c001ac14:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001ac1a:	85 d2                	test   edx,edx
c001ac1c:	74 28                	je     c001ac46 <Directory::open()+0x56>
c001ac1e:	b8 06 00 00 00       	mov    eax,0x6
c001ac23:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001ac27:	75 1d                	jne    c001ac46 <Directory::open()+0x56>
c001ac29:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001ac2f:	50                   	push   eax
c001ac30:	8b 02                	mov    eax,DWORD PTR [edx]
c001ac32:	51                   	push   ecx
c001ac33:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001ac36:	51                   	push   ecx
c001ac37:	52                   	push   edx
c001ac38:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001ac3b:	83 c4 10             	add    esp,0x10
c001ac3e:	85 c0                	test   eax,eax
c001ac40:	75 04                	jne    c001ac46 <Directory::open()+0x56>
c001ac42:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001ac46:	83 c4 08             	add    esp,0x8
c001ac49:	5b                   	pop    ebx
c001ac4a:	c3                   	ret    
c001ac4b:	90                   	nop

c001ac4c <Directory::close()>:
c001ac4c:	53                   	push   ebx
c001ac4d:	b8 0b 00 00 00       	mov    eax,0xb
c001ac52:	83 ec 08             	sub    esp,0x8
c001ac55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac59:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac60:	83 f9 19             	cmp    ecx,0x19
c001ac63:	77 41                	ja     c001aca6 <Directory::close()+0x5a>
c001ac65:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac6c:	85 db                	test   ebx,ebx
c001ac6e:	74 36                	je     c001aca6 <Directory::close()+0x5a>
c001ac70:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ac77:	74 2d                	je     c001aca6 <Directory::close()+0x5a>
c001ac79:	b8 05 00 00 00       	mov    eax,0x5
c001ac7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ac82:	74 22                	je     c001aca6 <Directory::close()+0x5a>
c001ac84:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ac88:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac8f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ac95:	53                   	push   ebx
c001ac96:	53                   	push   ebx
c001ac97:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac99:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ac9f:	50                   	push   eax
c001aca0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aca3:	83 c4 10             	add    esp,0x10
c001aca6:	83 c4 08             	add    esp,0x8
c001aca9:	5b                   	pop    ebx
c001acaa:	c3                   	ret    
c001acab:	90                   	nop

c001acac <Directory::unlink()>:
c001acac:	83 ec 0c             	sub    esp,0xc
c001acaf:	b8 0b 00 00 00       	mov    eax,0xb
c001acb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001acbf:	83 f9 19             	cmp    ecx,0x19
c001acc2:	77 2f                	ja     c001acf3 <Directory::unlink()+0x47>
c001acc4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001accb:	85 c9                	test   ecx,ecx
c001accd:	74 24                	je     c001acf3 <Directory::unlink()+0x47>
c001accf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001acd5:	85 c9                	test   ecx,ecx
c001acd7:	74 1a                	je     c001acf3 <Directory::unlink()+0x47>
c001acd9:	b8 06 00 00 00       	mov    eax,0x6
c001acde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ace2:	75 0f                	jne    c001acf3 <Directory::unlink()+0x47>
c001ace4:	83 c2 0d             	add    edx,0xd
c001ace7:	50                   	push   eax
c001ace8:	50                   	push   eax
c001ace9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aceb:	52                   	push   edx
c001acec:	51                   	push   ecx
c001aced:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001acf0:	83 c4 10             	add    esp,0x10
c001acf3:	83 c4 0c             	add    esp,0xc
c001acf6:	c3                   	ret    
c001acf7:	90                   	nop

c001acf8 <Directory::rename(char const*)>:
c001acf8:	83 ec 0c             	sub    esp,0xc
c001acfb:	b8 0b 00 00 00       	mov    eax,0xb
c001ad00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad0b:	83 f9 19             	cmp    ecx,0x19
c001ad0e:	77 32                	ja     c001ad42 <Directory::rename(char const*)+0x4a>
c001ad10:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad17:	85 c9                	test   ecx,ecx
c001ad19:	74 27                	je     c001ad42 <Directory::rename(char const*)+0x4a>
c001ad1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad21:	85 c9                	test   ecx,ecx
c001ad23:	74 1d                	je     c001ad42 <Directory::rename(char const*)+0x4a>
c001ad25:	b8 06 00 00 00       	mov    eax,0x6
c001ad2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ad2e:	75 12                	jne    c001ad42 <Directory::rename(char const*)+0x4a>
c001ad30:	83 c2 0d             	add    edx,0xd
c001ad33:	50                   	push   eax
c001ad34:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad3a:	52                   	push   edx
c001ad3b:	51                   	push   ecx
c001ad3c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	83 c4 0c             	add    esp,0xc
c001ad45:	c3                   	ret    

c001ad46 <Directory::exists()>:
c001ad46:	83 ec 0c             	sub    esp,0xc
c001ad49:	31 c0                	xor    eax,eax
c001ad4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad56:	83 f9 19             	cmp    ecx,0x19
c001ad59:	77 24                	ja     c001ad7f <Directory::exists()+0x39>
c001ad5b:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ad62:	85 c9                	test   ecx,ecx
c001ad64:	74 19                	je     c001ad7f <Directory::exists()+0x39>
c001ad66:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ad6c:	85 c9                	test   ecx,ecx
c001ad6e:	74 0f                	je     c001ad7f <Directory::exists()+0x39>
c001ad70:	83 c2 0d             	add    edx,0xd
c001ad73:	50                   	push   eax
c001ad74:	50                   	push   eax
c001ad75:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ad77:	52                   	push   edx
c001ad78:	51                   	push   ecx
c001ad79:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ad7c:	83 c4 10             	add    esp,0x10
c001ad7f:	83 c4 0c             	add    esp,0xc
c001ad82:	c3                   	ret    
c001ad83:	90                   	nop

c001ad84 <Directory::read(dirent*)>:
c001ad84:	83 ec 1c             	sub    esp,0x1c
c001ad87:	b8 0b 00 00 00       	mov    eax,0xb
c001ad8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ad97:	83 f9 19             	cmp    ecx,0x19
c001ad9a:	77 30                	ja     c001adcc <Directory::read(dirent*)+0x48>
c001ad9c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ada3:	85 c9                	test   ecx,ecx
c001ada5:	74 25                	je     c001adcc <Directory::read(dirent*)+0x48>
c001ada7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001adae:	74 1c                	je     c001adcc <Directory::read(dirent*)+0x48>
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	8b 02                	mov    eax,DWORD PTR [edx]
c001adb5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001adb9:	51                   	push   ecx
c001adba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001adbe:	6a 00                	push   0x0
c001adc0:	68 10 01 00 00       	push   0x110
c001adc5:	52                   	push   edx
c001adc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adc9:	83 c4 20             	add    esp,0x20
c001adcc:	83 c4 1c             	add    esp,0x1c
c001adcf:	c3                   	ret    

c001add0 <Directory::create()>:
c001add0:	83 ec 0c             	sub    esp,0xc
c001add3:	b8 0b 00 00 00       	mov    eax,0xb
c001add8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001addc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ade3:	83 f9 19             	cmp    ecx,0x19
c001ade6:	77 2f                	ja     c001ae17 <Directory::create()+0x47>
c001ade8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001adef:	85 c9                	test   ecx,ecx
c001adf1:	74 24                	je     c001ae17 <Directory::create()+0x47>
c001adf3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001adf9:	85 c9                	test   ecx,ecx
c001adfb:	74 1a                	je     c001ae17 <Directory::create()+0x47>
c001adfd:	b8 06 00 00 00       	mov    eax,0x6
c001ae02:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ae06:	75 0f                	jne    c001ae17 <Directory::create()+0x47>
c001ae08:	83 c2 0d             	add    edx,0xd
c001ae0b:	50                   	push   eax
c001ae0c:	50                   	push   eax
c001ae0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae0f:	52                   	push   edx
c001ae10:	51                   	push   ecx
c001ae11:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ae14:	83 c4 10             	add    esp,0x10
c001ae17:	83 c4 0c             	add    esp,0xc
c001ae1a:	c3                   	ret    
c001ae1b:	90                   	nop

c001ae1c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ae1c:	b8 0a 00 00 00       	mov    eax,0xa
c001ae21:	c3                   	ret    
c001ae22:	66 90                	xchg   ax,ax

c001ae24 <Bus::Bus(char const*)>:
c001ae24:	83 ec 0c             	sub    esp,0xc
c001ae27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2b:	83 ec 08             	sub    esp,0x8
c001ae2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae32:	50                   	push   eax
c001ae33:	e8 ec 07 00 00       	call   c001b624 <Device::Device(char const*)>
c001ae38:	83 c4 10             	add    esp,0x10
c001ae3b:	ba c8 20 03 c0       	mov    edx,0xc00320c8
c001ae40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae44:	89 10                	mov    DWORD PTR [eax],edx
c001ae46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ae54:	90                   	nop
c001ae55:	83 c4 0c             	add    esp,0xc
c001ae58:	c3                   	ret    
c001ae59:	90                   	nop
c001ae5a:	66 90                	xchg   ax,ax

c001ae5c <Bus::~Bus()>:
c001ae5c:	83 ec 0c             	sub    esp,0xc
c001ae5f:	ba c8 20 03 c0       	mov    edx,0xc00320c8
c001ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae68:	89 10                	mov    DWORD PTR [eax],edx
c001ae6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6e:	83 ec 0c             	sub    esp,0xc
c001ae71:	50                   	push   eax
c001ae72:	e8 4d 05 00 00       	call   c001b3c4 <Device::~Device()>
c001ae77:	83 c4 10             	add    esp,0x10
c001ae7a:	90                   	nop
c001ae7b:	83 c4 0c             	add    esp,0xc
c001ae7e:	c3                   	ret    
c001ae7f:	90                   	nop

c001ae80 <Bus::~Bus()>:
c001ae80:	83 ec 0c             	sub    esp,0xc
c001ae83:	83 ec 0c             	sub    esp,0xc
c001ae86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae8a:	e8 cd ff ff ff       	call   c001ae5c <Bus::~Bus()>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	83 ec 08             	sub    esp,0x8
c001ae95:	68 58 01 00 00       	push   0x158
c001ae9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae9e:	e8 71 e4 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	83 c4 0c             	add    esp,0xc
c001aea9:	c3                   	ret    

c001aeaa <beepThread(void*)>:
c001aeaa:	83 ec 0c             	sub    esp,0xc
c001aead:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001aeb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aeb6:	48                   	dec    eax
c001aeb7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001aebc:	75 01                	jne    c001aebf <beepThread(void*)+0x15>
c001aebe:	fb                   	sti    
c001aebf:	83 ec 0c             	sub    esp,0xc
c001aec2:	6b c2 0a             	imul   eax,edx,0xa
c001aec5:	50                   	push   eax
c001aec6:	e8 7d a7 00 00       	call   c0025648 <milliTenthSleep(unsigned int)>
c001aecb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aed2:	e8 78 c5 00 00       	call   c002744f <HalMakeBeep(int)>
c001aed7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001aedf:	83 c4 1c             	add    esp,0x1c
c001aee2:	e9 45 a6 00 00       	jmp    c002552c <blockTask(TaskState)>

c001aee7 <Krnl::beep(int, int, bool)>:
c001aee7:	56                   	push   esi
c001aee8:	53                   	push   ebx
c001aee9:	83 ec 10             	sub    esp,0x10
c001aeec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aef0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aef8:	e8 52 c5 00 00       	call   c002744f <HalMakeBeep(int)>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	89 f0                	mov    eax,esi
c001af02:	84 c0                	test   al,al
c001af04:	74 1e                	je     c001af24 <Krnl::beep(int, int, bool)+0x3d>
c001af06:	83 ec 0c             	sub    esp,0xc
c001af09:	6b db 0a             	imul   ebx,ebx,0xa
c001af0c:	53                   	push   ebx
c001af0d:	e8 36 a7 00 00       	call   c0025648 <milliTenthSleep(unsigned int)>
c001af12:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af1a:	83 c4 14             	add    esp,0x14
c001af1d:	5b                   	pop    ebx
c001af1e:	5e                   	pop    esi
c001af1f:	e9 2b c5 00 00       	jmp    c002744f <HalMakeBeep(int)>
c001af24:	68 e6 00 00 00       	push   0xe6
c001af29:	53                   	push   ebx
c001af2a:	68 aa ae 01 c0       	push   0xc001aeaa
c001af2f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001af35:	e8 e6 a2 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c001af3a:	83 c4 14             	add    esp,0x14
c001af3d:	5b                   	pop    ebx
c001af3e:	5e                   	pop    esi
c001af3f:	c3                   	ret    

c001af40 <User::loadClockSettings(int)>:
c001af40:	53                   	push   ebx
c001af41:	83 ec 14             	sub    esp,0x14
c001af44:	68 14 01 00 00       	push   0x114
c001af49:	e8 63 b6 ff ff       	call   c00165b1 <malloc>
c001af4e:	83 c4 0c             	add    esp,0xc
c001af51:	89 c3                	mov    ebx,eax
c001af53:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001af59:	68 ec 20 03 c0       	push   0xc00320ec
c001af5e:	50                   	push   eax
c001af5f:	e8 e4 f6 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c001af64:	58                   	pop    eax
c001af65:	5a                   	pop    edx
c001af66:	6a 01                	push   0x1
c001af68:	53                   	push   ebx
c001af69:	e8 f8 f6 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c001af6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af71:	e8 4e f7 ff ff       	call   c001a6c4 <File::close()>
c001af76:	83 c4 10             	add    esp,0x10
c001af79:	85 db                	test   ebx,ebx
c001af7b:	74 0f                	je     c001af8c <User::loadClockSettings(int)+0x4c>
c001af7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001af83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001af86:	83 c4 08             	add    esp,0x8
c001af89:	5b                   	pop    ebx
c001af8a:	ff e0                	jmp    eax
c001af8c:	83 c4 08             	add    esp,0x8
c001af8f:	5b                   	pop    ebx
c001af90:	c3                   	ret    
c001af91:	90                   	nop

c001af92 <Clock::Clock(char const*)>:
c001af92:	83 ec 0c             	sub    esp,0xc
c001af95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af99:	83 ec 08             	sub    esp,0x8
c001af9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001afa0:	50                   	push   eax
c001afa1:	e8 7e 06 00 00       	call   c001b624 <Device::Device(char const*)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	ba 14 21 03 c0       	mov    edx,0xc0032114
c001afae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb2:	89 10                	mov    DWORD PTR [eax],edx
c001afb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afb8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001afc2:	90                   	nop
c001afc3:	83 c4 0c             	add    esp,0xc
c001afc6:	c3                   	ret    
c001afc7:	90                   	nop

c001afc8 <Clock::~Clock()>:
c001afc8:	83 ec 0c             	sub    esp,0xc
c001afcb:	ba 14 21 03 c0       	mov    edx,0xc0032114
c001afd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd4:	89 10                	mov    DWORD PTR [eax],edx
c001afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	50                   	push   eax
c001afde:	e8 e1 03 00 00       	call   c001b3c4 <Device::~Device()>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	90                   	nop
c001afe7:	83 c4 0c             	add    esp,0xc
c001afea:	c3                   	ret    
c001afeb:	90                   	nop

c001afec <Clock::~Clock()>:
c001afec:	83 ec 0c             	sub    esp,0xc
c001afef:	83 ec 0c             	sub    esp,0xc
c001aff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aff6:	e8 cd ff ff ff       	call   c001afc8 <Clock::~Clock()>
c001affb:	83 c4 10             	add    esp,0x10
c001affe:	83 ec 08             	sub    esp,0x8
c001b001:	68 58 01 00 00       	push   0x158
c001b006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b00a:	e8 05 e3 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001b00f:	83 c4 10             	add    esp,0x10
c001b012:	83 c4 0c             	add    esp,0xc
c001b015:	c3                   	ret    

c001b016 <Clock::timeInSecondsLocal()>:
c001b016:	53                   	push   ebx
c001b017:	83 ec 14             	sub    esp,0x14
c001b01a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b01e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b020:	50                   	push   eax
c001b021:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b024:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b02b:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b031:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b037:	89 cb                	mov    ebx,ecx
c001b039:	c1 fb 1f             	sar    ebx,0x1f
c001b03c:	01 c8                	add    eax,ecx
c001b03e:	11 da                	adc    edx,ebx
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	31 c9                	xor    ecx,ecx
c001b045:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b04c:	74 05                	je     c001b053 <Clock::timeInSecondsLocal()+0x3d>
c001b04e:	b9 08 07 00 00       	mov    ecx,0x708
c001b053:	31 db                	xor    ebx,ebx
c001b055:	01 c8                	add    eax,ecx
c001b057:	11 da                	adc    edx,ebx
c001b059:	83 c4 08             	add    esp,0x8
c001b05c:	5b                   	pop    ebx
c001b05d:	c3                   	ret    

c001b05e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001b05e:	57                   	push   edi
c001b05f:	56                   	push   esi
c001b060:	53                   	push   ebx
c001b061:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b069:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b06b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b06f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001b072:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001b079:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001b07f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001b085:	99                   	cdq    
c001b086:	29 c6                	sub    esi,eax
c001b088:	19 d7                	sbb    edi,edx
c001b08a:	89 f0                	mov    eax,esi
c001b08c:	89 fa                	mov    edx,edi
c001b08e:	31 f6                	xor    esi,esi
c001b090:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b097:	74 05                	je     c001b09e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001b099:	be 08 07 00 00       	mov    esi,0x708
c001b09e:	31 ff                	xor    edi,edi
c001b0a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b0a4:	29 f0                	sub    eax,esi
c001b0a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0aa:	19 fa                	sbb    edx,edi
c001b0ac:	89 d8                	mov    eax,ebx
c001b0ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0b2:	5b                   	pop    ebx
c001b0b3:	5e                   	pop    esi
c001b0b4:	5f                   	pop    edi
c001b0b5:	ff e0                	jmp    eax

c001b0b7 <datetimeToSeconds(datetime_t)>:
c001b0b7:	55                   	push   ebp
c001b0b8:	57                   	push   edi
c001b0b9:	56                   	push   esi
c001b0ba:	53                   	push   ebx
c001b0bb:	83 ec 0c             	sub    esp,0xc
c001b0be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b0c2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b0c6:	89 d6                	mov    esi,edx
c001b0c8:	0f b6 c7             	movzx  eax,bh
c001b0cb:	c1 ee 10             	shr    esi,0x10
c001b0ce:	6b e8 3c             	imul   ebp,eax,0x3c
c001b0d1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001b0d7:	0f b6 ce             	movzx  ecx,dh
c001b0da:	89 df                	mov    edi,ebx
c001b0dc:	49                   	dec    ecx
c001b0dd:	c1 ef 10             	shr    edi,0x10
c001b0e0:	0f b6 db             	movzx  ebx,bl
c001b0e3:	89 f8                	mov    eax,edi
c001b0e5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001b0eb:	0f b6 f8             	movzx  edi,al
c001b0ee:	0f b6 d2             	movzx  edx,dl
c001b0f1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001b0f5:	01 d8                	add    eax,ebx
c001b0f7:	0f b7 de             	movzx  ebx,si
c001b0fa:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0fd:	c1 f8 1f             	sar    eax,0x1f
c001b100:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b104:	0f b6 c1             	movzx  eax,cl
c001b107:	8b 0c 85 60 21 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcdea0]
c001b10e:	83 f8 01             	cmp    eax,0x1
c001b111:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001b115:	76 27                	jbe    c001b13e <datetimeToSeconds(datetime_t)+0x87>
c001b117:	83 e6 03             	and    esi,0x3
c001b11a:	75 22                	jne    c001b13e <datetimeToSeconds(datetime_t)+0x87>
c001b11c:	31 d2                	xor    edx,edx
c001b11e:	be 64 00 00 00       	mov    esi,0x64
c001b123:	89 d8                	mov    eax,ebx
c001b125:	f7 f6                	div    esi
c001b127:	85 d2                	test   edx,edx
c001b129:	75 12                	jne    c001b13d <datetimeToSeconds(datetime_t)+0x86>
c001b12b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001b131:	be 90 01 00 00       	mov    esi,0x190
c001b136:	99                   	cdq    
c001b137:	f7 fe                	idiv   esi
c001b139:	85 d2                	test   edx,edx
c001b13b:	75 01                	jne    c001b13e <datetimeToSeconds(datetime_t)+0x87>
c001b13d:	41                   	inc    ecx
c001b13e:	83 fb 46             	cmp    ebx,0x46
c001b141:	76 48                	jbe    c001b18b <datetimeToSeconds(datetime_t)+0xd4>
c001b143:	be 46 00 00 00       	mov    esi,0x46
c001b148:	bf 64 00 00 00       	mov    edi,0x64
c001b14d:	bd 90 01 00 00       	mov    ebp,0x190
c001b152:	b8 6d 01 00 00       	mov    eax,0x16d
c001b157:	f7 c6 03 00 00 00    	test   esi,0x3
c001b15d:	75 23                	jne    c001b182 <datetimeToSeconds(datetime_t)+0xcb>
c001b15f:	89 f0                	mov    eax,esi
c001b161:	99                   	cdq    
c001b162:	f7 ff                	idiv   edi
c001b164:	b8 6e 01 00 00       	mov    eax,0x16e
c001b169:	85 d2                	test   edx,edx
c001b16b:	75 15                	jne    c001b182 <datetimeToSeconds(datetime_t)+0xcb>
c001b16d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b173:	99                   	cdq    
c001b174:	f7 fd                	idiv   ebp
c001b176:	83 fa 01             	cmp    edx,0x1
c001b179:	19 c0                	sbb    eax,eax
c001b17b:	f7 d0                	not    eax
c001b17d:	05 6e 01 00 00       	add    eax,0x16e
c001b182:	01 c1                	add    ecx,eax
c001b184:	46                   	inc    esi
c001b185:	39 de                	cmp    esi,ebx
c001b187:	7c c9                	jl     c001b152 <datetimeToSeconds(datetime_t)+0x9b>
c001b189:	eb 34                	jmp    c001b1bf <datetimeToSeconds(datetime_t)+0x108>
c001b18b:	74 32                	je     c001b1bf <datetimeToSeconds(datetime_t)+0x108>
c001b18d:	b8 45 00 00 00       	mov    eax,0x45
c001b192:	89 c2                	mov    edx,eax
c001b194:	83 e2 03             	and    edx,0x3
c001b197:	39 d8                	cmp    eax,ebx
c001b199:	7e 0f                	jle    c001b1aa <datetimeToSeconds(datetime_t)+0xf3>
c001b19b:	83 fa 01             	cmp    edx,0x1
c001b19e:	19 d2                	sbb    edx,edx
c001b1a0:	48                   	dec    eax
c001b1a1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b1a8:	eb e8                	jmp    c001b192 <datetimeToSeconds(datetime_t)+0xdb>
c001b1aa:	b8 6d 01 00 00       	mov    eax,0x16d
c001b1af:	85 d2                	test   edx,edx
c001b1b1:	75 0a                	jne    c001b1bd <datetimeToSeconds(datetime_t)+0x106>
c001b1b3:	83 fb 01             	cmp    ebx,0x1
c001b1b6:	19 c0                	sbb    eax,eax
c001b1b8:	05 6e 01 00 00       	add    eax,0x16e
c001b1bd:	29 c1                	sub    ecx,eax
c001b1bf:	b8 80 51 01 00       	mov    eax,0x15180
c001b1c4:	f7 e9                	imul   ecx
c001b1c6:	03 04 24             	add    eax,DWORD PTR [esp]
c001b1c9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b1cd:	83 c4 0c             	add    esp,0xc
c001b1d0:	5b                   	pop    ebx
c001b1d1:	5e                   	pop    esi
c001b1d2:	5f                   	pop    edi
c001b1d3:	5d                   	pop    ebp
c001b1d4:	c3                   	ret    
c001b1d5:	90                   	nop

c001b1d6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b1d6:	57                   	push   edi
c001b1d7:	56                   	push   esi
c001b1d8:	53                   	push   ebx
c001b1d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1dd:	8b 06                	mov    eax,DWORD PTR [esi]
c001b1df:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b1e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b1e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b1ea:	e8 c8 fe ff ff       	call   c001b0b7 <datetimeToSeconds(datetime_t)>
c001b1ef:	59                   	pop    ecx
c001b1f0:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b1f7:	5b                   	pop    ebx
c001b1f8:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b1fe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b204:	89 cb                	mov    ebx,ecx
c001b206:	c1 fb 1f             	sar    ebx,0x1f
c001b209:	29 c8                	sub    eax,ecx
c001b20b:	19 da                	sbb    edx,ebx
c001b20d:	31 c9                	xor    ecx,ecx
c001b20f:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b216:	74 05                	je     c001b21d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b218:	b9 08 07 00 00       	mov    ecx,0x708
c001b21d:	31 db                	xor    ebx,ebx
c001b21f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b223:	29 c8                	sub    eax,ecx
c001b225:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b229:	19 da                	sbb    edx,ebx
c001b22b:	89 f8                	mov    eax,edi
c001b22d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b231:	5b                   	pop    ebx
c001b232:	5e                   	pop    esi
c001b233:	5f                   	pop    edi
c001b234:	ff e0                	jmp    eax

c001b236 <secondsToDatetime(unsigned long long)>:
c001b236:	55                   	push   ebp
c001b237:	57                   	push   edi
c001b238:	56                   	push   esi
c001b239:	53                   	push   ebx
c001b23a:	83 ec 1c             	sub    esp,0x1c
c001b23d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b241:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b245:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b249:	6a 00                	push   0x0
c001b24b:	68 80 51 01 00       	push   0x15180
c001b250:	55                   	push   ebp
c001b251:	57                   	push   edi
c001b252:	e8 19 36 01 00       	call   c002e870 <__udivdi3>
c001b257:	83 c4 10             	add    esp,0x10
c001b25a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b260:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b264:	6a 00                	push   0x0
c001b266:	68 80 51 01 00       	push   0x15180
c001b26b:	55                   	push   ebp
c001b26c:	57                   	push   edi
c001b26d:	bf 10 0e 00 00       	mov    edi,0xe10
c001b272:	e8 f9 36 01 00       	call   c002e970 <__umoddi3>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	99                   	cdq    
c001b27b:	f7 ff                	idiv   edi
c001b27d:	bf 3c 00 00 00       	mov    edi,0x3c
c001b282:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b285:	89 d0                	mov    eax,edx
c001b287:	99                   	cdq    
c001b288:	f7 ff                	idiv   edi
c001b28a:	85 db                	test   ebx,ebx
c001b28c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b28f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b292:	79 11                	jns    c001b2a5 <secondsToDatetime(unsigned long long)+0x6f>
c001b294:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b298:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b29e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b2a3:	eb 07                	jmp    c001b2ac <secondsToDatetime(unsigned long long)+0x76>
c001b2a5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b2aa:	89 d8                	mov    eax,ebx
c001b2ac:	bf b4 05 00 00       	mov    edi,0x5b4
c001b2b1:	99                   	cdq    
c001b2b2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b2b7:	f7 f9                	idiv   ecx
c001b2b9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b2be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b2c2:	31 d2                	xor    edx,edx
c001b2c4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b2cc:	01 c3                	add    ebx,eax
c001b2ce:	89 d8                	mov    eax,ebx
c001b2d0:	f7 f1                	div    ecx
c001b2d2:	31 d2                	xor    edx,edx
c001b2d4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b2d7:	89 d8                	mov    eax,ebx
c001b2d9:	f7 f7                	div    edi
c001b2db:	31 d2                	xor    edx,edx
c001b2dd:	29 c1                	sub    ecx,eax
c001b2df:	89 d8                	mov    eax,ebx
c001b2e1:	f7 f5                	div    ebp
c001b2e3:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b2e8:	29 c1                	sub    ecx,eax
c001b2ea:	31 d2                	xor    edx,edx
c001b2ec:	89 c8                	mov    eax,ecx
c001b2ee:	f7 f5                	div    ebp
c001b2f0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b2f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2f9:	31 d2                	xor    edx,edx
c001b2fb:	89 c8                	mov    eax,ecx
c001b2fd:	f7 f5                	div    ebp
c001b2ff:	31 d2                	xor    edx,edx
c001b301:	01 c3                	add    ebx,eax
c001b303:	89 c8                	mov    eax,ecx
c001b305:	f7 f7                	div    edi
c001b307:	bf 99 00 00 00       	mov    edi,0x99
c001b30c:	29 c3                	sub    ebx,eax
c001b30e:	31 d2                	xor    edx,edx
c001b310:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b318:	29 c3                	sub    ebx,eax
c001b31a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b31d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b320:	bb 05 00 00 00       	mov    ebx,0x5
c001b325:	83 c1 02             	add    ecx,0x2
c001b328:	89 c8                	mov    eax,ecx
c001b32a:	f7 f7                	div    edi
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	89 c7                	mov    edi,eax
c001b330:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b336:	83 c0 02             	add    eax,0x2
c001b339:	f7 f3                	div    ebx
c001b33b:	89 eb                	mov    ebx,ebp
c001b33d:	29 c3                	sub    ebx,eax
c001b33f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b345:	88 1e                	mov    BYTE PTR [esi],bl
c001b347:	19 c0                	sbb    eax,eax
c001b349:	31 d2                	xor    edx,edx
c001b34b:	83 e0 0c             	and    eax,0xc
c001b34e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b352:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b35a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b35e:	83 f9 01             	cmp    ecx,0x1
c001b361:	0f 96 c2             	setbe  dl
c001b364:	41                   	inc    ecx
c001b365:	01 d0                	add    eax,edx
c001b367:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b36a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b36e:	83 c4 1c             	add    esp,0x1c
c001b371:	89 f0                	mov    eax,esi
c001b373:	5b                   	pop    ebx
c001b374:	5e                   	pop    esi
c001b375:	5f                   	pop    edi
c001b376:	5d                   	pop    ebp
c001b377:	c2 04 00             	ret    0x4

c001b37a <Clock::timeInDatetimeLocal()>:
c001b37a:	53                   	push   ebx
c001b37b:	83 ec 14             	sub    esp,0x14
c001b37e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b382:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b386:	e8 8b fc ff ff       	call   c001b016 <Clock::timeInSecondsLocal()>
c001b38b:	83 c4 0c             	add    esp,0xc
c001b38e:	52                   	push   edx
c001b38f:	50                   	push   eax
c001b390:	53                   	push   ebx
c001b391:	e8 a0 fe ff ff       	call   c001b236 <secondsToDatetime(unsigned long long)>
c001b396:	89 d8                	mov    eax,ebx
c001b398:	83 c4 14             	add    esp,0x14
c001b39b:	5b                   	pop    ebx
c001b39c:	c2 04 00             	ret    0x4
c001b39f:	90                   	nop

c001b3a0 <Device::hibernate()>:
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop

c001b3a2 <Device::wake()>:
c001b3a2:	c3                   	ret    
c001b3a3:	90                   	nop

c001b3a4 <Device::detect()>:
c001b3a4:	c3                   	ret    
c001b3a5:	90                   	nop

c001b3a6 <Device::disableLegacy()>:
c001b3a6:	c3                   	ret    
c001b3a7:	90                   	nop

c001b3a8 <Device::powerSaving(PowerSavingLevel)>:
c001b3a8:	c3                   	ret    
c001b3a9:	90                   	nop

c001b3aa <DriverlessDevice::close(int, int, void*)>:
c001b3aa:	31 c0                	xor    eax,eax
c001b3ac:	c3                   	ret    
c001b3ad:	90                   	nop

c001b3ae <DriverlessDevice::detect()>:
c001b3ae:	c3                   	ret    
c001b3af:	90                   	nop

c001b3b0 <DriverlessDevice::open(int, int, void*)>:
c001b3b0:	83 ec 18             	sub    esp,0x18
c001b3b3:	68 90 21 03 c0       	push   0xc0032190
c001b3b8:	e8 9d 50 00 00       	call   c002045a <KePanic(char const*)>
c001b3bd:	83 c8 ff             	or     eax,0xffffffff
c001b3c0:	83 c4 1c             	add    esp,0x1c
c001b3c3:	c3                   	ret    

c001b3c4 <Device::~Device()>:
c001b3c4:	ba fc 21 03 c0       	mov    edx,0xc00321fc
c001b3c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3cd:	89 10                	mov    DWORD PTR [eax],edx
c001b3cf:	90                   	nop
c001b3d0:	c3                   	ret    
c001b3d1:	90                   	nop

c001b3d2 <Device::~Device()>:
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b3d9:	e8 e6 ff ff ff       	call   c001b3c4 <Device::~Device()>
c001b3de:	83 c4 04             	add    esp,0x4
c001b3e1:	83 ec 08             	sub    esp,0x8
c001b3e4:	68 58 01 00 00       	push   0x158
c001b3e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3ed:	e8 22 df ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001b3f2:	83 c4 10             	add    esp,0x10
c001b3f5:	83 c4 0c             	add    esp,0xc
c001b3f8:	c3                   	ret    
c001b3f9:	90                   	nop

c001b3fa <Device::findAndLoadDriver()>:
c001b3fa:	c7 44 24 04 ae 21 03 c0 	mov    DWORD PTR [esp+0x4],0xc00321ae
c001b402:	e9 3a e0 ff ff       	jmp    c0019441 <Dbg::kprintf(char const*, ...)>
c001b407:	90                   	nop

c001b408 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b408:	57                   	push   edi
c001b409:	b9 09 00 00 00       	mov    ecx,0x9
c001b40e:	56                   	push   esi
c001b40f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b413:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b417:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b421:	81 c7 18 01 00 00    	add    edi,0x118
c001b427:	fc                   	cld    
c001b428:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b42a:	5e                   	pop    esi
c001b42b:	5f                   	pop    edi
c001b42c:	c3                   	ret    
c001b42d:	90                   	nop

c001b42e <Device::preOpenACPI(void*, char*, char*)>:
c001b42e:	57                   	push   edi
c001b42f:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b434:	56                   	push   esi
c001b435:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b439:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b43d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b447:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b44d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b453:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b457:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b459:	b9 0e 00 00 00       	mov    ecx,0xe
c001b45e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b464:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b468:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b46a:	5e                   	pop    esi
c001b46b:	5f                   	pop    edi
c001b46c:	c3                   	ret    
c001b46d:	90                   	nop

c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b46e:	53                   	push   ebx
c001b46f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b473:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b47b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b47f:	0f b6 c0             	movzx  eax,al
c001b482:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b486:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b48a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b48e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b492:	5b                   	pop    ebx
c001b493:	e9 c0 05 00 00       	jmp    c001ba58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b498 <Device::getParent()>:
c001b498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b49c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b4a2:	c3                   	ret    
c001b4a3:	90                   	nop

c001b4a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b4a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b4ac:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b4b1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b4b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b4b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4bd:	e9 fe 06 00 00       	jmp    c001bbc0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b4c2 <Device::addChild(Device*)>:
c001b4c2:	53                   	push   ebx
c001b4c3:	83 ec 08             	sub    esp,0x8
c001b4c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4ce:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b4d4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b4da:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b4dc:	85 d2                	test   edx,edx
c001b4de:	74 04                	je     c001b4e4 <Device::addChild(Device*)+0x22>
c001b4e0:	89 d3                	mov    ebx,edx
c001b4e2:	eb f6                	jmp    c001b4da <Device::addChild(Device*)+0x18>
c001b4e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b4e7:	83 ec 0c             	sub    esp,0xc
c001b4ea:	6a 08                	push   0x8
c001b4ec:	e8 c0 b0 ff ff       	call   c00165b1 <malloc>
c001b4f1:	89 03                	mov    DWORD PTR [ebx],eax
c001b4f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b500:	83 c4 18             	add    esp,0x18
c001b503:	5b                   	pop    ebx
c001b504:	c3                   	ret    
c001b505:	90                   	nop

c001b506 <Device::removeAllChildren()>:
c001b506:	56                   	push   esi
c001b507:	53                   	push   ebx
c001b508:	52                   	push   edx
c001b509:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b50d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b513:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b516:	74 17                	je     c001b52f <Device::removeAllChildren()+0x29>
c001b518:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b51b:	85 c0                	test   eax,eax
c001b51d:	74 0c                	je     c001b52b <Device::removeAllChildren()+0x25>
c001b51f:	83 ec 0c             	sub    esp,0xc
c001b522:	8b 10                	mov    edx,DWORD PTR [eax]
c001b524:	50                   	push   eax
c001b525:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b528:	83 c4 10             	add    esp,0x10
c001b52b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b52d:	eb e4                	jmp    c001b513 <Device::removeAllChildren()+0xd>
c001b52f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b535:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b53b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b541:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b548:	58                   	pop    eax
c001b549:	5b                   	pop    ebx
c001b54a:	5e                   	pop    esi
c001b54b:	c3                   	ret    

c001b54c <Device::hibernateAll()>:
c001b54c:	53                   	push   ebx
c001b54d:	83 ec 14             	sub    esp,0x14
c001b550:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b554:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b556:	53                   	push   ebx
c001b557:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b55a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b560:	83 c4 10             	add    esp,0x10
c001b563:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b566:	74 0f                	je     c001b577 <Device::hibernateAll()+0x2b>
c001b568:	83 ec 0c             	sub    esp,0xc
c001b56b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b56e:	e8 d9 ff ff ff       	call   c001b54c <Device::hibernateAll()>
c001b573:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b575:	eb e9                	jmp    c001b560 <Device::hibernateAll()+0x14>
c001b577:	83 c4 08             	add    esp,0x8
c001b57a:	5b                   	pop    ebx
c001b57b:	c3                   	ret    

c001b57c <Device::wakeAll()>:
c001b57c:	53                   	push   ebx
c001b57d:	83 ec 14             	sub    esp,0x14
c001b580:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b584:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b586:	53                   	push   ebx
c001b587:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b58a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b590:	83 c4 10             	add    esp,0x10
c001b593:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b596:	74 0f                	je     c001b5a7 <Device::wakeAll()+0x2b>
c001b598:	83 ec 0c             	sub    esp,0xc
c001b59b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b59e:	e8 d9 ff ff ff       	call   c001b57c <Device::wakeAll()>
c001b5a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5a5:	eb e9                	jmp    c001b590 <Device::wakeAll()+0x14>
c001b5a7:	83 c4 08             	add    esp,0x8
c001b5aa:	5b                   	pop    ebx
c001b5ab:	c3                   	ret    

c001b5ac <Device::detectAll()>:
c001b5ac:	53                   	push   ebx
c001b5ad:	83 ec 14             	sub    esp,0x14
c001b5b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5b6:	53                   	push   ebx
c001b5b7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b5ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5c0:	83 c4 10             	add    esp,0x10
c001b5c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5c6:	74 0f                	je     c001b5d7 <Device::detectAll()+0x2b>
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5ce:	e8 d9 ff ff ff       	call   c001b5ac <Device::detectAll()>
c001b5d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5d5:	eb e9                	jmp    c001b5c0 <Device::detectAll()+0x14>
c001b5d7:	83 c4 08             	add    esp,0x8
c001b5da:	5b                   	pop    ebx
c001b5db:	c3                   	ret    

c001b5dc <Device::disableLegacyAll()>:
c001b5dc:	c3                   	ret    
c001b5dd:	90                   	nop

c001b5de <Device::loadDriversForAll()>:
c001b5de:	c3                   	ret    
c001b5df:	90                   	nop

c001b5e0 <Device::powerSavingAll(PowerSavingLevel)>:
c001b5e0:	56                   	push   esi
c001b5e1:	53                   	push   ebx
c001b5e2:	83 ec 0c             	sub    esp,0xc
c001b5e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b5e9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b5ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5ef:	56                   	push   esi
c001b5f0:	53                   	push   ebx
c001b5f1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b5f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5fa:	83 c4 10             	add    esp,0x10
c001b5fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b600:	74 0f                	je     c001b611 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b602:	52                   	push   edx
c001b603:	52                   	push   edx
c001b604:	56                   	push   esi
c001b605:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b608:	e8 d3 ff ff ff       	call   c001b5e0 <Device::powerSavingAll(PowerSavingLevel)>
c001b60d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b60f:	eb e9                	jmp    c001b5fa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b611:	58                   	pop    eax
c001b612:	5b                   	pop    ebx
c001b613:	5e                   	pop    esi
c001b614:	c3                   	ret    
c001b615:	90                   	nop

c001b616 <Device::setName(char const*)>:
c001b616:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b61e:	e9 1d 50 fe ff       	jmp    c0000640 <strcpy>
c001b623:	90                   	nop

c001b624 <Device::Device(char const*)>:
c001b624:	83 ec 1c             	sub    esp,0x1c
c001b627:	ba fc 21 03 c0       	mov    edx,0xc00321fc
c001b62c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b630:	89 10                	mov    DWORD PTR [eax],edx
c001b632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b636:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b644:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b652:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b660:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b66a:	83 ec 08             	sub    esp,0x8
c001b66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b671:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b675:	e8 9c ff ff ff       	call   c001b616 <Device::setName(char const*)>
c001b67a:	83 c4 10             	add    esp,0x10
c001b67d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b685:	83 ec 0c             	sub    esp,0xc
c001b688:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b68c:	e8 20 af ff ff       	call   c00165b1 <malloc>
c001b691:	83 c4 10             	add    esp,0x10
c001b694:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b69a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b6a5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6af:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b6b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6bf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b6c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6db:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6e6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b6f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b6fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b702:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b70c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b710:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b71a:	90                   	nop
c001b71b:	83 c4 1c             	add    esp,0x1c
c001b71e:	c3                   	ret    
c001b71f:	90                   	nop

c001b720 <Device::getName()>:
c001b720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b724:	05 d0 00 00 00       	add    eax,0xd0
c001b729:	c3                   	ret    

c001b72a <Device::closeAll()>:
c001b72a:	53                   	push   ebx
c001b72b:	83 ec 08             	sub    esp,0x8
c001b72e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b732:	53                   	push   ebx
c001b733:	e8 e8 ff ff ff       	call   c001b720 <Device::getName()>
c001b738:	52                   	push   edx
c001b739:	50                   	push   eax
c001b73a:	68 e8 21 03 c0       	push   0xc00321e8
c001b73f:	e8 fd dc ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001b744:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b746:	6a 00                	push   0x0
c001b748:	6a 00                	push   0x0
c001b74a:	6a 00                	push   0x0
c001b74c:	53                   	push   ebx
c001b74d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b750:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b756:	83 c4 20             	add    esp,0x20
c001b759:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b75c:	74 12                	je     c001b770 <Device::closeAll()+0x46>
c001b75e:	83 ec 0c             	sub    esp,0xc
c001b761:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b764:	e8 c1 ff ff ff       	call   c001b72a <Device::closeAll()>
c001b769:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	eb e9                	jmp    c001b759 <Device::closeAll()+0x2f>
c001b770:	83 c4 08             	add    esp,0x8
c001b773:	5b                   	pop    ebx
c001b774:	c3                   	ret    
c001b775:	90                   	nop

c001b776 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b776:	83 ec 0c             	sub    esp,0xc
c001b779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77d:	83 ec 08             	sub    esp,0x8
c001b780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b784:	50                   	push   eax
c001b785:	e8 9a fe ff ff       	call   c001b624 <Device::Device(char const*)>
c001b78a:	83 c4 10             	add    esp,0x10
c001b78d:	ba 28 22 03 c0       	mov    edx,0xc0032228
c001b792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b796:	89 10                	mov    DWORD PTR [eax],edx
c001b798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b79c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b7a6:	90                   	nop
c001b7a7:	83 c4 0c             	add    esp,0xc
c001b7aa:	c3                   	ret    
c001b7ab:	90                   	nop

c001b7ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b7ac:	57                   	push   edi
c001b7ad:	56                   	push   esi
c001b7ae:	53                   	push   ebx
c001b7af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b7b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b7bb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b7c1:	75 0c                	jne    c001b7cf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b7c3:	52                   	push   edx
c001b7c4:	52                   	push   edx
c001b7c5:	53                   	push   ebx
c001b7c6:	56                   	push   esi
c001b7c7:	e8 56 35 01 00       	call   c002ed22 <LinkedList<Device>::addElement(Device*)>
c001b7cc:	83 c4 10             	add    esp,0x10
c001b7cf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b7d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b7d8:	74 12                	je     c001b7ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b7da:	50                   	push   eax
c001b7db:	57                   	push   edi
c001b7dc:	56                   	push   esi
c001b7dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b7e0:	e8 c7 ff ff ff       	call   c001b7ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b7e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	eb e9                	jmp    c001b7d5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b7ec:	5b                   	pop    ebx
c001b7ed:	5e                   	pop    esi
c001b7ee:	5f                   	pop    edi
c001b7ef:	c3                   	ret    

c001b7f0 <getDevicesOfType(DeviceType)>:
c001b7f0:	53                   	push   ebx
c001b7f1:	83 ec 14             	sub    esp,0x14
c001b7f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b7f8:	53                   	push   ebx
c001b7f9:	e8 00 36 01 00       	call   c002edfe <LinkedList<Device>::LinkedList()>
c001b7fe:	83 c4 0c             	add    esp,0xc
c001b801:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b805:	53                   	push   ebx
c001b806:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b80c:	e8 9b ff ff ff       	call   c001b7ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b811:	89 d8                	mov    eax,ebx
c001b813:	83 c4 18             	add    esp,0x18
c001b816:	5b                   	pop    ebx
c001b817:	c2 04 00             	ret    0x4
c001b81a:	66 90                	xchg   ax,ax

c001b81c <HardDiskController::HardDiskController(char const*)>:
c001b81c:	83 ec 0c             	sub    esp,0xc
c001b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b823:	83 ec 08             	sub    esp,0x8
c001b826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b82a:	50                   	push   eax
c001b82b:	e8 f4 fd ff ff       	call   c001b624 <Device::Device(char const*)>
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	ba 54 22 03 c0       	mov    edx,0xc0032254
c001b838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b83c:	89 10                	mov    DWORD PTR [eax],edx
c001b83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b842:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b84c:	90                   	nop
c001b84d:	83 c4 0c             	add    esp,0xc
c001b850:	c3                   	ret    
c001b851:	90                   	nop
c001b852:	66 90                	xchg   ax,ax

c001b854 <HardDiskController::~HardDiskController()>:
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	ba 54 22 03 c0       	mov    edx,0xc0032254
c001b85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b860:	89 10                	mov    DWORD PTR [eax],edx
c001b862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b866:	83 ec 0c             	sub    esp,0xc
c001b869:	50                   	push   eax
c001b86a:	e8 55 fb ff ff       	call   c001b3c4 <Device::~Device()>
c001b86f:	83 c4 10             	add    esp,0x10
c001b872:	90                   	nop
c001b873:	83 c4 0c             	add    esp,0xc
c001b876:	c3                   	ret    
c001b877:	90                   	nop

c001b878 <HardDiskController::~HardDiskController()>:
c001b878:	83 ec 0c             	sub    esp,0xc
c001b87b:	83 ec 0c             	sub    esp,0xc
c001b87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b882:	e8 cd ff ff ff       	call   c001b854 <HardDiskController::~HardDiskController()>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	83 ec 08             	sub    esp,0x8
c001b88d:	68 58 01 00 00       	push   0x158
c001b892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b896:	e8 79 da ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	83 c4 0c             	add    esp,0xc
c001b8a1:	c3                   	ret    

c001b8a2 <PhysicalDisk::eject()>:
c001b8a2:	83 c8 ff             	or     eax,0xffffffff
c001b8a5:	c3                   	ret    

c001b8a6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ad:	83 ec 08             	sub    esp,0x8
c001b8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b8b4:	50                   	push   eax
c001b8b5:	e8 6a fd ff ff       	call   c001b624 <Device::Device(char const*)>
c001b8ba:	83 c4 10             	add    esp,0x10
c001b8bd:	ba 80 22 03 c0       	mov    edx,0xc0032280
c001b8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c6:	89 10                	mov    DWORD PTR [eax],edx
c001b8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b8de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b908:	90                   	nop
c001b909:	83 c4 0c             	add    esp,0xc
c001b90c:	c3                   	ret    
c001b90d:	90                   	nop

c001b90e <PhysicalDisk::startCache()>:
c001b90e:	56                   	push   esi
c001b90f:	53                   	push   ebx
c001b910:	83 ec 10             	sub    esp,0x10
c001b913:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b917:	6a 44                	push   0x44
c001b919:	e8 93 ac ff ff       	call   c00165b1 <malloc>
c001b91e:	89 c6                	mov    esi,eax
c001b920:	58                   	pop    eax
c001b921:	5a                   	pop    edx
c001b922:	53                   	push   ebx
c001b923:	56                   	push   esi
c001b924:	e8 6f 17 00 00       	call   c001d098 <VCache::VCache(PhysicalDisk*)>
c001b929:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b92f:	83 c4 14             	add    esp,0x14
c001b932:	5b                   	pop    ebx
c001b933:	5e                   	pop    esi
c001b934:	c3                   	ret    
c001b935:	90                   	nop

c001b936 <PhysicalDisk::~PhysicalDisk()>:
c001b936:	83 ec 0c             	sub    esp,0xc
c001b939:	ba 80 22 03 c0       	mov    edx,0xc0032280
c001b93e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b942:	89 10                	mov    DWORD PTR [eax],edx
c001b944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b948:	83 ec 0c             	sub    esp,0xc
c001b94b:	50                   	push   eax
c001b94c:	e8 73 fa ff ff       	call   c001b3c4 <Device::~Device()>
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	90                   	nop
c001b955:	83 c4 0c             	add    esp,0xc
c001b958:	c3                   	ret    
c001b959:	90                   	nop

c001b95a <PhysicalDisk::~PhysicalDisk()>:
c001b95a:	83 ec 0c             	sub    esp,0xc
c001b95d:	83 ec 0c             	sub    esp,0xc
c001b960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b964:	e8 cd ff ff ff       	call   c001b936 <PhysicalDisk::~PhysicalDisk()>
c001b969:	83 c4 10             	add    esp,0x10
c001b96c:	83 ec 08             	sub    esp,0x8
c001b96f:	68 6c 01 00 00       	push   0x16c
c001b974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b978:	e8 97 d9 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001b97d:	83 c4 10             	add    esp,0x10
c001b980:	83 c4 0c             	add    esp,0xc
c001b983:	c3                   	ret    

c001b984 <int_handler>:
c001b984:	55                   	push   ebp
c001b985:	57                   	push   edi
c001b986:	56                   	push   esi
c001b987:	53                   	push   ebx
c001b988:	83 ec 0c             	sub    esp,0xc
c001b98b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b98f:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b996:	74 0b                	je     c001b9a3 <int_handler+0x1f>
c001b998:	fa                   	cli    
c001b999:	f4                   	hlt    
c001b99a:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b9a1:	75 f5                	jne    c001b998 <int_handler+0x14>
c001b9a3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b9a6:	8d 46 e0             	lea    eax,[esi-0x20]
c001b9a9:	83 f8 17             	cmp    eax,0x17
c001b9ac:	76 40                	jbe    c001b9ee <int_handler+0x6a>
c001b9ae:	c1 e6 04             	shl    esi,0x4
c001b9b1:	31 db                	xor    ebx,ebx
c001b9b3:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b9b9:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b9bf:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b9c3:	85 c0                	test   eax,eax
c001b9c5:	74 13                	je     c001b9da <int_handler+0x56>
c001b9c7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b9ca:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b9ce:	74 2c                	je     c001b9fc <int_handler+0x78>
c001b9d0:	83 ec 08             	sub    esp,0x8
c001b9d3:	52                   	push   edx
c001b9d4:	57                   	push   edi
c001b9d5:	ff d0                	call   eax
c001b9d7:	83 c4 10             	add    esp,0x10
c001b9da:	83 c3 01             	add    ebx,0x1
c001b9dd:	83 fb 04             	cmp    ebx,0x4
c001b9e0:	75 dd                	jne    c001b9bf <int_handler+0x3b>
c001b9e2:	83 c4 0c             	add    esp,0xc
c001b9e5:	31 c0                	xor    eax,eax
c001b9e7:	5b                   	pop    ebx
c001b9e8:	31 d2                	xor    edx,edx
c001b9ea:	5e                   	pop    esi
c001b9eb:	5f                   	pop    edi
c001b9ec:	5d                   	pop    ebp
c001b9ed:	c3                   	ret    
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	50                   	push   eax
c001b9f2:	e8 95 ba 00 00       	call   c002748c <HalEndOfInterrupt(int)>
c001b9f7:	83 c4 10             	add    esp,0x10
c001b9fa:	eb b2                	jmp    c001b9ae <int_handler+0x2a>
c001b9fc:	83 ec 08             	sub    esp,0x8
c001b9ff:	52                   	push   edx
c001ba00:	57                   	push   edi
c001ba01:	ff d0                	call   eax
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	83 c4 0c             	add    esp,0xc
c001ba09:	5b                   	pop    ebx
c001ba0a:	5e                   	pop    esi
c001ba0b:	5f                   	pop    edi
c001ba0c:	5d                   	pop    ebp
c001ba0d:	c3                   	ret    

c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001ba0e:	56                   	push   esi
c001ba0f:	31 c0                	xor    eax,eax
c001ba11:	53                   	push   ebx
c001ba12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba1a:	89 ca                	mov    edx,ecx
c001ba1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ba20:	c1 e2 04             	shl    edx,0x4
c001ba23:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001ba2b:	74 17                	je     c001ba44 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ba2d:	83 c0 01             	add    eax,0x1
c001ba30:	83 f8 04             	cmp    eax,0x4
c001ba33:	75 ee                	jne    c001ba23 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ba35:	c7 44 24 0c b0 22 03 c0 	mov    DWORD PTR [esp+0xc],0xc00322b0
c001ba3d:	5b                   	pop    ebx
c001ba3e:	5e                   	pop    esi
c001ba3f:	e9 16 4a 00 00       	jmp    c002045a <KePanic(char const*)>
c001ba44:	8d 04 88             	lea    eax,[eax+ecx*4]
c001ba47:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001ba4e:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001ba55:	5b                   	pop    ebx
c001ba56:	5e                   	pop    esi
c001ba57:	c3                   	ret    

c001ba58 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001ba58:	57                   	push   edi
c001ba59:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001ba5f:	56                   	push   esi
c001ba60:	53                   	push   ebx
c001ba61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba69:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001ba70:	74 54                	je     c001bac6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001ba72:	89 c7                	mov    edi,eax
c001ba74:	84 c0                	test   al,al
c001ba76:	74 1d                	je     c001ba95 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001ba78:	83 fe 0f             	cmp    esi,0xf
c001ba7b:	0f 8f d5 00 00 00    	jg     c001bb56 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001ba81:	0f b6 b6 e8 3e 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc118]
c001ba88:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001ba90:	d1 ef                	shr    edi,1
c001ba92:	83 e7 01             	and    edi,0x1
c001ba95:	83 ec 08             	sub    esp,0x8
c001ba98:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001ba9d:	31 db                	xor    ebx,ebx
c001ba9f:	50                   	push   eax
c001baa0:	68 bd 22 03 c0       	push   0xc00322bd
c001baa5:	e8 97 d9 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001baaa:	83 c4 10             	add    esp,0x10
c001baad:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001bab2:	85 c0                	test   eax,eax
c001bab4:	7f 55                	jg     c001bb0b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001bab6:	83 ec 0c             	sub    esp,0xc
c001bab9:	68 d4 22 03 c0       	push   0xc00322d4
c001babe:	e8 97 49 00 00       	call   c002045a <KePanic(char const*)>
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	8d 7e 20             	lea    edi,[esi+0x20]
c001bac9:	89 f8                	mov    eax,edi
c001bacb:	31 d2                	xor    edx,edx
c001bacd:	c1 e0 04             	shl    eax,0x4
c001bad0:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001bad7:	85 c9                	test   ecx,ecx
c001bad9:	0f 84 8e 00 00 00    	je     c001bb6d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001badf:	83 c2 01             	add    edx,0x1
c001bae2:	83 fa 04             	cmp    edx,0x4
c001bae5:	75 e9                	jne    c001bad0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001bae7:	83 ec 0c             	sub    esp,0xc
c001baea:	68 28 23 03 c0       	push   0xc0032328
c001baef:	e8 66 49 00 00       	call   c002045a <KePanic(char const*)>
c001baf4:	83 c4 10             	add    esp,0x10
c001baf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bafc:	5b                   	pop    ebx
c001bafd:	5e                   	pop    esi
c001bafe:	5f                   	pop    edi
c001baff:	c3                   	ret    
c001bb00:	83 c3 01             	add    ebx,0x1
c001bb03:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001bb09:	7e ab                	jle    c001bab6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001bb0b:	83 ec 08             	sub    esp,0x8
c001bb0e:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001bb15:	56                   	push   esi
c001bb16:	50                   	push   eax
c001bb17:	e8 50 21 01 00       	call   c002dc6c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001bb1c:	83 c4 10             	add    esp,0x10
c001bb1f:	84 c0                	test   al,al
c001bb21:	74 dd                	je     c001bb00 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001bb23:	83 ec 04             	sub    esp,0x4
c001bb26:	89 f8                	mov    eax,edi
c001bb28:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001bb2f:	0f b6 f8             	movzx  edi,al
c001bb32:	57                   	push   edi
c001bb33:	8d 7e 20             	lea    edi,[esi+0x20]
c001bb36:	6a 00                	push   0x0
c001bb38:	89 f8                	mov    eax,edi
c001bb3a:	0f b6 c0             	movzx  eax,al
c001bb3d:	50                   	push   eax
c001bb3e:	89 f0                	mov    eax,esi
c001bb40:	6a 00                	push   0x0
c001bb42:	0f b6 c0             	movzx  eax,al
c001bb45:	6a 00                	push   0x0
c001bb47:	50                   	push   eax
c001bb48:	53                   	push   ebx
c001bb49:	e8 8a 22 01 00       	call   c002ddd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001bb4e:	83 c4 20             	add    esp,0x20
c001bb51:	e9 73 ff ff ff       	jmp    c001bac9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001bb56:	83 ec 0c             	sub    esp,0xc
c001bb59:	31 ff                	xor    edi,edi
c001bb5b:	68 f0 22 03 c0       	push   0xc00322f0
c001bb60:	e8 f5 48 00 00       	call   c002045a <KePanic(char const*)>
c001bb65:	83 c4 10             	add    esp,0x10
c001bb68:	e9 28 ff ff ff       	jmp    c001ba95 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001bb6d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001bb70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bb74:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001bb7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb7f:	5b                   	pop    ebx
c001bb80:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001bb87:	89 f0                	mov    eax,esi
c001bb89:	5e                   	pop    esi
c001bb8a:	5f                   	pop    edi
c001bb8b:	c3                   	ret    

c001bb8c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001bb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb94:	c1 e0 04             	shl    eax,0x4
c001bb97:	8d 50 10             	lea    edx,[eax+0x10]
c001bb9a:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001bba0:	74 08                	je     c001bbaa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001bba2:	83 c0 04             	add    eax,0x4
c001bba5:	39 d0                	cmp    eax,edx
c001bba7:	75 f1                	jne    c001bb9a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001bba9:	c3                   	ret    
c001bbaa:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bbb4:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bbbe:	eb e2                	jmp    c001bba2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001bbc0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001bbc0:	53                   	push   ebx
c001bbc1:	83 ec 08             	sub    esp,0x8
c001bbc4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bbc8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bbcd:	74 0e                	je     c001bbdd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bbcf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001bbd4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001bbdb:	75 37                	jne    c001bc14 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001bbdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe1:	83 c0 20             	add    eax,0x20
c001bbe4:	c1 e0 04             	shl    eax,0x4
c001bbe7:	8d 50 10             	lea    edx,[eax+0x10]
c001bbea:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001bbf0:	74 0c                	je     c001bbfe <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001bbf2:	83 c0 04             	add    eax,0x4
c001bbf5:	39 d0                	cmp    eax,edx
c001bbf7:	75 f1                	jne    c001bbea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001bbf9:	83 c4 08             	add    esp,0x8
c001bbfc:	5b                   	pop    ebx
c001bbfd:	c3                   	ret    
c001bbfe:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bc08:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bc12:	eb de                	jmp    c001bbf2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001bc14:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001bc19:	7f 11                	jg     c001bc2c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001bc1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc1f:	0f b6 80 e8 3e 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc118]
c001bc26:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bc2a:	eb b1                	jmp    c001bbdd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001bc2c:	83 ec 0c             	sub    esp,0xc
c001bc2f:	68 e1 22 03 c0       	push   0xc00322e1
c001bc34:	e8 21 48 00 00       	call   c002045a <KePanic(char const*)>
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	eb 9f                	jmp    c001bbdd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001bc3e <setupINTS()>:
c001bc3e:	31 c0                	xor    eax,eax
c001bc40:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bc4a:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bc54:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001bc5e:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001bc68:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001bc72:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001bc7c:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001bc86:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001bc90:	83 c0 10             	add    eax,0x10
c001bc93:	3d 00 10 00 00       	cmp    eax,0x1000
c001bc98:	75 a6                	jne    c001bc40 <setupINTS()+0x2>
c001bc9a:	c3                   	ret    

c001bc9b <convertLegacyIRQNumber(int)>:
c001bc9b:	83 ec 0c             	sub    esp,0xc
c001bc9e:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca8:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bcaf:	74 0c                	je     c001bcbd <convertLegacyIRQNumber(int)+0x22>
c001bcb1:	83 f8 0f             	cmp    eax,0xf
c001bcb4:	7f 0b                	jg     c001bcc1 <convertLegacyIRQNumber(int)+0x26>
c001bcb6:	0f b6 80 e8 3e 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc118]
c001bcbd:	83 c4 0c             	add    esp,0xc
c001bcc0:	c3                   	ret    
c001bcc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	68 f0 22 03 c0       	push   0xc00322f0
c001bccd:	e8 88 47 00 00       	call   c002045a <KePanic(char const*)>
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcd9:	83 c4 0c             	add    esp,0xc
c001bcdc:	c3                   	ret    
c001bcdd:	90                   	nop

c001bcde <startGUI(void*)>:
c001bcde:	55                   	push   ebp
c001bcdf:	89 e5                	mov    ebp,esp
c001bce1:	53                   	push   ebx
c001bce2:	83 ec 04             	sub    esp,0x4
c001bce5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bcea:	83 e8 01             	sub    eax,0x1
c001bced:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bcf2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bcf7:	85 c0                	test   eax,eax
c001bcf9:	75 01                	jne    c001bcfc <startGUI(void*)+0x1e>
c001bcfb:	fb                   	sti    
c001bcfc:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd02:	83 ec 08             	sub    esp,0x8
c001bd05:	6a 01                	push   0x1
c001bd07:	68 4d 23 03 c0       	push   0xc003234d
c001bd0c:	e8 dc 8c 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001bd11:	83 c4 10             	add    esp,0x10
c001bd14:	83 ec 08             	sub    esp,0x8
c001bd17:	53                   	push   ebx
c001bd18:	50                   	push   eax
c001bd19:	e8 21 8f 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001bd1e:	83 c4 10             	add    esp,0x10
c001bd21:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd27:	83 ec 08             	sub    esp,0x8
c001bd2a:	6a 01                	push   0x1
c001bd2c:	68 67 23 03 c0       	push   0xc0032367
c001bd31:	e8 b7 8c 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001bd36:	83 c4 10             	add    esp,0x10
c001bd39:	83 ec 08             	sub    esp,0x8
c001bd3c:	53                   	push   ebx
c001bd3d:	50                   	push   eax
c001bd3e:	e8 fc 8e 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001bd43:	83 c4 10             	add    esp,0x10
c001bd46:	eb fe                	jmp    c001bd46 <startGUI(void*)+0x68>

c001bd48 <startGUIVESA(void*)>:
c001bd48:	55                   	push   ebp
c001bd49:	89 e5                	mov    ebp,esp
c001bd4b:	53                   	push   ebx
c001bd4c:	83 ec 04             	sub    esp,0x4
c001bd4f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd54:	83 e8 01             	sub    eax,0x1
c001bd57:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bd5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd61:	85 c0                	test   eax,eax
c001bd63:	75 01                	jne    c001bd66 <startGUIVESA(void*)+0x1e>
c001bd65:	fb                   	sti    
c001bd66:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd6c:	83 ec 08             	sub    esp,0x8
c001bd6f:	6a 01                	push   0x1
c001bd71:	68 85 23 03 c0       	push   0xc0032385
c001bd76:	e8 72 8c 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001bd7b:	83 c4 10             	add    esp,0x10
c001bd7e:	83 ec 08             	sub    esp,0x8
c001bd81:	53                   	push   ebx
c001bd82:	50                   	push   eax
c001bd83:	e8 b7 8e 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001bd88:	83 c4 10             	add    esp,0x10
c001bd8b:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bd91:	83 ec 08             	sub    esp,0x8
c001bd94:	6a 01                	push   0x1
c001bd96:	68 67 23 03 c0       	push   0xc0032367
c001bd9b:	e8 4d 8c 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001bda0:	83 c4 10             	add    esp,0x10
c001bda3:	83 ec 08             	sub    esp,0x8
c001bda6:	53                   	push   ebx
c001bda7:	50                   	push   eax
c001bda8:	e8 92 8e 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001bdad:	83 c4 10             	add    esp,0x10
c001bdb0:	eb fe                	jmp    c001bdb0 <startGUIVESA(void*)+0x68>

c001bdb2 <sendKeyToTerminal(unsigned char)>:
c001bdb2:	55                   	push   ebp
c001bdb3:	89 e5                	mov    ebp,esp
c001bdb5:	83 ec 28             	sub    esp,0x28
c001bdb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdbb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bdbe:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bdc3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bdc7:	83 ec 08             	sub    esp,0x8
c001bdca:	52                   	push   edx
c001bdcb:	50                   	push   eax
c001bdcc:	e8 df ba ff ff       	call   c00178b0 <VgaText::receiveKey(unsigned char)>
c001bdd1:	83 c4 10             	add    esp,0x10
c001bdd4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bdd8:	83 f8 0a             	cmp    eax,0xa
c001bddb:	74 16                	je     c001bdf3 <sendKeyToTerminal(unsigned char)+0x41>
c001bddd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bde1:	83 f8 03             	cmp    eax,0x3
c001bde4:	74 0d                	je     c001bdf3 <sendKeyToTerminal(unsigned char)+0x41>
c001bde6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bdea:	83 f8 1c             	cmp    eax,0x1c
c001bded:	0f 85 97 00 00 00    	jne    c001be8a <sendKeyToTerminal(unsigned char)+0xd8>
c001bdf3:	fa                   	cli    
c001bdf4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bdf9:	83 c0 01             	add    eax,0x1
c001bdfc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001be01:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be06:	83 c0 01             	add    eax,0x1
c001be09:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001be0e:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001be13:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001be16:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001be20:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001be24:	74 1f                	je     c001be45 <sendKeyToTerminal(unsigned char)+0x93>
c001be26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001be29:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001be2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001be2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001be32:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001be35:	83 ec 0c             	sub    esp,0xc
c001be38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001be3b:	e8 28 99 00 00       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c001be40:	83 c4 10             	add    esp,0x10
c001be43:	eb db                	jmp    c001be20 <sendKeyToTerminal(unsigned char)+0x6e>
c001be45:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be4a:	83 e8 01             	sub    eax,0x1
c001be4d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001be52:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001be57:	85 c0                	test   eax,eax
c001be59:	75 18                	jne    c001be73 <sendKeyToTerminal(unsigned char)+0xc1>
c001be5b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001be60:	85 c0                	test   eax,eax
c001be62:	74 0f                	je     c001be73 <sendKeyToTerminal(unsigned char)+0xc1>
c001be64:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001be6e:	e8 fd 95 00 00       	call   c0025470 <schedule()>
c001be73:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be78:	83 e8 01             	sub    eax,0x1
c001be7b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001be80:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001be85:	85 c0                	test   eax,eax
c001be87:	75 01                	jne    c001be8a <sendKeyToTerminal(unsigned char)+0xd8>
c001be89:	fb                   	sti    
c001be8a:	90                   	nop
c001be8b:	c9                   	leave  
c001be8c:	c3                   	ret    

c001be8d <sendKeyboardToken(KeyboardToken)>:
c001be8d:	55                   	push   ebp
c001be8e:	89 e5                	mov    ebp,esp
c001be90:	83 ec 18             	sub    esp,0x18
c001be93:	e8 12 46 00 00       	call   c00204aa <KeUserIOReceived()>
c001be98:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001be9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9e:	0f b7 c0             	movzx  eax,ax
c001bea1:	83 f2 01             	xor    edx,0x1
c001bea4:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001beaa:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001beaf:	85 c0                	test   eax,eax
c001beb1:	74 24                	je     c001bed7 <sendKeyboardToken(KeyboardToken)+0x4a>
c001beb3:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001beb9:	83 ec 04             	sub    esp,0x4
c001bebc:	68 40 ef 03 c0       	push   0xc003ef40
c001bec1:	83 ec 08             	sub    esp,0x8
c001bec4:	89 e2                	mov    edx,esp
c001bec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec9:	89 02                	mov    DWORD PTR [edx],eax
c001becb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bece:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bed2:	ff d1                	call   ecx
c001bed4:	83 c4 10             	add    esp,0x10
c001bed7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bedb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bede:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bee3:	0f b6 d2             	movzx  edx,dl
c001bee6:	0f b6 c0             	movzx  eax,al
c001bee9:	39 c2                	cmp    edx,eax
c001beeb:	74 1c                	je     c001bf09 <sendKeyboardToken(KeyboardToken)+0x7c>
c001beed:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bef0:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bef5:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001befa:	0f b6 c0             	movzx  eax,al
c001befd:	83 ec 0c             	sub    esp,0xc
c001bf00:	50                   	push   eax
c001bf01:	e8 f6 b0 ff ff       	call   c0016ffc <setTerminalScrollLock(bool)>
c001bf06:	83 c4 10             	add    esp,0x10
c001bf09:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bf0c:	0f b6 c0             	movzx  eax,al
c001bf0f:	85 c0                	test   eax,eax
c001bf11:	0f 84 da 00 00 00    	je     c001bff1 <sendKeyboardToken(KeyboardToken)+0x164>
c001bf17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf1a:	0f b7 c0             	movzx  eax,ax
c001bf1d:	3d 18 03 00 00       	cmp    eax,0x318
c001bf22:	75 06                	jne    c001bf2a <sendKeyboardToken(KeyboardToken)+0x9d>
c001bf24:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bf2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf2d:	0f b7 c0             	movzx  eax,ax
c001bf30:	3d 19 03 00 00       	cmp    eax,0x319
c001bf35:	75 06                	jne    c001bf3d <sendKeyboardToken(KeyboardToken)+0xb0>
c001bf37:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bf3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf40:	0f b7 c0             	movzx  eax,ax
c001bf43:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bf48:	75 06                	jne    c001bf50 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bf4a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bf50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf53:	0f b7 c0             	movzx  eax,ax
c001bf56:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bf5b:	75 06                	jne    c001bf63 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bf5d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bf63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf66:	0f b7 c0             	movzx  eax,ax
c001bf69:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bf6e:	75 06                	jne    c001bf76 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bf70:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bf76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf79:	0f b7 c0             	movzx  eax,ax
c001bf7c:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bf81:	75 06                	jne    c001bf89 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bf83:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bf89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf8c:	0f b7 c0             	movzx  eax,ax
c001bf8f:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bf94:	75 06                	jne    c001bf9c <sendKeyboardToken(KeyboardToken)+0x10f>
c001bf96:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bf9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf9f:	0f b7 c0             	movzx  eax,ax
c001bfa2:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bfa7:	75 06                	jne    c001bfaf <sendKeyboardToken(KeyboardToken)+0x122>
c001bfa9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bfaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfb2:	0f b7 c0             	movzx  eax,ax
c001bfb5:	3d 20 03 00 00       	cmp    eax,0x320
c001bfba:	75 06                	jne    c001bfc2 <sendKeyboardToken(KeyboardToken)+0x135>
c001bfbc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bfc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfc5:	0f b7 c0             	movzx  eax,ax
c001bfc8:	3d 21 03 00 00       	cmp    eax,0x321
c001bfcd:	75 06                	jne    c001bfd5 <sendKeyboardToken(KeyboardToken)+0x148>
c001bfcf:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bfd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfd8:	0f b7 c0             	movzx  eax,ax
c001bfdb:	3d 22 03 00 00       	cmp    eax,0x322
c001bfe0:	0f 85 f1 00 00 00    	jne    c001c0d7 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bfe6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bfec:	e9 e6 00 00 00       	jmp    c001c0d7 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bff4:	0f b7 c0             	movzx  eax,ax
c001bff7:	3d 18 03 00 00       	cmp    eax,0x318
c001bffc:	75 0a                	jne    c001c008 <sendKeyboardToken(KeyboardToken)+0x17b>
c001bffe:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001c004:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c00b:	0f b7 c0             	movzx  eax,ax
c001c00e:	3d 19 03 00 00       	cmp    eax,0x319
c001c013:	75 0a                	jne    c001c01f <sendKeyboardToken(KeyboardToken)+0x192>
c001c015:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001c01b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c01f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c022:	0f b7 c0             	movzx  eax,ax
c001c025:	3d 1a 03 00 00       	cmp    eax,0x31a
c001c02a:	75 0a                	jne    c001c036 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001c02c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001c032:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c039:	0f b7 c0             	movzx  eax,ax
c001c03c:	3d 1b 03 00 00       	cmp    eax,0x31b
c001c041:	75 0a                	jne    c001c04d <sendKeyboardToken(KeyboardToken)+0x1c0>
c001c043:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001c049:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c050:	0f b7 c0             	movzx  eax,ax
c001c053:	3d 1c 03 00 00       	cmp    eax,0x31c
c001c058:	75 0a                	jne    c001c064 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001c05a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001c060:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c067:	0f b7 c0             	movzx  eax,ax
c001c06a:	3d 1d 03 00 00       	cmp    eax,0x31d
c001c06f:	75 0a                	jne    c001c07b <sendKeyboardToken(KeyboardToken)+0x1ee>
c001c071:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001c077:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c07b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07e:	0f b7 c0             	movzx  eax,ax
c001c081:	3d 1e 03 00 00       	cmp    eax,0x31e
c001c086:	75 0a                	jne    c001c092 <sendKeyboardToken(KeyboardToken)+0x205>
c001c088:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001c08e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c095:	0f b7 c0             	movzx  eax,ax
c001c098:	3d 1f 03 00 00       	cmp    eax,0x31f
c001c09d:	75 0a                	jne    c001c0a9 <sendKeyboardToken(KeyboardToken)+0x21c>
c001c09f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001c0a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ac:	0f b7 c0             	movzx  eax,ax
c001c0af:	3d 20 03 00 00       	cmp    eax,0x320
c001c0b4:	75 0a                	jne    c001c0c0 <sendKeyboardToken(KeyboardToken)+0x233>
c001c0b6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001c0bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c3:	0f b7 c0             	movzx  eax,ax
c001c0c6:	3d 21 03 00 00       	cmp    eax,0x321
c001c0cb:	75 0a                	jne    c001c0d7 <sendKeyboardToken(KeyboardToken)+0x24a>
c001c0cd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001c0d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001c0d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0da:	0f b7 c0             	movzx  eax,ax
c001c0dd:	3d 00 02 00 00       	cmp    eax,0x200
c001c0e2:	75 2f                	jne    c001c113 <sendKeyboardToken(KeyboardToken)+0x286>
c001c0e4:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c0e9:	83 f0 01             	xor    eax,0x1
c001c0ec:	0f b6 c0             	movzx  eax,al
c001c0ef:	85 c0                	test   eax,eax
c001c0f1:	74 20                	je     c001c113 <sendKeyboardToken(KeyboardToken)+0x286>
c001c0f3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c0f8:	6a 01                	push   0x1
c001c0fa:	6a 00                	push   0x0
c001c0fc:	68 de bc 01 c0       	push   0xc001bcde
c001c101:	50                   	push   eax
c001c102:	e8 19 91 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c001c107:	83 c4 10             	add    esp,0x10
c001c10a:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c111:	eb 3a                	jmp    c001c14d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c116:	0f b7 c0             	movzx  eax,ax
c001c119:	3d 01 02 00 00       	cmp    eax,0x201
c001c11e:	75 2d                	jne    c001c14d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c120:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001c125:	83 f0 01             	xor    eax,0x1
c001c128:	0f b6 c0             	movzx  eax,al
c001c12b:	85 c0                	test   eax,eax
c001c12d:	74 1e                	je     c001c14d <sendKeyboardToken(KeyboardToken)+0x2c0>
c001c12f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001c134:	6a 01                	push   0x1
c001c136:	6a 00                	push   0x0
c001c138:	68 48 bd 01 c0       	push   0xc001bd48
c001c13d:	50                   	push   eax
c001c13e:	e8 dd 90 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c001c143:	83 c4 10             	add    esp,0x10
c001c146:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c14d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c150:	0f b7 c0             	movzx  eax,ax
c001c153:	3d 25 03 00 00       	cmp    eax,0x325
c001c158:	75 06                	jne    c001c160 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c15a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c163:	0f b7 c0             	movzx  eax,ax
c001c166:	3d 24 03 00 00       	cmp    eax,0x324
c001c16b:	75 06                	jne    c001c173 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c16d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c176:	0f b7 c0             	movzx  eax,ax
c001c179:	3d 23 03 00 00       	cmp    eax,0x323
c001c17e:	75 06                	jne    c001c186 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c180:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c189:	0f b7 c0             	movzx  eax,ax
c001c18c:	3d 26 03 00 00       	cmp    eax,0x326
c001c191:	75 06                	jne    c001c199 <sendKeyboardToken(KeyboardToken)+0x30c>
c001c193:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c19c:	0f b7 c0             	movzx  eax,ax
c001c19f:	3d 27 03 00 00       	cmp    eax,0x327
c001c1a4:	75 06                	jne    c001c1ac <sendKeyboardToken(KeyboardToken)+0x31f>
c001c1a6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1af:	0f b7 c0             	movzx  eax,ax
c001c1b2:	3d 22 03 00 00       	cmp    eax,0x322
c001c1b7:	75 06                	jne    c001c1bf <sendKeyboardToken(KeyboardToken)+0x332>
c001c1b9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c1bf:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c1c3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c1c6:	83 f0 01             	xor    eax,0x1
c001c1c9:	0f b6 c0             	movzx  eax,al
c001c1cc:	85 c0                	test   eax,eax
c001c1ce:	74 7c                	je     c001c24c <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c1d0:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c1d5:	0f b6 c0             	movzx  eax,al
c001c1d8:	85 c0                	test   eax,eax
c001c1da:	74 43                	je     c001c21f <sendKeyboardToken(KeyboardToken)+0x392>
c001c1dc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c1e0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c1e4:	85 c0                	test   eax,eax
c001c1e6:	74 2b                	je     c001c213 <sendKeyboardToken(KeyboardToken)+0x386>
c001c1e8:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c1ee:	89 d0                	mov    eax,edx
c001c1f0:	c1 e0 02             	shl    eax,0x2
c001c1f3:	01 d0                	add    eax,edx
c001c1f5:	01 c0                	add    eax,eax
c001c1f7:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c1fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ff:	0f b7 c0             	movzx  eax,ax
c001c202:	8d 50 d0             	lea    edx,[eax-0x30]
c001c205:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c20a:	01 d0                	add    eax,edx
c001c20c:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c211:	eb 71                	jmp    c001c284 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c213:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c21d:	eb 65                	jmp    c001c284 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c21f:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c224:	85 c0                	test   eax,eax
c001c226:	74 18                	je     c001c240 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c228:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c22d:	0f b6 c0             	movzx  eax,al
c001c230:	83 ec 0c             	sub    esp,0xc
c001c233:	50                   	push   eax
c001c234:	e8 79 fb ff ff       	call   c001bdb2 <sendKeyToTerminal(unsigned char)>
c001c239:	83 c4 10             	add    esp,0x10
c001c23c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c240:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c24a:	eb 38                	jmp    c001c284 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c24c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c24f:	0f b7 c0             	movzx  eax,ax
c001c252:	3d 01 01 00 00       	cmp    eax,0x101
c001c257:	75 2b                	jne    c001c284 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c259:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c25e:	85 c0                	test   eax,eax
c001c260:	74 18                	je     c001c27a <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c262:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c267:	0f b6 c0             	movzx  eax,al
c001c26a:	83 ec 0c             	sub    esp,0xc
c001c26d:	50                   	push   eax
c001c26e:	e8 3f fb ff ff       	call   c001bdb2 <sendKeyToTerminal(unsigned char)>
c001c273:	83 c4 10             	add    esp,0x10
c001c276:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c27a:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c284:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c287:	83 f0 01             	xor    eax,0x1
c001c28a:	0f b6 c0             	movzx  eax,al
c001c28d:	85 c0                	test   eax,eax
c001c28f:	74 5a                	je     c001c2eb <sendKeyboardToken(KeyboardToken)+0x45e>
c001c291:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c294:	83 f0 01             	xor    eax,0x1
c001c297:	0f b6 c0             	movzx  eax,al
c001c29a:	85 c0                	test   eax,eax
c001c29c:	74 4d                	je     c001c2eb <sendKeyboardToken(KeyboardToken)+0x45e>
c001c29e:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c2a3:	83 f0 01             	xor    eax,0x1
c001c2a6:	0f b6 c0             	movzx  eax,al
c001c2a9:	85 c0                	test   eax,eax
c001c2ab:	74 3e                	je     c001c2eb <sendKeyboardToken(KeyboardToken)+0x45e>
c001c2ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2b0:	0f b7 c0             	movzx  eax,ax
c001c2b3:	83 f8 1f             	cmp    eax,0x1f
c001c2b6:	76 0b                	jbe    c001c2c3 <sendKeyboardToken(KeyboardToken)+0x436>
c001c2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2bb:	0f b7 c0             	movzx  eax,ax
c001c2be:	83 f8 7e             	cmp    eax,0x7e
c001c2c1:	76 16                	jbe    c001c2d9 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2c6:	0f b7 c0             	movzx  eax,ax
c001c2c9:	83 f8 0a             	cmp    eax,0xa
c001c2cc:	74 0b                	je     c001c2d9 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c2ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2d1:	0f b7 c0             	movzx  eax,ax
c001c2d4:	83 f8 08             	cmp    eax,0x8
c001c2d7:	75 12                	jne    c001c2eb <sendKeyboardToken(KeyboardToken)+0x45e>
c001c2d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2dc:	0f b6 c0             	movzx  eax,al
c001c2df:	83 ec 0c             	sub    esp,0xc
c001c2e2:	50                   	push   eax
c001c2e3:	e8 ca fa ff ff       	call   c001bdb2 <sendKeyToTerminal(unsigned char)>
c001c2e8:	83 c4 10             	add    esp,0x10
c001c2eb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c2ee:	83 f0 01             	xor    eax,0x1
c001c2f1:	0f b6 c0             	movzx  eax,al
c001c2f4:	85 c0                	test   eax,eax
c001c2f6:	74 5d                	je     c001c355 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c2f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c2fb:	83 f0 01             	xor    eax,0x1
c001c2fe:	0f b6 c0             	movzx  eax,al
c001c301:	85 c0                	test   eax,eax
c001c303:	74 50                	je     c001c355 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c305:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c30a:	0f b6 c0             	movzx  eax,al
c001c30d:	85 c0                	test   eax,eax
c001c30f:	74 44                	je     c001c355 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c314:	0f b7 c0             	movzx  eax,ax
c001c317:	83 f8 3f             	cmp    eax,0x3f
c001c31a:	76 39                	jbe    c001c355 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c31c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c31f:	0f b7 c0             	movzx  eax,ax
c001c322:	83 f8 7f             	cmp    eax,0x7f
c001c325:	77 2e                	ja     c001c355 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c32a:	88 c2                	mov    dl,al
c001c32c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c32f:	0f b7 c0             	movzx  eax,ax
c001c332:	83 f8 5f             	cmp    eax,0x5f
c001c335:	76 04                	jbe    c001c33b <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c337:	b0 20                	mov    al,0x20
c001c339:	eb 02                	jmp    c001c33d <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c33b:	b0 00                	mov    al,0x0
c001c33d:	89 d1                	mov    ecx,edx
c001c33f:	29 c1                	sub    ecx,eax
c001c341:	89 c8                	mov    eax,ecx
c001c343:	83 e8 40             	sub    eax,0x40
c001c346:	0f b6 c0             	movzx  eax,al
c001c349:	83 ec 0c             	sub    esp,0xc
c001c34c:	50                   	push   eax
c001c34d:	e8 60 fa ff ff       	call   c001bdb2 <sendKeyToTerminal(unsigned char)>
c001c352:	83 c4 10             	add    esp,0x10
c001c355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c358:	0f b7 c0             	movzx  eax,ax
c001c35b:	3d 00 03 00 00       	cmp    eax,0x300
c001c360:	75 12                	jne    c001c374 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c362:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c365:	83 f0 01             	xor    eax,0x1
c001c368:	0f b6 c0             	movzx  eax,al
c001c36b:	85 c0                	test   eax,eax
c001c36d:	74 05                	je     c001c374 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c36f:	e8 89 ac ff ff       	call   c0016ffd <doTerminalCycle()>
c001c374:	90                   	nop
c001c375:	c9                   	leave  
c001c376:	c3                   	ret    

c001c377 <clearInternalKeybuffer(VgaText*)>:
c001c377:	55                   	push   ebp
c001c378:	89 e5                	mov    ebp,esp
c001c37a:	83 ec 08             	sub    esp,0x8
c001c37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c380:	05 02 01 00 00       	add    eax,0x102
c001c385:	83 ec 0c             	sub    esp,0xc
c001c388:	50                   	push   eax
c001c389:	e8 e2 41 fe ff       	call   c0000570 <strlen>
c001c38e:	83 c4 10             	add    esp,0x10
c001c391:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c394:	81 c2 02 01 00 00    	add    edx,0x102
c001c39a:	83 ec 04             	sub    esp,0x4
c001c39d:	50                   	push   eax
c001c39e:	6a 00                	push   0x0
c001c3a0:	52                   	push   edx
c001c3a1:	e8 4a 41 fe ff       	call   c00004f0 <memset>
c001c3a6:	83 c4 10             	add    esp,0x10
c001c3a9:	90                   	nop
c001c3aa:	c9                   	leave  
c001c3ab:	c3                   	ret    

c001c3ac <readKeyboard(VgaText*, char*, unsigned long)>:
c001c3ac:	55                   	push   ebp
c001c3ad:	89 e5                	mov    ebp,esp
c001c3af:	83 ec 18             	sub    esp,0x18
c001c3b2:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c3b7:	85 c0                	test   eax,eax
c001c3b9:	74 2a                	je     c001c3e5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c3bb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c3c1:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c3c7:	83 ec 04             	sub    esp,0x4
c001c3ca:	68 40 ef 03 c0       	push   0xc003ef40
c001c3cf:	83 ec 08             	sub    esp,0x8
c001c3d2:	89 e2                	mov    edx,esp
c001c3d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c3d7:	89 02                	mov    DWORD PTR [edx],eax
c001c3d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c3dc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c3e0:	ff d1                	call   ecx
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	fb                   	sti    
c001c3e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c3ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c3f1:	0f 84 0d 01 00 00    	je     c001c504 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c3f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3fa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c400:	0f be c0             	movsx  eax,al
c001c403:	85 c0                	test   eax,eax
c001c405:	75 2c                	jne    c001c433 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c407:	fa                   	cli    
c001c408:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c40d:	83 c0 01             	add    eax,0x1
c001c410:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c415:	e8 56 90 00 00       	call   c0025470 <schedule()>
c001c41a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c41f:	83 e8 01             	sub    eax,0x1
c001c422:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c427:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c42c:	85 c0                	test   eax,eax
c001c42e:	75 c7                	jne    c001c3f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c430:	fb                   	sti    
c001c431:	eb c4                	jmp    c001c3f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c436:	8d 50 01             	lea    edx,[eax+0x1]
c001c439:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c43c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c43f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c445:	88 10                	mov    BYTE PTR [eax],dl
c001c447:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c44a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c450:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c453:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c457:	83 f8 03             	cmp    eax,0x3
c001c45a:	75 1e                	jne    c001c47a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c45c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c461:	8b 00                	mov    eax,DWORD PTR [eax]
c001c463:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c466:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c46c:	83 ec 08             	sub    esp,0x8
c001c46f:	6a 02                	push   0x2
c001c471:	50                   	push   eax
c001c472:	e8 9c 48 00 00       	call   c0020d13 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c47e:	83 f8 1c             	cmp    eax,0x1c
c001c481:	75 1e                	jne    c001c4a1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c483:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c488:	8b 00                	mov    eax,DWORD PTR [eax]
c001c48a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c48d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c493:	83 ec 08             	sub    esp,0x8
c001c496:	6a 09                	push   0x9
c001c498:	50                   	push   eax
c001c499:	e8 75 48 00 00       	call   c0020d13 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c49e:	83 c4 10             	add    esp,0x10
c001c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c4a4:	05 02 01 00 00       	add    eax,0x102
c001c4a9:	83 ec 0c             	sub    esp,0xc
c001c4ac:	50                   	push   eax
c001c4ad:	e8 be 40 fe ff       	call   c0000570 <strlen>
c001c4b2:	83 c4 10             	add    esp,0x10
c001c4b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4b8:	81 c2 02 01 00 00    	add    edx,0x102
c001c4be:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c4c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c4c4:	81 c2 02 01 00 00    	add    edx,0x102
c001c4ca:	83 ec 04             	sub    esp,0x4
c001c4cd:	50                   	push   eax
c001c4ce:	51                   	push   ecx
c001c4cf:	52                   	push   edx
c001c4d0:	e8 fb 3e fe ff       	call   c00003d0 <memmove>
c001c4d5:	83 c4 10             	add    esp,0x10
c001c4d8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c4dc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c4e0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c4e4:	83 f8 0a             	cmp    eax,0xa
c001c4e7:	74 16                	je     c001c4ff <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c4e9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c4ed:	83 f8 03             	cmp    eax,0x3
c001c4f0:	74 0d                	je     c001c4ff <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c4f2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c4f6:	83 f8 1c             	cmp    eax,0x1c
c001c4f9:	0f 85 ee fe ff ff    	jne    c001c3ed <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c4ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c502:	eb 03                	jmp    c001c507 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c504:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c507:	c9                   	leave  
c001c508:	c3                   	ret    
c001c509:	90                   	nop

c001c50a <Keyboard::Keyboard(char const*)>:
c001c50a:	83 ec 0c             	sub    esp,0xc
c001c50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c511:	83 ec 08             	sub    esp,0x8
c001c514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c518:	50                   	push   eax
c001c519:	e8 06 f1 ff ff       	call   c001b624 <Device::Device(char const*)>
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	ba a8 23 03 c0       	mov    edx,0xc00323a8
c001c526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52a:	89 10                	mov    DWORD PTR [eax],edx
c001c52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c530:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c53a:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c541:	90                   	nop
c001c542:	83 c4 0c             	add    esp,0xc
c001c545:	c3                   	ret    

c001c546 <Keyboard::~Keyboard()>:
c001c546:	83 ec 0c             	sub    esp,0xc
c001c549:	ba a8 23 03 c0       	mov    edx,0xc00323a8
c001c54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c552:	89 10                	mov    DWORD PTR [eax],edx
c001c554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c558:	83 ec 0c             	sub    esp,0xc
c001c55b:	50                   	push   eax
c001c55c:	e8 63 ee ff ff       	call   c001b3c4 <Device::~Device()>
c001c561:	83 c4 10             	add    esp,0x10
c001c564:	90                   	nop
c001c565:	83 c4 0c             	add    esp,0xc
c001c568:	c3                   	ret    
c001c569:	90                   	nop

c001c56a <Keyboard::~Keyboard()>:
c001c56a:	83 ec 0c             	sub    esp,0xc
c001c56d:	83 ec 0c             	sub    esp,0xc
c001c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c574:	e8 cd ff ff ff       	call   c001c546 <Keyboard::~Keyboard()>
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	83 ec 08             	sub    esp,0x8
c001c57f:	68 5c 01 00 00       	push   0x15c
c001c584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c588:	e8 87 cd ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001c58d:	83 c4 10             	add    esp,0x10
c001c590:	83 c4 0c             	add    esp,0xc
c001c593:	c3                   	ret    

c001c594 <LogicalDisk::close(int, int, void*)>:
c001c594:	83 c8 ff             	or     eax,0xffffffff
c001c597:	c3                   	ret    

c001c598 <LogicalDisk::~LogicalDisk()>:
c001c598:	83 ec 0c             	sub    esp,0xc
c001c59b:	ba 20 24 03 c0       	mov    edx,0xc0032420
c001c5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a4:	89 10                	mov    DWORD PTR [eax],edx
c001c5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5aa:	83 ec 0c             	sub    esp,0xc
c001c5ad:	50                   	push   eax
c001c5ae:	e8 11 ee ff ff       	call   c001b3c4 <Device::~Device()>
c001c5b3:	83 c4 10             	add    esp,0x10
c001c5b6:	90                   	nop
c001c5b7:	83 c4 0c             	add    esp,0xc
c001c5ba:	c3                   	ret    
c001c5bb:	90                   	nop

c001c5bc <LogicalDisk::~LogicalDisk()>:
c001c5bc:	83 ec 0c             	sub    esp,0xc
c001c5bf:	83 ec 0c             	sub    esp,0xc
c001c5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c6:	e8 cd ff ff ff       	call   c001c598 <LogicalDisk::~LogicalDisk()>
c001c5cb:	83 c4 10             	add    esp,0x10
c001c5ce:	83 ec 08             	sub    esp,0x8
c001c5d1:	68 78 01 00 00       	push   0x178
c001c5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5da:	e8 35 cd ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001c5df:	83 c4 10             	add    esp,0x10
c001c5e2:	83 c4 0c             	add    esp,0xc
c001c5e5:	c3                   	ret    

c001c5e6 <LogicalDisk::open(int, int, void*)>:
c001c5e6:	83 ec 18             	sub    esp,0x18
c001c5e9:	68 d4 23 03 c0       	push   0xc00323d4
c001c5ee:	e8 67 3e 00 00       	call   c002045a <KePanic(char const*)>
c001c5f3:	83 c8 ff             	or     eax,0xffffffff
c001c5f6:	83 c4 1c             	add    esp,0x1c
c001c5f9:	c3                   	ret    

c001c5fa <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c5fa:	53                   	push   ebx
c001c5fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c603:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c607:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c60d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c613:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c619:	77 10                	ja     c001c62b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c61b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c621:	89 d3                	mov    ebx,edx
c001c623:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c629:	72 05                	jb     c001c630 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c62b:	83 c8 ff             	or     eax,0xffffffff
c001c62e:	89 c2                	mov    edx,eax
c001c630:	5b                   	pop    ebx
c001c631:	c3                   	ret    

c001c632 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c632:	56                   	push   esi
c001c633:	83 c8 ff             	or     eax,0xffffffff
c001c636:	53                   	push   ebx
c001c637:	89 c2                	mov    edx,eax
c001c639:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c63d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c641:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c645:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c64b:	77 27                	ja     c001c674 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c64d:	89 d8                	mov    eax,ebx
c001c64f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c655:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c65b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c660:	89 c2                	mov    edx,eax
c001c662:	73 10                	jae    c001c674 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c664:	89 c8                	mov    eax,ecx
c001c666:	89 da                	mov    edx,ebx
c001c668:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c66e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c674:	5b                   	pop    ebx
c001c675:	5e                   	pop    esi
c001c676:	c3                   	ret    
c001c677:	90                   	nop

c001c678 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c678:	83 ec 1c             	sub    esp,0x1c
c001c67b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c67f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c687:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c68b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c68f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c692:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c69e:	83 ec 08             	sub    esp,0x8
c001c6a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6a5:	50                   	push   eax
c001c6a6:	e8 79 ef ff ff       	call   c001b624 <Device::Device(char const*)>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	ba 20 24 03 c0       	mov    edx,0xc0032420
c001c6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6b7:	89 10                	mov    DWORD PTR [eax],edx
c001c6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6bd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6c8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c6cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6d3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6de:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c6e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c6ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c6f4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c6fa:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c700:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c704:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c707:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c70b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c711:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c71b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c71f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c729:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c733:	90                   	nop
c001c734:	83 c4 1c             	add    esp,0x1c
c001c737:	c3                   	ret    

c001c738 <LogicalDisk::assignDriveLetter()>:
c001c738:	55                   	push   ebp
c001c739:	57                   	push   edi
c001c73a:	56                   	push   esi
c001c73b:	53                   	push   ebx
c001c73c:	83 ec 14             	sub    esp,0x14
c001c73f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c743:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c749:	b0 41                	mov    al,0x41
c001c74b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c751:	84 d2                	test   dl,dl
c001c753:	75 02                	jne    c001c757 <LogicalDisk::assignDriveLetter()+0x1f>
c001c755:	b0 43                	mov    al,0x43
c001c757:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c75d:	0f b6 ca             	movzx  ecx,dl
c001c760:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c764:	0f be e8             	movsx  ebp,al
c001c767:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c76d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c771:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c775:	3c 43                	cmp    al,0x43
c001c777:	75 10                	jne    c001c789 <LogicalDisk::assignDriveLetter()+0x51>
c001c779:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c780:	75 5a                	jne    c001c7dc <LogicalDisk::assignDriveLetter()+0xa4>
c001c782:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c787:	75 53                	jne    c001c7dc <LogicalDisk::assignDriveLetter()+0xa4>
c001c789:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c78c:	ba 01 00 00 00       	mov    edx,0x1
c001c791:	89 34 24             	mov    DWORD PTR [esp],esi
c001c794:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c797:	d3 e2                	shl    edx,cl
c001c799:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c79d:	89 d7                	mov    edi,edx
c001c79f:	89 d6                	mov    esi,edx
c001c7a1:	c1 ff 1f             	sar    edi,0x1f
c001c7a4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c7a8:	21 f9                	and    ecx,edi
c001c7aa:	09 d1                	or     ecx,edx
c001c7ac:	75 2e                	jne    c001c7dc <LogicalDisk::assignDriveLetter()+0xa4>
c001c7ae:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c7b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c7b6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c7bc:	09 f2                	or     edx,esi
c001c7be:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c7c1:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c7c7:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c7ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c7d2:	09 fa                	or     edx,edi
c001c7d4:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c7da:	eb 0d                	jmp    c001c7e9 <LogicalDisk::assignDriveLetter()+0xb1>
c001c7dc:	8d 50 01             	lea    edx,[eax+0x1]
c001c7df:	45                   	inc    ebp
c001c7e0:	88 d0                	mov    al,dl
c001c7e2:	80 fa 5b             	cmp    dl,0x5b
c001c7e5:	75 8e                	jne    c001c775 <LogicalDisk::assignDriveLetter()+0x3d>
c001c7e7:	31 c0                	xor    eax,eax
c001c7e9:	83 c4 14             	add    esp,0x14
c001c7ec:	5b                   	pop    ebx
c001c7ed:	5e                   	pop    esi
c001c7ee:	5f                   	pop    edi
c001c7ef:	5d                   	pop    ebp
c001c7f0:	c3                   	ret    
c001c7f1:	90                   	nop

c001c7f2 <LogicalDisk::mount()>:
c001c7f2:	56                   	push   esi
c001c7f3:	53                   	push   ebx
c001c7f4:	53                   	push   ebx
c001c7f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7f9:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c7ff:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c809:	85 db                	test   ebx,ebx
c001c80b:	74 27                	je     c001c834 <LogicalDisk::mount()+0x42>
c001c80d:	51                   	push   ecx
c001c80e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c815:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c817:	83 e8 41             	sub    eax,0x41
c001c81a:	50                   	push   eax
c001c81b:	56                   	push   esi
c001c81c:	53                   	push   ebx
c001c81d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c820:	83 c4 10             	add    esp,0x10
c001c823:	84 c0                	test   al,al
c001c825:	74 08                	je     c001c82f <LogicalDisk::mount()+0x3d>
c001c827:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c82d:	eb 07                	jmp    c001c836 <LogicalDisk::mount()+0x44>
c001c82f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c832:	eb d5                	jmp    c001c809 <LogicalDisk::mount()+0x17>
c001c834:	31 c0                	xor    eax,eax
c001c836:	5a                   	pop    edx
c001c837:	5b                   	pop    ebx
c001c838:	5e                   	pop    esi
c001c839:	c3                   	ret    

c001c83a <LogicalDisk::unmount()>:
c001c83a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c83e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c848:	c3                   	ret    
c001c849:	90                   	nop

c001c84a <LogicalDisk::eject()>:
c001c84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c84e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c854:	8b 10                	mov    edx,DWORD PTR [eax]
c001c856:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c85a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c85d:	90                   	nop

c001c85e <LogicalDisk::unassignDriveLetter()>:
c001c85e:	57                   	push   edi
c001c85f:	56                   	push   esi
c001c860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c864:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c86b:	85 c9                	test   ecx,ecx
c001c86d:	75 0f                	jne    c001c87e <LogicalDisk::unassignDriveLetter()+0x20>
c001c86f:	c7 44 24 0c f8 23 03 c0 	mov    DWORD PTR [esp+0xc],0xc00323f8
c001c877:	5e                   	pop    esi
c001c878:	5f                   	pop    edi
c001c879:	e9 dc 3b 00 00       	jmp    c002045a <KePanic(char const*)>
c001c87e:	83 e9 41             	sub    ecx,0x41
c001c881:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c888:	b8 01 00 00 00       	mov    eax,0x1
c001c88d:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c898:	d3 e0                	shl    eax,cl
c001c89a:	89 c7                	mov    edi,eax
c001c89c:	f7 d0                	not    eax
c001c89e:	c1 ff 1f             	sar    edi,0x1f
c001c8a1:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c8a7:	89 fe                	mov    esi,edi
c001c8a9:	f7 d6                	not    esi
c001c8ab:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c8b1:	5e                   	pop    esi
c001c8b2:	5f                   	pop    edi
c001c8b3:	c3                   	ret    

c001c8b4 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c8b4:	57                   	push   edi
c001c8b5:	56                   	push   esi
c001c8b6:	53                   	push   ebx
c001c8b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c8bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8bf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c8c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8c7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c8cd:	77 41                	ja     c001c910 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c8cf:	99                   	cdq    
c001c8d0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c8d6:	01 c8                	add    eax,ecx
c001c8d8:	11 da                	adc    edx,ebx
c001c8da:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c8e0:	19 d7                	sbb    edi,edx
c001c8e2:	72 33                	jb     c001c917 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c8e4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c8ea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c8f0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c8f4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c8f8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c8fe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c904:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c908:	5b                   	pop    ebx
c001c909:	5e                   	pop    esi
c001c90a:	5f                   	pop    edi
c001c90b:	e9 c8 0a 00 00       	jmp    c001d3d8 <VCache::read(unsigned long long, int, void*)>
c001c910:	b8 05 00 00 00       	mov    eax,0x5
c001c915:	eb 05                	jmp    c001c91c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c917:	b8 07 00 00 00       	mov    eax,0x7
c001c91c:	5b                   	pop    ebx
c001c91d:	5e                   	pop    esi
c001c91e:	5f                   	pop    edi
c001c91f:	c3                   	ret    

c001c920 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c920:	57                   	push   edi
c001c921:	56                   	push   esi
c001c922:	53                   	push   ebx
c001c923:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c927:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c92b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c92f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c933:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c939:	77 41                	ja     c001c97c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c93b:	99                   	cdq    
c001c93c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c942:	01 c8                	add    eax,ecx
c001c944:	11 da                	adc    edx,ebx
c001c946:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c94c:	19 d7                	sbb    edi,edx
c001c94e:	72 33                	jb     c001c983 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c950:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c956:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c95c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c960:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c964:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c96a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c970:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c974:	5b                   	pop    ebx
c001c975:	5e                   	pop    esi
c001c976:	5f                   	pop    edi
c001c977:	e9 68 09 00 00       	jmp    c001d2e4 <VCache::write(unsigned long long, int, void*)>
c001c97c:	b8 05 00 00 00       	mov    eax,0x5
c001c981:	eb 05                	jmp    c001c988 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c983:	b8 07 00 00 00       	mov    eax,0x7
c001c988:	5b                   	pop    ebx
c001c989:	5e                   	pop    esi
c001c98a:	5f                   	pop    edi
c001c98b:	c3                   	ret    

c001c98c <Mouse::Mouse(char const*)>:
c001c98c:	83 ec 0c             	sub    esp,0xc
c001c98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c993:	83 ec 08             	sub    esp,0x8
c001c996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c99a:	50                   	push   eax
c001c99b:	e8 84 ec ff ff       	call   c001b624 <Device::Device(char const*)>
c001c9a0:	83 c4 10             	add    esp,0x10
c001c9a3:	ba 4c 24 03 c0       	mov    edx,0xc003244c
c001c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ac:	89 10                	mov    DWORD PTR [eax],edx
c001c9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c9bc:	90                   	nop
c001c9bd:	83 c4 0c             	add    esp,0xc
c001c9c0:	c3                   	ret    
c001c9c1:	90                   	nop
c001c9c2:	66 90                	xchg   ax,ax

c001c9c4 <Mouse::~Mouse()>:
c001c9c4:	83 ec 0c             	sub    esp,0xc
c001c9c7:	ba 4c 24 03 c0       	mov    edx,0xc003244c
c001c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d0:	89 10                	mov    DWORD PTR [eax],edx
c001c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d6:	83 ec 0c             	sub    esp,0xc
c001c9d9:	50                   	push   eax
c001c9da:	e8 e5 e9 ff ff       	call   c001b3c4 <Device::~Device()>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	90                   	nop
c001c9e3:	83 c4 0c             	add    esp,0xc
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <Mouse::~Mouse()>:
c001c9e8:	83 ec 0c             	sub    esp,0xc
c001c9eb:	83 ec 0c             	sub    esp,0xc
c001c9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9f2:	e8 cd ff ff ff       	call   c001c9c4 <Mouse::~Mouse()>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	83 ec 08             	sub    esp,0x8
c001c9fd:	68 58 01 00 00       	push   0x158
c001ca02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca06:	e8 09 c9 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	83 c4 0c             	add    esp,0xc
c001ca11:	c3                   	ret    

c001ca12 <NIC::getMAC()>:
c001ca12:	31 c0                	xor    eax,eax
c001ca14:	31 d2                	xor    edx,edx
c001ca16:	c3                   	ret    
c001ca17:	90                   	nop

c001ca18 <NIC::write(int, unsigned char*, int*)>:
c001ca18:	b8 01 00 00 00       	mov    eax,0x1
c001ca1d:	c3                   	ret    

c001ca1e <NIC::NIC(char const*)>:
c001ca1e:	83 ec 0c             	sub    esp,0xc
c001ca21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca25:	83 ec 08             	sub    esp,0x8
c001ca28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca2c:	50                   	push   eax
c001ca2d:	e8 f2 eb ff ff       	call   c001b624 <Device::Device(char const*)>
c001ca32:	83 c4 10             	add    esp,0x10
c001ca35:	ba 78 24 03 c0       	mov    edx,0xc0032478
c001ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca3e:	89 10                	mov    DWORD PTR [eax],edx
c001ca40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca44:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001ca4e:	90                   	nop
c001ca4f:	83 c4 0c             	add    esp,0xc
c001ca52:	c3                   	ret    
c001ca53:	90                   	nop

c001ca54 <NIC::~NIC()>:
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	ba 78 24 03 c0       	mov    edx,0xc0032478
c001ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca60:	89 10                	mov    DWORD PTR [eax],edx
c001ca62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca66:	83 ec 0c             	sub    esp,0xc
c001ca69:	50                   	push   eax
c001ca6a:	e8 55 e9 ff ff       	call   c001b3c4 <Device::~Device()>
c001ca6f:	83 c4 10             	add    esp,0x10
c001ca72:	90                   	nop
c001ca73:	83 c4 0c             	add    esp,0xc
c001ca76:	c3                   	ret    
c001ca77:	90                   	nop

c001ca78 <NIC::~NIC()>:
c001ca78:	83 ec 0c             	sub    esp,0xc
c001ca7b:	83 ec 0c             	sub    esp,0xc
c001ca7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca82:	e8 cd ff ff ff       	call   c001ca54 <NIC::~NIC()>
c001ca87:	83 c4 10             	add    esp,0x10
c001ca8a:	83 ec 08             	sub    esp,0x8
c001ca8d:	68 58 01 00 00       	push   0x158
c001ca92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca96:	e8 79 c8 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001ca9b:	83 c4 10             	add    esp,0x10
c001ca9e:	83 c4 0c             	add    esp,0xc
c001caa1:	c3                   	ret    

c001caa2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001caa2:	55                   	push   ebp
c001caa3:	57                   	push   edi
c001caa4:	56                   	push   esi
c001caa5:	53                   	push   ebx
c001caa6:	81 ec 28 01 00 00    	sub    esp,0x128
c001caac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cab3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001caba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001cac1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001cac8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cacc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cad0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cad7:	e8 44 ec ff ff       	call   c001b720 <Device::getName()>
c001cadc:	5a                   	pop    edx
c001cadd:	59                   	pop    ecx
c001cade:	50                   	push   eax
c001cadf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001cae3:	55                   	push   ebp
c001cae4:	e8 57 3b fe ff       	call   c0000640 <strcpy>
c001cae9:	5b                   	pop    ebx
c001caea:	58                   	pop    eax
c001caeb:	68 a4 24 03 c0       	push   0xc00324a4
c001caf0:	55                   	push   ebp
c001caf1:	e8 4a 3d fe ff       	call   c0000840 <strcat>
c001caf6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001cafd:	e8 af 9a ff ff       	call   c00165b1 <malloc>
c001cb02:	83 c4 0c             	add    esp,0xc
c001cb05:	89 c3                	mov    ebx,eax
c001cb07:	57                   	push   edi
c001cb08:	56                   	push   esi
c001cb09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb11:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001cb18:	55                   	push   ebp
c001cb19:	50                   	push   eax
c001cb1a:	e8 59 fb ff ff       	call   c001c678 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb1f:	83 c4 14             	add    esp,0x14
c001cb22:	53                   	push   ebx
c001cb23:	e8 10 fc ff ff       	call   c001c738 <LogicalDisk::assignDriveLetter()>
c001cb28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb2b:	e8 c2 fc ff ff       	call   c001c7f2 <LogicalDisk::mount()>
c001cb30:	58                   	pop    eax
c001cb31:	5a                   	pop    edx
c001cb32:	53                   	push   ebx
c001cb33:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cb3a:	e8 83 e9 ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c001cb3f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cb45:	5b                   	pop    ebx
c001cb46:	5e                   	pop    esi
c001cb47:	5f                   	pop    edi
c001cb48:	5d                   	pop    ebp
c001cb49:	c3                   	ret    

c001cb4a <createPartitionsForDisk(PhysicalDisk*)>:
c001cb4a:	55                   	push   ebp
c001cb4b:	57                   	push   edi
c001cb4c:	56                   	push   esi
c001cb4d:	53                   	push   ebx
c001cb4e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001cb54:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001cb5b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cb61:	3d 00 02 00 00       	cmp    eax,0x200
c001cb66:	74 27                	je     c001cb8f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001cb68:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001cb6e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001cb74:	83 ec 10             	sub    esp,0x10
c001cb77:	0f a4 f7 0a          	shld   edi,esi,0xa
c001cb7b:	99                   	cdq    
c001cb7c:	c1 e6 0a             	shl    esi,0xa
c001cb7f:	52                   	push   edx
c001cb80:	89 fd                	mov    ebp,edi
c001cb82:	50                   	push   eax
c001cb83:	55                   	push   ebp
c001cb84:	56                   	push   esi
c001cb85:	e8 e6 1c 01 00       	call   c002e870 <__udivdi3>
c001cb8a:	e9 b9 00 00 00       	jmp    c001cc48 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cb8f:	83 ec 0c             	sub    esp,0xc
c001cb92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb94:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001cb98:	56                   	push   esi
c001cb99:	6a 01                	push   0x1
c001cb9b:	6a 00                	push   0x0
c001cb9d:	6a 00                	push   0x0
c001cb9f:	53                   	push   ebx
c001cba0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cba3:	83 c4 20             	add    esp,0x20
c001cba6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001cbae:	75 0a                	jne    c001cbba <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001cbb0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001cbb8:	74 2c                	je     c001cbe6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001cbba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cbc0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cbc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cbcc:	83 ec 10             	sub    esp,0x10
c001cbcf:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cbd3:	89 f7                	mov    edi,esi
c001cbd5:	c1 e0 0a             	shl    eax,0xa
c001cbd8:	c1 ff 1f             	sar    edi,0x1f
c001cbdb:	57                   	push   edi
c001cbdc:	56                   	push   esi
c001cbdd:	52                   	push   edx
c001cbde:	50                   	push   eax
c001cbdf:	e8 8c 1c 01 00       	call   c002e870 <__udivdi3>
c001cbe4:	eb 62                	jmp    c001cc48 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001cbe6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001cbed:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cbf4:	89 cf                	mov    edi,ecx
c001cbf6:	83 e2 7f             	and    edx,0x7f
c001cbf9:	83 e7 7f             	and    edi,0x7f
c001cbfc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cc03:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cc06:	83 e0 7f             	and    eax,0x7f
c001cc09:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cc0c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cc13:	83 e0 7f             	and    eax,0x7f
c001cc16:	01 d0                	add    eax,edx
c001cc18:	89 c5                	mov    ebp,eax
c001cc1a:	84 c0                	test   al,al
c001cc1c:	74 41                	je     c001cc5f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cc1e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cc24:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cc2a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cc30:	83 ec 10             	sub    esp,0x10
c001cc33:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cc37:	89 f7                	mov    edi,esi
c001cc39:	c1 e0 0a             	shl    eax,0xa
c001cc3c:	c1 ff 1f             	sar    edi,0x1f
c001cc3f:	57                   	push   edi
c001cc40:	56                   	push   esi
c001cc41:	52                   	push   edx
c001cc42:	50                   	push   eax
c001cc43:	e8 28 1c 01 00       	call   c002e870 <__udivdi3>
c001cc48:	83 c4 14             	add    esp,0x14
c001cc4b:	52                   	push   edx
c001cc4c:	50                   	push   eax
c001cc4d:	6a 00                	push   0x0
c001cc4f:	6a 00                	push   0x0
c001cc51:	53                   	push   ebx
c001cc52:	e8 4b fe ff ff       	call   c001caa2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc57:	83 c4 20             	add    esp,0x20
c001cc5a:	e9 73 01 00 00       	jmp    c001cdd2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cc5f:	89 f0                	mov    eax,esi
c001cc61:	31 c9                	xor    ecx,ecx
c001cc63:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cc6a:	75 02                	jne    c001cc6e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cc6c:	89 cd                	mov    ebp,ecx
c001cc6e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cc75:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001cc7c:	c1 e2 08             	shl    edx,0x8
c001cc7f:	c1 e6 10             	shl    esi,0x10
c001cc82:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cc8a:	09 f2                	or     edx,esi
c001cc8c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cc94:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001cc9b:	83 c0 10             	add    eax,0x10
c001cc9e:	09 f2                	or     edx,esi
c001cca0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cca7:	c1 e6 18             	shl    esi,0x18
c001ccaa:	09 f2                	or     edx,esi
c001ccac:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001ccb3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ccb7:	c1 e6 10             	shl    esi,0x10
c001ccba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ccc1:	c1 e2 08             	shl    edx,0x8
c001ccc4:	09 f2                	or     edx,esi
c001ccc6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cccd:	09 f2                	or     edx,esi
c001cccf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ccd6:	c1 e6 18             	shl    esi,0x18
c001ccd9:	09 f2                	or     edx,esi
c001ccdb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ccdf:	41                   	inc    ecx
c001cce0:	83 f9 04             	cmp    ecx,0x4
c001cce3:	0f 85 7a ff ff ff    	jne    c001cc63 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cced:	83 f0 01             	xor    eax,0x1
c001ccf0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ccf4:	75 4f                	jne    c001cd45 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ccf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccfa:	83 f0 01             	xor    eax,0x1
c001ccfd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cd01:	75 42                	jne    c001cd45 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cd03:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd13:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cd19:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cd1f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cd25:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cd29:	89 f7                	mov    edi,esi
c001cd2b:	c1 e0 0a             	shl    eax,0xa
c001cd2e:	c1 ff 1f             	sar    edi,0x1f
c001cd31:	57                   	push   edi
c001cd32:	56                   	push   esi
c001cd33:	52                   	push   edx
c001cd34:	50                   	push   eax
c001cd35:	e8 36 1b 01 00       	call   c002e870 <__udivdi3>
c001cd3a:	83 c4 10             	add    esp,0x10
c001cd3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd41:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd45:	89 e8                	mov    eax,ebp
c001cd47:	0f b6 e8             	movzx  ebp,al
c001cd4a:	85 ed                	test   ebp,ebp
c001cd4c:	74 50                	je     c001cd9e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cd4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cd56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd5a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cd5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cd66:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cd6a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cd6e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd72:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cd76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd7a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cd7e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cd82:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cd86:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cd8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cd8e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cd92:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cd96:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cd9a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cd9e:	31 ed                	xor    ebp,ebp
c001cda0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cda4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cda8:	89 f8                	mov    eax,edi
c001cdaa:	09 f0                	or     eax,esi
c001cdac:	74 1e                	je     c001cdcc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cdae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cdb2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cdb6:	89 d1                	mov    ecx,edx
c001cdb8:	09 c1                	or     ecx,eax
c001cdba:	74 10                	je     c001cdcc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cdbc:	83 ec 0c             	sub    esp,0xc
c001cdbf:	57                   	push   edi
c001cdc0:	56                   	push   esi
c001cdc1:	52                   	push   edx
c001cdc2:	50                   	push   eax
c001cdc3:	53                   	push   ebx
c001cdc4:	e8 d9 fc ff ff       	call   c001caa2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cdc9:	83 c4 20             	add    esp,0x20
c001cdcc:	45                   	inc    ebp
c001cdcd:	83 fd 04             	cmp    ebp,0x4
c001cdd0:	75 ce                	jne    c001cda0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cdd2:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cdd8:	5b                   	pop    ebx
c001cdd9:	5e                   	pop    esi
c001cdda:	5f                   	pop    edi
c001cddb:	5d                   	pop    ebp
c001cddc:	c3                   	ret    
c001cddd:	66 90                	xchg   ax,ax
c001cddf:	90                   	nop

c001cde0 <Serial::Serial(char const*)>:
c001cde0:	83 ec 0c             	sub    esp,0xc
c001cde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde7:	83 ec 08             	sub    esp,0x8
c001cdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdee:	50                   	push   eax
c001cdef:	e8 30 e8 ff ff       	call   c001b624 <Device::Device(char const*)>
c001cdf4:	83 c4 10             	add    esp,0x10
c001cdf7:	ba b8 24 03 c0       	mov    edx,0xc00324b8
c001cdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce00:	89 10                	mov    DWORD PTR [eax],edx
c001ce02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce06:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001ce10:	90                   	nop
c001ce11:	83 c4 0c             	add    esp,0xc
c001ce14:	c3                   	ret    
c001ce15:	90                   	nop
c001ce16:	66 90                	xchg   ax,ax

c001ce18 <Serial::~Serial()>:
c001ce18:	83 ec 0c             	sub    esp,0xc
c001ce1b:	ba b8 24 03 c0       	mov    edx,0xc00324b8
c001ce20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce24:	89 10                	mov    DWORD PTR [eax],edx
c001ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce2a:	83 ec 0c             	sub    esp,0xc
c001ce2d:	50                   	push   eax
c001ce2e:	e8 91 e5 ff ff       	call   c001b3c4 <Device::~Device()>
c001ce33:	83 c4 10             	add    esp,0x10
c001ce36:	90                   	nop
c001ce37:	83 c4 0c             	add    esp,0xc
c001ce3a:	c3                   	ret    
c001ce3b:	90                   	nop

c001ce3c <Serial::~Serial()>:
c001ce3c:	83 ec 0c             	sub    esp,0xc
c001ce3f:	83 ec 0c             	sub    esp,0xc
c001ce42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce46:	e8 cd ff ff ff       	call   c001ce18 <Serial::~Serial()>
c001ce4b:	83 c4 10             	add    esp,0x10
c001ce4e:	83 ec 08             	sub    esp,0x8
c001ce51:	68 58 01 00 00       	push   0x158
c001ce56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce5a:	e8 b5 c4 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001ce5f:	83 c4 10             	add    esp,0x10
c001ce62:	83 c4 0c             	add    esp,0xc
c001ce65:	c3                   	ret    
c001ce66:	66 90                	xchg   ax,ax

c001ce68 <Timer::Timer(char const*)>:
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce6f:	83 ec 08             	sub    esp,0x8
c001ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce76:	50                   	push   eax
c001ce77:	e8 a8 e7 ff ff       	call   c001b624 <Device::Device(char const*)>
c001ce7c:	83 c4 10             	add    esp,0x10
c001ce7f:	ba fc 24 03 c0       	mov    edx,0xc00324fc
c001ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce88:	89 10                	mov    DWORD PTR [eax],edx
c001ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001ce98:	90                   	nop
c001ce99:	83 c4 0c             	add    esp,0xc
c001ce9c:	c3                   	ret    
c001ce9d:	90                   	nop
c001ce9e:	66 90                	xchg   ax,ax

c001cea0 <Timer::~Timer()>:
c001cea0:	83 ec 0c             	sub    esp,0xc
c001cea3:	ba fc 24 03 c0       	mov    edx,0xc00324fc
c001cea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceac:	89 10                	mov    DWORD PTR [eax],edx
c001ceae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceb2:	83 ec 0c             	sub    esp,0xc
c001ceb5:	50                   	push   eax
c001ceb6:	e8 09 e5 ff ff       	call   c001b3c4 <Device::~Device()>
c001cebb:	83 c4 10             	add    esp,0x10
c001cebe:	90                   	nop
c001cebf:	83 c4 0c             	add    esp,0xc
c001cec2:	c3                   	ret    
c001cec3:	90                   	nop

c001cec4 <Timer::~Timer()>:
c001cec4:	83 ec 0c             	sub    esp,0xc
c001cec7:	83 ec 0c             	sub    esp,0xc
c001ceca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cece:	e8 cd ff ff ff       	call   c001cea0 <Timer::~Timer()>
c001ced3:	83 c4 10             	add    esp,0x10
c001ced6:	83 ec 08             	sub    esp,0x8
c001ced9:	68 5c 01 00 00       	push   0x15c
c001cede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee2:	e8 2d c4 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001cee7:	83 c4 10             	add    esp,0x10
c001ceea:	83 c4 0c             	add    esp,0xc
c001ceed:	c3                   	ret    

c001ceee <Timer::read()>:
c001ceee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cef2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cef8:	c3                   	ret    

c001cef9 <setupTimer(int)>:
c001cef9:	53                   	push   ebx
c001cefa:	83 ec 14             	sub    esp,0x14
c001cefd:	68 5c 01 00 00       	push   0x15c
c001cf02:	e8 aa 96 ff ff       	call   c00165b1 <malloc>
c001cf07:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf0a:	89 c3                	mov    ebx,eax
c001cf0c:	e8 e3 11 01 00       	call   c002e0f4 <PIT::PIT()>
c001cf11:	58                   	pop    eax
c001cf12:	5a                   	pop    edx
c001cf13:	53                   	push   ebx
c001cf14:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cf1a:	e8 a3 e5 ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c001cf1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf21:	6a 00                	push   0x0
c001cf23:	6a 00                	push   0x0
c001cf25:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cf29:	53                   	push   ebx
c001cf2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf2d:	89 d8                	mov    eax,ebx
c001cf2f:	83 c4 28             	add    esp,0x28
c001cf32:	5b                   	pop    ebx
c001cf33:	c3                   	ret    

c001cf34 <timerHandler(unsigned int)>:
c001cf34:	57                   	push   edi
c001cf35:	56                   	push   esi
c001cf36:	53                   	push   ebx
c001cf37:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cf3b:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cf41:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cf48:	0f 84 46 01 00 00    	je     c001d094 <timerHandler(unsigned int)+0x160>
c001cf4e:	fa                   	cli    
c001cf4f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cf55:	83 ec 0c             	sub    esp,0xc
c001cf58:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cf5e:	68 e0 01 04 c0       	push   0xc00401e0
c001cf63:	e8 d8 1e 01 00       	call   c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cf68:	83 c4 10             	add    esp,0x10
c001cf6b:	84 c0                	test   al,al
c001cf6d:	0f 85 a1 00 00 00    	jne    c001d014 <timerHandler(unsigned int)+0xe0>
c001cf73:	83 ec 0c             	sub    esp,0xc
c001cf76:	68 e0 01 04 c0       	push   0xc00401e0
c001cf7b:	e8 dc 1e 01 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cf80:	83 c4 10             	add    esp,0x10
c001cf83:	89 c6                	mov    esi,eax
c001cf85:	8d 76 00             	lea    esi,[esi+0x0]
c001cf88:	83 ec 0c             	sub    esp,0xc
c001cf8b:	68 e0 01 04 c0       	push   0xc00401e0
c001cf90:	e8 c7 1e 01 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cf95:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cf9c:	89 c3                	mov    ebx,eax
c001cf9e:	e8 c1 1e 01 00       	call   c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cfa3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cfa6:	83 c4 10             	add    esp,0x10
c001cfa9:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cfaf:	77 23                	ja     c001cfd4 <timerHandler(unsigned int)+0xa0>
c001cfb1:	83 ec 0c             	sub    esp,0xc
c001cfb4:	53                   	push   ebx
c001cfb5:	e8 ae 87 00 00       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c001cfba:	83 c4 10             	add    esp,0x10
c001cfbd:	39 de                	cmp    esi,ebx
c001cfbf:	75 27                	jne    c001cfe8 <timerHandler(unsigned int)+0xb4>
c001cfc1:	83 ec 0c             	sub    esp,0xc
c001cfc4:	68 e0 01 04 c0       	push   0xc00401e0
c001cfc9:	e8 8e 1e 01 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cfce:	89 c6                	mov    esi,eax
c001cfd0:	eb 12                	jmp    c001cfe4 <timerHandler(unsigned int)+0xb0>
c001cfd2:	66 90                	xchg   ax,ax
c001cfd4:	50                   	push   eax
c001cfd5:	50                   	push   eax
c001cfd6:	53                   	push   ebx
c001cfd7:	68 e0 01 04 c0       	push   0xc00401e0
c001cfdc:	e8 3f 1f 01 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001cfe4:	83 c4 10             	add    esp,0x10
c001cfe7:	90                   	nop
c001cfe8:	83 ec 0c             	sub    esp,0xc
c001cfeb:	68 e0 01 04 c0       	push   0xc00401e0
c001cff0:	e8 4b 1e 01 00       	call   c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	84 c0                	test   al,al
c001cffa:	75 18                	jne    c001d014 <timerHandler(unsigned int)+0xe0>
c001cffc:	83 ec 0c             	sub    esp,0xc
c001cfff:	68 e0 01 04 c0       	push   0xc00401e0
c001d004:	e8 53 1e 01 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	39 f0                	cmp    eax,esi
c001d00e:	0f 85 74 ff ff ff    	jne    c001cf88 <timerHandler(unsigned int)+0x54>
c001d014:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d019:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001d01d:	74 3d                	je     c001d05c <timerHandler(unsigned int)+0x128>
c001d01f:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001d026:	74 34                	je     c001d05c <timerHandler(unsigned int)+0x128>
c001d028:	fa                   	cli    
c001d029:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001d02f:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001d035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d03a:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001d03d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d042:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001d045:	77 05                	ja     c001d04c <timerHandler(unsigned int)+0x118>
c001d047:	e8 24 84 00 00       	call   c0025470 <schedule()>
c001d04c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d051:	48                   	dec    eax
c001d052:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d057:	75 03                	jne    c001d05c <timerHandler(unsigned int)+0x128>
c001d059:	fb                   	sti    
c001d05a:	66 90                	xchg   ax,ax
c001d05c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001d061:	48                   	dec    eax
c001d062:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001d067:	75 1b                	jne    c001d084 <timerHandler(unsigned int)+0x150>
c001d069:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001d070:	74 12                	je     c001d084 <timerHandler(unsigned int)+0x150>
c001d072:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001d07c:	e8 ef 83 00 00       	call   c0025470 <schedule()>
c001d081:	8d 76 00             	lea    esi,[esi+0x0]
c001d084:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001d089:	48                   	dec    eax
c001d08a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001d08f:	75 03                	jne    c001d094 <timerHandler(unsigned int)+0x160>
c001d091:	fb                   	sti    
c001d092:	66 90                	xchg   ax,ax
c001d094:	5b                   	pop    ebx
c001d095:	5e                   	pop    esi
c001d096:	5f                   	pop    edi
c001d097:	c3                   	ret    

c001d098 <VCache::VCache(PhysicalDisk*)>:
c001d098:	53                   	push   ebx
c001d099:	83 ec 18             	sub    esp,0x18
c001d09c:	ba 2c 25 03 c0       	mov    edx,0xc003252c
c001d0a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0a5:	89 10                	mov    DWORD PTR [eax],edx
c001d0a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ab:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001d0b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0b6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001d0bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0c1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001d0c8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d0cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0d3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001d0da:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001d0e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0e5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001d0ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d0f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001d0ff:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001d106:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d10a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d10e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d112:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001d116:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d11a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d11e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d122:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d129:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001d131:	83 ec 0c             	sub    esp,0xc
c001d134:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d138:	e8 74 94 ff ff       	call   c00165b1 <malloc>
c001d13d:	83 c4 10             	add    esp,0x10
c001d140:	89 c3                	mov    ebx,eax
c001d142:	83 ec 0c             	sub    esp,0xc
c001d145:	53                   	push   ebx
c001d146:	e8 f5 32 00 00       	call   c0020440 <Mutex::Mutex()>
c001d14b:	83 c4 10             	add    esp,0x10
c001d14e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d152:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d159:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d15d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d164:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d16b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d16f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d179:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d17c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d180:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d186:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d18c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d190:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d193:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d19a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d19e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1a2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d1a8:	05 00 02 00 00       	add    eax,0x200
c001d1ad:	c1 e0 03             	shl    eax,0x3
c001d1b0:	83 ec 0c             	sub    esp,0xc
c001d1b3:	50                   	push   eax
c001d1b4:	e8 f8 93 ff ff       	call   c00165b1 <malloc>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	89 c2                	mov    edx,eax
c001d1be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d1c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d1d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1d4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d1d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d1dc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d1e2:	89 d0                	mov    eax,edx
c001d1e4:	c1 e0 02             	shl    eax,0x2
c001d1e7:	01 d0                	add    eax,edx
c001d1e9:	c1 e0 04             	shl    eax,0x4
c001d1ec:	83 ec 0c             	sub    esp,0xc
c001d1ef:	50                   	push   eax
c001d1f0:	e8 bc 93 ff ff       	call   c00165b1 <malloc>
c001d1f5:	83 c4 10             	add    esp,0x10
c001d1f8:	89 c2                	mov    edx,eax
c001d1fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fe:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d201:	90                   	nop
c001d202:	83 c4 18             	add    esp,0x18
c001d205:	5b                   	pop    ebx
c001d206:	c3                   	ret    
c001d207:	90                   	nop

c001d208 <VCache::invalidateReadBuffer()>:
c001d208:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d20c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d212:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d216:	c3                   	ret    
c001d217:	90                   	nop

c001d218 <VCache::writeWriteBuffer()>:
c001d218:	53                   	push   ebx
c001d219:	83 ec 08             	sub    esp,0x8
c001d21c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d220:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d224:	74 1e                	je     c001d244 <VCache::writeWriteBuffer()+0x2c>
c001d226:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d229:	83 ec 0c             	sub    esp,0xc
c001d22c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d22e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d231:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d234:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d237:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d23a:	50                   	push   eax
c001d23b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d23e:	83 c4 20             	add    esp,0x20
c001d241:	8d 76 00             	lea    esi,[esi+0x0]
c001d244:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d24b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d252:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d256:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d25d:	83 c4 08             	add    esp,0x8
c001d260:	5b                   	pop    ebx
c001d261:	c3                   	ret    
c001d262:	66 90                	xchg   ax,ax

c001d264 <VCache::~VCache()>:
c001d264:	83 ec 0c             	sub    esp,0xc
c001d267:	ba 2c 25 03 c0       	mov    edx,0xc003252c
c001d26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d270:	89 10                	mov    DWORD PTR [eax],edx
c001d272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d276:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d279:	0f b6 c0             	movzx  eax,al
c001d27c:	85 c0                	test   eax,eax
c001d27e:	74 10                	je     c001d290 <VCache::~VCache()+0x2c>
c001d280:	83 ec 0c             	sub    esp,0xc
c001d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d287:	e8 8c ff ff ff       	call   c001d218 <VCache::writeWriteBuffer()>
c001d28c:	83 c4 10             	add    esp,0x10
c001d28f:	90                   	nop
c001d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d294:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d297:	83 ec 0c             	sub    esp,0xc
c001d29a:	50                   	push   eax
c001d29b:	e8 21 93 ff ff       	call   c00165c1 <free>
c001d2a0:	83 c4 10             	add    esp,0x10
c001d2a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d2aa:	83 ec 0c             	sub    esp,0xc
c001d2ad:	50                   	push   eax
c001d2ae:	e8 0e 93 ff ff       	call   c00165c1 <free>
c001d2b3:	83 c4 10             	add    esp,0x10
c001d2b6:	90                   	nop
c001d2b7:	83 c4 0c             	add    esp,0xc
c001d2ba:	c3                   	ret    
c001d2bb:	90                   	nop

c001d2bc <VCache::~VCache()>:
c001d2bc:	83 ec 0c             	sub    esp,0xc
c001d2bf:	83 ec 0c             	sub    esp,0xc
c001d2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2c6:	e8 99 ff ff ff       	call   c001d264 <VCache::~VCache()>
c001d2cb:	83 c4 10             	add    esp,0x10
c001d2ce:	83 ec 08             	sub    esp,0x8
c001d2d1:	6a 44                	push   0x44
c001d2d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2d7:	e8 38 c0 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001d2dc:	83 c4 10             	add    esp,0x10
c001d2df:	83 c4 0c             	add    esp,0xc
c001d2e2:	c3                   	ret    
c001d2e3:	90                   	nop

c001d2e4 <VCache::write(unsigned long long, int, void*)>:
c001d2e4:	55                   	push   ebp
c001d2e5:	57                   	push   edi
c001d2e6:	56                   	push   esi
c001d2e7:	53                   	push   ebx
c001d2e8:	83 ec 1c             	sub    esp,0x1c
c001d2eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d2ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d2f7:	e8 dc 7e 00 00       	call   c00251d8 <KeDisablePreemption()>
c001d2fc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d300:	74 0e                	je     c001d310 <VCache::write(unsigned long long, int, void*)+0x2c>
c001d302:	83 ec 0c             	sub    esp,0xc
c001d305:	53                   	push   ebx
c001d306:	e8 fd fe ff ff       	call   c001d208 <VCache::invalidateReadBuffer()>
c001d30b:	83 c4 10             	add    esp,0x10
c001d30e:	66 90                	xchg   ax,ax
c001d310:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d314:	74 5e                	je     c001d374 <VCache::write(unsigned long long, int, void*)+0x90>
c001d316:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d319:	89 e8                	mov    eax,ebp
c001d31b:	99                   	cdq    
c001d31c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d31f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d322:	89 c1                	mov    ecx,eax
c001d324:	89 d0                	mov    eax,edx
c001d326:	31 f1                	xor    ecx,esi
c001d328:	31 f8                	xor    eax,edi
c001d32a:	09 c1                	or     ecx,eax
c001d32c:	75 3a                	jne    c001d368 <VCache::write(unsigned long long, int, void*)+0x84>
c001d32e:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d333:	75 33                	jne    c001d368 <VCache::write(unsigned long long, int, void*)+0x84>
c001d335:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d338:	89 ef                	mov    edi,ebp
c001d33a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d340:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d344:	0f af f9             	imul   edi,ecx
c001d347:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d34a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d34c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d34f:	40                   	inc    eax
c001d350:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d353:	83 f8 50             	cmp    eax,0x50
c001d356:	75 70                	jne    c001d3c8 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d358:	83 ec 0c             	sub    esp,0xc
c001d35b:	53                   	push   ebx
c001d35c:	e8 b7 fe ff ff       	call   c001d218 <VCache::writeWriteBuffer()>
c001d361:	83 c4 10             	add    esp,0x10
c001d364:	eb 62                	jmp    c001d3c8 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d366:	66 90                	xchg   ax,ax
c001d368:	83 ec 0c             	sub    esp,0xc
c001d36b:	53                   	push   ebx
c001d36c:	e8 a7 fe ff ff       	call   c001d218 <VCache::writeWriteBuffer()>
c001d371:	83 c4 10             	add    esp,0x10
c001d374:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d377:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d37c:	7f 22                	jg     c001d3a0 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d37e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d381:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d384:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d388:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d38c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d38f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d392:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d398:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d39c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d39e:	eb 28                	jmp    c001d3c8 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d3a0:	83 ec 0c             	sub    esp,0xc
c001d3a3:	8b 10                	mov    edx,DWORD PTR [eax]
c001d3a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3ad:	57                   	push   edi
c001d3ae:	56                   	push   esi
c001d3af:	50                   	push   eax
c001d3b0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d3b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3b7:	83 c4 20             	add    esp,0x20
c001d3ba:	e8 41 7e 00 00       	call   c0025200 <KeRestorePreemption()>
c001d3bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3c3:	eb 0b                	jmp    c001d3d0 <VCache::write(unsigned long long, int, void*)+0xec>
c001d3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d3c8:	e8 33 7e 00 00       	call   c0025200 <KeRestorePreemption()>
c001d3cd:	31 c0                	xor    eax,eax
c001d3cf:	90                   	nop
c001d3d0:	83 c4 1c             	add    esp,0x1c
c001d3d3:	5b                   	pop    ebx
c001d3d4:	5e                   	pop    esi
c001d3d5:	5f                   	pop    edi
c001d3d6:	5d                   	pop    ebp
c001d3d7:	c3                   	ret    

c001d3d8 <VCache::read(unsigned long long, int, void*)>:
c001d3d8:	55                   	push   ebp
c001d3d9:	57                   	push   edi
c001d3da:	56                   	push   esi
c001d3db:	53                   	push   ebx
c001d3dc:	83 ec 1c             	sub    esp,0x1c
c001d3df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d3e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d3e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d3eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d3ef:	e8 e4 7d 00 00       	call   c00251d8 <KeDisablePreemption()>
c001d3f4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d3f8:	74 0e                	je     c001d408 <VCache::read(unsigned long long, int, void*)+0x30>
c001d3fa:	83 ec 0c             	sub    esp,0xc
c001d3fd:	53                   	push   ebx
c001d3fe:	e8 15 fe ff ff       	call   c001d218 <VCache::writeWriteBuffer()>
c001d403:	83 c4 10             	add    esp,0x10
c001d406:	66 90                	xchg   ax,ax
c001d408:	83 fd 01             	cmp    ebp,0x1
c001d40b:	0f 85 97 00 00 00    	jne    c001d4a8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d411:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d414:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d418:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d41f:	0f 85 83 00 00 00    	jne    c001d4a8 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d425:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d428:	89 e9                	mov    ecx,ebp
c001d42a:	f7 d9                	neg    ecx
c001d42c:	89 c8                	mov    eax,ecx
c001d42e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d432:	c1 f8 1f             	sar    eax,0x1f
c001d435:	21 f1                	and    ecx,esi
c001d437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d43b:	89 c8                	mov    eax,ecx
c001d43d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d441:	21 f9                	and    ecx,edi
c001d443:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d447:	89 ca                	mov    edx,ecx
c001d449:	74 31                	je     c001d47c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d44b:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d44e:	75 2c                	jne    c001d47c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d450:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d453:	75 27                	jne    c001d47c <VCache::read(unsigned long long, int, void*)+0xa4>
c001d455:	8d 76 00             	lea    esi,[esi+0x0]
c001d458:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d45b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d45f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d465:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d468:	48                   	dec    eax
c001d469:	21 c6                	and    esi,eax
c001d46b:	0f af f1             	imul   esi,ecx
c001d46e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d471:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d473:	e8 88 7d 00 00       	call   c0025200 <KeRestorePreemption()>
c001d478:	31 c0                	xor    eax,eax
c001d47a:	eb 58                	jmp    c001d4d4 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d47c:	83 ec 0c             	sub    esp,0xc
c001d47f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d483:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d487:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d48a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d48d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d48f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d492:	55                   	push   ebp
c001d493:	52                   	push   edx
c001d494:	50                   	push   eax
c001d495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d499:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d49c:	83 c4 20             	add    esp,0x20
c001d49f:	85 c0                	test   eax,eax
c001d4a1:	75 31                	jne    c001d4d4 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d4a3:	eb b3                	jmp    c001d458 <VCache::read(unsigned long long, int, void*)+0x80>
c001d4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	53                   	push   ebx
c001d4ac:	e8 57 fd ff ff       	call   c001d208 <VCache::invalidateReadBuffer()>
c001d4b1:	5a                   	pop    edx
c001d4b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d4b5:	8b 10                	mov    edx,DWORD PTR [eax]
c001d4b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d4bb:	55                   	push   ebp
c001d4bc:	57                   	push   edi
c001d4bd:	56                   	push   esi
c001d4be:	50                   	push   eax
c001d4bf:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d4c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d4c6:	83 c4 20             	add    esp,0x20
c001d4c9:	e8 32 7d 00 00       	call   c0025200 <KeRestorePreemption()>
c001d4ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4d2:	66 90                	xchg   ax,ax
c001d4d4:	83 c4 1c             	add    esp,0x1c
c001d4d7:	5b                   	pop    ebx
c001d4d8:	5e                   	pop    esi
c001d4d9:	5f                   	pop    edi
c001d4da:	5d                   	pop    ebp
c001d4db:	c3                   	ret    

c001d4dc <Video::putrect(int, int, int, int, unsigned int)>:
c001d4dc:	55                   	push   ebp
c001d4dd:	57                   	push   edi
c001d4de:	56                   	push   esi
c001d4df:	53                   	push   ebx
c001d4e0:	83 ec 1c             	sub    esp,0x1c
c001d4e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d4e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d4eb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d4ef:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d4f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d4f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4fb:	01 df                	add    edi,ebx
c001d4fd:	39 fb                	cmp    ebx,edi
c001d4ff:	7d 1f                	jge    c001d520 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d501:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d505:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d509:	7d 12                	jge    c001d51d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d50b:	8b 16                	mov    edx,DWORD PTR [esi]
c001d50d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d511:	53                   	push   ebx
c001d512:	55                   	push   ebp
c001d513:	45                   	inc    ebp
c001d514:	56                   	push   esi
c001d515:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	eb e8                	jmp    c001d505 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d51d:	43                   	inc    ebx
c001d51e:	eb dd                	jmp    c001d4fd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d520:	83 c4 1c             	add    esp,0x1c
c001d523:	5b                   	pop    ebx
c001d524:	5e                   	pop    esi
c001d525:	5f                   	pop    edi
c001d526:	5d                   	pop    ebp
c001d527:	c3                   	ret    

c001d528 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d528:	55                   	push   ebp
c001d529:	57                   	push   edi
c001d52a:	31 ff                	xor    edi,edi
c001d52c:	56                   	push   esi
c001d52d:	53                   	push   ebx
c001d52e:	83 ec 1c             	sub    esp,0x1c
c001d531:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d535:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d539:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d540:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d549:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d54d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d551:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d554:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d558:	01 f9                	add    ecx,edi
c001d55a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d55e:	7d 2f                	jge    c001d58f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d560:	31 f6                	xor    esi,esi
c001d562:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d566:	01 f2                	add    edx,esi
c001d568:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d56c:	7d 1a                	jge    c001d588 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d56e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d571:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d574:	46                   	inc    esi
c001d575:	51                   	push   ecx
c001d576:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d57a:	52                   	push   edx
c001d57b:	55                   	push   ebp
c001d57c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d57f:	83 c4 10             	add    esp,0x10
c001d582:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d586:	eb da                	jmp    c001d562 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d588:	47                   	inc    edi
c001d589:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d58d:	eb c5                	jmp    c001d554 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d58f:	83 c4 1c             	add    esp,0x1c
c001d592:	5b                   	pop    ebx
c001d593:	5e                   	pop    esi
c001d594:	5f                   	pop    edi
c001d595:	5d                   	pop    ebp
c001d596:	c3                   	ret    
c001d597:	90                   	nop

c001d598 <Video::blit(unsigned int*, int, int, int, int)>:
c001d598:	55                   	push   ebp
c001d599:	57                   	push   edi
c001d59a:	56                   	push   esi
c001d59b:	53                   	push   ebx
c001d59c:	83 ec 1c             	sub    esp,0x1c
c001d59f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d5a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d5a7:	85 c0                	test   eax,eax
c001d5a9:	79 02                	jns    c001d5ad <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d5ab:	31 c0                	xor    eax,eax
c001d5ad:	c1 e0 02             	shl    eax,0x2
c001d5b0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d5b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d5bc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d5c0:	39 d8                	cmp    eax,ebx
c001d5c2:	7e 49                	jle    c001d60d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d5c4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d5ca:	7c 41                	jl     c001d60d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d5cc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d5d0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d5d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d5d8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d5dc:	39 f9                	cmp    ecx,edi
c001d5de:	7e 22                	jle    c001d602 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d5e0:	83 c5 04             	add    ebp,0x4
c001d5e3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d5e9:	7c 14                	jl     c001d5ff <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d5eb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d5ed:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d5f0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d5f8:	56                   	push   esi
c001d5f9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d5fc:	83 c4 10             	add    esp,0x10
c001d5ff:	47                   	inc    edi
c001d600:	eb d2                	jmp    c001d5d4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d606:	43                   	inc    ebx
c001d607:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d60b:	eb ab                	jmp    c001d5b8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d60d:	83 c4 1c             	add    esp,0x1c
c001d610:	5b                   	pop    ebx
c001d611:	5e                   	pop    esi
c001d612:	5f                   	pop    edi
c001d613:	5d                   	pop    ebp
c001d614:	c3                   	ret    
c001d615:	90                   	nop

c001d616 <Video::clearScreen(unsigned int)>:
c001d616:	57                   	push   edi
c001d617:	56                   	push   esi
c001d618:	53                   	push   ebx
c001d619:	31 db                	xor    ebx,ebx
c001d61b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d61f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d625:	7e 1f                	jle    c001d646 <Video::clearScreen(unsigned int)+0x30>
c001d627:	31 ff                	xor    edi,edi
c001d629:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d62f:	7e 12                	jle    c001d643 <Video::clearScreen(unsigned int)+0x2d>
c001d631:	8b 06                	mov    eax,DWORD PTR [esi]
c001d633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d637:	53                   	push   ebx
c001d638:	57                   	push   edi
c001d639:	47                   	inc    edi
c001d63a:	56                   	push   esi
c001d63b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d63e:	83 c4 10             	add    esp,0x10
c001d641:	eb e6                	jmp    c001d629 <Video::clearScreen(unsigned int)+0x13>
c001d643:	43                   	inc    ebx
c001d644:	eb d9                	jmp    c001d61f <Video::clearScreen(unsigned int)+0x9>
c001d646:	5b                   	pop    ebx
c001d647:	5e                   	pop    esi
c001d648:	5f                   	pop    edi
c001d649:	c3                   	ret    

c001d64a <Video::putpixel(int, int, unsigned int)>:
c001d64a:	c7 44 24 04 34 25 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032534
c001d652:	e9 03 2e 00 00       	jmp    c002045a <KePanic(char const*)>
c001d657:	90                   	nop

c001d658 <Video::readPixelApprox(int, int)>:
c001d658:	83 ec 18             	sub    esp,0x18
c001d65b:	68 55 25 03 c0       	push   0xc0032555
c001d660:	e8 f5 2d 00 00       	call   c002045a <KePanic(char const*)>
c001d665:	31 c0                	xor    eax,eax
c001d667:	83 c4 1c             	add    esp,0x1c
c001d66a:	c3                   	ret    
c001d66b:	90                   	nop

c001d66c <Video::Video(char const*)>:
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d673:	83 ec 08             	sub    esp,0x8
c001d676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d67a:	50                   	push   eax
c001d67b:	e8 a4 df ff ff       	call   c001b624 <Device::Device(char const*)>
c001d680:	83 c4 10             	add    esp,0x10
c001d683:	ba f8 25 03 c0       	mov    edx,0xc00325f8
c001d688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d68c:	89 10                	mov    DWORD PTR [eax],edx
c001d68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d692:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d69c:	90                   	nop
c001d69d:	83 c4 0c             	add    esp,0xc
c001d6a0:	c3                   	ret    
c001d6a1:	90                   	nop

c001d6a2 <Video::~Video()>:
c001d6a2:	83 ec 0c             	sub    esp,0xc
c001d6a5:	ba f8 25 03 c0       	mov    edx,0xc00325f8
c001d6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ae:	89 10                	mov    DWORD PTR [eax],edx
c001d6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6b4:	83 ec 0c             	sub    esp,0xc
c001d6b7:	50                   	push   eax
c001d6b8:	e8 07 dd ff ff       	call   c001b3c4 <Device::~Device()>
c001d6bd:	83 c4 10             	add    esp,0x10
c001d6c0:	90                   	nop
c001d6c1:	83 c4 0c             	add    esp,0xc
c001d6c4:	c3                   	ret    
c001d6c5:	90                   	nop

c001d6c6 <Video::~Video()>:
c001d6c6:	83 ec 0c             	sub    esp,0xc
c001d6c9:	83 ec 0c             	sub    esp,0xc
c001d6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6d0:	e8 cd ff ff ff       	call   c001d6a2 <Video::~Video()>
c001d6d5:	83 c4 10             	add    esp,0x10
c001d6d8:	83 ec 08             	sub    esp,0x8
c001d6db:	68 64 01 00 00       	push   0x164
c001d6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e4:	e8 2b bc ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	83 c4 0c             	add    esp,0xc
c001d6ef:	c3                   	ret    

c001d6f0 <Video::isMonochrome()>:
c001d6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6f4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d6fa:	c3                   	ret    
c001d6fb:	90                   	nop

c001d6fc <Video::getWidth()>:
c001d6fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d700:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d706:	c3                   	ret    
c001d707:	90                   	nop

c001d708 <Video::getHeight()>:
c001d708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d70c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d712:	c3                   	ret    
c001d713:	90                   	nop

c001d714 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d714:	55                   	push   ebp
c001d715:	57                   	push   edi
c001d716:	56                   	push   esi
c001d717:	53                   	push   ebx
c001d718:	83 ec 2c             	sub    esp,0x2c
c001d71b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d71f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d723:	83 f8 01             	cmp    eax,0x1
c001d726:	19 c9                	sbb    ecx,ecx
c001d728:	31 db                	xor    ebx,ebx
c001d72a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d72e:	89 cd                	mov    ebp,ecx
c001d730:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d738:	f7 d5                	not    ebp
c001d73a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d740:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d744:	01 d8                	add    eax,ebx
c001d746:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d74a:	56                   	push   esi
c001d74b:	e8 b8 ff ff ff       	call   c001d708 <Video::getHeight()>
c001d750:	59                   	pop    ecx
c001d751:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d755:	7e 70                	jle    c001d7c7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d757:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d75b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d75f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d762:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d766:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d76a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d771:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d775:	89 f8                	mov    eax,edi
c001d777:	83 c0 20             	add    eax,0x20
c001d77a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d77e:	56                   	push   esi
c001d77f:	e8 78 ff ff ff       	call   c001d6fc <Video::getWidth()>
c001d784:	5a                   	pop    edx
c001d785:	39 c7                	cmp    edi,eax
c001d787:	7d 34                	jge    c001d7bd <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d789:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d78e:	74 05                	je     c001d795 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d790:	8b 06                	mov    eax,DWORD PTR [esi]
c001d792:	55                   	push   ebp
c001d793:	eb 0d                	jmp    c001d7a2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d795:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d79a:	74 12                	je     c001d7ae <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d79c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d79e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d7a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7a6:	57                   	push   edi
c001d7a7:	56                   	push   esi
c001d7a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d7ab:	83 c4 10             	add    esp,0x10
c001d7ae:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d7b2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d7b6:	47                   	inc    edi
c001d7b7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d7bb:	75 c1                	jne    c001d77e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d7bd:	43                   	inc    ebx
c001d7be:	83 fb 20             	cmp    ebx,0x20
c001d7c1:	0f 85 79 ff ff ff    	jne    c001d740 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d7c7:	83 c4 2c             	add    esp,0x2c
c001d7ca:	5b                   	pop    ebx
c001d7cb:	5e                   	pop    esi
c001d7cc:	5f                   	pop    edi
c001d7cd:	5d                   	pop    ebp
c001d7ce:	c3                   	ret    
c001d7cf:	90                   	nop

c001d7d0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d7d0:	55                   	push   ebp
c001d7d1:	57                   	push   edi
c001d7d2:	56                   	push   esi
c001d7d3:	53                   	push   ebx
c001d7d4:	83 ec 48             	sub    esp,0x48
c001d7d7:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d7db:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d7df:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d7e3:	c1 e0 08             	shl    eax,0x8
c001d7e6:	01 d0                	add    eax,edx
c001d7e8:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d7ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7f0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d7f4:	c1 e0 08             	shl    eax,0x8
c001d7f7:	01 d0                	add    eax,edx
c001d7f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d7fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d801:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d806:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d80a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d80e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d815:	50                   	push   eax
c001d816:	e8 96 8d ff ff       	call   c00165b1 <malloc>
c001d81b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d827:	75 10                	jne    c001d839 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d829:	83 ec 0c             	sub    esp,0xc
c001d82c:	68 80 25 03 c0       	push   0xc0032580
c001d831:	e8 24 2c 00 00       	call   c002045a <KePanic(char const*)>
c001d836:	83 c4 10             	add    esp,0x10
c001d839:	51                   	push   ecx
c001d83a:	51                   	push   ecx
c001d83b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d83f:	50                   	push   eax
c001d840:	68 90 25 03 c0       	push   0xc0032590
c001d845:	e8 f7 bb ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001d84a:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d84d:	83 e0 20             	and    eax,0x20
c001d850:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d854:	85 c0                	test   eax,eax
c001d856:	5e                   	pop    esi
c001d857:	0f 94 c0             	sete   al
c001d85a:	5f                   	pop    edi
c001d85b:	0f b6 c0             	movzx  eax,al
c001d85e:	be 12 00 00 00       	mov    esi,0x12
c001d863:	50                   	push   eax
c001d864:	68 9a 25 03 c0       	push   0xc003259a
c001d869:	e8 d3 bb ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001d86e:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d872:	83 c4 10             	add    esp,0x10
c001d875:	89 d0                	mov    eax,edx
c001d877:	85 d2                	test   edx,edx
c001d879:	74 11                	je     c001d88c <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d87b:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d87f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d883:	c1 fe 03             	sar    esi,0x3
c001d886:	0f af f1             	imul   esi,ecx
c001d889:	83 c6 12             	add    esi,0x12
c001d88c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d891:	74 07                	je     c001d89a <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d893:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d898:	75 12                	jne    c001d8ac <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d89a:	83 ec 0c             	sub    esp,0xc
c001d89d:	68 a8 25 03 c0       	push   0xc00325a8
c001d8a2:	e8 9a bb ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001d8a7:	e9 a0 02 00 00       	jmp    c001db4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d8ac:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d8b0:	83 f9 02             	cmp    ecx,0x2
c001d8b3:	74 0e                	je     c001d8c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d8b5:	83 f9 0a             	cmp    ecx,0xa
c001d8b8:	0f 84 c8 00 00 00    	je     c001d986 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d8be:	e9 72 02 00 00       	jmp    c001db35 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d8c3:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d8c8:	75 0e                	jne    c001d8d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d8ca:	84 c0                	test   al,al
c001d8cc:	75 0a                	jne    c001d8d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d8ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d8d1:	83 e8 18             	sub    eax,0x18
c001d8d4:	a8 f7                	test   al,0xf7
c001d8d6:	74 0d                	je     c001d8e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d8d8:	83 ec 0c             	sub    esp,0xc
c001d8db:	68 bd 25 03 c0       	push   0xc00325bd
c001d8e0:	e9 58 02 00 00       	jmp    c001db3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d8e5:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d8ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d8f2:	31 c0                	xor    eax,eax
c001d8f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d8f8:	89 c7                	mov    edi,eax
c001d8fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d902:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d907:	75 15                	jne    c001d91e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d909:	99                   	cdq    
c001d90a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d90e:	85 d2                	test   edx,edx
c001d910:	75 0c                	jne    c001d91e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d912:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d916:	29 c7                	sub    edi,eax
c001d918:	4f                   	dec    edi
c001d919:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d91e:	31 d2                	xor    edx,edx
c001d920:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d924:	75 08                	jne    c001d92e <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d926:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d92b:	c1 e2 18             	shl    edx,0x18
c001d92e:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d933:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d937:	c1 e1 10             	shl    ecx,0x10
c001d93a:	8d 47 01             	lea    eax,[edi+0x1]
c001d93d:	89 cd                	mov    ebp,ecx
c001d93f:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d944:	c1 e1 08             	shl    ecx,0x8
c001d947:	09 e9                	or     ecx,ebp
c001d949:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d94d:	09 e9                	or     ecx,ebp
c001d94f:	09 d1                	or     ecx,edx
c001d951:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d955:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d958:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d95c:	c1 fa 03             	sar    edx,0x3
c001d95f:	01 d6                	add    esi,edx
c001d961:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d965:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d969:	7e 04                	jle    c001d96f <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d96b:	89 c7                	mov    edi,eax
c001d96d:	eb 93                	jmp    c001d902 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d96f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d973:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d977:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d97b:	0f 8f 77 ff ff ff    	jg     c001d8f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d981:	e9 d3 01 00 00       	jmp    c001db59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d986:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d98b:	75 0e                	jne    c001d99b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d98d:	85 d2                	test   edx,edx
c001d98f:	75 0a                	jne    c001d99b <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d991:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d994:	83 e8 18             	sub    eax,0x18
c001d997:	a8 f7                	test   al,0xf7
c001d999:	74 0d                	je     c001d9a8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d99b:	83 ec 0c             	sub    esp,0xc
c001d99e:	68 cb 25 03 c0       	push   0xc00325cb
c001d9a3:	e9 95 01 00 00       	jmp    c001db3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d9a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d9b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d9b8:	31 c9                	xor    ecx,ecx
c001d9ba:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d9be:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001d9c2:	0f 8e 91 01 00 00    	jle    c001db59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d9c8:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001d9cc:	0f 8d 87 01 00 00    	jge    c001db59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d9d2:	8d 46 01             	lea    eax,[esi+0x1]
c001d9d5:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d9d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9dd:	83 fd 7f             	cmp    ebp,0x7f
c001d9e0:	89 e8                	mov    eax,ebp
c001d9e2:	0f 8e 9d 00 00 00    	jle    c001da85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001d9e8:	83 e0 7f             	and    eax,0x7f
c001d9eb:	31 d2                	xor    edx,edx
c001d9ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d9f1:	40                   	inc    eax
c001d9f2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d9f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d9fa:	75 0a                	jne    c001da06 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001d9fc:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001da01:	89 ea                	mov    edx,ebp
c001da03:	c1 e2 18             	shl    edx,0x18
c001da06:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001da0b:	c1 e0 10             	shl    eax,0x10
c001da0e:	89 c7                	mov    edi,eax
c001da10:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001da15:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001da19:	c1 e0 08             	shl    eax,0x8
c001da1c:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001da20:	09 f8                	or     eax,edi
c001da22:	31 f6                	xor    esi,esi
c001da24:	09 c5                	or     ebp,eax
c001da26:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001da2b:	09 d5                	or     ebp,edx
c001da2d:	85 ff                	test   edi,edi
c001da2f:	75 1d                	jne    c001da4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001da31:	89 c8                	mov    eax,ecx
c001da33:	99                   	cdq    
c001da34:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001da38:	85 d2                	test   edx,edx
c001da3a:	75 12                	jne    c001da4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001da3c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da40:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001da44:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001da48:	49                   	dec    ecx
c001da49:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001da4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da52:	8d 51 01             	lea    edx,[ecx+0x1]
c001da55:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001da58:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001da5c:	8d 46 01             	lea    eax,[esi+0x1]
c001da5f:	7e 06                	jle    c001da67 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001da61:	89 c6                	mov    esi,eax
c001da63:	89 d1                	mov    ecx,edx
c001da65:	eb c6                	jmp    c001da2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001da67:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001da6b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001da6f:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001da73:	c1 f8 03             	sar    eax,0x3
c001da76:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001da7a:	89 d1                	mov    ecx,edx
c001da7c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001da80:	e9 35 ff ff ff       	jmp    c001d9ba <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001da85:	8d 45 01             	lea    eax,[ebp+0x1]
c001da88:	31 f6                	xor    esi,esi
c001da8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001da8e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001da93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001da97:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001da9c:	75 1d                	jne    c001dabb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001da9e:	89 c8                	mov    eax,ecx
c001daa0:	99                   	cdq    
c001daa1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001daa5:	85 d2                	test   edx,edx
c001daa7:	75 12                	jne    c001dabb <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001daa9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daad:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001dab1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001dab5:	49                   	dec    ecx
c001dab6:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001dabb:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001dac3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001dac7:	75 10                	jne    c001dad9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001dac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dacd:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001dad2:	c1 e7 18             	shl    edi,0x18
c001dad5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001dad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dadd:	8d 51 01             	lea    edx,[ecx+0x1]
c001dae0:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001dae5:	c1 e0 10             	shl    eax,0x10
c001dae8:	89 c7                	mov    edi,eax
c001daea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daee:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001daf3:	c1 e0 08             	shl    eax,0x8
c001daf6:	09 f8                	or     eax,edi
c001daf8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dafc:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001db00:	09 f8                	or     eax,edi
c001db02:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001db06:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001db0a:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001db0d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001db11:	c1 f8 03             	sar    eax,0x3
c001db14:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001db18:	8d 46 01             	lea    eax,[esi+0x1]
c001db1b:	39 f5                	cmp    ebp,esi
c001db1d:	7e 09                	jle    c001db28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001db1f:	89 c6                	mov    esi,eax
c001db21:	89 d1                	mov    ecx,edx
c001db23:	e9 6f ff ff ff       	jmp    c001da97 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001db28:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001db2c:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001db30:	e9 45 ff ff ff       	jmp    c001da7a <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001db35:	52                   	push   edx
c001db36:	52                   	push   edx
c001db37:	51                   	push   ecx
c001db38:	68 da 25 03 c0       	push   0xc00325da
c001db3d:	e8 ff b8 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001db42:	58                   	pop    eax
c001db43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db47:	e8 75 8a ff ff       	call   c00165c1 <free>
c001db4c:	83 c4 10             	add    esp,0x10
c001db4f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db57:	eb 14                	jmp    c001db6d <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001db59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db5d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001db61:	89 18                	mov    DWORD PTR [eax],ebx
c001db63:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001db67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db6b:	89 18                	mov    DWORD PTR [eax],ebx
c001db6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db71:	83 c4 3c             	add    esp,0x3c
c001db74:	5b                   	pop    ebx
c001db75:	5e                   	pop    esi
c001db76:	5f                   	pop    edi
c001db77:	5d                   	pop    ebp
c001db78:	c3                   	ret    
c001db79:	90                   	nop

c001db7a <Video::putTGA(int, int, unsigned char*, int)>:
c001db7a:	55                   	push   ebp
c001db7b:	57                   	push   edi
c001db7c:	56                   	push   esi
c001db7d:	53                   	push   ebx
c001db7e:	83 ec 28             	sub    esp,0x28
c001db81:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001db85:	8d 44 24 18          	lea    eax,[esp+0x18]
c001db89:	50                   	push   eax
c001db8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001db8e:	50                   	push   eax
c001db8f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001db93:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001db97:	57                   	push   edi
c001db98:	e8 33 fc ff ff       	call   c001d7d0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001db9d:	83 c4 20             	add    esp,0x20
c001dba0:	85 c0                	test   eax,eax
c001dba2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dba6:	74 3a                	je     c001dbe2 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dba8:	89 c6                	mov    esi,eax
c001dbaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dbae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001dbb2:	39 d8                	cmp    eax,ebx
c001dbb4:	7e 2c                	jle    c001dbe2 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001dbb6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dbba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dbbe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dbc2:	39 e8                	cmp    eax,ebp
c001dbc4:	7e 19                	jle    c001dbdf <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001dbc6:	83 c6 04             	add    esi,0x4
c001dbc9:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001dbcc:	85 c0                	test   eax,eax
c001dbce:	79 0c                	jns    c001dbdc <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001dbd0:	8b 17                	mov    edx,DWORD PTR [edi]
c001dbd2:	50                   	push   eax
c001dbd3:	53                   	push   ebx
c001dbd4:	55                   	push   ebp
c001dbd5:	57                   	push   edi
c001dbd6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001dbd9:	83 c4 10             	add    esp,0x10
c001dbdc:	45                   	inc    ebp
c001dbdd:	eb db                	jmp    c001dbba <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001dbdf:	43                   	inc    ebx
c001dbe0:	eb c8                	jmp    c001dbaa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001dbe2:	83 c4 1c             	add    esp,0x1c
c001dbe5:	5b                   	pop    ebx
c001dbe6:	5e                   	pop    esi
c001dbe7:	5f                   	pop    edi
c001dbe8:	5d                   	pop    ebp
c001dbe9:	c3                   	ret    
c001dbea:	66 90                	xchg   ax,ax

c001dbec <ACPI::close(int, int, void*)>:
c001dbec:	83 ec 1c             	sub    esp,0x1c
c001dbef:	83 ec 0c             	sub    esp,0xc
c001dbf2:	68 3c 26 03 c0       	push   0xc003263c
c001dbf7:	e8 45 b8 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dbfc:	83 c4 10             	add    esp,0x10
c001dbff:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dc07:	74 1b                	je     c001dc24 <ACPI::close(int, int, void*)+0x38>
c001dc09:	83 ec 0c             	sub    esp,0xc
c001dc0c:	68 4b 26 03 c0       	push   0xc003264b
c001dc11:	e8 2b b8 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dc16:	83 c4 10             	add    esp,0x10
c001dc19:	b8 00 00 00 00       	mov    eax,0x0
c001dc1e:	e9 01 01 00 00       	jmp    c001dd24 <ACPI::close(int, int, void*)+0x138>
c001dc23:	90                   	nop
c001dc24:	83 ec 0c             	sub    esp,0xc
c001dc27:	68 5c 26 03 c0       	push   0xc003265c
c001dc2c:	e8 10 b8 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001dc39:	75 45                	jne    c001dc80 <ACPI::close(int, int, void*)+0x94>
c001dc3b:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dc40:	83 ec 08             	sub    esp,0x8
c001dc43:	50                   	push   eax
c001dc44:	68 6b 26 03 c0       	push   0xc003266b
c001dc49:	e8 f3 b7 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dc4e:	83 c4 10             	add    esp,0x10
c001dc51:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dc56:	85 c0                	test   eax,eax
c001dc58:	74 0a                	je     c001dc64 <ACPI::close(int, int, void*)+0x78>
c001dc5a:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dc5f:	ff d0                	call   eax
c001dc61:	8d 76 00             	lea    esi,[esi+0x0]
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	68 3c 28 03 c0       	push   0xc003283c
c001dc6c:	e8 e9 27 00 00       	call   c002045a <KePanic(char const*)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dc79:	e9 a6 00 00 00       	jmp    c001dd24 <ACPI::close(int, int, void*)+0x138>
c001dc7e:	66 90                	xchg   ax,ax
c001dc80:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001dc85:	0f 85 81 00 00 00    	jne    c001dd0c <ACPI::close(int, int, void*)+0x120>
c001dc8b:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001dc90:	83 ec 08             	sub    esp,0x8
c001dc93:	50                   	push   eax
c001dc94:	68 89 26 03 c0       	push   0xc0032689
c001dc99:	e8 a3 b7 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dc9e:	83 c4 10             	add    esp,0x10
c001dca1:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dca6:	85 c0                	test   eax,eax
c001dca8:	74 0a                	je     c001dcb4 <ACPI::close(int, int, void*)+0xc8>
c001dcaa:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dcaf:	ff d0                	call   eax
c001dcb1:	8d 76 00             	lea    esi,[esi+0x0]
c001dcb4:	83 ec 0c             	sub    esp,0xc
c001dcb7:	68 a4 26 03 c0       	push   0xc00326a4
c001dcbc:	e8 80 b7 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dcc1:	83 c4 10             	add    esp,0x10
c001dcc4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001dccc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcd1:	83 e0 02             	and    eax,0x2
c001dcd4:	74 1e                	je     c001dcf4 <ACPI::close(int, int, void*)+0x108>
c001dcd6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dcdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dce1:	89 c2                	mov    edx,eax
c001dce3:	ec                   	in     al,dx
c001dce4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dce8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dcec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcf0:	eb da                	jmp    c001dccc <ACPI::close(int, int, void*)+0xe0>
c001dcf2:	66 90                	xchg   ax,ax
c001dcf4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001dcfb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001dd00:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dd04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd08:	ee                   	out    dx,al
c001dd09:	8d 76 00             	lea    esi,[esi+0x0]
c001dd0c:	83 ec 0c             	sub    esp,0xc
c001dd0f:	68 b6 26 03 c0       	push   0xc00326b6
c001dd14:	e8 28 b7 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dd21:	8d 76 00             	lea    esi,[esi+0x0]
c001dd24:	83 c4 1c             	add    esp,0x1c
c001dd27:	c3                   	ret    

c001dd28 <findRSDP()>:
c001dd28:	83 ec 1c             	sub    esp,0x1c
c001dd2b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd30:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd36:	83 e0 04             	and    eax,0x4
c001dd39:	0f b6 c0             	movzx  eax,al
c001dd3c:	85 c0                	test   eax,eax
c001dd3e:	75 08                	jne    c001dd48 <findRSDP()+0x20>
c001dd40:	b8 00 00 00 00       	mov    eax,0x0
c001dd45:	eb 75                	jmp    c001ddbc <findRSDP()+0x94>
c001dd47:	90                   	nop
c001dd48:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001dd4d:	3d ff 07 00 00       	cmp    eax,0x7ff
c001dd52:	7f 1c                	jg     c001dd70 <findRSDP()+0x48>
c001dd54:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd59:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dd5f:	83 e2 fb             	and    edx,0xfffffffb
c001dd62:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dd68:	b8 00 00 00 00       	mov    eax,0x0
c001dd6d:	eb 4d                	jmp    c001ddbc <findRSDP()+0x94>
c001dd6f:	90                   	nop
c001dd70:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001dd78:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dd80:	77 32                	ja     c001ddb4 <findRSDP()+0x8c>
c001dd82:	83 ec 04             	sub    esp,0x4
c001dd85:	6a 08                	push   0x8
c001dd87:	68 c5 26 03 c0       	push   0xc00326c5
c001dd8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dd90:	e8 eb 25 fe ff       	call   c0000380 <memcmp>
c001dd95:	83 c4 10             	add    esp,0x10
c001dd98:	85 c0                	test   eax,eax
c001dd9a:	0f 94 c0             	sete   al
c001dd9d:	0f b6 c0             	movzx  eax,al
c001dda0:	85 c0                	test   eax,eax
c001dda2:	74 08                	je     c001ddac <findRSDP()+0x84>
c001dda4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dda8:	eb 12                	jmp    c001ddbc <findRSDP()+0x94>
c001ddaa:	66 90                	xchg   ax,ax
c001ddac:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001ddb1:	eb c5                	jmp    c001dd78 <findRSDP()+0x50>
c001ddb3:	90                   	nop
c001ddb4:	b8 00 00 00 00       	mov    eax,0x0
c001ddb9:	8d 76 00             	lea    esi,[esi+0x0]
c001ddbc:	83 c4 1c             	add    esp,0x1c
c001ddbf:	c3                   	ret    

c001ddc0 <loadACPITables(unsigned char*)>:
c001ddc0:	57                   	push   edi
c001ddc1:	56                   	push   esi
c001ddc2:	53                   	push   ebx
c001ddc3:	83 ec 60             	sub    esp,0x60
c001ddc6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ddcb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ddd1:	83 e0 04             	and    eax,0x4
c001ddd4:	0f b6 c0             	movzx  eax,al
c001ddd7:	85 c0                	test   eax,eax
c001ddd9:	0f 84 41 02 00 00    	je     c001e020 <loadACPITables(unsigned char*)+0x260>
c001dddf:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dde4:	0f b6 c0             	movzx  eax,al
c001dde7:	85 c0                	test   eax,eax
c001dde9:	74 79                	je     c001de64 <loadACPITables(unsigned char*)+0xa4>
c001ddeb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ddef:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001ddf3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ddf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ddfa:	83 e8 24             	sub    eax,0x24
c001ddfd:	c1 e8 03             	shr    eax,0x3
c001de00:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de04:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001de0c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001de10:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001de14:	0f 8d ba 00 00 00    	jge    c001ded4 <loadACPITables(unsigned char*)+0x114>
c001de1a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001de1e:	83 c0 24             	add    eax,0x24
c001de21:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001de25:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001de29:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001de2d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001de31:	c1 e0 03             	shl    eax,0x3
c001de34:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001de38:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001de3c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001de3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001de41:	89 c1                	mov    ecx,eax
c001de43:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001de48:	8d 50 01             	lea    edx,[eax+0x1]
c001de4b:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001de51:	89 ca                	mov    edx,ecx
c001de53:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de5a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001de5f:	eb ab                	jmp    c001de0c <loadACPITables(unsigned char*)+0x4c>
c001de61:	8d 76 00             	lea    esi,[esi+0x0]
c001de64:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001de68:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001de6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de73:	83 e8 24             	sub    eax,0x24
c001de76:	c1 e8 02             	shr    eax,0x2
c001de79:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001de7d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001de85:	8d 76 00             	lea    esi,[esi+0x0]
c001de88:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de8c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001de90:	7d 42                	jge    c001ded4 <loadACPITables(unsigned char*)+0x114>
c001de92:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001de96:	83 c0 24             	add    eax,0x24
c001de99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001de9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dea1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dea5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dea9:	c1 e0 02             	shl    eax,0x2
c001deac:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001deb0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001deb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001deb6:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001debb:	8d 50 01             	lea    edx,[eax+0x1]
c001debe:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dec4:	89 ca                	mov    edx,ecx
c001dec6:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001decd:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001ded2:	eb b4                	jmp    c001de88 <loadACPITables(unsigned char*)+0xc8>
c001ded4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dedc:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dee1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dee5:	0f 8d 39 01 00 00    	jge    c001e024 <loadACPITables(unsigned char*)+0x264>
c001deeb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001deef:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001def6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001defa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001defe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001df02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df06:	25 ff 0f 00 00       	and    eax,0xfff
c001df0b:	89 c6                	mov    esi,eax
c001df0d:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df13:	83 ec 0c             	sub    esp,0xc
c001df16:	6a 01                	push   0x1
c001df18:	e8 ec a1 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c001df1d:	83 c4 10             	add    esp,0x10
c001df20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001df24:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df2a:	83 ec 0c             	sub    esp,0xc
c001df2d:	6a 01                	push   0x1
c001df2f:	6a 01                	push   0x1
c001df31:	50                   	push   eax
c001df32:	52                   	push   edx
c001df33:	53                   	push   ebx
c001df34:	e8 dd aa ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df39:	83 c4 20             	add    esp,0x20
c001df3c:	09 f0                	or     eax,esi
c001df3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df42:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001df46:	c1 e0 03             	shl    eax,0x3
c001df49:	05 20 f4 03 c0       	add    eax,0xc003f420
c001df4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001df5a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001df62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001df66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001df6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001df76:	89 c6                	mov    esi,eax
c001df78:	89 d7                	mov    edi,edx
c001df7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df7c:	89 c8                	mov    eax,ecx
c001df7e:	89 fa                	mov    edx,edi
c001df80:	89 f3                	mov    ebx,esi
c001df82:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001df86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001df8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001df92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df95:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001df99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df9d:	05 00 10 00 00       	add    eax,0x1000
c001dfa2:	c1 e8 0c             	shr    eax,0xc
c001dfa5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dfa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dfb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfb5:	25 ff 0f 00 00       	and    eax,0xfff
c001dfba:	89 c6                	mov    esi,eax
c001dfbc:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dfc2:	83 ec 0c             	sub    esp,0xc
c001dfc5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dfc9:	e8 3b a1 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c001dfce:	83 c4 10             	add    esp,0x10
c001dfd1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dfd5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dfdb:	83 ec 0c             	sub    esp,0xc
c001dfde:	6a 01                	push   0x1
c001dfe0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dfe4:	50                   	push   eax
c001dfe5:	52                   	push   edx
c001dfe6:	53                   	push   ebx
c001dfe7:	e8 2a aa ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dfec:	83 c4 20             	add    esp,0x20
c001dfef:	09 f0                	or     eax,esi
c001dff1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dff9:	83 ec 0c             	sub    esp,0xc
c001dffc:	50                   	push   eax
c001dffd:	e8 25 a4 ff ff       	call   c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e009:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e00d:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001e014:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001e019:	e9 be fe ff ff       	jmp    c001dedc <loadACPITables(unsigned char*)+0x11c>
c001e01e:	66 90                	xchg   ax,ax
c001e020:	90                   	nop
c001e021:	8d 76 00             	lea    esi,[esi+0x0]
c001e024:	83 c4 60             	add    esp,0x60
c001e027:	5b                   	pop    ebx
c001e028:	5e                   	pop    esi
c001e029:	5f                   	pop    edi
c001e02a:	c3                   	ret    
c001e02b:	90                   	nop

c001e02c <findRSDT(unsigned char*)>:
c001e02c:	57                   	push   edi
c001e02d:	56                   	push   esi
c001e02e:	53                   	push   ebx
c001e02f:	83 ec 50             	sub    esp,0x50
c001e032:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e037:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e03d:	83 e0 04             	and    eax,0x4
c001e040:	0f b6 c0             	movzx  eax,al
c001e043:	85 c0                	test   eax,eax
c001e045:	75 0d                	jne    c001e054 <findRSDT(unsigned char*)+0x28>
c001e047:	b8 00 00 00 00       	mov    eax,0x0
c001e04c:	e9 2b 01 00 00       	jmp    c001e17c <findRSDT(unsigned char*)+0x150>
c001e051:	8d 76 00             	lea    esi,[esi+0x0]
c001e054:	89 e0                	mov    eax,esp
c001e056:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001e05a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e05e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001e062:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001e06a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e06e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e072:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e076:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e07a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e07e:	89 c6                	mov    esi,eax
c001e080:	89 d7                	mov    edi,edx
c001e082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e084:	89 c8                	mov    eax,ecx
c001e086:	89 fa                	mov    edx,edi
c001e088:	89 f3                	mov    ebx,esi
c001e08a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001e08e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e092:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e096:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e09a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001e09e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001e0a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e0aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e0ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e0ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e0be:	25 ff 0f 00 00       	and    eax,0xfff
c001e0c3:	89 c6                	mov    esi,eax
c001e0c5:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e0cb:	83 ec 0c             	sub    esp,0xc
c001e0ce:	6a 02                	push   0x2
c001e0d0:	e8 34 a0 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c001e0d5:	83 c4 10             	add    esp,0x10
c001e0d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e0dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	6a 01                	push   0x1
c001e0e7:	6a 02                	push   0x2
c001e0e9:	50                   	push   eax
c001e0ea:	52                   	push   edx
c001e0eb:	53                   	push   ebx
c001e0ec:	e8 25 a9 ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e0f1:	83 c4 20             	add    esp,0x20
c001e0f4:	09 f0                	or     eax,esi
c001e0f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e0fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e0fe:	25 ff 0f 00 00       	and    eax,0xfff
c001e103:	89 c6                	mov    esi,eax
c001e105:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001e10b:	83 ec 0c             	sub    esp,0xc
c001e10e:	6a 02                	push   0x2
c001e110:	e8 f4 9f ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c001e115:	83 c4 10             	add    esp,0x10
c001e118:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e11c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001e122:	83 ec 0c             	sub    esp,0xc
c001e125:	6a 01                	push   0x1
c001e127:	6a 02                	push   0x2
c001e129:	50                   	push   eax
c001e12a:	52                   	push   edx
c001e12b:	53                   	push   ebx
c001e12c:	e8 e5 a8 ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e131:	83 c4 20             	add    esp,0x20
c001e134:	09 f0                	or     eax,esi
c001e136:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e13a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e13f:	85 c0                	test   eax,eax
c001e141:	75 11                	jne    c001e154 <findRSDT(unsigned char*)+0x128>
c001e143:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e14a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e14e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e152:	eb 24                	jmp    c001e178 <findRSDT(unsigned char*)+0x14c>
c001e154:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e159:	83 f8 02             	cmp    eax,0x2
c001e15c:	75 12                	jne    c001e170 <findRSDT(unsigned char*)+0x144>
c001e15e:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e165:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e169:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e16d:	eb 09                	jmp    c001e178 <findRSDT(unsigned char*)+0x14c>
c001e16f:	90                   	nop
c001e170:	b8 00 00 00 00       	mov    eax,0x0
c001e175:	eb 05                	jmp    c001e17c <findRSDT(unsigned char*)+0x150>
c001e177:	90                   	nop
c001e178:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e17c:	83 c4 50             	add    esp,0x50
c001e17f:	5b                   	pop    ebx
c001e180:	5e                   	pop    esi
c001e181:	5f                   	pop    edi
c001e182:	c3                   	ret    
c001e183:	90                   	nop

c001e184 <findDataTable(unsigned char*, char*)>:
c001e184:	83 ec 1c             	sub    esp,0x1c
c001e187:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e18c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e192:	83 e0 04             	and    eax,0x4
c001e195:	0f b6 c0             	movzx  eax,al
c001e198:	85 c0                	test   eax,eax
c001e19a:	75 08                	jne    c001e1a4 <findDataTable(unsigned char*, char*)+0x20>
c001e19c:	b8 00 00 00 00       	mov    eax,0x0
c001e1a1:	eb 5d                	jmp    c001e200 <findDataTable(unsigned char*, char*)+0x7c>
c001e1a3:	90                   	nop
c001e1a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e1ac:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e1b1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e1b5:	7d 41                	jge    c001e1f8 <findDataTable(unsigned char*, char*)+0x74>
c001e1b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1bb:	c1 e0 03             	shl    eax,0x3
c001e1be:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e1c3:	83 ec 04             	sub    esp,0x4
c001e1c6:	6a 04                	push   0x4
c001e1c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1cc:	50                   	push   eax
c001e1cd:	e8 ae 21 fe ff       	call   c0000380 <memcmp>
c001e1d2:	83 c4 10             	add    esp,0x10
c001e1d5:	85 c0                	test   eax,eax
c001e1d7:	0f 94 c0             	sete   al
c001e1da:	0f b6 c0             	movzx  eax,al
c001e1dd:	85 c0                	test   eax,eax
c001e1df:	74 0f                	je     c001e1f0 <findDataTable(unsigned char*, char*)+0x6c>
c001e1e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e1e5:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e1ec:	eb 12                	jmp    c001e200 <findDataTable(unsigned char*, char*)+0x7c>
c001e1ee:	66 90                	xchg   ax,ax
c001e1f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e1f5:	eb b5                	jmp    c001e1ac <findDataTable(unsigned char*, char*)+0x28>
c001e1f7:	90                   	nop
c001e1f8:	b8 00 00 00 00       	mov    eax,0x0
c001e1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e200:	83 c4 1c             	add    esp,0x1c
c001e203:	c3                   	ret    

c001e204 <scanMADT()>:
c001e204:	53                   	push   ebx
c001e205:	83 ec 38             	sub    esp,0x38
c001e208:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e20d:	25 00 04 00 00       	and    eax,0x400
c001e212:	74 14                	je     c001e228 <scanMADT()+0x24>
c001e214:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e219:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e21f:	83 e2 fb             	and    edx,0xfffffffb
c001e222:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e228:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e22d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e233:	83 e0 04             	and    eax,0x4
c001e236:	0f b6 c0             	movzx  eax,al
c001e239:	85 c0                	test   eax,eax
c001e23b:	0f 84 6b 04 00 00    	je     c001e6ac <scanMADT()+0x4a8>
c001e241:	e8 e2 fa ff ff       	call   c001dd28 <findRSDP()>
c001e246:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e24b:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e250:	85 c0                	test   eax,eax
c001e252:	75 1c                	jne    c001e270 <scanMADT()+0x6c>
c001e254:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e259:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e25f:	83 e2 fb             	and    edx,0xfffffffb
c001e262:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e268:	e9 47 04 00 00       	jmp    c001e6b4 <scanMADT()+0x4b0>
c001e26d:	8d 76 00             	lea    esi,[esi+0x0]
c001e270:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e275:	83 ec 0c             	sub    esp,0xc
c001e278:	50                   	push   eax
c001e279:	e8 ae fd ff ff       	call   c001e02c <findRSDT(unsigned char*)>
c001e27e:	83 c4 10             	add    esp,0x10
c001e281:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e286:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e28b:	85 c0                	test   eax,eax
c001e28d:	75 19                	jne    c001e2a8 <scanMADT()+0xa4>
c001e28f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e294:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e29a:	83 e2 fb             	and    edx,0xfffffffb
c001e29d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e2a3:	e9 0c 04 00 00       	jmp    c001e6b4 <scanMADT()+0x4b0>
c001e2a8:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e2ad:	83 ec 0c             	sub    esp,0xc
c001e2b0:	50                   	push   eax
c001e2b1:	e8 0a fb ff ff       	call   c001ddc0 <loadACPITables(unsigned char*)>
c001e2b6:	83 c4 10             	add    esp,0x10
c001e2b9:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e2be:	83 ec 08             	sub    esp,0x8
c001e2c1:	68 ce 26 03 c0       	push   0xc00326ce
c001e2c6:	50                   	push   eax
c001e2c7:	e8 b8 fe ff ff       	call   c001e184 <findDataTable(unsigned char*, char*)>
c001e2cc:	83 c4 10             	add    esp,0x10
c001e2cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e2d3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e2d8:	75 1a                	jne    c001e2f4 <scanMADT()+0xf0>
c001e2da:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e2df:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e2e5:	83 e2 fe             	and    edx,0xfffffffe
c001e2e8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e2ee:	e9 c1 03 00 00       	jmp    c001e6b4 <scanMADT()+0x4b0>
c001e2f3:	90                   	nop
c001e2f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e2fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e300:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e303:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e307:	0f 87 a7 03 00 00    	ja     c001e6b4 <scanMADT()+0x4b0>
c001e30d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e315:	0f 87 99 03 00 00    	ja     c001e6b4 <scanMADT()+0x4b0>
c001e31b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e31f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e323:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e327:	8d 50 01             	lea    edx,[eax+0x1]
c001e32a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e32e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e332:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e336:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e33e:	8d 50 01             	lea    edx,[eax+0x1]
c001e341:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e345:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e349:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e34d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e351:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e356:	83 f8 02             	cmp    eax,0x2
c001e359:	0f 86 51 03 00 00    	jbe    c001e6b0 <scanMADT()+0x4ac>
c001e35f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e364:	85 c0                	test   eax,eax
c001e366:	75 58                	jne    c001e3c0 <scanMADT()+0x1bc>
c001e368:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e36c:	8d 50 01             	lea    edx,[eax+0x1]
c001e36f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e373:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e379:	0f b6 d2             	movzx  edx,dl
c001e37c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e380:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e384:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e38a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e38e:	8d 50 01             	lea    edx,[eax+0x1]
c001e391:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e395:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e39b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e39e:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e3a4:	0f b6 d2             	movzx  edx,dl
c001e3a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e3ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e3af:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e3b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e3ba:	e9 d9 02 00 00       	jmp    c001e698 <scanMADT()+0x494>
c001e3bf:	90                   	nop
c001e3c0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3c5:	83 f8 01             	cmp    eax,0x1
c001e3c8:	0f 85 1a 01 00 00    	jne    c001e4e8 <scanMADT()+0x2e4>
c001e3ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3d2:	8d 50 01             	lea    edx,[eax+0x1]
c001e3d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3d9:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e3df:	0f b6 d2             	movzx  edx,dl
c001e3e2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e3e6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e3ea:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e3f0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e3f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3fd:	01 d0                	add    eax,edx
c001e3ff:	83 c0 2c             	add    eax,0x2c
c001e402:	8a 00                	mov    al,BYTE PTR [eax]
c001e404:	0f b6 d0             	movzx  edx,al
c001e407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e40b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e40e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e412:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e416:	0f b6 c0             	movzx  eax,al
c001e419:	c1 e0 08             	shl    eax,0x8
c001e41c:	89 d1                	mov    ecx,edx
c001e41e:	09 c1                	or     ecx,eax
c001e420:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e424:	8d 50 02             	lea    edx,[eax+0x2]
c001e427:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e42b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e42f:	0f b6 c0             	movzx  eax,al
c001e432:	c1 e0 10             	shl    eax,0x10
c001e435:	09 c1                	or     ecx,eax
c001e437:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e43b:	8d 50 03             	lea    edx,[eax+0x3]
c001e43e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e442:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e446:	0f b6 c0             	movzx  eax,al
c001e449:	c1 e0 18             	shl    eax,0x18
c001e44c:	09 c1                	or     ecx,eax
c001e44e:	89 ca                	mov    edx,ecx
c001e450:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e455:	0f b6 c0             	movzx  eax,al
c001e458:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e45f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e464:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e468:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e46c:	01 d0                	add    eax,edx
c001e46e:	83 c0 2c             	add    eax,0x2c
c001e471:	8a 00                	mov    al,BYTE PTR [eax]
c001e473:	0f b6 d0             	movzx  edx,al
c001e476:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e47a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e47d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e481:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e485:	0f b6 c0             	movzx  eax,al
c001e488:	c1 e0 08             	shl    eax,0x8
c001e48b:	89 d1                	mov    ecx,edx
c001e48d:	09 c1                	or     ecx,eax
c001e48f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e493:	8d 50 02             	lea    edx,[eax+0x2]
c001e496:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e49a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e49e:	0f b6 c0             	movzx  eax,al
c001e4a1:	c1 e0 10             	shl    eax,0x10
c001e4a4:	09 c1                	or     ecx,eax
c001e4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4aa:	8d 50 03             	lea    edx,[eax+0x3]
c001e4ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e4b5:	0f b6 c0             	movzx  eax,al
c001e4b8:	c1 e0 18             	shl    eax,0x18
c001e4bb:	09 c1                	or     ecx,eax
c001e4bd:	89 ca                	mov    edx,ecx
c001e4bf:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e4c4:	0f b6 c0             	movzx  eax,al
c001e4c7:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e4ce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e4d3:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e4d8:	83 c0 01             	add    eax,0x1
c001e4db:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e4e0:	e9 b3 01 00 00       	jmp    c001e698 <scanMADT()+0x494>
c001e4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001e4e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4ed:	83 f8 02             	cmp    eax,0x2
c001e4f0:	0f 85 ea 00 00 00    	jne    c001e5e0 <scanMADT()+0x3dc>
c001e4f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4fa:	8d 50 01             	lea    edx,[eax+0x1]
c001e4fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e501:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e505:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e509:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e50d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e511:	8d 50 01             	lea    edx,[eax+0x1]
c001e514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e518:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e51c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e520:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e524:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e52c:	01 d0                	add    eax,edx
c001e52e:	83 c0 2c             	add    eax,0x2c
c001e531:	8a 00                	mov    al,BYTE PTR [eax]
c001e533:	0f b6 d0             	movzx  edx,al
c001e536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e53a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e53d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e541:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e545:	0f b6 c0             	movzx  eax,al
c001e548:	c1 e0 08             	shl    eax,0x8
c001e54b:	89 d1                	mov    ecx,edx
c001e54d:	09 c1                	or     ecx,eax
c001e54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e553:	8d 50 02             	lea    edx,[eax+0x2]
c001e556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e55a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e55e:	0f b6 c0             	movzx  eax,al
c001e561:	c1 e0 10             	shl    eax,0x10
c001e564:	09 c1                	or     ecx,eax
c001e566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e56a:	8d 50 03             	lea    edx,[eax+0x3]
c001e56d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e571:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e575:	0f b6 c0             	movzx  eax,al
c001e578:	c1 e0 18             	shl    eax,0x18
c001e57b:	09 c8                	or     eax,ecx
c001e57d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e581:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e586:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e58a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e58e:	01 d0                	add    eax,edx
c001e590:	83 c0 2c             	add    eax,0x2c
c001e593:	8a 00                	mov    al,BYTE PTR [eax]
c001e595:	0f b6 c0             	movzx  eax,al
c001e598:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e59c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e59f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5a3:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e5a7:	0f b6 d2             	movzx  edx,dl
c001e5aa:	c1 e2 08             	shl    edx,0x8
c001e5ad:	09 d0                	or     eax,edx
c001e5af:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e5b4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e5b9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e5be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e5c2:	88 90 e8 3e 03 c0    	mov    BYTE PTR [eax-0x3ffcc118],dl
c001e5c8:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e5cd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e5d2:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e5da:	e9 b9 00 00 00       	jmp    c001e698 <scanMADT()+0x494>
c001e5df:	90                   	nop
c001e5e0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e5e5:	83 f8 04             	cmp    eax,0x4
c001e5e8:	0f 85 9a 00 00 00    	jne    c001e688 <scanMADT()+0x484>
c001e5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5f2:	8d 50 01             	lea    edx,[eax+0x1]
c001e5f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e5f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e5fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e601:	0f b6 c0             	movzx  eax,al
c001e604:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e608:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e60c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e610:	01 d0                	add    eax,edx
c001e612:	83 c0 2c             	add    eax,0x2c
c001e615:	8a 00                	mov    al,BYTE PTR [eax]
c001e617:	0f b6 d0             	movzx  edx,al
c001e61a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e61e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e621:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e625:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e629:	0f b6 c0             	movzx  eax,al
c001e62c:	c1 e0 08             	shl    eax,0x8
c001e62f:	09 d0                	or     eax,edx
c001e631:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e635:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e63a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e63e:	8d 50 01             	lea    edx,[eax+0x1]
c001e641:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e645:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e649:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e64d:	0f b6 c0             	movzx  eax,al
c001e650:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e658:	c1 e0 08             	shl    eax,0x8
c001e65b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e65f:	89 c1                	mov    ecx,eax
c001e661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e665:	c1 e0 18             	shl    eax,0x18
c001e668:	89 c3                	mov    ebx,eax
c001e66a:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e66f:	8d 50 01             	lea    edx,[eax+0x1]
c001e672:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e678:	09 d9                	or     ecx,ebx
c001e67a:	89 ca                	mov    edx,ecx
c001e67c:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e683:	eb 13                	jmp    c001e698 <scanMADT()+0x494>
c001e685:	8d 76 00             	lea    esi,[esi+0x0]
c001e688:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e68d:	83 f8 05             	cmp    eax,0x5
c001e690:	75 06                	jne    c001e698 <scanMADT()+0x494>
c001e692:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e697:	90                   	nop
c001e698:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e69d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e6a1:	01 d0                	add    eax,edx
c001e6a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e6a7:	e9 50 fc ff ff       	jmp    c001e2fc <scanMADT()+0xf8>
c001e6ac:	90                   	nop
c001e6ad:	eb 05                	jmp    c001e6b4 <scanMADT()+0x4b0>
c001e6af:	90                   	nop
c001e6b0:	90                   	nop
c001e6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6b4:	83 c4 38             	add    esp,0x38
c001e6b7:	5b                   	pop    ebx
c001e6b8:	c3                   	ret    
c001e6b9:	90                   	nop
c001e6ba:	66 90                	xchg   ax,ax

c001e6bc <ACPI::ACPI()>:
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c3:	83 ec 08             	sub    esp,0x8
c001e6c6:	68 d3 26 03 c0       	push   0xc00326d3
c001e6cb:	50                   	push   eax
c001e6cc:	e8 53 cf ff ff       	call   c001b624 <Device::Device(char const*)>
c001e6d1:	83 c4 10             	add    esp,0x10
c001e6d4:	ba e0 28 03 c0       	mov    edx,0xc00328e0
c001e6d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6dd:	89 10                	mov    DWORD PTR [eax],edx
c001e6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ee:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6fc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e706:	e8 f9 fa ff ff       	call   c001e204 <scanMADT()>
c001e70b:	90                   	nop
c001e70c:	83 c4 0c             	add    esp,0xc
c001e70f:	c3                   	ret    

c001e710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e710:	83 ec 2c             	sub    esp,0x2c
c001e713:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e717:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e71b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e71f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e723:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e728:	88 d0                	mov    al,dl
c001e72a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e72e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e733:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e73b:	90                   	nop
c001e73c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e740:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e746:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e74a:	0f 8d b0 00 00 00    	jge    c001e800 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e750:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e754:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e758:	83 c2 2a             	add    edx,0x2a
c001e75b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e75f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e764:	0f b7 c0             	movzx  eax,ax
c001e767:	39 c2                	cmp    edx,eax
c001e769:	0f 85 85 00 00 00    	jne    c001e7f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e76f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e773:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e777:	83 c2 2a             	add    edx,0x2a
c001e77a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e77e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e783:	0f b6 c0             	movzx  eax,al
c001e786:	39 c2                	cmp    edx,eax
c001e788:	75 6a                	jne    c001e7f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e78a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e78f:	85 c0                	test   eax,eax
c001e791:	74 3d                	je     c001e7d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e797:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e79b:	83 c2 2a             	add    edx,0x2a
c001e79e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e7a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7a9:	39 c2                	cmp    edx,eax
c001e7ab:	74 13                	je     c001e7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e7ad:	83 ec 0c             	sub    esp,0xc
c001e7b0:	68 60 28 03 c0       	push   0xc0032860
c001e7b5:	e8 a0 1c 00 00       	call   c002045a <KePanic(char const*)>
c001e7ba:	83 c4 10             	add    esp,0x10
c001e7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001e7c0:	83 ec 0c             	sub    esp,0xc
c001e7c3:	68 d8 26 03 c0       	push   0xc00326d8
c001e7c8:	e8 8d 1c 00 00       	call   c002045a <KePanic(char const*)>
c001e7cd:	83 c4 10             	add    esp,0x10
c001e7d0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e7d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e7d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7dc:	83 c2 2a             	add    edx,0x2a
c001e7df:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e7e3:	8b 02                	mov    eax,DWORD PTR [edx]
c001e7e5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e7e8:	89 01                	mov    DWORD PTR [ecx],eax
c001e7ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e7ed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7f2:	66 90                	xchg   ax,ax
c001e7f4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e7f9:	e9 3e ff ff ff       	jmp    c001e73c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e7fe:	66 90                	xchg   ax,ax
c001e800:	90                   	nop
c001e801:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e805:	83 c4 2c             	add    esp,0x2c
c001e808:	c2 04 00             	ret    0x4
c001e80b:	90                   	nop

c001e80c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e80c:	83 ec 1c             	sub    esp,0x1c
c001e80f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e813:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e817:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e81b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e820:	88 c8                	mov    al,cl
c001e822:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e826:	88 d0                	mov    al,dl
c001e828:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e82c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e830:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e83a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e83d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e841:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e849:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e84f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e853:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e85a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e85f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e863:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e869:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e86d:	83 c0 01             	add    eax,0x1
c001e870:	88 c1                	mov    cl,al
c001e872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e876:	83 c2 2a             	add    edx,0x2a
c001e879:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e87d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e881:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e88b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e88e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e892:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e89a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e8a0:	8d 50 01             	lea    edx,[eax+0x1]
c001e8a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8a7:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e8ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8b1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e8b7:	3d 00 02 00 00       	cmp    eax,0x200
c001e8bc:	75 12                	jne    c001e8d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e8be:	83 ec 0c             	sub    esp,0xc
c001e8c1:	68 e7 26 03 c0       	push   0xc00326e7
c001e8c6:	e8 8f 1b 00 00       	call   c002045a <KePanic(char const*)>
c001e8cb:	83 c4 10             	add    esp,0x10
c001e8ce:	66 90                	xchg   ax,ax
c001e8d0:	90                   	nop
c001e8d1:	83 c4 1c             	add    esp,0x1c
c001e8d4:	c3                   	ret    
c001e8d5:	90                   	nop
c001e8d6:	66 90                	xchg   ax,ax

c001e8d8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e8d8:	b8 00 00 00 00       	mov    eax,0x0
c001e8dd:	c3                   	ret    
c001e8de:	66 90                	xchg   ax,ax

c001e8e0 <ACPI::detectPCI()>:
c001e8e0:	53                   	push   ebx
c001e8e1:	83 ec 28             	sub    esp,0x28
c001e8e4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e8e9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e8ee:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e8f3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e8f9:	83 e0 04             	and    eax,0x4
c001e8fc:	0f b6 c0             	movzx  eax,al
c001e8ff:	85 c0                	test   eax,eax
c001e901:	74 2d                	je     c001e930 <ACPI::detectPCI()+0x50>
c001e903:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e908:	83 ec 08             	sub    esp,0x8
c001e90b:	68 04 27 03 c0       	push   0xc0032704
c001e910:	50                   	push   eax
c001e911:	e8 6e f8 ff ff       	call   c001e184 <findDataTable(unsigned char*, char*)>
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e91d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e922:	74 0c                	je     c001e930 <ACPI::detectPCI()+0x50>
c001e924:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e929:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e92e:	66 90                	xchg   ax,ax
c001e930:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e938:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e93c:	8a 00                	mov    al,BYTE PTR [eax]
c001e93e:	0f b6 c0             	movzx  eax,al
c001e941:	83 f8 01             	cmp    eax,0x1
c001e944:	75 0e                	jne    c001e954 <ACPI::detectPCI()+0x74>
c001e946:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e94b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e950:	eb 2e                	jmp    c001e980 <ACPI::detectPCI()+0xa0>
c001e952:	66 90                	xchg   ax,ax
c001e954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e958:	8a 00                	mov    al,BYTE PTR [eax]
c001e95a:	0f b6 c0             	movzx  eax,al
c001e95d:	83 f8 02             	cmp    eax,0x2
c001e960:	75 1e                	jne    c001e980 <ACPI::detectPCI()+0xa0>
c001e962:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e967:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e96c:	85 c0                	test   eax,eax
c001e96e:	74 10                	je     c001e980 <ACPI::detectPCI()+0xa0>
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	68 90 28 03 c0       	push   0xc0032890
c001e978:	e8 dd 1a 00 00       	call   c002045a <KePanic(char const*)>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e984:	83 f0 01             	xor    eax,0x1
c001e987:	0f b6 c0             	movzx  eax,al
c001e98a:	85 c0                	test   eax,eax
c001e98c:	74 46                	je     c001e9d4 <ACPI::detectPCI()+0xf4>
c001e98e:	e8 9d 17 fe ff       	call   c0000130 <manualPCIProbe>
c001e993:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e997:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e99c:	75 0e                	jne    c001e9ac <ACPI::detectPCI()+0xcc>
c001e99e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9a3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e9a8:	eb 2a                	jmp    c001e9d4 <ACPI::detectPCI()+0xf4>
c001e9aa:	66 90                	xchg   ax,ax
c001e9ac:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e9b1:	75 21                	jne    c001e9d4 <ACPI::detectPCI()+0xf4>
c001e9b3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e9b8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	74 13                	je     c001e9d4 <ACPI::detectPCI()+0xf4>
c001e9c1:	83 ec 0c             	sub    esp,0xc
c001e9c4:	68 90 28 03 c0       	push   0xc0032890
c001e9c9:	e8 8c 1a 00 00       	call   c002045a <KePanic(char const*)>
c001e9ce:	83 c4 10             	add    esp,0x10
c001e9d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e9d4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e9d9:	85 c0                	test   eax,eax
c001e9db:	0f 84 87 00 00 00    	je     c001ea68 <ACPI::detectPCI()+0x188>
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	68 09 27 03 c0       	push   0xc0032709
c001e9e9:	e8 09 13 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e9f9:	83 ec 0c             	sub    esp,0xc
c001e9fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ea00:	e8 ac 7b ff ff       	call   c00165b1 <malloc>
c001ea05:	83 c4 10             	add    esp,0x10
c001ea08:	89 c3                	mov    ebx,eax
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	53                   	push   ebx
c001ea0e:	e8 89 b8 00 00       	call   c002a29c <PCI::PCI()>
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001ea1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ea1e:	83 ec 08             	sub    esp,0x8
c001ea21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ea25:	50                   	push   eax
c001ea26:	e8 97 ca ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea32:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea34:	83 c0 08             	add    eax,0x8
c001ea37:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea39:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001ea3e:	85 d2                	test   edx,edx
c001ea40:	74 0a                	je     c001ea4c <ACPI::detectPCI()+0x16c>
c001ea42:	ba 01 00 00 00       	mov    edx,0x1
c001ea47:	eb 0b                	jmp    c001ea54 <ACPI::detectPCI()+0x174>
c001ea49:	8d 76 00             	lea    esi,[esi+0x0]
c001ea4c:	ba 02 00 00 00       	mov    edx,0x2
c001ea51:	8d 76 00             	lea    esi,[esi+0x0]
c001ea54:	6a 00                	push   0x0
c001ea56:	6a 00                	push   0x0
c001ea58:	52                   	push   edx
c001ea59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ea5d:	ff d0                	call   eax
c001ea5f:	83 c4 10             	add    esp,0x10
c001ea62:	e9 91 00 00 00       	jmp    c001eaf8 <ACPI::detectPCI()+0x218>
c001ea67:	90                   	nop
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	68 21 27 03 c0       	push   0xc0032721
c001ea70:	e8 82 12 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001ea75:	83 c4 10             	add    esp,0x10
c001ea78:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001ea7f:	83 ec 0c             	sub    esp,0xc
c001ea82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ea86:	e8 26 7b ff ff       	call   c00165b1 <malloc>
c001ea8b:	83 c4 10             	add    esp,0x10
c001ea8e:	89 c3                	mov    ebx,eax
c001ea90:	83 ec 0c             	sub    esp,0xc
c001ea93:	53                   	push   ebx
c001ea94:	e8 9d c3 00 00       	call   c002ae36 <IDE::IDE()>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001eaa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001eaa4:	83 ec 08             	sub    esp,0x8
c001eaa7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001eaab:	50                   	push   eax
c001eaac:	e8 11 ca ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eab8:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001eac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eac6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001eacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ead3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001eadc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eae0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae2:	83 c0 08             	add    eax,0x8
c001eae5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae7:	6a 00                	push   0x0
c001eae9:	6a 00                	push   0x0
c001eaeb:	6a 00                	push   0x0
c001eaed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eaf1:	ff d0                	call   eax
c001eaf3:	83 c4 10             	add    esp,0x10
c001eaf6:	66 90                	xchg   ax,ax
c001eaf8:	90                   	nop
c001eaf9:	83 c4 28             	add    esp,0x28
c001eafc:	5b                   	pop    ebx
c001eafd:	c3                   	ret    
c001eafe:	66 90                	xchg   ax,ax

c001eb00 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001eb00:	83 ec 1c             	sub    esp,0x1c
c001eb03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001eb07:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001eb0a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eb0e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eb13:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001eb18:	83 ec 08             	sub    esp,0x8
c001eb1b:	52                   	push   edx
c001eb1c:	50                   	push   eax
c001eb1d:	e8 f6 70 ff ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c001eb22:	83 c4 10             	add    esp,0x10
c001eb25:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001eb29:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eb2e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001eb33:	83 ec 04             	sub    esp,0x4
c001eb36:	6a 01                	push   0x1
c001eb38:	52                   	push   edx
c001eb39:	50                   	push   eax
c001eb3a:	e8 f3 71 ff ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c001eb3f:	83 c4 10             	add    esp,0x10
c001eb42:	90                   	nop
c001eb43:	83 c4 1c             	add    esp,0x1c
c001eb46:	c3                   	ret    
c001eb47:	90                   	nop

c001eb48 <ACPI::sleep()>:
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001eb50:	85 c0                	test   eax,eax
c001eb52:	74 08                	je     c001eb5c <ACPI::sleep()+0x14>
c001eb54:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001eb59:	ff d0                	call   eax
c001eb5b:	90                   	nop
c001eb5c:	90                   	nop
c001eb5d:	83 c4 0c             	add    esp,0xc
c001eb60:	c3                   	ret    
c001eb61:	90                   	nop
c001eb62:	66 90                	xchg   ax,ax

c001eb64 <ACPI::open(int, int, void*)>:
c001eb64:	57                   	push   edi
c001eb65:	56                   	push   esi
c001eb66:	53                   	push   ebx
c001eb67:	81 ec 70 01 00 00    	sub    esp,0x170
c001eb6d:	83 ec 0c             	sub    esp,0xc
c001eb70:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001eb77:	e8 64 fd ff ff       	call   c001e8e0 <ACPI::detectPCI()>
c001eb7c:	83 c4 10             	add    esp,0x10
c001eb7f:	83 ec 0c             	sub    esp,0xc
c001eb82:	68 b8 28 03 c0       	push   0xc00328b8
c001eb87:	e8 6b 11 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001eb8c:	83 c4 10             	add    esp,0x10
c001eb8f:	b8 4c 05 00 00       	mov    eax,0x54c
c001eb94:	8a 00                	mov    al,BYTE PTR [eax]
c001eb96:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001eb9d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001eba5:	83 f8 01             	cmp    eax,0x1
c001eba8:	75 12                	jne    c001ebbc <ACPI::open(int, int, void*)+0x58>
c001ebaa:	83 ec 0c             	sub    esp,0xc
c001ebad:	68 36 27 03 c0       	push   0xc0032736
c001ebb2:	e8 bc 53 00 00       	call   c0023f73 <Thr::loadKernelSymbolTable(char const*)>
c001ebb7:	83 c4 10             	add    esp,0x10
c001ebba:	eb 34                	jmp    c001ebf0 <ACPI::open(int, int, void*)+0x8c>
c001ebbc:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001ebc4:	3d bb 00 00 00       	cmp    eax,0xbb
c001ebc9:	75 15                	jne    c001ebe0 <ACPI::open(int, int, void*)+0x7c>
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	68 54 27 03 c0       	push   0xc0032754
c001ebd3:	e8 9b 53 00 00       	call   c0023f73 <Thr::loadKernelSymbolTable(char const*)>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	eb 13                	jmp    c001ebf0 <ACPI::open(int, int, void*)+0x8c>
c001ebdd:	8d 76 00             	lea    esi,[esi+0x0]
c001ebe0:	83 ec 0c             	sub    esp,0xc
c001ebe3:	68 72 27 03 c0       	push   0xc0032772
c001ebe8:	e8 6d 18 00 00       	call   c002045a <KePanic(char const*)>
c001ebed:	83 c4 10             	add    esp,0x10
c001ebf0:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001ebf8:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ec0d:	e8 9f 79 ff ff       	call   c00165b1 <malloc>
c001ec12:	83 c4 10             	add    esp,0x10
c001ec15:	89 c3                	mov    ebx,eax
c001ec17:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec1c:	83 ec 04             	sub    esp,0x4
c001ec1f:	50                   	push   eax
c001ec20:	68 8c 27 03 c0       	push   0xc003278c
c001ec25:	53                   	push   ebx
c001ec26:	e8 1d ba ff ff       	call   c001a648 <File::File(char const*, Process*)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001ec35:	83 ec 08             	sub    esp,0x8
c001ec38:	6a 01                	push   0x1
c001ec3a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ec41:	e8 20 ba ff ff       	call   c001a666 <File::open(FileOpenMode)>
c001ec46:	83 c4 10             	add    esp,0x10
c001ec49:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001ec50:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001ec58:	75 16                	jne    c001ec70 <ACPI::open(int, int, void*)+0x10c>
c001ec5a:	83 ec 0c             	sub    esp,0xc
c001ec5d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ec64:	e8 5b ba ff ff       	call   c001a6c4 <File::close()>
c001ec69:	83 c4 10             	add    esp,0x10
c001ec6c:	eb 0a                	jmp    c001ec78 <ACPI::open(int, int, void*)+0x114>
c001ec6e:	66 90                	xchg   ax,ax
c001ec70:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001ec78:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001ec80:	74 1e                	je     c001eca0 <ACPI::open(int, int, void*)+0x13c>
c001ec82:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001ec89:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec8b:	83 c0 08             	add    eax,0x8
c001ec8e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec90:	83 ec 0c             	sub    esp,0xc
c001ec93:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001ec9a:	ff d0                	call   eax
c001ec9c:	83 c4 10             	add    esp,0x10
c001ec9f:	90                   	nop
c001eca0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001eca7:	83 f0 01             	xor    eax,0x1
c001ecaa:	0f b6 c0             	movzx  eax,al
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	74 43                	je     c001ecf4 <ACPI::open(int, int, void*)+0x190>
c001ecb1:	83 ec 0c             	sub    esp,0xc
c001ecb4:	68 aa 27 03 c0       	push   0xc00327aa
c001ecb9:	e8 39 10 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001ecbe:	83 c4 10             	add    esp,0x10
c001ecc1:	83 ec 04             	sub    esp,0x4
c001ecc4:	6a 0c                	push   0xc
c001ecc6:	68 c5 27 03 c0       	push   0xc00327c5
c001eccb:	68 d6 27 03 c0       	push   0xc00327d6
c001ecd0:	e8 da 44 00 00       	call   c00231af <Reg::readIntWithDefault(char*, char*, int)>
c001ecd5:	83 c4 10             	add    esp,0x10
c001ecd8:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ece9:	e8 4a 96 ff ff       	call   c0018338 <Virt::setupPageSwapping(int)>
c001ecee:	83 c4 10             	add    esp,0x10
c001ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	68 a4 11 03 c0       	push   0xc00311a4
c001ecfc:	e8 f6 0f 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ed0b:	83 ec 08             	sub    esp,0x8
c001ed0e:	6a 13                	push   0x13
c001ed10:	50                   	push   eax
c001ed11:	e8 da ca ff ff       	call   c001b7f0 <getDevicesOfType(DeviceType)>
c001ed16:	83 c4 0c             	add    esp,0xc
c001ed19:	8d 76 00             	lea    esi,[esi+0x0]
c001ed1c:	83 ec 0c             	sub    esp,0xc
c001ed1f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ed26:	50                   	push   eax
c001ed27:	e8 24 03 01 00       	call   c002f050 <LinkedList<Device>::isEmpty()>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	83 f0 01             	xor    eax,0x1
c001ed32:	0f b6 c0             	movzx  eax,al
c001ed35:	85 c0                	test   eax,eax
c001ed37:	0f 84 47 01 00 00    	je     c001ee84 <ACPI::open(int, int, void*)+0x320>
c001ed3d:	83 ec 0c             	sub    esp,0xc
c001ed40:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ed47:	50                   	push   eax
c001ed48:	e8 1f 03 01 00       	call   c002f06c <LinkedList<Device>::getFirstElement()>
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001ed57:	83 ec 0c             	sub    esp,0xc
c001ed5a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ed61:	50                   	push   eax
c001ed62:	e8 0d 03 01 00       	call   c002f074 <LinkedList<Device>::removeFirst()>
c001ed67:	83 c4 10             	add    esp,0x10
c001ed6a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001ed71:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001ed78:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001ed7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed83:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001ed89:	ba 09 00 00 00       	mov    edx,0x9
c001ed8e:	fc                   	cld    
c001ed8f:	89 c7                	mov    edi,eax
c001ed91:	89 de                	mov    esi,ebx
c001ed93:	89 d1                	mov    ecx,edx
c001ed95:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ed97:	83 ec 08             	sub    esp,0x8
c001ed9a:	8d 44 24 38          	lea    eax,[esp+0x38]
c001ed9e:	50                   	push   eax
c001ed9f:	83 ec 24             	sub    esp,0x24
c001eda2:	89 e0                	mov    eax,esp
c001eda4:	89 c3                	mov    ebx,eax
c001eda6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001edaa:	ba 09 00 00 00       	mov    edx,0x9
c001edaf:	89 df                	mov    edi,ebx
c001edb1:	89 c6                	mov    esi,eax
c001edb3:	89 d1                	mov    ecx,edx
c001edb5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001edb7:	e8 ca b9 00 00       	call   c002a786 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001edbc:	83 c4 30             	add    esp,0x30
c001edbf:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001edc6:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001edce:	0f 84 48 ff ff ff    	je     c001ed1c <ACPI::open(int, int, void*)+0x1b8>
c001edd4:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001eddf:	83 ec 0c             	sub    esp,0xc
c001ede2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ede9:	e8 c3 77 ff ff       	call   c00165b1 <malloc>
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	89 c3                	mov    ebx,eax
c001edf3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001edf8:	83 ec 04             	sub    esp,0x4
c001edfb:	50                   	push   eax
c001edfc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ee03:	53                   	push   ebx
c001ee04:	e8 3f b8 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001ee13:	83 ec 0c             	sub    esp,0xc
c001ee16:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ee1d:	e8 08 bb ff ff       	call   c001a92a <File::exists()>
c001ee22:	83 c4 10             	add    esp,0x10
c001ee25:	0f b6 c0             	movzx  eax,al
c001ee28:	85 c0                	test   eax,eax
c001ee2a:	74 28                	je     c001ee54 <ACPI::open(int, int, void*)+0x2f0>
c001ee2c:	83 ec 08             	sub    esp,0x8
c001ee2f:	6a 01                	push   0x1
c001ee31:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ee38:	e8 b0 5b 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001ee3d:	83 c4 10             	add    esp,0x10
c001ee40:	83 ec 08             	sub    esp,0x8
c001ee43:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001ee4a:	50                   	push   eax
c001ee4b:	e8 ef 5d 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001ee50:	83 c4 10             	add    esp,0x10
c001ee53:	90                   	nop
c001ee54:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001ee5c:	0f 84 ba fe ff ff    	je     c001ed1c <ACPI::open(int, int, void*)+0x1b8>
c001ee62:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ee69:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee6b:	83 c0 08             	add    eax,0x8
c001ee6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ee7a:	ff d0                	call   eax
c001ee7c:	83 c4 10             	add    esp,0x10
c001ee7f:	e9 98 fe ff ff       	jmp    c001ed1c <ACPI::open(int, int, void*)+0x1b8>
c001ee84:	83 ec 0c             	sub    esp,0xc
c001ee87:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ee8e:	50                   	push   eax
c001ee8f:	e8 b8 01 01 00       	call   c002f04c <LinkedList<Device>::~LinkedList()>
c001ee94:	83 c4 10             	add    esp,0x10
c001ee97:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ee9d:	83 ec 08             	sub    esp,0x8
c001eea0:	6a 01                	push   0x1
c001eea2:	68 dd 27 03 c0       	push   0xc00327dd
c001eea7:	e8 41 5b 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001eeac:	83 c4 10             	add    esp,0x10
c001eeaf:	83 ec 08             	sub    esp,0x8
c001eeb2:	53                   	push   ebx
c001eeb3:	50                   	push   eax
c001eeb4:	e8 86 5d 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001eeb9:	83 c4 10             	add    esp,0x10
c001eebc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eec1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001eec7:	83 e0 04             	and    eax,0x4
c001eeca:	0f b6 c0             	movzx  eax,al
c001eecd:	85 c0                	test   eax,eax
c001eecf:	0f 84 1b 01 00 00    	je     c001eff0 <ACPI::open(int, int, void*)+0x48c>
c001eed5:	83 ec 0c             	sub    esp,0xc
c001eed8:	68 fa 27 03 c0       	push   0xc00327fa
c001eedd:	e8 15 0e 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001eee2:	83 c4 10             	add    esp,0x10
c001eee5:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001eef0:	83 ec 0c             	sub    esp,0xc
c001eef3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001eefa:	e8 b2 76 ff ff       	call   c00165b1 <malloc>
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	89 c3                	mov    ebx,eax
c001ef04:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ef09:	83 ec 04             	sub    esp,0x4
c001ef0c:	50                   	push   eax
c001ef0d:	68 17 28 03 c0       	push   0xc0032817
c001ef12:	53                   	push   ebx
c001ef13:	e8 30 b7 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c001ef18:	83 c4 10             	add    esp,0x10
c001ef1b:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ef22:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ef2a:	74 20                	je     c001ef4c <ACPI::open(int, int, void*)+0x3e8>
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ef36:	e8 ef b9 ff ff       	call   c001a92a <File::exists()>
c001ef3b:	83 c4 10             	add    esp,0x10
c001ef3e:	0f b6 c0             	movzx  eax,al
c001ef41:	85 c0                	test   eax,eax
c001ef43:	74 07                	je     c001ef4c <ACPI::open(int, int, void*)+0x3e8>
c001ef45:	b0 01                	mov    al,0x1
c001ef47:	eb 07                	jmp    c001ef50 <ACPI::open(int, int, void*)+0x3ec>
c001ef49:	8d 76 00             	lea    esi,[esi+0x0]
c001ef4c:	b0 00                	mov    al,0x0
c001ef4e:	66 90                	xchg   ax,ax
c001ef50:	0f b6 c0             	movzx  eax,al
c001ef53:	85 c0                	test   eax,eax
c001ef55:	74 25                	je     c001ef7c <ACPI::open(int, int, void*)+0x418>
c001ef57:	83 ec 08             	sub    esp,0x8
c001ef5a:	6a 01                	push   0x1
c001ef5c:	68 17 28 03 c0       	push   0xc0032817
c001ef61:	e8 87 5a 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c001ef66:	83 c4 10             	add    esp,0x10
c001ef69:	83 ec 08             	sub    esp,0x8
c001ef6c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001ef73:	50                   	push   eax
c001ef74:	e8 c6 5c 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c001ef79:	83 c4 10             	add    esp,0x10
c001ef7c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ef84:	74 2a                	je     c001efb0 <ACPI::open(int, int, void*)+0x44c>
c001ef86:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ef8e:	74 20                	je     c001efb0 <ACPI::open(int, int, void*)+0x44c>
c001ef90:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001ef97:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef99:	83 c0 08             	add    eax,0x8
c001ef9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef9e:	83 ec 0c             	sub    esp,0xc
c001efa1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001efa8:	ff d0                	call   eax
c001efaa:	83 c4 10             	add    esp,0x10
c001efad:	8d 76 00             	lea    esi,[esi+0x0]
c001efb0:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001efb5:	83 ec 08             	sub    esp,0x8
c001efb8:	68 34 28 03 c0       	push   0xc0032834
c001efbd:	50                   	push   eax
c001efbe:	e8 c1 f1 ff ff       	call   c001e184 <findDataTable(unsigned char*, char*)>
c001efc3:	83 c4 10             	add    esp,0x10
c001efc6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001efcd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001efd5:	74 19                	je     c001eff0 <ACPI::open(int, int, void*)+0x48c>
c001efd7:	83 ec 08             	sub    esp,0x8
c001efda:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001efe1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001efe8:	e8 13 fb ff ff       	call   c001eb00 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001efed:	83 c4 10             	add    esp,0x10
c001eff0:	b8 00 00 00 00       	mov    eax,0x0
c001eff5:	81 c4 70 01 00 00    	add    esp,0x170
c001effb:	5b                   	pop    ebx
c001effc:	5e                   	pop    esi
c001effd:	5f                   	pop    edi
c001effe:	c3                   	ret    
c001efff:	90                   	nop

c001f000 <CPU::close(int, int, void*)>:
c001f000:	31 c0                	xor    eax,eax
c001f002:	c3                   	ret    
c001f003:	90                   	nop

c001f004 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001f004:	60                   	pusha  
c001f005:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f009:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f00d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f011:	9c                   	pushf  
c001f012:	fa                   	cli    
c001f013:	0f 09                	wbinvd 
c001f015:	0f 30                	wrmsr  
c001f017:	9d                   	popf   
c001f018:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f01c:	89 02                	mov    DWORD PTR [edx],eax
c001f01e:	61                   	popa   
c001f01f:	c3                   	ret    

c001f020 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001f020:	60                   	pusha  
c001f021:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f025:	9c                   	pushf  
c001f026:	fa                   	cli    
c001f027:	0f 09                	wbinvd 
c001f029:	31 c0                	xor    eax,eax
c001f02b:	31 d2                	xor    edx,edx
c001f02d:	0f 32                	rdmsr  
c001f02f:	9d                   	popf   
c001f030:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f034:	89 02                	mov    DWORD PTR [edx],eax
c001f036:	61                   	popa   
c001f037:	c3                   	ret    

c001f038 <CPU::AMD_K6_writeback(int, int, int)>:
c001f038:	56                   	push   esi
c001f039:	53                   	push   ebx
c001f03a:	83 ec 10             	sub    esp,0x10
c001f03d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f041:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001f046:	75 5d                	jne    c001f0a5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f048:	83 f8 08             	cmp    eax,0x8
c001f04b:	75 09                	jne    c001f056 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001f04d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001f052:	7e 13                	jle    c001f067 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f054:	eb 30                	jmp    c001f086 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f056:	83 f8 06             	cmp    eax,0x6
c001f059:	7c 4a                	jl     c001f0a5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f05b:	83 f8 07             	cmp    eax,0x7
c001f05e:	7e 07                	jle    c001f067 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001f060:	83 f8 09             	cmp    eax,0x9
c001f063:	74 21                	je     c001f086 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001f065:	eb 3e                	jmp    c001f0a5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001f067:	89 e6                	mov    esi,esp
c001f069:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001f06f:	56                   	push   esi
c001f070:	c1 eb 15             	shr    ebx,0x15
c001f073:	68 82 00 00 c0       	push   0xc0000082
c001f078:	83 e3 7e             	and    ebx,0x7e
c001f07b:	e8 a0 ff ff ff       	call   c001f020 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f080:	56                   	push   esi
c001f081:	6a 00                	push   0x0
c001f083:	53                   	push   ebx
c001f084:	eb 12                	jmp    c001f098 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001f086:	89 e3                	mov    ebx,esp
c001f088:	53                   	push   ebx
c001f089:	68 82 00 00 c0       	push   0xc0000082
c001f08e:	e8 8d ff ff ff       	call   c001f020 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001f093:	53                   	push   ebx
c001f094:	6a 00                	push   0x0
c001f096:	6a 00                	push   0x0
c001f098:	68 82 00 00 c0       	push   0xc0000082
c001f09d:	e8 62 ff ff ff       	call   c001f004 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001f0a2:	83 c4 18             	add    esp,0x18
c001f0a5:	83 c4 10             	add    esp,0x10
c001f0a8:	5b                   	pop    ebx
c001f0a9:	5e                   	pop    esi
c001f0aa:	c3                   	ret    
c001f0ab:	90                   	nop

c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001f0ac:	55                   	push   ebp
c001f0ad:	57                   	push   edi
c001f0ae:	56                   	push   esi
c001f0af:	53                   	push   ebx
c001f0b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f0b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f0bc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001f0c0:	39 05 f8 3e 03 c0    	cmp    DWORD PTR ds:0xc0033ef8,eax
c001f0c6:	75 23                	jne    c001f0eb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001f0c8:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001f0cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f0d1:	89 06                	mov    DWORD PTR [esi],eax
c001f0d3:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001f0d8:	89 07                	mov    DWORD PTR [edi],eax
c001f0da:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001f0df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001f0e2:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001f0e7:	89 02                	mov    DWORD PTR [edx],eax
c001f0e9:	eb 3f                	jmp    c001f12a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001f0eb:	31 c9                	xor    ecx,ecx
c001f0ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0f1:	0f a2                	cpuid  
c001f0f3:	89 06                	mov    DWORD PTR [esi],eax
c001f0f5:	89 1f                	mov    DWORD PTR [edi],ebx
c001f0f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f0fb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001f0fe:	89 10                	mov    DWORD PTR [eax],edx
c001f100:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f104:	a3 f8 3e 03 c0       	mov    ds:0xc0033ef8,eax
c001f109:	8b 06                	mov    eax,DWORD PTR [esi]
c001f10b:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001f110:	8b 07                	mov    eax,DWORD PTR [edi]
c001f112:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001f117:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f11a:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001f11f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f123:	8b 00                	mov    eax,DWORD PTR [eax]
c001f125:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001f12a:	5b                   	pop    ebx
c001f12b:	5e                   	pop    esi
c001f12c:	5f                   	pop    edi
c001f12d:	5d                   	pop    ebp
c001f12e:	c3                   	ret    
c001f12f:	90                   	nop

c001f130 <CPU::cpuidCheckEDX(unsigned int)>:
c001f130:	83 ec 10             	sub    esp,0x10
c001f133:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f137:	50                   	push   eax
c001f138:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f13c:	50                   	push   eax
c001f13d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f141:	50                   	push   eax
c001f142:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f146:	50                   	push   eax
c001f147:	6a 01                	push   0x1
c001f149:	e8 5e ff ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f14e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f152:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001f156:	0f 95 c0             	setne  al
c001f159:	83 c4 24             	add    esp,0x24
c001f15c:	c3                   	ret    
c001f15d:	90                   	nop

c001f15e <CPU::cpuidCheckECX(unsigned int)>:
c001f15e:	83 ec 10             	sub    esp,0x10
c001f161:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f165:	50                   	push   eax
c001f166:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f16a:	50                   	push   eax
c001f16b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f16f:	50                   	push   eax
c001f170:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f174:	50                   	push   eax
c001f175:	6a 01                	push   0x1
c001f177:	e8 30 ff ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f17c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f180:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f184:	0f 95 c0             	setne  al
c001f187:	83 c4 24             	add    esp,0x24
c001f18a:	c3                   	ret    
c001f18b:	90                   	nop

c001f18c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001f18c:	83 ec 10             	sub    esp,0x10
c001f18f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f193:	50                   	push   eax
c001f194:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f198:	50                   	push   eax
c001f199:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f19d:	50                   	push   eax
c001f19e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1a2:	50                   	push   eax
c001f1a3:	6a 07                	push   0x7
c001f1a5:	e8 02 ff ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1ae:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001f1b2:	0f 95 c0             	setne  al
c001f1b5:	83 c4 24             	add    esp,0x24
c001f1b8:	c3                   	ret    
c001f1b9:	90                   	nop

c001f1ba <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001f1ba:	83 ec 10             	sub    esp,0x10
c001f1bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1c1:	50                   	push   eax
c001f1c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1c6:	50                   	push   eax
c001f1c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1cb:	50                   	push   eax
c001f1cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001f1d0:	50                   	push   eax
c001f1d1:	6a 07                	push   0x7
c001f1d3:	e8 d4 fe ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f1dc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001f1e0:	0f 95 c0             	setne  al
c001f1e3:	83 c4 24             	add    esp,0x24
c001f1e6:	c3                   	ret    
c001f1e7:	90                   	nop

c001f1e8 <CPU::CPU()>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ef:	83 ec 08             	sub    esp,0x8
c001f1f2:	68 f5 29 03 c0       	push   0xc00329f5
c001f1f7:	50                   	push   eax
c001f1f8:	e8 27 c4 ff ff       	call   c001b624 <Device::Device(char const*)>
c001f1fd:	83 c4 10             	add    esp,0x10
c001f200:	ba 88 2a 03 c0       	mov    edx,0xc0032a88
c001f205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f209:	89 10                	mov    DWORD PTR [eax],edx
c001f20b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f21d:	05 78 01 00 00       	add    eax,0x178
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	50                   	push   eax
c001f226:	e8 d1 6b ff ff       	call   c0015dfc <GDT::GDT()>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f232:	05 7c 09 00 00       	add    eax,0x97c
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	50                   	push   eax
c001f23b:	e8 0c 6e ff ff       	call   c001604c <IDT::IDT()>
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f247:	05 7c 11 00 00       	add    eax,0x117c
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	50                   	push   eax
c001f250:	e8 eb 87 ff ff       	call   c0017a40 <TSS::TSS()>
c001f255:	83 c4 10             	add    esp,0x10
c001f258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f267:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f271:	90                   	nop
c001f272:	83 c4 0c             	add    esp,0xc
c001f275:	c3                   	ret    

c001f276 <CPU::displayFeatures()>:
c001f276:	c3                   	ret    
c001f277:	90                   	nop

c001f278 <CPU::detectFeatures()>:
c001f278:	55                   	push   ebp
c001f279:	57                   	push   edi
c001f27a:	56                   	push   esi
c001f27b:	53                   	push   ebx
c001f27c:	83 ec 30             	sub    esp,0x30
c001f27f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f283:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f28d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f294:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f29a:	6a 0d                	push   0xd
c001f29c:	6a 00                	push   0x0
c001f29e:	55                   	push   ebp
c001f29f:	e8 4c 12 fe ff       	call   c00004f0 <memset>
c001f2a4:	83 c4 10             	add    esp,0x10
c001f2a7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f2ac:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f2b3:	0f 84 db 05 00 00    	je     c001f894 <CPU::detectFeatures()+0x61c>
c001f2b9:	83 ec 0c             	sub    esp,0xc
c001f2bc:	89 ef                	mov    edi,ebp
c001f2be:	6a 10                	push   0x10
c001f2c0:	e8 6b fe ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f2c5:	83 e0 01             	and    eax,0x1
c001f2c8:	8d 14 00             	lea    edx,[eax+eax*1]
c001f2cb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f2d1:	83 e0 fd             	and    eax,0xfffffffd
c001f2d4:	09 d0                	or     eax,edx
c001f2d6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f2dc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f2e3:	e8 48 fe ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f2e8:	83 e0 01             	and    eax,0x1
c001f2eb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f2f2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f2f8:	83 e0 fb             	and    eax,0xfffffffb
c001f2fb:	09 d0                	or     eax,edx
c001f2fd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f303:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f30a:	e8 21 fe ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f30f:	83 e0 01             	and    eax,0x1
c001f312:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f319:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f31f:	83 e0 f7             	and    eax,0xfffffff7
c001f322:	09 d0                	or     eax,edx
c001f324:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f32a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f331:	e8 fa fd ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f336:	83 e0 01             	and    eax,0x1
c001f339:	c1 e0 04             	shl    eax,0x4
c001f33c:	89 c2                	mov    edx,eax
c001f33e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f344:	83 e0 ef             	and    eax,0xffffffef
c001f347:	09 d0                	or     eax,edx
c001f349:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f34f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f356:	e8 d5 fd ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f35b:	83 e0 01             	and    eax,0x1
c001f35e:	c1 e0 05             	shl    eax,0x5
c001f361:	89 c2                	mov    edx,eax
c001f363:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f369:	83 e0 df             	and    eax,0xffffffdf
c001f36c:	09 d0                	or     eax,edx
c001f36e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f374:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f37b:	e8 b0 fd ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f380:	83 e0 01             	and    eax,0x1
c001f383:	8d 14 00             	lea    edx,[eax+eax*1]
c001f386:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f38c:	83 e0 fd             	and    eax,0xfffffffd
c001f38f:	09 d0                	or     eax,edx
c001f391:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f397:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f39e:	e8 8d fd ff ff       	call   c001f130 <CPU::cpuidCheckEDX(unsigned int)>
c001f3a3:	83 e0 01             	and    eax,0x1
c001f3a6:	c1 e0 06             	shl    eax,0x6
c001f3a9:	89 c2                	mov    edx,eax
c001f3ab:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f3b1:	83 e0 bf             	and    eax,0xffffffbf
c001f3b4:	09 d0                	or     eax,edx
c001f3b6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f3bc:	58                   	pop    eax
c001f3bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f3c1:	50                   	push   eax
c001f3c2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f3c6:	50                   	push   eax
c001f3c7:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f3cb:	56                   	push   esi
c001f3cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f3d0:	50                   	push   eax
c001f3d1:	6a 00                	push   0x0
c001f3d3:	e8 d4 fc ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f3d8:	b8 04 00 00 00       	mov    eax,0x4
c001f3dd:	89 c1                	mov    ecx,eax
c001f3df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3e1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f3e7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f3eb:	89 c1                	mov    ecx,eax
c001f3ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3ef:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f3f5:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f3f9:	89 c1                	mov    ecx,eax
c001f3fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3fd:	83 c4 18             	add    esp,0x18
c001f400:	68 04 29 03 c0       	push   0xc0032904
c001f405:	55                   	push   ebp
c001f406:	e8 45 13 fe ff       	call   c0000750 <strcmp>
c001f40b:	83 c4 10             	add    esp,0x10
c001f40e:	85 c0                	test   eax,eax
c001f410:	75 0f                	jne    c001f421 <CPU::detectFeatures()+0x1a9>
c001f412:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f41c:	e9 22 02 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f421:	50                   	push   eax
c001f422:	50                   	push   eax
c001f423:	68 11 29 03 c0       	push   0xc0032911
c001f428:	55                   	push   ebp
c001f429:	e8 22 13 fe ff       	call   c0000750 <strcmp>
c001f42e:	83 c4 10             	add    esp,0x10
c001f431:	85 c0                	test   eax,eax
c001f433:	74 dd                	je     c001f412 <CPU::detectFeatures()+0x19a>
c001f435:	50                   	push   eax
c001f436:	50                   	push   eax
c001f437:	68 1e 29 03 c0       	push   0xc003291e
c001f43c:	55                   	push   ebp
c001f43d:	e8 0e 13 fe ff       	call   c0000750 <strcmp>
c001f442:	83 c4 10             	add    esp,0x10
c001f445:	85 c0                	test   eax,eax
c001f447:	74 2a                	je     c001f473 <CPU::detectFeatures()+0x1fb>
c001f449:	50                   	push   eax
c001f44a:	50                   	push   eax
c001f44b:	68 2b 29 03 c0       	push   0xc003292b
c001f450:	55                   	push   ebp
c001f451:	e8 fa 12 fe ff       	call   c0000750 <strcmp>
c001f456:	83 c4 10             	add    esp,0x10
c001f459:	85 c0                	test   eax,eax
c001f45b:	74 16                	je     c001f473 <CPU::detectFeatures()+0x1fb>
c001f45d:	50                   	push   eax
c001f45e:	50                   	push   eax
c001f45f:	68 38 29 03 c0       	push   0xc0032938
c001f464:	55                   	push   ebp
c001f465:	e8 e6 12 fe ff       	call   c0000750 <strcmp>
c001f46a:	83 c4 10             	add    esp,0x10
c001f46d:	85 c0                	test   eax,eax
c001f46f:	74 48                	je     c001f4b9 <CPU::detectFeatures()+0x241>
c001f471:	eb 0f                	jmp    c001f482 <CPU::detectFeatures()+0x20a>
c001f473:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f47d:	e9 c1 01 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f482:	50                   	push   eax
c001f483:	50                   	push   eax
c001f484:	68 45 29 03 c0       	push   0xc0032945
c001f489:	55                   	push   ebp
c001f48a:	e8 c1 12 fe ff       	call   c0000750 <strcmp>
c001f48f:	83 c4 10             	add    esp,0x10
c001f492:	85 c0                	test   eax,eax
c001f494:	74 23                	je     c001f4b9 <CPU::detectFeatures()+0x241>
c001f496:	57                   	push   edi
c001f497:	57                   	push   edi
c001f498:	68 52 29 03 c0       	push   0xc0032952
c001f49d:	55                   	push   ebp
c001f49e:	e8 ad 12 fe ff       	call   c0000750 <strcmp>
c001f4a3:	83 c4 10             	add    esp,0x10
c001f4a6:	85 c0                	test   eax,eax
c001f4a8:	75 1e                	jne    c001f4c8 <CPU::detectFeatures()+0x250>
c001f4aa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f4b4:	e9 8a 01 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f4b9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f4c3:	e9 7b 01 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f4c8:	56                   	push   esi
c001f4c9:	56                   	push   esi
c001f4ca:	68 5f 29 03 c0       	push   0xc003295f
c001f4cf:	55                   	push   ebp
c001f4d0:	e8 7b 12 fe ff       	call   c0000750 <strcmp>
c001f4d5:	83 c4 10             	add    esp,0x10
c001f4d8:	85 c0                	test   eax,eax
c001f4da:	75 0f                	jne    c001f4eb <CPU::detectFeatures()+0x273>
c001f4dc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f4e6:	e9 58 01 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f4eb:	51                   	push   ecx
c001f4ec:	51                   	push   ecx
c001f4ed:	68 1e 29 03 c0       	push   0xc003291e
c001f4f2:	55                   	push   ebp
c001f4f3:	e8 58 12 fe ff       	call   c0000750 <strcmp>
c001f4f8:	83 c4 10             	add    esp,0x10
c001f4fb:	85 c0                	test   eax,eax
c001f4fd:	75 0f                	jne    c001f50e <CPU::detectFeatures()+0x296>
c001f4ff:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f509:	e9 35 01 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f50e:	52                   	push   edx
c001f50f:	52                   	push   edx
c001f510:	68 6c 29 03 c0       	push   0xc003296c
c001f515:	55                   	push   ebp
c001f516:	e8 35 12 fe ff       	call   c0000750 <strcmp>
c001f51b:	83 c4 10             	add    esp,0x10
c001f51e:	85 c0                	test   eax,eax
c001f520:	75 0f                	jne    c001f531 <CPU::detectFeatures()+0x2b9>
c001f522:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f52c:	e9 12 01 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f531:	50                   	push   eax
c001f532:	50                   	push   eax
c001f533:	68 79 29 03 c0       	push   0xc0032979
c001f538:	55                   	push   ebp
c001f539:	e8 12 12 fe ff       	call   c0000750 <strcmp>
c001f53e:	83 c4 10             	add    esp,0x10
c001f541:	85 c0                	test   eax,eax
c001f543:	75 0f                	jne    c001f554 <CPU::detectFeatures()+0x2dc>
c001f545:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f54f:	e9 ef 00 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f554:	50                   	push   eax
c001f555:	50                   	push   eax
c001f556:	68 86 29 03 c0       	push   0xc0032986
c001f55b:	55                   	push   ebp
c001f55c:	e8 ef 11 fe ff       	call   c0000750 <strcmp>
c001f561:	83 c4 10             	add    esp,0x10
c001f564:	85 c0                	test   eax,eax
c001f566:	75 0f                	jne    c001f577 <CPU::detectFeatures()+0x2ff>
c001f568:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f572:	e9 cc 00 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f577:	50                   	push   eax
c001f578:	50                   	push   eax
c001f579:	68 93 29 03 c0       	push   0xc0032993
c001f57e:	55                   	push   ebp
c001f57f:	e8 cc 11 fe ff       	call   c0000750 <strcmp>
c001f584:	83 c4 10             	add    esp,0x10
c001f587:	85 c0                	test   eax,eax
c001f589:	75 0f                	jne    c001f59a <CPU::detectFeatures()+0x322>
c001f58b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f595:	e9 a9 00 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f59a:	50                   	push   eax
c001f59b:	50                   	push   eax
c001f59c:	68 a0 29 03 c0       	push   0xc00329a0
c001f5a1:	55                   	push   ebp
c001f5a2:	e8 a9 11 fe ff       	call   c0000750 <strcmp>
c001f5a7:	83 c4 10             	add    esp,0x10
c001f5aa:	85 c0                	test   eax,eax
c001f5ac:	75 0f                	jne    c001f5bd <CPU::detectFeatures()+0x345>
c001f5ae:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f5b8:	e9 86 00 00 00       	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f5bd:	50                   	push   eax
c001f5be:	50                   	push   eax
c001f5bf:	68 ad 29 03 c0       	push   0xc00329ad
c001f5c4:	55                   	push   ebp
c001f5c5:	e8 86 11 fe ff       	call   c0000750 <strcmp>
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	85 c0                	test   eax,eax
c001f5cf:	75 0c                	jne    c001f5dd <CPU::detectFeatures()+0x365>
c001f5d1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f5db:	eb 66                	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f5dd:	50                   	push   eax
c001f5de:	50                   	push   eax
c001f5df:	68 ba 29 03 c0       	push   0xc00329ba
c001f5e4:	55                   	push   ebp
c001f5e5:	e8 66 11 fe ff       	call   c0000750 <strcmp>
c001f5ea:	83 c4 10             	add    esp,0x10
c001f5ed:	85 c0                	test   eax,eax
c001f5ef:	75 0c                	jne    c001f5fd <CPU::detectFeatures()+0x385>
c001f5f1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f5fb:	eb 46                	jmp    c001f643 <CPU::detectFeatures()+0x3cb>
c001f5fd:	57                   	push   edi
c001f5fe:	57                   	push   edi
c001f5ff:	68 c7 29 03 c0       	push   0xc00329c7
c001f604:	55                   	push   ebp
c001f605:	e8 46 11 fe ff       	call   c0000750 <strcmp>
c001f60a:	83 c4 10             	add    esp,0x10
c001f60d:	85 c0                	test   eax,eax
c001f60f:	74 e0                	je     c001f5f1 <CPU::detectFeatures()+0x379>
c001f611:	56                   	push   esi
c001f612:	56                   	push   esi
c001f613:	68 d4 29 03 c0       	push   0xc00329d4
c001f618:	55                   	push   ebp
c001f619:	e8 32 11 fe ff       	call   c0000750 <strcmp>
c001f61e:	83 c4 10             	add    esp,0x10
c001f621:	85 c0                	test   eax,eax
c001f623:	74 cc                	je     c001f5f1 <CPU::detectFeatures()+0x379>
c001f625:	51                   	push   ecx
c001f626:	51                   	push   ecx
c001f627:	68 e1 29 03 c0       	push   0xc00329e1
c001f62c:	55                   	push   ebp
c001f62d:	e8 1e 11 fe ff       	call   c0000750 <strcmp>
c001f632:	83 c4 10             	add    esp,0x10
c001f635:	85 c0                	test   eax,eax
c001f637:	74 b8                	je     c001f5f1 <CPU::detectFeatures()+0x379>
c001f639:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f643:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f648:	0f 86 be 00 00 00    	jbe    c001f70c <CPU::detectFeatures()+0x494>
c001f64e:	83 ec 0c             	sub    esp,0xc
c001f651:	68 80 00 00 00       	push   0x80
c001f656:	e8 31 fb ff ff       	call   c001f18c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f65b:	83 e0 01             	and    eax,0x1
c001f65e:	c1 e0 06             	shl    eax,0x6
c001f661:	89 c2                	mov    edx,eax
c001f663:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f669:	83 e0 bf             	and    eax,0xffffffbf
c001f66c:	09 d0                	or     eax,edx
c001f66e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f674:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f67b:	e8 0c fb ff ff       	call   c001f18c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f680:	83 e0 01             	and    eax,0x1
c001f683:	c1 e0 04             	shl    eax,0x4
c001f686:	89 c2                	mov    edx,eax
c001f688:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f68e:	83 e0 ef             	and    eax,0xffffffef
c001f691:	09 d0                	or     eax,edx
c001f693:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f699:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f6a0:	e8 e7 fa ff ff       	call   c001f18c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f6a5:	89 c2                	mov    edx,eax
c001f6a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f6ad:	c1 e2 07             	shl    edx,0x7
c001f6b0:	83 e0 7f             	and    eax,0x7f
c001f6b3:	09 d0                	or     eax,edx
c001f6b5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f6bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f6c2:	e8 f3 fa ff ff       	call   c001f1ba <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f6c7:	83 e0 01             	and    eax,0x1
c001f6ca:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f6d1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6d7:	83 e0 f7             	and    eax,0xfffffff7
c001f6da:	09 d0                	or     eax,edx
c001f6dc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6e2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f6e9:	e8 cc fa ff ff       	call   c001f1ba <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f6ee:	83 c4 10             	add    esp,0x10
c001f6f1:	83 e0 01             	and    eax,0x1
c001f6f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f6fb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f701:	83 e0 fb             	and    eax,0xfffffffb
c001f704:	09 d0                	or     eax,edx
c001f706:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f70c:	83 ec 0c             	sub    esp,0xc
c001f70f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f713:	50                   	push   eax
c001f714:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f718:	50                   	push   eax
c001f719:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f71d:	57                   	push   edi
c001f71e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f722:	56                   	push   esi
c001f723:	6a 01                	push   0x1
c001f725:	e8 82 f9 ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f72a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f72e:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f734:	89 c1                	mov    ecx,eax
c001f736:	83 e2 f0             	and    edx,0xfffffff0
c001f739:	83 e1 0f             	and    ecx,0xf
c001f73c:	09 ca                	or     edx,ecx
c001f73e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f744:	89 c2                	mov    edx,eax
c001f746:	c1 ea 04             	shr    edx,0x4
c001f749:	83 e2 0f             	and    edx,0xf
c001f74c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f750:	89 d1                	mov    ecx,edx
c001f752:	83 c4 20             	add    esp,0x20
c001f755:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f75b:	c1 e1 06             	shl    ecx,0x6
c001f75e:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f764:	09 ca                	or     edx,ecx
c001f766:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f76d:	89 c2                	mov    edx,eax
c001f76f:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f775:	c1 ea 08             	shr    edx,0x8
c001f778:	83 e1 3f             	and    ecx,0x3f
c001f77b:	83 e2 0f             	and    edx,0xf
c001f77e:	89 d5                	mov    ebp,edx
c001f780:	83 e5 03             	and    ebp,0x3
c001f783:	c1 e5 06             	shl    ebp,0x6
c001f786:	09 e9                	or     ecx,ebp
c001f788:	89 d5                	mov    ebp,edx
c001f78a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f790:	c1 ed 02             	shr    ebp,0x2
c001f793:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f799:	83 e1 c0             	and    ecx,0xffffffc0
c001f79c:	09 e9                	or     ecx,ebp
c001f79e:	89 c5                	mov    ebp,eax
c001f7a0:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f7a6:	c1 ed 08             	shr    ebp,0x8
c001f7a9:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f7af:	83 e5 30             	and    ebp,0x30
c001f7b2:	83 e1 cf             	and    ecx,0xffffffcf
c001f7b5:	09 e9                	or     ecx,ebp
c001f7b7:	83 fa 06             	cmp    edx,0x6
c001f7ba:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f7c0:	74 05                	je     c001f7c7 <CPU::detectFeatures()+0x54f>
c001f7c2:	83 fa 0f             	cmp    edx,0xf
c001f7c5:	75 64                	jne    c001f82b <CPU::detectFeatures()+0x5b3>
c001f7c7:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f7cd:	89 c1                	mov    ecx,eax
c001f7cf:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f7d5:	c1 e9 10             	shr    ecx,0x10
c001f7d8:	c1 e1 04             	shl    ecx,0x4
c001f7db:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f7df:	0f b6 c9             	movzx  ecx,cl
c001f7e2:	c1 e1 06             	shl    ecx,0x6
c001f7e5:	09 e9                	or     ecx,ebp
c001f7e7:	83 fa 0f             	cmp    edx,0xf
c001f7ea:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f7f1:	75 38                	jne    c001f82b <CPU::detectFeatures()+0x5b3>
c001f7f3:	c1 e8 14             	shr    eax,0x14
c001f7f6:	83 c0 0f             	add    eax,0xf
c001f7f9:	0f b6 c0             	movzx  eax,al
c001f7fc:	89 c2                	mov    edx,eax
c001f7fe:	c1 e8 02             	shr    eax,0x2
c001f801:	83 e2 03             	and    edx,0x3
c001f804:	89 d1                	mov    ecx,edx
c001f806:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f80c:	c1 e1 06             	shl    ecx,0x6
c001f80f:	83 e2 3f             	and    edx,0x3f
c001f812:	09 ca                	or     edx,ecx
c001f814:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f81a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f820:	83 e2 c0             	and    edx,0xffffffc0
c001f823:	09 d0                	or     eax,edx
c001f825:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f82b:	83 ec 0c             	sub    esp,0xc
c001f82e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f834:	83 c8 07             	or     eax,0x7
c001f837:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f83d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f841:	50                   	push   eax
c001f842:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f846:	55                   	push   ebp
c001f847:	57                   	push   edi
c001f848:	56                   	push   esi
c001f849:	68 00 00 00 80       	push   0x80000000
c001f84e:	e8 59 f8 ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f853:	83 c4 20             	add    esp,0x20
c001f856:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f85e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f862:	76 1e                	jbe    c001f882 <CPU::detectFeatures()+0x60a>
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	50                   	push   eax
c001f868:	55                   	push   ebp
c001f869:	57                   	push   edi
c001f86a:	56                   	push   esi
c001f86b:	68 01 00 00 80       	push   0x80000001
c001f870:	e8 37 f8 ff ff       	call   c001f0ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f875:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f87f:	83 c4 20             	add    esp,0x20
c001f882:	52                   	push   edx
c001f883:	52                   	push   edx
c001f884:	68 ed 29 03 c0       	push   0xc00329ed
c001f889:	53                   	push   ebx
c001f88a:	e8 87 bd ff ff       	call   c001b616 <Device::setName(char const*)>
c001f88f:	83 c4 10             	add    esp,0x10
c001f892:	eb 69                	jmp    c001f8fd <CPU::detectFeatures()+0x685>
c001f894:	50                   	push   eax
c001f895:	50                   	push   eax
c001f896:	68 52 29 03 c0       	push   0xc0032952
c001f89b:	55                   	push   ebp
c001f89c:	e8 9f 0d fe ff       	call   c0000640 <strcpy>
c001f8a1:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f8ab:	e8 13 09 fe ff       	call   c00001c3 <is486>
c001f8b0:	83 c4 10             	add    esp,0x10
c001f8b3:	85 c0                	test   eax,eax
c001f8b5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f8bb:	74 1f                	je     c001f8dc <CPU::detectFeatures()+0x664>
c001f8bd:	83 c8 07             	or     eax,0x7
c001f8c0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f8c6:	0f 20 c0             	mov    eax,cr0
c001f8c9:	83 e0 14             	and    eax,0x14
c001f8cc:	83 f8 04             	cmp    eax,0x4
c001f8cf:	75 10                	jne    c001f8e1 <CPU::detectFeatures()+0x669>
c001f8d1:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f8d7:	83 e0 fd             	and    eax,0xfffffffd
c001f8da:	eb 1b                	jmp    c001f8f7 <CPU::detectFeatures()+0x67f>
c001f8dc:	83 e0 f8             	and    eax,0xfffffff8
c001f8df:	eb df                	jmp    c001f8c0 <CPU::detectFeatures()+0x648>
c001f8e1:	e8 b8 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f8e6:	83 e0 01             	and    eax,0x1
c001f8e9:	8d 14 00             	lea    edx,[eax+eax*1]
c001f8ec:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f8f2:	83 e0 fd             	and    eax,0xfffffffd
c001f8f5:	09 d0                	or     eax,edx
c001f8f7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f8fd:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f904:	74 17                	je     c001f91d <CPU::detectFeatures()+0x6a5>
c001f906:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f90c:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f912:	83 c8 10             	or     eax,0x10
c001f915:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f91b:	eb 20                	jmp    c001f93d <CPU::detectFeatures()+0x6c5>
c001f91d:	e8 7c 08 fe ff       	call   c000019e <hasLegacyFPU>
c001f922:	83 e0 01             	and    eax,0x1
c001f925:	8d 14 00             	lea    edx,[eax+eax*1]
c001f928:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f92e:	83 e0 fd             	and    eax,0xfffffffd
c001f931:	09 d0                	or     eax,edx
c001f933:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f939:	a8 02                	test   al,0x2
c001f93b:	75 c9                	jne    c001f906 <CPU::detectFeatures()+0x68e>
c001f93d:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f944:	83 c4 2c             	add    esp,0x2c
c001f947:	5b                   	pop    ebx
c001f948:	5e                   	pop    esi
c001f949:	5f                   	pop    edi
c001f94a:	5d                   	pop    ebp
c001f94b:	c3                   	ret    

c001f94c <CPU::setupSMEP()>:
c001f94c:	0f 20 e0             	mov    eax,cr4
c001f94f:	0d 00 00 10 00       	or     eax,0x100000
c001f954:	0f 22 e0             	mov    cr4,eax
c001f957:	c3                   	ret    

c001f958 <CPU::setupUMIP()>:
c001f958:	0f 20 e0             	mov    eax,cr4
c001f95b:	80 cc 08             	or     ah,0x8
c001f95e:	0f 22 e0             	mov    cr4,eax
c001f961:	c3                   	ret    

c001f962 <CPU::setupTSC()>:
c001f962:	0f 20 e0             	mov    eax,cr4
c001f965:	83 c8 04             	or     eax,0x4
c001f968:	0f 22 e0             	mov    cr4,eax
c001f96b:	c3                   	ret    

c001f96c <CPU::setupLargePages()>:
c001f96c:	0f 20 e0             	mov    eax,cr4
c001f96f:	83 c8 10             	or     eax,0x10
c001f972:	0f 22 e0             	mov    cr4,eax
c001f975:	c3                   	ret    

c001f976 <CPU::setupPAT()>:
c001f976:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f97b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f982:	74 2c                	je     c001f9b0 <CPU::setupPAT()+0x3a>
c001f984:	53                   	push   ebx
c001f985:	83 ec 10             	sub    esp,0x10
c001f988:	68 77 02 00 00       	push   0x277
c001f98d:	50                   	push   eax
c001f98e:	e8 cd 61 ff ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c001f993:	83 e2 f8             	and    edx,0xfffffff8
c001f996:	83 ca 01             	or     edx,0x1
c001f999:	52                   	push   edx
c001f99a:	50                   	push   eax
c001f99b:	68 77 02 00 00       	push   0x277
c001f9a0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f9a6:	e8 e1 61 ff ff       	call   c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>
c001f9ab:	83 c4 28             	add    esp,0x28
c001f9ae:	5b                   	pop    ebx
c001f9af:	c3                   	ret    
c001f9b0:	c3                   	ret    
c001f9b1:	90                   	nop

c001f9b2 <CPU::setupMTRR()>:
c001f9b2:	c3                   	ret    
c001f9b3:	90                   	nop

c001f9b4 <CPU::setupGlobalPages()>:
c001f9b4:	0f 20 e0             	mov    eax,cr4
c001f9b7:	0c 80                	or     al,0x80
c001f9b9:	0f 22 e0             	mov    cr4,eax
c001f9bc:	c3                   	ret    
c001f9bd:	90                   	nop

c001f9be <CPU::allowUsermodeDataAccess()>:
c001f9be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9c2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f9c9:	74 03                	je     c001f9ce <CPU::allowUsermodeDataAccess()+0x10>
c001f9cb:	0f 01 cb             	stac   
c001f9ce:	c3                   	ret    
c001f9cf:	90                   	nop

c001f9d0 <CPU::prohibitUsermodeDataAccess()>:
c001f9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f9db:	74 03                	je     c001f9e0 <CPU::prohibitUsermodeDataAccess()+0x10>
c001f9dd:	0f 01 ca             	clac   
c001f9e0:	c3                   	ret    
c001f9e1:	90                   	nop

c001f9e2 <CPU::setupSMAP()>:
c001f9e2:	0f 20 e0             	mov    eax,cr4
c001f9e5:	0d 00 00 20 00       	or     eax,0x200000
c001f9ea:	0f 22 e0             	mov    cr4,eax
c001f9ed:	eb e1                	jmp    c001f9d0 <CPU::prohibitUsermodeDataAccess()>
c001f9ef:	90                   	nop

c001f9f0 <CPU::setupFeatures()>:
c001f9f0:	53                   	push   ebx
c001f9f1:	83 ec 08             	sub    esp,0x8
c001f9f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f9f8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f9ff:	74 18                	je     c001fa19 <CPU::setupFeatures()+0x29>
c001fa01:	83 ec 0c             	sub    esp,0xc
c001fa04:	68 f9 29 03 c0       	push   0xc00329f9
c001fa09:	e8 33 9a ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fa0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa11:	e8 42 ff ff ff       	call   c001f958 <CPU::setupUMIP()>
c001fa16:	83 c4 10             	add    esp,0x10
c001fa19:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001fa20:	74 18                	je     c001fa3a <CPU::setupFeatures()+0x4a>
c001fa22:	83 ec 0c             	sub    esp,0xc
c001fa25:	68 03 2a 03 c0       	push   0xc0032a03
c001fa2a:	e8 12 9a ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fa2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa32:	e8 2b ff ff ff       	call   c001f962 <CPU::setupTSC()>
c001fa37:	83 c4 10             	add    esp,0x10
c001fa3a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001fa41:	74 18                	je     c001fa5b <CPU::setupFeatures()+0x6b>
c001fa43:	83 ec 0c             	sub    esp,0xc
c001fa46:	68 0c 2a 03 c0       	push   0xc0032a0c
c001fa4b:	e8 f1 99 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fa50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa53:	e8 14 ff ff ff       	call   c001f96c <CPU::setupLargePages()>
c001fa58:	83 c4 10             	add    esp,0x10
c001fa5b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001fa62:	74 18                	je     c001fa7c <CPU::setupFeatures()+0x8c>
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	68 15 2a 03 c0       	push   0xc0032a15
c001fa6c:	e8 d0 99 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fa71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa74:	e8 3b ff ff ff       	call   c001f9b4 <CPU::setupGlobalPages()>
c001fa79:	83 c4 10             	add    esp,0x10
c001fa7c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001fa83:	74 18                	je     c001fa9d <CPU::setupFeatures()+0xad>
c001fa85:	83 ec 0c             	sub    esp,0xc
c001fa88:	68 27 2a 03 c0       	push   0xc0032a27
c001fa8d:	e8 af 99 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fa92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa95:	e8 dc fe ff ff       	call   c001f976 <CPU::setupPAT()>
c001fa9a:	83 c4 10             	add    esp,0x10
c001fa9d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001faa4:	74 11                	je     c001fab7 <CPU::setupFeatures()+0xc7>
c001faa6:	c7 44 24 10 30 2a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032a30
c001faae:	83 c4 08             	add    esp,0x8
c001fab1:	5b                   	pop    ebx
c001fab2:	e9 8a 99 ff ff       	jmp    c0019441 <Dbg::kprintf(char const*, ...)>
c001fab7:	83 c4 08             	add    esp,0x8
c001faba:	5b                   	pop    ebx
c001fabb:	c3                   	ret    

c001fabc <CPU::open(int, int, void*)>:
c001fabc:	55                   	push   ebp
c001fabd:	57                   	push   edi
c001fabe:	56                   	push   esi
c001fabf:	53                   	push   ebx
c001fac0:	83 ec 18             	sub    esp,0x18
c001fac3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001fac7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001facb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001facf:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001fad5:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001fadb:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001fae1:	50                   	push   eax
c001fae2:	e8 77 63 ff ff       	call   c0015e5e <GDT::setup()>
c001fae7:	83 c4 0c             	add    esp,0xc
c001faea:	6a 00                	push   0x0
c001faec:	68 ef be ad de       	push   0xdeadbeef
c001faf1:	55                   	push   ebp
c001faf2:	e8 8d 7f ff ff       	call   c0017a84 <TSS::setup(unsigned long, unsigned long)>
c001faf7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001fafa:	e8 65 7f ff ff       	call   c0017a64 <TSS::flush()>
c001faff:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001fb05:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb08:	e8 b5 65 ff ff       	call   c00160c2 <IDT::setup()>
c001fb0d:	b8 00 04 00 00       	mov    eax,0x400
c001fb12:	0f 23 f8             	mov    db7,eax
c001fb15:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001fb1f:	e8 96 6d ff ff       	call   c00168ba <Phys::allocatePage()>
c001fb24:	83 c4 10             	add    esp,0x10
c001fb27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fb2d:	85 f6                	test   esi,esi
c001fb2f:	89 38                	mov    DWORD PTR [eax],edi
c001fb31:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fb37:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001fb3a:	74 10                	je     c001fb4c <CPU::open(int, int, void*)+0x90>
c001fb3c:	50                   	push   eax
c001fb3d:	50                   	push   eax
c001fb3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb44:	56                   	push   esi
c001fb45:	e8 60 88 ff ff       	call   c00183aa <VAS::setCPUSpecific(unsigned long)>
c001fb4a:	eb 0d                	jmp    c001fb59 <CPU::open(int, int, void*)+0x9d>
c001fb4c:	83 ec 0c             	sub    esp,0xc
c001fb4f:	68 3a 2a 03 c0       	push   0xc0032a3a
c001fb54:	e8 01 09 00 00       	call   c002045a <KePanic(char const*)>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	83 ec 0c             	sub    esp,0xc
c001fb5f:	68 48 2a 03 c0       	push   0xc0032a48
c001fb64:	e8 8e 01 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001fb69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb6c:	e8 07 f7 ff ff       	call   c001f278 <CPU::detectFeatures()>
c001fb71:	c7 04 24 6b 2a 03 c0 	mov    DWORD PTR [esp],0xc0032a6b
c001fb78:	e8 7a 01 00 00       	call   c001fcf7 <KeSetBootMessage(char const*)>
c001fb7d:	e8 17 77 00 00       	call   c0027299 <HalInitialise()>
c001fb82:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001fb87:	83 e0 10             	and    eax,0x10
c001fb8a:	83 f8 01             	cmp    eax,0x1
c001fb8d:	19 c0                	sbb    eax,eax
c001fb8f:	83 e0 46             	and    eax,0x46
c001fb92:	83 c0 1e             	add    eax,0x1e
c001fb95:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb98:	e8 5c d3 ff ff       	call   c001cef9 <setupTimer(int)>
c001fb9d:	83 c4 10             	add    esp,0x10
c001fba0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001fba6:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001fbad:	74 0c                	je     c001fbbb <CPU::open(int, int, void*)+0xff>
c001fbaf:	83 ec 0c             	sub    esp,0xc
c001fbb2:	53                   	push   ebx
c001fbb3:	e8 38 fe ff ff       	call   c001f9f0 <CPU::setupFeatures()>
c001fbb8:	83 c4 10             	add    esp,0x10
c001fbbb:	83 c4 0c             	add    esp,0xc
c001fbbe:	31 c0                	xor    eax,eax
c001fbc0:	5b                   	pop    ebx
c001fbc1:	5e                   	pop    esi
c001fbc2:	5f                   	pop    edi
c001fbc3:	5d                   	pop    ebp
c001fbc4:	c3                   	ret    

c001fbc5 <KeInitialiseAtexit()>:
c001fbc5:	83 ec 10             	sub    esp,0x10
c001fbc8:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001fbd2:	6a 60                	push   0x60
c001fbd4:	6a 00                	push   0x0
c001fbd6:	68 20 f9 03 c0       	push   0xc003f920
c001fbdb:	e8 10 09 fe ff       	call   c00004f0 <memset>
c001fbe0:	83 c4 1c             	add    esp,0x1c
c001fbe3:	c3                   	ret    

c001fbe4 <KeRegisterAtexit(void (*)(void*), void*)>:
c001fbe4:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001fbe9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fbed:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fbf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fbf8:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fbff:	40                   	inc    eax
c001fc00:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fc05:	83 f8 17             	cmp    eax,0x17
c001fc08:	7e 0d                	jle    c001fc17 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fc0a:	c7 44 24 04 ac 2a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032aac
c001fc12:	e9 43 08 00 00       	jmp    c002045a <KePanic(char const*)>
c001fc17:	c3                   	ret    

c001fc18 <KeExecuteAtexit()>:
c001fc18:	53                   	push   ebx
c001fc19:	31 db                	xor    ebx,ebx
c001fc1b:	83 ec 08             	sub    esp,0x8
c001fc1e:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fc24:	7e 50                	jle    c001fc76 <KeExecuteAtexit()+0x5e>
c001fc26:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fc2d:	85 c0                	test   eax,eax
c001fc2f:	74 42                	je     c001fc73 <KeExecuteAtexit()+0x5b>
c001fc31:	51                   	push   ecx
c001fc32:	50                   	push   eax
c001fc33:	53                   	push   ebx
c001fc34:	68 c5 2a 03 c0       	push   0xc0032ac5
c001fc39:	e8 03 98 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fc3e:	58                   	pop    eax
c001fc3f:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fc46:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fc4d:	c7 04 24 e7 2a 03 c0 	mov    DWORD PTR [esp],0xc0032ae7
c001fc54:	e8 e8 97 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fc59:	c7 04 24 93 3c 03 c0 	mov    DWORD PTR [esp],0xc0033c93
c001fc60:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fc6b:	e8 d1 97 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fc70:	83 c4 10             	add    esp,0x10
c001fc73:	43                   	inc    ebx
c001fc74:	eb a8                	jmp    c001fc1e <KeExecuteAtexit()+0x6>
c001fc76:	83 c4 08             	add    esp,0x8
c001fc79:	5b                   	pop    ebx
c001fc7a:	c3                   	ret    

c001fc7b <KeDisplaySplashScreen()>:
c001fc7b:	55                   	push   ebp
c001fc7c:	bd 05 00 00 00       	mov    ebp,0x5
c001fc81:	57                   	push   edi
c001fc82:	bf 0a 00 00 00       	mov    edi,0xa
c001fc87:	56                   	push   esi
c001fc88:	31 f6                	xor    esi,esi
c001fc8a:	53                   	push   ebx
c001fc8b:	31 db                	xor    ebx,ebx
c001fc8d:	83 ec 0c             	sub    esp,0xc
c001fc90:	0f b6 96 00 3f 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc100]
c001fc97:	89 d0                	mov    eax,edx
c001fc99:	85 d2                	test   edx,edx
c001fc9b:	74 52                	je     c001fcef <KeDisplaySplashScreen()+0x74>
c001fc9d:	80 bb 36 3f 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc0ca],0xdb
c001fca4:	75 13                	jne    c001fcb9 <KeDisplaySplashScreen()+0x3e>
c001fca6:	0f b6 8b 35 3f 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc0cb]
c001fcad:	83 e1 fe             	and    ecx,0xfffffffe
c001fcb0:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fcb6:	75 01                	jne    c001fcb9 <KeDisplaySplashScreen()+0x3e>
c001fcb8:	47                   	inc    edi
c001fcb9:	83 fa 0d             	cmp    edx,0xd
c001fcbc:	74 28                	je     c001fce6 <KeDisplaySplashScreen()+0x6b>
c001fcbe:	83 fa 0a             	cmp    edx,0xa
c001fcc1:	75 0a                	jne    c001fccd <KeDisplaySplashScreen()+0x52>
c001fcc3:	45                   	inc    ebp
c001fcc4:	bf 0a 00 00 00       	mov    edi,0xa
c001fcc9:	31 db                	xor    ebx,ebx
c001fccb:	eb 19                	jmp    c001fce6 <KeDisplaySplashScreen()+0x6b>
c001fccd:	83 ec 0c             	sub    esp,0xc
c001fcd0:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fcd3:	55                   	push   ebp
c001fcd4:	0f be c0             	movsx  eax,al
c001fcd7:	52                   	push   edx
c001fcd8:	43                   	inc    ebx
c001fcd9:	6a 00                	push   0x0
c001fcdb:	6a 0e                	push   0xe
c001fcdd:	50                   	push   eax
c001fcde:	e8 35 82 00 00       	call   c0027f18 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fce3:	83 c4 20             	add    esp,0x20
c001fce6:	46                   	inc    esi
c001fce7:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fced:	75 a1                	jne    c001fc90 <KeDisplaySplashScreen()+0x15>
c001fcef:	83 c4 0c             	add    esp,0xc
c001fcf2:	5b                   	pop    ebx
c001fcf3:	5e                   	pop    esi
c001fcf4:	5f                   	pop    edi
c001fcf5:	5d                   	pop    ebp
c001fcf6:	c3                   	ret    

c001fcf7 <KeSetBootMessage(char const*)>:
c001fcf7:	57                   	push   edi
c001fcf8:	56                   	push   esi
c001fcf9:	53                   	push   ebx
c001fcfa:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fd00:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fd07:	68 9e 00 00 00       	push   0x9e
c001fd0c:	6a 00                	push   0x0
c001fd0e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fd12:	56                   	push   esi
c001fd13:	e8 d8 07 fe ff       	call   c00004f0 <memset>
c001fd18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd1b:	e8 50 08 fe ff       	call   c0000570 <strlen>
c001fd20:	ba 50 00 00 00       	mov    edx,0x50
c001fd25:	83 c4 10             	add    esp,0x10
c001fd28:	29 c2                	sub    edx,eax
c001fd2a:	31 c9                	xor    ecx,ecx
c001fd2c:	83 e2 fe             	and    edx,0xfffffffe
c001fd2f:	01 f2                	add    edx,esi
c001fd31:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fd36:	84 c0                	test   al,al
c001fd38:	74 0a                	je     c001fd44 <KeSetBootMessage(char const*)+0x4d>
c001fd3a:	80 cc 0f             	or     ah,0xf
c001fd3d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fd41:	41                   	inc    ecx
c001fd42:	eb ed                	jmp    c001fd31 <KeSetBootMessage(char const*)+0x3a>
c001fd44:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fd49:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fd4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd50:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fd56:	5b                   	pop    ebx
c001fd57:	5e                   	pop    esi
c001fd58:	5f                   	pop    edi
c001fd59:	c3                   	ret    
c001fd5a:	66 90                	xchg   ax,ax

c001fd5c <CUnlockScheduler>:
c001fd5c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fd61:	83 e8 01             	sub    eax,0x1
c001fd64:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fd69:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fd6e:	85 c0                	test   eax,eax
c001fd70:	75 02                	jne    c001fd74 <CUnlockScheduler+0x18>
c001fd72:	fb                   	sti    
c001fd73:	90                   	nop
c001fd74:	90                   	nop
c001fd75:	c3                   	ret    
c001fd76:	66 90                	xchg   ax,ax

c001fd78 <CLockScheduler>:
c001fd78:	fa                   	cli    
c001fd79:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fd7e:	83 c0 01             	add    eax,0x1
c001fd81:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fd86:	90                   	nop
c001fd87:	c3                   	ret    

c001fd88 <CPrintf>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	83 ec 08             	sub    esp,0x8
c001fd8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd92:	68 10 fd 02 c0       	push   0xc002fd10
c001fd97:	e8 a5 96 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c001fd9c:	83 c4 10             	add    esp,0x10
c001fd9f:	90                   	nop
c001fda0:	83 c4 0c             	add    esp,0xc
c001fda3:	c3                   	ret    

c001fda4 <Krnl::handlePowerButton()>:
c001fda4:	83 ec 0c             	sub    esp,0xc
c001fda7:	e8 09 07 00 00       	call   c00204b5 <KeHandlePowerButton()>
c001fdac:	90                   	nop
c001fdad:	83 c4 0c             	add    esp,0xc
c001fdb0:	c3                   	ret    
c001fdb1:	8d 76 00             	lea    esi,[esi+0x0]

c001fdb4 <Krnl::handleSleepButton()>:
c001fdb4:	83 ec 0c             	sub    esp,0xc
c001fdb7:	e8 2e 07 00 00       	call   c00204ea <KeHandleSleepButton()>
c001fdbc:	90                   	nop
c001fdbd:	83 c4 0c             	add    esp,0xc
c001fdc0:	c3                   	ret    

c001fdc1 <KeCalculateCRC32(unsigned char*, int)>:
c001fdc1:	53                   	push   ebx
c001fdc2:	83 c8 ff             	or     eax,0xffffffff
c001fdc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fdc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fdcd:	01 cb                	add    ebx,ecx
c001fdcf:	39 d9                	cmp    ecx,ebx
c001fdd1:	74 15                	je     c001fde8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fdd3:	41                   	inc    ecx
c001fdd4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fdd7:	31 c2                	xor    edx,eax
c001fdd9:	c1 e8 08             	shr    eax,0x8
c001fddc:	0f b6 d2             	movzx  edx,dl
c001fddf:	33 04 95 60 40 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcbfa0]
c001fde6:	eb e7                	jmp    c001fdcf <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fde8:	f7 d0                	not    eax
c001fdea:	5b                   	pop    ebx
c001fdeb:	c3                   	ret    

c001fdec <EnvVarContainer::getEnv(char const*)>:
c001fdec:	57                   	push   edi
c001fded:	56                   	push   esi
c001fdee:	53                   	push   ebx
c001fdef:	31 db                	xor    ebx,ebx
c001fdf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdf5:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fdf7:	7e 2b                	jle    c001fe24 <EnvVarContainer::getEnv(char const*)+0x38>
c001fdf9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fe00:	50                   	push   eax
c001fe01:	50                   	push   eax
c001fe02:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe05:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fe08:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fe0c:	e8 3f 09 fe ff       	call   c0000750 <strcmp>
c001fe11:	83 c4 10             	add    esp,0x10
c001fe14:	85 c0                	test   eax,eax
c001fe16:	75 09                	jne    c001fe21 <EnvVarContainer::getEnv(char const*)+0x35>
c001fe18:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fe1b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fe1f:	eb 05                	jmp    c001fe26 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fe21:	43                   	inc    ebx
c001fe22:	eb d1                	jmp    c001fdf5 <EnvVarContainer::getEnv(char const*)+0x9>
c001fe24:	31 c0                	xor    eax,eax
c001fe26:	5b                   	pop    ebx
c001fe27:	5e                   	pop    esi
c001fe28:	5f                   	pop    edi
c001fe29:	c3                   	ret    

c001fe2a <EnvVarContainer::setEnv(char const*, char const*)>:
c001fe2a:	55                   	push   ebp
c001fe2b:	57                   	push   edi
c001fe2c:	56                   	push   esi
c001fe2d:	53                   	push   ebx
c001fe2e:	83 ec 28             	sub    esp,0x28
c001fe31:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fe35:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fe39:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fe3d:	56                   	push   esi
c001fe3e:	e8 2d 07 fe ff       	call   c0000570 <strlen>
c001fe43:	40                   	inc    eax
c001fe44:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe47:	e8 65 67 ff ff       	call   c00165b1 <malloc>
c001fe4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe53:	e8 18 07 fe ff       	call   c0000570 <strlen>
c001fe58:	40                   	inc    eax
c001fe59:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe5c:	e8 50 67 ff ff       	call   c00165b1 <malloc>
c001fe61:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fe68:	e8 03 07 fe ff       	call   c0000570 <strlen>
c001fe6d:	83 c4 0c             	add    esp,0xc
c001fe70:	40                   	inc    eax
c001fe71:	50                   	push   eax
c001fe72:	6a 00                	push   0x0
c001fe74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fe78:	e8 73 06 fe ff       	call   c00004f0 <memset>
c001fe7d:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe80:	e8 eb 06 fe ff       	call   c0000570 <strlen>
c001fe85:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fe89:	8d 48 01             	lea    ecx,[eax+0x1]
c001fe8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe91:	89 de                	mov    esi,ebx
c001fe93:	e8 d8 06 fe ff       	call   c0000570 <strlen>
c001fe98:	83 c4 0c             	add    esp,0xc
c001fe9b:	40                   	inc    eax
c001fe9c:	50                   	push   eax
c001fe9d:	6a 00                	push   0x0
c001fe9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fea3:	e8 48 06 fe ff       	call   c00004f0 <memset>
c001fea8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001feab:	e8 c0 06 fe ff       	call   c0000570 <strlen>
c001feb0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001feb4:	8d 48 01             	lea    ecx,[eax+0x1]
c001feb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001feb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001febc:	40                   	inc    eax
c001febd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fec0:	c1 e0 03             	shl    eax,0x3
c001fec3:	5a                   	pop    edx
c001fec4:	59                   	pop    ecx
c001fec5:	50                   	push   eax
c001fec6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fec9:	e8 cf 66 ff ff       	call   c001659d <realloc>
c001fece:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fed2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fed5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fed8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fedc:	b9 08 00 00 00       	mov    ecx,0x8
c001fee1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fee3:	83 c4 2c             	add    esp,0x2c
c001fee6:	5b                   	pop    ebx
c001fee7:	5e                   	pop    esi
c001fee8:	5f                   	pop    edi
c001fee9:	5d                   	pop    ebp
c001feea:	c3                   	ret    
c001feeb:	90                   	nop

c001feec <EnvVarContainer::deleteEnv(char const*)>:
c001feec:	c3                   	ret    
c001feed:	90                   	nop

c001feee <EnvVarContainer::loadFrom(char const*, char const*)>:
c001feee:	55                   	push   ebp
c001feef:	57                   	push   edi
c001fef0:	56                   	push   esi
c001fef1:	53                   	push   ebx
c001fef2:	81 ec 38 01 00 00    	sub    esp,0x138
c001fef8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001feff:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001ff06:	68 14 01 00 00       	push   0x114
c001ff0b:	e8 a1 66 ff ff       	call   c00165b1 <malloc>
c001ff10:	83 c4 0c             	add    esp,0xc
c001ff13:	89 c3                	mov    ebx,eax
c001ff15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ff18:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ff1f:	50                   	push   eax
c001ff20:	e8 23 a7 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c001ff25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff28:	e8 fd a9 ff ff       	call   c001a92a <File::exists()>
c001ff2d:	83 c4 10             	add    esp,0x10
c001ff30:	84 c0                	test   al,al
c001ff32:	75 31                	jne    c001ff65 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001ff34:	50                   	push   eax
c001ff35:	50                   	push   eax
c001ff36:	6a 12                	push   0x12
c001ff38:	53                   	push   ebx
c001ff39:	e8 28 a7 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c001ff3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff40:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001ff43:	89 34 24             	mov    DWORD PTR [esp],esi
c001ff46:	e8 25 06 fe ff       	call   c0000570 <strlen>
c001ff4b:	5a                   	pop    edx
c001ff4c:	31 d2                	xor    edx,edx
c001ff4e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ff52:	51                   	push   ecx
c001ff53:	56                   	push   esi
c001ff54:	52                   	push   edx
c001ff55:	50                   	push   eax
c001ff56:	53                   	push   ebx
c001ff57:	ff d7                	call   edi
c001ff59:	83 c4 14             	add    esp,0x14
c001ff5c:	53                   	push   ebx
c001ff5d:	e8 62 a7 ff ff       	call   c001a6c4 <File::close()>
c001ff62:	83 c4 10             	add    esp,0x10
c001ff65:	56                   	push   esi
c001ff66:	31 f6                	xor    esi,esi
c001ff68:	68 00 01 00 00       	push   0x100
c001ff6d:	6a 00                	push   0x0
c001ff6f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001ff73:	50                   	push   eax
c001ff74:	e8 77 05 fe ff       	call   c00004f0 <memset>
c001ff79:	5f                   	pop    edi
c001ff7a:	58                   	pop    eax
c001ff7b:	6a 01                	push   0x1
c001ff7d:	53                   	push   ebx
c001ff7e:	e8 e3 a6 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c001ff83:	83 c4 10             	add    esp,0x10
c001ff86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ff8e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ff96:	83 ec 0c             	sub    esp,0xc
c001ff99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff9b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ff9f:	51                   	push   ecx
c001ffa0:	8d 54 24 23          	lea    edx,[esp+0x23]
c001ffa4:	52                   	push   edx
c001ffa5:	6a 00                	push   0x0
c001ffa7:	6a 01                	push   0x1
c001ffa9:	53                   	push   ebx
c001ffaa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ffad:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001ffb2:	83 c4 20             	add    esp,0x20
c001ffb5:	89 c2                	mov    edx,eax
c001ffb7:	85 c0                	test   eax,eax
c001ffb9:	0f 84 36 01 00 00    	je     c00200f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001ffbf:	83 f8 0d             	cmp    eax,0xd
c001ffc2:	0f 84 22 01 00 00    	je     c00200ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001ffc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ffcd:	0f 84 f0 00 00 00    	je     c00200c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001ffd3:	83 f8 0a             	cmp    eax,0xa
c001ffd6:	74 13                	je     c001ffeb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001ffd8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ffdd:	74 0c                	je     c001ffeb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001ffdf:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ffe5:	0f 8e f6 00 00 00    	jle    c00200e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001ffeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffef:	83 ec 0c             	sub    esp,0xc
c001fff2:	8d 78 01             	lea    edi,[eax+0x1]
c001fff5:	57                   	push   edi
c001fff6:	e8 b6 65 ff ff       	call   c00165b1 <malloc>
c001fffb:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001ffff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0020003:	8d 56 04             	lea    edx,[esi+0x4]
c0020006:	89 14 24             	mov    DWORD PTR [esp],edx
c0020009:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002000d:	e8 9f 65 ff ff       	call   c00165b1 <malloc>
c0020012:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0020016:	83 c4 0c             	add    esp,0xc
c0020019:	57                   	push   edi
c002001a:	6a 00                	push   0x0
c002001c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0020020:	e8 cb 04 fe ff       	call   c00004f0 <memset>
c0020025:	8d 74 24 30          	lea    esi,[esp+0x30]
c0020029:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002002d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020031:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020033:	83 c4 0c             	add    esp,0xc
c0020036:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002003a:	52                   	push   edx
c002003b:	6a 00                	push   0x0
c002003d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020041:	e8 aa 04 fe ff       	call   c00004f0 <memset>
c0020046:	8d 74 24 30          	lea    esi,[esp+0x30]
c002004a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c002004e:	89 34 24             	mov    DWORD PTR [esp],esi
c0020051:	e8 1a 05 fe ff       	call   c0000570 <strlen>
c0020056:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002005a:	89 c1                	mov    ecx,eax
c002005c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002005e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020061:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020064:	40                   	inc    eax
c0020065:	83 c4 10             	add    esp,0x10
c0020068:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c002006b:	85 d2                	test   edx,edx
c002006d:	75 0c                	jne    c002007b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c002006f:	83 ec 0c             	sub    esp,0xc
c0020072:	6a 08                	push   0x8
c0020074:	e8 38 65 ff ff       	call   c00165b1 <malloc>
c0020079:	eb 0c                	jmp    c0020087 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c002007b:	c1 e0 03             	shl    eax,0x3
c002007e:	51                   	push   ecx
c002007f:	51                   	push   ecx
c0020080:	50                   	push   eax
c0020081:	52                   	push   edx
c0020082:	e8 16 65 ff ff       	call   c001659d <realloc>
c0020087:	83 c4 10             	add    esp,0x10
c002008a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c002008d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0020090:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0020093:	8d 74 24 18          	lea    esi,[esp+0x18]
c0020097:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c002009b:	b9 08 00 00 00       	mov    ecx,0x8
c00200a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200a2:	31 f6                	xor    esi,esi
c00200a4:	50                   	push   eax
c00200a5:	68 00 01 00 00       	push   0x100
c00200aa:	6a 00                	push   0x0
c00200ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00200b0:	50                   	push   eax
c00200b1:	e8 3a 04 fe ff       	call   c00004f0 <memset>
c00200b6:	83 c4 10             	add    esp,0x10
c00200b9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00200c1:	eb 27                	jmp    c00200ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00200c3:	83 f8 3d             	cmp    eax,0x3d
c00200c6:	74 1e                	je     c00200e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00200c8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00200ce:	7f 07                	jg     c00200d7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00200d0:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00200d4:	46                   	inc    esi
c00200d5:	eb 13                	jmp    c00200ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00200d7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00200df:	eb 09                	jmp    c00200ea <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00200e1:	83 f8 3d             	cmp    eax,0x3d
c00200e4:	75 ea                	jne    c00200d0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00200e6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00200ea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00200ef:	0f 85 99 fe ff ff    	jne    c001ff8e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	53                   	push   ebx
c00200f9:	e8 c6 a5 ff ff       	call   c001a6c4 <File::close()>
c00200fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020103:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0020106:	81 c4 3c 01 00 00    	add    esp,0x13c
c002010c:	5b                   	pop    ebx
c002010d:	5e                   	pop    esi
c002010e:	5f                   	pop    edi
c002010f:	5d                   	pop    ebp
c0020110:	c3                   	ret    
c0020111:	90                   	nop

c0020112 <EnvVarContainer::__loadSystem()>:
c0020112:	83 ec 10             	sub    esp,0x10
c0020115:	68 60 44 03 c0       	push   0xc0034460
c002011a:	68 ec 2a 03 c0       	push   0xc0032aec
c002011f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020123:	e8 c6 fd ff ff       	call   c001feee <EnvVarContainer::loadFrom(char const*, char const*)>
c0020128:	83 c4 1c             	add    esp,0x1c
c002012b:	c3                   	ret    

c002012c <EnvVarContainer::__loadUser()>:
c002012c:	c3                   	ret    
c002012d:	90                   	nop

c002012e <EnvVarContainer::EnvVarContainer(Process*)>:
c002012e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020140:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020147:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002014e:	90                   	nop
c002014f:	c3                   	ret    

c0020150 <EnvVarContainer::~EnvVarContainer()>:
c0020150:	83 ec 0c             	sub    esp,0xc
c0020153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020157:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002015a:	85 c0                	test   eax,eax
c002015c:	74 1d                	je     c002017b <EnvVarContainer::~EnvVarContainer()+0x2b>
c002015e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020162:	8b 00                	mov    eax,DWORD PTR [eax]
c0020164:	85 c0                	test   eax,eax
c0020166:	74 13                	je     c002017b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0020168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002016c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002016f:	83 ec 0c             	sub    esp,0xc
c0020172:	50                   	push   eax
c0020173:	e8 49 64 ff ff       	call   c00165c1 <free>
c0020178:	83 c4 10             	add    esp,0x10
c002017b:	90                   	nop
c002017c:	83 c4 0c             	add    esp,0xc
c002017f:	c3                   	ret    

c0020180 <KeGetEnv(Process*, char const*)>:
c0020180:	53                   	push   ebx
c0020181:	83 ec 08             	sub    esp,0x8
c0020184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020188:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002018c:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c0020192:	74 04                	je     c0020198 <KeGetEnv(Process*, char const*)+0x18>
c0020194:	85 c0                	test   eax,eax
c0020196:	75 0b                	jne    c00201a3 <KeGetEnv(Process*, char const*)+0x23>
c0020198:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c002019d:	85 c0                	test   eax,eax
c002019f:	75 19                	jne    c00201ba <KeGetEnv(Process*, char const*)+0x3a>
c00201a1:	eb 27                	jmp    c00201ca <KeGetEnv(Process*, char const*)+0x4a>
c00201a3:	52                   	push   edx
c00201a4:	52                   	push   edx
c00201a5:	53                   	push   ebx
c00201a6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00201ac:	e8 3b fc ff ff       	call   c001fdec <EnvVarContainer::getEnv(char const*)>
c00201b1:	83 c4 10             	add    esp,0x10
c00201b4:	85 c0                	test   eax,eax
c00201b6:	75 28                	jne    c00201e0 <KeGetEnv(Process*, char const*)+0x60>
c00201b8:	eb de                	jmp    c0020198 <KeGetEnv(Process*, char const*)+0x18>
c00201ba:	52                   	push   edx
c00201bb:	52                   	push   edx
c00201bc:	53                   	push   ebx
c00201bd:	50                   	push   eax
c00201be:	e8 29 fc ff ff       	call   c001fdec <EnvVarContainer::getEnv(char const*)>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	85 c0                	test   eax,eax
c00201c8:	75 16                	jne    c00201e0 <KeGetEnv(Process*, char const*)+0x60>
c00201ca:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00201ce:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c00201d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00201d7:	83 c4 08             	add    esp,0x8
c00201da:	5b                   	pop    ebx
c00201db:	e9 0c fc ff ff       	jmp    c001fdec <EnvVarContainer::getEnv(char const*)>
c00201e0:	83 c4 08             	add    esp,0x8
c00201e3:	5b                   	pop    ebx
c00201e4:	c3                   	ret    

c00201e5 <KeSetEnvSystem(char const*, char const*)>:
c00201e5:	83 ec 10             	sub    esp,0x10
c00201e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201f0:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c00201f6:	e8 2f fc ff ff       	call   c001fe2a <EnvVarContainer::setEnv(char const*, char const*)>
c00201fb:	83 c4 1c             	add    esp,0x1c
c00201fe:	c3                   	ret    

c00201ff <KeSetEnvUser(char const*, char const*)>:
c00201ff:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020204:	85 c0                	test   eax,eax
c0020206:	74 15                	je     c002021d <KeSetEnvUser(char const*, char const*)+0x1e>
c0020208:	83 ec 10             	sub    esp,0x10
c002020b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002020f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020213:	50                   	push   eax
c0020214:	e8 11 fc ff ff       	call   c001fe2a <EnvVarContainer::setEnv(char const*, char const*)>
c0020219:	83 c4 1c             	add    esp,0x1c
c002021c:	c3                   	ret    
c002021d:	c3                   	ret    

c002021e <KeSetEnvProcess(Process*, char const*, char const*)>:
c002021e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020222:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020228:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002022c:	e9 f9 fb ff ff       	jmp    c001fe2a <EnvVarContainer::setEnv(char const*, char const*)>

c0020231 <KeDeleteEnvSystem(char const*)>:
c0020231:	c3                   	ret    

c0020232 <KeDeleteEnvUser(char const*)>:
c0020232:	c3                   	ret    

c0020233 <KeDeleteEnvProcess(Process*, char const*)>:
c0020233:	c3                   	ret    

c0020234 <KeNewProcessEnv(Process*)>:
c0020234:	83 ec 28             	sub    esp,0x28
c0020237:	6a 0c                	push   0xc
c0020239:	e8 73 63 ff ff       	call   c00165b1 <malloc>
c002023e:	5a                   	pop    edx
c002023f:	59                   	pop    ecx
c0020240:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020244:	50                   	push   eax
c0020245:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020249:	e8 e0 fe ff ff       	call   c002012e <EnvVarContainer::EnvVarContainer(Process*)>
c002024e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020252:	83 c4 2c             	add    esp,0x2c
c0020255:	c3                   	ret    

c0020256 <KeCopyProcessEnv(Process*, Process*)>:
c0020256:	57                   	push   edi
c0020257:	56                   	push   esi
c0020258:	53                   	push   ebx
c0020259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025d:	83 ec 0c             	sub    esp,0xc
c0020260:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0020266:	6a 0c                	push   0xc
c0020268:	e8 44 63 ff ff       	call   c00165b1 <malloc>
c002026d:	89 c3                	mov    ebx,eax
c002026f:	58                   	pop    eax
c0020270:	5a                   	pop    edx
c0020271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020275:	53                   	push   ebx
c0020276:	e8 b3 fe ff ff       	call   c002012e <EnvVarContainer::EnvVarContainer(Process*)>
c002027b:	8b 07                	mov    eax,DWORD PTR [edi]
c002027d:	89 03                	mov    DWORD PTR [ebx],eax
c002027f:	c1 e0 03             	shl    eax,0x3
c0020282:	89 04 24             	mov    DWORD PTR [esp],eax
c0020285:	e8 27 63 ff ff       	call   c00165b1 <malloc>
c002028a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c002028d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c002028f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0020292:	c1 e1 03             	shl    ecx,0x3
c0020295:	89 c7                	mov    edi,eax
c0020297:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	89 d8                	mov    eax,ebx
c002029e:	5b                   	pop    ebx
c002029f:	5e                   	pop    esi
c00202a0:	5f                   	pop    edi
c00202a1:	c3                   	ret    

c00202a2 <KeLoadSystemEnv()>:
c00202a2:	53                   	push   ebx
c00202a3:	83 ec 14             	sub    esp,0x14
c00202a6:	6a 0c                	push   0xc
c00202a8:	e8 04 63 ff ff       	call   c00165b1 <malloc>
c00202ad:	89 c3                	mov    ebx,eax
c00202af:	58                   	pop    eax
c00202b0:	5a                   	pop    edx
c00202b1:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00202b7:	53                   	push   ebx
c00202b8:	e8 71 fe ff ff       	call   c002012e <EnvVarContainer::EnvVarContainer(Process*)>
c00202bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202c0:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c00202c6:	e8 47 fe ff ff       	call   c0020112 <EnvVarContainer::__loadSystem()>
c00202cb:	83 c4 18             	add    esp,0x18
c00202ce:	5b                   	pop    ebx
c00202cf:	c3                   	ret    

c00202d0 <KeLoadUserEnv()>:
c00202d0:	53                   	push   ebx
c00202d1:	83 ec 14             	sub    esp,0x14
c00202d4:	6a 0c                	push   0xc
c00202d6:	e8 d6 62 ff ff       	call   c00165b1 <malloc>
c00202db:	89 c3                	mov    ebx,eax
c00202dd:	58                   	pop    eax
c00202de:	5a                   	pop    edx
c00202df:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00202e5:	53                   	push   ebx
c00202e6:	e8 43 fe ff ff       	call   c002012e <EnvVarContainer::EnvVarContainer(Process*)>
c00202eb:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c00202f1:	83 c4 18             	add    esp,0x18
c00202f4:	5b                   	pop    ebx
c00202f5:	c3                   	ret    

c00202f6 <KeFlushEnv()>:
c00202f6:	c3                   	ret    

c00202f7 <KeGetProcessTotalEnvCount(Process*)>:
c00202f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202fb:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020301:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020307:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c002030c:	8b 00                	mov    eax,DWORD PTR [eax]
c002030e:	03 01                	add    eax,DWORD PTR [ecx]
c0020310:	85 d2                	test   edx,edx
c0020312:	74 02                	je     c0020316 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020314:	03 02                	add    eax,DWORD PTR [edx]
c0020316:	c3                   	ret    

c0020317 <KeGetProcessEnvPair(Process*, int)>:
c0020317:	57                   	push   edi
c0020318:	56                   	push   esi
c0020319:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002031f:	53                   	push   ebx
c0020320:	85 f6                	test   esi,esi
c0020322:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020326:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002032a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020330:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020334:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020336:	75 16                	jne    c002034e <KeGetProcessEnvPair(Process*, int)+0x37>
c0020338:	39 c2                	cmp    edx,eax
c002033a:	7c 16                	jl     c0020352 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002033c:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c0020342:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020344:	01 c6                	add    esi,eax
c0020346:	39 d6                	cmp    esi,edx
c0020348:	7e 3c                	jle    c0020386 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002034a:	29 c2                	sub    edx,eax
c002034c:	eb 04                	jmp    c0020352 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002034e:	39 c2                	cmp    edx,eax
c0020350:	7d 05                	jge    c0020357 <KeGetProcessEnvPair(Process*, int)+0x40>
c0020352:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020355:	eb 20                	jmp    c0020377 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020357:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020359:	8d 0c 07             	lea    ecx,[edi+eax*1]
c002035c:	39 d1                	cmp    ecx,edx
c002035e:	7e 04                	jle    c0020364 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0020360:	29 c2                	sub    edx,eax
c0020362:	eb 10                	jmp    c0020374 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0020364:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c002036a:	03 0e                	add    ecx,DWORD PTR [esi]
c002036c:	39 d1                	cmp    ecx,edx
c002036e:	7e 16                	jle    c0020386 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020370:	29 c2                	sub    edx,eax
c0020372:	29 fa                	sub    edx,edi
c0020374:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0020377:	8d 14 d0             	lea    edx,[eax+edx*8]
c002037a:	8b 02                	mov    eax,DWORD PTR [edx]
c002037c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c002037f:	89 03                	mov    DWORD PTR [ebx],eax
c0020381:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0020384:	eb 1d                	jmp    c00203a3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0020386:	83 ec 0c             	sub    esp,0xc
c0020389:	68 0e 2b 03 c0       	push   0xc0032b0e
c002038e:	e8 c7 00 00 00       	call   c002045a <KePanic(char const*)>
c0020393:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020399:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00203a0:	83 c4 10             	add    esp,0x10
c00203a3:	89 d8                	mov    eax,ebx
c00203a5:	5b                   	pop    ebx
c00203a6:	5e                   	pop    esi
c00203a7:	5f                   	pop    edi
c00203a8:	c2 04 00             	ret    0x4

c00203ab <CPU::current()>:
c00203ab:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00203b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00203b6:	c3                   	ret    

c00203b7 <operator new(unsigned long)>:
c00203b7:	e9 f5 61 ff ff       	jmp    c00165b1 <malloc>

c00203bc <operator delete(void*)>:
c00203bc:	e9 10 62 ff ff       	jmp    c00165d1 <rfree>

c00203c1 <disableIRQs()>:
c00203c1:	fa                   	cli    
c00203c2:	c3                   	ret    

c00203c3 <enableIRQs()>:
c00203c3:	fb                   	sti    
c00203c4:	c3                   	ret    

c00203c5 <lockScheduler()>:
c00203c5:	fa                   	cli    
c00203c6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00203cc:	c3                   	ret    

c00203cd <unlockScheduler()>:
c00203cd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00203d2:	48                   	dec    eax
c00203d3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00203d8:	75 01                	jne    c00203db <unlockScheduler()+0xe>
c00203da:	fb                   	sti    
c00203db:	c3                   	ret    

c00203dc <lockStuff()>:
c00203dc:	fa                   	cli    
c00203dd:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00203e3:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c00203e9:	c3                   	ret    

c00203ea <unlockStuff()>:
c00203ea:	83 ec 0c             	sub    esp,0xc
c00203ed:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00203f2:	48                   	dec    eax
c00203f3:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00203f8:	75 18                	jne    c0020412 <unlockStuff()+0x28>
c00203fa:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020401:	74 0f                	je     c0020412 <unlockStuff()+0x28>
c0020403:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002040d:	e8 5e 50 00 00       	call   c0025470 <schedule()>
c0020412:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020417:	48                   	dec    eax
c0020418:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002041d:	75 01                	jne    c0020420 <unlockStuff()+0x36>
c002041f:	fb                   	sti    
c0020420:	83 c4 0c             	add    esp,0xc
c0020423:	c3                   	ret    

c0020424 <Virt::getAKernelVAS()>:
c0020424:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020429:	c3                   	ret    

c002042a <__not_memcpy>:
c002042a:	57                   	push   edi
c002042b:	56                   	push   esi
c002042c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020430:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020434:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020438:	89 c7                	mov    edi,eax
c002043a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002043c:	5e                   	pop    esi
c002043d:	5f                   	pop    edi
c002043e:	c3                   	ret    
c002043f:	90                   	nop

c0020440 <Mutex::Mutex()>:
c0020440:	83 ec 0c             	sub    esp,0xc
c0020443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020447:	83 ec 08             	sub    esp,0x8
c002044a:	6a 01                	push   0x1
c002044c:	50                   	push   eax
c002044d:	e8 b2 03 00 00       	call   c0020804 <Semaphore::Semaphore(int)>
c0020452:	83 c4 10             	add    esp,0x10
c0020455:	90                   	nop
c0020456:	83 c4 0c             	add    esp,0xc
c0020459:	c3                   	ret    

c002045a <KePanic(char const*)>:
c002045a:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c0020461:	e9 04 6d 00 00       	jmp    c002716a <HalPanic(char const*)>

c0020466 <KePowerThread(void*)>:
c0020466:	83 ec 0c             	sub    esp,0xc
c0020469:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002046e:	48                   	dec    eax
c002046f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020474:	75 01                	jne    c0020477 <KePowerThread(void*)+0x11>
c0020476:	fb                   	sti    
c0020477:	83 ec 0c             	sub    esp,0xc
c002047a:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020481:	6a 0a                	push   0xa
c0020483:	e8 d4 51 00 00       	call   c002565c <sleep(unsigned int)>
c0020488:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c002048f:	83 c4 10             	add    esp,0x10
c0020492:	eb e3                	jmp    c0020477 <KePowerThread(void*)+0x11>

c0020494 <KeChangePowerSettings(PowerSettings)>:
c0020494:	57                   	push   edi
c0020495:	b9 09 00 00 00       	mov    ecx,0x9
c002049a:	56                   	push   esi
c002049b:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00204a0:	fc                   	cld    
c00204a1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00204a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204a7:	5e                   	pop    esi
c00204a8:	5f                   	pop    edi
c00204a9:	c3                   	ret    

c00204aa <KeUserIOReceived()>:
c00204aa:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00204b4:	c3                   	ret    

c00204b5 <KeHandlePowerButton()>:
c00204b5:	83 ec 0c             	sub    esp,0xc
c00204b8:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00204bd:	83 f8 02             	cmp    eax,0x2
c00204c0:	75 10                	jne    c00204d2 <KeHandlePowerButton()+0x1d>
c00204c2:	83 ec 0c             	sub    esp,0xc
c00204c5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00204cb:	e8 f8 56 ff ff       	call   c0015bc8 <Computer::shutdown()>
c00204d0:	eb 11                	jmp    c00204e3 <KeHandlePowerButton()+0x2e>
c00204d2:	48                   	dec    eax
c00204d3:	75 11                	jne    c00204e6 <KeHandlePowerButton()+0x31>
c00204d5:	83 ec 0c             	sub    esp,0xc
c00204d8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00204de:	e8 15 57 ff ff       	call   c0015bf8 <Computer::sleep()>
c00204e3:	83 c4 10             	add    esp,0x10
c00204e6:	83 c4 0c             	add    esp,0xc
c00204e9:	c3                   	ret    

c00204ea <KeHandleSleepButton()>:
c00204ea:	83 ec 0c             	sub    esp,0xc
c00204ed:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c00204f2:	83 f8 02             	cmp    eax,0x2
c00204f5:	75 10                	jne    c0020507 <KeHandleSleepButton()+0x1d>
c00204f7:	83 ec 0c             	sub    esp,0xc
c00204fa:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020500:	e8 c3 56 ff ff       	call   c0015bc8 <Computer::shutdown()>
c0020505:	eb 11                	jmp    c0020518 <KeHandleSleepButton()+0x2e>
c0020507:	48                   	dec    eax
c0020508:	75 11                	jne    c002051b <KeHandleSleepButton()+0x31>
c002050a:	83 ec 0c             	sub    esp,0xc
c002050d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020513:	e8 e0 56 ff ff       	call   c0015bf8 <Computer::sleep()>
c0020518:	83 c4 10             	add    esp,0x10
c002051b:	83 c4 0c             	add    esp,0xc
c002051e:	c3                   	ret    

c002051f <KeSetupPowerManager()>:
c002051f:	83 ec 0c             	sub    esp,0xc
c0020522:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002052c:	68 f0 00 00 00       	push   0xf0
c0020531:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020538:	6a 00                	push   0x0
c002053a:	68 66 04 02 c0       	push   0xc0020466
c002053f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020545:	e8 d6 4c 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c002054a:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020554:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002055e:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020568:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c0020572:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c002057c:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c0020586:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c0020590:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c002059a:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00205a4:	83 c4 1c             	add    esp,0x1c
c00205a7:	c3                   	ret    

c00205a8 <KeRand()>:
c00205a8:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00205b2:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00205bc:	53                   	push   ebx
c00205bd:	01 c1                	add    ecx,eax
c00205bf:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00205c4:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00205ca:	01 ca                	add    edx,ecx
c00205cc:	05 ef 04 b5 00       	add    eax,0xb504ef
c00205d1:	83 d2 00             	adc    edx,0x0
c00205d4:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00205d9:	0f b7 da             	movzx  ebx,dx
c00205dc:	89 da                	mov    edx,ebx
c00205de:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00205e4:	0f ac d0 0e          	shrd   eax,edx,0xe
c00205e8:	5b                   	pop    ebx
c00205e9:	c3                   	ret    

c00205ea <KeSeedRand(unsigned int)>:
c00205ea:	53                   	push   ebx
c00205eb:	83 ec 08             	sub    esp,0x8
c00205ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00205f2:	e8 92 6e 00 00       	call   c0027489 <HalGetRand()>
c00205f7:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020601:	31 d8                	xor    eax,ebx
c0020603:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020608:	e8 9b ff ff ff       	call   c00205a8 <KeRand()>
c002060d:	83 c4 08             	add    esp,0x8
c0020610:	5b                   	pop    ebx
c0020611:	eb 95                	jmp    c00205a8 <KeRand()>

c0020613 <KeInitRand()>:
c0020613:	83 ec 0c             	sub    esp,0xc
c0020616:	e8 63 6c 00 00       	call   c002727e <HalQueryPerformanceCounter()>
c002061b:	0f 20 da             	mov    edx,cr3
c002061e:	0f 22 da             	mov    cr3,edx
c0020621:	0f 20 da             	mov    edx,cr3
c0020624:	0f 22 da             	mov    cr3,edx
c0020627:	0f 20 da             	mov    edx,cr3
c002062a:	0f 22 da             	mov    cr3,edx
c002062d:	0f 20 da             	mov    edx,cr3
c0020630:	0f 22 da             	mov    cr3,edx
c0020633:	83 ec 0c             	sub    esp,0xc
c0020636:	35 03 8a 95 38       	xor    eax,0x38958a03
c002063b:	50                   	push   eax
c002063c:	e8 a9 ff ff ff       	call   c00205ea <KeSeedRand(unsigned int)>
c0020641:	83 c4 1c             	add    esp,0x1c
c0020644:	c3                   	ret    
c0020645:	66 90                	xchg   ax,ax
c0020647:	90                   	nop

c0020648 <KeResolveCompatibilitySymbol(char*)>:
c0020648:	83 ec 0c             	sub    esp,0xc
c002064b:	83 ec 08             	sub    esp,0x8
c002064e:	68 28 2b 03 c0       	push   0xc0032b28
c0020653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020657:	e8 f4 00 fe ff       	call   c0000750 <strcmp>
c002065c:	83 c4 10             	add    esp,0x10
c002065f:	85 c0                	test   eax,eax
c0020661:	0f 94 c0             	sete   al
c0020664:	0f b6 c0             	movzx  eax,al
c0020667:	85 c0                	test   eax,eax
c0020669:	74 0d                	je     c0020678 <KeResolveCompatibilitySymbol(char*)+0x30>
c002066b:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c0020670:	e9 8b 01 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020675:	8d 76 00             	lea    esi,[esi+0x0]
c0020678:	83 ec 08             	sub    esp,0x8
c002067b:	68 31 2b 03 c0       	push   0xc0032b31
c0020680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020684:	e8 c7 00 fe ff       	call   c0000750 <strcmp>
c0020689:	83 c4 10             	add    esp,0x10
c002068c:	85 c0                	test   eax,eax
c002068e:	0f 94 c0             	sete   al
c0020691:	0f b6 c0             	movzx  eax,al
c0020694:	85 c0                	test   eax,eax
c0020696:	74 0c                	je     c00206a4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0020698:	b8 70 e8 02 c0       	mov    eax,0xc002e870
c002069d:	e9 5e 01 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00206a2:	66 90                	xchg   ax,ax
c00206a4:	83 ec 08             	sub    esp,0x8
c00206a7:	68 3b 2b 03 c0       	push   0xc0032b3b
c00206ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206b0:	e8 9b 00 fe ff       	call   c0000750 <strcmp>
c00206b5:	83 c4 10             	add    esp,0x10
c00206b8:	85 c0                	test   eax,eax
c00206ba:	0f 94 c0             	sete   al
c00206bd:	0f b6 c0             	movzx  eax,al
c00206c0:	85 c0                	test   eax,eax
c00206c2:	74 0c                	je     c00206d0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00206c4:	b8 a4 e5 02 c0       	mov    eax,0xc002e5a4
c00206c9:	e9 32 01 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00206ce:	66 90                	xchg   ax,ax
c00206d0:	83 ec 08             	sub    esp,0x8
c00206d3:	68 44 2b 03 c0       	push   0xc0032b44
c00206d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206dc:	e8 6f 00 fe ff       	call   c0000750 <strcmp>
c00206e1:	83 c4 10             	add    esp,0x10
c00206e4:	85 c0                	test   eax,eax
c00206e6:	0f 94 c0             	sete   al
c00206e9:	0f b6 c0             	movzx  eax,al
c00206ec:	85 c0                	test   eax,eax
c00206ee:	74 0c                	je     c00206fc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00206f0:	b8 5a 04 02 c0       	mov    eax,0xc002045a
c00206f5:	e9 06 01 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00206fa:	66 90                	xchg   ax,ax
c00206fc:	83 ec 08             	sub    esp,0x8
c00206ff:	68 57 2b 03 c0       	push   0xc0032b57
c0020704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020708:	e8 43 00 fe ff       	call   c0000750 <strcmp>
c002070d:	83 c4 10             	add    esp,0x10
c0020710:	85 c0                	test   eax,eax
c0020712:	0f 94 c0             	sete   al
c0020715:	0f b6 c0             	movzx  eax,al
c0020718:	85 c0                	test   eax,eax
c002071a:	74 0c                	je     c0020728 <KeResolveCompatibilitySymbol(char*)+0xe0>
c002071c:	b8 f7 fc 01 c0       	mov    eax,0xc001fcf7
c0020721:	e9 da 00 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020726:	66 90                	xchg   ax,ax
c0020728:	83 ec 08             	sub    esp,0x8
c002072b:	68 74 2b 03 c0       	push   0xc0032b74
c0020730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020734:	e8 17 00 fe ff       	call   c0000750 <strcmp>
c0020739:	83 c4 10             	add    esp,0x10
c002073c:	85 c0                	test   eax,eax
c002073e:	0f 94 c0             	sete   al
c0020741:	0f b6 c0             	movzx  eax,al
c0020744:	85 c0                	test   eax,eax
c0020746:	74 0c                	je     c0020754 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020748:	b8 70 e9 02 c0       	mov    eax,0xc002e970
c002074d:	e9 ae 00 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020752:	66 90                	xchg   ax,ax
c0020754:	83 ec 08             	sub    esp,0x8
c0020757:	68 7e 2b 03 c0       	push   0xc0032b7e
c002075c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020760:	e8 eb ff fd ff       	call   c0000750 <strcmp>
c0020765:	83 c4 10             	add    esp,0x10
c0020768:	85 c0                	test   eax,eax
c002076a:	0f 94 c0             	sete   al
c002076d:	0f b6 c0             	movzx  eax,al
c0020770:	85 c0                	test   eax,eax
c0020772:	74 0c                	je     c0020780 <KeResolveCompatibilitySymbol(char*)+0x138>
c0020774:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0020779:	e9 82 00 00 00       	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002077e:	66 90                	xchg   ax,ax
c0020780:	83 ec 08             	sub    esp,0x8
c0020783:	68 87 2b 03 c0       	push   0xc0032b87
c0020788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002078c:	e8 bf ff fd ff       	call   c0000750 <strcmp>
c0020791:	83 c4 10             	add    esp,0x10
c0020794:	85 c0                	test   eax,eax
c0020796:	0f 94 c0             	sete   al
c0020799:	0f b6 c0             	movzx  eax,al
c002079c:	85 c0                	test   eax,eax
c002079e:	74 08                	je     c00207a8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00207a0:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00207a5:	eb 59                	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207a7:	90                   	nop
c00207a8:	83 ec 08             	sub    esp,0x8
c00207ab:	68 9f 2b 03 c0       	push   0xc0032b9f
c00207b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207b4:	e8 97 ff fd ff       	call   c0000750 <strcmp>
c00207b9:	83 c4 10             	add    esp,0x10
c00207bc:	85 c0                	test   eax,eax
c00207be:	0f 94 c0             	sete   al
c00207c1:	0f b6 c0             	movzx  eax,al
c00207c4:	85 c0                	test   eax,eax
c00207c6:	74 08                	je     c00207d0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00207c8:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00207cd:	eb 31                	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207cf:	90                   	nop
c00207d0:	83 ec 08             	sub    esp,0x8
c00207d3:	68 ac 2b 03 c0       	push   0xc0032bac
c00207d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207dc:	e8 6f ff fd ff       	call   c0000750 <strcmp>
c00207e1:	83 c4 10             	add    esp,0x10
c00207e4:	85 c0                	test   eax,eax
c00207e6:	0f 94 c0             	sete   al
c00207e9:	0f b6 c0             	movzx  eax,al
c00207ec:	85 c0                	test   eax,eax
c00207ee:	74 08                	je     c00207f8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00207f0:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c00207f5:	eb 09                	jmp    c0020800 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00207f7:	90                   	nop
c00207f8:	b8 00 00 00 00       	mov    eax,0x0
c00207fd:	8d 76 00             	lea    esi,[esi+0x0]
c0020800:	83 c4 0c             	add    esp,0xc
c0020803:	c3                   	ret    

c0020804 <Semaphore::Semaphore(int)>:
c0020804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020808:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002080c:	89 10                	mov    DWORD PTR [eax],edx
c002080e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020812:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002081d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020828:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002082f:	90                   	nop
c0020830:	c3                   	ret    
c0020831:	90                   	nop
c0020832:	66 90                	xchg   ax,ax

c0020834 <Semaphore::tryAcquire()>:
c0020834:	83 ec 0c             	sub    esp,0xc
c0020837:	fa                   	cli    
c0020838:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002083d:	83 c0 01             	add    eax,0x1
c0020840:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020845:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002084a:	83 c0 01             	add    eax,0x1
c002084d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020856:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020859:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085d:	8b 00                	mov    eax,DWORD PTR [eax]
c002085f:	39 c2                	cmp    edx,eax
c0020861:	7d 5d                	jge    c00208c0 <Semaphore::tryAcquire()+0x8c>
c0020863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020867:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002086a:	8d 50 01             	lea    edx,[eax+0x1]
c002086d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020871:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020874:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020879:	83 e8 01             	sub    eax,0x1
c002087c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020881:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020886:	85 c0                	test   eax,eax
c0020888:	75 1a                	jne    c00208a4 <Semaphore::tryAcquire()+0x70>
c002088a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002088f:	85 c0                	test   eax,eax
c0020891:	74 11                	je     c00208a4 <Semaphore::tryAcquire()+0x70>
c0020893:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002089d:	e8 ce 4b 00 00       	call   c0025470 <schedule()>
c00208a2:	66 90                	xchg   ax,ax
c00208a4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208a9:	83 e8 01             	sub    eax,0x1
c00208ac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208b1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208b6:	85 c0                	test   eax,eax
c00208b8:	75 02                	jne    c00208bc <Semaphore::tryAcquire()+0x88>
c00208ba:	fb                   	sti    
c00208bb:	90                   	nop
c00208bc:	b0 01                	mov    al,0x1
c00208be:	eb 4c                	jmp    c002090c <Semaphore::tryAcquire()+0xd8>
c00208c0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208c5:	83 e8 01             	sub    eax,0x1
c00208c8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208cd:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208d2:	85 c0                	test   eax,eax
c00208d4:	75 1a                	jne    c00208f0 <Semaphore::tryAcquire()+0xbc>
c00208d6:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00208db:	85 c0                	test   eax,eax
c00208dd:	74 11                	je     c00208f0 <Semaphore::tryAcquire()+0xbc>
c00208df:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00208e9:	e8 82 4b 00 00       	call   c0025470 <schedule()>
c00208ee:	66 90                	xchg   ax,ax
c00208f0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208f5:	83 e8 01             	sub    eax,0x1
c00208f8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208fd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020902:	85 c0                	test   eax,eax
c0020904:	75 02                	jne    c0020908 <Semaphore::tryAcquire()+0xd4>
c0020906:	fb                   	sti    
c0020907:	90                   	nop
c0020908:	b0 00                	mov    al,0x0
c002090a:	66 90                	xchg   ax,ax
c002090c:	83 c4 0c             	add    esp,0xc
c002090f:	c3                   	ret    

c0020910 <Semaphore::assertLocked(char const*)>:
c0020910:	83 ec 0c             	sub    esp,0xc
c0020913:	fa                   	cli    
c0020914:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020919:	83 c0 01             	add    eax,0x1
c002091c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020921:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020926:	83 c0 01             	add    eax,0x1
c0020929:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020932:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020939:	8b 00                	mov    eax,DWORD PTR [eax]
c002093b:	39 c2                	cmp    edx,eax
c002093d:	7d 11                	jge    c0020950 <Semaphore::assertLocked(char const*)+0x40>
c002093f:	83 ec 0c             	sub    esp,0xc
c0020942:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020946:	e8 0f fb ff ff       	call   c002045a <KePanic(char const*)>
c002094b:	83 c4 10             	add    esp,0x10
c002094e:	66 90                	xchg   ax,ax
c0020950:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020955:	83 e8 01             	sub    eax,0x1
c0020958:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002095d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020962:	85 c0                	test   eax,eax
c0020964:	75 1a                	jne    c0020980 <Semaphore::assertLocked(char const*)+0x70>
c0020966:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002096b:	85 c0                	test   eax,eax
c002096d:	74 11                	je     c0020980 <Semaphore::assertLocked(char const*)+0x70>
c002096f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020979:	e8 f2 4a 00 00       	call   c0025470 <schedule()>
c002097e:	66 90                	xchg   ax,ax
c0020980:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020985:	83 e8 01             	sub    eax,0x1
c0020988:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002098d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020992:	85 c0                	test   eax,eax
c0020994:	75 02                	jne    c0020998 <Semaphore::assertLocked(char const*)+0x88>
c0020996:	fb                   	sti    
c0020997:	90                   	nop
c0020998:	90                   	nop
c0020999:	83 c4 0c             	add    esp,0xc
c002099c:	c3                   	ret    
c002099d:	90                   	nop
c002099e:	66 90                	xchg   ax,ax

c00209a0 <Semaphore::acquire(int)>:
c00209a0:	83 ec 1c             	sub    esp,0x1c
c00209a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00209a8:	0f 84 9a 00 00 00    	je     c0020a48 <Semaphore::acquire(int)+0xa8>
c00209ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00209b6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00209bb:	90                   	nop
c00209bc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00209c1:	85 c0                	test   eax,eax
c00209c3:	74 77                	je     c0020a3c <Semaphore::acquire(int)+0x9c>
c00209c5:	83 ec 0c             	sub    esp,0xc
c00209c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00209cc:	e8 63 fe ff ff       	call   c0020834 <Semaphore::tryAcquire()>
c00209d1:	83 c4 10             	add    esp,0x10
c00209d4:	83 f0 01             	xor    eax,0x1
c00209d7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00209db:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00209df:	83 f0 01             	xor    eax,0x1
c00209e2:	0f b6 c0             	movzx  eax,al
c00209e5:	85 c0                	test   eax,eax
c00209e7:	75 4f                	jne    c0020a38 <Semaphore::acquire(int)+0x98>
c00209e9:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00209ee:	7f 2c                	jg     c0020a1c <Semaphore::acquire(int)+0x7c>
c00209f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00209f4:	89 d0                	mov    eax,edx
c00209f6:	c1 e0 02             	shl    eax,0x2
c00209f9:	01 d0                	add    eax,edx
c00209fb:	01 c0                	add    eax,eax
c00209fd:	83 ec 0c             	sub    esp,0xc
c0020a00:	50                   	push   eax
c0020a01:	e8 42 4c 00 00       	call   c0025648 <milliTenthSleep(unsigned int)>
c0020a06:	83 c4 10             	add    esp,0x10
c0020a09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020a0d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020a11:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020a19:	eb a1                	jmp    c00209bc <Semaphore::acquire(int)+0x1c>
c0020a1b:	90                   	nop
c0020a1c:	83 ec 0c             	sub    esp,0xc
c0020a1f:	68 90 01 00 00       	push   0x190
c0020a24:	e8 1f 4c 00 00       	call   c0025648 <milliTenthSleep(unsigned int)>
c0020a29:	83 c4 10             	add    esp,0x10
c0020a2c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020a31:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020a36:	eb 84                	jmp    c00209bc <Semaphore::acquire(int)+0x1c>
c0020a38:	90                   	nop
c0020a39:	8d 76 00             	lea    esi,[esi+0x0]
c0020a3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a40:	e9 ff 00 00 00       	jmp    c0020b44 <Semaphore::acquire(int)+0x1a4>
c0020a45:	8d 76 00             	lea    esi,[esi+0x0]
c0020a48:	fa                   	cli    
c0020a49:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a4e:	83 c0 01             	add    eax,0x1
c0020a51:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a56:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020a5b:	83 c0 01             	add    eax,0x1
c0020a5e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020a63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a67:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a70:	39 c2                	cmp    edx,eax
c0020a72:	7d 14                	jge    c0020a88 <Semaphore::acquire(int)+0xe8>
c0020a74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020a7b:	8d 50 01             	lea    edx,[eax+0x1]
c0020a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a82:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020a85:	eb 6d                	jmp    c0020af4 <Semaphore::acquire(int)+0x154>
c0020a87:	90                   	nop
c0020a88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020a8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a8f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020a9d:	85 c0                	test   eax,eax
c0020a9f:	75 13                	jne    c0020ab4 <Semaphore::acquire(int)+0x114>
c0020aa1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020aa6:	8b 10                	mov    edx,DWORD PTR [eax]
c0020aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020aac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020aaf:	eb 17                	jmp    c0020ac8 <Semaphore::acquire(int)+0x128>
c0020ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0020ab4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020abd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020ac0:	8b 12                	mov    edx,DWORD PTR [edx]
c0020ac2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ac8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020acd:	8b 10                	mov    edx,DWORD PTR [eax]
c0020acf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ad3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020ad6:	83 ec 0c             	sub    esp,0xc
c0020ad9:	68 bc 2b 03 c0       	push   0xc0032bbc
c0020ade:	e8 5e 89 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0020ae3:	83 c4 10             	add    esp,0x10
c0020ae6:	83 ec 0c             	sub    esp,0xc
c0020ae9:	6a 05                	push   0x5
c0020aeb:	e8 3c 4a 00 00       	call   c002552c <blockTask(TaskState)>
c0020af0:	83 c4 10             	add    esp,0x10
c0020af3:	90                   	nop
c0020af4:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020af9:	83 e8 01             	sub    eax,0x1
c0020afc:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020b01:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b06:	85 c0                	test   eax,eax
c0020b08:	75 1a                	jne    c0020b24 <Semaphore::acquire(int)+0x184>
c0020b0a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020b0f:	85 c0                	test   eax,eax
c0020b11:	74 11                	je     c0020b24 <Semaphore::acquire(int)+0x184>
c0020b13:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020b1d:	e8 4e 49 00 00       	call   c0025470 <schedule()>
c0020b22:	66 90                	xchg   ax,ax
c0020b24:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b29:	83 e8 01             	sub    eax,0x1
c0020b2c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020b31:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b36:	85 c0                	test   eax,eax
c0020b38:	75 02                	jne    c0020b3c <Semaphore::acquire(int)+0x19c>
c0020b3a:	fb                   	sti    
c0020b3b:	90                   	nop
c0020b3c:	b8 00 00 00 00       	mov    eax,0x0
c0020b41:	8d 76 00             	lea    esi,[esi+0x0]
c0020b44:	83 c4 1c             	add    esp,0x1c
c0020b47:	c3                   	ret    

c0020b48 <Semaphore::acquire()>:
c0020b48:	83 ec 0c             	sub    esp,0xc
c0020b4b:	83 ec 08             	sub    esp,0x8
c0020b4e:	6a 00                	push   0x0
c0020b50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b54:	e8 47 fe ff ff       	call   c00209a0 <Semaphore::acquire(int)>
c0020b59:	83 c4 10             	add    esp,0x10
c0020b5c:	90                   	nop
c0020b5d:	83 c4 0c             	add    esp,0xc
c0020b60:	c3                   	ret    
c0020b61:	90                   	nop
c0020b62:	66 90                	xchg   ax,ax

c0020b64 <Semaphore::release()>:
c0020b64:	83 ec 1c             	sub    esp,0x1c
c0020b67:	fa                   	cli    
c0020b68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020b6d:	83 c0 01             	add    eax,0x1
c0020b70:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020b75:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020b7a:	83 c0 01             	add    eax,0x1
c0020b7d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b89:	85 c0                	test   eax,eax
c0020b8b:	74 2b                	je     c0020bb8 <Semaphore::release()+0x54>
c0020b8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020b94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b9c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020b9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ba3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020ba6:	83 ec 0c             	sub    esp,0xc
c0020ba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020bad:	e8 b6 4b 00 00       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c0020bb2:	83 c4 10             	add    esp,0x10
c0020bb5:	eb 15                	jmp    c0020bcc <Semaphore::release()+0x68>
c0020bb7:	90                   	nop
c0020bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bbc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020bbf:	8d 50 ff             	lea    edx,[eax-0x1]
c0020bc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020bc6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0020bcc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020bd1:	83 e8 01             	sub    eax,0x1
c0020bd4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020bd9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020bde:	85 c0                	test   eax,eax
c0020be0:	75 1a                	jne    c0020bfc <Semaphore::release()+0x98>
c0020be2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020be7:	85 c0                	test   eax,eax
c0020be9:	74 11                	je     c0020bfc <Semaphore::release()+0x98>
c0020beb:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020bf5:	e8 76 48 00 00       	call   c0025470 <schedule()>
c0020bfa:	66 90                	xchg   ax,ax
c0020bfc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c01:	83 e8 01             	sub    eax,0x1
c0020c04:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020c09:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020c0e:	85 c0                	test   eax,eax
c0020c10:	75 02                	jne    c0020c14 <Semaphore::release()+0xb0>
c0020c12:	fb                   	sti    
c0020c13:	90                   	nop
c0020c14:	90                   	nop
c0020c15:	83 c4 1c             	add    esp,0x1c
c0020c18:	c3                   	ret    

c0020c19 <KiSigKill(int)>:
c0020c19:	83 ec 0c             	sub    esp,0xc
c0020c1c:	6a 00                	push   0x0
c0020c1e:	6a 00                	push   0x0
c0020c20:	6a ff                	push   0xffffffff
c0020c22:	6a 01                	push   0x1
c0020c24:	e8 29 44 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020c29:	83 c4 1c             	add    esp,0x1c
c0020c2c:	c3                   	ret    

c0020c2d <KiDefaultSignalHandlerIgnore(int)>:
c0020c2d:	c3                   	ret    

c0020c2e <KiDefaultSignalHandlerPause(int)>:
c0020c2e:	57                   	push   edi
c0020c2f:	b9 07 00 00 00       	mov    ecx,0x7
c0020c34:	56                   	push   esi
c0020c35:	be 17 2c 03 c0       	mov    esi,0xc0032c17
c0020c3a:	83 ec 24             	sub    esp,0x24
c0020c3d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020c41:	fc                   	cld    
c0020c42:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020c44:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020c48:	50                   	push   eax
c0020c49:	6a 00                	push   0x0
c0020c4b:	6a 00                	push   0x0
c0020c4d:	6a 27                	push   0x27
c0020c4f:	e8 fe 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020c54:	83 c4 34             	add    esp,0x34
c0020c57:	5e                   	pop    esi
c0020c58:	5f                   	pop    edi
c0020c59:	c3                   	ret    

c0020c5a <KiDefaultSignalHandlerResume(int)>:
c0020c5a:	57                   	push   edi
c0020c5b:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020c60:	56                   	push   esi
c0020c61:	be 33 2c 03 c0       	mov    esi,0xc0032c33
c0020c66:	83 ec 24             	sub    esp,0x24
c0020c69:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020c6d:	fc                   	cld    
c0020c6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c70:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020c74:	50                   	push   eax
c0020c75:	6a 00                	push   0x0
c0020c77:	6a 00                	push   0x0
c0020c79:	6a 27                	push   0x27
c0020c7b:	e8 d2 43 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020c80:	83 c4 34             	add    esp,0x34
c0020c83:	5e                   	pop    esi
c0020c84:	5f                   	pop    edi
c0020c85:	c3                   	ret    

c0020c86 <KeDeinitSignals(SigHandlerBlock*)>:
c0020c86:	e9 36 59 ff ff       	jmp    c00165c1 <free>

c0020c8b <KeInitSignals()>:
c0020c8b:	53                   	push   ebx
c0020c8c:	83 ec 14             	sub    esp,0x14
c0020c8f:	68 c8 00 00 00       	push   0xc8
c0020c94:	e8 18 59 ff ff       	call   c00165b1 <malloc>
c0020c99:	83 c4 0c             	add    esp,0xc
c0020c9c:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020ca6:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020cb0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020cb7:	89 c3                	mov    ebx,eax
c0020cb9:	6a 20                	push   0x20
c0020cbb:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020cc1:	6a 00                	push   0x0
c0020cc3:	50                   	push   eax
c0020cc4:	e8 27 f8 fd ff       	call   c00004f0 <memset>
c0020cc9:	83 c4 0c             	add    esp,0xc
c0020ccc:	6a 44                	push   0x44
c0020cce:	6a 00                	push   0x0
c0020cd0:	53                   	push   ebx
c0020cd1:	e8 1a f8 fd ff       	call   c00004f0 <memset>
c0020cd6:	89 d8                	mov    eax,ebx
c0020cd8:	83 c4 18             	add    esp,0x18
c0020cdb:	5b                   	pop    ebx
c0020cdc:	c3                   	ret    

c0020cdd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020cdd:	53                   	push   ebx
c0020cde:	b8 01 00 00 00       	mov    eax,0x1
c0020ce3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020ce7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ceb:	83 f9 10             	cmp    ecx,0x10
c0020cee:	7f 21                	jg     c0020d11 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020cf0:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cf7:	89 03                	mov    DWORD PTR [ebx],eax
c0020cf9:	b8 01 00 00 00       	mov    eax,0x1
c0020cfe:	d3 e0                	shl    eax,cl
c0020d00:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020d04:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020d07:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020d0f:	31 c0                	xor    eax,eax
c0020d11:	5b                   	pop    ebx
c0020d12:	c3                   	ret    

c0020d13 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020d13:	55                   	push   ebp
c0020d14:	57                   	push   edi
c0020d15:	bf 08 00 00 00       	mov    edi,0x8
c0020d1a:	56                   	push   esi
c0020d1b:	53                   	push   ebx
c0020d1c:	83 ec 18             	sub    esp,0x18
c0020d1f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020d23:	68 50 2c 03 c0       	push   0xc0032c50
c0020d28:	e8 14 87 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0020d2d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020d34:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020d3a:	83 c4 10             	add    esp,0x10
c0020d3d:	31 c9                	xor    ecx,ecx
c0020d3f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020d43:	99                   	cdq    
c0020d44:	f7 ff                	idiv   edi
c0020d46:	8d 42 24             	lea    eax,[edx+0x24]
c0020d49:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020d4d:	85 f6                	test   esi,esi
c0020d4f:	75 1a                	jne    c0020d6b <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020d51:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020d55:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020d59:	50                   	push   eax
c0020d5a:	50                   	push   eax
c0020d5b:	52                   	push   edx
c0020d5c:	68 61 2c 03 c0       	push   0xc0032c61
c0020d61:	e8 db 86 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0020d66:	83 c4 10             	add    esp,0x10
c0020d69:	eb 1b                	jmp    c0020d86 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020d6b:	41                   	inc    ecx
c0020d6c:	83 f9 08             	cmp    ecx,0x8
c0020d6f:	75 ce                	jne    c0020d3f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020d71:	83 ec 0c             	sub    esp,0xc
c0020d74:	be 01 00 00 00       	mov    esi,0x1
c0020d79:	68 82 2c 03 c0       	push   0xc0032c82
c0020d7e:	e8 be 86 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0020d83:	83 c4 10             	add    esp,0x10
c0020d86:	83 c4 0c             	add    esp,0xc
c0020d89:	89 f0                	mov    eax,esi
c0020d8b:	5b                   	pop    ebx
c0020d8c:	5e                   	pop    esi
c0020d8d:	5f                   	pop    edi
c0020d8e:	5d                   	pop    ebp
c0020d8f:	c3                   	ret    

c0020d90 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020d90:	55                   	push   ebp
c0020d91:	57                   	push   edi
c0020d92:	56                   	push   esi
c0020d93:	53                   	push   ebx
c0020d94:	51                   	push   ecx
c0020d95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d99:	85 db                	test   ebx,ebx
c0020d9b:	0f 84 bc 00 00 00    	je     c0020e5d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020da1:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020da8:	0f 84 af 00 00 00    	je     c0020e5d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020dae:	31 c9                	xor    ecx,ecx
c0020db0:	bf 08 00 00 00       	mov    edi,0x8
c0020db5:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020dbb:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020dbe:	99                   	cdq    
c0020dbf:	f7 ff                	idiv   edi
c0020dc1:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020dc8:	85 ed                	test   ebp,ebp
c0020dca:	0f 84 9e 00 00 00    	je     c0020e6e <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020dd0:	89 e9                	mov    ecx,ebp
c0020dd2:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020dd8:	bf 01 00 00 00       	mov    edi,0x1
c0020ddd:	89 04 24             	mov    DWORD PTR [esp],eax
c0020de0:	d3 e7                	shl    edi,cl
c0020de2:	31 c9                	xor    ecx,ecx
c0020de4:	b8 01 00 00 00       	mov    eax,0x1
c0020de9:	d3 e0                	shl    eax,cl
c0020deb:	85 04 24             	test   DWORD PTR [esp],eax
c0020dee:	74 06                	je     c0020df6 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020df0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020df4:	75 67                	jne    c0020e5d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020df6:	41                   	inc    ecx
c0020df7:	83 f9 11             	cmp    ecx,0x11
c0020dfa:	75 e8                	jne    c0020de4 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020dfc:	46                   	inc    esi
c0020dfd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e00:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020e06:	09 f8                	or     eax,edi
c0020e08:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020e13:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020e19:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020e20:	31 c0                	xor    eax,eax
c0020e22:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020e2a:	74 09                	je     c0020e35 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020e2c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020e33:	eb 06                	jmp    c0020e3b <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020e35:	40                   	inc    eax
c0020e36:	83 f8 08             	cmp    eax,0x8
c0020e39:	75 e7                	jne    c0020e22 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020e3b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020e3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e42:	83 fd 09             	cmp    ebp,0x9
c0020e45:	89 2a                	mov    DWORD PTR [edx],ebp
c0020e47:	75 07                	jne    c0020e50 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020e49:	b8 19 0c 02 c0       	mov    eax,0xc0020c19
c0020e4e:	eb 31                	jmp    c0020e81 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020e50:	83 f8 01             	cmp    eax,0x1
c0020e53:	75 0c                	jne    c0020e61 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020e55:	f7 d7                	not    edi
c0020e57:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020e5d:	31 c0                	xor    eax,eax
c0020e5f:	eb 20                	jmp    c0020e81 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020e61:	85 c0                	test   eax,eax
c0020e63:	75 1c                	jne    c0020e81 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020e65:	8b 04 ad c0 44 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbb40]
c0020e6c:	eb 13                	jmp    c0020e81 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020e6e:	46                   	inc    esi
c0020e6f:	41                   	inc    ecx
c0020e70:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020e76:	83 f9 08             	cmp    ecx,0x8
c0020e79:	0f 85 36 ff ff ff    	jne    c0020db5 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020e7f:	eb dc                	jmp    c0020e5d <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020e81:	5a                   	pop    edx
c0020e82:	5b                   	pop    ebx
c0020e83:	5e                   	pop    esi
c0020e84:	5f                   	pop    edi
c0020e85:	5d                   	pop    ebp
c0020e86:	c3                   	ret    

c0020e87 <KiCheckSignalZ>:
c0020e87:	83 ec 10             	sub    esp,0x10
c0020e8a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e8e:	50                   	push   eax
c0020e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020e94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020e97:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020e9d:	e8 ee fe ff ff       	call   c0020d90 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020ea2:	5a                   	pop    edx
c0020ea3:	31 d2                	xor    edx,edx
c0020ea5:	59                   	pop    ecx
c0020ea6:	85 c0                	test   eax,eax
c0020ea8:	74 19                	je     c0020ec3 <KiCheckSignalZ+0x3c>
c0020eaa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020eb0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020eb3:	89 02                	mov    DWORD PTR [edx],eax
c0020eb5:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ec0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020ec3:	89 d0                	mov    eax,edx
c0020ec5:	83 c4 10             	add    esp,0x10
c0020ec8:	c3                   	ret    

c0020ec9 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020ec9:	56                   	push   esi
c0020eca:	53                   	push   ebx
c0020ecb:	bb 01 00 00 00       	mov    ebx,0x1
c0020ed0:	52                   	push   edx
c0020ed1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020ed5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020ed9:	d3 e3                	shl    ebx,cl
c0020edb:	83 f9 10             	cmp    ecx,0x10
c0020ede:	7f 08                	jg     c0020ee8 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020ee0:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020ee6:	75 10                	jne    c0020ef8 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020ee8:	83 ec 0c             	sub    esp,0xc
c0020eeb:	68 93 2c 03 c0       	push   0xc0032c93
c0020ef0:	e8 65 f5 ff ff       	call   c002045a <KePanic(char const*)>
c0020ef5:	83 c4 10             	add    esp,0x10
c0020ef8:	f7 d3                	not    ebx
c0020efa:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020f00:	58                   	pop    eax
c0020f01:	5b                   	pop    ebx
c0020f02:	5e                   	pop    esi
c0020f03:	c3                   	ret    

c0020f04 <KiFinishSignalZ>:
c0020f04:	53                   	push   ebx
c0020f05:	83 ec 10             	sub    esp,0x10
c0020f08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f0c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f17:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020f1d:	e8 a7 ff ff ff       	call   c0020ec9 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020f22:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020f28:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020f2f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020f36:	83 c4 18             	add    esp,0x18
c0020f39:	5b                   	pop    ebx
c0020f3a:	c3                   	ret    

c0020f3b <SysSeekDir(regs*)>:
c0020f3b:	31 c0                	xor    eax,eax
c0020f3d:	31 d2                	xor    edx,edx
c0020f3f:	c3                   	ret    

c0020f40 <SysTellDir(regs*)>:
c0020f40:	31 c0                	xor    eax,eax
c0020f42:	31 d2                	xor    edx,edx
c0020f44:	c3                   	ret    

c0020f45 <SysVerify(regs*)>:
c0020f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f49:	31 d2                	xor    edx,edx
c0020f4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f4e:	c3                   	ret    

c0020f4f <SysGetArgc(regs*)>:
c0020f4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f57:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020f5d:	89 c2                	mov    edx,eax
c0020f5f:	c1 fa 1f             	sar    edx,0x1f
c0020f62:	c3                   	ret    

c0020f63 <SysTTYName(regs*)>:
c0020f63:	b8 01 00 00 00       	mov    eax,0x1
c0020f68:	31 d2                	xor    edx,edx
c0020f6a:	c3                   	ret    

c0020f6b <SysFormatDisk(regs*)>:
c0020f6b:	56                   	push   esi
c0020f6c:	53                   	push   ebx
c0020f6d:	83 ec 04             	sub    esp,0x4
c0020f70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020f74:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020f7a:	eb 28                	jmp    c0020fa4 <SysFormatDisk(regs*)+0x39>
c0020f7c:	83 ec 0c             	sub    esp,0xc
c0020f7f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020f82:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020f85:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020f87:	51                   	push   ecx
c0020f88:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020f8b:	51                   	push   ecx
c0020f8c:	50                   	push   eax
c0020f8d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020f94:	50                   	push   eax
c0020f95:	53                   	push   ebx
c0020f96:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020f99:	83 c4 20             	add    esp,0x20
c0020f9c:	83 f8 08             	cmp    eax,0x8
c0020f9f:	75 14                	jne    c0020fb5 <SysFormatDisk(regs*)+0x4a>
c0020fa1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020fa4:	85 db                	test   ebx,ebx
c0020fa6:	75 d4                	jne    c0020f7c <SysFormatDisk(regs*)+0x11>
c0020fa8:	83 c4 04             	add    esp,0x4
c0020fab:	b8 03 00 00 00       	mov    eax,0x3
c0020fb0:	31 d2                	xor    edx,edx
c0020fb2:	5b                   	pop    ebx
c0020fb3:	5e                   	pop    esi
c0020fb4:	c3                   	ret    
c0020fb5:	85 c0                	test   eax,eax
c0020fb7:	74 1f                	je     c0020fd8 <SysFormatDisk(regs*)+0x6d>
c0020fb9:	83 f8 09             	cmp    eax,0x9
c0020fbc:	74 0d                	je     c0020fcb <SysFormatDisk(regs*)+0x60>
c0020fbe:	83 c4 04             	add    esp,0x4
c0020fc1:	b8 02 00 00 00       	mov    eax,0x2
c0020fc6:	31 d2                	xor    edx,edx
c0020fc8:	5b                   	pop    ebx
c0020fc9:	5e                   	pop    esi
c0020fca:	c3                   	ret    
c0020fcb:	83 c4 04             	add    esp,0x4
c0020fce:	b8 01 00 00 00       	mov    eax,0x1
c0020fd3:	31 d2                	xor    edx,edx
c0020fd5:	5b                   	pop    ebx
c0020fd6:	5e                   	pop    esi
c0020fd7:	c3                   	ret    
c0020fd8:	83 c4 04             	add    esp,0x4
c0020fdb:	31 c0                	xor    eax,eax
c0020fdd:	31 d2                	xor    edx,edx
c0020fdf:	5b                   	pop    ebx
c0020fe0:	5e                   	pop    esi
c0020fe1:	c3                   	ret    

c0020fe2 <SysSetDiskVolumeLabel(regs*)>:
c0020fe2:	56                   	push   esi
c0020fe3:	53                   	push   ebx
c0020fe4:	83 ec 04             	sub    esp,0x4
c0020fe7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020feb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020fee:	83 f8 19             	cmp    eax,0x19
c0020ff1:	77 33                	ja     c0021026 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020ff3:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020ffa:	85 c9                	test   ecx,ecx
c0020ffc:	74 28                	je     c0021026 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020ffe:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0021001:	85 db                	test   ebx,ebx
c0021003:	74 21                	je     c0021026 <SysSetDiskVolumeLabel(regs*)+0x44>
c0021005:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c002100b:	85 d2                	test   edx,edx
c002100d:	74 17                	je     c0021026 <SysSetDiskVolumeLabel(regs*)+0x44>
c002100f:	8b 32                	mov    esi,DWORD PTR [edx]
c0021011:	53                   	push   ebx
c0021012:	50                   	push   eax
c0021013:	51                   	push   ecx
c0021014:	52                   	push   edx
c0021015:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0021018:	83 c4 10             	add    esp,0x10
c002101b:	89 c2                	mov    edx,eax
c002101d:	83 c4 04             	add    esp,0x4
c0021020:	c1 fa 1f             	sar    edx,0x1f
c0021023:	5b                   	pop    ebx
c0021024:	5e                   	pop    esi
c0021025:	c3                   	ret    
c0021026:	83 c4 04             	add    esp,0x4
c0021029:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002102e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021033:	5b                   	pop    ebx
c0021034:	5e                   	pop    esi
c0021035:	c3                   	ret    

c0021036 <SysGetDiskVolumeLabel(regs*)>:
c0021036:	57                   	push   edi
c0021037:	56                   	push   esi
c0021038:	53                   	push   ebx
c0021039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002103d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021040:	83 fa 19             	cmp    edx,0x19
c0021043:	77 3c                	ja     c0021081 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021045:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c002104c:	85 c9                	test   ecx,ecx
c002104e:	74 31                	je     c0021081 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021050:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0021053:	85 db                	test   ebx,ebx
c0021055:	74 2a                	je     c0021081 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021057:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c002105a:	85 f6                	test   esi,esi
c002105c:	74 23                	je     c0021081 <SysGetDiskVolumeLabel(regs*)+0x4b>
c002105e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0021064:	85 c0                	test   eax,eax
c0021066:	74 19                	je     c0021081 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0021068:	83 ec 0c             	sub    esp,0xc
c002106b:	8b 38                	mov    edi,DWORD PTR [eax]
c002106d:	56                   	push   esi
c002106e:	53                   	push   ebx
c002106f:	52                   	push   edx
c0021070:	51                   	push   ecx
c0021071:	50                   	push   eax
c0021072:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0021075:	83 c4 20             	add    esp,0x20
c0021078:	89 c2                	mov    edx,eax
c002107a:	5b                   	pop    ebx
c002107b:	c1 fa 1f             	sar    edx,0x1f
c002107e:	5e                   	pop    esi
c002107f:	5f                   	pop    edi
c0021080:	c3                   	ret    
c0021081:	5b                   	pop    ebx
c0021082:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0021087:	ba ff ff ff ff       	mov    edx,0xffffffff
c002108c:	5e                   	pop    esi
c002108d:	5f                   	pop    edi
c002108e:	c3                   	ret    

c002108f <SysShutdown(regs*)>:
c002108f:	83 ec 0c             	sub    esp,0xc
c0021092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021096:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021099:	85 c0                	test   eax,eax
c002109b:	74 18                	je     c00210b5 <SysShutdown(regs*)+0x26>
c002109d:	83 f8 01             	cmp    eax,0x1
c00210a0:	74 38                	je     c00210da <SysShutdown(regs*)+0x4b>
c00210a2:	83 f8 02             	cmp    eax,0x2
c00210a5:	74 24                	je     c00210cb <SysShutdown(regs*)+0x3c>
c00210a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210b1:	83 c4 0c             	add    esp,0xc
c00210b4:	c3                   	ret    
c00210b5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00210ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00210bc:	6a 00                	push   0x0
c00210be:	6a 00                	push   0x0
c00210c0:	6a 00                	push   0x0
c00210c2:	50                   	push   eax
c00210c3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00210c6:	83 c4 10             	add    esp,0x10
c00210c9:	eb dc                	jmp    c00210a7 <SysShutdown(regs*)+0x18>
c00210cb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00210d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00210d2:	6a 00                	push   0x0
c00210d4:	6a 00                	push   0x0
c00210d6:	6a 01                	push   0x1
c00210d8:	eb e8                	jmp    c00210c2 <SysShutdown(regs*)+0x33>
c00210da:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c00210df:	85 c0                	test   eax,eax
c00210e1:	74 02                	je     c00210e5 <SysShutdown(regs*)+0x56>
c00210e3:	ff d0                	call   eax
c00210e5:	31 c0                	xor    eax,eax
c00210e7:	31 d2                	xor    edx,edx
c00210e9:	83 c4 0c             	add    esp,0xc
c00210ec:	c3                   	ret    

c00210ed <SysRealpath(regs*)>:
c00210ed:	83 ec 0c             	sub    esp,0xc
c00210f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00210f7:	85 d2                	test   edx,edx
c00210f9:	74 07                	je     c0021102 <SysRealpath(regs*)+0x15>
c00210fb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00210fe:	85 c0                	test   eax,eax
c0021100:	75 0b                	jne    c002110d <SysRealpath(regs*)+0x20>
c0021102:	b8 01 00 00 00       	mov    eax,0x1
c0021107:	31 d2                	xor    edx,edx
c0021109:	83 c4 0c             	add    esp,0xc
c002110c:	c3                   	ret    
c002110d:	6a 00                	push   0x0
c002110f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021115:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0021118:	81 c1 0c 01 00 00    	add    ecx,0x10c
c002111e:	51                   	push   ecx
c002111f:	52                   	push   edx
c0021120:	50                   	push   eax
c0021121:	e8 2a 92 ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021126:	83 c4 10             	add    esp,0x10
c0021129:	31 c0                	xor    eax,eax
c002112b:	31 d2                	xor    edx,edx
c002112d:	83 c4 0c             	add    esp,0xc
c0021130:	c3                   	ret    

c0021131 <SysReadDir(regs*)>:
c0021131:	53                   	push   ebx
c0021132:	83 ec 18             	sub    esp,0x18
c0021135:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021139:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002113c:	83 f8 02             	cmp    eax,0x2
c002113f:	76 61                	jbe    c00211a2 <SysReadDir(regs*)+0x71>
c0021141:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0021148:	77 49                	ja     c0021193 <SysReadDir(regs*)+0x62>
c002114a:	83 ec 0c             	sub    esp,0xc
c002114d:	50                   	push   eax
c002114e:	e8 5c 6e ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c0021153:	83 c4 10             	add    esp,0x10
c0021156:	85 c0                	test   eax,eax
c0021158:	74 39                	je     c0021193 <SysReadDir(regs*)+0x62>
c002115a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021162:	83 ec 0c             	sub    esp,0xc
c0021165:	8b 10                	mov    edx,DWORD PTR [eax]
c0021167:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002116b:	51                   	push   ecx
c002116c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c002116f:	51                   	push   ecx
c0021170:	6a 00                	push   0x0
c0021172:	68 10 01 00 00       	push   0x110
c0021177:	50                   	push   eax
c0021178:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002117b:	83 c4 20             	add    esp,0x20
c002117e:	85 c0                	test   eax,eax
c0021180:	74 29                	je     c00211ab <SysReadDir(regs*)+0x7a>
c0021182:	83 f8 07             	cmp    eax,0x7
c0021185:	74 1b                	je     c00211a2 <SysReadDir(regs*)+0x71>
c0021187:	b8 02 00 00 00       	mov    eax,0x2
c002118c:	31 d2                	xor    edx,edx
c002118e:	83 c4 18             	add    esp,0x18
c0021191:	5b                   	pop    ebx
c0021192:	c3                   	ret    
c0021193:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021198:	ba ff ff ff ff       	mov    edx,0xffffffff
c002119d:	83 c4 18             	add    esp,0x18
c00211a0:	5b                   	pop    ebx
c00211a1:	c3                   	ret    
c00211a2:	b8 01 00 00 00       	mov    eax,0x1
c00211a7:	31 d2                	xor    edx,edx
c00211a9:	eb e3                	jmp    c002118e <SysReadDir(regs*)+0x5d>
c00211ab:	31 c0                	xor    eax,eax
c00211ad:	31 d2                	xor    edx,edx
c00211af:	eb dd                	jmp    c002118e <SysReadDir(regs*)+0x5d>

c00211b1 <SysIsATTY(regs*)>:
c00211b1:	83 ec 0c             	sub    esp,0xc
c00211b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00211bb:	83 f8 02             	cmp    eax,0x2
c00211be:	76 07                	jbe    c00211c7 <SysIsATTY(regs*)+0x16>
c00211c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00211c5:	75 26                	jne    c00211ed <SysIsATTY(regs*)+0x3c>
c00211c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00211cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00211d5:	85 c0                	test   eax,eax
c00211d7:	74 24                	je     c00211fd <SysIsATTY(regs*)+0x4c>
c00211d9:	83 ec 0c             	sub    esp,0xc
c00211dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00211de:	50                   	push   eax
c00211df:	ff 12                	call   DWORD PTR [edx]
c00211e1:	31 d2                	xor    edx,edx
c00211e3:	0f b6 c0             	movzx  eax,al
c00211e6:	83 c4 10             	add    esp,0x10
c00211e9:	83 c4 0c             	add    esp,0xc
c00211ec:	c3                   	ret    
c00211ed:	83 ec 0c             	sub    esp,0xc
c00211f0:	50                   	push   eax
c00211f1:	e8 b9 6d ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c00211f6:	83 c4 10             	add    esp,0x10
c00211f9:	85 c0                	test   eax,eax
c00211fb:	75 dc                	jne    c00211d9 <SysIsATTY(regs*)+0x28>
c00211fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021202:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021207:	83 c4 0c             	add    esp,0xc
c002120a:	c3                   	ret    

c002120b <SysSeek(regs*)>:
c002120b:	53                   	push   ebx
c002120c:	83 ec 08             	sub    esp,0x8
c002120f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021213:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021216:	8d 50 fd             	lea    edx,[eax-0x3]
c0021219:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002121f:	77 32                	ja     c0021253 <SysSeek(regs*)+0x48>
c0021221:	83 ec 0c             	sub    esp,0xc
c0021224:	50                   	push   eax
c0021225:	e8 85 6d ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c002122a:	83 c4 0c             	add    esp,0xc
c002122d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0021230:	31 db                	xor    ebx,ebx
c0021232:	53                   	push   ebx
c0021233:	51                   	push   ecx
c0021234:	50                   	push   eax
c0021235:	e8 ea 94 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c002123a:	83 c4 10             	add    esp,0x10
c002123d:	85 c0                	test   eax,eax
c002123f:	0f 95 c0             	setne  al
c0021242:	31 d2                	xor    edx,edx
c0021244:	0f b6 c0             	movzx  eax,al
c0021247:	f7 d8                	neg    eax
c0021249:	83 d2 00             	adc    edx,0x0
c002124c:	83 c4 08             	add    esp,0x8
c002124f:	f7 da                	neg    edx
c0021251:	5b                   	pop    ebx
c0021252:	c3                   	ret    
c0021253:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021258:	ba ff ff ff ff       	mov    edx,0xffffffff
c002125d:	83 c4 08             	add    esp,0x8
c0021260:	5b                   	pop    ebx
c0021261:	c3                   	ret    

c0021262 <SysTell(regs*)>:
c0021262:	53                   	push   ebx
c0021263:	83 ec 08             	sub    esp,0x8
c0021266:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002126a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002126d:	83 f8 02             	cmp    eax,0x2
c0021270:	76 4e                	jbe    c00212c0 <SysTell(regs*)+0x5e>
c0021272:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021277:	76 19                	jbe    c0021292 <SysTell(regs*)+0x30>
c0021279:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002127c:	31 d2                	xor    edx,edx
c002127e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021284:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002128b:	31 c0                	xor    eax,eax
c002128d:	83 c4 08             	add    esp,0x8
c0021290:	5b                   	pop    ebx
c0021291:	c3                   	ret    
c0021292:	83 ec 0c             	sub    esp,0xc
c0021295:	50                   	push   eax
c0021296:	e8 14 6d ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c002129b:	5a                   	pop    edx
c002129c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002129f:	59                   	pop    ecx
c00212a0:	53                   	push   ebx
c00212a1:	50                   	push   eax
c00212a2:	e8 29 95 ff ff       	call   c001a7d0 <File::tell(unsigned long long*)>
c00212a7:	83 c4 10             	add    esp,0x10
c00212aa:	85 c0                	test   eax,eax
c00212ac:	0f 95 c0             	setne  al
c00212af:	31 d2                	xor    edx,edx
c00212b1:	0f b6 c0             	movzx  eax,al
c00212b4:	f7 d8                	neg    eax
c00212b6:	83 d2 00             	adc    edx,0x0
c00212b9:	83 c4 08             	add    esp,0x8
c00212bc:	f7 da                	neg    edx
c00212be:	5b                   	pop    ebx
c00212bf:	c3                   	ret    
c00212c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212ca:	83 c4 08             	add    esp,0x8
c00212cd:	5b                   	pop    ebx
c00212ce:	c3                   	ret    

c00212cf <SysSize(regs*)>:
c00212cf:	53                   	push   ebx
c00212d0:	83 ec 18             	sub    esp,0x18
c00212d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00212d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212da:	83 f8 02             	cmp    eax,0x2
c00212dd:	76 54                	jbe    c0021333 <SysSize(regs*)+0x64>
c00212df:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212e4:	76 19                	jbe    c00212ff <SysSize(regs*)+0x30>
c00212e6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212e9:	31 d2                	xor    edx,edx
c00212eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212f8:	31 c0                	xor    eax,eax
c00212fa:	83 c4 18             	add    esp,0x18
c00212fd:	5b                   	pop    ebx
c00212fe:	c3                   	ret    
c00212ff:	83 ec 0c             	sub    esp,0xc
c0021302:	50                   	push   eax
c0021303:	e8 a7 6c ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c0021308:	83 c4 0c             	add    esp,0xc
c002130b:	8d 54 24 13          	lea    edx,[esp+0x13]
c002130f:	52                   	push   edx
c0021310:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021313:	52                   	push   edx
c0021314:	50                   	push   eax
c0021315:	e8 4e 96 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c002131a:	83 c4 10             	add    esp,0x10
c002131d:	85 c0                	test   eax,eax
c002131f:	0f 95 c0             	setne  al
c0021322:	31 d2                	xor    edx,edx
c0021324:	0f b6 c0             	movzx  eax,al
c0021327:	f7 d8                	neg    eax
c0021329:	83 d2 00             	adc    edx,0x0
c002132c:	83 c4 18             	add    esp,0x18
c002132f:	f7 da                	neg    edx
c0021331:	5b                   	pop    ebx
c0021332:	c3                   	ret    
c0021333:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021338:	ba ff ff ff ff       	mov    edx,0xffffffff
c002133d:	83 c4 18             	add    esp,0x18
c0021340:	5b                   	pop    ebx
c0021341:	c3                   	ret    

c0021342 <SysSizeFromFilename(regs*)>:
c0021342:	55                   	push   ebp
c0021343:	57                   	push   edi
c0021344:	56                   	push   esi
c0021345:	53                   	push   ebx
c0021346:	81 ec 5c 02 00 00    	sub    esp,0x25c
c002134c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021353:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021356:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021359:	85 f6                	test   esi,esi
c002135b:	74 34                	je     c0021391 <SysSizeFromFilename(regs*)+0x4f>
c002135d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021363:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021366:	83 f8 02             	cmp    eax,0x2
c0021369:	76 2d                	jbe    c0021398 <SysSizeFromFilename(regs*)+0x56>
c002136b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021370:	76 3b                	jbe    c00213ad <SysSizeFromFilename(regs*)+0x6b>
c0021372:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021375:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002137b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021382:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021388:	31 c0                	xor    eax,eax
c002138a:	5b                   	pop    ebx
c002138b:	31 d2                	xor    edx,edx
c002138d:	5e                   	pop    esi
c002138e:	5f                   	pop    edi
c002138f:	5d                   	pop    ebp
c0021390:	c3                   	ret    
c0021391:	89 f8                	mov    eax,edi
c0021393:	83 f8 02             	cmp    eax,0x2
c0021396:	77 d3                	ja     c002136b <SysSizeFromFilename(regs*)+0x29>
c0021398:	81 c4 5c 02 00 00    	add    esp,0x25c
c002139e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213a3:	5b                   	pop    ebx
c00213a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213a9:	5e                   	pop    esi
c00213aa:	5f                   	pop    edi
c00213ab:	5d                   	pop    ebp
c00213ac:	c3                   	ret    
c00213ad:	83 ec 0c             	sub    esp,0xc
c00213b0:	68 14 01 00 00       	push   0x114
c00213b5:	e8 f7 51 ff ff       	call   c00165b1 <malloc>
c00213ba:	6a 01                	push   0x1
c00213bc:	89 c5                	mov    ebp,eax
c00213be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00213c3:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00213c6:	51                   	push   ecx
c00213c7:	57                   	push   edi
c00213c8:	55                   	push   ebp
c00213c9:	e8 9c 91 ff ff       	call   c001a56a <File::File(char const*, Process*, bool)>
c00213ce:	83 c4 1c             	add    esp,0x1c
c00213d1:	8d 44 24 23          	lea    eax,[esp+0x23]
c00213d5:	50                   	push   eax
c00213d6:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00213d9:	53                   	push   ebx
c00213da:	55                   	push   ebp
c00213db:	e8 88 95 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c00213e0:	83 c4 10             	add    esp,0x10
c00213e3:	85 ed                	test   ebp,ebp
c00213e5:	74 15                	je     c00213fc <SysSizeFromFilename(regs*)+0xba>
c00213e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213eb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00213ee:	83 ec 0c             	sub    esp,0xc
c00213f1:	55                   	push   ebp
c00213f2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00213f5:	83 c4 10             	add    esp,0x10
c00213f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213fc:	85 c0                	test   eax,eax
c00213fe:	75 98                	jne    c0021398 <SysSizeFromFilename(regs*)+0x56>
c0021400:	6a 00                	push   0x0
c0021402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021407:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002140a:	05 0c 01 00 00       	add    eax,0x10c
c002140f:	50                   	push   eax
c0021410:	57                   	push   edi
c0021411:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021418:	53                   	push   ebx
c0021419:	e8 32 8f ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002141e:	58                   	pop    eax
c002141f:	5a                   	pop    edx
c0021420:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021424:	50                   	push   eax
c0021425:	53                   	push   ebx
c0021426:	e8 8d 89 ff ff       	call   c0019db8 <KeDereferenceSymlink(char const*, char*)>
c002142b:	83 c4 10             	add    esp,0x10
c002142e:	83 f8 01             	cmp    eax,0x1
c0021431:	74 1a                	je     c002144d <SysSizeFromFilename(regs*)+0x10b>
c0021433:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021438:	74 26                	je     c0021460 <SysSizeFromFilename(regs*)+0x11e>
c002143a:	85 f6                	test   esi,esi
c002143c:	0f 84 40 ff ff ff    	je     c0021382 <SysSizeFromFilename(regs*)+0x40>
c0021442:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021448:	e9 35 ff ff ff       	jmp    c0021382 <SysSizeFromFilename(regs*)+0x40>
c002144d:	85 f6                	test   esi,esi
c002144f:	0f 84 2d ff ff ff    	je     c0021382 <SysSizeFromFilename(regs*)+0x40>
c0021455:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002145b:	e9 22 ff ff ff       	jmp    c0021382 <SysSizeFromFilename(regs*)+0x40>
c0021460:	85 f6                	test   esi,esi
c0021462:	0f 84 1a ff ff ff    	je     c0021382 <SysSizeFromFilename(regs*)+0x40>
c0021468:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002146e:	e9 0f ff ff ff       	jmp    c0021382 <SysSizeFromFilename(regs*)+0x40>

c0021473 <SysSizeFromFilenameNoSymlink(regs*)>:
c0021473:	55                   	push   ebp
c0021474:	57                   	push   edi
c0021475:	56                   	push   esi
c0021476:	53                   	push   ebx
c0021477:	81 ec 5c 02 00 00    	sub    esp,0x25c
c002147d:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0021484:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021487:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002148a:	85 f6                	test   esi,esi
c002148c:	74 34                	je     c00214c2 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c002148e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021494:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021497:	83 f8 02             	cmp    eax,0x2
c002149a:	76 2d                	jbe    c00214c9 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c002149c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00214a1:	76 3b                	jbe    c00214de <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00214a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00214a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214b3:	81 c4 5c 02 00 00    	add    esp,0x25c
c00214b9:	31 c0                	xor    eax,eax
c00214bb:	5b                   	pop    ebx
c00214bc:	31 d2                	xor    edx,edx
c00214be:	5e                   	pop    esi
c00214bf:	5f                   	pop    edi
c00214c0:	5d                   	pop    ebp
c00214c1:	c3                   	ret    
c00214c2:	89 f8                	mov    eax,edi
c00214c4:	83 f8 02             	cmp    eax,0x2
c00214c7:	77 d3                	ja     c002149c <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00214c9:	81 c4 5c 02 00 00    	add    esp,0x25c
c00214cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214d4:	5b                   	pop    ebx
c00214d5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214da:	5e                   	pop    esi
c00214db:	5f                   	pop    edi
c00214dc:	5d                   	pop    ebp
c00214dd:	c3                   	ret    
c00214de:	83 ec 0c             	sub    esp,0xc
c00214e1:	68 14 01 00 00       	push   0x114
c00214e6:	e8 c6 50 ff ff       	call   c00165b1 <malloc>
c00214eb:	6a 00                	push   0x0
c00214ed:	89 c5                	mov    ebp,eax
c00214ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214f4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00214f7:	51                   	push   ecx
c00214f8:	57                   	push   edi
c00214f9:	55                   	push   ebp
c00214fa:	e8 6b 90 ff ff       	call   c001a56a <File::File(char const*, Process*, bool)>
c00214ff:	83 c4 1c             	add    esp,0x1c
c0021502:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021506:	50                   	push   eax
c0021507:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002150a:	53                   	push   ebx
c002150b:	55                   	push   ebp
c002150c:	e8 57 94 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c0021511:	83 c4 10             	add    esp,0x10
c0021514:	85 ed                	test   ebp,ebp
c0021516:	74 15                	je     c002152d <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0021518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002151c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002151f:	83 ec 0c             	sub    esp,0xc
c0021522:	55                   	push   ebp
c0021523:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021526:	83 c4 10             	add    esp,0x10
c0021529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002152d:	85 c0                	test   eax,eax
c002152f:	75 98                	jne    c00214c9 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0021531:	6a 00                	push   0x0
c0021533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021538:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002153b:	05 0c 01 00 00       	add    eax,0x10c
c0021540:	50                   	push   eax
c0021541:	57                   	push   edi
c0021542:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021549:	53                   	push   ebx
c002154a:	e8 01 8e ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002154f:	58                   	pop    eax
c0021550:	5a                   	pop    edx
c0021551:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021555:	50                   	push   eax
c0021556:	53                   	push   ebx
c0021557:	e8 5c 88 ff ff       	call   c0019db8 <KeDereferenceSymlink(char const*, char*)>
c002155c:	83 c4 10             	add    esp,0x10
c002155f:	83 f8 01             	cmp    eax,0x1
c0021562:	74 1a                	je     c002157e <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0021564:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021569:	74 26                	je     c0021591 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c002156b:	85 f6                	test   esi,esi
c002156d:	0f 84 40 ff ff ff    	je     c00214b3 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021573:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021579:	e9 35 ff ff ff       	jmp    c00214b3 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c002157e:	85 f6                	test   esi,esi
c0021580:	0f 84 2d ff ff ff    	je     c00214b3 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021586:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c002158c:	e9 22 ff ff ff       	jmp    c00214b3 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021591:	85 f6                	test   esi,esi
c0021593:	0f 84 1a ff ff ff    	je     c00214b3 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0021599:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002159f:	e9 0f ff ff ff       	jmp    c00214b3 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00215a4 <SysClose(regs*)>:
c00215a4:	53                   	push   ebx
c00215a5:	83 ec 08             	sub    esp,0x8
c00215a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215af:	83 f8 02             	cmp    eax,0x2
c00215b2:	76 41                	jbe    c00215f5 <SysClose(regs*)+0x51>
c00215b4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00215ba:	83 fa 01             	cmp    edx,0x1
c00215bd:	76 2d                	jbe    c00215ec <SysClose(regs*)+0x48>
c00215bf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00215c4:	77 2f                	ja     c00215f5 <SysClose(regs*)+0x51>
c00215c6:	83 ec 0c             	sub    esp,0xc
c00215c9:	50                   	push   eax
c00215ca:	e8 e0 69 ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c00215cf:	89 c3                	mov    ebx,eax
c00215d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00215d4:	e8 eb 90 ff ff       	call   c001a6c4 <File::close()>
c00215d9:	83 c4 10             	add    esp,0x10
c00215dc:	85 db                	test   ebx,ebx
c00215de:	74 0c                	je     c00215ec <SysClose(regs*)+0x48>
c00215e0:	83 ec 0c             	sub    esp,0xc
c00215e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215e5:	53                   	push   ebx
c00215e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00215e9:	83 c4 10             	add    esp,0x10
c00215ec:	31 c0                	xor    eax,eax
c00215ee:	31 d2                	xor    edx,edx
c00215f0:	83 c4 08             	add    esp,0x8
c00215f3:	5b                   	pop    ebx
c00215f4:	c3                   	ret    
c00215f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00215fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00215ff:	83 c4 08             	add    esp,0x8
c0021602:	5b                   	pop    ebx
c0021603:	c3                   	ret    

c0021604 <SysOpenDir(regs*)>:
c0021604:	56                   	push   esi
c0021605:	53                   	push   ebx
c0021606:	83 ec 04             	sub    esp,0x4
c0021609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002160d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021610:	85 c9                	test   ecx,ecx
c0021612:	74 5d                	je     c0021671 <SysOpenDir(regs*)+0x6d>
c0021614:	83 ec 0c             	sub    esp,0xc
c0021617:	68 14 01 00 00       	push   0x114
c002161c:	e8 90 4f ff ff       	call   c00165b1 <malloc>
c0021621:	83 c4 0c             	add    esp,0xc
c0021624:	89 c6                	mov    esi,eax
c0021626:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002162b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002162e:	50                   	push   eax
c002162f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021632:	52                   	push   edx
c0021633:	56                   	push   esi
c0021634:	e8 ef 94 ff ff       	call   c001ab28 <Directory::Directory(char const*, Process*)>
c0021639:	83 c4 10             	add    esp,0x10
c002163c:	85 f6                	test   esi,esi
c002163e:	74 31                	je     c0021671 <SysOpenDir(regs*)+0x6d>
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	56                   	push   esi
c0021644:	e8 a7 95 ff ff       	call   c001abf0 <Directory::open()>
c0021649:	83 c4 10             	add    esp,0x10
c002164c:	85 c0                	test   eax,eax
c002164e:	75 21                	jne    c0021671 <SysOpenDir(regs*)+0x6d>
c0021650:	83 ec 0c             	sub    esp,0xc
c0021653:	56                   	push   esi
c0021654:	e8 59 66 ff ff       	call   c0017cb2 <UnixFile::getFileDescriptor()>
c0021659:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c002165c:	83 c4 10             	add    esp,0x10
c002165f:	89 02                	mov    DWORD PTR [edx],eax
c0021661:	c1 f8 1f             	sar    eax,0x1f
c0021664:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021667:	83 c4 04             	add    esp,0x4
c002166a:	31 c0                	xor    eax,eax
c002166c:	31 d2                	xor    edx,edx
c002166e:	5b                   	pop    ebx
c002166f:	5e                   	pop    esi
c0021670:	c3                   	ret    
c0021671:	83 c4 04             	add    esp,0x4
c0021674:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021679:	ba ff ff ff ff       	mov    edx,0xffffffff
c002167e:	5b                   	pop    ebx
c002167f:	5e                   	pop    esi
c0021680:	c3                   	ret    

c0021681 <SysMakeDir(regs*)>:
c0021681:	56                   	push   esi
c0021682:	53                   	push   ebx
c0021683:	83 ec 10             	sub    esp,0x10
c0021686:	68 14 01 00 00       	push   0x114
c002168b:	e8 21 4f ff ff       	call   c00165b1 <malloc>
c0021690:	83 c4 0c             	add    esp,0xc
c0021693:	89 c3                	mov    ebx,eax
c0021695:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002169a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002169d:	50                   	push   eax
c002169e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00216a2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00216a5:	52                   	push   edx
c00216a6:	53                   	push   ebx
c00216a7:	e8 7c 94 ff ff       	call   c001ab28 <Directory::Directory(char const*, Process*)>
c00216ac:	83 c4 10             	add    esp,0x10
c00216af:	85 db                	test   ebx,ebx
c00216b1:	74 2c                	je     c00216df <SysMakeDir(regs*)+0x5e>
c00216b3:	83 ec 0c             	sub    esp,0xc
c00216b6:	53                   	push   ebx
c00216b7:	e8 14 97 ff ff       	call   c001add0 <Directory::create()>
c00216bc:	89 c6                	mov    esi,eax
c00216be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00216c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00216c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00216c6:	83 c4 10             	add    esp,0x10
c00216c9:	31 c0                	xor    eax,eax
c00216cb:	85 f6                	test   esi,esi
c00216cd:	0f 95 c0             	setne  al
c00216d0:	31 d2                	xor    edx,edx
c00216d2:	f7 d8                	neg    eax
c00216d4:	83 d2 00             	adc    edx,0x0
c00216d7:	83 c4 04             	add    esp,0x4
c00216da:	f7 da                	neg    edx
c00216dc:	5b                   	pop    ebx
c00216dd:	5e                   	pop    esi
c00216de:	c3                   	ret    
c00216df:	83 c4 04             	add    esp,0x4
c00216e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00216e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00216ec:	5b                   	pop    ebx
c00216ed:	5e                   	pop    esi
c00216ee:	c3                   	ret    

c00216ef <SysCloseDir(regs*)>:
c00216ef:	53                   	push   ebx
c00216f0:	83 ec 08             	sub    esp,0x8
c00216f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00216fa:	8d 50 fd             	lea    edx,[eax-0x3]
c00216fd:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0021703:	77 2f                	ja     c0021734 <SysCloseDir(regs*)+0x45>
c0021705:	83 ec 0c             	sub    esp,0xc
c0021708:	50                   	push   eax
c0021709:	e8 a1 68 ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c002170e:	89 c3                	mov    ebx,eax
c0021710:	89 04 24             	mov    DWORD PTR [esp],eax
c0021713:	e8 34 95 ff ff       	call   c001ac4c <Directory::close()>
c0021718:	83 c4 10             	add    esp,0x10
c002171b:	85 db                	test   ebx,ebx
c002171d:	74 0c                	je     c002172b <SysCloseDir(regs*)+0x3c>
c002171f:	83 ec 0c             	sub    esp,0xc
c0021722:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021724:	53                   	push   ebx
c0021725:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021728:	83 c4 10             	add    esp,0x10
c002172b:	31 c0                	xor    eax,eax
c002172d:	31 d2                	xor    edx,edx
c002172f:	83 c4 08             	add    esp,0x8
c0021732:	5b                   	pop    ebx
c0021733:	c3                   	ret    
c0021734:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021739:	ba ff ff ff ff       	mov    edx,0xffffffff
c002173e:	83 c4 08             	add    esp,0x8
c0021741:	5b                   	pop    ebx
c0021742:	c3                   	ret    

c0021743 <SysWait(regs*)>:
c0021743:	83 ec 10             	sub    esp,0x10
c0021746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002174a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c002174d:	52                   	push   edx
c002174e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021751:	51                   	push   ecx
c0021752:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021755:	50                   	push   eax
c0021756:	e8 09 3e 00 00       	call   c0025564 <waitTask(int, int*, int)>
c002175b:	83 c4 1c             	add    esp,0x1c
c002175e:	89 c2                	mov    edx,eax
c0021760:	c1 fa 1f             	sar    edx,0x1f
c0021763:	c3                   	ret    

c0021764 <SysNotImpl(regs*)>:
c0021764:	83 ec 18             	sub    esp,0x18
c0021767:	68 a4 2c 03 c0       	push   0xc0032ca4
c002176c:	e8 e9 ec ff ff       	call   c002045a <KePanic(char const*)>
c0021771:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021776:	ba ff ff ff ff       	mov    edx,0xffffffff
c002177b:	83 c4 1c             	add    esp,0x1c
c002177e:	c3                   	ret    

c002177f <SysPanic(regs*)>:
c002177f:	83 ec 18             	sub    esp,0x18
c0021782:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021786:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021789:	50                   	push   eax
c002178a:	e8 cb ec ff ff       	call   c002045a <KePanic(char const*)>
c002178f:	b8 01 00 00 00       	mov    eax,0x1
c0021794:	31 d2                	xor    edx,edx
c0021796:	83 c4 1c             	add    esp,0x1c
c0021799:	c3                   	ret    

c002179a <SysRmdir(regs*)>:
c002179a:	56                   	push   esi
c002179b:	53                   	push   ebx
c002179c:	83 ec 20             	sub    esp,0x20
c002179f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00217a3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00217a6:	68 14 01 00 00       	push   0x114
c00217ab:	e8 01 4e ff ff       	call   c00165b1 <malloc>
c00217b0:	6a 00                	push   0x0
c00217b2:	89 c3                	mov    ebx,eax
c00217b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00217b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00217bc:	50                   	push   eax
c00217bd:	56                   	push   esi
c00217be:	53                   	push   ebx
c00217bf:	e8 a6 8d ff ff       	call   c001a56a <File::File(char const*, Process*, bool)>
c00217c4:	83 c4 14             	add    esp,0x14
c00217c7:	53                   	push   ebx
c00217c8:	e8 67 90 ff ff       	call   c001a834 <File::unlink()>
c00217cd:	83 c4 10             	add    esp,0x10
c00217d0:	85 db                	test   ebx,ebx
c00217d2:	74 14                	je     c00217e8 <SysRmdir(regs*)+0x4e>
c00217d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00217da:	83 ec 0c             	sub    esp,0xc
c00217dd:	53                   	push   ebx
c00217de:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00217e1:	83 c4 10             	add    esp,0x10
c00217e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217e8:	85 c0                	test   eax,eax
c00217ea:	0f 95 c0             	setne  al
c00217ed:	31 d2                	xor    edx,edx
c00217ef:	0f b6 c0             	movzx  eax,al
c00217f2:	f7 d8                	neg    eax
c00217f4:	83 d2 00             	adc    edx,0x0
c00217f7:	83 c4 14             	add    esp,0x14
c00217fa:	f7 da                	neg    edx
c00217fc:	5b                   	pop    ebx
c00217fd:	5e                   	pop    esi
c00217fe:	c3                   	ret    

c00217ff <SysUnlink(regs*)>:
c00217ff:	56                   	push   esi
c0021800:	53                   	push   ebx
c0021801:	83 ec 20             	sub    esp,0x20
c0021804:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021808:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002180b:	68 14 01 00 00       	push   0x114
c0021810:	e8 9c 4d ff ff       	call   c00165b1 <malloc>
c0021815:	6a 00                	push   0x0
c0021817:	89 c3                	mov    ebx,eax
c0021819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002181e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021821:	50                   	push   eax
c0021822:	56                   	push   esi
c0021823:	53                   	push   ebx
c0021824:	e8 41 8d ff ff       	call   c001a56a <File::File(char const*, Process*, bool)>
c0021829:	83 c4 14             	add    esp,0x14
c002182c:	53                   	push   ebx
c002182d:	e8 02 90 ff ff       	call   c001a834 <File::unlink()>
c0021832:	83 c4 10             	add    esp,0x10
c0021835:	85 db                	test   ebx,ebx
c0021837:	74 14                	je     c002184d <SysUnlink(regs*)+0x4e>
c0021839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002183d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002183f:	83 ec 0c             	sub    esp,0xc
c0021842:	53                   	push   ebx
c0021843:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021846:	83 c4 10             	add    esp,0x10
c0021849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002184d:	85 c0                	test   eax,eax
c002184f:	0f 95 c0             	setne  al
c0021852:	31 d2                	xor    edx,edx
c0021854:	0f b6 c0             	movzx  eax,al
c0021857:	f7 d8                	neg    eax
c0021859:	83 d2 00             	adc    edx,0x0
c002185c:	83 c4 14             	add    esp,0x14
c002185f:	f7 da                	neg    edx
c0021861:	5b                   	pop    ebx
c0021862:	5e                   	pop    esi
c0021863:	c3                   	ret    

c0021864 <SysGetArgv(regs*)>:
c0021864:	83 ec 0c             	sub    esp,0xc
c0021867:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002186b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c002186e:	85 c0                	test   eax,eax
c0021870:	78 2c                	js     c002189e <SysGetArgv(regs*)+0x3a>
c0021872:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0021878:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c002187b:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0021881:	7d 1b                	jge    c002189e <SysGetArgv(regs*)+0x3a>
c0021883:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c002188a:	85 c0                	test   eax,eax
c002188c:	74 18                	je     c00218a6 <SysGetArgv(regs*)+0x42>
c002188e:	83 ec 08             	sub    esp,0x8
c0021891:	50                   	push   eax
c0021892:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0021895:	50                   	push   eax
c0021896:	e8 a5 ed fd ff       	call   c0000640 <strcpy>
c002189b:	83 c4 10             	add    esp,0x10
c002189e:	31 c0                	xor    eax,eax
c00218a0:	31 d2                	xor    edx,edx
c00218a2:	83 c4 0c             	add    esp,0xc
c00218a5:	c3                   	ret    
c00218a6:	b8 01 00 00 00       	mov    eax,0x1
c00218ab:	31 d2                	xor    edx,edx
c00218ad:	83 c4 0c             	add    esp,0xc
c00218b0:	c3                   	ret    

c00218b1 <SysUSleep(regs*)>:
c00218b1:	83 ec 1c             	sub    esp,0x1c
c00218b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00218b8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00218bb:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00218be:	6a 00                	push   0x0
c00218c0:	6a 64                	push   0x64
c00218c2:	52                   	push   edx
c00218c3:	50                   	push   eax
c00218c4:	e8 a7 cf 00 00       	call   c002e870 <__udivdi3>
c00218c9:	83 c4 14             	add    esp,0x14
c00218cc:	50                   	push   eax
c00218cd:	e8 76 3d 00 00       	call   c0025648 <milliTenthSleep(unsigned int)>
c00218d2:	31 c0                	xor    eax,eax
c00218d4:	31 d2                	xor    edx,edx
c00218d6:	83 c4 1c             	add    esp,0x1c
c00218d9:	c3                   	ret    

c00218da <SysSpawn(regs*)>:
c00218da:	56                   	push   esi
c00218db:	53                   	push   ebx
c00218dc:	83 ec 04             	sub    esp,0x4
c00218df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218e3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00218e6:	85 f6                	test   esi,esi
c00218e8:	75 0a                	jne    c00218f4 <SysSpawn(regs*)+0x1a>
c00218ea:	83 c4 04             	add    esp,0x4
c00218ed:	31 c0                	xor    eax,eax
c00218ef:	31 d2                	xor    edx,edx
c00218f1:	5b                   	pop    ebx
c00218f2:	5e                   	pop    esi
c00218f3:	c3                   	ret    
c00218f4:	83 ec 0c             	sub    esp,0xc
c00218f7:	68 24 07 00 00       	push   0x724
c00218fc:	e8 b0 4c ff ff       	call   c00165b1 <malloc>
c0021901:	83 c4 10             	add    esp,0x10
c0021904:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021907:	89 c6                	mov    esi,eax
c0021909:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002190c:	85 c9                	test   ecx,ecx
c002190e:	75 39                	jne    c0021949 <SysSpawn(regs*)+0x6f>
c0021910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021915:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021918:	52                   	push   edx
c0021919:	50                   	push   eax
c002191a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002191d:	50                   	push   eax
c002191e:	56                   	push   esi
c002191f:	e8 c8 34 00 00       	call   c0024dec <Process::Process(char const*, Process*, char**)>
c0021924:	83 c4 10             	add    esp,0x10
c0021927:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c002192e:	75 ba                	jne    c00218ea <SysSpawn(regs*)+0x10>
c0021930:	83 ec 0c             	sub    esp,0xc
c0021933:	56                   	push   esi
c0021934:	e8 f3 39 00 00       	call   c002532c <Process::createUserThread()>
c0021939:	8b 06                	mov    eax,DWORD PTR [esi]
c002193b:	83 c4 10             	add    esp,0x10
c002193e:	89 c2                	mov    edx,eax
c0021940:	83 c4 04             	add    esp,0x4
c0021943:	c1 fa 1f             	sar    edx,0x1f
c0021946:	5b                   	pop    ebx
c0021947:	5e                   	pop    esi
c0021948:	c3                   	ret    
c0021949:	31 c0                	xor    eax,eax
c002194b:	eb cb                	jmp    c0021918 <SysSpawn(regs*)+0x3e>

c002194d <SysGetEnv(regs*)>:
c002194d:	57                   	push   edi
c002194e:	56                   	push   esi
c002194f:	53                   	push   ebx
c0021950:	83 ec 1c             	sub    esp,0x1c
c0021953:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002195c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002195f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021962:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021965:	51                   	push   ecx
c0021966:	e8 8c e9 ff ff       	call   c00202f7 <KeGetProcessTotalEnvCount(Process*)>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	39 c7                	cmp    edi,eax
c0021970:	7c 14                	jl     c0021986 <SysGetEnv(regs*)+0x39>
c0021972:	85 f6                	test   esi,esi
c0021974:	75 0b                	jne    c0021981 <SysGetEnv(regs*)+0x34>
c0021976:	83 c4 10             	add    esp,0x10
c0021979:	31 c0                	xor    eax,eax
c002197b:	5b                   	pop    ebx
c002197c:	31 d2                	xor    edx,edx
c002197e:	5e                   	pop    esi
c002197f:	5f                   	pop    edi
c0021980:	c3                   	ret    
c0021981:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021984:	eb f0                	jmp    c0021976 <SysGetEnv(regs*)+0x29>
c0021986:	8d 44 24 08          	lea    eax,[esp+0x8]
c002198a:	83 ec 04             	sub    esp,0x4
c002198d:	57                   	push   edi
c002198e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0021994:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0021997:	57                   	push   edi
c0021998:	50                   	push   eax
c0021999:	e8 79 e9 ff ff       	call   c0020317 <KeGetProcessEnvPair(Process*, int)>
c002199e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00219a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00219a9:	83 c4 0c             	add    esp,0xc
c00219ac:	85 d2                	test   edx,edx
c00219ae:	75 23                	jne    c00219d3 <SysGetEnv(regs*)+0x86>
c00219b0:	83 ec 0c             	sub    esp,0xc
c00219b3:	50                   	push   eax
c00219b4:	e8 b7 eb fd ff       	call   c0000570 <strlen>
c00219b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00219bc:	89 c3                	mov    ebx,eax
c00219be:	e8 ad eb fd ff       	call   c0000570 <strlen>
c00219c3:	83 c4 10             	add    esp,0x10
c00219c6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00219ca:	83 c4 10             	add    esp,0x10
c00219cd:	31 d2                	xor    edx,edx
c00219cf:	5b                   	pop    ebx
c00219d0:	5e                   	pop    esi
c00219d1:	5f                   	pop    edi
c00219d2:	c3                   	ret    
c00219d3:	83 ec 08             	sub    esp,0x8
c00219d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00219d9:	50                   	push   eax
c00219da:	56                   	push   esi
c00219db:	e8 60 ec fd ff       	call   c0000640 <strcpy>
c00219e0:	58                   	pop    eax
c00219e1:	5a                   	pop    edx
c00219e2:	68 be 2c 03 c0       	push   0xc0032cbe
c00219e7:	56                   	push   esi
c00219e8:	e8 53 ee fd ff       	call   c0000840 <strcat>
c00219ed:	59                   	pop    ecx
c00219ee:	5b                   	pop    ebx
c00219ef:	57                   	push   edi
c00219f0:	56                   	push   esi
c00219f1:	e8 4a ee fd ff       	call   c0000840 <strcat>
c00219f6:	83 c4 10             	add    esp,0x10
c00219f9:	e9 78 ff ff ff       	jmp    c0021976 <SysGetEnv(regs*)+0x29>

c00219fe <SysSetFatAttrib(regs*)>:
c00219fe:	57                   	push   edi
c00219ff:	56                   	push   esi
c0021a00:	53                   	push   ebx
c0021a01:	83 ec 1c             	sub    esp,0x1c
c0021a04:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a08:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021a0b:	68 14 01 00 00       	push   0x114
c0021a10:	e8 9c 4b ff ff       	call   c00165b1 <malloc>
c0021a15:	83 c4 0c             	add    esp,0xc
c0021a18:	89 c3                	mov    ebx,eax
c0021a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021a1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021a22:	50                   	push   eax
c0021a23:	57                   	push   edi
c0021a24:	53                   	push   ebx
c0021a25:	e8 1e 8c ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0021a2a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021a2d:	83 c4 0c             	add    esp,0xc
c0021a30:	0f b6 d4             	movzx  edx,ah
c0021a33:	0f b6 c0             	movzx  eax,al
c0021a36:	52                   	push   edx
c0021a37:	50                   	push   eax
c0021a38:	53                   	push   ebx
c0021a39:	e8 90 8e ff ff       	call   c001a8ce <File::chfatattr(unsigned char, unsigned char)>
c0021a3e:	83 c4 10             	add    esp,0x10
c0021a41:	85 db                	test   ebx,ebx
c0021a43:	74 14                	je     c0021a59 <SysSetFatAttrib(regs*)+0x5b>
c0021a45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021a49:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021a4b:	83 ec 0c             	sub    esp,0xc
c0021a4e:	53                   	push   ebx
c0021a4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021a52:	83 c4 10             	add    esp,0x10
c0021a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a59:	85 c0                	test   eax,eax
c0021a5b:	0f 95 c0             	setne  al
c0021a5e:	31 d2                	xor    edx,edx
c0021a60:	0f b6 c0             	movzx  eax,al
c0021a63:	f7 d8                	neg    eax
c0021a65:	83 d2 00             	adc    edx,0x0
c0021a68:	83 c4 10             	add    esp,0x10
c0021a6b:	f7 da                	neg    edx
c0021a6d:	5b                   	pop    ebx
c0021a6e:	5e                   	pop    esi
c0021a6f:	5f                   	pop    edi
c0021a70:	c3                   	ret    

c0021a71 <SysPipe(regs*)>:
c0021a71:	57                   	push   edi
c0021a72:	56                   	push   esi
c0021a73:	53                   	push   ebx
c0021a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0021a7e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0021a81:	6a 20                	push   0x20
c0021a83:	e8 29 4b ff ff       	call   c00165b1 <malloc>
c0021a88:	89 c3                	mov    ebx,eax
c0021a8a:	58                   	pop    eax
c0021a8b:	5a                   	pop    edx
c0021a8c:	68 00 50 00 00       	push   0x5000
c0021a91:	53                   	push   ebx
c0021a92:	e8 8b 54 ff ff       	call   c0016f22 <Pipe::Pipe(int)>
c0021a97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a9a:	e8 13 62 ff ff       	call   c0017cb2 <UnixFile::getFileDescriptor()>
c0021a9f:	89 07                	mov    DWORD PTR [edi],eax
c0021aa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021aa4:	e8 09 62 ff ff       	call   c0017cb2 <UnixFile::getFileDescriptor()>
c0021aa9:	83 c4 10             	add    esp,0x10
c0021aac:	89 06                	mov    DWORD PTR [esi],eax
c0021aae:	31 d2                	xor    edx,edx
c0021ab0:	5b                   	pop    ebx
c0021ab1:	31 c0                	xor    eax,eax
c0021ab3:	5e                   	pop    esi
c0021ab4:	5f                   	pop    edi
c0021ab5:	c3                   	ret    

c0021ab6 <SysGetUnixTime(regs*)>:
c0021ab6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021abb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021ac1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ac5:	e9 4c 95 ff ff       	jmp    c001b016 <Clock::timeInSecondsLocal()>

c0021aca <string_ends_with(char const*, char const*)>:
c0021aca:	57                   	push   edi
c0021acb:	56                   	push   esi
c0021acc:	53                   	push   ebx
c0021acd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ad1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021ad5:	83 ec 0c             	sub    esp,0xc
c0021ad8:	53                   	push   ebx
c0021ad9:	e8 92 ea fd ff       	call   c0000570 <strlen>
c0021ade:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021ae1:	89 c6                	mov    esi,eax
c0021ae3:	e8 88 ea fd ff       	call   c0000570 <strlen>
c0021ae8:	83 c4 10             	add    esp,0x10
c0021aeb:	39 c6                	cmp    esi,eax
c0021aed:	7d 06                	jge    c0021af5 <string_ends_with(char const*, char const*)+0x2b>
c0021aef:	5b                   	pop    ebx
c0021af0:	31 c0                	xor    eax,eax
c0021af2:	5e                   	pop    esi
c0021af3:	5f                   	pop    edi
c0021af4:	c3                   	ret    
c0021af5:	83 ec 08             	sub    esp,0x8
c0021af8:	29 c6                	sub    esi,eax
c0021afa:	57                   	push   edi
c0021afb:	01 f3                	add    ebx,esi
c0021afd:	53                   	push   ebx
c0021afe:	e8 4d ec fd ff       	call   c0000750 <strcmp>
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	85 c0                	test   eax,eax
c0021b08:	5b                   	pop    ebx
c0021b09:	0f 94 c0             	sete   al
c0021b0c:	5e                   	pop    esi
c0021b0d:	0f b6 c0             	movzx  eax,al
c0021b10:	5f                   	pop    edi
c0021b11:	c3                   	ret    

c0021b12 <SysOpen(regs*)>:
c0021b12:	56                   	push   esi
c0021b13:	53                   	push   ebx
c0021b14:	81 ec 04 01 00 00    	sub    esp,0x104
c0021b1a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021b21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b24:	85 c0                	test   eax,eax
c0021b26:	0f 84 bc 01 00 00    	je     c0021ce8 <SysOpen(regs*)+0x1d6>
c0021b2c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021b2f:	85 c0                	test   eax,eax
c0021b31:	0f 84 b1 01 00 00    	je     c0021ce8 <SysOpen(regs*)+0x1d6>
c0021b37:	6a 00                	push   0x0
c0021b39:	68 c0 2c 03 c0       	push   0xc0032cc0
c0021b3e:	50                   	push   eax
c0021b3f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021b43:	56                   	push   esi
c0021b44:	e8 07 88 ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021b49:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b4c:	e8 1f ea fd ff       	call   c0000570 <strlen>
c0021b51:	83 c4 10             	add    esp,0x10
c0021b54:	83 e8 01             	sub    eax,0x1
c0021b57:	74 21                	je     c0021b7a <SysOpen(regs*)+0x68>
c0021b59:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021b5d:	eb 12                	jmp    c0021b71 <SysOpen(regs*)+0x5f>
c0021b5f:	83 fa 3a             	cmp    edx,0x3a
c0021b62:	74 12                	je     c0021b76 <SysOpen(regs*)+0x64>
c0021b64:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0021b68:	83 e8 01             	sub    eax,0x1
c0021b6b:	74 0d                	je     c0021b7a <SysOpen(regs*)+0x68>
c0021b6d:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021b71:	83 fa 2e             	cmp    edx,0x2e
c0021b74:	75 e9                	jne    c0021b5f <SysOpen(regs*)+0x4d>
c0021b76:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0021b7a:	83 ec 08             	sub    esp,0x8
c0021b7d:	68 c4 2c 03 c0       	push   0xc0032cc4
c0021b82:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021b85:	50                   	push   eax
c0021b86:	e8 3f ff ff ff       	call   c0021aca <string_ends_with(char const*, char const*)>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	85 c0                	test   eax,eax
c0021b90:	74 1d                	je     c0021baf <SysOpen(regs*)+0x9d>
c0021b92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b95:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0021b9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ba2:	81 c4 04 01 00 00    	add    esp,0x104
c0021ba8:	31 c0                	xor    eax,eax
c0021baa:	31 d2                	xor    edx,edx
c0021bac:	5b                   	pop    ebx
c0021bad:	5e                   	pop    esi
c0021bae:	c3                   	ret    
c0021baf:	83 ec 08             	sub    esp,0x8
c0021bb2:	68 c9 2c 03 c0       	push   0xc0032cc9
c0021bb7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bba:	50                   	push   eax
c0021bbb:	e8 0a ff ff ff       	call   c0021aca <string_ends_with(char const*, char const*)>
c0021bc0:	83 c4 10             	add    esp,0x10
c0021bc3:	85 c0                	test   eax,eax
c0021bc5:	75 cb                	jne    c0021b92 <SysOpen(regs*)+0x80>
c0021bc7:	83 ec 08             	sub    esp,0x8
c0021bca:	68 c5 2c 03 c0       	push   0xc0032cc5
c0021bcf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bd2:	50                   	push   eax
c0021bd3:	e8 78 eb fd ff       	call   c0000750 <strcmp>
c0021bd8:	83 c4 10             	add    esp,0x10
c0021bdb:	85 c0                	test   eax,eax
c0021bdd:	74 b3                	je     c0021b92 <SysOpen(regs*)+0x80>
c0021bdf:	83 ec 08             	sub    esp,0x8
c0021be2:	68 c4 2c 03 c0       	push   0xc0032cc4
c0021be7:	56                   	push   esi
c0021be8:	e8 dd fe ff ff       	call   c0021aca <string_ends_with(char const*, char const*)>
c0021bed:	83 c4 10             	add    esp,0x10
c0021bf0:	85 c0                	test   eax,eax
c0021bf2:	75 9e                	jne    c0021b92 <SysOpen(regs*)+0x80>
c0021bf4:	83 ec 08             	sub    esp,0x8
c0021bf7:	68 ce 2c 03 c0       	push   0xc0032cce
c0021bfc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021bff:	50                   	push   eax
c0021c00:	e8 c5 fe ff ff       	call   c0021aca <string_ends_with(char const*, char const*)>
c0021c05:	83 c4 10             	add    esp,0x10
c0021c08:	85 c0                	test   eax,eax
c0021c0a:	0f 85 eb 00 00 00    	jne    c0021cfb <SysOpen(regs*)+0x1e9>
c0021c10:	83 ec 08             	sub    esp,0x8
c0021c13:	68 d3 2c 03 c0       	push   0xc0032cd3
c0021c18:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021c1b:	50                   	push   eax
c0021c1c:	e8 a9 fe ff ff       	call   c0021aca <string_ends_with(char const*, char const*)>
c0021c21:	83 c4 10             	add    esp,0x10
c0021c24:	85 c0                	test   eax,eax
c0021c26:	0f 85 cf 00 00 00    	jne    c0021cfb <SysOpen(regs*)+0x1e9>
c0021c2c:	83 ec 08             	sub    esp,0x8
c0021c2f:	68 cf 2c 03 c0       	push   0xc0032ccf
c0021c34:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021c37:	51                   	push   ecx
c0021c38:	e8 13 eb fd ff       	call   c0000750 <strcmp>
c0021c3d:	83 c4 10             	add    esp,0x10
c0021c40:	85 c0                	test   eax,eax
c0021c42:	0f 84 b3 00 00 00    	je     c0021cfb <SysOpen(regs*)+0x1e9>
c0021c48:	83 ec 08             	sub    esp,0x8
c0021c4b:	68 ce 2c 03 c0       	push   0xc0032cce
c0021c50:	56                   	push   esi
c0021c51:	e8 74 fe ff ff       	call   c0021aca <string_ends_with(char const*, char const*)>
c0021c56:	83 c4 10             	add    esp,0x10
c0021c59:	85 c0                	test   eax,eax
c0021c5b:	0f 85 9a 00 00 00    	jne    c0021cfb <SysOpen(regs*)+0x1e9>
c0021c61:	83 ec 0c             	sub    esp,0xc
c0021c64:	68 14 01 00 00       	push   0x114
c0021c69:	e8 43 49 ff ff       	call   c00165b1 <malloc>
c0021c6e:	83 c4 0c             	add    esp,0xc
c0021c71:	89 c6                	mov    esi,eax
c0021c73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021c78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021c7b:	50                   	push   eax
c0021c7c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021c7f:	52                   	push   edx
c0021c80:	56                   	push   esi
c0021c81:	e8 c2 89 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0021c86:	83 c4 10             	add    esp,0x10
c0021c89:	85 f6                	test   esi,esi
c0021c8b:	74 5b                	je     c0021ce8 <SysOpen(regs*)+0x1d6>
c0021c8d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021c90:	0f b6 c2             	movzx  eax,dl
c0021c93:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021c96:	89 d0                	mov    eax,edx
c0021c98:	83 e0 01             	and    eax,0x1
c0021c9b:	f6 c2 02             	test   dl,0x2
c0021c9e:	74 03                	je     c0021ca3 <SysOpen(regs*)+0x191>
c0021ca0:	83 c8 02             	or     eax,0x2
c0021ca3:	f6 c2 04             	test   dl,0x4
c0021ca6:	74 03                	je     c0021cab <SysOpen(regs*)+0x199>
c0021ca8:	83 c8 04             	or     eax,0x4
c0021cab:	f6 c2 08             	test   dl,0x8
c0021cae:	74 03                	je     c0021cb3 <SysOpen(regs*)+0x1a1>
c0021cb0:	83 c8 0a             	or     eax,0xa
c0021cb3:	80 e2 10             	and    dl,0x10
c0021cb6:	74 03                	je     c0021cbb <SysOpen(regs*)+0x1a9>
c0021cb8:	83 c8 12             	or     eax,0x12
c0021cbb:	83 ec 08             	sub    esp,0x8
c0021cbe:	50                   	push   eax
c0021cbf:	56                   	push   esi
c0021cc0:	e8 a1 89 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0021cc5:	83 c4 10             	add    esp,0x10
c0021cc8:	85 c0                	test   eax,eax
c0021cca:	75 1c                	jne    c0021ce8 <SysOpen(regs*)+0x1d6>
c0021ccc:	83 ec 0c             	sub    esp,0xc
c0021ccf:	56                   	push   esi
c0021cd0:	e8 dd 5f ff ff       	call   c0017cb2 <UnixFile::getFileDescriptor()>
c0021cd5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021cd8:	83 c4 10             	add    esp,0x10
c0021cdb:	89 02                	mov    DWORD PTR [edx],eax
c0021cdd:	c1 f8 1f             	sar    eax,0x1f
c0021ce0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021ce3:	e9 ba fe ff ff       	jmp    c0021ba2 <SysOpen(regs*)+0x90>
c0021ce8:	81 c4 04 01 00 00    	add    esp,0x104
c0021cee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021cf3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021cf8:	5b                   	pop    ebx
c0021cf9:	5e                   	pop    esi
c0021cfa:	c3                   	ret    
c0021cfb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021cfe:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021d04:	e9 92 fe ff ff       	jmp    c0021b9b <SysOpen(regs*)+0x89>

c0021d09 <KeSystemCall(regs*, void*)>:
c0021d09:	53                   	push   ebx
c0021d0a:	83 ec 08             	sub    esp,0x8
c0021d0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d11:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021d14:	83 f8 3e             	cmp    eax,0x3e
c0021d17:	77 16                	ja     c0021d2f <KeSystemCall(regs*, void*)+0x26>
c0021d19:	8b 14 85 20 45 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbae0]
c0021d20:	85 d2                	test   edx,edx
c0021d22:	74 0b                	je     c0021d2f <KeSystemCall(regs*, void*)+0x26>
c0021d24:	83 ec 0c             	sub    esp,0xc
c0021d27:	53                   	push   ebx
c0021d28:	ff d2                	call   edx
c0021d2a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021d2d:	eb 0d                	jmp    c0021d3c <KeSystemCall(regs*, void*)+0x33>
c0021d2f:	52                   	push   edx
c0021d30:	52                   	push   edx
c0021d31:	50                   	push   eax
c0021d32:	68 d8 2c 03 c0       	push   0xc0032cd8
c0021d37:	e8 05 77 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0021d3c:	83 c4 10             	add    esp,0x10
c0021d3f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021d44:	31 d2                	xor    edx,edx
c0021d46:	83 c4 08             	add    esp,0x8
c0021d49:	5b                   	pop    ebx
c0021d4a:	c3                   	ret    
c0021d4b:	90                   	nop

c0021d4c <KeSwitchEndian16(unsigned short)>:
c0021d4c:	83 ec 04             	sub    esp,0x4
c0021d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021d57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021d5b:	c1 f8 08             	sar    eax,0x8
c0021d5e:	89 c2                	mov    edx,eax
c0021d60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021d64:	c1 e0 08             	shl    eax,0x8
c0021d67:	09 d0                	or     eax,edx
c0021d69:	83 c4 04             	add    esp,0x4
c0021d6c:	c3                   	ret    
c0021d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0021d70 <KeSwitchEndian32(unsigned int)>:
c0021d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d74:	c1 e8 18             	shr    eax,0x18
c0021d77:	89 c2                	mov    edx,eax
c0021d79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d7d:	c1 e0 08             	shl    eax,0x8
c0021d80:	25 00 00 ff 00       	and    eax,0xff0000
c0021d85:	09 c2                	or     edx,eax
c0021d87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d8b:	c1 e8 08             	shr    eax,0x8
c0021d8e:	25 00 ff 00 00       	and    eax,0xff00
c0021d93:	09 c2                	or     edx,eax
c0021d95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d99:	c1 e0 18             	shl    eax,0x18
c0021d9c:	09 d0                	or     eax,edx
c0021d9e:	c3                   	ret    
c0021d9f:	90                   	nop

c0021da0 <EthernetCRC32(unsigned char*, int)>:
c0021da0:	83 ec 10             	sub    esp,0x10
c0021da3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021da8:	75 0a                	jne    c0021db4 <EthernetCRC32(unsigned char*, int)+0x14>
c0021daa:	b8 00 00 00 00       	mov    eax,0x0
c0021daf:	e9 8c 00 00 00       	jmp    c0021e40 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021db4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021db9:	7f 09                	jg     c0021dc4 <EthernetCRC32(unsigned char*, int)+0x24>
c0021dbb:	b8 00 00 00 00       	mov    eax,0x0
c0021dc0:	eb 7e                	jmp    c0021e40 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021dc2:	66 90                	xchg   ax,ax
c0021dc4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021dcc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021dd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021dd8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021ddc:	7d 5a                	jge    c0021e38 <EthernetCRC32(unsigned char*, int)+0x98>
c0021dde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021de2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021de6:	01 d0                	add    eax,edx
c0021de8:	8a 00                	mov    al,BYTE PTR [eax]
c0021dea:	0f b6 c0             	movzx  eax,al
c0021ded:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021df1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021df9:	8d 76 00             	lea    esi,[esi+0x0]
c0021dfc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021e01:	7f 2d                	jg     c0021e30 <EthernetCRC32(unsigned char*, int)+0x90>
c0021e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e07:	83 e0 01             	and    eax,0x1
c0021e0a:	74 10                	je     c0021e1c <EthernetCRC32(unsigned char*, int)+0x7c>
c0021e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e10:	d1 e8                	shr    eax,1
c0021e12:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021e17:	eb 0b                	jmp    c0021e24 <EthernetCRC32(unsigned char*, int)+0x84>
c0021e19:	8d 76 00             	lea    esi,[esi+0x0]
c0021e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e20:	d1 e8                	shr    eax,1
c0021e22:	66 90                	xchg   ax,ax
c0021e24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e28:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021e2d:	eb cd                	jmp    c0021dfc <EthernetCRC32(unsigned char*, int)+0x5c>
c0021e2f:	90                   	nop
c0021e30:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021e35:	eb 9d                	jmp    c0021dd4 <EthernetCRC32(unsigned char*, int)+0x34>
c0021e37:	90                   	nop
c0021e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e3c:	f7 d0                	not    eax
c0021e3e:	66 90                	xchg   ax,ax
c0021e40:	83 c4 10             	add    esp,0x10
c0021e43:	c3                   	ret    

c0021e44 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021e44:	83 ec 2c             	sub    esp,0x2c
c0021e47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e4b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021e50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021e54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021e58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021e5f:	0f b7 c0             	movzx  eax,ax
c0021e62:	3d 06 08 00 00       	cmp    eax,0x806
c0021e67:	75 13                	jne    c0021e7c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021e69:	83 ec 0c             	sub    esp,0xc
c0021e6c:	68 ec 2c 03 c0       	push   0xc0032cec
c0021e71:	e8 cb 75 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0021e76:	83 c4 10             	add    esp,0x10
c0021e79:	eb 25                	jmp    c0021ea0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021e7b:	90                   	nop
c0021e7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021e83:	0f b7 c0             	movzx  eax,ax
c0021e86:	3d 00 08 00 00       	cmp    eax,0x800
c0021e8b:	75 13                	jne    c0021ea0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021e8d:	83 ec 0c             	sub    esp,0xc
c0021e90:	68 02 2d 03 c0       	push   0xc0032d02
c0021e95:	e8 a7 75 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0021e9a:	83 c4 10             	add    esp,0x10
c0021e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021ea0:	90                   	nop
c0021ea1:	83 c4 2c             	add    esp,0x2c
c0021ea4:	c3                   	ret    
c0021ea5:	66 90                	xchg   ax,ax
c0021ea7:	90                   	nop

c0021ea8 <KeNetCreateSemaphore>:
c0021ea8:	53                   	push   ebx
c0021ea9:	83 ec 18             	sub    esp,0x18
c0021eac:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021eb4:	83 ec 0c             	sub    esp,0xc
c0021eb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ebb:	e8 f1 46 ff ff       	call   c00165b1 <malloc>
c0021ec0:	83 c4 10             	add    esp,0x10
c0021ec3:	89 c3                	mov    ebx,eax
c0021ec5:	83 ec 08             	sub    esp,0x8
c0021ec8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ecc:	53                   	push   ebx
c0021ecd:	e8 32 e9 ff ff       	call   c0020804 <Semaphore::Semaphore(int)>
c0021ed2:	83 c4 10             	add    esp,0x10
c0021ed5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021ed9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee1:	89 10                	mov    DWORD PTR [eax],edx
c0021ee3:	90                   	nop
c0021ee4:	83 c4 18             	add    esp,0x18
c0021ee7:	5b                   	pop    ebx
c0021ee8:	c3                   	ret    
c0021ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0021eec <KeNetFreeSemaphore>:
c0021eec:	83 ec 0c             	sub    esp,0xc
c0021eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ef5:	83 ec 08             	sub    esp,0x8
c0021ef8:	6a 10                	push   0x10
c0021efa:	50                   	push   eax
c0021efb:	e8 14 74 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c0021f00:	83 c4 10             	add    esp,0x10
c0021f03:	90                   	nop
c0021f04:	83 c4 0c             	add    esp,0xc
c0021f07:	c3                   	ret    

c0021f08 <KeNetSignalSemaphore>:
c0021f08:	83 ec 0c             	sub    esp,0xc
c0021f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f11:	83 ec 0c             	sub    esp,0xc
c0021f14:	50                   	push   eax
c0021f15:	e8 4a ec ff ff       	call   c0020b64 <Semaphore::release()>
c0021f1a:	83 c4 10             	add    esp,0x10
c0021f1d:	90                   	nop
c0021f1e:	83 c4 0c             	add    esp,0xc
c0021f21:	c3                   	ret    
c0021f22:	66 90                	xchg   ax,ax

c0021f24 <KeNetWaitSemaphore>:
c0021f24:	83 ec 0c             	sub    esp,0xc
c0021f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f2d:	83 ec 08             	sub    esp,0x8
c0021f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f34:	50                   	push   eax
c0021f35:	e8 66 ea ff ff       	call   c00209a0 <Semaphore::acquire(int)>
c0021f3a:	83 c4 10             	add    esp,0x10
c0021f3d:	83 c4 0c             	add    esp,0xc
c0021f40:	c3                   	ret    
c0021f41:	8d 76 00             	lea    esi,[esi+0x0]

c0021f44 <KeNetCreateThread>:
c0021f44:	83 ec 0c             	sub    esp,0xc
c0021f47:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021f4c:	68 80 00 00 00       	push   0x80
c0021f51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f59:	50                   	push   eax
c0021f5a:	e8 c1 32 00 00       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c0021f5f:	83 c4 10             	add    esp,0x10
c0021f62:	90                   	nop
c0021f63:	83 c4 0c             	add    esp,0xc
c0021f66:	c3                   	ret    
c0021f67:	90                   	nop

c0021f68 <KeCPanic>:
c0021f68:	83 ec 0c             	sub    esp,0xc
c0021f6b:	83 ec 0c             	sub    esp,0xc
c0021f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f72:	e8 e3 e4 ff ff       	call   c002045a <KePanic(char const*)>
c0021f77:	83 c4 10             	add    esp,0x10
c0021f7a:	90                   	nop
c0021f7b:	83 c4 0c             	add    esp,0xc
c0021f7e:	c3                   	ret    
c0021f7f:	90                   	nop

c0021f80 <KeCPuts>:
c0021f80:	83 ec 0c             	sub    esp,0xc
c0021f83:	83 ec 08             	sub    esp,0x8
c0021f86:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f8a:	68 b6 33 03 c0       	push   0xc00333b6
c0021f8f:	e8 ad 74 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0021f94:	83 c4 10             	add    esp,0x10
c0021f97:	90                   	nop
c0021f98:	83 c4 0c             	add    esp,0xc
c0021f9b:	c3                   	ret    

c0021f9c <CmOpen(char const*)>:
c0021f9c:	57                   	push   edi
c0021f9d:	56                   	push   esi
c0021f9e:	53                   	push   ebx
c0021f9f:	83 ec 1c             	sub    esp,0x1c
c0021fa2:	6a 30                	push   0x30
c0021fa4:	e8 08 46 ff ff       	call   c00165b1 <malloc>
c0021fa9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021fb0:	89 c3                	mov    ebx,eax
c0021fb2:	e8 fa 45 ff ff       	call   c00165b1 <malloc>
c0021fb7:	83 c4 0c             	add    esp,0xc
c0021fba:	89 c6                	mov    esi,eax
c0021fbc:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021fc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021fc6:	50                   	push   eax
c0021fc7:	e8 7c 86 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0021fcc:	83 c4 0c             	add    esp,0xc
c0021fcf:	89 33                	mov    DWORD PTR [ebx],esi
c0021fd1:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021fd5:	50                   	push   eax
c0021fd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021fda:	50                   	push   eax
c0021fdb:	56                   	push   esi
c0021fdc:	e8 87 89 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c0021fe1:	5a                   	pop    edx
c0021fe2:	59                   	pop    ecx
c0021fe3:	6a 01                	push   0x1
c0021fe5:	ff 33                	push   DWORD PTR [ebx]
c0021fe7:	e8 7a 86 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0021fec:	5e                   	pop    esi
c0021fed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ff1:	e8 bb 45 ff ff       	call   c00165b1 <malloc>
c0021ff6:	5a                   	pop    edx
c0021ff7:	89 c7                	mov    edi,eax
c0021ff9:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021ffd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021fff:	8b 10                	mov    edx,DWORD PTR [eax]
c0022001:	56                   	push   esi
c0022002:	57                   	push   edi
c0022003:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022007:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002200b:	50                   	push   eax
c002200c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002200f:	83 c4 14             	add    esp,0x14
c0022012:	ff 33                	push   DWORD PTR [ebx]
c0022014:	e8 ab 86 ff ff       	call   c001a6c4 <File::close()>
c0022019:	59                   	pop    ecx
c002201a:	58                   	pop    eax
c002201b:	6a 13                	push   0x13
c002201d:	ff 33                	push   DWORD PTR [ebx]
c002201f:	e8 42 86 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0022024:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022026:	8b 10                	mov    edx,DWORD PTR [eax]
c0022028:	89 34 24             	mov    DWORD PTR [esp],esi
c002202b:	57                   	push   edi
c002202c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022030:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022034:	50                   	push   eax
c0022035:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022038:	83 c4 14             	add    esp,0x14
c002203b:	57                   	push   edi
c002203c:	e8 80 45 ff ff       	call   c00165c1 <free>
c0022041:	83 c4 10             	add    esp,0x10
c0022044:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0022047:	75 10                	jne    c0022059 <CmOpen(char const*)+0xbd>
c0022049:	83 ec 0c             	sub    esp,0xc
c002204c:	68 17 2d 03 c0       	push   0xc0032d17
c0022051:	e8 04 e4 ff ff       	call   c002045a <KePanic(char const*)>
c0022056:	83 c4 10             	add    esp,0x10
c0022059:	8d 7b 05             	lea    edi,[ebx+0x5]
c002205c:	50                   	push   eax
c002205d:	6a 00                	push   0x0
c002205f:	6a 00                	push   0x0
c0022061:	ff 33                	push   DWORD PTR [ebx]
c0022063:	e8 bc 86 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0022068:	8b 03                	mov    eax,DWORD PTR [ebx]
c002206a:	8b 10                	mov    edx,DWORD PTR [eax]
c002206c:	89 34 24             	mov    DWORD PTR [esp],esi
c002206f:	57                   	push   edi
c0022070:	6a 00                	push   0x0
c0022072:	6a 2b                	push   0x2b
c0022074:	50                   	push   eax
c0022075:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022078:	83 c4 1c             	add    esp,0x1c
c002207b:	6a 00                	push   0x0
c002207d:	6a 00                	push   0x0
c002207f:	ff 33                	push   DWORD PTR [ebx]
c0022081:	e8 9e 86 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0022086:	83 c4 0c             	add    esp,0xc
c0022089:	6a 08                	push   0x8
c002208b:	68 28 2d 03 c0       	push   0xc0032d28
c0022090:	57                   	push   edi
c0022091:	e8 ea e2 fd ff       	call   c0000380 <memcmp>
c0022096:	83 c4 10             	add    esp,0x10
c0022099:	85 c0                	test   eax,eax
c002209b:	74 10                	je     c00220ad <CmOpen(char const*)+0x111>
c002209d:	83 ec 0c             	sub    esp,0xc
c00220a0:	68 31 2d 03 c0       	push   0xc0032d31
c00220a5:	e8 b0 e3 ff ff       	call   c002045a <KePanic(char const*)>
c00220aa:	83 c4 10             	add    esp,0x10
c00220ad:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00220b1:	89 d8                	mov    eax,ebx
c00220b3:	83 c4 10             	add    esp,0x10
c00220b6:	5b                   	pop    ebx
c00220b7:	5e                   	pop    esi
c00220b8:	5f                   	pop    edi
c00220b9:	c3                   	ret    

c00220ba <CmClose(Reghive_Tag*)>:
c00220ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220be:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00220c2:	74 0b                	je     c00220cf <CmClose(Reghive_Tag*)+0x15>
c00220c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00220c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00220ca:	e9 f5 85 ff ff       	jmp    c001a6c4 <File::close()>
c00220cf:	c3                   	ret    

c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00220d0:	53                   	push   ebx
c00220d1:	83 ec 18             	sub    esp,0x18
c00220d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00220d8:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00220dc:	74 29                	je     c0022107 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00220de:	50                   	push   eax
c00220df:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00220e4:	99                   	cdq    
c00220e5:	52                   	push   edx
c00220e6:	50                   	push   eax
c00220e7:	ff 33                	push   DWORD PTR [ebx]
c00220e9:	e8 36 86 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00220ee:	5a                   	pop    edx
c00220ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220f1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00220f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00220f7:	51                   	push   ecx
c00220f8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00220fc:	6a 00                	push   0x0
c00220fe:	6a 2b                	push   0x2b
c0022100:	50                   	push   eax
c0022101:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022104:	83 c4 20             	add    esp,0x20
c0022107:	83 c4 18             	add    esp,0x18
c002210a:	5b                   	pop    ebx
c002210b:	c3                   	ret    

c002210c <CmGetString(Reghive_Tag*, int, char*)>:
c002210c:	55                   	push   ebp
c002210d:	57                   	push   edi
c002210e:	56                   	push   esi
c002210f:	53                   	push   ebx
c0022110:	31 db                	xor    ebx,ebx
c0022112:	83 ec 70             	sub    esp,0x70
c0022115:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c002211c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0022120:	50                   	push   eax
c0022121:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022128:	55                   	push   ebp
c0022129:	e8 a2 ff ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002212e:	83 c4 10             	add    esp,0x10
c0022131:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0022136:	c1 e0 08             	shl    eax,0x8
c0022139:	89 c2                	mov    edx,eax
c002213b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0022140:	09 d0                	or     eax,edx
c0022142:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0022147:	c1 e0 08             	shl    eax,0x8
c002214a:	09 d0                	or     eax,edx
c002214c:	74 25                	je     c0022173 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c002214e:	6b fb 0d             	imul   edi,ebx,0xd
c0022151:	52                   	push   edx
c0022152:	8d 54 24 39          	lea    edx,[esp+0x39]
c0022156:	52                   	push   edx
c0022157:	50                   	push   eax
c0022158:	55                   	push   ebp
c0022159:	e8 72 ff ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002215e:	8d 74 24 49          	lea    esi,[esp+0x49]
c0022162:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0022169:	b9 27 00 00 00       	mov    ecx,0x27
c002216e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022170:	83 c4 10             	add    esp,0x10
c0022173:	83 c3 03             	add    ebx,0x3
c0022176:	83 fb 15             	cmp    ebx,0x15
c0022179:	75 b6                	jne    c0022131 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c002217b:	83 c4 6c             	add    esp,0x6c
c002217e:	5b                   	pop    ebx
c002217f:	5e                   	pop    esi
c0022180:	5f                   	pop    edi
c0022181:	5d                   	pop    ebp
c0022182:	c3                   	ret    

c0022183 <CmEnterDirectory(Reghive_Tag*, int)>:
c0022183:	83 ec 40             	sub    esp,0x40
c0022186:	8d 44 24 09          	lea    eax,[esp+0x9]
c002218a:	50                   	push   eax
c002218b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002218f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022193:	e8 38 ff ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022198:	83 c4 10             	add    esp,0x10
c002219b:	83 c8 ff             	or     eax,0xffffffff
c002219e:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00221a3:	75 19                	jne    c00221be <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00221a5:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00221aa:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00221af:	c1 e0 08             	shl    eax,0x8
c00221b2:	09 c2                	or     edx,eax
c00221b4:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00221b9:	c1 e0 10             	shl    eax,0x10
c00221bc:	09 d0                	or     eax,edx
c00221be:	83 c4 3c             	add    esp,0x3c
c00221c1:	c3                   	ret    

c00221c2 <CmGetNext(Reghive_Tag*, int)>:
c00221c2:	83 ec 40             	sub    esp,0x40
c00221c5:	8d 44 24 09          	lea    eax,[esp+0x9]
c00221c9:	50                   	push   eax
c00221ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00221ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00221d2:	e8 f9 fe ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221d7:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00221dc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00221e1:	c1 e0 08             	shl    eax,0x8
c00221e4:	09 c2                	or     edx,eax
c00221e6:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00221eb:	83 c4 4c             	add    esp,0x4c
c00221ee:	c1 e0 10             	shl    eax,0x10
c00221f1:	09 d0                	or     eax,edx
c00221f3:	c3                   	ret    

c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00221f4:	53                   	push   ebx
c00221f5:	83 ec 18             	sub    esp,0x18
c00221f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00221fc:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0022200:	74 29                	je     c002222b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0022202:	50                   	push   eax
c0022203:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022208:	99                   	cdq    
c0022209:	52                   	push   edx
c002220a:	50                   	push   eax
c002220b:	ff 33                	push   DWORD PTR [ebx]
c002220d:	e8 12 85 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0022212:	5a                   	pop    edx
c0022213:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022215:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022219:	8b 10                	mov    edx,DWORD PTR [eax]
c002221b:	51                   	push   ecx
c002221c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022220:	6a 00                	push   0x0
c0022222:	6a 2b                	push   0x2b
c0022224:	50                   	push   eax
c0022225:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022228:	83 c4 20             	add    esp,0x20
c002222b:	83 c4 18             	add    esp,0x18
c002222e:	5b                   	pop    ebx
c002222f:	c3                   	ret    

c0022230 <CmFreeExtent(Reghive_Tag*, int)>:
c0022230:	53                   	push   ebx
c0022231:	83 ec 3c             	sub    esp,0x3c
c0022234:	6a 2b                	push   0x2b
c0022236:	6a 00                	push   0x0
c0022238:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002223c:	53                   	push   ebx
c002223d:	e8 ae e2 fd ff       	call   c00004f0 <memset>
c0022242:	83 c4 0c             	add    esp,0xc
c0022245:	53                   	push   ebx
c0022246:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002224a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002224e:	e8 a1 ff ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022253:	83 c4 48             	add    esp,0x48
c0022256:	5b                   	pop    ebx
c0022257:	c3                   	ret    

c0022258 <CmUpdateHeader(Reghive_Tag*)>:
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002225f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0022263:	74 10                	je     c0022275 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022265:	52                   	push   edx
c0022266:	8d 50 05             	lea    edx,[eax+0x5]
c0022269:	52                   	push   edx
c002226a:	6a 00                	push   0x0
c002226c:	50                   	push   eax
c002226d:	e8 82 ff ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022272:	83 c4 10             	add    esp,0x10
c0022275:	83 c4 0c             	add    esp,0xc
c0022278:	c3                   	ret    

c0022279 <CmExpand(Reghive_Tag*, int)>:
c0022279:	57                   	push   edi
c002227a:	56                   	push   esi
c002227b:	83 ce ff             	or     esi,0xffffffff
c002227e:	53                   	push   ebx
c002227f:	83 ec 30             	sub    esp,0x30
c0022282:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0022286:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002228a:	74 5f                	je     c00222eb <CmExpand(Reghive_Tag*, int)+0x72>
c002228c:	31 d2                	xor    edx,edx
c002228e:	31 f6                	xor    esi,esi
c0022290:	50                   	push   eax
c0022291:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0022295:	52                   	push   edx
c0022296:	50                   	push   eax
c0022297:	ff 33                	push   DWORD PTR [ebx]
c0022299:	e8 86 84 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c002229e:	83 c4 0c             	add    esp,0xc
c00222a1:	6a 2b                	push   0x2b
c00222a3:	6a 00                	push   0x0
c00222a5:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00222a9:	57                   	push   edi
c00222aa:	e8 41 e2 fd ff       	call   c00004f0 <memset>
c00222af:	83 c4 10             	add    esp,0x10
c00222b2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00222b6:	7d 1b                	jge    c00222d3 <CmExpand(Reghive_Tag*, int)+0x5a>
c00222b8:	83 ec 0c             	sub    esp,0xc
c00222bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00222bd:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00222c1:	8b 10                	mov    edx,DWORD PTR [eax]
c00222c3:	46                   	inc    esi
c00222c4:	51                   	push   ecx
c00222c5:	57                   	push   edi
c00222c6:	6a 00                	push   0x0
c00222c8:	6a 2b                	push   0x2b
c00222ca:	50                   	push   eax
c00222cb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00222ce:	83 c4 20             	add    esp,0x20
c00222d1:	eb df                	jmp    c00222b2 <CmExpand(Reghive_Tag*, int)+0x39>
c00222d3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00222d7:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00222da:	83 ec 0c             	sub    esp,0xc
c00222dd:	01 f2                	add    edx,esi
c00222df:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00222e2:	53                   	push   ebx
c00222e3:	e8 70 ff ff ff       	call   c0022258 <CmUpdateHeader(Reghive_Tag*)>
c00222e8:	83 c4 10             	add    esp,0x10
c00222eb:	83 c4 30             	add    esp,0x30
c00222ee:	89 f0                	mov    eax,esi
c00222f0:	5b                   	pop    ebx
c00222f1:	5e                   	pop    esi
c00222f2:	5f                   	pop    edi
c00222f3:	c3                   	ret    

c00222f4 <CmFindUnusedExtent(Reghive_Tag*)>:
c00222f4:	55                   	push   ebp
c00222f5:	57                   	push   edi
c00222f6:	56                   	push   esi
c00222f7:	53                   	push   ebx
c00222f8:	83 cb ff             	or     ebx,0xffffffff
c00222fb:	83 ec 1c             	sub    esp,0x1c
c00222fe:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022302:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0022306:	74 68                	je     c0022370 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022308:	be 2b 00 00 00       	mov    esi,0x2b
c002230d:	51                   	push   ecx
c002230e:	31 ff                	xor    edi,edi
c0022310:	6a 00                	push   0x0
c0022312:	31 db                	xor    ebx,ebx
c0022314:	6a 00                	push   0x0
c0022316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022319:	e8 06 84 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c002231e:	83 c4 10             	add    esp,0x10
c0022321:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022324:	76 3b                	jbe    c0022361 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022326:	83 ec 0c             	sub    esp,0xc
c0022329:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002232c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022330:	8b 10                	mov    edx,DWORD PTR [eax]
c0022332:	51                   	push   ecx
c0022333:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022337:	51                   	push   ecx
c0022338:	6a 00                	push   0x0
c002233a:	6a 01                	push   0x1
c002233c:	50                   	push   eax
c002233d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022340:	83 c4 20             	add    esp,0x20
c0022343:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022348:	74 26                	je     c0022370 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002234a:	43                   	inc    ebx
c002234b:	52                   	push   edx
c002234c:	57                   	push   edi
c002234d:	56                   	push   esi
c002234e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022351:	e8 ce 83 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0022356:	83 c6 2b             	add    esi,0x2b
c0022359:	83 d7 00             	adc    edi,0x0
c002235c:	83 c4 10             	add    esp,0x10
c002235f:	eb c0                	jmp    c0022321 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022361:	50                   	push   eax
c0022362:	50                   	push   eax
c0022363:	6a 40                	push   0x40
c0022365:	55                   	push   ebp
c0022366:	e8 0e ff ff ff       	call   c0022279 <CmExpand(Reghive_Tag*, int)>
c002236b:	83 c4 10             	add    esp,0x10
c002236e:	89 c3                	mov    ebx,eax
c0022370:	83 c4 1c             	add    esp,0x1c
c0022373:	89 d8                	mov    eax,ebx
c0022375:	5b                   	pop    ebx
c0022376:	5e                   	pop    esi
c0022377:	5f                   	pop    edi
c0022378:	5d                   	pop    ebp
c0022379:	c3                   	ret    

c002237a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c002237a:	55                   	push   ebp
c002237b:	57                   	push   edi
c002237c:	56                   	push   esi
c002237d:	53                   	push   ebx
c002237e:	81 ec 88 00 00 00    	sub    esp,0x88
c0022384:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c002238b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022392:	e8 5d ff ff ff       	call   c00222f4 <CmFindUnusedExtent(Reghive_Tag*)>
c0022397:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002239b:	83 c4 0c             	add    esp,0xc
c002239e:	6a 2b                	push   0x2b
c00223a0:	6a 00                	push   0x0
c00223a2:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00223a6:	55                   	push   ebp
c00223a7:	e8 44 e1 fd ff       	call   c00004f0 <memset>
c00223ac:	83 c4 10             	add    esp,0x10
c00223af:	85 db                	test   ebx,ebx
c00223b1:	74 12                	je     c00223c5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00223b3:	51                   	push   ecx
c00223b4:	55                   	push   ebp
c00223b5:	53                   	push   ebx
c00223b6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00223bd:	e8 0e fd ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00223c2:	83 c4 10             	add    esp,0x10
c00223c5:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00223c9:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00223d0:	b9 2b 00 00 00       	mov    ecx,0x2b
c00223d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00223d7:	85 db                	test   ebx,ebx
c00223d9:	74 49                	je     c0022424 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00223db:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00223e0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00223e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00223e9:	c1 e0 08             	shl    eax,0x8
c00223ec:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00223f2:	09 c8                	or     eax,ecx
c00223f4:	74 11                	je     c0022407 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00223f6:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00223fa:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00223fe:	c1 e8 10             	shr    eax,0x10
c0022401:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022405:	eb 0f                	jmp    c0022416 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0022407:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c002240c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022411:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022416:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c002241a:	c1 ea 08             	shr    edx,0x8
c002241d:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022422:	eb 0f                	jmp    c0022433 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022424:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022429:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002242e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022433:	52                   	push   edx
c0022434:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022438:	50                   	push   eax
c0022439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002243d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022444:	e8 ab fd ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022449:	83 c4 10             	add    esp,0x10
c002244c:	85 db                	test   ebx,ebx
c002244e:	74 12                	je     c0022462 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022450:	50                   	push   eax
c0022451:	55                   	push   ebp
c0022452:	53                   	push   ebx
c0022453:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002245a:	e8 95 fd ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002245f:	83 c4 10             	add    esp,0x10
c0022462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022466:	83 c4 7c             	add    esp,0x7c
c0022469:	5b                   	pop    ebx
c002246a:	5e                   	pop    esi
c002246b:	5f                   	pop    edi
c002246c:	5d                   	pop    ebp
c002246d:	c3                   	ret    

c002246e <CmSetString(Reghive_Tag*, int, char const*)>:
c002246e:	55                   	push   ebp
c002246f:	57                   	push   edi
c0022470:	56                   	push   esi
c0022471:	53                   	push   ebx
c0022472:	bb 27 00 00 00       	mov    ebx,0x27
c0022477:	81 ec 88 00 00 00    	sub    esp,0x88
c002247d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0022484:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c002248b:	e8 e0 e0 fd ff       	call   c0000570 <strlen>
c0022490:	8d 48 26             	lea    ecx,[eax+0x26]
c0022493:	89 c8                	mov    eax,ecx
c0022495:	99                   	cdq    
c0022496:	f7 fb                	idiv   ebx
c0022498:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002249c:	83 c4 10             	add    esp,0x10
c002249f:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00224a5:	7e 10                	jle    c00224b7 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00224a7:	83 ec 0c             	sub    esp,0xc
c00224aa:	68 42 2d 03 c0       	push   0xc0032d42
c00224af:	e8 a6 df ff ff       	call   c002045a <KePanic(char const*)>
c00224b4:	83 c4 10             	add    esp,0x10
c00224b7:	31 ff                	xor    edi,edi
c00224b9:	50                   	push   eax
c00224ba:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00224be:	53                   	push   ebx
c00224bf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00224c6:	56                   	push   esi
c00224c7:	e8 04 fc ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224cc:	83 c4 10             	add    esp,0x10
c00224cf:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00224d3:	89 d0                	mov    eax,edx
c00224d5:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00224d9:	c1 e0 08             	shl    eax,0x8
c00224dc:	09 c2                	or     edx,eax
c00224de:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00224e2:	c1 e2 08             	shl    edx,0x8
c00224e5:	09 c2                	or     edx,eax
c00224e7:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00224eb:	7e 76                	jle    c0022563 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00224ed:	85 d2                	test   edx,edx
c00224ef:	75 25                	jne    c0022516 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00224f1:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00224f6:	8d 44 24 45          	lea    eax,[esp+0x45]
c00224fa:	50                   	push   eax
c00224fb:	6a 00                	push   0x0
c00224fd:	6a 00                	push   0x0
c00224ff:	56                   	push   esi
c0022500:	e8 75 fe ff ff       	call   c002237a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022505:	83 c4 10             	add    esp,0x10
c0022508:	89 c2                	mov    edx,eax
c002250a:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c002250d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022510:	c1 f8 10             	sar    eax,0x10
c0022513:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022516:	55                   	push   ebp
c0022517:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c002251b:	55                   	push   ebp
c002251c:	52                   	push   edx
c002251d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022521:	56                   	push   esi
c0022522:	e8 a9 fb ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022527:	83 c4 0c             	add    esp,0xc
c002252a:	6a 27                	push   0x27
c002252c:	6a 00                	push   0x0
c002252e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022532:	51                   	push   ecx
c0022533:	e8 b8 df fd ff       	call   c00004f0 <memset>
c0022538:	83 c4 0c             	add    esp,0xc
c002253b:	6b c7 27             	imul   eax,edi,0x27
c002253e:	6a 27                	push   0x27
c0022540:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022547:	50                   	push   eax
c0022548:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002254c:	51                   	push   ecx
c002254d:	e8 2e e1 fd ff       	call   c0000680 <strncpy>
c0022552:	83 c4 0c             	add    esp,0xc
c0022555:	55                   	push   ebp
c0022556:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002255a:	52                   	push   edx
c002255b:	56                   	push   esi
c002255c:	e8 93 fc ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022561:	eb 19                	jmp    c002257c <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0022563:	85 d2                	test   edx,edx
c0022565:	74 18                	je     c002257f <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0022567:	51                   	push   ecx
c0022568:	51                   	push   ecx
c0022569:	52                   	push   edx
c002256a:	56                   	push   esi
c002256b:	e8 c0 fc ff ff       	call   c0022230 <CmFreeExtent(Reghive_Tag*, int)>
c0022570:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0022574:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022578:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002257c:	83 c4 10             	add    esp,0x10
c002257f:	47                   	inc    edi
c0022580:	83 c3 03             	add    ebx,0x3
c0022583:	83 ff 07             	cmp    edi,0x7
c0022586:	0f 85 43 ff ff ff    	jne    c00224cf <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c002258c:	50                   	push   eax
c002258d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0022591:	50                   	push   eax
c0022592:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022599:	56                   	push   esi
c002259a:	e8 55 fc ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002259f:	81 c4 8c 00 00 00    	add    esp,0x8c
c00225a5:	5b                   	pop    ebx
c00225a6:	5e                   	pop    esi
c00225a7:	5f                   	pop    edi
c00225a8:	5d                   	pop    ebp
c00225a9:	c3                   	ret    

c00225aa <CmGetMatch(char*, char*, bool, bool*)>:
c00225aa:	56                   	push   esi
c00225ab:	53                   	push   ebx
c00225ac:	50                   	push   eax
c00225ad:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00225b1:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00225b6:	74 25                	je     c00225dd <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00225b8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00225bb:	31 db                	xor    ebx,ebx
c00225bd:	50                   	push   eax
c00225be:	50                   	push   eax
c00225bf:	8d 04 9d 20 46 03 c0 	lea    eax,[ebx*4-0x3ffcb9e0]
c00225c6:	50                   	push   eax
c00225c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00225cb:	e8 80 e1 fd ff       	call   c0000750 <strcmp>
c00225d0:	83 c4 10             	add    esp,0x10
c00225d3:	85 c0                	test   eax,eax
c00225d5:	74 2e                	je     c0022605 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00225d7:	43                   	inc    ebx
c00225d8:	83 fb 3f             	cmp    ebx,0x3f
c00225db:	75 e0                	jne    c00225bd <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00225dd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00225e0:	31 db                	xor    ebx,ebx
c00225e2:	8d 04 9d 20 46 03 c0 	lea    eax,[ebx*4-0x3ffcb9e0]
c00225e9:	51                   	push   ecx
c00225ea:	51                   	push   ecx
c00225eb:	50                   	push   eax
c00225ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00225f0:	e8 5b e1 fd ff       	call   c0000750 <strcmp>
c00225f5:	83 c4 10             	add    esp,0x10
c00225f8:	85 c0                	test   eax,eax
c00225fa:	74 09                	je     c0022605 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00225fc:	43                   	inc    ebx
c00225fd:	83 fb 3f             	cmp    ebx,0x3f
c0022600:	75 e0                	jne    c00225e2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022602:	83 cb ff             	or     ebx,0xffffffff
c0022605:	89 d8                	mov    eax,ebx
c0022607:	5a                   	pop    edx
c0022608:	5b                   	pop    ebx
c0022609:	5e                   	pop    esi
c002260a:	c3                   	ret    

c002260b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c002260b:	55                   	push   ebp
c002260c:	31 c0                	xor    eax,eax
c002260e:	57                   	push   edi
c002260f:	56                   	push   esi
c0022610:	53                   	push   ebx
c0022611:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022615:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022619:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002261b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002261f:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022622:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022626:	83 fd 1f             	cmp    ebp,0x1f
c0022629:	7f 0b                	jg     c0022636 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c002262b:	0f b6 c2             	movzx  eax,dl
c002262e:	d3 e0                	shl    eax,cl
c0022630:	09 07                	or     DWORD PTR [edi],eax
c0022632:	b0 01                	mov    al,0x1
c0022634:	01 33                	add    DWORD PTR [ebx],esi
c0022636:	5b                   	pop    ebx
c0022637:	5e                   	pop    esi
c0022638:	5f                   	pop    edi
c0022639:	5d                   	pop    ebp
c002263a:	c3                   	ret    

c002263b <CmGetShift(unsigned int*, int*, int, bool*)>:
c002263b:	57                   	push   edi
c002263c:	56                   	push   esi
c002263d:	53                   	push   ebx
c002263e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022642:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022646:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002264a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002264e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022650:	7c 17                	jl     c0022669 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022652:	8b 17                	mov    edx,DWORD PTR [edi]
c0022654:	b8 01 00 00 00       	mov    eax,0x1
c0022659:	d3 e0                	shl    eax,cl
c002265b:	48                   	dec    eax
c002265c:	21 d0                	and    eax,edx
c002265e:	d3 ea                	shr    edx,cl
c0022660:	89 17                	mov    DWORD PTR [edi],edx
c0022662:	29 0b                	sub    DWORD PTR [ebx],ecx
c0022664:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022667:	eb 05                	jmp    c002266e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022669:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002266c:	31 c0                	xor    eax,eax
c002266e:	5b                   	pop    ebx
c002266f:	5e                   	pop    esi
c0022670:	5f                   	pop    edi
c0022671:	c3                   	ret    

c0022672 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022672:	83 ec 40             	sub    esp,0x40
c0022675:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022679:	50                   	push   eax
c002267a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002267e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022682:	e8 49 fa ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022687:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002268b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c002268f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0022693:	89 10                	mov    DWORD PTR [eax],edx
c0022695:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022698:	83 c4 4c             	add    esp,0x4c
c002269b:	c3                   	ret    

c002269c <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c002269c:	55                   	push   ebp
c002269d:	57                   	push   edi
c002269e:	56                   	push   esi
c002269f:	53                   	push   ebx
c00226a0:	83 ec 40             	sub    esp,0x40
c00226a3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00226a7:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00226ab:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00226af:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00226b3:	53                   	push   ebx
c00226b4:	56                   	push   esi
c00226b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226b9:	e8 12 fa ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226be:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00226c2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00226c6:	83 c4 0c             	add    esp,0xc
c00226c9:	53                   	push   ebx
c00226ca:	56                   	push   esi
c00226cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226cf:	e8 20 fb ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00226d4:	83 c4 4c             	add    esp,0x4c
c00226d7:	5b                   	pop    ebx
c00226d8:	5e                   	pop    esi
c00226d9:	5f                   	pop    edi
c00226da:	5d                   	pop    ebp
c00226db:	c3                   	ret    

c00226dc <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00226dc:	55                   	push   ebp
c00226dd:	57                   	push   edi
c00226de:	56                   	push   esi
c00226df:	31 f6                	xor    esi,esi
c00226e1:	53                   	push   ebx
c00226e2:	31 db                	xor    ebx,ebx
c00226e4:	83 ec 40             	sub    esp,0x40
c00226e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00226ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00226f7:	6a 12                	push   0x12
c00226f9:	68 ee 00 00 00       	push   0xee
c00226fe:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022702:	e8 e9 dd fd ff       	call   c00004f0 <memset>
c0022707:	83 c4 10             	add    esp,0x10
c002270a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002270e:	6a 08                	push   0x8
c0022710:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022714:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022718:	50                   	push   eax
c0022719:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c002271d:	55                   	push   ebp
c002271e:	57                   	push   edi
c002271f:	e8 e7 fe ff ff       	call   c002260b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022724:	83 c4 10             	add    esp,0x10
c0022727:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002272b:	50                   	push   eax
c002272c:	6a 06                	push   0x6
c002272e:	55                   	push   ebp
c002272f:	57                   	push   edi
c0022730:	e8 06 ff ff ff       	call   c002263b <CmGetShift(unsigned int*, int*, int, bool*)>
c0022735:	83 c4 10             	add    esp,0x10
c0022738:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002273d:	74 07                	je     c0022746 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c002273f:	46                   	inc    esi
c0022740:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0022744:	eb e1                	jmp    c0022727 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0022746:	43                   	inc    ebx
c0022747:	83 fb 12             	cmp    ebx,0x12
c002274a:	75 c2                	jne    c002270e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c002274c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022750:	31 db                	xor    ebx,ebx
c0022752:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022755:	50                   	push   eax
c0022756:	50                   	push   eax
c0022757:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c002275c:	43                   	inc    ebx
c002275d:	8d 04 85 20 46 03 c0 	lea    eax,[eax*4-0x3ffcb9e0]
c0022764:	50                   	push   eax
c0022765:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022769:	e8 d2 e0 fd ff       	call   c0000840 <strcat>
c002276e:	83 c4 10             	add    esp,0x10
c0022771:	83 fb 18             	cmp    ebx,0x18
c0022774:	75 df                	jne    c0022755 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0022776:	83 c4 3c             	add    esp,0x3c
c0022779:	31 c0                	xor    eax,eax
c002277b:	5b                   	pop    ebx
c002277c:	5e                   	pop    esi
c002277d:	5f                   	pop    edi
c002277e:	5d                   	pop    ebp
c002277f:	c3                   	ret    

c0022780 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022780:	83 ec 40             	sub    esp,0x40
c0022783:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022787:	50                   	push   eax
c0022788:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002278c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022790:	e8 3b f9 ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022795:	58                   	pop    eax
c0022796:	5a                   	pop    edx
c0022797:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002279b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002279f:	50                   	push   eax
c00227a0:	e8 37 ff ff ff       	call   c00226dc <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00227a5:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00227aa:	83 c4 4c             	add    esp,0x4c
c00227ad:	c3                   	ret    

c00227ae <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00227ae:	55                   	push   ebp
c00227af:	57                   	push   edi
c00227b0:	56                   	push   esi
c00227b1:	53                   	push   ebx
c00227b2:	31 db                	xor    ebx,ebx
c00227b4:	83 ec 70             	sub    esp,0x70
c00227b7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00227be:	6a 30                	push   0x30
c00227c0:	6a 00                	push   0x0
c00227c2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00227c6:	56                   	push   esi
c00227c7:	e8 24 dd fd ff       	call   c00004f0 <memset>
c00227cc:	83 c4 10             	add    esp,0x10
c00227cf:	83 ec 0c             	sub    esp,0xc
c00227d2:	57                   	push   edi
c00227d3:	e8 98 dd fd ff       	call   c0000570 <strlen>
c00227d8:	83 c4 10             	add    esp,0x10
c00227db:	39 d8                	cmp    eax,ebx
c00227dd:	76 16                	jbe    c00227f5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00227df:	83 ec 0c             	sub    esp,0xc
c00227e2:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00227e6:	50                   	push   eax
c00227e7:	e8 44 e1 fd ff       	call   c0000930 <toupper>
c00227ec:	83 c4 10             	add    esp,0x10
c00227ef:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00227f2:	43                   	inc    ebx
c00227f3:	eb da                	jmp    c00227cf <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00227f5:	31 f6                	xor    esi,esi
c00227f7:	52                   	push   edx
c00227f8:	31 ff                	xor    edi,edi
c00227fa:	6a 18                	push   0x18
c00227fc:	6a 3f                	push   0x3f
c00227fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022802:	50                   	push   eax
c0022803:	e8 e8 dc fd ff       	call   c00004f0 <memset>
c0022808:	83 c4 10             	add    esp,0x10
c002280b:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c002280f:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0022813:	84 c0                	test   al,al
c0022815:	0f 84 b0 00 00 00    	je     c00228cb <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c002281b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c002281f:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0022824:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0022828:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c002282d:	8d 6e 01             	lea    ebp,[esi+0x1]
c0022830:	83 ec 0c             	sub    esp,0xc
c0022833:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022837:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c002283b:	53                   	push   ebx
c002283c:	e8 2f dd fd ff       	call   c0000570 <strlen>
c0022841:	83 c4 10             	add    esp,0x10
c0022844:	85 c0                	test   eax,eax
c0022846:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002284a:	74 0b                	je     c0022857 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c002284c:	50                   	push   eax
c002284d:	6a 01                	push   0x1
c002284f:	53                   	push   ebx
c0022850:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022854:	50                   	push   eax
c0022855:	eb 0a                	jmp    c0022861 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022857:	50                   	push   eax
c0022858:	6a 00                	push   0x0
c002285a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002285e:	50                   	push   eax
c002285f:	6a 00                	push   0x0
c0022861:	e8 44 fd ff ff       	call   c00225aa <CmGetMatch(char*, char*, bool, bool*)>
c0022866:	83 c4 10             	add    esp,0x10
c0022869:	83 f8 ff             	cmp    eax,0xffffffff
c002286c:	75 1a                	jne    c0022888 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c002286e:	83 ec 0c             	sub    esp,0xc
c0022871:	68 57 2d 03 c0       	push   0xc0032d57
c0022876:	e8 df db ff ff       	call   c002045a <KePanic(char const*)>
c002287b:	83 c4 10             	add    esp,0x10
c002287e:	b8 02 00 00 00       	mov    eax,0x2
c0022883:	e9 bc 00 00 00       	jmp    c0022944 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022888:	83 ff 18             	cmp    edi,0x18
c002288b:	75 1a                	jne    c00228a7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c002288d:	83 ec 0c             	sub    esp,0xc
c0022890:	68 6c 2d 03 c0       	push   0xc0032d6c
c0022895:	e8 c0 db ff ff       	call   c002045a <KePanic(char const*)>
c002289a:	83 c4 10             	add    esp,0x10
c002289d:	b8 01 00 00 00       	mov    eax,0x1
c00228a2:	e9 9d 00 00 00       	jmp    c0022944 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00228a7:	47                   	inc    edi
c00228a8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00228ad:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00228b1:	74 02                	je     c00228b5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00228b3:	89 ee                	mov    esi,ebp
c00228b5:	83 ec 0c             	sub    esp,0xc
c00228b8:	53                   	push   ebx
c00228b9:	e8 b2 dc fd ff       	call   c0000570 <strlen>
c00228be:	83 c4 10             	add    esp,0x10
c00228c1:	85 c0                	test   eax,eax
c00228c3:	74 06                	je     c00228cb <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00228c5:	46                   	inc    esi
c00228c6:	e9 40 ff ff ff       	jmp    c002280b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00228cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00228d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00228db:	31 f6                	xor    esi,esi
c00228dd:	50                   	push   eax
c00228de:	31 ff                	xor    edi,edi
c00228e0:	6a 12                	push   0x12
c00228e2:	68 ee 00 00 00       	push   0xee
c00228e7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00228ee:	e8 fd db fd ff       	call   c00004f0 <memset>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	83 fe 17             	cmp    esi,0x17
c00228f9:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00228fd:	7e 26                	jle    c0022925 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00228ff:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022903:	50                   	push   eax
c0022904:	6a 08                	push   0x8
c0022906:	55                   	push   ebp
c0022907:	53                   	push   ebx
c0022908:	e8 2e fd ff ff       	call   c002263b <CmGetShift(unsigned int*, int*, int, bool*)>
c002290d:	83 c4 10             	add    esp,0x10
c0022910:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022915:	74 26                	je     c002293d <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0022917:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c002291e:	4e                   	dec    esi
c002291f:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022922:	47                   	inc    edi
c0022923:	eb 1c                	jmp    c0022941 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022925:	6a 06                	push   0x6
c0022927:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c002292c:	50                   	push   eax
c002292d:	55                   	push   ebp
c002292e:	53                   	push   ebx
c002292f:	e8 d7 fc ff ff       	call   c002260b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0022934:	83 c4 10             	add    esp,0x10
c0022937:	84 c0                	test   al,al
c0022939:	75 06                	jne    c0022941 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c002293b:	eb c2                	jmp    c00228ff <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c002293d:	31 c0                	xor    eax,eax
c002293f:	eb 03                	jmp    c0022944 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022941:	46                   	inc    esi
c0022942:	eb b2                	jmp    c00228f6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0022944:	83 c4 6c             	add    esp,0x6c
c0022947:	5b                   	pop    ebx
c0022948:	5e                   	pop    esi
c0022949:	5f                   	pop    edi
c002294a:	5d                   	pop    ebp
c002294b:	c3                   	ret    

c002294c <CmCreateString(Reghive_Tag*, int, char const*)>:
c002294c:	53                   	push   ebx
c002294d:	83 ec 3c             	sub    esp,0x3c
c0022950:	6a 2b                	push   0x2b
c0022952:	6a 00                	push   0x0
c0022954:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022958:	53                   	push   ebx
c0022959:	e8 92 db fd ff       	call   c00004f0 <memset>
c002295e:	58                   	pop    eax
c002295f:	5a                   	pop    edx
c0022960:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022964:	50                   	push   eax
c0022965:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022969:	e8 40 fe ff ff       	call   c00227ae <CmConvertToInternalFilename(char const*, unsigned char*)>
c002296e:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0022973:	83 c4 0c             	add    esp,0xc
c0022976:	6a 15                	push   0x15
c0022978:	6a 00                	push   0x0
c002297a:	8d 44 24 27          	lea    eax,[esp+0x27]
c002297e:	50                   	push   eax
c002297f:	e8 6c db fd ff       	call   c00004f0 <memset>
c0022984:	53                   	push   ebx
c0022985:	6a 00                	push   0x0
c0022987:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002298b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002298f:	e8 e6 f9 ff ff       	call   c002237a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022994:	83 c4 58             	add    esp,0x58
c0022997:	5b                   	pop    ebx
c0022998:	c3                   	ret    

c0022999 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022999:	56                   	push   esi
c002299a:	53                   	push   ebx
c002299b:	83 ec 48             	sub    esp,0x48
c002299e:	6a 12                	push   0x12
c00229a0:	68 ff 00 00 00       	push   0xff
c00229a5:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00229a9:	56                   	push   esi
c00229aa:	e8 41 db fd ff       	call   c00004f0 <memset>
c00229af:	5a                   	pop    edx
c00229b0:	59                   	pop    ecx
c00229b1:	56                   	push   esi
c00229b2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00229b6:	e8 f3 fd ff ff       	call   c00227ae <CmConvertToInternalFilename(char const*, unsigned char*)>
c00229bb:	83 c4 10             	add    esp,0x10
c00229be:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00229c2:	85 db                	test   ebx,ebx
c00229c4:	74 42                	je     c0022a08 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00229c6:	50                   	push   eax
c00229c7:	8d 44 24 19          	lea    eax,[esp+0x19]
c00229cb:	50                   	push   eax
c00229cc:	53                   	push   ebx
c00229cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00229d1:	e8 fa f6 ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00229d6:	83 c4 0c             	add    esp,0xc
c00229d9:	6a 12                	push   0x12
c00229db:	8d 44 24 21          	lea    eax,[esp+0x21]
c00229df:	50                   	push   eax
c00229e0:	56                   	push   esi
c00229e1:	e8 9a d9 fd ff       	call   c0000380 <memcmp>
c00229e6:	83 c4 10             	add    esp,0x10
c00229e9:	85 c0                	test   eax,eax
c00229eb:	74 1e                	je     c0022a0b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00229ed:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00229f2:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00229f7:	c1 e3 08             	shl    ebx,0x8
c00229fa:	09 d8                	or     eax,ebx
c00229fc:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022a01:	c1 e3 10             	shl    ebx,0x10
c0022a04:	09 c3                	or     ebx,eax
c0022a06:	eb ba                	jmp    c00229c2 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022a08:	83 cb ff             	or     ebx,0xffffffff
c0022a0b:	89 d8                	mov    eax,ebx
c0022a0d:	83 c4 44             	add    esp,0x44
c0022a10:	5b                   	pop    ebx
c0022a11:	5e                   	pop    esi
c0022a12:	c3                   	ret    

c0022a13 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0022a13:	57                   	push   edi
c0022a14:	56                   	push   esi
c0022a15:	53                   	push   ebx
c0022a16:	83 ec 34             	sub    esp,0x34
c0022a19:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022a1d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022a21:	6a 2b                	push   0x2b
c0022a23:	6a 00                	push   0x0
c0022a25:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022a29:	53                   	push   ebx
c0022a2a:	e8 c1 da fd ff       	call   c00004f0 <memset>
c0022a2f:	58                   	pop    eax
c0022a30:	5a                   	pop    edx
c0022a31:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022a35:	50                   	push   eax
c0022a36:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022a3a:	e8 6f fd ff ff       	call   c00227ae <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022a3f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0022a43:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0022a47:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022a4b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022a4f:	53                   	push   ebx
c0022a50:	6a 00                	push   0x0
c0022a52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022a5a:	e8 1b f9 ff ff       	call   c002237a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022a5f:	83 c4 50             	add    esp,0x50
c0022a62:	5b                   	pop    ebx
c0022a63:	5e                   	pop    esi
c0022a64:	5f                   	pop    edi
c0022a65:	c3                   	ret    

c0022a66 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0022a66:	55                   	push   ebp
c0022a67:	57                   	push   edi
c0022a68:	56                   	push   esi
c0022a69:	53                   	push   ebx
c0022a6a:	83 ec 40             	sub    esp,0x40
c0022a6d:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022a71:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0022a75:	6a 2b                	push   0x2b
c0022a77:	6a 00                	push   0x0
c0022a79:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022a7d:	56                   	push   esi
c0022a7e:	e8 6d da fd ff       	call   c00004f0 <memset>
c0022a83:	5f                   	pop    edi
c0022a84:	89 ef                	mov    edi,ebp
c0022a86:	58                   	pop    eax
c0022a87:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022a8b:	50                   	push   eax
c0022a8c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022a90:	e8 19 fd ff ff       	call   c00227ae <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022a95:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022a9a:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022a9f:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0022aa4:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0022aa9:	83 c4 10             	add    esp,0x10
c0022aac:	85 ed                	test   ebp,ebp
c0022aae:	74 14                	je     c0022ac4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022ab0:	51                   	push   ecx
c0022ab1:	51                   	push   ecx
c0022ab2:	57                   	push   edi
c0022ab3:	53                   	push   ebx
c0022ab4:	e8 09 f7 ff ff       	call   c00221c2 <CmGetNext(Reghive_Tag*, int)>
c0022ab9:	83 c4 10             	add    esp,0x10
c0022abc:	85 c0                	test   eax,eax
c0022abe:	74 04                	je     c0022ac4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0022ac0:	89 c7                	mov    edi,eax
c0022ac2:	eb e8                	jmp    c0022aac <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0022ac4:	56                   	push   esi
c0022ac5:	6a 00                	push   0x0
c0022ac7:	57                   	push   edi
c0022ac8:	53                   	push   ebx
c0022ac9:	e8 ac f8 ff ff       	call   c002237a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022ace:	83 c4 0c             	add    esp,0xc
c0022ad1:	89 c7                	mov    edi,eax
c0022ad3:	56                   	push   esi
c0022ad4:	50                   	push   eax
c0022ad5:	53                   	push   ebx
c0022ad6:	e8 f5 f5 ff ff       	call   c00220d0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022adb:	58                   	pop    eax
c0022adc:	5a                   	pop    edx
c0022add:	6a 6c                	push   0x6c
c0022adf:	6a 00                	push   0x0
c0022ae1:	6a 00                	push   0x0
c0022ae3:	68 7d 2d 03 c0       	push   0xc0032d7d
c0022ae8:	57                   	push   edi
c0022ae9:	53                   	push   ebx
c0022aea:	e8 24 ff ff ff       	call   c0022a13 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022aef:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0022af3:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0022af7:	c1 e8 10             	shr    eax,0x10
c0022afa:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022afe:	83 c4 1c             	add    esp,0x1c
c0022b01:	56                   	push   esi
c0022b02:	57                   	push   edi
c0022b03:	53                   	push   ebx
c0022b04:	e8 eb f6 ff ff       	call   c00221f4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022b09:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022b0e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022b13:	c1 e0 08             	shl    eax,0x8
c0022b16:	09 c2                	or     edx,eax
c0022b18:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022b1d:	83 c4 4c             	add    esp,0x4c
c0022b20:	c1 e0 10             	shl    eax,0x10
c0022b23:	5b                   	pop    ebx
c0022b24:	09 d0                	or     eax,edx
c0022b26:	5e                   	pop    esi
c0022b27:	5f                   	pop    edi
c0022b28:	5d                   	pop    ebp
c0022b29:	c3                   	ret    

c0022b2a <zStrtok(char*, char const*)>:
c0022b2a:	55                   	push   ebp
c0022b2b:	57                   	push   edi
c0022b2c:	56                   	push   esi
c0022b2d:	53                   	push   ebx
c0022b2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022b32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b36:	85 db                	test   ebx,ebx
c0022b38:	74 2f                	je     c0022b69 <zStrtok(char*, char const*)+0x3f>
c0022b3a:	85 c0                	test   eax,eax
c0022b3c:	75 09                	jne    c0022b47 <zStrtok(char*, char const*)+0x1d>
c0022b3e:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c0022b43:	85 c0                	test   eax,eax
c0022b45:	74 50                	je     c0022b97 <zStrtok(char*, char const*)+0x6d>
c0022b47:	31 c9                	xor    ecx,ecx
c0022b49:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022b4d:	74 03                	je     c0022b52 <zStrtok(char*, char const*)+0x28>
c0022b4f:	41                   	inc    ecx
c0022b50:	eb f7                	jmp    c0022b49 <zStrtok(char*, char const*)+0x1f>
c0022b52:	31 d2                	xor    edx,edx
c0022b54:	39 ca                	cmp    edx,ecx
c0022b56:	74 15                	je     c0022b6d <zStrtok(char*, char const*)+0x43>
c0022b58:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022b5c:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022b5f:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022b62:	39 ee                	cmp    esi,ebp
c0022b64:	74 13                	je     c0022b79 <zStrtok(char*, char const*)+0x4f>
c0022b66:	42                   	inc    edx
c0022b67:	eb eb                	jmp    c0022b54 <zStrtok(char*, char const*)+0x2a>
c0022b69:	31 c0                	xor    eax,eax
c0022b6b:	eb 2a                	jmp    c0022b97 <zStrtok(char*, char const*)+0x6d>
c0022b6d:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c0022b77:	eb 1e                	jmp    c0022b97 <zStrtok(char*, char const*)+0x6d>
c0022b79:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022b7c:	39 ce                	cmp    esi,ecx
c0022b7e:	75 0a                	jne    c0022b8a <zStrtok(char*, char const*)+0x60>
c0022b80:	40                   	inc    eax
c0022b81:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c0022b86:	89 d8                	mov    eax,ebx
c0022b88:	eb 0d                	jmp    c0022b97 <zStrtok(char*, char const*)+0x6d>
c0022b8a:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022b8e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022b91:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c0022b97:	5b                   	pop    ebx
c0022b98:	5e                   	pop    esi
c0022b99:	5f                   	pop    edi
c0022b9a:	5d                   	pop    ebp
c0022b9b:	c3                   	ret    

c0022b9c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022b9c:	57                   	push   edi
c0022b9d:	56                   	push   esi
c0022b9e:	53                   	push   ebx
c0022b9f:	81 ec 08 01 00 00    	sub    esp,0x108
c0022ba5:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0022bac:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0022bb3:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0022bb7:	53                   	push   ebx
c0022bb8:	e8 83 da fd ff       	call   c0000640 <strcpy>
c0022bbd:	59                   	pop    ecx
c0022bbe:	5e                   	pop    esi
c0022bbf:	68 1f 31 03 c0       	push   0xc003311f
c0022bc4:	53                   	push   ebx
c0022bc5:	bb 01 00 00 00       	mov    ebx,0x1
c0022bca:	e8 5b ff ff ff       	call   c0022b2a <zStrtok(char*, char const*)>
c0022bcf:	83 c4 10             	add    esp,0x10
c0022bd2:	85 c0                	test   eax,eax
c0022bd4:	74 3b                	je     c0022c11 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022bd6:	52                   	push   edx
c0022bd7:	50                   	push   eax
c0022bd8:	6a 01                	push   0x1
c0022bda:	57                   	push   edi
c0022bdb:	e8 b9 fd ff ff       	call   c0022999 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022be0:	59                   	pop    ecx
c0022be1:	89 c3                	mov    ebx,eax
c0022be3:	5e                   	pop    esi
c0022be4:	68 1f 31 03 c0       	push   0xc003311f
c0022be9:	6a 00                	push   0x0
c0022beb:	e8 3a ff ff ff       	call   c0022b2a <zStrtok(char*, char const*)>
c0022bf0:	83 c4 10             	add    esp,0x10
c0022bf3:	89 c6                	mov    esi,eax
c0022bf5:	85 c0                	test   eax,eax
c0022bf7:	74 18                	je     c0022c11 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022bf9:	52                   	push   edx
c0022bfa:	52                   	push   edx
c0022bfb:	53                   	push   ebx
c0022bfc:	57                   	push   edi
c0022bfd:	e8 81 f5 ff ff       	call   c0022183 <CmEnterDirectory(Reghive_Tag*, int)>
c0022c02:	83 c4 10             	add    esp,0x10
c0022c05:	89 c3                	mov    ebx,eax
c0022c07:	83 f8 ff             	cmp    eax,0xffffffff
c0022c0a:	74 05                	je     c0022c11 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022c0c:	50                   	push   eax
c0022c0d:	56                   	push   esi
c0022c0e:	53                   	push   ebx
c0022c0f:	eb c9                	jmp    c0022bda <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022c11:	81 c4 00 01 00 00    	add    esp,0x100
c0022c17:	89 d8                	mov    eax,ebx
c0022c19:	5b                   	pop    ebx
c0022c1a:	5e                   	pop    esi
c0022c1b:	5f                   	pop    edi
c0022c1c:	c3                   	ret    

c0022c1d <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022c1d:	55                   	push   ebp
c0022c1e:	57                   	push   edi
c0022c1f:	56                   	push   esi
c0022c20:	53                   	push   ebx
c0022c21:	83 ec 5c             	sub    esp,0x5c
c0022c24:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022c28:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022c2c:	85 db                	test   ebx,ebx
c0022c2e:	0f 8e 84 00 00 00    	jle    c0022cb8 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022c34:	31 ed                	xor    ebp,ebp
c0022c36:	57                   	push   edi
c0022c37:	6a 32                	push   0x32
c0022c39:	6a 00                	push   0x0
c0022c3b:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022c3f:	57                   	push   edi
c0022c40:	e8 ab d8 fd ff       	call   c00004f0 <memset>
c0022c45:	83 c4 0c             	add    esp,0xc
c0022c48:	57                   	push   edi
c0022c49:	53                   	push   ebx
c0022c4a:	56                   	push   esi
c0022c4b:	e8 30 fb ff ff       	call   c0022780 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022c50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c54:	83 c4 10             	add    esp,0x10
c0022c57:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022c5b:	7d 13                	jge    c0022c70 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022c5d:	83 ec 0c             	sub    esp,0xc
c0022c60:	45                   	inc    ebp
c0022c61:	68 a3 34 03 c0       	push   0xc00334a3
c0022c66:	e8 d6 67 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0022c6b:	83 c4 10             	add    esp,0x10
c0022c6e:	eb e7                	jmp    c0022c57 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022c70:	51                   	push   ecx
c0022c71:	57                   	push   edi
c0022c72:	53                   	push   ebx
c0022c73:	68 83 2d 03 c0       	push   0xc0032d83
c0022c78:	e8 c4 67 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0022c7d:	83 c4 10             	add    esp,0x10
c0022c80:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022c85:	75 1e                	jne    c0022ca5 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022c87:	52                   	push   edx
c0022c88:	52                   	push   edx
c0022c89:	53                   	push   ebx
c0022c8a:	56                   	push   esi
c0022c8b:	e8 f3 f4 ff ff       	call   c0022183 <CmEnterDirectory(Reghive_Tag*, int)>
c0022c90:	83 c4 0c             	add    esp,0xc
c0022c93:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022c97:	8d 51 04             	lea    edx,[ecx+0x4]
c0022c9a:	52                   	push   edx
c0022c9b:	50                   	push   eax
c0022c9c:	56                   	push   esi
c0022c9d:	e8 7b ff ff ff       	call   c0022c1d <CmDisplayTree(Reghive_Tag*, int, int)>
c0022ca2:	83 c4 10             	add    esp,0x10
c0022ca5:	50                   	push   eax
c0022ca6:	50                   	push   eax
c0022ca7:	53                   	push   ebx
c0022ca8:	56                   	push   esi
c0022ca9:	e8 14 f5 ff ff       	call   c00221c2 <CmGetNext(Reghive_Tag*, int)>
c0022cae:	83 c4 10             	add    esp,0x10
c0022cb1:	89 c3                	mov    ebx,eax
c0022cb3:	e9 74 ff ff ff       	jmp    c0022c2c <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022cb8:	83 c4 5c             	add    esp,0x5c
c0022cbb:	5b                   	pop    ebx
c0022cbc:	5e                   	pop    esi
c0022cbd:	5f                   	pop    edi
c0022cbe:	5d                   	pop    ebp
c0022cbf:	c3                   	ret    

c0022cc0 <CmSplitFinalSlashInPlace(char*)>:
c0022cc0:	53                   	push   ebx
c0022cc1:	83 ec 14             	sub    esp,0x14
c0022cc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022cc8:	53                   	push   ebx
c0022cc9:	e8 a2 d8 fd ff       	call   c0000570 <strlen>
c0022cce:	83 c4 10             	add    esp,0x10
c0022cd1:	48                   	dec    eax
c0022cd2:	85 c0                	test   eax,eax
c0022cd4:	74 15                	je     c0022ceb <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022cd6:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022cd9:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022cdd:	75 09                	jne    c0022ce8 <CmSplitFinalSlashInPlace(char*)+0x28>
c0022cdf:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022ce2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022ce6:	eb 05                	jmp    c0022ced <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022ce8:	48                   	dec    eax
c0022ce9:	eb e7                	jmp    c0022cd2 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022ceb:	31 c0                	xor    eax,eax
c0022ced:	83 c4 08             	add    esp,0x8
c0022cf0:	5b                   	pop    ebx
c0022cf1:	c3                   	ret    

c0022cf2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022cf2:	55                   	push   ebp
c0022cf3:	57                   	push   edi
c0022cf4:	56                   	push   esi
c0022cf5:	53                   	push   ebx
c0022cf6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022cfc:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022d03:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022d05:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022d08:	80 fa 40             	cmp    dl,0x40
c0022d0b:	75 1c                	jne    c0022d29 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022d0d:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022d10:	85 c9                	test   ecx,ecx
c0022d12:	0f 84 09 01 00 00    	je     c0022e21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022d18:	8d 43 01             	lea    eax,[ebx+0x1]
c0022d1b:	83 f9 3a             	cmp    ecx,0x3a
c0022d1e:	74 04                	je     c0022d24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022d20:	89 c3                	mov    ebx,eax
c0022d22:	eb e9                	jmp    c0022d0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022d24:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022d27:	89 c3                	mov    ebx,eax
c0022d29:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022d2d:	50                   	push   eax
c0022d2e:	6a 40                	push   0x40
c0022d30:	6a 00                	push   0x0
c0022d32:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022d36:	50                   	push   eax
c0022d37:	e8 b4 d7 fd ff       	call   c00004f0 <memset>
c0022d3c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022d43:	31 c0                	xor    eax,eax
c0022d45:	83 c4 10             	add    esp,0x10
c0022d48:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022d4d:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022d50:	89 d1                	mov    ecx,edx
c0022d52:	85 d2                	test   edx,edx
c0022d54:	0f 84 c7 00 00 00    	je     c0022e21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022d5a:	3d c7 00 00 00       	cmp    eax,0xc7
c0022d5f:	0f 8f bc 00 00 00    	jg     c0022e21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022d65:	83 fa 0a             	cmp    edx,0xa
c0022d68:	0f 85 a4 00 00 00    	jne    c0022e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022d6e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022d73:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022d78:	89 c8                	mov    eax,ecx
c0022d7a:	a8 df                	test   al,0xdf
c0022d7c:	0f 94 c2             	sete   dl
c0022d7f:	83 f9 23             	cmp    ecx,0x23
c0022d82:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022d87:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022d8b:	80 e2 01             	and    dl,0x1
c0022d8e:	75 4a                	jne    c0022dda <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022d90:	83 e8 09             	sub    eax,0x9
c0022d93:	3c 01                	cmp    al,0x1
c0022d95:	76 43                	jbe    c0022dda <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022d97:	83 f9 5b             	cmp    ecx,0x5b
c0022d9a:	75 42                	jne    c0022dde <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022d9c:	83 fe 40             	cmp    esi,0x40
c0022d9f:	75 39                	jne    c0022dda <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022da1:	83 ec 0c             	sub    esp,0xc
c0022da4:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022da8:	52                   	push   edx
c0022da9:	e8 c2 d7 fd ff       	call   c0000570 <strlen>
c0022dae:	83 c4 10             	add    esp,0x10
c0022db1:	83 f8 3f             	cmp    eax,0x3f
c0022db4:	77 6b                	ja     c0022e21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022db6:	50                   	push   eax
c0022db7:	50                   	push   eax
c0022db8:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022dbc:	52                   	push   edx
c0022dbd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022dc1:	52                   	push   edx
c0022dc2:	e8 79 d8 fd ff       	call   c0000640 <strcpy>
c0022dc7:	58                   	pop    eax
c0022dc8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022dcc:	52                   	push   edx
c0022dcd:	e8 9e d7 fd ff       	call   c0000570 <strlen>
c0022dd2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022dd7:	83 c4 10             	add    esp,0x10
c0022dda:	31 d2                	xor    edx,edx
c0022ddc:	eb 3b                	jmp    c0022e19 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022dde:	83 fe 40             	cmp    esi,0x40
c0022de1:	74 06                	je     c0022de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022de3:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022de7:	eb 20                	jmp    c0022e09 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022de9:	50                   	push   eax
c0022dea:	50                   	push   eax
c0022deb:	55                   	push   ebp
c0022dec:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022df0:	50                   	push   eax
c0022df1:	e8 5a d9 fd ff       	call   c0000750 <strcmp>
c0022df6:	83 c4 10             	add    esp,0x10
c0022df9:	85 c0                	test   eax,eax
c0022dfb:	75 dd                	jne    c0022dda <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022dfd:	eb e4                	jmp    c0022de3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022dff:	8d 50 01             	lea    edx,[eax+0x1]
c0022e02:	83 f9 3d             	cmp    ecx,0x3d
c0022e05:	74 1e                	je     c0022e25 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022e07:	89 d0                	mov    eax,edx
c0022e09:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022e0c:	85 c9                	test   ecx,ecx
c0022e0e:	75 ef                	jne    c0022dff <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022e10:	eb 0f                	jmp    c0022e21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022e12:	8d 50 01             	lea    edx,[eax+0x1]
c0022e15:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022e19:	47                   	inc    edi
c0022e1a:	89 d0                	mov    eax,edx
c0022e1c:	e9 2c ff ff ff       	jmp    c0022d4d <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022e21:	31 c0                	xor    eax,eax
c0022e23:	eb 33                	jmp    c0022e58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022e25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e29:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022e2c:	50                   	push   eax
c0022e2d:	50                   	push   eax
c0022e2e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022e32:	50                   	push   eax
c0022e33:	53                   	push   ebx
c0022e34:	e8 17 d9 fd ff       	call   c0000750 <strcmp>
c0022e39:	83 c4 10             	add    esp,0x10
c0022e3c:	85 c0                	test   eax,eax
c0022e3e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022e42:	75 96                	jne    c0022dda <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022e44:	51                   	push   ecx
c0022e45:	51                   	push   ecx
c0022e46:	52                   	push   edx
c0022e47:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022e4e:	e8 ed d7 fd ff       	call   c0000640 <strcpy>
c0022e53:	83 c4 10             	add    esp,0x10
c0022e56:	b0 01                	mov    al,0x1
c0022e58:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022e5e:	5b                   	pop    ebx
c0022e5f:	5e                   	pop    esi
c0022e60:	5f                   	pop    edi
c0022e61:	5d                   	pop    ebp
c0022e62:	c3                   	ret    

c0022e63 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022e63:	57                   	push   edi
c0022e64:	56                   	push   esi
c0022e65:	53                   	push   ebx
c0022e66:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022e6c:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022e73:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022e7a:	53                   	push   ebx
c0022e7b:	e8 f0 d6 fd ff       	call   c0000570 <strlen>
c0022e80:	89 34 24             	mov    DWORD PTR [esp],esi
c0022e83:	89 c7                	mov    edi,eax
c0022e85:	e8 e6 d6 fd ff       	call   c0000570 <strlen>
c0022e8a:	83 c4 10             	add    esp,0x10
c0022e8d:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022e91:	3d ff 00 00 00       	cmp    eax,0xff
c0022e96:	0f 87 d3 00 00 00    	ja     c0022f6f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022e9c:	57                   	push   edi
c0022e9d:	57                   	push   edi
c0022e9e:	56                   	push   esi
c0022e9f:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022ea3:	56                   	push   esi
c0022ea4:	e8 97 d7 fd ff       	call   c0000640 <strcpy>
c0022ea9:	58                   	pop    eax
c0022eaa:	5a                   	pop    edx
c0022eab:	68 1f 31 03 c0       	push   0xc003311f
c0022eb0:	56                   	push   esi
c0022eb1:	e8 8a d9 fd ff       	call   c0000840 <strcat>
c0022eb6:	59                   	pop    ecx
c0022eb7:	5f                   	pop    edi
c0022eb8:	53                   	push   ebx
c0022eb9:	56                   	push   esi
c0022eba:	e8 81 d9 fd ff       	call   c0000840 <strcat>
c0022ebf:	58                   	pop    eax
c0022ec0:	5a                   	pop    edx
c0022ec1:	68 8d 2d 03 c0       	push   0xc0032d8d
c0022ec6:	56                   	push   esi
c0022ec7:	e8 74 d9 fd ff       	call   c0000840 <strcat>
c0022ecc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022ed3:	e8 d9 36 ff ff       	call   c00165b1 <malloc>
c0022ed8:	83 c4 0c             	add    esp,0xc
c0022edb:	89 c3                	mov    ebx,eax
c0022edd:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022ee3:	56                   	push   esi
c0022ee4:	50                   	push   eax
c0022ee5:	e8 5e 77 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0022eea:	83 c4 10             	add    esp,0x10
c0022eed:	85 db                	test   ebx,ebx
c0022eef:	74 7e                	je     c0022f6f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022ef1:	51                   	push   ecx
c0022ef2:	51                   	push   ecx
c0022ef3:	6a 01                	push   0x1
c0022ef5:	53                   	push   ebx
c0022ef6:	e8 6b 77 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0022efb:	83 c4 10             	add    esp,0x10
c0022efe:	85 c0                	test   eax,eax
c0022f00:	74 08                	je     c0022f0a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022f02:	83 ec 0c             	sub    esp,0xc
c0022f05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f07:	53                   	push   ebx
c0022f08:	eb 5f                	jmp    c0022f69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022f0a:	52                   	push   edx
c0022f0b:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022f0f:	50                   	push   eax
c0022f10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022f14:	50                   	push   eax
c0022f15:	53                   	push   ebx
c0022f16:	e8 4d 7a ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c0022f1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022f1f:	83 c4 10             	add    esp,0x10
c0022f22:	89 c1                	mov    ecx,eax
c0022f24:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022f28:	74 31                	je     c0022f5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022f2a:	83 ec 0c             	sub    esp,0xc
c0022f2d:	50                   	push   eax
c0022f2e:	e8 7e 36 ff ff       	call   c00165b1 <malloc>
c0022f33:	89 c6                	mov    esi,eax
c0022f35:	58                   	pop    eax
c0022f36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f38:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022f3c:	52                   	push   edx
c0022f3d:	56                   	push   esi
c0022f3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022f42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022f46:	53                   	push   ebx
c0022f47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022f4a:	83 c4 20             	add    esp,0x20
c0022f4d:	85 c0                	test   eax,eax
c0022f4f:	75 0a                	jne    c0022f5b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022f51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f55:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022f59:	74 18                	je     c0022f73 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022f5b:	83 ec 0c             	sub    esp,0xc
c0022f5e:	53                   	push   ebx
c0022f5f:	e8 60 77 ff ff       	call   c001a6c4 <File::close()>
c0022f64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022f69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022f6c:	83 c4 10             	add    esp,0x10
c0022f6f:	31 c0                	xor    eax,eax
c0022f71:	eb 3b                	jmp    c0022fae <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022f73:	83 ec 0c             	sub    esp,0xc
c0022f76:	53                   	push   ebx
c0022f77:	e8 48 77 ff ff       	call   c001a6c4 <File::close()>
c0022f7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022f7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022f81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022f84:	83 c4 0c             	add    esp,0xc
c0022f87:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022f8e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022f95:	56                   	push   esi
c0022f96:	e8 57 fd ff ff       	call   c0022cf2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022f9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0022f9e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fa2:	e8 1a 36 ff ff       	call   c00165c1 <free>
c0022fa7:	83 c4 10             	add    esp,0x10
c0022faa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fae:	81 c4 20 01 00 00    	add    esp,0x120
c0022fb4:	5b                   	pop    ebx
c0022fb5:	5e                   	pop    esi
c0022fb6:	5f                   	pop    edi
c0022fb7:	c3                   	ret    

c0022fb8 <Reg::getLine(char*, char*, char*)>:
c0022fb8:	57                   	push   edi
c0022fb9:	56                   	push   esi
c0022fba:	53                   	push   ebx
c0022fbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022fbf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022fc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022fc7:	57                   	push   edi
c0022fc8:	56                   	push   esi
c0022fc9:	53                   	push   ebx
c0022fca:	68 92 2d 03 c0       	push   0xc0032d92
c0022fcf:	e8 8f fe ff ff       	call   c0022e63 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022fd4:	83 c4 10             	add    esp,0x10
c0022fd7:	84 c0                	test   al,al
c0022fd9:	75 10                	jne    c0022feb <Reg::getLine(char*, char*, char*)+0x33>
c0022fdb:	57                   	push   edi
c0022fdc:	56                   	push   esi
c0022fdd:	53                   	push   ebx
c0022fde:	68 b7 2d 03 c0       	push   0xc0032db7
c0022fe3:	e8 7b fe ff ff       	call   c0022e63 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022fe8:	83 c4 10             	add    esp,0x10
c0022feb:	5b                   	pop    ebx
c0022fec:	5e                   	pop    esi
c0022fed:	5f                   	pop    edi
c0022fee:	c3                   	ret    

c0022fef <Reg::readInt(char*, char*, int*)>:
c0022fef:	55                   	push   ebp
c0022ff0:	57                   	push   edi
c0022ff1:	56                   	push   esi
c0022ff2:	53                   	push   ebx
c0022ff3:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022ff9:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022ffd:	55                   	push   ebp
c0022ffe:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0023005:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c002300c:	e8 a7 ff ff ff       	call   c0022fb8 <Reg::getLine(char*, char*, char*)>
c0023011:	83 c4 10             	add    esp,0x10
c0023014:	84 c0                	test   al,al
c0023016:	0f 84 b6 00 00 00    	je     c00230d2 <Reg::readInt(char*, char*, int*)+0xe3>
c002301c:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0023021:	83 fa 2b             	cmp    edx,0x2b
c0023024:	74 0c                	je     c0023032 <Reg::readInt(char*, char*, int*)+0x43>
c0023026:	83 fa 2d             	cmp    edx,0x2d
c0023029:	75 0e                	jne    c0023039 <Reg::readInt(char*, char*, int*)+0x4a>
c002302b:	ba 01 00 00 00       	mov    edx,0x1
c0023030:	eb 0b                	jmp    c002303d <Reg::readInt(char*, char*, int*)+0x4e>
c0023032:	ba 01 00 00 00       	mov    edx,0x1
c0023037:	eb 02                	jmp    c002303b <Reg::readInt(char*, char*, int*)+0x4c>
c0023039:	31 d2                	xor    edx,edx
c002303b:	31 c0                	xor    eax,eax
c002303d:	be 0a 00 00 00       	mov    esi,0xa
c0023042:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0023047:	75 21                	jne    c002306a <Reg::readInt(char*, char*, int*)+0x7b>
c0023049:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c002304e:	83 f9 78             	cmp    ecx,0x78
c0023051:	75 0a                	jne    c002305d <Reg::readInt(char*, char*, int*)+0x6e>
c0023053:	83 c2 02             	add    edx,0x2
c0023056:	be 10 00 00 00       	mov    esi,0x10
c002305b:	eb 0d                	jmp    c002306a <Reg::readInt(char*, char*, int*)+0x7b>
c002305d:	83 f9 62             	cmp    ecx,0x62
c0023060:	75 08                	jne    c002306a <Reg::readInt(char*, char*, int*)+0x7b>
c0023062:	83 c2 02             	add    edx,0x2
c0023065:	be 02 00 00 00       	mov    esi,0x2
c002306a:	01 d5                	add    ebp,edx
c002306c:	31 d2                	xor    edx,edx
c002306e:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0023072:	83 f9 0d             	cmp    ecx,0xd
c0023075:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0023079:	0f 94 c3             	sete   bl
c002307c:	85 c9                	test   ecx,ecx
c002307e:	89 df                	mov    edi,ebx
c0023080:	0f 94 c3             	sete   bl
c0023083:	09 df                	or     edi,ebx
c0023085:	89 fb                	mov    ebx,edi
c0023087:	83 e7 01             	and    edi,0x1
c002308a:	75 35                	jne    c00230c1 <Reg::readInt(char*, char*, int*)+0xd2>
c002308c:	0f af d6             	imul   edx,esi
c002308f:	83 fe 10             	cmp    esi,0x10
c0023092:	75 26                	jne    c00230ba <Reg::readInt(char*, char*, int*)+0xcb>
c0023094:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023098:	83 ef 41             	sub    edi,0x41
c002309b:	89 fb                	mov    ebx,edi
c002309d:	80 fb 05             	cmp    bl,0x5
c00230a0:	77 06                	ja     c00230a8 <Reg::readInt(char*, char*, int*)+0xb9>
c00230a2:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c00230a6:	eb 16                	jmp    c00230be <Reg::readInt(char*, char*, int*)+0xcf>
c00230a8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00230ac:	83 eb 61             	sub    ebx,0x61
c00230af:	80 fb 05             	cmp    bl,0x5
c00230b2:	77 06                	ja     c00230ba <Reg::readInt(char*, char*, int*)+0xcb>
c00230b4:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c00230b8:	eb 04                	jmp    c00230be <Reg::readInt(char*, char*, int*)+0xcf>
c00230ba:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c00230be:	45                   	inc    ebp
c00230bf:	eb ad                	jmp    c002306e <Reg::readInt(char*, char*, int*)+0x7f>
c00230c1:	84 c0                	test   al,al
c00230c3:	74 02                	je     c00230c7 <Reg::readInt(char*, char*, int*)+0xd8>
c00230c5:	f7 da                	neg    edx
c00230c7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00230ce:	89 10                	mov    DWORD PTR [eax],edx
c00230d0:	88 d8                	mov    al,bl
c00230d2:	81 c4 ec 00 00 00    	add    esp,0xec
c00230d8:	5b                   	pop    ebx
c00230d9:	5e                   	pop    esi
c00230da:	5f                   	pop    edi
c00230db:	5d                   	pop    ebp
c00230dc:	c3                   	ret    

c00230dd <Reg::readString(char*, char*, char*, int)>:
c00230dd:	57                   	push   edi
c00230de:	56                   	push   esi
c00230df:	53                   	push   ebx
c00230e0:	81 ec d4 00 00 00    	sub    esp,0xd4
c00230e6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00230ed:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00230f1:	57                   	push   edi
c00230f2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00230f9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0023100:	e8 b3 fe ff ff       	call   c0022fb8 <Reg::getLine(char*, char*, char*)>
c0023105:	83 c4 10             	add    esp,0x10
c0023108:	89 c6                	mov    esi,eax
c002310a:	84 c0                	test   al,al
c002310c:	74 44                	je     c0023152 <Reg::readString(char*, char*, char*, int)+0x75>
c002310e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0023115:	31 c0                	xor    eax,eax
c0023117:	4a                   	dec    edx
c0023118:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c002311b:	84 c9                	test   cl,cl
c002311d:	74 0f                	je     c002312e <Reg::readString(char*, char*, char*, int)+0x51>
c002311f:	39 c2                	cmp    edx,eax
c0023121:	7e 0b                	jle    c002312e <Reg::readString(char*, char*, char*, int)+0x51>
c0023123:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0023126:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c002312b:	40                   	inc    eax
c002312c:	eb ea                	jmp    c0023118 <Reg::readString(char*, char*, char*, int)+0x3b>
c002312e:	83 ec 0c             	sub    esp,0xc
c0023131:	53                   	push   ebx
c0023132:	e8 39 d4 fd ff       	call   c0000570 <strlen>
c0023137:	83 c4 10             	add    esp,0x10
c002313a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c002313f:	75 11                	jne    c0023152 <Reg::readString(char*, char*, char*, int)+0x75>
c0023141:	83 ec 0c             	sub    esp,0xc
c0023144:	53                   	push   ebx
c0023145:	e8 26 d4 fd ff       	call   c0000570 <strlen>
c002314a:	83 c4 10             	add    esp,0x10
c002314d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0023152:	81 c4 d0 00 00 00    	add    esp,0xd0
c0023158:	89 f0                	mov    eax,esi
c002315a:	5b                   	pop    ebx
c002315b:	5e                   	pop    esi
c002315c:	5f                   	pop    edi
c002315d:	c3                   	ret    

c002315e <Reg::readBool(char*, char*, bool*)>:
c002315e:	83 ec 20             	sub    esp,0x20
c0023161:	8d 44 24 10          	lea    eax,[esp+0x10]
c0023165:	50                   	push   eax
c0023166:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002316a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002316e:	e8 7c fe ff ff       	call   c0022fef <Reg::readInt(char*, char*, int*)>
c0023173:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0023178:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002317c:	0f 95 02             	setne  BYTE PTR [edx]
c002317f:	83 c4 2c             	add    esp,0x2c
c0023182:	c3                   	ret    

c0023183 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0023183:	53                   	push   ebx
c0023184:	83 ec 1c             	sub    esp,0x1c
c0023187:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c002318b:	8d 44 24 13          	lea    eax,[esp+0x13]
c002318f:	50                   	push   eax
c0023190:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023194:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023198:	e8 c1 ff ff ff       	call   c002315e <Reg::readBool(char*, char*, bool*)>
c002319d:	83 c4 10             	add    esp,0x10
c00231a0:	84 c0                	test   al,al
c00231a2:	74 04                	je     c00231a8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00231a4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00231a8:	88 d8                	mov    al,bl
c00231aa:	83 c4 18             	add    esp,0x18
c00231ad:	5b                   	pop    ebx
c00231ae:	c3                   	ret    

c00231af <Reg::readIntWithDefault(char*, char*, int)>:
c00231af:	53                   	push   ebx
c00231b0:	83 ec 1c             	sub    esp,0x1c
c00231b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00231b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00231bb:	50                   	push   eax
c00231bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00231c4:	e8 26 fe ff ff       	call   c0022fef <Reg::readInt(char*, char*, int*)>
c00231c9:	83 c4 10             	add    esp,0x10
c00231cc:	84 c0                	test   al,al
c00231ce:	74 04                	je     c00231d4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00231d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00231d4:	89 d8                	mov    eax,ebx
c00231d6:	83 c4 18             	add    esp,0x18
c00231d9:	5b                   	pop    ebx
c00231da:	c3                   	ret    

c00231db <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00231db:	57                   	push   edi
c00231dc:	56                   	push   esi
c00231dd:	56                   	push   esi
c00231de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00231e2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00231e6:	56                   	push   esi
c00231e7:	57                   	push   edi
c00231e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231f0:	e8 e8 fe ff ff       	call   c00230dd <Reg::readString(char*, char*, char*, int)>
c00231f5:	83 c4 10             	add    esp,0x10
c00231f8:	84 c0                	test   al,al
c00231fa:	75 1a                	jne    c0023216 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00231fc:	51                   	push   ecx
c00231fd:	56                   	push   esi
c00231fe:	6a 00                	push   0x0
c0023200:	57                   	push   edi
c0023201:	e8 ea d2 fd ff       	call   c00004f0 <memset>
c0023206:	8d 4e ff             	lea    ecx,[esi-0x1]
c0023209:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002320d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002320f:	83 c4 10             	add    esp,0x10
c0023212:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023216:	89 f8                	mov    eax,edi
c0023218:	5a                   	pop    edx
c0023219:	5e                   	pop    esi
c002321a:	5f                   	pop    edi
c002321b:	c3                   	ret    

c002321c <SysEject(regs*)>:
c002321c:	83 ec 0c             	sub    esp,0xc
c002321f:	83 ca ff             	or     edx,0xffffffff
c0023222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023226:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023229:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c002322e:	83 e9 41             	sub    ecx,0x41
c0023231:	83 f9 19             	cmp    ecx,0x19
c0023234:	77 18                	ja     c002324e <SysEject(regs*)+0x32>
c0023236:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c002323d:	85 c9                	test   ecx,ecx
c002323f:	74 0d                	je     c002324e <SysEject(regs*)+0x32>
c0023241:	83 ec 0c             	sub    esp,0xc
c0023244:	51                   	push   ecx
c0023245:	e8 00 96 ff ff       	call   c001c84a <LogicalDisk::eject()>
c002324a:	83 c4 10             	add    esp,0x10
c002324d:	99                   	cdq    
c002324e:	83 c4 0c             	add    esp,0xc
c0023251:	c3                   	ret    

c0023252 <SysExit(regs*)>:
c0023252:	83 ec 18             	sub    esp,0x18
c0023255:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023259:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002325c:	e8 8f 29 00 00       	call   c0025bf0 <terminateTask(int)>
c0023261:	83 c8 ff             	or     eax,0xffffffff
c0023264:	83 c4 1c             	add    esp,0x1c
c0023267:	89 c2                	mov    edx,eax
c0023269:	c3                   	ret    

c002326a <SysGetCwd(regs*)>:
c002326a:	83 ec 10             	sub    esp,0x10
c002326d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023271:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0023274:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002327c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002327f:	e8 78 70 ff ff       	call   c001a2fc <Fs::getcwd(Process*, char*, int)>
c0023284:	83 c4 1c             	add    esp,0x1c
c0023287:	99                   	cdq    
c0023288:	c3                   	ret    

c0023289 <SysGetPID(regs*)>:
c0023289:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002328e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023291:	8b 00                	mov    eax,DWORD PTR [eax]
c0023293:	99                   	cdq    
c0023294:	c3                   	ret    

c0023295 <SysGetRAMData(regs*)>:
c0023295:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c002329b:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c00232a5:	99                   	cdq    
c00232a6:	f7 f9                	idiv   ecx
c00232a8:	c1 e0 18             	shl    eax,0x18
c00232ab:	09 c8                	or     eax,ecx
c00232ad:	99                   	cdq    
c00232ae:	c3                   	ret    

c00232af <SysGetVGAPtr(regs*)>:
c00232af:	55                   	push   ebp
c00232b0:	57                   	push   edi
c00232b1:	56                   	push   esi
c00232b2:	53                   	push   ebx
c00232b3:	83 ec 18             	sub    esp,0x18
c00232b6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00232ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00232bd:	e8 fa 23 00 00       	call   c00256bc <Thr::processFromPID(int)>
c00232c2:	83 c4 10             	add    esp,0x10
c00232c5:	89 c1                	mov    ecx,eax
c00232c7:	b8 01 00 00 00       	mov    eax,0x1
c00232cc:	85 c9                	test   ecx,ecx
c00232ce:	74 57                	je     c0023327 <SysGetVGAPtr(regs*)+0x78>
c00232d0:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00232d6:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00232da:	74 0c                	je     c00232e8 <SysGetVGAPtr(regs*)+0x39>
c00232dc:	83 ec 0c             	sub    esp,0xc
c00232df:	55                   	push   ebp
c00232e0:	e8 6e 3f ff ff       	call   c0017253 <setActiveTerminal(VgaText*)>
c00232e5:	83 c4 10             	add    esp,0x10
c00232e8:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00232eb:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00232ee:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00232f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00232f5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00232f8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00232fb:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023301:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023304:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023307:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c002330d:	50                   	push   eax
c002330e:	50                   	push   eax
c002330f:	68 d2 2d 03 c0       	push   0xc0032dd2
c0023314:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023317:	05 a8 0f 00 00       	add    eax,0xfa8
c002331c:	50                   	push   eax
c002331d:	e8 1e d3 fd ff       	call   c0000640 <strcpy>
c0023322:	83 c4 10             	add    esp,0x10
c0023325:	31 c0                	xor    eax,eax
c0023327:	83 c4 0c             	add    esp,0xc
c002332a:	31 d2                	xor    edx,edx
c002332c:	5b                   	pop    ebx
c002332d:	5e                   	pop    esi
c002332e:	5f                   	pop    edi
c002332f:	5d                   	pop    ebp
c0023330:	c3                   	ret    
c0023331:	66 90                	xchg   ax,ax
c0023333:	90                   	nop

c0023334 <SysKill(regs*)>:
c0023334:	53                   	push   ebx
c0023335:	83 ec 08             	sub    esp,0x8
c0023338:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002333c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023340:	75 16                	jne    c0023358 <SysKill(regs*)+0x24>
c0023342:	83 ec 0c             	sub    esp,0xc
c0023345:	68 dc 2d 03 c0       	push   0xc0032ddc
c002334a:	e8 0b d1 ff ff       	call   c002045a <KePanic(char const*)>
c002334f:	83 c4 10             	add    esp,0x10
c0023352:	e9 89 00 00 00       	jmp    c00233e0 <SysKill(regs*)+0xac>
c0023357:	90                   	nop
c0023358:	83 ec 0c             	sub    esp,0xc
c002335b:	68 ec 01 04 c0       	push   0xc00401ec
c0023360:	e8 f7 ba 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023365:	8d 76 00             	lea    esi,[esi+0x0]
c0023368:	83 c4 10             	add    esp,0x10
c002336b:	85 c0                	test   eax,eax
c002336d:	74 19                	je     c0023388 <SysKill(regs*)+0x54>
c002336f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023372:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023375:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023377:	74 33                	je     c00233ac <SysKill(regs*)+0x78>
c0023379:	52                   	push   edx
c002337a:	52                   	push   edx
c002337b:	50                   	push   eax
c002337c:	68 ec 01 04 c0       	push   0xc00401ec
c0023381:	e8 f6 bd 00 00       	call   c002f17c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023386:	eb e0                	jmp    c0023368 <SysKill(regs*)+0x34>
c0023388:	83 ec 0c             	sub    esp,0xc
c002338b:	68 e0 01 04 c0       	push   0xc00401e0
c0023390:	e8 c7 ba 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023395:	8d 76 00             	lea    esi,[esi+0x0]
c0023398:	83 c4 10             	add    esp,0x10
c002339b:	85 c0                	test   eax,eax
c002339d:	74 41                	je     c00233e0 <SysKill(regs*)+0xac>
c002339f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00233a2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00233a5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00233a7:	75 27                	jne    c00233d0 <SysKill(regs*)+0x9c>
c00233a9:	8d 76 00             	lea    esi,[esi+0x0]
c00233ac:	51                   	push   ecx
c00233ad:	51                   	push   ecx
c00233ae:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00233b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233b9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00233bf:	e8 4f d9 ff ff       	call   c0020d13 <KeRaiseSignal(SigHandlerBlock*, int)>
c00233c4:	83 c4 10             	add    esp,0x10
c00233c7:	31 c0                	xor    eax,eax
c00233c9:	31 d2                	xor    edx,edx
c00233cb:	eb 1b                	jmp    c00233e8 <SysKill(regs*)+0xb4>
c00233cd:	8d 76 00             	lea    esi,[esi+0x0]
c00233d0:	52                   	push   edx
c00233d1:	52                   	push   edx
c00233d2:	50                   	push   eax
c00233d3:	68 e0 01 04 c0       	push   0xc00401e0
c00233d8:	e8 9f bd 00 00       	call   c002f17c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00233dd:	eb b9                	jmp    c0023398 <SysKill(regs*)+0x64>
c00233df:	90                   	nop
c00233e0:	83 c8 ff             	or     eax,0xffffffff
c00233e3:	89 c2                	mov    edx,eax
c00233e5:	8d 76 00             	lea    esi,[esi+0x0]
c00233e8:	83 c4 08             	add    esp,0x8
c00233eb:	5b                   	pop    ebx
c00233ec:	c3                   	ret    

c00233ed <SysLoadDLL(regs*)>:
c00233ed:	56                   	push   esi
c00233ee:	53                   	push   ebx
c00233ef:	31 d2                	xor    edx,edx
c00233f1:	51                   	push   ecx
c00233f2:	b8 01 00 00 00       	mov    eax,0x1
c00233f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00233fb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00233ff:	0f 84 8c 00 00 00    	je     c0023491 <SysLoadDLL(regs*)+0xa4>
c0023405:	83 ec 0c             	sub    esp,0xc
c0023408:	68 14 01 00 00       	push   0x114
c002340d:	e8 9f 31 ff ff       	call   c00165b1 <malloc>
c0023412:	83 c4 0c             	add    esp,0xc
c0023415:	89 c3                	mov    ebx,eax
c0023417:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002341c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002341f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023422:	53                   	push   ebx
c0023423:	e8 20 72 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0023428:	83 c4 10             	add    esp,0x10
c002342b:	31 d2                	xor    edx,edx
c002342d:	b8 02 00 00 00       	mov    eax,0x2
c0023432:	85 db                	test   ebx,ebx
c0023434:	74 5b                	je     c0023491 <SysLoadDLL(regs*)+0xa4>
c0023436:	83 ec 0c             	sub    esp,0xc
c0023439:	53                   	push   ebx
c002343a:	e8 eb 74 ff ff       	call   c001a92a <File::exists()>
c002343f:	83 c4 10             	add    esp,0x10
c0023442:	84 c0                	test   al,al
c0023444:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023446:	75 11                	jne    c0023459 <SysLoadDLL(regs*)+0x6c>
c0023448:	83 ec 0c             	sub    esp,0xc
c002344b:	53                   	push   ebx
c002344c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002344f:	83 c4 10             	add    esp,0x10
c0023452:	b8 03 00 00 00       	mov    eax,0x3
c0023457:	eb 36                	jmp    c002348f <SysLoadDLL(regs*)+0xa2>
c0023459:	83 ec 0c             	sub    esp,0xc
c002345c:	53                   	push   ebx
c002345d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023460:	58                   	pop    eax
c0023461:	5a                   	pop    edx
c0023462:	6a 00                	push   0x0
c0023464:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023467:	e8 81 15 00 00       	call   c00249ed <Thr::loadDLL(char const*, bool)>
c002346c:	83 c4 10             	add    esp,0x10
c002346f:	89 c1                	mov    ecx,eax
c0023471:	31 d2                	xor    edx,edx
c0023473:	b8 04 00 00 00       	mov    eax,0x4
c0023478:	85 c9                	test   ecx,ecx
c002347a:	74 15                	je     c0023491 <SysLoadDLL(regs*)+0xa4>
c002347c:	53                   	push   ebx
c002347d:	53                   	push   ebx
c002347e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023484:	51                   	push   ecx
c0023485:	e8 b5 17 00 00       	call   c0024c3f <Thr::executeDLL(unsigned long, void*)>
c002348a:	83 c4 10             	add    esp,0x10
c002348d:	31 c0                	xor    eax,eax
c002348f:	31 d2                	xor    edx,edx
c0023491:	59                   	pop    ecx
c0023492:	5b                   	pop    ebx
c0023493:	5e                   	pop    esi
c0023494:	c3                   	ret    

c0023495 <SysRead(regs*)>:
c0023495:	57                   	push   edi
c0023496:	56                   	push   esi
c0023497:	53                   	push   ebx
c0023498:	83 ec 10             	sub    esp,0x10
c002349b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002349f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00234a2:	83 f8 02             	cmp    eax,0x2
c00234a5:	77 10                	ja     c00234b7 <SysRead(regs*)+0x22>
c00234a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00234ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00234af:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00234b5:	eb 0e                	jmp    c00234c5 <SysRead(regs*)+0x30>
c00234b7:	83 ec 0c             	sub    esp,0xc
c00234ba:	50                   	push   eax
c00234bb:	e8 ef 4a ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c00234c0:	83 c4 10             	add    esp,0x10
c00234c3:	89 c1                	mov    ecx,eax
c00234c5:	83 c8 ff             	or     eax,0xffffffff
c00234c8:	85 c9                	test   ecx,ecx
c00234ca:	89 c2                	mov    edx,eax
c00234cc:	74 28                	je     c00234f6 <SysRead(regs*)+0x61>
c00234ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00234d6:	31 ff                	xor    edi,edi
c00234d8:	83 ec 0c             	sub    esp,0xc
c00234db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00234dd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00234e1:	52                   	push   edx
c00234e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00234e5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00234e8:	57                   	push   edi
c00234e9:	56                   	push   esi
c00234ea:	51                   	push   ecx
c00234eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00234ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00234f2:	83 c4 20             	add    esp,0x20
c00234f5:	99                   	cdq    
c00234f6:	83 c4 10             	add    esp,0x10
c00234f9:	5b                   	pop    ebx
c00234fa:	5e                   	pop    esi
c00234fb:	5f                   	pop    edi
c00234fc:	c3                   	ret    

c00234fd <SysRegisterSignal(regs*)>:
c00234fd:	83 ec 18             	sub    esp,0x18
c0023500:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023504:	6a 00                	push   0x0
c0023506:	6a 00                	push   0x0
c0023508:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002350b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002350e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023513:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023516:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002351c:	e8 bc d7 ff ff       	call   c0020cdd <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023521:	83 c4 2c             	add    esp,0x2c
c0023524:	99                   	cdq    
c0023525:	c3                   	ret    

c0023526 <SysRegistryGetTypeFromPath(regs*)>:
c0023526:	57                   	push   edi
c0023527:	56                   	push   esi
c0023528:	53                   	push   ebx
c0023529:	81 ec 38 01 00 00    	sub    esp,0x138
c002352f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023536:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023539:	68 fd 2d 03 c0       	push   0xc0032dfd
c002353e:	e8 fe 5e ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0023543:	5a                   	pop    edx
c0023544:	59                   	pop    ecx
c0023545:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023548:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002354b:	e8 4c f6 ff ff       	call   c0022b9c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023550:	5f                   	pop    edi
c0023551:	89 c6                	mov    esi,eax
c0023553:	5a                   	pop    edx
c0023554:	50                   	push   eax
c0023555:	68 1d 2e 03 c0       	push   0xc0032e1d
c002355a:	e8 e2 5e ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002355f:	83 c4 10             	add    esp,0x10
c0023562:	85 f6                	test   esi,esi
c0023564:	74 28                	je     c002358e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0023566:	50                   	push   eax
c0023567:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002356b:	57                   	push   edi
c002356c:	56                   	push   esi
c002356d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023570:	e8 0b f2 ff ff       	call   c0022780 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023575:	83 c4 0c             	add    esp,0xc
c0023578:	89 c3                	mov    ebx,eax
c002357a:	57                   	push   edi
c002357b:	50                   	push   eax
c002357c:	68 25 2e 03 c0       	push   0xc0032e25
c0023581:	e8 bb 5e ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0023586:	89 d8                	mov    eax,ebx
c0023588:	83 c4 10             	add    esp,0x10
c002358b:	99                   	cdq    
c002358c:	eb 05                	jmp    c0023593 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c002358e:	83 c8 ff             	or     eax,0xffffffff
c0023591:	89 c2                	mov    edx,eax
c0023593:	81 c4 30 01 00 00    	add    esp,0x130
c0023599:	5b                   	pop    ebx
c002359a:	5e                   	pop    esi
c002359b:	5f                   	pop    edi
c002359c:	c3                   	ret    

c002359d <SysRegistryReadExtent(regs*)>:
c002359d:	83 ec 1c             	sub    esp,0x1c
c00235a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00235a4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00235a7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00235aa:	85 c0                	test   eax,eax
c00235ac:	79 1f                	jns    c00235cd <SysRegistryReadExtent(regs*)+0x30>
c00235ae:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00235b3:	52                   	push   edx
c00235b4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00235b8:	52                   	push   edx
c00235b9:	50                   	push   eax
c00235ba:	51                   	push   ecx
c00235bb:	e8 b2 f0 ff ff       	call   c0022672 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00235c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00235c8:	83 c4 10             	add    esp,0x10
c00235cb:	eb 14                	jmp    c00235e1 <SysRegistryReadExtent(regs*)+0x44>
c00235cd:	83 ec 04             	sub    esp,0x4
c00235d0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00235d3:	50                   	push   eax
c00235d4:	51                   	push   ecx
c00235d5:	e8 32 eb ff ff       	call   c002210c <CmGetString(Reghive_Tag*, int, char*)>
c00235da:	83 c4 10             	add    esp,0x10
c00235dd:	31 c0                	xor    eax,eax
c00235df:	31 d2                	xor    edx,edx
c00235e1:	83 c4 1c             	add    esp,0x1c
c00235e4:	c3                   	ret    

c00235e5 <SysRegistryPathToExtentLookup(regs*)>:
c00235e5:	53                   	push   ebx
c00235e6:	83 ec 10             	sub    esp,0x10
c00235e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00235ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00235f0:	68 3b 2e 03 c0       	push   0xc0032e3b
c00235f5:	e8 47 5e ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00235fa:	58                   	pop    eax
c00235fb:	5a                   	pop    edx
c00235fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00235ff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023602:	e8 95 f5 ff ff       	call   c0022b9c <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023607:	83 c4 18             	add    esp,0x18
c002360a:	99                   	cdq    
c002360b:	5b                   	pop    ebx
c002360c:	c3                   	ret    

c002360d <SysRegistryEnterDirectory(regs*)>:
c002360d:	53                   	push   ebx
c002360e:	83 ec 10             	sub    esp,0x10
c0023611:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023615:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023618:	68 5e 2e 03 c0       	push   0xc0032e5e
c002361d:	e8 1f 5e ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0023622:	58                   	pop    eax
c0023623:	5a                   	pop    edx
c0023624:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023627:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002362a:	e8 54 eb ff ff       	call   c0022183 <CmEnterDirectory(Reghive_Tag*, int)>
c002362f:	83 c4 18             	add    esp,0x18
c0023632:	99                   	cdq    
c0023633:	5b                   	pop    ebx
c0023634:	c3                   	ret    

c0023635 <SysRegistryGetNext(regs*)>:
c0023635:	53                   	push   ebx
c0023636:	83 ec 10             	sub    esp,0x10
c0023639:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002363d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023640:	68 7c 2e 03 c0       	push   0xc0032e7c
c0023645:	e8 f7 5d ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002364a:	58                   	pop    eax
c002364b:	5a                   	pop    edx
c002364c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002364f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023652:	e8 6b eb ff ff       	call   c00221c2 <CmGetNext(Reghive_Tag*, int)>
c0023657:	83 c4 18             	add    esp,0x18
c002365a:	99                   	cdq    
c002365b:	5b                   	pop    ebx
c002365c:	c3                   	ret    

c002365d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c002365d:	57                   	push   edi
c002365e:	56                   	push   esi
c002365f:	53                   	push   ebx
c0023660:	81 ec 34 01 00 00    	sub    esp,0x134
c0023666:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c002366d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023671:	57                   	push   edi
c0023672:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023675:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023678:	e8 03 f1 ff ff       	call   c0022780 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002367d:	89 c3                	mov    ebx,eax
c002367f:	58                   	pop    eax
c0023680:	5a                   	pop    edx
c0023681:	57                   	push   edi
c0023682:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023685:	e8 b6 cf fd ff       	call   c0000640 <strcpy>
c002368a:	89 d8                	mov    eax,ebx
c002368c:	81 c4 40 01 00 00    	add    esp,0x140
c0023692:	99                   	cdq    
c0023693:	5b                   	pop    ebx
c0023694:	5e                   	pop    esi
c0023695:	5f                   	pop    edi
c0023696:	c3                   	ret    

c0023697 <SysRegistryOpen(regs*)>:
c0023697:	83 ec 18             	sub    esp,0x18
c002369a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002369e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00236a1:	e8 f6 e8 ff ff       	call   c0021f9c <CmOpen(char const*)>
c00236a6:	83 c4 1c             	add    esp,0x1c
c00236a9:	99                   	cdq    
c00236aa:	c3                   	ret    

c00236ab <SysRegistryClose(regs*)>:
c00236ab:	83 ec 18             	sub    esp,0x18
c00236ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236b2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00236b5:	e8 00 ea ff ff       	call   c00220ba <CmClose(Reghive_Tag*)>
c00236ba:	31 c0                	xor    eax,eax
c00236bc:	31 d2                	xor    edx,edx
c00236be:	83 c4 1c             	add    esp,0x1c
c00236c1:	c3                   	ret    

c00236c2 <SysSbrk(regs*)>:
c00236c2:	56                   	push   esi
c00236c3:	53                   	push   ebx
c00236c4:	50                   	push   eax
c00236c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00236ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236d1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00236d4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00236da:	85 db                	test   ebx,ebx
c00236dc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00236df:	74 02                	je     c00236e3 <SysSbrk(regs*)+0x21>
c00236e1:	79 06                	jns    c00236e9 <SysSbrk(regs*)+0x27>
c00236e3:	89 f0                	mov    eax,esi
c00236e5:	31 d2                	xor    edx,edx
c00236e7:	eb 2a                	jmp    c0023713 <SysSbrk(regs*)+0x51>
c00236e9:	83 c8 ff             	or     eax,0xffffffff
c00236ec:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00236f2:	89 c2                	mov    edx,eax
c00236f4:	77 1d                	ja     c0023713 <SysSbrk(regs*)+0x51>
c00236f6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00236fc:	50                   	push   eax
c00236fd:	c1 ea 0c             	shr    edx,0xc
c0023700:	68 07 0c 00 00       	push   0xc07
c0023705:	52                   	push   edx
c0023706:	51                   	push   ecx
c0023707:	e8 14 52 ff ff       	call   c0018920 <VAS::allocatePages(int, int)>
c002370c:	89 f0                	mov    eax,esi
c002370e:	31 d2                	xor    edx,edx
c0023710:	83 c4 10             	add    esp,0x10
c0023713:	59                   	pop    ecx
c0023714:	5b                   	pop    ebx
c0023715:	5e                   	pop    esi
c0023716:	c3                   	ret    

c0023717 <SysSetCwd(regs*)>:
c0023717:	83 ec 14             	sub    esp,0x14
c002371a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002371e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023726:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023729:	e8 9b 72 ff ff       	call   c001a9c9 <Fs::setcwd(Process*, char*)>
c002372e:	83 c4 1c             	add    esp,0x1c
c0023731:	99                   	cdq    
c0023732:	c3                   	ret    

c0023733 <SysSetTime(regs*)>:
c0023733:	55                   	push   ebp
c0023734:	31 c9                	xor    ecx,ecx
c0023736:	57                   	push   edi
c0023737:	bd 0c 00 00 00       	mov    ebp,0xc
c002373c:	56                   	push   esi
c002373d:	53                   	push   ebx
c002373e:	31 db                	xor    ebx,ebx
c0023740:	83 ec 10             	sub    esp,0x10
c0023743:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023747:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c002374a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002374d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023750:	89 c2                	mov    edx,eax
c0023752:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0023758:	83 e2 1f             	and    edx,0x1f
c002375b:	c1 e7 10             	shl    edi,0x10
c002375e:	42                   	inc    edx
c002375f:	c1 e8 05             	shr    eax,0x5
c0023762:	88 d1                	mov    cl,dl
c0023764:	31 d2                	xor    edx,edx
c0023766:	f7 f5                	div    ebp
c0023768:	89 dd                	mov    ebp,ebx
c002376a:	88 d5                	mov    ch,dl
c002376c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023772:	0f b7 c1             	movzx  eax,cx
c0023775:	31 d2                	xor    edx,edx
c0023777:	09 f8                	or     eax,edi
c0023779:	bf 3c 00 00 00       	mov    edi,0x3c
c002377e:	89 c1                	mov    ecx,eax
c0023780:	89 f0                	mov    eax,esi
c0023782:	f7 f7                	div    edi
c0023784:	c1 e2 10             	shl    edx,0x10
c0023787:	09 d5                	or     ebp,edx
c0023789:	31 d2                	xor    edx,edx
c002378b:	89 eb                	mov    ebx,ebp
c002378d:	f7 f7                	div    edi
c002378f:	bf 10 0e 00 00       	mov    edi,0xe10
c0023794:	88 d7                	mov    bh,dl
c0023796:	89 f0                	mov    eax,esi
c0023798:	31 d2                	xor    edx,edx
c002379a:	f7 f7                	div    edi
c002379c:	bf 18 00 00 00       	mov    edi,0x18
c00237a1:	31 d2                	xor    edx,edx
c00237a3:	f7 f7                	div    edi
c00237a5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00237aa:	88 d3                	mov    bl,dl
c00237ac:	53                   	push   ebx
c00237ad:	51                   	push   ecx
c00237ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00237b4:	e8 1d 7a ff ff       	call   c001b1d6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00237b9:	83 c4 1c             	add    esp,0x1c
c00237bc:	83 f0 01             	xor    eax,0x1
c00237bf:	5b                   	pop    ebx
c00237c0:	0f b6 c0             	movzx  eax,al
c00237c3:	5e                   	pop    esi
c00237c4:	31 d2                	xor    edx,edx
c00237c6:	5f                   	pop    edi
c00237c7:	5d                   	pop    ebp
c00237c8:	c3                   	ret    

c00237c9 <SysSymlink(regs*)>:
c00237c9:	56                   	push   esi
c00237ca:	83 c8 ff             	or     eax,0xffffffff
c00237cd:	53                   	push   ebx
c00237ce:	89 c2                	mov    edx,eax
c00237d0:	81 ec 34 02 00 00    	sub    esp,0x234
c00237d6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00237dd:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00237e1:	74 50                	je     c0023833 <SysSymlink(regs*)+0x6a>
c00237e3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00237e6:	85 c9                	test   ecx,ecx
c00237e8:	74 49                	je     c0023833 <SysSymlink(regs*)+0x6a>
c00237ea:	6a 01                	push   0x1
c00237ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237f4:	05 0c 01 00 00       	add    eax,0x10c
c00237f9:	50                   	push   eax
c00237fa:	51                   	push   ecx
c00237fb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00237ff:	56                   	push   esi
c0023800:	e8 4b 6b ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023805:	6a 01                	push   0x1
c0023807:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002380c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002380f:	05 0c 01 00 00       	add    eax,0x10c
c0023814:	50                   	push   eax
c0023815:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023818:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002381f:	53                   	push   ebx
c0023820:	e8 2b 6b ff ff       	call   c001a350 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023825:	83 c4 18             	add    esp,0x18
c0023828:	56                   	push   esi
c0023829:	53                   	push   ebx
c002382a:	e8 30 67 ff ff       	call   c0019f5f <KeCreateSymlink(char const*, char const*)>
c002382f:	83 c4 10             	add    esp,0x10
c0023832:	99                   	cdq    
c0023833:	81 c4 34 02 00 00    	add    esp,0x234
c0023839:	5b                   	pop    ebx
c002383a:	5e                   	pop    esi
c002383b:	c3                   	ret    

c002383c <SysTimezone(regs*)>:
c002383c:	53                   	push   ebx
c002383d:	83 ec 08             	sub    esp,0x8
c0023840:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023844:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023848:	75 17                	jne    c0023861 <SysTimezone(regs*)+0x25>
c002384a:	83 ec 0c             	sub    esp,0xc
c002384d:	68 93 2e 03 c0       	push   0xc0032e93
c0023852:	e8 ea 5b ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0023857:	83 c8 ff             	or     eax,0xffffffff
c002385a:	83 c4 10             	add    esp,0x10
c002385d:	89 c2                	mov    edx,eax
c002385f:	eb 20                	jmp    c0023881 <SysTimezone(regs*)+0x45>
c0023861:	83 ec 0c             	sub    esp,0xc
c0023864:	68 a8 2e 03 c0       	push   0xc0032ea8
c0023869:	e8 d3 5b ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002386e:	58                   	pop    eax
c002386f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023872:	e8 c9 76 ff ff       	call   c001af40 <User::loadClockSettings(int)>
c0023877:	83 c4 10             	add    esp,0x10
c002387a:	b8 01 00 00 00       	mov    eax,0x1
c002387f:	31 d2                	xor    edx,edx
c0023881:	83 c4 08             	add    esp,0x8
c0023884:	5b                   	pop    ebx
c0023885:	c3                   	ret    

c0023886 <SysTruncate(regs*)>:
c0023886:	55                   	push   ebp
c0023887:	57                   	push   edi
c0023888:	31 ff                	xor    edi,edi
c002388a:	56                   	push   esi
c002388b:	53                   	push   ebx
c002388c:	83 ec 0c             	sub    esp,0xc
c002388f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023893:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0023896:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0023899:	89 ce                	mov    esi,ecx
c002389b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c002389f:	0f 84 9a 00 00 00    	je     c002393f <SysTruncate(regs*)+0xb9>
c00238a5:	83 ec 0c             	sub    esp,0xc
c00238a8:	68 14 01 00 00       	push   0x114
c00238ad:	e8 ff 2c ff ff       	call   c00165b1 <malloc>
c00238b2:	83 c4 0c             	add    esp,0xc
c00238b5:	89 c3                	mov    ebx,eax
c00238b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238bc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00238bf:	55                   	push   ebp
c00238c0:	53                   	push   ebx
c00238c1:	e8 82 6d ff ff       	call   c001a648 <File::File(char const*, Process*)>
c00238c6:	83 c4 10             	add    esp,0x10
c00238c9:	31 d2                	xor    edx,edx
c00238cb:	b8 03 00 00 00       	mov    eax,0x3
c00238d0:	85 db                	test   ebx,ebx
c00238d2:	0f 84 a2 00 00 00    	je     c002397a <SysTruncate(regs*)+0xf4>
c00238d8:	51                   	push   ecx
c00238d9:	51                   	push   ecx
c00238da:	6a 02                	push   0x2
c00238dc:	53                   	push   ebx
c00238dd:	e8 84 6d ff ff       	call   c001a666 <File::open(FileOpenMode)>
c00238e2:	83 c4 10             	add    esp,0x10
c00238e5:	85 c0                	test   eax,eax
c00238e7:	74 13                	je     c00238fc <SysTruncate(regs*)+0x76>
c00238e9:	83 ec 0c             	sub    esp,0xc
c00238ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00238ee:	53                   	push   ebx
c00238ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00238f2:	83 c4 10             	add    esp,0x10
c00238f5:	b8 04 00 00 00       	mov    eax,0x4
c00238fa:	eb 7c                	jmp    c0023978 <SysTruncate(regs*)+0xf2>
c00238fc:	52                   	push   edx
c00238fd:	57                   	push   edi
c00238fe:	56                   	push   esi
c00238ff:	53                   	push   ebx
c0023900:	e8 75 6e ff ff       	call   c001a77a <File::truncate(unsigned long long)>
c0023905:	83 c4 10             	add    esp,0x10
c0023908:	85 c0                	test   eax,eax
c002390a:	74 1b                	je     c0023927 <SysTruncate(regs*)+0xa1>
c002390c:	83 ec 0c             	sub    esp,0xc
c002390f:	53                   	push   ebx
c0023910:	e8 af 6d ff ff       	call   c001a6c4 <File::close()>
c0023915:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023917:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002391a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002391d:	83 c4 10             	add    esp,0x10
c0023920:	b8 05 00 00 00       	mov    eax,0x5
c0023925:	eb 51                	jmp    c0023978 <SysTruncate(regs*)+0xf2>
c0023927:	83 ec 0c             	sub    esp,0xc
c002392a:	53                   	push   ebx
c002392b:	e8 94 6d ff ff       	call   c001a6c4 <File::close()>
c0023930:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023932:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023935:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023938:	83 c4 10             	add    esp,0x10
c002393b:	31 c0                	xor    eax,eax
c002393d:	eb 39                	jmp    c0023978 <SysTruncate(regs*)+0xf2>
c002393f:	31 d2                	xor    edx,edx
c0023941:	b8 01 00 00 00       	mov    eax,0x1
c0023946:	83 fd 02             	cmp    ebp,0x2
c0023949:	7e 2f                	jle    c002397a <SysTruncate(regs*)+0xf4>
c002394b:	83 ec 0c             	sub    esp,0xc
c002394e:	51                   	push   ecx
c002394f:	e8 5b 46 ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c0023954:	83 c4 10             	add    esp,0x10
c0023957:	89 c1                	mov    ecx,eax
c0023959:	31 d2                	xor    edx,edx
c002395b:	b8 02 00 00 00       	mov    eax,0x2
c0023960:	85 c9                	test   ecx,ecx
c0023962:	74 16                	je     c002397a <SysTruncate(regs*)+0xf4>
c0023964:	50                   	push   eax
c0023965:	57                   	push   edi
c0023966:	56                   	push   esi
c0023967:	51                   	push   ecx
c0023968:	e8 0d 6e ff ff       	call   c001a77a <File::truncate(unsigned long long)>
c002396d:	83 c4 10             	add    esp,0x10
c0023970:	85 c0                	test   eax,eax
c0023972:	0f 95 c0             	setne  al
c0023975:	0f b6 c0             	movzx  eax,al
c0023978:	31 d2                	xor    edx,edx
c002397a:	83 c4 0c             	add    esp,0xc
c002397d:	5b                   	pop    ebx
c002397e:	5e                   	pop    esi
c002397f:	5f                   	pop    edi
c0023980:	5d                   	pop    ebp
c0023981:	c3                   	ret    

c0023982 <SysWrite(regs*)>:
c0023982:	57                   	push   edi
c0023983:	56                   	push   esi
c0023984:	53                   	push   ebx
c0023985:	83 ec 10             	sub    esp,0x10
c0023988:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002398c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002398f:	83 f8 02             	cmp    eax,0x2
c0023992:	77 10                	ja     c00239a4 <SysWrite(regs*)+0x22>
c0023994:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023999:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002399c:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00239a2:	eb 0e                	jmp    c00239b2 <SysWrite(regs*)+0x30>
c00239a4:	83 ec 0c             	sub    esp,0xc
c00239a7:	50                   	push   eax
c00239a8:	e8 02 46 ff ff       	call   c0017faf <KeGetFileFromDescriptor(int)>
c00239ad:	83 c4 10             	add    esp,0x10
c00239b0:	89 c1                	mov    ecx,eax
c00239b2:	83 c8 ff             	or     eax,0xffffffff
c00239b5:	85 c9                	test   ecx,ecx
c00239b7:	89 c2                	mov    edx,eax
c00239b9:	74 28                	je     c00239e3 <SysWrite(regs*)+0x61>
c00239bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00239c3:	31 ff                	xor    edi,edi
c00239c5:	83 ec 0c             	sub    esp,0xc
c00239c8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00239ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00239ce:	52                   	push   edx
c00239cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00239d2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00239d5:	57                   	push   edi
c00239d6:	56                   	push   esi
c00239d7:	51                   	push   ecx
c00239d8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00239db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00239df:	83 c4 20             	add    esp,0x20
c00239e2:	99                   	cdq    
c00239e3:	83 c4 10             	add    esp,0x10
c00239e6:	5b                   	pop    ebx
c00239e7:	5e                   	pop    esi
c00239e8:	5f                   	pop    edi
c00239e9:	c3                   	ret    

c00239ea <SysWsbe(regs*)>:
c00239ea:	57                   	push   edi
c00239eb:	b9 0b 00 00 00       	mov    ecx,0xb
c00239f0:	56                   	push   esi
c00239f1:	be e7 2e 03 c0       	mov    esi,0xc0032ee7
c00239f6:	53                   	push   ebx
c00239f7:	83 ec 30             	sub    esp,0x30
c00239fa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00239fe:	fc                   	cld    
c00239ff:	83 ec 0c             	sub    esp,0xc
c0023a02:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023a04:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a0d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a10:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023a16:	8b 06                	mov    eax,DWORD PTR [esi]
c0023a18:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0023a1b:	57                   	push   edi
c0023a1c:	e8 4f cb fd ff       	call   c0000570 <strlen>
c0023a21:	5a                   	pop    edx
c0023a22:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023a26:	52                   	push   edx
c0023a27:	31 d2                	xor    edx,edx
c0023a29:	57                   	push   edi
c0023a2a:	52                   	push   edx
c0023a2b:	50                   	push   eax
c0023a2c:	56                   	push   esi
c0023a2d:	ff d3                	call   ebx
c0023a2f:	83 c4 14             	add    esp,0x14
c0023a32:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023a36:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023a39:	e8 b2 21 00 00       	call   c0025bf0 <terminateTask(int)>
c0023a3e:	83 c4 40             	add    esp,0x40
c0023a41:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023a46:	5b                   	pop    ebx
c0023a47:	31 d2                	xor    edx,edx
c0023a49:	5e                   	pop    esi
c0023a4a:	5f                   	pop    edi
c0023a4b:	c3                   	ret    

c0023a4c <SysYield(regs*)>:
c0023a4c:	83 ec 0c             	sub    esp,0xc
c0023a4f:	fa                   	cli    
c0023a50:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a56:	e8 15 1a 00 00       	call   c0025470 <schedule()>
c0023a5b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023a60:	48                   	dec    eax
c0023a61:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023a66:	75 01                	jne    c0023a69 <SysYield(regs*)+0x1d>
c0023a68:	fb                   	sti    
c0023a69:	31 c0                	xor    eax,eax
c0023a6b:	31 d2                	xor    edx,edx
c0023a6d:	83 c4 0c             	add    esp,0xc
c0023a70:	c3                   	ret    

c0023a71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023a71:	55                   	push   ebp
c0023a72:	57                   	push   edi
c0023a73:	56                   	push   esi
c0023a74:	53                   	push   ebx
c0023a75:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0023a7b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023a83:	0f 95 c0             	setne  al
c0023a86:	31 d2                	xor    edx,edx
c0023a88:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0023a90:	0f 94 c2             	sete   dl
c0023a93:	85 c2                	test   edx,eax
c0023a95:	74 34                	je     c0023acb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023a97:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023aa2:	74 27                	je     c0023acb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0023aa4:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0023aab:	05 00 10 00 00       	add    eax,0x1000
c0023ab0:	89 c1                	mov    ecx,eax
c0023ab2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023ab7:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0023abd:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0023ac4:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0023acb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0023ad2:	83 ec 0c             	sub    esp,0xc
c0023ad5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023adb:	6a 01                	push   0x1
c0023add:	e8 27 46 ff ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c0023ae2:	83 c4 10             	add    esp,0x10
c0023ae5:	89 c3                	mov    ebx,eax
c0023ae7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023aed:	0f 86 25 01 00 00    	jbe    c0023c18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023af3:	c1 ee 0c             	shr    esi,0xc
c0023af6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023afd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023b01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b09:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023b10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023b14:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0023b1b:	29 ef                	sub    edi,ebp
c0023b1d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023b21:	0f 83 f8 00 00 00    	jae    c0023c1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0023b27:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023b2d:	76 05                	jbe    c0023b34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023b2f:	bf 00 10 00 00       	mov    edi,0x1000
c0023b34:	83 ec 0c             	sub    esp,0xc
c0023b37:	31 d2                	xor    edx,edx
c0023b39:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023b40:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b42:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023b46:	50                   	push   eax
c0023b47:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023b4b:	56                   	push   esi
c0023b4c:	52                   	push   edx
c0023b4d:	57                   	push   edi
c0023b4e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023b55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b58:	83 c4 20             	add    esp,0x20
c0023b5b:	85 c0                	test   eax,eax
c0023b5d:	75 06                	jne    c0023b65 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023b5f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023b63:	74 13                	je     c0023b78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023b65:	83 ec 0c             	sub    esp,0xc
c0023b68:	53                   	push   ebx
c0023b69:	e8 b9 48 ff ff       	call   c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c0023b6e:	83 c4 10             	add    esp,0x10
c0023b71:	31 c0                	xor    eax,eax
c0023b73:	e9 7c 01 00 00       	jmp    c0023cf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0023b78:	fa                   	cli    
c0023b79:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023b7f:	e8 36 2d ff ff       	call   c00168ba <Phys::allocatePage()>
c0023b84:	6a 07                	push   0x7
c0023b86:	89 c7                	mov    edi,eax
c0023b88:	53                   	push   ebx
c0023b89:	50                   	push   eax
c0023b8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023b8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023b92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023b98:	e8 7f 4c ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0023b9d:	83 c4 0c             	add    esp,0xc
c0023ba0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023ba7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023bad:	6a 00                	push   0x0
c0023baf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023bb4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023bb7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023bbd:	e8 c0 4a ff ff       	call   c0018682 <VAS::mapOtherVASIn(bool, VAS*)>
c0023bc2:	58                   	pop    eax
c0023bc3:	5a                   	pop    edx
c0023bc4:	68 07 0c 00 00       	push   0xc07
c0023bc9:	55                   	push   ebp
c0023bca:	57                   	push   edi
c0023bcb:	89 df                	mov    edi,ebx
c0023bcd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023bd4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023bda:	6a 00                	push   0x0
c0023bdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023be1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023be4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023bea:	e8 7f 4e ff ff       	call   c0018a6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023bef:	b9 00 10 00 00       	mov    ecx,0x1000
c0023bf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023bf6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023bfb:	83 c4 20             	add    esp,0x20
c0023bfe:	48                   	dec    eax
c0023bff:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023c04:	85 c0                	test   eax,eax
c0023c06:	75 01                	jne    c0023c09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0023c08:	fb                   	sti    
c0023c09:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023c0f:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023c13:	e9 f1 fe ff ff       	jmp    c0023b09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0023c18:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023c1f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023c26:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023c2c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023c32:	0f 86 ae 00 00 00    	jbe    c0023ce6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023c38:	fa                   	cli    
c0023c39:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023c3f:	c1 ee 0c             	shr    esi,0xc
c0023c42:	51                   	push   ecx
c0023c43:	31 ff                	xor    edi,edi
c0023c45:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023c4c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c52:	6a 00                	push   0x0
c0023c54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023c59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023c5c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023c62:	e8 1b 4a ff ff       	call   c0018682 <VAS::mapOtherVASIn(bool, VAS*)>
c0023c67:	83 c4 10             	add    esp,0x10
c0023c6a:	e8 4b 2c ff ff       	call   c00168ba <Phys::allocatePage()>
c0023c6f:	47                   	inc    edi
c0023c70:	6a 07                	push   0x7
c0023c72:	53                   	push   ebx
c0023c73:	50                   	push   eax
c0023c74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c78:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023c7e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023c81:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023c87:	e8 90 4b ff ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c0023c8c:	58                   	pop    eax
c0023c8d:	5a                   	pop    edx
c0023c8e:	68 07 0c 00 00       	push   0xc07
c0023c93:	55                   	push   ebp
c0023c94:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023c9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c9e:	50                   	push   eax
c0023c9f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023ca6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023cac:	6a 00                	push   0x0
c0023cae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023cb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023cb6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023cbc:	e8 ad 4d ff ff       	call   c0018a6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023cc1:	83 c4 1c             	add    esp,0x1c
c0023cc4:	68 00 10 00 00       	push   0x1000
c0023cc9:	6a 00                	push   0x0
c0023ccb:	53                   	push   ebx
c0023ccc:	e8 1f c8 fd ff       	call   c00004f0 <memset>
c0023cd1:	83 c4 10             	add    esp,0x10
c0023cd4:	39 fe                	cmp    esi,edi
c0023cd6:	77 92                	ja     c0023c6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0023cd8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023cdd:	48                   	dec    eax
c0023cde:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023ce3:	75 01                	jne    c0023ce6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0023ce5:	fb                   	sti    
c0023ce6:	83 ec 0c             	sub    esp,0xc
c0023ce9:	53                   	push   ebx
c0023cea:	e8 38 47 ff ff       	call   c0018427 <Virt::freeKernelVirtualPages(unsigned long)>
c0023cef:	83 c4 10             	add    esp,0x10
c0023cf2:	b0 01                	mov    al,0x1
c0023cf4:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023cfa:	5b                   	pop    ebx
c0023cfb:	5e                   	pop    esi
c0023cfc:	5f                   	pop    edi
c0023cfd:	5d                   	pop    ebp
c0023cfe:	c3                   	ret    

c0023cff <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023cff:	55                   	push   ebp
c0023d00:	57                   	push   edi
c0023d01:	56                   	push   esi
c0023d02:	53                   	push   ebx
c0023d03:	83 ec 48             	sub    esp,0x48
c0023d06:	68 14 01 00 00       	push   0x114
c0023d0b:	e8 a1 28 ff ff       	call   c00165b1 <malloc>
c0023d10:	83 c4 0c             	add    esp,0xc
c0023d13:	89 c6                	mov    esi,eax
c0023d15:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023d19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023d1d:	50                   	push   eax
c0023d1e:	e8 25 69 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0023d23:	58                   	pop    eax
c0023d24:	5a                   	pop    edx
c0023d25:	6a 01                	push   0x1
c0023d27:	56                   	push   esi
c0023d28:	e8 39 69 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0023d2d:	83 c4 10             	add    esp,0x10
c0023d30:	85 c0                	test   eax,eax
c0023d32:	0f 85 43 01 00 00    	jne    c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023d38:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023d40:	83 ec 0c             	sub    esp,0xc
c0023d43:	6a 34                	push   0x34
c0023d45:	e8 67 28 ff ff       	call   c00165b1 <malloc>
c0023d4a:	89 c3                	mov    ebx,eax
c0023d4c:	58                   	pop    eax
c0023d4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d4f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023d53:	57                   	push   edi
c0023d54:	53                   	push   ebx
c0023d55:	6a 00                	push   0x0
c0023d57:	6a 34                	push   0x34
c0023d59:	56                   	push   esi
c0023d5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023d5d:	83 c4 20             	add    esp,0x20
c0023d60:	85 c0                	test   eax,eax
c0023d62:	0f 85 13 01 00 00    	jne    c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023d68:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023d6e:	0f 85 07 01 00 00    	jne    c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023d74:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023d77:	85 c0                	test   eax,eax
c0023d79:	0f 84 fc 00 00 00    	je     c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023d7f:	31 d2                	xor    edx,edx
c0023d81:	55                   	push   ebp
c0023d82:	52                   	push   edx
c0023d83:	50                   	push   eax
c0023d84:	56                   	push   esi
c0023d85:	e8 9a 69 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0023d8a:	83 c4 10             	add    esp,0x10
c0023d8d:	85 c0                	test   eax,eax
c0023d8f:	0f 85 e6 00 00 00    	jne    c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023d95:	83 ec 0c             	sub    esp,0xc
c0023d98:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023d9b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023d9f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023da3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023da7:	0f af c2             	imul   eax,edx
c0023daa:	50                   	push   eax
c0023dab:	e8 01 28 ff ff       	call   c00165b1 <malloc>
c0023db0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023db2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023db6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023db9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023dbd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023dc1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023dc5:	0f af c2             	imul   eax,edx
c0023dc8:	99                   	cdq    
c0023dc9:	52                   	push   edx
c0023dca:	50                   	push   eax
c0023dcb:	56                   	push   esi
c0023dcc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023dcf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023dd2:	83 c4 20             	add    esp,0x20
c0023dd5:	85 c0                	test   eax,eax
c0023dd7:	0f 84 9e 00 00 00    	je     c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023ddd:	31 d2                	xor    edx,edx
c0023ddf:	51                   	push   ecx
c0023de0:	52                   	push   edx
c0023de1:	50                   	push   eax
c0023de2:	56                   	push   esi
c0023de3:	e8 3c 69 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0023de8:	83 c4 10             	add    esp,0x10
c0023deb:	85 c0                	test   eax,eax
c0023ded:	0f 85 88 00 00 00    	jne    c0023e7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023df3:	83 ec 0c             	sub    esp,0xc
c0023df6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023dfa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023dfe:	31 ed                	xor    ebp,ebp
c0023e00:	0f af c2             	imul   eax,edx
c0023e03:	50                   	push   eax
c0023e04:	e8 a8 27 ff ff       	call   c00165b1 <malloc>
c0023e09:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023e0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e0f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e16:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023e1a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023e1e:	0f af c2             	imul   eax,edx
c0023e21:	99                   	cdq    
c0023e22:	52                   	push   edx
c0023e23:	50                   	push   eax
c0023e24:	56                   	push   esi
c0023e25:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e28:	83 c4 20             	add    esp,0x20
c0023e2b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023e33:	0f b7 fd             	movzx  edi,bp
c0023e36:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023e3a:	73 7d                	jae    c0023eb9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023e3c:	c1 e7 05             	shl    edi,0x5
c0023e3f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023e43:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023e46:	75 6b                	jne    c0023eb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023e48:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023e4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023e4f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023e52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e56:	52                   	push   edx
c0023e57:	31 d2                	xor    edx,edx
c0023e59:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023e5c:	52                   	push   edx
c0023e5d:	50                   	push   eax
c0023e5e:	56                   	push   esi
c0023e5f:	e8 c0 68 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0023e64:	83 c4 10             	add    esp,0x10
c0023e67:	85 c0                	test   eax,eax
c0023e69:	74 17                	je     c0023e82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023e6b:	83 ec 0c             	sub    esp,0xc
c0023e6e:	68 13 2f 03 c0       	push   0xc0032f13
c0023e73:	e8 c9 55 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0023e78:	83 c4 10             	add    esp,0x10
c0023e7b:	31 c0                	xor    eax,eax
c0023e7d:	e9 87 00 00 00       	jmp    c0023f09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023e82:	83 ec 0c             	sub    esp,0xc
c0023e85:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023e88:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023e8b:	50                   	push   eax
c0023e8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023e90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023e94:	56                   	push   esi
c0023e95:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023e99:	e8 d3 fb ff ff       	call   c0023a71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023e9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023ea2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023ea6:	83 c4 20             	add    esp,0x20
c0023ea9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023ead:	73 04                	jae    c0023eb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023eb3:	45                   	inc    ebp
c0023eb4:	e9 7a ff ff ff       	jmp    c0023e33 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023eb9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023ebd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ec1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023ec5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023ecb:	83 ec 0c             	sub    esp,0xc
c0023ece:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023ed4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023ed9:	05 00 10 00 00       	add    eax,0x1000
c0023ede:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023ee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ee5:	e8 d7 26 ff ff       	call   c00165c1 <free>
c0023eea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023eed:	e8 cf 26 ff ff       	call   c00165c1 <free>
c0023ef2:	58                   	pop    eax
c0023ef3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023ef7:	e8 c5 26 ff ff       	call   c00165c1 <free>
c0023efc:	89 34 24             	mov    DWORD PTR [esp],esi
c0023eff:	e8 c0 67 ff ff       	call   c001a6c4 <File::close()>
c0023f04:	83 c4 10             	add    esp,0x10
c0023f07:	b0 01                	mov    al,0x1
c0023f09:	83 c4 3c             	add    esp,0x3c
c0023f0c:	5b                   	pop    ebx
c0023f0d:	5e                   	pop    esi
c0023f0e:	5f                   	pop    edi
c0023f0f:	5d                   	pop    ebp
c0023f10:	c3                   	ret    

c0023f11 <Thr::runtimeReferenceHelper()>:
c0023f11:	83 ec 18             	sub    esp,0x18
c0023f14:	68 1b 2f 03 c0       	push   0xc0032f1b
c0023f19:	e8 23 55 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0023f1e:	fa                   	cli    
c0023f1f:	83 c4 10             	add    esp,0x10
c0023f22:	eb fe                	jmp    c0023f22 <Thr::runtimeReferenceHelper()+0x11>

c0023f24 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023f24:	57                   	push   edi
c0023f25:	56                   	push   esi
c0023f26:	53                   	push   ebx
c0023f27:	31 db                	xor    ebx,ebx
c0023f29:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023f2f:	7e 3c                	jle    c0023f6d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023f31:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023f38:	31 ff                	xor    edi,edi
c0023f3a:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023f41:	7e 27                	jle    c0023f6a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023f43:	50                   	push   eax
c0023f44:	50                   	push   eax
c0023f45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023f49:	8b 06                	mov    eax,DWORD PTR [esi]
c0023f4b:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023f52:	50                   	push   eax
c0023f53:	e8 f8 c7 fd ff       	call   c0000750 <strcmp>
c0023f58:	83 c4 10             	add    esp,0x10
c0023f5b:	85 c0                	test   eax,eax
c0023f5d:	75 05                	jne    c0023f64 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023f5f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023f62:	eb 0b                	jmp    c0023f6f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023f64:	83 c6 10             	add    esi,0x10
c0023f67:	47                   	inc    edi
c0023f68:	eb d0                	jmp    c0023f3a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023f6a:	43                   	inc    ebx
c0023f6b:	eb bc                	jmp    c0023f29 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023f6d:	31 c0                	xor    eax,eax
c0023f6f:	5b                   	pop    ebx
c0023f70:	5e                   	pop    esi
c0023f71:	5f                   	pop    edi
c0023f72:	c3                   	ret    

c0023f73 <Thr::loadKernelSymbolTable(char const*)>:
c0023f73:	55                   	push   ebp
c0023f74:	57                   	push   edi
c0023f75:	56                   	push   esi
c0023f76:	53                   	push   ebx
c0023f77:	83 ec 68             	sub    esp,0x68
c0023f7a:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023f80:	68 14 01 00 00       	push   0x114
c0023f85:	e8 27 26 ff ff       	call   c00165b1 <malloc>
c0023f8a:	83 c4 0c             	add    esp,0xc
c0023f8d:	89 c3                	mov    ebx,eax
c0023f8f:	56                   	push   esi
c0023f90:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023f94:	50                   	push   eax
c0023f95:	e8 ae 66 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0023f9a:	5e                   	pop    esi
c0023f9b:	5f                   	pop    edi
c0023f9c:	6a 01                	push   0x1
c0023f9e:	53                   	push   ebx
c0023f9f:	e8 c2 66 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0023fa4:	83 c4 10             	add    esp,0x10
c0023fa7:	85 c0                	test   eax,eax
c0023fa9:	74 0a                	je     c0023fb5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023fab:	83 ec 0c             	sub    esp,0xc
c0023fae:	68 3d 2f 03 c0       	push   0xc0032f3d
c0023fb3:	eb 34                	jmp    c0023fe9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023fb5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023fbd:	83 ec 0c             	sub    esp,0xc
c0023fc0:	6a 34                	push   0x34
c0023fc2:	e8 ea 25 ff ff       	call   c00165b1 <malloc>
c0023fc7:	59                   	pop    ecx
c0023fc8:	89 c7                	mov    edi,eax
c0023fca:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023fce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fd0:	56                   	push   esi
c0023fd1:	57                   	push   edi
c0023fd2:	6a 00                	push   0x0
c0023fd4:	6a 34                	push   0x34
c0023fd6:	53                   	push   ebx
c0023fd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fda:	83 c4 20             	add    esp,0x20
c0023fdd:	85 c0                	test   eax,eax
c0023fdf:	74 17                	je     c0023ff8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023fe1:	83 ec 0c             	sub    esp,0xc
c0023fe4:	68 54 2f 03 c0       	push   0xc0032f54
c0023fe9:	e8 6c c4 ff ff       	call   c002045a <KePanic(char const*)>
c0023fee:	83 c4 10             	add    esp,0x10
c0023ff1:	31 c0                	xor    eax,eax
c0023ff3:	e9 31 02 00 00       	jmp    c0024229 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023ff8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023ffe:	75 e1                	jne    c0023fe1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024000:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0024003:	85 c0                	test   eax,eax
c0024005:	74 da                	je     c0023fe1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024007:	52                   	push   edx
c0024008:	31 d2                	xor    edx,edx
c002400a:	52                   	push   edx
c002400b:	50                   	push   eax
c002400c:	53                   	push   ebx
c002400d:	e8 12 67 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0024012:	83 c4 10             	add    esp,0x10
c0024015:	85 c0                	test   eax,eax
c0024017:	75 c8                	jne    c0023fe1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0024019:	83 ec 0c             	sub    esp,0xc
c002401c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024020:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024024:	31 ed                	xor    ebp,ebp
c0024026:	0f af c2             	imul   eax,edx
c0024029:	50                   	push   eax
c002402a:	e8 82 25 ff ff       	call   c00165b1 <malloc>
c002402f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024031:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024035:	89 34 24             	mov    DWORD PTR [esp],esi
c0024038:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002403c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024040:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024044:	0f af c2             	imul   eax,edx
c0024047:	99                   	cdq    
c0024048:	52                   	push   edx
c0024049:	50                   	push   eax
c002404a:	53                   	push   ebx
c002404b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002404e:	83 c4 20             	add    esp,0x20
c0024051:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024059:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024061:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024069:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024071:	0f b7 f5             	movzx  esi,bp
c0024074:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0024078:	0f 83 a7 00 00 00    	jae    c0024125 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c002407e:	6b f6 28             	imul   esi,esi,0x28
c0024081:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024085:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002408c:	50                   	push   eax
c002408d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024091:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0024095:	8b 16                	mov    edx,DWORD PTR [esi]
c0024097:	6b c0 28             	imul   eax,eax,0x28
c002409a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c002409e:	89 d0                	mov    eax,edx
c00240a0:	31 d2                	xor    edx,edx
c00240a2:	52                   	push   edx
c00240a3:	50                   	push   eax
c00240a4:	53                   	push   ebx
c00240a5:	e8 7a 66 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00240aa:	83 c4 0c             	add    esp,0xc
c00240ad:	6a 20                	push   0x20
c00240af:	6a 00                	push   0x0
c00240b1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00240b5:	52                   	push   edx
c00240b6:	e8 35 c4 fd ff       	call   c00004f0 <memset>
c00240bb:	58                   	pop    eax
c00240bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240be:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00240c2:	51                   	push   ecx
c00240c3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00240c7:	52                   	push   edx
c00240c8:	6a 00                	push   0x0
c00240ca:	6a 1f                	push   0x1f
c00240cc:	53                   	push   ebx
c00240cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00240d0:	83 c4 18             	add    esp,0x18
c00240d3:	68 6b 2f 03 c0       	push   0xc0032f6b
c00240d8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00240dc:	52                   	push   edx
c00240dd:	e8 6e c6 fd ff       	call   c0000750 <strcmp>
c00240e2:	83 c4 10             	add    esp,0x10
c00240e5:	85 c0                	test   eax,eax
c00240e7:	75 0f                	jne    c00240f8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00240e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00240ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240f8:	50                   	push   eax
c00240f9:	50                   	push   eax
c00240fa:	68 73 2f 03 c0       	push   0xc0032f73
c00240ff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0024103:	50                   	push   eax
c0024104:	e8 47 c6 fd ff       	call   c0000750 <strcmp>
c0024109:	83 c4 10             	add    esp,0x10
c002410c:	85 c0                	test   eax,eax
c002410e:	75 0f                	jne    c002411f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0024110:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024113:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024117:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002411b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002411f:	45                   	inc    ebp
c0024120:	e9 4c ff ff ff       	jmp    c0024071 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0024125:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002412a:	75 10                	jne    c002413c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c002412c:	83 ec 0c             	sub    esp,0xc
c002412f:	68 7b 2f 03 c0       	push   0xc0032f7b
c0024134:	e8 21 c3 ff ff       	call   c002045a <KePanic(char const*)>
c0024139:	83 c4 10             	add    esp,0x10
c002413c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0024141:	75 10                	jne    c0024153 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0024143:	83 ec 0c             	sub    esp,0xc
c0024146:	68 7b 2f 03 c0       	push   0xc0032f7b
c002414b:	e8 0a c3 ff ff       	call   c002045a <KePanic(char const*)>
c0024150:	83 c4 10             	add    esp,0x10
c0024153:	31 d2                	xor    edx,edx
c0024155:	50                   	push   eax
c0024156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002415a:	52                   	push   edx
c002415b:	50                   	push   eax
c002415c:	53                   	push   ebx
c002415d:	e8 c2 65 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0024162:	5a                   	pop    edx
c0024163:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024167:	e8 45 24 ff ff       	call   c00165b1 <malloc>
c002416c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024170:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024174:	31 c9                	xor    ecx,ecx
c0024176:	5e                   	pop    esi
c0024177:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024179:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c002417d:	55                   	push   ebp
c002417e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024182:	51                   	push   ecx
c0024183:	52                   	push   edx
c0024184:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0024188:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c002418c:	53                   	push   ebx
c002418d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024190:	83 c4 14             	add    esp,0x14
c0024193:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024197:	e8 15 24 ff ff       	call   c00165b1 <malloc>
c002419c:	89 c6                	mov    esi,eax
c002419e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00241a3:	56                   	push   esi
c00241a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00241a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00241ac:	51                   	push   ecx
c00241ad:	52                   	push   edx
c00241ae:	53                   	push   ebx
c00241af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00241b6:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c00241bc:	83 c4 1c             	add    esp,0x1c
c00241bf:	c1 e8 04             	shr    eax,0x4
c00241c2:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c00241c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00241cd:	31 d2                	xor    edx,edx
c00241cf:	52                   	push   edx
c00241d0:	50                   	push   eax
c00241d1:	53                   	push   ebx
c00241d2:	e8 4d 65 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00241d7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00241d9:	31 d2                	xor    edx,edx
c00241db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00241de:	56                   	push   esi
c00241df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00241e3:	52                   	push   edx
c00241e4:	50                   	push   eax
c00241e5:	53                   	push   ebx
c00241e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00241e9:	83 c4 14             	add    esp,0x14
c00241ec:	53                   	push   ebx
c00241ed:	e8 d2 64 ff ff       	call   c001a6c4 <File::close()>
c00241f2:	5d                   	pop    ebp
c00241f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00241f7:	e8 c5 23 ff ff       	call   c00165c1 <free>
c00241fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00241ff:	e8 bd 23 ff ff       	call   c00165c1 <free>
c0024204:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0024209:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002420d:	8d 50 01             	lea    edx,[eax+0x1]
c0024210:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0024217:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c002421e:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0024224:	83 c4 10             	add    esp,0x10
c0024227:	b0 01                	mov    al,0x1
c0024229:	83 c4 5c             	add    esp,0x5c
c002422c:	5b                   	pop    ebx
c002422d:	5e                   	pop    esi
c002422e:	5f                   	pop    edi
c002422f:	5d                   	pop    ebp
c0024230:	c3                   	ret    

c0024231 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024231:	55                   	push   ebp
c0024232:	57                   	push   edi
c0024233:	56                   	push   esi
c0024234:	53                   	push   ebx
c0024235:	81 ec 68 03 00 00    	sub    esp,0x368
c002423b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0024242:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c0024248:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c002424c:	68 14 01 00 00       	push   0x114
c0024251:	e8 5b 23 ff ff       	call   c00165b1 <malloc>
c0024256:	83 c4 0c             	add    esp,0xc
c0024259:	89 c5                	mov    ebp,eax
c002425b:	53                   	push   ebx
c002425c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0024263:	50                   	push   eax
c0024264:	e8 df 63 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0024269:	5e                   	pop    esi
c002426a:	5f                   	pop    edi
c002426b:	6a 01                	push   0x1
c002426d:	55                   	push   ebp
c002426e:	e8 f3 63 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0024273:	83 c4 10             	add    esp,0x10
c0024276:	85 c0                	test   eax,eax
c0024278:	0f 85 aa 06 00 00    	jne    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002427e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0024286:	83 ec 0c             	sub    esp,0xc
c0024289:	6a 34                	push   0x34
c002428b:	e8 21 23 ff ff       	call   c00165b1 <malloc>
c0024290:	5b                   	pop    ebx
c0024291:	89 c7                	mov    edi,eax
c0024293:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0024297:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002429a:	53                   	push   ebx
c002429b:	57                   	push   edi
c002429c:	6a 00                	push   0x0
c002429e:	6a 34                	push   0x34
c00242a0:	55                   	push   ebp
c00242a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00242a4:	83 c4 20             	add    esp,0x20
c00242a7:	85 c0                	test   eax,eax
c00242a9:	0f 85 79 06 00 00    	jne    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242af:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00242b5:	0f 85 6d 06 00 00    	jne    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242bb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00242be:	85 c0                	test   eax,eax
c00242c0:	0f 84 62 06 00 00    	je     c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242c6:	31 d2                	xor    edx,edx
c00242c8:	51                   	push   ecx
c00242c9:	52                   	push   edx
c00242ca:	50                   	push   eax
c00242cb:	55                   	push   ebp
c00242cc:	e8 53 64 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00242d1:	83 c4 10             	add    esp,0x10
c00242d4:	85 c0                	test   eax,eax
c00242d6:	0f 85 4c 06 00 00    	jne    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00242dc:	83 ec 0c             	sub    esp,0xc
c00242df:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00242e2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00242e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00242ea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00242ee:	0f af c2             	imul   eax,edx
c00242f1:	50                   	push   eax
c00242f2:	e8 ba 22 ff ff       	call   c00165b1 <malloc>
c00242f7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00242fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00242fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024301:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024305:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0024309:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002430d:	0f af c2             	imul   eax,edx
c0024310:	99                   	cdq    
c0024311:	52                   	push   edx
c0024312:	50                   	push   eax
c0024313:	55                   	push   ebp
c0024314:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024317:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c002431a:	83 c4 20             	add    esp,0x20
c002431d:	85 c0                	test   eax,eax
c002431f:	0f 84 03 06 00 00    	je     c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024325:	52                   	push   edx
c0024326:	31 d2                	xor    edx,edx
c0024328:	52                   	push   edx
c0024329:	50                   	push   eax
c002432a:	55                   	push   ebp
c002432b:	e8 f4 63 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0024330:	83 c4 10             	add    esp,0x10
c0024333:	85 c0                	test   eax,eax
c0024335:	0f 85 ed 05 00 00    	jne    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002433b:	83 ec 0c             	sub    esp,0xc
c002433e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0024342:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024346:	31 f6                	xor    esi,esi
c0024348:	0f af c2             	imul   eax,edx
c002434b:	50                   	push   eax
c002434c:	e8 60 22 ff ff       	call   c00165b1 <malloc>
c0024351:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024354:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024358:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002435b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002435f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0024363:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0024367:	0f af c2             	imul   eax,edx
c002436a:	99                   	cdq    
c002436b:	52                   	push   edx
c002436c:	50                   	push   eax
c002436d:	55                   	push   ebp
c002436e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024371:	83 c4 20             	add    esp,0x20
c0024374:	0f b7 de             	movzx  ebx,si
c0024377:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c002437b:	0f 83 87 00 00 00    	jae    c0024408 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0024381:	c1 e3 05             	shl    ebx,0x5
c0024384:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024388:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c002438b:	75 75                	jne    c0024402 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c002438d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024390:	31 d2                	xor    edx,edx
c0024392:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024396:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0024399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002439d:	50                   	push   eax
c002439e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00243a1:	52                   	push   edx
c00243a2:	50                   	push   eax
c00243a3:	55                   	push   ebp
c00243a4:	e8 7b 63 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00243a9:	83 c4 10             	add    esp,0x10
c00243ac:	85 c0                	test   eax,eax
c00243ae:	0f 85 74 05 00 00    	jne    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00243b4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00243bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00243be:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00243c2:	31 d2                	xor    edx,edx
c00243c4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00243c8:	83 ec 0c             	sub    esp,0xc
c00243cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00243cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00243d6:	50                   	push   eax
c00243d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00243db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243df:	52                   	push   edx
c00243e0:	50                   	push   eax
c00243e1:	55                   	push   ebp
c00243e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243e5:	83 c4 1c             	add    esp,0x1c
c00243e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00243eb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00243ee:	50                   	push   eax
c00243ef:	6a 00                	push   0x0
c00243f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243f5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00243f9:	50                   	push   eax
c00243fa:	e8 f1 c0 fd ff       	call   c00004f0 <memset>
c00243ff:	83 c4 10             	add    esp,0x10
c0024402:	46                   	inc    esi
c0024403:	e9 6c ff ff ff       	jmp    c0024374 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0024408:	53                   	push   ebx
c0024409:	31 db                	xor    ebx,ebx
c002440b:	68 00 01 00 00       	push   0x100
c0024410:	6a 00                	push   0x0
c0024412:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0024416:	50                   	push   eax
c0024417:	e8 d4 c0 fd ff       	call   c00004f0 <memset>
c002441c:	83 c4 0c             	add    esp,0xc
c002441f:	68 00 01 00 00       	push   0x100
c0024424:	6a 00                	push   0x0
c0024426:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c002442d:	50                   	push   eax
c002442e:	e8 bd c0 fd ff       	call   c00004f0 <memset>
c0024433:	83 c4 10             	add    esp,0x10
c0024436:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002443e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0024446:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c002444e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024456:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002445e:	0f b7 f3             	movzx  esi,bx
c0024461:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0024465:	0f 83 2d 01 00 00    	jae    c0024598 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c002446b:	6b f6 28             	imul   esi,esi,0x28
c002446e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024472:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024479:	52                   	push   edx
c002447a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002447e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0024482:	8b 06                	mov    eax,DWORD PTR [esi]
c0024484:	6b d2 28             	imul   edx,edx,0x28
c0024487:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c002448b:	31 d2                	xor    edx,edx
c002448d:	52                   	push   edx
c002448e:	50                   	push   eax
c002448f:	55                   	push   ebp
c0024490:	e8 8f 62 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c0024495:	83 c4 0c             	add    esp,0xc
c0024498:	6a 20                	push   0x20
c002449a:	6a 00                	push   0x0
c002449c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00244a3:	51                   	push   ecx
c00244a4:	e8 47 c0 fd ff       	call   c00004f0 <memset>
c00244a9:	59                   	pop    ecx
c00244aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00244ad:	8d 54 24 58          	lea    edx,[esp+0x58]
c00244b1:	52                   	push   edx
c00244b2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00244b9:	51                   	push   ecx
c00244ba:	6a 00                	push   0x0
c00244bc:	6a 1f                	push   0x1f
c00244be:	55                   	push   ebp
c00244bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00244c2:	83 c4 1c             	add    esp,0x1c
c00244c5:	6a 09                	push   0x9
c00244c7:	68 95 2f 03 c0       	push   0xc0032f95
c00244cc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00244d3:	51                   	push   ecx
c00244d4:	e8 a7 be fd ff       	call   c0000380 <memcmp>
c00244d9:	83 c4 10             	add    esp,0x10
c00244dc:	85 c0                	test   eax,eax
c00244de:	75 21                	jne    c0024501 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00244e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00244e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00244e8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00244ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00244f0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00244f3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00244fa:	89 d0                	mov    eax,edx
c00244fc:	40                   	inc    eax
c00244fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024501:	50                   	push   eax
c0024502:	6a 09                	push   0x9
c0024504:	68 9f 2f 03 c0       	push   0xc0032f9f
c0024509:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024510:	50                   	push   eax
c0024511:	e8 6a be fd ff       	call   c0000380 <memcmp>
c0024516:	83 c4 10             	add    esp,0x10
c0024519:	85 c0                	test   eax,eax
c002451b:	75 21                	jne    c002453e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c002451d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024521:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024525:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024529:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c002452d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024530:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024537:	89 d0                	mov    eax,edx
c0024539:	40                   	inc    eax
c002453a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002453e:	50                   	push   eax
c002453f:	50                   	push   eax
c0024540:	68 6b 2f 03 c0       	push   0xc0032f6b
c0024545:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002454c:	50                   	push   eax
c002454d:	e8 fe c1 fd ff       	call   c0000750 <strcmp>
c0024552:	83 c4 10             	add    esp,0x10
c0024555:	85 c0                	test   eax,eax
c0024557:	75 0f                	jne    c0024568 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0024559:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002455c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024564:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024568:	50                   	push   eax
c0024569:	50                   	push   eax
c002456a:	68 73 2f 03 c0       	push   0xc0032f73
c002456f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024576:	50                   	push   eax
c0024577:	e8 d4 c1 fd ff       	call   c0000750 <strcmp>
c002457c:	83 c4 10             	add    esp,0x10
c002457f:	85 c0                	test   eax,eax
c0024581:	75 0f                	jne    c0024592 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0024583:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024586:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002458a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002458e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024592:	43                   	inc    ebx
c0024593:	e9 c6 fe ff ff       	jmp    c002445e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0024598:	31 d2                	xor    edx,edx
c002459a:	50                   	push   eax
c002459b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002459f:	52                   	push   edx
c00245a0:	50                   	push   eax
c00245a1:	55                   	push   ebp
c00245a2:	e8 7d 61 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00245a7:	58                   	pop    eax
c00245a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00245ac:	e8 00 20 ff ff       	call   c00165b1 <malloc>
c00245b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00245b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00245b8:	31 d2                	xor    edx,edx
c00245ba:	58                   	pop    eax
c00245bb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00245bf:	53                   	push   ebx
c00245c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00245c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00245c8:	52                   	push   edx
c00245c9:	50                   	push   eax
c00245ca:	55                   	push   ebp
c00245cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00245ce:	83 c4 14             	add    esp,0x14
c00245d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00245d5:	e8 d7 1f ff ff       	call   c00165b1 <malloc>
c00245da:	31 d2                	xor    edx,edx
c00245dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00245e0:	83 c4 0c             	add    esp,0xc
c00245e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00245e7:	52                   	push   edx
c00245e8:	50                   	push   eax
c00245e9:	55                   	push   ebp
c00245ea:	e8 35 61 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c00245ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00245f2:	31 d2                	xor    edx,edx
c00245f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00245fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00245ff:	52                   	push   edx
c0024600:	50                   	push   eax
c0024601:	55                   	push   ebp
c0024602:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024605:	83 c4 20             	add    esp,0x20
c0024608:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c002460d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024615:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024619:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002461d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0024621:	0f 84 05 03 00 00    	je     c002492c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0024627:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c002462e:	31 d2                	xor    edx,edx
c0024630:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024634:	c1 e8 03             	shr    eax,0x3
c0024637:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c002463b:	51                   	push   ecx
c002463c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024640:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024644:	52                   	push   edx
c0024645:	50                   	push   eax
c0024646:	55                   	push   ebp
c0024647:	e8 d8 60 ff ff       	call   c001a724 <File::seek(unsigned long long)>
c002464c:	5b                   	pop    ebx
c002464d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024651:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024658:	e8 54 1f ff ff       	call   c00165b1 <malloc>
c002465d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024660:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024664:	31 d2                	xor    edx,edx
c0024666:	5e                   	pop    esi
c0024667:	8d 44 24 58          	lea    eax,[esp+0x58]
c002466b:	50                   	push   eax
c002466c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024670:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024674:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002467b:	52                   	push   edx
c002467c:	50                   	push   eax
c002467d:	55                   	push   ebp
c002467e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024681:	83 c4 20             	add    esp,0x20
c0024684:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c002468c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024690:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0024694:	0f 8d 76 02 00 00    	jge    c0024910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c002469a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002469e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246a2:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00246a7:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00246aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00246ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246b2:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00246b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00246ba:	c1 e8 08             	shr    eax,0x8
c00246bd:	89 c6                	mov    esi,eax
c00246bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00246c3:	c1 e6 04             	shl    esi,0x4
c00246c6:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00246ca:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00246cd:	85 db                	test   ebx,ebx
c00246cf:	0f 85 b3 00 00 00    	jne    c0024788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00246d5:	83 ec 0c             	sub    esp,0xc
c00246d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246dc:	03 06                	add    eax,DWORD PTR [esi]
c00246de:	50                   	push   eax
c00246df:	e8 40 f8 ff ff       	call   c0023f24 <Thr::getAddressOfKernelSymbol(char const*)>
c00246e4:	83 c4 10             	add    esp,0x10
c00246e7:	89 c3                	mov    ebx,eax
c00246e9:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00246ee:	85 c0                	test   eax,eax
c00246f0:	0f 85 92 00 00 00    	jne    c0024788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00246f6:	83 ec 0c             	sub    esp,0xc
c00246f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246fd:	03 06                	add    eax,DWORD PTR [esi]
c00246ff:	50                   	push   eax
c0024700:	e8 43 bf ff ff       	call   c0020648 <KeResolveCompatibilitySymbol(char*)>
c0024705:	83 c4 10             	add    esp,0x10
c0024708:	89 c3                	mov    ebx,eax
c002470a:	85 c0                	test   eax,eax
c002470c:	75 7a                	jne    c0024788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c002470e:	51                   	push   ecx
c002470f:	51                   	push   ecx
c0024710:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024714:	03 06                	add    eax,DWORD PTR [esi]
c0024716:	50                   	push   eax
c0024717:	68 a9 2f 03 c0       	push   0xc0032fa9
c002471c:	e8 20 4d ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0024721:	58                   	pop    eax
c0024722:	5a                   	pop    edx
c0024723:	68 c3 2f 03 c0       	push   0xc0032fc3
c0024728:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002472f:	50                   	push   eax
c0024730:	e8 0b bf fd ff       	call   c0000640 <strcpy>
c0024735:	59                   	pop    ecx
c0024736:	58                   	pop    eax
c0024737:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002473b:	03 06                	add    eax,DWORD PTR [esi]
c002473d:	50                   	push   eax
c002473e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024745:	50                   	push   eax
c0024746:	e8 f5 c0 fd ff       	call   c0000840 <strcat>
c002474b:	58                   	pop    eax
c002474c:	5a                   	pop    edx
c002474d:	68 5d 30 03 c0       	push   0xc003305d
c0024752:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024759:	50                   	push   eax
c002475a:	e8 e1 c0 fd ff       	call   c0000840 <strcat>
c002475f:	83 c4 10             	add    esp,0x10
c0024762:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024767:	0f 84 5d 01 00 00    	je     c00248ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c002476d:	83 ec 0c             	sub    esp,0xc
c0024770:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024777:	50                   	push   eax
c0024778:	e8 dd bc ff ff       	call   c002045a <KePanic(char const*)>
c002477d:	83 c4 10             	add    esp,0x10
c0024780:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024784:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0024788:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c002478d:	83 f8 01             	cmp    eax,0x1
c0024790:	0f 85 8f 00 00 00    	jne    c0024825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0024796:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c002479d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00247a1:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00247a5:	01 ce                	add    esi,ecx
c00247a7:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00247af:	0f 94 c0             	sete   al
c00247b2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00247ba:	0f 94 c2             	sete   dl
c00247bd:	09 c2                	or     edx,eax
c00247bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00247c1:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00247c6:	0f b6 d2             	movzx  edx,dl
c00247c9:	74 41                	je     c002480c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00247cb:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00247ce:	85 d2                	test   edx,edx
c00247d0:	75 15                	jne    c00247e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00247d2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00247d6:	66 83 f8 0c          	cmp    ax,0xc
c00247da:	76 05                	jbe    c00247e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00247dc:	b8 0c 00 00 00       	mov    eax,0xc
c00247e1:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00247e5:	76 37                	jbe    c002481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00247e7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00247eb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00247f0:	0f 84 d4 00 00 00    	je     c00248ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00247f6:	83 ec 0c             	sub    esp,0xc
c00247f9:	68 da 2f 03 c0       	push   0xc0032fda
c00247fe:	e8 57 bc ff ff       	call   c002045a <KePanic(char const*)>
c0024803:	83 c4 10             	add    esp,0x10
c0024806:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002480a:	eb 12                	jmp    c002481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c002480c:	01 c1                	add    ecx,eax
c002480e:	85 d2                	test   edx,edx
c0024810:	75 0c                	jne    c002481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024812:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024816:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002481a:	77 02                	ja     c002481e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c002481c:	01 d9                	add    ecx,ebx
c002481e:	89 0e                	mov    DWORD PTR [esi],ecx
c0024820:	e9 e2 00 00 00       	jmp    c0024907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024825:	83 f8 02             	cmp    eax,0x2
c0024828:	75 77                	jne    c00248a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c002482a:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0024831:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024835:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0024839:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024841:	74 21                	je     c0024864 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024843:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c002484b:	74 17                	je     c0024864 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c002484d:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0024851:	b8 0a 00 00 00       	mov    eax,0xa
c0024856:	83 fa 0e             	cmp    edx,0xe
c0024859:	77 03                	ja     c002485e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c002485b:	8d 42 fc             	lea    eax,[edx-0x4]
c002485e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024862:	76 17                	jbe    c002487b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024864:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024869:	74 5f                	je     c00248ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c002486b:	83 ec 0c             	sub    esp,0xc
c002486e:	68 f6 2f 03 c0       	push   0xc0032ff6
c0024873:	e8 e2 bb ff ff       	call   c002045a <KePanic(char const*)>
c0024878:	83 c4 10             	add    esp,0x10
c002487b:	8b 06                	mov    eax,DWORD PTR [esi]
c002487d:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024882:	74 13                	je     c0024897 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024884:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024888:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c002488f:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0024893:	01 d0                	add    eax,edx
c0024895:	eb 04                	jmp    c002489b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0024897:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c002489b:	01 c3                	add    ebx,eax
c002489d:	89 1e                	mov    DWORD PTR [esi],ebx
c002489f:	eb 66                	jmp    c0024907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00248a1:	52                   	push   edx
c00248a2:	52                   	push   edx
c00248a3:	50                   	push   eax
c00248a4:	68 12 30 03 c0       	push   0xc0033012
c00248a9:	e8 93 4b ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00248ae:	83 c4 10             	add    esp,0x10
c00248b1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00248b6:	74 12                	je     c00248ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00248b8:	83 ec 0c             	sub    esp,0xc
c00248bb:	68 1d 30 03 c0       	push   0xc003301d
c00248c0:	e8 95 bb ff ff       	call   c002045a <KePanic(char const*)>
c00248c5:	83 c4 10             	add    esp,0x10
c00248c8:	eb 3d                	jmp    c0024907 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00248ca:	83 ec 0c             	sub    esp,0xc
c00248cd:	55                   	push   ebp
c00248ce:	e8 f1 5d ff ff       	call   c001a6c4 <File::close()>
c00248d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00248d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00248d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248dc:	59                   	pop    ecx
c00248dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00248e1:	e8 db 1c ff ff       	call   c00165c1 <free>
c00248e6:	5b                   	pop    ebx
c00248e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00248eb:	e8 d1 1c ff ff       	call   c00165c1 <free>
c00248f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00248f3:	e8 c9 1c ff ff       	call   c00165c1 <free>
c00248f8:	5e                   	pop    esi
c00248f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00248fd:	e8 bf 1c ff ff       	call   c00165c1 <free>
c0024902:	83 c4 10             	add    esp,0x10
c0024905:	eb 21                	jmp    c0024928 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024907:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c002490b:	e9 7c fd ff ff       	jmp    c002468c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0024910:	83 ec 0c             	sub    esp,0xc
c0024913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024917:	e8 a5 1c ff ff       	call   c00165c1 <free>
c002491c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024920:	83 c4 10             	add    esp,0x10
c0024923:	e9 f1 fc ff ff       	jmp    c0024619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0024928:	31 c0                	xor    eax,eax
c002492a:	eb 33                	jmp    c002495f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c002492c:	83 ec 0c             	sub    esp,0xc
c002492f:	55                   	push   ebp
c0024930:	e8 8f 5d ff ff       	call   c001a6c4 <File::close()>
c0024935:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024938:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002493b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002493e:	58                   	pop    eax
c002493f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024943:	e8 79 1c ff ff       	call   c00165c1 <free>
c0024948:	89 3c 24             	mov    DWORD PTR [esp],edi
c002494b:	e8 71 1c ff ff       	call   c00165c1 <free>
c0024950:	5a                   	pop    edx
c0024951:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024955:	e8 67 1c ff ff       	call   c00165c1 <free>
c002495a:	83 c4 10             	add    esp,0x10
c002495d:	b0 01                	mov    al,0x1
c002495f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024965:	5b                   	pop    ebx
c0024966:	5e                   	pop    esi
c0024967:	5f                   	pop    edi
c0024968:	5d                   	pop    ebp
c0024969:	c3                   	ret    

c002496a <Thr::getDriverBaseFromAddress(unsigned long)>:
c002496a:	56                   	push   esi
c002496b:	31 d2                	xor    edx,edx
c002496d:	53                   	push   ebx
c002496e:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024978:	39 d3                	cmp    ebx,edx
c002497a:	7e 1b                	jle    c0024997 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c002497c:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024983:	39 c8                	cmp    eax,ecx
c0024985:	77 0d                	ja     c0024994 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0024987:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c002498e:	01 c6                	add    esi,eax
c0024990:	39 ce                	cmp    esi,ecx
c0024992:	77 05                	ja     c0024999 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0024994:	42                   	inc    edx
c0024995:	eb e1                	jmp    c0024978 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0024997:	31 c0                	xor    eax,eax
c0024999:	5b                   	pop    ebx
c002499a:	5e                   	pop    esi
c002499b:	c3                   	ret    

c002499c <Thr::getDriverNameFromAddress(unsigned long)>:
c002499c:	53                   	push   ebx
c002499d:	31 c0                	xor    eax,eax
c002499f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00249a3:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00249a9:	39 c3                	cmp    ebx,eax
c00249ab:	7e 22                	jle    c00249cf <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00249ad:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00249b4:	39 ca                	cmp    edx,ecx
c00249b6:	77 14                	ja     c00249cc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00249b8:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00249bf:	39 ca                	cmp    edx,ecx
c00249c1:	76 09                	jbe    c00249cc <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00249c3:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00249ca:	eb 05                	jmp    c00249d1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00249cc:	40                   	inc    eax
c00249cd:	eb da                	jmp    c00249a9 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00249cf:	31 c0                	xor    eax,eax
c00249d1:	5b                   	pop    ebx
c00249d2:	c3                   	ret    

c00249d3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00249d3:	53                   	push   ebx
c00249d4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00249d8:	53                   	push   ebx
c00249d9:	e8 8c ff ff ff       	call   c002496a <Thr::getDriverBaseFromAddress(unsigned long)>
c00249de:	5a                   	pop    edx
c00249df:	31 d2                	xor    edx,edx
c00249e1:	85 c0                	test   eax,eax
c00249e3:	74 04                	je     c00249e9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00249e5:	89 da                	mov    edx,ebx
c00249e7:	29 c2                	sub    edx,eax
c00249e9:	89 d0                	mov    eax,edx
c00249eb:	5b                   	pop    ebx
c00249ec:	c3                   	ret    

c00249ed <Thr::loadDLL(char const*, bool)>:
c00249ed:	55                   	push   ebp
c00249ee:	57                   	push   edi
c00249ef:	56                   	push   esi
c00249f0:	53                   	push   ebx
c00249f1:	81 ec 34 01 00 00    	sub    esp,0x134
c00249f7:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00249fe:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024a05:	56                   	push   esi
c0024a06:	68 35 30 03 c0       	push   0xc0033035
c0024a0b:	e8 31 4a ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0024a10:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024a17:	e8 95 1b ff ff       	call   c00165b1 <malloc>
c0024a1c:	83 c4 0c             	add    esp,0xc
c0024a1f:	89 c3                	mov    ebx,eax
c0024a21:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024a27:	56                   	push   esi
c0024a28:	50                   	push   eax
c0024a29:	e8 1a 5c ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0024a2e:	83 c4 10             	add    esp,0x10
c0024a31:	85 db                	test   ebx,ebx
c0024a33:	75 3c                	jne    c0024a71 <Thr::loadDLL(char const*, bool)+0x84>
c0024a35:	89 f8                	mov    eax,edi
c0024a37:	84 c0                	test   al,al
c0024a39:	0f 84 f3 01 00 00    	je     c0024c32 <Thr::loadDLL(char const*, bool)+0x245>
c0024a3f:	55                   	push   ebp
c0024a40:	55                   	push   ebp
c0024a41:	68 46 30 03 c0       	push   0xc0033046
c0024a46:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0024a4a:	55                   	push   ebp
c0024a4b:	e8 f0 bb fd ff       	call   c0000640 <strcpy>
c0024a50:	58                   	pop    eax
c0024a51:	5a                   	pop    edx
c0024a52:	56                   	push   esi
c0024a53:	55                   	push   ebp
c0024a54:	e8 e7 bd fd ff       	call   c0000840 <strcat>
c0024a59:	59                   	pop    ecx
c0024a5a:	58                   	pop    eax
c0024a5b:	68 5d 30 03 c0       	push   0xc003305d
c0024a60:	55                   	push   ebp
c0024a61:	e8 da bd fd ff       	call   c0000840 <strcat>
c0024a66:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024a69:	e8 ec b9 ff ff       	call   c002045a <KePanic(char const*)>
c0024a6e:	83 c4 10             	add    esp,0x10
c0024a71:	51                   	push   ecx
c0024a72:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024a76:	50                   	push   eax
c0024a77:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024a7b:	50                   	push   eax
c0024a7c:	53                   	push   ebx
c0024a7d:	e8 e6 5e ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c0024a82:	83 c4 10             	add    esp,0x10
c0024a85:	89 c5                	mov    ebp,eax
c0024a87:	85 db                	test   ebx,ebx
c0024a89:	74 0c                	je     c0024a97 <Thr::loadDLL(char const*, bool)+0xaa>
c0024a8b:	83 ec 0c             	sub    esp,0xc
c0024a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024a90:	53                   	push   ebx
c0024a91:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024a94:	83 c4 10             	add    esp,0x10
c0024a97:	83 ec 0c             	sub    esp,0xc
c0024a9a:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0024a9f:	50                   	push   eax
c0024aa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024aa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024aa8:	55                   	push   ebp
c0024aa9:	68 5f 30 03 c0       	push   0xc003305f
c0024aae:	e8 8e 49 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0024ab3:	83 c4 20             	add    esp,0x20
c0024ab6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024abb:	75 0a                	jne    c0024ac7 <Thr::loadDLL(char const*, bool)+0xda>
c0024abd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ac1:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024ac5:	75 3c                	jne    c0024b03 <Thr::loadDLL(char const*, bool)+0x116>
c0024ac7:	89 f8                	mov    eax,edi
c0024ac9:	84 c0                	test   al,al
c0024acb:	0f 84 49 01 00 00    	je     c0024c1a <Thr::loadDLL(char const*, bool)+0x22d>
c0024ad1:	51                   	push   ecx
c0024ad2:	51                   	push   ecx
c0024ad3:	68 80 30 03 c0       	push   0xc0033080
c0024ad8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0024adc:	53                   	push   ebx
c0024add:	e8 5e bb fd ff       	call   c0000640 <strcpy>
c0024ae2:	5d                   	pop    ebp
c0024ae3:	58                   	pop    eax
c0024ae4:	56                   	push   esi
c0024ae5:	53                   	push   ebx
c0024ae6:	e8 55 bd fd ff       	call   c0000840 <strcat>
c0024aeb:	58                   	pop    eax
c0024aec:	5a                   	pop    edx
c0024aed:	68 5d 30 03 c0       	push   0xc003305d
c0024af2:	53                   	push   ebx
c0024af3:	e8 48 bd fd ff       	call   c0000840 <strcat>
c0024af8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024afb:	e8 5a b9 ff ff       	call   c002045a <KePanic(char const*)>
c0024b00:	83 c4 10             	add    esp,0x10
c0024b03:	52                   	push   edx
c0024b04:	6a 03                	push   0x3
c0024b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b0e:	05 ff 0f 00 00       	add    eax,0xfff
c0024b13:	83 d2 00             	adc    edx,0x0
c0024b16:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024b1a:	50                   	push   eax
c0024b1b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024b21:	e8 fa 3d ff ff       	call   c0018920 <VAS::allocatePages(int, int)>
c0024b26:	59                   	pop    ecx
c0024b27:	89 c3                	mov    ebx,eax
c0024b29:	5d                   	pop    ebp
c0024b2a:	50                   	push   eax
c0024b2b:	68 a2 14 03 c0       	push   0xc00314a2
c0024b30:	e8 0c 49 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0024b35:	89 34 24             	mov    DWORD PTR [esp],esi
c0024b38:	e8 33 ba fd ff       	call   c0000570 <strlen>
c0024b3d:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c0024b43:	40                   	inc    eax
c0024b44:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b47:	e8 65 1a ff ff       	call   c00165b1 <malloc>
c0024b4c:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c0024b53:	58                   	pop    eax
c0024b54:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024b59:	5a                   	pop    edx
c0024b5a:	56                   	push   esi
c0024b5b:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024b62:	e8 d9 ba fd ff       	call   c0000640 <strcpy>
c0024b67:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0024b6f:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024b76:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024b7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024b80:	83 c4 0c             	add    esp,0xc
c0024b83:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c0024b8a:	6a 01                	push   0x1
c0024b8c:	53                   	push   ebx
c0024b8d:	56                   	push   esi
c0024b8e:	e8 9e f6 ff ff       	call   c0024231 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0024b93:	83 c4 10             	add    esp,0x10
c0024b96:	0f b6 c0             	movzx  eax,al
c0024b99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b9d:	85 c0                	test   eax,eax
c0024b9f:	0f 85 89 00 00 00    	jne    c0024c2e <Thr::loadDLL(char const*, bool)+0x241>
c0024ba5:	89 f8                	mov    eax,edi
c0024ba7:	84 c0                	test   al,al
c0024ba9:	74 73                	je     c0024c1e <Thr::loadDLL(char const*, bool)+0x231>
c0024bab:	83 ec 0c             	sub    esp,0xc
c0024bae:	68 99 30 03 c0       	push   0xc0033099
c0024bb3:	e8 a2 b8 ff ff       	call   c002045a <KePanic(char const*)>
c0024bb8:	83 c4 10             	add    esp,0x10
c0024bbb:	eb 61                	jmp    c0024c1e <Thr::loadDLL(char const*, bool)+0x231>
c0024bbd:	50                   	push   eax
c0024bbe:	50                   	push   eax
c0024bbf:	89 e8                	mov    eax,ebp
c0024bc1:	c1 e0 0c             	shl    eax,0xc
c0024bc4:	01 d8                	add    eax,ebx
c0024bc6:	50                   	push   eax
c0024bc7:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024bcd:	e8 36 38 ff ff       	call   c0018408 <VAS::getPageTableEntry(unsigned long)>
c0024bd2:	83 c4 10             	add    esp,0x10
c0024bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bd7:	a8 60                	test   al,0x60
c0024bd9:	75 11                	jne    c0024bec <Thr::loadDLL(char const*, bool)+0x1ff>
c0024bdb:	83 ec 0c             	sub    esp,0xc
c0024bde:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024be3:	50                   	push   eax
c0024be4:	e8 68 1c ff ff       	call   c0016851 <Phys::freePage(unsigned long)>
c0024be9:	83 c4 10             	add    esp,0x10
c0024bec:	45                   	inc    ebp
c0024bed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024bf5:	05 ff 0f 00 00       	add    eax,0xfff
c0024bfa:	bf 00 00 00 00       	mov    edi,0x0
c0024bff:	83 d2 00             	adc    edx,0x0
c0024c02:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024c06:	c1 ea 0c             	shr    edx,0xc
c0024c09:	39 c5                	cmp    ebp,eax
c0024c0b:	89 d1                	mov    ecx,edx
c0024c0d:	89 f8                	mov    eax,edi
c0024c0f:	19 c8                	sbb    eax,ecx
c0024c11:	72 aa                	jb     c0024bbd <Thr::loadDLL(char const*, bool)+0x1d0>
c0024c13:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0024c18:	75 18                	jne    c0024c32 <Thr::loadDLL(char const*, bool)+0x245>
c0024c1a:	31 db                	xor    ebx,ebx
c0024c1c:	eb 14                	jmp    c0024c32 <Thr::loadDLL(char const*, bool)+0x245>
c0024c1e:	83 ec 0c             	sub    esp,0xc
c0024c21:	68 b8 30 03 c0       	push   0xc00330b8
c0024c26:	e8 2f b8 ff ff       	call   c002045a <KePanic(char const*)>
c0024c2b:	83 c4 10             	add    esp,0x10
c0024c2e:	31 ed                	xor    ebp,ebp
c0024c30:	eb bb                	jmp    c0024bed <Thr::loadDLL(char const*, bool)+0x200>
c0024c32:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024c38:	89 d8                	mov    eax,ebx
c0024c3a:	5b                   	pop    ebx
c0024c3b:	5e                   	pop    esi
c0024c3c:	5f                   	pop    edi
c0024c3d:	5d                   	pop    ebp
c0024c3e:	c3                   	ret    

c0024c3f <Thr::executeDLL(unsigned long, void*)>:
c0024c3f:	56                   	push   esi
c0024c40:	53                   	push   ebx
c0024c41:	52                   	push   edx
c0024c42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c46:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024c4a:	85 db                	test   ebx,ebx
c0024c4c:	75 10                	jne    c0024c5e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024c4e:	83 ec 0c             	sub    esp,0xc
c0024c51:	68 d4 30 03 c0       	push   0xc00330d4
c0024c56:	e8 ff b7 ff ff       	call   c002045a <KePanic(char const*)>
c0024c5b:	83 c4 10             	add    esp,0x10
c0024c5e:	50                   	push   eax
c0024c5f:	50                   	push   eax
c0024c60:	53                   	push   ebx
c0024c61:	68 fe 30 03 c0       	push   0xc00330fe
c0024c66:	e8 d6 47 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0024c6b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024c6f:	89 d8                	mov    eax,ebx
c0024c71:	83 c4 14             	add    esp,0x14
c0024c74:	5b                   	pop    ebx
c0024c75:	5e                   	pop    esi
c0024c76:	ff e0                	jmp    eax

c0024c78 <userModeEntryPoint(void*)>:
c0024c78:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024c7d:	83 e8 01             	sub    eax,0x1
c0024c80:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024c85:	75 01                	jne    c0024c88 <userModeEntryPoint(void*)+0x10>
c0024c87:	fb                   	sti    
c0024c88:	fb                   	sti    
c0024c89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024c8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024c91:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024c97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024c9b:	e9 9f b5 fd ff       	jmp    c000023f <goToUsermode>

c0024ca0 <changeTSS>:
c0024ca0:	83 ec 14             	sub    esp,0x14
c0024ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ca8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024cab:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024cb0:	c1 e2 15             	shl    edx,0x15
c0024cb3:	29 d0                	sub    eax,edx
c0024cb5:	50                   	push   eax
c0024cb6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024cbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024cc1:	05 7c 11 00 00       	add    eax,0x117c
c0024cc6:	50                   	push   eax
c0024cc7:	e8 84 2d ff ff       	call   c0017a50 <TSS::setESP(unsigned long)>
c0024ccc:	83 c4 1c             	add    esp,0x1c
c0024ccf:	c3                   	ret    

c0024cd0 <switchToThread(ThreadControlBlock*)>:
c0024cd0:	57                   	push   edi
c0024cd1:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024cd7:	56                   	push   esi
c0024cd8:	85 c9                	test   ecx,ecx
c0024cda:	53                   	push   ebx
c0024cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024cdf:	0f 85 8b 00 00 00    	jne    c0024d70 <switchToThread(ThreadControlBlock*)+0xa0>
c0024ce5:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024ce9:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024cef:	74 7b                	je     c0024d6c <switchToThread(ThreadControlBlock*)+0x9c>
c0024cf1:	b8 00 04 00 00       	mov    eax,0x400
c0024cf6:	29 d0                	sub    eax,edx
c0024cf8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024cfb:	d1 f8                	sar    eax,1
c0024cfd:	01 d0                	add    eax,edx
c0024cff:	90                   	nop
c0024d00:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024d03:	e8 76 25 00 00       	call   c002727e <HalQueryPerformanceCounter()>
c0024d08:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024d0d:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024d13:	89 c6                	mov    esi,eax
c0024d15:	89 d7                	mov    edi,edx
c0024d17:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024d1d:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024d22:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024d28:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024d2e:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024d34:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024d3a:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024d40:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024d43:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024d46:	01 c6                	add    esi,eax
c0024d48:	11 d7                	adc    edi,edx
c0024d4a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024d4d:	83 ec 0c             	sub    esp,0xc
c0024d50:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024d53:	53                   	push   ebx
c0024d54:	e8 1e b5 fd ff       	call   c0000277 <switchToThreadASM>
c0024d59:	0f 20 c0             	mov    eax,cr0
c0024d5c:	83 c8 08             	or     eax,0x8
c0024d5f:	0f 22 c0             	mov    cr0,eax
c0024d62:	83 c4 10             	add    esp,0x10
c0024d65:	5b                   	pop    ebx
c0024d66:	5e                   	pop    esi
c0024d67:	5f                   	pop    edi
c0024d68:	c3                   	ret    
c0024d69:	8d 76 00             	lea    esi,[esi+0x0]
c0024d6c:	31 c0                	xor    eax,eax
c0024d6e:	eb 90                	jmp    c0024d00 <switchToThread(ThreadControlBlock*)+0x30>
c0024d70:	5b                   	pop    ebx
c0024d71:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024d7b:	5e                   	pop    esi
c0024d7c:	5f                   	pop    edi
c0024d7d:	c3                   	ret    
c0024d7e:	66 90                	xchg   ax,ax

c0024d80 <Process::addArgs(char**)>:
c0024d80:	57                   	push   edi
c0024d81:	56                   	push   esi
c0024d82:	53                   	push   ebx
c0024d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024d87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024d8b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024d95:	85 ff                	test   edi,edi
c0024d97:	74 4f                	je     c0024de8 <Process::addArgs(char**)+0x68>
c0024d99:	8b 07                	mov    eax,DWORD PTR [edi]
c0024d9b:	85 c0                	test   eax,eax
c0024d9d:	74 49                	je     c0024de8 <Process::addArgs(char**)+0x68>
c0024d9f:	31 db                	xor    ebx,ebx
c0024da1:	8d 76 00             	lea    esi,[esi+0x0]
c0024da4:	83 ec 0c             	sub    esp,0xc
c0024da7:	50                   	push   eax
c0024da8:	e8 c3 b7 fd ff       	call   c0000570 <strlen>
c0024dad:	83 c0 01             	add    eax,0x1
c0024db0:	89 04 24             	mov    DWORD PTR [esp],eax
c0024db3:	e8 f9 17 ff ff       	call   c00165b1 <malloc>
c0024db8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024dbf:	5a                   	pop    edx
c0024dc0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024dc3:	59                   	pop    ecx
c0024dc4:	83 c3 01             	add    ebx,0x1
c0024dc7:	52                   	push   edx
c0024dc8:	50                   	push   eax
c0024dc9:	e8 72 b8 fd ff       	call   c0000640 <strcpy>
c0024dce:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024dd4:	83 c4 10             	add    esp,0x10
c0024dd7:	83 c1 01             	add    ecx,0x1
c0024dda:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024de0:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024de3:	85 c0                	test   eax,eax
c0024de5:	75 bd                	jne    c0024da4 <Process::addArgs(char**)+0x24>
c0024de7:	90                   	nop
c0024de8:	5b                   	pop    ebx
c0024de9:	5e                   	pop    esi
c0024dea:	5f                   	pop    edi
c0024deb:	c3                   	ret    

c0024dec <Process::Process(char const*, Process*, char**)>:
c0024dec:	56                   	push   esi
c0024ded:	53                   	push   ebx
c0024dee:	83 ec 14             	sub    esp,0x14
c0024df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024df5:	05 0c 02 00 00       	add    eax,0x20c
c0024dfa:	bb 07 00 00 00       	mov    ebx,0x7
c0024dff:	89 c6                	mov    esi,eax
c0024e01:	8d 76 00             	lea    esi,[esi+0x0]
c0024e04:	85 db                	test   ebx,ebx
c0024e06:	78 14                	js     c0024e1c <Process::Process(char const*, Process*, char**)+0x30>
c0024e08:	83 ec 0c             	sub    esp,0xc
c0024e0b:	56                   	push   esi
c0024e0c:	e8 77 a3 00 00       	call   c002f188 <ThreadControlBlock::ThreadControlBlock()>
c0024e11:	83 c4 10             	add    esp,0x10
c0024e14:	83 c6 5f             	add    esi,0x5f
c0024e17:	83 eb 01             	sub    ebx,0x1
c0024e1a:	eb e8                	jmp    c0024e04 <Process::Process(char const*, Process*, char**)+0x18>
c0024e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e20:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e2b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024e32:	83 ec 0c             	sub    esp,0xc
c0024e35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e39:	e8 f6 b3 ff ff       	call   c0020234 <KeNewProcessEnv(Process*)>
c0024e3e:	83 c4 10             	add    esp,0x10
c0024e41:	89 c2                	mov    edx,eax
c0024e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e47:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024e4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e51:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024e5a:	a1 20 47 03 c0       	mov    eax,ds:0xc0034720
c0024e5f:	8d 50 01             	lea    edx,[eax+0x1]
c0024e62:	89 15 20 47 03 c0    	mov    DWORD PTR ds:0xc0034720,edx
c0024e68:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024e6c:	89 02                	mov    DWORD PTR [edx],eax
c0024e6e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024e76:	83 ec 0c             	sub    esp,0xc
c0024e79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024e7d:	e8 2f 17 ff ff       	call   c00165b1 <malloc>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	89 c3                	mov    ebx,eax
c0024e87:	83 ec 08             	sub    esp,0x8
c0024e8a:	6a 00                	push   0x0
c0024e8c:	53                   	push   ebx
c0024e8d:	e8 d2 3c ff ff       	call   c0018b64 <VAS::VAS(bool)>
c0024e92:	83 c4 10             	add    esp,0x10
c0024e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e99:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ea3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024eb1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024eb5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024ebb:	e8 cb bd ff ff       	call   c0020c8b <KeInitSignals()>
c0024ec0:	89 c2                	mov    edx,eax
c0024ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ec6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ed0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ed6:	85 c0                	test   eax,eax
c0024ed8:	74 42                	je     c0024f1c <Process::Process(char const*, Process*, char**)+0x130>
c0024eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ede:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024ee4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024eee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ef8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024efe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f08:	05 0c 01 00 00       	add    eax,0x10c
c0024f0d:	83 ec 08             	sub    esp,0x8
c0024f10:	52                   	push   edx
c0024f11:	50                   	push   eax
c0024f12:	e8 29 b7 fd ff       	call   c0000640 <strcpy>
c0024f17:	83 c4 10             	add    esp,0x10
c0024f1a:	eb 64                	jmp    c0024f80 <Process::Process(char const*, Process*, char**)+0x194>
c0024f1c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024f24:	83 ec 0c             	sub    esp,0xc
c0024f27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024f2b:	e8 81 16 ff ff       	call   c00165b1 <malloc>
c0024f30:	83 c4 10             	add    esp,0x10
c0024f33:	89 c3                	mov    ebx,eax
c0024f35:	83 ec 08             	sub    esp,0x8
c0024f38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024f3c:	53                   	push   ebx
c0024f3d:	e8 1e 28 ff ff       	call   c0017760 <VgaText::VgaText(char const*)>
c0024f42:	83 c4 10             	add    esp,0x10
c0024f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f49:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024f59:	83 ec 0c             	sub    esp,0xc
c0024f5c:	50                   	push   eax
c0024f5d:	e8 9c 20 ff ff       	call   c0016ffe <addToTerminalCycle(VgaText*)>
c0024f62:	83 c4 10             	add    esp,0x10
c0024f65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f69:	05 0c 01 00 00       	add    eax,0x10c
c0024f6e:	83 ec 08             	sub    esp,0x8
c0024f71:	68 1d 31 03 c0       	push   0xc003311d
c0024f76:	50                   	push   eax
c0024f77:	e8 c4 b6 fd ff       	call   c0000640 <strcpy>
c0024f7c:	83 c4 10             	add    esp,0x10
c0024f7f:	90                   	nop
c0024f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f84:	83 c0 0c             	add    eax,0xc
c0024f87:	83 ec 08             	sub    esp,0x8
c0024f8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024f8e:	50                   	push   eax
c0024f8f:	e8 ac b6 fd ff       	call   c0000640 <strcpy>
c0024f94:	83 c4 10             	add    esp,0x10
c0024f97:	83 ec 08             	sub    esp,0x8
c0024f9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024f9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fa2:	e8 d9 fd ff ff       	call   c0024d80 <Process::addArgs(char**)>
c0024fa7:	83 c4 10             	add    esp,0x10
c0024faa:	83 ec 08             	sub    esp,0x8
c0024fad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fb1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fb5:	e8 45 ed ff ff       	call   c0023cff <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024fba:	83 c4 10             	add    esp,0x10
c0024fbd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024fc1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024fc5:	83 f0 01             	xor    eax,0x1
c0024fc8:	88 c2                	mov    dl,al
c0024fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024fce:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024fd4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024fd9:	83 ec 04             	sub    esp,0x4
c0024fdc:	50                   	push   eax
c0024fdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024fe1:	68 74 31 03 c0       	push   0xc0033174
c0024fe6:	e8 56 44 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0024feb:	83 c4 10             	add    esp,0x10
c0024fee:	90                   	nop
c0024fef:	83 c4 14             	add    esp,0x14
c0024ff2:	5b                   	pop    ebx
c0024ff3:	5e                   	pop    esi
c0024ff4:	c3                   	ret    
c0024ff5:	90                   	nop
c0024ff6:	66 90                	xchg   ax,ax

c0024ff8 <Process::Process(bool, char const*, Process*, char**)>:
c0024ff8:	56                   	push   esi
c0024ff9:	53                   	push   ebx
c0024ffa:	83 ec 24             	sub    esp,0x24
c0024ffd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025001:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0025005:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025009:	05 0c 02 00 00       	add    eax,0x20c
c002500e:	bb 07 00 00 00       	mov    ebx,0x7
c0025013:	89 c6                	mov    esi,eax
c0025015:	8d 76 00             	lea    esi,[esi+0x0]
c0025018:	85 db                	test   ebx,ebx
c002501a:	78 14                	js     c0025030 <Process::Process(bool, char const*, Process*, char**)+0x38>
c002501c:	83 ec 0c             	sub    esp,0xc
c002501f:	56                   	push   esi
c0025020:	e8 63 a1 00 00       	call   c002f188 <ThreadControlBlock::ThreadControlBlock()>
c0025025:	83 c4 10             	add    esp,0x10
c0025028:	83 c6 5f             	add    esi,0x5f
c002502b:	83 eb 01             	sub    ebx,0x1
c002502e:	eb e8                	jmp    c0025018 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0025030:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025034:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c002503b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002503f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0025046:	83 ec 0c             	sub    esp,0xc
c0025049:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002504d:	e8 e2 b1 ff ff       	call   c0020234 <KeNewProcessEnv(Process*)>
c0025052:	83 c4 10             	add    esp,0x10
c0025055:	89 c2                	mov    edx,eax
c0025057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002505b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0025061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025065:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c002506e:	a1 20 47 03 c0       	mov    eax,ds:0xc0034720
c0025073:	8d 50 01             	lea    edx,[eax+0x1]
c0025076:	89 15 20 47 03 c0    	mov    DWORD PTR ds:0xc0034720,edx
c002507c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025080:	89 02                	mov    DWORD PTR [edx],eax
c0025082:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c002508a:	83 ec 0c             	sub    esp,0xc
c002508d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0025091:	e8 1b 15 ff ff       	call   c00165b1 <malloc>
c0025096:	83 c4 10             	add    esp,0x10
c0025099:	89 c3                	mov    ebx,eax
c002509b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00250a0:	83 ec 08             	sub    esp,0x8
c00250a3:	50                   	push   eax
c00250a4:	53                   	push   ebx
c00250a5:	e8 ba 3a ff ff       	call   c0018b64 <VAS::VAS(bool)>
c00250aa:	83 c4 10             	add    esp,0x10
c00250ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250b1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00250b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250bb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00250c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250c9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00250cd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00250d3:	e8 b3 bb ff ff       	call   c0020c8b <KeInitSignals()>
c00250d8:	89 c2                	mov    edx,eax
c00250da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250de:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00250e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00250ee:	85 c0                	test   eax,eax
c00250f0:	74 42                	je     c0025134 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00250f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00250f6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00250fc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0025102:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025106:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c002510c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025110:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025116:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c002511c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025120:	05 0c 01 00 00       	add    eax,0x10c
c0025125:	83 ec 08             	sub    esp,0x8
c0025128:	52                   	push   edx
c0025129:	50                   	push   eax
c002512a:	e8 11 b5 fd ff       	call   c0000640 <strcpy>
c002512f:	83 c4 10             	add    esp,0x10
c0025132:	eb 64                	jmp    c0025198 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0025134:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c002513c:	83 ec 0c             	sub    esp,0xc
c002513f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0025143:	e8 69 14 ff ff       	call   c00165b1 <malloc>
c0025148:	83 c4 10             	add    esp,0x10
c002514b:	89 c3                	mov    ebx,eax
c002514d:	83 ec 08             	sub    esp,0x8
c0025150:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025154:	53                   	push   ebx
c0025155:	e8 06 26 ff ff       	call   c0017760 <VgaText::VgaText(char const*)>
c002515a:	83 c4 10             	add    esp,0x10
c002515d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025161:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0025167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002516b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025171:	83 ec 0c             	sub    esp,0xc
c0025174:	50                   	push   eax
c0025175:	e8 84 1e ff ff       	call   c0016ffe <addToTerminalCycle(VgaText*)>
c002517a:	83 c4 10             	add    esp,0x10
c002517d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025181:	05 0c 01 00 00       	add    eax,0x10c
c0025186:	83 ec 08             	sub    esp,0x8
c0025189:	68 1d 31 03 c0       	push   0xc003311d
c002518e:	50                   	push   eax
c002518f:	e8 ac b4 fd ff       	call   c0000640 <strcpy>
c0025194:	83 c4 10             	add    esp,0x10
c0025197:	90                   	nop
c0025198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002519c:	83 c0 0c             	add    eax,0xc
c002519f:	83 ec 08             	sub    esp,0x8
c00251a2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251a6:	50                   	push   eax
c00251a7:	e8 94 b4 fd ff       	call   c0000640 <strcpy>
c00251ac:	83 c4 10             	add    esp,0x10
c00251af:	83 ec 08             	sub    esp,0x8
c00251b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00251b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00251ba:	e8 c1 fb ff ff       	call   c0024d80 <Process::addArgs(char**)>
c00251bf:	83 c4 10             	add    esp,0x10
c00251c2:	90                   	nop
c00251c3:	83 c4 24             	add    esp,0x24
c00251c6:	5b                   	pop    ebx
c00251c7:	5e                   	pop    esi
c00251c8:	c3                   	ret    
c00251c9:	8d 76 00             	lea    esi,[esi+0x0]

c00251cc <taskStartupFunction>:
c00251cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00251d1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00251d4:	c3                   	ret    
c00251d5:	8d 76 00             	lea    esi,[esi+0x0]

c00251d8 <KeDisablePreemption()>:
c00251d8:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c00251dd:	85 c0                	test   eax,eax
c00251df:	75 13                	jne    c00251f4 <KeDisablePreemption()+0x1c>
c00251e1:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c00251e7:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c00251ee:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c00251f4:	83 c0 01             	add    eax,0x1
c00251f7:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c00251fc:	c3                   	ret    
c00251fd:	8d 76 00             	lea    esi,[esi+0x0]

c0025200 <KeRestorePreemption()>:
c0025200:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025205:	83 e8 01             	sub    eax,0x1
c0025208:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002520d:	75 0d                	jne    c002521c <KeRestorePreemption()+0x1c>
c002520f:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025214:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025219:	8d 76 00             	lea    esi,[esi+0x0]
c002521c:	c3                   	ret    
c002521d:	90                   	nop
c002521e:	66 90                	xchg   ax,ax

c0025220 <Process::createThread(void (*)(void*), void*, int)>:
c0025220:	57                   	push   edi
c0025221:	31 c9                	xor    ecx,ecx
c0025223:	56                   	push   esi
c0025224:	53                   	push   ebx
c0025225:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025229:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0025230:	89 f2                	mov    edx,esi
c0025232:	66 90                	xchg   ax,ax
c0025234:	0f b7 c2             	movzx  eax,dx
c0025237:	80 e2 01             	and    dl,0x1
c002523a:	74 14                	je     c0025250 <Process::createThread(void (*)(void*), void*, int)+0x30>
c002523c:	d1 f8                	sar    eax,1
c002523e:	83 c1 01             	add    ecx,0x1
c0025241:	89 c2                	mov    edx,eax
c0025243:	83 f9 10             	cmp    ecx,0x10
c0025246:	75 ec                	jne    c0025234 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0025248:	31 db                	xor    ebx,ebx
c002524a:	89 d8                	mov    eax,ebx
c002524c:	5b                   	pop    ebx
c002524d:	5e                   	pop    esi
c002524e:	5f                   	pop    edi
c002524f:	c3                   	ret    
c0025250:	b8 01 00 00 00       	mov    eax,0x1
c0025255:	d3 e0                	shl    eax,cl
c0025257:	09 c6                	or     esi,eax
c0025259:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c002525c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0025263:	01 c0                	add    eax,eax
c0025265:	01 c8                	add    eax,ecx
c0025267:	8d 04 80             	lea    eax,[eax+eax*4]
c002526a:	01 d8                	add    eax,ebx
c002526c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0025273:	75 0b                	jne    c0025280 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0025275:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c002527f:	90                   	nop
c0025280:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025286:	83 ec 0c             	sub    esp,0xc
c0025289:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002528c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c002528f:	01 c0                	add    eax,eax
c0025291:	01 c8                	add    eax,ecx
c0025293:	8d 3c 80             	lea    edi,[eax+eax*4]
c0025296:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0025299:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c002529f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00252a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00252a9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00252af:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00252b5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00252bb:	89 ca                	mov    edx,ecx
c00252bd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00252c4:	f7 da                	neg    edx
c00252c6:	c1 e2 15             	shl    edx,0x15
c00252c9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00252cf:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00252d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00252d9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00252e3:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00252e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00252ed:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00252f3:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00252fd:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025307:	68 00 01 00 00       	push   0x100
c002530c:	e8 a0 12 ff ff       	call   c00165b1 <malloc>
c0025311:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025314:	58                   	pop    eax
c0025315:	5a                   	pop    edx
c0025316:	53                   	push   ebx
c0025317:	68 ec 01 04 c0       	push   0xc00401ec
c002531c:	e8 ff 9b 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025321:	83 c4 10             	add    esp,0x10
c0025324:	89 d8                	mov    eax,ebx
c0025326:	5b                   	pop    ebx
c0025327:	5e                   	pop    esi
c0025328:	5f                   	pop    edi
c0025329:	c3                   	ret    
c002532a:	66 90                	xchg   ax,ax

c002532c <Process::createUserThread()>:
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	68 80 00 00 00       	push   0x80
c0025334:	6a 00                	push   0x0
c0025336:	68 78 4c 02 c0       	push   0xc0024c78
c002533b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002533f:	50                   	push   eax
c0025340:	e8 db fe ff ff       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c0025345:	83 c4 1c             	add    esp,0x1c
c0025348:	c3                   	ret    
c0025349:	8d 76 00             	lea    esi,[esi+0x0]

c002534c <setupMultitasking(void (*)())>:
c002534c:	56                   	push   esi
c002534d:	53                   	push   ebx
c002534e:	83 ec 04             	sub    esp,0x4
c0025351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025355:	eb 11                	jmp    c0025368 <setupMultitasking(void (*)())+0x1c>
c0025357:	90                   	nop
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	68 ec 01 04 c0       	push   0xc00401ec
c0025360:	e8 ff 9a 00 00       	call   c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	83 ec 0c             	sub    esp,0xc
c002536b:	68 ec 01 04 c0       	push   0xc00401ec
c0025370:	e8 cb 9a 00 00       	call   c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025375:	83 c4 10             	add    esp,0x10
c0025378:	84 c0                	test   al,al
c002537a:	74 dc                	je     c0025358 <setupMultitasking(void (*)())+0xc>
c002537c:	83 ec 0c             	sub    esp,0xc
c002537f:	68 24 07 00 00       	push   0x724
c0025384:	e8 28 12 ff ff       	call   c00165b1 <malloc>
c0025389:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0025390:	89 c3                	mov    ebx,eax
c0025392:	6a 00                	push   0x0
c0025394:	68 21 31 03 c0       	push   0xc0033121
c0025399:	6a 01                	push   0x1
c002539b:	50                   	push   eax
c002539c:	e8 57 fc ff ff       	call   c0024ff8 <Process::Process(bool, char const*, Process*, char**)>
c00253a1:	83 c4 14             	add    esp,0x14
c00253a4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00253aa:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00253b0:	50                   	push   eax
c00253b1:	e8 9d 1e ff ff       	call   c0017253 <setActiveTerminal(VgaText*)>
c00253b6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00253bd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00253c7:	83 c8 01             	or     eax,0x1
c00253ca:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00253d1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00253d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00253da:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00253e4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00253ea:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00253f0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00253fa:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025404:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002540e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025414:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c002541e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025424:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002542e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025435:	e8 77 11 ff ff       	call   c00165b1 <malloc>
c002543a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025440:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025446:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c002544c:	5a                   	pop    edx
c002544d:	59                   	pop    ecx
c002544e:	68 1d 31 03 c0       	push   0xc003311d
c0025453:	50                   	push   eax
c0025454:	e8 e7 b1 fd ff       	call   c0000640 <strcpy>
c0025459:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0025460:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025464:	83 c4 14             	add    esp,0x14
c0025467:	5b                   	pop    ebx
c0025468:	5e                   	pop    esi
c0025469:	e9 fb ad fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002546e:	66 90                	xchg   ax,ax

c0025470 <schedule()>:
c0025470:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c0025476:	85 d2                	test   edx,edx
c0025478:	74 0e                	je     c0025488 <schedule()+0x18>
c002547a:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025484:	c3                   	ret    
c0025485:	8d 76 00             	lea    esi,[esi+0x0]
c0025488:	53                   	push   ebx
c0025489:	83 ec 14             	sub    esp,0x14
c002548c:	68 ec 01 04 c0       	push   0xc00401ec
c0025491:	e8 aa 99 00 00       	call   c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	84 c0                	test   al,al
c002549b:	75 3f                	jne    c00254dc <schedule()+0x6c>
c002549d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00254a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00254a5:	83 fa 01             	cmp    edx,0x1
c00254a8:	74 3a                	je     c00254e4 <schedule()+0x74>
c00254aa:	66 90                	xchg   ax,ax
c00254ac:	83 ec 0c             	sub    esp,0xc
c00254af:	68 ec 01 04 c0       	push   0xc00401ec
c00254b4:	e8 a3 99 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254b9:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00254c0:	89 c3                	mov    ebx,eax
c00254c2:	e8 9d 99 00 00       	call   c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00254c7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00254ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254d1:	e8 fa f7 ff ff       	call   c0024cd0 <switchToThread(ThreadControlBlock*)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	8d 76 00             	lea    esi,[esi+0x0]
c00254dc:	83 c4 08             	add    esp,0x8
c00254df:	5b                   	pop    ebx
c00254e0:	c3                   	ret    
c00254e1:	8d 76 00             	lea    esi,[esi+0x0]
c00254e4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00254eb:	83 ec 08             	sub    esp,0x8
c00254ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00254f3:	50                   	push   eax
c00254f4:	68 ec 01 04 c0       	push   0xc00401ec
c00254f9:	e8 22 9a 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00254fe:	83 c4 10             	add    esp,0x10
c0025501:	eb a9                	jmp    c00254ac <schedule()+0x3c>
c0025503:	90                   	nop

c0025504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025504:	83 ec 0c             	sub    esp,0xc
c0025507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002550c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025510:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025513:	e8 58 ff ff ff       	call   c0025470 <schedule()>
c0025518:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002551d:	83 e8 01             	sub    eax,0x1
c0025520:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025525:	75 01                	jne    c0025528 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025527:	fb                   	sti    
c0025528:	83 c4 0c             	add    esp,0xc
c002552b:	c3                   	ret    

c002552c <blockTask(TaskState)>:
c002552c:	83 ec 0c             	sub    esp,0xc
c002552f:	fa                   	cli    
c0025530:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025535:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025539:	83 c0 01             	add    eax,0x1
c002553c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025546:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025549:	e8 22 ff ff ff       	call   c0025470 <schedule()>
c002554e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025553:	83 e8 01             	sub    eax,0x1
c0025556:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002555b:	75 03                	jne    c0025560 <blockTask(TaskState)+0x34>
c002555d:	fb                   	sti    
c002555e:	66 90                	xchg   ax,ax
c0025560:	83 c4 0c             	add    esp,0xc
c0025563:	c3                   	ret    

c0025564 <waitTask(int, int*, int)>:
c0025564:	83 ec 18             	sub    esp,0x18
c0025567:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002556c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025570:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0025573:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025577:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002557c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c002557f:	6a 07                	push   0x7
c0025581:	e8 a6 ff ff ff       	call   c002552c <blockTask(TaskState)>
c0025586:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002558b:	83 c4 10             	add    esp,0x10
c002558e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0025591:	85 d2                	test   edx,edx
c0025593:	74 0b                	je     c00255a0 <waitTask(int, int*, int)+0x3c>
c0025595:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0025598:	89 02                	mov    DWORD PTR [edx],eax
c002559a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002559f:	90                   	nop
c00255a0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00255a3:	83 c4 0c             	add    esp,0xc
c00255a6:	c3                   	ret    
c00255a7:	90                   	nop

c00255a8 <milliTenthSleepUntil(unsigned int)>:
c00255a8:	83 ec 0c             	sub    esp,0xc
c00255ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255af:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00255b5:	76 05                	jbe    c00255bc <milliTenthSleepUntil(unsigned int)+0x14>
c00255b7:	90                   	nop
c00255b8:	83 c4 0c             	add    esp,0xc
c00255bb:	c3                   	ret    
c00255bc:	fa                   	cli    
c00255bd:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00255c3:	83 ec 08             	sub    esp,0x8
c00255c6:	83 c2 01             	add    edx,0x1
c00255c9:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00255cf:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00255d5:	83 c1 01             	add    ecx,0x1
c00255d8:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00255de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00255e4:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00255e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00255ec:	50                   	push   eax
c00255ed:	68 e0 01 04 c0       	push   0xc00401e0
c00255f2:	e8 29 99 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00255f7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00255fe:	e8 29 ff ff ff       	call   c002552c <blockTask(TaskState)>
c0025603:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025608:	83 c4 10             	add    esp,0x10
c002560b:	83 e8 01             	sub    eax,0x1
c002560e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025613:	85 c0                	test   eax,eax
c0025615:	75 09                	jne    c0025620 <milliTenthSleepUntil(unsigned int)+0x78>
c0025617:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002561c:	85 c0                	test   eax,eax
c002561e:	75 14                	jne    c0025634 <milliTenthSleepUntil(unsigned int)+0x8c>
c0025620:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025625:	83 e8 01             	sub    eax,0x1
c0025628:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002562d:	75 89                	jne    c00255b8 <milliTenthSleepUntil(unsigned int)+0x10>
c002562f:	fb                   	sti    
c0025630:	83 c4 0c             	add    esp,0xc
c0025633:	c3                   	ret    
c0025634:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002563e:	e8 2d fe ff ff       	call   c0025470 <schedule()>
c0025643:	eb db                	jmp    c0025620 <milliTenthSleepUntil(unsigned int)+0x78>
c0025645:	8d 76 00             	lea    esi,[esi+0x0]

c0025648 <milliTenthSleep(unsigned int)>:
c0025648:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002564c:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0025651:	01 c2                	add    edx,eax
c0025653:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025657:	e9 4c ff ff ff       	jmp    c00255a8 <milliTenthSleepUntil(unsigned int)>

c002565c <sleep(unsigned int)>:
c002565c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025660:	8d 04 80             	lea    eax,[eax+eax*4]
c0025663:	8d 04 80             	lea    eax,[eax+eax*4]
c0025666:	8d 04 80             	lea    eax,[eax+eax*4]
c0025669:	8d 04 80             	lea    eax,[eax+eax*4]
c002566c:	c1 e0 04             	shl    eax,0x4
c002566f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025673:	eb d3                	jmp    c0025648 <milliTenthSleep(unsigned int)>
c0025675:	8d 76 00             	lea    esi,[esi+0x0]

c0025678 <taskReturned>:
c0025678:	83 ec 18             	sub    esp,0x18
c002567b:	68 a0 31 03 c0       	push   0xc00331a0
c0025680:	e8 d5 ad ff ff       	call   c002045a <KePanic(char const*)>
c0025685:	83 c4 10             	add    esp,0x10
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	6a 02                	push   0x2
c002568d:	e8 9a fe ff ff       	call   c002552c <blockTask(TaskState)>
c0025692:	fa                   	cli    
c0025693:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025698:	83 c0 01             	add    eax,0x1
c002569b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256a0:	e8 cb fd ff ff       	call   c0025470 <schedule()>
c00256a5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00256aa:	83 c4 10             	add    esp,0x10
c00256ad:	83 e8 01             	sub    eax,0x1
c00256b0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00256b5:	85 c0                	test   eax,eax
c00256b7:	75 cf                	jne    c0025688 <taskReturned+0x10>
c00256b9:	fb                   	sti    
c00256ba:	eb cc                	jmp    c0025688 <taskReturned+0x10>

c00256bc <Thr::processFromPID(int)>:
c00256bc:	57                   	push   edi
c00256bd:	56                   	push   esi
c00256be:	53                   	push   ebx
c00256bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00256c3:	fa                   	cli    
c00256c4:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00256ca:	83 ec 0c             	sub    esp,0xc
c00256cd:	83 c1 01             	add    ecx,0x1
c00256d0:	68 ec 01 04 c0       	push   0xc00401ec
c00256d5:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00256db:	e8 7c 97 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00256e0:	83 c4 10             	add    esp,0x10
c00256e3:	89 c7                	mov    edi,eax
c00256e5:	eb 15                	jmp    c00256fc <Thr::processFromPID(int)+0x40>
c00256e7:	90                   	nop
c00256e8:	83 ec 0c             	sub    esp,0xc
c00256eb:	68 ec 01 04 c0       	push   0xc00401ec
c00256f0:	e8 67 97 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00256f5:	83 c4 10             	add    esp,0x10
c00256f8:	39 f8                	cmp    eax,edi
c00256fa:	74 50                	je     c002574c <Thr::processFromPID(int)+0x90>
c00256fc:	83 ec 0c             	sub    esp,0xc
c00256ff:	68 ec 01 04 c0       	push   0xc00401ec
c0025704:	e8 53 97 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025709:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025710:	89 c3                	mov    ebx,eax
c0025712:	e8 4d 97 00 00       	call   c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025717:	58                   	pop    eax
c0025718:	5a                   	pop    edx
c0025719:	53                   	push   ebx
c002571a:	68 ec 01 04 c0       	push   0xc00401ec
c002571f:	e8 fc 97 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025724:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025727:	83 c4 10             	add    esp,0x10
c002572a:	39 30                	cmp    DWORD PTR [eax],esi
c002572c:	75 ba                	jne    c00256e8 <Thr::processFromPID(int)+0x2c>
c002572e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025733:	83 e8 01             	sub    eax,0x1
c0025736:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002573b:	74 0b                	je     c0025748 <Thr::processFromPID(int)+0x8c>
c002573d:	8d 76 00             	lea    esi,[esi+0x0]
c0025740:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025743:	5b                   	pop    ebx
c0025744:	5e                   	pop    esi
c0025745:	5f                   	pop    edi
c0025746:	c3                   	ret    
c0025747:	90                   	nop
c0025748:	fb                   	sti    
c0025749:	eb f5                	jmp    c0025740 <Thr::processFromPID(int)+0x84>
c002574b:	90                   	nop
c002574c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025751:	83 e8 01             	sub    eax,0x1
c0025754:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025759:	75 05                	jne    c0025760 <Thr::processFromPID(int)+0xa4>
c002575b:	fb                   	sti    
c002575c:	5b                   	pop    ebx
c002575d:	5e                   	pop    esi
c002575e:	5f                   	pop    edi
c002575f:	c3                   	ret    
c0025760:	5b                   	pop    ebx
c0025761:	31 c0                	xor    eax,eax
c0025763:	5e                   	pop    esi
c0025764:	5f                   	pop    edi
c0025765:	c3                   	ret    
c0025766:	66 90                	xchg   ax,ax

c0025768 <unblockTask(ThreadControlBlock*)>:
c0025768:	53                   	push   ebx
c0025769:	83 ec 08             	sub    esp,0x8
c002576c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025770:	fa                   	cli    
c0025771:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025776:	83 c0 01             	add    eax,0x1
c0025779:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002577e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025781:	85 c0                	test   eax,eax
c0025783:	74 67                	je     c00257ec <unblockTask(ThreadControlBlock*)+0x84>
c0025785:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025788:	83 f8 01             	cmp    eax,0x1
c002578b:	74 37                	je     c00257c4 <unblockTask(ThreadControlBlock*)+0x5c>
c002578d:	83 ec 0c             	sub    esp,0xc
c0025790:	68 ec 01 04 c0       	push   0xc00401ec
c0025795:	e8 c2 96 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002579a:	83 c4 10             	add    esp,0x10
c002579d:	85 c0                	test   eax,eax
c002579f:	75 1b                	jne    c00257bc <unblockTask(ThreadControlBlock*)+0x54>
c00257a1:	eb 5d                	jmp    c0025800 <unblockTask(ThreadControlBlock*)+0x98>
c00257a3:	90                   	nop
c00257a4:	83 ec 08             	sub    esp,0x8
c00257a7:	50                   	push   eax
c00257a8:	68 ec 01 04 c0       	push   0xc00401ec
c00257ad:	e8 ca 99 00 00       	call   c002f17c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00257b2:	83 c4 10             	add    esp,0x10
c00257b5:	85 c0                	test   eax,eax
c00257b7:	74 47                	je     c0025800 <unblockTask(ThreadControlBlock*)+0x98>
c00257b9:	8d 76 00             	lea    esi,[esi+0x0]
c00257bc:	39 c3                	cmp    ebx,eax
c00257be:	75 e4                	jne    c00257a4 <unblockTask(ThreadControlBlock*)+0x3c>
c00257c0:	eb 12                	jmp    c00257d4 <unblockTask(ThreadControlBlock*)+0x6c>
c00257c2:	66 90                	xchg   ax,ax
c00257c4:	83 ec 0c             	sub    esp,0xc
c00257c7:	68 3f 31 03 c0       	push   0xc003313f
c00257cc:	e8 70 3c ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00257d1:	83 c4 10             	add    esp,0x10
c00257d4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00257d9:	83 e8 01             	sub    eax,0x1
c00257dc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00257e1:	75 01                	jne    c00257e4 <unblockTask(ThreadControlBlock*)+0x7c>
c00257e3:	fb                   	sti    
c00257e4:	83 c4 08             	add    esp,0x8
c00257e7:	5b                   	pop    ebx
c00257e8:	c3                   	ret    
c00257e9:	8d 76 00             	lea    esi,[esi+0x0]
c00257ec:	83 ec 0c             	sub    esp,0xc
c00257ef:	68 28 31 03 c0       	push   0xc0033128
c00257f4:	e8 48 3c ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00257f9:	83 c4 10             	add    esp,0x10
c00257fc:	eb d6                	jmp    c00257d4 <unblockTask(ThreadControlBlock*)+0x6c>
c00257fe:	66 90                	xchg   ax,ax
c0025800:	83 ec 08             	sub    esp,0x8
c0025803:	53                   	push   ebx
c0025804:	68 ec 01 04 c0       	push   0xc00401ec
c0025809:	e8 12 97 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002580e:	83 c4 10             	add    esp,0x10
c0025811:	eb c1                	jmp    c00257d4 <unblockTask(ThreadControlBlock*)+0x6c>
c0025813:	90                   	nop

c0025814 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025814:	55                   	push   ebp
c0025815:	57                   	push   edi
c0025816:	56                   	push   esi
c0025817:	53                   	push   ebx
c0025818:	83 ec 1c             	sub    esp,0x1c
c002581b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002581f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025822:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025828:	85 ed                	test   ebp,ebp
c002582a:	7e 28                	jle    c0025854 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c002582c:	31 f6                	xor    esi,esi
c002582e:	66 90                	xchg   ax,ax
c0025830:	83 ec 0c             	sub    esp,0xc
c0025833:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c002583a:	83 c6 01             	add    esi,0x1
c002583d:	57                   	push   edi
c002583e:	e8 7e 0d ff ff       	call   c00165c1 <free>
c0025843:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025846:	83 c4 10             	add    esp,0x10
c0025849:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002584f:	7f df                	jg     c0025830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025851:	8d 76 00             	lea    esi,[esi+0x0]
c0025854:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002585e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025863:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025866:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025869:	d3 c0                	rol    eax,cl
c002586b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025872:	21 c8                	and    eax,ecx
c0025874:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c002587b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002587e:	89 f7                	mov    edi,esi
c0025880:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0025888:	0f 85 72 01 00 00    	jne    c0025a00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002588e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0025894:	85 ed                	test   ebp,ebp
c0025896:	74 1c                	je     c00258b4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0025898:	83 ec 0c             	sub    esp,0xc
c002589b:	55                   	push   ebp
c002589c:	e8 af a8 ff ff       	call   c0020150 <EnvVarContainer::~EnvVarContainer()>
c00258a1:	59                   	pop    ecx
c00258a2:	5e                   	pop    esi
c00258a3:	6a 0c                	push   0xc
c00258a5:	55                   	push   ebp
c00258a6:	e8 69 3a ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c00258ab:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00258ae:	83 c4 10             	add    esp,0x10
c00258b1:	89 f7                	mov    edi,esi
c00258b3:	90                   	nop
c00258b4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00258ba:	85 c0                	test   eax,eax
c00258bc:	0f 84 b2 00 00 00    	je     c0025974 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00258c2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00258c5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00258c9:	31 c9                	xor    ecx,ecx
c00258cb:	eb 17                	jmp    c00258e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00258cd:	8d 76 00             	lea    esi,[esi+0x0]
c00258d0:	83 c1 01             	add    ecx,0x1
c00258d3:	83 f9 10             	cmp    ecx,0x10
c00258d6:	0f 84 98 00 00 00    	je     c0025974 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00258dc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00258e2:	66 90                	xchg   ax,ax
c00258e4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00258eb:	d3 fa                	sar    edx,cl
c00258ed:	80 e2 01             	and    dl,0x1
c00258f0:	74 de                	je     c00258d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00258f2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00258f5:	01 d2                	add    edx,edx
c00258f7:	01 ca                	add    edx,ecx
c00258f9:	8d 14 92             	lea    edx,[edx+edx*4]
c00258fc:	01 d0                	add    eax,edx
c00258fe:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025904:	83 fd 07             	cmp    ebp,0x7
c0025907:	75 c7                	jne    c00258d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025909:	05 40 02 00 00       	add    eax,0x240
c002590e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025911:	83 fd ff             	cmp    ebp,0xffffffff
c0025914:	0f 8c ee 00 00 00    	jl     c0025a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c002591a:	0f 84 ac 01 00 00    	je     c0025acc <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025920:	85 ed                	test   ebp,ebp
c0025922:	0f 84 90 01 00 00    	je     c0025ab8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025928:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c002592a:	75 a4                	jne    c00258d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002592c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025932:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025936:	01 d0                	add    eax,edx
c0025938:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002593c:	83 ec 0c             	sub    esp,0xc
c002593f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025945:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025948:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002594e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025955:	50                   	push   eax
c0025956:	e8 0d fe ff ff       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c002595b:	83 c4 10             	add    esp,0x10
c002595e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025961:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025965:	89 f7                	mov    edi,esi
c0025967:	83 c1 01             	add    ecx,0x1
c002596a:	83 f9 10             	cmp    ecx,0x10
c002596d:	0f 85 69 ff ff ff    	jne    c00258dc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025973:	90                   	nop
c0025974:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c002597a:	85 c0                	test   eax,eax
c002597c:	74 62                	je     c00259e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002597e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025984:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c002598a:	74 54                	je     c00259e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002598c:	83 ec 0c             	sub    esp,0xc
c002598f:	68 ec 01 04 c0       	push   0xc00401ec
c0025994:	e8 c3 94 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025999:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00259a0:	89 c7                	mov    edi,eax
c00259a2:	e8 99 94 00 00       	call   c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00259a7:	83 c4 10             	add    esp,0x10
c00259aa:	84 c0                	test   al,al
c00259ac:	0f 84 ce 00 00 00    	je     c0025a80 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00259b2:	66 90                	xchg   ax,ax
c00259b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00259b7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00259bd:	85 d2                	test   edx,edx
c00259bf:	74 0f                	je     c00259d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00259c1:	83 ec 0c             	sub    esp,0xc
c00259c4:	8b 02                	mov    eax,DWORD PTR [edx]
c00259c6:	52                   	push   edx
c00259c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00259ca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00259cd:	83 c4 10             	add    esp,0x10
c00259d0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00259da:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00259dd:	8d 76 00             	lea    esi,[esi+0x0]
c00259e0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00259e6:	85 db                	test   ebx,ebx
c00259e8:	74 16                	je     c0025a00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00259ea:	83 ec 0c             	sub    esp,0xc
c00259ed:	53                   	push   ebx
c00259ee:	e8 bb 2c ff ff       	call   c00186ae <VAS::~VAS()>
c00259f3:	58                   	pop    eax
c00259f4:	5a                   	pop    edx
c00259f5:	6a 14                	push   0x14
c00259f7:	53                   	push   ebx
c00259f8:	e8 17 39 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c00259fd:	83 c4 10             	add    esp,0x10
c0025a00:	83 c4 1c             	add    esp,0x1c
c0025a03:	5b                   	pop    ebx
c0025a04:	5e                   	pop    esi
c0025a05:	5f                   	pop    edi
c0025a06:	5d                   	pop    ebp
c0025a07:	c3                   	ret    
c0025a08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	68 d4 31 03 c0       	push   0xc00331d4
c0025a14:	e8 41 aa ff ff       	call   c002045a <KePanic(char const*)>
c0025a19:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025a1c:	83 c4 10             	add    esp,0x10
c0025a1f:	89 f7                	mov    edi,esi
c0025a21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025a25:	e9 a6 fe ff ff       	jmp    c00258d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025a2a:	66 90                	xchg   ax,ax
c0025a2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025a32:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025a38:	75 1e                	jne    c0025a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025a3a:	83 ec 0c             	sub    esp,0xc
c0025a3d:	68 3c 32 03 c0       	push   0xc003323c
c0025a42:	e8 fa 39 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0025a47:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025a4e:	e8 d9 fa ff ff       	call   c002552c <blockTask(TaskState)>
c0025a53:	83 c4 10             	add    esp,0x10
c0025a56:	66 90                	xchg   ax,ax
c0025a58:	83 ec 08             	sub    esp,0x8
c0025a5b:	56                   	push   esi
c0025a5c:	68 ec 01 04 c0       	push   0xc00401ec
c0025a61:	e8 ba 94 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a66:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025a6d:	e8 ea 93 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a72:	83 c4 10             	add    esp,0x10
c0025a75:	39 f8                	cmp    eax,edi
c0025a77:	0f 84 37 ff ff ff    	je     c00259b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0025a80:	83 ec 0c             	sub    esp,0xc
c0025a83:	68 ec 01 04 c0       	push   0xc00401ec
c0025a88:	e8 cf 93 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025a8d:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025a94:	89 c6                	mov    esi,eax
c0025a96:	e8 c9 93 00 00       	call   c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	39 f3                	cmp    ebx,esi
c0025aa0:	74 b6                	je     c0025a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025aa2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0025aa5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025aa8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0025aae:	75 a8                	jne    c0025a58 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025ab0:	e9 77 ff ff ff       	jmp    c0025a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0025ab8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025abc:	83 ec 0c             	sub    esp,0xc
c0025abf:	68 08 32 03 c0       	push   0xc0033208
c0025ac4:	e9 4b ff ff ff       	jmp    c0025a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0025acc:	8b 36                	mov    esi,DWORD PTR [esi]
c0025ace:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025ad2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025ad5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025ad8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0025ade:	01 d7                	add    edi,edx
c0025ae0:	89 f8                	mov    eax,edi
c0025ae2:	e9 51 fe ff ff       	jmp    c0025938 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025ae7:	90                   	nop

c0025ae8 <cleanerTaskFunction(void*)>:
c0025ae8:	53                   	push   ebx
c0025ae9:	83 ec 08             	sub    esp,0x8
c0025aec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025af1:	83 e8 01             	sub    eax,0x1
c0025af4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025af9:	75 01                	jne    c0025afc <cleanerTaskFunction(void*)+0x14>
c0025afb:	fb                   	sti    
c0025afc:	fa                   	cli    
c0025afd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b02:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025b09:	8d 50 01             	lea    edx,[eax+0x1]
c0025b0c:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025b12:	0f 84 c4 00 00 00    	je     c0025bdc <cleanerTaskFunction(void*)+0xf4>
c0025b18:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b1d:	85 c0                	test   eax,eax
c0025b1f:	75 03                	jne    c0025b24 <cleanerTaskFunction(void*)+0x3c>
c0025b21:	fb                   	sti    
c0025b22:	66 90                	xchg   ax,ax
c0025b24:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c0025b2b:	fa                   	cli    
c0025b2c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025b32:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025b38:	83 c2 01             	add    edx,0x1
c0025b3b:	83 c1 01             	add    ecx,0x1
c0025b3e:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025b44:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025b4a:	fa                   	cli    
c0025b4b:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025b51:	83 c3 01             	add    ebx,0x1
c0025b54:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c0025b5a:	eb 28                	jmp    c0025b84 <cleanerTaskFunction(void*)+0x9c>
c0025b5c:	83 ec 0c             	sub    esp,0xc
c0025b5f:	68 d4 01 04 c0       	push   0xc00401d4
c0025b64:	e8 f3 92 00 00       	call   c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025b69:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025b70:	89 c3                	mov    ebx,eax
c0025b72:	e8 ed 92 00 00       	call   c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025b77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025b7a:	e8 95 fc ff ff       	call   c0025814 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025b7f:	83 c4 10             	add    esp,0x10
c0025b82:	66 90                	xchg   ax,ax
c0025b84:	83 ec 0c             	sub    esp,0xc
c0025b87:	68 d4 01 04 c0       	push   0xc00401d4
c0025b8c:	e8 af 92 00 00       	call   c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025b91:	83 c4 10             	add    esp,0x10
c0025b94:	84 c0                	test   al,al
c0025b96:	74 c4                	je     c0025b5c <cleanerTaskFunction(void*)+0x74>
c0025b98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b9d:	83 e8 01             	sub    eax,0x1
c0025ba0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ba5:	75 01                	jne    c0025ba8 <cleanerTaskFunction(void*)+0xc0>
c0025ba7:	fb                   	sti    
c0025ba8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025bad:	83 e8 01             	sub    eax,0x1
c0025bb0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025bb5:	0f 85 31 ff ff ff    	jne    c0025aec <cleanerTaskFunction(void*)+0x4>
c0025bbb:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025bc0:	85 c0                	test   eax,eax
c0025bc2:	0f 84 24 ff ff ff    	je     c0025aec <cleanerTaskFunction(void*)+0x4>
c0025bc8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025bd2:	e8 99 f8 ff ff       	call   c0025470 <schedule()>
c0025bd7:	e9 10 ff ff ff       	jmp    c0025aec <cleanerTaskFunction(void*)+0x4>
c0025bdc:	83 ec 0c             	sub    esp,0xc
c0025bdf:	6a 02                	push   0x2
c0025be1:	e8 1e f9 ff ff       	call   c0025504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025be6:	83 c4 10             	add    esp,0x10
c0025be9:	e9 36 ff ff ff       	jmp    c0025b24 <cleanerTaskFunction(void*)+0x3c>
c0025bee:	66 90                	xchg   ax,ax

c0025bf0 <terminateTask(int)>:
c0025bf0:	83 ec 14             	sub    esp,0x14
c0025bf3:	fa                   	cli    
c0025bf4:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025bfa:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025c00:	83 c2 01             	add    edx,0x1
c0025c03:	83 c1 01             	add    ecx,0x1
c0025c06:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c0c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025c12:	fa                   	cli    
c0025c13:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025c1c:	83 c0 01             	add    eax,0x1
c0025c1f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c29:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c31:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025c34:	50                   	push   eax
c0025c35:	68 d4 01 04 c0       	push   0xc00401d4
c0025c3a:	e8 e1 92 00 00       	call   c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c44:	83 c4 10             	add    esp,0x10
c0025c47:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025c4e:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025c53:	85 c0                	test   eax,eax
c0025c55:	74 65                	je     c0025cbc <terminateTask(int)+0xcc>
c0025c57:	83 ec 0c             	sub    esp,0xc
c0025c5a:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025c61:	50                   	push   eax
c0025c62:	e8 01 fb ff ff       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c0025c67:	83 c4 10             	add    esp,0x10
c0025c6a:	66 90                	xchg   ax,ax
c0025c6c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c71:	83 e8 01             	sub    eax,0x1
c0025c74:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c79:	75 01                	jne    c0025c7c <terminateTask(int)+0x8c>
c0025c7b:	fb                   	sti    
c0025c7c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025c81:	83 e8 01             	sub    eax,0x1
c0025c84:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025c89:	75 09                	jne    c0025c94 <terminateTask(int)+0xa4>
c0025c8b:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025c92:	75 3c                	jne    c0025cd0 <terminateTask(int)+0xe0>
c0025c94:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c99:	83 e8 01             	sub    eax,0x1
c0025c9c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ca1:	75 01                	jne    c0025ca4 <terminateTask(int)+0xb4>
c0025ca3:	fb                   	sti    
c0025ca4:	fa                   	cli    
c0025ca5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025caa:	83 c0 01             	add    eax,0x1
c0025cad:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cb2:	66 90                	xchg   ax,ax
c0025cb4:	e8 b7 f7 ff ff       	call   c0025470 <schedule()>
c0025cb9:	eb d9                	jmp    c0025c94 <terminateTask(int)+0xa4>
c0025cbb:	90                   	nop
c0025cbc:	83 ec 0c             	sub    esp,0xc
c0025cbf:	68 56 31 03 c0       	push   0xc0033156
c0025cc4:	e8 78 37 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0025cc9:	83 c4 10             	add    esp,0x10
c0025ccc:	eb 9e                	jmp    c0025c6c <terminateTask(int)+0x7c>
c0025cce:	66 90                	xchg   ax,ax
c0025cd0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025cda:	eb d8                	jmp    c0025cb4 <terminateTask(int)+0xc4>

c0025cdc <Thr::terminateFromIRQ(int)>:
c0025cdc:	83 ec 18             	sub    esp,0x18
c0025cdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ce3:	50                   	push   eax
c0025ce4:	e8 07 ff ff ff       	call   c0025bf0 <terminateTask(int)>
c0025ce9:	8d 76 00             	lea    esi,[esi+0x0]

c0025cec <__static_initialization_and_destruction_0(int, int)>:
c0025cec:	83 ec 0c             	sub    esp,0xc
c0025cef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025cf4:	0f 85 8e 00 00 00    	jne    c0025d88 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025cfa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025d02:	0f 85 80 00 00 00    	jne    c0025d88 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025d08:	83 ec 0c             	sub    esp,0xc
c0025d0b:	68 ec 01 04 c0       	push   0xc00401ec
c0025d10:	e8 bf 94 00 00       	call   c002f1d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025d15:	83 c4 10             	add    esp,0x10
c0025d18:	83 ec 04             	sub    esp,0x4
c0025d1b:	68 18 3e 03 c0       	push   0xc0033e18
c0025d20:	68 ec 01 04 c0       	push   0xc00401ec
c0025d25:	68 84 f1 02 c0       	push   0xc002f184
c0025d2a:	e8 95 35 ff ff       	call   c00192c4 <__cxa_atexit>
c0025d2f:	83 c4 10             	add    esp,0x10
c0025d32:	83 ec 0c             	sub    esp,0xc
c0025d35:	68 e0 01 04 c0       	push   0xc00401e0
c0025d3a:	e8 95 94 00 00       	call   c002f1d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025d3f:	83 c4 10             	add    esp,0x10
c0025d42:	83 ec 04             	sub    esp,0x4
c0025d45:	68 18 3e 03 c0       	push   0xc0033e18
c0025d4a:	68 e0 01 04 c0       	push   0xc00401e0
c0025d4f:	68 84 f1 02 c0       	push   0xc002f184
c0025d54:	e8 6b 35 ff ff       	call   c00192c4 <__cxa_atexit>
c0025d59:	83 c4 10             	add    esp,0x10
c0025d5c:	83 ec 0c             	sub    esp,0xc
c0025d5f:	68 d4 01 04 c0       	push   0xc00401d4
c0025d64:	e8 6b 94 00 00       	call   c002f1d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025d69:	83 c4 10             	add    esp,0x10
c0025d6c:	83 ec 04             	sub    esp,0x4
c0025d6f:	68 18 3e 03 c0       	push   0xc0033e18
c0025d74:	68 d4 01 04 c0       	push   0xc00401d4
c0025d79:	68 84 f1 02 c0       	push   0xc002f184
c0025d7e:	e8 41 35 ff ff       	call   c00192c4 <__cxa_atexit>
c0025d83:	83 c4 10             	add    esp,0x10
c0025d86:	66 90                	xchg   ax,ax
c0025d88:	90                   	nop
c0025d89:	83 c4 0c             	add    esp,0xc
c0025d8c:	c3                   	ret    
c0025d8d:	8d 76 00             	lea    esi,[esi+0x0]

c0025d90 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025d90:	83 ec 0c             	sub    esp,0xc
c0025d93:	83 ec 08             	sub    esp,0x8
c0025d96:	68 ff ff 00 00       	push   0xffff
c0025d9b:	6a 01                	push   0x1
c0025d9d:	e8 4a ff ff ff       	call   c0025cec <__static_initialization_and_destruction_0(int, int)>
c0025da2:	83 c4 10             	add    esp,0x10
c0025da5:	83 c4 0c             	add    esp,0xc
c0025da8:	c3                   	ret    

c0025da9 <Vm::inbv(unsigned short)>:
c0025da9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025dad:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025db2:	75 06                	jne    c0025dba <Vm::inbv(unsigned short)+0x11>
c0025db4:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025db9:	c3                   	ret    
c0025dba:	ec                   	in     al,dx
c0025dbb:	c3                   	ret    

c0025dbc <Vm::outbv(unsigned short, unsigned char)>:
c0025dbc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025dc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025dc4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025dc9:	75 25                	jne    c0025df0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025dcb:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025dd1:	8d 51 01             	lea    edx,[ecx+0x1]
c0025dd4:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025dda:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025de0:	83 fa 20             	cmp    edx,0x20
c0025de3:	75 0c                	jne    c0025df1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025de5:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025def:	c3                   	ret    
c0025df0:	ee                   	out    dx,al
c0025df1:	c3                   	ret    

c0025df2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025df2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025df7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025dfc:	c1 e0 04             	shl    eax,0x4
c0025dff:	01 d0                	add    eax,edx
c0025e01:	c3                   	ret    

c0025e02 <Vm::getSegment(unsigned int)>:
c0025e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e06:	c1 e8 10             	shr    eax,0x10
c0025e09:	c3                   	ret    

c0025e0a <Vm::getOffset(unsigned int)>:
c0025e0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e0e:	c3                   	ret    

c0025e0f <Vm::mainloop2()>:
c0025e0f:	83 ec 18             	sub    esp,0x18
c0025e12:	fa                   	cli    
c0025e13:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e19:	6a 02                	push   0x2
c0025e1b:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025e22:	e8 dd f6 ff ff       	call   c0025504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025e27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025e2c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025e30:	52                   	push   edx
c0025e31:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025e35:	52                   	push   edx
c0025e36:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025e3a:	52                   	push   edx
c0025e3b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025e3f:	50                   	push   eax
c0025e40:	e8 ca a3 fd ff       	call   c000020f <goToVM86>
c0025e45:	83 c4 2c             	add    esp,0x2c
c0025e48:	c3                   	ret    

c0025e49 <Vm::mainVm8086Loop(void*)>:
c0025e49:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e4e:	48                   	dec    eax
c0025e4f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e54:	75 01                	jne    c0025e57 <Vm::mainVm8086Loop(void*)+0xe>
c0025e56:	fb                   	sti    
c0025e57:	eb b6                	jmp    c0025e0f <Vm::mainloop2()>

c0025e59 <Vm::mainloop3(unsigned long)>:
c0025e59:	83 ec 18             	sub    esp,0x18
c0025e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e60:	fa                   	cli    
c0025e61:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e67:	6a 02                	push   0x2
c0025e69:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025e70:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025e75:	e8 8a f6 ff ff       	call   c0025504 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025e7a:	83 c4 1c             	add    esp,0x1c
c0025e7d:	eb 90                	jmp    c0025e0f <Vm::mainloop2()>

c0025e7f <Vm::initialise8086()>:
c0025e7f:	83 ec 0c             	sub    esp,0xc
c0025e82:	68 80 00 00 00       	push   0x80
c0025e87:	6a 00                	push   0x0
c0025e89:	68 49 5e 02 c0       	push   0xc0025e49
c0025e8e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025e94:	e8 87 f3 ff ff       	call   c0025220 <Process::createThread(void (*)(void*), void*, int)>
c0025e99:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025ea0:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025ea5:	68 00 01 00 00       	push   0x100
c0025eaa:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025eaf:	6a 00                	push   0x0
c0025eb1:	6a 00                	push   0x0
c0025eb3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025eb9:	e8 58 2b ff ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025ebe:	83 c4 2c             	add    esp,0x2c
c0025ec1:	c3                   	ret    

c0025ec2 <Vm::finish8086()>:
c0025ec2:	53                   	push   ebx
c0025ec3:	83 ec 08             	sub    esp,0x8
c0025ec6:	fa                   	cli    
c0025ec7:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025ecd:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025ed4:	75 15                	jne    c0025eeb <Vm::finish8086()+0x29>
c0025ed6:	e8 95 f5 ff ff       	call   c0025470 <schedule()>
c0025edb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ee0:	48                   	dec    eax
c0025ee1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ee6:	75 de                	jne    c0025ec6 <Vm::finish8086()+0x4>
c0025ee8:	fb                   	sti    
c0025ee9:	eb db                	jmp    c0025ec6 <Vm::finish8086()+0x4>
c0025eeb:	83 ec 0c             	sub    esp,0xc
c0025eee:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025ef4:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025efa:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025f01:	e8 62 f8 ff ff       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c0025f06:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f0b:	83 c4 10             	add    esp,0x10
c0025f0e:	8d 50 ff             	lea    edx,[eax-0x1]
c0025f11:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025f17:	85 d2                	test   edx,edx
c0025f19:	75 01                	jne    c0025f1c <Vm::finish8086()+0x5a>
c0025f1b:	fb                   	sti    
c0025f1c:	89 d8                	mov    eax,ebx
c0025f1e:	83 c4 08             	add    esp,0x8
c0025f21:	5b                   	pop    ebx
c0025f22:	c3                   	ret    

c0025f23 <Vm::getOutput8086(unsigned char*)>:
c0025f23:	57                   	push   edi
c0025f24:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025f2a:	56                   	push   esi
c0025f2b:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025f30:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025f34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025f36:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025f3b:	5e                   	pop    esi
c0025f3c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025f46:	5f                   	pop    edi
c0025f47:	c3                   	ret    

c0025f48 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025f48:	55                   	push   ebp
c0025f49:	57                   	push   edi
c0025f4a:	56                   	push   esi
c0025f4b:	53                   	push   ebx
c0025f4c:	83 ec 0c             	sub    esp,0xc
c0025f4f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025f53:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025f57:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025f5b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f5f:	fa                   	cli    
c0025f60:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025f66:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025f6d:	75 15                	jne    c0025f84 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025f6f:	e8 fc f4 ff ff       	call   c0025470 <schedule()>
c0025f74:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f79:	48                   	dec    eax
c0025f7a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f7f:	75 de                	jne    c0025f5f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025f81:	fb                   	sti    
c0025f82:	eb db                	jmp    c0025f5f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025f84:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025f89:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025f93:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025f97:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025f9b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025f9f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025fa3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025fa7:	0f b7 ff             	movzx  edi,di
c0025faa:	0f b7 f6             	movzx  esi,si
c0025fad:	50                   	push   eax
c0025fae:	6a 20                	push   0x20
c0025fb0:	6a 00                	push   0x0
c0025fb2:	68 40 02 04 c0       	push   0xc0040240
c0025fb7:	e8 34 a5 fd ff       	call   c00004f0 <memset>
c0025fbc:	5a                   	pop    edx
c0025fbd:	59                   	pop    ecx
c0025fbe:	57                   	push   edi
c0025fbf:	56                   	push   esi
c0025fc0:	e8 2d fe ff ff       	call   c0025df2 <Vm::realToLinear(unsigned short, unsigned short)>
c0025fc5:	83 c4 10             	add    esp,0x10
c0025fc8:	89 c7                	mov    edi,eax
c0025fca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025fce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025fd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025fd4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025fd9:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025fe0:	48                   	dec    eax
c0025fe1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025fe6:	75 01                	jne    c0025fe9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025fe8:	fb                   	sti    
c0025fe9:	83 ec 0c             	sub    esp,0xc
c0025fec:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025ff2:	e8 71 f7 ff ff       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c0025ff7:	83 c4 1c             	add    esp,0x1c
c0025ffa:	b0 01                	mov    al,0x1
c0025ffc:	5b                   	pop    ebx
c0025ffd:	5e                   	pop    esi
c0025ffe:	5f                   	pop    edi
c0025fff:	5d                   	pop    ebp
c0026000:	c3                   	ret    

c0026001 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0026001:	55                   	push   ebp
c0026002:	57                   	push   edi
c0026003:	56                   	push   esi
c0026004:	53                   	push   ebx
c0026005:	83 ec 34             	sub    esp,0x34
c0026008:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002600c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0026010:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0026014:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0026018:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002601c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026020:	68 64 32 03 c0       	push   0xc0033264
c0026025:	e8 17 34 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002602a:	83 c4 10             	add    esp,0x10
c002602d:	fa                   	cli    
c002602e:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0026034:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c002603a:	84 db                	test   bl,bl
c002603c:	75 15                	jne    c0026053 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c002603e:	e8 2d f4 ff ff       	call   c0025470 <schedule()>
c0026043:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026048:	48                   	dec    eax
c0026049:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002604e:	75 dd                	jne    c002602d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0026050:	fb                   	sti    
c0026051:	eb da                	jmp    c002602d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0026053:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026057:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c002605c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0026066:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c002606a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c002606e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0026072:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0026076:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c002607a:	50                   	push   eax
c002607b:	6a 20                	push   0x20
c002607d:	6a 00                	push   0x0
c002607f:	68 40 02 04 c0       	push   0xc0040240
c0026084:	e8 67 a4 fd ff       	call   c00004f0 <memset>
c0026089:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0026090:	e8 1c 05 ff ff       	call   c00165b1 <malloc>
c0026095:	83 c4 0c             	add    esp,0xc
c0026098:	89 c5                	mov    ebp,eax
c002609a:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00260a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00260a4:	50                   	push   eax
c00260a5:	e8 9e 45 ff ff       	call   c001a648 <File::File(char const*, Process*)>
c00260aa:	83 c4 10             	add    esp,0x10
c00260ad:	85 ed                	test   ebp,ebp
c00260af:	75 0a                	jne    c00260bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00260b1:	83 ec 0c             	sub    esp,0xc
c00260b4:	68 86 32 03 c0       	push   0xc0033286
c00260b9:	eb 2b                	jmp    c00260e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00260bb:	50                   	push   eax
c00260bc:	8d 44 24 17          	lea    eax,[esp+0x17]
c00260c0:	50                   	push   eax
c00260c1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00260c5:	50                   	push   eax
c00260c6:	55                   	push   ebp
c00260c7:	e8 9c 48 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c00260cc:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00260d0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00260d4:	83 c4 10             	add    esp,0x10
c00260d7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00260dc:	74 27                	je     c0026105 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00260de:	83 ec 0c             	sub    esp,0xc
c00260e1:	68 9a 32 03 c0       	push   0xc003329a
c00260e6:	e8 6f a3 ff ff       	call   c002045a <KePanic(char const*)>
c00260eb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00260f0:	83 c4 10             	add    esp,0x10
c00260f3:	48                   	dec    eax
c00260f4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00260f9:	85 c0                	test   eax,eax
c00260fb:	75 01                	jne    c00260fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00260fd:	fb                   	sti    
c00260fe:	31 db                	xor    ebx,ebx
c0026100:	e9 90 00 00 00       	jmp    c0026195 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0026105:	51                   	push   ecx
c0026106:	51                   	push   ecx
c0026107:	6a 01                	push   0x1
c0026109:	55                   	push   ebp
c002610a:	e8 57 45 ff ff       	call   c001a666 <File::open(FileOpenMode)>
c002610f:	83 c4 10             	add    esp,0x10
c0026112:	85 c0                	test   eax,eax
c0026114:	74 26                	je     c002613c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0026116:	83 ec 0c             	sub    esp,0xc
c0026119:	68 b3 32 03 c0       	push   0xc00332b3
c002611e:	e8 37 a3 ff ff       	call   c002045a <KePanic(char const*)>
c0026123:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0026128:	83 c4 10             	add    esp,0x10
c002612b:	48                   	dec    eax
c002612c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0026131:	85 c0                	test   eax,eax
c0026133:	75 c9                	jne    c00260fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0026135:	fb                   	sti    
c0026136:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c002613a:	eb 59                	jmp    c0026195 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c002613c:	0f b7 ff             	movzx  edi,di
c002613f:	50                   	push   eax
c0026140:	0f b7 f6             	movzx  esi,si
c0026143:	50                   	push   eax
c0026144:	57                   	push   edi
c0026145:	56                   	push   esi
c0026146:	e8 a7 fc ff ff       	call   c0025df2 <Vm::realToLinear(unsigned short, unsigned short)>
c002614b:	5a                   	pop    edx
c002614c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002614f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0026153:	51                   	push   ecx
c0026154:	50                   	push   eax
c0026155:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0026159:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002615d:	55                   	push   ebp
c002615e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0026161:	83 c4 14             	add    esp,0x14
c0026164:	55                   	push   ebp
c0026165:	e8 5a 45 ff ff       	call   c001a6c4 <File::close()>
c002616a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002616f:	83 c4 10             	add    esp,0x10
c0026172:	48                   	dec    eax
c0026173:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c002617a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002617f:	85 c0                	test   eax,eax
c0026181:	75 01                	jne    c0026184 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0026183:	fb                   	sti    
c0026184:	83 ec 0c             	sub    esp,0xc
c0026187:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c002618d:	e8 d6 f5 ff ff       	call   c0025768 <unblockTask(ThreadControlBlock*)>
c0026192:	83 c4 10             	add    esp,0x10
c0026195:	83 c4 2c             	add    esp,0x2c
c0026198:	88 d8                	mov    al,bl
c002619a:	5b                   	pop    ebx
c002619b:	5e                   	pop    esi
c002619c:	5f                   	pop    edi
c002619d:	5d                   	pop    ebp
c002619e:	c3                   	ret    

c002619f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c002619f:	57                   	push   edi
c00261a0:	56                   	push   esi
c00261a1:	53                   	push   ebx
c00261a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00261a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261aa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00261ae:	83 e8 06             	sub    eax,0x6
c00261b1:	0f b7 c0             	movzx  eax,ax
c00261b4:	50                   	push   eax
c00261b5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00261ba:	50                   	push   eax
c00261bb:	e8 32 fc ff ff       	call   c0025df2 <Vm::realToLinear(unsigned short, unsigned short)>
c00261c0:	5a                   	pop    edx
c00261c1:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00261c4:	59                   	pop    ecx
c00261c5:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00261c8:	8d 51 fa             	lea    edx,[ecx-0x6]
c00261cb:	81 e2 ff ff 00 00    	and    edx,0xffff
c00261d1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00261d4:	8d 56 02             	lea    edx,[esi+0x2]
c00261d7:	66 89 10             	mov    WORD PTR [eax],dx
c00261da:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00261de:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00261e2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00261e5:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00261e9:	0f b6 f1             	movzx  esi,cl
c00261ec:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00261f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00261f6:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00261fa:	0f b6 d5             	movzx  edx,ch
c00261fd:	74 0a                	je     c0026209 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00261ff:	c1 e2 08             	shl    edx,0x8
c0026202:	09 f2                	or     edx,esi
c0026204:	80 ce 02             	or     dh,0x2
c0026207:	eb 08                	jmp    c0026211 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0026209:	c1 e2 08             	shl    edx,0x8
c002620c:	09 f2                	or     edx,esi
c002620e:	80 e6 fd             	and    dh,0xfd
c0026211:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026215:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002621a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002621e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0026226:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0026229:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026231:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026234:	5b                   	pop    ebx
c0026235:	5e                   	pop    esi
c0026236:	5f                   	pop    edi
c0026237:	c3                   	ret    

c0026238 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0026238:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002623d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026242:	c1 e0 04             	shl    eax,0x4
c0026245:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0026248:	c3                   	ret    

c0026249 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0026249:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002624e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026253:	c1 e0 04             	shl    eax,0x4
c0026256:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c002625a:	c3                   	ret    

c002625b <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c002625b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026260:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026265:	c1 e0 04             	shl    eax,0x4
c0026268:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c002626b:	c3                   	ret    

c002626c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c002626c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026271:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026276:	c1 e0 04             	shl    eax,0x4
c0026279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002627d:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0026280:	c3                   	ret    

c0026281 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0026281:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026286:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c002628b:	c1 e0 04             	shl    eax,0x4
c002628e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0026292:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0026296:	c3                   	ret    

c0026297 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0026297:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c002629c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00262a1:	c1 e0 04             	shl    eax,0x4
c00262a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00262a8:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00262ab:	c3                   	ret    

c00262ac <Vm::faultHandler(regs*)>:
c00262ac:	55                   	push   ebp
c00262ad:	57                   	push   edi
c00262ae:	56                   	push   esi
c00262af:	53                   	push   ebx
c00262b0:	83 ec 2c             	sub    esp,0x2c
c00262b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00262b7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00262ba:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00262be:	0f b7 f8             	movzx  edi,ax
c00262c1:	52                   	push   edx
c00262c2:	0f b7 c0             	movzx  eax,ax
c00262c5:	50                   	push   eax
c00262c6:	e8 27 fb ff ff       	call   c0025df2 <Vm::realToLinear(unsigned short, unsigned short)>
c00262cb:	5a                   	pop    edx
c00262cc:	59                   	pop    ecx
c00262cd:	89 c1                	mov    ecx,eax
c00262cf:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00262d6:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00262db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00262df:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00262e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00262e6:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00262eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00262ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00262f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00262f7:	e8 f6 fa ff ff       	call   c0025df2 <Vm::realToLinear(unsigned short, unsigned short)>
c00262fc:	5e                   	pop    esi
c00262fd:	be 06 00 00 00       	mov    esi,0x6
c0026302:	5d                   	pop    ebp
c0026303:	31 ed                	xor    ebp,ebp
c0026305:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002630a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c002630d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026313:	0f 84 74 02 00 00    	je     c002658d <Vm::faultHandler(regs*)+0x2e1>
c0026319:	0f 87 94 00 00 00    	ja     c00263b3 <Vm::faultHandler(regs*)+0x107>
c002631f:	83 fa 66             	cmp    edx,0x66
c0026322:	0f 84 e2 01 00 00    	je     c002650a <Vm::faultHandler(regs*)+0x25e>
c0026328:	77 47                	ja     c0026371 <Vm::faultHandler(regs*)+0xc5>
c002632a:	83 fa 36             	cmp    edx,0x36
c002632d:	0f 84 ca 01 00 00    	je     c00264fd <Vm::faultHandler(regs*)+0x251>
c0026333:	77 1a                	ja     c002634f <Vm::faultHandler(regs*)+0xa3>
c0026335:	83 fa 26             	cmp    edx,0x26
c0026338:	0f 84 98 01 00 00    	je     c00264d6 <Vm::faultHandler(regs*)+0x22a>
c002633e:	83 fa 2e             	cmp    edx,0x2e
c0026341:	0f 85 21 06 00 00    	jne    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c0026347:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002634a:	31 f6                	xor    esi,esi
c002634c:	41                   	inc    ecx
c002634d:	eb bb                	jmp    c002630a <Vm::faultHandler(regs*)+0x5e>
c002634f:	83 fa 64             	cmp    edx,0x64
c0026352:	0f 84 8b 01 00 00    	je     c00264e3 <Vm::faultHandler(regs*)+0x237>
c0026358:	0f 87 92 01 00 00    	ja     c00264f0 <Vm::faultHandler(regs*)+0x244>
c002635e:	83 fa 3e             	cmp    edx,0x3e
c0026361:	0f 85 01 06 00 00    	jne    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c0026367:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002636a:	be 01 00 00 00       	mov    esi,0x1
c002636f:	eb db                	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c0026371:	83 fa 6d             	cmp    edx,0x6d
c0026374:	0f 84 34 03 00 00    	je     c00266ae <Vm::faultHandler(regs*)+0x402>
c002637a:	77 17                	ja     c0026393 <Vm::faultHandler(regs*)+0xe7>
c002637c:	83 fa 67             	cmp    edx,0x67
c002637f:	0f 84 92 01 00 00    	je     c0026517 <Vm::faultHandler(regs*)+0x26b>
c0026385:	83 fa 6c             	cmp    edx,0x6c
c0026388:	0f 84 b1 02 00 00    	je     c002663f <Vm::faultHandler(regs*)+0x393>
c002638e:	e9 d5 05 00 00       	jmp    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c0026393:	83 fa 6f             	cmp    edx,0x6f
c0026396:	0f 84 3d 04 00 00    	je     c00267d9 <Vm::faultHandler(regs*)+0x52d>
c002639c:	0f 82 9f 03 00 00    	jb     c0026741 <Vm::faultHandler(regs*)+0x495>
c00263a2:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00263a8:	0f 84 76 01 00 00    	je     c0026524 <Vm::faultHandler(regs*)+0x278>
c00263ae:	e9 b5 05 00 00       	jmp    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c00263b3:	81 fa ec 00 00 00    	cmp    edx,0xec
c00263b9:	0f 84 51 05 00 00    	je     c0026910 <Vm::faultHandler(regs*)+0x664>
c00263bf:	0f 87 a9 00 00 00    	ja     c002646e <Vm::faultHandler(regs*)+0x1c2>
c00263c5:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00263cb:	0f 84 d0 04 00 00    	je     c00268a1 <Vm::faultHandler(regs*)+0x5f5>
c00263d1:	77 78                	ja     c002644b <Vm::faultHandler(regs*)+0x19f>
c00263d3:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00263d9:	0f 84 0e 02 00 00    	je     c00265ed <Vm::faultHandler(regs*)+0x341>
c00263df:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00263e5:	0f 85 7d 05 00 00    	jne    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c00263eb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00263ef:	89 d1                	mov    ecx,edx
c00263f1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00263f4:	c1 e1 08             	shl    ecx,0x8
c00263f7:	09 ca                	or     edx,ecx
c00263f9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00263fc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026400:	89 d1                	mov    ecx,edx
c0026402:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0026406:	c1 e1 08             	shl    ecx,0x8
c0026409:	09 ca                	or     edx,ecx
c002640b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c002640e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026412:	89 d1                	mov    ecx,edx
c0026414:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0026418:	c1 e1 08             	shl    ecx,0x8
c002641b:	09 ca                	or     edx,ecx
c002641d:	81 ca 00 02 02 00    	or     edx,0x20200
c0026423:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0026426:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002642a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026430:	d1 e8                	shr    eax,1
c0026432:	83 e0 01             	and    eax,0x1
c0026435:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026438:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002643b:	83 c0 06             	add    eax,0x6
c002643e:	25 ff ff 00 00       	and    eax,0xffff
c0026443:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0026446:	e9 19 05 00 00       	jmp    c0026964 <Vm::faultHandler(regs*)+0x6b8>
c002644b:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026451:	0f 84 8f 04 00 00    	je     c00268e6 <Vm::faultHandler(regs*)+0x63a>
c0026457:	0f 82 60 04 00 00    	jb     c00268bd <Vm::faultHandler(regs*)+0x611>
c002645d:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0026463:	0f 84 94 04 00 00    	je     c00268fd <Vm::faultHandler(regs*)+0x651>
c0026469:	e9 fa 04 00 00       	jmp    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c002646e:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026474:	0f 84 d7 04 00 00    	je     c0026951 <Vm::faultHandler(regs*)+0x6a5>
c002647a:	77 2e                	ja     c00264aa <Vm::faultHandler(regs*)+0x1fe>
c002647c:	81 fa ed 00 00 00    	cmp    edx,0xed
c0026482:	0f 84 a4 04 00 00    	je     c002692c <Vm::faultHandler(regs*)+0x680>
c0026488:	81 fa ee 00 00 00    	cmp    edx,0xee
c002648e:	0f 85 d4 04 00 00    	jne    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c0026494:	50                   	push   eax
c0026495:	50                   	push   eax
c0026496:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c002649a:	50                   	push   eax
c002649b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002649f:	50                   	push   eax
c00264a0:	e8 17 f9 ff ff       	call   c0025dbc <Vm::outbv(unsigned short, unsigned char)>
c00264a5:	e9 9f 04 00 00       	jmp    c0026949 <Vm::faultHandler(regs*)+0x69d>
c00264aa:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00264b0:	0f 84 6d 01 00 00    	je     c0026623 <Vm::faultHandler(regs*)+0x377>
c00264b6:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00264bc:	0f 84 6f 01 00 00    	je     c0026631 <Vm::faultHandler(regs*)+0x385>
c00264c2:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00264c8:	0f 85 9a 04 00 00    	jne    c0026968 <Vm::faultHandler(regs*)+0x6bc>
c00264ce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00264d1:	e9 76 fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c00264d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00264d9:	be 02 00 00 00       	mov    esi,0x2
c00264de:	e9 69 fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c00264e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00264e6:	be 03 00 00 00       	mov    esi,0x3
c00264eb:	e9 5c fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c00264f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00264f3:	be 04 00 00 00       	mov    esi,0x4
c00264f8:	e9 4f fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c00264fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026500:	be 05 00 00 00       	mov    esi,0x5
c0026505:	e9 42 fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c002650a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002650d:	bd 01 00 00 00       	mov    ebp,0x1
c0026512:	e9 35 fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c0026517:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002651a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c002651f:	e9 28 fe ff ff       	jmp    c002634c <Vm::faultHandler(regs*)+0xa0>
c0026524:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0026527:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002652b:	83 e5 01             	and    ebp,0x1
c002652e:	74 30                	je     c0026560 <Vm::faultHandler(regs*)+0x2b4>
c0026530:	83 e9 04             	sub    ecx,0x4
c0026533:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0026539:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002653f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026542:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026545:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002654b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002654f:	0f 84 0c 04 00 00    	je     c0026961 <Vm::faultHandler(regs*)+0x6b5>
c0026555:	80 ce 02             	or     dh,0x2
c0026558:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002655b:	e9 01 04 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c0026560:	83 e9 02             	sub    ecx,0x2
c0026563:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026569:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c002656c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026570:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0026576:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002657a:	74 05                	je     c0026581 <Vm::faultHandler(regs*)+0x2d5>
c002657c:	80 ce 02             	or     dh,0x2
c002657f:	eb 03                	jmp    c0026584 <Vm::faultHandler(regs*)+0x2d8>
c0026581:	80 e6 fd             	and    dh,0xfd
c0026584:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026588:	e9 d4 03 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c002658d:	83 e5 01             	and    ebp,0x1
c0026590:	74 2a                	je     c00265bc <Vm::faultHandler(regs*)+0x310>
c0026592:	8b 10                	mov    edx,DWORD PTR [eax]
c0026594:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002659a:	81 ca 00 02 02 00    	or     edx,0x20200
c00265a0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00265a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00265a5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00265ab:	c1 e8 09             	shr    eax,0x9
c00265ae:	83 e0 01             	and    eax,0x1
c00265b1:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00265b4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00265b7:	83 c0 04             	add    eax,0x4
c00265ba:	eb 24                	jmp    c00265e0 <Vm::faultHandler(regs*)+0x334>
c00265bc:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00265bf:	81 ca 00 02 02 00    	or     edx,0x20200
c00265c5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00265c8:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00265cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00265d1:	c1 e8 09             	shr    eax,0x9
c00265d4:	83 e0 01             	and    eax,0x1
c00265d7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00265da:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00265dd:	83 c0 02             	add    eax,0x2
c00265e0:	25 ff ff 00 00       	and    eax,0xffff
c00265e5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00265e8:	e9 74 03 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c00265ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265f1:	3d ee 00 00 00       	cmp    eax,0xee
c00265f6:	75 10                	jne    c0026608 <Vm::faultHandler(regs*)+0x35c>
c00265f8:	83 ec 0c             	sub    esp,0xc
c00265fb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00265fe:	e8 56 f8 ff ff       	call   c0025e59 <Vm::mainloop3(unsigned long)>
c0026603:	e9 44 03 00 00       	jmp    c002694c <Vm::faultHandler(regs*)+0x6a0>
c0026608:	83 ec 0c             	sub    esp,0xc
c002660b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002660f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026613:	51                   	push   ecx
c0026614:	50                   	push   eax
c0026615:	53                   	push   ebx
c0026616:	e8 84 fb ff ff       	call   c002619f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c002661b:	83 c4 20             	add    esp,0x20
c002661e:	e9 41 03 00 00       	jmp    c0026964 <Vm::faultHandler(regs*)+0x6b8>
c0026623:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026628:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002662c:	e9 30 03 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c0026631:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026636:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002663a:	e9 22 03 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c002663f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026642:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026647:	74 2b                	je     c0026674 <Vm::faultHandler(regs*)+0x3c8>
c0026649:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026650:	76 22                	jbe    c0026674 <Vm::faultHandler(regs*)+0x3c8>
c0026652:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026656:	50                   	push   eax
c0026657:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002665b:	50                   	push   eax
c002665c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026660:	50                   	push   eax
c0026661:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026665:	50                   	push   eax
c0026666:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002666a:	50                   	push   eax
c002666b:	6a 6c                	push   0x6c
c002666d:	6a 6c                	push   0x6c
c002666f:	e9 bd 01 00 00       	jmp    c0026831 <Vm::faultHandler(regs*)+0x585>
c0026674:	83 ec 0c             	sub    esp,0xc
c0026677:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002667b:	0f b7 f6             	movzx  esi,si
c002667e:	50                   	push   eax
c002667f:	e8 25 f7 ff ff       	call   c0025da9 <Vm::inbv(unsigned short)>
c0026684:	83 c4 0c             	add    esp,0xc
c0026687:	0f b6 c0             	movzx  eax,al
c002668a:	50                   	push   eax
c002668b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c002668f:	50                   	push   eax
c0026690:	56                   	push   esi
c0026691:	e8 d6 fb ff ff       	call   c002626c <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0026696:	83 c4 10             	add    esp,0x10
c0026699:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002669c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00266a0:	74 03                	je     c00266a5 <Vm::faultHandler(regs*)+0x3f9>
c00266a2:	48                   	dec    eax
c00266a3:	eb 01                	jmp    c00266a6 <Vm::faultHandler(regs*)+0x3fa>
c00266a5:	40                   	inc    eax
c00266a6:	0f b7 c0             	movzx  eax,ax
c00266a9:	e9 8b 00 00 00       	jmp    c0026739 <Vm::faultHandler(regs*)+0x48d>
c00266ae:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00266b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00266b4:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00266b9:	74 29                	je     c00266e4 <Vm::faultHandler(regs*)+0x438>
c00266bb:	3d ff ff 00 00       	cmp    eax,0xffff
c00266c0:	76 22                	jbe    c00266e4 <Vm::faultHandler(regs*)+0x438>
c00266c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00266c6:	50                   	push   eax
c00266c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00266cb:	50                   	push   eax
c00266cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00266d0:	50                   	push   eax
c00266d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00266d5:	50                   	push   eax
c00266d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266da:	50                   	push   eax
c00266db:	6a 6d                	push   0x6d
c00266dd:	6a 6d                	push   0x6d
c00266df:	e9 4d 01 00 00       	jmp    c0026831 <Vm::faultHandler(regs*)+0x585>
c00266e4:	0f b7 c8             	movzx  ecx,ax
c00266e7:	0f b7 f6             	movzx  esi,si
c00266ea:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00266ed:	83 e5 01             	and    ebp,0x1
c00266f0:	74 20                	je     c0026712 <Vm::faultHandler(regs*)+0x466>
c00266f2:	ed                   	in     eax,dx
c00266f3:	55                   	push   ebp
c00266f4:	50                   	push   eax
c00266f5:	51                   	push   ecx
c00266f6:	56                   	push   esi
c00266f7:	e8 9b fb ff ff       	call   c0026297 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00266fc:	83 c4 10             	add    esp,0x10
c00266ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026702:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0026706:	74 05                	je     c002670d <Vm::faultHandler(regs*)+0x461>
c0026708:	83 e8 04             	sub    eax,0x4
c002670b:	eb 27                	jmp    c0026734 <Vm::faultHandler(regs*)+0x488>
c002670d:	83 c0 04             	add    eax,0x4
c0026710:	eb 22                	jmp    c0026734 <Vm::faultHandler(regs*)+0x488>
c0026712:	66 ed                	in     ax,dx
c0026714:	0f b7 c0             	movzx  eax,ax
c0026717:	57                   	push   edi
c0026718:	50                   	push   eax
c0026719:	51                   	push   ecx
c002671a:	56                   	push   esi
c002671b:	e8 61 fb ff ff       	call   c0026281 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026720:	83 c4 10             	add    esp,0x10
c0026723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026726:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002672a:	74 05                	je     c0026731 <Vm::faultHandler(regs*)+0x485>
c002672c:	83 e8 02             	sub    eax,0x2
c002672f:	eb 03                	jmp    c0026734 <Vm::faultHandler(regs*)+0x488>
c0026731:	83 c0 02             	add    eax,0x2
c0026734:	25 ff ff 00 00       	and    eax,0xffff
c0026739:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c002673c:	e9 20 02 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c0026741:	8d 46 ff             	lea    eax,[esi-0x1]
c0026744:	0f b6 f0             	movzx  esi,al
c0026747:	83 fe 05             	cmp    esi,0x5
c002674a:	77 23                	ja     c002676f <Vm::faultHandler(regs*)+0x4c3>
c002674c:	ff 24 b5 28 33 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcccd8]
c0026753:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0026758:	eb 15                	jmp    c002676f <Vm::faultHandler(regs*)+0x4c3>
c002675a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c002675e:	eb 0f                	jmp    c002676f <Vm::faultHandler(regs*)+0x4c3>
c0026760:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026764:	eb 09                	jmp    c002676f <Vm::faultHandler(regs*)+0x4c3>
c0026766:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c002676a:	eb 03                	jmp    c002676f <Vm::faultHandler(regs*)+0x4c3>
c002676c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c002676f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026772:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026777:	74 29                	je     c00267a2 <Vm::faultHandler(regs*)+0x4f6>
c0026779:	3d ff ff 00 00       	cmp    eax,0xffff
c002677e:	76 22                	jbe    c00267a2 <Vm::faultHandler(regs*)+0x4f6>
c0026780:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026784:	50                   	push   eax
c0026785:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026789:	50                   	push   eax
c002678a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002678e:	50                   	push   eax
c002678f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026793:	50                   	push   eax
c0026794:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026798:	50                   	push   eax
c0026799:	6a 6e                	push   0x6e
c002679b:	6a 6e                	push   0x6e
c002679d:	e9 8f 00 00 00       	jmp    c0026831 <Vm::faultHandler(regs*)+0x585>
c00267a2:	0f b7 c0             	movzx  eax,ax
c00267a5:	52                   	push   edx
c00267a6:	52                   	push   edx
c00267a7:	50                   	push   eax
c00267a8:	57                   	push   edi
c00267a9:	e8 8a fa ff ff       	call   c0026238 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00267ae:	59                   	pop    ecx
c00267af:	0f b6 c0             	movzx  eax,al
c00267b2:	5e                   	pop    esi
c00267b3:	50                   	push   eax
c00267b4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00267b8:	50                   	push   eax
c00267b9:	e8 fe f5 ff ff       	call   c0025dbc <Vm::outbv(unsigned short, unsigned char)>
c00267be:	83 c4 10             	add    esp,0x10
c00267c1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00267c4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00267c8:	74 03                	je     c00267cd <Vm::faultHandler(regs*)+0x521>
c00267ca:	48                   	dec    eax
c00267cb:	eb 01                	jmp    c00267ce <Vm::faultHandler(regs*)+0x522>
c00267cd:	40                   	inc    eax
c00267ce:	0f b7 c0             	movzx  eax,ax
c00267d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00267d4:	e9 88 01 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c00267d9:	8d 46 ff             	lea    eax,[esi-0x1]
c00267dc:	0f b6 f0             	movzx  esi,al
c00267df:	83 fe 05             	cmp    esi,0x5
c00267e2:	77 1e                	ja     c0026802 <Vm::faultHandler(regs*)+0x556>
c00267e4:	ff 24 b5 40 33 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcccc0]
c00267eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00267ef:	eb 11                	jmp    c0026802 <Vm::faultHandler(regs*)+0x556>
c00267f1:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00267f4:	eb 0c                	jmp    c0026802 <Vm::faultHandler(regs*)+0x556>
c00267f6:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00267f9:	eb 07                	jmp    c0026802 <Vm::faultHandler(regs*)+0x556>
c00267fb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00267fe:	eb 02                	jmp    c0026802 <Vm::faultHandler(regs*)+0x556>
c0026800:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026802:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026805:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002680a:	74 37                	je     c0026843 <Vm::faultHandler(regs*)+0x597>
c002680c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026812:	76 2f                	jbe    c0026843 <Vm::faultHandler(regs*)+0x597>
c0026814:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026818:	50                   	push   eax
c0026819:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002681d:	50                   	push   eax
c002681e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026822:	50                   	push   eax
c0026823:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026827:	50                   	push   eax
c0026828:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002682c:	50                   	push   eax
c002682d:	6a 6f                	push   0x6f
c002682f:	6a 6f                	push   0x6f
c0026831:	68 cc 32 03 c0       	push   0xc00332cc
c0026836:	e8 06 2c ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002683b:	83 c4 20             	add    esp,0x20
c002683e:	e9 83 01 00 00       	jmp    c00269c6 <Vm::faultHandler(regs*)+0x71a>
c0026843:	0f b7 d7             	movzx  edx,di
c0026846:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0026849:	0f b7 c6             	movzx  eax,si
c002684c:	81 e1 00 04 00 00    	and    ecx,0x400
c0026852:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026855:	83 e5 01             	and    ebp,0x1
c0026858:	74 1d                	je     c0026877 <Vm::faultHandler(regs*)+0x5cb>
c002685a:	55                   	push   ebp
c002685b:	55                   	push   ebp
c002685c:	50                   	push   eax
c002685d:	52                   	push   edx
c002685e:	e8 f8 f9 ff ff       	call   c002625b <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026863:	83 c4 10             	add    esp,0x10
c0026866:	89 fa                	mov    edx,edi
c0026868:	ef                   	out    dx,eax
c0026869:	85 c9                	test   ecx,ecx
c002686b:	74 05                	je     c0026872 <Vm::faultHandler(regs*)+0x5c6>
c002686d:	83 ee 04             	sub    esi,0x4
c0026870:	eb 21                	jmp    c0026893 <Vm::faultHandler(regs*)+0x5e7>
c0026872:	83 c6 04             	add    esi,0x4
c0026875:	eb 1c                	jmp    c0026893 <Vm::faultHandler(regs*)+0x5e7>
c0026877:	55                   	push   ebp
c0026878:	55                   	push   ebp
c0026879:	50                   	push   eax
c002687a:	52                   	push   edx
c002687b:	e8 c9 f9 ff ff       	call   c0026249 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026880:	83 c4 10             	add    esp,0x10
c0026883:	89 fa                	mov    edx,edi
c0026885:	66 ef                	out    dx,ax
c0026887:	85 c9                	test   ecx,ecx
c0026889:	74 05                	je     c0026890 <Vm::faultHandler(regs*)+0x5e4>
c002688b:	83 ee 02             	sub    esi,0x2
c002688e:	eb 03                	jmp    c0026893 <Vm::faultHandler(regs*)+0x5e7>
c0026890:	83 c6 02             	add    esi,0x2
c0026893:	81 e6 ff ff 00 00    	and    esi,0xffff
c0026899:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c002689c:	e9 c0 00 00 00       	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c00268a1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00268a8:	83 ec 0c             	sub    esp,0xc
c00268ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00268af:	50                   	push   eax
c00268b0:	e8 f4 f4 ff ff       	call   c0025da9 <Vm::inbv(unsigned short)>
c00268b5:	0f b6 c0             	movzx  eax,al
c00268b8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00268bb:	eb 3a                	jmp    c00268f7 <Vm::faultHandler(regs*)+0x64b>
c00268bd:	83 e5 01             	and    ebp,0x1
c00268c0:	74 07                	je     c00268c9 <Vm::faultHandler(regs*)+0x61d>
c00268c2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00268c6:	ed                   	in     eax,dx
c00268c7:	eb 14                	jmp    c00268dd <Vm::faultHandler(regs*)+0x631>
c00268c9:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00268cc:	66 31 f6             	xor    si,si
c00268cf:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00268d2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00268d6:	66 ed                	in     ax,dx
c00268d8:	0f b7 c0             	movzx  eax,ax
c00268db:	09 f0                	or     eax,esi
c00268dd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00268e0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00268e4:	eb 7e                	jmp    c0026964 <Vm::faultHandler(regs*)+0x6b8>
c00268e6:	52                   	push   edx
c00268e7:	52                   	push   edx
c00268e8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00268ec:	50                   	push   eax
c00268ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00268f1:	50                   	push   eax
c00268f2:	e8 c5 f4 ff ff       	call   c0025dbc <Vm::outbv(unsigned short, unsigned char)>
c00268f7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00268fb:	eb 4f                	jmp    c002694c <Vm::faultHandler(regs*)+0x6a0>
c00268fd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026900:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026904:	83 e5 01             	and    ebp,0x1
c0026907:	74 03                	je     c002690c <Vm::faultHandler(regs*)+0x660>
c0026909:	ef                   	out    dx,eax
c002690a:	eb d4                	jmp    c00268e0 <Vm::faultHandler(regs*)+0x634>
c002690c:	66 ef                	out    dx,ax
c002690e:	eb d0                	jmp    c00268e0 <Vm::faultHandler(regs*)+0x634>
c0026910:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026917:	83 ec 0c             	sub    esp,0xc
c002691a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002691e:	50                   	push   eax
c002691f:	e8 85 f4 ff ff       	call   c0025da9 <Vm::inbv(unsigned short)>
c0026924:	0f b6 c0             	movzx  eax,al
c0026927:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002692a:	eb 1d                	jmp    c0026949 <Vm::faultHandler(regs*)+0x69d>
c002692c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002692f:	83 e5 01             	and    ebp,0x1
c0026932:	74 03                	je     c0026937 <Vm::faultHandler(regs*)+0x68b>
c0026934:	ed                   	in     eax,dx
c0026935:	eb 0d                	jmp    c0026944 <Vm::faultHandler(regs*)+0x698>
c0026937:	66 ed                	in     ax,dx
c0026939:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c002693c:	0f b7 c0             	movzx  eax,ax
c002693f:	66 31 d2             	xor    dx,dx
c0026942:	09 d0                	or     eax,edx
c0026944:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026947:	eb 18                	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c0026949:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002694c:	83 c4 10             	add    esp,0x10
c002694f:	eb 13                	jmp    c0026964 <Vm::faultHandler(regs*)+0x6b8>
c0026951:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026954:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026957:	83 e5 01             	and    ebp,0x1
c002695a:	74 03                	je     c002695f <Vm::faultHandler(regs*)+0x6b3>
c002695c:	ef                   	out    dx,eax
c002695d:	eb 02                	jmp    c0026961 <Vm::faultHandler(regs*)+0x6b5>
c002695f:	66 ef                	out    dx,ax
c0026961:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026964:	b0 01                	mov    al,0x1
c0026966:	eb 60                	jmp    c00269c8 <Vm::faultHandler(regs*)+0x71c>
c0026968:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002696c:	50                   	push   eax
c002696d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026971:	50                   	push   eax
c0026972:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026976:	50                   	push   eax
c0026977:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002697b:	50                   	push   eax
c002697c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026980:	50                   	push   eax
c0026981:	52                   	push   edx
c0026982:	52                   	push   edx
c0026983:	68 f9 32 03 c0       	push   0xc00332f9
c0026988:	e8 b4 2a ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002698d:	83 c4 20             	add    esp,0x20
c0026990:	83 ec 0c             	sub    esp,0xc
c0026993:	6a 60                	push   0x60
c0026995:	e8 0f f4 ff ff       	call   c0025da9 <Vm::inbv(unsigned short)>
c002699a:	83 c4 10             	add    esp,0x10
c002699d:	0f b6 d0             	movzx  edx,al
c00269a0:	83 fa 1c             	cmp    edx,0x1c
c00269a3:	74 05                	je     c00269aa <Vm::faultHandler(regs*)+0x6fe>
c00269a5:	83 fa 5a             	cmp    edx,0x5a
c00269a8:	75 e6                	jne    c0026990 <Vm::faultHandler(regs*)+0x6e4>
c00269aa:	0f b6 c0             	movzx  eax,al
c00269ad:	83 f8 1c             	cmp    eax,0x1c
c00269b0:	74 05                	je     c00269b7 <Vm::faultHandler(regs*)+0x70b>
c00269b2:	83 f8 5a             	cmp    eax,0x5a
c00269b5:	75 0f                	jne    c00269c6 <Vm::faultHandler(regs*)+0x71a>
c00269b7:	83 ec 0c             	sub    esp,0xc
c00269ba:	6a 60                	push   0x60
c00269bc:	e8 e8 f3 ff ff       	call   c0025da9 <Vm::inbv(unsigned short)>
c00269c1:	83 c4 10             	add    esp,0x10
c00269c4:	eb e4                	jmp    c00269aa <Vm::faultHandler(regs*)+0x6fe>
c00269c6:	31 c0                	xor    eax,eax
c00269c8:	83 c4 2c             	add    esp,0x2c
c00269cb:	5b                   	pop    ebx
c00269cc:	5e                   	pop    esi
c00269cd:	5f                   	pop    edi
c00269ce:	5d                   	pop    ebp
c00269cf:	c3                   	ret    

c00269d0 <noCopro(unsigned long)>:
c00269d0:	c3                   	ret    

c00269d1 <nmiHandler(regs*, void*)>:
c00269d1:	83 ec 0c             	sub    esp,0xc
c00269d4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00269d9:	83 ec 0c             	sub    esp,0xc
c00269dc:	50                   	push   eax
c00269dd:	e8 74 f3 fe ff       	call   c0015d56 <Computer::handleNMI()>
c00269e2:	83 c4 10             	add    esp,0x10
c00269e5:	90                   	nop
c00269e6:	83 c4 0c             	add    esp,0xc
c00269e9:	c3                   	ret    

c00269ea <doubleFault(regs*, void*)>:
c00269ea:	55                   	push   ebp
c00269eb:	89 e5                	mov    ebp,esp
c00269ed:	83 ec 08             	sub    esp,0x8
c00269f0:	83 ec 0c             	sub    esp,0xc
c00269f3:	68 58 33 03 c0       	push   0xc0033358
c00269f8:	e8 5d 9a ff ff       	call   c002045a <KePanic(char const*)>
c00269fd:	83 c4 10             	add    esp,0x10
c0026a00:	90                   	nop
c0026a01:	c9                   	leave  
c0026a02:	c3                   	ret    

c0026a03 <displayDebugInfo(regs*)>:
c0026a03:	83 ec 1c             	sub    esp,0x1c
c0026a06:	0f 20 c0             	mov    eax,cr0
c0026a09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026a0d:	0f 20 d0             	mov    eax,cr2
c0026a10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a14:	0f 20 d8             	mov    eax,cr3
c0026a17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026a1b:	0f 20 e0             	mov    eax,cr4
c0026a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0026a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a25:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026a28:	83 ec 08             	sub    esp,0x8
c0026a2b:	50                   	push   eax
c0026a2c:	68 74 33 03 c0       	push   0xc0033374
c0026a31:	e8 0b 2a ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026a36:	83 c4 10             	add    esp,0x10
c0026a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a3d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026a40:	83 ec 08             	sub    esp,0x8
c0026a43:	50                   	push   eax
c0026a44:	68 65 33 03 c0       	push   0xc0033365
c0026a49:	e8 f3 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026a4e:	83 c4 10             	add    esp,0x10
c0026a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a55:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026a58:	83 ec 08             	sub    esp,0x8
c0026a5b:	50                   	push   eax
c0026a5c:	68 70 33 03 c0       	push   0xc0033370
c0026a61:	e8 db 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026a66:	83 c4 10             	add    esp,0x10
c0026a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026a70:	83 ec 08             	sub    esp,0x8
c0026a73:	50                   	push   eax
c0026a74:	68 7f 33 03 c0       	push   0xc003337f
c0026a79:	e8 c3 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026a7e:	83 c4 10             	add    esp,0x10
c0026a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026a85:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0026a88:	83 ec 08             	sub    esp,0x8
c0026a8b:	50                   	push   eax
c0026a8c:	68 8a 33 03 c0       	push   0xc003338a
c0026a91:	e8 ab 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026a96:	83 c4 10             	add    esp,0x10
c0026a99:	83 ec 08             	sub    esp,0x8
c0026a9c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026aa0:	68 95 33 03 c0       	push   0xc0033395
c0026aa5:	e8 97 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026aaa:	83 c4 10             	add    esp,0x10
c0026aad:	83 ec 08             	sub    esp,0x8
c0026ab0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026ab4:	68 a0 33 03 c0       	push   0xc00333a0
c0026ab9:	e8 83 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026abe:	83 c4 10             	add    esp,0x10
c0026ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ac5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026ac8:	c1 e0 05             	shl    eax,0x5
c0026acb:	8d 90 40 47 03 c0    	lea    edx,[eax-0x3ffcb8c0]
c0026ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ad5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026ad8:	83 ec 04             	sub    esp,0x4
c0026adb:	52                   	push   edx
c0026adc:	50                   	push   eax
c0026add:	68 ab 33 03 c0       	push   0xc00333ab
c0026ae2:	e8 5a 29 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026ae7:	83 c4 10             	add    esp,0x10
c0026aea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026aef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026af5:	83 ec 0c             	sub    esp,0xc
c0026af8:	50                   	push   eax
c0026af9:	e8 55 07 ff ff       	call   c0017253 <setActiveTerminal(VgaText*)>
c0026afe:	83 c4 10             	add    esp,0x10
c0026b01:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b0c:	83 ec 08             	sub    esp,0x8
c0026b0f:	68 ba 33 03 c0       	push   0xc00333ba
c0026b14:	50                   	push   eax
c0026b15:	e8 86 0a ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026b1a:	83 c4 10             	add    esp,0x10
c0026b1d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b22:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026b2c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026b2f:	83 ec 08             	sub    esp,0x8
c0026b32:	52                   	push   edx
c0026b33:	50                   	push   eax
c0026b34:	e8 21 0a ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026b39:	83 c4 10             	add    esp,0x10
c0026b3c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b47:	83 ec 08             	sub    esp,0x8
c0026b4a:	68 c8 33 03 c0       	push   0xc00333c8
c0026b4f:	50                   	push   eax
c0026b50:	e8 4b 0a ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026b55:	83 c4 10             	add    esp,0x10
c0026b58:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b5d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b63:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026b68:	8b 12                	mov    edx,DWORD PTR [edx]
c0026b6a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026b6d:	83 c2 0c             	add    edx,0xc
c0026b70:	83 ec 08             	sub    esp,0x8
c0026b73:	52                   	push   edx
c0026b74:	50                   	push   eax
c0026b75:	e8 26 0a ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026b7a:	83 c4 10             	add    esp,0x10
c0026b7d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b88:	83 ec 08             	sub    esp,0x8
c0026b8b:	68 d1 33 03 c0       	push   0xc00333d1
c0026b90:	50                   	push   eax
c0026b91:	e8 0a 0a ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026b96:	83 c4 10             	add    esp,0x10
c0026b99:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ba4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ba8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026bab:	83 ec 08             	sub    esp,0x8
c0026bae:	52                   	push   edx
c0026baf:	50                   	push   eax
c0026bb0:	e8 a5 09 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026bb5:	83 c4 10             	add    esp,0x10
c0026bb8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bbd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bc3:	83 ec 08             	sub    esp,0x8
c0026bc6:	68 d9 33 03 c0       	push   0xc00333d9
c0026bcb:	50                   	push   eax
c0026bcc:	e8 cf 09 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026bd1:	83 c4 10             	add    esp,0x10
c0026bd4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bd9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bdf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026be3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026be6:	83 ec 08             	sub    esp,0x8
c0026be9:	52                   	push   edx
c0026bea:	50                   	push   eax
c0026beb:	e8 6a 09 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026bf0:	83 c4 10             	add    esp,0x10
c0026bf3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bf8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bfe:	83 ec 08             	sub    esp,0x8
c0026c01:	68 e1 33 03 c0       	push   0xc00333e1
c0026c06:	50                   	push   eax
c0026c07:	e8 94 09 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026c0c:	83 c4 10             	add    esp,0x10
c0026c0f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c1e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026c21:	83 ec 08             	sub    esp,0x8
c0026c24:	52                   	push   edx
c0026c25:	50                   	push   eax
c0026c26:	e8 2f 09 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026c2b:	83 c4 10             	add    esp,0x10
c0026c2e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c39:	83 ec 08             	sub    esp,0x8
c0026c3c:	68 e9 33 03 c0       	push   0xc00333e9
c0026c41:	50                   	push   eax
c0026c42:	e8 59 09 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026c47:	83 c4 10             	add    esp,0x10
c0026c4a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c59:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026c5c:	83 ec 08             	sub    esp,0x8
c0026c5f:	52                   	push   edx
c0026c60:	50                   	push   eax
c0026c61:	e8 f4 08 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026c66:	83 c4 10             	add    esp,0x10
c0026c69:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c74:	83 ec 08             	sub    esp,0x8
c0026c77:	68 f1 33 03 c0       	push   0xc00333f1
c0026c7c:	50                   	push   eax
c0026c7d:	e8 1e 09 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026c82:	83 c4 10             	add    esp,0x10
c0026c85:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026c8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026c94:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026c97:	83 ec 08             	sub    esp,0x8
c0026c9a:	52                   	push   edx
c0026c9b:	50                   	push   eax
c0026c9c:	e8 b9 08 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026ca1:	83 c4 10             	add    esp,0x10
c0026ca4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ca9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026caf:	83 ec 08             	sub    esp,0x8
c0026cb2:	68 f9 33 03 c0       	push   0xc00333f9
c0026cb7:	50                   	push   eax
c0026cb8:	e8 e3 08 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026cbd:	83 c4 10             	add    esp,0x10
c0026cc0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026cc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ccb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ccf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026cd2:	83 ec 08             	sub    esp,0x8
c0026cd5:	52                   	push   edx
c0026cd6:	50                   	push   eax
c0026cd7:	e8 7e 08 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026cdc:	83 c4 10             	add    esp,0x10
c0026cdf:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026cea:	83 ec 08             	sub    esp,0x8
c0026ced:	68 01 34 03 c0       	push   0xc0033401
c0026cf2:	50                   	push   eax
c0026cf3:	e8 a8 08 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026cf8:	83 c4 10             	add    esp,0x10
c0026cfb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d06:	83 ec 08             	sub    esp,0x8
c0026d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026d0d:	50                   	push   eax
c0026d0e:	e8 47 08 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026d13:	83 c4 10             	add    esp,0x10
c0026d16:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d21:	83 ec 08             	sub    esp,0x8
c0026d24:	68 0a 34 03 c0       	push   0xc003340a
c0026d29:	50                   	push   eax
c0026d2a:	e8 71 08 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026d2f:	83 c4 10             	add    esp,0x10
c0026d32:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d3d:	83 ec 08             	sub    esp,0x8
c0026d40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026d44:	50                   	push   eax
c0026d45:	e8 10 08 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026d4a:	83 c4 10             	add    esp,0x10
c0026d4d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d58:	83 ec 08             	sub    esp,0x8
c0026d5b:	68 12 34 03 c0       	push   0xc0033412
c0026d60:	50                   	push   eax
c0026d61:	e8 3a 08 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0026d66:	83 c4 10             	add    esp,0x10
c0026d69:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026d6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026d74:	83 ec 08             	sub    esp,0x8
c0026d77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026d7b:	50                   	push   eax
c0026d7c:	e8 d9 07 ff ff       	call   c001755a <VgaText::putx(unsigned int)>
c0026d81:	83 c4 10             	add    esp,0x10
c0026d84:	fa                   	cli    
c0026d85:	f4                   	hlt    
c0026d86:	eb fe                	jmp    c0026d86 <displayDebugInfo(regs*)+0x383>

c0026d88 <HalSystemIdle()>:
c0026d88:	56                   	push   esi
c0026d89:	53                   	push   ebx
c0026d8a:	83 ec 14             	sub    esp,0x14
c0026d8d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026d92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026d98:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026d9e:	83 e0 04             	and    eax,0x4
c0026da1:	0f b6 c0             	movzx  eax,al
c0026da4:	85 c0                	test   eax,eax
c0026da6:	0f 95 c0             	setne  al
c0026da9:	0f b6 c0             	movzx  eax,al
c0026dac:	85 c0                	test   eax,eax
c0026dae:	74 4c                	je     c0026dfc <HalSystemIdle()+0x74>
c0026db0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026db5:	83 ec 08             	sub    esp,0x8
c0026db8:	68 e1 00 00 00       	push   0xe1
c0026dbd:	50                   	push   eax
c0026dbe:	e8 9d ed fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c0026dc3:	83 c4 10             	add    esp,0x10
c0026dc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026dca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026dce:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026dd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026dd7:	83 e2 02             	and    edx,0x2
c0026dda:	89 d3                	mov    ebx,edx
c0026ddc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026de0:	83 e2 00             	and    edx,0x0
c0026de3:	89 d6                	mov    esi,edx
c0026de5:	56                   	push   esi
c0026de6:	53                   	push   ebx
c0026de7:	68 e1 00 00 00       	push   0xe1
c0026dec:	50                   	push   eax
c0026ded:	e8 9a ed fe ff       	call   c0015b8c <Computer::wrmsr(unsigned int, unsigned long long)>
c0026df2:	83 c4 10             	add    esp,0x10
c0026df5:	e8 9a 93 fd ff       	call   c0000194 <doTPAUSE>
c0026dfa:	eb 01                	jmp    c0026dfd <HalSystemIdle()+0x75>
c0026dfc:	f4                   	hlt    
c0026dfd:	90                   	nop
c0026dfe:	83 c4 14             	add    esp,0x14
c0026e01:	5b                   	pop    ebx
c0026e02:	5e                   	pop    esi
c0026e03:	c3                   	ret    

c0026e04 <displayProgramFault(char const*)>:
c0026e04:	83 ec 0c             	sub    esp,0xc
c0026e07:	83 ec 0c             	sub    esp,0xc
c0026e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e0e:	e8 2e 26 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026e13:	83 c4 10             	add    esp,0x10
c0026e16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026e20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e26:	85 c0                	test   eax,eax
c0026e28:	74 21                	je     c0026e4b <displayProgramFault(char const*)+0x47>
c0026e2a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026e2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026e34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026e3a:	6a 04                	push   0x4
c0026e3c:	6a 0f                	push   0xf
c0026e3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026e42:	50                   	push   eax
c0026e43:	e8 ca 07 ff ff       	call   c0017612 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026e48:	83 c4 10             	add    esp,0x10
c0026e4b:	90                   	nop
c0026e4c:	83 c4 0c             	add    esp,0xc
c0026e4f:	c3                   	ret    

c0026e50 <gpFault(regs*, void*)>:
c0026e50:	83 ec 1c             	sub    esp,0x1c
c0026e53:	c7 05 74 02 04 c0 ac 62 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc00262ac
c0026e5d:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026e62:	85 c0                	test   eax,eax
c0026e64:	74 1e                	je     c0026e84 <gpFault(regs*, void*)+0x34>
c0026e66:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026e6b:	83 ec 0c             	sub    esp,0xc
c0026e6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026e72:	ff d0                	call   eax
c0026e74:	83 c4 10             	add    esp,0x10
c0026e77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026e7b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026e80:	85 c0                	test   eax,eax
c0026e82:	75 2e                	jne    c0026eb2 <gpFault(regs*, void*)+0x62>
c0026e84:	83 ec 0c             	sub    esp,0xc
c0026e87:	68 1a 34 03 c0       	push   0xc003341a
c0026e8c:	e8 73 ff ff ff       	call   c0026e04 <displayProgramFault(char const*)>
c0026e91:	83 c4 10             	add    esp,0x10
c0026e94:	83 ec 0c             	sub    esp,0xc
c0026e97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026e9b:	e8 63 fb ff ff       	call   c0026a03 <displayDebugInfo(regs*)>
c0026ea0:	83 c4 10             	add    esp,0x10
c0026ea3:	83 ec 0c             	sub    esp,0xc
c0026ea6:	6a 00                	push   0x0
c0026ea8:	e8 2f ee ff ff       	call   c0025cdc <Thr::terminateFromIRQ(int)>
c0026ead:	83 c4 10             	add    esp,0x10
c0026eb0:	eb 01                	jmp    c0026eb3 <gpFault(regs*, void*)+0x63>
c0026eb2:	90                   	nop
c0026eb3:	83 c4 1c             	add    esp,0x1c
c0026eb6:	c3                   	ret    

c0026eb7 <pgFault(regs*, void*)>:
c0026eb7:	83 ec 1c             	sub    esp,0x1c
c0026eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026ebe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026ec1:	0f 20 d0             	mov    eax,cr2
c0026ec4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ec8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026ecc:	83 ec 04             	sub    esp,0x4
c0026ecf:	52                   	push   edx
c0026ed0:	50                   	push   eax
c0026ed1:	68 f8 34 03 c0       	push   0xc00334f8
c0026ed6:	e8 66 25 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026edb:	83 c4 10             	add    esp,0x10
c0026ede:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026ee3:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026ee8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026eee:	0f 20 d2             	mov    edx,cr2
c0026ef1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026ef5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026ef9:	83 ec 08             	sub    esp,0x8
c0026efc:	52                   	push   edx
c0026efd:	50                   	push   eax
c0026efe:	e8 89 1f ff ff       	call   c0018e8c <VAS::tryLoadBackOffDisk(unsigned long)>
c0026f03:	83 c4 10             	add    esp,0x10
c0026f06:	0f b6 c0             	movzx  eax,al
c0026f09:	85 c0                	test   eax,eax
c0026f0b:	75 2e                	jne    c0026f3b <pgFault(regs*, void*)+0x84>
c0026f0d:	83 ec 0c             	sub    esp,0xc
c0026f10:	68 33 34 03 c0       	push   0xc0033433
c0026f15:	e8 ea fe ff ff       	call   c0026e04 <displayProgramFault(char const*)>
c0026f1a:	83 c4 10             	add    esp,0x10
c0026f1d:	83 ec 0c             	sub    esp,0xc
c0026f20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026f24:	e8 da fa ff ff       	call   c0026a03 <displayDebugInfo(regs*)>
c0026f29:	83 c4 10             	add    esp,0x10
c0026f2c:	83 ec 0c             	sub    esp,0xc
c0026f2f:	6a 00                	push   0x0
c0026f31:	e8 a6 ed ff ff       	call   c0025cdc <Thr::terminateFromIRQ(int)>
c0026f36:	83 c4 10             	add    esp,0x10
c0026f39:	eb 01                	jmp    c0026f3c <pgFault(regs*, void*)+0x85>
c0026f3b:	90                   	nop
c0026f3c:	83 c4 1c             	add    esp,0x1c
c0026f3f:	c3                   	ret    

c0026f40 <otherISRHandler(regs*, void*)>:
c0026f40:	83 ec 0c             	sub    esp,0xc
c0026f43:	83 ec 0c             	sub    esp,0xc
c0026f46:	68 20 35 03 c0       	push   0xc0033520
c0026f4b:	e8 b4 fe ff ff       	call   c0026e04 <displayProgramFault(char const*)>
c0026f50:	83 c4 10             	add    esp,0x10
c0026f53:	83 ec 0c             	sub    esp,0xc
c0026f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026f5a:	e8 a4 fa ff ff       	call   c0026a03 <displayDebugInfo(regs*)>
c0026f5f:	83 c4 10             	add    esp,0x10
c0026f62:	83 ec 0c             	sub    esp,0xc
c0026f65:	6a 00                	push   0x0
c0026f67:	e8 70 ed ff ff       	call   c0025cdc <Thr::terminateFromIRQ(int)>
c0026f6c:	83 c4 10             	add    esp,0x10
c0026f6f:	90                   	nop
c0026f70:	83 c4 0c             	add    esp,0xc
c0026f73:	c3                   	ret    

c0026f74 <opcodeFault(regs*, void*)>:
c0026f74:	55                   	push   ebp
c0026f75:	89 e5                	mov    ebp,esp
c0026f77:	83 ec 08             	sub    esp,0x8
c0026f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026f7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026f80:	83 ec 08             	sub    esp,0x8
c0026f83:	50                   	push   eax
c0026f84:	68 3e 34 03 c0       	push   0xc003343e
c0026f89:	e8 b3 24 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026f8e:	83 c4 10             	add    esp,0x10
c0026f91:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026f96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026f9c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026fa2:	0f b6 c0             	movzx  eax,al
c0026fa5:	85 c0                	test   eax,eax
c0026fa7:	74 21                	je     c0026fca <opcodeFault(regs*, void*)+0x56>
c0026fa9:	83 ec 0c             	sub    esp,0xc
c0026fac:	68 48 35 03 c0       	push   0xc0033548
c0026fb1:	e8 8b 24 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0026fb6:	83 c4 10             	add    esp,0x10
c0026fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026fbf:	8d 50 19             	lea    edx,[eax+0x19]
c0026fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026fc8:	eb 2b                	jmp    c0026ff5 <opcodeFault(regs*, void*)+0x81>
c0026fca:	83 ec 0c             	sub    esp,0xc
c0026fcd:	68 4c 34 03 c0       	push   0xc003344c
c0026fd2:	e8 2d fe ff ff       	call   c0026e04 <displayProgramFault(char const*)>
c0026fd7:	83 c4 10             	add    esp,0x10
c0026fda:	83 ec 0c             	sub    esp,0xc
c0026fdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fe0:	e8 1e fa ff ff       	call   c0026a03 <displayDebugInfo(regs*)>
c0026fe5:	83 c4 10             	add    esp,0x10
c0026fe8:	83 ec 0c             	sub    esp,0xc
c0026feb:	6a 00                	push   0x0
c0026fed:	e8 ea ec ff ff       	call   c0025cdc <Thr::terminateFromIRQ(int)>
c0026ff2:	83 c4 10             	add    esp,0x10
c0026ff5:	c9                   	leave  
c0026ff6:	c3                   	ret    

c0026ff7 <i386SaveCoprocessor(void*)>:
c0026ff7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026ffb:	83 c0 3f             	add    eax,0x3f
c0026ffe:	83 e0 c0             	and    eax,0xffffffc0
c0027001:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027005:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c002700b <i386LoadCoprocessor(void*)>:
c002700b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002700f:	83 c0 3f             	add    eax,0x3f
c0027012:	83 e0 c0             	and    eax,0xffffffc0
c0027015:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027019:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c002701f <x87EmulHandler(regs*, void*)>:
c002701f:	53                   	push   ebx
c0027020:	83 ec 08             	sub    esp,0x8
c0027023:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027028:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c002702c:	74 10                	je     c002703e <x87EmulHandler(regs*, void*)+0x1f>
c002702e:	83 ec 0c             	sub    esp,0xc
c0027031:	68 59 34 03 c0       	push   0xc0033459
c0027036:	e8 1f 94 ff ff       	call   c002045a <KePanic(char const*)>
c002703b:	83 c4 10             	add    esp,0x10
c002703e:	0f 20 c0             	mov    eax,cr0
c0027041:	a8 08                	test   al,0x8
c0027043:	74 59                	je     c002709e <x87EmulHandler(regs*, void*)+0x7f>
c0027045:	0f 06                	clts   
c0027047:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c002704c:	85 c0                	test   eax,eax
c002704e:	74 0e                	je     c002705e <x87EmulHandler(regs*, void*)+0x3f>
c0027050:	83 ec 0c             	sub    esp,0xc
c0027053:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027056:	e8 9c ff ff ff       	call   c0026ff7 <i386SaveCoprocessor(void*)>
c002705b:	83 c4 10             	add    esp,0x10
c002705e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0027064:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0027068:	75 12                	jne    c002707c <x87EmulHandler(regs*, void*)+0x5d>
c002706a:	83 ec 0c             	sub    esp,0xc
c002706d:	68 40 02 00 00       	push   0x240
c0027072:	e8 3a f5 fe ff       	call   c00165b1 <malloc>
c0027077:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c002707a:	eb 10                	jmp    c002708c <x87EmulHandler(regs*, void*)+0x6d>
c002707c:	83 ec 0c             	sub    esp,0xc
c002707f:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0027084:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0027087:	e8 7f ff ff ff       	call   c002700b <i386LoadCoprocessor(void*)>
c002708c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0027091:	83 c4 10             	add    esp,0x10
c0027094:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0027099:	83 c4 08             	add    esp,0x8
c002709c:	5b                   	pop    ebx
c002709d:	c3                   	ret    
c002709e:	83 ec 0c             	sub    esp,0xc
c00270a1:	68 6d 34 03 c0       	push   0xc003346d
c00270a6:	e8 96 23 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00270ab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00270b3:	83 c4 18             	add    esp,0x18
c00270b6:	5b                   	pop    ebx
c00270b7:	e9 20 ec ff ff       	jmp    c0025cdc <Thr::terminateFromIRQ(int)>

c00270bc <HalInitialiseCoprocessor()>:
c00270bc:	83 ec 10             	sub    esp,0x10
c00270bf:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c00270c9:	6a 00                	push   0x0
c00270cb:	68 1f 70 02 c0       	push   0xc002701f
c00270d0:	6a 07                	push   0x7
c00270d2:	e8 37 49 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270d7:	e8 a4 70 00 00       	call   c002e180 <avxDetect>
c00270dc:	83 c4 10             	add    esp,0x10
c00270df:	85 c0                	test   eax,eax
c00270e1:	74 1c                	je     c00270ff <HalInitialiseCoprocessor()+0x43>
c00270e3:	c7 05 70 02 04 c0 aa e1 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e1aa
c00270ed:	c7 05 6c 02 04 c0 bb e1 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e1bb
c00270f7:	83 c4 0c             	add    esp,0xc
c00270fa:	e9 cd 70 00 00       	jmp    c002e1cc <avxInit>
c00270ff:	e8 ec 73 00 00       	call   c002e4f0 <sseDetect>
c0027104:	85 c0                	test   eax,eax
c0027106:	74 1c                	je     c0027124 <HalInitialiseCoprocessor()+0x68>
c0027108:	c7 05 70 02 04 c0 08 e5 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e508
c0027112:	c7 05 6c 02 04 c0 10 e5 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e510
c002711c:	83 c4 0c             	add    esp,0xc
c002711f:	e9 f4 73 00 00       	jmp    c002e518 <sseInit>
c0027124:	e8 0d 74 00 00       	call   c002e536 <x87Detect>
c0027129:	85 c0                	test   eax,eax
c002712b:	74 1c                	je     c0027149 <HalInitialiseCoprocessor()+0x8d>
c002712d:	c7 05 70 02 04 c0 51 e5 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e551
c0027137:	c7 05 6c 02 04 c0 58 e5 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e558
c0027141:	83 c4 0c             	add    esp,0xc
c0027144:	e9 16 74 00 00       	jmp    c002e55f <x87Init>
c0027149:	c7 05 70 02 04 c0 d0 69 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00269d0
c0027153:	c7 05 6c 02 04 c0 d0 69 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00269d0
c002715d:	0f 20 c0             	mov    eax,cr0
c0027160:	83 c8 04             	or     eax,0x4
c0027163:	0f 22 c0             	mov    cr0,eax
c0027166:	83 c4 0c             	add    esp,0xc
c0027169:	c3                   	ret    

c002716a <HalPanic(char const*)>:
c002716a:	53                   	push   ebx
c002716b:	83 ec 10             	sub    esp,0x10
c002716e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0027172:	fa                   	cli    
c0027173:	53                   	push   ebx
c0027174:	68 83 34 03 c0       	push   0xc0033483
c0027179:	e8 c3 22 ff ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002717e:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0027183:	83 c4 10             	add    esp,0x10
c0027186:	85 c0                	test   eax,eax
c0027188:	74 09                	je     c0027193 <HalPanic(char const*)+0x29>
c002718a:	83 ec 0c             	sub    esp,0xc
c002718d:	53                   	push   ebx
c002718e:	ff d0                	call   eax
c0027190:	83 c4 10             	add    esp,0x10
c0027193:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0027198:	85 c0                	test   eax,eax
c002719a:	0f 84 dc 00 00 00    	je     c002727c <HalPanic(char const*)+0x112>
c00271a0:	52                   	push   edx
c00271a1:	6a 01                	push   0x1
c00271a3:	6a 0f                	push   0xf
c00271a5:	50                   	push   eax
c00271a6:	e8 03 ff fe ff       	call   c00170ae <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00271ab:	59                   	pop    ecx
c00271ac:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00271b2:	e8 e7 00 ff ff       	call   c001729e <VgaText::clearScreen()>
c00271b7:	58                   	pop    eax
c00271b8:	5a                   	pop    edx
c00271b9:	68 54 15 03 c0       	push   0xc0031554
c00271be:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00271c4:	e8 1d ff fe ff       	call   c00170e6 <VgaText::setTitle(char*)>
c00271c9:	83 c4 0c             	add    esp,0xc
c00271cc:	6a 01                	push   0x1
c00271ce:	6a 0f                	push   0xf
c00271d0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00271d6:	e8 d3 fe fe ff       	call   c00170ae <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00271db:	59                   	pop    ecx
c00271dc:	58                   	pop    eax
c00271dd:	68 9c 34 03 c0       	push   0xc003349c
c00271e2:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00271e8:	e8 b3 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c00271ed:	83 c4 0c             	add    esp,0xc
c00271f0:	6a 0f                	push   0xf
c00271f2:	6a 01                	push   0x1
c00271f4:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00271fa:	e8 af fe fe ff       	call   c00170ae <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00271ff:	58                   	pop    eax
c0027200:	5a                   	pop    edx
c0027201:	68 a5 34 03 c0       	push   0xc00334a5
c0027206:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002720c:	e8 8f 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0027211:	83 c4 0c             	add    esp,0xc
c0027214:	6a 01                	push   0x1
c0027216:	6a 0f                	push   0xf
c0027218:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002721e:	e8 8b fe fe ff       	call   c00170ae <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027223:	59                   	pop    ecx
c0027224:	58                   	pop    eax
c0027225:	68 e9 34 03 c0       	push   0xc00334e9
c002722a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027230:	e8 6b 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0027235:	58                   	pop    eax
c0027236:	5a                   	pop    edx
c0027237:	68 b2 34 03 c0       	push   0xc00334b2
c002723c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027242:	e8 59 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0027247:	59                   	pop    ecx
c0027248:	58                   	pop    eax
c0027249:	68 ec 34 03 c0       	push   0xc00334ec
c002724e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027254:	e8 47 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0027259:	58                   	pop    eax
c002725a:	5a                   	pop    edx
c002725b:	53                   	push   ebx
c002725c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027262:	e8 39 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0027267:	59                   	pop    ecx
c0027268:	5b                   	pop    ebx
c0027269:	68 e9 34 03 c0       	push   0xc00334e9
c002726e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027274:	e8 27 03 ff ff       	call   c00175a0 <VgaText::puts(char const*)>
c0027279:	83 c4 10             	add    esp,0x10
c002727c:	eb fe                	jmp    c002727c <HalPanic(char const*)+0x112>

c002727e <HalQueryPerformanceCounter()>:
c002727e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027283:	31 d2                	xor    edx,edx
c0027285:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002728b:	31 c0                	xor    eax,eax
c002728d:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0027294:	74 02                	je     c0027298 <HalQueryPerformanceCounter()+0x1a>
c0027296:	0f 31                	rdtsc  
c0027298:	c3                   	ret    

c0027299 <HalInitialise()>:
c0027299:	53                   	push   ebx
c002729a:	83 ec 08             	sub    esp,0x8
c002729d:	e8 9c 49 ff ff       	call   c001bc3e <setupINTS()>
c00272a2:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c00272a9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00272ae:	75 0f                	jne    c00272bf <HalInitialise()+0x26>
c00272b0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00272b6:	83 e2 fe             	and    edx,0xfffffffe
c00272b9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00272bf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00272c5:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c00272cc:	83 e2 fe             	and    edx,0xfffffffe
c00272cf:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00272d5:	e8 9e 02 00 00       	call   c0027578 <picOpen()>
c00272da:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00272e1:	74 0a                	je     c00272ed <HalInitialise()+0x54>
c00272e3:	e8 e0 01 00 00       	call   c00274c8 <picDisable()>
c00272e8:	e8 03 68 00 00       	call   c002daf0 <apicOpen()>
c00272ed:	bb 0f 00 00 00       	mov    ebx,0xf
c00272f2:	50                   	push   eax
c00272f3:	6a 00                	push   0x0
c00272f5:	68 40 6f 02 c0       	push   0xc0026f40
c00272fa:	6a 00                	push   0x0
c00272fc:	e8 0d 47 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027301:	83 c4 0c             	add    esp,0xc
c0027304:	6a 00                	push   0x0
c0027306:	68 40 6f 02 c0       	push   0xc0026f40
c002730b:	6a 01                	push   0x1
c002730d:	e8 fc 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027312:	83 c4 0c             	add    esp,0xc
c0027315:	6a 00                	push   0x0
c0027317:	68 d1 69 02 c0       	push   0xc00269d1
c002731c:	6a 02                	push   0x2
c002731e:	e8 eb 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027323:	83 c4 0c             	add    esp,0xc
c0027326:	6a 00                	push   0x0
c0027328:	68 40 6f 02 c0       	push   0xc0026f40
c002732d:	6a 03                	push   0x3
c002732f:	e8 da 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027334:	83 c4 0c             	add    esp,0xc
c0027337:	6a 00                	push   0x0
c0027339:	68 40 6f 02 c0       	push   0xc0026f40
c002733e:	6a 04                	push   0x4
c0027340:	e8 c9 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027345:	83 c4 0c             	add    esp,0xc
c0027348:	6a 00                	push   0x0
c002734a:	68 40 6f 02 c0       	push   0xc0026f40
c002734f:	6a 05                	push   0x5
c0027351:	e8 b8 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027356:	83 c4 0c             	add    esp,0xc
c0027359:	6a 00                	push   0x0
c002735b:	68 74 6f 02 c0       	push   0xc0026f74
c0027360:	6a 06                	push   0x6
c0027362:	e8 a7 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027367:	83 c4 0c             	add    esp,0xc
c002736a:	6a 00                	push   0x0
c002736c:	68 ea 69 02 c0       	push   0xc00269ea
c0027371:	6a 08                	push   0x8
c0027373:	e8 96 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027378:	83 c4 0c             	add    esp,0xc
c002737b:	6a 00                	push   0x0
c002737d:	68 40 6f 02 c0       	push   0xc0026f40
c0027382:	6a 09                	push   0x9
c0027384:	e8 85 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027389:	83 c4 0c             	add    esp,0xc
c002738c:	6a 00                	push   0x0
c002738e:	68 40 6f 02 c0       	push   0xc0026f40
c0027393:	6a 0a                	push   0xa
c0027395:	e8 74 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c002739a:	83 c4 0c             	add    esp,0xc
c002739d:	6a 00                	push   0x0
c002739f:	68 40 6f 02 c0       	push   0xc0026f40
c00273a4:	6a 0b                	push   0xb
c00273a6:	e8 63 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273ab:	83 c4 0c             	add    esp,0xc
c00273ae:	6a 00                	push   0x0
c00273b0:	68 50 6e 02 c0       	push   0xc0026e50
c00273b5:	6a 0d                	push   0xd
c00273b7:	e8 52 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273bc:	83 c4 0c             	add    esp,0xc
c00273bf:	6a 00                	push   0x0
c00273c1:	68 b7 6e 02 c0       	push   0xc0026eb7
c00273c6:	6a 0e                	push   0xe
c00273c8:	e8 41 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273cd:	83 c4 10             	add    esp,0x10
c00273d0:	50                   	push   eax
c00273d1:	6a 00                	push   0x0
c00273d3:	68 40 6f 02 c0       	push   0xc0026f40
c00273d8:	53                   	push   ebx
c00273d9:	43                   	inc    ebx
c00273da:	e8 2f 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273df:	83 c4 10             	add    esp,0x10
c00273e2:	83 fb 1e             	cmp    ebx,0x1e
c00273e5:	75 e9                	jne    c00273d0 <HalInitialise()+0x137>
c00273e7:	50                   	push   eax
c00273e8:	6a 00                	push   0x0
c00273ea:	68 09 1d 02 c0       	push   0xc0021d09
c00273ef:	6a 60                	push   0x60
c00273f1:	e8 18 46 ff ff       	call   c001ba0e <installISRHandler(int, void (*)(regs*, void*), void*)>
c00273f6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00273fb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027405:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c002740c:	e8 a0 f1 fe ff       	call   c00165b1 <malloc>
c0027411:	89 04 24             	mov    DWORD PTR [esp],eax
c0027414:	89 c3                	mov    ebx,eax
c0027416:	e8 3b 09 00 00       	call   c0027d56 <RTC::RTC()>
c002741b:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027425:	5a                   	pop    edx
c0027426:	59                   	pop    ecx
c0027427:	53                   	push   ebx
c0027428:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002742e:	e8 8f 40 ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c0027433:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027435:	6a 00                	push   0x0
c0027437:	6a 00                	push   0x0
c0027439:	6a 00                	push   0x0
c002743b:	53                   	push   ebx
c002743c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002743f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027444:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002744a:	83 c4 28             	add    esp,0x28
c002744d:	5b                   	pop    ebx
c002744e:	c3                   	ret    

c002744f <HalMakeBeep(int)>:
c002744f:	53                   	push   ebx
c0027450:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027454:	85 db                	test   ebx,ebx
c0027456:	75 07                	jne    c002745f <HalMakeBeep(int)+0x10>
c0027458:	e4 61                	in     al,0x61
c002745a:	83 e0 fc             	and    eax,0xfffffffc
c002745d:	eb 26                	jmp    c0027485 <HalMakeBeep(int)+0x36>
c002745f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027464:	99                   	cdq    
c0027465:	f7 fb                	idiv   ebx
c0027467:	89 c1                	mov    ecx,eax
c0027469:	b0 b6                	mov    al,0xb6
c002746b:	e6 43                	out    0x43,al
c002746d:	88 c8                	mov    al,cl
c002746f:	e6 42                	out    0x42,al
c0027471:	89 c8                	mov    eax,ecx
c0027473:	c1 e8 08             	shr    eax,0x8
c0027476:	e6 42                	out    0x42,al
c0027478:	e4 61                	in     al,0x61
c002747a:	89 c2                	mov    edx,eax
c002747c:	83 ca 03             	or     edx,0x3
c002747f:	38 d0                	cmp    al,dl
c0027481:	74 04                	je     c0027487 <HalMakeBeep(int)+0x38>
c0027483:	88 d0                	mov    al,dl
c0027485:	e6 61                	out    0x61,al
c0027487:	5b                   	pop    ebx
c0027488:	c3                   	ret    

c0027489 <HalGetRand()>:
c0027489:	31 c0                	xor    eax,eax
c002748b:	c3                   	ret    

c002748c <HalEndOfInterrupt(int)>:
c002748c:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0027493:	74 23                	je     c00274b8 <HalEndOfInterrupt(int)+0x2c>
c0027495:	83 ec 14             	sub    esp,0x14
c0027498:	6a 1b                	push   0x1b
c002749a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00274a0:	e8 bb e6 fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c00274a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00274aa:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00274b4:	83 c4 1c             	add    esp,0x1c
c00274b7:	c3                   	ret    
c00274b8:	e9 3f 02 00 00       	jmp    c00276fc <picEOI(int)>

c00274bd <HalRestart()>:
c00274bd:	c3                   	ret    

c00274be <HalShutdown()>:
c00274be:	c3                   	ret    

c00274bf <HalSleep()>:
c00274bf:	c3                   	ret    

c00274c0 <picIoWait()>:
c00274c0:	eb 00                	jmp    c00274c2 <picIoWait()+0x2>
c00274c2:	eb 00                	jmp    c00274c4 <picIoWait()+0x4>
c00274c4:	90                   	nop
c00274c5:	c3                   	ret    
c00274c6:	66 90                	xchg   ax,ax

c00274c8 <picDisable()>:
c00274c8:	83 ec 10             	sub    esp,0x10
c00274cb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00274d2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00274d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00274db:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00274e0:	ee                   	out    dx,al
c00274e1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00274e8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00274ed:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00274f1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00274f6:	ee                   	out    dx,al
c00274f7:	90                   	nop
c00274f8:	83 c4 10             	add    esp,0x10
c00274fb:	c3                   	ret    

c00274fc <picGetIRQReg(int)>:
c00274fc:	83 ec 10             	sub    esp,0x10
c00274ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027503:	0f b6 c0             	movzx  eax,al
c0027506:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c002750d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027511:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027515:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002751a:	ee                   	out    dx,al
c002751b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002751f:	0f b6 c0             	movzx  eax,al
c0027522:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027529:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002752d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027531:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027536:	ee                   	out    dx,al
c0027537:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002753e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027543:	89 c2                	mov    edx,eax
c0027545:	ec                   	in     al,dx
c0027546:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002754a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002754e:	0f b6 c0             	movzx  eax,al
c0027551:	c1 e0 08             	shl    eax,0x8
c0027554:	89 c1                	mov    ecx,eax
c0027556:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c002755d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0027562:	89 c2                	mov    edx,eax
c0027564:	ec                   	in     al,dx
c0027565:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027569:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002756d:	0f b6 c0             	movzx  eax,al
c0027570:	09 c8                	or     eax,ecx
c0027572:	83 c4 10             	add    esp,0x10
c0027575:	c3                   	ret    
c0027576:	66 90                	xchg   ax,ax

c0027578 <picOpen()>:
c0027578:	83 ec 50             	sub    esp,0x50
c002757b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0027582:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0027587:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002758b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002758f:	ee                   	out    dx,al
c0027590:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0027597:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002759c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00275a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275a4:	ee                   	out    dx,al
c00275a5:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00275ad:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00275b5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00275bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00275c0:	89 c2                	mov    edx,eax
c00275c2:	ec                   	in     al,dx
c00275c3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00275c7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00275cb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00275cf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00275d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00275da:	89 c2                	mov    edx,eax
c00275dc:	ec                   	in     al,dx
c00275dd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00275e1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00275e5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00275e9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00275f0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00275f5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00275f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00275fd:	ee                   	out    dx,al
c00275fe:	e8 bd fe ff ff       	call   c00274c0 <picIoWait()>
c0027603:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002760a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c002760f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027613:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027617:	ee                   	out    dx,al
c0027618:	e8 a3 fe ff ff       	call   c00274c0 <picIoWait()>
c002761d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027621:	0f b6 c0             	movzx  eax,al
c0027624:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c002762b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002762f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027633:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027637:	ee                   	out    dx,al
c0027638:	e8 83 fe ff ff       	call   c00274c0 <picIoWait()>
c002763d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027641:	0f b6 c0             	movzx  eax,al
c0027644:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002764b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002764f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027653:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027657:	ee                   	out    dx,al
c0027658:	e8 63 fe ff ff       	call   c00274c0 <picIoWait()>
c002765d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027664:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027669:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c002766d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027671:	ee                   	out    dx,al
c0027672:	e8 49 fe ff ff       	call   c00274c0 <picIoWait()>
c0027677:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c002767e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027683:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0027687:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002768b:	ee                   	out    dx,al
c002768c:	e8 2f fe ff ff       	call   c00274c0 <picIoWait()>
c0027691:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0027698:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c002769d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00276a1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00276a5:	ee                   	out    dx,al
c00276a6:	e8 15 fe ff ff       	call   c00274c0 <picIoWait()>
c00276ab:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00276b2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00276b7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00276bb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00276bf:	ee                   	out    dx,al
c00276c0:	e8 fb fd ff ff       	call   c00274c0 <picIoWait()>
c00276c5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00276ca:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00276d1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00276d5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00276d9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00276dd:	ee                   	out    dx,al
c00276de:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00276e3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00276ea:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00276ee:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00276f2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00276f6:	ee                   	out    dx,al
c00276f7:	90                   	nop
c00276f8:	83 c4 50             	add    esp,0x50
c00276fb:	c3                   	ret    

c00276fc <picEOI(int)>:
c00276fc:	83 ec 10             	sub    esp,0x10
c00276ff:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027704:	75 1e                	jne    c0027724 <picEOI(int)+0x28>
c0027706:	6a 0b                	push   0xb
c0027708:	e8 ef fd ff ff       	call   c00274fc <picGetIRQReg(int)>
c002770d:	83 c4 04             	add    esp,0x4
c0027710:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027715:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c002771a:	25 80 00 00 00       	and    eax,0x80
c002771f:	74 73                	je     c0027794 <picEOI(int)+0x98>
c0027721:	8d 76 00             	lea    esi,[esi+0x0]
c0027724:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027729:	75 31                	jne    c002775c <picEOI(int)+0x60>
c002772b:	6a 0b                	push   0xb
c002772d:	e8 ca fd ff ff       	call   c00274fc <picGetIRQReg(int)>
c0027732:	83 c4 04             	add    esp,0x4
c0027735:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002773a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002773e:	98                   	cwde   
c002773f:	85 c0                	test   eax,eax
c0027741:	78 19                	js     c002775c <picEOI(int)+0x60>
c0027743:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002774a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c002774f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027753:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027758:	ee                   	out    dx,al
c0027759:	eb 3d                	jmp    c0027798 <picEOI(int)+0x9c>
c002775b:	90                   	nop
c002775c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027761:	7e 19                	jle    c002777c <picEOI(int)+0x80>
c0027763:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002776a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c002776f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027773:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027778:	ee                   	out    dx,al
c0027779:	8d 76 00             	lea    esi,[esi+0x0]
c002777c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027783:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0027788:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002778c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027791:	ee                   	out    dx,al
c0027792:	eb 04                	jmp    c0027798 <picEOI(int)+0x9c>
c0027794:	90                   	nop
c0027795:	8d 76 00             	lea    esi,[esi+0x0]
c0027798:	83 c4 10             	add    esp,0x10
c002779b:	c3                   	ret    

c002779c <RTC::open(int, int, void*)>:
c002779c:	31 c0                	xor    eax,eax
c002779e:	c3                   	ret    
c002779f:	90                   	nop

c00277a0 <RTC::close(int, int, void*)>:
c00277a0:	31 c0                	xor    eax,eax
c00277a2:	c3                   	ret    
c00277a3:	90                   	nop

c00277a4 <RTC::timeInSecondsUTC()>:
c00277a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00277a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00277ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00277b4:	c3                   	ret    
c00277b5:	90                   	nop

c00277b6 <RTC::timeInDatetimeUTC()>:
c00277b6:	53                   	push   ebx
c00277b7:	83 ec 14             	sub    esp,0x14
c00277ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00277be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00277c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00277c4:	50                   	push   eax
c00277c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00277c8:	83 c4 0c             	add    esp,0xc
c00277cb:	52                   	push   edx
c00277cc:	50                   	push   eax
c00277cd:	53                   	push   ebx
c00277ce:	e8 63 3a ff ff       	call   c001b236 <secondsToDatetime(unsigned long long)>
c00277d3:	89 d8                	mov    eax,ebx
c00277d5:	83 c4 14             	add    esp,0x14
c00277d8:	5b                   	pop    ebx
c00277d9:	c2 04 00             	ret    0x4

c00277dc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00277dc:	56                   	push   esi
c00277dd:	53                   	push   ebx
c00277de:	83 ec 14             	sub    esp,0x14
c00277e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00277e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00277e7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00277ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00277ee:	52                   	push   edx
c00277ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00277f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00277f7:	50                   	push   eax
c00277f8:	e8 39 3a ff ff       	call   c001b236 <secondsToDatetime(unsigned long long)>
c00277fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027801:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027805:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027809:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c002780d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027811:	89 f0                	mov    eax,esi
c0027813:	83 c4 20             	add    esp,0x20
c0027816:	5b                   	pop    ebx
c0027817:	5e                   	pop    esi
c0027818:	ff e0                	jmp    eax

c002781a <RTC::~RTC()>:
c002781a:	83 ec 0c             	sub    esp,0xc
c002781d:	ba 88 35 03 c0       	mov    edx,0xc0033588
c0027822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027826:	89 10                	mov    DWORD PTR [eax],edx
c0027828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002782c:	83 ec 0c             	sub    esp,0xc
c002782f:	50                   	push   eax
c0027830:	e8 93 37 ff ff       	call   c001afc8 <Clock::~Clock()>
c0027835:	83 c4 10             	add    esp,0x10
c0027838:	90                   	nop
c0027839:	83 c4 0c             	add    esp,0xc
c002783c:	c3                   	ret    
c002783d:	90                   	nop

c002783e <RTC::~RTC()>:
c002783e:	83 ec 0c             	sub    esp,0xc
c0027841:	83 ec 0c             	sub    esp,0xc
c0027844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027848:	e8 cd ff ff ff       	call   c002781a <RTC::~RTC()>
c002784d:	83 c4 10             	add    esp,0x10
c0027850:	83 ec 08             	sub    esp,0x8
c0027853:	68 60 01 00 00       	push   0x160
c0027858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002785c:	e8 b3 1a ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c0027861:	83 c4 10             	add    esp,0x10
c0027864:	83 c4 0c             	add    esp,0xc
c0027867:	c3                   	ret    

c0027868 <RTC::get_update_in_progress_flag()>:
c0027868:	83 ec 14             	sub    esp,0x14
c002786b:	6a 0a                	push   0xa
c002786d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027873:	e8 a0 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027878:	83 c4 1c             	add    esp,0x1c
c002787b:	0f b6 c0             	movzx  eax,al
c002787e:	c1 e8 07             	shr    eax,0x7
c0027881:	c3                   	ret    

c0027882 <RTC::completeRTCRefresh()>:
c0027882:	55                   	push   ebp
c0027883:	57                   	push   edi
c0027884:	56                   	push   esi
c0027885:	53                   	push   ebx
c0027886:	83 ec 3c             	sub    esp,0x3c
c0027889:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c002788f:	83 ec 0c             	sub    esp,0xc
c0027892:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027896:	e8 cd ff ff ff       	call   c0027868 <RTC::get_update_in_progress_flag()>
c002789b:	83 c4 10             	add    esp,0x10
c002789e:	84 c0                	test   al,al
c00278a0:	74 0e                	je     c00278b0 <RTC::completeRTCRefresh()+0x2e>
c00278a2:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00278a8:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00278ae:	73 df                	jae    c002788f <RTC::completeRTCRefresh()+0xd>
c00278b0:	51                   	push   ecx
c00278b1:	51                   	push   ecx
c00278b2:	6a 00                	push   0x0
c00278b4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278ba:	e8 59 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00278bf:	5b                   	pop    ebx
c00278c0:	89 c7                	mov    edi,eax
c00278c2:	5e                   	pop    esi
c00278c3:	6a 02                	push   0x2
c00278c5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278cb:	e8 48 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00278d0:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00278d4:	5d                   	pop    ebp
c00278d5:	58                   	pop    eax
c00278d6:	6a 04                	push   0x4
c00278d8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278de:	e8 35 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00278e3:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00278e7:	58                   	pop    eax
c00278e8:	5a                   	pop    edx
c00278e9:	6a 07                	push   0x7
c00278eb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278f1:	e8 22 e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00278f6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00278fa:	59                   	pop    ecx
c00278fb:	5b                   	pop    ebx
c00278fc:	6a 08                	push   0x8
c00278fe:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027904:	e8 0f e3 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027909:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c002790d:	5e                   	pop    esi
c002790e:	5d                   	pop    ebp
c002790f:	6a 09                	push   0x9
c0027911:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027917:	e8 fc e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c002791c:	0f b6 c0             	movzx  eax,al
c002791f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027923:	83 c4 10             	add    esp,0x10
c0027926:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c002792c:	83 ec 0c             	sub    esp,0xc
c002792f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027933:	e8 30 ff ff ff       	call   c0027868 <RTC::get_update_in_progress_flag()>
c0027938:	83 c4 10             	add    esp,0x10
c002793b:	84 c0                	test   al,al
c002793d:	74 0e                	je     c002794d <RTC::completeRTCRefresh()+0xcb>
c002793f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027945:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002794b:	73 df                	jae    c002792c <RTC::completeRTCRefresh()+0xaa>
c002794d:	51                   	push   ecx
c002794e:	51                   	push   ecx
c002794f:	6a 00                	push   0x0
c0027951:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027957:	e8 bc e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c002795c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027960:	5b                   	pop    ebx
c0027961:	5e                   	pop    esi
c0027962:	6a 02                	push   0x2
c0027964:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002796a:	e8 a9 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c002796f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027973:	5d                   	pop    ebp
c0027974:	58                   	pop    eax
c0027975:	6a 04                	push   0x4
c0027977:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002797d:	e8 96 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027982:	88 c3                	mov    bl,al
c0027984:	58                   	pop    eax
c0027985:	5a                   	pop    edx
c0027986:	6a 07                	push   0x7
c0027988:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002798e:	e8 85 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027993:	59                   	pop    ecx
c0027994:	89 c6                	mov    esi,eax
c0027996:	5d                   	pop    ebp
c0027997:	6a 08                	push   0x8
c0027999:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002799f:	e8 74 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279a4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00279a8:	58                   	pop    eax
c00279a9:	5a                   	pop    edx
c00279aa:	6a 09                	push   0x9
c00279ac:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279b2:	e8 61 e2 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c00279b7:	89 f9                	mov    ecx,edi
c00279b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00279bd:	0f b6 e8             	movzx  ebp,al
c00279c0:	83 c4 10             	add    esp,0x10
c00279c3:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00279c7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00279cc:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00279d1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00279d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00279d9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00279dd:	0f 94 c0             	sete   al
c00279e0:	0f b6 fb             	movzx  edi,bl
c00279e3:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00279e7:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00279ec:	0f 94 c2             	sete   dl
c00279ef:	21 d0                	and    eax,edx
c00279f1:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00279f5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00279f9:	0f 94 c2             	sete   dl
c00279fc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0027a00:	21 c2                	and    edx,eax
c0027a02:	89 f0                	mov    eax,esi
c0027a04:	0f b6 c0             	movzx  eax,al
c0027a07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027a0b:	89 f0                	mov    eax,esi
c0027a0d:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027a11:	0f 94 c0             	sete   al
c0027a14:	21 d0                	and    eax,edx
c0027a16:	31 d2                	xor    edx,edx
c0027a18:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027a1c:	0f 94 c2             	sete   dl
c0027a1f:	85 c2                	test   edx,eax
c0027a21:	75 27                	jne    c0027a4a <RTC::completeRTCRefresh()+0x1c8>
c0027a23:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027a27:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027a2b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027a2f:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027a33:	89 f0                	mov    eax,esi
c0027a35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027a39:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027a3d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027a41:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027a45:	e9 dc fe ff ff       	jmp    c0027926 <RTC::completeRTCRefresh()+0xa4>
c0027a4a:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027a4e:	75 d3                	jne    c0027a23 <RTC::completeRTCRefresh()+0x1a1>
c0027a50:	52                   	push   edx
c0027a51:	52                   	push   edx
c0027a52:	6a 0b                	push   0xb
c0027a54:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a5a:	e8 b9 e1 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027a5f:	83 c4 10             	add    esp,0x10
c0027a62:	a8 04                	test   al,0x4
c0027a64:	75 7a                	jne    c0027ae0 <RTC::completeRTCRefresh()+0x25e>
c0027a66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027a6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027a6e:	83 e1 0f             	and    ecx,0xf
c0027a71:	c1 ea 04             	shr    edx,0x4
c0027a74:	c1 ef 04             	shr    edi,0x4
c0027a77:	6b d2 0a             	imul   edx,edx,0xa
c0027a7a:	83 e6 0f             	and    esi,0xf
c0027a7d:	01 d1                	add    ecx,edx
c0027a7f:	c1 ed 04             	shr    ebp,0x4
c0027a82:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0027a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027a8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027a8e:	c1 ea 04             	shr    edx,0x4
c0027a91:	83 e1 0f             	and    ecx,0xf
c0027a94:	6b d2 0a             	imul   edx,edx,0xa
c0027a97:	6b ed 0a             	imul   ebp,ebp,0xa
c0027a9a:	01 d1                	add    ecx,edx
c0027a9c:	89 fa                	mov    edx,edi
c0027a9e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0027aa2:	83 e2 07             	and    edx,0x7
c0027aa5:	89 d9                	mov    ecx,ebx
c0027aa7:	6b d2 0a             	imul   edx,edx,0xa
c0027aaa:	83 e1 0f             	and    ecx,0xf
c0027aad:	83 e3 80             	and    ebx,0xffffff80
c0027ab0:	01 d1                	add    ecx,edx
c0027ab2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027ab6:	09 cb                	or     ebx,ecx
c0027ab8:	c1 ea 04             	shr    edx,0x4
c0027abb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027abf:	6b d2 0a             	imul   edx,edx,0xa
c0027ac2:	83 e1 0f             	and    ecx,0xf
c0027ac5:	01 d6                	add    esi,edx
c0027ac7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027acb:	c1 ea 04             	shr    edx,0x4
c0027ace:	6b d2 0a             	imul   edx,edx,0xa
c0027ad1:	01 d1                	add    ecx,edx
c0027ad3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027ad7:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027adb:	83 e2 0f             	and    edx,0xf
c0027ade:	01 d5                	add    ebp,edx
c0027ae0:	a8 02                	test   al,0x2
c0027ae2:	75 15                	jne    c0027af9 <RTC::completeRTCRefresh()+0x277>
c0027ae4:	f6 c3 80             	test   bl,0x80
c0027ae7:	74 10                	je     c0027af9 <RTC::completeRTCRefresh()+0x277>
c0027ae9:	83 e3 7f             	and    ebx,0x7f
c0027aec:	b9 18 00 00 00       	mov    ecx,0x18
c0027af1:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027af4:	99                   	cdq    
c0027af5:	f7 f9                	idiv   ecx
c0027af7:	88 d3                	mov    bl,dl
c0027af9:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027aff:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027b05:	77 06                	ja     c0027b0d <RTC::completeRTCRefresh()+0x28b>
c0027b07:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027b0d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027b12:	31 c9                	xor    ecx,ecx
c0027b14:	c1 e0 10             	shl    eax,0x10
c0027b17:	89 cd                	mov    ebp,ecx
c0027b19:	c1 e7 10             	shl    edi,0x10
c0027b1c:	31 d2                	xor    edx,edx
c0027b1e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027b24:	09 c5                	or     ebp,eax
c0027b26:	89 f0                	mov    eax,esi
c0027b28:	89 e9                	mov    ecx,ebp
c0027b2a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027b2e:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027b32:	88 c2                	mov    dl,al
c0027b34:	88 d9                	mov    cl,bl
c0027b36:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0027b3a:	0f b7 c2             	movzx  eax,dx
c0027b3d:	09 f8                	or     eax,edi
c0027b3f:	89 c2                	mov    edx,eax
c0027b41:	50                   	push   eax
c0027b42:	50                   	push   eax
c0027b43:	51                   	push   ecx
c0027b44:	52                   	push   edx
c0027b45:	e8 6d 35 ff ff       	call   c001b0b7 <datetimeToSeconds(datetime_t)>
c0027b4a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027b4e:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027b54:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027b5a:	83 c4 4c             	add    esp,0x4c
c0027b5d:	5b                   	pop    ebx
c0027b5e:	5e                   	pop    esi
c0027b5f:	5f                   	pop    edi
c0027b60:	5d                   	pop    ebp
c0027b61:	c3                   	ret    

c0027b62 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027b62:	55                   	push   ebp
c0027b63:	57                   	push   edi
c0027b64:	56                   	push   esi
c0027b65:	53                   	push   ebx
c0027b66:	83 ec 30             	sub    esp,0x30
c0027b69:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027b6d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027b71:	6a 00                	push   0x0
c0027b73:	6a 00                	push   0x0
c0027b75:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b7b:	e8 b2 e1 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b80:	83 c4 0c             	add    esp,0xc
c0027b83:	6a 00                	push   0x0
c0027b85:	6a 02                	push   0x2
c0027b87:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b8d:	e8 a0 e1 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b92:	31 d2                	xor    edx,edx
c0027b94:	89 f9                	mov    ecx,edi
c0027b96:	89 f8                	mov    eax,edi
c0027b98:	c1 e9 10             	shr    ecx,0x10
c0027b9b:	0f b6 c4             	movzx  eax,ah
c0027b9e:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027ba2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027ba6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027baa:	b9 64 00 00 00       	mov    ecx,0x64
c0027baf:	89 f0                	mov    eax,esi
c0027bb1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0027bb5:	89 f0                	mov    eax,esi
c0027bb7:	0f b6 c4             	movzx  eax,ah
c0027bba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027bbe:	89 f0                	mov    eax,esi
c0027bc0:	c1 e8 10             	shr    eax,0x10
c0027bc3:	f7 f1                	div    ecx
c0027bc5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027bc9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027bcd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027bd1:	59                   	pop    ecx
c0027bd2:	5b                   	pop    ebx
c0027bd3:	89 fb                	mov    ebx,edi
c0027bd5:	6a 0b                	push   0xb
c0027bd7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027bdd:	e8 36 e0 fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027be2:	83 c4 10             	add    esp,0x10
c0027be5:	89 c5                	mov    ebp,eax
c0027be7:	a8 04                	test   al,0x4
c0027be9:	75 6e                	jne    c0027c59 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027beb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027bef:	31 d2                	xor    edx,edx
c0027bf1:	0f b6 c1             	movzx  eax,cl
c0027bf4:	b9 0a 00 00 00       	mov    ecx,0xa
c0027bf9:	f7 f1                	div    ecx
c0027bfb:	c1 e0 04             	shl    eax,0x4
c0027bfe:	09 d0                	or     eax,edx
c0027c00:	31 d2                	xor    edx,edx
c0027c02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027c06:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027c0b:	f7 f1                	div    ecx
c0027c0d:	c1 e0 04             	shl    eax,0x4
c0027c10:	09 d0                	or     eax,edx
c0027c12:	31 d2                	xor    edx,edx
c0027c14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027c18:	0f b6 c3             	movzx  eax,bl
c0027c1b:	f7 f1                	div    ecx
c0027c1d:	c1 e0 04             	shl    eax,0x4
c0027c20:	09 d0                	or     eax,edx
c0027c22:	31 d2                	xor    edx,edx
c0027c24:	89 c3                	mov    ebx,eax
c0027c26:	89 f0                	mov    eax,esi
c0027c28:	0f b6 c0             	movzx  eax,al
c0027c2b:	f7 f1                	div    ecx
c0027c2d:	c1 e0 04             	shl    eax,0x4
c0027c30:	09 d0                	or     eax,edx
c0027c32:	31 d2                	xor    edx,edx
c0027c34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027c38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027c3d:	f7 f1                	div    ecx
c0027c3f:	c1 e0 04             	shl    eax,0x4
c0027c42:	09 d0                	or     eax,edx
c0027c44:	31 d2                	xor    edx,edx
c0027c46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027c4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c4e:	f7 f1                	div    ecx
c0027c50:	c1 e0 04             	shl    eax,0x4
c0027c53:	09 d0                	or     eax,edx
c0027c55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027c59:	83 e5 02             	and    ebp,0x2
c0027c5c:	75 1e                	jne    c0027c7c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027c5e:	0f b6 c3             	movzx  eax,bl
c0027c61:	83 f8 0b             	cmp    eax,0xb
c0027c64:	76 10                	jbe    c0027c76 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027c66:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027c69:	88 d3                	mov    bl,dl
c0027c6b:	84 d2                	test   dl,dl
c0027c6d:	75 02                	jne    c0027c71 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027c6f:	b3 0c                	mov    bl,0xc
c0027c71:	83 cb 80             	or     ebx,0xffffff80
c0027c74:	eb 06                	jmp    c0027c7c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027c76:	85 c0                	test   eax,eax
c0027c78:	75 02                	jne    c0027c7c <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027c7a:	b3 0c                	mov    bl,0xc
c0027c7c:	0f b6 db             	movzx  ebx,bl
c0027c7f:	50                   	push   eax
c0027c80:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027c85:	52                   	push   edx
c0027c86:	6a 00                	push   0x0
c0027c88:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027c8e:	e8 9f e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c93:	83 c4 0c             	add    esp,0xc
c0027c96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027c9b:	50                   	push   eax
c0027c9c:	6a 02                	push   0x2
c0027c9e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ca4:	e8 89 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ca9:	83 c4 0c             	add    esp,0xc
c0027cac:	53                   	push   ebx
c0027cad:	6a 04                	push   0x4
c0027caf:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027cb5:	e8 78 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027cba:	83 c4 0c             	add    esp,0xc
c0027cbd:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027cc2:	52                   	push   edx
c0027cc3:	6a 07                	push   0x7
c0027cc5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ccb:	e8 62 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027cd0:	83 c4 0c             	add    esp,0xc
c0027cd3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027cd8:	50                   	push   eax
c0027cd9:	6a 08                	push   0x8
c0027cdb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ce1:	e8 4c e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ce6:	83 c4 0c             	add    esp,0xc
c0027ce9:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027cee:	55                   	push   ebp
c0027cef:	6a 09                	push   0x9
c0027cf1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027cf7:	e8 36 e0 fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027cfc:	5a                   	pop    edx
c0027cfd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027d01:	e8 7c fb ff ff       	call   c0027882 <RTC::completeRTCRefresh()>
c0027d06:	83 c4 3c             	add    esp,0x3c
c0027d09:	b0 01                	mov    al,0x1
c0027d0b:	5b                   	pop    ebx
c0027d0c:	5e                   	pop    esi
c0027d0d:	5f                   	pop    edi
c0027d0e:	5d                   	pop    ebp
c0027d0f:	c3                   	ret    

c0027d10 <rtcIRQHandler(regs*, void*)>:
c0027d10:	53                   	push   ebx
c0027d11:	83 ec 10             	sub    esp,0x10
c0027d14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027d18:	6a 0c                	push   0xc
c0027d1a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027d20:	e8 f3 de fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027d25:	83 c4 10             	add    esp,0x10
c0027d28:	a8 80                	test   al,0x80
c0027d2a:	74 24                	je     c0027d50 <rtcIRQHandler(regs*, void*)+0x40>
c0027d2c:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027d33:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027d3a:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027d41:	75 0d                	jne    c0027d50 <rtcIRQHandler(regs*, void*)+0x40>
c0027d43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027d47:	83 c4 08             	add    esp,0x8
c0027d4a:	5b                   	pop    ebx
c0027d4b:	e9 32 fb ff ff       	jmp    c0027882 <RTC::completeRTCRefresh()>
c0027d50:	83 c4 08             	add    esp,0x8
c0027d53:	5b                   	pop    ebx
c0027d54:	c3                   	ret    
c0027d55:	90                   	nop

c0027d56 <RTC::RTC()>:
c0027d56:	83 ec 1c             	sub    esp,0x1c
c0027d59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027d5d:	83 ec 08             	sub    esp,0x8
c0027d60:	68 6b 35 03 c0       	push   0xc003356b
c0027d65:	50                   	push   eax
c0027d66:	e8 27 32 ff ff       	call   c001af92 <Clock::Clock(char const*)>
c0027d6b:	83 c4 10             	add    esp,0x10
c0027d6e:	ba 88 35 03 c0       	mov    edx,0xc0033588
c0027d73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027d77:	89 10                	mov    DWORD PTR [eax],edx
c0027d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027d7d:	83 ec 0c             	sub    esp,0xc
c0027d80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027d84:	6a 01                	push   0x1
c0027d86:	68 10 7d 02 c0       	push   0xc0027d10
c0027d8b:	6a 08                	push   0x8
c0027d8d:	50                   	push   eax
c0027d8e:	e8 db 36 ff ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027d93:	83 c4 20             	add    esp,0x20
c0027d96:	89 c2                	mov    edx,eax
c0027d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027d9c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027da2:	fa                   	cli    
c0027da3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027da8:	83 c0 01             	add    eax,0x1
c0027dab:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027db0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027db5:	83 ec 08             	sub    esp,0x8
c0027db8:	6a 0b                	push   0xb
c0027dba:	50                   	push   eax
c0027dbb:	e8 58 de fe ff       	call   c0015c18 <Computer::readCMOS(unsigned char)>
c0027dc0:	83 c4 10             	add    esp,0x10
c0027dc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027dc7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027dcc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027dd0:	83 ca 10             	or     edx,0x10
c0027dd3:	0f b6 d2             	movzx  edx,dl
c0027dd6:	83 ec 04             	sub    esp,0x4
c0027dd9:	52                   	push   edx
c0027dda:	6a 0b                	push   0xb
c0027ddc:	50                   	push   eax
c0027ddd:	e8 50 df fe ff       	call   c0015d32 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027de2:	83 c4 10             	add    esp,0x10
c0027de5:	83 ec 0c             	sub    esp,0xc
c0027de8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027dec:	e8 91 fa ff ff       	call   c0027882 <RTC::completeRTCRefresh()>
c0027df1:	83 c4 10             	add    esp,0x10
c0027df4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027df9:	83 e8 01             	sub    eax,0x1
c0027dfc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027e01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027e06:	85 c0                	test   eax,eax
c0027e08:	75 01                	jne    c0027e0b <RTC::RTC()+0xb5>
c0027e0a:	fb                   	sti    
c0027e0b:	90                   	nop
c0027e0c:	83 c4 1c             	add    esp,0x1c
c0027e0f:	c3                   	ret    

c0027e10 <HalConsoleScroll(int, int)>:
c0027e10:	83 ec 10             	sub    esp,0x10
c0027e13:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027e1b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027e23:	90                   	nop
c0027e24:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027e29:	0f 8f e1 00 00 00    	jg     c0027f10 <HalConsoleScroll(int, int)+0x100>
c0027e2f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027e37:	90                   	nop
c0027e38:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027e40:	0f 8f be 00 00 00    	jg     c0027f04 <HalConsoleScroll(int, int)+0xf4>
c0027e46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027e4a:	89 d0                	mov    eax,edx
c0027e4c:	c1 e0 02             	shl    eax,0x2
c0027e4f:	01 d0                	add    eax,edx
c0027e51:	c1 e0 05             	shl    eax,0x5
c0027e54:	89 c2                	mov    edx,eax
c0027e56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e5a:	01 d0                	add    eax,edx
c0027e5c:	89 c2                	mov    edx,eax
c0027e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e62:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027e69:	89 d0                	mov    eax,edx
c0027e6b:	c1 e0 02             	shl    eax,0x2
c0027e6e:	01 d0                	add    eax,edx
c0027e70:	c1 e0 05             	shl    eax,0x5
c0027e73:	89 c2                	mov    edx,eax
c0027e75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e79:	01 d0                	add    eax,edx
c0027e7b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027e81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027e85:	01 c2                	add    edx,eax
c0027e87:	8a 01                	mov    al,BYTE PTR [ecx]
c0027e89:	88 02                	mov    BYTE PTR [edx],al
c0027e8b:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027e90:	75 66                	jne    c0027ef8 <HalConsoleScroll(int, int)+0xe8>
c0027e92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e96:	83 e0 01             	and    eax,0x1
c0027e99:	74 39                	je     c0027ed4 <HalConsoleScroll(int, int)+0xc4>
c0027e9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027e9f:	83 e0 0f             	and    eax,0xf
c0027ea2:	88 c2                	mov    dl,al
c0027ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027ea8:	c1 e0 04             	shl    eax,0x4
c0027eab:	09 d0                	or     eax,edx
c0027ead:	88 c1                	mov    cl,al
c0027eaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027eb3:	89 d0                	mov    eax,edx
c0027eb5:	c1 e0 02             	shl    eax,0x2
c0027eb8:	01 d0                	add    eax,edx
c0027eba:	c1 e0 05             	shl    eax,0x5
c0027ebd:	89 c2                	mov    edx,eax
c0027ebf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ec3:	01 d0                	add    eax,edx
c0027ec5:	89 c2                	mov    edx,eax
c0027ec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ecb:	01 d0                	add    eax,edx
c0027ecd:	88 ca                	mov    dl,cl
c0027ecf:	88 10                	mov    BYTE PTR [eax],dl
c0027ed1:	eb 25                	jmp    c0027ef8 <HalConsoleScroll(int, int)+0xe8>
c0027ed3:	90                   	nop
c0027ed4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027ed8:	89 d0                	mov    eax,edx
c0027eda:	c1 e0 02             	shl    eax,0x2
c0027edd:	01 d0                	add    eax,edx
c0027edf:	c1 e0 05             	shl    eax,0x5
c0027ee2:	89 c2                	mov    edx,eax
c0027ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ee8:	01 d0                	add    eax,edx
c0027eea:	89 c2                	mov    edx,eax
c0027eec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ef0:	01 d0                	add    eax,edx
c0027ef2:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0027ef8:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027efd:	e9 36 ff ff ff       	jmp    c0027e38 <HalConsoleScroll(int, int)+0x28>
c0027f02:	66 90                	xchg   ax,ax
c0027f04:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027f09:	e9 16 ff ff ff       	jmp    c0027e24 <HalConsoleScroll(int, int)+0x14>
c0027f0e:	66 90                	xchg   ax,ax
c0027f10:	90                   	nop
c0027f11:	83 c4 10             	add    esp,0x10
c0027f14:	c3                   	ret    
c0027f15:	8d 76 00             	lea    esi,[esi+0x0]

c0027f18 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027f18:	83 ec 14             	sub    esp,0x14
c0027f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027f1f:	88 04 24             	mov    BYTE PTR [esp],al
c0027f22:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027f25:	0f b6 c0             	movzx  eax,al
c0027f28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027f2c:	89 d1                	mov    ecx,edx
c0027f2e:	83 e1 0f             	and    ecx,0xf
c0027f31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027f35:	c1 e2 04             	shl    edx,0x4
c0027f38:	0f b6 d2             	movzx  edx,dl
c0027f3b:	09 ca                	or     edx,ecx
c0027f3d:	c1 e2 08             	shl    edx,0x8
c0027f40:	09 d0                	or     eax,edx
c0027f42:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027f47:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027f4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f53:	89 d0                	mov    eax,edx
c0027f55:	c1 e0 02             	shl    eax,0x2
c0027f58:	01 d0                	add    eax,edx
c0027f5a:	c1 e0 04             	shl    eax,0x4
c0027f5d:	89 c2                	mov    edx,eax
c0027f5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027f63:	01 d0                	add    eax,edx
c0027f65:	01 c0                	add    eax,eax
c0027f67:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027f6f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027f74:	66 89 02             	mov    WORD PTR [edx],ax
c0027f77:	90                   	nop
c0027f78:	83 c4 14             	add    esp,0x14
c0027f7b:	c3                   	ret    

c0027f7c <HalConsoleCursorUpdate(int, int)>:
c0027f7c:	83 ec 20             	sub    esp,0x20
c0027f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f83:	89 c2                	mov    edx,eax
c0027f85:	c1 e2 02             	shl    edx,0x2
c0027f88:	01 d0                	add    eax,edx
c0027f8a:	c1 e0 04             	shl    eax,0x4
c0027f8d:	89 c2                	mov    edx,eax
c0027f8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027f93:	01 d0                	add    eax,edx
c0027f95:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027f9a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027fa1:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027fa6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027faa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027fae:	ee                   	out    dx,al
c0027faf:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027fb4:	0f b6 c0             	movzx  eax,al
c0027fb7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027fbe:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027fc2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027fc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027fca:	ee                   	out    dx,al
c0027fcb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027fd2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027fd7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027fdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027fdf:	ee                   	out    dx,al
c0027fe0:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027fe5:	c1 e8 08             	shr    eax,0x8
c0027fe8:	0f b6 c0             	movzx  eax,al
c0027feb:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027ff2:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027ff6:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027ffa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027ffe:	ee                   	out    dx,al
c0027fff:	90                   	nop
c0028000:	83 c4 20             	add    esp,0x20
c0028003:	c3                   	ret    

c0028004 <FAT::getName()>:
c0028004:	b8 bc 35 03 c0       	mov    eax,0xc00335bc
c0028009:	c3                   	ret    
c002800a:	66 90                	xchg   ax,ax

c002800c <FAT::tell(void*, unsigned long long*)>:
c002800c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0028011:	75 09                	jne    c002801c <FAT::tell(void*, unsigned long long*)+0x10>
c0028013:	b8 04 00 00 00       	mov    eax,0x4
c0028018:	c3                   	ret    
c0028019:	8d 76 00             	lea    esi,[esi+0x0]
c002801c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0028021:	75 09                	jne    c002802c <FAT::tell(void*, unsigned long long*)+0x20>
c0028023:	b8 04 00 00 00       	mov    eax,0x4
c0028028:	c3                   	ret    
c0028029:	8d 76 00             	lea    esi,[esi+0x0]
c002802c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028030:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028033:	ba 00 00 00 00       	mov    edx,0x0
c0028038:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002803c:	89 01                	mov    DWORD PTR [ecx],eax
c002803e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028041:	b8 00 00 00 00       	mov    eax,0x0
c0028046:	c3                   	ret    
c0028047:	90                   	nop

c0028048 <FAT::stat(void*, unsigned long long*)>:
c0028048:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002804d:	75 09                	jne    c0028058 <FAT::stat(void*, unsigned long long*)+0x10>
c002804f:	b8 04 00 00 00       	mov    eax,0x4
c0028054:	c3                   	ret    
c0028055:	8d 76 00             	lea    esi,[esi+0x0]
c0028058:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002805d:	75 09                	jne    c0028068 <FAT::stat(void*, unsigned long long*)+0x20>
c002805f:	b8 04 00 00 00       	mov    eax,0x4
c0028064:	c3                   	ret    
c0028065:	8d 76 00             	lea    esi,[esi+0x0]
c0028068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002806c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002806f:	ba 00 00 00 00       	mov    edx,0x0
c0028074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0028078:	89 01                	mov    DWORD PTR [ecx],eax
c002807a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002807d:	b8 00 00 00 00       	mov    eax,0x0
c0028082:	c3                   	ret    
c0028083:	90                   	nop

c0028084 <FAT::~FAT()>:
c0028084:	83 ec 0c             	sub    esp,0xc
c0028087:	ba 08 36 03 c0       	mov    edx,0xc0033608
c002808c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028090:	89 10                	mov    DWORD PTR [eax],edx
c0028092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028096:	83 ec 0c             	sub    esp,0xc
c0028099:	50                   	push   eax
c002809a:	e8 2b 22 ff ff       	call   c001a2ca <Filesystem::~Filesystem()>
c002809f:	83 c4 10             	add    esp,0x10
c00280a2:	90                   	nop
c00280a3:	83 c4 0c             	add    esp,0xc
c00280a6:	c3                   	ret    
c00280a7:	90                   	nop

c00280a8 <FAT::~FAT()>:
c00280a8:	83 ec 0c             	sub    esp,0xc
c00280ab:	83 ec 0c             	sub    esp,0xc
c00280ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280b2:	e8 cd ff ff ff       	call   c0028084 <FAT::~FAT()>
c00280b7:	83 c4 10             	add    esp,0x10
c00280ba:	83 ec 08             	sub    esp,0x8
c00280bd:	6a 08                	push   0x8
c00280bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280c3:	e8 4c 12 ff ff       	call   c0019314 <operator delete(void*, unsigned long)>
c00280c8:	83 c4 10             	add    esp,0x10
c00280cb:	83 c4 0c             	add    esp,0xc
c00280ce:	c3                   	ret    
c00280cf:	90                   	nop

c00280d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00280d0:	83 ec 1c             	sub    esp,0x1c
c00280d3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00280da:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00280df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00280e3:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00280ea:	83 f8 ff             	cmp    eax,0xffffffff
c00280ed:	75 35                	jne    c0028124 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00280ef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00280f3:	88 c2                	mov    dl,al
c00280f5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00280fa:	01 d0                	add    eax,edx
c00280fc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0028100:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028106:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002810a:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028111:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028116:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002811a:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028121:	eb 19                	jmp    c002813c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0028123:	90                   	nop
c0028124:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0028128:	88 c2                	mov    dl,al
c002812a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002812e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028135:	01 d0                	add    eax,edx
c0028137:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002813b:	90                   	nop
c002813c:	83 ec 04             	sub    esp,0x4
c002813f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028147:	8d 44 24 15          	lea    eax,[esp+0x15]
c002814b:	50                   	push   eax
c002814c:	e8 ca d1 fd ff       	call   c000531b <f_getlabel>
c0028151:	83 c4 10             	add    esp,0x10
c0028154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028158:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002815d:	75 09                	jne    c0028168 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c002815f:	b8 00 00 00 00       	mov    eax,0x0
c0028164:	eb 0a                	jmp    c0028170 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0028166:	66 90                	xchg   ax,ax
c0028168:	b8 01 00 00 00       	mov    eax,0x1
c002816d:	8d 76 00             	lea    esi,[esi+0x0]
c0028170:	83 c4 1c             	add    esp,0x1c
c0028173:	c3                   	ret    

c0028174 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0028174:	57                   	push   edi
c0028175:	83 ec 58             	sub    esp,0x58
c0028178:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0028180:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028184:	b8 00 00 00 00       	mov    eax,0x0
c0028189:	b9 0f 00 00 00       	mov    ecx,0xf
c002818e:	fc                   	cld    
c002818f:	89 d7                	mov    edi,edx
c0028191:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0028193:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028197:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002819e:	83 f8 ff             	cmp    eax,0xffffffff
c00281a1:	75 35                	jne    c00281d8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00281a3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00281a7:	88 c2                	mov    dl,al
c00281a9:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281ae:	01 d0                	add    eax,edx
c00281b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00281b4:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00281be:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281c5:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281ca:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00281ce:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281d5:	eb 19                	jmp    c00281f0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00281d7:	90                   	nop
c00281d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00281dc:	88 c2                	mov    dl,al
c00281de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00281e2:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281e9:	01 d0                	add    eax,edx
c00281eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00281ef:	90                   	nop
c00281f0:	83 ec 08             	sub    esp,0x8
c00281f3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00281f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00281fb:	50                   	push   eax
c00281fc:	e8 3f 86 fd ff       	call   c0000840 <strcat>
c0028201:	83 c4 10             	add    esp,0x10
c0028204:	83 ec 0c             	sub    esp,0xc
c0028207:	8d 44 24 18          	lea    eax,[esp+0x18]
c002820b:	50                   	push   eax
c002820c:	e8 5b d2 fd ff       	call   c000546c <f_setlabel>
c0028211:	83 c4 10             	add    esp,0x10
c0028214:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0028218:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002821d:	75 09                	jne    c0028228 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c002821f:	b8 00 00 00 00       	mov    eax,0x0
c0028224:	eb 0a                	jmp    c0028230 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0028226:	66 90                	xchg   ax,ax
c0028228:	b8 01 00 00 00       	mov    eax,0x1
c002822d:	8d 76 00             	lea    esi,[esi+0x0]
c0028230:	83 c4 58             	add    esp,0x58
c0028233:	5f                   	pop    edi
c0028234:	c3                   	ret    
c0028235:	90                   	nop
c0028236:	66 90                	xchg   ax,ax

c0028238 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0028238:	83 ec 2c             	sub    esp,0x2c
c002823b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028243:	83 ec 08             	sub    esp,0x8
c0028246:	68 e0 35 03 c0       	push   0xc00335e0
c002824b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002824f:	e8 fc 84 fd ff       	call   c0000750 <strcmp>
c0028254:	83 c4 10             	add    esp,0x10
c0028257:	85 c0                	test   eax,eax
c0028259:	0f 94 c0             	sete   al
c002825c:	0f b6 c0             	movzx  eax,al
c002825f:	85 c0                	test   eax,eax
c0028261:	74 0d                	je     c0028270 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0028263:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002826b:	e9 c0 00 00 00       	jmp    c0028330 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028270:	83 ec 08             	sub    esp,0x8
c0028273:	68 d2 35 03 c0       	push   0xc00335d2
c0028278:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002827c:	e8 cf 84 fd ff       	call   c0000750 <strcmp>
c0028281:	83 c4 10             	add    esp,0x10
c0028284:	85 c0                	test   eax,eax
c0028286:	0f 94 c0             	sete   al
c0028289:	0f b6 c0             	movzx  eax,al
c002828c:	85 c0                	test   eax,eax
c002828e:	74 10                	je     c00282a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028290:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0028298:	e9 93 00 00 00       	jmp    c0028330 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002829d:	8d 76 00             	lea    esi,[esi+0x0]
c00282a0:	83 ec 08             	sub    esp,0x8
c00282a3:	68 d8 35 03 c0       	push   0xc00335d8
c00282a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00282ac:	e8 9f 84 fd ff       	call   c0000750 <strcmp>
c00282b1:	83 c4 10             	add    esp,0x10
c00282b4:	85 c0                	test   eax,eax
c00282b6:	0f 94 c0             	sete   al
c00282b9:	0f b6 c0             	movzx  eax,al
c00282bc:	85 c0                	test   eax,eax
c00282be:	74 0c                	je     c00282cc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00282c0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00282c8:	eb 66                	jmp    c0028330 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00282ca:	66 90                	xchg   ax,ax
c00282cc:	83 ec 08             	sub    esp,0x8
c00282cf:	68 18 f7 02 c0       	push   0xc002f718
c00282d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00282d8:	e8 73 84 fd ff       	call   c0000750 <strcmp>
c00282dd:	83 c4 10             	add    esp,0x10
c00282e0:	85 c0                	test   eax,eax
c00282e2:	0f 94 c0             	sete   al
c00282e5:	0f b6 c0             	movzx  eax,al
c00282e8:	85 c0                	test   eax,eax
c00282ea:	74 0c                	je     c00282f8 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00282ec:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00282f4:	eb 3a                	jmp    c0028330 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00282f6:	66 90                	xchg   ax,ax
c00282f8:	83 ec 08             	sub    esp,0x8
c00282fb:	68 de 35 03 c0       	push   0xc00335de
c0028300:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028304:	e8 47 84 fd ff       	call   c0000750 <strcmp>
c0028309:	83 c4 10             	add    esp,0x10
c002830c:	85 c0                	test   eax,eax
c002830e:	0f 94 c0             	sete   al
c0028311:	0f b6 c0             	movzx  eax,al
c0028314:	85 c0                	test   eax,eax
c0028316:	74 0c                	je     c0028324 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0028318:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028320:	eb 0e                	jmp    c0028330 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028322:	66 90                	xchg   ax,ax
c0028324:	b8 08 00 00 00       	mov    eax,0x8
c0028329:	e9 ea 00 00 00       	jmp    c0028418 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002832e:	66 90                	xchg   ax,ax
c0028330:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0028337:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002833c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028340:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028347:	83 f8 ff             	cmp    eax,0xffffffff
c002834a:	75 34                	jne    c0028380 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c002834c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028350:	88 c2                	mov    dl,al
c0028352:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028357:	01 d0                	add    eax,edx
c0028359:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002835d:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028363:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028367:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002836e:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028373:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0028377:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c002837e:	eb 18                	jmp    c0028398 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028380:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028384:	88 c2                	mov    dl,al
c0028386:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002838a:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028391:	01 d0                	add    eax,edx
c0028393:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028397:	90                   	nop
c0028398:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002839c:	88 04 24             	mov    BYTE PTR [esp],al
c002839f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00283a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00283a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00283af:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00283b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00283bc:	83 ec 0c             	sub    esp,0xc
c00283bf:	68 00 20 00 00       	push   0x2000
c00283c4:	e8 e8 e1 fe ff       	call   c00165b1 <malloc>
c00283c9:	83 c4 10             	add    esp,0x10
c00283cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00283d0:	68 00 20 00 00       	push   0x2000
c00283d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283d9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00283dd:	50                   	push   eax
c00283de:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00283e2:	50                   	push   eax
c00283e3:	e8 81 d3 fd ff       	call   c0005769 <f_mkfs>
c00283e8:	83 c4 10             	add    esp,0x10
c00283eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00283ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283f4:	75 0a                	jne    c0028400 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00283f6:	b8 00 00 00 00       	mov    eax,0x0
c00283fb:	eb 1b                	jmp    c0028418 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00283fd:	8d 76 00             	lea    esi,[esi+0x0]
c0028400:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028405:	75 09                	jne    c0028410 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0028407:	b8 09 00 00 00       	mov    eax,0x9
c002840c:	eb 0a                	jmp    c0028418 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c002840e:	66 90                	xchg   ax,ax
c0028410:	b8 01 00 00 00       	mov    eax,0x1
c0028415:	8d 76 00             	lea    esi,[esi+0x0]
c0028418:	83 c4 2c             	add    esp,0x2c
c002841b:	c3                   	ret    

c002841c <FAT::tryMount(LogicalDisk*, int)>:
c002841c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0028422:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028427:	83 f8 14             	cmp    eax,0x14
c002842a:	75 18                	jne    c0028444 <FAT::tryMount(LogicalDisk*, int)+0x28>
c002842c:	83 ec 0c             	sub    esp,0xc
c002842f:	68 e4 35 03 c0       	push   0xc00335e4
c0028434:	e8 21 80 ff ff       	call   c002045a <KePanic(char const*)>
c0028439:	83 c4 10             	add    esp,0x10
c002843c:	b0 00                	mov    al,0x0
c002843e:	e9 ed 01 00 00       	jmp    c0028630 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028443:	90                   	nop
c0028444:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002844b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028451:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028457:	3d 00 02 00 00       	cmp    eax,0x200
c002845c:	74 0a                	je     c0028468 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c002845e:	b0 00                	mov    al,0x0
c0028460:	e9 cb 01 00 00       	jmp    c0028630 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028465:	8d 76 00             	lea    esi,[esi+0x0]
c0028468:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028470:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028477:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002847e:	83 f8 ff             	cmp    eax,0xffffffff
c0028481:	74 09                	je     c002848c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0028483:	b0 01                	mov    al,0x1
c0028485:	e9 a6 01 00 00       	jmp    c0028630 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002848a:	66 90                	xchg   ax,ax
c002848c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0028496:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c002849e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00284a5:	88 c2                	mov    dl,al
c00284a7:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00284ac:	01 d0                	add    eax,edx
c00284ae:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00284b5:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00284bb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00284c2:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00284c9:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00284ce:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00284d5:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00284dc:	83 ec 0c             	sub    esp,0xc
c00284df:	68 34 02 00 00       	push   0x234
c00284e4:	e8 c8 e0 fe ff       	call   c00165b1 <malloc>
c00284e9:	83 c4 10             	add    esp,0x10
c00284ec:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00284f3:	83 ec 04             	sub    esp,0x4
c00284f6:	6a 00                	push   0x0
c00284f8:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00284ff:	50                   	push   eax
c0028500:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028507:	e8 38 ba fd ff       	call   c0003f44 <f_mount>
c002850c:	83 c4 10             	add    esp,0x10
c002850f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0028516:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c002851e:	74 1c                	je     c002853c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028520:	83 ec 0c             	sub    esp,0xc
c0028523:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002852a:	e8 a2 e0 fe ff       	call   c00165d1 <rfree>
c002852f:	83 c4 10             	add    esp,0x10
c0028532:	b0 00                	mov    al,0x0
c0028534:	e9 f7 00 00 00       	jmp    c0028630 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028539:	8d 76 00             	lea    esi,[esi+0x0]
c002853c:	83 ec 04             	sub    esp,0x4
c002853f:	68 00 01 00 00       	push   0x100
c0028544:	6a 00                	push   0x0
c0028546:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c002854d:	50                   	push   eax
c002854e:	e8 9d 7f fd ff       	call   c00004f0 <memset>
c0028553:	83 c4 10             	add    esp,0x10
c0028556:	83 ec 08             	sub    esp,0x8
c0028559:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028560:	50                   	push   eax
c0028561:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028568:	50                   	push   eax
c0028569:	e8 d2 82 fd ff       	call   c0000840 <strcat>
c002856e:	83 c4 10             	add    esp,0x10
c0028571:	83 ec 08             	sub    esp,0x8
c0028574:	68 f2 35 03 c0       	push   0xc00335f2
c0028579:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028580:	50                   	push   eax
c0028581:	e8 ba 82 fd ff       	call   c0000840 <strcat>
c0028586:	83 c4 10             	add    esp,0x10
c0028589:	83 ec 04             	sub    esp,0x4
c002858c:	6a 01                	push   0x1
c002858e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028595:	50                   	push   eax
c0028596:	8d 44 24 14          	lea    eax,[esp+0x14]
c002859a:	50                   	push   eax
c002859b:	e8 06 ba fd ff       	call   c0003fa6 <f_open>
c00285a0:	83 c4 10             	add    esp,0x10
c00285a3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00285aa:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00285b1:	85 c0                	test   eax,eax
c00285b3:	74 0b                	je     c00285c0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00285b5:	78 31                	js     c00285e8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00285b7:	83 e8 04             	sub    eax,0x4
c00285ba:	83 f8 01             	cmp    eax,0x1
c00285bd:	77 29                	ja     c00285e8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00285bf:	90                   	nop
c00285c0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00285c8:	83 ec 0c             	sub    esp,0xc
c00285cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00285cf:	50                   	push   eax
c00285d0:	e8 a0 c1 fd ff       	call   c0004775 <f_close>
c00285d5:	83 c4 10             	add    esp,0x10
c00285d8:	90                   	nop
c00285d9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00285e1:	85 c0                	test   eax,eax
c00285e3:	74 43                	je     c0028628 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00285e5:	eb 31                	jmp    c0028618 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00285e7:	90                   	nop
c00285e8:	83 ec 0c             	sub    esp,0xc
c00285eb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00285f2:	e8 da df fe ff       	call   c00165d1 <rfree>
c00285f7:	83 c4 10             	add    esp,0x10
c00285fa:	83 ec 04             	sub    esp,0x4
c00285fd:	6a 00                	push   0x0
c00285ff:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028606:	50                   	push   eax
c0028607:	6a 00                	push   0x0
c0028609:	e8 36 b9 fd ff       	call   c0003f44 <f_mount>
c002860e:	83 c4 10             	add    esp,0x10
c0028611:	b0 00                	mov    al,0x0
c0028613:	eb 1b                	jmp    c0028630 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028615:	8d 76 00             	lea    esi,[esi+0x0]
c0028618:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002861d:	83 c0 01             	add    eax,0x1
c0028620:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028625:	8d 76 00             	lea    esi,[esi+0x0]
c0028628:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c002862f:	90                   	nop
c0028630:	81 c4 4c 03 00 00    	add    esp,0x34c
c0028636:	c3                   	ret    
c0028637:	90                   	nop

c0028638 <FAT::allocateSwapfile(char const*, int)>:
c0028638:	55                   	push   ebp
c0028639:	57                   	push   edi
c002863a:	56                   	push   esi
c002863b:	53                   	push   ebx
c002863c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028642:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c002864d:	83 ec 0c             	sub    esp,0xc
c0028650:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0028657:	e8 55 df fe ff       	call   c00165b1 <malloc>
c002865c:	83 c4 10             	add    esp,0x10
c002865f:	89 c7                	mov    edi,eax
c0028661:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0028666:	83 ec 04             	sub    esp,0x4
c0028669:	50                   	push   eax
c002866a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028671:	57                   	push   edi
c0028672:	e8 d1 1f ff ff       	call   c001a648 <File::File(char const*, Process*)>
c0028677:	83 c4 10             	add    esp,0x10
c002867a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028681:	83 ec 04             	sub    esp,0x4
c0028684:	8d 44 24 13          	lea    eax,[esp+0x13]
c0028688:	50                   	push   eax
c0028689:	8d 44 24 18          	lea    eax,[esp+0x18]
c002868d:	50                   	push   eax
c002868e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028695:	e8 ce 22 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c002869a:	83 c4 10             	add    esp,0x10
c002869d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00286a4:	c1 e0 14             	shl    eax,0x14
c00286a7:	89 c7                	mov    edi,eax
c00286a9:	89 c5                	mov    ebp,eax
c00286ab:	c1 fd 1f             	sar    ebp,0x1f
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286b6:	89 f9                	mov    ecx,edi
c00286b8:	31 c1                	xor    ecx,eax
c00286ba:	89 cb                	mov    ebx,ecx
c00286bc:	89 e9                	mov    ecx,ebp
c00286be:	31 d1                	xor    ecx,edx
c00286c0:	89 ce                	mov    esi,ecx
c00286c2:	89 f0                	mov    eax,esi
c00286c4:	09 d8                	or     eax,ebx
c00286c6:	0f 84 9c 00 00 00    	je     c0028768 <FAT::allocateSwapfile(char const*, int)+0x130>
c00286cc:	83 ec 0c             	sub    esp,0xc
c00286cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00286d6:	e8 59 21 ff ff       	call   c001a834 <File::unlink()>
c00286db:	83 c4 10             	add    esp,0x10
c00286de:	83 ec 08             	sub    esp,0x8
c00286e1:	6a 12                	push   0x12
c00286e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00286ea:	e8 77 1f ff ff       	call   c001a666 <File::open(FileOpenMode)>
c00286ef:	83 c4 10             	add    esp,0x10
c00286f2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00286f9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00286ff:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0028706:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c002870d:	c1 e0 14             	shl    eax,0x14
c0028710:	83 ec 04             	sub    esp,0x4
c0028713:	6a 01                	push   0x1
c0028715:	50                   	push   eax
c0028716:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c002871d:	e8 da ce fd ff       	call   c00055fc <f_expand>
c0028722:	83 c4 10             	add    esp,0x10
c0028725:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002872c:	8b 00                	mov    eax,DWORD PTR [eax]
c002872e:	83 c0 10             	add    eax,0x10
c0028731:	8b 00                	mov    eax,DWORD PTR [eax]
c0028733:	83 ec 0c             	sub    esp,0xc
c0028736:	8d 54 24 24          	lea    edx,[esp+0x24]
c002873a:	52                   	push   edx
c002873b:	8d 54 24 30          	lea    edx,[esp+0x30]
c002873f:	52                   	push   edx
c0028740:	6a 00                	push   0x0
c0028742:	68 00 04 00 00       	push   0x400
c0028747:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c002874e:	ff d0                	call   eax
c0028750:	83 c4 20             	add    esp,0x20
c0028753:	83 ec 0c             	sub    esp,0xc
c0028756:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002875d:	e8 62 1f ff ff       	call   c001a6c4 <File::close()>
c0028762:	83 c4 10             	add    esp,0x10
c0028765:	8d 76 00             	lea    esi,[esi+0x0]
c0028768:	83 ec 08             	sub    esp,0x8
c002876b:	6a 01                	push   0x1
c002876d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028774:	e8 ed 1e ff ff       	call   c001a666 <File::open(FileOpenMode)>
c0028779:	83 c4 10             	add    esp,0x10
c002877c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028783:	8b 00                	mov    eax,DWORD PTR [eax]
c0028785:	83 c0 0c             	add    eax,0xc
c0028788:	8b 00                	mov    eax,DWORD PTR [eax]
c002878a:	83 ec 0c             	sub    esp,0xc
c002878d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028791:	52                   	push   edx
c0028792:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0028796:	52                   	push   edx
c0028797:	6a 00                	push   0x0
c0028799:	6a 04                	push   0x4
c002879b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00287a2:	ff d0                	call   eax
c00287a4:	83 c4 20             	add    esp,0x20
c00287a7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00287ae:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00287b4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00287bb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00287c2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00287c5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00287cc:	83 ec 0c             	sub    esp,0xc
c00287cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00287d6:	e8 e9 1e ff ff       	call   c001a6c4 <File::close()>
c00287db:	83 c4 10             	add    esp,0x10
c00287de:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00287e5:	ba 00 00 00 00       	mov    edx,0x0
c00287ea:	81 c4 3c 04 00 00    	add    esp,0x43c
c00287f0:	5b                   	pop    ebx
c00287f1:	5e                   	pop    esi
c00287f2:	5f                   	pop    edi
c00287f3:	5d                   	pop    ebp
c00287f4:	c3                   	ret    
c00287f5:	90                   	nop
c00287f6:	66 90                	xchg   ax,ax

c00287f8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00287f8:	57                   	push   edi
c00287f9:	56                   	push   esi
c00287fa:	53                   	push   ebx
c00287fb:	81 ec 50 02 00 00    	sub    esp,0x250
c0028801:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0028809:	74 0d                	je     c0028818 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002880b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028813:	75 0f                	jne    c0028824 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028815:	8d 76 00             	lea    esi,[esi+0x0]
c0028818:	b8 04 00 00 00       	mov    eax,0x4
c002881d:	e9 3a 01 00 00       	jmp    c002895c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028822:	66 90                	xchg   ax,ax
c0028824:	83 ec 08             	sub    esp,0x8
c0028827:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002882e:	50                   	push   eax
c002882f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0028836:	e8 07 c2 fd ff       	call   c0004a42 <f_readdir>
c002883b:	83 c4 10             	add    esp,0x10
c002883e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028845:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c002884c:	83 ec 0c             	sub    esp,0xc
c002884f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028856:	83 c0 16             	add    eax,0x16
c0028859:	50                   	push   eax
c002885a:	e8 11 7d fd ff       	call   c0000570 <strlen>
c002885f:	83 c4 10             	add    esp,0x10
c0028862:	ba 00 00 00 00       	mov    edx,0x0
c0028867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002886b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002886f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0028876:	0f b6 c0             	movzx  eax,al
c0028879:	83 e0 10             	and    eax,0x10
c002887c:	74 0a                	je     c0028888 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c002887e:	b8 02 00 00 00       	mov    eax,0x2
c0028883:	eb 0b                	jmp    c0028890 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028885:	8d 76 00             	lea    esi,[esi+0x0]
c0028888:	b8 01 00 00 00       	mov    eax,0x1
c002888d:	8d 76 00             	lea    esi,[esi+0x0]
c0028890:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028894:	83 ec 08             	sub    esp,0x8
c0028897:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002889e:	83 c0 16             	add    eax,0x16
c00288a1:	50                   	push   eax
c00288a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00288a6:	83 c0 10             	add    eax,0x10
c00288a9:	50                   	push   eax
c00288aa:	e8 91 7d fd ff       	call   c0000640 <strcpy>
c00288af:	83 c4 10             	add    esp,0x10
c00288b2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00288b9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00288c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00288c4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00288cb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00288d2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00288d9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00288e0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00288e7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00288ee:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00288f5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00288fc:	89 c6                	mov    esi,eax
c00288fe:	89 d7                	mov    edi,edx
c0028900:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028902:	89 c8                	mov    eax,ecx
c0028904:	89 fa                	mov    edx,edi
c0028906:	89 f3                	mov    ebx,esi
c0028908:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002890f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0028916:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002891d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028924:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002892a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028931:	0f be c0             	movsx  eax,al
c0028934:	85 c0                	test   eax,eax
c0028936:	75 08                	jne    c0028940 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0028938:	b8 07 00 00 00       	mov    eax,0x7
c002893d:	eb 1d                	jmp    c002895c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c002893f:	90                   	nop
c0028940:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0028947:	85 c0                	test   eax,eax
c0028949:	75 09                	jne    c0028954 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c002894b:	b8 00 00 00 00       	mov    eax,0x0
c0028950:	eb 0a                	jmp    c002895c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028952:	66 90                	xchg   ax,ax
c0028954:	b8 01 00 00 00       	mov    eax,0x1
c0028959:	8d 76 00             	lea    esi,[esi+0x0]
c002895c:	81 c4 50 02 00 00    	add    esp,0x250
c0028962:	5b                   	pop    ebx
c0028963:	5e                   	pop    esi
c0028964:	5f                   	pop    edi
c0028965:	c3                   	ret    
c0028966:	66 90                	xchg   ax,ax

c0028968 <FAT::read(void*, unsigned long, void*, int*)>:
c0028968:	83 ec 1c             	sub    esp,0x1c
c002896b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028970:	74 0a                	je     c002897c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028972:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0028977:	75 0b                	jne    c0028984 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0028979:	8d 76 00             	lea    esi,[esi+0x0]
c002897c:	b8 04 00 00 00       	mov    eax,0x4
c0028981:	eb 41                	jmp    c00289c4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028983:	90                   	nop
c0028984:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028988:	50                   	push   eax
c0028989:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002898d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028991:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028995:	e8 cf b8 fd ff       	call   c0004269 <f_read>
c002899a:	83 c4 10             	add    esp,0x10
c002899d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00289a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289a5:	89 c2                	mov    edx,eax
c00289a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00289ab:	89 10                	mov    DWORD PTR [eax],edx
c00289ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00289b1:	85 c0                	test   eax,eax
c00289b3:	75 07                	jne    c00289bc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00289b5:	b8 00 00 00 00       	mov    eax,0x0
c00289ba:	eb 08                	jmp    c00289c4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00289bc:	b8 01 00 00 00       	mov    eax,0x1
c00289c1:	8d 76 00             	lea    esi,[esi+0x0]
c00289c4:	83 c4 1c             	add    esp,0x1c
c00289c7:	c3                   	ret    

c00289c8 <FAT::write(void*, unsigned long, void*, int*)>:
c00289c8:	83 ec 1c             	sub    esp,0x1c
c00289cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00289d0:	74 0a                	je     c00289dc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00289d2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00289d7:	75 0b                	jne    c00289e4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00289d9:	8d 76 00             	lea    esi,[esi+0x0]
c00289dc:	b8 04 00 00 00       	mov    eax,0x4
c00289e1:	eb 41                	jmp    c0028a24 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00289e3:	90                   	nop
c00289e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00289e8:	50                   	push   eax
c00289e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00289ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00289f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00289f5:	e8 6e ba fd ff       	call   c0004468 <f_write>
c00289fa:	83 c4 10             	add    esp,0x10
c00289fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028a05:	89 c2                	mov    edx,eax
c0028a07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a0b:	89 10                	mov    DWORD PTR [eax],edx
c0028a0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a11:	85 c0                	test   eax,eax
c0028a13:	75 07                	jne    c0028a1c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028a15:	b8 00 00 00 00       	mov    eax,0x0
c0028a1a:	eb 08                	jmp    c0028a24 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028a1c:	b8 01 00 00 00       	mov    eax,0x1
c0028a21:	8d 76 00             	lea    esi,[esi+0x0]
c0028a24:	83 c4 1c             	add    esp,0x1c
c0028a27:	c3                   	ret    

c0028a28 <FAT::close(void*)>:
c0028a28:	83 ec 1c             	sub    esp,0x1c
c0028a2b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a30:	75 0a                	jne    c0028a3c <FAT::close(void*)+0x14>
c0028a32:	b8 04 00 00 00       	mov    eax,0x4
c0028a37:	eb 3f                	jmp    c0028a78 <FAT::close(void*)+0x50>
c0028a39:	8d 76 00             	lea    esi,[esi+0x0]
c0028a3c:	83 ec 0c             	sub    esp,0xc
c0028a3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a43:	e8 2d bd fd ff       	call   c0004775 <f_close>
c0028a48:	83 c4 10             	add    esp,0x10
c0028a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028a4f:	83 ec 0c             	sub    esp,0xc
c0028a52:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a56:	e8 66 db fe ff       	call   c00165c1 <free>
c0028a5b:	83 c4 10             	add    esp,0x10
c0028a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a62:	85 c0                	test   eax,eax
c0028a64:	75 0a                	jne    c0028a70 <FAT::close(void*)+0x48>
c0028a66:	b8 00 00 00 00       	mov    eax,0x0
c0028a6b:	eb 0b                	jmp    c0028a78 <FAT::close(void*)+0x50>
c0028a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a70:	b8 01 00 00 00       	mov    eax,0x1
c0028a75:	8d 76 00             	lea    esi,[esi+0x0]
c0028a78:	83 c4 1c             	add    esp,0x1c
c0028a7b:	c3                   	ret    

c0028a7c <FAT::closeDir(void*)>:
c0028a7c:	83 ec 1c             	sub    esp,0x1c
c0028a7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028a84:	75 0a                	jne    c0028a90 <FAT::closeDir(void*)+0x14>
c0028a86:	b8 04 00 00 00       	mov    eax,0x4
c0028a8b:	eb 3f                	jmp    c0028acc <FAT::closeDir(void*)+0x50>
c0028a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a97:	e8 84 bf fd ff       	call   c0004a20 <f_closedir>
c0028a9c:	83 c4 10             	add    esp,0x10
c0028a9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028aa3:	83 ec 0c             	sub    esp,0xc
c0028aa6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028aaa:	e8 12 db fe ff       	call   c00165c1 <free>
c0028aaf:	83 c4 10             	add    esp,0x10
c0028ab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028ab6:	85 c0                	test   eax,eax
c0028ab8:	75 0a                	jne    c0028ac4 <FAT::closeDir(void*)+0x48>
c0028aba:	b8 00 00 00 00       	mov    eax,0x0
c0028abf:	eb 0b                	jmp    c0028acc <FAT::closeDir(void*)+0x50>
c0028ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ac4:	b8 01 00 00 00       	mov    eax,0x1
c0028ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0028acc:	83 c4 1c             	add    esp,0x1c
c0028acf:	c3                   	ret    

c0028ad0 <FAT::truncate(void*, unsigned long long)>:
c0028ad0:	83 ec 2c             	sub    esp,0x2c
c0028ad3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028ad7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028adb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028adf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028ae3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028ae8:	75 0a                	jne    c0028af4 <FAT::truncate(void*, unsigned long long)+0x24>
c0028aea:	b8 04 00 00 00       	mov    eax,0x4
c0028aef:	eb 47                	jmp    c0028b38 <FAT::truncate(void*, unsigned long long)+0x68>
c0028af1:	8d 76 00             	lea    esi,[esi+0x0]
c0028af4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028af8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0028afb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028aff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0028b07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b0b:	83 ec 08             	sub    esp,0x8
c0028b0e:	50                   	push   eax
c0028b0f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028b13:	e8 8c bc fd ff       	call   c00047a4 <f_lseek>
c0028b18:	83 c4 10             	add    esp,0x10
c0028b1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b23:	85 c0                	test   eax,eax
c0028b25:	75 09                	jne    c0028b30 <FAT::truncate(void*, unsigned long long)+0x60>
c0028b27:	b8 00 00 00 00       	mov    eax,0x0
c0028b2c:	eb 0a                	jmp    c0028b38 <FAT::truncate(void*, unsigned long long)+0x68>
c0028b2e:	66 90                	xchg   ax,ax
c0028b30:	b8 01 00 00 00       	mov    eax,0x1
c0028b35:	8d 76 00             	lea    esi,[esi+0x0]
c0028b38:	83 c4 2c             	add    esp,0x2c
c0028b3b:	c3                   	ret    

c0028b3c <FAT::seek(void*, unsigned long long)>:
c0028b3c:	83 ec 2c             	sub    esp,0x2c
c0028b3f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0028b47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028b4f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028b54:	75 0a                	jne    c0028b60 <FAT::seek(void*, unsigned long long)+0x24>
c0028b56:	b8 04 00 00 00       	mov    eax,0x4
c0028b5b:	eb 33                	jmp    c0028b90 <FAT::seek(void*, unsigned long long)+0x54>
c0028b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b64:	83 ec 08             	sub    esp,0x8
c0028b67:	50                   	push   eax
c0028b68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028b6c:	e8 33 bc fd ff       	call   c00047a4 <f_lseek>
c0028b71:	83 c4 10             	add    esp,0x10
c0028b74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028b7c:	85 c0                	test   eax,eax
c0028b7e:	75 08                	jne    c0028b88 <FAT::seek(void*, unsigned long long)+0x4c>
c0028b80:	b8 00 00 00 00       	mov    eax,0x0
c0028b85:	eb 09                	jmp    c0028b90 <FAT::seek(void*, unsigned long long)+0x54>
c0028b87:	90                   	nop
c0028b88:	b8 01 00 00 00       	mov    eax,0x1
c0028b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0028b90:	83 c4 2c             	add    esp,0x2c
c0028b93:	c3                   	ret    

c0028b94 <fatWrapperReadDisk>:
c0028b94:	53                   	push   ebx
c0028b95:	83 ec 18             	sub    esp,0x18
c0028b98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028b9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028ba0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028ba5:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028bac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028bb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028bb4:	ba 00 00 00 00       	mov    edx,0x0
c0028bb9:	83 ec 0c             	sub    esp,0xc
c0028bbc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028bc0:	53                   	push   ebx
c0028bc1:	52                   	push   edx
c0028bc2:	50                   	push   eax
c0028bc3:	51                   	push   ecx
c0028bc4:	e8 eb 3c ff ff       	call   c001c8b4 <LogicalDisk::read(unsigned long long, int, void*)>
c0028bc9:	83 c4 20             	add    esp,0x20
c0028bcc:	83 c4 18             	add    esp,0x18
c0028bcf:	5b                   	pop    ebx
c0028bd0:	c3                   	ret    
c0028bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0028bd4 <fatWrapperWriteDisk>:
c0028bd4:	53                   	push   ebx
c0028bd5:	83 ec 18             	sub    esp,0x18
c0028bd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028bdc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028be0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028be5:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028bec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028bf0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028bf4:	ba 00 00 00 00       	mov    edx,0x0
c0028bf9:	83 ec 0c             	sub    esp,0xc
c0028bfc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028c00:	53                   	push   ebx
c0028c01:	52                   	push   edx
c0028c02:	50                   	push   eax
c0028c03:	51                   	push   ecx
c0028c04:	e8 17 3d ff ff       	call   c001c920 <LogicalDisk::write(unsigned long long, int, void*)>
c0028c09:	83 c4 20             	add    esp,0x20
c0028c0c:	83 c4 18             	add    esp,0x18
c0028c0f:	5b                   	pop    ebx
c0028c10:	c3                   	ret    
c0028c11:	8d 76 00             	lea    esi,[esi+0x0]

c0028c14 <fatWrapperIoctl>:
c0028c14:	53                   	push   ebx
c0028c15:	83 ec 28             	sub    esp,0x28
c0028c18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028c1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028c20:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028c24:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028c28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c2d:	83 f8 02             	cmp    eax,0x2
c0028c30:	75 32                	jne    c0028c64 <fatWrapperIoctl+0x50>
c0028c32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028c36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028c3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c3f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028c46:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028c4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028c52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0028c56:	66 89 02             	mov    WORD PTR [edx],ax
c0028c59:	b8 00 00 00 00       	mov    eax,0x0
c0028c5e:	e9 c5 00 00 00       	jmp    c0028d28 <fatWrapperIoctl+0x114>
c0028c63:	90                   	nop
c0028c64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028c69:	83 f8 01             	cmp    eax,0x1
c0028c6c:	75 6a                	jne    c0028cd8 <fatWrapperIoctl+0xc4>
c0028c6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028c72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028c76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028c7b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028c82:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028c88:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028c8e:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028c94:	89 c8                	mov    eax,ecx
c0028c96:	89 da                	mov    edx,ebx
c0028c98:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028c9c:	c1 e0 0a             	shl    eax,0xa
c0028c9f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028ca4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028cab:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028cb1:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028cb7:	89 cb                	mov    ebx,ecx
c0028cb9:	c1 fb 1f             	sar    ebx,0x1f
c0028cbc:	53                   	push   ebx
c0028cbd:	51                   	push   ecx
c0028cbe:	52                   	push   edx
c0028cbf:	50                   	push   eax
c0028cc0:	e8 ab 5b 00 00       	call   c002e870 <__udivdi3>
c0028cc5:	83 c4 10             	add    esp,0x10
c0028cc8:	89 c2                	mov    edx,eax
c0028cca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028cce:	89 10                	mov    DWORD PTR [eax],edx
c0028cd0:	b8 00 00 00 00       	mov    eax,0x0
c0028cd5:	eb 51                	jmp    c0028d28 <fatWrapperIoctl+0x114>
c0028cd7:	90                   	nop
c0028cd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028cdd:	85 c0                	test   eax,eax
c0028cdf:	75 07                	jne    c0028ce8 <fatWrapperIoctl+0xd4>
c0028ce1:	b8 00 00 00 00       	mov    eax,0x0
c0028ce6:	eb 40                	jmp    c0028d28 <fatWrapperIoctl+0x114>
c0028ce8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ced:	83 f8 03             	cmp    eax,0x3
c0028cf0:	75 1a                	jne    c0028d0c <fatWrapperIoctl+0xf8>
c0028cf2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028cf6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028cfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028cfe:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028d04:	b8 00 00 00 00       	mov    eax,0x0
c0028d09:	eb 1d                	jmp    c0028d28 <fatWrapperIoctl+0x114>
c0028d0b:	90                   	nop
c0028d0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028d11:	83 f8 04             	cmp    eax,0x4
c0028d14:	75 0a                	jne    c0028d20 <fatWrapperIoctl+0x10c>
c0028d16:	b8 00 00 00 00       	mov    eax,0x0
c0028d1b:	eb 0b                	jmp    c0028d28 <fatWrapperIoctl+0x114>
c0028d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d20:	b8 04 00 00 00       	mov    eax,0x4
c0028d25:	8d 76 00             	lea    esi,[esi+0x0]
c0028d28:	83 c4 28             	add    esp,0x28
c0028d2b:	5b                   	pop    ebx
c0028d2c:	c3                   	ret    
c0028d2d:	90                   	nop
c0028d2e:	66 90                	xchg   ax,ax

c0028d30 <FAT::FAT()>:
c0028d30:	83 ec 1c             	sub    esp,0x1c
c0028d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028d37:	83 ec 0c             	sub    esp,0xc
c0028d3a:	50                   	push   eax
c0028d3b:	e8 66 15 ff ff       	call   c001a2a6 <Filesystem::Filesystem()>
c0028d40:	83 c4 10             	add    esp,0x10
c0028d43:	ba 08 36 03 c0       	mov    edx,0xc0033608
c0028d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028d4c:	89 10                	mov    DWORD PTR [eax],edx
c0028d4e:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028d58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028d60:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028d65:	7f 19                	jg     c0028d80 <FAT::FAT()+0x50>
c0028d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028d6b:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028d76:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028d7b:	eb e3                	jmp    c0028d60 <FAT::FAT()+0x30>
c0028d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0028d80:	90                   	nop
c0028d81:	83 c4 1c             	add    esp,0x1c
c0028d84:	c3                   	ret    
c0028d85:	90                   	nop
c0028d86:	66 90                	xchg   ax,ax

c0028d88 <FAT::fixFilepath(char*)>:
c0028d88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d8c:	8a 00                	mov    al,BYTE PTR [eax]
c0028d8e:	0f be c0             	movsx  eax,al
c0028d91:	83 f8 40             	cmp    eax,0x40
c0028d94:	7e 2e                	jle    c0028dc4 <FAT::fixFilepath(char*)+0x3c>
c0028d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028d9a:	8a 00                	mov    al,BYTE PTR [eax]
c0028d9c:	83 e8 41             	sub    eax,0x41
c0028d9f:	88 c2                	mov    dl,al
c0028da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028da5:	88 10                	mov    BYTE PTR [eax],dl
c0028da7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dab:	8a 00                	mov    al,BYTE PTR [eax]
c0028dad:	0f be c0             	movsx  eax,al
c0028db0:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028db7:	83 c0 30             	add    eax,0x30
c0028dba:	88 c2                	mov    dl,al
c0028dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dc0:	88 10                	mov    BYTE PTR [eax],dl
c0028dc2:	66 90                	xchg   ax,ax
c0028dc4:	90                   	nop
c0028dc5:	c3                   	ret    
c0028dc6:	66 90                	xchg   ax,ax

c0028dc8 <FAT::open(char const*, void**, FileOpenMode)>:
c0028dc8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028dce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028dd6:	74 0c                	je     c0028de4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028dd8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028de0:	75 0e                	jne    c0028df0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028de2:	66 90                	xchg   ax,ax
c0028de4:	b8 04 00 00 00       	mov    eax,0x4
c0028de9:	e9 46 01 00 00       	jmp    c0028f34 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028dee:	66 90                	xchg   ax,ax
c0028df0:	83 ec 08             	sub    esp,0x8
c0028df3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028dfa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028dfe:	50                   	push   eax
c0028dff:	e8 3c 78 fd ff       	call   c0000640 <strcpy>
c0028e04:	83 c4 10             	add    esp,0x10
c0028e07:	83 ec 08             	sub    esp,0x8
c0028e0a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028e0e:	50                   	push   eax
c0028e0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e16:	e8 6d ff ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028e26:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028e2d:	83 e0 01             	and    eax,0x1
c0028e30:	74 12                	je     c0028e44 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028e32:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028e39:	83 c8 01             	or     eax,0x1
c0028e3c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028e43:	90                   	nop
c0028e44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028e4b:	83 e0 04             	and    eax,0x4
c0028e4e:	74 24                	je     c0028e74 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028e50:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028e57:	83 c8 30             	or     eax,0x30
c0028e5a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028e61:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028e68:	83 c8 02             	or     eax,0x2
c0028e6b:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028e72:	66 90                	xchg   ax,ax
c0028e74:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028e7b:	83 e0 02             	and    eax,0x2
c0028e7e:	74 14                	je     c0028e94 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028e80:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028e87:	83 c8 02             	or     eax,0x2
c0028e8a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028e91:	8d 76 00             	lea    esi,[esi+0x0]
c0028e94:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028e9b:	83 e0 08             	and    eax,0x8
c0028e9e:	74 14                	je     c0028eb4 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028ea0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ea7:	83 c8 04             	or     eax,0x4
c0028eaa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0028eb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ebb:	83 e0 10             	and    eax,0x10
c0028ebe:	74 14                	je     c0028ed4 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028ec0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ec7:	83 c8 08             	or     eax,0x8
c0028eca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	68 28 02 00 00       	push   0x228
c0028edc:	e8 d0 d6 fe ff       	call   c00165b1 <malloc>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	89 c2                	mov    edx,eax
c0028ee6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028eed:	89 10                	mov    DWORD PTR [eax],edx
c0028eef:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028ef7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028efe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f00:	83 ec 04             	sub    esp,0x4
c0028f03:	52                   	push   edx
c0028f04:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028f08:	52                   	push   edx
c0028f09:	50                   	push   eax
c0028f0a:	e8 97 b0 fd ff       	call   c0003fa6 <f_open>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028f19:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028f21:	74 09                	je     c0028f2c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028f23:	b8 01 00 00 00       	mov    eax,0x1
c0028f28:	eb 0a                	jmp    c0028f34 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028f2a:	66 90                	xchg   ax,ax
c0028f2c:	b8 00 00 00 00       	mov    eax,0x0
c0028f31:	8d 76 00             	lea    esi,[esi+0x0]
c0028f34:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028f3a:	c3                   	ret    
c0028f3b:	90                   	nop

c0028f3c <FAT::openDir(char const*, void**)>:
c0028f3c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028f42:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028f4a:	74 0c                	je     c0028f58 <FAT::openDir(char const*, void**)+0x1c>
c0028f4c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028f54:	75 0e                	jne    c0028f64 <FAT::openDir(char const*, void**)+0x28>
c0028f56:	66 90                	xchg   ax,ax
c0028f58:	b8 04 00 00 00       	mov    eax,0x4
c0028f5d:	e9 82 00 00 00       	jmp    c0028fe4 <FAT::openDir(char const*, void**)+0xa8>
c0028f62:	66 90                	xchg   ax,ax
c0028f64:	83 ec 08             	sub    esp,0x8
c0028f67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f72:	50                   	push   eax
c0028f73:	e8 c8 76 fd ff       	call   c0000640 <strcpy>
c0028f78:	83 c4 10             	add    esp,0x10
c0028f7b:	83 ec 08             	sub    esp,0x8
c0028f7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f82:	50                   	push   eax
c0028f83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f8a:	e8 f9 fd ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0028f8f:	83 c4 10             	add    esp,0x10
c0028f92:	83 ec 0c             	sub    esp,0xc
c0028f95:	6a 30                	push   0x30
c0028f97:	e8 15 d6 fe ff       	call   c00165b1 <malloc>
c0028f9c:	83 c4 10             	add    esp,0x10
c0028f9f:	89 c2                	mov    edx,eax
c0028fa1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028fa8:	89 10                	mov    DWORD PTR [eax],edx
c0028faa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028fb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fb3:	83 ec 08             	sub    esp,0x8
c0028fb6:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028fba:	52                   	push   edx
c0028fbb:	50                   	push   eax
c0028fbc:	e8 94 b9 fd ff       	call   c0004955 <f_opendir>
c0028fc1:	83 c4 10             	add    esp,0x10
c0028fc4:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028fcb:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028fd3:	74 07                	je     c0028fdc <FAT::openDir(char const*, void**)+0xa0>
c0028fd5:	b8 01 00 00 00       	mov    eax,0x1
c0028fda:	eb 08                	jmp    c0028fe4 <FAT::openDir(char const*, void**)+0xa8>
c0028fdc:	b8 00 00 00 00       	mov    eax,0x0
c0028fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0028fe4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028fea:	c3                   	ret    
c0028feb:	90                   	nop

c0028fec <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028fec:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028ff2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028ffa:	75 0c                	jne    c0029008 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028ffc:	b8 04 00 00 00       	mov    eax,0x4
c0029001:	e9 d6 00 00 00       	jmp    c00290dc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029006:	66 90                	xchg   ax,ax
c0029008:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0029010:	75 0a                	jne    c002901c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0029012:	b8 04 00 00 00       	mov    eax,0x4
c0029017:	e9 c0 00 00 00       	jmp    c00290dc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c002901c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0029024:	75 0a                	jne    c0029030 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0029026:	b8 04 00 00 00       	mov    eax,0x4
c002902b:	e9 ac 00 00 00       	jmp    c00290dc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0029030:	83 ec 08             	sub    esp,0x8
c0029033:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002903a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029041:	50                   	push   eax
c0029042:	e8 f9 75 fd ff       	call   c0000640 <strcpy>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	83 ec 08             	sub    esp,0x8
c002904d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0029054:	50                   	push   eax
c0029055:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002905c:	e8 27 fd ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0029061:	83 c4 10             	add    esp,0x10
c0029064:	83 ec 08             	sub    esp,0x8
c0029067:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002906b:	50                   	push   eax
c002906c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0029073:	50                   	push   eax
c0029074:	e8 5b ba fd ff       	call   c0004ad4 <f_stat>
c0029079:	83 c4 10             	add    esp,0x10
c002907c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029083:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002908a:	85 c0                	test   eax,eax
c002908c:	74 0a                	je     c0029098 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c002908e:	83 f8 04             	cmp    eax,0x4
c0029091:	74 39                	je     c00290cc <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029093:	eb 3f                	jmp    c00290d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0029095:	8d 76 00             	lea    esi,[esi+0x0]
c0029098:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002909c:	0f b6 c0             	movzx  eax,al
c002909f:	83 e0 10             	and    eax,0x10
c00290a2:	0f 95 c2             	setne  dl
c00290a5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00290ac:	88 10                	mov    BYTE PTR [eax],dl
c00290ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290b2:	ba 00 00 00 00       	mov    edx,0x0
c00290b7:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00290be:	89 01                	mov    DWORD PTR [ecx],eax
c00290c0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00290c3:	b8 00 00 00 00       	mov    eax,0x0
c00290c8:	eb 12                	jmp    c00290dc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00290ca:	66 90                	xchg   ax,ax
c00290cc:	b8 02 00 00 00       	mov    eax,0x2
c00290d1:	eb 09                	jmp    c00290dc <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00290d3:	90                   	nop
c00290d4:	b8 01 00 00 00       	mov    eax,0x1
c00290d9:	8d 76 00             	lea    esi,[esi+0x0]
c00290dc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00290e2:	c3                   	ret    
c00290e3:	90                   	nop

c00290e4 <FAT::unlink(char const*)>:
c00290e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00290ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00290f2:	75 08                	jne    c00290fc <FAT::unlink(char const*)+0x18>
c00290f4:	b8 04 00 00 00       	mov    eax,0x4
c00290f9:	eb 61                	jmp    c002915c <FAT::unlink(char const*)+0x78>
c00290fb:	90                   	nop
c00290fc:	83 ec 08             	sub    esp,0x8
c00290ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029106:	8d 44 24 18          	lea    eax,[esp+0x18]
c002910a:	50                   	push   eax
c002910b:	e8 30 75 fd ff       	call   c0000640 <strcpy>
c0029110:	83 c4 10             	add    esp,0x10
c0029113:	83 ec 08             	sub    esp,0x8
c0029116:	8d 44 24 14          	lea    eax,[esp+0x14]
c002911a:	50                   	push   eax
c002911b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029122:	e8 61 fc ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0029127:	83 c4 10             	add    esp,0x10
c002912a:	83 ec 0c             	sub    esp,0xc
c002912d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029131:	50                   	push   eax
c0029132:	e8 0f bc fd ff       	call   c0004d46 <f_unlink>
c0029137:	83 c4 10             	add    esp,0x10
c002913a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029141:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029148:	85 c0                	test   eax,eax
c002914a:	75 08                	jne    c0029154 <FAT::unlink(char const*)+0x70>
c002914c:	b8 00 00 00 00       	mov    eax,0x0
c0029151:	eb 09                	jmp    c002915c <FAT::unlink(char const*)+0x78>
c0029153:	90                   	nop
c0029154:	b8 01 00 00 00       	mov    eax,0x1
c0029159:	8d 76 00             	lea    esi,[esi+0x0]
c002915c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029162:	c3                   	ret    
c0029163:	90                   	nop

c0029164 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0029164:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002916a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0029171:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0029178:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002917c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0029180:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029188:	75 0a                	jne    c0029194 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002918a:	b8 04 00 00 00       	mov    eax,0x4
c002918f:	e9 7c 01 00 00       	jmp    c0029310 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0029194:	83 ec 08             	sub    esp,0x8
c0029197:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002919e:	8d 44 24 24          	lea    eax,[esp+0x24]
c00291a2:	50                   	push   eax
c00291a3:	e8 98 74 fd ff       	call   c0000640 <strcpy>
c00291a8:	83 c4 10             	add    esp,0x10
c00291ab:	83 ec 08             	sub    esp,0x8
c00291ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00291b2:	50                   	push   eax
c00291b3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00291ba:	e8 c9 fb ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c00291bf:	83 c4 10             	add    esp,0x10
c00291c2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00291ca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00291d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00291d7:	83 e0 01             	and    eax,0x1
c00291da:	74 14                	je     c00291f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c00291dc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00291e3:	83 c8 01             	or     eax,0x1
c00291e6:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00291ed:	8d 76 00             	lea    esi,[esi+0x0]
c00291f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00291f5:	83 e0 02             	and    eax,0x2
c00291f8:	74 12                	je     c002920c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c00291fa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029201:	83 c8 20             	or     eax,0x20
c0029204:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c002920b:	90                   	nop
c002920c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029211:	83 e0 04             	and    eax,0x4
c0029214:	74 12                	je     c0029228 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0029216:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002921d:	83 c8 04             	or     eax,0x4
c0029220:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029227:	90                   	nop
c0029228:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002922d:	83 e0 08             	and    eax,0x8
c0029230:	74 12                	je     c0029244 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0029232:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029239:	83 c8 02             	or     eax,0x2
c002923c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029243:	90                   	nop
c0029244:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029249:	83 e0 01             	and    eax,0x1
c002924c:	74 12                	je     c0029260 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c002924e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029255:	83 c8 01             	or     eax,0x1
c0029258:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002925f:	90                   	nop
c0029260:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029265:	83 e0 02             	and    eax,0x2
c0029268:	74 12                	je     c002927c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c002926a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029271:	83 c8 20             	or     eax,0x20
c0029274:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002927b:	90                   	nop
c002927c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029281:	83 e0 04             	and    eax,0x4
c0029284:	74 12                	je     c0029298 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0029286:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c002928d:	83 c8 04             	or     eax,0x4
c0029290:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029297:	90                   	nop
c0029298:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002929d:	83 e0 08             	and    eax,0x8
c00292a0:	74 12                	je     c00292b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c00292a2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00292a9:	83 c8 02             	or     eax,0x2
c00292ac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292b3:	90                   	nop
c00292b4:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c00292bb:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00292c2:	09 d0                	or     eax,edx
c00292c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00292cb:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00292d3:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00292db:	83 ec 04             	sub    esp,0x4
c00292de:	52                   	push   edx
c00292df:	50                   	push   eax
c00292e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00292e4:	50                   	push   eax
c00292e5:	e8 d1 be fd ff       	call   c00051bb <f_chmod>
c00292ea:	83 c4 10             	add    esp,0x10
c00292ed:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00292f4:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00292fb:	85 c0                	test   eax,eax
c00292fd:	75 09                	jne    c0029308 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c00292ff:	b8 00 00 00 00       	mov    eax,0x0
c0029304:	eb 0a                	jmp    c0029310 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0029306:	66 90                	xchg   ax,ax
c0029308:	b8 01 00 00 00       	mov    eax,0x1
c002930d:	8d 76 00             	lea    esi,[esi+0x0]
c0029310:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029316:	c3                   	ret    
c0029317:	90                   	nop

c0029318 <FAT::rename(char const*, char const*)>:
c0029318:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002931e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029326:	74 0c                	je     c0029334 <FAT::rename(char const*, char const*)+0x1c>
c0029328:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029330:	75 0e                	jne    c0029340 <FAT::rename(char const*, char const*)+0x28>
c0029332:	66 90                	xchg   ax,ax
c0029334:	b8 04 00 00 00       	mov    eax,0x4
c0029339:	e9 9e 00 00 00       	jmp    c00293dc <FAT::rename(char const*, char const*)+0xc4>
c002933e:	66 90                	xchg   ax,ax
c0029340:	83 ec 08             	sub    esp,0x8
c0029343:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002934a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029351:	50                   	push   eax
c0029352:	e8 e9 72 fd ff       	call   c0000640 <strcpy>
c0029357:	83 c4 10             	add    esp,0x10
c002935a:	83 ec 08             	sub    esp,0x8
c002935d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029364:	50                   	push   eax
c0029365:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002936c:	e8 17 fa ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0029371:	83 c4 10             	add    esp,0x10
c0029374:	83 ec 08             	sub    esp,0x8
c0029377:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002937e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029382:	50                   	push   eax
c0029383:	e8 b8 72 fd ff       	call   c0000640 <strcpy>
c0029388:	83 c4 10             	add    esp,0x10
c002938b:	83 ec 08             	sub    esp,0x8
c002938e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029392:	50                   	push   eax
c0029393:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002939a:	e8 e9 f9 ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c002939f:	83 c4 10             	add    esp,0x10
c00293a2:	83 ec 08             	sub    esp,0x8
c00293a5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00293a9:	50                   	push   eax
c00293aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00293b1:	50                   	push   eax
c00293b2:	e8 4c bc fd ff       	call   c0005003 <f_rename>
c00293b7:	83 c4 10             	add    esp,0x10
c00293ba:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00293c1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00293c8:	85 c0                	test   eax,eax
c00293ca:	75 08                	jne    c00293d4 <FAT::rename(char const*, char const*)+0xbc>
c00293cc:	b8 00 00 00 00       	mov    eax,0x0
c00293d1:	eb 09                	jmp    c00293dc <FAT::rename(char const*, char const*)+0xc4>
c00293d3:	90                   	nop
c00293d4:	b8 01 00 00 00       	mov    eax,0x1
c00293d9:	8d 76 00             	lea    esi,[esi+0x0]
c00293dc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00293e2:	c3                   	ret    
c00293e3:	90                   	nop

c00293e4 <FAT::mkdir(char const*)>:
c00293e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00293ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00293f2:	75 08                	jne    c00293fc <FAT::mkdir(char const*)+0x18>
c00293f4:	b8 04 00 00 00       	mov    eax,0x4
c00293f9:	eb 61                	jmp    c002945c <FAT::mkdir(char const*)+0x78>
c00293fb:	90                   	nop
c00293fc:	83 ec 08             	sub    esp,0x8
c00293ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029406:	8d 44 24 18          	lea    eax,[esp+0x18]
c002940a:	50                   	push   eax
c002940b:	e8 30 72 fd ff       	call   c0000640 <strcpy>
c0029410:	83 c4 10             	add    esp,0x10
c0029413:	83 ec 08             	sub    esp,0x8
c0029416:	8d 44 24 14          	lea    eax,[esp+0x14]
c002941a:	50                   	push   eax
c002941b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029422:	e8 61 f9 ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0029427:	83 c4 10             	add    esp,0x10
c002942a:	83 ec 0c             	sub    esp,0xc
c002942d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029431:	50                   	push   eax
c0029432:	e8 31 ba fd ff       	call   c0004e68 <f_mkdir>
c0029437:	83 c4 10             	add    esp,0x10
c002943a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029441:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029448:	85 c0                	test   eax,eax
c002944a:	75 08                	jne    c0029454 <FAT::mkdir(char const*)+0x70>
c002944c:	b8 00 00 00 00       	mov    eax,0x0
c0029451:	eb 09                	jmp    c002945c <FAT::mkdir(char const*)+0x78>
c0029453:	90                   	nop
c0029454:	b8 01 00 00 00       	mov    eax,0x1
c0029459:	8d 76 00             	lea    esi,[esi+0x0]
c002945c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029462:	c3                   	ret    
c0029463:	90                   	nop

c0029464 <FAT::exists(char const*)>:
c0029464:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002946a:	83 ec 08             	sub    esp,0x8
c002946d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029474:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029478:	50                   	push   eax
c0029479:	e8 c2 71 fd ff       	call   c0000640 <strcpy>
c002947e:	83 c4 10             	add    esp,0x10
c0029481:	83 ec 08             	sub    esp,0x8
c0029484:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029488:	50                   	push   eax
c0029489:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029490:	e8 f3 f8 ff ff       	call   c0028d88 <FAT::fixFilepath(char*)>
c0029495:	83 c4 10             	add    esp,0x10
c0029498:	83 ec 08             	sub    esp,0x8
c002949b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00294a2:	50                   	push   eax
c00294a3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00294a7:	50                   	push   eax
c00294a8:	e8 27 b6 fd ff       	call   c0004ad4 <f_stat>
c00294ad:	83 c4 10             	add    esp,0x10
c00294b0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00294b7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00294be:	85 c0                	test   eax,eax
c00294c0:	75 06                	jne    c00294c8 <FAT::exists(char const*)+0x64>
c00294c2:	b0 01                	mov    al,0x1
c00294c4:	eb 06                	jmp    c00294cc <FAT::exists(char const*)+0x68>
c00294c6:	66 90                	xchg   ax,ax
c00294c8:	b0 00                	mov    al,0x0
c00294ca:	66 90                	xchg   ax,ax
c00294cc:	81 c4 2c 02 00 00    	add    esp,0x22c
c00294d2:	c3                   	ret    
c00294d3:	90                   	nop

c00294d4 <isoReadDiscSectorHelper>:
c00294d4:	83 ec 2c             	sub    esp,0x2c
c00294d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00294db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00294df:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00294e4:	83 e8 41             	sub    eax,0x41
c00294e7:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00294ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00294f2:	ba 00 00 00 00       	mov    edx,0x0
c00294f7:	83 ec 0c             	sub    esp,0xc
c00294fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00294fe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029502:	52                   	push   edx
c0029503:	50                   	push   eax
c0029504:	51                   	push   ecx
c0029505:	e8 aa 33 ff ff       	call   c001c8b4 <LogicalDisk::read(unsigned long long, int, void*)>
c002950a:	83 c4 20             	add    esp,0x20
c002950d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029511:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029516:	74 0c                	je     c0029524 <isoReadDiscSectorHelper+0x50>
c0029518:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002951c:	c1 e0 0b             	shl    eax,0xb
c002951f:	eb 0b                	jmp    c002952c <isoReadDiscSectorHelper+0x58>
c0029521:	8d 76 00             	lea    esi,[esi+0x0]
c0029524:	b8 00 00 00 00       	mov    eax,0x0
c0029529:	8d 76 00             	lea    esi,[esi+0x0]
c002952c:	83 c4 2c             	add    esp,0x2c
c002952f:	c3                   	ret    

c0029530 <iso_kprintf>:
c0029530:	83 ec 0c             	sub    esp,0xc
c0029533:	83 ec 08             	sub    esp,0x8
c0029536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002953a:	68 b6 33 03 c0       	push   0xc00333b6
c002953f:	e8 fd fe fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0029544:	83 c4 10             	add    esp,0x10
c0029547:	90                   	nop
c0029548:	83 c4 0c             	add    esp,0xc
c002954b:	c3                   	ret    

c002954c <iso_kprintfd>:
c002954c:	83 ec 0c             	sub    esp,0xc
c002954f:	83 ec 08             	sub    esp,0x8
c0029552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029556:	68 ea 19 03 c0       	push   0xc00319ea
c002955b:	e8 e1 fe fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0029560:	83 c4 10             	add    esp,0x10
c0029563:	90                   	nop
c0029564:	83 c4 0c             	add    esp,0xc
c0029567:	c3                   	ret    

c0029568 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0029568:	b8 08 00 00 00       	mov    eax,0x8
c002956d:	c3                   	ret    

c002956e <ISO9660::truncate(void*, unsigned long long)>:
c002956e:	b8 01 00 00 00       	mov    eax,0x1
c0029573:	c3                   	ret    

c0029574 <ISO9660::getName()>:
c0029574:	b8 6c 36 03 c0       	mov    eax,0xc003366c
c0029579:	c3                   	ret    

c002957a <ISO9660::closeDir(void*)>:
c002957a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029580:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0029583:	90                   	nop

c0029584 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029584:	b8 01 00 00 00       	mov    eax,0x1
c0029589:	c3                   	ret    

c002958a <ISO9660::unlink(char const*)>:
c002958a:	b8 01 00 00 00       	mov    eax,0x1
c002958f:	c3                   	ret    

c0029590 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0029590:	b8 03 00 00 00       	mov    eax,0x3
c0029595:	c3                   	ret    

c0029596 <ISO9660::rename(char const*, char const*)>:
c0029596:	b8 01 00 00 00       	mov    eax,0x1
c002959b:	c3                   	ret    

c002959c <ISO9660::mkdir(char const*)>:
c002959c:	b8 01 00 00 00       	mov    eax,0x1
c00295a1:	c3                   	ret    

c00295a2 <ISO9660::~ISO9660()>:
c00295a2:	83 ec 0c             	sub    esp,0xc
c00295a5:	ba ac 37 03 c0       	mov    edx,0xc00337ac
c00295aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ae:	89 10                	mov    DWORD PTR [eax],edx
c00295b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b4:	83 ec 0c             	sub    esp,0xc
c00295b7:	50                   	push   eax
c00295b8:	e8 0d 0d ff ff       	call   c001a2ca <Filesystem::~Filesystem()>
c00295bd:	83 c4 10             	add    esp,0x10
c00295c0:	90                   	nop
c00295c1:	83 c4 0c             	add    esp,0xc
c00295c4:	c3                   	ret    
c00295c5:	90                   	nop

c00295c6 <ISO9660::~ISO9660()>:
c00295c6:	83 ec 0c             	sub    esp,0xc
c00295c9:	83 ec 0c             	sub    esp,0xc
c00295cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295d0:	e8 cd ff ff ff       	call   c00295a2 <ISO9660::~ISO9660()>
c00295d5:	83 c4 10             	add    esp,0x10
c00295d8:	83 ec 08             	sub    esp,0x8
c00295db:	6a 08                	push   0x8
c00295dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295e1:	e8 2e fd fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c00295e6:	83 c4 10             	add    esp,0x10
c00295e9:	83 c4 0c             	add    esp,0xc
c00295ec:	c3                   	ret    
c00295ed:	90                   	nop

c00295ee <ISO9660::exists(char const*)>:
c00295ee:	83 ec 18             	sub    esp,0x18
c00295f1:	68 87 36 03 c0       	push   0xc0033687
c00295f6:	e8 5f 6e ff ff       	call   c002045a <KePanic(char const*)>
c00295fb:	31 c0                	xor    eax,eax
c00295fd:	83 c4 1c             	add    esp,0x1c
c0029600:	c3                   	ret    
c0029601:	90                   	nop

c0029602 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029602:	56                   	push   esi
c0029603:	53                   	push   ebx
c0029604:	53                   	push   ebx
c0029605:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029609:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002960d:	85 db                	test   ebx,ebx
c002960f:	0f 84 ca 00 00 00    	je     c00296df <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029615:	85 f6                	test   esi,esi
c0029617:	0f 84 c2 00 00 00    	je     c00296df <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c002961d:	b8 03 00 00 00       	mov    eax,0x3
c0029622:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0029627:	0f 85 b7 00 00 00    	jne    c00296e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002962d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002962f:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029636:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c002963c:	74 1b                	je     c0029659 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002963e:	85 c0                	test   eax,eax
c0029640:	74 10                	je     c0029652 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029642:	83 ec 0c             	sub    esp,0xc
c0029645:	68 a5 36 03 c0       	push   0xc00336a5
c002964a:	e8 0b 6e ff ff       	call   c002045a <KePanic(char const*)>
c002964f:	83 c4 10             	add    esp,0x10
c0029652:	8a 03                	mov    al,BYTE PTR [ebx]
c0029654:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029659:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002965c:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029663:	85 c0                	test   eax,eax
c0029665:	74 09                	je     c0029670 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0029667:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002966e:	74 48                	je     c00296b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029670:	83 ec 0c             	sub    esp,0xc
c0029673:	68 b5 36 03 c0       	push   0xc00336b5
c0029678:	e8 c4 fd fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002967d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029680:	83 c4 10             	add    esp,0x10
c0029683:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002968a:	85 c0                	test   eax,eax
c002968c:	74 17                	je     c00296a5 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c002968e:	83 ec 0c             	sub    esp,0xc
c0029691:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029698:	68 d5 36 03 c0       	push   0xc00336d5
c002969d:	e8 9f fd fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00296a2:	83 c4 10             	add    esp,0x10
c00296a5:	83 ec 0c             	sub    esp,0xc
c00296a8:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296af:	50                   	push   eax
c00296b0:	e8 dd d6 fd ff       	call   c0006d92 <init_percd>
c00296b5:	83 c4 10             	add    esp,0x10
c00296b8:	83 c3 03             	add    ebx,0x3
c00296bb:	51                   	push   ecx
c00296bc:	51                   	push   ecx
c00296bd:	6a 00                	push   0x0
c00296bf:	53                   	push   ebx
c00296c0:	e8 94 d1 fd ff       	call   c0006859 <iso_open>
c00296c5:	83 c4 10             	add    esp,0x10
c00296c8:	89 c2                	mov    edx,eax
c00296ca:	b8 01 00 00 00       	mov    eax,0x1
c00296cf:	83 fa ff             	cmp    edx,0xffffffff
c00296d2:	74 10                	je     c00296e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00296d4:	83 c2 32             	add    edx,0x32
c00296d7:	31 c0                	xor    eax,eax
c00296d9:	01 d2                	add    edx,edx
c00296db:	89 16                	mov    DWORD PTR [esi],edx
c00296dd:	eb 05                	jmp    c00296e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00296df:	b8 04 00 00 00       	mov    eax,0x4
c00296e4:	5a                   	pop    edx
c00296e5:	5b                   	pop    ebx
c00296e6:	5e                   	pop    esi
c00296e7:	c3                   	ret    

c00296e8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00296e8:	53                   	push   ebx
c00296e9:	83 ec 08             	sub    esp,0x8
c00296ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00296f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00296f4:	85 c0                	test   eax,eax
c00296f6:	74 2d                	je     c0029725 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00296f8:	85 db                	test   ebx,ebx
c00296fa:	74 29                	je     c0029725 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00296fc:	b9 02 00 00 00       	mov    ecx,0x2
c0029701:	52                   	push   edx
c0029702:	99                   	cdq    
c0029703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029707:	f7 f9                	idiv   ecx
c0029709:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002970d:	83 e8 32             	sub    eax,0x32
c0029710:	50                   	push   eax
c0029711:	e8 eb d1 fd ff       	call   c0006901 <iso_read>
c0029716:	83 c4 10             	add    esp,0x10
c0029719:	89 03                	mov    DWORD PTR [ebx],eax
c002971b:	09 d0                	or     eax,edx
c002971d:	0f 94 c0             	sete   al
c0029720:	0f b6 c0             	movzx  eax,al
c0029723:	eb 05                	jmp    c002972a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029725:	b8 04 00 00 00       	mov    eax,0x4
c002972a:	83 c4 08             	add    esp,0x8
c002972d:	5b                   	pop    ebx
c002972e:	c3                   	ret    
c002972f:	90                   	nop

c0029730 <ISO9660::seek(void*, unsigned long long)>:
c0029730:	57                   	push   edi
c0029731:	56                   	push   esi
c0029732:	b8 04 00 00 00       	mov    eax,0x4
c0029737:	51                   	push   ecx
c0029738:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002973c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029740:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029744:	85 d2                	test   edx,edx
c0029746:	74 26                	je     c002976e <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029748:	6a 00                	push   0x0
c002974a:	b9 02 00 00 00       	mov    ecx,0x2
c002974f:	57                   	push   edi
c0029750:	89 d0                	mov    eax,edx
c0029752:	56                   	push   esi
c0029753:	99                   	cdq    
c0029754:	f7 f9                	idiv   ecx
c0029756:	83 e8 32             	sub    eax,0x32
c0029759:	50                   	push   eax
c002975a:	e8 b8 d2 fd ff       	call   c0006a17 <iso_seek>
c002975f:	83 c4 10             	add    esp,0x10
c0029762:	31 f0                	xor    eax,esi
c0029764:	31 fa                	xor    edx,edi
c0029766:	09 d0                	or     eax,edx
c0029768:	0f 95 c0             	setne  al
c002976b:	0f b6 c0             	movzx  eax,al
c002976e:	5a                   	pop    edx
c002976f:	5e                   	pop    esi
c0029770:	5f                   	pop    edi
c0029771:	c3                   	ret    

c0029772 <ISO9660::tell(void*, unsigned long long*)>:
c0029772:	53                   	push   ebx
c0029773:	83 ec 08             	sub    esp,0x8
c0029776:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002977a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002977e:	85 c0                	test   eax,eax
c0029780:	74 24                	je     c00297a6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029782:	85 db                	test   ebx,ebx
c0029784:	74 20                	je     c00297a6 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029786:	83 ec 0c             	sub    esp,0xc
c0029789:	b9 02 00 00 00       	mov    ecx,0x2
c002978e:	99                   	cdq    
c002978f:	f7 f9                	idiv   ecx
c0029791:	83 e8 32             	sub    eax,0x32
c0029794:	50                   	push   eax
c0029795:	e8 01 d3 fd ff       	call   c0006a9b <iso_tell>
c002979a:	83 c4 10             	add    esp,0x10
c002979d:	89 03                	mov    DWORD PTR [ebx],eax
c002979f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00297a2:	31 c0                	xor    eax,eax
c00297a4:	eb 05                	jmp    c00297ab <ISO9660::tell(void*, unsigned long long*)+0x39>
c00297a6:	b8 04 00 00 00       	mov    eax,0x4
c00297ab:	83 c4 08             	add    esp,0x8
c00297ae:	5b                   	pop    ebx
c00297af:	c3                   	ret    

c00297b0 <ISO9660::stat(void*, unsigned long long*)>:
c00297b0:	53                   	push   ebx
c00297b1:	83 ec 14             	sub    esp,0x14
c00297b4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00297b8:	68 f9 36 03 c0       	push   0xc00336f9
c00297bd:	e8 7f fc fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00297c2:	83 c4 10             	add    esp,0x10
c00297c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00297ca:	74 2c                	je     c00297f8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00297cc:	85 db                	test   ebx,ebx
c00297ce:	74 28                	je     c00297f8 <ISO9660::stat(void*, unsigned long long*)+0x48>
c00297d0:	83 ec 0c             	sub    esp,0xc
c00297d3:	b9 02 00 00 00       	mov    ecx,0x2
c00297d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00297dc:	99                   	cdq    
c00297dd:	f7 f9                	idiv   ecx
c00297df:	83 e8 32             	sub    eax,0x32
c00297e2:	50                   	push   eax
c00297e3:	e8 e4 d2 fd ff       	call   c0006acc <iso_total>
c00297e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00297ef:	89 03                	mov    DWORD PTR [ebx],eax
c00297f1:	83 c4 10             	add    esp,0x10
c00297f4:	31 c0                	xor    eax,eax
c00297f6:	eb 05                	jmp    c00297fd <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00297f8:	b8 04 00 00 00       	mov    eax,0x4
c00297fd:	83 c4 08             	add    esp,0x8
c0029800:	5b                   	pop    ebx
c0029801:	c3                   	ret    

c0029802 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029802:	55                   	push   ebp
c0029803:	57                   	push   edi
c0029804:	56                   	push   esi
c0029805:	53                   	push   ebx
c0029806:	83 ec 18             	sub    esp,0x18
c0029809:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002980d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029811:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029815:	68 01 37 03 c0       	push   0xc0033701
c002981a:	e8 22 fc fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002981f:	83 c4 10             	add    esp,0x10
c0029822:	85 ff                	test   edi,edi
c0029824:	0f 94 c0             	sete   al
c0029827:	85 f6                	test   esi,esi
c0029829:	0f 94 c2             	sete   dl
c002982c:	09 d0                	or     eax,edx
c002982e:	a8 01                	test   al,0x1
c0029830:	0f 85 dd 00 00 00    	jne    c0029913 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029836:	85 db                	test   ebx,ebx
c0029838:	0f 84 d5 00 00 00    	je     c0029913 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002983e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029841:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029847:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002984e:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029855:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029857:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c002985d:	74 1b                	je     c002987a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c002985f:	85 c0                	test   eax,eax
c0029861:	74 10                	je     c0029873 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029863:	83 ec 0c             	sub    esp,0xc
c0029866:	68 a5 36 03 c0       	push   0xc00336a5
c002986b:	e8 ea 6b ff ff       	call   c002045a <KePanic(char const*)>
c0029870:	83 c4 10             	add    esp,0x10
c0029873:	8a 03                	mov    al,BYTE PTR [ebx]
c0029875:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002987a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002987d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029884:	85 c0                	test   eax,eax
c0029886:	74 09                	je     c0029891 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029888:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002988f:	74 51                	je     c00298e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0029891:	83 ec 0c             	sub    esp,0xc
c0029894:	68 09 37 03 c0       	push   0xc0033709
c0029899:	e8 a3 fb fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002989e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00298a1:	83 c4 10             	add    esp,0x10
c00298a4:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00298ac:	74 21                	je     c00298cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00298ae:	83 ec 0c             	sub    esp,0xc
c00298b1:	68 29 37 03 c0       	push   0xc0033729
c00298b6:	e8 86 fb fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c00298bb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00298be:	83 c4 10             	add    esp,0x10
c00298c1:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00298c8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00298cf:	83 ec 0c             	sub    esp,0xc
c00298d2:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00298d9:	50                   	push   eax
c00298da:	e8 b3 d4 fd ff       	call   c0006d92 <init_percd>
c00298df:	83 c4 10             	add    esp,0x10
c00298e2:	83 c3 03             	add    ebx,0x3
c00298e5:	52                   	push   edx
c00298e6:	52                   	push   edx
c00298e7:	6a 00                	push   0x0
c00298e9:	53                   	push   ebx
c00298ea:	e8 6a cf fd ff       	call   c0006859 <iso_open>
c00298ef:	83 c4 10             	add    esp,0x10
c00298f2:	89 c5                	mov    ebp,eax
c00298f4:	83 f8 ff             	cmp    eax,0xffffffff
c00298f7:	75 21                	jne    c002991a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c00298f9:	50                   	push   eax
c00298fa:	50                   	push   eax
c00298fb:	6a 01                	push   0x1
c00298fd:	53                   	push   ebx
c00298fe:	e8 56 cf fd ff       	call   c0006859 <iso_open>
c0029903:	83 c4 10             	add    esp,0x10
c0029906:	ba 02 00 00 00       	mov    edx,0x2
c002990b:	40                   	inc    eax
c002990c:	74 2b                	je     c0029939 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002990e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029911:	eb 24                	jmp    c0029937 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029913:	ba 04 00 00 00       	mov    edx,0x4
c0029918:	eb 1f                	jmp    c0029939 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002991a:	83 ec 0c             	sub    esp,0xc
c002991d:	50                   	push   eax
c002991e:	e8 a9 d1 fd ff       	call   c0006acc <iso_total>
c0029923:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002992a:	89 07                	mov    DWORD PTR [edi],eax
c002992c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002992f:	e8 af cf fd ff       	call   c00068e3 <iso_close>
c0029934:	83 c4 10             	add    esp,0x10
c0029937:	31 d2                	xor    edx,edx
c0029939:	83 c4 0c             	add    esp,0xc
c002993c:	89 d0                	mov    eax,edx
c002993e:	5b                   	pop    ebx
c002993f:	5e                   	pop    esi
c0029940:	5f                   	pop    edi
c0029941:	5d                   	pop    ebp
c0029942:	c3                   	ret    
c0029943:	90                   	nop

c0029944 <ISO9660::close(void*)>:
c0029944:	83 ec 0c             	sub    esp,0xc
c0029947:	b8 04 00 00 00       	mov    eax,0x4
c002994c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029950:	85 d2                	test   edx,edx
c0029952:	74 1b                	je     c002996f <ISO9660::close(void*)+0x2b>
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	b9 02 00 00 00       	mov    ecx,0x2
c002995c:	89 d0                	mov    eax,edx
c002995e:	99                   	cdq    
c002995f:	f7 f9                	idiv   ecx
c0029961:	83 e8 32             	sub    eax,0x32
c0029964:	50                   	push   eax
c0029965:	e8 79 cf fd ff       	call   c00068e3 <iso_close>
c002996a:	83 c4 10             	add    esp,0x10
c002996d:	31 c0                	xor    eax,eax
c002996f:	83 c4 0c             	add    esp,0xc
c0029972:	c3                   	ret    
c0029973:	90                   	nop

c0029974 <ISO9660::openDir(char const*, void**)>:
c0029974:	56                   	push   esi
c0029975:	53                   	push   ebx
c0029976:	50                   	push   eax
c0029977:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002997b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002997f:	85 db                	test   ebx,ebx
c0029981:	0f 84 bd 00 00 00    	je     c0029a44 <ISO9660::openDir(char const*, void**)+0xd0>
c0029987:	85 f6                	test   esi,esi
c0029989:	0f 84 b5 00 00 00    	je     c0029a44 <ISO9660::openDir(char const*, void**)+0xd0>
c002998f:	8a 13                	mov    dl,BYTE PTR [ebx]
c0029991:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029998:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c002999e:	74 1b                	je     c00299bb <ISO9660::openDir(char const*, void**)+0x47>
c00299a0:	85 c0                	test   eax,eax
c00299a2:	74 10                	je     c00299b4 <ISO9660::openDir(char const*, void**)+0x40>
c00299a4:	83 ec 0c             	sub    esp,0xc
c00299a7:	68 a5 36 03 c0       	push   0xc00336a5
c00299ac:	e8 a9 6a ff ff       	call   c002045a <KePanic(char const*)>
c00299b1:	83 c4 10             	add    esp,0x10
c00299b4:	8a 03                	mov    al,BYTE PTR [ebx]
c00299b6:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00299bb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00299be:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00299c5:	85 c0                	test   eax,eax
c00299c7:	74 10                	je     c00299d9 <ISO9660::openDir(char const*, void**)+0x65>
c00299c9:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00299d0:	74 1a                	je     c00299ec <ISO9660::openDir(char const*, void**)+0x78>
c00299d2:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00299d9:	83 ec 0c             	sub    esp,0xc
c00299dc:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00299e3:	50                   	push   eax
c00299e4:	e8 a9 d3 fd ff       	call   c0006d92 <init_percd>
c00299e9:	83 c4 10             	add    esp,0x10
c00299ec:	83 c3 03             	add    ebx,0x3
c00299ef:	50                   	push   eax
c00299f0:	50                   	push   eax
c00299f1:	6a 01                	push   0x1
c00299f3:	53                   	push   ebx
c00299f4:	e8 60 ce fd ff       	call   c0006859 <iso_open>
c00299f9:	83 c4 10             	add    esp,0x10
c00299fc:	89 c3                	mov    ebx,eax
c00299fe:	83 f8 ff             	cmp    eax,0xffffffff
c0029a01:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029a06:	75 1c                	jne    c0029a24 <ISO9660::openDir(char const*, void**)+0xb0>
c0029a08:	53                   	push   ebx
c0029a09:	53                   	push   ebx
c0029a0a:	68 4d 37 03 c0       	push   0xc003374d
c0029a0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029a15:	e8 86 db fe ff       	call   c00175a0 <VgaText::puts(char const*)>
c0029a1a:	83 c4 10             	add    esp,0x10
c0029a1d:	b8 01 00 00 00       	mov    eax,0x1
c0029a22:	eb 25                	jmp    c0029a49 <ISO9660::openDir(char const*, void**)+0xd5>
c0029a24:	01 db                	add    ebx,ebx
c0029a26:	51                   	push   ecx
c0029a27:	83 c3 65             	add    ebx,0x65
c0029a2a:	51                   	push   ecx
c0029a2b:	68 60 37 03 c0       	push   0xc0033760
c0029a30:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029a36:	e8 65 db fe ff       	call   c00175a0 <VgaText::puts(char const*)>
c0029a3b:	89 1e                	mov    DWORD PTR [esi],ebx
c0029a3d:	83 c4 10             	add    esp,0x10
c0029a40:	31 c0                	xor    eax,eax
c0029a42:	eb 05                	jmp    c0029a49 <ISO9660::openDir(char const*, void**)+0xd5>
c0029a44:	b8 04 00 00 00       	mov    eax,0x4
c0029a49:	5a                   	pop    edx
c0029a4a:	5b                   	pop    ebx
c0029a4b:	5e                   	pop    esi
c0029a4c:	c3                   	ret    
c0029a4d:	90                   	nop

c0029a4e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029a4e:	55                   	push   ebp
c0029a4f:	57                   	push   edi
c0029a50:	56                   	push   esi
c0029a51:	53                   	push   ebx
c0029a52:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029a58:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029a5f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0029a66:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029a6e:	0f 84 e7 00 00 00    	je     c0029b5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029a74:	85 db                	test   ebx,ebx
c0029a76:	0f 84 df 00 00 00    	je     c0029b5b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029a7c:	83 ec 0c             	sub    esp,0xc
c0029a7f:	68 73 37 03 c0       	push   0xc0033773
c0029a84:	e8 b8 f9 fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c0029a89:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0029a90:	b9 02 00 00 00       	mov    ecx,0x2
c0029a95:	99                   	cdq    
c0029a96:	f7 f9                	idiv   ecx
c0029a98:	83 e8 32             	sub    eax,0x32
c0029a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0029a9e:	e8 7b d0 fd ff       	call   c0006b1e <iso_readdir>
c0029aa3:	83 c4 10             	add    esp,0x10
c0029aa6:	89 c6                	mov    esi,eax
c0029aa8:	85 c0                	test   eax,eax
c0029aaa:	75 37                	jne    c0029ae3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0029aac:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029ab1:	56                   	push   esi
c0029ab2:	56                   	push   esi
c0029ab3:	68 7e 37 03 c0       	push   0xc003377e
c0029ab8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029abe:	e8 dd da fe ff       	call   c00175a0 <VgaText::puts(char const*)>
c0029ac3:	83 c4 0c             	add    esp,0xc
c0029ac6:	68 10 01 00 00       	push   0x110
c0029acb:	6a 00                	push   0x0
c0029acd:	57                   	push   edi
c0029ace:	e8 1d 6a fd ff       	call   c00004f0 <memset>
c0029ad3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0029ad9:	83 c4 10             	add    esp,0x10
c0029adc:	b8 01 00 00 00       	mov    eax,0x1
c0029ae1:	eb 7d                	jmp    c0029b60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029ae3:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029ae9:	8d 68 08             	lea    ebp,[eax+0x8]
c0029aec:	83 ec 0c             	sub    esp,0xc
c0029aef:	55                   	push   ebp
c0029af0:	e8 7b 6a fd ff       	call   c0000570 <strlen>
c0029af5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029afd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029b01:	83 c4 10             	add    esp,0x10
c0029b04:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0029b08:	75 0a                	jne    c0029b14 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0029b0a:	b8 02 00 00 00       	mov    eax,0x2
c0029b0f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0029b12:	74 05                	je     c0029b19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029b14:	b8 01 00 00 00       	mov    eax,0x1
c0029b19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029b1d:	50                   	push   eax
c0029b1e:	50                   	push   eax
c0029b1f:	55                   	push   ebp
c0029b20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029b24:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029b28:	50                   	push   eax
c0029b29:	e8 12 6b fd ff       	call   c0000640 <strcpy>
c0029b2e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029b37:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029b3d:	5a                   	pop    edx
c0029b3e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029b43:	59                   	pop    ecx
c0029b44:	68 91 37 03 c0       	push   0xc0033791
c0029b49:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029b4f:	e8 4c da fe ff       	call   c00175a0 <VgaText::puts(char const*)>
c0029b54:	83 c4 10             	add    esp,0x10
c0029b57:	31 c0                	xor    eax,eax
c0029b59:	eb 05                	jmp    c0029b60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0029b5b:	b8 04 00 00 00       	mov    eax,0x4
c0029b60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029b66:	5b                   	pop    ebx
c0029b67:	5e                   	pop    esi
c0029b68:	5f                   	pop    edi
c0029b69:	5d                   	pop    ebp
c0029b6a:	c3                   	ret    

c0029b6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0029b6b:	57                   	push   edi
c0029b6c:	56                   	push   esi
c0029b6d:	53                   	push   ebx
c0029b6e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029b72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029b76:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029b7a:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029b80:	0f be cb             	movsx  ecx,bl
c0029b83:	75 0b                	jne    c0029b90 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029b85:	0f be 05 e0 49 03 c0 	movsx  eax,BYTE PTR ds:0xc00349e0
c0029b8c:	39 c8                	cmp    eax,ecx
c0029b8e:	74 47                	je     c0029bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029b90:	83 ec 0c             	sub    esp,0xc
c0029b93:	31 d2                	xor    edx,edx
c0029b95:	68 a0 03 04 c0       	push   0xc00403a0
c0029b9a:	6a 01                	push   0x1
c0029b9c:	52                   	push   edx
c0029b9d:	56                   	push   esi
c0029b9e:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029ba5:	e8 0a 2d ff ff       	call   c001c8b4 <LogicalDisk::read(unsigned long long, int, void*)>
c0029baa:	83 c4 20             	add    esp,0x20
c0029bad:	85 c0                	test   eax,eax
c0029baf:	75 0e                	jne    c0029bbf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029bb1:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029bb7:	88 1d e0 49 03 c0    	mov    BYTE PTR ds:0xc00349e0,bl
c0029bbd:	eb 18                	jmp    c0029bd7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029bbf:	50                   	push   eax
c0029bc0:	68 00 08 00 00       	push   0x800
c0029bc5:	6a 00                	push   0x0
c0029bc7:	57                   	push   edi
c0029bc8:	e8 23 69 fd ff       	call   c00004f0 <memset>
c0029bcd:	83 c4 10             	add    esp,0x10
c0029bd0:	b8 01 00 00 00       	mov    eax,0x1
c0029bd5:	eb 0e                	jmp    c0029be5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029bd7:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029bdc:	b9 00 08 00 00       	mov    ecx,0x800
c0029be1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029be3:	31 c0                	xor    eax,eax
c0029be5:	5b                   	pop    ebx
c0029be6:	5e                   	pop    esi
c0029be7:	5f                   	pop    edi
c0029be8:	c3                   	ret    
c0029be9:	90                   	nop

c0029bea <ISO9660::tryMount(LogicalDisk*, int)>:
c0029bea:	53                   	push   ebx
c0029beb:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029bf1:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029bfb:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029c02:	8d 58 41             	lea    ebx,[eax+0x41]
c0029c05:	0f be db             	movsx  ebx,bl
c0029c08:	53                   	push   ebx
c0029c09:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029c0d:	50                   	push   eax
c0029c0e:	6a 10                	push   0x10
c0029c10:	e8 56 ff ff ff       	call   c0029b6b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029c15:	83 c4 10             	add    esp,0x10
c0029c18:	31 d2                	xor    edx,edx
c0029c1a:	85 c0                	test   eax,eax
c0029c1c:	75 33                	jne    c0029c51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c1e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029c23:	75 2c                	jne    c0029c51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c25:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029c2a:	75 25                	jne    c0029c51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c2c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029c31:	75 1e                	jne    c0029c51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c33:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029c38:	75 17                	jne    c0029c51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c3a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029c3f:	75 10                	jne    c0029c51 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029c41:	83 ec 0c             	sub    esp,0xc
c0029c44:	53                   	push   ebx
c0029c45:	e8 48 d1 fd ff       	call   c0006d92 <init_percd>
c0029c4a:	83 c4 10             	add    esp,0x10
c0029c4d:	40                   	inc    eax
c0029c4e:	0f 95 c2             	setne  dl
c0029c51:	88 d0                	mov    al,dl
c0029c53:	81 c4 08 08 00 00    	add    esp,0x808
c0029c59:	5b                   	pop    ebx
c0029c5a:	c3                   	ret    
c0029c5b:	90                   	nop

c0029c5c <ISO9660::ISO9660()>:
c0029c5c:	83 ec 0c             	sub    esp,0xc
c0029c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c63:	83 ec 0c             	sub    esp,0xc
c0029c66:	50                   	push   eax
c0029c67:	e8 3a 06 ff ff       	call   c001a2a6 <Filesystem::Filesystem()>
c0029c6c:	83 c4 10             	add    esp,0x10
c0029c6f:	ba ac 37 03 c0       	mov    edx,0xc00337ac
c0029c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c78:	89 10                	mov    DWORD PTR [eax],edx
c0029c7a:	e8 25 d2 fd ff       	call   c0006ea4 <fs_iso9660_init>
c0029c7f:	90                   	nop
c0029c80:	83 c4 0c             	add    esp,0xc
c0029c83:	c3                   	ret    

c0029c84 <SoundCard::beginPlayback()>:
c0029c84:	c7 44 24 04 10 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033810
c0029c8c:	e9 c9 67 ff ff       	jmp    c002045a <KePanic(char const*)>
c0029c91:	90                   	nop

c0029c92 <SoundCard::stopPlayback()>:
c0029c92:	c7 44 24 04 10 38 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033810
c0029c9a:	e9 bb 67 ff ff       	jmp    c002045a <KePanic(char const*)>
c0029c9f:	90                   	nop

c0029ca0 <SoundCard::SoundCard(char const*)>:
c0029ca0:	83 ec 1c             	sub    esp,0x1c
c0029ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ca7:	83 ec 08             	sub    esp,0x8
c0029caa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029cae:	50                   	push   eax
c0029caf:	e8 70 19 ff ff       	call   c001b624 <Device::Device(char const*)>
c0029cb4:	83 c4 10             	add    esp,0x10
c0029cb7:	ba 5c 38 03 c0       	mov    edx,0xc003385c
c0029cbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029cc0:	89 10                	mov    DWORD PTR [eax],edx
c0029cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029cc6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029ccd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029cd1:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029cdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029cdf:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029ced:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029cfb:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029d05:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029d0d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029d12:	7f 1a                	jg     c0029d2e <SoundCard::SoundCard(char const*)+0x8e>
c0029d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029d1c:	83 c2 54             	add    edx,0x54
c0029d1f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029d27:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029d2c:	eb df                	jmp    c0029d0d <SoundCard::SoundCard(char const*)+0x6d>
c0029d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d32:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029d39:	90                   	nop
c0029d3a:	83 c4 1c             	add    esp,0x1c
c0029d3d:	c3                   	ret    

c0029d3e <SoundCard::~SoundCard()>:
c0029d3e:	83 ec 0c             	sub    esp,0xc
c0029d41:	ba 5c 38 03 c0       	mov    edx,0xc003385c
c0029d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d4a:	89 10                	mov    DWORD PTR [eax],edx
c0029d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d50:	83 ec 0c             	sub    esp,0xc
c0029d53:	50                   	push   eax
c0029d54:	e8 6b 16 ff ff       	call   c001b3c4 <Device::~Device()>
c0029d59:	83 c4 10             	add    esp,0x10
c0029d5c:	90                   	nop
c0029d5d:	83 c4 0c             	add    esp,0xc
c0029d60:	c3                   	ret    
c0029d61:	90                   	nop

c0029d62 <SoundCard::~SoundCard()>:
c0029d62:	83 ec 0c             	sub    esp,0xc
c0029d65:	83 ec 0c             	sub    esp,0xc
c0029d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d6c:	e8 cd ff ff ff       	call   c0029d3e <SoundCard::~SoundCard()>
c0029d71:	83 c4 10             	add    esp,0x10
c0029d74:	83 ec 08             	sub    esp,0x8
c0029d77:	68 e8 01 00 00       	push   0x1e8
c0029d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d80:	e8 8f f5 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c0029d85:	83 c4 10             	add    esp,0x10
c0029d88:	83 c4 0c             	add    esp,0xc
c0029d8b:	c3                   	ret    

c0029d8c <SoundCard::configureRates(int, int, int)>:
c0029d8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029d90:	31 c0                	xor    eax,eax
c0029d92:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029d99:	75 20                	jne    c0029dbb <SoundCard::configureRates(int, int, int)+0x2f>
c0029d9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029d9f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029da9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029db3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029db9:	b0 01                	mov    al,0x1
c0029dbb:	c3                   	ret    

c0029dbc <SoundCard::getSamples16(int, short*)>:
c0029dbc:	55                   	push   ebp
c0029dbd:	57                   	push   edi
c0029dbe:	31 ff                	xor    edi,edi
c0029dc0:	56                   	push   esi
c0029dc1:	53                   	push   ebx
c0029dc2:	31 db                	xor    ebx,ebx
c0029dc4:	83 ec 10             	sub    esp,0x10
c0029dc7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029dcb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029dcf:	8d 04 36             	lea    eax,[esi+esi*1]
c0029dd2:	50                   	push   eax
c0029dd3:	6a 00                	push   0x0
c0029dd5:	55                   	push   ebp
c0029dd6:	e8 15 67 fd ff       	call   c00004f0 <memset>
c0029ddb:	83 c4 10             	add    esp,0x10
c0029dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029de2:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029de9:	85 c0                	test   eax,eax
c0029deb:	74 1b                	je     c0029e08 <SoundCard::getSamples16(int, short*)+0x4c>
c0029ded:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029df1:	75 15                	jne    c0029e08 <SoundCard::getSamples16(int, short*)+0x4c>
c0029df3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029df7:	55                   	push   ebp
c0029df8:	56                   	push   esi
c0029df9:	50                   	push   eax
c0029dfa:	e8 f1 02 00 00       	call   c002a0f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029dff:	83 c4 10             	add    esp,0x10
c0029e02:	39 c7                	cmp    edi,eax
c0029e04:	7d 02                	jge    c0029e08 <SoundCard::getSamples16(int, short*)+0x4c>
c0029e06:	89 c7                	mov    edi,eax
c0029e08:	43                   	inc    ebx
c0029e09:	83 fb 20             	cmp    ebx,0x20
c0029e0c:	75 d0                	jne    c0029dde <SoundCard::getSamples16(int, short*)+0x22>
c0029e0e:	83 c4 0c             	add    esp,0xc
c0029e11:	89 f8                	mov    eax,edi
c0029e13:	5b                   	pop    ebx
c0029e14:	5e                   	pop    esi
c0029e15:	5f                   	pop    edi
c0029e16:	5d                   	pop    ebp
c0029e17:	c3                   	ret    

c0029e18 <SoundCard::getSamples32(int, int*)>:
c0029e18:	55                   	push   ebp
c0029e19:	57                   	push   edi
c0029e1a:	31 ff                	xor    edi,edi
c0029e1c:	56                   	push   esi
c0029e1d:	31 f6                	xor    esi,esi
c0029e1f:	53                   	push   ebx
c0029e20:	83 ec 10             	sub    esp,0x10
c0029e23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029e27:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029e2b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029e2f:	c1 e0 02             	shl    eax,0x2
c0029e32:	50                   	push   eax
c0029e33:	6a 00                	push   0x0
c0029e35:	55                   	push   ebp
c0029e36:	e8 b5 66 fd ff       	call   c00004f0 <memset>
c0029e3b:	83 c4 10             	add    esp,0x10
c0029e3e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029e45:	85 c0                	test   eax,eax
c0029e47:	74 1b                	je     c0029e64 <SoundCard::getSamples32(int, int*)+0x4c>
c0029e49:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029e4d:	75 15                	jne    c0029e64 <SoundCard::getSamples32(int, int*)+0x4c>
c0029e4f:	53                   	push   ebx
c0029e50:	55                   	push   ebp
c0029e51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029e55:	50                   	push   eax
c0029e56:	e8 61 03 00 00       	call   c002a1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029e5b:	83 c4 10             	add    esp,0x10
c0029e5e:	39 c6                	cmp    esi,eax
c0029e60:	7d 02                	jge    c0029e64 <SoundCard::getSamples32(int, int*)+0x4c>
c0029e62:	89 c6                	mov    esi,eax
c0029e64:	47                   	inc    edi
c0029e65:	83 ff 20             	cmp    edi,0x20
c0029e68:	75 d4                	jne    c0029e3e <SoundCard::getSamples32(int, int*)+0x26>
c0029e6a:	85 f6                	test   esi,esi
c0029e6c:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029e73:	75 0f                	jne    c0029e84 <SoundCard::getSamples32(int, int*)+0x6c>
c0029e75:	85 c0                	test   eax,eax
c0029e77:	74 1b                	je     c0029e94 <SoundCard::getSamples32(int, int*)+0x7c>
c0029e79:	83 ec 0c             	sub    esp,0xc
c0029e7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029e7e:	53                   	push   ebx
c0029e7f:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029e82:	eb 0d                	jmp    c0029e91 <SoundCard::getSamples32(int, int*)+0x79>
c0029e84:	85 c0                	test   eax,eax
c0029e86:	75 0c                	jne    c0029e94 <SoundCard::getSamples32(int, int*)+0x7c>
c0029e88:	83 ec 0c             	sub    esp,0xc
c0029e8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029e8d:	53                   	push   ebx
c0029e8e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029e91:	83 c4 10             	add    esp,0x10
c0029e94:	83 c4 0c             	add    esp,0xc
c0029e97:	89 f0                	mov    eax,esi
c0029e99:	5b                   	pop    ebx
c0029e9a:	5e                   	pop    esi
c0029e9b:	5f                   	pop    edi
c0029e9c:	5d                   	pop    ebp
c0029e9d:	c3                   	ret    

c0029e9e <SoundCard::addChannel(SoundPort*)>:
c0029e9e:	83 ec 0c             	sub    esp,0xc
c0029ea1:	31 c0                	xor    eax,eax
c0029ea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029ea7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029eaf:	74 1b                	je     c0029ecc <SoundCard::addChannel(SoundPort*)+0x2e>
c0029eb1:	40                   	inc    eax
c0029eb2:	83 f8 20             	cmp    eax,0x20
c0029eb5:	75 f0                	jne    c0029ea7 <SoundCard::addChannel(SoundPort*)+0x9>
c0029eb7:	83 ec 0c             	sub    esp,0xc
c0029eba:	68 35 38 03 c0       	push   0xc0033835
c0029ebf:	e8 96 65 ff ff       	call   c002045a <KePanic(char const*)>
c0029ec4:	83 c4 10             	add    esp,0x10
c0029ec7:	83 c8 ff             	or     eax,0xffffffff
c0029eca:	eb 0b                	jmp    c0029ed7 <SoundCard::addChannel(SoundPort*)+0x39>
c0029ecc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029ed0:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029ed7:	83 c4 0c             	add    esp,0xc
c0029eda:	c3                   	ret    
c0029edb:	90                   	nop

c0029edc <SoundCard::removeChannel(int)>:
c0029edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ee0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029ee4:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029eef:	c3                   	ret    

c0029ef0 <SoundPort::SoundPort(int, int, int, int)>:
c0029ef0:	83 ec 0c             	sub    esp,0xc
c0029ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ef7:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f02:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029f0e:	89 10                	mov    DWORD PTR [eax],edx
c0029f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029f18:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f1f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029f23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029f26:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029f2b:	75 13                	jne    c0029f40 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f31:	8b 00                	mov    eax,DWORD PTR [eax]
c0029f33:	05 a0 0f 00 00       	add    eax,0xfa0
c0029f38:	01 c0                	add    eax,eax
c0029f3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029f3e:	66 90                	xchg   ax,ax
c0029f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029f48:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f4f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f5a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029f5d:	c1 e0 02             	shl    eax,0x2
c0029f60:	83 ec 0c             	sub    esp,0xc
c0029f63:	50                   	push   eax
c0029f64:	e8 48 c6 fe ff       	call   c00165b1 <malloc>
c0029f69:	83 c4 10             	add    esp,0x10
c0029f6c:	89 c2                	mov    edx,eax
c0029f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f72:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029f75:	90                   	nop
c0029f76:	83 c4 0c             	add    esp,0xc
c0029f79:	c3                   	ret    
c0029f7a:	66 90                	xchg   ax,ax

c0029f7c <SoundPort::~SoundPort()>:
c0029f7c:	83 ec 0c             	sub    esp,0xc
c0029f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029f86:	85 c0                	test   eax,eax
c0029f88:	74 1e                	je     c0029fa8 <SoundPort::~SoundPort()+0x2c>
c0029f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029f91:	83 ec 0c             	sub    esp,0xc
c0029f94:	50                   	push   eax
c0029f95:	e8 27 c6 fe ff       	call   c00165c1 <free>
c0029f9a:	83 c4 10             	add    esp,0x10
c0029f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fa1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029fa8:	90                   	nop
c0029fa9:	83 c4 0c             	add    esp,0xc
c0029fac:	c3                   	ret    
c0029fad:	90                   	nop
c0029fae:	66 90                	xchg   ax,ax

c0029fb0 <SoundPort::unpause()>:
c0029fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029fb4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029fb8:	c3                   	ret    
c0029fb9:	90                   	nop
c0029fba:	66 90                	xchg   ax,ax

c0029fbc <SoundPort::pause()>:
c0029fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029fc0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029fc4:	c3                   	ret    
c0029fc5:	90                   	nop
c0029fc6:	66 90                	xchg   ax,ax

c0029fc8 <SoundPort::getBufferUsed()>:
c0029fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029fcc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029fcf:	c3                   	ret    

c0029fd0 <SoundPort::getBufferSize()>:
c0029fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029fd4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029fd7:	c3                   	ret    

c0029fd8 <SoundPort::buffer16(short*, int)>:
c0029fd8:	55                   	push   ebp
c0029fd9:	57                   	push   edi
c0029fda:	56                   	push   esi
c0029fdb:	53                   	push   ebx
c0029fdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029fe0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029fe4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029fe7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029fea:	74 68                	je     c002a054 <SoundPort::buffer16(short*, int)+0x7c>
c0029fec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029ff0:	85 c9                	test   ecx,ecx
c0029ff2:	7e 60                	jle    c002a054 <SoundPort::buffer16(short*, int)+0x7c>
c0029ff4:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029ff8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029ffb:	c1 e1 0f             	shl    ecx,0xf
c0029ffe:	8d 70 01             	lea    esi,[eax+0x1]
c002a001:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a004:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c002a007:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a00a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a00d:	74 4d                	je     c002a05c <SoundPort::buffer16(short*, int)+0x84>
c002a00f:	31 f6                	xor    esi,esi
c002a011:	eb 21                	jmp    c002a034 <SoundPort::buffer16(short*, int)+0x5c>
c002a013:	90                   	nop
c002a014:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c002a019:	8d 79 01             	lea    edi,[ecx+0x1]
c002a01c:	c1 e3 0f             	shl    ebx,0xf
c002a01f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c002a022:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c002a025:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c002a028:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a02b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a02e:	74 1c                	je     c002a04c <SoundPort::buffer16(short*, int)+0x74>
c002a030:	89 c6                	mov    esi,eax
c002a032:	66 90                	xchg   ax,ax
c002a034:	8d 46 01             	lea    eax,[esi+0x1]
c002a037:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c002a03b:	75 d7                	jne    c002a014 <SoundPort::buffer16(short*, int)+0x3c>
c002a03d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a041:	8d 76 00             	lea    esi,[esi+0x0]
c002a044:	5b                   	pop    ebx
c002a045:	5e                   	pop    esi
c002a046:	5f                   	pop    edi
c002a047:	5d                   	pop    ebp
c002a048:	c3                   	ret    
c002a049:	8d 76 00             	lea    esi,[esi+0x0]
c002a04c:	5b                   	pop    ebx
c002a04d:	8d 46 02             	lea    eax,[esi+0x2]
c002a050:	5e                   	pop    esi
c002a051:	5f                   	pop    edi
c002a052:	5d                   	pop    ebp
c002a053:	c3                   	ret    
c002a054:	5b                   	pop    ebx
c002a055:	31 c0                	xor    eax,eax
c002a057:	5e                   	pop    esi
c002a058:	5f                   	pop    edi
c002a059:	5d                   	pop    ebp
c002a05a:	c3                   	ret    
c002a05b:	90                   	nop
c002a05c:	b8 01 00 00 00       	mov    eax,0x1
c002a061:	eb e1                	jmp    c002a044 <SoundPort::buffer16(short*, int)+0x6c>
c002a063:	90                   	nop

c002a064 <SoundPort::buffer32(int*, int)>:
c002a064:	55                   	push   ebp
c002a065:	57                   	push   edi
c002a066:	56                   	push   esi
c002a067:	53                   	push   ebx
c002a068:	83 ec 04             	sub    esp,0x4
c002a06b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a06f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a073:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a076:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a07a:	89 04 24             	mov    DWORD PTR [esp],eax
c002a07d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a080:	74 5a                	je     c002a0dc <SoundPort::buffer32(int*, int)+0x78>
c002a082:	85 c0                	test   eax,eax
c002a084:	7e 56                	jle    c002a0dc <SoundPort::buffer32(int*, int)+0x78>
c002a086:	8d 71 01             	lea    esi,[ecx+0x1]
c002a089:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c002a08c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c002a08f:	8b 37                	mov    esi,DWORD PTR [edi]
c002a091:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c002a094:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a097:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a09a:	74 4c                	je     c002a0e8 <SoundPort::buffer32(int*, int)+0x84>
c002a09c:	31 f6                	xor    esi,esi
c002a09e:	eb 1c                	jmp    c002a0bc <SoundPort::buffer32(int*, int)+0x58>
c002a0a0:	8d 69 01             	lea    ebp,[ecx+0x1]
c002a0a3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c002a0a6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c002a0a9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c002a0ac:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c002a0b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002a0b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c002a0b6:	74 18                	je     c002a0d0 <SoundPort::buffer32(int*, int)+0x6c>
c002a0b8:	89 de                	mov    esi,ebx
c002a0ba:	66 90                	xchg   ax,ax
c002a0bc:	8d 5e 01             	lea    ebx,[esi+0x1]
c002a0bf:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c002a0c2:	75 dc                	jne    c002a0a0 <SoundPort::buffer32(int*, int)+0x3c>
c002a0c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002a0c7:	90                   	nop
c002a0c8:	83 c4 04             	add    esp,0x4
c002a0cb:	5b                   	pop    ebx
c002a0cc:	5e                   	pop    esi
c002a0cd:	5f                   	pop    edi
c002a0ce:	5d                   	pop    ebp
c002a0cf:	c3                   	ret    
c002a0d0:	83 c4 04             	add    esp,0x4
c002a0d3:	8d 46 02             	lea    eax,[esi+0x2]
c002a0d6:	5b                   	pop    ebx
c002a0d7:	5e                   	pop    esi
c002a0d8:	5f                   	pop    edi
c002a0d9:	5d                   	pop    ebp
c002a0da:	c3                   	ret    
c002a0db:	90                   	nop
c002a0dc:	83 c4 04             	add    esp,0x4
c002a0df:	31 c0                	xor    eax,eax
c002a0e1:	5b                   	pop    ebx
c002a0e2:	5e                   	pop    esi
c002a0e3:	5f                   	pop    edi
c002a0e4:	5d                   	pop    ebp
c002a0e5:	c3                   	ret    
c002a0e6:	66 90                	xchg   ax,ax
c002a0e8:	b8 01 00 00 00       	mov    eax,0x1
c002a0ed:	eb d9                	jmp    c002a0c8 <SoundPort::buffer32(int*, int)+0x64>
c002a0ef:	90                   	nop

c002a0f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c002a0f0:	57                   	push   edi
c002a0f1:	56                   	push   esi
c002a0f2:	53                   	push   ebx
c002a0f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002a0f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002a0fb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c002a101:	39 03                	cmp    DWORD PTR [ebx],eax
c002a103:	74 13                	je     c002a118 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c002a105:	83 ec 0c             	sub    esp,0xc
c002a108:	68 88 38 03 c0       	push   0xc0033888
c002a10d:	e8 48 63 ff ff       	call   c002045a <KePanic(char const*)>
c002a112:	83 c4 10             	add    esp,0x10
c002a115:	8d 76 00             	lea    esi,[esi+0x0]
c002a118:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c002a11e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a121:	74 11                	je     c002a134 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c002a123:	83 ec 0c             	sub    esp,0xc
c002a126:	68 c7 38 03 c0       	push   0xc00338c7
c002a12b:	e8 2a 63 ff ff       	call   c002045a <KePanic(char const*)>
c002a130:	83 c4 10             	add    esp,0x10
c002a133:	90                   	nop
c002a134:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c002a13a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a13d:	74 11                	je     c002a150 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c002a13f:	83 ec 0c             	sub    esp,0xc
c002a142:	68 c7 38 03 c0       	push   0xc00338c7
c002a147:	e8 0e 63 ff ff       	call   c002045a <KePanic(char const*)>
c002a14c:	83 c4 10             	add    esp,0x10
c002a14f:	90                   	nop
c002a150:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c002a153:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c002a157:	7e 07                	jle    c002a160 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c002a159:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002a15d:	8d 76 00             	lea    esi,[esi+0x0]
c002a160:	85 f6                	test   esi,esi
c002a162:	7e 2c                	jle    c002a190 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c002a164:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a168:	8d 3c 36             	lea    edi,[esi+esi*1]
c002a16b:	31 c9                	xor    ecx,ecx
c002a16d:	01 d7                	add    edi,edx
c002a16f:	90                   	nop
c002a170:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c002a173:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c002a176:	85 c0                	test   eax,eax
c002a178:	79 06                	jns    c002a180 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c002a17a:	05 ff 7f 00 00       	add    eax,0x7fff
c002a17f:	90                   	nop
c002a180:	c1 f8 0f             	sar    eax,0xf
c002a183:	83 c1 04             	add    ecx,0x4
c002a186:	66 01 02             	add    WORD PTR [edx],ax
c002a189:	83 c2 02             	add    edx,0x2
c002a18c:	39 d7                	cmp    edi,edx
c002a18e:	75 e0                	jne    c002a170 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c002a190:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a193:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a196:	83 ec 04             	sub    esp,0x4
c002a199:	29 f0                	sub    eax,esi
c002a19b:	c1 e0 02             	shl    eax,0x2
c002a19e:	50                   	push   eax
c002a19f:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a1a2:	50                   	push   eax
c002a1a3:	52                   	push   edx
c002a1a4:	e8 27 62 fd ff       	call   c00003d0 <memmove>
c002a1a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a1ac:	83 c4 10             	add    esp,0x10
c002a1af:	29 f0                	sub    eax,esi
c002a1b1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a1b4:	89 f0                	mov    eax,esi
c002a1b6:	5b                   	pop    ebx
c002a1b7:	5e                   	pop    esi
c002a1b8:	5f                   	pop    edi
c002a1b9:	c3                   	ret    
c002a1ba:	66 90                	xchg   ax,ax

c002a1bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a1bc:	57                   	push   edi
c002a1bd:	56                   	push   esi
c002a1be:	53                   	push   ebx
c002a1bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a1c3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a1c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002a1cb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c002a1d1:	39 06                	cmp    DWORD PTR [esi],eax
c002a1d3:	74 13                	je     c002a1e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c002a1d5:	83 ec 0c             	sub    esp,0xc
c002a1d8:	68 a8 38 03 c0       	push   0xc00338a8
c002a1dd:	e8 78 62 ff ff       	call   c002045a <KePanic(char const*)>
c002a1e2:	83 c4 10             	add    esp,0x10
c002a1e5:	8d 76 00             	lea    esi,[esi+0x0]
c002a1e8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c002a1ee:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c002a1f1:	74 11                	je     c002a204 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c002a1f3:	83 ec 0c             	sub    esp,0xc
c002a1f6:	68 e3 38 03 c0       	push   0xc00338e3
c002a1fb:	e8 5a 62 ff ff       	call   c002045a <KePanic(char const*)>
c002a200:	83 c4 10             	add    esp,0x10
c002a203:	90                   	nop
c002a204:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c002a20a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c002a20d:	74 11                	je     c002a220 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c002a20f:	83 ec 0c             	sub    esp,0xc
c002a212:	68 e3 38 03 c0       	push   0xc00338e3
c002a217:	e8 3e 62 ff ff       	call   c002045a <KePanic(char const*)>
c002a21c:	83 c4 10             	add    esp,0x10
c002a21f:	90                   	nop
c002a220:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c002a223:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c002a227:	7e 07                	jle    c002a230 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c002a229:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a22d:	8d 76 00             	lea    esi,[esi+0x0]
c002a230:	85 ff                	test   edi,edi
c002a232:	7e 1c                	jle    c002a250 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c002a234:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a23b:	31 c0                	xor    eax,eax
c002a23d:	8d 76 00             	lea    esi,[esi+0x0]
c002a240:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a243:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a246:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c002a249:	83 c0 04             	add    eax,0x4
c002a24c:	39 c1                	cmp    ecx,eax
c002a24e:	75 f0                	jne    c002a240 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c002a250:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002a253:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002a256:	83 ec 04             	sub    esp,0x4
c002a259:	29 f8                	sub    eax,edi
c002a25b:	c1 e0 02             	shl    eax,0x2
c002a25e:	50                   	push   eax
c002a25f:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a262:	50                   	push   eax
c002a263:	52                   	push   edx
c002a264:	e8 67 61 fd ff       	call   c00003d0 <memmove>
c002a269:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002a26c:	83 c4 10             	add    esp,0x10
c002a26f:	29 f8                	sub    eax,edi
c002a271:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c002a274:	89 f8                	mov    eax,edi
c002a276:	5b                   	pop    ebx
c002a277:	5e                   	pop    esi
c002a278:	5f                   	pop    edi
c002a279:	c3                   	ret    

c002a27a <PCI::open(int, int, void*)>:
c002a27a:	83 ec 18             	sub    esp,0x18
c002a27d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a281:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a285:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a28b:	8b 10                	mov    edx,DWORD PTR [eax]
c002a28d:	50                   	push   eax
c002a28e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a291:	31 c0                	xor    eax,eax
c002a293:	83 c4 1c             	add    esp,0x1c
c002a296:	c3                   	ret    
c002a297:	90                   	nop

c002a298 <PCI::close(int, int, void*)>:
c002a298:	31 c0                	xor    eax,eax
c002a29a:	c3                   	ret    
c002a29b:	90                   	nop

c002a29c <PCI::PCI()>:
c002a29c:	83 ec 0c             	sub    esp,0xc
c002a29f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2a3:	83 ec 08             	sub    esp,0x8
c002a2a6:	68 ff 38 03 c0       	push   0xc00338ff
c002a2ab:	50                   	push   eax
c002a2ac:	e8 73 0b ff ff       	call   c001ae24 <Bus::Bus(char const*)>
c002a2b1:	83 c4 10             	add    esp,0x10
c002a2b4:	ba a8 39 03 c0       	mov    edx,0xc00339a8
c002a2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2bd:	89 10                	mov    DWORD PTR [eax],edx
c002a2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2c3:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2d1:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a2e0:	0f b6 d0             	movzx  edx,al
c002a2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2e7:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a2f8:	0f b6 d0             	movzx  edx,al
c002a2fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a2ff:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a308:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a30e:	8d 50 01             	lea    edx,[eax+0x1]
c002a311:	88 d1                	mov    cl,dl
c002a313:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a317:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a31d:	0f b6 d0             	movzx  edx,al
c002a320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a324:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a328:	83 c9 c0             	or     ecx,0xffffffc0
c002a32b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a32f:	90                   	nop
c002a330:	83 c4 0c             	add    esp,0xc
c002a333:	c3                   	ret    

c002a334 <PCI::readBAR8(unsigned int, int)>:
c002a334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a33c:	f6 c2 01             	test   dl,0x1
c002a33f:	74 07                	je     c002a348 <PCI::readBAR8(unsigned int, int)+0x14>
c002a341:	83 e2 fc             	and    edx,0xfffffffc
c002a344:	01 c2                	add    edx,eax
c002a346:	ec                   	in     al,dx
c002a347:	c3                   	ret    
c002a348:	83 e2 f0             	and    edx,0xfffffff0
c002a34b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a34e:	c3                   	ret    
c002a34f:	90                   	nop

c002a350 <PCI::readBAR16(unsigned int, int)>:
c002a350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a358:	f6 c2 01             	test   dl,0x1
c002a35b:	74 08                	je     c002a365 <PCI::readBAR16(unsigned int, int)+0x15>
c002a35d:	83 e2 fc             	and    edx,0xfffffffc
c002a360:	01 c2                	add    edx,eax
c002a362:	66 ed                	in     ax,dx
c002a364:	c3                   	ret    
c002a365:	83 e2 f0             	and    edx,0xfffffff0
c002a368:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a36c:	c3                   	ret    
c002a36d:	90                   	nop

c002a36e <PCI::readBAR32(unsigned int, int)>:
c002a36e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a376:	f6 c2 01             	test   dl,0x1
c002a379:	74 07                	je     c002a382 <PCI::readBAR32(unsigned int, int)+0x14>
c002a37b:	83 e2 fc             	and    edx,0xfffffffc
c002a37e:	01 c2                	add    edx,eax
c002a380:	ed                   	in     eax,dx
c002a381:	c3                   	ret    
c002a382:	83 e2 f0             	and    edx,0xfffffff0
c002a385:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a388:	c3                   	ret    
c002a389:	90                   	nop

c002a38a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a38a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a38e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a392:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a396:	f6 c2 01             	test   dl,0x1
c002a399:	74 07                	je     c002a3a2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a39b:	83 e2 fc             	and    edx,0xfffffffc
c002a39e:	01 ca                	add    edx,ecx
c002a3a0:	ee                   	out    dx,al
c002a3a1:	c3                   	ret    
c002a3a2:	83 e2 f0             	and    edx,0xfffffff0
c002a3a5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a3a8:	c3                   	ret    
c002a3a9:	90                   	nop

c002a3aa <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a3aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a3b6:	f6 c2 01             	test   dl,0x1
c002a3b9:	74 08                	je     c002a3c3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a3bb:	83 e2 fc             	and    edx,0xfffffffc
c002a3be:	01 ca                	add    edx,ecx
c002a3c0:	66 ef                	out    dx,ax
c002a3c2:	c3                   	ret    
c002a3c3:	83 e2 f0             	and    edx,0xfffffff0
c002a3c6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a3ca:	c3                   	ret    
c002a3cb:	90                   	nop

c002a3cc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a3cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a3d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a3d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a3d8:	f6 c2 01             	test   dl,0x1
c002a3db:	74 07                	je     c002a3e4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a3dd:	83 e2 fc             	and    edx,0xfffffffc
c002a3e0:	01 ca                	add    edx,ecx
c002a3e2:	ef                   	out    dx,eax
c002a3e3:	c3                   	ret    
c002a3e4:	83 e2 f0             	and    edx,0xfffffff0
c002a3e7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a3ea:	c3                   	ret    
c002a3eb:	90                   	nop

c002a3ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a3ec:	55                   	push   ebp
c002a3ed:	57                   	push   edi
c002a3ee:	56                   	push   esi
c002a3ef:	53                   	push   ebx
c002a3f0:	83 ec 0c             	sub    esp,0xc
c002a3f3:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a3f8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a3fc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a400:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a404:	83 fe 07             	cmp    esi,0x7
c002a407:	76 10                	jbe    c002a419 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a409:	83 ec 0c             	sub    esp,0xc
c002a40c:	68 07 39 03 c0       	push   0xc0033907
c002a411:	e8 44 60 ff ff       	call   c002045a <KePanic(char const*)>
c002a416:	83 c4 10             	add    esp,0x10
c002a419:	0f b6 db             	movzx  ebx,bl
c002a41c:	83 fb 0f             	cmp    ebx,0xf
c002a41f:	76 10                	jbe    c002a431 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a421:	83 ec 0c             	sub    esp,0xc
c002a424:	68 37 39 03 c0       	push   0xc0033937
c002a429:	e8 2c 60 ff ff       	call   c002045a <KePanic(char const*)>
c002a42e:	83 c4 10             	add    esp,0x10
c002a431:	8d 04 36             	lea    eax,[esi+esi*1]
c002a434:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a439:	83 c8 f0             	or     eax,0xfffffff0
c002a43c:	ee                   	out    dx,al
c002a43d:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a442:	89 e8                	mov    eax,ebp
c002a444:	ee                   	out    dx,al
c002a445:	83 c4 0c             	add    esp,0xc
c002a448:	89 d8                	mov    eax,ebx
c002a44a:	89 f9                	mov    ecx,edi
c002a44c:	c1 e0 08             	shl    eax,0x8
c002a44f:	0f b6 d9             	movzx  ebx,cl
c002a452:	83 e3 fc             	and    ebx,0xfffffffc
c002a455:	09 d8                	or     eax,ebx
c002a457:	5b                   	pop    ebx
c002a458:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a45d:	5e                   	pop    esi
c002a45e:	5f                   	pop    edi
c002a45f:	5d                   	pop    ebp
c002a460:	c3                   	ret    
c002a461:	90                   	nop

c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a462:	57                   	push   edi
c002a463:	56                   	push   esi
c002a464:	53                   	push   ebx
c002a465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a46d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a473:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a477:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a47b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a47f:	83 ff 01             	cmp    edi,0x1
c002a482:	75 3f                	jne    c002a4c3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a484:	89 de                	mov    esi,ebx
c002a486:	0f b6 c0             	movzx  eax,al
c002a489:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a48f:	c1 e0 10             	shl    eax,0x10
c002a492:	0f b6 c9             	movzx  ecx,cl
c002a495:	09 f0                	or     eax,esi
c002a497:	c1 e1 08             	shl    ecx,0x8
c002a49a:	0f b6 d2             	movzx  edx,dl
c002a49d:	09 c8                	or     eax,ecx
c002a49f:	c1 e2 0b             	shl    edx,0xb
c002a4a2:	09 d0                	or     eax,edx
c002a4a4:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a4a9:	0d 00 00 00 80       	or     eax,0x80000000
c002a4ae:	ef                   	out    dx,eax
c002a4af:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a4b4:	ed                   	in     eax,dx
c002a4b5:	83 e3 02             	and    ebx,0x2
c002a4b8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a4bf:	d3 e8                	shr    eax,cl
c002a4c1:	eb 44                	jmp    c002a507 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a4c3:	83 ff 02             	cmp    edi,0x2
c002a4c6:	75 2d                	jne    c002a4f5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a4c8:	83 ec 0c             	sub    esp,0xc
c002a4cb:	0f b6 c9             	movzx  ecx,cl
c002a4ce:	0f b6 d2             	movzx  edx,dl
c002a4d1:	0f b6 fb             	movzx  edi,bl
c002a4d4:	0f b6 c0             	movzx  eax,al
c002a4d7:	57                   	push   edi
c002a4d8:	51                   	push   ecx
c002a4d9:	52                   	push   edx
c002a4da:	50                   	push   eax
c002a4db:	56                   	push   esi
c002a4dc:	e8 0b ff ff ff       	call   c002a3ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a4e1:	89 c2                	mov    edx,eax
c002a4e3:	ed                   	in     eax,dx
c002a4e4:	83 e3 02             	and    ebx,0x2
c002a4e7:	83 c4 20             	add    esp,0x20
c002a4ea:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a4f1:	d3 e8                	shr    eax,cl
c002a4f3:	eb 12                	jmp    c002a507 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a4f5:	83 ec 0c             	sub    esp,0xc
c002a4f8:	68 67 39 03 c0       	push   0xc0033967
c002a4fd:	e8 58 5f ff ff       	call   c002045a <KePanic(char const*)>
c002a502:	83 c4 10             	add    esp,0x10
c002a505:	31 c0                	xor    eax,eax
c002a507:	5b                   	pop    ebx
c002a508:	5e                   	pop    esi
c002a509:	5f                   	pop    edi
c002a50a:	c3                   	ret    
c002a50b:	90                   	nop

c002a50c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a50c:	83 ec 18             	sub    esp,0x18
c002a50f:	6a 00                	push   0x0
c002a511:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a516:	50                   	push   eax
c002a517:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a51c:	50                   	push   eax
c002a51d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a522:	50                   	push   eax
c002a523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a527:	e8 36 ff ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a52c:	83 c4 2c             	add    esp,0x2c
c002a52f:	c3                   	ret    

c002a530 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a530:	83 ec 18             	sub    esp,0x18
c002a533:	6a 0e                	push   0xe
c002a535:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a53a:	50                   	push   eax
c002a53b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a540:	50                   	push   eax
c002a541:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a546:	50                   	push   eax
c002a547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a54b:	e8 12 ff ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a550:	83 c4 2c             	add    esp,0x2c
c002a553:	0f b6 c0             	movzx  eax,al
c002a556:	c3                   	ret    
c002a557:	90                   	nop

c002a558 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a558:	55                   	push   ebp
c002a559:	57                   	push   edi
c002a55a:	56                   	push   esi
c002a55b:	53                   	push   ebx
c002a55c:	83 ec 18             	sub    esp,0x18
c002a55f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a564:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a569:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a56e:	6a 0a                	push   0xa
c002a570:	56                   	push   esi
c002a571:	55                   	push   ebp
c002a572:	57                   	push   edi
c002a573:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a577:	e8 e6 fe ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a57c:	83 c4 14             	add    esp,0x14
c002a57f:	89 c3                	mov    ebx,eax
c002a581:	6a 0a                	push   0xa
c002a583:	0f b6 db             	movzx  ebx,bl
c002a586:	56                   	push   esi
c002a587:	55                   	push   ebp
c002a588:	57                   	push   edi
c002a589:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a58d:	e8 d0 fe ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a592:	83 c4 2c             	add    esp,0x2c
c002a595:	25 00 ff 00 00       	and    eax,0xff00
c002a59a:	09 d8                	or     eax,ebx
c002a59c:	5b                   	pop    ebx
c002a59d:	5e                   	pop    esi
c002a59e:	5f                   	pop    edi
c002a59f:	5d                   	pop    ebp
c002a5a0:	c3                   	ret    
c002a5a1:	90                   	nop

c002a5a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a5a2:	83 ec 18             	sub    esp,0x18
c002a5a5:	6a 08                	push   0x8
c002a5a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5ac:	50                   	push   eax
c002a5ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5b2:	50                   	push   eax
c002a5b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5b8:	50                   	push   eax
c002a5b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a5bd:	e8 a0 fe ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5c2:	83 c4 2c             	add    esp,0x2c
c002a5c5:	0f b6 c4             	movzx  eax,ah
c002a5c8:	c3                   	ret    
c002a5c9:	90                   	nop

c002a5ca <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a5ca:	83 ec 18             	sub    esp,0x18
c002a5cd:	6a 08                	push   0x8
c002a5cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5d4:	50                   	push   eax
c002a5d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5da:	50                   	push   eax
c002a5db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5e0:	50                   	push   eax
c002a5e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a5e5:	e8 78 fe ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5ea:	83 c4 2c             	add    esp,0x2c
c002a5ed:	c3                   	ret    

c002a5ee <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a5ee:	83 ec 18             	sub    esp,0x18
c002a5f1:	6a 3c                	push   0x3c
c002a5f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5f8:	50                   	push   eax
c002a5f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a5fe:	50                   	push   eax
c002a5ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a604:	50                   	push   eax
c002a605:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a609:	e8 54 fe ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a60e:	83 c4 2c             	add    esp,0x2c
c002a611:	c3                   	ret    

c002a612 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a612:	83 ec 18             	sub    esp,0x18
c002a615:	6a 18                	push   0x18
c002a617:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a61c:	50                   	push   eax
c002a61d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a622:	50                   	push   eax
c002a623:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a628:	50                   	push   eax
c002a629:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a62d:	e8 30 fe ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a632:	83 c4 2c             	add    esp,0x2c
c002a635:	0f b6 c4             	movzx  eax,ah
c002a638:	c3                   	ret    
c002a639:	90                   	nop

c002a63a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a63a:	55                   	push   ebp
c002a63b:	57                   	push   edi
c002a63c:	56                   	push   esi
c002a63d:	53                   	push   ebx
c002a63e:	83 ec 28             	sub    esp,0x28
c002a641:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a645:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a64a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a64f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a654:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a65b:	8d 43 12             	lea    eax,[ebx+0x12]
c002a65e:	83 c3 10             	add    ebx,0x10
c002a661:	0f b6 c0             	movzx  eax,al
c002a664:	0f b6 db             	movzx  ebx,bl
c002a667:	50                   	push   eax
c002a668:	51                   	push   ecx
c002a669:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a66d:	57                   	push   edi
c002a66e:	55                   	push   ebp
c002a66f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a673:	e8 ea fd ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a678:	83 c4 14             	add    esp,0x14
c002a67b:	89 c6                	mov    esi,eax
c002a67d:	53                   	push   ebx
c002a67e:	c1 e6 10             	shl    esi,0x10
c002a681:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a685:	51                   	push   ecx
c002a686:	57                   	push   edi
c002a687:	55                   	push   ebp
c002a688:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a68c:	e8 d1 fd ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a691:	83 c4 3c             	add    esp,0x3c
c002a694:	0f b7 c0             	movzx  eax,ax
c002a697:	5b                   	pop    ebx
c002a698:	09 f0                	or     eax,esi
c002a69a:	5e                   	pop    esi
c002a69b:	5f                   	pop    edi
c002a69c:	5d                   	pop    ebp
c002a69d:	c3                   	ret    

c002a69e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a69e:	55                   	push   ebp
c002a69f:	57                   	push   edi
c002a6a0:	56                   	push   esi
c002a6a1:	53                   	push   ebx
c002a6a2:	83 ec 0c             	sub    esp,0xc
c002a6a5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a6a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a6ad:	89 f5                	mov    ebp,esi
c002a6af:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a6b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a6b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a6bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a6c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a6c5:	83 f9 01             	cmp    ecx,0x1
c002a6c8:	75 5d                	jne    c002a727 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a6ca:	0f b6 c8             	movzx  ecx,al
c002a6cd:	0f b6 d2             	movzx  edx,dl
c002a6d0:	c1 e1 10             	shl    ecx,0x10
c002a6d3:	c1 e2 0b             	shl    edx,0xb
c002a6d6:	89 f0                	mov    eax,esi
c002a6d8:	25 fc 00 00 00       	and    eax,0xfc
c002a6dd:	09 c1                	or     ecx,eax
c002a6df:	89 e8                	mov    eax,ebp
c002a6e1:	0f b6 c0             	movzx  eax,al
c002a6e4:	c1 e0 08             	shl    eax,0x8
c002a6e7:	09 c1                	or     ecx,eax
c002a6e9:	09 d1                	or     ecx,edx
c002a6eb:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a6f0:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a6f6:	89 c8                	mov    eax,ecx
c002a6f8:	ef                   	out    dx,eax
c002a6f9:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a6fe:	ed                   	in     eax,dx
c002a6ff:	0f b7 db             	movzx  ebx,bx
c002a702:	83 e6 02             	and    esi,0x2
c002a705:	74 0a                	je     c002a711 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a707:	0f b7 d0             	movzx  edx,ax
c002a70a:	c1 e3 10             	shl    ebx,0x10
c002a70d:	09 d3                	or     ebx,edx
c002a70f:	eb 05                	jmp    c002a716 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a711:	66 31 c0             	xor    ax,ax
c002a714:	09 c3                	or     ebx,eax
c002a716:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a71b:	89 c8                	mov    eax,ecx
c002a71d:	ef                   	out    dx,eax
c002a71e:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a723:	89 d8                	mov    eax,ebx
c002a725:	eb 41                	jmp    c002a768 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a727:	83 f9 02             	cmp    ecx,0x2
c002a72a:	75 45                	jne    c002a771 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a72c:	83 ec 0c             	sub    esp,0xc
c002a72f:	0f b6 d2             	movzx  edx,dl
c002a732:	89 f1                	mov    ecx,esi
c002a734:	0f b6 c0             	movzx  eax,al
c002a737:	0f b6 f1             	movzx  esi,cl
c002a73a:	89 e9                	mov    ecx,ebp
c002a73c:	56                   	push   esi
c002a73d:	0f b6 c9             	movzx  ecx,cl
c002a740:	51                   	push   ecx
c002a741:	52                   	push   edx
c002a742:	50                   	push   eax
c002a743:	57                   	push   edi
c002a744:	e8 a3 fc ff ff       	call   c002a3ec <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a749:	89 c2                	mov    edx,eax
c002a74b:	ed                   	in     eax,dx
c002a74c:	83 c4 20             	add    esp,0x20
c002a74f:	0f b7 db             	movzx  ebx,bx
c002a752:	f6 c2 02             	test   dl,0x2
c002a755:	74 0c                	je     c002a763 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a757:	0f b7 c8             	movzx  ecx,ax
c002a75a:	89 d8                	mov    eax,ebx
c002a75c:	c1 e0 10             	shl    eax,0x10
c002a75f:	09 c8                	or     eax,ecx
c002a761:	eb 05                	jmp    c002a768 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a763:	66 31 c0             	xor    ax,ax
c002a766:	09 d8                	or     eax,ebx
c002a768:	ef                   	out    dx,eax
c002a769:	83 c4 0c             	add    esp,0xc
c002a76c:	5b                   	pop    ebx
c002a76d:	5e                   	pop    esi
c002a76e:	5f                   	pop    edi
c002a76f:	5d                   	pop    ebp
c002a770:	c3                   	ret    
c002a771:	c7 44 24 20 67 39 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033967
c002a779:	83 c4 0c             	add    esp,0xc
c002a77c:	5b                   	pop    ebx
c002a77d:	5e                   	pop    esi
c002a77e:	5f                   	pop    edi
c002a77f:	5d                   	pop    ebp
c002a780:	e9 d5 5c ff ff       	jmp    c002045a <KePanic(char const*)>
c002a785:	90                   	nop

c002a786 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a786:	55                   	push   ebp
c002a787:	57                   	push   edi
c002a788:	56                   	push   esi
c002a789:	53                   	push   ebx
c002a78a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a790:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a797:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a79e:	0f 85 bd 00 00 00    	jne    c002a861 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a7a4:	83 ec 0c             	sub    esp,0xc
c002a7a7:	68 14 01 00 00       	push   0x114
c002a7ac:	e8 00 be fe ff       	call   c00165b1 <malloc>
c002a7b1:	83 c4 0c             	add    esp,0xc
c002a7b4:	89 c3                	mov    ebx,eax
c002a7b6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a7bc:	68 6d 39 03 c0       	push   0xc003396d
c002a7c1:	50                   	push   eax
c002a7c2:	e8 81 fe fe ff       	call   c001a648 <File::File(char const*, Process*)>
c002a7c7:	83 c4 10             	add    esp,0x10
c002a7ca:	85 db                	test   ebx,ebx
c002a7cc:	0f 84 67 02 00 00    	je     c002aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a7d2:	56                   	push   esi
c002a7d3:	56                   	push   esi
c002a7d4:	6a 01                	push   0x1
c002a7d6:	53                   	push   ebx
c002a7d7:	e8 8a fe fe ff       	call   c001a666 <File::open(FileOpenMode)>
c002a7dc:	83 c4 10             	add    esp,0x10
c002a7df:	85 c0                	test   eax,eax
c002a7e1:	0f 85 52 02 00 00    	jne    c002aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a7e7:	52                   	push   edx
c002a7e8:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a7ec:	50                   	push   eax
c002a7ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a7f1:	50                   	push   eax
c002a7f2:	53                   	push   ebx
c002a7f3:	e8 70 01 ff ff       	call   c001a968 <File::stat(unsigned long long*, bool*)>
c002a7f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a7fc:	40                   	inc    eax
c002a7fd:	89 04 24             	mov    DWORD PTR [esp],eax
c002a800:	e8 ac bd fe ff       	call   c00165b1 <malloc>
c002a805:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a809:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a80e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a812:	59                   	pop    ecx
c002a813:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a815:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a819:	51                   	push   ecx
c002a81a:	50                   	push   eax
c002a81b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a81f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a823:	53                   	push   ebx
c002a824:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a827:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a82b:	83 c4 20             	add    esp,0x20
c002a82e:	89 c8                	mov    eax,ecx
c002a830:	99                   	cdq    
c002a831:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a835:	0f 85 fe 01 00 00    	jne    c002aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a83b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a83f:	0f 85 f4 01 00 00    	jne    c002aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a845:	83 ec 0c             	sub    esp,0xc
c002a848:	53                   	push   ebx
c002a849:	e8 76 fe fe ff       	call   c001a6c4 <File::close()>
c002a84e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a852:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a859:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a85e:	83 c4 10             	add    esp,0x10
c002a861:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a866:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a86c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a870:	31 f6                	xor    esi,esi
c002a872:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a87a:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a881:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a886:	31 c9                	xor    ecx,ecx
c002a888:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a890:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a895:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a89d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a8a1:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a8a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a8ad:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a8b1:	0f 8e 82 01 00 00    	jle    c002aa39 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a8b7:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a8ba:	d4 40                	aam    0x40
c002a8bc:	d5 39                	aad    0x39
c002a8be:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a8c2:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a8c6:	d4 40                	aam    0x40
c002a8c8:	d5 39                	aad    0x39
c002a8ca:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a8ce:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a8d2:	d4 40                	aam    0x40
c002a8d4:	d5 39                	aad    0x39
c002a8d6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a8da:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a8de:	d4 40                	aam    0x40
c002a8e0:	d5 39                	aad    0x39
c002a8e2:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a8e6:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a8ea:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a8ee:	3c 56                	cmp    al,0x56
c002a8f0:	74 43                	je     c002a935 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a8f2:	d4 40                	aam    0x40
c002a8f4:	d5 39                	aad    0x39
c002a8f6:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a8f9:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a8fd:	0f b6 c9             	movzx  ecx,cl
c002a900:	c1 e1 04             	shl    ecx,0x4
c002a903:	d4 40                	aam    0x40
c002a905:	d5 39                	aad    0x39
c002a907:	83 e8 30             	sub    eax,0x30
c002a90a:	0f b6 c0             	movzx  eax,al
c002a90d:	09 c1                	or     ecx,eax
c002a90f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a913:	c1 e1 04             	shl    ecx,0x4
c002a916:	d4 40                	aam    0x40
c002a918:	d5 39                	aad    0x39
c002a91a:	83 e8 30             	sub    eax,0x30
c002a91d:	0f b6 c0             	movzx  eax,al
c002a920:	09 c1                	or     ecx,eax
c002a922:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a926:	c1 e1 04             	shl    ecx,0x4
c002a929:	d4 40                	aam    0x40
c002a92b:	d5 39                	aad    0x39
c002a92d:	83 e8 30             	sub    eax,0x30
c002a930:	0f b6 c0             	movzx  eax,al
c002a933:	09 c1                	or     ecx,eax
c002a935:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a93d:	3c 58                	cmp    al,0x58
c002a93f:	74 47                	je     c002a988 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a941:	d4 40                	aam    0x40
c002a943:	d5 39                	aad    0x39
c002a945:	8d 50 d0             	lea    edx,[eax-0x30]
c002a948:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a94c:	0f b6 d2             	movzx  edx,dl
c002a94f:	c1 e2 04             	shl    edx,0x4
c002a952:	d4 40                	aam    0x40
c002a954:	d5 39                	aad    0x39
c002a956:	83 e8 30             	sub    eax,0x30
c002a959:	0f b6 c0             	movzx  eax,al
c002a95c:	09 c2                	or     edx,eax
c002a95e:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a962:	c1 e2 04             	shl    edx,0x4
c002a965:	d4 40                	aam    0x40
c002a967:	d5 39                	aad    0x39
c002a969:	83 e8 30             	sub    eax,0x30
c002a96c:	0f b6 c0             	movzx  eax,al
c002a96f:	09 c2                	or     edx,eax
c002a971:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a975:	c1 e2 04             	shl    edx,0x4
c002a978:	d4 40                	aam    0x40
c002a97a:	d5 39                	aad    0x39
c002a97c:	83 e8 30             	sub    eax,0x30
c002a97f:	0f b6 c0             	movzx  eax,al
c002a982:	09 c2                	or     edx,eax
c002a984:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a988:	83 c6 10             	add    esi,0x10
c002a98b:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a98f:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a993:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a997:	83 fa 0a             	cmp    edx,0xa
c002a99a:	74 0b                	je     c002a9a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a99c:	47                   	inc    edi
c002a99d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a9a1:	75 19                	jne    c002a9bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a9a3:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a9a7:	31 c0                	xor    eax,eax
c002a9a9:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a9ae:	0f 94 c0             	sete   al
c002a9b1:	01 c6                	add    esi,eax
c002a9b3:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a9b8:	75 0b                	jne    c002a9c5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a9ba:	eb 14                	jmp    c002a9d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a9bc:	46                   	inc    esi
c002a9bd:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a9c0:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a9c3:	eb ca                	jmp    c002a98f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a9c5:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a9ca:	0f 85 dd fe ff ff    	jne    c002a8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a9d0:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a9d5:	74 10                	je     c002a9e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a9d7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a9dc:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a9e1:	0f 85 c6 fe ff ff    	jne    c002a8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a9e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a9eb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a9ef:	83 e8 30             	sub    eax,0x30
c002a9f2:	83 ef 30             	sub    edi,0x30
c002a9f5:	c1 e0 04             	shl    eax,0x4
c002a9f8:	09 f8                	or     eax,edi
c002a9fa:	0f b6 c0             	movzx  eax,al
c002a9fd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002aa01:	0f 85 a6 fe ff ff    	jne    c002a8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002aa0b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002aa0f:	83 e8 30             	sub    eax,0x30
c002aa12:	83 ef 30             	sub    edi,0x30
c002aa15:	c1 e0 04             	shl    eax,0x4
c002aa18:	09 f8                	or     eax,edi
c002aa1a:	0f b6 c0             	movzx  eax,al
c002aa1d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002aa21:	0f 85 86 fe ff ff    	jne    c002a8ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002aa27:	50                   	push   eax
c002aa28:	50                   	push   eax
c002aa29:	8d 44 24 48          	lea    eax,[esp+0x48]
c002aa2d:	50                   	push   eax
c002aa2e:	55                   	push   ebp
c002aa2f:	e8 0c 5c fd ff       	call   c0000640 <strcpy>
c002aa34:	83 c4 10             	add    esp,0x10
c002aa37:	eb 06                	jmp    c002aa3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002aa39:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002aa3d:	31 ed                	xor    ebp,ebp
c002aa3f:	81 c4 4c 01 00 00    	add    esp,0x14c
c002aa45:	89 e8                	mov    eax,ebp
c002aa47:	5b                   	pop    ebx
c002aa48:	5e                   	pop    esi
c002aa49:	5f                   	pop    edi
c002aa4a:	5d                   	pop    ebp
c002aa4b:	c3                   	ret    

c002aa4c <PCI::checkBus(unsigned char)>:
c002aa4c:	56                   	push   esi
c002aa4d:	53                   	push   ebx
c002aa4e:	31 db                	xor    ebx,ebx
c002aa50:	51                   	push   ecx
c002aa51:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002aa56:	52                   	push   edx
c002aa57:	53                   	push   ebx
c002aa58:	43                   	inc    ebx
c002aa59:	56                   	push   esi
c002aa5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002aa5e:	e8 03 03 00 00       	call   c002ad66 <PCI::checkDevice(unsigned char, unsigned char)>
c002aa63:	83 c4 10             	add    esp,0x10
c002aa66:	83 fb 20             	cmp    ebx,0x20
c002aa69:	75 eb                	jne    c002aa56 <PCI::checkBus(unsigned char)+0xa>
c002aa6b:	58                   	pop    eax
c002aa6c:	5b                   	pop    ebx
c002aa6d:	5e                   	pop    esi
c002aa6e:	c3                   	ret    
c002aa6f:	90                   	nop

c002aa70 <PCI::foundDevice(PCIDeviceInfo)>:
c002aa70:	55                   	push   ebp
c002aa71:	57                   	push   edi
c002aa72:	56                   	push   esi
c002aa73:	53                   	push   ebx
c002aa74:	83 ec 1c             	sub    esp,0x1c
c002aa77:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002aa7c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002aa80:	3d ff ff 00 00       	cmp    eax,0xffff
c002aa85:	0f 84 57 01 00 00    	je     c002abe2 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002aa8b:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002aa90:	66 3d 06 04          	cmp    ax,0x406
c002aa94:	75 2c                	jne    c002aac2 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002aa96:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002aa9b:	50                   	push   eax
c002aa9c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002aaa1:	50                   	push   eax
c002aaa2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002aaa7:	50                   	push   eax
c002aaa8:	53                   	push   ebx
c002aaa9:	e8 64 fb ff ff       	call   c002a612 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002aaae:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002aab2:	0f b6 c0             	movzx  eax,al
c002aab5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002aab9:	83 c4 2c             	add    esp,0x2c
c002aabc:	5b                   	pop    ebx
c002aabd:	5e                   	pop    esi
c002aabe:	5f                   	pop    edi
c002aabf:	5d                   	pop    ebp
c002aac0:	eb 8a                	jmp    c002aa4c <PCI::checkBus(unsigned char)>
c002aac2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002aac6:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002aacc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002aad0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002aad4:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002aad9:	85 d2                	test   edx,edx
c002aadb:	74 36                	je     c002ab13 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002aadd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002aae0:	85 c9                	test   ecx,ecx
c002aae2:	74 2b                	je     c002ab0f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002aae4:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002aaea:	31 ee                	xor    esi,ebp
c002aaec:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002aaf2:	75 1b                	jne    c002ab0f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002aaf4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002aaf8:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002aafe:	75 0f                	jne    c002ab0f <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002ab00:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002ab07:	39 f9                	cmp    ecx,edi
c002ab09:	0f 84 d3 00 00 00    	je     c002abe2 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002ab0f:	8b 12                	mov    edx,DWORD PTR [edx]
c002ab11:	eb c6                	jmp    c002aad9 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002ab13:	3d 01 06 00 00       	cmp    eax,0x601
c002ab18:	75 19                	jne    c002ab33 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002ab1a:	83 ec 0c             	sub    esp,0xc
c002ab1d:	68 64 01 00 00       	push   0x164
c002ab22:	e8 8a ba fe ff       	call   c00165b1 <malloc>
c002ab27:	89 c5                	mov    ebp,eax
c002ab29:	89 04 24             	mov    DWORD PTR [esp],eax
c002ab2c:	e8 a1 0e 00 00       	call   c002b9d2 <SATABus::SATABus()>
c002ab31:	eb 1e                	jmp    c002ab51 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002ab33:	3d 01 01 00 00       	cmp    eax,0x101
c002ab38:	75 62                	jne    c002ab9c <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002ab3a:	83 ec 0c             	sub    esp,0xc
c002ab3d:	68 70 02 00 00       	push   0x270
c002ab42:	e8 6a ba fe ff       	call   c00165b1 <malloc>
c002ab47:	89 c5                	mov    ebp,eax
c002ab49:	89 04 24             	mov    DWORD PTR [esp],eax
c002ab4c:	e8 e5 02 00 00       	call   c002ae36 <IDE::IDE()>
c002ab51:	5f                   	pop    edi
c002ab52:	58                   	pop    eax
c002ab53:	55                   	push   ebp
c002ab54:	53                   	push   ebx
c002ab55:	e8 68 09 ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c002ab5a:	83 ec 1c             	sub    esp,0x1c
c002ab5d:	b9 09 00 00 00       	mov    ecx,0x9
c002ab62:	fc                   	cld    
c002ab63:	89 e7                	mov    edi,esp
c002ab65:	8d 74 24 60          	lea    esi,[esp+0x60]
c002ab69:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ab6b:	55                   	push   ebp
c002ab6c:	e8 97 08 ff ff       	call   c001b408 <Device::preOpenPCI(PCIDeviceInfo)>
c002ab71:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002ab74:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002ab78:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002ab80:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002ab88:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002ab90:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002ab93:	83 c4 4c             	add    esp,0x4c
c002ab96:	5b                   	pop    ebx
c002ab97:	5e                   	pop    esi
c002ab98:	5f                   	pop    edi
c002ab99:	5d                   	pop    ebp
c002ab9a:	ff e0                	jmp    eax
c002ab9c:	83 ec 0c             	sub    esp,0xc
c002ab9f:	68 58 01 00 00       	push   0x158
c002aba4:	e8 08 ba fe ff       	call   c00165b1 <malloc>
c002aba9:	89 c5                	mov    ebp,eax
c002abab:	58                   	pop    eax
c002abac:	5a                   	pop    edx
c002abad:	68 86 39 03 c0       	push   0xc0033986
c002abb2:	55                   	push   ebp
c002abb3:	e8 be 0b ff ff       	call   c001b776 <DriverlessDevice::DriverlessDevice(char const*)>
c002abb8:	59                   	pop    ecx
c002abb9:	5e                   	pop    esi
c002abba:	55                   	push   ebp
c002abbb:	53                   	push   ebx
c002abbc:	e8 01 09 ff ff       	call   c001b4c2 <Device::addChild(Device*)>
c002abc1:	83 c4 10             	add    esp,0x10
c002abc4:	b9 09 00 00 00       	mov    ecx,0x9
c002abc9:	fc                   	cld    
c002abca:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002abce:	89 fe                	mov    esi,edi
c002abd0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002abd2:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002abd6:	83 c4 1c             	add    esp,0x1c
c002abd9:	5b                   	pop    ebx
c002abda:	5e                   	pop    esi
c002abdb:	5f                   	pop    edi
c002abdc:	5d                   	pop    ebp
c002abdd:	e9 26 08 ff ff       	jmp    c001b408 <Device::preOpenPCI(PCIDeviceInfo)>
c002abe2:	83 c4 1c             	add    esp,0x1c
c002abe5:	5b                   	pop    ebx
c002abe6:	5e                   	pop    esi
c002abe7:	5f                   	pop    edi
c002abe8:	5d                   	pop    ebp
c002abe9:	c3                   	ret    

c002abea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002abea:	55                   	push   ebp
c002abeb:	57                   	push   edi
c002abec:	56                   	push   esi
c002abed:	53                   	push   ebx
c002abee:	83 ec 68             	sub    esp,0x68
c002abf1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002abf5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002abfc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002ac00:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002ac07:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002ac0c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ac10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002ac17:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002ac1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002ac20:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002ac25:	6a 0c                	push   0xc
c002ac27:	57                   	push   edi
c002ac28:	53                   	push   ebx
c002ac29:	56                   	push   esi
c002ac2a:	55                   	push   ebp
c002ac2b:	e8 32 f8 ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ac30:	83 c4 20             	add    esp,0x20
c002ac33:	57                   	push   edi
c002ac34:	53                   	push   ebx
c002ac35:	56                   	push   esi
c002ac36:	55                   	push   ebp
c002ac37:	e8 1c f9 ff ff       	call   c002a558 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002ac3c:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002ac41:	57                   	push   edi
c002ac42:	53                   	push   ebx
c002ac43:	56                   	push   esi
c002ac44:	55                   	push   ebp
c002ac45:	e8 a4 f9 ff ff       	call   c002a5ee <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002ac4a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002ac4e:	83 c4 14             	add    esp,0x14
c002ac51:	6a 3c                	push   0x3c
c002ac53:	57                   	push   edi
c002ac54:	53                   	push   ebx
c002ac55:	56                   	push   esi
c002ac56:	55                   	push   ebp
c002ac57:	e8 06 f8 ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ac5c:	0f b6 c4             	movzx  eax,ah
c002ac5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002ac63:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002ac67:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002ac6b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002ac70:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002ac76:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002ac7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ac80:	83 c4 20             	add    esp,0x20
c002ac83:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002ac88:	74 30                	je     c002acba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ac8a:	31 c0                	xor    eax,eax
c002ac8c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002ac90:	7e 28                	jle    c002acba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ac92:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002ac9a:	39 cb                	cmp    ebx,ecx
c002ac9c:	75 19                	jne    c002acb7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ac9e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002aca6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002acaa:	75 0b                	jne    c002acb7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002acac:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002acb3:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002acb7:	40                   	inc    eax
c002acb8:	eb d2                	jmp    c002ac8c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002acba:	31 d2                	xor    edx,edx
c002acbc:	83 ec 0c             	sub    esp,0xc
c002acbf:	57                   	push   edi
c002acc0:	53                   	push   ebx
c002acc1:	56                   	push   esi
c002acc2:	52                   	push   edx
c002acc3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002acc7:	55                   	push   ebp
c002acc8:	e8 6d f9 ff ff       	call   c002a63a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002accd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002acd1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002acd5:	42                   	inc    edx
c002acd6:	83 c4 20             	add    esp,0x20
c002acd9:	83 fa 06             	cmp    edx,0x6
c002acdc:	75 de                	jne    c002acbc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002acde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002ace2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ace6:	c1 e2 08             	shl    edx,0x8
c002ace9:	83 ec 0c             	sub    esp,0xc
c002acec:	0f b6 c4             	movzx  eax,ah
c002acef:	09 d0                	or     eax,edx
c002acf1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002acf6:	6a 02                	push   0x2
c002acf8:	57                   	push   edi
c002acf9:	53                   	push   ebx
c002acfa:	56                   	push   esi
c002acfb:	55                   	push   ebp
c002acfc:	e8 61 f7 ff ff       	call   c002a462 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ad01:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ad06:	83 c4 20             	add    esp,0x20
c002ad09:	57                   	push   edi
c002ad0a:	53                   	push   ebx
c002ad0b:	56                   	push   esi
c002ad0c:	55                   	push   ebp
c002ad0d:	e8 90 f8 ff ff       	call   c002a5a2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002ad12:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002ad16:	57                   	push   edi
c002ad17:	53                   	push   ebx
c002ad18:	56                   	push   esi
c002ad19:	55                   	push   ebp
c002ad1a:	e8 ed f7 ff ff       	call   c002a50c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ad1f:	b9 09 00 00 00       	mov    ecx,0x9
c002ad24:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002ad29:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002ad2d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002ad31:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002ad35:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002ad39:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002ad3d:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002ad41:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002ad45:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002ad49:	83 ec 0c             	sub    esp,0xc
c002ad4c:	fc                   	cld    
c002ad4d:	89 e7                	mov    edi,esp
c002ad4f:	8d 74 24 58          	lea    esi,[esp+0x58]
c002ad53:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002ad55:	55                   	push   ebp
c002ad56:	e8 15 fd ff ff       	call   c002aa70 <PCI::foundDevice(PCIDeviceInfo)>
c002ad5b:	81 c4 8c 00 00 00    	add    esp,0x8c
c002ad61:	5b                   	pop    ebx
c002ad62:	5e                   	pop    esi
c002ad63:	5f                   	pop    edi
c002ad64:	5d                   	pop    ebp
c002ad65:	c3                   	ret    

c002ad66 <PCI::checkDevice(unsigned char, unsigned char)>:
c002ad66:	55                   	push   ebp
c002ad67:	57                   	push   edi
c002ad68:	56                   	push   esi
c002ad69:	53                   	push   ebx
c002ad6a:	83 ec 0c             	sub    esp,0xc
c002ad6d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ad71:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ad76:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ad7b:	6a 00                	push   0x0
c002ad7d:	56                   	push   esi
c002ad7e:	57                   	push   edi
c002ad7f:	55                   	push   ebp
c002ad80:	e8 87 f7 ff ff       	call   c002a50c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ad85:	6a 00                	push   0x0
c002ad87:	56                   	push   esi
c002ad88:	57                   	push   edi
c002ad89:	55                   	push   ebp
c002ad8a:	e8 5b fe ff ff       	call   c002abea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ad8f:	83 c4 20             	add    esp,0x20
c002ad92:	6a 00                	push   0x0
c002ad94:	56                   	push   esi
c002ad95:	57                   	push   edi
c002ad96:	55                   	push   ebp
c002ad97:	e8 94 f7 ff ff       	call   c002a530 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ad9c:	83 c4 10             	add    esp,0x10
c002ad9f:	a8 80                	test   al,0x80
c002ada1:	74 2d                	je     c002add0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ada3:	bb 01 00 00 00       	mov    ebx,0x1
c002ada8:	53                   	push   ebx
c002ada9:	56                   	push   esi
c002adaa:	57                   	push   edi
c002adab:	55                   	push   ebp
c002adac:	e8 5b f7 ff ff       	call   c002a50c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002adb1:	83 c4 10             	add    esp,0x10
c002adb4:	0f b7 c0             	movzx  eax,ax
c002adb7:	3d ff ff 00 00       	cmp    eax,0xffff
c002adbc:	74 0c                	je     c002adca <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002adbe:	53                   	push   ebx
c002adbf:	56                   	push   esi
c002adc0:	57                   	push   edi
c002adc1:	55                   	push   ebp
c002adc2:	e8 23 fe ff ff       	call   c002abea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002adc7:	83 c4 10             	add    esp,0x10
c002adca:	43                   	inc    ebx
c002adcb:	83 fb 08             	cmp    ebx,0x8
c002adce:	75 d8                	jne    c002ada8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002add0:	83 c4 0c             	add    esp,0xc
c002add3:	5b                   	pop    ebx
c002add4:	5e                   	pop    esi
c002add5:	5f                   	pop    edi
c002add6:	5d                   	pop    ebp
c002add7:	c3                   	ret    

c002add8 <PCI::detect()>:
c002add8:	56                   	push   esi
c002add9:	53                   	push   ebx
c002adda:	53                   	push   ebx
c002addb:	31 db                	xor    ebx,ebx
c002addd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ade1:	6a 00                	push   0x0
c002ade3:	6a 00                	push   0x0
c002ade5:	6a 00                	push   0x0
c002ade7:	56                   	push   esi
c002ade8:	e8 43 f7 ff ff       	call   c002a530 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002aded:	83 c4 10             	add    esp,0x10
c002adf0:	a8 80                	test   al,0x80
c002adf2:	75 21                	jne    c002ae15 <PCI::detect()+0x3d>
c002adf4:	51                   	push   ecx
c002adf5:	51                   	push   ecx
c002adf6:	6a 00                	push   0x0
c002adf8:	56                   	push   esi
c002adf9:	e8 4e fc ff ff       	call   c002aa4c <PCI::checkBus(unsigned char)>
c002adfe:	83 c4 10             	add    esp,0x10
c002ae01:	eb 2a                	jmp    c002ae2d <PCI::detect()+0x55>
c002ae03:	52                   	push   edx
c002ae04:	52                   	push   edx
c002ae05:	53                   	push   ebx
c002ae06:	43                   	inc    ebx
c002ae07:	56                   	push   esi
c002ae08:	e8 3f fc ff ff       	call   c002aa4c <PCI::checkBus(unsigned char)>
c002ae0d:	83 c4 10             	add    esp,0x10
c002ae10:	83 fb 08             	cmp    ebx,0x8
c002ae13:	74 18                	je     c002ae2d <PCI::detect()+0x55>
c002ae15:	53                   	push   ebx
c002ae16:	6a 00                	push   0x0
c002ae18:	6a 00                	push   0x0
c002ae1a:	56                   	push   esi
c002ae1b:	e8 ec f6 ff ff       	call   c002a50c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ae20:	83 c4 10             	add    esp,0x10
c002ae23:	0f b7 c0             	movzx  eax,ax
c002ae26:	3d ff ff 00 00       	cmp    eax,0xffff
c002ae2b:	74 d6                	je     c002ae03 <PCI::detect()+0x2b>
c002ae2d:	58                   	pop    eax
c002ae2e:	5b                   	pop    ebx
c002ae2f:	5e                   	pop    esi
c002ae30:	c3                   	ret    
c002ae31:	90                   	nop

c002ae32 <IDE::close(int, int, void*)>:
c002ae32:	83 c8 ff             	or     eax,0xffffffff
c002ae35:	c3                   	ret    

c002ae36 <IDE::IDE()>:
c002ae36:	83 ec 0c             	sub    esp,0xc
c002ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ae3d:	83 ec 08             	sub    esp,0x8
c002ae40:	68 cc 39 03 c0       	push   0xc00339cc
c002ae45:	50                   	push   eax
c002ae46:	e8 d1 09 ff ff       	call   c001b81c <HardDiskController::HardDiskController(char const*)>
c002ae4b:	83 c4 10             	add    esp,0x10
c002ae4e:	ba 5c 3a 03 c0       	mov    edx,0xc0033a5c
c002ae53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ae57:	89 10                	mov    DWORD PTR [eax],edx
c002ae59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ae5d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002ae64:	90                   	nop
c002ae65:	83 c4 0c             	add    esp,0xc
c002ae68:	c3                   	ret    
c002ae69:	90                   	nop

c002ae6a <IDE::prepareInterrupt(unsigned char)>:
c002ae6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ae6f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ae73:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ae7b:	c3                   	ret    

c002ae7c <selectDrive(unsigned char, unsigned char)>:
c002ae7c:	c3                   	ret    
c002ae7d:	90                   	nop

c002ae7e <IDE::getBase(unsigned char)>:
c002ae7e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ae83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ae87:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002ae8f:	c3                   	ret    

c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002ae90:	55                   	push   ebp
c002ae91:	57                   	push   edi
c002ae92:	56                   	push   esi
c002ae93:	53                   	push   ebx
c002ae94:	83 ec 1c             	sub    esp,0x1c
c002ae97:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ae9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ae9f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002aea2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002aea6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002aeaa:	80 f9 03             	cmp    cl,0x3
c002aead:	77 4f                	ja     c002aefe <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002aeaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002aeb3:	0f b6 fa             	movzx  edi,dl
c002aeb6:	0f b6 db             	movzx  ebx,bl
c002aeb9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002aebc:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002aec1:	80 ca 80             	or     dl,0x80
c002aec4:	52                   	push   edx
c002aec5:	6a 0c                	push   0xc
c002aec7:	57                   	push   edi
c002aec8:	56                   	push   esi
c002aec9:	e8 c2 ff ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aece:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002aed3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002aed7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002aedb:	ee                   	out    dx,al
c002aedc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002aee1:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002aee5:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002aee9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002aeed:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002aef5:	83 c4 2c             	add    esp,0x2c
c002aef8:	5b                   	pop    ebx
c002aef9:	5e                   	pop    esi
c002aefa:	5f                   	pop    edi
c002aefb:	5d                   	pop    ebp
c002aefc:	eb 92                	jmp    c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002aefe:	0f b6 cb             	movzx  ecx,bl
c002af01:	83 f9 07             	cmp    ecx,0x7
c002af04:	77 12                	ja     c002af18 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002af06:	0f b6 d2             	movzx  edx,dl
c002af09:	0f b6 db             	movzx  ebx,bl
c002af0c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002af14:	01 da                	add    edx,ebx
c002af16:	eb 2f                	jmp    c002af47 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002af18:	83 f9 0d             	cmp    ecx,0xd
c002af1b:	77 13                	ja     c002af30 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002af1d:	0f b6 d2             	movzx  edx,dl
c002af20:	0f b6 db             	movzx  ebx,bl
c002af23:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002af2a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002af2e:	eb 17                	jmp    c002af47 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002af30:	83 f9 15             	cmp    ecx,0x15
c002af33:	77 13                	ja     c002af48 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002af35:	0f b6 d2             	movzx  edx,dl
c002af38:	0f b6 db             	movzx  ebx,bl
c002af3b:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002af43:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002af47:	ee                   	out    dx,al
c002af48:	83 c4 1c             	add    esp,0x1c
c002af4b:	5b                   	pop    ebx
c002af4c:	5e                   	pop    esi
c002af4d:	5f                   	pop    edi
c002af4e:	5d                   	pop    ebp
c002af4f:	c3                   	ret    

c002af50 <IDE::read(unsigned char, unsigned char)>:
c002af50:	55                   	push   ebp
c002af51:	57                   	push   edi
c002af52:	56                   	push   esi
c002af53:	53                   	push   ebx
c002af54:	83 ec 1c             	sub    esp,0x1c
c002af57:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002af5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002af5f:	8d 43 f8             	lea    eax,[ebx-0x8]
c002af62:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002af66:	3c 03                	cmp    al,0x3
c002af68:	77 40                	ja     c002afaa <IDE::read(unsigned char, unsigned char)+0x5a>
c002af6a:	0f b6 f9             	movzx  edi,cl
c002af6d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002af70:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002af75:	0c 80                	or     al,0x80
c002af77:	50                   	push   eax
c002af78:	6a 0c                	push   0xc
c002af7a:	57                   	push   edi
c002af7b:	56                   	push   esi
c002af7c:	e8 0f ff ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af81:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002af86:	0f b6 d3             	movzx  edx,bl
c002af89:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002af8d:	ec                   	in     al,dx
c002af8e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002af92:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002af97:	52                   	push   edx
c002af98:	6a 0c                	push   0xc
c002af9a:	57                   	push   edi
c002af9b:	56                   	push   esi
c002af9c:	e8 ef fe ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002afa1:	83 c4 20             	add    esp,0x20
c002afa4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002afa8:	eb 4c                	jmp    c002aff6 <IDE::read(unsigned char, unsigned char)+0xa6>
c002afaa:	0f b6 d3             	movzx  edx,bl
c002afad:	83 fa 07             	cmp    edx,0x7
c002afb0:	77 12                	ja     c002afc4 <IDE::read(unsigned char, unsigned char)+0x74>
c002afb2:	0f b6 c9             	movzx  ecx,cl
c002afb5:	0f b6 d3             	movzx  edx,bl
c002afb8:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002afc0:	01 c2                	add    edx,eax
c002afc2:	eb 31                	jmp    c002aff5 <IDE::read(unsigned char, unsigned char)+0xa5>
c002afc4:	83 fa 0d             	cmp    edx,0xd
c002afc7:	77 13                	ja     c002afdc <IDE::read(unsigned char, unsigned char)+0x8c>
c002afc9:	0f b6 c9             	movzx  ecx,cl
c002afcc:	0f b6 d3             	movzx  edx,bl
c002afcf:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002afd6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002afda:	eb 19                	jmp    c002aff5 <IDE::read(unsigned char, unsigned char)+0xa5>
c002afdc:	31 c0                	xor    eax,eax
c002afde:	83 fa 15             	cmp    edx,0x15
c002afe1:	77 13                	ja     c002aff6 <IDE::read(unsigned char, unsigned char)+0xa6>
c002afe3:	0f b6 c9             	movzx  ecx,cl
c002afe6:	0f b6 d3             	movzx  edx,bl
c002afe9:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002aff1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002aff5:	ec                   	in     al,dx
c002aff6:	83 c4 1c             	add    esp,0x1c
c002aff9:	5b                   	pop    ebx
c002affa:	5e                   	pop    esi
c002affb:	5f                   	pop    edi
c002affc:	5d                   	pop    ebp
c002affd:	c3                   	ret    

c002affe <IDE::waitInterrupt(unsigned char)>:
c002affe:	55                   	push   ebp
c002afff:	57                   	push   edi
c002b000:	56                   	push   esi
c002b001:	53                   	push   ebx
c002b002:	31 db                	xor    ebx,ebx
c002b004:	83 ec 0c             	sub    esp,0xc
c002b007:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002b00b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002b010:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002b018:	89 e8                	mov    eax,ebp
c002b01a:	84 c0                	test   al,al
c002b01c:	75 30                	jne    c002b04e <IDE::waitInterrupt(unsigned char)+0x50>
c002b01e:	50                   	push   eax
c002b01f:	6a 0c                	push   0xc
c002b021:	56                   	push   esi
c002b022:	57                   	push   edi
c002b023:	e8 28 ff ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b028:	83 c4 10             	add    esp,0x10
c002b02b:	a8 01                	test   al,0x1
c002b02d:	75 27                	jne    c002b056 <IDE::waitInterrupt(unsigned char)+0x58>
c002b02f:	f6 c3 04             	test   bl,0x4
c002b032:	75 12                	jne    c002b046 <IDE::waitInterrupt(unsigned char)+0x48>
c002b034:	83 fb 32             	cmp    ebx,0x32
c002b037:	7e 0d                	jle    c002b046 <IDE::waitInterrupt(unsigned char)+0x48>
c002b039:	83 ec 0c             	sub    esp,0xc
c002b03c:	6a 64                	push   0x64
c002b03e:	e8 05 a6 ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002b043:	83 c4 10             	add    esp,0x10
c002b046:	83 fb 3c             	cmp    ebx,0x3c
c002b049:	74 0b                	je     c002b056 <IDE::waitInterrupt(unsigned char)+0x58>
c002b04b:	43                   	inc    ebx
c002b04c:	eb c2                	jmp    c002b010 <IDE::waitInterrupt(unsigned char)+0x12>
c002b04e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002b056:	83 c4 0c             	add    esp,0xc
c002b059:	89 e8                	mov    eax,ebp
c002b05b:	5b                   	pop    ebx
c002b05c:	5e                   	pop    esi
c002b05d:	5f                   	pop    edi
c002b05e:	5d                   	pop    ebp
c002b05f:	c3                   	ret    

c002b060 <ideChannel0IRQHandler(regs*, void*)>:
c002b060:	83 ec 10             	sub    esp,0x10
c002b063:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b067:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002b06e:	6a 07                	push   0x7
c002b070:	6a 00                	push   0x0
c002b072:	50                   	push   eax
c002b073:	e8 d8 fe ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b078:	83 c4 1c             	add    esp,0x1c
c002b07b:	c3                   	ret    

c002b07c <ideChannel1IRQHandler(regs*, void*)>:
c002b07c:	83 ec 10             	sub    esp,0x10
c002b07f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002b083:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002b08a:	6a 07                	push   0x7
c002b08c:	6a 01                	push   0x1
c002b08e:	50                   	push   eax
c002b08f:	e8 bc fe ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b094:	83 c4 1c             	add    esp,0x1c
c002b097:	c3                   	ret    

c002b098 <IDE::enableIRQs(unsigned char, bool)>:
c002b098:	57                   	push   edi
c002b099:	b8 02 00 00 00       	mov    eax,0x2
c002b09e:	56                   	push   esi
c002b09f:	53                   	push   ebx
c002b0a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002b0a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002b0a8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002b0ad:	74 02                	je     c002b0b1 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002b0af:	31 c0                	xor    eax,eax
c002b0b1:	0f b6 db             	movzx  ebx,bl
c002b0b4:	bf 04 00 00 00       	mov    edi,0x4
c002b0b9:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002b0c0:	50                   	push   eax
c002b0c1:	6a 0c                	push   0xc
c002b0c3:	53                   	push   ebx
c002b0c4:	56                   	push   esi
c002b0c5:	e8 c6 fd ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b0ca:	83 c4 10             	add    esp,0x10
c002b0cd:	50                   	push   eax
c002b0ce:	6a 0c                	push   0xc
c002b0d0:	53                   	push   ebx
c002b0d1:	56                   	push   esi
c002b0d2:	e8 79 fe ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b0d7:	83 c4 10             	add    esp,0x10
c002b0da:	4f                   	dec    edi
c002b0db:	75 f0                	jne    c002b0cd <IDE::enableIRQs(unsigned char, bool)+0x35>
c002b0dd:	5b                   	pop    ebx
c002b0de:	5e                   	pop    esi
c002b0df:	5f                   	pop    edi
c002b0e0:	c3                   	ret    
c002b0e1:	90                   	nop

c002b0e2 <IDE::open(int, int, void*)>:
c002b0e2:	55                   	push   ebp
c002b0e3:	57                   	push   edi
c002b0e4:	56                   	push   esi
c002b0e5:	53                   	push   ebx
c002b0e6:	83 ec 1c             	sub    esp,0x1c
c002b0e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002b0ed:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002b0f6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002b0ff:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002b106:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002b10d:	0f 85 de 02 00 00    	jne    c002b3f1 <IDE::open(int, int, void*)+0x30f>
c002b113:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002b119:	88 04 24             	mov    BYTE PTR [esp],al
c002b11c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002b11f:	83 e0 7f             	and    eax,0x7f
c002b122:	83 f8 05             	cmp    eax,0x5
c002b125:	74 05                	je     c002b12c <IDE::open(int, int, void*)+0x4a>
c002b127:	83 f8 0f             	cmp    eax,0xf
c002b12a:	75 32                	jne    c002b15e <IDE::open(int, int, void*)+0x7c>
c002b12c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002b132:	83 e0 fc             	and    eax,0xfffffffc
c002b135:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b13c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002b142:	83 e0 fc             	and    eax,0xfffffffc
c002b145:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b14c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002b152:	83 e0 fc             	and    eax,0xfffffffc
c002b155:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b15c:	eb 14                	jmp    c002b172 <IDE::open(int, int, void*)+0x90>
c002b15e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b168:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b172:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002b179:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b180:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002b184:	89 c6                	mov    esi,eax
c002b186:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b18b:	c1 e6 10             	shl    esi,0x10
c002b18e:	89 e8                	mov    eax,ebp
c002b190:	89 fa                	mov    edx,edi
c002b192:	c1 e0 0b             	shl    eax,0xb
c002b195:	09 f0                	or     eax,esi
c002b197:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002b19e:	c1 e6 08             	shl    esi,0x8
c002b1a1:	09 c6                	or     esi,eax
c002b1a3:	89 f0                	mov    eax,esi
c002b1a5:	0d 08 00 00 80       	or     eax,0x80000008
c002b1aa:	ef                   	out    dx,eax
c002b1ab:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002b1b0:	89 ca                	mov    edx,ecx
c002b1b2:	ed                   	in     eax,dx
c002b1b3:	c1 e8 10             	shr    eax,0x10
c002b1b6:	3d ff ff 00 00       	cmp    eax,0xffff
c002b1bb:	0f 84 f9 00 00 00    	je     c002b2ba <IDE::open(int, int, void*)+0x1d8>
c002b1c1:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002b1c7:	89 fa                	mov    edx,edi
c002b1c9:	89 f0                	mov    eax,esi
c002b1cb:	ef                   	out    dx,eax
c002b1cc:	b0 fe                	mov    al,0xfe
c002b1ce:	89 ca                	mov    edx,ecx
c002b1d0:	ee                   	out    dx,al
c002b1d1:	89 f0                	mov    eax,esi
c002b1d3:	89 fa                	mov    edx,edi
c002b1d5:	ef                   	out    dx,eax
c002b1d6:	89 ca                	mov    edx,ecx
c002b1d8:	ed                   	in     eax,dx
c002b1d9:	3c fe                	cmp    al,0xfe
c002b1db:	0f 85 a9 00 00 00    	jne    c002b28a <IDE::open(int, int, void*)+0x1a8>
c002b1e1:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b1e7:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b1ee:	74 33                	je     c002b223 <IDE::open(int, int, void*)+0x141>
c002b1f0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b1f6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b1fa:	40                   	inc    eax
c002b1fb:	83 ec 0c             	sub    esp,0xc
c002b1fe:	0f b6 c0             	movzx  eax,al
c002b201:	50                   	push   eax
c002b202:	55                   	push   ebp
c002b203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002b207:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b20d:	51                   	push   ecx
c002b20e:	e8 fd 34 ff ff       	call   c001e710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b213:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b218:	83 c4 1c             	add    esp,0x1c
c002b21b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b221:	eb 0a                	jmp    c002b22d <IDE::open(int, int, void*)+0x14b>
c002b223:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b22d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b234:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b23b:	c1 e1 10             	shl    ecx,0x10
c002b23e:	c1 e0 08             	shl    eax,0x8
c002b241:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b246:	09 c1                	or     ecx,eax
c002b248:	89 fa                	mov    edx,edi
c002b24a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b251:	c1 e0 0b             	shl    eax,0xb
c002b254:	09 c1                	or     ecx,eax
c002b256:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b25c:	89 c8                	mov    eax,ecx
c002b25e:	ef                   	out    dx,eax
c002b25f:	be fc 0c 00 00       	mov    esi,0xcfc
c002b264:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002b26a:	89 f2                	mov    edx,esi
c002b26c:	ee                   	out    dx,al
c002b26d:	89 c8                	mov    eax,ecx
c002b26f:	89 fa                	mov    edx,edi
c002b271:	ef                   	out    dx,eax
c002b272:	89 f2                	mov    edx,esi
c002b274:	ed                   	in     eax,dx
c002b275:	0f b6 c0             	movzx  eax,al
c002b278:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002b27e:	74 4a                	je     c002b2ca <IDE::open(int, int, void*)+0x1e8>
c002b280:	83 ec 0c             	sub    esp,0xc
c002b283:	68 e4 39 03 c0       	push   0xc00339e4
c002b288:	eb 38                	jmp    c002b2c2 <IDE::open(int, int, void*)+0x1e0>
c002b28a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b293:	75 1b                	jne    c002b2b0 <IDE::open(int, int, void*)+0x1ce>
c002b295:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002b299:	3d 80 00 00 00       	cmp    eax,0x80
c002b29e:	74 07                	je     c002b2a7 <IDE::open(int, int, void*)+0x1c5>
c002b2a0:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b2a5:	75 09                	jne    c002b2b0 <IDE::open(int, int, void*)+0x1ce>
c002b2a7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b2ae:	eb 1a                	jmp    c002b2ca <IDE::open(int, int, void*)+0x1e8>
c002b2b0:	83 ec 0c             	sub    esp,0xc
c002b2b3:	68 ec 39 03 c0       	push   0xc00339ec
c002b2b8:	eb 08                	jmp    c002b2c2 <IDE::open(int, int, void*)+0x1e0>
c002b2ba:	83 ec 0c             	sub    esp,0xc
c002b2bd:	68 1d 3a 03 c0       	push   0xc0033a1d
c002b2c2:	e8 93 51 ff ff       	call   c002045a <KePanic(char const*)>
c002b2c7:	83 c4 10             	add    esp,0x10
c002b2ca:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b2d1:	74 1a                	je     c002b2ed <IDE::open(int, int, void*)+0x20b>
c002b2d3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b2d9:	83 e0 fc             	and    eax,0xfffffffc
c002b2dc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b2e3:	83 c0 08             	add    eax,0x8
c002b2e6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b2ed:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b2f3:	89 c2                	mov    edx,eax
c002b2f5:	83 e2 0f             	and    edx,0xf
c002b2f8:	83 fa 08             	cmp    edx,0x8
c002b2fb:	75 0a                	jne    c002b307 <IDE::open(int, int, void*)+0x225>
c002b2fd:	83 e8 02             	sub    eax,0x2
c002b300:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b307:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b30d:	89 c2                	mov    edx,eax
c002b30f:	83 e2 0f             	and    edx,0xf
c002b312:	83 fa 08             	cmp    edx,0x8
c002b315:	75 0a                	jne    c002b321 <IDE::open(int, int, void*)+0x23f>
c002b317:	83 e8 02             	sub    eax,0x2
c002b31a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b321:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b328:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b32f:	89 d0                	mov    eax,edx
c002b331:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b334:	8d 7a 01             	lea    edi,[edx+0x1]
c002b337:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b33b:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b33f:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b343:	83 e1 3f             	and    ecx,0x3f
c002b346:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b34a:	89 f9                	mov    ecx,edi
c002b34c:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b353:	0f b6 c9             	movzx  ecx,cl
c002b356:	8d 78 02             	lea    edi,[eax+0x2]
c002b359:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b35c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b360:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b364:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b368:	83 e2 3f             	and    edx,0x3f
c002b36b:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b36f:	89 f9                	mov    ecx,edi
c002b371:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b377:	0f b6 d1             	movzx  edx,cl
c002b37a:	8d 78 03             	lea    edi,[eax+0x3]
c002b37d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b380:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b384:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b388:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b38c:	83 e1 3f             	and    ecx,0x3f
c002b38f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b393:	89 f9                	mov    ecx,edi
c002b395:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b39b:	0f b6 c9             	movzx  ecx,cl
c002b39e:	8d 78 04             	lea    edi,[eax+0x4]
c002b3a1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b3a4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b3a8:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b3ac:	89 fa                	mov    edx,edi
c002b3ae:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b3b4:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b3b8:	83 e2 3f             	and    edx,0x3f
c002b3bb:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b3bf:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b3c6:	66 85 f6             	test   si,si
c002b3c9:	74 65                	je     c002b430 <IDE::open(int, int, void*)+0x34e>
c002b3cb:	89 f9                	mov    ecx,edi
c002b3cd:	83 c0 05             	add    eax,0x5
c002b3d0:	0f b6 d1             	movzx  edx,cl
c002b3d3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b3d6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b3da:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b3de:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b3e4:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b3e8:	83 e0 3f             	and    eax,0x3f
c002b3eb:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b3ef:	eb 3f                	jmp    c002b430 <IDE::open(int, int, void*)+0x34e>
c002b3f1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b3f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b3fe:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b405:	05 06 02 00 00       	add    eax,0x206
c002b40a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b411:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b418:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b41f:	05 06 02 00 00       	add    eax,0x206
c002b424:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b42b:	e9 bd fe ff ff       	jmp    c002b2ed <IDE::open(int, int, void*)+0x20b>
c002b430:	50                   	push   eax
c002b431:	50                   	push   eax
c002b432:	6a 00                	push   0x0
c002b434:	53                   	push   ebx
c002b435:	e8 30 fa ff ff       	call   c002ae6a <IDE::prepareInterrupt(unsigned char)>
c002b43a:	5a                   	pop    edx
c002b43b:	59                   	pop    ecx
c002b43c:	6a 01                	push   0x1
c002b43e:	53                   	push   ebx
c002b43f:	e8 26 fa ff ff       	call   c002ae6a <IDE::prepareInterrupt(unsigned char)>
c002b444:	83 c4 0c             	add    esp,0xc
c002b447:	6a 00                	push   0x0
c002b449:	6a 00                	push   0x0
c002b44b:	53                   	push   ebx
c002b44c:	e8 47 fc ff ff       	call   c002b098 <IDE::enableIRQs(unsigned char, bool)>
c002b451:	83 c4 0c             	add    esp,0xc
c002b454:	6a 00                	push   0x0
c002b456:	6a 01                	push   0x1
c002b458:	53                   	push   ebx
c002b459:	e8 3a fc ff ff       	call   c002b098 <IDE::enableIRQs(unsigned char, bool)>
c002b45e:	83 c4 10             	add    esp,0x10
c002b461:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b468:	74 34                	je     c002b49e <IDE::open(int, int, void*)+0x3bc>
c002b46a:	83 ec 0c             	sub    esp,0xc
c002b46d:	53                   	push   ebx
c002b46e:	6a 01                	push   0x1
c002b470:	68 60 b0 02 c0       	push   0xc002b060
c002b475:	6a 0e                	push   0xe
c002b477:	53                   	push   ebx
c002b478:	e8 f1 ff fe ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b47d:	83 c4 14             	add    esp,0x14
c002b480:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b486:	53                   	push   ebx
c002b487:	6a 01                	push   0x1
c002b489:	68 7c b0 02 c0       	push   0xc002b07c
c002b48e:	6a 0f                	push   0xf
c002b490:	53                   	push   ebx
c002b491:	e8 d8 ff fe ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b496:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b49c:	eb 38                	jmp    c002b4d6 <IDE::open(int, int, void*)+0x3f4>
c002b49e:	83 ec 0c             	sub    esp,0xc
c002b4a1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b4ab:	53                   	push   ebx
c002b4ac:	6a 00                	push   0x0
c002b4ae:	68 60 b0 02 c0       	push   0xc002b060
c002b4b3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b4b9:	53                   	push   ebx
c002b4ba:	e8 af ff fe ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b4bf:	83 c4 14             	add    esp,0x14
c002b4c2:	53                   	push   ebx
c002b4c3:	6a 00                	push   0x0
c002b4c5:	68 7c b0 02 c0       	push   0xc002b07c
c002b4ca:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b4d0:	53                   	push   ebx
c002b4d1:	e8 98 ff fe ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b4d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b4d8:	83 c4 20             	add    esp,0x20
c002b4db:	83 ec 0c             	sub    esp,0xc
c002b4de:	53                   	push   ebx
c002b4df:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b4e2:	83 c4 0c             	add    esp,0xc
c002b4e5:	6a 07                	push   0x7
c002b4e7:	6a 00                	push   0x0
c002b4e9:	53                   	push   ebx
c002b4ea:	e8 61 fa ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b4ef:	83 c4 0c             	add    esp,0xc
c002b4f2:	6a 07                	push   0x7
c002b4f4:	6a 01                	push   0x1
c002b4f6:	53                   	push   ebx
c002b4f7:	e8 54 fa ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b4fc:	83 c4 0c             	add    esp,0xc
c002b4ff:	6a 01                	push   0x1
c002b501:	6a 00                	push   0x0
c002b503:	53                   	push   ebx
c002b504:	e8 8f fb ff ff       	call   c002b098 <IDE::enableIRQs(unsigned char, bool)>
c002b509:	83 c4 0c             	add    esp,0xc
c002b50c:	6a 01                	push   0x1
c002b50e:	6a 01                	push   0x1
c002b510:	53                   	push   ebx
c002b511:	e8 82 fb ff ff       	call   c002b098 <IDE::enableIRQs(unsigned char, bool)>
c002b516:	83 c4 2c             	add    esp,0x2c
c002b519:	31 c0                	xor    eax,eax
c002b51b:	5b                   	pop    ebx
c002b51c:	5e                   	pop    esi
c002b51d:	5f                   	pop    edi
c002b51e:	5d                   	pop    ebp
c002b51f:	c3                   	ret    

c002b520 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b520:	55                   	push   ebp
c002b521:	57                   	push   edi
c002b522:	56                   	push   esi
c002b523:	53                   	push   ebx
c002b524:	83 ec 1c             	sub    esp,0x1c
c002b527:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b52b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b52f:	8d 42 f8             	lea    eax,[edx-0x8]
c002b532:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b536:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b53a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b53e:	3c 03                	cmp    al,0x3
c002b540:	77 5a                	ja     c002b59c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b542:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b546:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b54a:	0f b6 db             	movzx  ebx,bl
c002b54d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b550:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b555:	0c 80                	or     al,0x80
c002b557:	50                   	push   eax
c002b558:	6a 0c                	push   0xc
c002b55a:	53                   	push   ebx
c002b55b:	56                   	push   esi
c002b55c:	e8 2f f9 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b561:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b566:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b56a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b56e:	0f b6 d2             	movzx  edx,dl
c002b571:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b575:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b577:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b57c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b580:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b584:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b588:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b590:	83 c4 2c             	add    esp,0x2c
c002b593:	5b                   	pop    ebx
c002b594:	5e                   	pop    esi
c002b595:	5f                   	pop    edi
c002b596:	5d                   	pop    ebp
c002b597:	e9 f4 f8 ff ff       	jmp    c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b59c:	0f b6 c2             	movzx  eax,dl
c002b59f:	83 f8 07             	cmp    eax,0x7
c002b5a2:	77 12                	ja     c002b5b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b5a4:	0f b6 c2             	movzx  eax,dl
c002b5a7:	0f b6 db             	movzx  ebx,bl
c002b5aa:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b5b2:	01 c2                	add    edx,eax
c002b5b4:	eb 2f                	jmp    c002b5e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b5b6:	83 f8 0d             	cmp    eax,0xd
c002b5b9:	77 13                	ja     c002b5ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b5bb:	0f b6 db             	movzx  ebx,bl
c002b5be:	0f b6 d2             	movzx  edx,dl
c002b5c1:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b5c8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b5cc:	eb 17                	jmp    c002b5e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b5ce:	83 f8 15             	cmp    eax,0x15
c002b5d1:	77 14                	ja     c002b5e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b5d3:	0f b6 db             	movzx  ebx,bl
c002b5d6:	0f b6 d2             	movzx  edx,dl
c002b5d9:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b5e1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b5e5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b5e7:	83 c4 1c             	add    esp,0x1c
c002b5ea:	5b                   	pop    ebx
c002b5eb:	5e                   	pop    esi
c002b5ec:	5f                   	pop    edi
c002b5ed:	5d                   	pop    ebp
c002b5ee:	c3                   	ret    
c002b5ef:	90                   	nop

c002b5f0 <IDE::detect()>:
c002b5f0:	55                   	push   ebp
c002b5f1:	57                   	push   edi
c002b5f2:	56                   	push   esi
c002b5f3:	53                   	push   ebx
c002b5f4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b5fa:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b601:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b608:	0f 85 a4 02 00 00    	jne    c002b8b2 <IDE::detect()+0x2c2>
c002b60e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b615:	31 f6                	xor    esi,esi
c002b617:	31 ed                	xor    ebp,ebp
c002b619:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b621:	89 e8                	mov    eax,ebp
c002b623:	c1 e0 06             	shl    eax,0x6
c002b626:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b62e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b632:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b63a:	c1 e0 04             	shl    eax,0x4
c002b63d:	83 c8 a0             	or     eax,0xffffffa0
c002b640:	0f b6 c0             	movzx  eax,al
c002b643:	50                   	push   eax
c002b644:	6a 06                	push   0x6
c002b646:	56                   	push   esi
c002b647:	53                   	push   ebx
c002b648:	e8 43 f8 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b64d:	83 c4 0c             	add    esp,0xc
c002b650:	6a 0c                	push   0xc
c002b652:	56                   	push   esi
c002b653:	53                   	push   ebx
c002b654:	e8 f7 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b659:	83 c4 0c             	add    esp,0xc
c002b65c:	6a 0c                	push   0xc
c002b65e:	56                   	push   esi
c002b65f:	53                   	push   ebx
c002b660:	e8 eb f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b665:	83 c4 0c             	add    esp,0xc
c002b668:	6a 0c                	push   0xc
c002b66a:	56                   	push   esi
c002b66b:	53                   	push   ebx
c002b66c:	e8 df f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b671:	83 c4 0c             	add    esp,0xc
c002b674:	6a 0c                	push   0xc
c002b676:	56                   	push   esi
c002b677:	53                   	push   ebx
c002b678:	e8 d3 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b67d:	68 ec 00 00 00       	push   0xec
c002b682:	6a 07                	push   0x7
c002b684:	56                   	push   esi
c002b685:	53                   	push   ebx
c002b686:	e8 05 f8 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b68b:	83 c4 1c             	add    esp,0x1c
c002b68e:	6a 0c                	push   0xc
c002b690:	56                   	push   esi
c002b691:	53                   	push   ebx
c002b692:	e8 b9 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b697:	83 c4 0c             	add    esp,0xc
c002b69a:	6a 0c                	push   0xc
c002b69c:	56                   	push   esi
c002b69d:	53                   	push   ebx
c002b69e:	e8 ad f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b6a3:	83 c4 0c             	add    esp,0xc
c002b6a6:	6a 0c                	push   0xc
c002b6a8:	56                   	push   esi
c002b6a9:	53                   	push   ebx
c002b6aa:	e8 a1 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b6af:	83 c4 0c             	add    esp,0xc
c002b6b2:	6a 0c                	push   0xc
c002b6b4:	56                   	push   esi
c002b6b5:	53                   	push   ebx
c002b6b6:	e8 95 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b6bb:	83 c4 0c             	add    esp,0xc
c002b6be:	6a 0c                	push   0xc
c002b6c0:	56                   	push   esi
c002b6c1:	53                   	push   ebx
c002b6c2:	e8 89 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b6c7:	83 c4 10             	add    esp,0x10
c002b6ca:	84 c0                	test   al,al
c002b6cc:	0f 84 60 01 00 00    	je     c002b832 <IDE::detect()+0x242>
c002b6d2:	31 ff                	xor    edi,edi
c002b6d4:	50                   	push   eax
c002b6d5:	6a 0c                	push   0xc
c002b6d7:	56                   	push   esi
c002b6d8:	53                   	push   ebx
c002b6d9:	e8 72 f8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b6de:	83 c4 10             	add    esp,0x10
c002b6e1:	a8 01                	test   al,0x1
c002b6e3:	0f 85 6a 01 00 00    	jne    c002b853 <IDE::detect()+0x263>
c002b6e9:	a8 80                	test   al,0x80
c002b6eb:	75 04                	jne    c002b6f1 <IDE::detect()+0x101>
c002b6ed:	a8 08                	test   al,0x8
c002b6ef:	75 23                	jne    c002b714 <IDE::detect()+0x124>
c002b6f1:	47                   	inc    edi
c002b6f2:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b6f8:	7e da                	jle    c002b6d4 <IDE::detect()+0xe4>
c002b6fa:	83 ec 0c             	sub    esp,0xc
c002b6fd:	6a 32                	push   0x32
c002b6ff:	e8 44 9f ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002b704:	83 c4 10             	add    esp,0x10
c002b707:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b70d:	75 c5                	jne    c002b6d4 <IDE::detect()+0xe4>
c002b70f:	e9 3f 01 00 00       	jmp    c002b853 <IDE::detect()+0x263>
c002b714:	31 c9                	xor    ecx,ecx
c002b716:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b71a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b71e:	83 ec 0c             	sub    esp,0xc
c002b721:	68 80 00 00 00       	push   0x80
c002b726:	57                   	push   edi
c002b727:	6a 00                	push   0x0
c002b729:	56                   	push   esi
c002b72a:	53                   	push   ebx
c002b72b:	e8 f0 fd ff ff       	call   c002b520 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b730:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b735:	89 e8                	mov    eax,ebp
c002b737:	89 d1                	mov    ecx,edx
c002b739:	c1 e0 06             	shl    eax,0x6
c002b73c:	01 d8                	add    eax,ebx
c002b73e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b745:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b74c:	89 f2                	mov    edx,esi
c002b74e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b754:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b758:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b75e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b762:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b769:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b771:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b778:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b780:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b786:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b78d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b793:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b797:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b79b:	83 c4 20             	add    esp,0x20
c002b79e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b7a1:	83 c0 02             	add    eax,0x2
c002b7a4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b7aa:	83 c7 02             	add    edi,0x2
c002b7ad:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b7b0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b7b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b7ba:	75 e2                	jne    c002b79e <IDE::detect()+0x1ae>
c002b7bc:	89 e8                	mov    eax,ebp
c002b7be:	c1 e0 06             	shl    eax,0x6
c002b7c1:	01 d8                	add    eax,ebx
c002b7c3:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b7ca:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b7d1:	c1 ea 09             	shr    edx,0x9
c002b7d4:	83 e2 01             	and    edx,0x1
c002b7d7:	80 e1 01             	and    cl,0x1
c002b7da:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b7e0:	75 22                	jne    c002b804 <IDE::detect()+0x214>
c002b7e2:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b7e9:	74 46                	je     c002b831 <IDE::detect()+0x241>
c002b7eb:	83 ec 0c             	sub    esp,0xc
c002b7ee:	68 7c 01 00 00       	push   0x17c
c002b7f3:	e8 b9 ad fe ff       	call   c00165b1 <malloc>
c002b7f8:	89 c7                	mov    edi,eax
c002b7fa:	89 04 24             	mov    DWORD PTR [esp],eax
c002b7fd:	e8 2e 05 00 00       	call   c002bd30 <ATA::ATA()>
c002b802:	eb 17                	jmp    c002b81b <IDE::detect()+0x22b>
c002b804:	83 ec 0c             	sub    esp,0xc
c002b807:	68 84 01 00 00       	push   0x184
c002b80c:	e8 a0 ad fe ff       	call   c00165b1 <malloc>
c002b811:	89 c7                	mov    edi,eax
c002b813:	89 04 24             	mov    DWORD PTR [esp],eax
c002b816:	e8 59 0e 00 00       	call   c002c674 <ATAPI::ATAPI()>
c002b81b:	5a                   	pop    edx
c002b81c:	59                   	pop    ecx
c002b81d:	57                   	push   edi
c002b81e:	53                   	push   ebx
c002b81f:	e8 9e fc fe ff       	call   c001b4c2 <Device::addChild(Device*)>
c002b824:	8b 07                	mov    eax,DWORD PTR [edi]
c002b826:	53                   	push   ebx
c002b827:	55                   	push   ebp
c002b828:	6a 00                	push   0x0
c002b82a:	57                   	push   edi
c002b82b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b82e:	83 c4 20             	add    esp,0x20
c002b831:	45                   	inc    ebp
c002b832:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b837:	74 0d                	je     c002b846 <IDE::detect()+0x256>
c002b839:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b841:	e9 db fd ff ff       	jmp    c002b621 <IDE::detect()+0x31>
c002b846:	4e                   	dec    esi
c002b847:	74 69                	je     c002b8b2 <IDE::detect()+0x2c2>
c002b849:	be 01 00 00 00       	mov    esi,0x1
c002b84e:	e9 c6 fd ff ff       	jmp    c002b619 <IDE::detect()+0x29>
c002b853:	50                   	push   eax
c002b854:	6a 04                	push   0x4
c002b856:	56                   	push   esi
c002b857:	53                   	push   ebx
c002b858:	e8 f3 f6 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b85d:	83 c4 0c             	add    esp,0xc
c002b860:	89 c7                	mov    edi,eax
c002b862:	6a 05                	push   0x5
c002b864:	56                   	push   esi
c002b865:	53                   	push   ebx
c002b866:	e8 e5 f6 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b86b:	83 c4 10             	add    esp,0x10
c002b86e:	89 f9                	mov    ecx,edi
c002b870:	0f b6 c0             	movzx  eax,al
c002b873:	0f b6 f9             	movzx  edi,cl
c002b876:	83 ff 14             	cmp    edi,0x14
c002b879:	75 07                	jne    c002b882 <IDE::detect()+0x292>
c002b87b:	3d eb 00 00 00       	cmp    eax,0xeb
c002b880:	eb 0a                	jmp    c002b88c <IDE::detect()+0x29c>
c002b882:	3d 96 00 00 00       	cmp    eax,0x96
c002b887:	75 a9                	jne    c002b832 <IDE::detect()+0x242>
c002b889:	83 ff 69             	cmp    edi,0x69
c002b88c:	75 a4                	jne    c002b832 <IDE::detect()+0x242>
c002b88e:	68 a1 00 00 00       	push   0xa1
c002b893:	6a 07                	push   0x7
c002b895:	56                   	push   esi
c002b896:	53                   	push   ebx
c002b897:	e8 f4 f5 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b89c:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b8a3:	e8 a0 9d ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002b8a8:	83 c4 10             	add    esp,0x10
c002b8ab:	b1 01                	mov    cl,0x1
c002b8ad:	e9 64 fe ff ff       	jmp    c002b716 <IDE::detect()+0x126>
c002b8b2:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b8b8:	5b                   	pop    ebx
c002b8b9:	5e                   	pop    esi
c002b8ba:	5f                   	pop    edi
c002b8bb:	5d                   	pop    ebp
c002b8bc:	c3                   	ret    
c002b8bd:	90                   	nop

c002b8be <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b8be:	55                   	push   ebp
c002b8bf:	57                   	push   edi
c002b8c0:	56                   	push   esi
c002b8c1:	53                   	push   ebx
c002b8c2:	83 ec 1c             	sub    esp,0x1c
c002b8c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b8c9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b8cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b8d1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b8d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b8d9:	88 c3                	mov    bl,al
c002b8db:	25 ff 00 00 00       	and    eax,0xff
c002b8e0:	0f 84 88 00 00 00    	je     c002b96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b8e6:	83 ec 0c             	sub    esp,0xc
c002b8e9:	89 c7                	mov    edi,eax
c002b8eb:	68 47 3a 03 c0       	push   0xc0033a47
c002b8f0:	e8 4c db fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002b8f5:	83 c4 10             	add    esp,0x10
c002b8f8:	83 ff 01             	cmp    edi,0x1
c002b8fb:	74 6b                	je     c002b968 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b8fd:	83 ff 02             	cmp    edi,0x2
c002b900:	75 58                	jne    c002b95a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b902:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b907:	01 ff                	add    edi,edi
c002b909:	50                   	push   eax
c002b90a:	09 fe                	or     esi,edi
c002b90c:	6a 01                	push   0x1
c002b90e:	89 f0                	mov    eax,esi
c002b910:	0f b6 f0             	movzx  esi,al
c002b913:	c1 e6 06             	shl    esi,0x6
c002b916:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b91e:	50                   	push   eax
c002b91f:	55                   	push   ebp
c002b920:	e8 2b f6 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b925:	83 c4 10             	add    esp,0x10
c002b928:	a8 01                	test   al,0x1
c002b92a:	74 02                	je     c002b92e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b92c:	b3 07                	mov    bl,0x7
c002b92e:	a8 02                	test   al,0x2
c002b930:	74 02                	je     c002b934 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b932:	b3 03                	mov    bl,0x3
c002b934:	a8 04                	test   al,0x4
c002b936:	74 02                	je     c002b93a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b938:	b3 14                	mov    bl,0x14
c002b93a:	a8 08                	test   al,0x8
c002b93c:	74 02                	je     c002b940 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b93e:	b3 03                	mov    bl,0x3
c002b940:	a8 10                	test   al,0x10
c002b942:	74 02                	je     c002b946 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b944:	b3 15                	mov    bl,0x15
c002b946:	a8 20                	test   al,0x20
c002b948:	74 02                	je     c002b94c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b94a:	b3 03                	mov    bl,0x3
c002b94c:	a8 40                	test   al,0x40
c002b94e:	74 02                	je     c002b952 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b950:	b3 16                	mov    bl,0x16
c002b952:	a8 80                	test   al,0x80
c002b954:	74 18                	je     c002b96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b956:	b3 0d                	mov    bl,0xd
c002b958:	eb 14                	jmp    c002b96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b95a:	83 ff 03             	cmp    edi,0x3
c002b95d:	74 0d                	je     c002b96c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b95f:	83 ff 04             	cmp    edi,0x4
c002b962:	75 0a                	jne    c002b96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b964:	b3 08                	mov    bl,0x8
c002b966:	eb 06                	jmp    c002b96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b968:	b3 13                	mov    bl,0x13
c002b96a:	eb 02                	jmp    c002b96e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b96c:	b3 17                	mov    bl,0x17
c002b96e:	83 c4 1c             	add    esp,0x1c
c002b971:	88 d8                	mov    al,bl
c002b973:	5b                   	pop    ebx
c002b974:	5e                   	pop    esi
c002b975:	5f                   	pop    edi
c002b976:	5d                   	pop    ebp
c002b977:	c3                   	ret    

c002b978 <IDE::polling(unsigned char, unsigned int)>:
c002b978:	57                   	push   edi
c002b979:	56                   	push   esi
c002b97a:	53                   	push   ebx
c002b97b:	bb 04 00 00 00       	mov    ebx,0x4
c002b980:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b984:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b989:	52                   	push   edx
c002b98a:	6a 0c                	push   0xc
c002b98c:	56                   	push   esi
c002b98d:	57                   	push   edi
c002b98e:	e8 bd f5 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b993:	83 c4 10             	add    esp,0x10
c002b996:	4b                   	dec    ebx
c002b997:	75 f0                	jne    c002b989 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b999:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b99e:	50                   	push   eax
c002b99f:	6a 0c                	push   0xc
c002b9a1:	56                   	push   esi
c002b9a2:	57                   	push   edi
c002b9a3:	e8 a8 f5 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002b9a8:	83 c4 10             	add    esp,0x10
c002b9ab:	a8 01                	test   al,0x1
c002b9ad:	75 17                	jne    c002b9c6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b9af:	a8 20                	test   al,0x20
c002b9b1:	75 0f                	jne    c002b9c2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b9b3:	4b                   	dec    ebx
c002b9b4:	74 10                	je     c002b9c6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b9b6:	a8 80                	test   al,0x80
c002b9b8:	75 e4                	jne    c002b99e <IDE::polling(unsigned char, unsigned int)+0x26>
c002b9ba:	a8 08                	test   al,0x8
c002b9bc:	74 e0                	je     c002b99e <IDE::polling(unsigned char, unsigned int)+0x26>
c002b9be:	31 c0                	xor    eax,eax
c002b9c0:	eb 06                	jmp    c002b9c8 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b9c2:	b0 01                	mov    al,0x1
c002b9c4:	eb 02                	jmp    c002b9c8 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b9c6:	b0 02                	mov    al,0x2
c002b9c8:	5b                   	pop    ebx
c002b9c9:	5e                   	pop    esi
c002b9ca:	5f                   	pop    edi
c002b9cb:	c3                   	ret    

c002b9cc <SATABus::close(int, int, void*)>:
c002b9cc:	31 c0                	xor    eax,eax
c002b9ce:	c3                   	ret    
c002b9cf:	90                   	nop

c002b9d0 <SATABus::detect()>:
c002b9d0:	c3                   	ret    
c002b9d1:	90                   	nop

c002b9d2 <SATABus::SATABus()>:
c002b9d2:	83 ec 0c             	sub    esp,0xc
c002b9d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b9d9:	83 ec 08             	sub    esp,0x8
c002b9dc:	68 80 3a 03 c0       	push   0xc0033a80
c002b9e1:	50                   	push   eax
c002b9e2:	e8 35 fe fe ff       	call   c001b81c <HardDiskController::HardDiskController(char const*)>
c002b9e7:	83 c4 10             	add    esp,0x10
c002b9ea:	ba ac 3a 03 c0       	mov    edx,0xc0033aac
c002b9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b9f3:	89 10                	mov    DWORD PTR [eax],edx
c002b9f5:	83 ec 0c             	sub    esp,0xc
c002b9f8:	6a 50                	push   0x50
c002b9fa:	e8 8a af fe ff       	call   c0016989 <Phys::allocateContiguousPages(int)>
c002b9ff:	83 c4 10             	add    esp,0x10
c002ba02:	89 c2                	mov    edx,eax
c002ba04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba08:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002ba0e:	83 ec 0c             	sub    esp,0xc
c002ba11:	6a 50                	push   0x50
c002ba13:	e8 f1 c6 fe ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c002ba18:	83 c4 10             	add    esp,0x10
c002ba1b:	89 c2                	mov    edx,eax
c002ba1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba21:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002ba27:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002ba2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ba30:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002ba36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ba3a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002ba40:	83 ec 0c             	sub    esp,0xc
c002ba43:	6a 03                	push   0x3
c002ba45:	6a 50                	push   0x50
c002ba47:	51                   	push   ecx
c002ba48:	52                   	push   edx
c002ba49:	50                   	push   eax
c002ba4a:	e8 c7 cf fe ff       	call   c0018a16 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002ba4f:	83 c4 20             	add    esp,0x20
c002ba52:	90                   	nop
c002ba53:	83 c4 0c             	add    esp,0xc
c002ba56:	c3                   	ret    
c002ba57:	90                   	nop

c002ba58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002ba58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ba5c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002ba5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002ba62:	09 c2                	or     edx,eax
c002ba64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ba68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002ba6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c002ba70:	31 c0                	xor    eax,eax
c002ba72:	c1 e9 08             	shr    ecx,0x8
c002ba75:	83 e1 0f             	and    ecx,0xf
c002ba78:	39 c8                	cmp    eax,ecx
c002ba7a:	74 0a                	je     c002ba86 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002ba7c:	f6 c2 01             	test   dl,0x1
c002ba7f:	74 08                	je     c002ba89 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002ba81:	d1 ea                	shr    edx,1
c002ba83:	40                   	inc    eax
c002ba84:	eb f2                	jmp    c002ba78 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002ba86:	83 c8 ff             	or     eax,0xffffffff
c002ba89:	c3                   	ret    

c002ba8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002ba8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ba8e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002ba91:	89 c2                	mov    edx,eax
c002ba93:	c1 ea 08             	shr    edx,0x8
c002ba96:	83 e2 0f             	and    edx,0xf
c002ba99:	4a                   	dec    edx
c002ba9a:	75 32                	jne    c002bace <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002ba9c:	83 e0 0f             	and    eax,0xf
c002ba9f:	83 f8 03             	cmp    eax,0x3
c002baa2:	75 2a                	jne    c002bace <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002baa4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002baa7:	b8 02 00 00 00       	mov    eax,0x2
c002baac:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002bab2:	74 1c                	je     c002bad0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bab4:	b8 04 00 00 00       	mov    eax,0x4
c002bab9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002babf:	74 0f                	je     c002bad0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002bac1:	31 c0                	xor    eax,eax
c002bac3:	83 fa 03             	cmp    edx,0x3
c002bac6:	0f 94 c0             	sete   al
c002bac9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002bacd:	c3                   	ret    
c002bace:	31 c0                	xor    eax,eax
c002bad0:	c3                   	ret    
c002bad1:	90                   	nop

c002bad2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002bad2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002bad6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bad9:	0f ba e2 0f          	bt     edx,0xf
c002badd:	72 f7                	jb     c002bad6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002badf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bae2:	83 ca 10             	or     edx,0x10
c002bae5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bae8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002baeb:	83 ca 01             	or     edx,0x1
c002baee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002baf1:	c3                   	ret    

c002baf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002baf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002baf6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002baf9:	83 e2 fe             	and    edx,0xfffffffe
c002bafc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002baff:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb02:	83 e2 ef             	and    edx,0xffffffef
c002bb05:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002bb08:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb0b:	0f ba e2 0e          	bt     edx,0xe
c002bb0f:	72 f7                	jb     c002bb08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bb11:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002bb14:	0f ba e2 0f          	bt     edx,0xf
c002bb18:	72 ee                	jb     c002bb08 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002bb1a:	c3                   	ret    
c002bb1b:	90                   	nop

c002bb1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002bb1c:	55                   	push   ebp
c002bb1d:	57                   	push   edi
c002bb1e:	56                   	push   esi
c002bb1f:	53                   	push   ebx
c002bb20:	83 ec 1c             	sub    esp,0x1c
c002bb23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002bb27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002bb2b:	53                   	push   ebx
c002bb2c:	56                   	push   esi
c002bb2d:	e8 c0 ff ff ff       	call   c002baf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002bb32:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002bb36:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bb3c:	83 ec 0c             	sub    esp,0xc
c002bb3f:	c1 e5 0a             	shl    ebp,0xa
c002bb42:	01 e8                	add    eax,ebp
c002bb44:	89 03                	mov    DWORD PTR [ebx],eax
c002bb46:	8b 03                	mov    eax,DWORD PTR [ebx]
c002bb48:	68 00 04 00 00       	push   0x400
c002bb4d:	6a 00                	push   0x0
c002bb4f:	50                   	push   eax
c002bb50:	e8 9b 49 fd ff       	call   c00004f0 <memset>
c002bb55:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002bb5b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002bb5f:	01 e8                	add    eax,ebp
c002bb61:	83 c4 1c             	add    esp,0x1c
c002bb64:	89 03                	mov    DWORD PTR [ebx],eax
c002bb66:	c1 e2 08             	shl    edx,0x8
c002bb69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002bb70:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002bb76:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002bb7c:	01 f8                	add    eax,edi
c002bb7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002bb81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002bb84:	68 00 01 00 00       	push   0x100
c002bb89:	6a 00                	push   0x0
c002bb8b:	50                   	push   eax
c002bb8c:	e8 5f 49 fd ff       	call   c00004f0 <memset>
c002bb91:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002bb97:	01 fa                	add    edx,edi
c002bb99:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bb9d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002bba0:	c1 e7 0d             	shl    edi,0xd
c002bba3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002bbaa:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002bbb0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002bbb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002bbba:	31 ff                	xor    edi,edi
c002bbbc:	83 c4 10             	add    esp,0x10
c002bbbf:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002bbc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002bbc9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002bbcf:	83 c5 20             	add    ebp,0x20
c002bbd2:	01 f8                	add    eax,edi
c002bbd4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002bbd7:	52                   	push   edx
c002bbd8:	68 00 01 00 00       	push   0x100
c002bbdd:	6a 00                	push   0x0
c002bbdf:	50                   	push   eax
c002bbe0:	e8 0b 49 fd ff       	call   c00004f0 <memset>
c002bbe5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002bbe9:	83 c4 10             	add    esp,0x10
c002bbec:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002bbf2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002bbf9:	01 f8                	add    eax,edi
c002bbfb:	81 c7 00 01 00 00    	add    edi,0x100
c002bc01:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002bc04:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002bc0a:	75 b3                	jne    c002bbbf <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002bc0c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bc13:	50                   	push   eax
c002bc14:	50                   	push   eax
c002bc15:	53                   	push   ebx
c002bc16:	56                   	push   esi
c002bc17:	e8 b6 fe ff ff       	call   c002bad2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002bc1c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bc23:	83 c4 2c             	add    esp,0x2c
c002bc26:	5b                   	pop    ebx
c002bc27:	5e                   	pop    esi
c002bc28:	5f                   	pop    edi
c002bc29:	5d                   	pop    ebp
c002bc2a:	c3                   	ret    
c002bc2b:	90                   	nop

c002bc2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002bc2c:	55                   	push   ebp
c002bc2d:	57                   	push   edi
c002bc2e:	56                   	push   esi
c002bc2f:	53                   	push   ebx
c002bc30:	31 db                	xor    ebx,ebx
c002bc32:	83 ec 0c             	sub    esp,0xc
c002bc35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bc39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002bc3d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002bc40:	f7 c7 01 00 00 00    	test   edi,0x1
c002bc46:	74 7a                	je     c002bcc2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bc48:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002bc4c:	89 d8                	mov    eax,ebx
c002bc4e:	c1 e0 07             	shl    eax,0x7
c002bc51:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002bc58:	55                   	push   ebp
c002bc59:	56                   	push   esi
c002bc5a:	e8 2b fe ff ff       	call   c002ba8a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002bc5f:	5a                   	pop    edx
c002bc60:	83 f8 01             	cmp    eax,0x1
c002bc63:	59                   	pop    ecx
c002bc64:	75 21                	jne    c002bc87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002bc66:	50                   	push   eax
c002bc67:	53                   	push   ebx
c002bc68:	55                   	push   ebp
c002bc69:	56                   	push   esi
c002bc6a:	e8 ad fe ff ff       	call   c002bb1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bc6f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bc76:	e8 36 a9 fe ff       	call   c00165b1 <malloc>
c002bc7b:	89 c5                	mov    ebp,eax
c002bc7d:	89 04 24             	mov    DWORD PTR [esp],eax
c002bc80:	e8 bb 10 00 00       	call   c002cd40 <SATA::SATA()>
c002bc85:	eb 24                	jmp    c002bcab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bc87:	83 f8 04             	cmp    eax,0x4
c002bc8a:	75 36                	jne    c002bcc2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bc8c:	51                   	push   ecx
c002bc8d:	53                   	push   ebx
c002bc8e:	55                   	push   ebp
c002bc8f:	56                   	push   esi
c002bc90:	e8 87 fe ff ff       	call   c002bb1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bc95:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bc9c:	e8 10 a9 fe ff       	call   c00165b1 <malloc>
c002bca1:	89 c5                	mov    ebp,eax
c002bca3:	89 04 24             	mov    DWORD PTR [esp],eax
c002bca6:	e8 2b 18 00 00       	call   c002d4d6 <SATAPI::SATAPI()>
c002bcab:	58                   	pop    eax
c002bcac:	5a                   	pop    edx
c002bcad:	55                   	push   ebp
c002bcae:	56                   	push   esi
c002bcaf:	e8 0e f8 fe ff       	call   c001b4c2 <Device::addChild(Device*)>
c002bcb4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bcb7:	56                   	push   esi
c002bcb8:	6a 00                	push   0x0
c002bcba:	53                   	push   ebx
c002bcbb:	55                   	push   ebp
c002bcbc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bcbf:	83 c4 20             	add    esp,0x20
c002bcc2:	d1 ef                	shr    edi,1
c002bcc4:	43                   	inc    ebx
c002bcc5:	83 fb 20             	cmp    ebx,0x20
c002bcc8:	0f 85 72 ff ff ff    	jne    c002bc40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bcce:	83 c4 0c             	add    esp,0xc
c002bcd1:	5b                   	pop    ebx
c002bcd2:	5e                   	pop    esi
c002bcd3:	5f                   	pop    edi
c002bcd4:	5d                   	pop    ebp
c002bcd5:	c3                   	ret    

c002bcd6 <SATABus::open(int, int, void*)>:
c002bcd6:	53                   	push   ebx
c002bcd7:	83 ec 08             	sub    esp,0x8
c002bcda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bcde:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bce4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bcea:	e8 e9 94 ff ff       	call   c00251d8 <KeDisablePreemption()>
c002bcef:	52                   	push   edx
c002bcf0:	52                   	push   edx
c002bcf1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bcf7:	53                   	push   ebx
c002bcf8:	e8 2f ff ff ff       	call   c002bc2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bcfd:	e8 fe 94 ff ff       	call   c0025200 <KeRestorePreemption()>
c002bd02:	31 c0                	xor    eax,eax
c002bd04:	83 c4 18             	add    esp,0x18
c002bd07:	5b                   	pop    ebx
c002bd08:	c3                   	ret    
c002bd09:	90                   	nop

c002bd0a <ATA::close(int, int, void*)>:
c002bd0a:	83 ec 0c             	sub    esp,0xc
c002bd0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd11:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bd17:	85 c0                	test   eax,eax
c002bd19:	74 0c                	je     c002bd27 <ATA::close(int, int, void*)+0x1d>
c002bd1b:	83 ec 0c             	sub    esp,0xc
c002bd1e:	8b 10                	mov    edx,DWORD PTR [eax]
c002bd20:	50                   	push   eax
c002bd21:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bd24:	83 c4 10             	add    esp,0x10
c002bd27:	31 c0                	xor    eax,eax
c002bd29:	83 c4 0c             	add    esp,0xc
c002bd2c:	c3                   	ret    
c002bd2d:	90                   	nop

c002bd2e <ATA::powerSaving(PowerSavingLevel)>:
c002bd2e:	c3                   	ret    
c002bd2f:	90                   	nop

c002bd30 <ATA::ATA()>:
c002bd30:	83 ec 0c             	sub    esp,0xc
c002bd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd37:	83 ec 04             	sub    esp,0x4
c002bd3a:	68 00 02 00 00       	push   0x200
c002bd3f:	68 85 3b 03 c0       	push   0xc0033b85
c002bd44:	50                   	push   eax
c002bd45:	e8 5c fb fe ff       	call   c001b8a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bd4a:	83 c4 10             	add    esp,0x10
c002bd4d:	ba ec 3a 03 c0       	mov    edx,0xc0033aec
c002bd52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bd56:	89 10                	mov    DWORD PTR [eax],edx
c002bd58:	90                   	nop
c002bd59:	83 c4 0c             	add    esp,0xc
c002bd5c:	c3                   	ret    
c002bd5d:	90                   	nop

c002bd5e <ATA::flush(bool)>:
c002bd5e:	53                   	push   ebx
c002bd5f:	83 ec 08             	sub    esp,0x8
c002bd62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bd66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bd6b:	83 f8 01             	cmp    eax,0x1
c002bd6e:	19 c0                	sbb    eax,eax
c002bd70:	83 e0 fd             	and    eax,0xfffffffd
c002bd73:	05 ea 00 00 00       	add    eax,0xea
c002bd78:	50                   	push   eax
c002bd79:	6a 07                	push   0x7
c002bd7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd82:	50                   	push   eax
c002bd83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd89:	e8 02 f1 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd8e:	83 c4 0c             	add    esp,0xc
c002bd91:	6a 00                	push   0x0
c002bd93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd9a:	50                   	push   eax
c002bd9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bda1:	e8 d2 fb ff ff       	call   c002b978 <IDE::polling(unsigned char, unsigned int)>
c002bda6:	83 c4 18             	add    esp,0x18
c002bda9:	5b                   	pop    ebx
c002bdaa:	c3                   	ret    
c002bdab:	90                   	nop

c002bdac <ATA::readyForCommand()>:
c002bdac:	56                   	push   esi
c002bdad:	53                   	push   ebx
c002bdae:	53                   	push   ebx
c002bdaf:	31 db                	xor    ebx,ebx
c002bdb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bdb5:	51                   	push   ecx
c002bdb6:	6a 0c                	push   0xc
c002bdb8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bdbf:	50                   	push   eax
c002bdc0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bdc6:	e8 85 f1 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002bdcb:	83 c4 10             	add    esp,0x10
c002bdce:	a8 88                	test   al,0x88
c002bdd0:	74 1f                	je     c002bdf1 <ATA::readyForCommand()+0x45>
c002bdd2:	43                   	inc    ebx
c002bdd3:	83 fb 63             	cmp    ebx,0x63
c002bdd6:	7e dd                	jle    c002bdb5 <ATA::readyForCommand()+0x9>
c002bdd8:	83 ec 0c             	sub    esp,0xc
c002bddb:	6a 0a                	push   0xa
c002bddd:	e8 66 98 ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002bde2:	83 c4 10             	add    esp,0x10
c002bde5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bdeb:	75 c8                	jne    c002bdb5 <ATA::readyForCommand()+0x9>
c002bded:	31 c0                	xor    eax,eax
c002bdef:	eb 02                	jmp    c002bdf3 <ATA::readyForCommand()+0x47>
c002bdf1:	b0 01                	mov    al,0x1
c002bdf3:	5a                   	pop    edx
c002bdf4:	5b                   	pop    ebx
c002bdf5:	5e                   	pop    esi
c002bdf6:	c3                   	ret    
c002bdf7:	90                   	nop

c002bdf8 <ATA::access(unsigned long long, int, void*, bool)>:
c002bdf8:	55                   	push   ebp
c002bdf9:	57                   	push   edi
c002bdfa:	56                   	push   esi
c002bdfb:	53                   	push   ebx
c002bdfc:	83 ec 2c             	sub    esp,0x2c
c002bdff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002be03:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002be07:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002be0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002be0f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002be13:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002be17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002be1b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002be21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002be25:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002be2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002be2f:	c1 e0 06             	shl    eax,0x6
c002be32:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002be3a:	74 5d                	je     c002be99 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002be3c:	89 fa                	mov    edx,edi
c002be3e:	89 f0                	mov    eax,esi
c002be40:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002be44:	c1 ea 1c             	shr    edx,0x1c
c002be47:	89 d1                	mov    ecx,edx
c002be49:	09 c1                	or     ecx,eax
c002be4b:	74 25                	je     c002be72 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002be4d:	31 ed                	xor    ebp,ebp
c002be4f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002be56:	89 fa                	mov    edx,edi
c002be58:	89 f0                	mov    eax,esi
c002be5a:	0f ad d0             	shrd   eax,edx,cl
c002be5d:	d3 ea                	shr    edx,cl
c002be5f:	f6 c1 20             	test   cl,0x20
c002be62:	74 02                	je     c002be66 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002be64:	89 d0                	mov    eax,edx
c002be66:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002be6a:	45                   	inc    ebp
c002be6b:	83 fd 06             	cmp    ebp,0x6
c002be6e:	75 df                	jne    c002be4f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002be70:	eb 76                	jmp    c002bee8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002be72:	89 f0                	mov    eax,esi
c002be74:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002be79:	89 fa                	mov    edx,edi
c002be7b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002be82:	0f ac d0 10          	shrd   eax,edx,0x10
c002be86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002be8b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002be8f:	c1 ee 18             	shr    esi,0x18
c002be92:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002be97:	eb 56                	jmp    c002beef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002be99:	6a 00                	push   0x0
c002be9b:	6a 3f                	push   0x3f
c002be9d:	57                   	push   edi
c002be9e:	56                   	push   esi
c002be9f:	e8 cc 2a 00 00       	call   c002e970 <__umoddi3>
c002bea4:	83 c4 10             	add    esp,0x10
c002bea7:	40                   	inc    eax
c002bea8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002beac:	6a 00                	push   0x0
c002beae:	68 f0 03 00 00       	push   0x3f0
c002beb3:	57                   	push   edi
c002beb4:	56                   	push   esi
c002beb5:	e8 b6 29 00 00       	call   c002e870 <__udivdi3>
c002beba:	83 c4 10             	add    esp,0x10
c002bebd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bec2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bec9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bece:	6a 00                	push   0x0
c002bed0:	6a 3f                	push   0x3f
c002bed2:	57                   	push   edi
c002bed3:	56                   	push   esi
c002bed4:	e8 97 29 00 00       	call   c002e870 <__udivdi3>
c002bed9:	83 c4 10             	add    esp,0x10
c002bedc:	83 e0 0f             	and    eax,0xf
c002bedf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bee4:	89 c6                	mov    esi,eax
c002bee6:	eb 07                	jmp    c002beef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bee8:	31 f6                	xor    esi,esi
c002beea:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002beef:	bf 01 00 00 00       	mov    edi,0x1
c002bef4:	50                   	push   eax
c002bef5:	6a 00                	push   0x0
c002bef7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002befe:	50                   	push   eax
c002beff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bf03:	e8 90 f1 ff ff       	call   c002b098 <IDE::enableIRQs(unsigned char, bool)>
c002bf08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bf0b:	e8 9c fe ff ff       	call   c002bdac <ATA::readyForCommand()>
c002bf10:	83 c4 10             	add    esp,0x10
c002bf13:	84 c0                	test   al,al
c002bf15:	0f 84 69 02 00 00    	je     c002c184 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bf1b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bf21:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bf27:	c1 e0 04             	shl    eax,0x4
c002bf2a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bf31:	09 c6                	or     esi,eax
c002bf33:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bf38:	75 05                	jne    c002bf3f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bf3a:	83 ce a0             	or     esi,0xffffffa0
c002bf3d:	eb 03                	jmp    c002bf42 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bf3f:	83 ce e0             	or     esi,0xffffffe0
c002bf42:	89 f0                	mov    eax,esi
c002bf44:	0f b6 f0             	movzx  esi,al
c002bf47:	56                   	push   esi
c002bf48:	6a 06                	push   0x6
c002bf4a:	51                   	push   ecx
c002bf4b:	52                   	push   edx
c002bf4c:	e8 3f ef ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf51:	83 c4 10             	add    esp,0x10
c002bf54:	6a 00                	push   0x0
c002bf56:	6a 01                	push   0x1
c002bf58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf5f:	50                   	push   eax
c002bf60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf66:	e8 25 ef ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf6b:	83 c4 10             	add    esp,0x10
c002bf6e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bf73:	83 f8 02             	cmp    eax,0x2
c002bf76:	75 6e                	jne    c002bfe6 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bf78:	6a 00                	push   0x0
c002bf7a:	6a 08                	push   0x8
c002bf7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf83:	50                   	push   eax
c002bf84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf8a:	e8 01 ef ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf8f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bf94:	50                   	push   eax
c002bf95:	6a 09                	push   0x9
c002bf97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf9e:	50                   	push   eax
c002bf9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfa5:	e8 e6 ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfaa:	83 c4 20             	add    esp,0x20
c002bfad:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bfb2:	50                   	push   eax
c002bfb3:	6a 0a                	push   0xa
c002bfb5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfbc:	50                   	push   eax
c002bfbd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfc3:	e8 c8 ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfc8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bfcd:	50                   	push   eax
c002bfce:	6a 0b                	push   0xb
c002bfd0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfd7:	50                   	push   eax
c002bfd8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfde:	e8 ad ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfe3:	83 c4 20             	add    esp,0x20
c002bfe6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bfeb:	50                   	push   eax
c002bfec:	6a 02                	push   0x2
c002bfee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bff5:	50                   	push   eax
c002bff6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bffc:	e8 8f ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c001:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002c006:	50                   	push   eax
c002c007:	6a 03                	push   0x3
c002c009:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c010:	50                   	push   eax
c002c011:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c017:	e8 74 ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c01c:	83 c4 20             	add    esp,0x20
c002c01f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002c024:	50                   	push   eax
c002c025:	6a 04                	push   0x4
c002c027:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c02e:	50                   	push   eax
c002c02f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c035:	e8 56 ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c03a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002c03f:	50                   	push   eax
c002c040:	6a 05                	push   0x5
c002c042:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c049:	50                   	push   eax
c002c04a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c050:	e8 3b ee ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c055:	83 c4 20             	add    esp,0x20
c002c058:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c05d:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002c062:	74 11                	je     c002c075 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002c064:	b8 30 00 00 00       	mov    eax,0x30
c002c069:	83 fa 02             	cmp    edx,0x2
c002c06c:	75 16                	jne    c002c084 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c06e:	b8 34 00 00 00       	mov    eax,0x34
c002c073:	eb 0f                	jmp    c002c084 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c075:	b8 20 00 00 00       	mov    eax,0x20
c002c07a:	83 fa 02             	cmp    edx,0x2
c002c07d:	75 05                	jne    c002c084 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002c07f:	b8 24 00 00 00       	mov    eax,0x24
c002c084:	50                   	push   eax
c002c085:	6a 07                	push   0x7
c002c087:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c08e:	50                   	push   eax
c002c08f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c095:	e8 f6 ed ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c09a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002c09e:	83 c4 10             	add    esp,0x10
c002c0a1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002c0a6:	85 f6                	test   esi,esi
c002c0a8:	0f 84 b3 00 00 00    	je     c002c161 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002c0ae:	50                   	push   eax
c002c0af:	6a 01                	push   0x1
c002c0b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c0b8:	50                   	push   eax
c002c0b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0bf:	e8 b4 f8 ff ff       	call   c002b978 <IDE::polling(unsigned char, unsigned int)>
c002c0c4:	83 c4 10             	add    esp,0x10
c002c0c7:	0f b6 f8             	movzx  edi,al
c002c0ca:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002c0d0:	85 ff                	test   edi,edi
c002c0d2:	74 1d                	je     c002c0f1 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002c0d4:	57                   	push   edi
c002c0d5:	0f b6 d2             	movzx  edx,dl
c002c0d8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002c0df:	50                   	push   eax
c002c0e0:	52                   	push   edx
c002c0e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c0e7:	e8 d2 f7 ff ff       	call   c002b8be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c0ec:	e9 90 00 00 00       	jmp    c002c181 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002c0f1:	85 ed                	test   ebp,ebp
c002c0f3:	74 3b                	je     c002c130 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002c0f5:	31 c9                	xor    ecx,ecx
c002c0f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002c0fb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002c0ff:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002c103:	50                   	push   eax
c002c104:	50                   	push   eax
c002c105:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c10c:	50                   	push   eax
c002c10d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c113:	e8 66 ed ff ff       	call   c002ae7e <IDE::getBase(unsigned char)>
c002c118:	89 c2                	mov    edx,eax
c002c11a:	89 f8                	mov    eax,edi
c002c11c:	66 ef                	out    dx,ax
c002c11e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002c122:	83 c4 10             	add    esp,0x10
c002c125:	41                   	inc    ecx
c002c126:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002c12c:	75 c9                	jne    c002c0f7 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002c12e:	eb 23                	jmp    c002c153 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002c130:	0f b6 d2             	movzx  edx,dl
c002c133:	51                   	push   ecx
c002c134:	51                   	push   ecx
c002c135:	52                   	push   edx
c002c136:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c13c:	e8 3d ed ff ff       	call   c002ae7e <IDE::getBase(unsigned char)>
c002c141:	b9 00 01 00 00       	mov    ecx,0x100
c002c146:	89 c2                	mov    edx,eax
c002c148:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c14c:	fc                   	cld    
c002c14d:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c150:	83 c4 10             	add    esp,0x10
c002c153:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c15b:	4e                   	dec    esi
c002c15c:	e9 45 ff ff ff       	jmp    c002c0a6 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002c161:	31 ff                	xor    edi,edi
c002c163:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c168:	74 1a                	je     c002c184 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002c16a:	50                   	push   eax
c002c16b:	50                   	push   eax
c002c16c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002c171:	83 f8 02             	cmp    eax,0x2
c002c174:	0f 94 c0             	sete   al
c002c177:	0f b6 c0             	movzx  eax,al
c002c17a:	50                   	push   eax
c002c17b:	53                   	push   ebx
c002c17c:	e8 dd fb ff ff       	call   c002bd5e <ATA::flush(bool)>
c002c181:	83 c4 10             	add    esp,0x10
c002c184:	83 c4 2c             	add    esp,0x2c
c002c187:	89 f8                	mov    eax,edi
c002c189:	5b                   	pop    ebx
c002c18a:	5e                   	pop    esi
c002c18b:	5f                   	pop    edi
c002c18c:	5d                   	pop    ebp
c002c18d:	c3                   	ret    

c002c18e <ATA::detectCHS()>:
c002c18e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c192:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c198:	c1 e0 06             	shl    eax,0x6
c002c19b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c1a1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c1ab:	c7 44 24 04 d0 3a 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033ad0
c002c1b3:	e9 a2 42 ff ff       	jmp    c002045a <KePanic(char const*)>

c002c1b8 <ATA::open(int, int, void*)>:
c002c1b8:	53                   	push   ebx
c002c1b9:	83 ec 08             	sub    esp,0x8
c002c1bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c1c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c1c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c1c8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c1ce:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c1d4:	c1 e0 06             	shl    eax,0x6
c002c1d7:	01 d0                	add    eax,edx
c002c1d9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c1e0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c1e6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c1ed:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c1f7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c1fd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c204:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c20b:	75 0c                	jne    c002c219 <ATA::open(int, int, void*)+0x61>
c002c20d:	83 ec 0c             	sub    esp,0xc
c002c210:	53                   	push   ebx
c002c211:	e8 78 ff ff ff       	call   c002c18e <ATA::detectCHS()>
c002c216:	83 c4 10             	add    esp,0x10
c002c219:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c21f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c225:	c1 e0 06             	shl    eax,0x6
c002c228:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c22f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c239:	d1 e8                	shr    eax,1
c002c23b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c241:	6a 04                	push   0x4
c002c243:	6a 0c                	push   0xc
c002c245:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c24c:	50                   	push   eax
c002c24d:	52                   	push   edx
c002c24e:	e8 3d ec ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c253:	90                   	nop
c002c254:	90                   	nop
c002c255:	6a 00                	push   0x0
c002c257:	6a 0c                	push   0xc
c002c259:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c260:	50                   	push   eax
c002c261:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c267:	e8 24 ec ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c26c:	83 c4 14             	add    esp,0x14
c002c26f:	53                   	push   ebx
c002c270:	e8 99 f6 fe ff       	call   c001b90e <PhysicalDisk::startCache()>
c002c275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c278:	e8 cd 08 ff ff       	call   c001cb4a <createPartitionsForDisk(PhysicalDisk*)>
c002c27d:	31 c0                	xor    eax,eax
c002c27f:	83 c4 18             	add    esp,0x18
c002c282:	5b                   	pop    ebx
c002c283:	c3                   	ret    

c002c284 <combineCharAndColour(char, unsigned char)>:
c002c284:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c289:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c28f:	c1 e0 08             	shl    eax,0x8
c002c292:	09 d0                	or     eax,edx
c002c294:	c3                   	ret    

c002c295 <combineColours(unsigned char, unsigned char)>:
c002c295:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c29a:	c1 e0 04             	shl    eax,0x4
c002c29d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c2a1:	c3                   	ret    

c002c2a2 <ATA::read(unsigned long long, int, void*)>:
c002c2a2:	55                   	push   ebp
c002c2a3:	57                   	push   edi
c002c2a4:	56                   	push   esi
c002c2a5:	be 04 00 00 00       	mov    esi,0x4
c002c2aa:	53                   	push   ebx
c002c2ab:	83 ec 0c             	sub    esp,0xc
c002c2ae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c2b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c2b6:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c2b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c2bd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c2c1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c2c7:	0f 87 a1 01 00 00    	ja     c002c46e <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c2cd:	be 06 00 00 00       	mov    esi,0x6
c002c2d2:	85 c9                	test   ecx,ecx
c002c2d4:	0f 84 94 01 00 00    	je     c002c46e <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c2da:	55                   	push   ebp
c002c2db:	55                   	push   ebp
c002c2dc:	6a 00                	push   0x0
c002c2de:	51                   	push   ecx
c002c2df:	53                   	push   ebx
c002c2e0:	52                   	push   edx
c002c2e1:	50                   	push   eax
c002c2e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c2e6:	e8 0d fb ff ff       	call   c002bdf8 <ATA::access(unsigned long long, int, void*, bool)>
c002c2eb:	83 c4 20             	add    esp,0x20
c002c2ee:	89 c6                	mov    esi,eax
c002c2f0:	85 c0                	test   eax,eax
c002c2f2:	0f 85 71 01 00 00    	jne    c002c469 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c2f8:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c2fe:	89 da                	mov    edx,ebx
c002c300:	50                   	push   eax
c002c301:	bd 10 27 00 00       	mov    ebp,0x2710
c002c306:	50                   	push   eax
c002c307:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c30d:	6a 0f                	push   0xf
c002c30f:	6a 00                	push   0x0
c002c311:	e8 7f ff ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002c316:	59                   	pop    ecx
c002c317:	b9 0a 00 00 00       	mov    ecx,0xa
c002c31c:	5b                   	pop    ebx
c002c31d:	0f b6 d8             	movzx  ebx,al
c002c320:	89 d0                	mov    eax,edx
c002c322:	53                   	push   ebx
c002c323:	99                   	cdq    
c002c324:	f7 fd                	idiv   ebp
c002c326:	99                   	cdq    
c002c327:	f7 f9                	idiv   ecx
c002c329:	83 c2 30             	add    edx,0x30
c002c32c:	0f b6 d2             	movzx  edx,dl
c002c32f:	52                   	push   edx
c002c330:	e8 4f ff ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c335:	5f                   	pop    edi
c002c336:	bf e8 03 00 00       	mov    edi,0x3e8
c002c33b:	5a                   	pop    edx
c002c33c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c342:	53                   	push   ebx
c002c343:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c348:	99                   	cdq    
c002c349:	f7 ff                	idiv   edi
c002c34b:	99                   	cdq    
c002c34c:	f7 f9                	idiv   ecx
c002c34e:	8d 42 30             	lea    eax,[edx+0x30]
c002c351:	0f b6 c0             	movzx  eax,al
c002c354:	50                   	push   eax
c002c355:	e8 2a ff ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c35a:	5f                   	pop    edi
c002c35b:	bf 64 00 00 00       	mov    edi,0x64
c002c360:	5a                   	pop    edx
c002c361:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c367:	53                   	push   ebx
c002c368:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c36d:	99                   	cdq    
c002c36e:	f7 ff                	idiv   edi
c002c370:	99                   	cdq    
c002c371:	f7 f9                	idiv   ecx
c002c373:	8d 42 30             	lea    eax,[edx+0x30]
c002c376:	0f b6 c0             	movzx  eax,al
c002c379:	50                   	push   eax
c002c37a:	e8 05 ff ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c37f:	5a                   	pop    edx
c002c380:	5a                   	pop    edx
c002c381:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c387:	53                   	push   ebx
c002c388:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c38d:	99                   	cdq    
c002c38e:	f7 f9                	idiv   ecx
c002c390:	99                   	cdq    
c002c391:	f7 f9                	idiv   ecx
c002c393:	8d 42 30             	lea    eax,[edx+0x30]
c002c396:	0f b6 c0             	movzx  eax,al
c002c399:	50                   	push   eax
c002c39a:	e8 e5 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c39f:	5a                   	pop    edx
c002c3a0:	5a                   	pop    edx
c002c3a1:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c3a7:	53                   	push   ebx
c002c3a8:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3ad:	99                   	cdq    
c002c3ae:	f7 f9                	idiv   ecx
c002c3b0:	83 c2 30             	add    edx,0x30
c002c3b3:	0f b6 d2             	movzx  edx,dl
c002c3b6:	52                   	push   edx
c002c3b7:	e8 c8 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c3bc:	5a                   	pop    edx
c002c3bd:	5a                   	pop    edx
c002c3be:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c3c4:	53                   	push   ebx
c002c3c5:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3ca:	99                   	cdq    
c002c3cb:	f7 fd                	idiv   ebp
c002c3cd:	99                   	cdq    
c002c3ce:	f7 f9                	idiv   ecx
c002c3d0:	8d 42 30             	lea    eax,[edx+0x30]
c002c3d3:	0f b6 c0             	movzx  eax,al
c002c3d6:	50                   	push   eax
c002c3d7:	e8 a8 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c3dc:	5d                   	pop    ebp
c002c3dd:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c3e2:	5a                   	pop    edx
c002c3e3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c3e9:	53                   	push   ebx
c002c3ea:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3ef:	99                   	cdq    
c002c3f0:	f7 fd                	idiv   ebp
c002c3f2:	99                   	cdq    
c002c3f3:	f7 f9                	idiv   ecx
c002c3f5:	8d 42 30             	lea    eax,[edx+0x30]
c002c3f8:	0f b6 c0             	movzx  eax,al
c002c3fb:	50                   	push   eax
c002c3fc:	e8 83 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c401:	5d                   	pop    ebp
c002c402:	5a                   	pop    edx
c002c403:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c409:	53                   	push   ebx
c002c40a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c40f:	99                   	cdq    
c002c410:	f7 ff                	idiv   edi
c002c412:	99                   	cdq    
c002c413:	f7 f9                	idiv   ecx
c002c415:	8d 42 30             	lea    eax,[edx+0x30]
c002c418:	0f b6 c0             	movzx  eax,al
c002c41b:	50                   	push   eax
c002c41c:	e8 63 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c421:	5f                   	pop    edi
c002c422:	5d                   	pop    ebp
c002c423:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c429:	53                   	push   ebx
c002c42a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c42f:	99                   	cdq    
c002c430:	f7 f9                	idiv   ecx
c002c432:	99                   	cdq    
c002c433:	f7 f9                	idiv   ecx
c002c435:	8d 42 30             	lea    eax,[edx+0x30]
c002c438:	0f b6 c0             	movzx  eax,al
c002c43b:	50                   	push   eax
c002c43c:	e8 43 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c441:	5a                   	pop    edx
c002c442:	5f                   	pop    edi
c002c443:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c449:	53                   	push   ebx
c002c44a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c44f:	99                   	cdq    
c002c450:	f7 f9                	idiv   ecx
c002c452:	83 c2 30             	add    edx,0x30
c002c455:	0f b6 d2             	movzx  edx,dl
c002c458:	52                   	push   edx
c002c459:	e8 26 fe ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c45e:	83 c4 10             	add    esp,0x10
c002c461:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c467:	eb 05                	jmp    c002c46e <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c469:	be 01 00 00 00       	mov    esi,0x1
c002c46e:	83 c4 0c             	add    esp,0xc
c002c471:	89 f0                	mov    eax,esi
c002c473:	5b                   	pop    ebx
c002c474:	5e                   	pop    esi
c002c475:	5f                   	pop    edi
c002c476:	5d                   	pop    ebp
c002c477:	c3                   	ret    

c002c478 <ATA::write(unsigned long long, int, void*)>:
c002c478:	55                   	push   ebp
c002c479:	57                   	push   edi
c002c47a:	56                   	push   esi
c002c47b:	be 04 00 00 00       	mov    esi,0x4
c002c480:	53                   	push   ebx
c002c481:	83 ec 0c             	sub    esp,0xc
c002c484:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c488:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c48c:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c48f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c493:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c497:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c49d:	0f 87 9c 01 00 00    	ja     c002c63f <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c4a3:	be 06 00 00 00       	mov    esi,0x6
c002c4a8:	85 c9                	test   ecx,ecx
c002c4aa:	0f 84 8f 01 00 00    	je     c002c63f <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c4b0:	55                   	push   ebp
c002c4b1:	55                   	push   ebp
c002c4b2:	6a 01                	push   0x1
c002c4b4:	51                   	push   ecx
c002c4b5:	53                   	push   ebx
c002c4b6:	52                   	push   edx
c002c4b7:	50                   	push   eax
c002c4b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c4bc:	e8 37 f9 ff ff       	call   c002bdf8 <ATA::access(unsigned long long, int, void*, bool)>
c002c4c1:	83 c4 20             	add    esp,0x20
c002c4c4:	89 c6                	mov    esi,eax
c002c4c6:	85 c0                	test   eax,eax
c002c4c8:	0f 85 6c 01 00 00    	jne    c002c63a <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c4ce:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c4d4:	bd 10 27 00 00       	mov    ebp,0x2710
c002c4d9:	50                   	push   eax
c002c4da:	50                   	push   eax
c002c4db:	6a 0f                	push   0xf
c002c4dd:	6a 00                	push   0x0
c002c4df:	e8 b1 fd ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002c4e4:	5a                   	pop    edx
c002c4e5:	0f b6 d8             	movzx  ebx,al
c002c4e8:	59                   	pop    ecx
c002c4e9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c4ee:	53                   	push   ebx
c002c4ef:	b9 0a 00 00 00       	mov    ecx,0xa
c002c4f4:	99                   	cdq    
c002c4f5:	f7 fd                	idiv   ebp
c002c4f7:	99                   	cdq    
c002c4f8:	f7 f9                	idiv   ecx
c002c4fa:	8d 42 30             	lea    eax,[edx+0x30]
c002c4fd:	0f b6 c0             	movzx  eax,al
c002c500:	50                   	push   eax
c002c501:	e8 7e fd ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c506:	5f                   	pop    edi
c002c507:	bf e8 03 00 00       	mov    edi,0x3e8
c002c50c:	5a                   	pop    edx
c002c50d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c513:	53                   	push   ebx
c002c514:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c519:	99                   	cdq    
c002c51a:	f7 ff                	idiv   edi
c002c51c:	99                   	cdq    
c002c51d:	f7 f9                	idiv   ecx
c002c51f:	8d 42 30             	lea    eax,[edx+0x30]
c002c522:	0f b6 c0             	movzx  eax,al
c002c525:	50                   	push   eax
c002c526:	e8 59 fd ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c52b:	5f                   	pop    edi
c002c52c:	bf 64 00 00 00       	mov    edi,0x64
c002c531:	5a                   	pop    edx
c002c532:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c538:	53                   	push   ebx
c002c539:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c53e:	99                   	cdq    
c002c53f:	f7 ff                	idiv   edi
c002c541:	99                   	cdq    
c002c542:	f7 f9                	idiv   ecx
c002c544:	8d 42 30             	lea    eax,[edx+0x30]
c002c547:	0f b6 c0             	movzx  eax,al
c002c54a:	50                   	push   eax
c002c54b:	e8 34 fd ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c550:	5a                   	pop    edx
c002c551:	5a                   	pop    edx
c002c552:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c558:	53                   	push   ebx
c002c559:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c55e:	99                   	cdq    
c002c55f:	f7 f9                	idiv   ecx
c002c561:	99                   	cdq    
c002c562:	f7 f9                	idiv   ecx
c002c564:	8d 42 30             	lea    eax,[edx+0x30]
c002c567:	0f b6 c0             	movzx  eax,al
c002c56a:	50                   	push   eax
c002c56b:	e8 14 fd ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c570:	5a                   	pop    edx
c002c571:	5a                   	pop    edx
c002c572:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c578:	53                   	push   ebx
c002c579:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c57e:	99                   	cdq    
c002c57f:	f7 f9                	idiv   ecx
c002c581:	8d 42 30             	lea    eax,[edx+0x30]
c002c584:	0f b6 c0             	movzx  eax,al
c002c587:	50                   	push   eax
c002c588:	e8 f7 fc ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c58d:	5a                   	pop    edx
c002c58e:	5a                   	pop    edx
c002c58f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c595:	53                   	push   ebx
c002c596:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c59b:	99                   	cdq    
c002c59c:	f7 fd                	idiv   ebp
c002c59e:	99                   	cdq    
c002c59f:	f7 f9                	idiv   ecx
c002c5a1:	8d 42 30             	lea    eax,[edx+0x30]
c002c5a4:	0f b6 c0             	movzx  eax,al
c002c5a7:	50                   	push   eax
c002c5a8:	e8 d7 fc ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c5ad:	5d                   	pop    ebp
c002c5ae:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c5b3:	5a                   	pop    edx
c002c5b4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c5ba:	53                   	push   ebx
c002c5bb:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c5c0:	99                   	cdq    
c002c5c1:	f7 fd                	idiv   ebp
c002c5c3:	99                   	cdq    
c002c5c4:	f7 f9                	idiv   ecx
c002c5c6:	8d 42 30             	lea    eax,[edx+0x30]
c002c5c9:	0f b6 c0             	movzx  eax,al
c002c5cc:	50                   	push   eax
c002c5cd:	e8 b2 fc ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c5d2:	5d                   	pop    ebp
c002c5d3:	5a                   	pop    edx
c002c5d4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c5da:	53                   	push   ebx
c002c5db:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c5e0:	99                   	cdq    
c002c5e1:	f7 ff                	idiv   edi
c002c5e3:	99                   	cdq    
c002c5e4:	f7 f9                	idiv   ecx
c002c5e6:	8d 42 30             	lea    eax,[edx+0x30]
c002c5e9:	0f b6 c0             	movzx  eax,al
c002c5ec:	50                   	push   eax
c002c5ed:	e8 92 fc ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c5f2:	5f                   	pop    edi
c002c5f3:	5d                   	pop    ebp
c002c5f4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c5fa:	53                   	push   ebx
c002c5fb:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c600:	99                   	cdq    
c002c601:	f7 f9                	idiv   ecx
c002c603:	99                   	cdq    
c002c604:	f7 f9                	idiv   ecx
c002c606:	8d 42 30             	lea    eax,[edx+0x30]
c002c609:	0f b6 c0             	movzx  eax,al
c002c60c:	50                   	push   eax
c002c60d:	e8 72 fc ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c612:	5a                   	pop    edx
c002c613:	5f                   	pop    edi
c002c614:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c61a:	53                   	push   ebx
c002c61b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c620:	99                   	cdq    
c002c621:	f7 f9                	idiv   ecx
c002c623:	83 c2 30             	add    edx,0x30
c002c626:	0f b6 d2             	movzx  edx,dl
c002c629:	52                   	push   edx
c002c62a:	e8 55 fc ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002c62f:	83 c4 10             	add    esp,0x10
c002c632:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c638:	eb 05                	jmp    c002c63f <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c63a:	be 01 00 00 00       	mov    esi,0x1
c002c63f:	83 c4 0c             	add    esp,0xc
c002c642:	89 f0                	mov    eax,esi
c002c644:	5b                   	pop    ebx
c002c645:	5e                   	pop    esi
c002c646:	5f                   	pop    edi
c002c647:	5d                   	pop    ebp
c002c648:	c3                   	ret    
c002c649:	90                   	nop

c002c64a <ATAPI::write(unsigned long long, int, void*)>:
c002c64a:	b8 03 00 00 00       	mov    eax,0x3
c002c64f:	c3                   	ret    

c002c650 <ATAPI::close(int, int, void*)>:
c002c650:	83 ec 0c             	sub    esp,0xc
c002c653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c657:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c65d:	85 c0                	test   eax,eax
c002c65f:	74 0c                	je     c002c66d <ATAPI::close(int, int, void*)+0x1d>
c002c661:	83 ec 0c             	sub    esp,0xc
c002c664:	8b 10                	mov    edx,DWORD PTR [eax]
c002c666:	50                   	push   eax
c002c667:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c66a:	83 c4 10             	add    esp,0x10
c002c66d:	31 c0                	xor    eax,eax
c002c66f:	83 c4 0c             	add    esp,0xc
c002c672:	c3                   	ret    
c002c673:	90                   	nop

c002c674 <ATAPI::ATAPI()>:
c002c674:	83 ec 0c             	sub    esp,0xc
c002c677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c67b:	83 ec 04             	sub    esp,0x4
c002c67e:	68 00 08 00 00       	push   0x800
c002c683:	68 25 3c 03 c0       	push   0xc0033c25
c002c688:	50                   	push   eax
c002c689:	e8 18 f2 fe ff       	call   c001b8a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c68e:	83 c4 10             	add    esp,0x10
c002c691:	ba 34 3b 03 c0       	mov    edx,0xc0033b34
c002c696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c69a:	89 10                	mov    DWORD PTR [eax],edx
c002c69c:	90                   	nop
c002c69d:	83 c4 0c             	add    esp,0xc
c002c6a0:	c3                   	ret    
c002c6a1:	90                   	nop

c002c6a2 <ATAPI::readyForCommand()>:
c002c6a2:	56                   	push   esi
c002c6a3:	53                   	push   ebx
c002c6a4:	53                   	push   ebx
c002c6a5:	31 db                	xor    ebx,ebx
c002c6a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c6ab:	51                   	push   ecx
c002c6ac:	6a 0c                	push   0xc
c002c6ae:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c6b5:	50                   	push   eax
c002c6b6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c6bc:	e8 8f e8 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002c6c1:	83 c4 10             	add    esp,0x10
c002c6c4:	a8 88                	test   al,0x88
c002c6c6:	74 25                	je     c002c6ed <ATAPI::readyForCommand()+0x4b>
c002c6c8:	43                   	inc    ebx
c002c6c9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c6cf:	7e da                	jle    c002c6ab <ATAPI::readyForCommand()+0x9>
c002c6d1:	83 ec 0c             	sub    esp,0xc
c002c6d4:	68 5e 01 00 00       	push   0x15e
c002c6d9:	e8 6a 8f ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002c6de:	83 c4 10             	add    esp,0x10
c002c6e1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c6e7:	75 c2                	jne    c002c6ab <ATAPI::readyForCommand()+0x9>
c002c6e9:	31 c0                	xor    eax,eax
c002c6eb:	eb 02                	jmp    c002c6ef <ATAPI::readyForCommand()+0x4d>
c002c6ed:	b0 01                	mov    al,0x1
c002c6ef:	5a                   	pop    edx
c002c6f0:	5b                   	pop    ebx
c002c6f1:	5e                   	pop    esi
c002c6f2:	c3                   	ret    
c002c6f3:	90                   	nop

c002c6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c6f4:	55                   	push   ebp
c002c6f5:	57                   	push   edi
c002c6f6:	56                   	push   esi
c002c6f7:	53                   	push   ebx
c002c6f8:	83 ec 20             	sub    esp,0x20
c002c6fb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c6ff:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c703:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c707:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c70b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c70f:	6a 01                	push   0x1
c002c711:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c718:	50                   	push   eax
c002c719:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c71f:	e8 74 e9 ff ff       	call   c002b098 <IDE::enableIRQs(unsigned char, bool)>
c002c724:	5e                   	pop    esi
c002c725:	58                   	pop    eax
c002c726:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c72d:	50                   	push   eax
c002c72e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c734:	e8 31 e7 ff ff       	call   c002ae6a <IDE::prepareInterrupt(unsigned char)>
c002c739:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c73c:	e8 61 ff ff ff       	call   c002c6a2 <ATAPI::readyForCommand()>
c002c741:	83 c4 10             	add    esp,0x10
c002c744:	84 c0                	test   al,al
c002c746:	75 0a                	jne    c002c752 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c748:	bb 01 00 00 00       	mov    ebx,0x1
c002c74d:	e9 60 02 00 00       	jmp    c002c9b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c752:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c758:	c1 e0 04             	shl    eax,0x4
c002c75b:	0f b6 c0             	movzx  eax,al
c002c75e:	50                   	push   eax
c002c75f:	6a 06                	push   0x6
c002c761:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c768:	50                   	push   eax
c002c769:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c76f:	e8 1c e7 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c774:	6a 00                	push   0x0
c002c776:	6a 01                	push   0x1
c002c778:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c77f:	50                   	push   eax
c002c780:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c786:	e8 05 e7 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c78b:	83 c4 20             	add    esp,0x20
c002c78e:	0f b6 c3             	movzx  eax,bl
c002c791:	0f b6 df             	movzx  ebx,bh
c002c794:	50                   	push   eax
c002c795:	6a 04                	push   0x4
c002c797:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c79e:	50                   	push   eax
c002c79f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7a5:	e8 e6 e6 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c7aa:	53                   	push   ebx
c002c7ab:	6a 05                	push   0x5
c002c7ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7b4:	50                   	push   eax
c002c7b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7bb:	e8 d0 e6 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c7c0:	83 c4 20             	add    esp,0x20
c002c7c3:	68 a0 00 00 00       	push   0xa0
c002c7c8:	6a 07                	push   0x7
c002c7ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7d1:	50                   	push   eax
c002c7d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7d8:	e8 b3 e6 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c7dd:	83 c4 0c             	add    esp,0xc
c002c7e0:	6a 01                	push   0x1
c002c7e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c7e9:	50                   	push   eax
c002c7ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c7f0:	e8 83 f1 ff ff       	call   c002b978 <IDE::polling(unsigned char, unsigned int)>
c002c7f5:	83 c4 10             	add    esp,0x10
c002c7f8:	0f b6 d8             	movzx  ebx,al
c002c7fb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c801:	85 db                	test   ebx,ebx
c002c803:	74 20                	je     c002c825 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c805:	53                   	push   ebx
c002c806:	0f b6 c0             	movzx  eax,al
c002c809:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c810:	52                   	push   edx
c002c811:	50                   	push   eax
c002c812:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c818:	e8 a1 f0 ff ff       	call   c002b8be <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c81d:	83 c4 10             	add    esp,0x10
c002c820:	e9 8d 01 00 00       	jmp    c002c9b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c825:	0f b6 c0             	movzx  eax,al
c002c828:	53                   	push   ebx
c002c829:	53                   	push   ebx
c002c82a:	50                   	push   eax
c002c82b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c831:	e8 48 e6 ff ff       	call   c002ae7e <IDE::getBase(unsigned char)>
c002c836:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c83a:	b9 06 00 00 00       	mov    ecx,0x6
c002c83f:	89 c2                	mov    edx,eax
c002c841:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c844:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c848:	83 c4 10             	add    esp,0x10
c002c84b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c850:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c854:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c85a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c861:	85 db                	test   ebx,ebx
c002c863:	0f 84 ec 00 00 00    	je     c002c955 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c869:	51                   	push   ecx
c002c86a:	51                   	push   ecx
c002c86b:	52                   	push   edx
c002c86c:	50                   	push   eax
c002c86d:	e8 8c e7 ff ff       	call   c002affe <IDE::waitInterrupt(unsigned char)>
c002c872:	83 c4 10             	add    esp,0x10
c002c875:	84 c0                	test   al,al
c002c877:	0f 84 cb fe ff ff    	je     c002c748 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c87d:	56                   	push   esi
c002c87e:	56                   	push   esi
c002c87f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c886:	50                   	push   eax
c002c887:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c88d:	e8 d8 e5 ff ff       	call   c002ae6a <IDE::prepareInterrupt(unsigned char)>
c002c892:	83 c4 0c             	add    esp,0xc
c002c895:	6a 04                	push   0x4
c002c897:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c89e:	50                   	push   eax
c002c89f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8a5:	e8 a6 e6 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002c8aa:	83 c4 0c             	add    esp,0xc
c002c8ad:	89 c6                	mov    esi,eax
c002c8af:	6a 05                	push   0x5
c002c8b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c8b8:	50                   	push   eax
c002c8b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c8bf:	e8 8c e6 ff ff       	call   c002af50 <IDE::read(unsigned char, unsigned char)>
c002c8c4:	89 f1                	mov    ecx,esi
c002c8c6:	0f b6 c0             	movzx  eax,al
c002c8c9:	0f b6 f1             	movzx  esi,cl
c002c8cc:	c1 e0 08             	shl    eax,0x8
c002c8cf:	09 c6                	or     esi,eax
c002c8d1:	d1 fe                	sar    esi,1
c002c8d3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c8d7:	83 c4 10             	add    esp,0x10
c002c8da:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c8df:	74 41                	je     c002c922 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c8e1:	31 c9                	xor    ecx,ecx
c002c8e3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c8e9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c8f0:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c8f4:	75 0a                	jne    c002c900 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c8f6:	01 c9                	add    ecx,ecx
c002c8f8:	01 cd                	add    ebp,ecx
c002c8fa:	4b                   	dec    ebx
c002c8fb:	e9 54 ff ff ff       	jmp    c002c854 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c900:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c905:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c909:	51                   	push   ecx
c002c90a:	51                   	push   ecx
c002c90b:	52                   	push   edx
c002c90c:	50                   	push   eax
c002c90d:	e8 6c e5 ff ff       	call   c002ae7e <IDE::getBase(unsigned char)>
c002c912:	89 c2                	mov    edx,eax
c002c914:	89 f0                	mov    eax,esi
c002c916:	66 ef                	out    dx,ax
c002c918:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c91c:	83 c4 10             	add    esp,0x10
c002c91f:	41                   	inc    ecx
c002c920:	eb c1                	jmp    c002c8e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c922:	31 f6                	xor    esi,esi
c002c924:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c92a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c931:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c935:	75 06                	jne    c002c93d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c937:	01 f6                	add    esi,esi
c002c939:	01 f5                	add    ebp,esi
c002c93b:	eb bd                	jmp    c002c8fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c93d:	51                   	push   ecx
c002c93e:	51                   	push   ecx
c002c93f:	52                   	push   edx
c002c940:	50                   	push   eax
c002c941:	e8 38 e5 ff ff       	call   c002ae7e <IDE::getBase(unsigned char)>
c002c946:	89 c2                	mov    edx,eax
c002c948:	66 ed                	in     ax,dx
c002c94a:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c94f:	83 c4 10             	add    esp,0x10
c002c952:	46                   	inc    esi
c002c953:	eb cf                	jmp    c002c924 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c955:	51                   	push   ecx
c002c956:	51                   	push   ecx
c002c957:	52                   	push   edx
c002c958:	50                   	push   eax
c002c959:	e8 a0 e6 ff ff       	call   c002affe <IDE::waitInterrupt(unsigned char)>
c002c95e:	83 c4 10             	add    esp,0x10
c002c961:	84 c0                	test   al,al
c002c963:	0f 84 df fd ff ff    	je     c002c748 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c969:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c96e:	52                   	push   edx
c002c96f:	52                   	push   edx
c002c970:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c977:	50                   	push   eax
c002c978:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c97e:	e8 e7 e4 ff ff       	call   c002ae6a <IDE::prepareInterrupt(unsigned char)>
c002c983:	83 c4 10             	add    esp,0x10
c002c986:	50                   	push   eax
c002c987:	50                   	push   eax
c002c988:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c98f:	50                   	push   eax
c002c990:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c996:	e8 e3 e4 ff ff       	call   c002ae7e <IDE::getBase(unsigned char)>
c002c99b:	8d 50 07             	lea    edx,[eax+0x7]
c002c99e:	ec                   	in     al,dx
c002c99f:	83 c4 10             	add    esp,0x10
c002c9a2:	a8 88                	test   al,0x88
c002c9a4:	74 0a                	je     c002c9b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c9a6:	4b                   	dec    ebx
c002c9a7:	75 dd                	jne    c002c986 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c9a9:	bb 02 00 00 00       	mov    ebx,0x2
c002c9ae:	eb 02                	jmp    c002c9b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c9b0:	31 db                	xor    ebx,ebx
c002c9b2:	83 c4 1c             	add    esp,0x1c
c002c9b5:	89 d8                	mov    eax,ebx
c002c9b7:	5b                   	pop    ebx
c002c9b8:	5e                   	pop    esi
c002c9b9:	5f                   	pop    edi
c002c9ba:	5d                   	pop    ebp
c002c9bb:	c3                   	ret    

c002c9bc <ATAPI::diskRemoved()>:
c002c9bc:	53                   	push   ebx
c002c9bd:	83 ec 14             	sub    esp,0x14
c002c9c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c9c4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c9cb:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c9d1:	e8 64 fe fe ff       	call   c001c83a <LogicalDisk::unmount()>
c002c9d6:	58                   	pop    eax
c002c9d7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c9dd:	e8 36 08 ff ff       	call   c001d218 <VCache::writeWriteBuffer()>
c002c9e2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c9e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c9ec:	83 c4 18             	add    esp,0x18
c002c9ef:	5b                   	pop    ebx
c002c9f0:	e9 13 08 ff ff       	jmp    c001d208 <VCache::invalidateReadBuffer()>
c002c9f5:	90                   	nop

c002c9f6 <ATAPI::eject()>:
c002c9f6:	57                   	push   edi
c002c9f7:	b9 03 00 00 00       	mov    ecx,0x3
c002c9fc:	53                   	push   ebx
c002c9fd:	83 ec 14             	sub    esp,0x14
c002ca00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002ca04:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002ca08:	fc                   	cld    
c002ca09:	31 c0                	xor    eax,eax
c002ca0b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002ca0d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002ca12:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002ca17:	50                   	push   eax
c002ca18:	50                   	push   eax
c002ca19:	6a 00                	push   0x0
c002ca1b:	6a 00                	push   0x0
c002ca1d:	6a 00                	push   0x0
c002ca1f:	6a 02                	push   0x2
c002ca21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002ca25:	50                   	push   eax
c002ca26:	53                   	push   ebx
c002ca27:	e8 c8 fc ff ff       	call   c002c6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca2c:	83 c4 14             	add    esp,0x14
c002ca2f:	53                   	push   ebx
c002ca30:	e8 87 ff ff ff       	call   c002c9bc <ATAPI::diskRemoved()>
c002ca35:	83 c4 24             	add    esp,0x24
c002ca38:	31 c0                	xor    eax,eax
c002ca3a:	5b                   	pop    ebx
c002ca3b:	5f                   	pop    edi
c002ca3c:	c3                   	ret    
c002ca3d:	90                   	nop

c002ca3e <ATAPI::diskInserted()>:
c002ca3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ca42:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002ca49:	c3                   	ret    

c002ca4a <ATAPI::detectMedia()>:
c002ca4a:	56                   	push   esi
c002ca4b:	53                   	push   ebx
c002ca4c:	83 ec 28             	sub    esp,0x28
c002ca4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002ca53:	6a 0c                	push   0xc
c002ca55:	6a 00                	push   0x0
c002ca57:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002ca5b:	56                   	push   esi
c002ca5c:	e8 8f 3a fd ff       	call   c00004f0 <memset>
c002ca61:	58                   	pop    eax
c002ca62:	5a                   	pop    edx
c002ca63:	6a 00                	push   0x0
c002ca65:	6a 00                	push   0x0
c002ca67:	6a 00                	push   0x0
c002ca69:	6a 00                	push   0x0
c002ca6b:	56                   	push   esi
c002ca6c:	53                   	push   ebx
c002ca6d:	e8 82 fc ff ff       	call   c002c6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca72:	83 c4 1c             	add    esp,0x1c
c002ca75:	6a 0c                	push   0xc
c002ca77:	6a 00                	push   0x0
c002ca79:	56                   	push   esi
c002ca7a:	e8 71 3a fd ff       	call   c00004f0 <memset>
c002ca7f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002ca84:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002ca89:	59                   	pop    ecx
c002ca8a:	58                   	pop    eax
c002ca8b:	6a 01                	push   0x1
c002ca8d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002ca91:	50                   	push   eax
c002ca92:	6a 00                	push   0x0
c002ca94:	6a 12                	push   0x12
c002ca96:	56                   	push   esi
c002ca97:	53                   	push   ebx
c002ca98:	e8 57 fc ff ff       	call   c002c6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002ca9d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002caa1:	83 c4 20             	add    esp,0x20
c002caa4:	83 e0 7f             	and    eax,0x7f
c002caa7:	83 f8 70             	cmp    eax,0x70
c002caaa:	74 15                	je     c002cac1 <ATAPI::detectMedia()+0x77>
c002caac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cab3:	75 0c                	jne    c002cac1 <ATAPI::detectMedia()+0x77>
c002cab5:	83 ec 0c             	sub    esp,0xc
c002cab8:	53                   	push   ebx
c002cab9:	e8 80 ff ff ff       	call   c002ca3e <ATAPI::diskInserted()>
c002cabe:	83 c4 10             	add    esp,0x10
c002cac1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002cac5:	83 e0 0f             	and    eax,0xf
c002cac8:	83 f8 02             	cmp    eax,0x2
c002cacb:	75 1b                	jne    c002cae8 <ATAPI::detectMedia()+0x9e>
c002cacd:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002cad2:	75 2d                	jne    c002cb01 <ATAPI::detectMedia()+0xb7>
c002cad4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cadb:	74 24                	je     c002cb01 <ATAPI::detectMedia()+0xb7>
c002cadd:	83 ec 0c             	sub    esp,0xc
c002cae0:	53                   	push   ebx
c002cae1:	e8 d6 fe ff ff       	call   c002c9bc <ATAPI::diskRemoved()>
c002cae6:	eb 16                	jmp    c002cafe <ATAPI::detectMedia()+0xb4>
c002cae8:	85 c0                	test   eax,eax
c002caea:	75 15                	jne    c002cb01 <ATAPI::detectMedia()+0xb7>
c002caec:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002caf3:	75 0c                	jne    c002cb01 <ATAPI::detectMedia()+0xb7>
c002caf5:	83 ec 0c             	sub    esp,0xc
c002caf8:	53                   	push   ebx
c002caf9:	e8 40 ff ff ff       	call   c002ca3e <ATAPI::diskInserted()>
c002cafe:	83 c4 10             	add    esp,0x10
c002cb01:	83 c4 24             	add    esp,0x24
c002cb04:	5b                   	pop    ebx
c002cb05:	5e                   	pop    esi
c002cb06:	c3                   	ret    
c002cb07:	90                   	nop

c002cb08 <ATAPI::open(int, int, void*)>:
c002cb08:	56                   	push   esi
c002cb09:	53                   	push   ebx
c002cb0a:	50                   	push   eax
c002cb0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002cb0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cb13:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cb17:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cb1d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002cb23:	c1 e0 06             	shl    eax,0x6
c002cb26:	01 d0                	add    eax,edx
c002cb28:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002cb2f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002cb35:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002cb3c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002cb46:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cb4c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002cb53:	6a 04                	push   0x4
c002cb55:	6a 0c                	push   0xc
c002cb57:	51                   	push   ecx
c002cb58:	52                   	push   edx
c002cb59:	e8 32 e3 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cb5e:	90                   	nop
c002cb5f:	90                   	nop
c002cb60:	6a 00                	push   0x0
c002cb62:	6a 0c                	push   0xc
c002cb64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002cb6b:	50                   	push   eax
c002cb6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002cb72:	e8 19 e3 ff ff       	call   c002ae90 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002cb77:	83 c4 14             	add    esp,0x14
c002cb7a:	68 78 01 00 00       	push   0x178
c002cb7f:	e8 2d 9a fe ff       	call   c00165b1 <malloc>
c002cb84:	83 c4 0c             	add    esp,0xc
c002cb87:	89 c6                	mov    esi,eax
c002cb89:	6a 00                	push   0x0
c002cb8b:	68 ff ff ff 7f       	push   0x7fffffff
c002cb90:	6a 00                	push   0x0
c002cb92:	6a 00                	push   0x0
c002cb94:	53                   	push   ebx
c002cb95:	68 d7 3c 03 c0       	push   0xc0033cd7
c002cb9a:	50                   	push   eax
c002cb9b:	e8 d8 fa fe ff       	call   c001c678 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002cba0:	83 c4 14             	add    esp,0x14
c002cba3:	56                   	push   esi
c002cba4:	e8 8f fb fe ff       	call   c001c738 <LogicalDisk::assignDriveLetter()>
c002cba9:	5a                   	pop    edx
c002cbaa:	0f be c0             	movsx  eax,al
c002cbad:	59                   	pop    ecx
c002cbae:	50                   	push   eax
c002cbaf:	68 1c 3b 03 c0       	push   0xc0033b1c
c002cbb4:	e8 88 c8 fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002cbb9:	58                   	pop    eax
c002cbba:	5a                   	pop    edx
c002cbbb:	56                   	push   esi
c002cbbc:	53                   	push   ebx
c002cbbd:	e8 00 e9 fe ff       	call   c001b4c2 <Device::addChild(Device*)>
c002cbc2:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002cbc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cbcb:	e8 3e ed fe ff       	call   c001b90e <PhysicalDisk::startCache()>
c002cbd0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002cbd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cbda:	e8 6b fe ff ff       	call   c002ca4a <ATAPI::detectMedia()>
c002cbdf:	83 c4 14             	add    esp,0x14
c002cbe2:	31 c0                	xor    eax,eax
c002cbe4:	5b                   	pop    ebx
c002cbe5:	5e                   	pop    esi
c002cbe6:	c3                   	ret    
c002cbe7:	90                   	nop

c002cbe8 <ATAPI::read(unsigned long long, int, void*)>:
c002cbe8:	55                   	push   ebp
c002cbe9:	57                   	push   edi
c002cbea:	56                   	push   esi
c002cbeb:	53                   	push   ebx
c002cbec:	83 ec 1c             	sub    esp,0x1c
c002cbef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cbf3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002cbf7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cbfb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cc02:	74 3c                	je     c002cc40 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002cc04:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cc08:	b9 03 00 00 00       	mov    ecx,0x3
c002cc0d:	fc                   	cld    
c002cc0e:	31 c0                	xor    eax,eax
c002cc10:	0f ce                	bswap  esi
c002cc12:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cc14:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002cc19:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002cc1d:	89 e8                	mov    eax,ebp
c002cc1f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002cc23:	50                   	push   eax
c002cc24:	50                   	push   eax
c002cc25:	55                   	push   ebp
c002cc26:	c1 e5 0b             	shl    ebp,0xb
c002cc29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cc2d:	6a 00                	push   0x0
c002cc2f:	55                   	push   ebp
c002cc30:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002cc34:	50                   	push   eax
c002cc35:	53                   	push   ebx
c002cc36:	e8 b9 fa ff ff       	call   c002c6f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002cc3b:	83 c4 20             	add    esp,0x20
c002cc3e:	eb 1a                	jmp    c002cc5a <ATAPI::read(unsigned long long, int, void*)+0x72>
c002cc40:	83 ec 0c             	sub    esp,0xc
c002cc43:	53                   	push   ebx
c002cc44:	e8 01 fe ff ff       	call   c002ca4a <ATAPI::detectMedia()>
c002cc49:	83 c4 10             	add    esp,0x10
c002cc4c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cc53:	75 af                	jne    c002cc04 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cc55:	b8 02 00 00 00       	mov    eax,0x2
c002cc5a:	83 c4 1c             	add    esp,0x1c
c002cc5d:	5b                   	pop    ebx
c002cc5e:	5e                   	pop    esi
c002cc5f:	5f                   	pop    edi
c002cc60:	5d                   	pop    ebp
c002cc61:	c3                   	ret    

c002cc62 <SATA::close(int, int, void*)>:
c002cc62:	83 ec 0c             	sub    esp,0xc
c002cc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cc69:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cc6f:	85 c0                	test   eax,eax
c002cc71:	74 0c                	je     c002cc7f <SATA::close(int, int, void*)+0x1d>
c002cc73:	83 ec 0c             	sub    esp,0xc
c002cc76:	8b 10                	mov    edx,DWORD PTR [eax]
c002cc78:	50                   	push   eax
c002cc79:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cc7c:	83 c4 10             	add    esp,0x10
c002cc7f:	31 c0                	xor    eax,eax
c002cc81:	83 c4 0c             	add    esp,0xc
c002cc84:	c3                   	ret    
c002cc85:	90                   	nop

c002cc86 <SATA::powerSaving(PowerSavingLevel)>:
c002cc86:	c3                   	ret    
c002cc87:	90                   	nop

c002cc88 <SATA::open(int, int, void*)>:
c002cc88:	56                   	push   esi
c002cc89:	53                   	push   ebx
c002cc8a:	83 ec 10             	sub    esp,0x10
c002cc8d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cc91:	68 64 3b 03 c0       	push   0xc0033b64
c002cc96:	e8 a6 c7 fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002cc9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cc9f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cca9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002ccaf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002ccb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ccbd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002ccc7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cccd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002ccd4:	e8 e1 9b fe ff       	call   c00168ba <Phys::allocatePage()>
c002ccd9:	89 c6                	mov    esi,eax
c002ccdb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cce1:	81 c6 00 10 00 00    	add    esi,0x1000
c002cce7:	e8 ce 9b fe ff       	call   c00168ba <Phys::allocatePage()>
c002ccec:	83 c4 10             	add    esp,0x10
c002ccef:	39 c6                	cmp    esi,eax
c002ccf1:	74 10                	je     c002cd03 <SATA::open(int, int, void*)+0x7b>
c002ccf3:	83 ec 0c             	sub    esp,0xc
c002ccf6:	68 70 3b 03 c0       	push   0xc0033b70
c002ccfb:	e8 5a 37 ff ff       	call   c002045a <KePanic(char const*)>
c002cd00:	83 c4 10             	add    esp,0x10
c002cd03:	83 ec 0c             	sub    esp,0xc
c002cd06:	6a 02                	push   0x2
c002cd08:	e8 fc b3 fe ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c002cd0d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cd13:	6a 03                	push   0x3
c002cd15:	50                   	push   eax
c002cd16:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cd1c:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cd22:	e8 f5 ba fe ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c002cd27:	83 c4 14             	add    esp,0x14
c002cd2a:	53                   	push   ebx
c002cd2b:	e8 de eb fe ff       	call   c001b90e <PhysicalDisk::startCache()>
c002cd30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cd33:	e8 12 fe fe ff       	call   c001cb4a <createPartitionsForDisk(PhysicalDisk*)>
c002cd38:	83 c4 14             	add    esp,0x14
c002cd3b:	31 c0                	xor    eax,eax
c002cd3d:	5b                   	pop    ebx
c002cd3e:	5e                   	pop    esi
c002cd3f:	c3                   	ret    

c002cd40 <SATA::SATA()>:
c002cd40:	83 ec 0c             	sub    esp,0xc
c002cd43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cd47:	83 ec 04             	sub    esp,0x4
c002cd4a:	68 00 02 00 00       	push   0x200
c002cd4f:	68 84 3b 03 c0       	push   0xc0033b84
c002cd54:	50                   	push   eax
c002cd55:	e8 4c eb fe ff       	call   c001b8a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cd5a:	83 c4 10             	add    esp,0x10
c002cd5d:	ba f4 3b 03 c0       	mov    edx,0xc0033bf4
c002cd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cd66:	89 10                	mov    DWORD PTR [eax],edx
c002cd68:	90                   	nop
c002cd69:	83 c4 0c             	add    esp,0xc
c002cd6c:	c3                   	ret    
c002cd6d:	90                   	nop

c002cd6e <SATA::access(unsigned long long, int, void*, bool)>:
c002cd6e:	55                   	push   ebp
c002cd6f:	57                   	push   edi
c002cd70:	56                   	push   esi
c002cd71:	53                   	push   ebx
c002cd72:	83 ec 2c             	sub    esp,0x2c
c002cd75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cd79:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cd81:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002cd85:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cd89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002cd8d:	fa                   	cli    
c002cd8e:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cd94:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cd99:	7e 10                	jle    c002cdab <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002cd9b:	83 ec 0c             	sub    esp,0xc
c002cd9e:	68 94 3b 03 c0       	push   0xc0033b94
c002cda3:	e8 b2 36 ff ff       	call   c002045a <KePanic(char const*)>
c002cda8:	83 c4 10             	add    esp,0x10
c002cdab:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002cdb1:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cdb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cdbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cdc1:	89 d0                	mov    eax,edx
c002cdc3:	c1 e0 07             	shl    eax,0x7
c002cdc6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cdca:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cdd4:	51                   	push   ecx
c002cdd5:	8d 42 02             	lea    eax,[edx+0x2]
c002cdd8:	51                   	push   ecx
c002cdd9:	c1 e0 07             	shl    eax,0x7
c002cddc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cde0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002cde4:	50                   	push   eax
c002cde5:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cdeb:	e8 68 ec ff ff       	call   c002ba58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cdf0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cdf4:	83 c4 10             	add    esp,0x10
c002cdf7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cdfc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ce00:	0f 84 aa 01 00 00    	je     c002cfb0 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002ce06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002ce0a:	c1 e0 09             	shl    eax,0x9
c002ce0d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ce12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002ce16:	74 0e                	je     c002ce26 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002ce18:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002ce1e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002ce22:	89 c1                	mov    ecx,eax
c002ce24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ce26:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002ce2c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002ce30:	8d 42 02             	lea    eax,[edx+0x2]
c002ce33:	c1 e0 07             	shl    eax,0x7
c002ce36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002ce3a:	8b 00                	mov    eax,DWORD PTR [eax]
c002ce3c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002ce42:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002ce48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ce4c:	c1 e1 05             	shl    ecx,0x5
c002ce4f:	01 c8                	add    eax,ecx
c002ce51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002ce55:	83 e1 01             	and    ecx,0x1
c002ce58:	89 ce                	mov    esi,ecx
c002ce5a:	8a 08                	mov    cl,BYTE PTR [eax]
c002ce5c:	c1 e6 06             	shl    esi,0x6
c002ce5f:	83 e1 bf             	and    ecx,0xffffffbf
c002ce62:	09 f1                	or     ecx,esi
c002ce64:	88 08                	mov    BYTE PTR [eax],cl
c002ce66:	8b 08                	mov    ecx,DWORD PTR [eax]
c002ce68:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002ce6e:	81 c9 05 00 01 00    	or     ecx,0x10005
c002ce74:	89 08                	mov    DWORD PTR [eax],ecx
c002ce76:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002ce7c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002ce82:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002ce88:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002ce8b:	50                   	push   eax
c002ce8c:	68 90 00 00 00       	push   0x90
c002ce91:	6a 00                	push   0x0
c002ce93:	56                   	push   esi
c002ce94:	e8 57 36 fd ff       	call   c00004f0 <memset>
c002ce99:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002ce9f:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cea5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cea9:	83 c4 10             	add    esp,0x10
c002ceac:	48                   	dec    eax
c002cead:	25 ff ff 3f 00       	and    eax,0x3fffff
c002ceb2:	89 c1                	mov    ecx,eax
c002ceb4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002ceba:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cebf:	09 c8                	or     eax,ecx
c002cec1:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cec7:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cecd:	83 c8 80             	or     eax,0xffffff80
c002ced0:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002ced6:	66 8b 06             	mov    ax,WORD PTR [esi]
c002ced9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cedd:	25 00 7f 00 00       	and    eax,0x7f00
c002cee2:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cee7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ceec:	66 89 06             	mov    WORD PTR [esi],ax
c002ceef:	b0 35                	mov    al,0x35
c002cef1:	75 02                	jne    c002cef5 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002cef3:	b0 25                	mov    al,0x25
c002cef5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cef8:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cefc:	89 e8                	mov    eax,ebp
c002cefe:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cf02:	c1 e8 10             	shr    eax,0x10
c002cf05:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cf08:	89 e8                	mov    eax,ebp
c002cf0a:	c1 e8 18             	shr    eax,0x18
c002cf0d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cf10:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cf14:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cf17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cf1b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cf1e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cf22:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cf26:	89 d6                	mov    esi,edx
c002cf28:	31 c0                	xor    eax,eax
c002cf2a:	c1 e6 07             	shl    esi,0x7
c002cf2d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cf31:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cf37:	80 e1 88             	and    cl,0x88
c002cf3a:	74 0a                	je     c002cf46 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cf3c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cf41:	74 0a                	je     c002cf4d <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cf43:	40                   	inc    eax
c002cf44:	eb eb                	jmp    c002cf31 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cf46:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cf4b:	75 0a                	jne    c002cf57 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cf4d:	83 ec 0c             	sub    esp,0xc
c002cf50:	68 cd 3b 03 c0       	push   0xc0033bcd
c002cf55:	eb 36                	jmp    c002cf8d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cf57:	b8 01 00 00 00       	mov    eax,0x1
c002cf5c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cf60:	c1 e2 07             	shl    edx,0x7
c002cf63:	d3 e0                	shl    eax,cl
c002cf65:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cf69:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cf6f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cf75:	85 c8                	test   eax,ecx
c002cf77:	74 2b                	je     c002cfa4 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cf79:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cf7f:	0f ba e1 1e          	bt     ecx,0x1e
c002cf83:	73 ea                	jae    c002cf6f <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cf85:	83 ec 0c             	sub    esp,0xc
c002cf88:	68 db 3b 03 c0       	push   0xc0033bdb
c002cf8d:	e8 af c4 fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002cf92:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cf97:	83 c4 10             	add    esp,0x10
c002cf9a:	48                   	dec    eax
c002cf9b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cfa0:	85 c0                	test   eax,eax
c002cfa2:	eb 17                	jmp    c002cfbb <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002cfa4:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cfaa:	0f ba e0 1e          	bt     eax,0x1e
c002cfae:	73 15                	jae    c002cfc5 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002cfb0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cfb5:	48                   	dec    eax
c002cfb6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cfbb:	75 01                	jne    c002cfbe <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002cfbd:	fb                   	sti    
c002cfbe:	b8 01 00 00 00       	mov    eax,0x1
c002cfc3:	eb 29                	jmp    c002cfee <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cfc5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cfca:	75 10                	jne    c002cfdc <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002cfcc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cfd2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002cfd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002cfda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cfdc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cfe1:	48                   	dec    eax
c002cfe2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cfe7:	75 03                	jne    c002cfec <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cfe9:	fb                   	sti    
c002cfea:	eb 02                	jmp    c002cfee <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cfec:	31 c0                	xor    eax,eax
c002cfee:	83 c4 2c             	add    esp,0x2c
c002cff1:	5b                   	pop    ebx
c002cff2:	5e                   	pop    esi
c002cff3:	5f                   	pop    edi
c002cff4:	5d                   	pop    ebp
c002cff5:	c3                   	ret    

c002cff6 <SATA::read(unsigned long long, int, void*)>:
c002cff6:	55                   	push   ebp
c002cff7:	57                   	push   edi
c002cff8:	56                   	push   esi
c002cff9:	be 04 00 00 00       	mov    esi,0x4
c002cffe:	53                   	push   ebx
c002cfff:	83 ec 0c             	sub    esp,0xc
c002d002:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002d00a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002d00d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002d011:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002d015:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002d01b:	0f 87 1a 02 00 00    	ja     c002d23b <SATA::read(unsigned long long, int, void*)+0x245>
c002d021:	be 06 00 00 00       	mov    esi,0x6
c002d026:	85 c9                	test   ecx,ecx
c002d028:	0f 84 0d 02 00 00    	je     c002d23b <SATA::read(unsigned long long, int, void*)+0x245>
c002d02e:	56                   	push   esi
c002d02f:	56                   	push   esi
c002d030:	6a 00                	push   0x0
c002d032:	51                   	push   ecx
c002d033:	53                   	push   ebx
c002d034:	52                   	push   edx
c002d035:	50                   	push   eax
c002d036:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d03a:	e8 2f fd ff ff       	call   c002cd6e <SATA::access(unsigned long long, int, void*, bool)>
c002d03f:	83 c4 20             	add    esp,0x20
c002d042:	89 c6                	mov    esi,eax
c002d044:	85 c0                	test   eax,eax
c002d046:	0f 85 ea 01 00 00    	jne    c002d236 <SATA::read(unsigned long long, int, void*)+0x240>
c002d04c:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002d052:	bb 0a 00 00 00       	mov    ebx,0xa
c002d057:	50                   	push   eax
c002d058:	50                   	push   eax
c002d059:	6a 0f                	push   0xf
c002d05b:	6a 00                	push   0x0
c002d05d:	e8 33 f2 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d062:	5a                   	pop    edx
c002d063:	0f b6 c0             	movzx  eax,al
c002d066:	59                   	pop    ecx
c002d067:	b9 10 27 00 00       	mov    ecx,0x2710
c002d06c:	50                   	push   eax
c002d06d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d072:	99                   	cdq    
c002d073:	f7 f9                	idiv   ecx
c002d075:	99                   	cdq    
c002d076:	f7 fb                	idiv   ebx
c002d078:	8d 42 30             	lea    eax,[edx+0x30]
c002d07b:	0f b6 c0             	movzx  eax,al
c002d07e:	50                   	push   eax
c002d07f:	e8 00 f2 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d084:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d08a:	5f                   	pop    edi
c002d08b:	5d                   	pop    ebp
c002d08c:	bd e8 03 00 00       	mov    ebp,0x3e8
c002d091:	6a 0f                	push   0xf
c002d093:	6a 00                	push   0x0
c002d095:	e8 fb f1 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d09a:	5a                   	pop    edx
c002d09b:	0f b6 c0             	movzx  eax,al
c002d09e:	59                   	pop    ecx
c002d09f:	50                   	push   eax
c002d0a0:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0a5:	99                   	cdq    
c002d0a6:	f7 fd                	idiv   ebp
c002d0a8:	99                   	cdq    
c002d0a9:	f7 fb                	idiv   ebx
c002d0ab:	8d 42 30             	lea    eax,[edx+0x30]
c002d0ae:	0f b6 c0             	movzx  eax,al
c002d0b1:	50                   	push   eax
c002d0b2:	e8 cd f1 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d0b7:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d0bd:	5f                   	pop    edi
c002d0be:	bf 64 00 00 00       	mov    edi,0x64
c002d0c3:	58                   	pop    eax
c002d0c4:	6a 0f                	push   0xf
c002d0c6:	6a 00                	push   0x0
c002d0c8:	e8 c8 f1 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d0cd:	5a                   	pop    edx
c002d0ce:	0f b6 c0             	movzx  eax,al
c002d0d1:	59                   	pop    ecx
c002d0d2:	50                   	push   eax
c002d0d3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0d8:	99                   	cdq    
c002d0d9:	f7 ff                	idiv   edi
c002d0db:	99                   	cdq    
c002d0dc:	f7 fb                	idiv   ebx
c002d0de:	8d 42 30             	lea    eax,[edx+0x30]
c002d0e1:	0f b6 c0             	movzx  eax,al
c002d0e4:	50                   	push   eax
c002d0e5:	e8 9a f1 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d0ea:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d0f0:	58                   	pop    eax
c002d0f1:	5a                   	pop    edx
c002d0f2:	6a 0f                	push   0xf
c002d0f4:	6a 00                	push   0x0
c002d0f6:	e8 9a f1 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d0fb:	59                   	pop    ecx
c002d0fc:	0f b6 c0             	movzx  eax,al
c002d0ff:	5a                   	pop    edx
c002d100:	50                   	push   eax
c002d101:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d106:	99                   	cdq    
c002d107:	f7 fb                	idiv   ebx
c002d109:	99                   	cdq    
c002d10a:	f7 fb                	idiv   ebx
c002d10c:	8d 42 30             	lea    eax,[edx+0x30]
c002d10f:	0f b6 c0             	movzx  eax,al
c002d112:	50                   	push   eax
c002d113:	e8 6c f1 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d118:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d11e:	59                   	pop    ecx
c002d11f:	58                   	pop    eax
c002d120:	6a 0f                	push   0xf
c002d122:	6a 00                	push   0x0
c002d124:	e8 6c f1 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d129:	5a                   	pop    edx
c002d12a:	0f b6 c0             	movzx  eax,al
c002d12d:	59                   	pop    ecx
c002d12e:	50                   	push   eax
c002d12f:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d134:	99                   	cdq    
c002d135:	f7 fb                	idiv   ebx
c002d137:	8d 42 30             	lea    eax,[edx+0x30]
c002d13a:	0f b6 c0             	movzx  eax,al
c002d13d:	50                   	push   eax
c002d13e:	e8 41 f1 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d143:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d149:	58                   	pop    eax
c002d14a:	5a                   	pop    edx
c002d14b:	6a 0f                	push   0xf
c002d14d:	6a 00                	push   0x0
c002d14f:	e8 41 f1 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d154:	59                   	pop    ecx
c002d155:	0f b6 c0             	movzx  eax,al
c002d158:	5a                   	pop    edx
c002d159:	b9 10 27 00 00       	mov    ecx,0x2710
c002d15e:	50                   	push   eax
c002d15f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d164:	99                   	cdq    
c002d165:	f7 f9                	idiv   ecx
c002d167:	99                   	cdq    
c002d168:	f7 fb                	idiv   ebx
c002d16a:	8d 42 30             	lea    eax,[edx+0x30]
c002d16d:	0f b6 c0             	movzx  eax,al
c002d170:	50                   	push   eax
c002d171:	e8 0e f1 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d176:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d17c:	59                   	pop    ecx
c002d17d:	58                   	pop    eax
c002d17e:	6a 0f                	push   0xf
c002d180:	6a 00                	push   0x0
c002d182:	e8 0e f1 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d187:	5a                   	pop    edx
c002d188:	0f b6 c0             	movzx  eax,al
c002d18b:	59                   	pop    ecx
c002d18c:	50                   	push   eax
c002d18d:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d192:	99                   	cdq    
c002d193:	f7 fd                	idiv   ebp
c002d195:	99                   	cdq    
c002d196:	f7 fb                	idiv   ebx
c002d198:	8d 42 30             	lea    eax,[edx+0x30]
c002d19b:	0f b6 c0             	movzx  eax,al
c002d19e:	50                   	push   eax
c002d19f:	e8 e0 f0 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d1a4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d1aa:	5d                   	pop    ebp
c002d1ab:	58                   	pop    eax
c002d1ac:	6a 0f                	push   0xf
c002d1ae:	6a 00                	push   0x0
c002d1b0:	e8 e0 f0 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d1b5:	5a                   	pop    edx
c002d1b6:	0f b6 c0             	movzx  eax,al
c002d1b9:	59                   	pop    ecx
c002d1ba:	50                   	push   eax
c002d1bb:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1c0:	99                   	cdq    
c002d1c1:	f7 ff                	idiv   edi
c002d1c3:	99                   	cdq    
c002d1c4:	f7 fb                	idiv   ebx
c002d1c6:	8d 42 30             	lea    eax,[edx+0x30]
c002d1c9:	0f b6 c0             	movzx  eax,al
c002d1cc:	50                   	push   eax
c002d1cd:	e8 b2 f0 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d1d2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d1d8:	5f                   	pop    edi
c002d1d9:	5d                   	pop    ebp
c002d1da:	6a 0f                	push   0xf
c002d1dc:	6a 00                	push   0x0
c002d1de:	e8 b2 f0 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d1e3:	5a                   	pop    edx
c002d1e4:	0f b6 c0             	movzx  eax,al
c002d1e7:	59                   	pop    ecx
c002d1e8:	50                   	push   eax
c002d1e9:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1ee:	99                   	cdq    
c002d1ef:	f7 fb                	idiv   ebx
c002d1f1:	99                   	cdq    
c002d1f2:	f7 fb                	idiv   ebx
c002d1f4:	8d 42 30             	lea    eax,[edx+0x30]
c002d1f7:	0f b6 c0             	movzx  eax,al
c002d1fa:	50                   	push   eax
c002d1fb:	e8 84 f0 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d200:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d206:	5f                   	pop    edi
c002d207:	5d                   	pop    ebp
c002d208:	6a 0f                	push   0xf
c002d20a:	6a 00                	push   0x0
c002d20c:	e8 84 f0 ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d211:	5a                   	pop    edx
c002d212:	0f b6 c0             	movzx  eax,al
c002d215:	59                   	pop    ecx
c002d216:	50                   	push   eax
c002d217:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d21c:	99                   	cdq    
c002d21d:	f7 fb                	idiv   ebx
c002d21f:	83 c2 30             	add    edx,0x30
c002d222:	0f b6 d2             	movzx  edx,dl
c002d225:	52                   	push   edx
c002d226:	e8 59 f0 ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d22b:	83 c4 10             	add    esp,0x10
c002d22e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d234:	eb 05                	jmp    c002d23b <SATA::read(unsigned long long, int, void*)+0x245>
c002d236:	be 01 00 00 00       	mov    esi,0x1
c002d23b:	83 c4 0c             	add    esp,0xc
c002d23e:	89 f0                	mov    eax,esi
c002d240:	5b                   	pop    ebx
c002d241:	5e                   	pop    esi
c002d242:	5f                   	pop    edi
c002d243:	5d                   	pop    ebp
c002d244:	c3                   	ret    
c002d245:	90                   	nop

c002d246 <SATA::write(unsigned long long, int, void*)>:
c002d246:	55                   	push   ebp
c002d247:	b8 04 00 00 00       	mov    eax,0x4
c002d24c:	57                   	push   edi
c002d24d:	56                   	push   esi
c002d24e:	53                   	push   ebx
c002d24f:	83 ec 1c             	sub    esp,0x1c
c002d252:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002d256:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002d25a:	8d 75 ff             	lea    esi,[ebp-0x1]
c002d25d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002d261:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002d265:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d26b:	0f 87 32 02 00 00    	ja     c002d4a3 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d271:	b8 06 00 00 00       	mov    eax,0x6
c002d276:	85 ff                	test   edi,edi
c002d278:	0f 84 25 02 00 00    	je     c002d4a3 <SATA::write(unsigned long long, int, void*)+0x25d>
c002d27e:	89 ee                	mov    esi,ebp
c002d280:	c1 e6 09             	shl    esi,0x9
c002d283:	01 fe                	add    esi,edi
c002d285:	89 c8                	mov    eax,ecx
c002d287:	89 da                	mov    edx,ebx
c002d289:	83 c0 01             	add    eax,0x1
c002d28c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d290:	83 d2 00             	adc    edx,0x0
c002d293:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d297:	50                   	push   eax
c002d298:	50                   	push   eax
c002d299:	6a 01                	push   0x1
c002d29b:	57                   	push   edi
c002d29c:	81 c7 00 02 00 00    	add    edi,0x200
c002d2a2:	6a 01                	push   0x1
c002d2a4:	53                   	push   ebx
c002d2a5:	51                   	push   ecx
c002d2a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002d2aa:	e8 bf fa ff ff       	call   c002cd6e <SATA::access(unsigned long long, int, void*, bool)>
c002d2af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d2b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002d2b7:	83 c4 20             	add    esp,0x20
c002d2ba:	39 f7                	cmp    edi,esi
c002d2bc:	75 c7                	jne    c002d285 <SATA::write(unsigned long long, int, void*)+0x3f>
c002d2be:	bb 0a 00 00 00       	mov    ebx,0xa
c002d2c3:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002d2c9:	bd 10 27 00 00       	mov    ebp,0x2710
c002d2ce:	50                   	push   eax
c002d2cf:	50                   	push   eax
c002d2d0:	6a 0f                	push   0xf
c002d2d2:	6a 00                	push   0x0
c002d2d4:	e8 bc ef ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d2d9:	5a                   	pop    edx
c002d2da:	0f b6 c0             	movzx  eax,al
c002d2dd:	59                   	pop    ecx
c002d2de:	50                   	push   eax
c002d2df:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d2e4:	99                   	cdq    
c002d2e5:	f7 fd                	idiv   ebp
c002d2e7:	99                   	cdq    
c002d2e8:	f7 fb                	idiv   ebx
c002d2ea:	8d 42 30             	lea    eax,[edx+0x30]
c002d2ed:	0f b6 c0             	movzx  eax,al
c002d2f0:	50                   	push   eax
c002d2f1:	e8 8e ef ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d2f6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d2fc:	5e                   	pop    esi
c002d2fd:	5f                   	pop    edi
c002d2fe:	bf e8 03 00 00       	mov    edi,0x3e8
c002d303:	6a 0f                	push   0xf
c002d305:	6a 00                	push   0x0
c002d307:	e8 89 ef ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d30c:	5a                   	pop    edx
c002d30d:	0f b6 c0             	movzx  eax,al
c002d310:	59                   	pop    ecx
c002d311:	50                   	push   eax
c002d312:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d317:	99                   	cdq    
c002d318:	f7 ff                	idiv   edi
c002d31a:	99                   	cdq    
c002d31b:	f7 fb                	idiv   ebx
c002d31d:	8d 42 30             	lea    eax,[edx+0x30]
c002d320:	0f b6 c0             	movzx  eax,al
c002d323:	50                   	push   eax
c002d324:	e8 5b ef ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d329:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d32f:	5e                   	pop    esi
c002d330:	be 64 00 00 00       	mov    esi,0x64
c002d335:	58                   	pop    eax
c002d336:	6a 0f                	push   0xf
c002d338:	6a 00                	push   0x0
c002d33a:	e8 56 ef ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d33f:	5a                   	pop    edx
c002d340:	0f b6 c0             	movzx  eax,al
c002d343:	59                   	pop    ecx
c002d344:	50                   	push   eax
c002d345:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d34a:	99                   	cdq    
c002d34b:	f7 fe                	idiv   esi
c002d34d:	99                   	cdq    
c002d34e:	f7 fb                	idiv   ebx
c002d350:	8d 42 30             	lea    eax,[edx+0x30]
c002d353:	0f b6 c0             	movzx  eax,al
c002d356:	50                   	push   eax
c002d357:	e8 28 ef ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d35c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d362:	58                   	pop    eax
c002d363:	5a                   	pop    edx
c002d364:	6a 0f                	push   0xf
c002d366:	6a 00                	push   0x0
c002d368:	e8 28 ef ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d36d:	59                   	pop    ecx
c002d36e:	0f b6 c0             	movzx  eax,al
c002d371:	5a                   	pop    edx
c002d372:	50                   	push   eax
c002d373:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d378:	99                   	cdq    
c002d379:	f7 fb                	idiv   ebx
c002d37b:	99                   	cdq    
c002d37c:	f7 fb                	idiv   ebx
c002d37e:	8d 42 30             	lea    eax,[edx+0x30]
c002d381:	0f b6 c0             	movzx  eax,al
c002d384:	50                   	push   eax
c002d385:	e8 fa ee ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d38a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d390:	59                   	pop    ecx
c002d391:	58                   	pop    eax
c002d392:	6a 0f                	push   0xf
c002d394:	6a 00                	push   0x0
c002d396:	e8 fa ee ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d39b:	5a                   	pop    edx
c002d39c:	0f b6 c0             	movzx  eax,al
c002d39f:	59                   	pop    ecx
c002d3a0:	50                   	push   eax
c002d3a1:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d3a6:	99                   	cdq    
c002d3a7:	f7 fb                	idiv   ebx
c002d3a9:	83 c2 30             	add    edx,0x30
c002d3ac:	0f b6 d2             	movzx  edx,dl
c002d3af:	52                   	push   edx
c002d3b0:	e8 cf ee ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d3b5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d3bb:	58                   	pop    eax
c002d3bc:	5a                   	pop    edx
c002d3bd:	6a 0f                	push   0xf
c002d3bf:	6a 00                	push   0x0
c002d3c1:	e8 cf ee ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d3c6:	59                   	pop    ecx
c002d3c7:	0f b6 c0             	movzx  eax,al
c002d3ca:	5a                   	pop    edx
c002d3cb:	50                   	push   eax
c002d3cc:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d3d1:	99                   	cdq    
c002d3d2:	f7 fd                	idiv   ebp
c002d3d4:	99                   	cdq    
c002d3d5:	f7 fb                	idiv   ebx
c002d3d7:	8d 42 30             	lea    eax,[edx+0x30]
c002d3da:	0f b6 c0             	movzx  eax,al
c002d3dd:	50                   	push   eax
c002d3de:	e8 a1 ee ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d3e3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d3e9:	59                   	pop    ecx
c002d3ea:	5d                   	pop    ebp
c002d3eb:	6a 0f                	push   0xf
c002d3ed:	6a 00                	push   0x0
c002d3ef:	e8 a1 ee ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d3f4:	5a                   	pop    edx
c002d3f5:	0f b6 c0             	movzx  eax,al
c002d3f8:	59                   	pop    ecx
c002d3f9:	50                   	push   eax
c002d3fa:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d3ff:	99                   	cdq    
c002d400:	f7 ff                	idiv   edi
c002d402:	99                   	cdq    
c002d403:	f7 fb                	idiv   ebx
c002d405:	8d 42 30             	lea    eax,[edx+0x30]
c002d408:	0f b6 c0             	movzx  eax,al
c002d40b:	50                   	push   eax
c002d40c:	e8 73 ee ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d411:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d417:	5f                   	pop    edi
c002d418:	5d                   	pop    ebp
c002d419:	6a 0f                	push   0xf
c002d41b:	6a 00                	push   0x0
c002d41d:	e8 73 ee ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d422:	5a                   	pop    edx
c002d423:	0f b6 c0             	movzx  eax,al
c002d426:	59                   	pop    ecx
c002d427:	50                   	push   eax
c002d428:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d42d:	99                   	cdq    
c002d42e:	f7 fe                	idiv   esi
c002d430:	99                   	cdq    
c002d431:	f7 fb                	idiv   ebx
c002d433:	8d 42 30             	lea    eax,[edx+0x30]
c002d436:	0f b6 c0             	movzx  eax,al
c002d439:	50                   	push   eax
c002d43a:	e8 45 ee ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d43f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d445:	5e                   	pop    esi
c002d446:	5f                   	pop    edi
c002d447:	6a 0f                	push   0xf
c002d449:	6a 00                	push   0x0
c002d44b:	e8 45 ee ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d450:	5d                   	pop    ebp
c002d451:	0f b6 c0             	movzx  eax,al
c002d454:	5a                   	pop    edx
c002d455:	50                   	push   eax
c002d456:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d45b:	99                   	cdq    
c002d45c:	f7 fb                	idiv   ebx
c002d45e:	99                   	cdq    
c002d45f:	f7 fb                	idiv   ebx
c002d461:	8d 42 30             	lea    eax,[edx+0x30]
c002d464:	0f b6 c0             	movzx  eax,al
c002d467:	50                   	push   eax
c002d468:	e8 17 ee ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d46d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d473:	59                   	pop    ecx
c002d474:	5e                   	pop    esi
c002d475:	6a 0f                	push   0xf
c002d477:	6a 00                	push   0x0
c002d479:	e8 17 ee ff ff       	call   c002c295 <combineColours(unsigned char, unsigned char)>
c002d47e:	5f                   	pop    edi
c002d47f:	0f b6 c0             	movzx  eax,al
c002d482:	5d                   	pop    ebp
c002d483:	50                   	push   eax
c002d484:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d489:	99                   	cdq    
c002d48a:	f7 fb                	idiv   ebx
c002d48c:	83 c2 30             	add    edx,0x30
c002d48f:	0f b6 d2             	movzx  edx,dl
c002d492:	52                   	push   edx
c002d493:	e8 ec ed ff ff       	call   c002c284 <combineCharAndColour(char, unsigned char)>
c002d498:	83 c4 10             	add    esp,0x10
c002d49b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d4a1:	31 c0                	xor    eax,eax
c002d4a3:	83 c4 1c             	add    esp,0x1c
c002d4a6:	5b                   	pop    ebx
c002d4a7:	5e                   	pop    esi
c002d4a8:	5f                   	pop    edi
c002d4a9:	5d                   	pop    ebp
c002d4aa:	c3                   	ret    
c002d4ab:	90                   	nop

c002d4ac <SATAPI::write(unsigned long long, int, void*)>:
c002d4ac:	b8 03 00 00 00       	mov    eax,0x3
c002d4b1:	c3                   	ret    

c002d4b2 <SATAPI::close(int, int, void*)>:
c002d4b2:	83 ec 0c             	sub    esp,0xc
c002d4b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d4b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d4bf:	85 c0                	test   eax,eax
c002d4c1:	74 0c                	je     c002d4cf <SATAPI::close(int, int, void*)+0x1d>
c002d4c3:	83 ec 0c             	sub    esp,0xc
c002d4c6:	8b 10                	mov    edx,DWORD PTR [eax]
c002d4c8:	50                   	push   eax
c002d4c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d4cc:	83 c4 10             	add    esp,0x10
c002d4cf:	31 c0                	xor    eax,eax
c002d4d1:	83 c4 0c             	add    esp,0xc
c002d4d4:	c3                   	ret    
c002d4d5:	90                   	nop

c002d4d6 <SATAPI::SATAPI()>:
c002d4d6:	83 ec 0c             	sub    esp,0xc
c002d4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d4dd:	83 ec 04             	sub    esp,0x4
c002d4e0:	68 00 08 00 00       	push   0x800
c002d4e5:	68 24 3c 03 c0       	push   0xc0033c24
c002d4ea:	50                   	push   eax
c002d4eb:	e8 b6 e3 fe ff       	call   c001b8a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d4f0:	83 c4 10             	add    esp,0x10
c002d4f3:	ba 18 3d 03 c0       	mov    edx,0xc0033d18
c002d4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d4fc:	89 10                	mov    DWORD PTR [eax],edx
c002d4fe:	90                   	nop
c002d4ff:	83 c4 0c             	add    esp,0xc
c002d502:	c3                   	ret    
c002d503:	90                   	nop

c002d504 <SATAPI::diskRemoved()>:
c002d504:	c3                   	ret    
c002d505:	90                   	nop

c002d506 <SATAPI::diskInserted()>:
c002d506:	83 ec 18             	sub    esp,0x18
c002d509:	68 30 3c 03 c0       	push   0xc0033c30
c002d50e:	e8 2e bf fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002d513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d517:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d51e:	83 c4 1c             	add    esp,0x1c
c002d521:	c3                   	ret    

c002d522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d522:	55                   	push   ebp
c002d523:	57                   	push   edi
c002d524:	56                   	push   esi
c002d525:	53                   	push   ebx
c002d526:	83 ec 34             	sub    esp,0x34
c002d529:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d52d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d531:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d535:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d539:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d53d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d543:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d549:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d54d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d553:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d557:	83 c0 02             	add    eax,0x2
c002d55a:	c1 e0 07             	shl    eax,0x7
c002d55d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d565:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d569:	c1 e0 07             	shl    eax,0x7
c002d56c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d570:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d574:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d57e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d582:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d588:	e8 cb e4 ff ff       	call   c002ba58 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d58d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d591:	83 c4 10             	add    esp,0x10
c002d594:	b8 01 00 00 00       	mov    eax,0x1
c002d599:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d59e:	0f 84 53 02 00 00    	je     c002d7f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d5a4:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d5aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d5ae:	8b 00                	mov    eax,DWORD PTR [eax]
c002d5b0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d5b6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d5bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d5c0:	c1 e1 05             	shl    ecx,0x5
c002d5c3:	01 c8                	add    eax,ecx
c002d5c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d5c7:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d5cd:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d5d3:	89 08                	mov    DWORD PTR [eax],ecx
c002d5d5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d5db:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d5e1:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d5e7:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d5ea:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d5ed:	50                   	push   eax
c002d5ee:	68 90 00 00 00       	push   0x90
c002d5f3:	6a 00                	push   0x0
c002d5f5:	53                   	push   ebx
c002d5f6:	e8 f5 2e fd ff       	call   c00004f0 <memset>
c002d5fb:	b9 0c 00 00 00       	mov    ecx,0xc
c002d600:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d604:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d606:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d60c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d610:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d616:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d61a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d61e:	48                   	dec    eax
c002d61f:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d624:	89 c1                	mov    ecx,eax
c002d626:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d62c:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d631:	09 c8                	or     eax,ecx
c002d633:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d639:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d63f:	83 c8 80             	or     eax,0xffffff80
c002d642:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d648:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d64b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d64f:	25 00 7f 00 00       	and    eax,0x7f00
c002d654:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d658:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d65d:	66 89 03             	mov    WORD PTR [ebx],ax
c002d660:	89 d0                	mov    eax,edx
c002d662:	c1 ea 18             	shr    edx,0x18
c002d665:	c1 e8 10             	shr    eax,0x10
c002d668:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d66b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d66e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d672:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d675:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d679:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d67c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d680:	83 c4 10             	add    esp,0x10
c002d683:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d687:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d68b:	31 c0                	xor    eax,eax
c002d68d:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d693:	80 e1 88             	and    cl,0x88
c002d696:	74 0a                	je     c002d6a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d698:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d69d:	74 0a                	je     c002d6a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d69f:	40                   	inc    eax
c002d6a0:	eb eb                	jmp    c002d68d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d6a2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d6a7:	75 43                	jne    c002d6ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d6a9:	83 ec 0c             	sub    esp,0xc
c002d6ac:	68 48 3c 03 c0       	push   0xc0033c48
c002d6b1:	e8 8b bd fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002d6b6:	58                   	pop    eax
c002d6b7:	5a                   	pop    edx
c002d6b8:	68 5d 3c 03 c0       	push   0xc0033c5d
c002d6bd:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d6c3:	e8 d8 9e fe ff       	call   c00175a0 <VgaText::puts(char const*)>
c002d6c8:	59                   	pop    ecx
c002d6c9:	5b                   	pop    ebx
c002d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d6ce:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d6d4:	e8 19 e4 ff ff       	call   c002baf2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d6d9:	5e                   	pop    esi
c002d6da:	5f                   	pop    edi
c002d6db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d6df:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d6e5:	e8 e8 e3 ff ff       	call   c002bad2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d6ea:	eb 48                	jmp    c002d734 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d6ec:	be 01 00 00 00       	mov    esi,0x1
c002d6f1:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d6f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d6f9:	d3 e6                	shl    esi,cl
c002d6fb:	c1 e7 07             	shl    edi,0x7
c002d6fe:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d704:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d709:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d70d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d713:	85 c6                	test   esi,eax
c002d715:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d71b:	0f 84 a3 00 00 00    	je     c002d7c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d721:	0f ba e0 1e          	bt     eax,0x1e
c002d725:	73 1a                	jae    c002d741 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d727:	83 ec 0c             	sub    esp,0xc
c002d72a:	68 6f 3c 03 c0       	push   0xc0033c6f
c002d72f:	e8 0d bd fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002d734:	83 c4 10             	add    esp,0x10
c002d737:	b8 01 00 00 00       	mov    eax,0x1
c002d73c:	e9 b6 00 00 00       	jmp    c002d7f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d741:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d747:	83 f8 0d             	cmp    eax,0xd
c002d74a:	77 0a                	ja     c002d756 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d74c:	83 ec 0c             	sub    esp,0xc
c002d74f:	68 c8 00 00 00       	push   0xc8
c002d754:	eb 28                	jmp    c002d77e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d756:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d75c:	83 f8 0d             	cmp    eax,0xd
c002d75f:	77 0a                	ja     c002d76b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d761:	83 ec 0c             	sub    esp,0xc
c002d764:	68 58 02 00 00       	push   0x258
c002d769:	eb 13                	jmp    c002d77e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d76b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d771:	83 f8 06             	cmp    eax,0x6
c002d774:	77 10                	ja     c002d786 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d776:	83 ec 0c             	sub    esp,0xc
c002d779:	68 dc 05 00 00       	push   0x5dc
c002d77e:	e8 c5 7e ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002d783:	83 c4 10             	add    esp,0x10
c002d786:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d78a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d78d:	75 06                	jne    c002d795 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d78f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d793:	74 15                	je     c002d7aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d795:	83 fb 06             	cmp    ebx,0x6
c002d798:	77 10                	ja     c002d7aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d79a:	83 ec 0c             	sub    esp,0xc
c002d79d:	68 c4 09 00 00       	push   0x9c4
c002d7a2:	e8 a1 7e ff ff       	call   c0025648 <milliTenthSleep(unsigned int)>
c002d7a7:	83 c4 10             	add    esp,0x10
c002d7aa:	43                   	inc    ebx
c002d7ab:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d7b1:	0f 85 56 ff ff ff    	jne    c002d70d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d7b7:	83 ec 0c             	sub    esp,0xc
c002d7ba:	68 82 3c 03 c0       	push   0xc0033c82
c002d7bf:	e9 6b ff ff ff       	jmp    c002d72f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d7c4:	0f ba e0 1e          	bt     eax,0x1e
c002d7c8:	73 0d                	jae    c002d7d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d7ca:	83 ec 0c             	sub    esp,0xc
c002d7cd:	68 96 3c 03 c0       	push   0xc0033c96
c002d7d2:	e9 58 ff ff ff       	jmp    c002d72f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d7d7:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d7dc:	74 17                	je     c002d7f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d7de:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d7e3:	74 10                	je     c002d7f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d7e5:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d7eb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d7ef:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d7f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d7f5:	31 c0                	xor    eax,eax
c002d7f7:	83 c4 2c             	add    esp,0x2c
c002d7fa:	5b                   	pop    ebx
c002d7fb:	5e                   	pop    esi
c002d7fc:	5f                   	pop    edi
c002d7fd:	5d                   	pop    ebp
c002d7fe:	c3                   	ret    
c002d7ff:	90                   	nop

c002d800 <SATAPI::eject()>:
c002d800:	57                   	push   edi
c002d801:	b9 03 00 00 00       	mov    ecx,0x3
c002d806:	83 ec 18             	sub    esp,0x18
c002d809:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d80d:	fc                   	cld    
c002d80e:	31 c0                	xor    eax,eax
c002d810:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d812:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d817:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d81c:	50                   	push   eax
c002d81d:	6a 00                	push   0x0
c002d81f:	6a 00                	push   0x0
c002d821:	6a 00                	push   0x0
c002d823:	6a 00                	push   0x0
c002d825:	6a 02                	push   0x2
c002d827:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d82b:	50                   	push   eax
c002d82c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d830:	e8 ed fc ff ff       	call   c002d522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d835:	31 c0                	xor    eax,eax
c002d837:	83 c4 38             	add    esp,0x38
c002d83a:	5f                   	pop    edi
c002d83b:	c3                   	ret    

c002d83c <SATAPI::detectMedia()>:
c002d83c:	53                   	push   ebx
c002d83d:	83 ec 14             	sub    esp,0x14
c002d840:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d844:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d84a:	e8 c9 f9 fe ff       	call   c001d218 <VCache::writeWriteBuffer()>
c002d84f:	59                   	pop    ecx
c002d850:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d856:	e8 ad f9 fe ff       	call   c001d208 <VCache::invalidateReadBuffer()>
c002d85b:	c7 04 24 ab 3c 03 c0 	mov    DWORD PTR [esp],0xc0033cab
c002d862:	e8 da bb fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002d867:	83 c4 10             	add    esp,0x10
c002d86a:	31 c0                	xor    eax,eax
c002d86c:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d873:	85 d2                	test   edx,edx
c002d875:	74 0f                	je     c002d886 <SATAPI::detectMedia()+0x4a>
c002d877:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d87d:	75 07                	jne    c002d886 <SATAPI::detectMedia()+0x4a>
c002d87f:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d886:	40                   	inc    eax
c002d887:	83 f8 1a             	cmp    eax,0x1a
c002d88a:	75 e0                	jne    c002d86c <SATAPI::detectMedia()+0x30>
c002d88c:	83 c4 08             	add    esp,0x8
c002d88f:	5b                   	pop    ebx
c002d890:	c3                   	ret    
c002d891:	90                   	nop

c002d892 <SATAPI::open(int, int, void*)>:
c002d892:	56                   	push   esi
c002d893:	53                   	push   ebx
c002d894:	51                   	push   ecx
c002d895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d899:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d89d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d8a7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d8ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d8b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d8bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d8c5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d8cb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d8d2:	e8 e3 8f fe ff       	call   c00168ba <Phys::allocatePage()>
c002d8d7:	89 c6                	mov    esi,eax
c002d8d9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d8df:	81 c6 00 10 00 00    	add    esi,0x1000
c002d8e5:	e8 d0 8f fe ff       	call   c00168ba <Phys::allocatePage()>
c002d8ea:	39 c6                	cmp    esi,eax
c002d8ec:	74 10                	je     c002d8fe <SATAPI::open(int, int, void*)+0x6c>
c002d8ee:	83 ec 0c             	sub    esp,0xc
c002d8f1:	68 c0 3c 03 c0       	push   0xc0033cc0
c002d8f6:	e8 5f 2b ff ff       	call   c002045a <KePanic(char const*)>
c002d8fb:	83 c4 10             	add    esp,0x10
c002d8fe:	83 ec 0c             	sub    esp,0xc
c002d901:	6a 02                	push   0x2
c002d903:	e8 01 a8 fe ff       	call   c0018109 <Virt::allocateKernelVirtualPages(int)>
c002d908:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d90e:	6a 03                	push   0x3
c002d910:	50                   	push   eax
c002d911:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d917:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d91d:	e8 fa ae fe ff       	call   c001881c <VAS::mapPage(unsigned long, unsigned long, int)>
c002d922:	83 c4 14             	add    esp,0x14
c002d925:	68 78 01 00 00       	push   0x178
c002d92a:	e8 82 8c fe ff       	call   c00165b1 <malloc>
c002d92f:	83 c4 0c             	add    esp,0xc
c002d932:	89 c6                	mov    esi,eax
c002d934:	6a 00                	push   0x0
c002d936:	68 ff ff ff 7f       	push   0x7fffffff
c002d93b:	6a 00                	push   0x0
c002d93d:	6a 00                	push   0x0
c002d93f:	53                   	push   ebx
c002d940:	68 d6 3c 03 c0       	push   0xc0033cd6
c002d945:	50                   	push   eax
c002d946:	e8 2d ed fe ff       	call   c001c678 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d94b:	83 c4 14             	add    esp,0x14
c002d94e:	56                   	push   esi
c002d94f:	e8 e4 ed fe ff       	call   c001c738 <LogicalDisk::assignDriveLetter()>
c002d954:	5a                   	pop    edx
c002d955:	0f be c0             	movsx  eax,al
c002d958:	59                   	pop    ecx
c002d959:	50                   	push   eax
c002d95a:	68 1c 3b 03 c0       	push   0xc0033b1c
c002d95f:	e8 dd ba fe ff       	call   c0019441 <Dbg::kprintf(char const*, ...)>
c002d964:	58                   	pop    eax
c002d965:	5a                   	pop    edx
c002d966:	56                   	push   esi
c002d967:	53                   	push   ebx
c002d968:	e8 55 db fe ff       	call   c001b4c2 <Device::addChild(Device*)>
c002d96d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d973:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d976:	e8 93 df fe ff       	call   c001b90e <PhysicalDisk::startCache()>
c002d97b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d982:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d985:	e8 b2 fe ff ff       	call   c002d83c <SATAPI::detectMedia()>
c002d98a:	83 c4 14             	add    esp,0x14
c002d98d:	31 c0                	xor    eax,eax
c002d98f:	5b                   	pop    ebx
c002d990:	5e                   	pop    esi
c002d991:	c3                   	ret    

c002d992 <SATAPI::read(unsigned long long, int, void*)>:
c002d992:	57                   	push   edi
c002d993:	56                   	push   esi
c002d994:	53                   	push   ebx
c002d995:	83 ec 30             	sub    esp,0x30
c002d998:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d99c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d9a0:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d9a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d9a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d9ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d9b0:	83 fe 04             	cmp    esi,0x4
c002d9b3:	7e 10                	jle    c002d9c5 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d9b5:	83 ec 0c             	sub    esp,0xc
c002d9b8:	68 e4 3c 03 c0       	push   0xc0033ce4
c002d9bd:	e8 98 2a ff ff       	call   c002045a <KePanic(char const*)>
c002d9c2:	83 c4 10             	add    esp,0x10
c002d9c5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d9cb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d9d1:	51                   	push   ecx
c002d9d2:	50                   	push   eax
c002d9d3:	83 c0 02             	add    eax,0x2
c002d9d6:	c1 e0 07             	shl    eax,0x7
c002d9d9:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d9df:	50                   	push   eax
c002d9e0:	52                   	push   edx
c002d9e1:	e8 36 e1 ff ff       	call   c002bb1c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d9e6:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d9ea:	b9 03 00 00 00       	mov    ecx,0x3
c002d9ef:	fc                   	cld    
c002d9f0:	31 c0                	xor    eax,eax
c002d9f2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d9f4:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d9f9:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d9fe:	83 c4 0c             	add    esp,0xc
c002da01:	6a 00                	push   0x0
c002da03:	6a 00                	push   0x0
c002da05:	6a 00                	push   0x0
c002da07:	6a 00                	push   0x0
c002da09:	6a 02                	push   0x2
c002da0b:	8d 44 24 30          	lea    eax,[esp+0x30]
c002da0f:	50                   	push   eax
c002da10:	53                   	push   ebx
c002da11:	e8 0c fb ff ff       	call   c002d522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002da16:	83 c4 20             	add    esp,0x20
c002da19:	85 c0                	test   eax,eax
c002da1b:	75 44                	jne    c002da61 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002da1d:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002da21:	b9 03 00 00 00       	mov    ecx,0x3
c002da26:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002da28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002da2c:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002da31:	0f c8                	bswap  eax
c002da33:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002da37:	89 f0                	mov    eax,esi
c002da39:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002da3d:	50                   	push   eax
c002da3e:	56                   	push   esi
c002da3f:	c1 e6 0b             	shl    esi,0xb
c002da42:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002da46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002da4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002da4e:	56                   	push   esi
c002da4f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002da53:	50                   	push   eax
c002da54:	53                   	push   ebx
c002da55:	e8 c8 fa ff ff       	call   c002d522 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002da5a:	83 c4 20             	add    esp,0x20
c002da5d:	85 c0                	test   eax,eax
c002da5f:	74 14                	je     c002da75 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002da61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002da65:	83 ec 0c             	sub    esp,0xc
c002da68:	53                   	push   ebx
c002da69:	e8 ce fd ff ff       	call   c002d83c <SATAPI::detectMedia()>
c002da6e:	83 c4 10             	add    esp,0x10
c002da71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002da75:	83 c4 30             	add    esp,0x30
c002da78:	5b                   	pop    ebx
c002da79:	5e                   	pop    esi
c002da7a:	5f                   	pop    edi
c002da7b:	c3                   	ret    

c002da7c <IOAPIC::close(int, int, void*)>:
c002da7c:	b8 00 00 00 00       	mov    eax,0x0
c002da81:	c3                   	ret    

c002da82 <apicGetBase()>:
c002da82:	55                   	push   ebp
c002da83:	89 e5                	mov    ebp,esp
c002da85:	83 ec 18             	sub    esp,0x18
c002da88:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002da8d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002da93:	83 e0 08             	and    eax,0x8
c002da96:	0f b6 c0             	movzx  eax,al
c002da99:	85 c0                	test   eax,eax
c002da9b:	75 07                	jne    c002daa4 <apicGetBase()+0x22>
c002da9d:	b8 00 00 00 00       	mov    eax,0x0
c002daa2:	eb 21                	jmp    c002dac5 <apicGetBase()+0x43>
c002daa4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002daa9:	83 ec 08             	sub    esp,0x8
c002daac:	6a 1b                	push   0x1b
c002daae:	50                   	push   eax
c002daaf:	e8 ac 80 fe ff       	call   c0015b60 <Computer::rdmsr(unsigned int)>
c002dab4:	83 c4 10             	add    esp,0x10
c002dab7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002daba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002dabd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dac0:	25 00 00 ff ff       	and    eax,0xffff0000
c002dac5:	c9                   	leave  
c002dac6:	c3                   	ret    
c002dac7:	90                   	nop

c002dac8 <IOAPIC::IOAPIC()>:
c002dac8:	83 ec 0c             	sub    esp,0xc
c002dacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dacf:	83 ec 08             	sub    esp,0x8
c002dad2:	68 48 3d 03 c0       	push   0xc0033d48
c002dad7:	50                   	push   eax
c002dad8:	e8 47 db fe ff       	call   c001b624 <Device::Device(char const*)>
c002dadd:	83 c4 10             	add    esp,0x10
c002dae0:	ba 58 3d 03 c0       	mov    edx,0xc0033d58
c002dae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dae9:	89 10                	mov    DWORD PTR [eax],edx
c002daeb:	90                   	nop
c002daec:	83 c4 0c             	add    esp,0xc
c002daef:	c3                   	ret    

c002daf0 <apicOpen()>:
c002daf0:	55                   	push   ebp
c002daf1:	89 e5                	mov    ebp,esp
c002daf3:	53                   	push   ebx
c002daf4:	83 ec 34             	sub    esp,0x34
c002daf7:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002dafc:	83 f0 01             	xor    eax,0x1
c002daff:	0f b6 c0             	movzx  eax,al
c002db02:	85 c0                	test   eax,eax
c002db04:	0f 84 a3 00 00 00    	je     c002dbad <apicOpen()+0xbd>
c002db0a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002db0e:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002db13:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002db17:	0f b6 c0             	movzx  eax,al
c002db1a:	39 c2                	cmp    edx,eax
c002db1c:	0f 83 84 00 00 00    	jae    c002dba6 <apicOpen()+0xb6>
c002db22:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002db29:	83 ec 0c             	sub    esp,0xc
c002db2c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002db2f:	e8 7d 8a fe ff       	call   c00165b1 <malloc>
c002db34:	83 c4 10             	add    esp,0x10
c002db37:	89 c3                	mov    ebx,eax
c002db39:	83 ec 0c             	sub    esp,0xc
c002db3c:	53                   	push   ebx
c002db3d:	e8 86 ff ff ff       	call   c002dac8 <IOAPIC::IOAPIC()>
c002db42:	83 c4 10             	add    esp,0x10
c002db45:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002db48:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002db4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002db4f:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002db56:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002db5b:	83 c0 01             	add    eax,0x1
c002db5e:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002db63:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002db68:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002db6e:	83 ec 08             	sub    esp,0x8
c002db71:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002db74:	50                   	push   eax
c002db75:	e8 48 d9 fe ff       	call   c001b4c2 <Device::addChild(Device*)>
c002db7a:	83 c4 10             	add    esp,0x10
c002db7d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002db80:	8b 00                	mov    eax,DWORD PTR [eax]
c002db82:	83 c0 08             	add    eax,0x8
c002db85:	8b 00                	mov    eax,DWORD PTR [eax]
c002db87:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002db8b:	6a 00                	push   0x0
c002db8d:	6a 00                	push   0x0
c002db8f:	52                   	push   edx
c002db90:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002db93:	ff d0                	call   eax
c002db95:	83 c4 10             	add    esp,0x10
c002db98:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002db9b:	83 c0 01             	add    eax,0x1
c002db9e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002dba1:	e9 68 ff ff ff       	jmp    c002db0e <apicOpen()+0x1e>
c002dba6:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002dbad:	e8 d0 fe ff ff       	call   c002da82 <apicGetBase()>
c002dbb2:	05 f0 00 00 00       	add    eax,0xf0
c002dbb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dbba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dbbd:	8b 00                	mov    eax,DWORD PTR [eax]
c002dbbf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002dbc2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002dbc9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002dbd0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002dbd3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002dbd6:	89 10                	mov    DWORD PTR [eax],edx
c002dbd8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002dbdf:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002dbe4:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002dbe7:	7d 7c                	jge    c002dc65 <apicOpen()+0x175>
c002dbe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbec:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dbf3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002dbf6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbf9:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc00:	c1 e8 08             	shr    eax,0x8
c002dc03:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002dc07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc0a:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dc11:	c1 e8 18             	shr    eax,0x18
c002dc14:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002dc17:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002dc1b:	3d ff 00 00 00       	cmp    eax,0xff
c002dc20:	75 3a                	jne    c002dc5c <apicOpen()+0x16c>
c002dc22:	e8 5b fe ff ff       	call   c002da82 <apicGetBase()>
c002dc27:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002dc2b:	83 fa 01             	cmp    edx,0x1
c002dc2e:	75 07                	jne    c002dc37 <apicOpen()+0x147>
c002dc30:	ba 60 03 00 00       	mov    edx,0x360
c002dc35:	eb 05                	jmp    c002dc3c <apicOpen()+0x14c>
c002dc37:	ba 50 03 00 00       	mov    edx,0x350
c002dc3c:	01 d0                	add    eax,edx
c002dc3e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dc41:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc44:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc46:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002dc49:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002dc50:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002dc54:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dc57:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002dc5a:	89 10                	mov    DWORD PTR [eax],edx
c002dc5c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002dc60:	e9 7a ff ff ff       	jmp    c002dbdf <apicOpen()+0xef>
c002dc65:	90                   	nop
c002dc66:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dc69:	c9                   	leave  
c002dc6a:	c3                   	ret    
c002dc6b:	90                   	nop

c002dc6c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002dc6c:	55                   	push   ebp
c002dc6d:	89 e5                	mov    ebp,esp
c002dc6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002dc78:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dc7b:	72 1d                	jb     c002dc9a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dc7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc80:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002dc86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc89:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002dc8f:	01 d0                	add    eax,edx
c002dc91:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002dc94:	73 04                	jae    c002dc9a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002dc96:	b0 01                	mov    al,0x1
c002dc98:	eb 02                	jmp    c002dc9c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002dc9a:	b0 00                	mov    al,0x0
c002dc9c:	5d                   	pop    ebp
c002dc9d:	c3                   	ret    

c002dc9e <IOAPIC::read(int)>:
c002dc9e:	55                   	push   ebp
c002dc9f:	89 e5                	mov    ebp,esp
c002dca1:	83 ec 10             	sub    esp,0x10
c002dca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dca7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dcad:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dcb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dcb3:	0f b6 d0             	movzx  edx,al
c002dcb6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dcb9:	89 10                	mov    DWORD PTR [eax],edx
c002dcbb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dcbe:	83 c0 10             	add    eax,0x10
c002dcc1:	8b 00                	mov    eax,DWORD PTR [eax]
c002dcc3:	c9                   	leave  
c002dcc4:	c3                   	ret    
c002dcc5:	90                   	nop

c002dcc6 <IOAPIC::open(int, int, void*)>:
c002dcc6:	55                   	push   ebp
c002dcc7:	89 e5                	mov    ebp,esp
c002dcc9:	57                   	push   edi
c002dcca:	56                   	push   esi
c002dccb:	53                   	push   ebx
c002dccc:	83 ec 04             	sub    esp,0x4
c002dccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dcd2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002dcd5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dcdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dcde:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dce4:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dcee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dcf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dcf7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dcfd:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002dd04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd07:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002dd0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd10:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002dd16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd19:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dd1f:	0f b6 f0             	movzx  esi,al
c002dd22:	89 d0                	mov    eax,edx
c002dd24:	ba 00 00 00 00       	mov    edx,0x0
c002dd29:	89 c7                	mov    edi,eax
c002dd2b:	83 e7 ff             	and    edi,0xffffffff
c002dd2e:	89 f9                	mov    ecx,edi
c002dd30:	0f b6 da             	movzx  ebx,dl
c002dd33:	89 c8                	mov    eax,ecx
c002dd35:	89 da                	mov    edx,ebx
c002dd37:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002dd3a:	8d 5e 08             	lea    ebx,[esi+0x8]
c002dd3d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002dd41:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002dd45:	83 e0 00             	and    eax,0x0
c002dd48:	09 d0                	or     eax,edx
c002dd4a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002dd4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd51:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dd57:	8d 50 01             	lea    edx,[eax+0x1]
c002dd5a:	88 d1                	mov    cl,dl
c002dd5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002dd5f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002dd65:	0f b6 d0             	movzx  edx,al
c002dd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd6b:	83 c2 08             	add    edx,0x8
c002dd6e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002dd72:	0f b6 c9             	movzx  ecx,cl
c002dd75:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002dd7b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002dd7f:	6a 01                	push   0x1
c002dd81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dd84:	e8 15 ff ff ff       	call   c002dc9e <IOAPIC::read(int)>
c002dd89:	83 c4 08             	add    esp,0x8
c002dd8c:	c1 f8 10             	sar    eax,0x10
c002dd8f:	0f b6 c0             	movzx  eax,al
c002dd92:	8d 50 01             	lea    edx,[eax+0x1]
c002dd95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dd98:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dd9e:	b8 00 00 00 00       	mov    eax,0x0
c002dda3:	8d 65 f4             	lea    esp,[ebp-0xc]
c002dda6:	5b                   	pop    ebx
c002dda7:	5e                   	pop    esi
c002dda8:	5f                   	pop    edi
c002dda9:	5d                   	pop    ebp
c002ddaa:	c3                   	ret    
c002ddab:	90                   	nop

c002ddac <IOAPIC::write(int, int)>:
c002ddac:	55                   	push   ebp
c002ddad:	89 e5                	mov    ebp,esp
c002ddaf:	83 ec 10             	sub    esp,0x10
c002ddb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002ddb5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002ddbb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002ddbe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002ddc1:	0f b6 d0             	movzx  edx,al
c002ddc4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002ddc7:	89 10                	mov    DWORD PTR [eax],edx
c002ddc9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002ddcc:	8d 50 10             	lea    edx,[eax+0x10]
c002ddcf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002ddd2:	89 02                	mov    DWORD PTR [edx],eax
c002ddd4:	90                   	nop
c002ddd5:	c9                   	leave  
c002ddd6:	c3                   	ret    
c002ddd7:	90                   	nop

c002ddd8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002ddd8:	55                   	push   ebp
c002ddd9:	89 e5                	mov    ebp,esp
c002dddb:	53                   	push   ebx
c002dddc:	83 ec 2c             	sub    esp,0x2c
c002dddf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dde2:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dde5:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dde8:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002ddeb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002ddee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002ddf1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002ddf4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002ddf7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002ddfa:	88 d8                	mov    al,bl
c002ddfc:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002ddff:	88 c8                	mov    al,cl
c002de01:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002de04:	88 d0                	mov    al,dl
c002de06:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002de09:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002de0d:	83 c0 08             	add    eax,0x8
c002de10:	01 c0                	add    eax,eax
c002de12:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002de15:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002de19:	83 c0 08             	add    eax,0x8
c002de1c:	01 c0                	add    eax,eax
c002de1e:	83 c0 01             	add    eax,0x1
c002de21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002de24:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002de27:	50                   	push   eax
c002de28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002de2b:	e8 6e fe ff ff       	call   c002dc9e <IOAPIC::read(int)>
c002de30:	83 c4 08             	add    esp,0x8
c002de33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002de36:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002de3d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002de40:	c1 e0 18             	shl    eax,0x18
c002de43:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002de46:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002de49:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002de4c:	52                   	push   edx
c002de4d:	50                   	push   eax
c002de4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002de51:	e8 56 ff ff ff       	call   c002ddac <IOAPIC::write(int, int)>
c002de56:	83 c4 0c             	add    esp,0xc
c002de59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002de5c:	50                   	push   eax
c002de5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002de60:	e8 39 fe ff ff       	call   c002dc9e <IOAPIC::read(int)>
c002de65:	83 c4 08             	add    esp,0x8
c002de68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002de6b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002de72:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002de79:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002de80:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002de84:	85 c0                	test   eax,eax
c002de86:	74 09                	je     c002de91 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002de88:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002de8f:	eb 07                	jmp    c002de98 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002de91:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002de98:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002de9c:	85 c0                	test   eax,eax
c002de9e:	74 09                	je     c002dea9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dea0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dea7:	eb 07                	jmp    c002deb0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dea9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002deb0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002deb7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002debb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002debe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dec1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dec4:	52                   	push   edx
c002dec5:	50                   	push   eax
c002dec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dec9:	e8 de fe ff ff       	call   c002ddac <IOAPIC::write(int, int)>
c002dece:	83 c4 0c             	add    esp,0xc
c002ded1:	90                   	nop
c002ded2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002ded5:	c9                   	leave  
c002ded6:	c3                   	ret    
c002ded7:	90                   	nop

c002ded8 <APICTimer::close(int, int, void*)>:
c002ded8:	b8 00 00 00 00       	mov    eax,0x0
c002dedd:	c3                   	ret    
c002dede:	66 90                	xchg   ax,ax

c002dee0 <apicTimerHandler(regs*, void*)>:
c002dee0:	83 ec 0c             	sub    esp,0xc
c002dee3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dee7:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dee9:	b8 10 27 00 00       	mov    eax,0x2710
c002deee:	ba 00 00 00 00       	mov    edx,0x0
c002def3:	f7 f1                	div    ecx
c002def5:	83 ec 0c             	sub    esp,0xc
c002def8:	50                   	push   eax
c002def9:	e8 36 f0 fe ff       	call   c001cf34 <timerHandler(unsigned int)>
c002defe:	83 c4 10             	add    esp,0x10
c002df01:	90                   	nop
c002df02:	83 c4 0c             	add    esp,0xc
c002df05:	c3                   	ret    
c002df06:	66 90                	xchg   ax,ax

c002df08 <APICTimer::open(int, int, void*)>:
c002df08:	83 ec 0c             	sub    esp,0xc
c002df0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df0f:	8b 00                	mov    eax,DWORD PTR [eax]
c002df11:	83 c0 24             	add    eax,0x24
c002df14:	8b 00                	mov    eax,DWORD PTR [eax]
c002df16:	83 ec 08             	sub    esp,0x8
c002df19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df21:	ff d0                	call   eax
c002df23:	83 c4 10             	add    esp,0x10
c002df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002df2e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002df34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df3c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002df42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002df46:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002df4c:	83 ec 0c             	sub    esp,0xc
c002df4f:	51                   	push   ecx
c002df50:	6a 01                	push   0x1
c002df52:	68 e0 de 02 c0       	push   0xc002dee0
c002df57:	52                   	push   edx
c002df58:	50                   	push   eax
c002df59:	e8 10 d5 fe ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002df5e:	83 c4 20             	add    esp,0x20
c002df61:	89 c2                	mov    edx,eax
c002df63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df67:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002df6d:	b8 00 00 00 00       	mov    eax,0x0
c002df72:	83 c4 0c             	add    esp,0xc
c002df75:	c3                   	ret    
c002df76:	66 90                	xchg   ax,ax

c002df78 <APICTimer::write(int)>:
c002df78:	83 ec 0c             	sub    esp,0xc
c002df7b:	83 ec 0c             	sub    esp,0xc
c002df7e:	68 7c 3d 03 c0       	push   0xc0033d7c
c002df83:	e8 d2 24 ff ff       	call   c002045a <KePanic(char const*)>
c002df88:	83 c4 10             	add    esp,0x10
c002df8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df8f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002df93:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002df99:	90                   	nop
c002df9a:	83 c4 0c             	add    esp,0xc
c002df9d:	c3                   	ret    
c002df9e:	66 90                	xchg   ax,ax

c002dfa0 <APICTimer::APICTimer()>:
c002dfa0:	83 ec 0c             	sub    esp,0xc
c002dfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfa7:	83 ec 08             	sub    esp,0x8
c002dfaa:	68 8c 3d 03 c0       	push   0xc0033d8c
c002dfaf:	50                   	push   eax
c002dfb0:	e8 b3 ee fe ff       	call   c001ce68 <Timer::Timer(char const*)>
c002dfb5:	83 c4 10             	add    esp,0x10
c002dfb8:	ba a0 3d 03 c0       	mov    edx,0xc0033da0
c002dfbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfc1:	89 10                	mov    DWORD PTR [eax],edx
c002dfc3:	90                   	nop
c002dfc4:	83 c4 0c             	add    esp,0xc
c002dfc7:	c3                   	ret    

c002dfc8 <PIT::write(int)>:
c002dfc8:	83 ec 10             	sub    esp,0x10
c002dfcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dfcf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dfd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dfd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002dfdd:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002dfe2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002dfe7:	89 c2                	mov    edx,eax
c002dfe9:	c1 fa 1f             	sar    edx,0x1f
c002dfec:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002dff0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dff4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dffb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002e000:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002e004:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002e009:	ee                   	out    dx,al
c002e00a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e00e:	0f b6 c0             	movzx  eax,al
c002e011:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002e018:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002e01c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002e020:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002e025:	ee                   	out    dx,al
c002e026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e02a:	c1 f8 08             	sar    eax,0x8
c002e02d:	0f b6 c0             	movzx  eax,al
c002e030:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002e037:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002e03b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002e03f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002e044:	ee                   	out    dx,al
c002e045:	90                   	nop
c002e046:	83 c4 10             	add    esp,0x10
c002e049:	c3                   	ret    
c002e04a:	66 90                	xchg   ax,ax

c002e04c <pitHandler(regs*, void*)>:
c002e04c:	83 ec 0c             	sub    esp,0xc
c002e04f:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002e055:	b8 10 27 00 00       	mov    eax,0x2710
c002e05a:	89 c2                	mov    edx,eax
c002e05c:	c1 fa 1f             	sar    edx,0x1f
c002e05f:	f7 f9                	idiv   ecx
c002e061:	83 ec 0c             	sub    esp,0xc
c002e064:	50                   	push   eax
c002e065:	e8 ca ee fe ff       	call   c001cf34 <timerHandler(unsigned int)>
c002e06a:	83 c4 10             	add    esp,0x10
c002e06d:	90                   	nop
c002e06e:	83 c4 0c             	add    esp,0xc
c002e071:	c3                   	ret    
c002e072:	66 90                	xchg   ax,ax

c002e074 <PIT::open(int, int, void*)>:
c002e074:	83 ec 0c             	sub    esp,0xc
c002e077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e07b:	8b 00                	mov    eax,DWORD PTR [eax]
c002e07d:	83 c0 24             	add    eax,0x24
c002e080:	8b 00                	mov    eax,DWORD PTR [eax]
c002e082:	83 ec 08             	sub    esp,0x8
c002e085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e08d:	ff d0                	call   eax
c002e08f:	83 c4 10             	add    esp,0x10
c002e092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e096:	83 ec 0c             	sub    esp,0xc
c002e099:	6a 00                	push   0x0
c002e09b:	6a 01                	push   0x1
c002e09d:	68 4c e0 02 c0       	push   0xc002e04c
c002e0a2:	6a 00                	push   0x0
c002e0a4:	50                   	push   eax
c002e0a5:	e8 c4 d3 fe ff       	call   c001b46e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002e0aa:	83 c4 20             	add    esp,0x20
c002e0ad:	89 c2                	mov    edx,eax
c002e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0b3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002e0b9:	b8 00 00 00 00       	mov    eax,0x0
c002e0be:	83 c4 0c             	add    esp,0xc
c002e0c1:	c3                   	ret    
c002e0c2:	66 90                	xchg   ax,ax

c002e0c4 <PIT::close(int, int, void*)>:
c002e0c4:	83 ec 0c             	sub    esp,0xc
c002e0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0cb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002e0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0d9:	6a 01                	push   0x1
c002e0db:	68 4c e0 02 c0       	push   0xc002e04c
c002e0e0:	6a 00                	push   0x0
c002e0e2:	50                   	push   eax
c002e0e3:	e8 bc d3 fe ff       	call   c001b4a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002e0e8:	83 c4 10             	add    esp,0x10
c002e0eb:	b8 00 00 00 00       	mov    eax,0x0
c002e0f0:	83 c4 0c             	add    esp,0xc
c002e0f3:	c3                   	ret    

c002e0f4 <PIT::PIT()>:
c002e0f4:	83 ec 0c             	sub    esp,0xc
c002e0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e0fb:	83 ec 08             	sub    esp,0x8
c002e0fe:	68 c8 3d 03 c0       	push   0xc0033dc8
c002e103:	50                   	push   eax
c002e104:	e8 5f ed fe ff       	call   c001ce68 <Timer::Timer(char const*)>
c002e109:	83 c4 10             	add    esp,0x10
c002e10c:	ba f0 3d 03 c0       	mov    edx,0xc0033df0
c002e111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e115:	89 10                	mov    DWORD PTR [eax],edx
c002e117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e11b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e121:	0f b6 d0             	movzx  edx,al
c002e124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e128:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002e12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e133:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e139:	0f b6 d0             	movzx  edx,al
c002e13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e140:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e149:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e14f:	8d 50 01             	lea    edx,[eax+0x1]
c002e152:	88 d1                	mov    cl,dl
c002e154:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e158:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e15e:	0f b6 d0             	movzx  edx,al
c002e161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e165:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e169:	83 e1 3f             	and    ecx,0x3f
c002e16c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e170:	90                   	nop
c002e171:	83 c4 0c             	add    esp,0xc
c002e174:	c3                   	ret    
c002e175:	66 90                	xchg   ax,ax
c002e177:	66 90                	xchg   ax,ax
c002e179:	66 90                	xchg   ax,ax
c002e17b:	66 90                	xchg   ax,ax
c002e17d:	66 90                	xchg   ax,ax
c002e17f:	90                   	nop

c002e180 <avxDetect>:
c002e180:	b8 01 00 00 00       	mov    eax,0x1
c002e185:	0f a2                	cpuid  
c002e187:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e18d:	74 15                	je     c002e1a4 <avxDetect.noAVX>
c002e18f:	b8 01 00 00 00       	mov    eax,0x1
c002e194:	0f a2                	cpuid  
c002e196:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e19c:	74 06                	je     c002e1a4 <avxDetect.noAVX>
c002e19e:	b8 01 00 00 00       	mov    eax,0x1
c002e1a3:	c3                   	ret    

c002e1a4 <avxDetect.noAVX>:
c002e1a4:	b8 00 00 00 00       	mov    eax,0x0
c002e1a9:	c3                   	ret    

c002e1aa <avxSave>:
c002e1aa:	53                   	push   ebx
c002e1ab:	52                   	push   edx
c002e1ac:	31 c0                	xor    eax,eax
c002e1ae:	48                   	dec    eax
c002e1af:	89 c2                	mov    edx,eax
c002e1b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e1b5:	0f ae 23             	xsave  [ebx]
c002e1b8:	5a                   	pop    edx
c002e1b9:	5b                   	pop    ebx
c002e1ba:	c3                   	ret    

c002e1bb <avxLoad>:
c002e1bb:	53                   	push   ebx
c002e1bc:	52                   	push   edx
c002e1bd:	31 c0                	xor    eax,eax
c002e1bf:	48                   	dec    eax
c002e1c0:	89 c2                	mov    edx,eax
c002e1c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e1c6:	0f ae 2b             	xrstor [ebx]
c002e1c9:	5a                   	pop    edx
c002e1ca:	5b                   	pop    ebx
c002e1cb:	c3                   	ret    

c002e1cc <avxInit>:
c002e1cc:	e8 47 03 00 00       	call   c002e518 <sseInit>
c002e1d1:	50                   	push   eax
c002e1d2:	51                   	push   ecx
c002e1d3:	0f 20 e0             	mov    eax,cr4
c002e1d6:	0d 00 00 04 00       	or     eax,0x40000
c002e1db:	0f 22 e0             	mov    cr4,eax
c002e1de:	31 c9                	xor    ecx,ecx
c002e1e0:	0f 01 d0             	xgetbv 
c002e1e3:	0d 07 00 00 00       	or     eax,0x7
c002e1e8:	0f 01 d1             	xsetbv 
c002e1eb:	59                   	pop    ecx
c002e1ec:	58                   	pop    eax
c002e1ed:	c3                   	ret    

c002e1ee <avxClose>:
c002e1ee:	c3                   	ret    
c002e1ef:	90                   	nop

c002e1f0 <isr0>:
c002e1f0:	fa                   	cli    
c002e1f1:	68 00 00 00 00       	push   0x0
c002e1f6:	68 00 00 00 00       	push   0x0
c002e1fb:	e9 56 01 00 00       	jmp    c002e356 <int_common_stub>

c002e200 <isr1>:
c002e200:	fa                   	cli    
c002e201:	6a 00                	push   0x0
c002e203:	6a 01                	push   0x1
c002e205:	e9 4c 01 00 00       	jmp    c002e356 <int_common_stub>

c002e20a <isr2>:
c002e20a:	fa                   	cli    
c002e20b:	6a 00                	push   0x0
c002e20d:	6a 02                	push   0x2
c002e20f:	e9 42 01 00 00       	jmp    c002e356 <int_common_stub>

c002e214 <isr3>:
c002e214:	fa                   	cli    
c002e215:	6a 00                	push   0x0
c002e217:	6a 03                	push   0x3
c002e219:	e9 38 01 00 00       	jmp    c002e356 <int_common_stub>

c002e21e <isr4>:
c002e21e:	fa                   	cli    
c002e21f:	6a 00                	push   0x0
c002e221:	6a 04                	push   0x4
c002e223:	e9 2e 01 00 00       	jmp    c002e356 <int_common_stub>

c002e228 <isr5>:
c002e228:	fa                   	cli    
c002e229:	6a 00                	push   0x0
c002e22b:	6a 05                	push   0x5
c002e22d:	e9 24 01 00 00       	jmp    c002e356 <int_common_stub>

c002e232 <isr6>:
c002e232:	fa                   	cli    
c002e233:	6a 00                	push   0x0
c002e235:	6a 06                	push   0x6
c002e237:	e9 1a 01 00 00       	jmp    c002e356 <int_common_stub>

c002e23c <isr7>:
c002e23c:	fa                   	cli    
c002e23d:	6a 00                	push   0x0
c002e23f:	6a 07                	push   0x7
c002e241:	e9 10 01 00 00       	jmp    c002e356 <int_common_stub>

c002e246 <isr8>:
c002e246:	fa                   	cli    
c002e247:	6a 08                	push   0x8
c002e249:	e9 08 01 00 00       	jmp    c002e356 <int_common_stub>

c002e24e <isr9>:
c002e24e:	fa                   	cli    
c002e24f:	6a 00                	push   0x0
c002e251:	6a 09                	push   0x9
c002e253:	e9 fe 00 00 00       	jmp    c002e356 <int_common_stub>

c002e258 <isr10>:
c002e258:	fa                   	cli    
c002e259:	6a 0a                	push   0xa
c002e25b:	e9 f6 00 00 00       	jmp    c002e356 <int_common_stub>

c002e260 <isr11>:
c002e260:	fa                   	cli    
c002e261:	6a 0b                	push   0xb
c002e263:	e9 ee 00 00 00       	jmp    c002e356 <int_common_stub>

c002e268 <isr12>:
c002e268:	fa                   	cli    
c002e269:	6a 0c                	push   0xc
c002e26b:	e9 e6 00 00 00       	jmp    c002e356 <int_common_stub>

c002e270 <isr13>:
c002e270:	fa                   	cli    
c002e271:	6a 0d                	push   0xd
c002e273:	53                   	push   ebx
c002e274:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e278:	81 fb 46 e4 02 c0    	cmp    ebx,0xc002e446
c002e27e:	5b                   	pop    ebx
c002e27f:	0f 84 c3 01 00 00    	je     c002e448 <finishSignal2>
c002e285:	e9 cc 00 00 00       	jmp    c002e356 <int_common_stub>

c002e28a <isr14>:
c002e28a:	fa                   	cli    
c002e28b:	6a 0e                	push   0xe
c002e28d:	e9 c4 00 00 00       	jmp    c002e356 <int_common_stub>

c002e292 <isr15>:
c002e292:	fa                   	cli    
c002e293:	6a 00                	push   0x0
c002e295:	6a 0f                	push   0xf
c002e297:	e9 ba 00 00 00       	jmp    c002e356 <int_common_stub>

c002e29c <isr16>:
c002e29c:	fa                   	cli    
c002e29d:	6a 00                	push   0x0
c002e29f:	6a 10                	push   0x10
c002e2a1:	e9 b0 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2a6 <isr17>:
c002e2a6:	fa                   	cli    
c002e2a7:	6a 00                	push   0x0
c002e2a9:	6a 11                	push   0x11
c002e2ab:	e9 a6 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2b0 <isr18>:
c002e2b0:	fa                   	cli    
c002e2b1:	6a 00                	push   0x0
c002e2b3:	6a 12                	push   0x12
c002e2b5:	e9 9c 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2ba <irq3>:
c002e2ba:	fa                   	cli    
c002e2bb:	6a 00                	push   0x0
c002e2bd:	6a 23                	push   0x23
c002e2bf:	e9 92 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2c4 <irq4>:
c002e2c4:	fa                   	cli    
c002e2c5:	6a 00                	push   0x0
c002e2c7:	6a 24                	push   0x24
c002e2c9:	e9 88 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2ce <irq5>:
c002e2ce:	fa                   	cli    
c002e2cf:	6a 00                	push   0x0
c002e2d1:	6a 25                	push   0x25
c002e2d3:	e9 7e 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2d8 <irq6>:
c002e2d8:	fa                   	cli    
c002e2d9:	6a 00                	push   0x0
c002e2db:	6a 26                	push   0x26
c002e2dd:	e9 74 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2e2 <irq7>:
c002e2e2:	fa                   	cli    
c002e2e3:	6a 00                	push   0x0
c002e2e5:	6a 27                	push   0x27
c002e2e7:	e9 6a 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2ec <irq8>:
c002e2ec:	fa                   	cli    
c002e2ed:	6a 00                	push   0x0
c002e2ef:	6a 28                	push   0x28
c002e2f1:	e9 60 00 00 00       	jmp    c002e356 <int_common_stub>

c002e2f6 <irq9>:
c002e2f6:	fa                   	cli    
c002e2f7:	6a 00                	push   0x0
c002e2f9:	6a 29                	push   0x29
c002e2fb:	e9 56 00 00 00       	jmp    c002e356 <int_common_stub>

c002e300 <irq10>:
c002e300:	fa                   	cli    
c002e301:	6a 00                	push   0x0
c002e303:	6a 2a                	push   0x2a
c002e305:	e9 4c 00 00 00       	jmp    c002e356 <int_common_stub>

c002e30a <irq11>:
c002e30a:	fa                   	cli    
c002e30b:	6a 00                	push   0x0
c002e30d:	6a 2b                	push   0x2b
c002e30f:	e9 42 00 00 00       	jmp    c002e356 <int_common_stub>

c002e314 <irq12>:
c002e314:	fa                   	cli    
c002e315:	6a 00                	push   0x0
c002e317:	6a 2c                	push   0x2c
c002e319:	e9 38 00 00 00       	jmp    c002e356 <int_common_stub>

c002e31e <irq13>:
c002e31e:	fa                   	cli    
c002e31f:	6a 00                	push   0x0
c002e321:	6a 2d                	push   0x2d
c002e323:	e9 2e 00 00 00       	jmp    c002e356 <int_common_stub>

c002e328 <irq14>:
c002e328:	fa                   	cli    
c002e329:	6a 00                	push   0x0
c002e32b:	6a 2e                	push   0x2e
c002e32d:	e9 24 00 00 00       	jmp    c002e356 <int_common_stub>

c002e332 <irq15>:
c002e332:	fa                   	cli    
c002e333:	6a 00                	push   0x0
c002e335:	6a 2f                	push   0x2f
c002e337:	e9 1a 00 00 00       	jmp    c002e356 <int_common_stub>

c002e33c <irq1>:
c002e33c:	fa                   	cli    
c002e33d:	6a 00                	push   0x0
c002e33f:	6a 21                	push   0x21
c002e341:	eb 13                	jmp    c002e356 <int_common_stub>

c002e343 <irq2>:
c002e343:	fa                   	cli    
c002e344:	6a 00                	push   0x0
c002e346:	6a 22                	push   0x22
c002e348:	eb 0c                	jmp    c002e356 <int_common_stub>

c002e34a <isr96>:
c002e34a:	6a 00                	push   0x0
c002e34c:	6a 60                	push   0x60
c002e34e:	fb                   	sti    
c002e34f:	eb 37                	jmp    c002e388 <syscall_common_stub>

c002e351 <irq0>:
c002e351:	fa                   	cli    
c002e352:	6a 00                	push   0x0
c002e354:	6a 20                	push   0x20

c002e356 <int_common_stub>:
c002e356:	60                   	pusha  
c002e357:	1e                   	push   ds
c002e358:	06                   	push   es
c002e359:	0f a0                	push   fs
c002e35b:	0f a8                	push   gs
c002e35d:	66 b8 10 00          	mov    ax,0x10
c002e361:	66 8e d8             	mov    ds,ax
c002e364:	66 8e c0             	mov    es,ax
c002e367:	66 8e e0             	mov    fs,ax
c002e36a:	66 8e e8             	mov    gs,ax
c002e36d:	54                   	push   esp
c002e36e:	fc                   	cld    
c002e36f:	e8 10 d6 fe ff       	call   c001b984 <int_handler>
c002e374:	81 c4 04 00 00 00    	add    esp,0x4
c002e37a:	0f a9                	pop    gs
c002e37c:	0f a1                	pop    fs
c002e37e:	07                   	pop    es
c002e37f:	1f                   	pop    ds
c002e380:	61                   	popa   
c002e381:	81 c4 08 00 00 00    	add    esp,0x8
c002e387:	cf                   	iret   

c002e388 <syscall_common_stub>:
c002e388:	60                   	pusha  
c002e389:	1e                   	push   ds
c002e38a:	06                   	push   es
c002e38b:	0f a0                	push   fs
c002e38d:	0f a8                	push   gs
c002e38f:	66 b8 10 00          	mov    ax,0x10
c002e393:	66 8e d8             	mov    ds,ax
c002e396:	66 8e c0             	mov    es,ax
c002e399:	66 8e e0             	mov    fs,ax
c002e39c:	66 8e e8             	mov    gs,ax
c002e39f:	54                   	push   esp
c002e3a0:	fc                   	cld    
c002e3a1:	e8 de d5 fe ff       	call   c001b984 <int_handler>
c002e3a6:	81 c4 04 00 00 00    	add    esp,0x4
c002e3ac:	0f a9                	pop    gs
c002e3ae:	0f a1                	pop    fs
c002e3b0:	07                   	pop    es
c002e3b1:	1f                   	pop    ds
c002e3b2:	e8 d0 2a ff ff       	call   c0020e87 <KiCheckSignalZ>
c002e3b7:	3d 00 00 00 00       	cmp    eax,0x0
c002e3bc:	0f 84 c0 00 00 00    	je     c002e482 <skipSignals>
c002e3c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e3c7:	61                   	popa   
c002e3c8:	53                   	push   ebx
c002e3c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e3cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e3d2:	5b                   	pop    ebx
c002e3d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e3d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e3db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e3de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e3e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e3e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e3e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e3ea:	81 c4 08 00 00 00    	add    esp,0x8
c002e3f0:	5e                   	pop    esi
c002e3f1:	5b                   	pop    ebx
c002e3f2:	59                   	pop    ecx
c002e3f3:	5a                   	pop    edx
c002e3f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e3f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e3fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e3fd:	52                   	push   edx
c002e3fe:	51                   	push   ecx
c002e3ff:	53                   	push   ebx
c002e400:	56                   	push   esi
c002e401:	81 ec 08 00 00 00    	sub    esp,0x8
c002e407:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e40a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e40d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e410:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e413:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e416:	60                   	pusha  
c002e417:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e41d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e420:	89 e3                	mov    ebx,esp
c002e422:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e425:	52                   	push   edx
c002e426:	68 46 e4 02 c0       	push   0xc002e446
c002e42b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e42e:	89 dc                	mov    esp,ebx
c002e430:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e433:	68 23 00 00 00       	push   0x23
c002e438:	51                   	push   ecx
c002e439:	68 02 02 00 00       	push   0x202
c002e43e:	68 1b 00 00 00       	push   0x1b
c002e443:	ff 36                	push   DWORD PTR [esi]
c002e445:	cf                   	iret   

c002e446 <finishSignal>:
c002e446:	cd 0f                	int    0xf

c002e448 <finishSignal2>:
c002e448:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e44e:	e8 b1 2a ff ff       	call   c0020f04 <KiFinishSignalZ>
c002e453:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e459:	68 23 00 00 00       	push   0x23
c002e45e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e461:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e464:	68 1b 00 00 00       	push   0x1b
c002e469:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e46c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e46f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e472:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e475:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e478:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e47b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e47e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e481:	cf                   	iret   

c002e482 <skipSignals>:
c002e482:	61                   	popa   
c002e483:	81 c4 08 00 00 00    	add    esp,0x8
c002e489:	cf                   	iret   
c002e48a:	90                   	nop
c002e48b:	90                   	nop

c002e48c <irq16>:
c002e48c:	fa                   	cli    
c002e48d:	6a 00                	push   0x0
c002e48f:	6a 30                	push   0x30
c002e491:	e9 c0 fe ff ff       	jmp    c002e356 <int_common_stub>

c002e496 <irq17>:
c002e496:	fa                   	cli    
c002e497:	6a 00                	push   0x0
c002e499:	6a 31                	push   0x31
c002e49b:	e9 b6 fe ff ff       	jmp    c002e356 <int_common_stub>

c002e4a0 <irq18>:
c002e4a0:	fa                   	cli    
c002e4a1:	6a 00                	push   0x0
c002e4a3:	6a 32                	push   0x32
c002e4a5:	e9 ac fe ff ff       	jmp    c002e356 <int_common_stub>

c002e4aa <irq19>:
c002e4aa:	fa                   	cli    
c002e4ab:	6a 00                	push   0x0
c002e4ad:	6a 33                	push   0x33
c002e4af:	e9 a2 fe ff ff       	jmp    c002e356 <int_common_stub>

c002e4b4 <irq20>:
c002e4b4:	fa                   	cli    
c002e4b5:	6a 00                	push   0x0
c002e4b7:	6a 34                	push   0x34
c002e4b9:	e9 98 fe ff ff       	jmp    c002e356 <int_common_stub>

c002e4be <irq21>:
c002e4be:	fa                   	cli    
c002e4bf:	6a 00                	push   0x0
c002e4c1:	6a 35                	push   0x35
c002e4c3:	e9 8e fe ff ff       	jmp    c002e356 <int_common_stub>

c002e4c8 <irq22>:
c002e4c8:	fa                   	cli    
c002e4c9:	6a 00                	push   0x0
c002e4cb:	6a 36                	push   0x36
c002e4cd:	e9 84 fe ff ff       	jmp    c002e356 <int_common_stub>

c002e4d2 <irq23>:
c002e4d2:	fa                   	cli    
c002e4d3:	6a 00                	push   0x0
c002e4d5:	6a 37                	push   0x37
c002e4d7:	e9 7a fe ff ff       	jmp    c002e356 <int_common_stub>
c002e4dc:	66 90                	xchg   ax,ax
c002e4de:	66 90                	xchg   ax,ax

c002e4e0 <i386GetRDRAND>:
c002e4e0:	b9 64 00 00 00       	mov    ecx,0x64

c002e4e5 <retry>:
c002e4e5:	0f c7 f0             	rdrand eax
c002e4e8:	72 05                	jb     c002e4ef <retry.done>
c002e4ea:	e2 f9                	loop   c002e4e5 <retry>

c002e4ec <retry.fail>:
c002e4ec:	31 c0                	xor    eax,eax
c002e4ee:	c3                   	ret    

c002e4ef <retry.done>:
c002e4ef:	c3                   	ret    

c002e4f0 <sseDetect>:
c002e4f0:	b8 01 00 00 00       	mov    eax,0x1
c002e4f5:	0f a2                	cpuid  
c002e4f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e4fd:	74 06                	je     c002e505 <sseDetect.noSSE>
c002e4ff:	b8 01 00 00 00       	mov    eax,0x1
c002e504:	c3                   	ret    

c002e505 <sseDetect.noSSE>:
c002e505:	31 c0                	xor    eax,eax
c002e507:	c3                   	ret    

c002e508 <sseSave>:
c002e508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e50c:	0f ae 00             	fxsave [eax]
c002e50f:	c3                   	ret    

c002e510 <sseLoad>:
c002e510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e514:	0f ae 08             	fxrstor [eax]
c002e517:	c3                   	ret    

c002e518 <sseInit>:
c002e518:	e8 42 00 00 00       	call   c002e55f <x87Init>
c002e51d:	0f 20 e0             	mov    eax,cr4
c002e520:	66 0d 00 06          	or     ax,0x600
c002e524:	0f 22 e0             	mov    cr4,eax
c002e527:	c3                   	ret    

c002e528 <sseClose>:
c002e528:	c3                   	ret    
c002e529:	66 90                	xchg   ax,ax
c002e52b:	66 90                	xchg   ax,ax
c002e52d:	66 90                	xchg   ax,ax
c002e52f:	90                   	nop

c002e530 <value_37F>:
c002e530:	7f 03                	jg     c002e535 <value_37A+0x1>

c002e532 <value_37E>:
c002e532:	7e 03                	jle    c002e537 <x87Detect+0x1>

c002e534 <value_37A>:
c002e534:	7a 03                	jp     c002e539 <x87Detect+0x3>

c002e536 <x87Detect>:
c002e536:	b8 01 00 00 00       	mov    eax,0x1
c002e53b:	0f a2                	cpuid  
c002e53d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e543:	74 06                	je     c002e54b <x87Detect.nox87>
c002e545:	b8 01 00 00 00       	mov    eax,0x1
c002e54a:	c3                   	ret    

c002e54b <x87Detect.nox87>:
c002e54b:	b8 00 00 00 00       	mov    eax,0x0
c002e550:	c3                   	ret    

c002e551 <x87Save>:
c002e551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e555:	dd 30                	fnsave [eax]
c002e557:	c3                   	ret    

c002e558 <x87Load>:
c002e558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e55c:	dd 20                	frstor [eax]
c002e55e:	c3                   	ret    

c002e55f <x87Init>:
c002e55f:	0f 20 c0             	mov    eax,cr0
c002e562:	66 25 fb ff          	and    ax,0xfffb
c002e566:	66 0d 22 00          	or     ax,0x22
c002e56a:	0f 22 c0             	mov    cr0,eax
c002e56d:	db e3                	fninit 
c002e56f:	0f 06                	clts   
c002e571:	d9 2d 34 e5 02 c0    	fldcw  WORD PTR ds:0xc002e534
c002e577:	c3                   	ret    

c002e578 <x87Close>:
c002e578:	c3                   	ret    
c002e579:	66 90                	xchg   ax,ax
c002e57b:	90                   	nop

c002e57c <__do_global_ctors_aux>:
c002e57c:	a1 30 f5 02 c0       	mov    eax,ds:0xc002f530
c002e581:	83 f8 ff             	cmp    eax,0xffffffff
c002e584:	74 1a                	je     c002e5a0 <__do_global_ctors_aux+0x24>
c002e586:	55                   	push   ebp
c002e587:	89 e5                	mov    ebp,esp
c002e589:	53                   	push   ebx
c002e58a:	52                   	push   edx
c002e58b:	bb 30 f5 02 c0       	mov    ebx,0xc002f530
c002e590:	ff d0                	call   eax
c002e592:	83 eb 04             	sub    ebx,0x4
c002e595:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e597:	83 f8 ff             	cmp    eax,0xffffffff
c002e59a:	75 f4                	jne    c002e590 <__do_global_ctors_aux+0x14>
c002e59c:	58                   	pop    eax
c002e59d:	5b                   	pop    ebx
c002e59e:	5d                   	pop    ebp
c002e59f:	c3                   	ret    
c002e5a0:	c3                   	ret    
c002e5a1:	66 90                	xchg   ax,ax
c002e5a3:	90                   	nop

c002e5a4 <__divdi3>:
c002e5a4:	55                   	push   ebp
c002e5a5:	57                   	push   edi
c002e5a6:	56                   	push   esi
c002e5a7:	53                   	push   ebx
c002e5a8:	83 ec 1c             	sub    esp,0x1c
c002e5ab:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e5af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e5b3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e5b6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e5ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e5be:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e5c2:	85 db                	test   ebx,ebx
c002e5c4:	0f 88 8e 00 00 00    	js     c002e658 <__divdi3+0xb4>
c002e5ca:	89 dd                	mov    ebp,ebx
c002e5cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e5d4:	89 d3                	mov    ebx,edx
c002e5d6:	85 d2                	test   edx,edx
c002e5d8:	79 0d                	jns    c002e5e7 <__divdi3+0x43>
c002e5da:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e5de:	f7 d8                	neg    eax
c002e5e0:	83 d2 00             	adc    edx,0x0
c002e5e3:	f7 da                	neg    edx
c002e5e5:	89 d3                	mov    ebx,edx
c002e5e7:	89 c7                	mov    edi,eax
c002e5e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e5ec:	85 db                	test   ebx,ebx
c002e5ee:	75 48                	jne    c002e638 <__divdi3+0x94>
c002e5f0:	39 ef                	cmp    edi,ebp
c002e5f2:	76 24                	jbe    c002e618 <__divdi3+0x74>
c002e5f4:	89 ea                	mov    edx,ebp
c002e5f6:	f7 f7                	div    edi
c002e5f8:	89 c1                	mov    ecx,eax
c002e5fa:	31 f6                	xor    esi,esi
c002e5fc:	89 c8                	mov    eax,ecx
c002e5fe:	89 f2                	mov    edx,esi
c002e600:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e604:	85 c9                	test   ecx,ecx
c002e606:	74 07                	je     c002e60f <__divdi3+0x6b>
c002e608:	f7 d8                	neg    eax
c002e60a:	83 d2 00             	adc    edx,0x0
c002e60d:	f7 da                	neg    edx
c002e60f:	83 c4 1c             	add    esp,0x1c
c002e612:	5b                   	pop    ebx
c002e613:	5e                   	pop    esi
c002e614:	5f                   	pop    edi
c002e615:	5d                   	pop    ebp
c002e616:	c3                   	ret    
c002e617:	90                   	nop
c002e618:	85 ff                	test   edi,edi
c002e61a:	75 0b                	jne    c002e627 <__divdi3+0x83>
c002e61c:	b8 01 00 00 00       	mov    eax,0x1
c002e621:	31 d2                	xor    edx,edx
c002e623:	f7 f3                	div    ebx
c002e625:	89 c7                	mov    edi,eax
c002e627:	31 d2                	xor    edx,edx
c002e629:	89 e8                	mov    eax,ebp
c002e62b:	f7 f7                	div    edi
c002e62d:	89 c6                	mov    esi,eax
c002e62f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e632:	f7 f7                	div    edi
c002e634:	89 c1                	mov    ecx,eax
c002e636:	eb c4                	jmp    c002e5fc <__divdi3+0x58>
c002e638:	39 eb                	cmp    ebx,ebp
c002e63a:	77 3c                	ja     c002e678 <__divdi3+0xd4>
c002e63c:	0f bd f3             	bsr    esi,ebx
c002e63f:	83 f6 1f             	xor    esi,0x1f
c002e642:	75 40                	jne    c002e684 <__divdi3+0xe0>
c002e644:	39 eb                	cmp    ebx,ebp
c002e646:	72 09                	jb     c002e651 <__divdi3+0xad>
c002e648:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e64b:	0f 87 97 00 00 00    	ja     c002e6e8 <__divdi3+0x144>
c002e651:	b9 01 00 00 00       	mov    ecx,0x1
c002e656:	eb a4                	jmp    c002e5fc <__divdi3+0x58>
c002e658:	f7 d9                	neg    ecx
c002e65a:	83 d3 00             	adc    ebx,0x0
c002e65d:	f7 db                	neg    ebx
c002e65f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e662:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e666:	89 dd                	mov    ebp,ebx
c002e668:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e670:	e9 5f ff ff ff       	jmp    c002e5d4 <__divdi3+0x30>
c002e675:	8d 76 00             	lea    esi,[esi+0x0]
c002e678:	31 f6                	xor    esi,esi
c002e67a:	31 c9                	xor    ecx,ecx
c002e67c:	e9 7b ff ff ff       	jmp    c002e5fc <__divdi3+0x58>
c002e681:	8d 76 00             	lea    esi,[esi+0x0]
c002e684:	b8 20 00 00 00       	mov    eax,0x20
c002e689:	29 f0                	sub    eax,esi
c002e68b:	89 f1                	mov    ecx,esi
c002e68d:	d3 e3                	shl    ebx,cl
c002e68f:	89 fa                	mov    edx,edi
c002e691:	88 c1                	mov    cl,al
c002e693:	d3 ea                	shr    edx,cl
c002e695:	09 da                	or     edx,ebx
c002e697:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e69b:	89 f1                	mov    ecx,esi
c002e69d:	d3 e7                	shl    edi,cl
c002e69f:	89 eb                	mov    ebx,ebp
c002e6a1:	88 c1                	mov    cl,al
c002e6a3:	d3 eb                	shr    ebx,cl
c002e6a5:	89 f1                	mov    ecx,esi
c002e6a7:	d3 e5                	shl    ebp,cl
c002e6a9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e6ac:	88 c1                	mov    cl,al
c002e6ae:	d3 ea                	shr    edx,cl
c002e6b0:	09 d5                	or     ebp,edx
c002e6b2:	89 e8                	mov    eax,ebp
c002e6b4:	89 da                	mov    edx,ebx
c002e6b6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e6ba:	89 d3                	mov    ebx,edx
c002e6bc:	89 c5                	mov    ebp,eax
c002e6be:	f7 e7                	mul    edi
c002e6c0:	39 d3                	cmp    ebx,edx
c002e6c2:	72 18                	jb     c002e6dc <__divdi3+0x138>
c002e6c4:	74 0a                	je     c002e6d0 <__divdi3+0x12c>
c002e6c6:	89 e9                	mov    ecx,ebp
c002e6c8:	31 f6                	xor    esi,esi
c002e6ca:	e9 2d ff ff ff       	jmp    c002e5fc <__divdi3+0x58>
c002e6cf:	90                   	nop
c002e6d0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e6d3:	89 f1                	mov    ecx,esi
c002e6d5:	d3 e7                	shl    edi,cl
c002e6d7:	39 c7                	cmp    edi,eax
c002e6d9:	73 eb                	jae    c002e6c6 <__divdi3+0x122>
c002e6db:	90                   	nop
c002e6dc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e6df:	31 f6                	xor    esi,esi
c002e6e1:	e9 16 ff ff ff       	jmp    c002e5fc <__divdi3+0x58>
c002e6e6:	66 90                	xchg   ax,ax
c002e6e8:	31 c9                	xor    ecx,ecx
c002e6ea:	e9 0d ff ff ff       	jmp    c002e5fc <__divdi3+0x58>
c002e6ef:	90                   	nop

c002e6f0 <__moddi3>:
c002e6f0:	55                   	push   ebp
c002e6f1:	57                   	push   edi
c002e6f2:	56                   	push   esi
c002e6f3:	53                   	push   ebx
c002e6f4:	83 ec 2c             	sub    esp,0x2c
c002e6f7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e6fb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e6ff:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e703:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e707:	85 db                	test   ebx,ebx
c002e709:	0f 88 85 00 00 00    	js     c002e794 <__moddi3+0xa4>
c002e70f:	89 de                	mov    esi,ebx
c002e711:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e719:	89 d7                	mov    edi,edx
c002e71b:	85 d2                	test   edx,edx
c002e71d:	79 09                	jns    c002e728 <__moddi3+0x38>
c002e71f:	f7 d8                	neg    eax
c002e721:	83 d2 00             	adc    edx,0x0
c002e724:	f7 da                	neg    edx
c002e726:	89 d7                	mov    edi,edx
c002e728:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e72c:	89 cd                	mov    ebp,ecx
c002e72e:	85 ff                	test   edi,edi
c002e730:	75 52                	jne    c002e784 <__moddi3+0x94>
c002e732:	89 c3                	mov    ebx,eax
c002e734:	39 f0                	cmp    eax,esi
c002e736:	76 24                	jbe    c002e75c <__moddi3+0x6c>
c002e738:	89 c8                	mov    eax,ecx
c002e73a:	89 f2                	mov    edx,esi
c002e73c:	f7 f3                	div    ebx
c002e73e:	89 d6                	mov    esi,edx
c002e740:	89 f0                	mov    eax,esi
c002e742:	31 d2                	xor    edx,edx
c002e744:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e748:	85 c9                	test   ecx,ecx
c002e74a:	74 07                	je     c002e753 <__moddi3+0x63>
c002e74c:	f7 d8                	neg    eax
c002e74e:	83 d2 00             	adc    edx,0x0
c002e751:	f7 da                	neg    edx
c002e753:	83 c4 2c             	add    esp,0x2c
c002e756:	5b                   	pop    ebx
c002e757:	5e                   	pop    esi
c002e758:	5f                   	pop    edi
c002e759:	5d                   	pop    ebp
c002e75a:	c3                   	ret    
c002e75b:	90                   	nop
c002e75c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e760:	85 db                	test   ebx,ebx
c002e762:	75 0d                	jne    c002e771 <__moddi3+0x81>
c002e764:	b8 01 00 00 00       	mov    eax,0x1
c002e769:	31 d2                	xor    edx,edx
c002e76b:	f7 f7                	div    edi
c002e76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e771:	89 f0                	mov    eax,esi
c002e773:	31 d2                	xor    edx,edx
c002e775:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e779:	f7 f7                	div    edi
c002e77b:	89 e8                	mov    eax,ebp
c002e77d:	f7 f7                	div    edi
c002e77f:	89 d6                	mov    esi,edx
c002e781:	eb bd                	jmp    c002e740 <__moddi3+0x50>
c002e783:	90                   	nop
c002e784:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e788:	39 f7                	cmp    edi,esi
c002e78a:	76 20                	jbe    c002e7ac <__moddi3+0xbc>
c002e78c:	89 c8                	mov    eax,ecx
c002e78e:	89 f2                	mov    edx,esi
c002e790:	eb b2                	jmp    c002e744 <__moddi3+0x54>
c002e792:	66 90                	xchg   ax,ax
c002e794:	f7 d9                	neg    ecx
c002e796:	83 d3 00             	adc    ebx,0x0
c002e799:	f7 db                	neg    ebx
c002e79b:	89 de                	mov    esi,ebx
c002e79d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e7a5:	e9 6f ff ff ff       	jmp    c002e719 <__moddi3+0x29>
c002e7aa:	66 90                	xchg   ax,ax
c002e7ac:	0f bd c7             	bsr    eax,edi
c002e7af:	83 f0 1f             	xor    eax,0x1f
c002e7b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e7b6:	75 24                	jne    c002e7dc <__moddi3+0xec>
c002e7b8:	39 f7                	cmp    edi,esi
c002e7ba:	72 06                	jb     c002e7c2 <__moddi3+0xd2>
c002e7bc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e7c0:	77 0c                	ja     c002e7ce <__moddi3+0xde>
c002e7c2:	89 e9                	mov    ecx,ebp
c002e7c4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e7c8:	19 fe                	sbb    esi,edi
c002e7ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e7ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e7d2:	89 f2                	mov    edx,esi
c002e7d4:	e9 6b ff ff ff       	jmp    c002e744 <__moddi3+0x54>
c002e7d9:	8d 76 00             	lea    esi,[esi+0x0]
c002e7dc:	b8 20 00 00 00       	mov    eax,0x20
c002e7e1:	89 c2                	mov    edx,eax
c002e7e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e7e7:	29 da                	sub    edx,ebx
c002e7e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e7ed:	88 d9                	mov    cl,bl
c002e7ef:	d3 e7                	shl    edi,cl
c002e7f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e7f5:	88 d1                	mov    cl,dl
c002e7f7:	d3 e8                	shr    eax,cl
c002e7f9:	09 c7                	or     edi,eax
c002e7fb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e7ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e803:	89 d8                	mov    eax,ebx
c002e805:	88 d9                	mov    cl,bl
c002e807:	d3 e7                	shl    edi,cl
c002e809:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e80d:	89 f3                	mov    ebx,esi
c002e80f:	88 d1                	mov    cl,dl
c002e811:	d3 eb                	shr    ebx,cl
c002e813:	89 c7                	mov    edi,eax
c002e815:	88 c1                	mov    cl,al
c002e817:	d3 e6                	shl    esi,cl
c002e819:	89 e8                	mov    eax,ebp
c002e81b:	88 d1                	mov    cl,dl
c002e81d:	d3 e8                	shr    eax,cl
c002e81f:	09 f0                	or     eax,esi
c002e821:	89 f9                	mov    ecx,edi
c002e823:	d3 e5                	shl    ebp,cl
c002e825:	89 da                	mov    edx,ebx
c002e827:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e82b:	89 d3                	mov    ebx,edx
c002e82d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e831:	89 c6                	mov    esi,eax
c002e833:	89 d1                	mov    ecx,edx
c002e835:	39 d3                	cmp    ebx,edx
c002e837:	72 27                	jb     c002e860 <__moddi3+0x170>
c002e839:	74 21                	je     c002e85c <__moddi3+0x16c>
c002e83b:	29 f5                	sub    ebp,esi
c002e83d:	19 cb                	sbb    ebx,ecx
c002e83f:	89 de                	mov    esi,ebx
c002e841:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e845:	d3 e6                	shl    esi,cl
c002e847:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e84b:	89 f9                	mov    ecx,edi
c002e84d:	d3 ed                	shr    ebp,cl
c002e84f:	09 ee                	or     esi,ebp
c002e851:	89 f0                	mov    eax,esi
c002e853:	d3 eb                	shr    ebx,cl
c002e855:	89 da                	mov    edx,ebx
c002e857:	e9 e8 fe ff ff       	jmp    c002e744 <__moddi3+0x54>
c002e85c:	39 c5                	cmp    ebp,eax
c002e85e:	73 db                	jae    c002e83b <__moddi3+0x14b>
c002e860:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e864:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e868:	89 d1                	mov    ecx,edx
c002e86a:	89 c6                	mov    esi,eax
c002e86c:	eb cd                	jmp    c002e83b <__moddi3+0x14b>
c002e86e:	66 90                	xchg   ax,ax

c002e870 <__udivdi3>:
c002e870:	55                   	push   ebp
c002e871:	57                   	push   edi
c002e872:	56                   	push   esi
c002e873:	53                   	push   ebx
c002e874:	83 ec 1c             	sub    esp,0x1c
c002e877:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e87b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e87f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e883:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e887:	85 d2                	test   edx,edx
c002e889:	75 41                	jne    c002e8cc <__udivdi3+0x5c>
c002e88b:	39 f7                	cmp    edi,esi
c002e88d:	76 15                	jbe    c002e8a4 <__udivdi3+0x34>
c002e88f:	89 e8                	mov    eax,ebp
c002e891:	89 f2                	mov    edx,esi
c002e893:	f7 f7                	div    edi
c002e895:	31 db                	xor    ebx,ebx
c002e897:	89 da                	mov    edx,ebx
c002e899:	83 c4 1c             	add    esp,0x1c
c002e89c:	5b                   	pop    ebx
c002e89d:	5e                   	pop    esi
c002e89e:	5f                   	pop    edi
c002e89f:	5d                   	pop    ebp
c002e8a0:	c3                   	ret    
c002e8a1:	8d 76 00             	lea    esi,[esi+0x0]
c002e8a4:	89 f9                	mov    ecx,edi
c002e8a6:	85 ff                	test   edi,edi
c002e8a8:	75 0b                	jne    c002e8b5 <__udivdi3+0x45>
c002e8aa:	b8 01 00 00 00       	mov    eax,0x1
c002e8af:	31 d2                	xor    edx,edx
c002e8b1:	f7 f7                	div    edi
c002e8b3:	89 c1                	mov    ecx,eax
c002e8b5:	31 d2                	xor    edx,edx
c002e8b7:	89 f0                	mov    eax,esi
c002e8b9:	f7 f1                	div    ecx
c002e8bb:	89 c3                	mov    ebx,eax
c002e8bd:	89 e8                	mov    eax,ebp
c002e8bf:	f7 f1                	div    ecx
c002e8c1:	89 da                	mov    edx,ebx
c002e8c3:	83 c4 1c             	add    esp,0x1c
c002e8c6:	5b                   	pop    ebx
c002e8c7:	5e                   	pop    esi
c002e8c8:	5f                   	pop    edi
c002e8c9:	5d                   	pop    ebp
c002e8ca:	c3                   	ret    
c002e8cb:	90                   	nop
c002e8cc:	39 f2                	cmp    edx,esi
c002e8ce:	77 1c                	ja     c002e8ec <__udivdi3+0x7c>
c002e8d0:	0f bd da             	bsr    ebx,edx
c002e8d3:	83 f3 1f             	xor    ebx,0x1f
c002e8d6:	75 24                	jne    c002e8fc <__udivdi3+0x8c>
c002e8d8:	39 f2                	cmp    edx,esi
c002e8da:	72 08                	jb     c002e8e4 <__udivdi3+0x74>
c002e8dc:	39 ef                	cmp    edi,ebp
c002e8de:	0f 87 84 00 00 00    	ja     c002e968 <__udivdi3+0xf8>
c002e8e4:	b8 01 00 00 00       	mov    eax,0x1
c002e8e9:	eb ac                	jmp    c002e897 <__udivdi3+0x27>
c002e8eb:	90                   	nop
c002e8ec:	31 db                	xor    ebx,ebx
c002e8ee:	31 c0                	xor    eax,eax
c002e8f0:	89 da                	mov    edx,ebx
c002e8f2:	83 c4 1c             	add    esp,0x1c
c002e8f5:	5b                   	pop    ebx
c002e8f6:	5e                   	pop    esi
c002e8f7:	5f                   	pop    edi
c002e8f8:	5d                   	pop    ebp
c002e8f9:	c3                   	ret    
c002e8fa:	66 90                	xchg   ax,ax
c002e8fc:	b8 20 00 00 00       	mov    eax,0x20
c002e901:	29 d8                	sub    eax,ebx
c002e903:	88 d9                	mov    cl,bl
c002e905:	d3 e2                	shl    edx,cl
c002e907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e90b:	89 fa                	mov    edx,edi
c002e90d:	88 c1                	mov    cl,al
c002e90f:	d3 ea                	shr    edx,cl
c002e911:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e915:	09 d1                	or     ecx,edx
c002e917:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e91b:	88 d9                	mov    cl,bl
c002e91d:	d3 e7                	shl    edi,cl
c002e91f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e923:	89 f7                	mov    edi,esi
c002e925:	88 c1                	mov    cl,al
c002e927:	d3 ef                	shr    edi,cl
c002e929:	88 d9                	mov    cl,bl
c002e92b:	d3 e6                	shl    esi,cl
c002e92d:	89 ea                	mov    edx,ebp
c002e92f:	88 c1                	mov    cl,al
c002e931:	d3 ea                	shr    edx,cl
c002e933:	09 d6                	or     esi,edx
c002e935:	89 f0                	mov    eax,esi
c002e937:	89 fa                	mov    edx,edi
c002e939:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e93d:	89 d7                	mov    edi,edx
c002e93f:	89 c6                	mov    esi,eax
c002e941:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e945:	39 d7                	cmp    edi,edx
c002e947:	72 13                	jb     c002e95c <__udivdi3+0xec>
c002e949:	74 09                	je     c002e954 <__udivdi3+0xe4>
c002e94b:	89 f0                	mov    eax,esi
c002e94d:	31 db                	xor    ebx,ebx
c002e94f:	e9 43 ff ff ff       	jmp    c002e897 <__udivdi3+0x27>
c002e954:	88 d9                	mov    cl,bl
c002e956:	d3 e5                	shl    ebp,cl
c002e958:	39 c5                	cmp    ebp,eax
c002e95a:	73 ef                	jae    c002e94b <__udivdi3+0xdb>
c002e95c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e95f:	31 db                	xor    ebx,ebx
c002e961:	e9 31 ff ff ff       	jmp    c002e897 <__udivdi3+0x27>
c002e966:	66 90                	xchg   ax,ax
c002e968:	31 c0                	xor    eax,eax
c002e96a:	e9 28 ff ff ff       	jmp    c002e897 <__udivdi3+0x27>
c002e96f:	90                   	nop

c002e970 <__umoddi3>:
c002e970:	55                   	push   ebp
c002e971:	57                   	push   edi
c002e972:	56                   	push   esi
c002e973:	53                   	push   ebx
c002e974:	83 ec 1c             	sub    esp,0x1c
c002e977:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e97b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e97f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e987:	89 da                	mov    edx,ebx
c002e989:	85 c0                	test   eax,eax
c002e98b:	75 37                	jne    c002e9c4 <__umoddi3+0x54>
c002e98d:	39 df                	cmp    edi,ebx
c002e98f:	76 13                	jbe    c002e9a4 <__umoddi3+0x34>
c002e991:	89 f0                	mov    eax,esi
c002e993:	f7 f7                	div    edi
c002e995:	89 d0                	mov    eax,edx
c002e997:	31 d2                	xor    edx,edx
c002e999:	83 c4 1c             	add    esp,0x1c
c002e99c:	5b                   	pop    ebx
c002e99d:	5e                   	pop    esi
c002e99e:	5f                   	pop    edi
c002e99f:	5d                   	pop    ebp
c002e9a0:	c3                   	ret    
c002e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c002e9a4:	89 fd                	mov    ebp,edi
c002e9a6:	85 ff                	test   edi,edi
c002e9a8:	75 0b                	jne    c002e9b5 <__umoddi3+0x45>
c002e9aa:	b8 01 00 00 00       	mov    eax,0x1
c002e9af:	31 d2                	xor    edx,edx
c002e9b1:	f7 f7                	div    edi
c002e9b3:	89 c5                	mov    ebp,eax
c002e9b5:	89 d8                	mov    eax,ebx
c002e9b7:	31 d2                	xor    edx,edx
c002e9b9:	f7 f5                	div    ebp
c002e9bb:	89 f0                	mov    eax,esi
c002e9bd:	f7 f5                	div    ebp
c002e9bf:	89 d0                	mov    eax,edx
c002e9c1:	eb d4                	jmp    c002e997 <__umoddi3+0x27>
c002e9c3:	90                   	nop
c002e9c4:	89 f1                	mov    ecx,esi
c002e9c6:	39 d8                	cmp    eax,ebx
c002e9c8:	76 0a                	jbe    c002e9d4 <__umoddi3+0x64>
c002e9ca:	89 f0                	mov    eax,esi
c002e9cc:	83 c4 1c             	add    esp,0x1c
c002e9cf:	5b                   	pop    ebx
c002e9d0:	5e                   	pop    esi
c002e9d1:	5f                   	pop    edi
c002e9d2:	5d                   	pop    ebp
c002e9d3:	c3                   	ret    
c002e9d4:	0f bd e8             	bsr    ebp,eax
c002e9d7:	83 f5 1f             	xor    ebp,0x1f
c002e9da:	75 1c                	jne    c002e9f8 <__umoddi3+0x88>
c002e9dc:	39 d8                	cmp    eax,ebx
c002e9de:	72 04                	jb     c002e9e4 <__umoddi3+0x74>
c002e9e0:	39 f7                	cmp    edi,esi
c002e9e2:	77 08                	ja     c002e9ec <__umoddi3+0x7c>
c002e9e4:	89 da                	mov    edx,ebx
c002e9e6:	29 fe                	sub    esi,edi
c002e9e8:	19 c2                	sbb    edx,eax
c002e9ea:	89 f1                	mov    ecx,esi
c002e9ec:	89 c8                	mov    eax,ecx
c002e9ee:	83 c4 1c             	add    esp,0x1c
c002e9f1:	5b                   	pop    ebx
c002e9f2:	5e                   	pop    esi
c002e9f3:	5f                   	pop    edi
c002e9f4:	5d                   	pop    ebp
c002e9f5:	c3                   	ret    
c002e9f6:	66 90                	xchg   ax,ax
c002e9f8:	ba 20 00 00 00       	mov    edx,0x20
c002e9fd:	29 ea                	sub    edx,ebp
c002e9ff:	89 e9                	mov    ecx,ebp
c002ea01:	d3 e0                	shl    eax,cl
c002ea03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002ea07:	89 f8                	mov    eax,edi
c002ea09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002ea0d:	88 d1                	mov    cl,dl
c002ea0f:	d3 e8                	shr    eax,cl
c002ea11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002ea15:	09 c1                	or     ecx,eax
c002ea17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002ea1b:	89 e9                	mov    ecx,ebp
c002ea1d:	d3 e7                	shl    edi,cl
c002ea1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002ea23:	89 d8                	mov    eax,ebx
c002ea25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ea29:	88 d1                	mov    cl,dl
c002ea2b:	d3 e8                	shr    eax,cl
c002ea2d:	89 c7                	mov    edi,eax
c002ea2f:	89 e9                	mov    ecx,ebp
c002ea31:	d3 e3                	shl    ebx,cl
c002ea33:	89 f0                	mov    eax,esi
c002ea35:	88 d1                	mov    cl,dl
c002ea37:	d3 e8                	shr    eax,cl
c002ea39:	09 d8                	or     eax,ebx
c002ea3b:	89 e9                	mov    ecx,ebp
c002ea3d:	d3 e6                	shl    esi,cl
c002ea3f:	89 f3                	mov    ebx,esi
c002ea41:	89 fa                	mov    edx,edi
c002ea43:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002ea47:	89 d1                	mov    ecx,edx
c002ea49:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002ea4d:	89 c6                	mov    esi,eax
c002ea4f:	89 d7                	mov    edi,edx
c002ea51:	39 d1                	cmp    ecx,edx
c002ea53:	72 27                	jb     c002ea7c <__umoddi3+0x10c>
c002ea55:	74 21                	je     c002ea78 <__umoddi3+0x108>
c002ea57:	89 ca                	mov    edx,ecx
c002ea59:	29 f3                	sub    ebx,esi
c002ea5b:	19 fa                	sbb    edx,edi
c002ea5d:	89 d0                	mov    eax,edx
c002ea5f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002ea63:	d3 e0                	shl    eax,cl
c002ea65:	89 e9                	mov    ecx,ebp
c002ea67:	d3 eb                	shr    ebx,cl
c002ea69:	09 d8                	or     eax,ebx
c002ea6b:	d3 ea                	shr    edx,cl
c002ea6d:	83 c4 1c             	add    esp,0x1c
c002ea70:	5b                   	pop    ebx
c002ea71:	5e                   	pop    esi
c002ea72:	5f                   	pop    edi
c002ea73:	5d                   	pop    ebp
c002ea74:	c3                   	ret    
c002ea75:	8d 76 00             	lea    esi,[esi+0x0]
c002ea78:	39 c3                	cmp    ebx,eax
c002ea7a:	73 db                	jae    c002ea57 <__umoddi3+0xe7>
c002ea7c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002ea80:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002ea84:	89 d7                	mov    edi,edx
c002ea86:	89 c6                	mov    esi,eax
c002ea88:	eb cd                	jmp    c002ea57 <__umoddi3+0xe7>

Disassembly of section .init:

c002ea8a <_init>:
c002ea8a:	55                   	push   ebp
c002ea8b:	89 e5                	mov    ebp,esp
c002ea8d:	e8 62 16 fd ff       	call   c00000f4 <frame_dummy>
c002ea92:	e8 e5 fa ff ff       	call   c002e57c <__do_global_ctors_aux>
c002ea97:	5d                   	pop    ebp
c002ea98:	c3                   	ret    

Disassembly of section .fini:

c002ea99 <_fini>:
c002ea99:	55                   	push   ebp
c002ea9a:	89 e5                	mov    ebp,esp
c002ea9c:	e8 e3 15 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002eaa1:	5d                   	pop    ebp
c002eaa2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002eaa4 <Computer::~Computer()>:
c002eaa4:	83 ec 0c             	sub    esp,0xc
c002eaa7:	ba 04 13 03 c0       	mov    edx,0xc0031304
c002eaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab0:	89 10                	mov    DWORD PTR [eax],edx
c002eab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab6:	83 ec 0c             	sub    esp,0xc
c002eab9:	50                   	push   eax
c002eaba:	e8 05 c9 fe ff       	call   c001b3c4 <Device::~Device()>
c002eabf:	83 c4 10             	add    esp,0x10
c002eac2:	90                   	nop
c002eac3:	83 c4 0c             	add    esp,0xc
c002eac6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002eac8 <Computer::~Computer()>:
c002eac8:	83 ec 0c             	sub    esp,0xc
c002eacb:	83 ec 0c             	sub    esp,0xc
c002eace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ead2:	e8 cd ff ff ff       	call   c002eaa4 <Computer::~Computer()>
c002ead7:	83 c4 10             	add    esp,0x10
c002eada:	83 ec 08             	sub    esp,0x8
c002eadd:	68 70 01 00 00       	push   0x170
c002eae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eae6:	e8 29 a8 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002eaeb:	83 c4 10             	add    esp,0x10
c002eaee:	83 c4 0c             	add    esp,0xc
c002eaf1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002eaf2 <idleCommon()>:
c002eaf2:	83 ec 0c             	sub    esp,0xc
c002eaf5:	fa                   	cli    
c002eaf6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002eafc:	e8 6f 69 ff ff       	call   c0025470 <schedule()>
c002eb01:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002eb06:	48                   	dec    eax
c002eb07:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002eb0c:	75 01                	jne    c002eb0f <idleCommon()+0x1d>
c002eb0e:	fb                   	sti    
c002eb0f:	83 c4 0c             	add    esp,0xc
c002eb12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002eb14 <LinkedList<UnixFile>::~LinkedList()>:
c002eb14:	90                   	nop
c002eb15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002eb16 <LinkedList<UnixFile>::LinkedList()>:
c002eb16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb4f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb56:	90                   	nop
c002eb57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002eb58 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002eb58:	83 ec 0c             	sub    esp,0xc
c002eb5b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eb60:	75 10                	jne    c002eb72 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002eb62:	83 ec 0c             	sub    esp,0xc
c002eb65:	68 78 15 03 c0       	push   0xc0031578
c002eb6a:	e8 eb 18 ff ff       	call   c002045a <KePanic(char const*)>
c002eb6f:	83 c4 10             	add    esp,0x10
c002eb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb76:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb78:	85 c0                	test   eax,eax
c002eb7a:	74 34                	je     c002ebb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002eb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb83:	85 c0                	test   eax,eax
c002eb85:	74 29                	je     c002ebb0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb92:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eb95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eba4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eba7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebae:	eb 65                	jmp    c002ec15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ebb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebb4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebb6:	85 c0                	test   eax,eax
c002ebb8:	75 4b                	jne    c002ec05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ebba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebc1:	85 c0                	test   eax,eax
c002ebc3:	75 40                	jne    c002ec05 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ebc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebcd:	89 10                	mov    DWORD PTR [eax],edx
c002ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ebd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ebda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebe1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebef:	85 c0                	test   eax,eax
c002ebf1:	74 22                	je     c002ec15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ebf3:	83 ec 0c             	sub    esp,0xc
c002ebf6:	68 9a 15 03 c0       	push   0xc003159a
c002ebfb:	e8 5a 18 ff ff       	call   c002045a <KePanic(char const*)>
c002ec00:	83 c4 10             	add    esp,0x10
c002ec03:	eb 10                	jmp    c002ec15 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ec05:	83 ec 0c             	sub    esp,0xc
c002ec08:	68 a4 15 03 c0       	push   0xc00315a4
c002ec0d:	e8 48 18 ff ff       	call   c002045a <KePanic(char const*)>
c002ec12:	83 c4 10             	add    esp,0x10
c002ec15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec19:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec1c:	8d 50 01             	lea    edx,[eax+0x1]
c002ec1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec23:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec26:	90                   	nop
c002ec27:	83 c4 0c             	add    esp,0xc
c002ec2a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002ec2c <LinkedList<UnixFile>::getFirstElement()>:
c002ec2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ec30:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002ec34 <LinkedList<UnixFile>::removeFirst()>:
c002ec34:	83 ec 0c             	sub    esp,0xc
c002ec37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec3b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec3d:	85 c0                	test   eax,eax
c002ec3f:	75 12                	jne    c002ec53 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002ec41:	83 ec 0c             	sub    esp,0xc
c002ec44:	68 b0 15 03 c0       	push   0xc00315b0
c002ec49:	e8 0c 18 ff ff       	call   c002045a <KePanic(char const*)>
c002ec4e:	83 c4 10             	add    esp,0x10
c002ec51:	eb 7e                	jmp    c002ecd1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002ec53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec5d:	85 c0                	test   eax,eax
c002ec5f:	74 10                	je     c002ec71 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002ec61:	83 ec 0c             	sub    esp,0xc
c002ec64:	68 fb 15 03 c0       	push   0xc00315fb
c002ec69:	e8 ec 17 ff ff       	call   c002045a <KePanic(char const*)>
c002ec6e:	83 c4 10             	add    esp,0x10
c002ec71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec75:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec7a:	85 c0                	test   eax,eax
c002ec7c:	75 33                	jne    c002ecb1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ec7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec9a:	83 f8 01             	cmp    eax,0x1
c002ec9d:	74 21                	je     c002ecc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ec9f:	83 ec 0c             	sub    esp,0xc
c002eca2:	68 d4 15 03 c0       	push   0xc00315d4
c002eca7:	e8 ae 17 ff ff       	call   c002045a <KePanic(char const*)>
c002ecac:	83 c4 10             	add    esp,0x10
c002ecaf:	eb 0f                	jmp    c002ecc0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb5:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecb7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002ecba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecbe:	89 10                	mov    DWORD PTR [eax],edx
c002ecc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecc7:	8d 50 ff             	lea    edx,[eax-0x1]
c002ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ecd1:	83 c4 0c             	add    esp,0xc
c002ecd4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002ecd6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002ecd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ecda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecdd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002ecde <DriverlessDevice::~DriverlessDevice()>:
c002ecde:	ba 28 22 03 c0       	mov    edx,0xc0032228
c002ece3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ece7:	89 10                	mov    DWORD PTR [eax],edx
c002ece9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eced:	50                   	push   eax
c002ecee:	e8 d1 c6 fe ff       	call   c001b3c4 <Device::~Device()>
c002ecf3:	83 c4 04             	add    esp,0x4
c002ecf6:	90                   	nop
c002ecf7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ecf8 <DriverlessDevice::~DriverlessDevice()>:
c002ecf8:	83 ec 0c             	sub    esp,0xc
c002ecfb:	83 ec 0c             	sub    esp,0xc
c002ecfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed02:	e8 d7 ff ff ff       	call   c002ecde <DriverlessDevice::~DriverlessDevice()>
c002ed07:	83 c4 10             	add    esp,0x10
c002ed0a:	83 ec 08             	sub    esp,0x8
c002ed0d:	68 58 01 00 00       	push   0x158
c002ed12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed16:	e8 f9 a5 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002ed1b:	83 c4 10             	add    esp,0x10
c002ed1e:	83 c4 0c             	add    esp,0xc
c002ed21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ed22 <LinkedList<Device>::addElement(Device*)>:
c002ed22:	83 ec 0c             	sub    esp,0xc
c002ed25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ed2a:	75 10                	jne    c002ed3c <LinkedList<Device>::addElement(Device*)+0x1a>
c002ed2c:	83 ec 0c             	sub    esp,0xc
c002ed2f:	68 78 15 03 c0       	push   0xc0031578
c002ed34:	e8 21 17 ff ff       	call   c002045a <KePanic(char const*)>
c002ed39:	83 c4 10             	add    esp,0x10
c002ed3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed42:	85 c0                	test   eax,eax
c002ed44:	74 3a                	je     c002ed80 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ed46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed4d:	85 c0                	test   eax,eax
c002ed4f:	74 2f                	je     c002ed80 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ed51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed5c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002ed62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed6a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed71:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed74:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ed7e:	eb 68                	jmp    c002ede8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ed80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed84:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed86:	85 c0                	test   eax,eax
c002ed88:	75 4e                	jne    c002edd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ed8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed91:	85 c0                	test   eax,eax
c002ed93:	75 43                	jne    c002edd8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ed95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed9d:	89 10                	mov    DWORD PTR [eax],edx
c002ed9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eda3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eda7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002edaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edb1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002edbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edbf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edc2:	85 c0                	test   eax,eax
c002edc4:	74 22                	je     c002ede8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002edc6:	83 ec 0c             	sub    esp,0xc
c002edc9:	68 9a 15 03 c0       	push   0xc003159a
c002edce:	e8 87 16 ff ff       	call   c002045a <KePanic(char const*)>
c002edd3:	83 c4 10             	add    esp,0x10
c002edd6:	eb 10                	jmp    c002ede8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002edd8:	83 ec 0c             	sub    esp,0xc
c002eddb:	68 a4 15 03 c0       	push   0xc00315a4
c002ede0:	e8 75 16 ff ff       	call   c002045a <KePanic(char const*)>
c002ede5:	83 c4 10             	add    esp,0x10
c002ede8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edef:	8d 50 01             	lea    edx,[eax+0x1]
c002edf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002edf9:	90                   	nop
c002edfa:	83 c4 0c             	add    esp,0xc
c002edfd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002edfe <LinkedList<Device>::LinkedList()>:
c002edfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ee1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ee3e:	90                   	nop
c002ee3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ee40 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ee40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee46:	85 c0                	test   eax,eax
c002ee48:	75 0e                	jne    c002ee58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ee4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee51:	85 c0                	test   eax,eax
c002ee53:	75 03                	jne    c002ee58 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ee55:	b0 01                	mov    al,0x1
c002ee57:	c3                   	ret    
c002ee58:	b0 00                	mov    al,0x0
c002ee5a:	90                   	nop
c002ee5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ee5c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ee5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee60:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ee64 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ee64:	83 ec 0c             	sub    esp,0xc
c002ee67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee6b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee6d:	85 c0                	test   eax,eax
c002ee6f:	75 17                	jne    c002ee88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ee71:	83 ec 0c             	sub    esp,0xc
c002ee74:	68 b0 15 03 c0       	push   0xc00315b0
c002ee79:	e8 dc 15 ff ff       	call   c002045a <KePanic(char const*)>
c002ee7e:	83 c4 10             	add    esp,0x10
c002ee81:	e9 96 00 00 00       	jmp    c002ef1c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ee86:	66 90                	xchg   ax,ax
c002ee88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ee92:	85 c0                	test   eax,eax
c002ee94:	0f 95 c0             	setne  al
c002ee97:	0f b6 c0             	movzx  eax,al
c002ee9a:	85 c0                	test   eax,eax
c002ee9c:	74 12                	je     c002eeb0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ee9e:	83 ec 0c             	sub    esp,0xc
c002eea1:	68 fb 15 03 c0       	push   0xc00315fb
c002eea6:	e8 af 15 ff ff       	call   c002045a <KePanic(char const*)>
c002eeab:	83 c4 10             	add    esp,0x10
c002eeae:	66 90                	xchg   ax,ax
c002eeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb4:	8b 00                	mov    eax,DWORD PTR [eax]
c002eeb6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eeb9:	85 c0                	test   eax,eax
c002eebb:	0f 94 c0             	sete   al
c002eebe:	0f b6 c0             	movzx  eax,al
c002eec1:	85 c0                	test   eax,eax
c002eec3:	74 33                	je     c002eef8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002eec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eed3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eeda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eede:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eee1:	83 f8 01             	cmp    eax,0x1
c002eee4:	74 22                	je     c002ef08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002eee6:	83 ec 0c             	sub    esp,0xc
c002eee9:	68 d4 15 03 c0       	push   0xc00315d4
c002eeee:	e8 67 15 ff ff       	call   c002045a <KePanic(char const*)>
c002eef3:	83 c4 10             	add    esp,0x10
c002eef6:	eb 10                	jmp    c002ef08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002eef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eefc:	8b 00                	mov    eax,DWORD PTR [eax]
c002eefe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ef01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef05:	89 10                	mov    DWORD PTR [eax],edx
c002ef07:	90                   	nop
c002ef08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ef0f:	8d 50 ff             	lea    edx,[eax-0x1]
c002ef12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ef19:	8d 76 00             	lea    esi,[esi+0x0]
c002ef1c:	83 c4 0c             	add    esp,0xc
c002ef1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ef20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ef20:	83 ec 0c             	sub    esp,0xc
c002ef23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ef28:	75 12                	jne    c002ef3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ef2a:	83 ec 0c             	sub    esp,0xc
c002ef2d:	68 78 15 03 c0       	push   0xc0031578
c002ef32:	e8 23 15 ff ff       	call   c002045a <KePanic(char const*)>
c002ef37:	83 c4 10             	add    esp,0x10
c002ef3a:	66 90                	xchg   ax,ax
c002ef3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef42:	85 c0                	test   eax,eax
c002ef44:	74 36                	je     c002ef7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ef46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef4d:	85 c0                	test   eax,eax
c002ef4f:	74 2b                	je     c002ef7c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ef51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ef5c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ef67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ef6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef71:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ef78:	eb 6a                	jmp    c002efe4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ef7a:	66 90                	xchg   ax,ax
c002ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef82:	85 c0                	test   eax,eax
c002ef84:	75 4e                	jne    c002efd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ef86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef8d:	85 c0                	test   eax,eax
c002ef8f:	75 43                	jne    c002efd4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ef91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ef99:	89 10                	mov    DWORD PTR [eax],edx
c002ef9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002efa3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002efa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002efad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efb8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efbb:	85 c0                	test   eax,eax
c002efbd:	74 25                	je     c002efe4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002efbf:	83 ec 0c             	sub    esp,0xc
c002efc2:	68 9a 15 03 c0       	push   0xc003159a
c002efc7:	e8 8e 14 ff ff       	call   c002045a <KePanic(char const*)>
c002efcc:	83 c4 10             	add    esp,0x10
c002efcf:	eb 13                	jmp    c002efe4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002efd1:	8d 76 00             	lea    esi,[esi+0x0]
c002efd4:	83 ec 0c             	sub    esp,0xc
c002efd7:	68 a4 15 03 c0       	push   0xc00315a4
c002efdc:	e8 79 14 ff ff       	call   c002045a <KePanic(char const*)>
c002efe1:	83 c4 10             	add    esp,0x10
c002efe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efe8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efeb:	8d 50 01             	lea    edx,[eax+0x1]
c002efee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eff5:	90                   	nop
c002eff6:	83 c4 0c             	add    esp,0xc
c002eff9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002effc <ACPI::~ACPI()>:
c002effc:	83 ec 0c             	sub    esp,0xc
c002efff:	ba e0 28 03 c0       	mov    edx,0xc00328e0
c002f004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f008:	89 10                	mov    DWORD PTR [eax],edx
c002f00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f00e:	83 ec 0c             	sub    esp,0xc
c002f011:	50                   	push   eax
c002f012:	e8 ad c3 fe ff       	call   c001b3c4 <Device::~Device()>
c002f017:	83 c4 10             	add    esp,0x10
c002f01a:	90                   	nop
c002f01b:	83 c4 0c             	add    esp,0xc
c002f01e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002f020 <ACPI::~ACPI()>:
c002f020:	83 ec 0c             	sub    esp,0xc
c002f023:	83 ec 0c             	sub    esp,0xc
c002f026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f02a:	e8 cd ff ff ff       	call   c002effc <ACPI::~ACPI()>
c002f02f:	83 c4 10             	add    esp,0x10
c002f032:	83 ec 08             	sub    esp,0x8
c002f035:	68 64 12 00 00       	push   0x1264
c002f03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f03e:	e8 d1 a2 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f043:	83 c4 10             	add    esp,0x10
c002f046:	83 c4 0c             	add    esp,0xc
c002f049:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002f04c <LinkedList<Device>::~LinkedList()>:
c002f04c:	90                   	nop
c002f04d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002f050 <LinkedList<Device>::isEmpty()>:
c002f050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f054:	8b 00                	mov    eax,DWORD PTR [eax]
c002f056:	85 c0                	test   eax,eax
c002f058:	75 0e                	jne    c002f068 <LinkedList<Device>::isEmpty()+0x18>
c002f05a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f05e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f061:	85 c0                	test   eax,eax
c002f063:	75 03                	jne    c002f068 <LinkedList<Device>::isEmpty()+0x18>
c002f065:	b0 01                	mov    al,0x1
c002f067:	c3                   	ret    
c002f068:	b0 00                	mov    al,0x0
c002f06a:	90                   	nop
c002f06b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002f06c <LinkedList<Device>::getFirstElement()>:
c002f06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f070:	8b 00                	mov    eax,DWORD PTR [eax]
c002f072:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002f074 <LinkedList<Device>::removeFirst()>:
c002f074:	83 ec 0c             	sub    esp,0xc
c002f077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f07b:	8b 00                	mov    eax,DWORD PTR [eax]
c002f07d:	85 c0                	test   eax,eax
c002f07f:	75 17                	jne    c002f098 <LinkedList<Device>::removeFirst()+0x24>
c002f081:	83 ec 0c             	sub    esp,0xc
c002f084:	68 b0 15 03 c0       	push   0xc00315b0
c002f089:	e8 cc 13 ff ff       	call   c002045a <KePanic(char const*)>
c002f08e:	83 c4 10             	add    esp,0x10
c002f091:	e9 92 00 00 00       	jmp    c002f128 <LinkedList<Device>::removeFirst()+0xb4>
c002f096:	66 90                	xchg   ax,ax
c002f098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002f09f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f0a5:	85 c0                	test   eax,eax
c002f0a7:	74 13                	je     c002f0bc <LinkedList<Device>::removeFirst()+0x48>
c002f0a9:	83 ec 0c             	sub    esp,0xc
c002f0ac:	68 fb 15 03 c0       	push   0xc00315fb
c002f0b1:	e8 a4 13 ff ff       	call   c002045a <KePanic(char const*)>
c002f0b6:	83 c4 10             	add    esp,0x10
c002f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c002f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002f0c2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002f0c8:	85 c0                	test   eax,eax
c002f0ca:	75 34                	jne    c002f100 <LinkedList<Device>::removeFirst()+0x8c>
c002f0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f0e8:	83 f8 01             	cmp    eax,0x1
c002f0eb:	74 27                	je     c002f114 <LinkedList<Device>::removeFirst()+0xa0>
c002f0ed:	83 ec 0c             	sub    esp,0xc
c002f0f0:	68 d4 15 03 c0       	push   0xc00315d4
c002f0f5:	e8 60 13 ff ff       	call   c002045a <KePanic(char const*)>
c002f0fa:	83 c4 10             	add    esp,0x10
c002f0fd:	eb 15                	jmp    c002f114 <LinkedList<Device>::removeFirst()+0xa0>
c002f0ff:	90                   	nop
c002f100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f104:	8b 00                	mov    eax,DWORD PTR [eax]
c002f106:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002f10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f110:	89 10                	mov    DWORD PTR [eax],edx
c002f112:	66 90                	xchg   ax,ax
c002f114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f118:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002f11b:	8d 50 ff             	lea    edx,[eax-0x1]
c002f11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f122:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002f125:	8d 76 00             	lea    esi,[esi+0x0]
c002f128:	83 c4 0c             	add    esp,0xc
c002f12b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002f12c <CPU::~CPU()>:
c002f12c:	83 ec 0c             	sub    esp,0xc
c002f12f:	ba 88 2a 03 c0       	mov    edx,0xc0032a88
c002f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f138:	89 10                	mov    DWORD PTR [eax],edx
c002f13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f13e:	83 ec 0c             	sub    esp,0xc
c002f141:	50                   	push   eax
c002f142:	e8 7d c2 fe ff       	call   c001b3c4 <Device::~Device()>
c002f147:	83 c4 10             	add    esp,0x10
c002f14a:	90                   	nop
c002f14b:	83 c4 0c             	add    esp,0xc
c002f14e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f150 <CPU::~CPU()>:
c002f150:	83 ec 0c             	sub    esp,0xc
c002f153:	83 ec 0c             	sub    esp,0xc
c002f156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f15a:	e8 cd ff ff ff       	call   c002f12c <CPU::~CPU()>
c002f15f:	83 c4 10             	add    esp,0x10
c002f162:	83 ec 08             	sub    esp,0x8
c002f165:	68 94 11 00 00       	push   0x1194
c002f16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f16e:	e8 a1 a1 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f173:	83 c4 10             	add    esp,0x10
c002f176:	83 c4 0c             	add    esp,0xc
c002f179:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f17c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f17c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f180:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f183:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f184 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f184:	90                   	nop
c002f185:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f188 <ThreadControlBlock::ThreadControlBlock()>:
c002f188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f18c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f197:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1a2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f1a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1ad:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f1b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1b8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f1bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1c3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f1c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1cb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f1cf:	90                   	nop
c002f1d0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f1d4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f1d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f1e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f1f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f1fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f202:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f209:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f20d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f214:	90                   	nop
c002f215:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f216 <PCI::~PCI()>:
c002f216:	83 ec 0c             	sub    esp,0xc
c002f219:	ba a8 39 03 c0       	mov    edx,0xc00339a8
c002f21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f222:	89 10                	mov    DWORD PTR [eax],edx
c002f224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f228:	83 ec 0c             	sub    esp,0xc
c002f22b:	50                   	push   eax
c002f22c:	e8 2b bc fe ff       	call   c001ae5c <Bus::~Bus()>
c002f231:	83 c4 10             	add    esp,0x10
c002f234:	90                   	nop
c002f235:	83 c4 0c             	add    esp,0xc
c002f238:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f23a <PCI::~PCI()>:
c002f23a:	83 ec 0c             	sub    esp,0xc
c002f23d:	83 ec 0c             	sub    esp,0xc
c002f240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f244:	e8 cd ff ff ff       	call   c002f216 <PCI::~PCI()>
c002f249:	83 c4 10             	add    esp,0x10
c002f24c:	83 ec 08             	sub    esp,0x8
c002f24f:	68 5c 01 00 00       	push   0x15c
c002f254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f258:	e8 b7 a0 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f25d:	83 c4 10             	add    esp,0x10
c002f260:	83 c4 0c             	add    esp,0xc
c002f263:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f264 <IDE::~IDE()>:
c002f264:	83 ec 0c             	sub    esp,0xc
c002f267:	ba 5c 3a 03 c0       	mov    edx,0xc0033a5c
c002f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f270:	89 10                	mov    DWORD PTR [eax],edx
c002f272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f276:	83 ec 0c             	sub    esp,0xc
c002f279:	50                   	push   eax
c002f27a:	e8 d5 c5 fe ff       	call   c001b854 <HardDiskController::~HardDiskController()>
c002f27f:	83 c4 10             	add    esp,0x10
c002f282:	90                   	nop
c002f283:	83 c4 0c             	add    esp,0xc
c002f286:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f288 <IDE::~IDE()>:
c002f288:	83 ec 0c             	sub    esp,0xc
c002f28b:	83 ec 0c             	sub    esp,0xc
c002f28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f292:	e8 cd ff ff ff       	call   c002f264 <IDE::~IDE()>
c002f297:	83 c4 10             	add    esp,0x10
c002f29a:	83 ec 08             	sub    esp,0x8
c002f29d:	68 70 02 00 00       	push   0x270
c002f2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2a6:	e8 69 a0 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f2ab:	83 c4 10             	add    esp,0x10
c002f2ae:	83 c4 0c             	add    esp,0xc
c002f2b1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f2b2 <SATABus::~SATABus()>:
c002f2b2:	83 ec 0c             	sub    esp,0xc
c002f2b5:	ba ac 3a 03 c0       	mov    edx,0xc0033aac
c002f2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2be:	89 10                	mov    DWORD PTR [eax],edx
c002f2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2c4:	83 ec 0c             	sub    esp,0xc
c002f2c7:	50                   	push   eax
c002f2c8:	e8 87 c5 fe ff       	call   c001b854 <HardDiskController::~HardDiskController()>
c002f2cd:	83 c4 10             	add    esp,0x10
c002f2d0:	90                   	nop
c002f2d1:	83 c4 0c             	add    esp,0xc
c002f2d4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f2d6 <SATABus::~SATABus()>:
c002f2d6:	83 ec 0c             	sub    esp,0xc
c002f2d9:	83 ec 0c             	sub    esp,0xc
c002f2dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2e0:	e8 cd ff ff ff       	call   c002f2b2 <SATABus::~SATABus()>
c002f2e5:	83 c4 10             	add    esp,0x10
c002f2e8:	83 ec 08             	sub    esp,0x8
c002f2eb:	68 64 01 00 00       	push   0x164
c002f2f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2f4:	e8 1b a0 fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f2f9:	83 c4 10             	add    esp,0x10
c002f2fc:	83 c4 0c             	add    esp,0xc
c002f2ff:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f300 <ATA::~ATA()>:
c002f300:	83 ec 0c             	sub    esp,0xc
c002f303:	ba ec 3a 03 c0       	mov    edx,0xc0033aec
c002f308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f30c:	89 10                	mov    DWORD PTR [eax],edx
c002f30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f312:	83 ec 0c             	sub    esp,0xc
c002f315:	50                   	push   eax
c002f316:	e8 1b c6 fe ff       	call   c001b936 <PhysicalDisk::~PhysicalDisk()>
c002f31b:	83 c4 10             	add    esp,0x10
c002f31e:	90                   	nop
c002f31f:	83 c4 0c             	add    esp,0xc
c002f322:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f324 <ATA::~ATA()>:
c002f324:	83 ec 0c             	sub    esp,0xc
c002f327:	83 ec 0c             	sub    esp,0xc
c002f32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f32e:	e8 cd ff ff ff       	call   c002f300 <ATA::~ATA()>
c002f333:	83 c4 10             	add    esp,0x10
c002f336:	83 ec 08             	sub    esp,0x8
c002f339:	68 7c 01 00 00       	push   0x17c
c002f33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f342:	e8 cd 9f fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f347:	83 c4 10             	add    esp,0x10
c002f34a:	83 c4 0c             	add    esp,0xc
c002f34d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f34e <ATAPI::~ATAPI()>:
c002f34e:	83 ec 0c             	sub    esp,0xc
c002f351:	ba 34 3b 03 c0       	mov    edx,0xc0033b34
c002f356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f35a:	89 10                	mov    DWORD PTR [eax],edx
c002f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f360:	83 ec 0c             	sub    esp,0xc
c002f363:	50                   	push   eax
c002f364:	e8 cd c5 fe ff       	call   c001b936 <PhysicalDisk::~PhysicalDisk()>
c002f369:	83 c4 10             	add    esp,0x10
c002f36c:	90                   	nop
c002f36d:	83 c4 0c             	add    esp,0xc
c002f370:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f372 <ATAPI::~ATAPI()>:
c002f372:	83 ec 0c             	sub    esp,0xc
c002f375:	83 ec 0c             	sub    esp,0xc
c002f378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f37c:	e8 cd ff ff ff       	call   c002f34e <ATAPI::~ATAPI()>
c002f381:	83 c4 10             	add    esp,0x10
c002f384:	83 ec 08             	sub    esp,0x8
c002f387:	68 84 01 00 00       	push   0x184
c002f38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f390:	e8 7f 9f fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f395:	83 c4 10             	add    esp,0x10
c002f398:	83 c4 0c             	add    esp,0xc
c002f39b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f39c <SATA::~SATA()>:
c002f39c:	83 ec 0c             	sub    esp,0xc
c002f39f:	ba f4 3b 03 c0       	mov    edx,0xc0033bf4
c002f3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3a8:	89 10                	mov    DWORD PTR [eax],edx
c002f3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3ae:	83 ec 0c             	sub    esp,0xc
c002f3b1:	50                   	push   eax
c002f3b2:	e8 7f c5 fe ff       	call   c001b936 <PhysicalDisk::~PhysicalDisk()>
c002f3b7:	83 c4 10             	add    esp,0x10
c002f3ba:	90                   	nop
c002f3bb:	83 c4 0c             	add    esp,0xc
c002f3be:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f3c0 <SATA::~SATA()>:
c002f3c0:	83 ec 0c             	sub    esp,0xc
c002f3c3:	83 ec 0c             	sub    esp,0xc
c002f3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3ca:	e8 cd ff ff ff       	call   c002f39c <SATA::~SATA()>
c002f3cf:	83 c4 10             	add    esp,0x10
c002f3d2:	83 ec 08             	sub    esp,0x8
c002f3d5:	68 7c 01 00 00       	push   0x17c
c002f3da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3de:	e8 31 9f fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f3e3:	83 c4 10             	add    esp,0x10
c002f3e6:	83 c4 0c             	add    esp,0xc
c002f3e9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f3ea <SATAPI::~SATAPI()>:
c002f3ea:	83 ec 0c             	sub    esp,0xc
c002f3ed:	ba 18 3d 03 c0       	mov    edx,0xc0033d18
c002f3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3f6:	89 10                	mov    DWORD PTR [eax],edx
c002f3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3fc:	83 ec 0c             	sub    esp,0xc
c002f3ff:	50                   	push   eax
c002f400:	e8 31 c5 fe ff       	call   c001b936 <PhysicalDisk::~PhysicalDisk()>
c002f405:	83 c4 10             	add    esp,0x10
c002f408:	90                   	nop
c002f409:	83 c4 0c             	add    esp,0xc
c002f40c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f40e <SATAPI::~SATAPI()>:
c002f40e:	83 ec 0c             	sub    esp,0xc
c002f411:	83 ec 0c             	sub    esp,0xc
c002f414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f418:	e8 cd ff ff ff       	call   c002f3ea <SATAPI::~SATAPI()>
c002f41d:	83 c4 10             	add    esp,0x10
c002f420:	83 ec 08             	sub    esp,0x8
c002f423:	68 84 01 00 00       	push   0x184
c002f428:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f42c:	e8 e3 9e fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f431:	83 c4 10             	add    esp,0x10
c002f434:	83 c4 0c             	add    esp,0xc
c002f437:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f438 <IOAPIC::~IOAPIC()>:
c002f438:	83 ec 0c             	sub    esp,0xc
c002f43b:	ba 58 3d 03 c0       	mov    edx,0xc0033d58
c002f440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f444:	89 10                	mov    DWORD PTR [eax],edx
c002f446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f44a:	83 ec 0c             	sub    esp,0xc
c002f44d:	50                   	push   eax
c002f44e:	e8 71 bf fe ff       	call   c001b3c4 <Device::~Device()>
c002f453:	83 c4 10             	add    esp,0x10
c002f456:	90                   	nop
c002f457:	83 c4 0c             	add    esp,0xc
c002f45a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f45c <IOAPIC::~IOAPIC()>:
c002f45c:	83 ec 0c             	sub    esp,0xc
c002f45f:	83 ec 0c             	sub    esp,0xc
c002f462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f466:	e8 cd ff ff ff       	call   c002f438 <IOAPIC::~IOAPIC()>
c002f46b:	83 c4 10             	add    esp,0x10
c002f46e:	83 ec 08             	sub    esp,0x8
c002f471:	68 68 01 00 00       	push   0x168
c002f476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f47a:	e8 95 9e fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f47f:	83 c4 10             	add    esp,0x10
c002f482:	83 c4 0c             	add    esp,0xc
c002f485:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f488 <APICTimer::~APICTimer()>:
c002f488:	83 ec 0c             	sub    esp,0xc
c002f48b:	ba a0 3d 03 c0       	mov    edx,0xc0033da0
c002f490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f494:	89 10                	mov    DWORD PTR [eax],edx
c002f496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f49a:	83 ec 0c             	sub    esp,0xc
c002f49d:	50                   	push   eax
c002f49e:	e8 fd d9 fe ff       	call   c001cea0 <Timer::~Timer()>
c002f4a3:	83 c4 10             	add    esp,0x10
c002f4a6:	90                   	nop
c002f4a7:	83 c4 0c             	add    esp,0xc
c002f4aa:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f4ac <APICTimer::~APICTimer()>:
c002f4ac:	83 ec 0c             	sub    esp,0xc
c002f4af:	83 ec 0c             	sub    esp,0xc
c002f4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4b6:	e8 cd ff ff ff       	call   c002f488 <APICTimer::~APICTimer()>
c002f4bb:	83 c4 10             	add    esp,0x10
c002f4be:	83 ec 08             	sub    esp,0x8
c002f4c1:	68 60 01 00 00       	push   0x160
c002f4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f4ca:	e8 45 9e fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f4cf:	83 c4 10             	add    esp,0x10
c002f4d2:	83 c4 0c             	add    esp,0xc
c002f4d5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f4d8 <PIT::~PIT()>:
c002f4d8:	83 ec 0c             	sub    esp,0xc
c002f4db:	ba f0 3d 03 c0       	mov    edx,0xc0033df0
c002f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4e4:	89 10                	mov    DWORD PTR [eax],edx
c002f4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f4ea:	83 ec 0c             	sub    esp,0xc
c002f4ed:	50                   	push   eax
c002f4ee:	e8 ad d9 fe ff       	call   c001cea0 <Timer::~Timer()>
c002f4f3:	83 c4 10             	add    esp,0x10
c002f4f6:	90                   	nop
c002f4f7:	83 c4 0c             	add    esp,0xc
c002f4fa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f4fc <PIT::~PIT()>:
c002f4fc:	83 ec 0c             	sub    esp,0xc
c002f4ff:	83 ec 0c             	sub    esp,0xc
c002f502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f506:	e8 cd ff ff ff       	call   c002f4d8 <PIT::~PIT()>
c002f50b:	83 c4 10             	add    esp,0x10
c002f50e:	83 ec 08             	sub    esp,0x8
c002f511:	68 5c 01 00 00       	push   0x15c
c002f516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f51a:	e8 f5 9d fe ff       	call   c0019314 <operator delete(void*, unsigned long)>
c002f51f:	83 c4 10             	add    esp,0x10
c002f522:	83 c4 0c             	add    esp,0xc
c002f525:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be db 2b 03 c0       	mov    esi,0xc0032bdb
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be f7 2b 03 c0       	mov    esi,0xc0032bf7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
